unifying proof methodologies duration calculus timed linear temporal logic linear temporal logic ltl widely used specification verification reactive systems standard model sequences states state transitions formulas describe sequencing state transitions ltl used model realtime systems state extended time stamp record state transition takes place duration calculus dc another well studied approach realtime systems development dc models behaviours system functions domain reals representing time system states paper extends time domain cartesian product real natural numbers extended time domain provide chop modality nonoverlapping interpretation allows linear temporal operators explicitly dealing discrete dimension time derivable chop modality essentially way continuoustime counterparts classical dc provides nice embedding timed ltl tltl modalities dc unify methods dc ltl realtime systems development requirements high level design decisions interval properties therefore specified reasoned dc properties implementation well refinement relation two implementations specified verified compositionally inductively ltl implementation properties related requirement design properties rules lifting ltl formulas dc formulas b introduction dc born denotational approach zhr91 system modelled within conventional dynamic systems framework states functions time nonnegative reals observing system dc takes continuous global view property time point observed neighbourhoods time point boolean state observed duration bounded interval ie integral indicator function property interval specified arithmetical relation among durations states real numbers paper appear formal aspects computing specifying reasoning requirements high level designs embedded realtime hybrid systemsrrh93 ors96 liu96 rehr98 dynamic systems model beneficial focuses relevant observable states furthermore interval logic simple interpretations timing diagram states requirements thus focus sequencing durational relations observable states rather sequencing individual state transitions properties isolated time points dense time domain considered unobservable ignored high level therefore transitions observed indirectly relation among states left right neighbourhoods transition point typical realtime property requirement bounded critical duration property every interval bounded length duration state p c time units dc nicely expressed however dealing implementation represented state machine automaton abstract program bit cumbersome dc apply structural induction transitions also level abstraction stronger assumptions may made timing example finite number state changes may occur simultaneously point time though specified order therefore properties realtime point becomes significant level seems advantage change logic focused properties transition sequences linear temporal logic introduced pnu77 mp81 specifying reasoning reactive systems modelled transition systems kel76 properties transition system qualitative safeness invariance responsiveness properties transition systems ltl used successfully specification verification reactive systems see eg mp92 expressive enough systems realtime constraints bounded invariance bounded responsiveness realtime introduced transition systems either associating lower upper bounds enabled transitions lam77 introducing explicit clocks ad90 al92 first approach led extensions ltl bounded operators koy89 ah90 second used ltl explicit clocks ph88 al92 relationship two approaches less one translated another investigated hmp94 advantage ltl frameworks transition systems quite close implementation using digital hardware thus reflect semantics programming languages another advantage invariance properties time bounded properties easily checked structural induction transitions cases properties may even checked mechanically however systems behaviour observed within frameworks looking state transitions step step approach therefore inherently operational less abstract dynamic systems based framework instance properties relate states across several transitions expressed using auxiliary state variables clock variables good example general denotational approach reflects engineering disciplines requirement specification system design verification operational approach reflects engineering disciplines component de sign refinement analysis contribution work feasible link two frameworks based preliminary results lrl98 much simpler introduction superdense time trajectories ltl dc framework overview section 2 presents syntax semantics proof system combined logic extends time domain set nonnegative reals r 0 twodimensionaldomain r 0 thetan second dimension discrete set natural numbers n behaviour realtime system ie timed transition systems defined set functions called trajectories time domain pairs states system extend basic dc ie dc zhr91 introducing actions tla describe state transitions following sections show logic used specify reason state properties transitions time point supports methods dc ltl 1 dcstyle requirement high level design specification reasoning 2 ltlstyle operational structural inductive proof methods lower level properties 3 stepwise refinement one implementation another particular section 3 recapitulates logic used dcstyle specification verification high level properties section 4 introduces timed transition systems tts computations trajectories section 5 shows logic supports ltlstyle specification properties tts section 6 recapitulates structural induction rules hmp94 timed transition systems remain valid extended logic main contribution section 7 establish relation specifications two styles section 8 illustrates proof refinement methodologies implementation level within tts framework linked dc methods used high level specification reasoning finally section 9 concludes discussion results 2 logic logic defined terms syntax semantics proof system 21 syntax original dc zhr91 consider syntactic categories states terms formulas since also consider state transitions shall introduce category actions states state values state variables dynamic system take moment time use individual state variables pi set state variables set states syntactically denoted predicate state variables values ranges rigid logical variables eg state variables x ranging natural numbers examples states use state predicates set state predicates denoted state actions state transition consists pair states described action predicate state variables primed versions x contained set pi 0 examples x unchanged changes arbitrary value x change sum difference current values x respectively use actions note state predicates subset actions actions use primed variables terms term means interval duration term rather term state variables values given interval time denotes real value thus set term duration terms generated durations r closed real arithmetic operators use denote duration terms formulas shall describe duration properties interval well state changes time point implementation two kinds elementary formulas action formulas duration formulas action formula simply denoted action duration formula first order predicate duration terms eg r r r r r use stand elementary duration formula general duration formula f constructed elementary formulas using first order connectives chop modality simplicity paper shall use logic capture abstract liveness fairness properties would require use expanding modalities found zh96a lrl97 choose stay core duration calculus sufficient purpose reasoning safety bounded liveness properties 22 semantics subsection defines semantics logic domain trajectories time time domain time def n position time denote ps successor positions ordered lexicographic ordering ht 1 also use corresponding reflexive relation def two positions p 1 p 2 set positions g set time intervals denoted intv trajectories let sigma set possible mappings state variables pi values oe 2 sigma x pi oex denotes values assigned variables trajectory sigma sigma position p 2 time use ae 1 p ae 2 p denote pair aep represents state transition taking place p trajectory ae must satisfy following conditions 1 2 ae finitely variable ie bounded time interval ha mi hb ni finite number state changes means exists finite number positions ht 1 b set fae 1 singleton usual model ltl tla trajectory consists singleton states duplicate successor state current state order use nonoverlapping definition chop operator trajectory ae sigma observation interval p consists pairs g particular real time point every observation interval ht finite nonempty sequence aet state transitions states trajectory ae define value state predicate p position p p false ae 1 p terms meaning term trajectory ae real valued interval assume meaning function symbols gamma etc associated functions real arithmetic meaning duration r p given thus duration ignores discontinuous positions existence guaranteed finite variability trajectory 1 duration constant state true ie r true denotes length abbreviated def r true action formulas manna pnuelis ltlmp92 lamports temporal logic actions tla lam94 action pi pi 0 interpreted state transition oe oe 0 true iff true oe oe 0 called step action lifted temporal formula interpreted sequences states paper lift action interval formula action satisfied trajectory ae observation holds first position observation true state predicate p special action refer primed variables semantic definition action implies p holds trajectory ae observation holds first position observation action enabling condition state predicate denoted en true state oe state oe 0 oe oe 0 step set primed variables treated rigid variables definition duration formulas meaning duration formula defined terms satisfaction trajectory ae interval p denoted ae p assume standard meaning relational operators reals example 1 logic unchanged r p defined ndt general formulas present semantics chop modality leaving first order connectives standard interpretation given trajectory ae interval b e formula f 1 f 2 satisfied ae b e iff middle position b oe e f 1 satisfied ae b f 2 satisfied ae chop overlapping position therefore single position ht ki cannot chopped formula f satisfied trajectory ae written ae holds interval b e f valid written satisfied ae sigma abbreviations following useful operators dc ltl defined operators given almost everywhere r hoare triple fpgfqg def primed version q somewhere 3f def modality 3 ordinary dc expressed last subformula true f true however presence positions nonoverlapping chop necessitate three cases 23 proof system easy see logic validity axioms rules first order predicate logic remain valid reasoning action formulas present axioms rules chop duration axioms chop semantic definition chop operator associative distributive 9 monotonic axiom 2 v free f axiom 3 false f false f false false axiom 4 state predicate p rule soundness rule like rule 1 means satisfaction premises line given ae implies satisfaction conclusion line ae therefore infer validity conclusion premises axioms durations validity one axioms rules original dc durations preserved semantics logic following axiom 6 axiom 7 axiom 8 axioms original dc remain valid axiom 9 original axiom r r r positions excluded axiom 10 new introduced characterize point interval axiom 6 r axiom 7 r axiom 8 r r r r r r r fld e five axioms infer superdense property time domain 0 also expected finite variability ensures soundness original dc induction rules induction rule rd e holds rx x dperx x dpe provable rx rtrue holds induction rule ii rd e holds rx dpe provable rx rtrue holds rules used prove following theorems state 1 true dpe true dpe e 2 finite variability assumption formalized following nonlogical axioms p state predicate axiom relative completeness proof durations found hz97 carry smoothly new logic seems also plausible completeness results interval logic applicable 3 requirement design specifications applications dc realtimes systems zhr91 rrh93 rav95 show formulating requirements actual system decided relevant state variables procedure generally identify safe unsafe patterns behaviour yardstick properties consider duration specifications following bounded critical duration property p occur c time units within time window time units r important special case unbounded weak invariance property e dpe equivalent r bounded response every occurrence p followed later time units occurrence q special case dpe equivalently dpe asserts p never lasts time units minimal separation property cannot hold p stable least l time units since change p state specially useful case minimal separation occurrence p following p must stable least time units often minimal separation given formula dqe r p however deduced pure form using monotonicity since dqe dpe dre implies dpe dpe dpe side conditions bounded critical duration related bounded response minimal separation following rule rule 3 dpe rule 3 sound following implication proved 1 2 stand two premises c stands conclusion gas burner take gas burner example rrh93 lam93 illustrate requirement design specifications dc case study formulates safety requirement gas burner terms variable leak denoting undesirable unavoidable state represents presence unlit gas safety gas must never leak 4 seconds period 30 seconds specified bounded critical duration property r meet requirement req two design decisions made des 1 des 2 des des 1 bounded response property saying occurrence leak must stopped within 4 seconds des 2 minimal separation property saying leak stopped may reoccur within 26 seconds rule 3 derive correctness design ie trajectory ae satisfying des satisfies req traditionally des implemented realtime automaton realtime program p implementation described dc formula dp correctness implementation verified proving dp des dc however dp general big formula direct proof dc far easy shall deal difficulty adopting compositional induction proof techniques tts framework 4 transition systems section commences overview untimed transition systems generally used abstract model reactive systems untimed transition systems extended model realtime reactive systems imposing timing constraints transitions qualitative fairness requirements transitions replaced quantitative lowerbound upperbound realtime requirements exposition uses terminology hmp94 however trajectories given terms sequence pairs order consistent definition previous section 41 untimed transition systems transition system consists four components 1 pi finite set state variables 2 sigma set state functions pi 3 theta state predicate called initial condition defines subset sigma called initial states 4 finite set state transitions actions sigma action holds states 0 often written computation execution run transition system infinite sequence satisfies following two conditions initiation oe 1 consecution 0 oe 2 stuttering step action oe 1 diligent step thus computation either contains infinitely many diligent steps terminates infinite stuttering suffix set computations stuttering closed infinite state sequence oe computation program state sequence obtained oe adding deleting finite number stuttering steps stuttering closure key relate system specifications models al91 different level abstractions refinement mappings 42 timed transition systems incorporate time transition system model assuming transitions happen instanta neously realtime constraints restrict times transitions occur timing constraints require transitions performed neither early late example valve controller accept opened quickly slowly closing describe timing constraints action system given lower time bound l upper time bound u lower time bound value r 0 upper time bound either value r 0 special symbol 1 denotes absence upper bound real number r 0 assumed less 1 lower bound assumed exceed upper bound transition timed transition system consists underlying transition system two functions l u defining transition time bounds transition computation trajectory sigma satisfies following conditions 1 initiation aeh0 0i satisfies theta 2 consecution position p either ae 1 p 2 ae 1 p later case say step taken position p oe 3 timing constraints lower bound taken position p must exist position p 1 p 1 p position p 2 enabled p 2 taken position p 2 upper bound enabled position p exists disabled p 1 taken position p 1 trajectory ae satisfies first two condition trajectory underlying transition system traj set trajectories timed transition system easy prove isomorphic respect initial condition transitions let transition system formula f valid satisfied iff trajectory ae 2 satisfies f valid formula svalid given system converse necessarily hold fact svalid state assertion p may falsified states never occur trajectory show given system meets specification f enough show f svalid proof rule said sound given tts svalidity premises implies svalidity conclusion sound rule rule 1 rule 3 obviously ssound tts model gas burner intuitively design des gas burner modelled tts gb 1 two states leak leak problem formally prove tts satisfies des formally refine gb 1 5 ltlstyle specification transition systems yardstick properties timed transition system include bounded invariance properties bounded progress properties properties structural induction proof rules given hmp94 using timed linear temporal logic tltl section shows properties incorporated extended dc framework state predicate p invariant transition system p holds position interval trajectories thus unbounded invariance property form 2p p invariant transition system iff p implied theta p preserved actions let fpgt fqg hold iff fpgfqg holds 2 induction rule proving invariant given mp81 still ssound interval logical setting ie transition system satisfying premises also satisfies conclusion induction rules proving untimed properties leave paper focus time bounded properties expressed duration formulas hmp94 interested proving boundedinvariance boundedresponse properties thus restrict following bounded temporal formulas primitive formulas actions linear temporal formulas boolean connectives every boolean combination temporal formulas temporal formula boundedeventually formulas oe temporal formula u 2 r 0 3 u oe temporal formula true trajectory ae initial position ht position ni holds suffix ae starting p thus define boundedunless formulas p state properties oe temporal formula l 2 r 0 p ul oe temporal formula true trajectory ae iff p holds initial position ht ae either p holds positions ae position p holds suffix starting p p holds every position q oe p formula thus defined also denote p ul true 2 l p l 0 define 2 0 p true general l 2 r 0 2 l p 6 induction rules section use convention letters p q r well denote state formulas indexed versions denote actions oe stand temporal formulas start bounded invariance properties bounded invariance property asserts state occurs condition holds continuously certain amount time property specified temporal formula form p therefore prove bounded invariance property often prove bounded unless property five main rules bounded unless hmp94 given table 1 still ssound setting r oe table 1 rules bounded unless bounded progress property asserts p occurs q must occur within certain amount time thus specified form p ssound rules bounded progress properties hmp94 brought framework given table 2 table 2 rules bounded progress 7 linking rules ready provide sound rules link temporal properties dcinvariance prop erties dcbounded response properties dcminimal separation properties rules presented form premises rule temporal formulas including first order predicates conclusion formula dc indicates dc property derived tltl properties verified structural induction rules dcinvariance property e dpe weaker temporal invariance property 2p dcbounded response property form dpe asserting p must followed within u time units occurrence q proved following linking rule minimal separation property described dcformula form asserts cannot hold p stable least l time units since change p state using bounded unless properties prove minimal separation property following link oe rule inductive sense oe temporal formulas may linked dc formulas first premise ensures pattern dpe dpe oe collapse premise second line says state sequence pattern proceed p lasting least l 1 time units followed p state oe pattern premise third line ensures p lasts least l 2 time units last two premises rule may combined one however one second line established used establish last one rule u css special case l dpe often used case rule becomes 8 implementation refinement gas burner section illustrates linked methods development gas burner first show timed transition system gb 1 given section 4 satisfies specification des section 3 show gb 1 refined implementation may ignition failure finally present implementation des tolerates ignition flame failures theorem 1 timed transition system gb 1 section 4 satisfies des proof des 1 deduced link2 premises des 2 follows link3 0 t2 l 26 proof thus completed following lemma 1 lemma 1 time transition system gb 1 satisfies following tltl properties proven applying 3 ss 1 4 following premises obviously valid untimed ltl proof system 3 established 2 applying u css 2 l 2 implementation ignition detection initial implementation gb 1 refined traditional tts framework example transition system gb 2 figure 1 refinement gb 1 goidle idle heaton purge burn flon figure 1 refinement gb 1 gb 2 following phases idle await heat request gas ignition enters purge within e time units heat request parameter e example system wide upper bound reactions 2 purge pauses seconds enters ignite1 within e time units ignite1 turns ignition gas one second exits within e ignite2 ignite2 monitors flame sensed within one second burn entered otherwise returns idle within e turning gas rrh93 lam93 lower bound also given needed proving correctness design burn ignition switched gas still burn phase stable heat request goes gas turned idle entered within e refinement uses simple error recovery return idle ignite2 assume flame failure burn phase therefore implementation leak occur ignite1 ignite2 phases convention value variable x changed transition names x 0 formal definition refined transition system gb 2 follows theta def phase ignition ignition goidle time bounds given figure 1 let leak 1 hold iff phase ignite1 holds leak 2 hold iff phase ignite2 holds following present properties two leak states gb 2 correspond properties leak proof routines gb 1 theorem 2 gb 2 refines gb timed transition system gb 2 satisfies proof 3 ss e establish 3 ss e establish 3 tran 11 21 give us obviously satisfied 3 established proof similar one 3 lemma 1 using 22 leak 1 leak 2 following corollary proved way theorem 1 proved leak corollary 1 timed transition system gb 2 following properties e 1 property gb 2 property gb 1 des des des des 22 proofs des 11 des 21 proof des 1 gb 1 proofs des 12 des 22 des 2 gb 1 theorem 1 using linking rules proof theorem 1 corollary 1 corollary corollary 2 timed transition system gb 2 following properties e 1 property gb 2 property gb 1 leak gb 1 req leak gb 1 interesting notice req gas burner already deduced corollary 1 theorem also deduced corollary 2 valid formula r r r implementation flame failure flame may disappear phase burn add another simple error recovery procedure enters idle burn switching gas formally redefine action goidle gb 2 goidle let leak 3 denote phase burn flame corresponding timed transition system gb 3 satisfies corollary 2 following property req form req abstract state leak gb 1 proved proof routine req proved gb 1 let leak disjunction leak 1 leak 2 leak 3 valid formulas r r r r r gives following correctness theorem theorem 3 correctness gb 3 assume e 23 transition system gb 3 satisfies requirement req gas burner system however mention gb 3 refinement gb 1 gb 2 implement des meet des 2 9 conclusion discussion paper presents logic combine original duration calculus approach zhr91 linear temporal logic approach hmp94 lam93 specification verification embedded realtime systems main idea use dc specification system requirements initial design use tts implementation refinement combination provides advantage dc directly modelling conventional dynamic systems state functions time advantage tts modelling computation reactive systems rules linking two level specifications given easy see set computations tts terms trajectories isomorphic set computations defined hmp94 within framework play games dc high level obtain initial design corresponds simple tts refine design totally within tts framework supports formal verification refinement two ttss lam94 al91 step step obtain implementation coded program approach illustrated solving gas burner example advantage combined approach becomes obvious compare solution single dc framework rrh93 solution single tltl framework lam93 specifications system different levels simpler better structured proofs correctness systems different levels easier directly reflect structural induction step refinementimplementation concrete states eg lower level reasoned way corresponding abstract state eg leak gb 1 higher level combined logic allows us describe multiple instantaneous transitions time point purpose zhou hansen zh96b xu xu97 introduce densechop operator define meaning sequential composition state transitions densechop operator defined different computation models two papers however approaches intermediate states sequentially composite statement hidden thus semantics x x 3 nice property approaches used deal concurrent systems shared variables however shared memory based models ttss semantics quite different x 3 k x 0 approach paper defines dc terms trajectories transition systems define satisfaction relation duration formula transition system paper improved earlier work lrl98 redefining trajectories semantics chop operator allowed us drop notation stepcounter variable treat state predicate naturally special action work paper includes development full logic perhaps based neighbourhood modalities zh96a would provide complete interval logic extending modalities abstract liveness fairness properties treated foresee major changes extension another application would apply linking techniques tlaframework lam94 ideally putting combined logic rules one existing duration calculus verification assistants see major technical problems consolidation effort r automata modelling realtime systems existence refinement mapping temporal proof methodologies timed transition systems duration calculus logical foundations formal verification parallel programs specifying message passing timecritical systems temporal logic proving correctness multiprocess programs hybrid systems tla temporal logic actions specification verification duration calculus compositional inductive verification duration properties realtime systems verifying duration properties timed transition systems temporal framework concurrent programs temporal logic reactive concurrent systems specifica tion refining system requirements program specifications applications temporal logic specification realtime systems temporal logic programs design embedded realtime computing systems engineering realtime systems experiment hybrid control specifying verifying requirements realtime systems semantics verification extended phase transition systems duration cal culus adequate first order interval logic chopping point calculus durations tr