adaptive dissemination data timecritical asymmetric communication environments proliferation new dataintensive applications asymmetric communication environments led increasing interest development pushbased techniques information broadcast large population clients order achieve efficient use limited server communication resources important note quite often data broadcast timecritical nature related current research focuses pure pushbased approach broadcast disks model transmission data done without allowing explicit requests users recently bidirectional models incorporating lowcapacity uplink channel proposed order increase functionality broadcast disks model however impact integration uplink channel investigated using static client profiles ignoring existence timesensitive data none existing models integrates characteristics needed perform effectively realworld dynamic timecritical asymmetric communication environment paper present adaptive data dissemination model associated online scheduling algorithms improve functionality performance bidirectional broadcast models maximizing total number satisfied users asymmetric communication environments dynamic client profiles time requirements eg mobile systems achieved means dynamic adaptation broadcast program needs users taking account bandwidth constraints inherent asymmetric communication environments deadline requirements user requests performance evaluated simulation realtime asymmetric communication environment b introduction growing need information servers capabilities handle large amounts information accessed potentially unlimited number users asymmetric communication environments eg traffic information stock quotes weather news volume information transmitted server users much larger volume information transmitted users server environments cases users require information certain time therefore adequate model integrate ability serve information deadline constraints associated requests data refer timecritical asymmetric communication environments example let us consider traffic information server driver vehicle point ahead road needs take one two possible routes order get destination obviously necessary server provide driver desired traffic information example one routes congested accident decision point reached otherwise information value driver one way try meet needs applications use classic clientserver model unfortunately suffers lack scalability beyond certain workload server becomes overwhelmed able serve certain number requests per time unit due resource bandwidth limitations fact becoming important problem internet world world wide web servers based pullbased scheme cannot cope demands increasingly large population clients side spectrum bandwidthefficient data broadcast models proposed 1 provide high scalability broadcasting information simultaneously large population users using single highcapacity downlink channel servertousers weaknesses found pure broadcast models result absence direct interaction users two main problems could stated follows ffl users access patterns static eg due mobility users impossible decide data items broadcast order satisfy many users possible given moment ffl timecritical asymmetric communication environments information must received certain deadline general data broadcast models provide mechanisms ensure time requirements met attempt solve problems bidirectional broadcast models studied 2 17 trying exploit one hand benefits derived high bandwidth efficiency scalability data broadcasting hand direct interaction users clientserver paradigm bidirectional schemes based incorporation lowcapacity uplink userstoserver channel devoted transmission requests made explicitly users satisfied broadcast program bidirectional broadcast models hybrid exist two different information transmission modes periodic broadcast mode information broadcast periodically ondemand broadcast mode devoted broadcasting information explicitly requested users via uplink channel unfortunately hybrid model deadline constraints taken account 17 adaptive information broadcast periodically fraction bandwidth allocated mode change time consequently none existing models adequate environments user access distribution static timing constraints present case realworld mobile systems paper addresses lacuna introduces timecritical adaptive hybrid broadcast model extends functionality performance current hybrid models means online scheduling algorithm takes account access frequency distribution data bandwidth limitations uplink downlink channels deadline constraints associated data requests order minimize overall number deadlines missed information server dynamically adapts specific data items broadcast periodically b amount bandwidth assigned transmission mode adaptation amount contents information broadcast periodically data timecriticality needs users instant time dramatically improves performance nonadaptive hybrid models environments dynamic access distributions present remainder paper organized follows section 2 states main issues considerations designing information server timecritical asymmetric communication environment section 3 discusses related work description adaptive hybrid data broadcast model presented section 4 adaptive scheduling approach also detailed section 5 presents analyzes results experimental study finally section 6 summarizes concludes paper issues considerations let us begin explicitly stating characteristics information server include order perform effectively timecritical asymmetric communication environments ffl high bandwidth efficiency due inherent bandwidth limitations asymmetric communication environments server must use available bandwidth maximum efficiency order satisfy many users possible deadlines ffl high scalability client population may grow without limits need server model capable satisfying extremely large number users simultaneously without incurring significant performance penalties ffl adapting changing user profiles client population change time situations eg mobile environments means server able adapt diverse access patterns ffl awareness deadline requirements many applications information must reach user certain deadline order useful server must incorporate appropriate mechanisms take account timing constraints want ensure first two characteristics satisfied broadcastbased information server reasonable option consider key point broadcasting information bandwidth effect multiply used single transmission given piece information reach unlimited number users order provide adaptiveness broadcast server use available bandwidth satisfy many clients possible broadcasting right information situation time user profiles may change server needs feedback actual users estimate actual user access pattern consequently broadcast server bidirectional incorporating uplink channel users server thus server model must following capabilities turns satisfied adopting hybrid model ffl potential use uplink bandwidth effectively clearly items included periodic broadcast program requested assuming index information interleaved broadcast users consult index check information need already broadcast periodically would receive time sending request server decreases number requests sent server decreasing probability saturation uplink channel ffl potential use downlink bandwidth effectively achieved periodically broadcasting heavilydemanded items periodic broadcast frequently demanded items likely satisfy large number users via single transmission remaining items requested broadcast demand ffl capability handling deadline requirements adequately hybrid model viewed two separate logical servers first one prioritizes data items based relative popularity resulting efficient usage bandwidth second one prioritizes data items based relative deadline constraints trying send information users time need proceed state three main issues address designing adaptive hybrid broadcast model work dynamic timecritical asymmetric communication environment ffl fraction total available bandwidth allocated broadcast mode amount bandwidth assigned logical server adjusted dy namically depending actual user access frequency distribution tradeoff relative importance given popularity deadline constraints ffl data items broadcast periodically ones broadcast requested explicitly intuitively item broadcast periodically potential bandwidth saving respect broadcasting ondemand ffl periodic ondemand broadcast programs computed know items worthwhile broadcasting periodically decide relative broadcast frequencies compute periodic broadcast program accordingly similarly ondemand broadcast schedule needs constructed adaptive hybrid broadcast model presented paper addresses issues periodic broadcast program dynamically computed percycle basis server includes items likely produce bandwidth saving broadcasting periodically items periodically broadcast broadcast frequencies consequently amount bandwidth left ondemand mode depend actual access frequency distribution deadline constraints associated data amount bandwidth assigned mode changes adapt actual user access pattern trying minimize total number deadlines missed indexing periodic broadcast program used order avoid large number requests coming server periodic broadcast program computed dynamically trying address needs users number requests coming via uplink channel greatly reduced congestion much less likely 3 related work traditional broadcast disks bd model 1 server periodically repeats offline computed broadcast program based previously known user access patterns broadcast cycle defined one transmission periodic broadcast program broadcast program static one downlink channel used main disadvantages approach lack adaptation current population demands feedback clients server impossibility guaranteeing meeting deadline constraints current clients potential waste bandwidth derived offline decision items broadcast corresponding broadcast frequency bd model extended 2 providing push pull data dissemination integrating uplink channel nevertheless hybrid model bandwidth assigned two broadcast modes statically adaptation current workload contents periodic broadcast change time addition data requests associated deadlines 15 16 model adapting allocation bandwidth periodic ondemand modes proposed work tries provide adaptation order minimize average data access latency minimize number requests arriving server broadcasting periodically demanded items providing rest items demand clients listen broadcast first make request data item needed periodic broadcast program requests served sooner later information requests associated deadline constraints similarly 12 adaptive algorithm statistically selects data broadcast based user profiles presented items added dropped periodic broadcast based relative popularity long requests ignored expected time client requesting item stay domain server deadline constraints integrated bd model 6 7 9 server tries compute periodic schedule provides worstcase guarantees even event failures data updates however model bidirectional uplink channel consequently server periodically broadcasts items based static estimation potential user population actual workload 10 reliable multicast protocol proposed incorporating special encodingdecoding scheme make effective use channel face high packet loss corruption rates model appropriate applications must reliably distribute bulk data large number clients lossy channels bidirectional contents digital fountain decided dynamically clients allowed make requests another protocol integrates loss probability analyzed 3 case 16 timing constraints considered objective minimization total average latency closer work hybrid broadcast ondemand bod model presented 17 extension traditional broadcast disk model bod integrates two separate channels one highcapacity channel broadcasting server users one lowcapacity channel allows users transmit requests server request associated unique identifier corresponding information requested deadline maximum tolerable latency receive information bod combines periodic broadcasts ondemand data dissemination time division multiplexing used server using fixed fraction available bandwidth periodic broadcast remaining bandwidth ondemand processing one important parameter hybrid models total broadcast cycle length global period broadcast total broadcast cycle length cycle number sum lengths one cycle periodic broadcast length corresponding bandwidth assigned ondemand processing cycle broadcast length cycle broadcast length cycle demand length cycle nonadaptive models eg bod broadcast length cycle depends number items periodically broadcast relative broadcast frequencies periodicondemand bandwidth ratio bod model assumes server cognizant data access distribution advance according information using fixed fraction bandwidth available periodic broadcast server decides priori items broadcast typically frequently accessed ones rate creating offline fixed layout frequently accessed items broadcast often copies data item placed evenly separated trying minimize number deadlines missed precomputed layout periodically broadcast using fraction bandwidth corresponding periodic broadcast mode therefore periodic cycle length total broadcast length vary time bod adaptive dynamic workloads assumed access distribution remain constant bd bod large amount bandwidth likely wasted periodic broadcast program static offline computed access patterns differ actual ones also broadcast frequency related deadline distribution items timecritical adaptive hybrid data dissemination model objective broadcast given item minimum frequency necessary satisfy potential requests item given requests deadlines user request patterns vary time time end adaptive approach taken model adjusts broadcast length one cycle next respond user request patterns fact set data items broadcast periodically cycle b amount bandwidth assigned transmission mode specifically p eriodic broadcast length cycle demand length cycle could differ cycle next adapt needs clients summarize table 1 list features different models described new timecritical adaptive hybrid broadcast model adaptive timing constraints bidirectional real adaptive broadcast 11 new adaptive hybrid broadcast yes yes yes table 1 comparison broadcast models observe none existing models integrates characteristics needed perform effectively realworld dynamic timecritical asymmetric communication environ ment timecritical adaptive hybrid model last row table 1 detailed next section encompasses also considers important effect uplink channel saturation something addressed models 4 timecritical adaptive hybrid data dissemination section present time critical adaptive hybrid broadcast tcahb model scheduling approach start overview followed approach taken classify data items periodic broadcast ondemand broadcast followed details scheduling algorithms dynamically compute periodic broadcast program process ondemand broadcast finish section explaining sampling technique used server estimate actual user access frequency distribution 41 overview tcahb specific data items broadcast periodically b amount bandwidth assigned transmission mode change dynamically adapt needs clients server performs adaptation percycle basis order use available bandwidth efficiently possible consequently minimize total number unsatisfied users end broadcast cycle server classifies data items deciding ones broadcast periodically next broadcast cycle decision depends access distributions observed previous broadcast cycle amount bandwidth needed broadcast item periodically see shortly amount related deadline constraints associated item server computes periodic broadcast program next cycle leaving bandwidth ondemand broadcast computed dynamically item included periodic broadcast program server expects save bandwidth compared broadcasting item upon request assuming bandwidth available ensure always minimum fraction bandwidth left ondemand broadcast mode order prevent items included periodic broadcast program starving broadcast frequency periodically broadcast item minimum needed satisfy deadlines associated potential requests item computing periodic broadcast program according classification items broadcast frequencies server assigns remaining bandwidth ondemand broadcast broadcast mode online scheduling algorithm used prioritize requests according relative deadlines consequently minimize number unsatisfied requests coming via uplink channel note periodic broadcast program computed end cycle whereas ondemand broadcast scheduled dynamically requests received users scalability hybrid broadcast model compromised number requests scheduled server capacity uplink channel ideally want small percentage users issue requests via uplink channel due following reasons ffl capacity uplink channel limited inherent asymmetry communication environment sense model channel saturation percentage requests fail come uplink channel contentionbased protocols beyond certain request rate channel becomes congested number requests arriving successfully server increases exponentially due high probability collisions decreasing effective capacity uplink channel example uplink capacity kbps every request example 150 bits 200 requestssec accommodated uplink channel rates 200 requestssec percentage requests unsuccessful due channel saturation consequently goal avoid large number requests coming server using periodic broadcast program satisfy many users possible ffl every request arrives server scheduled inserted priority queue request insertion cost ologn per scheduled request n number requests queue cost important servers computing power high enough interval time page broadcast server first look current schedule find next page broadcast access information corresponding particular page also scheduling new requests remain scheduled beyond certain number requests scheduled server simply becomes overwhelmed cannot complete scheduling requests addition length request queue limited many requests arrive discarded number unsatisfied requests also increase assuming indexing technique used help users know broadcast every user supposed first listen broadcast check index issue request desired item broadcast periodically model index interleaved data broadcast many times broadcast cycle order decrease time needed client receive index tradeoff overhead caused transmission frequency index time users wait receive copy index several bandwidth efficient indexing techniques eg 13 keep index bandwidth requirements low assume index transmission incur considerable overhead delay experienced user waiting index received also small due fact large number users satisfied periodic broadcast program issue requests impossible server know exact user access distribution accurate periodic broadcast program less information server user access distribution problem server receive information number users satisfied periodic broadcast program therefore unable know items removed program access frequency decreased see section 44 problem overcome using sampling technique basically stops broadcasting items included periodic broadcast short time intervals result receipt requests items server estimate actual access frequencies requests information needed dynamically adjust periodic broadcast program needs actual users 42 classification data periodic ondemand broadcast tcahb server considers item one two states given time ffl periodic included current periodic broadcast program ffl ondemand included current periodic broadcast program end broadcast period server updates status every item depending estimated access frequency distribution bandwidth required include periodic broadcast program intuitively items high access frequency low bandwidth requirements broadcast periodically order minimize number unsatisfied requests however bandwidth limited server may able broadcast periodically items whose access frequency high bandwidth requirements low problem determine allocation bandwidth periodic ondemand broadcast depend total workload server low workload situations items relatively low access frequency high bandwidth requirements disseminated ondemand pullbased dissemination whereas overload conditions large number items periodic pushbased dissemination order satisfy many requests via single transmission solution fairly simple server include given item periodic broadcast likely save bandwidth long still predetermined minimum amount bandwidth left ondemand broadcast order know exists potential bandwidth saving classifying item periodic server needs compute first bandwidth requirements item depends broadcast frequency section 422 show calculate bandwidth requirements item broadcast frequency minimum needed satisfy deadlines associated potential requests item first 421 detail approach taken select specific items bandwidth order prevent starvation items broadcast ondemand keep bandwidth transmitting index example bw threshold would 09 want reserve least 10 available bandwidth ondemand mode index worst case greedy strategy solving 01 knapsack problem consists taking first item greatest value per pound second one etc space left knapsack another item unfortunately guarantee optimal solution weights small compared total capacity knapsack solution nearly optimal fortunately solution described optimal almost every situation see shortly additional condition stops adding items items worth broadcasting periodically note amount bandwidth devoted periodic consequently ondemand broadcast adapt different conditions cases amount bandwidth taken periodic broadcast program less equal bw threshold upper limit situations less bw threshold strong overload conditions server use available bandwidth periodic broadcast schedule case number items periodically broadcast increases considerably case chances coming optimal solution much higher thus data item could define priority number requests received item last broadcast period divided bandwidth required broadcast item periodically equivalent giving priority items likely satisfy requests per bandwidth unit ready specify adaptation algorithm executed server end broadcast period 1 calculate bandwidth requirements item suppose every item certain size pages units data broadcast n items scheduled periodically sizes relative deadlines associated requests defined follows 2 data item calculate estimated priority number deadlines expected met per bandwidth unit included periodic broadcast program requests received required rank items according priorities highest priority item one maximum expected number deadlines satisfied per bandwidth unit 3 consider items according priorities starting highest priority item inclusion periodic broadcast item proceed follows check worth broadcasting item number requests received item last cycle exceeds cutoff threshold cutoff threshold number times would broadcast item broadcast cycle item classified periodic equals last broadcast cycle length divided deadline item rationale expect receive less requests number copies item going lay would waste bandwidth consider periodic b item worth broadcasting check total bandwidth required far still bw threshold add item periodic broadcast program total bandwidth required remains bw threshold status item considered periodic following period go back step 2a next item checked total bandwidth required exceeds bw threshold proceed step 3 summarize items periodic next broadcast period highest priority items given conditions hold required bw threshold 1 requests received cutoff threshold 4 step 2 used certain portion bandwidth periodic broadcast exceed bw threshold rest bandwidth used satisfy requests received via uplink channel detailed section 44 421 computation periodic broadcast program assuming server knows priori deadline distribution every item relaxing assumption assume minimum deadline value known item possible clients allowed request information using set predetermined deadline values first approach could broadcast given item period equal value minimum deadline however guarantee deadlines met item difference two consecutive broadcasts item worst case twice deadline minus size item periodic layouts guarantee given item scheduled per period worst case scheduled beginning period next time end period would convenient compute schedule guarantees deadlines met every item included periodic broadcast program show possible items scheduled pfair manner 4 5 8 exist algorithms total bandwidth required threshold depends specific algorithm used able efficiently compute periodic schedule guaranteed subsequence pages contains least pages corresponding item periodic schedule said pfair schedule provides fairness proportionate progress allocation resource downlink channel set items considered scheduling problem want solve formally stated follows given multiset fs ordered pairs positive integers determine sequence symbols repeating sequence periodically subsequence consecutive symbols contains least algorithm described used generate desired sequence based pinopt8 algorithm first need define following number slots allocated item interval 0 said contending time slot may receive resource without becoming overallocated following condition true required ffl pseudodeadline item time slot defined required two steps form algorithm dummy pair n1 n1 1 slots corresponding used broadcast copies index items served ondemand ffl step 2 schedule new multiset using following algorithm assign broadcast slot contending item smallest pseudodeadline ties broken arbitrarily intuitively resulting schedule fair sense guarantees item 1 n1 scheduled exactly interval l j required l j1 required integer j 0 assuming condition algorithm efficiently implemented using heapofheaps data structure ologn per time slot 14 period schedule generated least common multiple dead lines broadcast cycle length another good reason restrict values deadlines predefined small set keep broadcast length values within reasonable range periodic broadcast program laid using algorithm described consequently item broadcast periodically pages broadcast every pages deadline requirements items automatically satisfied periodic broadcast given client needs item guaranteed receive pages period time greater minimum deadline associated item assumed clients reorder data pages locally example layout computed algorithm consider items characterized f3 5 1 3 1 15g input periodic broadcast program generated following 43 scheduling ondemand broadcast request arrives server means periodic broadcast satisfy therefore ondemand broadcast used handle requests correspond relatively infrequently demanded information data high bandwidth requirements part periodic broadcast program ondemand broadcast mode requires use online server transmission scheduling policy order take account deadline requirements scheduling policy tries minimize number deadlines missed used specifically earliest deadline first policy note edf optimal items equally sized case scheduling policies may perform better edf requests inserted priority queue priority inversely proportional relative deadlines requests schedule corresponding ondemand broadcast take account relative access frequency data relative deadlines requests satisfied server according priorities using bandwidth remaining ondemand broadcast transmit required data items slots reserved dummy item n 1 algorithm described previous section specific amount bandwidth dedicated ondemand processing depends length periodic broadcast program therefore change according actual user access pattern however pointed 421 always minimum amount bandwidth reserved ondemand broadcast broadcast index namely 1bw threshold performance edf scheduling policy increased batching multiple requests data item satisfying batched requests via single transmission requested data item request given data item comes via uplink channel server first checks already transmission scheduled item deadline greater one associated request case scheduled transmission satisfy consequently necessary schedule another transmission batching technique produces important saving bandwidth overload conditions resulting large increase satisfied users shown 17 44 sampling estimating access frequency distribution transmission periodic broadcast program combined indexing decreases number requests arriving server clearly increasing scalability server unfortunately causes server receive information number requests corresponding periodic items information server needs calculate priority items subsequent broadcast periods seen 421 problem following assuming given item requested large number times previous cycle included periodic broadcast program server receive request item present cycle consequently server unable estimate real number users satisfied broadcasting item periodically cycle overcome problem incorporated sampling technique model inspired method used 16 item added periodic program number requests received previous cycle conveniently stored later use end subsequent cycle number artificially decreased multiplied cooling factor typically range 0709 fictitious number requests received used calculate estimated priority item cycles estimated priority decreases point item would included periodic broadcast point removing item periodic broadcast program sampling technique used estimate access frequency item next broadcast period following broadcast cycle server still includes item periodic broadcast part cycle short interval end cycle server decides broadcast item order receive requests obtain information present access frequency item index interleaved data updated reflect change forces users make explicit requests items whereby server collects small number requests item using small number estimates total number requests would received whole cycle estimation used compute actual priority item finally decide status remain periodic changed ondemand technique allows periodic item remain periodic appropriate time interval server collects requests crucial design parameter suggested 16 value calculated requests received order sampling effective otherwise technique essentially defeats purpose small number requests server expects receive sampling item called expected sample size time needed get sample easy compute know many requests received item broadcast cycle prior inclusion periodic broadcast program cycle j therefore calculate amount time needed receive expected sample size requests sampling time broadcast cycle length cycle j theta expected sample size requests received icycle j finally estimated number requests received cycle sampled cycle calculated server knows actual sample size estimated requests icycle k broadcast cycle length cycle k theta actual sample size sampling time estimation used compute priority item allowing item remain periodic broadcast program estimated number requests still high enough 5 experiments results order evaluate quantitatively performance timecritical adaptive hybrid model carried several simulationbased experiments clients modeled workload generator produces effective information demand rate interarrival time client demands exponentially distributed sequence demands poisson process demands satisfied periodic broadcast result requests sent server smaller number requests sent server better periodic broadcast program given two metrics evaluate goodness algorithm designed data dissemination 1 total percentage information demands satisfied ie percentage cases user able obtain needed information periodic broadcast ondemand broadcast deadline associated demand serves primary performance metric graphs portray performance terms complement metric showing percentage deadlines associated information demands missed note incorrect use percentage satisfied requests performance indicator many user needs likely satisfied periodic broadcast program ie without request sent server 2 total number requests sent server corresponding user demands satisfied periodic broadcast program metric helps evaluate effect uplink channel saturation table shows important simulation parameters corresponding values rationale behind choices explained values similar corresponding ones 16 17 represent realistic asymmetric communication environment time unit simulator time needed broadcast single data page along downlink thus necessary specify downlink channel capacity real situation parameter would affect time needed broadcast single page taking amount time unit parameter value number items 1000 size item 10 pages relative deadlines 100 200 500 time units simulation time 1000000 time units threshold 09 cooling factor 09 uplink capacity 1 requesttime unit workload range 01 4 items demandedtime unit table 2 simulation parameters two different access frequency distributions modeled ffl twolevel uniform combining two different access frequencies distribution first 20 items accessed 90 probability rest items 10 probability ffl zipftian probability accessing item proportional 1 experiments carried using static dynamic versions workloads dynamic uniform workload changes specific 20 heavilydemanded items four times simulation time initially time 0 starting range 120 becoming 201 220 401 420 601 620 801 820 times 200000 400000 600000 800000 dynamic zipftian workload constructed shifting static zipftian distribution right adding small quantity number item accessed initially time 0 quantity 0 becoming 20 25 30 35 times 200000 400000 600000 800000 note size items 10 pages workload ranges 1 page demanded per time unit 40 pages demanded per time unit consequently server works overload conditions whole workload range deadline distribution uniform allowing small set values f200 500 1000g time units given item one values permanently associated requests item timing constraint associated item pointed 16 tradeoff values cooling factor sample size clearly lower value cooling factor faster adaptation changes user access distribution problem low cooling factor also implies periodic items going sampled frequently increases number requests received increasing overhead overhead lowered selecting small probing size results loss accuracy estimation requests received whole cycle dynamic workloads change frequently decided choose high cooling factor 09 moderately low sample size 5 requests uplink capacity set one request per time unit achieved offered workload exactly one request per time unit offered workload higher one request per time unit effective real capacity uplink channel decreases due increasing number collisions uplink protocol contention based csmalike protocol used model effect contention assuming maximum capacity reached capacity channel decreases linearly workload increases mentioned third section 16 associate requests deadlines one hybrid nonadaptive model temporal constraints taken account 17 compare tcahb two protocols based nonadaptive model comparison give us idea performance improvement resulting adaptation tcahb actual user access distribution dynamic workloads periodic broadcast program computed online changes according user access distribution simulations also include nonhybrid protocol periodic broadcast program comparison model included order measure benefits tcahb derived effective use uplink downlink channels difference two nonadaptive protocols first one uses fixed fraction bandwidth periodic broadcast program whereas second one broadcasts periodically first 20 items used twolevel uniform distribution reason twolevel uniform distribution want compare model nonadaptive model periodic broadcast program occupies fixed fraction bandwidth b nonadaptive model frequently demanded items exactly ones included periodic broadcast program brief description three models compared tcahb follows ffl nonadaptive1 nonadaptive hybrid model similar bod fixed amount bandwidth allocated periodic broadcast program items broadcast periodically decided offline case first items 1 2 3 etc fit fixed fraction available bandwidth included periodic broadcast mode broadcast program static periodic broadcast program computed offline pfair manner model uses scheduling policy adaptive model ondemand broadcast mode edf batching distribution zipftian fraction bandwidth allocated periodic broadcast 50 bod missed deadlines workload items demanded time unit edfbatching requests scheduled time unit workload items demanded time unit edfbatching missed deadlines brequests scheduled figure 1 static uniform distribution unlimited uplink channel twolevel uniform case decreased amount bandwidth allocated periodic broadcast 40 first 20 items present periodic broadcast program allows us measure effect slight mismatch periodic broadcast program heavilydemanded items ffl nonadaptive2 model used twolevel uniform distribution difference nonadaptive1 periodic broadcast program includes first 20 items instead using predetermined fraction bandwidth ffl edfbatching pure pullbased broadcast model cyclebased uses online edf scheduling policy batching think model particular case hybrid model items broadcast periodically index interleaved data bandwidth requirements equivalent 1 total bandwidth index transmitted every units occupies 110 time unit size index 110 single data page index waitingtime overhead taken consideration experiments point obtained simulations average 5 different simulation runs worst case 95 confidence interval equals 82 mean measuring percentage deadlines missed 43 measuring number requests scheduled per time unit 51 static client profiles unlimited uplink channel first experiment uses static twolevel uniform distribution user access distribution unlimited capacity uplink channel clearly unrealistic scenario good starting point comparison purposes subsequent experiments use dynamic client profiles lowcapacity uplink channel observe figures 1a 1b plot percentage missed deadlines number requests scheduled per time unit respectively curves nonadaptive2 requests scheduled time unit workload items demanded time unit edfbatching missed deadlines b requests scheduled figure 2 static uniform distribution limited uplink channel tcahb almost identical low workloads tcahb slightly worse overhead caused sampling technique used tcahb number requests needed include item periodic broadcast program small consequently sampling time becomes bigger fraction broadcast cycle length example suppose 10 requests received given item point became part periodic broadcast time interval needed receive 5 sample size requests equal half broadcast cycle means server needs get sample item half broadcast cycle server stop broadcasting schedule requests corresponding item therefore number deadlines missed requests scheduled tcahb server slightly higher ones nonadaptive2 server low workloads nonadaptive1 server since 40 bandwidth assigned periodic broadcast program 4 5 6 depending simulation run 20 high access frequency items broadcast periodically figures 1a 1b show number deadlines missed requests scheduled higher nonadaptive2 tcahb models difference becomes larger workload increases gives us idea penalty paid static broadcast program exactly match actual user access distribution fact heavily demanded items included periodic broadcast program results requests scheduled items broadcast ondemand increasing percentage missed deadlines low workloads performance edfbatch server close nonadaptive2 slightly better nonadaptive1 tcahb periodic broadcast bandwidth wasted nevertheless edfbatch misses deadlines three models workload increases due waste bandwidth resulting ignoring relative access frequency data although batching allows us satisfy several clients via single transmission strong overload conditions conjunction edf requests scheduled time unit workload items demanded time unit edfbatching missed deadlines b requests scheduled figure 3 static zipf distribution limited uplink channel effective approach hybrid models take account user access pattern broadcast demanded items periodically addition shown figure 1b number requests scheduled edfbatch grows linearly workload clients make explicit request order obtain desired information periodic broadcast program contrary tcahb nonadaptive2 roughly 10 requests issued nonadaptive1 number around 45 due fact heavily demanded items part periodic broadcast 52 static client profiles limited uplink channel following experiments measure effect limits uplink channel point maximum potential request rate 4 items demanded per time unit four times uplink channel capacity one request per time unit 521 static uniform distribution figure 2a shows limited uplink channel capacity effect tcahb models curves identical corresponding ones figure 1a reason periodic broadcast program two cases fits needs actual user population obviating need large percentage potential requests consequently uplink channel congested number requests scheduled per time unit figure 2b near 04 even worst case however edfbatch nonadaptive1 models suffer effect uplink channel saturation beyond point workload starts saturating uplink channel 1 approximately 23 items demanded per time unit see figure 2b many requests suffering collisions arriving successfully server due congestion effect number deadlines missed increases fast saturation point see figure requests scheduled time unit workload items demanded time unit edfbatching missed deadlines b requests scheduled figure 4 static zipf distribution limited uplink channel 2a number requests arrive successfully server decreases linearly offered workload higher point uplink channel gets saturated figure 2b shows 522 static zipf distribution figure 3a shows percentage deadlines missed static zipf distribution observe crossover point edfbatch nonadaptive1 workload around 05 edfbatch server performs better nonadaptive1 point whereas worse workload increases reason low workloads items worth broadcasting nonadaptive1 model wasting bandwidth using 50 periodic broadcast program contrary high workloads edfbatch able use bandwidth effectively scheduling approach influenced deadline requirements access frequencies data tcahb model gets best worlds performs similarly edfbatch low workloads items periodic clearly better nonadaptive1 edfbatch high workloads allocates bandwidth periodic broadcast bw threshold chosen implies least 10 bandwidth reserved ondemand mode index broadcasting items periodically nonadaptive1 version using bandwidth much efficiently fact see tcahb number deadlines missed increase significantly even strong overload conditions figure 3b shows saturation felt three models compared saturation point reached earlier edfbatch workload equals one item demanded per time unit nonadaptive1 uplink channel starts become saturated workload requests scheduled time unit workload items demanded time unit edfbatching missed deadlines b requests scheduled figure 5 dynamic zipf distribution limited uplink channel 15 tcahb happens 2 items demanded per time unit reason number deadlines missed grows fast nonadaptive1 strong overload conditions figure 3b also notice uplink channel saturation also crossover point tcahb schedules requests nonadaptive1 workload interval 01 07 periodic broadcast program small whereas interval 07 15 tcahb schedules less requests larger number items included periodic broadcast program consequently users send requests order receive 53 dynamic client profiles limited uplink channel following experiments access frequency distributions change time realistic situation 531 dynamic uniform distribution stated dynamic twolevel uniform distribution specific 20 items highest access frequencies changed four times simulation time nonadaptive1 included comparison performance similar nonadaptive 2 nonadaptive2 model includes first 20 items periodic broadcast program simulation time means nonadaptive2 periodically broadcasting 20 items correspond frequently demanded ones first change distribution takes place t200000 therefore wasting bandwidth allowing requests corresponding new heavilydemanded items issued consequence see figure 4a number deadlines missed non adaptive2 model much higher compared tcahb whole workload range similarity tcahb curves figures 2a 4a proves unlike nonadaptive models tcahb appropriate environments user profiles change without significant loss performance small performance difference tcahb size periodic program workload items demanded time unit static uniform dynamic uniform static zipftian dynamic zipftian figure bandwidth required periodic broadcast program tcahb figure 2a static uniform figure 4a dynamic uniform 7 worst case workload 4 due time takes adapt periodic broadcast program every time 20 heavilydemanded items change figure 4b shows nonadaptive2 model uplink channel becomes saturated workload approximately 12 edfbatch adaptation actual user access distribution carried tcahb makes possible keep uplink channel away saturation worst case 46 capacity required expected edf batch obtains performance static dynamic distributions scheduling algorithm take account relative access frequencies data items static case edf batch performs worse tcahb workload increases terms deadlines missed also suffers uplink channel congestion much larger extent 532 dynamic zipf distribution dynamic zipf distribution used nonadaptive2 model performs significantly worse tcahb workloads figure 5a shows number deadlines missed nonadaptive2 much higher equivalent tcahb cases tcahb curve practically identical corresponding one static zipf distribution figure 3a difference performance static curve 3 worst case means tcahb practically insensitive changes access frequency distribution figure 5b notice nonadaptive2 able avoid small percentage requests issued resulting early uplink channel saturation workload 11 tcahb avoids uplink channel saturation workloads less 2 obtaining good performance terms deadlines missed even strong overload situations comments edfbatch model made dynamic uniform distribution 54 discussion results among different alternatives considered tcahb reasonable choice obtaining adequate performance dynamic timecritical asymmetric communication environment tcahb model able adapt dynamically different workloads changes access frequency distribution allowing higher workloads without uplink channel saturation missing smaller number deadlines rest models reason periodic broadcast program dynamically adapted actual users needs figure 6 shows adaptation amount bandwidth allocated periodic broadcast program different client profiles low workloads items part periodic broadcast program grows workload increases observe uniform distribution used size program grows workload 20 heavilydemanded items included periodic broadcast program remaining constant point approximately workload equals 1 zipf distribution periodic program keeps adding items workload increases bw threshold reached approximately workload 2 results show nonadaptive models compare favorably tcahb clients profiles static even unrealistic situation fact fraction bandwidth assigned broadcast mode fixed allow nonadaptive models perform well whole workload range unless clear difference frequently demanded items nonfrequently demanded items eg twolevel uniform distribution b precomputed broadcast program exactly includes frequently demanded items also clear edfbatch inadequate unless workload light highcapacity uplink channel used server enough resources schedule large number requests two main problems pure pullbased model 1 unable use bandwidth effectively overload situations 2 potential requests issued causing uplink channel become congested earlier hybrid models tables 3 4 summarize performance obtained different models compared workloads workload range divided 3 parts corresponding left part graphs low overload middle part moderate overhead right part strong overhead non adaptive models ones sensitive changes access distribution observe tcahb model capable performing adequately whole workload range moreover except low overload situations slightly worse edfbatch always obtains best performance terms number deadlines missed addition tcahb uplink channel suffers saturation extreme overload conditions low overload moderate overload strong overload edfbatch best bad bad table 3 staticdynamic uniform distribution low overload moderate overload strong overload poorbad close bestbad badbad edfbatch best bad bad tcahb close best table 4 staticdynamic zipf distribution 6 conclusion future work paper presented evaluated new model effective data dissemination dy namic timecritical asymmetric communication environments model uses adaptive hybrid broadcast transmission allowing users request specific items deadline requirements order minimize total number deadlines missed making effective use available bandwidth scheduling approach combines factors access frequency deadline distribution bandwidth requirements results obtained simulation show broadcasting periodically items predicted high access frequencies low bandwidth needs scheduling algorithm used broadcast information server clearly outperforms nonadaptive models dynamic client profiles occur overload conditions dynamic adaptation contents periodic broadcast program real client access profile essential broadcast server work environments data access distribution changes time real situations specially clients mobility simulation results show timecritical adaptive hybrid data dissemination model satisfies clients broadcast models decreasing also number requests issued heavily overload conditions important aspect scalability effect bandwidth limitations uplink channel important factor considered adaptive broadcast model assigns bandwidth periodic transmission mode workload high avoiding excessive request traffic coming server accommodating higher workloads uplink channel becomes congested future work includes extending functionality server incorporating loss prob ability different broadcast channels protocols scheduling algorithms allow multimedia information broadcasting quality service guarantees r broadcast disks data management asymmetric communication environments balancing push pull data broadcast scalable delivery web pages using cyclic besteffort udp multicast proportionate progress notion fairness resource allocation fairness periodic realtime scheduling pinwheel scheduling faulttolerant broadcast disks realtime database systems realtime mutable broadcast disks improved scheduling generalized pinwheel task systems aidabased realtime faulttolerant broadcast disks digital fountain approach reliable distribution bulk data introduction algorithms adaptive broadcast protocols support efficient energy conserving retrieval databases mobile computing environments energy efficient indexing air task management techniques enforcing ed scheduling periodic task set adaptive data broadcasting using air cache adaptive data broadcast hybrid net works efficient timely dissemination data mobile environments tr introduction algorithms energy efficient indexing air broadcast disks balancing push pull data broadcast digital fountain approach reliable distribution bulk data adaptive data broadcast hybrid networks pinwheel scheduling faulttolerant broadcast disks realtime database systems aidabased realtime faulttolerant broadcast disks broadcast demand improved scheduling generalized pinwheel task systems fairness periodic realtime scheduling ctr victor c lee xiao wu joseph keeyin ng scheduling realtime requests ondemand data broadcast environments realtime systems v34 n2 p8399 october 2006