square meshes optimal convex hull computation abstractrecently noticed semigroup computations selection rectangular meshes multiple broadcasting yield faster algorithms square counterparts contribution paper provide yet another example fundamental problem phenomenon occurs specifically show problem computing convex hull set n sorted points plane solved rm ontextstyle1 8 rm logtextstyle3 4n time rectangular mesh multiple broadcasting sizentextstyle3 8rm logtextstyle1 4ntimes textstylen textstyle5 8 rm logtextstyle1 4nthe fastest previouslyknown algorithms square mesh size sqrt ntimes sqrt n run rm ontextstyle1 6 time case n points pixels binary image rm ontextstyle1 6rm logtextstyle2 3n time sorted points plane b introduction one fundamental heuristics pattern recognition image processing robot navigation involves approximating realworld objects convex sets obvious reasons one typically interested convex hull set points defined smallest convex set contains 39 40 robotics example convex hull central path planning collision avoidance tasks 26 30 pattern recognition image processing convex hull appears clustering computing similarities sets 4 16 20 computational geometry convex hull often valuable tool devising efficient algorithms number seemingly unrelated problems 39 40 central many application areas convex hull problem extensively studied literature sequentially parallel 3 4 16 24 27 39 40 typical processing needs found today industrial medical military applications routinely involve handling extremely large volumes data enormous amount data involved applications combined realtime processing requirements suggested massively parallel architectures way achieve level performance required many time safetycritical tasks amongst massively parallel architectures mesh emerged one natural platforms solving variety problems pattern recognition image processing computer work supported nasa grant nas119858 nsf grant ccr9407180 onr grant n000149510779 address correspondence prof stephan olariu department computer science old dominion university norfolk va 235290162 usa email olariucsoduedu department computer science southern illinois university edwardsville il 62026 z department computer science old dominion university norfolk va 23529 x department mathematics computer science elizabeth city state university elizabeth city nc 27909 vision path planning computational geometry 3 27 33 35 addition due simple regular interconnection topology mesh well suited vlsi implementation 6 42 one drawbacks mesh stems large computational diameter makes mesh architecture less attractive nonspatially organized contexts computation involves data items spread processing elements far apart 21 popular solution problem enhance mesh architecture addition various types bus systems 5 14 18 24 28 32 early solutions involving addition one global buses shared processors mesh implemented number massively parallel machines 1 6 14 yet another popular way enhancing mesh architecture involves endowing every row bus resulting architecture referred mesh row buses received good deal attention literature 14 18 22 recently powerful architecture referred mesh multiple broadcasting obtained adding one bus every row every column mesh 24 38 mesh multiple broadcasting proven feasible implement vlsi used dap family computers 38 theoretical interest well commercially available mesh multiple broadcasting attracted great deal attention recent years efficient algorithms solve number computational problems meshes multiple broadcasting variants proposed literature include image processing 25 29 38 visibility 7 computational geometry 10 12 11 15 24 36 37 semigroup computations 5 13 18 24 sorting 8 multiplesearching 10 optimization 19 selection 9 18 24 among others particular 24 shown mesh size n theta semigroup operations performed 1 barnoy peleg 5 well chen et al 18 shown semigroup computations computed faster rectangular meshes multiple broadcasting used instead square ones specifically shown mesh multiple broadcasting size n 3 8 theta n 5 8 semigroup computations performed 1 similar phenomenon occurs selection 24 shown task selecting median n items mesh multiple broadcasting size p n theta takes 1 6 log 2 3 n time recently chen et al 19 shown computing median n numbers takes 1 8 log n time mesh multiple broadcasting size n 3 8 theta n 5 8 recently bhagavathi et al 9 shown problem solved even faster specifically exhibited selection algorithm running 1 8 log 3 4 n time mesh multiple broadcasting size n 3 recently number papers reported efficient convex hull computations massively parallel architectures 3 15 17 23 33 34 36 example miller stout 33 proposed convex hull algorithms sorted points pyramids trees mesh trees reconfigurable mesh also provided algorithms sorted unsorted points hypercube chazelle 17 solved number geometric problems including convex hull computation systolic chip miller stout 34 holey ibarra 23 solved convex hull problem meshes purpose work show like semigroup computations selection task computing convex hull set n points plane sorted x coordinates performed much faster suitably chosen rectangular meshes square ones fastest previouslyknown algorithms solve problem 1 special case n points pixels binary image 1 6 log 2 3 n time n sorted points plane 24 mesh multiple broadcasting size p n theta n contribution exhibit algorithm finds convex hull set n points plane sorted increasing xcoordinate 1 8 log 3 4 n time mesh multiple broadcasting size n 3 algorithm offers yet another example fundamental computational problem rectangular meshes multiple broadcasting yield faster algorithms square counterparts keeping number processors level remainder paper organized follows section 2 discusses computational model section 3 reviews basic geometric results key ingredients convex hull algorithm along implementation meshes multiple broadcasting section 4 presents details proposed algorithm finally section 5 summarizes findings proposes number open questions 2 mesh multiple broadcasting mesh multiple broadcasting size theta n consists mn identical processors positioned rectangular array overlaid bus system every row mesh processors connected horizontal bus similarly every column processors connected vertical bus illustrated figure 1 note buses static cannot dynamically reconfigured response computational needs case reconfigurable architectures 27 28 32 figure 1 mesh multiple broadcasting size 4 theta 5 processor p j located row column j 1 northwest corner mesh every processor connected four neighbors provided exist throughout paper assume mesh multiple broadcasting operates simd mode time unit instruction broadcast processors execute wait next instruction processor assumed know coordinates within mesh constant number registers size olog mn unit time every processor performs arithmetic boolean operation communicates one neighbors using local link broadcasts value bus reads value specified bus operations involve handling olog mn bits information practical reasons one processor allowed broadcast given bus one time contrast processors bus simultaneously read value broadcast accord researchers 5 14 18 24 28 32 38 assume communications along buses take o1 time although inexact recent experiments dap 38 yuppie multiprocessor array system 32 ppa 31 seem indicate reasonable working hypothesis 3 preliminaries purpose section review context meshes multiple broadcasting number basic geometric results key ingredients convex hull algorithm assume arbitrary set n points plane sorted increasing xcoordinate assume points general position three collinear two x coordinates convex hull set planar points smallest convex polygon containing given set given convex polygon stand points p smallest largest xcoordinate respectively customary see 39 40 excellent discussion refer chain upper hull p chain lower hull illustrated figure 2upper hull lower hull figure 2 illustrating upper lower hulls strategy involves computing upper lower hulls describe computation upper hull since computing lower hull perfectly similar position make algorithmic approach precise need develop terminology solve simpler problems instrumental overall solution consider upper hull p sample p simply subset points p enumerated order p remainder paper shall distinguish points belong upper hull specifically points known belong upper hull referred vertices terminology consistent 39 i1 figure 3 convexity guarantees qa cuts unique pocket upper hull let q arbitrary point outside p line qp said supporting line p q interior p lies one halfplane determined qp first problem needs addressed involves determining supporting line upper hull point purpose consider arbitrary sample p sample partitions p pockets 1 2 pocket involves vertices p lying igamma1 assume igamma1 belongs let oe size largest pocket let toe time needed make information q available vertices largest pocket p reference state following result holds meshes row buses important note mesh multiple broadcasting becomes mesh row buses column buses ignored lemma 31 supporting line upper hull point determined mesh row buses time toe proof assume without loss generality q lies left p xq three points p fqg collinear begin compute supporting line q extend solution obtain desired supporting line p see computation proceeds assume q stored processors row mesh row buses q broadcasts coordinates bus row exactly one processor row detects neighbors side line emanating q passing vertex contains referring figure 3 assume supporting line q touches case line qa supporting line p convexity guarantees exactly one pockets i1 intersected line qa one comparison determines pocket intersected line qa assume without loss generality pocket i1 one intersected compute supporting line p need compute supporting line i1 q vertices i1 informed coordinates q exactly one determine achieves desired supporting line therefore entire computation performed time needed make information q available vertices largest pocket p assumption bounded toeu figure 4 illustrating supporting line two upper hulls supporting line 1 two upper hulls u v unique line u v following properties 1 u v determined pair vertices u v 2 vertices u v lie halfplane determined u v refer figure 4 illustration second problem key ingredient convex hull algorithm involves computing supporting line two upper hulls l vertices u left v assume u v stored row mesh multiple broadcasting assume vertices u v know rank within hull part well coordinates left right neighbors upper hull reference state following result result holds meshes row buses since column buses used corresponding algorithm lemma 32 task computing supporting line two separable upper hulls u v stored one row mesh row buses performed olog minfj u proof begin processor storing vertex u kbroadcasts coordinates u khorizontally along bus row every processor holds vertex v j v checks whether left right neighbors line determined u kand v j processor detecting condition broadcasts coordinates v j back sender words also referred common tangent u figure 5 approximately half vertices eliminated shown detected supporting line v u k supporting line u done otherwise convexity guarantees half vertices u eliminated consideration illustrated figure 5 figure 5 vertices eliminated hashed process continues dlog j u je iterations claimed next address problem finding supporting line two upper hulls separable x direction p lying left q time assume mesh row buses size theta 2z vertices p stored columnmajor order first z columns vertices q stored columnmajor order last z columns platform notice cannot apply result lemma 32 directly simply enough bandwidth instead shall solve problem two stages describe consider samples two samples determine pockets 1 2 p q respectively referring figure 6 let supporting line b b achieved b j let supporting line p q p q achieved p u q v following technical result established 2 proposition 33 least one following statements true c proposition 33 suggests simple algorithm computing supporting line two upper hulls p q properties mentioned recall assume mesh row buses size theta 2z vertices p q stored columnmajor order first last z columns respectively samples b chosen contain topmost hull i2 figure illustrating proposition 33 vertex every column mesh later reference note ensures pocket contains 2y vertices state following result holds meshes row buses lemma 34 task computing supporting line two separable upper hulls stored columnmajor order mesh row buses size theta 2z takes oy log z time proof lemma 32 computing supporting line b takes olog z time let supporting line b b achieved b j detecting conditions ad proposition 33 holds easy example condition b holds p u lies right left i1 check b supporting lines ffi ffi 0 i1 q computed oy time using lemma 31 supporting lines available processor holding i1 detects constant time whether left neighbor i1 p lies ffi 0 similarly processor holding checks whether right neighbor p lies ffi easy confirm p u belongs i1 conditions hold conditions checked similarly suppose without loss generality b holds next task compute supporting line i1 q done two steps follows first supporting line i1 b computed main point note order apply lemma 32 vertices pocket i1 moved one row column mesh way defining samples guarantees task takes oy time second convexity guarantees supporting line i1 b supporting line p q o1 time determine pocket supporting line i1 b desired supporting line figure 6 b b j1 therefore lemma 31 lemma 32 proposition 33 combined imply computing supporting line p q takes oy log z time claimed 4 algorithm purpose section present details general convex hull algorithm consider mesh r multiple broadcasting size theta n n input algorithm arbitrary set n points plane sorted increasing xcoordinate usual assume every point set specified cartesian coordinates set stored r one point per processor way explain purpose convex hull algorithm view dimensions n r functions n initially subject constraint goal determine values n running time algorithm minimized possible choices rectangular meshes containing n processing elements course algorithm mesh r viewed consisting submeshes way suits various computational needs occasionally shall make use algorithms developed meshes broadcasting feature particular make use optimal convex hull algorithm 3 state proposition 41 convex hull set n points plane computed theta p n time meshconnected computer size n theta n following follows immediately proposition 41 corollary 42 convex hull set n points plane computed omaxfa bg time meshconnected computer size theta b comment simple information transfer argument shows task computing convex hull set unsorted points plane stored one per processor mesh multiple broadcasting size p n theta must take omegagamma p n time thus convex hull problem mesh multiple broadcasting better unenhanced mesh negative results justifies looking problem computing convex hull sorted set n points plane diameter unenhanced mesh still forces algorithm take omegagamma p n time one better mesh multiple broadcasting fact one even better platform skewed much better set explore paper start setting overall target running time ox x determined later along n throughout algorithm view original mesh r consisting set submeshes r j size theta n value x specified later along parameters view r j consisting set submeshes r jk x size theta x easy confirm processors p r c j input distributed block rowmajor order 18 one point per processor described next points r j stored columnmajor order points stored r j occur sorted order points stored r whenever easy see setup points r jk occur columnmajor order avoid tedious details assume without loss generality points general position three collinear two x coordinates describe computation upper hull task computing lower hull perfectly similar algorithm partitioned three distinct stages outline next stage 1 simply preprocessing stage upper hulls several subsets input computed using optimal mesh algorithm 33 second goal stage establish two properties referred h become basic invariants algorithm stage 2 involves partitioning mesh number submeshes containing suitably chosen number rows original mesh specific goal stage compute upper hull submeshes finally stage 3 proceeds combine upper hulls produced stage 2 obtain upper hull detailed description stages follows stage 1 fpreprocessingg point view original mesh r consisting submeshes r jk described r jk compute upper hull using optimal convex hull algorithm meshes 3 virtue corollary 42 task takes ox time every r jk addition computing upper hull also choose sample subset vertices corresponding upper hull sample chosen contain first hull vertex every column r jk topdown order technicality last sample vertex coincides last hull vertex r jk addition computing upper hull selecting sample following information computed stage 1 h every hull vertex rank upper hull along identity coordinates left right neighbors upper hull computed every sample vertex rank within sample along identity coordinates left right neighbors sample note information specified h computed time ox using local communications within every r jk stage 2 fhorizontal stageg stage view original mesh consisting submeshes size theta n r j involving submeshes r j1 r j2 x task specific stage involves computing upper hull points every r j maintaining conditions h invariant basically stage consists repeatedly finding supporting line two neighboring upper hulls merging one upper hull remains two crucial points note first sampling strategy remains one defined stage 1 second way chosing samples along definition submeshes r j guarantees pocket contains 2y vertices beginning ith step stage 2 generic submesh r j contains upper hulls u 1 u 1 upper hull points r j1 r j2 standing upper hull points r j2 step merge n consecutive pairs upper hulls reference state following result lemma 43 ith step stage 2 performed oy invariants h assumed hold beginning ith step continue hold end step proof make subsequent analysis running time transparent easier understand shall partition computation specific ith step four distinct substeps let u two generic upper hulls get merged ith step data movement computations described u 2rgamma1 u 2r performed parallel pairs upper hulls get merged ith step substep 1 sample vertices u moved row r j using local communications task takes altogether oy time substep 2 compute supporting line samples u proceeding lemma 32 task takes olog 2 substep 3 using lemma 34 compute supporting line u substep 4 supporting line u available eliminate u vertices longer belong new upper hull motivation data movement substep 1 twofold one hand wish dedicate row buses computation supporting lines want perform local movements necessary subsequent broadcast operations submeshes time ensure oy time spent local data movement altogether similar trick bounds time spent local movement substep 4 definiteness assume supporting line u 2rgamma1 u 2r achieved vertices u u v u 2r note information available every pair merged upper hull end substep 3 moment mandate processor holding vertex u send row packet containing coordinates u v along rank u u 2rgamma1 rank v u 2r done using local communications proceeding parallel submeshes time spent data movement bounded oy altogether next correctly update upper hull union u 2rgamma1 u 2r need eliminate vertices longer upper hull purpose use information available row virtue previous data movement conjunction broadcasting bus row specifically processor row received packet containing information u v local communications broadcast packet along row bus every processor row holding vertex u 2rgamma1 u 2r retains packet sent broadcast operations done processors retained packet transmit packet vertically column using local communications upon receipt information every processor r j storing vertex u 2rgamma1 u 2r decide o1 time whether vertex stores remain upper hull therefore update correct performed oy time must also show invariants h assumed hold beginning ith step continue hold end step preserve h every vertex upper hull union u must able compute rank new hull identify left right neighbors clearly every vertex new upper hull keeps neighbors except u v become others neighbors see every vertex new convex hull position correctly update rank note vertices hull left u keep rank vertices right v update ranks first subtracting 1 plus rank v u 2r rank adding rank u u 1 result required information made available described previously thus invariant h preserved see invariant also preserved note every sample vertex left u still sample vertex new hull similarly every sample vertex right v sample vertex new hull v becomes sample vertex illustrated figure 7 vertices longer convex hull hashed samples represented dark circles therefore sample vertices new upper hull correctly identified addition keep figure 7 preserving old neighbors sample set except two sample vertices one sample vertex column containing u v one broadcast operation sample vertices find neighbors perfectly similar way rank every sample vertex within new sample set computed therefore invariant also preserved position clarify reasons behind computing supporting line u u intention dedicate bus first row first pair upper hulls merged step second bus second pair upper hulls buses committed way described broadcasting data involving first pairs hulls performed parallel thus relevant information moved prescribed row r j described substep 1 supporting lines group pairs upper hulls r j computed olog 2 time since l n groups synchronizing local movement groups described guarantees ith step stage 2 takes oy completes proof lemma 43 argue total running time stage 2 note 1 x log n xy log n log x note assumption therefore log n log x log n elementary manipulations show log n therefore 25 long 2 log n running time stage 2 oy log n xy since want overall running time restricted ox write xy stage 3 fvertical stageg recall end stage 2 every submesh r j contains upper hull points stored processors r j task specific stage 3 involves repeatedly merging pairs two neighboring groups r j described beginning ith step stage 3 upper hulls adjacent pairs involving merged simplicity show pair upper hulls points r 1 updated new upper hull points r 1 simplify notation shall refer submeshes r 1 r 2 distinguishes stage 3 stage 2 longer need sampling indeed shall describe availability buses within groups makes sampling unnecessary shall also prove process invariant h assumed hold beginning ith step continues hold end step let u 1 u 2 upper hulls points stored g 1 g 2 respectively first step wish compute supporting line u 1 u 2 supporting line available two upper hulls updated new upper hull points r 1 context stage 3 buses mesh used differently specifically horizontal buses within every group used broadcast information making unnecessary move data prescribed row without loss generality write u vertices u 1 left u 2 assume h holds vertices u 1 know rank within upper hull well coordinates left right neighbors corresponding upper hull begin processor storing vertex u pbroadcasts bus row packet consisting coordinates u pand rank u 1 turn corresponding processor first column mesh broadcast packet along bus first column every processor first column mesh belonging r 2 read bus broadcast packet horizontally bus row note result data movement processors group g 2 enough information detect whether vertices store achieve supporting line u 2 u p using previous data movement reverse unique processor detects condition broadcasts packet consisting coordinates rank point stores back processor holding u pby checking neighbors u 1 processor detects whether supporting line u 2 supporting u 1 case done otherwise convexity u 1 guarantees half vertices u 1 eliminated consideration process continues dlog 2 iterations consequently task computing supporting line u 1 u 2 runs olog 2 time supporting line known need eliminate u 1 u 2 points longer belong new upper hull show done preserving invariant h assume without loss generality vertex u u 1 v u 2 touching points supporting line correctly update upper hull union u 1 u 2 need eliminate vertices longer upper hull first step processor holding vertex u broadcasts row packet containing coordinates u v along rank u u 1 rank v u 2 corresponding processor first column broadcast packet along column bus every processor first column belonging broadcast packet horizontally bus row upon receipt information every processor r j1 r j2 storing vertex u 1 u 2 decide whether vertex stores remain upper hull therefore supporting line known task eliminating vertices longer belong new upper hull performed o1 time preserve h every point upper hull union u 1 u 2 must able compute rank new hall also identify left right neighbors clearly every vertex new upper hull keeps neighbors except u v become others neighbors see every vertex newly computed convex hull position correctly update rank note vertices hull left u keep rank vertices right v update ranks first subtracting 1 plus rank v u 2 rank adding rank u u 1 required information made available packet previously broadcast thus invariant h preserved summarize discussion state following result lemma 44 supporting line u 1 u 2 computed olog 2 using vertical broadcasting first column mesh furthermore invariant h preserved notice computed supporting line u 1 u 2 restricting vertical broadcasting first column mesh intention assign first column bus first pair upper hulls second bus second pair upper hulls buses committed way described computation involving first n pairs hulls performed parallel therefore virtue lemma 44 supporting lines first n pairs upper hulls r j computed olog 2 time since l pairs ith step stage 3 takes log 2 assess running time stage 3 note log n log n log yn note imply log yn log log n also number iterations log n log n therefore write log n log yn log n log log n equations 7 8 combined guarantee overall running time stage 3 log n since want overall running time restricted ox write log n straightforward albeit slightly tedious verify values x n simultaneously satisfy constraints 1 6 9 minimize value x 8 log 3 summarize findings state following result theorem 45 problem computing convex hull set n points plane sorted increasing x coordinate solved 1 8 log 3 4 n time mesh multiple broadcasting size n 3 5 conclusions open problems due large communication diameter meshes tend slow comes handling data transfer operations long distances attempt overcome problem meshconnected computers recently enhanced addition various types bus systems system referred mesh multiple broadcasting adopted dap family computers 38 involves enhancing mesh architecture addition row column buses recently noted semigroup computations selection square meshes optimal sense problem given size one devise much faster algorithms suitable chosen rectangular meshes square meshes contribution paper show phenomenon present problem computing convex hull sorted set points plane fastest known convex hull algorithm detect extreme points convex hull binary image size p n theta runs 1 6 n sorted points plane fastest known algorithm 25 runs 1 6 log 2 3 n time mesh multiple broadcasting size p n theta n contrast shown problem solved 1 8 log 3 4 n time mesh multiple broadcasting size n 3 theta n 5log4 n number problems remain open however particular would interesting know whether convex hull algorithm developed paper applied computational geometry tasks triangulating set points plane second question whether sampling used solve convex hull problem higher dimensions finally would interesting know whether sampling using paper yields fast convex hull algorithms sorted points popular massively parallel architectures particular known whether approach works reconfigurable mesh meshconnected machine augmented dynamically reconfigurable bus system best knowledge results reported literature acknowledgement authors would like thank mark merry three anonymous referees many insightful comments greatly improved quality presentation also thank professor batcher professional way handling submission r optimal bounds finding maximum array processors k global buses parallel algorithms functions two convex polygons parallel computational geometry computer vision square meshes always optimal design massively parallel processor fast selection algorithm meshes multiple broadcasting convex polygon problems meshes multiple broadcasting convexity problems meshes multiple broadcasting unifying look semigroup computations meshes multiple broadcasting finding maximum array processor global bus time vlsioptimal convex hull computation meshes multiple broadcasting segmentation cervical cell images computational geometry systolic chip designing efficient parallel algorithms mesh connected computers multiple broadcasting pattern classification scene analysis computer architecture spatially distributed data leftmost one computation meshes row broadcasting iterative algorithms planar convex hull meshconnected arrays array processor multiple broadcasting image computations meshes multiple broadcast obstacle growing nonpolygonal world introduction parallel algorithms architectures arrays ieee transactions computers efficient vlsi architecture digital geometry configurational space approach ieee transactions parallel distributed systems connection autonomy simd computers vlsi implementation efficient parallel convex hull algorithms mesh computer algorithms computational geometry finding connected components connected ones meshconnected parallel computer optimal convex hull algorithms enhanced meshes amt dap 500 computational geometry introduction computational geometry movable separability sets computational aspects vlsi tr ctr venkatavasu bokka himabindu gurla stephan olariu james l schwing larry wilson timeoptimal domainspecific querying enhanced meshes ieee transactions parallel distributed systems v8 n1 p1324 january 1997 dharmavani bhagavathi himabindu gurla stephan olariu larry wilson james l schwing jingyuan zhang time vlsioptimal sorting enhanced meshes ieee transactions parallel distributed systems v9 n10 p929937 october 1998 r lin olariu j l schwing bf wang mesh hybrid buses efficient parallel architecture digital geometry ieee transactions parallel distributed systems v10 n3 p266280 march 1999 venkatavasu bokka himabindu gurla stephan olariu james l schwing podalitybased timeoptimal computations enhanced meshes ieee transactions parallel distributed systems v8 n10 p10191035 october 1997 venkatavasu bokka himabindu gurla stephan olariu james l schwing larry wilson timeoptimal domainspecific querying enhanced meshes ieee transactions parallel distributed systems v8 n1 p1324 january 1997