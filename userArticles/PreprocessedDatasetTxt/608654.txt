gaia methodology agentoriented analysis design article presents gaia methodology agentoriented analysis design gaia methodology general applicable wide range multiagent systems comprehensive deals macrolevel societal microlevel agent aspects systems gaia founded view multiagent system computational organisation consisting various interacting roles illustrate gaia case study agentbased business process management system b introduction progress software engineering past two decades made development increasingly powerful natural highlevel abstractions model develop complex systems procedural abstraction abstract data types recently objects components examples abstractions belief agents represent similar advance abstraction may used software developers naturally understand model develop important class complex distributed systems agents realise potential software engineering paradigm necessary develop software engineering techniques specifically tailored existing software development techniques example objectoriented analysis design 2 6 unsuitable task fundamental mismatch concepts used objectoriented developers indeed mainstream software engineering paradigms agentoriented view 32 34 particular extant approaches fail adequately capture agents flexible autonomous problemsolving behaviour richness agents interactions complexity agent systems organisational structures reasons article introduces methodology called gaia specifically tailored analysis design agentbased systems 1 remainder article structured follows begin following sub section discussing characteristics applications believe gaia ap propriate section 2 gives overview main concepts used gaia agentbased analysis discussed section 3 design section 4 use gaia illustrated means case study section 5 show applied design realworld agentbased system business process management 20 related work discussed section 6 conclusions presented section 7 domain characteristics proceeding worth commenting scope work particular characteristics domains believe gaia appropriate intended gaia appropriate development systems adept 20 archon 19 largescale realworld applications following main characteristics ffl agents coarsegrained computational systems making use significant computational resources think agent resources unix process ffl assumed goal obtain system maximises global quality measure may suboptimal point view system compo nents gaia intended systems admit possibility true conflict 2 ffl agents heterogeneous different agents may implemented using different programming languages architectures techniques make assumptions delivery platform ffl organisation structure system static interagent relationships change runtime ffl abilities agents services provide static change runtime ffl overall system contains comparatively small number different agent types less 100 gaia deals macro societal level micro agent level aspects de sign represents advance previous agentoriented methodologies neutral respect target domain agent architecture see section 6 detailed comparison 2 conceptual framework gaia intended allow analyst go systematically statement requirements design sufficiently detailed implemented directly note view requirements capture phase independent paradigm used analysis design applying gaia analyst moves abstract increasingly concrete concepts successive move introduces greater implementation bias shrinks space possible systems could implemented satisfy original requirements statement see 21 pp216222 discussion implementation bias analysis design thought process developing increasingly detailed models system constructed main models used gaia summarised figure 1 analysis design 3 requirements roles model services model agent model model acquaintance statement model interactions design analysis figure 1 relationships gaias models gaia borrows terminology notation objectoriented analysis design specifically fusion 6 however simply naive attempt apply methods agentoriented development rather provides agentspecific set concepts software engineer understand model complex system partic ular gaia encourages developer think building agentbased systems process organisational design main gaian concepts divided two categories abstract concrete abstract concrete concepts summarised table 1 abstract entities used analysis conceptualise system necessarily direct realisation within system concrete entities contrast used within design process typically direct counterparts runtime system 3 analysis objective analysis stage develop understanding system structure without reference implementation detail case understanding captured systems organisation view organisation collection roles stand certain relationships one another take part systematic institutionalised patterns interactions roles see figure 2 abstract entity concept hierarchy system although term sys tem used standard sense also related meaning talking table 1 abstract concrete concepts gaia abstract concepts concrete concepts roles agent types permissions services responsibilities acquaintances protocols activities liveness properties safety properties agentbased system mean society organisation think agentbased system artificial society organisation idea system society useful thinking next level concept hierarchy roles may seem strange think computer system defined set roles idea quite natural adopting organisational view world consider human organisation typical company company roles president vice president note concrete realisation company roles instantiated actual individuals individual takes role president individual takes role vice president however instantiation necessarily static throughout companys lifetime many individuals may take role company president example also necessarily onetoone mapping roles individuals unusual particularly small informally defined organisations one individual take many roles example single individual might take role tea maker mail fetcher conversely may many individuals take single role eg salesman 3 role defined four attributes responsibilities permissions activities proto cols responsibilities determine functionality perhaps key attribute associated role example responsibility associated role company president might calling shareholders meeting every year responsibilities divided two types liveness properties safety properties 27 4 liveness properties intuitively state something good happens describe states affairs agent must bring given certain environmental conditions contrast safety properties invariants intuitively safety property states nothing bad happens ie acceptable state affairs maintained across states execution example might ensure reactor temperature always remains range 0100 order realise responsibilities role set permissions permissions rights associated role permissions role thus identify resources available role order realise responsibilities kinds system typically modelled permissions tend information resources example role might associated ability read particular item information analysis design 5 properties safety system responsibilities roles interactions permissions liveness properties figure 2 analysis concepts modify another piece information role also ability generate information activities role computations associated role may carried agent without interacting agents activities thus private actions sense 28 finally role also identified number protocols define way interact roles example seller role might protocols dutch auction english auction associated contract net protocol associated roles manager contractor 30 thus organisation model gaia comprised two models roles model section 31 interaction model section 32 31 roles model roles model identifies key roles system role viewed abstract description entitys expected function terms role less identical notion office sense prime minister attorney general united states secretary state education offices roles offices characterised two types attribute ffl permissionsrights associated role 6 wooldridge jennings kinny role associated certain permissions relating type amount resources exploited carrying role case aspects captured attribute known roles permissions ffl responsibilities role role created order something role certain functionality functionality represented attribute known roles responsibilities permissions permissions associated role two aspects ffl identify resources legitimately used carry role intu itively say spent carrying role ffl state resource limits within role executor must operate intuitively say cant spent carrying role general permissions relate kind resource human organisation example role might given monetary budget certain amount person effort however gaia think resources relating information knowledge agent order carry role agent typically able access certain information roles might generate information others may need access piece information modify yet others may need modify information recognise richer model resources required future although moment restrict attention simply information gaia makes use formal notation expressing permissions based fusion notation operation schemata 6 pp2631 introduce concepts use example coffeefiller role purpose role ensure coffee pot kept full coffee group workers following simple illustration permissions associated role coffeefiller reads coffeestatus full empty changes coffeestock stock level coffee specification defines two permissions coffeefiller says agent carrying role permission access value coffeestatus permission read modify value coffeestock also third type permission generates indicates role producer resource shown example note permissions relate knowledge agent coffeestatus representation part agent value real world roles parameterised certain values example generalise coffeefiller role parameterising coffee machine kept refilled specified permissions definition supplied keyword follows reads supplied coffeemaker name coffee maker coffeestatus full empty changes coffeestock stock level coffee analysis design 7 table 2 operators liveness expression operator interpretation xy x followed occurs x x occurs 0 times x x occurs 1 times x w x occurs infinitely often x x optional responsibilities functionality role defined responsibilities responsibilities divided two categories liveness safety responsibilities liveness responsibilities intuitively state something good happens liveness responsibilities called tend say something done hence agent carrying role still alive liveness responsibilities tend follow certain patterns example guaranteed response type achievement goal form request always followed response infinite repetition achievement goal form x happen infinitely often note types requirements widely studied software engineering literature proven necessary capturing properties reactive systems 27 order illustrate various concepts associated roles continue running example coffeefiller role examples liveness responsibilities coffeefiller role might ffl whenever coffee pot empty fill ffl whenever fresh coffee brewed make sure workers know gaia liveness properties specified via liveness expression defines life cycle role liveness expressions similar lifecycle expression fusion 6 turn essentially regular expressions liveness expressions additional operator w infinite repetition see table 2 details thus resemble wregular expressions known suitable representing properties infinite computations 32 liveness expressions define potential execution trajectories various activities interactions ie protocols associated role general form liveness expression rolename name role whose liveness properties defined expression liveness expression defining liveness properties rolename atomic components liveness expression either activities protocols activity somewhat like method objectoriented terms procedure pascallike language corresponds unit action agent may perform involve interaction agent protocols hand activities require interaction agents give reader visual clues protocol names sans serif font xxx use similar font underlined activity names yyy illustrate liveness expressions consider abovementioned responsibilities coffeefiller role informworkers checkstock awaitempty w expression says coffeefiller consists executing protocol fill followed protocol informworkers followed activity checkstock protocol awaitempty sequential execution protocols activities repeated infinitely often moment shall treat protocols simply labels interactions shall worry actually defined matter discussed section 32 complex liveness expressions made easier read structuring simple example illustrates done informworkers checkstock awaitempty semantics definitions straightforward textual substitution many cases insufficient simply specify liveness responsibilities role agent carrying role required maintain certain invariants executing example might require particular agent taking part electronic commerce application never spends money allocated invariants called safety conditions usually relate absence undesirable condition arising safety requirements gaia specified means list predicates predicates typically expressed variables listed roles permissions attribute returning coffeefiller role agent carrying role generally required ensure coffee stock never empty means following safety expression convention simply list safety expressions bulleted list item list expressing individual safety responsibility implicitly assumed responsibilities apply across states system execution role infinitely long duration coffeefiller example invariants must always true possible precisely define gaia roles model roles model comprised set role schemata one role system role schema draws together analysis design 9 role schema name role description short english description role protocols activities protocols activities role plays part permissions rights associated role responsibilities liveness liveness responsibilities safety safety responsibilities figure 3 template role schemata role schema coffeefiller description role involves ensuring coffee pot kept filled informing workers fresh coffee brewed protocols activities fill informworkers checkstock awaitempty permissions reads supplied coffeemaker name coffee maker coffeestatus full empty changes coffeestock stock level coffee responsibilities liveness informworkers checkstock awaitempty w safety figure 4 schema role coffeefiller various attributes discussed single place figure 3 exemplar instantiation given coffeefiller role figure 4 schema indicates coffeefiller permission read coffeemaker parameter indicates coffee machine role intended keep filled coffeestatus indicates whether machine full empty addition role permission change value coffeestock 32 interaction model inevitably dependencies relationships various roles multiagent organisation indeed interplay central way system func tions given fact interactions obviously need captured represented coffeefiller fill coffeemachine fill coffee machine supplied coffeemaker coffeestock figure 5 fill protocol definition analysis phase gaia links roles represented interaction model model consists set protocol definitions one type interrole interac tion protocol viewed institutionalised pattern interaction pattern interaction formally defined abstracted away particular sequence execution steps viewing interactions way means attention focused essential nature purpose interaction rather precise ordering particular message exchanges cf interaction diagrams objectory 6 pp198203 scenarios fusion 6 approach means single protocol definition typically give rise number message interchanges run time system example consider english auction protocol involves multiple roles sellers bidders many potential patterns interchange specific price announcements corresponding bids however analysis stage precise instantiation details unnecessary premature protocol definition consists following attributes ffl purpose brief textual description nature interaction eg information schedule activity assign task ffl initiator roles responsible starting interaction ffl responder roles initiator interacts ffl inputs information used role initiator enacting protocol ffl outputs information supplied byto protocol responder course ffl processing brief textual description processing protocol initiator performs course interaction illustration consider fill protocol forms part coffeefiller role figure 5 states protocol fill initiated role coffeefiller involves role coffeemachine protocol involves coffeefiller putting coffee machine named coffeemaker results coffeemachine informed value coffeestock see examples protocols section 5 analysis design 11 33 analysis process analysis stage gaia summarised 1 identify roles system roles system typically correspond ffl individuals either within organisation acting independently ffl departments within organisation organisations output prototypical roles model list key roles occur system informal unelaborated description 2 role identify document associated protocols protocols patterns interaction occur system various roles example protocol may correspond agent role buyer submitting bid another agent role seller output interaction model captures recurring patterns interrole interaction 3 using protocol model basis elaborate roles model output fully elaborated roles model documents key roles occurring system permissions responsibilities together protocols activities participate 4 iterate stages 13 4 design aim classical design process transform abstract models derived analysis stage models sufficiently low level abstraction easily implemented case agentoriented design however rather aim gaia transform analysis models sufficiently low level abstraction traditional design techniques including objectoriented techniques may applied order implement agents put another way gaia concerned society agents cooperate realise systemlevel goals required individual agent order actually agent realises services beyond scope gaia depend particular application domain gaia design process involves generating three models see figure 1 agent model identifies agent types make system agent instances instantiated types services model identifies main services required realise agents role finally acquaintance model documents lines communication different agents table 3 instance qualifiers qualifier meaning exactly n instances mn n instances 0 instances 1 instances 41 agent model purpose gaia agent model document various agent types used system development agent instances realise agent types runtime agent type best thought set agent roles may fact onetoone correspondence roles identified roles model see section 31 agent types however need case designer choose package number closely related roles agent type purposes convenience efficiency also major concern stage designer almost certainly want optimise design one way aggregate number agent roles single type example decision may necessary footprint agent ie runtime requirements terms processor power memory space large efficient deliver number roles single agent deliver number agents performing single role obviously tradeoff coherence agent type easily functionality understood efficiency considerations come play designing agent types agent model defined using simple agent type tree leaf nodes correspond roles defined roles model nodes correspond agent types agent type 1 children 2 3 means 1 composed roles make 2 3 document agent instances appear system annotating agent types agent model cf qualifiers fusion 6 annotation n means exactly n agents type runtime system annotation mn means less n instances type runtime system n annotation means zero instances runtime means one instances runtime see table 3 note inheritance plays part gaia agent models view agents coarse grained computational systems agent system typically contain comparatively small number roles types often onetoone mapping reason believe inheritance useful part play design agent types course comes actually implementing agents inheritance may used great effect normal objectoriented fashion analysis design 13 42 services model name suggests aim gaia services model identify services associated agent role specify main properties services service mean function agent oo terms service would correspond method however mean services available agents way objects methods available another object invoke rather service simply single coherent block activity agent engage clear every activity identified analysis stage correspond service though every service correspond activity service may performed agent necessary document properties specifically must identify inputs outputs preconditions postconditions service inputs outputs services derived obvious way protocols model pre postconditions represent constraints services derived safety properties role note definition role associated least one service services agent perform derived list protocols activ ities responsibilities liveness properties role example returning coffee example four activities protocols associated role fill informworkers checkstock awaitempty general least one service associated protocol case checkstock example service may name take input stock level threshold value simply compare two pre postconditions state coffee stock level greater 0 one safety properties role coffeefiller gaia services model prescribe implementation services doc uments developer free realise services implementation framework deemed appropriate example may decided implement services directly methods objectoriented language alternatively service may decomposed number methods 43 acquaintance model final gaia design model probably simplest acquaintance model acquaintance models simply define communication links exist agent types define messages sent messages sent simply indicate communication pathways exist particular purpose acquaintance model identify potential communication bottlenecks may cause problems runtime see section 5 example good practice ensure systems loosely coupled acquaintance model help basis acquaintance model may found necessary revisit analysis stage rework system design remove problems agent acquaintance model simply graph nodes graph corresponding agent types arcs graph corresponding communication pathways agent acquaintance models directed graphs arc b indicates send 14 wooldridge jennings kinny messages b necessarily b send messages acquaintance model may derived straightforward way roles protocols agent models 44 design process gaia design stage summarised 1 create agent model ffl aggregate roles agent types refine form agent type hierarchy ffl document instances agent type using instance annotations 2 develop services model examining activities protocols safety liveness properties roles 3 develop acquaintance model interaction model agent model 5 case study agentbased business process management section briefly illustrates gaia applied case study analysis design agentbased system managing british telecom business process see 20 details reasons brevity omit details aim instead give general flavour analysis design particular application providing customers quote installing network deliver particular type telecommunications service activity involves following departments customer service division csd design division dd legal division ld various organisations provide outsourced service vetting customers vcs process initiated customer contacting csd set requirements parallel capturing requirements csd gets customer vetted customer fails vetting procedure quote process terminates assuming customer satisfactory requirements mapped service portfolio met standard offtheshelf item immediate quote offered case bespoke services however process complex dd starts design solution satisfy customers requirements whilst occurring ld checks legality proposed service desired service illegal quote process ter minates assuming requested service legal design eventually completed costed dd informs csd quote csd turn informs customer business process terminates moving processoriented description systems operation organisational view comparatively straightforward many cases one one mapping departments roles csds behaviour falls two distinct roles one acting interface customer customerhandler figure 6 one overseeing process inside organisation quotemanager figure 7 thus vcs lds dds behaviour covered roles customervetter figure 8 respectively final role customer figure 11 requires quote analysis design 15 role schema customerhandler ch description receives quote request customer oversees process ensure appropriate quote returned protocols activities awaitcall producequote informcustomer permissions reads supplied customerdetails customer contact information supplied customerrequirements customer wants quote completed quote nil responsibilities liveness safety ffl true figure 6 schema role customerhandler respective role definitions place next stage define associated interaction models roles focus interactions associated quotemanager role role interacts customer role obtain customers requirements getcustomerrequirements protocol figure 12c customervetter role determine whether customer satisfactory vetcustomer protocol figure 12a customer proves unsatisfactory two protocols enacted customer satisfactory request costed costing involves enacting activity coststandardservice frequently requested services checkservicelegality figure 12b costbespokeservice figure 12d protocols nonstandard requests completed analysis application turn design phase first model generated agent model figure 13 shows cases onetoone correspondence roles agent types exception customerhandler quotemanager roles high degree interdependence grouped single agent type second model services model space limitations concentrate quotemanager role customer service division agent based quotemanager role seven distinct services identified table 3 getcustomerrequirements protocol derive service obtain customer requirements service handles interaction perspective quote manager takes customerdetails input returns customerrequirements output figure 12c associated pre postconditions service associated vetcustomer protocol vet customer inputs derived protocol definition figure 12a customerdetails outputs creditrating service precondition appropriate customer vetter must role schema quotemanager qm description responsible enacting quote process generates quote returns quote nil customer inappropriate service illegal protocols activities vetcustomer getcustomerrequirements coststandardservice checkservicelegality costbespokeservice permissions reads supplied customerdetails customer contact information supplied customerrequirements detailed service requirements creditrating customers credit rating serviceislegal boolean bespoke requests generates quote completed quote nil responsibilities liveness costservice checkservicelegality k costbespokeservice safety figure 7 schema role quotemanager available derived tendercontract interaction vetcustomer protocol post condition value creditrating nonnull forms part safety condition quotemanager role third service involves checking whether customer satisfactory creditrating safety condition quotemanager customer unsatisfactory first branch quoterespose liveness condition figure 7 gets executed customer satisfactory costservice liveness route executed next service makes decision path costservice liveness expression gets executed either service standard type execute service produce standard costing bespoke service case checkservicelegality costbespokeservice protocols enacted latter case protocols associated service produce bespoke costing service produces nonnil value quote long serviceislegal safety condition figure 7 violated final service involves informing customer quote turn completes customerhandler role analysis design 17 service inputs outputs precondition postcondition obtain customer quirements customerdetails customerrequirements true true vet customer customerdetails creditrating customer vetter available creditrating nil check customer creditrating continuationdecision continuationdecision nil continuationdecision nil check service type customerrequirements servicetype creditrating bad servicetypefstandardbespokeg produce standard ser vice costing servicetype customerrequirements quote servicetype standard quote nil quote nil produce bespoke ser vice costing servicetype customerrequirements quote serviceislegal servicetype bespoke quote serviceislegal quote quote nilserviceislegal inform customer customerdetails quote true customers know quote table 3 services model role schema customervetter cv description checks credit rating supplied customer protocols activities vettingrequest vettingresponse permissions reads supplied customerdetails customer contact information customerratinginformation credit rating information generates creditrating credit rating customer responsibilities liveness safety figure 8 schema role customervetter role schema legaladvisor la description determines whether given bespoke service request legal protocols activities legalcheckrequest legalcheckresponse permissions reads supplied customerrequirements details proposed service generates serviceislegal true false responsibilities liveness safety ffl true figure 9 schema role legaladvisor final model acquaintance model shows communication pathways exist agents figure 14 analysis design 19 role schema networkdesigner nd description design cost network meet bespoke service request requirements protocols activities costingrequest producedesign returncosting permissions reads supplied customerrequirements details proposed service serviceislegal boolean generates quote cost realising service responsibilities liveness safety figure 10 schema role networkdesigner role schema customer cust description organisation individual requiring service quote protocols activities makecall giverequirements permissions generates customerdetails owner customer information customerrequirements owner customer requirements responsibilities liveness safety ffl true figure 11 schema role customer 6 related work recent times surge interest agentoriented modelling techniques method ologies various approaches may roughly grouped follows qm costingrequest ask costing returncosting ch qm design network cost solution customerrequirements customerrequirements quote tendercontract qm select cv award contract vettingrequirements vettingrequest qm cv customer ask vetting customerdetails vettingresponse perform vetting return credit rating customerdetails customerratinginfo creditrating legalcheckrequest la services legality ask check customerrequirements customerrequirements legalcheckresponse la qm nd check service legality serviceislegal b c qm requirementsrequest cust requirements details customers customerdetails cust qm details provide service customerrequirements giverequirements figure 12 definition protocols associated quotemanager role vetcustomer b checkservicelegality c getcustomerrequirements costbespokeservice customeragent customer customerhandler quotemanager customerservicedivisionagentcustomervetter vetcustomeragentnetworkdesigneragent networkdesignerlegaladvisoragent figure 13 agent model ffl 4 24 take existing oo modelling techniques methodologies basis seeking either extend adapt models define methodology use directly extend applicability oo methodologies techniques design patterns design agent systems analysis design 21 customerservicedivisionagent customeragent networkdesignagent legaladvisoragent vetcustomeragent figure 14 acquaintance model ffl 3 17 build upon extend methodologies modelling techniques knowledge engineering providing formal compositional modelling languages suitable verification system structure function ffl take existing formal methods languages example z 31 provide definitions within framework support specification agents agent systems 26 ffl essentially developed de novo particular kinds agent systems cassiopeia 7 example supports design contract net 29 based systems applied robot soccer design methodologies may also divided essentially topdown approaches based progressive decomposition behaviour usually building gaia notion role cassiopeia bottomup approaches begin identifying elementary agent behaviours useful survey classifies reviews methodologies also appeared 16 definition use various notions role responsibility interaction team society organization particular methods agentoriented analysis design inherited adapted much general uses concepts within multiagent systems including organization focussed approaches 14 9 18 sociological approaches 5 however beyond scope article compare gaia definition use concepts heritage instead focus relationship gaia approaches based build upon oo techniques particular kgr approach 24 23 perhaps useful begin summarizing oo modelling techniques design methodologies directly applicable multiagent system design 61 shortcomings object oriented techniques first problem concerns modelling individual agents agent classes superficial similarities agents objects representing agent object ie set attributes methods useful representation finegrained operating inappropriate level abstraction agent represented may appear quite strange perhaps exhibiting one public method whose function receive messages agents thus object model capture much useful information agent powerful oo concepts inheritance aggregation become quite useless result poverty representation several reasons problem one agent paradigm based significantly stronger notion encapsulation object paradigm agents internal state 22 wooldridge jennings kinny usually quite opaque systems behaviours agent perform upon request even made known advertises within active system related key characteristic autonomy agents cannot normally created destroyed liberal manner allowed within object systems freedom determine may respond messages including example choosing negotiate agreement task performed underlying communication model usually asynchronous predefined notion flow control one agent another agent may autonomously initiate internal external behaviour time sent message finally agents internal state including knowledge may need represented manner cannot easily translated set attributes case would constitute premature implementation bias second problem concerns power object models adequately capture relationships hold agents multiagent system secondary models common use oo methodologies use cases interaction diagrams may usefully adapted somewhat different semantics object model constitutes primary specification oo system captures associations object classes model largely static dependencies paths accessibility largely irrelevant multiagent system instantiation relationship classes instances directly adopted important aspects relationships agents repertoire interactions degree control influence upon easily captured essential problem uniformity static nature oo object model adequate agent model needs capture relationships agents dynamic nature perhaps also relationships agents nonagent elements system including passive abstract ones modelled resources problems concerning suitability oo modelling techniques modelling multiagent system another issue applicability oo methodologies process analyzing designing multiagent system oo methodologies typically consist iterative refinement cycle identifying classes specifying semantics relationships elaborating interfaces implementation level abstraction appear similar typical ao methodologies usually proceed identifying roles responsibilities goals developing organizational structure elaborating knowledge behaviours associated role agent however similarity disappears level detail required models key abstractions involved quite different example first step object class identification typically considers tangible things roles organizations events even interactions candidate objects whereas need clearly distinguished treated differently agentoriented approach uniformity concreteness object model basis problem oo methodologies provide guidance inspiration rather directly useful approach analysis design 62 comparison kgr approach kgr approach 24 23 developed fulfill need principled approach specification complex multiagent systems based beliefdesireintention bdi technology procedural reasoning system prs distributed multiagent reasoning system dmars 25 8 key motivation work provided useful familiar mechanisms structuring managing complexity systems first obvious difference approach proposed kgr one scope methodology attempt unify analysis abstract design multiagent system concrete design implementation particular agent technology regarding output analysis design process abstract specification traditional lowerlevel design methodologies may applied kgr contrast makes strong architectural commitment analysis design 23 bdi architectures proposes design elaboration refinement process leads directly executable agent specifications given proliferation available agent technologies clearly advantages general approach proposed however downside cannot provide set models abstractions terminology may used uniformly throughout system life cycle furthermore may need iteration ao analysis design process lowerlevel design process reveals issues best resolved ao level research problem approach others like whether adequacy completeness outputs assessed independently traditional design process follows second difference work clear distinction made analysis phase roles interaction models fully elaborated design phase agent services acquaintance models developed kgr approach make distinc tion proposing instead progressive elaboration refinement agent interaction models capture respectively roles agents services interactions acquaintances methodologies begin identification roles properties chosen model separately abstract agents roles concrete agents services provide kgr hand employs uniform agent model admits abstract agents concrete agent classes instances allows organized within inheritance hierarchy thus allowing multiple levels abstraction deferment identification concrete agent classes late design process approaches employ responsibilities abstraction used decompose structure role differ significantly represented developed responsibilities consist safety liveness properties built already identified interactions activities contrast kgr treats responsibilities abstract goals triggered events interactions adopts strictly topdown approach decomposing services low level goals activity specifications may elaborated similarities however despite absence explicit goals approach safety properties may viewed maintenance goals liveness properties goals achievement notion permissions however absent kgr approach whereas notion protocols may developed much greater degree detail example 22 protocols employed generic descriptions behaviour may involve entities modelled agents coffee machine summarize key differences kgr approach making commitment implementation bdi agent architecture able employ iterative topdown approach elaborating set models describe multiagent system macro microlevel make extensive use oo modelling techniques produce executable specifications final output approach described mixed topdown bottomup approach employs finegrained diverse set generic models capture result analysis design process tries avoid premature commitment either architectural detailed design implementation process follow envisage however approach suitably specialized specific agent architectures implementation techniques subject research 7 conclusions work article described gaia methodology analysis design agentbased systems key concepts gaia roles associated responsibilities permissions activities protocols roles interact one another certain institutionalised ways defined protocols respective roles several issues remaining future work ffl selfinterested agents gaia explicitly attempt deal systems agents may share common goals class systems represents arguably important application area multiagent systems therefore essential methodology able deal ffl dynamic open systems open systems system components may join leave runtime may composed entities designer knowledge designtime long recognised difficult class system engineer 15 13 ffl organisation structures another aspect agentbased analysis design requires work notion organisational structure moment structures implicitly defined within gaia within role interaction models however direct explicit representations structures value many applications example agents used model large organisations organisations explicitly defined structure representing structures may way adequately capturing understanding organisa tions communication control structures generally development organisation design patterns might useful reusing successful multiagent system structures cf 12 ffl cooperation protocols representation interagent cooperation protocols within gaia currently somewhat im poverished future work need provide much richer protocol specification framework ffl international standards gaia designed particular standard agent communication mind fipa agent communication language 11 however event widescale industrial takeup standards may prove useful adapt methodology compatible standards ffl formal semantics finally believe successful methodology one pragmatic value one also welldefined unambiguous formal semantics typical developer need never even aware existence semantics nevertheless essential precise understanding concepts terms methodology mean 33 acknowledgments article much extended version 35 grateful participants agents 99 conference gave us much useful feedback notes 1 greek mythology gaia mother earth figure pertinently gaia name influential hypothesis put forward ecologist james lovelock effect living organisms earth understood components single entity regulates earths environment theme many heterogeneous entities acting together achieve single goal central theme multiagent systems research 1 key consideration development methodology 2 precise believe systems require additional models outline current version methodology analysis design 25 3 third case yet elaborated methodology single role represents collective behaviour number individuals view important modelling cooperative team problem solving also bridging gap micro macro levels agentbased system 4 widely used formalism specifying liveness safety properties temporal logic previous work use formalism strongly advocated use agent systems 10 although undoubted strengths mathematical tool expressing liveness safety properties doubt viability tool use everyday software engineers therefore chosen alternative approach temporal logic based regular expressions likely better understood target audience 5 moment explicitly model creation deletion roles thus roles persistent throughout systems lifetime future plan make dynamic process r readings distributed artificial intelligence formal specification multiagent systems realworld case models methodologies agentoriented analysis design commitments individual intentions groups organizations agent oriented design soccer robot team formal specification dmars formal specification verification multiagent systems foundation intelligent physical agents design patterns social conceptions knowledge action dai foundations open systems semantics mace flexible testbed distributed ai research open information systems semantics distributed artificial intelligence survey agentoriented methodologies analysis design multiagent systems using mascommonkads organization self design production systems using archon develop realworld dai applications electricity transportation management particle acceleration control systematic software development using vdm second edition agentis agent interaction model modelling design multiagent systems methodology modelling technique systems bdi agents distributed multiagent reasoning system architecture language specification agent theory agent construction case study specification development reactive systems contract net formalism control distributed problem solving framework distributed problem solving z notation second edition intelligent agents theory practice pitfalls agentoriented development methodology agentoriented analysis design tr distributed artificial intelligence systematic software development using vdm 2nd ed open information systems semantics distributed artificial intelligence social conceptions knowledge action z notation agentoriented programming objectoriented development objectoriented analysis design applications 2nd ed methodology modelling technique systems bdi agents pitfalls agentoriented development methodology agentoriented analysis design organization selfdesign distributed production systems using archon develop realworld dai applications part 1 agent theory agent construction modelling design multiagent systems analysis design multiagent systems using mascommon kads formal specification dmars agentis agent interaction model survey agentoriented methodologies metamodel analysis design organizations multiagent systems ctr antonella di stefano corrado santoro modeling multiagent communication contexts proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy garcs r quirs chover j huerta e camahort development methodology moderately open multiagent systems proceedings 25th conference iasted international multiconference software engineering p3742 february 1315 2007 innsbruck austria fuhua shang ruishan du yang li agentbased soft computing society applied research reservoir sedimentary facies oil fields proceedings ieeewicacm international conference intelligent agent technology p709712 december 1822 2006 stefan poslad patricia charlton standardizing agent interoperability fipa approach mutliagents systems applications springerverlag new york inc new york ny 2001 haralambos mouratidis paolo giorgini gordon manson modelling secure multiagent systems proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia zili zhang chengqi zhang building agentbased hybrid intelligent systems design application hybrid intelligent systems ios press amsterdam netherlands toacy c oliveira paulo alencar cowan carlos lucena xtao enabling declarative approach specification multiagent systems acm sigsoft software engineering notes v30 n4 july 2005 clemens fritschi klaus dorer agentoriented software engineering successful tac participation proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy carles sierra jordi sabater jaume agust pere garcia integrating evolutionary computing sadde methodology proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia pascot integrated modeling multiagent systems environment proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy adam l berger robert r kessler modifying agent systems open dynamic agent environment proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia arnon sturm onn shehory towards industrially applicable modeling technique agentbased systems proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy gao bo fei qi chen xueguang exploiting objectoriented methodologies model mas organizations acm sigsoft software engineering notes v27 n1 p5862 january 2002 paul davidsson fredrik wernstedt multiagent system architecture coordination justintime production distribution proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain fausto giunchiglia john mylopoulos anna perini tropos software development methodology processes models diagrams proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy prabhat ranjan k misra agent based system development domainspecific goal approach acm sigsoft software engineering notes v31 n6 november 2006 abdul shibghatullah tillal eldabi jasna kuljis proposed multiagent model bus crew scheduling proceedings 37th conference winter simulation december 0306 2006 monterey california lin padgham michael winikoff prometheus methodology developing intelligent agents proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy vladimir gorodetsky oleg karsaev victor konushy wolfekkehard matzke eyck jentzsch vadim ermolayev multiagent software tool management design process microelectronics proceedings ieeewicacm international conference intelligent agent technology p773776 december 1822 2006 tarek jarraya zahia guessoum reuse interaction protocols develop interactive agents proceedings ieeewicacm international conference intelligent agent technology p411415 december 1822 2006 jie xing munindar p singh engineering commitmentbased multiagent systems temporal logic approach proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia xinjun mao jiajia chen model organization constraints multiagent system intelligent information processing ii springerverlag london 2004 prabhat ranjan k misra hybrid model agent based system requirements analysis acm sigsoft software engineering notes v31 n3 may 2006 riza cenk erdur ouz dikenelli multiagent system infrastructure software component marketplace ontological perspective acm sigmod record v31 n1 march 2002 alessandro garcia christina chavez ricardo choren enhancing agentoriented models aspects proceedings fifth international joint conference autonomous agents multiagent systems may 0812 2006 hakodate japan stefania bandini sara manzoni giuseppe vizzari multiagent system remote psychological profiling role playing games based tests proceedings acm symposium applied computing march 0912 2003 melbourne florida metamodeling techniques applied design reconfigurable control applications eurasip journal embedded systems v2008 n2 p19 april 2008 roleassignment open agent societies proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia jeroen wj gijsen nicholas b szirbik gerd wagner agent technologies virtual enterprises oneofakindproduction industry international journal electronic commerce v7 n1 p934 number 1fall 2002 maged n kamel boulos qiang cai julian padget gerard rushton using software agents preserve individual health data confidentiality microscale geographical analyses journal biomedical informatics v39 n2 p160170 april 2006 paul davidsson fredrik wernstedt embedded agents district heating management proceedings third international joint conference autonomous agents multiagent systems p11481155 july 1923 2004 new york new york holger knublauch extreme programming multiagent systems proceedings first international joint conference autonomous agents multiagent systems part 2 july 1519 2002 bologna italy athie l self scott deloach designing specifying mobility within multiagent systems engineering methodology proceedings acm symposium applied computing march 0912 2003 melbourne florida haiping xu sol shatz framework modelbased design agentoriented software ieee transactions software engineering v29 n1 p1530 january danny weyns tom holvoet kurt schelfthout multiagent systems software architecture another perspective software engineering multiagent systems proceedings fifth international joint conference autonomous agents multiagent systems may 0812 2006 hakodate japan paolo bresciani anna perini paolo giorgini fausto giunchiglia john mylopoulos knowledge level software engineering methodology agent oriented programming proceedings fifth international conference autonomous agents p648655 may 2001 montreal quebec canada chen iyad rahwan yun yang temporal interaction diagrams multiprocess environments practicing software engineering 21st century idea group publishing hershey pa manuel alfonseca juan de lara simulating evolutionary agent communities oocsmp proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain steve munroe simon miles luc moreau javier vzquezsalceda prime software engineering methodology developing provenanceaware applications proceedings 6th international workshop software engineering middleware november 1010 2006 portland oregon wenpin jiao john debenham brian hendersonsellers organizational models interaction patterns use analysis design multiagent systems web intelligence agent system v3 n2 p6783 april 2005 mehdi dastani joris hulstijn frank dignum johnjules ch meyer issues multiagent system development proceedings third international joint conference autonomous agents multiagent systems p922929 july 1923 2004 new york new york thomas juan adrian pearce leon sterling roadmap extending gaia methodology complex open systems proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy anthony karageorgos simon thompson nikolay mehandjiev semiautomatic design agent organisations proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain ralph depke reiko heckel jochen kuster improving agentoriented modeling process roles proceedings fifth international conference autonomous agents p640647 may 2001 montreal quebec canada agent architecture agentbased supply chain integration coordination acm sigsoft software engineering notes v28 n4 july thomas juan leon sterling maurizio martelli viviana mascardi customizing aose methodologies reusing aose features proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia giacomo cabri luca ferrari letizia leonardi applying security policies agent roles jaas based approach science computer programming v59 n12 p127146 january 2006 w clarke commercial experience agentoriented software engineering proceedings ieeewicacm international conference intelligent agent technology p730736 december 1822 2006 joaqun pea rafael corchuelo jos l arjona top approach mas protocol descriptions proceedings acm symposium applied computing march 0912 2003 melbourne florida weiming zhang intelligent agentbased cooperative information processing model information management support systems multimedia technology idea group publishing hershey pa jorge j gmezsanz juan pavn francisco garijo metamodels building multiagent systems proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain josh dehlinger robyn r lutz productline requirements approach safe reuse multiagent systems acm sigsoft software engineering notes v30 n4 july 2005 vladimir gorodetski oleg karsaev vladimir samoilov victor konushy evgeny mankov alexey malyshev multiagent system development kit mas software tool implementing gaia methodology intelligent information processing ii springerverlag london 2004 onn shehory arnon sturm evaluation modeling techniques agentbased systems proceedings fifth international conference autonomous agents p624631 may 2001 montreal quebec canada alexander artikis jeremy pitt marek sergot animated specifications computational societies proceedings first international joint conference autonomous agents multiagent systems part 3 july 1519 2002 bologna italy fabien gandon laurent berthelot rose diengkuntz multiagent platform corporate semantic web proceedings first international joint conference autonomous agents multiagent systems part 3 july 1519 2002 bologna italy maria fasli relationship roles power preliminary report proceedings 2006 acm symposium applied computing april 2327 2006 dijon france jp jamont occello un intergiciel par envoi de message conome en nergie bas sur une approche multiagents support pour la communication sans fil dans les systmes complexes physiques ouverts proceedings 2nd frenchspeaking conference mobility uibquity computing may 31june 03 2005 grenoble france martin j kollingbaum timothy j norman supervised interaction creating web trust contracting agents electronic environments proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy david poutakidis lin padgham michael winikoff debugging multiagent systems using design artifacts case interaction protocols proceedings first international joint conference autonomous agents multiagent systems part 2 july 1519 2002 bologna italy nico janssens elke steegmans tom holvoet pierre verbaeten agent design method promoting separation computation coordination proceedings 2004 acm symposium applied computing march 1417 2004 nicosia cyprus chris j van aart bob wielinga guus schreiber organizational building blocks design distributed intelligent system international journal humancomputer studies v61 n5 p567599 november 2004 antonella di stefano giuseppe pappalardo corrado santoro emiliano tramontana framework design automated implementation communication aspects multiagent systems journal network computer applications v30 n3 p11361152 august 2007 michelle casagni margaret lyell comparison two component frameworks fipacompliant multiagent system webcentrie j2ee platform proceedings 25th international conference software engineering may 0310 2003 portland oregon pter egri jzsef vncza cooperative production networks multiagent modeling planning acta cybernetica v18 n2 p223238 january 2007 arnon sturm dov dori onn shehory singlemodel method specifying multiagent systems proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia paul davidsson fredrik wernstedt multiagent system architecture coordination justintime production distribution knowledge engineering review v17 n4 p317329 december 2002 davide grossi lambr royakkers frank dignum organizational structure responsibility analysis dynamic logic organized collective agency artificial intelligence law v15 n3 p223249 september 2007 federico bergenti agostino poggi development toolkit realize autonomous interoperable agents proceedings fifth international conference autonomous agents p632639 may 2001 montreal quebec canada antonella di stefano corrado santoro giuseppe pappalardo emiliano tramontana enforcing agent communication laws means reflective framework proceedings 2004 acm symposium applied computing march 1417 2004 nicosia cyprus carole bernon massimo cossentino juan pavn agentoriented software engineering knowledge engineering review v20 n2 p99116 june 2005 olga pacheco jos carmo role based model normative specification organized collective agency agents interaction autonomous agents multiagent systems v6 n2 p145184 march fabien gandon agents handling annotation distribution corporate semantic web web intelligence agent system v1 n1 p2345 january fabien gandon agents handling annotation distribution corporate semantic web web intelligence agent system v1 n1 p2345 january gerd wagner agentobjectrelationship metamodel towards unified view state behavior information systems v28 n5 p475504 july paolo bresciani anna perini paolo giorgini fausto giunchiglia john mylopoulos tropos agentoriented software development methodology autonomous agents multiagent systems v8 n3 p203236 may 2004 ralph depke reiko heckel jochen malte kster formal agentoriented modeling uml graph transformation science computer programming v44 n2 p229252 august 2002 ioannis n athanasiadis alexandros k mentes pericles mitkas yiannis mylopoulos hybrid agentbased model estimating residential water demand simulation v81 n3 p175187 march 2005 javier vzquezsalceda virginia dignum frank dignum organizing multiagent systems autonomous agents multiagent systems v11 n3 p307360 november 2005 haiping xu sol shatz adk agent development kit based formal design model multiagent systems automated software engineering v10 n4 p337365 october virginia dignum frank dignum johnjules meyer agentmediated approach support knowledge sharing organizations knowledge engineering review v19 n2 p147174 june 2004 anthony karageorgos simon thompson nikolay mehandjiev agentbased system design b2b electronic commerce international journal electronic commerce v7 n1 p5990 number 1fall 2002 alfredo garro luigi palopoli francesco ricca exploiting agents elearning skills management context ai communications v19 n2 p137154 april 2006 alfredo garro luigi palopoli francesco ricca exploiting agents elearning skills management context ai communications v19 n2 p137154 january 2006 georgeff n azarmi ai done us bt technology journal v21 n4 p1522 rene elio anita petrinjak normative communication models agent autonomous agents multiagent systems v11 n3 p273305 november 2005 carles sierra agentmediated electronic commerce autonomous agents multiagent systems v9 n3 p285301 november 2004 manolis koubarakis dimitris plexousakis formal framework business process modelling design information systems v27 n5 p299319 july 2002 jaelson castro manuel kolp john mylopoulos towards requirementsdriven information systems engineering tropos project information systems v27 n6 p365389 september 2002 mariepierre gervais odac agentoriented methodology based odp autonomous agents multiagent systems v7 n3 p199228 november manuel kolp paolo giorgini john mylopoulos multiagent architectures organizational structures autonomous agents multiagent systems v13 n1 p325 july 2006 franco zambonelli nicholas r jennings michael wooldridge developing multiagent systems gaia methodology acm transactions software engineering methodology tosem v12 n3 p317370 july chihab hanachi christophe sibertinblanc protocol moderators active middleagents multiagent systems autonomous agents multiagent systems v8 n2 p131164 march 2004 anthony karageorgos nikolay mehandjiev simon thompson ramasd semiautomatic method designing agent organisations knowledge engineering review v17 n4 p331358 december 2002 ofer arazy carson c woo analysis design agentoriented information systems knowledge engineering review v17 n3 p215260 september 2002 franco zambonelli andrea omicini challenges research directions agentoriented software engineering autonomous agents multiagent systems v9 n3 p253283 november 2004 michael luck peter mcburney chris preist manifesto agent technology towards next generation computing autonomous agents multiagent systems v9 n3 p203252 november 2004 rajiv kishore hong zhang r ramesh enterprise integration using agent paradigm foundations multiagentbased integrative business information systems decision support systems v42 n1 p4878 october 2006 gerhard wei agent orientation software engineering knowledge engineering review v16 n4 p349373 december 2001