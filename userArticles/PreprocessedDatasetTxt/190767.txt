index transformation algorithms linear algebra framework present linear algebraic formulation class index transformations asgray code encoding decoding matrix transpose bit reversal vector reversalshuffles index dimension permutations formulation unifies simplifiesand used derive algorithms hypercube multiprocessors show widely known properties gray codes wellknown properties well derived using framework using framework relate hypercube communications algorithms gaussjordan elimination matrix 0s 1s b introduction present theory class index transformation algorithms properly thought matrixvector product though rarely class strictly superset class known bcp bitpermutecomplement 20 21 spirit theory linked ideas van loans new book 26 particularly notion matrix factorizations define algorithms principal idea discussion matrix factorization algorithms per se idea different way viewing generating algorithms loan 26 covers computational frameworks fast fourier transform despite differences approach quote firmly agree proper way discuss matrixvector product discrete fourier transform matrixvector notation vectors subscripts multiple summations repelled scalar notation assembly language coding retard algorithmic development although always clear bcp larger classes communications problems formulated matrixvector products rarely keohane stearns address similar class permutations 19 formulate problem matrixvector product notable exception contemporaneous work cormen 2 permuting data disk arrays motivation stems communications algorithms real applications hypercube multiprocessors connection machine model cm2 multiprocessor though believe ideas wider applicability matrices contain 0s 1s describe transformations vector length 2 n indirectly binary encodings familiar example bit reversal operation used conjunction ffts bit reversal permutation vector length 2 n induced permutation n objects n bits vectors indices one represent transformation 2 n theta 2 n permutation matrix components vector 11 26 purposes convenient consider compact representation n theta n matrix describing index transformation bit reversal case 1s northeastsouthwest diagonal otherwise 0 also familiar socalled dimension transformations index permutations arbitrary permutations n bit indices induce permutations 2 n elements use matrices order 2 n matrices order n suffice define linear index transformation bit vector n components n theta n 01 matrix matrixvector multiply performed modulo 2 long nonsingular n theta n matrix induces permutation indices dimension permutations trivial examples transformations examples include gray code encoding decoding arbitrary axes many real applications hypercube multiprocessors require complicated compositions transformations show matter notation rather existence certain kind convenient algorithm hypercube perform data movement given linear index transformation equivalent ability perform gaussjordan elimination without pivoting ability turn related familiar condition principal submatrices thus complicated combinatorial problem devising algorithm reduced algebraic problem decomposing matrix believe first time existence hypercube communications algorithm related ability perform gaussjordan elimination section 2 fix notation useful throughout paper section 3 contains main results section 4 apply results towards special case gray code encoding decoding section 5 considers dimension permutations conclude section 6 notation let f 2 field elements f0 1g addition multiplication defined modulo 2 paper addition multiplication always performed modulo 2 denote vector space nvectors elements f 2 f n similarly set theta n matrices elements f 2 denoted f mn 2 clarity sometimes display matrices empty spaces entries 0 sometimes consider binary encoding node address hypercube usual manner integer 0 identified element f n 2 use binary encoding number thus identify vector notice vector written least significant bit first course f ncan naturally included subset f n1 2 appending extra zero admit vector notation binary representation number seems clash usual representation order appears backwards definition presented appropriate consistent matrixvector notation resisted temptation refer first row matrix f mn 2 first component vector f n 2 0th rather chose familiar index origin one useful vectors e nth component 1 j first n components 1 vectors thought elements f k 2 using natural embedding also avoid difficulties letting e ordered sequence numbers reversal sequence 3 linear affine index transformations define transformations interest us refer affine linear definition 31 index transformation defined affine data node sent node fi cormen 2 calls class transformations bmmc bitmatrixmultiplycomplement definition 32 index transformation defined linear data node sent node fi thus linear index transformation affine transformation fixes data node 0 simplest hypercube communication unconditional exchange data across fixed dimension algebraically described another simple hypercube communication sends data opposite corner hypercube vector reversal another example linear index transformation dimension permutation considered authors stone 22 fraser 6 nassimi sahni 20 21 flanders 5 johnsson ho 14 stout wagar 23 24 swarztrauber 25 dimension permutation defined map permutation matrix since permutation matrices orthogonal pp also symmetric square root identity thus symmetric permutation matrix corresponds disjoint set dimension pairs exchanged hand circulant permutation matrices correspond relabeling dimensions way preserves circular order indices shuffle unshuffle operations give two matrices circulant permutation matrices form subset irreducible permutation matrices matrix said irreducible nontrivial invariant subspaces irreducible permutation matrices correspond dimension exchange represented cycle section 4 consider example gray code encoding decoding basic theorems algebra tell us nonsingular map onetoone otherwise rank r maps hypercube rdimensional subcube map sends data 2 ngammar nodes one definition 33 conditional exchange across dimension k denoted e k communication pattern defined fi ai matrix whose diagonal consists 1s whose offdiagonal may possibly 1 kth row example conditional exchange across dimension 3 represented matrix mapping describes conditional change third bit depending first fourth bits extend use term conditional exchange also refer associated matrix without loss clarity lemma 31 e k conditional exchange e k nonsingular proof form matrix clear determinant e k 1 e k e thus notice kth diagonal entry 0 kth column 0 matrix would singular fact rank matrix would exactly n gamma 1 communication might termed conditional projection conditional exchange implemented directly hypercube node either sends data across dimension specified exchange nothing one dimension hypercube traversed operation algorithm achieves fifty percent overall utilization dimension hypercube communication operation uses dimensions simultaneously called cube swap operation node sends one message along hypercube dimension n theta n matrix decomposed sequence conditional exchange matrices describes algorithm implementing linear index transformation given sequence conditional exchange operations across dimensions 1 n respectively generally admits factorization form reordering dimensions 1 n factorization defines algorithm implementing linear index transformation sequence conditional exchanges different order sequence exchanges disjoint dimensions implemented pipelined fashion hypercube sequence identical cube swap operations long nontrivial amount data node pipeline one startup one winddown step dimension traversed pipe started algorithm achieves fifty percent utilization total bandwidth available course leaves us short factor two total use cube swap bandwidth allows us consider general situations present main theorem relating hypercube communications algorithms algebraically gaussjordan elimination performed columnwise modulo 2 instead reals theorem 31 following statements equivalent 1 may decomposed product conditional exchanges 2 index transformation defined accomplished hypercube pipelined sequence cube swaps accomplishing sequence conditional exchanges traversing dimensions 1 n consecutively 3 columnwise gaussjordan elimination algorithm modulo 2 runs completion without need pivoting 4 n principal submatrices nonsingular proof equivalence 1 2 discussed theorem columnwise gaussjordan elimination mean algorithm whose ith step consists adding multiples column columns resulting matrix matches identity first rows modulo 2 arithmetic one verify algorithm takes following simple form i12n ea j denotes matrix identity except jth row defined match wellknown gaussjordan algorithm requires pivoting ith step igamma1 ii 6 0 exactly condition ea nonsingular gaussjordan algorithm run completion without generating singular matrices e conversely suppose decomposed 1 product right side 31 change bits 1 thus matrix agrees identity matrix first rows determines e unique matrix describes ith step columnwise gaussjordan elimination without pivoting establishes equivalence 1 3 finally since step gaussjordan procedure adds multiples column columns determinants principal submatrices change thus gaussjordan algorithm runs completion principal submatrices nonsingular conversely principal submatrices nonsingular ith pivot cannot 0 product first pivots determinant ith principal submatrix established equivalence 3 4 proof complete corollary 31 lu l u nonsingular lower upper triangular matrices decomposed thus gaussian elimination rather gaussjordan elimination used test whether decomposition though gaussjordan needed construct decomposition corollary 32 let reordering numbers 1 n decomposed diagonal submatrices given rows columns nonsingular equivalently plup p permutation matrix index transformation corresponding performed sequence conditional exchanges order specified p proof gaussjordan algorithm run consecutively rows 1 n gives desired decomposition exists breaks need pivoting corollary 33 nonsingular upper lower triangular matrix algorithm exists traverses dimensions order proof diagonal minors determinants upper lower nonsingular triangular matrices corollary 34 cycle matrix diagonal entries equal 0 cannot written product conditional exchanges order proof principal submatrix equal 1 corollary 35 permutation matrix written product conditional exchanges order proof principal submatrices include exactly one row column one component cycles singular corollary 36 nonsingular defines index transformation performed pipelined sequence conditional exchanges followed dimension permutation algorithm proof nonsingular written plu performing gaussian elimination partial pivoting since shown construct algorithm corresponding lu since algorithms accomplishing address permutations exist accomplish linear transformation corollary 37 form u 1 pu 2 u 1 u 2 upper triangular 0 nonsingular principal submatrices therefore 0 implemented sequence conditional exchanges standard order proof let upper triangular every diagonal minor u 1 hence nonzero kth principal submatrix 0 given product kth principal submatrix p u 1 pu 2 u 2 hence nonsingular triple product u 1 pu 2 arises cm2 multiprocessor transposing matrix collapsing separating axes changing layout array machine case u 1 u 2 denote gray coding decoding operations respectively gray code decoded address bits permuted bits encoded possibly new way type operation explored next section gray codes hypercube multiprocessors gray coding decoding arbitrary axes important communication pattern hypercube multiprocessors outline section follows 1 brief digression history gray coding wellknown perhaps ought 2 derivation widely known properties gray code using linear algebra framework 3 applications theory previous section toward new results gray coding binaryreflected gray code curious history appeared many different applications invented french engineer emile baudot 18451903 purpose sending receiving telegraphs 10 1872 appeared solution socalled chinese ring puzzle see gardner 7 also solution famous tower hanoi puzzle frank gray developed code bears name 1940s though first published 1953 patent socalled pulse code modulation tube later gray code used many ways analogtodigital converters though probably obvious many believe gilbert 8 1958 first point explicitly consecutive numbers gray code sequence form hamiltonian path hypercube time fashionable enumerate hamiltonian paths hypercube well invention multiprocessor computers hypercube networks became possible first time make use paths real physical hypercubes many authors independently observed utility property embedding rings higher dimensional meshes cm2 system software uses embeddings store grids manner invisible programmer indeed would easy believe erroneously cm2 separate network grid communication cm2 data considered grid order also known news order data labeled located processor label gi g gray coding operator data cube order also known send order data labeled fact located node since certain algorithms run efficiently data grid order algorithms run faster cube order need routines convert two ordering schemes communication pattern converts single onedimensional axis cube grid order gi grid cube order given g g gamma1 given key point linear index transformations numerical linear algebra 9 common embed householder reflections givens rotations inside larger identity matrix operate selected components vector analo gously one gray code certain components vector hypercubes usual associate blocks components various axes one refers gray coding axis gray code encoding operator g deceptively simple defined condition g linear operator vectors modulo 2 let g n denote restriction gray code encoding operator g finite dimensional space f n 2 g n linear transformation f n whose n theta n matrix representation gray code decoding operator g gamma1 uniquely defined restriction g gamma1 finite dimensional space f n 2 n theta n matrix representation let n sequence 2 n elements f n 2 numerically increasing order obtain sequence reverse order add j n element hence name vector reversal let sequence gray codes elements n since proved important property binaryreflected gray code often taken part standard definition theorem 41 reversal property reversal sequence gs n equal sequence bit nth position complemented related observation theorem 42 consecutive members sequence gs n differ exactly one bit proof two consecutive numbers always written gi 1 k least significant bits since gj bit gray codes differ kth following gilbert 8 reversal property readily grasped eye diagram 0 represented blank space 1 black square 1000 1100 since g g gamma1 upper triangular corollary 33 gray coding decoding accomplished order example 4 express algorithm johnsson 12 notation notice algorithms perform encoding loworder bits highorder bits decoding performed highorder bits loworder bits algorithms reverse order first developed johnsson 16 existence use algorithms order discussed johnsson ho 15 17 one particularly interesting example decoding starting least significant bit case f p k 1 row pk column n readily follows edge used subcube defined v used subcube v 1 basis new algorithm given johnsson ho 15 takes better advantage available bandwidth generally decomposed product conditional exchanges e distinct dimensions element ith row jth column e 1 every jth row matches identity matrix wires along dimension j used take better advantage available bandwidth define code change operation g 1 g gamma1 combination example treating twodimensional matrix onedimensional vector hypercube involves code change corollary 41 code change operations pipelined algorithms proof since decode encode operations upper triangular composition corollary 42 code change operations pipelined algorithms permutation dimensions 5 dimension permutations hypercube multiprocessors seen previously dimension permutations correspond permutation matrices use n 2 elements describe object requiring n two answers one hypercube multiprocessor frequently desirable combine coding decoding dimension permutation operations 13 matrix notation allows us put operations setting answer derive results matrices without actually explicitly writing entries matrix latter context really deriving algebraic results symmetric group n objects hypercube multiprocessors dimension permutations induce fairly complicated motion machine remember dimension permutation index transformation n objects induces complicated permutation 2 n objects factorizing permutation matrix simpler matrices allows compact way thinking algorithms dimension permutation dimensions forming shuffle represented circulant matrix shown five dimensions unshuffle also represented circulant matrix next definition precisely define shuffle permutations definition 51 shuffle permutation indices transformation whose matrix ij given identity except columns e words appropriate columns shifted left circularly hypercube multiprocessors convenient implement dimension permutations sequences elementary bitexchanges definition 52 index transformation defined elementary bitexchange matrix representation permutation matrix identity except two rows columns denote matrix e ij j distinguished rows columns definition 53 index transformation defined bitexchange matrix representation symmetric permutation matrix lemma 51 bitexchange matrix expressed product independent elementary bit exchange matrices conversely product independent elementary bitexchange matrices reduced bitexchange matrix lemma 52 shuffle permutation expressed product two bitexchange matrices proof renumber shuffle necessary 1n 1n product following two bitexchange matrices lemma 53 permutation matrix expressed product two bitexchange matrices proof proof similar proof lemma 52 permutation matrix separated disjoint cycles facts quite useful practice code written cm2 accomplish bitreverse operation 4 easily generalized bitexchange operation using lemma 53 dimension permutation implementation motivation large software project known twuffler accomplish operations form g notice wellknown 14 shuffle unshuffle carried sequence dimension exchanges two convenient ways illustrated following examples 5 example 1 example 2 fact exactly n factorizations shuffle matrix elementary bitexchanges elementary bitexchanges inverses factorizations gamma1 obtained reversing order factors 15 generalizing two examples see product increasing order equation 56 decreasing order equation57 note example 1 dimensions first last used twice example 2 dimension 1 used total use dimensions must example 1 best load balances dimensions example 2 represents worst case load balancing dimensions however data motion example 1 accounting factoroftwo difference two approaches unnecessary eliminated 14 furthermore even though example 2 appears unfavorable fixed dimension dimension local node bitexchanges adjacent nodes binary cube factorization given example 1 requires communication nodes distance two factorization given example 2 basis algorithms swartztrauber 25 several algorithms johnsson ho 14 18 algorithms based following observation 56 see e ii1 i1j combining 57 obtain thus shuffle dimensions expressed product n exchanges dimension used every bitexchange dimension fact represents local memory advantages approach clear elementary bitexchange represents onehop communication hypercube another approach proved convenient express shuffle permutation composition several shuffle permutations fewer dimensions method used devise algorithms optimal concurrency communication 20 21 14 18 using equations 56 57 taking advantage fact jk ij gamma1 commute thus several elements per node elements permuted according jk first others according ij gamma1 first 6 conclusion cast index transformation algorithms linear algebraic framework applications towards hypercube algorithms framework multiple purposes one express ideas already commonly known concise language another important purpose shed light existence algorithms construct automatically demonstrated acknowledgements would like thank thinking machines corporation particularly marshall isman ted tabloski supporting work related projects connection machine provided financial support sense spirit makes project pleasure addition first author would like thank thinking machines corporation third author inviting work project related twuffler project summer 1990 earliest version paper drafted 3 finally would like thank emily stone excellent assistance editing r optimal communication algorithms hypercubes fast permuting disk arrays algebra shuffling graycoding hypercube optimal matrix transposition bit reversal hypercubes alltoall personalized communication unified approach class data movements array processor array permutations indexdigit permutation curious properties gray code used solve puzzles gray codes paths ncube matrix computations origins binary code fast algorithm transposing large multidimensional image data sets communication efficient basic linear algebra computations hypercube archi tectures algorithms matrix transposition boolean ncube configured ensemble architectures optimal algorithms stable dimension permutations boolean cubes conversion binary code binaryreflected gray code boolean cubes optimal communication distributed shared memory models computation network architectures complexity reshaping arrays boolean cubes generalized shuffle permutations boolean cubes routing linear permutations omega network two passes optimal routing algorithm mesh connected parallel computers optimal bpc permutations cube connected simd computer parallel processing perfect shuffle passing messages linkbound hypercubes intensive hypercube communication prearranged communication linkbound machines journal parallel computing computational frameworks fast fourier transform tr unified approach class data movements array processor communication effect basic linear algebra computations hypercube architectures algorithms matrix transposition boolean italicncube configured ensemble architecture optimal algorithms stable dimension permutations boolean cubes optimal matrix transposition bit reversal hypercubes computational frameworks fast fourier transform matrix computations 3rd ed array permutation indexdigit permutation optimal routing algorithm meshconnected parallel computers ctr mounir hamdi siang w song embedding hierarchical hypercube networks hypercube ieee transactions parallel distributed systems v8 n9 p897902 september 1997 chris h q ding optimal index reshuffle algorithm multidimensional arrays applications parallel architectures ieee transactions parallel distributed systems v12 n3 p306315 march 2001 leonard f wisniewski structured permuting place parallel disk systems proceedings fourth workshop io parallel distributed systems part federated computing research conference p128139 may 2727 1996 philadelphia pennsylvania united states mayez almouhamed array organization parallel memories international journal parallel programming v32 n2 p123163 april 2004