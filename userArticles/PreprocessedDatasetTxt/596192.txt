constraint satisfaction approach circuit design problem classical circuitdesign problem ebers moll 1954 features system nine nonlinear equations nine variables challenging local global methods system solved globally using interval method ratschek rokne 1993 box 0 109 algorithm enormous costs ie 14 months using network state time know method applied circuit design problem led guaranteed result locating exactly one solution huge domain completed reliable error estimate present paper gives novel branchandprune algorithm obtains unique safe box system within reasonable computation times algorithm combines traditional interval techniques adaptation discrete constraintsatisfaction techniques continuous problems particular interest simplicity approach b introduction transistor modeling problem ebers moll 6 system nonlinear equations constants g ik given 52095 100677 229274 202153 285132 1118467 1343884 2114823 problem challenging local global methods small variations inputs produce large differences functions ratschek rokne 23 summarize various attempts find solution problem using local methods descriptions repeated suffices say successful attempts require elaborate procedures sometimes combining several globally convergent algorithms paper 23 ratschek rokne propose interval method solves problem globally box 0 10 9 particular show exists unique solution box provide guaranteed error estimate enclosing solution box whose intervals width smaller 32 theta 10 gamma4 computation times obtain result however extremely large computation times given 23 since primary aim paper however preliminary draft paper indicated total process took 14 months using network workstations ratschek rokne also recommended methods solving unstable systems investigated order reduce computations present novel interval algorithm isolates safe boxes ie boxes contain least one solution nonlinear equation systems show algorithm isolates single safe box circuitdesign problem within reasonable computation times 1 main novelty procedure way constraints used prune search space pruning techniques presented 24 novel based constraintsatisfaction techniques artificial intelligence particularly effective far solution techniques thus orthogonal traditional interval techniques effective close solution boxes small paper organized follows section 2 gives necessary background interval analysis section 3 discusses problem description simplyfying assumptions section 4 presents generic branchandprune algorithm isolating solutions nonlinear system equa tions section 5 presents various pruning techniques section 6 reconsiders simplifying assumptions section 7 reports experimental results section 8 concludes paper preliminaries review basic concepts interval analysis needed paper information interval arithmetic found many places eg 1 8 7 17 18 20 22 definitions slightly nonstandard 21 interval arithmetic consider 1g set real numbers extended two infinity symbols extension relation set also consider finite subset f 1 containing practice f corresponds floatingpoint numbers used implementation set real numbers 1 proving safe box contains unique solution requires experimental trialanderror work see section 6 23 discussion issue set intervals denoted ordered set inclusion 2 subset enclosure denoted 2s smallest interval often write r instead frg r 2 denote real numbers letters fnumbers letters l u intervals letter real functions letters f g interval functions eg functions signature letters f g possibly subscripted use l denote smallest fnumber strictly greater resp smaller fnumber l capture outward rounding use dre resp brc return smallest resp largest fnumber greater resp smaller equal real number r also use denote box hi r denote tuple hr set rational numbers n set natural numbers also use following notations rightl canonical interval interval form l l l l l floatingpoint number fundamental concept interval arithmetic notion interval extension definition 4 set extensions consider set n function set extension f defined interval extension 0 example 1 interval function phi defined interval extension addition real numbers paper restrict attention monotonic interval extensions fundamental properties traditional interval extensions primitive operations satisfy requirements naturally definition 6 monotonic interval extensions interval function f n monotonic 0 2 1 2 intervals usually called floatingpoint intervals literature important stress real function extended many ways instance interval function phi precise interval extension addition ie returns smallest possible interval containing real results function always returning gamma1 1 would least accurate following assume fixed monotonic interval extensions primitive operators instance interval extension defined phi addition overload real symbols use interval extensions 22 constraint representations well known different computer representations real function produce different results evaluated floatingpoint numbers computer consequence way constraints written may impact behavior algorithm reason constraint function paper considered expression written language addition abuse notation denoting functions resp constraints representations symbol remaining sections assume real variables constraints taken finite arbitrarily large set fx g similar conventions apply interval functions constraints interval variables taken finite arbitrarily large set fx g 3 problem description problem considered paper finding solutions system equations box course computer generally impossible find solutions exactly interval methods aim returning small boxes containing solutions preferably box safe meaning contains solution purposes paper interval methods thus viewed solving following problem assuming f monotonic interval extension f 1 n find canonical 3 boxes hi 0 satisfying course simplification since interval methods generally use various interval extensions however restricting attention problem benefits crystallizing intuition underlying novel pruning methods section 6 reconsiders simplification 3 practice one may interested boxes certain width one may want stop soon safe box obtained easy generalize results requirements notation let system constraints form let box hi denote si fact satisfies system interval constraints symbols note also use denote systems constraints denote systems interval constraints 4 generic branchandprune algorithm problem description highlights finite nature problem since finitely many floatingpoint intervals interval methods thus best viewed global search algorithms iterating two main steps pruning branching basic schema underlying algorithms branchandprune schema depicted figure 1 function search receives system interval constraints initial box returns set canonical boxes 0 satisfying function search first applies pruning step reduces initial box pruning step main topic paper resulting box empty solution problem box canonical returned result otherwise box split along one dimension two subboxes 1 2 explored recursively using algorithm specific interval algorithm obtained specifying splitting strategy pruning techniques algorithms use splitting strategy consists splitting largest interval two parts main novelty algorithms lies pruning techniques define three pruning operators prune 0 prune 1 prune 2 produce three distinct algorithms 5 pruning techniques two pruning techniques used algorithm box1 box2 consistency ease understanding techniques contrasted traditional interval technique call box0consistency reasons become clear 51 box0consistency traditional branchandprune algorithms use relaxation problem hand solution easier problem follows solutions original problem box0consistency weak simple relaxation used interval systems given function searchs begin prunes 0 empty return else canonical return f ig else return searchs 2 figure 1 branchandprune algorithm problem finding canonical boxes box satisfying system interval constraints box0 consistency consists testing hold obviously solutions original problem definition interval extensions pruning operator associated box0consistency thus defined follows otherwise box0consistency fact viewed form projection original problem could stated existence question box0consistency approximates replacing interval variable interval obtain test reduces testing constraint independently 52 box1consistency section presents first pruning operator used algorithm starts informal discussion specifies pruning operator presents simple implementation 4 4 separating specification implementation advantage distinguishing computed compute many ways implement concepts described section goal focus concepts technical details found elsewhere 24 521 informal presentation first fundamental idea underlying box1consistency 2 project variables one precisely replace variables one intervals produces stronger pruning box0consistency course higher cost original existence problem thus approximated relaxation tested relatively easily notice first conditions independent addition condition form tested considering canonical intervals 1 testing implementation tries effective using adaptations interval newton method second fundamental idea underlying box1consistency reduce intervals associated variables consider relaxation let l leftmost interval 1 satisfying r rightmost interval 1 satisfying clear x 1 must range interval 0 since interval left right 0 violates one conditions relaxation interval associated x 1 thus reduced 0 reduction applied variables reduction takes place resulting box said box1consistent course process possible detect solution original problem exists since intervals associated variables become smaller note also variable considered several times reduction process 522 pruning operator formalize informal discussion present pruning operator associated box1consistency recall definitions assume defined set variables main concept box1consistency expresses system cannot narrowed reduction process described informally previous subsection definition 7 box1consistency let system interval constraints let box n box1consistent boxconsistent box1consistent wrt pruning operator associated box1consistency simply returns largest box initial interval box1consistent informally largest box initial interval cannot narrowed box always exists monotonicity interval extensions unique course empty definition 8 box1consistency pruning let system interval constraints let box pruning operator associated box1consistency defined 0 0 largest box box1consistent 0 523 simple implementation pruning operator computed many ways figure 2 presents simple iterative algorithm purpose see 24 efficient implementation algorithm simple fixpoint algorithm terminates pruning obtained ie p body loop applies narrowing operation variables produces new box intersection narrowings narrowing function narrow 1 ii returns largest box 0 box1consistent 0 wrt 53 box2consistency box consistency shown effective solving variety nonlinear applications 24 applications however transistor modeling problem particular better performance obtained using stronger local consistency condition call box2 consistency box2consistency fact approximation path consistency 16 related consistency notions presented 14 function prune 1 begin repeat p return function narrow 1 shi begin c canonical si return else return figure 2 implementing box1consistency 531 informal presentation box2consistency generalizes box1consistency projecting two variables original existence problem thus approximated 9x possible test relaxation easily least conceptual standpoint conditions independent condition form tested considering pairs canonical intervals 1 2 x 1 x 2 case box1consistency box2consistency makes use relaxation prune intervals associated variable consider condition canonical interval 0 box box1 consistent 0 obviously 1 thus possible narrow bounds 1 using pruning rule process iterated variables pruning available 532 pruning operator notion box2consistency defined terms box1consistency precisely terms whether system interval constraints made box1consistent box definition 9 box1satisfiability system interval constraints box1satisfiable 0 denoted boxsat 1 0 exists box 0 box1consistent informally speaking box2consistency says bounds variable boxsatisfiable implying cannot reduced using pruning rule described system interval constraints box box2consistent wrt l 6 u system box2consistent box2consistent wrt shown box2consistency implies box1consistency proposition 1 let system monotonic interval constraints box2consistent box1consistent proof assume simplicity proof similar otherwise since box2consistent box2consistent wrt 1 n thus explicitly 9 box1consistent follows monotonicity f proof similar result follows definition box1consistency 2 pruning operator associated box2consistency simply returns largest box initial interval box2consistent definition 11 box2consistency pruning let system interval constraints let box pruning operator associated box2consistency defined 0 0 largest box box2consistent 0 533 simple implementation pruning operator computed many ways figure 3 presents simple iterative algorithm close actual implementation algorithm simple fixpoint algorithm terminates pruning obtained body loop applies narrowing operation variables produces new box intersection narrowings narrowing function narrow 2 ii returns largest box 0 box2consistent 0 wrt pruning operator box1consistency used compute narrowing operator note would easy define level boxconsistency point since boxk1consistency used define boxkconsistency generic way 54 related work useful relate pruning operators earlier work constraint satisfaction projec tions approximations projections used extensively artificial intelligence community name consistency techniques solve discrete combinatorial problems eg 16 15 adapted continuous problems eg 5 14 used inside systems bnrprolog clpbnr 21 3 many systems since techniques used systems like bnrprolog clpbnr weaker box1consistency since decompose constraints ternary constraints distinct variables applying form box1consistency scale well difficult problems box1consistency introduced 2 related techniques presented 10 uses similar idea splitting process consistency notions 14 weaker less effective form boxkconsistency obtained decomposing constraints ternary constraints distinct variables applying form boxkconsistency resulting constraints function prune 2 begin repeat p return function narrow 2 shi begin c canonical return else return figure 3 implementing box2consistency 6 branchandprune algorithm revisited reconsider assumptions section 3 mentioned section algorithm uses two interval extensions natural interval extension mean value interval extension since distinct interval extensions may produce different prunings particular natural interval extension generally better far solution mean value interval extension precise close solution section reviews extensions reconsiders overall branchandprune algorithm 61 natural interval extension simplest interval extension function natural interval extension informally speaking consists replacing number smallest interval enclosing real variable interval variable real operation fixed interval extension following f real function b f natural extension example 2 natural interval extension natural interval extension function x 1 interval function advantage extension preserves constraints written hence users system choose constraint representations particularly appropriate problem hand useful generalize natural interval extension system constraints definition 12 natural interval extension system let system constraints natural extension denoted b set interval constraints following result easy prove induction proposition 2 natural interval extension function constraint system constraints monotonic 62 mean value interval extension second interval extension based taylor expansion around point extension example centered forms interval extensions introduced moore 17 studied many authors since important properties mean value interval extension function parametrized intervals variables function also assumes function continuous partial derivatives given assumptions key idea behind extension apply taylor expansion function around center box bound rest series using box box hi center mean value interval extension function f denoted f interval function f let system constraints mean value interval extension denoted system interval constraints function searchs begin prune 0 0 empty return else canonical return f ig else return searchs 2 figure 4 branchandprune algorithm revisited note mean value interval extensions defined terms natural interval extensions proof following proposition found 4 proposition 3 mean value interval extension function monotonic interval extension interesting note box consistency mean value interval extension system constraints closely related hansensengupta operator 8 improvement krawczyks operator 13 hansen smith also argue operators effective interval jacobian system diagonally dominant 9 suggest conditioning system purpose paper simply assume conditioning operator use notation c denote conds see 11 12 extensive coverage conditioners 63 branchandprune algorithm position reconsider branchandprune algorithm new version given figure 4 differs two ways algorithm presented section 4 one hand algorithm receives input system constraints instead system interval constraints hand operation prune receives system interval constraints consisting natural interval extension conditioned mean value interval extensions original system 64 existence proof describe algorithm proves existence solution box let ff 0g system equations variables fx box define intervals 0 n follows 0 0 exists zero hi 0 proof result found 19 7 experimental results section reports experimental results branchandprune algorithms compare branchandprune algorithm two instantiations pruning operator prune 1 obtain algorithm presented 24 prune 2 obtain novel algorithm effective transistor modeling problem transistor modeling problem box2consistency algorithm applied find solutions transistor modeling problem branching applied safe box box width smaller 10 gamma8 obtained algorithm returned unique box original range 0 10 9 together proof box contains solution algorithm performs 118 branchings takes 235980 seconds roughly 40 minutes sun ultra running solaris course considerable improvement results ratschek rokne 23 interestingly box1consistency algorithm performs 135099 branchings takes 11841 seconds roughly 3 hours 20 minutes machine still considerable improvement 23 benchmarks continuation methods worth comparing box1 box2 consistency algorithms standard benchmarks continuation methods 25 box1 consistency algorithm compares well continuation methods benchmarks 24 table 1 reports results gives benchmark number variables degree polynomial system initial range variables cpu time number branchings benchmarks v range box1time box1branch box2time box2branch combustion chemistry 5 table 1 box1 versus box2 consistency benchmarks continuation methods box1 box2consistency algorithms see 25 24 description benchmarks intention compare two algorithms systematically rather make readers aware neither two algorithms really superior seen box2consistency algorithm always performs less branchings expected always slower box1consistency algorithm problems box1consistency seems give better tradeoff pruning pruning time fundamental topic future research thus determine box2 consistency effective box1consistency generally characterize class nonlinear problems techniques effective 8 conclusion paper reconsidered transistor modeling problem ebers moll 6 consists nine nonlinear equations challenging local global methods problem tackled novel branchandprune algorithm combining techniques interval methods constraint satisfaction particular algorithm enforces local consistency condition called box2consistency strengthens notion box1consistency introduced 24 algorithm applied find solutions transistor modeling problem returned unique safe box range 0 10 9 40 minutes performing 118 branchings paper also indicated box2consistency may strong local condition many problems since slower box1consistency benchmarks continuation methods 25 interesting avenue research characterize formally class applications box1 box2consistency effective pruning techniques acknowledgments special thanks christian bliek bringing transistor modeling problem attention yves deville many interesting discussions research partly supported office naval research grant n0001491j4052 arpa order 8225 national science foundation grant numbers ccr9357704 nsf national young investigator award r introduction interval computations clpintervals revisited applying interval arithmetic real mean value forms interval analysis logical arithmetic interval newton method bounding solutions systems equations using interval analysis interval arithmetic matrix computation part ii safe starting regions fixed points tightening preconditioners interval gaussseidel method review preconditioners interval gaussseidel method consistency techniques numerical constraint satisfaction problems consistency networks relations networks constraints interval analysis methods applications interval analysis safe starting regions iterative methods interval methods systems equations constraint arithmetic real intervals new computer methods global optimization experiments using interval analysis solving circuit design problem solving polynomial systems using branch prune approach homotopies exploiting newton polytopes solving sparse polynomial systems tr ctr laurent granvilliers frdric benhamou progress solving circuit design problem journal global optimization v20 n2 p155168 june 2001 yves deville micha janssen pascal van hentenryck consistency techniques ordinary differential equations constraints v7 n34 p289315 julyoctober 2002 laurent granvilliers frdric benhamou algorithm 852 realpaver interval solver using constraint satisfaction techniques acm transactions mathematical software toms v32 n1 p138156 march 2006 yahia lebbah claude michel michel rueher rigorous global filtering algorithm quadratic constraints constraints v10 n1 p4765 january 2005 yahia lebbah olivier lhomme accelerating filtering techniques numeric csps artificial intelligence v139 n1 p109132 july 2002 stefan ratschan search heuristics box decomposition methods journal global optimization v24 n1 p3549 september 2002 frdric benhamou frdric goualard ric langunou marc christie interval constraint solving camera control motion planning acm transactions computational logic tocl v5 n4 p732767 october 2004 laurent granvilliers eric monfroy frdric benhamou symbolicinterval cooperation constraint programming proceedings 2001 international symposium symbolic algebraic computation p150166 july 2001 london ontario canada