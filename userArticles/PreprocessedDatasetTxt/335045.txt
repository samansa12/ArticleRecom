structural gate decomposition depthoptimal technology mapping lutbased fpga designs paper study structural gate decomposition general simple gate networks depthoptimal technology mapping using kinput lookuptables kluts show 1 structural gate decomposition kbounded network results optimal mapping depth smaller equal original network regardless decomposition method used 2 problem structural gate decomposition depthoptimal technology mapping nphard kunbounded networks k3 remains nphard kboundeds networks k5 based results propose two new structural gate decomposition algorithms named dogma dogmam combine leveldriven nodepacking technique used flowmap network flowbased labeling technique used chortled depthoptimal technology mapping experimental results show 1 among five structural gate decompostion algorithms dogmam results best mapping solutions 2 compared speedupan algebraic algorithm tos boolean approach dogmam completes decomposition tested benchmarks short time speedup tos fail several cases however speedup results smallest depth area following technology mapping steps b introduction field programmable gate arrays fpgas widely used circuit design implementation system prototyping advantages short design cycles low nonrecurring engineering cost important class fpgas use lookuptables luts basic logic elements kinput lut klut consists 2 k sram cells store truth table arbitrary boolean function k variables connecting luts network lutbased fpgas used implement circuit designs short time logic synthesis lutbased fpgas transforms networks logic gates functionally equivalent lut networks process usually divided two tasks logic optimization technology mapping logic optimization extracts common subfunctions reduce circuit size andor resynthesizes critical paths reduce circuit delay technology mapping consists two subtasks gate decomposition lut mapping gate decomposition large gates decomposed gates k inputs kbounded resulting kbounded network mapped onto ie covered kluts lut mapping step separation optimization mapping tasks artificial lut synthesis algorithms eg lapp94 wuea95 decompose collapsed networks lut networks directly objectives tasks include area delay minimization routability maximization combination comprehensive survey gate decomposition lut mapping logic synthesis algorithms lutbased fpgas found codi96 delay lut network measured number levels depth network unit delay model number algorithms proposed past delayoriented lut mapping classify two classes first class algorithms chortled frrv91b dagmap chcd92 flowmap codi94a perform lut mapping without logic resynthesis among algorithms chortled guarantees depthoptimal technology mapping simplegate tree networks flowmap guarantees depthoptimal lut mapping general kbounded networks following flowmap flowmapr codi94b cutmap cohw95 reduce mapping area flowmapd codi94c edgemap yawo94 minimize delay accurate net delay model another class lut mapping algorithms mispgadelay musb91 techmapd sath93 flowsyn codi93 alto hujs96 collapse critical paths followed delayoriented logic resynthesis due resynthesis class algorithms could obtain mapping depth smaller optimal depth computed flowmap usually longer computation time gate decomposition may affect significantly network depth obtained algorithms first lut mapping class example network figure 1a kbounded network node v decomposed shown figure 1b mapping algorithm result depth 3 larger node v decomposed way shown figure 1c mapping solution depth 2 obtained addition kbounded network decomposed mapping depth could reduced figure 2a shows 3bounded network produces 3level mapping solution five luts every shaded square represents lut figure node v decomposed flowmap produces 2level network four luts figure 2b two examples demonstrate gate decomposition affects depth obtained lut mapping algorithms classify gate decomposition methods structural algebraic boolean approaches structural gate decomposition applied simple gates eg gates gates xor gates complex gates need transformed simple gates eg via andor decomposition structural decomposition techdecomp algorithm sis sesl92 dmig algorithm wa89 chcd92 chortle family mapping algorithms frrc90 frrv91a frrv91b perform structural gate decomposition algebraic gate decomposition approaches networks b c figure 1 impact gate decomposition mapping depth initial network b decomposition resulting mapping depth 3 c decomposition resulting mapping depth 2 decomposition b decomposition figure gate decomposition kbounded network initial kbounded network mapping depth 3 b decomposed network mapping depth 2 usually partially collapsed gates represented sumofproduct sop form common logic subfunctions extracted algebraic divisions ru89 de94 speedup algorithm sis sesl92 algebraic approach collapses critical paths followed network resynthesis delay minimization boolean gate decomposition approaches logic gates decomposed via functional operations shannon expansion ifthenelse ite decomposition andor decomposition common boolean gate decomposition operations recently functional decomposition techniques as59 cu61 roka62 used number lut network synthesis algorithms lapp94 wuea95 lewe96 algorithms networks completely collapsed whenever possible outputs represented functions network inputs directly output functions decomposed composed kinput subfunctions implementation using k luts optional lut mapping steps may follow improve synthesis results fgsyn algorithm lapp94 boolmapd algorithm lewe96 take approach delayoriented lut network synthesis generally speaking algebraic approaches boolean approaches effective area delay minimization technology mapping structural approaches usually faster hybrid approaches algebraic decompositions followed structural decompositions used many logic synthesis approaches paper study structural gate decomposition delay minimization general networks following motivations first shown gates decomposed affect mapping depth computed flowmap good gate decomposition step allows mapping algorithms obtain smallest mapping depth second structural gate decomposition allows arbitrary grouping gate inputs optimization objective algebraic boolean approaches advantage third structural gate decomposition computationally efficient important factor mapping large designs estimating mapping delay area nowadays ic process technology advanced 025 milliongate fpgas become reality structural gate decomposition algorithms employed technology mapping approaches along technology trend several delayoriented structural gate decomposition algorithms proposed past techdecomp algorithm sesl92 decomposes simple gate balanced fanin tree minimize number levels locally dmig algorithm wa89 chcd92 based huffman coding algorithm guarantees minimum depth decomposed network however mapping depth might minimum network figure 1b actually decomposed using dmig results suboptimal mapping depth chortled algorithm frrv91b employs bin packing heuristics achieve depth minimization optimal trees paper go one step shall develop structural gate decomposition algorithms depthoptimal technology mapping general networks rest paper organized follows section 2 defines terminology presents general properties formulates structural gate decomposition problems section 3 addresses npcompleteness problems section 4 presents two new algorithms named dogma dogma structural gate decomposition experimental results presented section 5 section 6 concludes paper preliminary version work published dac96 cohw96 without proofs theorems considered singlegate decompositions 2 problem formulation 21 definitions preliminaries combinational boolean network n represented directed acyclic graph node v v represents logic gate directed edge uv e represents connection output node u input node v node v simple gate v implements one following functions xor inversions primary inputs pis nodes indegree zero nodes internal nodes among designated primary outputs pos node v predecessor node u directed path v u n depth node v number edges longest path pi v pi depth zero depth network largest depth nodes network let input v fanout v represent set fanins set fanouts node v respectively given subgraph h n let input h denote set distinct nodes outside h supply inputs nodes h fanin cone c v rooted v connected subnetwork consisting v predecessors node v root node c v denoted root k lut input size node v kbounded input v k otherwise v k unbounded network n kbounded contains kbounded nodes given kbounded network n set subnetworks klut mapping solution n c1 every l l fanin cone n input l k c2 every l input l contains pis root nodes subnetworks c3 every l root l either po belongs input l j l j c4 every po v n mapping solution duplication free l l j l l j implementing every subnetwork using klut obtain klut network functionally equivalent n mapping area mapping depth lut count ie depth klut network implements respectively given kbounded network n let k n represent set klut networks implement mapping solutions n minimum mapping depth n denoted mmd n minimum network depth klut networks k n let n v represent largest fanin cone rooted v n minimum mapping depth node v n denoted mmd n v mmd n v mapping depth pi 0 given kbounded network n flowmap algorithm codi94a computes mmd n v every node v n polynomial time cut n v partition x v x v n v x v fanin cone rooted v x v n v x v cutset cut denoted n x v x v defined input x cut kfeasible n x v x k height cut denoted height x v x v v flowmap computes minheight kfeasible cut fanin cone node v obtain mmd n v following two lemmas minimum mapping depth general networks lemma 1 states monotone property minimum mapping depth lemma 2 gives way compute mmd n v kbounded network let node v v mmd n u mmd n v every fanin u input v kbounded network node v v let exists kfeasible cut height p 1 n v otherwise mmd n 22 properties structural gate decomposition simple gates allow arbitrary grouping fanins decomposition however grouping resulting gate size decomposition affect significantly depth area final mapping solution subsection shall show best mapping results obtained completely decomposed networks let node v simple gate network n let input v 3 given structural gate decomposition algorithm decomposition step v node v chooses two fanins u 1 u 2 v ii removes edges introduces node w three edges reconnect u 1 u 2 v v simple gate v always applied node w gate type node v subnetwork n n decomposition step v define w e v v v n n v n network completely decomposed becomes 2bounded figure 3a n contains nodes u 1 v input abu 2 cd figure 3b shows v n one decomposition step v subnetwork completely decomposed figure 3c following theorem theorem 1 let kbounded network node v v simple gate input v 3 k n k v n structural gate decomposition algorithm c b b c b c u 2 b c e figure 3 decomposition node v decomposition b v n one decomposition step v c complete decomposition v proof let w node introduced v let arbitrary mapping solution n claim v l 1 v l 2 v l mapping solution v n first n v n set pis pos figure 3 clear l v l set inputs well output node result satisfies conditions c1 c4 mapping solution v n klut implements l also implements v l hence klut network implements also implements therefore k n k v n however mapping solution v n mapping solution n w root node subnetwork due w n exists least one mapping solution v n result k n k v n corollary 11 let kbounded network node v v simple gate input v 3 mmd v n mmd n structural gate decomposition algorithm proof since k n k v n decomposition algorithm definition mmd v n mmd n note theorem 1 corollary 11 hold long decomposition step v structural algebraic boolean carried regardless v simple gate however algebraic functional decomposition complex gate may always possible since set possible functionally equivalent klut networks expands whenever simple gate decomposed theorem 1 always beneficial decompose simplegate networks 2 bounded networks lut mapping algorithms exploit larger mapping solution space experimental results reported codi94a confirm conclusion experiments input networks first transformed simple gate networks decomposed structurally 5 bounded 4bounded 3bounded 2bounded networks lut mapping resulting mapping depth decreases monotonically along decrease gate sizes decomposition interesting contrast comes results reported leew96 networks first collapsed completely decomposed functionally 5bounded 4bounded 3bounded networks lut mapping best mapping solutions terms area depth mostly 5bounded networks two experiments show important difference structural functional decompositions logic signals preserved structural decompositions new gates synthesized functional decompositions leew96 5bounded 4bounded 3bounded networks contain totally different sets internal gates synthesized independently three functional decomposition processes fact according corollary 11 5bounded networks leew96 decomposed lut mapping even smaller mapping depth could obtained experiments following lemma specifies condition structural gate decomposition cause mapping depth reduction kbounded network node v v simple gate input v 3 assume nodes u 1 figure 4a let v decomposition step merges u 1 u 2 intermediate node w see figure 4b mmd n mmd v n proof assume mmd n next assures pmmd v n w mmd v n v according corollary 11 mmd v n v mmd n figure 4b show mmd v n mmd n suppose case mmd v n mmd n exists mapping solution n depth smaller mmd n let x represent output node kfeasible subnetwork l first would mapping solution n collapsing w v mmd v n would smaller mmd n next must exist x call node x depthreduced node two cases depth reduced node x w input l find another node x j input l wont depthreduced node continue trace depthreduced nodes towards pis tracing however wont reach pis since pis depth 0 certain depth second case must happen ii w input l n x l l cut fanin cone n x v n see figure 4c move node v l n x l obtain another k feasible cut height p n x see figure 4d since w fanoutfree w v mapping depth p implies mmd v n result x depthreduced node contradiction proved mmd v n mmd n lemma 4 let kbounded network node v v simple gate input v 3 mmd n v n structural gate decomposition algorithm proof since intermediate node w depth node v lemma true according lemma 3 b c figure 4 v b v c w input l v moved l 23 integrated versus twostep technology mapping gate decomposition lut mapping performed two different ways integrated mapping approach input network decomposed covered luts simultaneously twostep mapping approach input network decomposed kbounded network lut mapping performed example chortled integrated mapping approach flowmap fits twostep mapping approach separation gate decomposition lut mapping restriction general since integrated approaches allow informative gate decomposition lut mapping decisions twostep approaches advantage may appear minimum mapping depth integrated mapping approaches smaller minimum mapping depth twostep mapping approaches however show case structural gate decomposition theorem 2 given kbounded network n structural gate decomposition allowed minimum mapping depth integrated mapping approaches equals minimum mapping depth twostep mapping approaches proof given arbitrary kbounded network n assume integrated approach results optimal depth mmd n mapping solution n n mapping solution kbounded network n decomposed structurally n depthoptimal mapper eg flowmap take n input generate mapping solution n since n depthoptimal respect n mmd nmmd n n depth optimal respect n result mmd n mmd n therefore mmd n mmd n mapping algorithms presented section 4 considered hybrid approach one hand depth minimization achieved structural gate decomposition dogma dogmam return network topology minimum mapping depth hand lut mapping solution computed depthoptimal lut mapping area minimization second objective result depth area optimized separately two steps technology mapping therefore consider algorithm hybrid approach 24 sgdk ksgdk problems paper study structural gate decomposition kbounded kunbounded simplegate networks 2bounded networks lut mapping algorithms eg flowmap obtain smallest mapping depth formulate following two problems structural gate decomposition klut mapping sgdk given simplegate k unbounded network n decompose n 2bounded network n 2 mmd n 2 2bounded decomposed network n 2 n structural gate decomposition kbounded network klut mapping ksgdk given simplegate kbounded network n k decompose n k 2bounded network n 2 2bounded decomposed network n 2 n k 3 complexity sgdk ksgdk problems shall show following results 1 sgdk problem nphard k 3 2 k sgdk problem nphard k 5 shall present construction npcomplete reduction lemmas theorems proofs theorems proofs lemmas found appendix results based polynomialtime transformations 3sat problem decision version sgdk ksgdk problems 3sat problem wellknown npcomplete problem gajo79 defined follows problem 3satisfiability 3sat instance set boolean variables collection clauses clause disjunction 3 literals variables ii clause contains one x x variable x question truth assignment variables x c shall transform arbitrary instance 3sat instance sgdk polynomial time idea relate truth assignment variables 3sat decision gate decomposition sgdk since determining truth assignment difficult decision gate decomposition also difficult define decision version sgdk problem follows problem structural gate decomposition klut mapping sgdkd instance constant k 3 depth bound b simplegate kunbounded network n question way structurally decompose n 2bounded network n 2 depthoptimal klut mapping solution n 2 depth b given instance f 3sat n variables x 1 x 2 x n clauses c c 2 c construct kunbounded network n f corresponding instance f follows first variable x construct subnetwork n consists following nodes two output nodes denoted x x nodes two denoted 1 pi nodes denoted v respectively nodes connected shown figure 5 node w 2 k 1 pi fanins node 4 fanins w 1 pi every internal node k pi fanins note welldefined k 3 kbounded next clause c j 3 literals l j 3 construct subnetwork n c j consists following nodes one output node denoted c j b three literal nodes denoted l j 2k5 root complete 2level kary tree pi nodes leaves k 2 internal nodes r j k2 root complete 3 level kary tree pi nodes leaves connections shown figure 6a output node c j internal nodes fanins n c j note n c j welldefined k 3 however output node c j kbounded k pis k pis k1 pis k1 pis k pis k pis k3 k2 figure 5 construction network n r j3 k2 l j r j3 k2 l j b figure 6 construction network n c j clause c j b exact 2k nodes depth 2 appear mmd l j 2 finally connect subnetworks n c j subnetworks n follows form network n f let literal l j k literal clause c j l j x variable connect node x n single fanin node l j k n c j similarly l j connect node x n single fanin node l j k n c j note every literal node exactly one fanin fanin node called variable node corresponding literal node network n primary outputs nodes c 1 c illustrate construction n f example assume network n f shown figure 7 clause fanins nodes l 1 3 n c 1 respectively variable node node l 1 1 following lemma lemma 5 3sat instance f satisfiable n f decomposed n mmd n theorem 3 sgdk problem nphard k 3 proof transformation instance f 3sat network n f takes k 3 n time sgdkd problem solved polynomial time set solve 3sat polynomial time sgdkd problem nphard given decomposed network n f takes polynomial time compute mapping depth verify whether b eg flowmap sgdkd problem npcomplete since n welldefined forl 1l 1 3 l 1l 2l 2l 2l 3l 3l 3 figure 7 network n f sgdkd problem npcomplete k 3 hence sgdk problem nphard k 3 show complexity ksgdk problem construction reduction must every node kbounded note n c j kbounded previous construction given instance f 3sat n variables x 1 x 2 x n clauses c c 2 c construct corresponding kbounded network n k f follows variable x construct subnetwork n shown figure 5 however clause c j construct subnetwork n k c consisting one output node denoted c j b three literal nodes denoted l j k5 root complete 2level kary tree pi nodes leaves subnetwork n k c j shown figure 8a note n k c j well defined kbounded k 5 connect subnetworks n according formula f obtain network n k f following lemma lemma 6 3sat instance f satisfiable n k f decomposed n k f mmd n k theorem 4 ksgdk problem nphard k 5 proof subnetwork n kbounded 4 subnetwork n k c j kbounded 5 based similar arguments proof theorem 3 easy see ksgdk problem nphard k 5 4 gate decomposition algorithms depthoptimal mapping section combine node packing technique chortled minheight kfeasible cut technique flowmap structural gate decomposition simplegate networks objective minimize depth final mapping solution propose two algorithms first algorithm decomposes logic gates independently previous approaches second algorithm decomposes multiple gates simultaneously exploit common fanins advantage multigate b l jl jl j3 c j2 l j k5 k5 figure 8 construction kbounded subnetwork n k c j clause c j decomposition seen one example nodes b f figure 9 primary inputs nodes u v figure 9a decomposed independently might obtain network figure 9b best mapping solution case 3level network 6 luts however nodes u v decomposed together exploit common fanins c shown figure 9c 2level network 4 luts obtained depth area reduced mapping solution b c e f x b b c e f x c b c e f x figure 9 multigate decomposition initial network b single gate decomposition result c multigate decomposition result shaded nodes lut outputs 41 single gate decomposition present single gate decomposition algorithm dogma depthoptimal gate decomposition mapping subsection given simplegate network n dogma decomposes nodes topological order pis pos node v dogma shall decompose label v number l v mmd n v v n v denotes decomposed network set fanins label q input v denoted q called stratum depth q kfeasible cut height q 1 exist every node q kfeasible cut height q 1 exists set b nodes cut exists node created input b dogma groups input v strata according labels processes stratum two steps 1 starting stratum q smallest depth dogma partitions q minimum number subsets exists kfeasible cut height q 1 subset nodes process similar packing objects bins bin size k size node also called object size mincut height q 1 set nodes packed one bin overall size larger k bin called minheight kfeasible bin corresponds partitioned subset q note overall cut size nodes set could smaller sum individual cut sizes 2 partitioning q subsets minheight kfeasible bins intermediate node also called bin node w created bin b input w b labeled l w created w input b w label l b buffer nodes put set q 1 note bin b contains 2 nodes bin node w needs decomposed however according lemma 4 matter w decomposed minimum mapping depth network change dogma arbitrarily decomposes w unbalanced tree dogma repeats steps 1 2 stratum q 1 strata processed last bin node corresponds node v note buffer nodes introduced packing process removed decomposition complete determine exists kfeasible cut height q 1 bin b q nodes compute maxflow flow network constructed follows codi94a create sink node input b ii create source node fanouts pis n iii assign every edge n infinite flow capacity iv replace every node u n except subgraph v u infinite flow capacity l otherwise unit flow capacity assigned v finally compute maxflow constructed flow network amount flow f corresponds mincut size flow network f k exists mincut height q 1 bin b nodes illustrate dogma 3 output node v figure 10a decomposition among five fanins v bcd labels l result bcd ae according dogma bc packed one bin since k feasible cut height 1 exists another bin total two minimum minheight kfeasible bins bin nodes f g labels l f buffer nodes h labels l created two bins respectively see figure 10b dogma proceeds stratum depth 3 two kfeasible cuts height 2 found ah ie respectively bin nodes j k labels l nodes n labels l created two bins respectively nodes n packed bin corresponds v see figure 10c finally nodes g h n removed node v completely decomposed label l following problem needs solved dogma c e c e c e b c figure decomposition gate v dogma algorithm decomposition b b c packed f g c h e packed j k minheight kfeasible bin packing problem given stratum q depth q pack nodes q minimum number minheight kfeasible bins study developed three heuristics solve problem firstfitdecreasing ffd bestfitdecreasing bfd two heuristics bin packing problem hosa78 ffd heuristic sorts objects list objects decreasing sizes indexes bins 123 removes object list order puts first bin accommodate initial conditions bins objects bfd heuristic ffd heuristic bfd puts object bin leaves smallest empty space minheight kfeasible bin packing problem proposed two mincut based heuristics mcffd mcbfd analogous ffd bfd except every object node whose size defined size mincut height q 1 set nodes packed kfeasible bin long combined cut size larger k third heuristic called maximalsharingdecreasing mcmsd encourages sharing packing ie size mincut packed nodes smaller sum individual mincut sizes packing produces maximum sharing considered bestfit packing mc msd calls mcbfd packing result experimental results table 1 show little difference three heuristics mapping results dogma followed cutmap mcnc benchmarks indicates number bins obtained three heuristics cases could due small bin size experiment choose mcffd efficiency ffd heuristic also used chortled packing nodes bins however mcffd packs nodes according size minheight kfeasible cut better performance reconvergent fanouts general networks one decide locally whether set nodes packed one bin example obvious nodes e figure 10b packed one bin mcffd heuristic employs maxflow computation decide packing feasibility correctly time complexity dogma computed follows every node v input network create input v 2 nodes total input v created minheight kfeasible cut computation time complexity k e codi94a k lut input size carried input v 2 times worst case node v mcffd heuristic let max maximal fanin size nodes n time complexity dogma k max e 2 reduce time complexity minheight cut computation k constructing partial flow networks certain depth e p edge set partial flow network let e pmax represent edge set largest partial flow network constructed decomposition time complexity dogma reduced k max bin packing heuristics dogma mcffd mcbfd mcmsd circuits count 5 rot 7 267 7 267 7 267 toolarge 5 c6288 22 724 22 724 22 724 des 5 965 5 965 5 965 total 171 7674 171 7674 171 7677 table 1 comparison packing heuristics mcffd mcbfd mcmsd dogma 42 multiple gate decomposition present multiple gate decomposition algorithm named dogmam illustrate procedure network shown figure 11a 3 dogmam outlined figure 12 call stratum node local stratum union local strata depth q called global stratum depth q depth q node v decomposition input v 2 ie yet completely decomposed input v intersets global stratum depth q starting depth nodes gate type also decomposition decomposed simultaneously figure 11a nodes b h label 1 nodes x z decomposition 1 local stratum depth 1 abc node x bcde f node e f gh node z respectively global stratum depth 1 abcde f gh e b c g h f x z c e b c g h f z b e b c g h f z e b c g h f z figure multiple gate decomposition initial network b one c two completely decomposed network initialization buffers created pis supply inputs rest network pis labeled 0 buffers labeled 1 figure 11a nodes b h buffers pi buffers gray regions represent global strata depth 1 2 figure 11ac respectively gate decomposition proceeds follows 1 depth q gate type f nodes decomposition collected set g q f global stratum depth q denoted q computed union local strata depth q nodes g q f figure xyz abcde f gh based g q f q formulate global stratum bin packing gsbp problem formally defined later solving gsbp problem achieve node g q f local stratum depth q packed minheight kfeasible bins ii minimum number minheight kfeasible bins total second objective achieved packing common fanins nodes g q f intermediate nodes also called bin nodes created bins figure 11b nodes b c e f g h packed bin nodes j k respectively 2 possible nodes g q f decomposed completely eg nodes x z figure local strata nodes packed eg node figure 11b g q f q updated new instance gsbp problem q value formulated solved process iterates global stratum depth q minimally packed bins result network change figure 11b l vy id jx solving gsbp problem updated g 1 f 1 node packed bin node node completely decomposed label l 2 process iterates updated g 1 v x packing possible figure 11c 3 buffer nodes created labeled q every fanin global strata q decomposition process iterates steps 1 2 network 2bounded figure 11d buffer node n created node x nodes z packed bin decomposition node v completed two points worth mentioning first dogma node decomposed fanins decomposed labeled dogmam however nodes could undergo decomposition even though fanins labeled example node v figure 11b decomposition v g 1 f fanin labeled yet second depth q gate type f multiple instances gsbp problem might solved order pack local strata minimal number bins example two instances gsbp problem solved local stratum node minimally packed figure 11a c experiments found solving three instances gsbp problem sufficient q value global stratum bin packing gsbp problem formally defined follows global stratum bin packing gsbp problem given set g q f nodes gate type f decomposition global stratum q depth q contain fanins nodes g q pack fanins q set bins node g q local stratum depth q packed min height kfeasible bins ii minimum number minheight kfeasible bins total solve gsbp problem build matrix rows correspond nodes g q columns correspond fanins rectangle subset rows columns denoted pair rc indicating row column subsets entries 1 c corresponds bin fanins r corresponds set nodes share fanins c solution gsbp problem rectangle cover subject kfeasible cut height q 1 exists fanins column set c matrix representation similar cubeliteral matrix used solving cube extraction problem procedure dogmam n k n input network k lut input size initialization n 2bounded 4 incq 5 gate function type f u label 8 solve gsbp g q f q k problem 9 minheight kfeasible bin b created gsbp create bin node w label w n update fanins nodes g q f 12 new bin node created 13 node u q 14 create buffer node b label b return n figure multiple gate decomposition algorithm ru89 de94 however algorithms cube extraction applied directly c every rectangle rc must satisfy kfeasible cut constraint use mcffd packing heuristic compute rectangle cover gsbp problem follows first compute fanout factor cut size j mincut height q 1 b c e f x a00 z b c e f x b00 z figure 13 ffd bin packing heuristic gsbp problem initial b first run bin packing every fanin u j q weight fanin j sort fanins according weights follow mcffd bin packing heuristic pack fanins bins starting fanin largest weight strategy group fanins large cut sizes obtaining minimum number bins group fanins large fanout sizes exploiting common fanins set fanins packed one bin c kfeasible cut height q 1 exists fanins c ii largest rectangle satisfies r r min ie least r min nodes g q f share fanins r min userspecified parameter performing mcffd packing heuristic obtain set rectangles rectangle rc satisfies c c min another userspecified parameter saved covered 0s mcffd packing procedure repeated contains 0s rectangle cover obtained set c rectangle corresponds bin implementation set first pass mcffd packing procedure decrease values 1 subsequent iterations decrease values guarantees termination procedure demonstrate mcffd packing heuristic network figure 11a solving gsbp problem initial matrix shown figure 13a rows correspond nodes xyz columns correspond fanins abcde f gh weight fanin fanout size ie number 1s column since every fanin pi buffer whose cut size 1 fanins sorted order bce f adgh according weights nodes b c packed first bin corresponds rectangle r 1 bc although 3 feasible cut height 0 nodes bce cant packed one bin rectangle r r 2 result node e put separate bin packed node f corresponds rectangle r 2 e f two rectangles covered 0s figure 13b reset r another run mcffd packing heuristic three bins obtained one bin contains two fanins totally three bin nodes created network figure 11a decomposed network figure 11b original rugged ckt gate fanin ckt gate fanin circuits size 3 3 times size 3 3 z4ml count 111 14 0 14 79 22 20 9symml 153 34 8 204 96 28 35 cordic 73 11 8 13 36 22 28 i3 70 0 6 22 78 0 26 alu2 210 17 53 299 172 19 16 alu4 416 13 47 220 374 16 9 rot 494 21 39 171 392 21 18 dalu 1939 10 4 30 595 42 7 toolarge 1038 0 100 70 137 21 35 des total 18824 16 26 3174 13007 16 12 table optimization using rugged script 5 experimental results implemented dogma dogmam c language incorporated rasp logic synthesis system fpgas copd96 prepared two sets benchmarks experiments first set c original consists 24 original multilevel mcnc benchmarks contain large percentage 2unbounded gates ie 3 inputs performed rugged script sis sesl92 technology independent optimization obtained second set c rugged benchmarks sets benchmarks transformed simplegate networks using andor decomposition table 2 shows circuit sizes fanin distributions two sets simplegate networks benchmark set c original contains 18824 simple gates 42 2unbounded benchmark set c rugged contains 13007 simple gates 28 2unbounded clearly circuit size fanin size reduced performing rugged script total runtime less 6 minutes compared dogma dogmam three structural gate decomposition algorithms well dogmam algebraic boolean decomposition approaches experiments three structural gate decomposition algorithms used comparison techdecomp algorithm sesl92 dmig algorithm wa89 chcd92 implementation chortled algorithm frrv91b gate decomposition algorithms cutmap cohw95 employed obtain depthoptimal mapping solutions comparison across structural algebraic boolean gate decompositions employed dogmam speedup sis sesl92 tos package ecll96 perform decompositions respectively cutmap employed perform lut mapping except tos since produced lut networks directly objective gate decomposition lut mapping experiments minimize mapping depth cutmap also minimizes mapping area second objective experiments performed sun ultra2 workstation 256m memory first demonstrate impact gate decomposition depth area technology mapping according theorem 1 mapping solution space expands regardless gate decomposition algorithm used use techdecomp decompose benchmarks c rugged 5 bounded networks subsequently 2bounded networks followed lut mapping obtain mapping solutions sizes 5bounded networks increase substantially comparing 5 unbounded networks c rugged however percentages 2unbounded gates employed cutmap cohw95 dfmap codi94b produce depthoptimal duplication free 5bounded cutmap dfmap ckt gate fanin 5bounded 2bounded 5bounded 2bounded circuits size 3 3 count 79 22 20 5 31 5 31 9symml 131 24 28 7 90 6 105 alu4 434 21 9 rot toolarge 219 des total 16007 ratio 100 100 084 101 100 100 102 084 table 3 comparison results 5bounded 2bounded networks areaoptimal mapping solutions respectively table 3 see optimal mapping depth cutmap optimal duplicationfree mapping area dfmap reduced 16 5 bounded networks decomposed 2bounded networks results confirm results stated theorem 1 structural gate decomposition algorithms techdecomp dmig chortled dogma dogmam circuits ts ts ts ts ts z4ml 4 count 5 9symml 5 dalu 9 507 37 9 513 43 9 507 120 9 506 1758 9 497 199 toolarge 7 4867 263 7 4700 2974 6 3913 1376 6 3867 4569 6 2124 16807 c6288 22 728 45 22 728 51 22 728 859 22 728 8549 22 728 426 des 5 total ratio 111 150 003 105 148 012 106 141 012 101 139 069 100 100 100 table 4 comparison results using techdecomp dmig chortled dogma dogmam gate decomposition followed cutmap circuits c original next compared five structural gate decomposition algorithms techdecomp dmig chortle dogma dogmam benchmarks c original c rugged using cutmap mapping engine depth area mapping solutions well runtimes compared algorithms including cutmap time two sets benchmarks presented tables 4 5 respectively comparing dogmam see four algorithms result 11 larger mapping depth 50 larger mapping area benchmark set c original 16 larger mapping depth 10 larger mapping area benchmark set c rugged differences mapping depth obtained dogmam dmig dogma marginal differences mapping area significant regarding runtime dogmam runtime comparable dogma runtime 8 33 times slower runtimes three algorithms however dogmam runtime order magnitude time spent performing rugged script cutmap structural gate decomposition algorithms techdecomp dmig chortled dogma dogmam circuits ts ts ts ts ts count 5 cordic 5 rot 9 270 10 7 259 11 8 265 25 7 267 62 7 261 54 toolarge 6 162 04 5 161 06 5 185 11 5 c6288 22 727 43 22 690 49 22 690 194 22 724 7692 22 723 1920 des 6 1087 45 5 1058 53 6 1127 144 5 965 490 5 969 2085 total 196 7857 320 176 7773 428 182 7836 1034 171 7689 11309 169 7144 9190 ratio 116 110 003 104 109 table 5 comparison results using techdecomp dmig chortled dogma dogmam gate decomposition followed cutmap circuits c rugged comparing tables 4 5 see mapping area c rugged 30 50 smaller c orginal mapping depth c rugged 1 7 larger c original shows rugged script performs logic optimization based algebraic divisions effective area minimization effective depth minimization benefit resulted area reduction significant decrease runtime decomposition algorithms benchmarks rugged dogmam results 10 smaller area comparing four algorithms comparison shows dogmam exploit common fanins area minimization addition rugged script finally employed dogmam speedup tos comparison across structural algebraic boolean gate decomposition approaches configured tos delayoriented synthesis mediumeffort mode performing singleoutput toss multioutput tosm functional decompositions input circuits tos prepared follows first tried collapse benchmark c rugged flat logic network within 30 minutes cpu time could done used reducedepth depth command provided tos collapse benchmarks networks smallest depth 2 allocated minutes cpu time depth starting among benchmarks collapsing rot c880 depth 2 c432 c2670 c5315 c7552 depth 3 c3540 i10 depth 4 c6288 depth 6 remaining benchmarks completely collapsed table 6 collects mapping results dogma tosm subtotal1 subtotal2 subtotal3 totals mapping results benchmarks speedup toss tosm succeed respectively ratios measure relative performances approaches respect dogmam cutmap time ts reports computation time seconds table 6 see dogmam cutmap able map benchmarks 23 minutes speedup fail map benchmarks 2 hours comparing dogmam takes 5 hours 98 consumed technology mapping gate decomposition lut mapping algorithms dogmam speedup tostum medium effort cutmap singleoutput multipleoutput circuits ts ts ts ts count 5 31 10 3 52 122 2 42 84 3 38 247 rot 7 261 132 6 251 711 7 404 1175 8 291 6120 toolarge 5 149 75 5 112 243 9 324 4650 8 168 13954 c6288 22 723 2130 des 5 969 2639 4 704 15868 subtotal2 139 6266 11033 139 11294 157926 ratio 100 100 100 087 094 1760 100 180 1431 101 111 2983 table 6 mapping results resulted structural dogmam algebraic speedup boolean tos gate decomposition approaches c rugged speedup map 23 benchmarks including des obtains significantly better results 13 smaller mapping depth 6 smaller mapping area results c432 show largest contrast performance speedup efficiency dogmam speedup results mapping depth 8 2 hours dogmam results mapping depth 11 66 seconds toss tosm return mapping solutions allocated cpu times 3 8 benchmarks respectively comparing two approaches toss obtains smaller mapping depth count9sym lalu2alu4 t481 tosm obtains smaller mapping area 9symml cordic x1 alu2 t481 worth noting tos extremely successful 9symml t481 results indicate functional decomposition based mapping approaches require longer computation time obtain good results especially circuits medium large sizes overall experiments conclude dogmam obtain best mapping results among five structural gate decomposition algorithms comparison much efficient terms runtime 17 times faster respectively comparing algebraic decomposition algorithm speedup functional decomposition approach tos however speedup obtains best results among compared approaches 6 conclusion paper present indepth study structural gate decomposition depthoptimal technology mapping lutbased fpga designs show structural gate decomposition kbounded networks result smaller depth klut mapping solutions regardless decomposition algorithm used therefore always beneficial decompose circuits 2bounded networks depth minimization structural decompositions applied prove structural gate decomposition problem depthoptimal technology mapping nphard kunbounded networks lut input size k 3 remains nphard kbounded networks k 5 propose two new algorithms named dogma dogmam combine leveldriven node packing technique chortled network flow based labeling technique flowmap structural gate decomposition dogmam decomposes multiple gates simultaneously exploit common fanins following experimental results observed first optimal mapping depth optimal duplicationfree mapping area reduced 16 5bounded networks decomposed structurally 2bounded networks second applying rugged script technology independent logic optimization technology mapping result 40 50 area reduction marginal increase depth significantly reduce runtime structural decomposition algorithms third dogmam results smallest mapping depth mapping area among five structural gate decomposition algorithms comparison finally comparing three algorithms dogmam speedup tos take structural algebraic boolean functional gate decomposition approaches respectively dogmam decompose tested benchmarks short time speedup tos fail obtain results benchmarks however speedup results 13 smaller depth 6 smaller area final mapping solutions comparing dogmam acknowledgement authors grateful mr legl professor antreichs group institute electronic design automation technical university munich germany providing us tos logic synthesis package authors would like acknowledge supports nsf young investigator nyi award mip9357582 grants xilinx quickturn lucent technologies california micro programs software donation synopsys r decomposition switching functions dagmap graphbased fpga technology mapping delay optimization beyond combinatorial limit depth minimization lutbased fpga designs flowmap optimal technology mapping algorithm delay optimization lookuptable based fpga designs areadepth tradeoff lutbased fpga technology mapping nominal delay minimization lutbased fpga technology mapping combinational logic synthesis lut based field programmable gate arrays simultaneous depth area minimization lutbased fpga mapping structural gate decomposition depthoptimal technology mapping lutbased fpga designs rasp general logic synthesis system srambased fpgas generalized tree circuit synthesis optimization digital circuits tos22 technology oriented synthesis user manual chortle technology mapping program lookup table based field programmable gate arrays chortlecrf fast technology mapping lookup table based fpgas technology mapping lookup tablebased fpgas performance computer intractability guide theory np completeness fundamentals computer algorithms iterative areaperformance tradeoff algorithm lutbased fpga technology mapping fpga synthesis using function decomposition performancedirected technology mapping lutbased fpgas role decomposition covering play boolean approach performancedirected technology mapping lutbased fpga designs performance directed synthesis table look programmable gate arrays minimization boolean graphs logic synthesis vlsi design performance directed technology mapping lookup table based fpgas sis system sequential circuit synthesis algorithms multilevel logic optimization functional multipleoutput decomposition theory implicit algorithm edgemap optimal performance driven technology mapping iterative lut based fpga designs tr chortlecrf fast technology mapping lookup tablebased fpgas algorithms multilevel logic optimization performance directed technology mapping lookup table based fpgas edgemap simultaneous depth area minimization lutbased fpga mapping nominal delay minimization lutbased fpga technology mapping functional multipleoutput decomposition combinational logic synthesis lut based field programmable gate arrays boolean approach performancedirected technology mapping lutbased fpga designs iterative areaperformance tradeoff algorithm lutbased fpga technology mapping beyond combinatorial limit depth minimization lutbased fpga designs generalized tree circuit synthesis optimization digital circuits computers intractability dagmap fpga synthesis using function decomposition performancedirected technologymapping lutbased fpgas role decomposition covering play