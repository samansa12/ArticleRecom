multiple experiment environments testing concurrent simulation cs used successfully replacement serial simulation based storing differences experiments cs saves storage speeds simulation time allows excellent internal observation events paper introduce multiple domain concurrent simulation mdcs like concurrent simulation maintains efficiency simulating differences mdcs also allows experiments interact one another create new experiments use domains experiments traced observed point providing insight origin causes new experiments many experiment scenarios created mdcs uses dynamic spawning experiment compression rather explicit enumeration ensure number experiment scenarios become exhaustive mdcs require preanalysis additions circuit test providing capability digital logic simulators allows test cases run less time mdcs gives exact location causes every experiment behavior used track signature paths test patterns coverage analysiswe describe algorithms mdcs discuss rules propagating experiments describe concepts domains making dynamic interactions possible report effectiveness mdcs attacking exhaustive simulation problem multiple stuckat fault simulations digital logic finally applicability mdcs general experimentation digital logic systems discussed b introduction concurrent simulationcs1 2 proven powerful efficient simulating single stuckat faults inadequate exhaustive applications like multiple stuckat fault msaf simulations developed speedup mechanism serial simulation thus experiments independent incapable interacting one another cumulative behaviors combinations experiments cannot created without approaching exhaustive testing usually requires either modifying circuit 10 performing backtracing 14 methods presented leverage efficiencies concurrent simulation allow scenarios experiments dynamically spawned independent experiments interact experiment create state difference parent experiment propagated effectively compresses experiments simulation cs1 primary experiment exhibits fault free good behavior circuit reference experiment exists entire sim ulation faulty experiments differ diverge reference require additional independent bursts simulation time experiment behaviors observed contrasted since experiment propagated leaves signature identifier unfortunately cs cannot allow independent experiments interact costeffective solution serial simulation fault inserted creates single experiment see fault effects creates reference exper iment show modify accommodate functionality would defeat overall efficiency would produce inaccurate observation results simulation environment allows multiple domains experiments defined combinations independent experiments may efficiently simulated necessary generate every possible combination experiments experiments arrive node network tested candidates spawning new behaviors eliminates work sponsored national science foun dation mip9528194 national aeronautics space administrationlangley research center nasajove huge number potential scenarios could arise exhaustive testing addition every experiment simulation compressed via mechanism concurrent simulation ie differences propagated unlike cs single reference experiment allow number independent experiments serve parents details performing multiple stuckat fault presented evidence frameworks success digital logic motivated choose msaf application demonstrates large even exhaus tive number experiments needed per formed also good test bed verifying correctness compression interaction features since digital logic outputs limited finite number states 01xz furthermore availability iscas benchmark circuits3 4 made possible us compare performance applications paper organized follows first provide necessary background information cs describe inefficiencies trying use cs creating scenarios experiment combinations next introduce concept domains parent experiments dynamic references compression use identifiers needed observe experiments spawning new experiments display cumulative behaviors fundamental methods understood present multiple domain simulation algorithm 2 background since leverage many features concurrent simulation provide brief discussion background information consider following analogy engineer assigned build adder circuit developing adder design engineer told must build calculator addition subtrac tion took serial approach would start designing adder circuitry ignore work already done develop subtractor circuit independently adder design likewise concurrent approach engineer would try leverage adder multiple experiment environments testing 31 1101 1 2 fault sources 1 2 out1gate evaluations r faults fig 1 conceptual copies indicate scenarios evaluated design well concentrate design efforts new different functionality required integrating subtractor existing design concurrent simulation simulation identical behaviorsreference faulty performed additional simulation time dedicated faulty experiments different since goal cs produce simulation results equivalent simulating fault separately needs create simulation scenarios inserted fault reference case main idea evaluate scenarios propagate create state dif ferences many methods implement reference case fault c1 fault c2 fault c3 fault c4 current list lookahead list experiments c r 3 1 r 3 1c 0 r 3 1 r 3 1 r r 3 1 r 3 1 r 1 r 3 1 r 3 1 r 3 1r 1 gate evaluation experiment c 1 r 3 1r 1 current list evaluating fault scenario input 1 gatel 1 2 1 2 fig 2 current lookahead lists processing experiments multiple list traversalmlt algorithm scheme efficient single cpu algorithm multiple list traversalmlt5 describing mlt implementation let us present basic concurrent fault simulation algorithm figure 1 shows single nand gate simulated reference value denoted r input output list list number conceptual copies figure 1 shown dashed nand gates indicate scenarios must evaluated single stuckat faults inserted inputs nand gate fault scenario derived replacing reference value faulty state value specified input example c 1 single stuckat1 fault input 1 nand gate table fault sources respective evaluations figure 1 seen one four faults inserted produce state value output different reference output fault scenario c 1 produces state 0 output reference produces state value 1 c 1 propagated absence fault experiments indicates behaving identically reference experiment faults physically stored input output list deposited shown figure 2a experiments denoted form identifierstatevalue exam ple c 1 1 concurrent experiment 1 state value 1 mlt algorithm straightforward input along output list traversed experiment scenario evaluated based type experiment encounteredreference fault output list must also traversed properly insert experiments propagated update states specific experiment mlt algorithm dynamically creates scenarios evaluated pointing single experiment input output list pointers stored current list denoted l c reference experiment first scenario eval uated created pointing reference states list see first row table figure 2 input output lists tra versed lowest experiment identifier lists chosen next experiment pro cessed lookahead list 1 maintains information mlt ready process another experiment already determined experiment next example table 4 lentz manolakos czeck heller figure 2 reference case evaluated lookahead list indicates input 1 contains next lowest faulty experiment identifier three lists therefore next experiment processed experiment fault c 1 experiment c 1 created pointing states present list present list l fault state c 1 used replace reference value l using reference value list fault appear figure 2a demonstrates dashed lines lines show experiments selected create l c generating experiment c 1 c 1 selected list l 1 since c 1 appear list current list point reference experiments input output lists create scenario evaluate 1 thus evaluated state c 1 equals zero notice mlt also maintains pointer output list quickly determine whether faulty experiment already present whether comparison output reference value per formed information also depicted table row labeled c 1 figure 2 evaluating case comparing state value reference state r 3 1 see difference experiment propagated output since current list indicates output list contain storage experiment c 1 already mlt allocates space updates output list shown figure 2b summarize mlt traverses lists inputs output lists simultaneously lookahead determine experiment coming next list quickly determine fault id present 1 input whether already present output lookahead information stored circular linked list experiment scenario evaluated derived lookahead informa tion lowest identifier reference value list used determine reference state output next higher id chosen lookahead information used create scenario specific fault experiment figure 3 describes high level algorithm simultaneous list traversal portion mlt algorithm table figure 2 enumerates scenarios events scheduled future due triggered experiment ie experiment active current simulation time let concurrent experiment identifier k current state value v 0 3 issues associated exhaustive scenario since efficient simulation algorithms 2 6 11 look single stuckat fault ssf scenarios versus reference experiment behavior experiment interaction combinations ssfs possi ble mlt implementation cs modifications would necessary accommodate building scenarios multiple stuckat faults simu late recall basic mlt algorithm substitutes reference value single faulty value fault scenarios interact aware others existence despite implement msaf cs mlt would require every fault inserted network n way combination every fault every fault inserted would represent 2 way 3 wayn way combination fault every fault general given network n inputs one single stuckat fault deposited every input combine singlestuckat faults another input number multiple stuckat fault sources must inserted determined equation 1 n equals number faults set multiplicity faults 1 shows amount storage combinations fault scenarios would greatly reduce efficiency cs increasing list lengths thus list traversal times fault scenarios inserted must assigned state value used experiment typically state value chosen single stuckat fault value line two faults yet teracted figure 4 demonstrates multiple experiment environments testing 5 initialize network time wheel event exists time wheel current time element e apply reference concurrent fault state value changes input output list r experiment triggered call evaluation code e using reference nonfaulty state values schedule new event time propagation delay necessary ck present update current lookahead lists experiment identifiers present inputs output lists input output list l j l j contain experiment cid insert pointer r statevalue current list l c list l j else insert pointer c statevalue l c list l j update lookahead list l inserting pointer next identifier present l j using state values experiments pointed l c begin evaluation experiments scheduled ck experiments time call evaluation code ck ck present output list propagate fault ck fault effect schedule event ck time propagation delay else ck converge ck end element e end fig 3 multiple list traversal algorithm mlt three single stuckat faults inserted one input combinations twoway threeway combinations must stored faults inserted byproduct creating multiple stuckat experiments manner degradation observation experiments assigned unique identifiers propa gated traced observed presence specific identifier input output list indicate experiment propagated therefore msaf identifier seen one would expect indicate msaf propagated instance figure 4 appears threeway msaf c 1 c 2 c 3 occurred output gate e 1 fact identifier carried forward copy twoway stuckat c 1 c2 distinction whether identifiers presence due singlestuckat experiment msaf determined without detailed analysis backtracing clear figure possible threeway stuckat occur output gate since c 3 6 lentz manolakos czeck heller 1 2 1 2 1 r r r r r r fig 4 storage problems associated msaf simulation using concurrent simulation stuckat primary input e 2 issues eliminated multiple domain simula tion mdcs creates separation experiments classes called domains eliminates storage problem observation impairment 4 defining experiments domain developing algorithm allowed independent experiments interact still performing single set fault experiments important method avoid modifying circuit adding additional hardware10 avoid backtracing observing events performing analysis14 achieve concept domains introduced domains separate original independent experiments classes different experiments contained within domain definition allowed interact one another analogous independent singlestuckat fault sources experiments define original parent experiments fault simulation single domain may contain set singlestuckat fault experiments ng experiment c within evaluated independently never know presence experiment c j within words single domain simulation traditional concurrent fault simulation another domain b added experiments contained domain b simulated independently however interactions experiments contained allowed interact cause cumulative behaviors experiments domain b example two domain simulation two sets experiments domains b simulated independently interactions may occur experiments different domains also simulated interacting experiments cause new behaviors displayed parent propagated spawned experiments fitting description called offspring experiments using domains mdcs achieves efficiency experiment storage discussed later also helps screen experiments simulated thus saving processing time domains minimize storage since original set single stuckat faults inserted require additional storage defining potential combinations msafs msafs experiments created dynamically two fault experiments meet node within network example two sets ssfs containing faults simulated 2 way stuckat scenarios mdcs would define two domains insert n experiments domain total 2 theta n parent experiments fault original sets ssfs would simulated addition twoway stuckat may arise emphasize twoway stuckats may arise input patterns may multiple experiment environments testing 7 never provide stimulus make potential interactions occur addition storing fault experiments still necessary store reference experiment general number parent experiments necessary simulation using multiple domain al equals number defined domains n equals number experiments contained domain 41 creating dynamic scenarios experiments already mentioned different experiments within domains allowed interact could said experiments see however desired experiments different domains allowed interact see one another means experiments need know presence experiments different domains ever propagate node network requirement set rules derived determine experiments checked cumulative new behaviors situation occur experiments satisfy rules called combinable9 combinations experiments may present combinable simulated since mdcs discreteevent simulator algo rithm processes experiments triggered active current simulation time therefore one requirement combinable scenario experiments contain least one trigger general scenario consisting two experiments created simulated following satisfied ffl must least one trigger present scenario evaluated ffl experiments share common domains ffl experiments scenario common domains must related either parent offspring experiment scenario must contain experiments common domains figure 5 describes relationship domains experiments simulation reference always considered parent experiment experiment therefore combinable experiments reference basic experiment experiment behavior compared addition offspring experiments compared parents similar behavior parent experiment present state value identical evaluated sce nario used suppress propagation offspring created experiments related parent offspring may related identical experiment common main instance figure 5 related parent offspring however related fact experiment common experiments namely experiment number 1 domain b contained within although experiments share common domain b related therefore combina r common domain b experiment common domain b contain experiments therefore valid scenario unrelated offspring multiple parent experiments fig 5 experiments related either parent offspring relationship identical experiments sharing common domains related experiments generate valid combinations 8 lentz manolakos czeck heller insert single stuckat faults network assign domain multiplicity event scheduled current time evaluate r experiment update new state value routput output list element e locate triggers present input lists store list called trigger list begin generation valid combinations experiments valid scenario must contain trigger combinable take experiment one input list determine experiments different inputs e may combined using rules combinability experiments related parent offspring related common experiment domain experiments share common domains experiment scenario present trigger list scenario valid evaluated build current list l c simulate scenario evaluate experiment calling evaluation function begin parent checking see scenario compressed parent experiment present output ck k experiment identifier ck parent experiments present output state value matching ck v 0 diverge ck v 0 offspring experiment end parent checking continue generation combinations valid combinations experiments found end generation valid combinations experiments fig 6 high level algorithm mdcs tion experiments simulated notice experiments 2 b 1 could combine since share common main high level algorithm presented summarize major portions algorithm 42 high level description multiple domain algorithm high level algorithm described figure 6 similar mlt algorithm manner simulation scenario built via current list evaluated compared reference experi ment mlt simulation case created selecting identical experiments present inputs outputs gate experiments located unique concurrent identifiers cid state values retrieved inputs outputs matching cid could found reference experiment state value used mdcs simulation cases created generating valid combinations experi ments opposed using single experiment reference complex aspect building multiple domain environment many checks compatibility experiments utilizes domain information stored within c k experiment recall concurrent fault simulation reference parent experiment experiments compared multiple experiment environments testing 9 mdcs many parent experiments de fined reference many single stuckat experiments consequently parent experiment sometimes referred dynamic reference experiment since present used lieu reference comparisons offspring processed element evaluation begins current periments lists element e order periment must present l c ie must exist event experiment current time mdcs filters experiment triggered current event time additional list triggers maintained specific pur pose using trigger information possible drastically reduce number combinations mdcs must explicitly simulate figure 7 two domains defined containing reference value two stuckat values faults domains b injected 1 2 respectively potential nine possible combinations experiments three experiments 1 versus three experiments 2 shown three nine cases must evaluated using mdcs algorithm according algorithm reference experiment first processed notice triggered therefore activity due triggered faulty experiment triggered experiment 2 encountered must processed independently ssf combinable experiments present input must processed 2 sce r 0 r 0 1 3 1 r 0 1 2 satisfy rules combinability 1 propagate offspring 1 3a 1a 1 r 0 yes evaluate invalid yes evaluate experiment scenario propagate fig 7 applying mdcs multiple stuckat fault sim ulation narios 2 1 versus experiments l 2 depicted table figure 7 three cases two must evaluated meet rules combinability result evaluations propagated output experiment produces different state value parent present output list l 3 since l 3 contains one experiment reference experiment results evaluated scenarios compared row l 3 table figure 7 shows results evaluations case 1 performing traditional cs ie simulating ssf 2 stuck gamma gamma 1 input 1 case compressed since matches reference state output case 3 produces state value equal reference output r0 therefore experiment propagated output element note diverged experiment 2 b 1 1 displays new behavior would seen simulating parent experiment 2 1 b 1 1 independently therefore offspring experiment spawned previous example shown provide insight method generating scenarios output contained reference experiment experiments compare newly evaluated scenarios let us demonstrate mdcs algorithm parent experiments besides reference present output figure 8 shows presence experiment shown gray arrived output current simulation time gate evaluated scenarios shown table figure 7 would still generated difference however would case 3 would see b 1 1 l 3 parent check state value comparison upon verifying interaction output propagation would occur example called parent checking experiments compressed dynamic parents opposed propagated 5 circuit example consider figure 9 order demonstrate storage savings mdcs algorithm czeck heller r 0 r 0 1 3 1 r 0 1 1 fig 8 using parent checking output propagating offspring experiment b 1 arrived previous current event circuit given figure 4 showing parent experiments mdcs would store three domains b c figure 9 domain defined containing single stuckat1 fault source primary input element case domain b c contain values input 1 gate e 1 2 1 e 2 respectively domain definition flexible restrictions assignment domains signal lines instance three domains could contained faults inserted input would interesting case using reference state value zero network initialized four parent experiments e 1 e 2 reference r three single stuckat1 faults 1 1b 1 1 c 1 1 table 1 combinations generated using mdcs include two ssf msaf experiment 1 b 1 case 1 case 2 case3 case 4 1 r0 1 1 2 r0 evaluated 1 experiments e 1 triggered resulting combinations shown table 1 along02 triggered experiment r r r r r r 1 c 1fig 9 simulating digital logic network three domains contributing parent experiments input produced signals propagated respective outputs reference experiments spawned new behavior propagated creation msafs mdcs reported along detection statistics 6 results order demonstrate potential mdcs practical applications proofofconcept prototype developed used creator concurrent fault simulator 6 reference compared mdcs version correctness measuring overhead associated algorithms test cases based iscas benchmark circuits 3 4 widely used evaluating fault simulation techniques experimental results presented fault single stuckat twoway stuckat simulations performed using mdcs scheme although mdcs portable many platforms results presented gathered using vax 8800 uniprocessor machine waveforms test input patterns generated using contest 13 table 2 contains information necessary describe benchmark circuits used circuit number iscas name number gates primary inputs primary outputs number flip flops number single stuckat faults inserted number input patterns used provided circuits referenced number first column table 2 graphs first letter circuit indicates whether sequential combinational c combinational circuits taken iscas85 3 benchmark set sequential circuits taken iscas89 4 set simulated original set single stuckat faults plus combination potential twoway stuckat faults say potential twoway faults mdcs performing exhaustive experimentation rather investigating whole space interactions given set input patterns results clearly demonstrate experiment compression feature mdcs multiple experiment environments testing 11 table 2 iscas benchmark circuit descriptions ordered ascending number faults inserted number circuit gates pinputs poutputs flops faults patterns 9 s526 214 3 6 21 599 1496 14 c6288 2417 original single stuckats simulated independent experiments two different experiments arrive different inputs gate tested interactions interaction counted time two experiment scenarios tested new behavior number include redundant counts combinations faults due feedback paths application new waveform pattern contrast offspring experiment one interaction creates new behavior must propagated given information wanted find overhead going single multiplicity 2 faults one domain two cpu times plotted figure 10 th times show adding potential experiment interaction fairly cost effective know basic cs algorithm many single stuckat faults compressed using reference phenomenon exhibited mdcs indicates parent experiments must playing important role curtailing total number experiments simulated otherwise complexity algorithm would overwhelming experiments become explicit circuit c6288 largest overhead due fact code optimized sequential circuits newer revisions algorithm address problem upper bound possible twoway experiment scenarios could arise exhaustive simulation computed value shown benchmark column called total possible msaf table 3 column titled total ssfmsaf experiments possible total number scenarios could possibly arise includes original single stuckat faults well possible double fault experiments computed n number single stuckat fault sources ng l e ng l emsaf cpu circuit number fig 10 cpu time mdcs single stuckat simulations single plus double msaf 12 lentz manolakos czeck heller table 3 two domain simulation single double fault simulation performance number circuit ssf total total cpu time sec storage name inserted possible ssf msaf ssf ssfmsaf kbytes msaf experiments possible ring 6 15 21 010 9 s526 599 179101 179700 41463 69593 103 14 c6288 7744 29980896 29988640 78334 214532 728 table 4 interactions eliminated due parent checking circuit total poss interactions offspring interactions name msaf occurred propagated eliminated ring 9 s526 179101 1202 53 1149 14 c6288 29980896 52351 972 51379 unlike techniques 10 mdcs physically inserting possible fault scenarios adding additional circuitry rather mdcs allows sets single stuckats inserted uses test patterns stimulus msafs manifest interacting experiments original purpose mdcs used exclusively single stuckat fault simulator rather test environment efficiently creating experiment scenarios observing experiment behavior however still interesting compare overhead algorithm simulators comparing mdcs underlying concurrent implementation single stuckat faults proofs simulator11 mdcs multiple experiment environments testing 13 cpu times benchmarks much better one would expected concurrent simulation algorithm comparison based 32 bit word data reported in11 although proofs demonstrates massive speedup version concurrent simulation mdcs version cs uses mlt element processing thus closing gap two algorithms commercial concurrent simulators use twolist traversal15 mechanism implementing concurrent fault simulation certainly would impede speed reported proofs 11 one way measure performance mdcs investigate number experiment interactions occurred whether generated offspring table 4 shows statistics gathered interactions relation number offspring experiments occurrence interactions two experiments overhead associated every interaction test must done determine whether parent experiment reference parent already exists output exhibits havior behaving experiments com pressed different behaviors must propagated therefore become offspring offspring experiments measure many new scenarios propagated mdcs results show despite fact number interacting scenarios large mdcs eliminate parent checking column table 4 titled interactions occurred count number times two experiments tested cumulative new behaviors column called offspring propagated indicates many interactions actually generated new offspring experiments finally difference interactions occurred offspring propagated shown column called number interactions elimi nated column reflects number interacting scenarios converged com pressed due parent checking figure 11 shows parent checking ef fective column graph represents percentage interactions eliminated circuit simulated proves mdcs curtails number experiments spawned also experiment compression factor extremely high also tremendous impact storage shown last column table 3 61 extension larger domains digital logic simulation excellent testbed mdcs limited number logic state values output assume number domains increased three four found interactions could represented parent experiment therefore compressed cpu time larger multiplicity faults grew slightly remained relatively constant multiplicities four 62 future directions since demonstrated mdcs efficiently create scenarios interact area research interest involves utilizing function list2 7 creating multiple instances model single simulation fault simulators mdcs creator6 function list stores various activity functions allow model assume different behaviors simulation instance gate could forced act like gate various times model intermittent fault scenario including functionality multiple domain algorithm provide simulator ability create scenarios combinations activity functions dynamically efficiently figure 12 two input gate shown reference experiment function list2 contains activity function faultfree experiment denoted r 14 faulty behaviors inserted single stuckats faults loaded simulator mdcs algorithm create simulate single stuckat fault experiments creating current lists simulating reference experiment l simulating input 1 stuckat 1 l presence activity function function list causes model evaluated substi 14 lentz manolakos czeck heller interactions eliminated fig 11 demonstrating efficiency experiment com pression percentage experiments eliminated simulation tuting stuckat value appropriate input output list example activity function f 1 cause gate evaluated input inputs use reference state values multiple domain algorithm traverses function list dynamically create fault scenarios multiplicity example figure 12 behaviors activity functions f 1 f 2 tested interaction fault experiments present input lists new behavior detected different contributing activity functions new activity function created offspring experiment spawned activity functions mdcs show much promise scenario experimentation activity functions need limited fault behaviors may possess complex model functions used scenario control virtual environments8r 11 r 12 function list andi activity fig 12 function list containing activity functions allows model assume multiple behaviors 7 limitations utilizing dynamic reference parent exper iments scenarios compressed implicit classes thus reducing number explicit experiments must stored propagated features currently available discreteevent simulators implemented cpu storage efficient manner however one area concern difficulty establishing appropriate reference experiments beyond four state simulator application beyond digital logic simulation software programs fault simulation since 4 possible outcomes 01zx offspring experiments curtailed state behaviors assume one four values considering complex models perhaps model equation number valid output states could enormous algorithm develop method choosing appropriate parent experiments serve appropriate behavior comparison one method investigation use valid ranges specific variables either provided user derived model simulated experiments produce behavior states within range compressed outside boundaries propagated 8 conclusions paper introduced framework intended attack large simulation problems number experiments approach exhaustive test ing using multiple domain concurrent simulation algorithm methodology presented experimentation without explicit representation scenarios addition dynamic interactions allowed create new cumulative behaviors offspring observed throughout simulation offspring experiments spawned simulation detected using input patterns generated con test13 gentest advantage using mdcs flexibility ease defining experiments modifications need made network scenarios multiple stuckat faults need inserted multiple experiment environments testing 15 instead domains used insert sets single stuckat faults faults create new behaviors ever propagated algorithms developed framework verified performing multiple stuckat fault simulation digital logic circuits application chosen demonstrates features mdcs namely experiment interac tion compression spawning new behaviors benchmark testing evaluation using iscas benchmark circuits 3 4 performed multiple stuckat fault simulations results indicate mdcs create combinatorial explosion experiment combinations need stored simulated evident number experiments converged parent another interesting feature worth noting ability compare activity one pattern another instance mdcs generates interactions based pattern stimulus interactions pattern created seemed indicate robustness exercising circuit signatures specific patterns could easily determined compared redundancy test pattern development future directions investigation include using behavioral models vhdl types models hcsm8 even bdds16 multiple domain environment dynamic interactions possible within models current mdcs implementation use vhdl models experiment interaction feature inherent framework yet implemented vhdl models using function list framework also shows much promise simulation applications orchestrating scenarios important allows many different behaviors captured single model entity mdcs list traversal mechanism compress propagate behaviors interest finally methodology shows promise evaluating effectiveness patterns coverage detection different pattern sets performed help derive new patterns robust detecting complex interacting behaviors acknowledgements authors would like thank dr pierluca montesorro continued support creator simulator dr fabio somenzi dr vishwani agrawal help benchmarking drchung len lee valuable suggestions notes 1 note list also known obligation list r concurrent simulation nearly identical digital networks mozart concurrent multilevel simulator neutral netlist 10combinational benchmark circuits target translator fortran combina tional profiles sequential benchmarks sequential test generation switchlevel concurrent fault simulation based general purpose list traversal mechanism creator general efficient multilevel concurrent fault simulation creator new advanced concepts concurrent simulation hcsm framework behavior scenario control virtual environments multiple domain concurrent simulation interacting experiments application multiple stuckat fault simulation multiplefault simulation coverage deterministic singlefault test proofs fast memory efficient sequential circuit fault sim 16lentz manolakos czeck heller ulator comparative concurrent simulation discreteevent experiments directed search method test generation using concurrent simulator sequential circuit fault simulation fault information tracing algorithm fit efficient method fault simulation digital circuits modeled boolean gates memories symbolic boolean manipulation ordered binary decision diagrams earned tr ctr karen panetta lentz jamie heller pier luca montessoro system verification using multilevel concurrent simulation ieee micro v19 n1 p6067 january 1999 zainalabedin navabi shahrzad mirkhani meisam lavasani fabrizio lombardi using rt level component descriptions single stuckat hierarchical fault simulation journal electronic testing theory applications v20 n6 p575589 december 2004 maria hybinette richard fujimoto cloning parallel simulations acm transactions modeling computer simulation tomacs v11 n4 p378407 october 2001 maria hybinette justintime cloning proceedings eighteenth workshop parallel distributed simulation may 1619 2004 kufstein austria