languagebased caching dynamically generated html increasingly html documents dynamically generated interactive web services ensure client presented newest versions documents customary disable client caching causing seemingly inevitable performance penalty bigwig system dynamic html documents composed higherorder templates plugged together construct complete documents show exploit feature provide automatic finegrained caching document templates based service source code bigwig service transmits full html document instead compact javascript recipe clientside construction document based static collection fragments cached browser usual manner compare approach related techniques demonstrate number realistic benchmarks size transmitted data latency may reduced significantly b introduction one central aspect development world wide web last decade increasing use dynamically generated documents html documents generated using eg cgi asp php server time request client 21 2 originally hypertext documents web considered principally static influenced design protocols implementations instance important technique saving bandwidth time clockcycles cache documents clientside using original http protocol document never rarely changes associated expiration time telling browsers proxy servers need reload document server time however dynamically generated documents change every request feature must disabledthe expiration time always set voiding benefits caching even though caching schemes consider dynamically generated documents noncachable 19 3 proposals attacking problem emerged 23 16 7 11 6 8 however described proposals typically applicable highly dynamic documents often based assumptions although document dynamically generated 1 construction server often sideeffects instance request essentially database lookup operation 2 likely many clients provide arguments request 3 dynamics limited eg rotating banner ads take next step considering complex services essentially every single document shown client unique construction sideeffects server typical example service webboard current discussion threads displayed according preferences user propose whole new caching scheme requiring intrusive modifications web architecture rather technique exploiting caches already existing clientside browsers resembling suggestions future work 21 though caching work whole dynamically constructed html docu ments web services construct html documents using sort constant templates ideally ought cached also observed 8 20 figure 1 show condensed view five typical html pages generated different big wig web services 4 column depicts dynamically generated raw html text output produced interaction five benchmark web services nonspace character colored either grey black grey sections appear constitute significant part characters originate large number small constant html templates source code black sections dynamically computed strings character data specific particular interaction lycos example simulates search engine giving 10 results query caching dynamic objects bachelor service based course roster generate list menus students use plan studies jaoo service part conference administration system generates graphical schedule events webboard service generates hierarchical list active discussion threads dmodlog service generates lists participants course apart first sim ulation examples sampled running services use real data dmodlog example dominated string data dynamically retrieved database seen figure 1 thus included worstcase scenario technique remaining four figure suggests substantial potential gain caching grey parts main idea paper isautomatically based source code web servicesto exploit division constant dynamic parts order enable caching constant parts provide efficient transfer dynamic parts server client using technique based javascript shifting actual html document construction server client contributions paper automatic characterization based source code document fragments cachable dynamic permitting standard browser caches significant effect even dynamically generated documents compact representation information sent client constructing html documents lycos b bachelor c jaoo webboard e dmodlog figure 1 benchmark services cachable grey vs dynamic black parts generalization allowing whole group documents called document clus ter sent client single interaction cached efficiently possible feasible due unique approach dynamically constructing html documents used language 17 4 use foundation technique nonintrusive sense builds preexisting technologies http javascriptno special browser plugins cache proxies server modules employed extra effort required service programmer result obtain simple practically useful technique saving network bandwidth reviving cache mechanism present modern web browsers outline section 2 covers relevant related work section 3 describe approach dynamic generation web documents highlevel language using html templates section 4 describes actual document construction shifted serverside clientside section 5 evaluate technique experimenting five web services finally section 6 contains plans ideas improvements related work caching dynamic contents received increasing attention last years since became evident traditional caching techniques becoming insufficient following present brief survey existing techniques related one suggest existing techniques labeled dynamic document caching either server based eg 16 7 11 23 proxybased eg 6 18 clientbased eg hpp language 8 primary goal serverbased caching techniques lower network load endtoend latency aim relieve server memoizing generated documents order avoid redundant computations techniques orthogonal one propose serverbased techniques work well services many documents computed technique works well services every document unique presumably many services mixture two kinds different approaches might support wellhowever examine claim paper 16 service programmer specifies simple cache invalidation rules instructing server caching module request dynamic document make cached responses stale approach 23 variant expressive invalidation rule language allowing classes documents specified based arguments cookies client ip address etc technique 11 instead provides complete api adding removing documents cache efficient rather lowlevel approach 7 extended object dependency graphs representing data dependencies dynamic documents underlying data allows cached documents invalidated automatically whenever certain parts database modified graphs also allow representation fragments documents represented technique caching client side related approach caching weave web site specification system described 22 18 protocol proxybased caching described resembles many serverbased techniques exploiting equivalences requests notion partial request equivalence allows similar nonidentical documents identi fied client quickly given approximate response real response generated active cache 6 powerful technique pushing computation proxies away server closer client document associated cache ap plet piece code executed proxy applet able determine whether document stale refresh document refreshed either traditional way asking server extreme completely proxy without involving server combination allows tailormade caching policies made andcompared serverside approachesit saves network bandwidth drawbacks approach 1 requires installation new proxy servers serious impediment widespread practical use 2 since general automatic mechanism characterizing document fragments cachable dynamic requires tedious errorprone programming cache applets whenever nonstandard caching policies desired common techniques literature mentioned truly dynamic documents whose construction server often sideeffects essentially always unique contain common constant fragments either cannot cached require costly extra effort programmer explicitly programming cache furthermore techniques either inherently serverbased hence decrease network load require installation proxy servers encoding 14 based observation dynamically constructed documents many fragments common earlier versions instead transferring complete document delta computed representing changes compared common base using cache proxy full document regenerated near client compared active cache approach automatic drawback isin addition requiring specialized proxiesthat necessitates protocols management past versions intrusions obviously limit widespread use furthermore help repetitions within single document repetitions occur naturally dynamically generating lists tables whose sizes statically known common many web services produce html contents database repetitions may involve dynamic data database static markup lists tables hpp language 8 closely related approach based observation dynamically constructed documents usually contain common constant fragments hpp html extension allows explicit separation static dynamic parts dynamically generated document static parts document collected template file dynamic parameters separate binding file template file contain simple instructions akin embedded scripting languages asp php jsp specifying assemble complete document according 8 assembly caching templates done either using cache proxies browser java applets plugins possible use javascript instead essential difference hpp approach hpp solution integrated programming language used make web service work possible combine hpp popular embedded scripting lan guages effort explicitly programming document construction remains approach based source language meaning caching specifications automatically extracted web service source code compiler programmer required aware caching aspects regarding cachability hpp advantage instructions describing structure resulting document located template file cached solution equivalent information dynamic file however hpp constant fragments constituting document collected single template means html fragments common different document templates cannot reused cache solution finegrained since caches individual fragments sepa rately also hpp templates highly specialized hence difficult modify reuse programmer fully automatic approach guarantees cache soundness analogously optimizing compilers claim compiler generates caching code competitive human hpp programmer figure 2 plug operator could achieve claim substantiated experiments section 5 claim provides flexible safe hence easier use template mechanism hpp embedded scripting language notion higherorder templates summarized section 3 thorough comparison various mechanisms supporting document templates found 4 mentioned use compact javascript code combine cached dynamic fragments clientside alternatively similar effects could obtained using browser plugins proxies implementation installation would become difficult http 11 protocol 9 introduces automatic compression using generalpurpose algorithms gzip byterange requests advanced cachecontrol directives compression features essentially orthogonal propose shown section 5 byterange caching directives provide features reminiscent javascript code would require special proxy servers browser extensions apply caching dynamically constructed docu ments finally could chosen java instead javascript javascript lightweight sufficient purposes 3 dynamic documents part web service programming language deals dynamic construction html documents called dyndoc 17 based notion templates html fragments may contain gaps gaps runtime filled templates text strings yielding highly flexible mechanism service consists number sessions essentially entry points sequential action may invoked client invoked session thread local state started controlling interactions client two builtin operations plug show form core dyndoc plug operation used building documents illustrated figure 2 operator takes two templates x gap name g returns copy x copy inserted every g gap template without gaps considered complete document show operation used interacting client transmitting given document clients browser execution clients session thread suspended server client submits reply document contains input fields show statement must receive part receiving field values program variables mawl 12 1 use templates permits programmer designer tasks completely separated however templates firstclass values passed around stored variables data type also higherorder templates plugged templates contrast mawl templates cannot stored variables strings inserted gaps higherorder nature mechanism makes flexible expressive without compromising runtime safety two compiletime program analyses gapandfield analysis 17 html validation analysis 5 former analysis guarantees every plug designated gap actually present runtime given template every show always valid correspondence input fields document shown values received latter analysis guarantee every document shown valid according html specification following variant wellknown example illustrates dyndoc concepts service session helloworld string show ask receive swhat show hello two html variables ask hello initialized constant html templates session helloworld declared entities merely lexical delimiters part actual templates invoked session first shows ask template complete document client documents implicitly wrapped element form default continue button shown client fills input field submits reply session resumes execution storing field value vari able plugs value thing gap hello template sends resulting document client following elaborate example used throughout remainder paper service welcome body bgcolorcolor contents hello welcome session welcome contentsgreetingwhoperson show hwhat brics builds welcome brics document plugging together four constant templates single text string shows client terminates higherorder template mechanism require documents assembled bottomup gaps may occur nonlocally instance gap h show statement comes greeting template plugged cover template preceding statement existence statically guaranteed gapandfield analysis illustrate higherorder templates figure 3 webboard expressive provide better cachability compared firstorder template mechanisms first note asp php jsp also fit firstorder category conceptually correspond one single firstorder template whose special code fragments evaluated server implicitly plugged template consider unbounded hierarchical list messages typical web bulletin board easily expressed recursively using small collection dyndoc templates however never captured firstorder solution without casting templates strings hence losing type safety course one willing fix length list explicitly template compiletime expressed unbounded lengths either case sharing repetitions html output sacrificed substantially cutting potential benefits caching figure 3 shows webboard benchmark would appear generated entirely using firstorder templates outermost template remains message list produced one big dynamic area thus nearly everything dynamic black compared higherorder version displayed figure 1d languages without template mechanism perl c simply generate documents using lowlevel printlike commands generally little structure output exploited caching purposes plugandshow mechanism successfully welcome leaf greeting b node strplugdgs c node plugd 1 gd 2 figure 4 dyndocdag representation constituents transferred many advantages known static documents dynamic context next step course caching dynamic document representation dynamic documents runtime represented dyndocdag data structure supporting four operations constructing constant templates constantc string plugging strplugdgs template plugging plugd 1 gd 2 showing documents showd data structure represents dynamic document binary dag directed acyclic graph leaves either html templates strings plugged document nodes represent pluggings constructed document constant template represented ordered sequence text gap con stituents instance greeting template brics example service represented displayed figure 4a sequence containing two gap entries three text entries text around gaps constant template represented memory shared among documents plugged causing data structure dag general tree string plug operation strplug combines dag constant string adding new string plug root node name gap illustrated figure 4b analogously plug operation combines two dags shown figure 4c operations left branch document containing gap plugged right branch value plugged gap thus data structure merely records plug operations defers actual document construction subsequent show operations conceptually show operation comprised two phases gap linking phase insert stack links gaps templates print traversal phase performs actual printing traversing gap links need stacks comes template sharing strplugdgs plugd 1 gd 2 showd operations optimal complexities o1 o1 od respectively lexical size document figure 5 shows representation document shown brics example color contents color contents 9966ff anonymous brics person greeting cover figure 5 dyndocdag representation document shown brics example service simple example dag tree since constant template used note documents representation exponentially succinct expanded document instance case following recursive function html treeint n n0 return foo return listgaptreen1 given n time space produce document lexical size o2 n shows regarding network load highly beneficial transmit dag across network instead resulting document even ignoring cache aspects caching section show cache reoccurring parts dynamically generated html documents store documents compact representation first step direction move unfolding dyndocdag data structure server client instead transmitting unfolded html document server transmit dyndocdag representation document javascript along link file containing generic javascript code interpret representation unfold document client caching obtained placing constant templates separate files cached browser files document structure color contents d12js d23js d33js d41js string pool dynamic document structure reply file color contents d12js d23js d41js d33js b cachable template files figure separation cachable dynamic parts shall see section 5 caching compact representation substantially reduce number bytes transmitted server client compromise course use client clock cycles unfolding context fast client machines comparatively slow networks sensible tradeoff explained earlier clientside unfolding computationally expensive task clients strained extra work even interpreted language like javascript one drawback approach extra tcp connections required downloading template files first time unless using keep connection alive feature http 11 however worse downloading document many im ages experiments show number transmissions per interaction limited appear practical problem 41 caching dyndocdag representation useful property explicitly maintains separation constant templates occurring document strings plugged document structure describing assemble document figure 5 constituents depicted framed rectangles oval rectangles circles respectively experiments suggest templates tend occur documents shown client across lifetime service either occur many times document 2 many different documents 3 simply documents shown many times strings structure parts however typically dynamically generated thus change document templates account large portion expanded documents substantiated figure 1 earlier explained consequently would useful somehow cache templates browser transmit dynamic parts namely strings structure show statement separation cachable dynamic parts brics example illustrated figure 6 already mentioned solution place template file include link document sent client way caching mechanism browser ensure templates already seen retransmitted first time service shows document client browser obviously cached javascript template files documents shown client download fewer fewer files enough inter actions client reaches point asymptotic caching constant templates cached thus dynamic parts downloaded since templates statically known compiletime compiler enumerates templates generates file containing corresponding javascript code postfixing template numbers version numbers caching enabled across recompilations templates modified contrast hpp approach entirely automatic distinction static dynamic parts dyndocdag structure identified compiler programmer gets benefits clientside caching without tedious errorprone manual programming bindings describing dynamics 42 compact representation following show encode cachable template files reply documents containing document representation since reply documents transmitted show statement sizes small decompression conducted javascript interpreted browsers apply general purpose compression techniques instead exploit inherent structure reply documents obtain lightweight solution simple yet compact javascript representation string structure parts encoded decoded efficiently constant templates constant template placed file caching encoded call javascript constructor function f takes number version template followed array text gap constituents respectively constructed via calls javascript constructor functions g instance greeting template brics example gets encoded follows fthello g3t welcome g4t assuming version 3 template number 2 placed file called d2 3js gap identifiers replaced numbers 3 4 respec tively abstracting away identifier names note file needs ever downloaded given client reused every time template occurs document dynamics javascript reply files transmitted show contain three document specific parts include directives loading cachable javascript template files dynamic structure showing assemble document string pool containing strings used document structure part representation encoded javascript string constant uuencodelike scheme tuned kinds dags occur observed benchmarks empirical analyses exposed three interesting characteristics strings used document 1 relatively short 2 occur many times many seem urls common prefixes since strings quite short placing individual files cached would drown transmission overhead reasons security want bundle strings cachable string pool files along multiple occurrences suggests collect strings given document string pool inlined reply file sent client string occurrences within document thus designated offsets pool finally common prefix sharing suggests collect strings trie precisely yields sharing common prefixes example following four strings foo httpwwwbricsdkbigwig httpwwwbricsdkbigwigmiscgifsbggif httpwwwbricsdkbigwigmiscgifsbigwiggif linearized represented follows foohttpwwwbricsdkbigwigmiscgifsbigwiggifggif applying trie encoding string data benchmarks observe reduction ranging 1780 1212 bytes bachelor 27728 10421 bytes dmodlog reply document transmitted client show statement brics example looks like script srchttpwwwbricsdkbigwigdyndocjs body onloade document starts including generic 15k javascript library dyndocjs unfolding dyndocdag representation file shared among services thus ever downloaded client cached first service teraction reason put effort writing compactly include directives encoded calls function whose argument array designating template files included document along version numbers constructor function reconstructs string trie example contains string plugged document namely 9966ff expected document structure part reconstructed constructor function humanly readable uses extended ascii set encode dynamic structure last three arguments recount many bytes used encoding node number templates plus plug nodes number gaps respectively last line document calls javascript function e interpret constituents expand document document fully replaced expansion note three script sections required ensure processing occurs distinct phases dependencies resolved correctly viewing html source browser display resulting html document encodings compact representation makes attempts actual compression gzip xml compression 13 highly efficient encode server decode javascript client compression essentially orthogonal sense representation works independently whether transmission protocol documents sent across network shown section 5 however benefit factor scheme course reduced compression added 43 clustering show operation restricted transmit single document collection interconnected documents called cluster instance document input fields combined cluster separate document help information fields hypertext reference another document cluster may created using notation x refer document held html variable x time cluster shown showing document containing references client browse individual documents without involving service code controlflow service code becomes clear since interconnections set cluster single document references internal links within following example shows set cluster two documents input help cyclically connected input main document service please enter name input namename click hrefhelphere help enter given name family name nickname hrefbackback form session clusterexample html h string show receive sname show outputnames cluster mechanism gives us unique opportunity reducing network traffic encode entire cluster single javascript document containing documents cluster along interconnections wherever document reference original cluster generate javascript code overwrite current document browser referenced document cluster course also need add code save restore entered form data client leaves reenters pages forms way everything takes place clients browser server involved client leaves cluster 5 experiments figure 7 recounts experiments performed applied caching technique five web service benchmarks mentioned introduction figure 7b show sizes data transmitted client grey columns show original document sizes ranging 20 90 kb white columns show sizes total data transmitted using technique none exceeds 20 kb ultimate interest black column shows asymptotic sizes transmitted data templates cached client case see reductions factors 4 37 compared original document size lycos benchmark similar one presented hpp 8 except reconstruction course seen size residual dynamic data 20183 3344 bytes virtually identical obtained hpp 18000 3250 bytes however solution caching aspects handcoded benefit human insight automatically generated compiler four benchmarks would challenging hpp figure 7c repeat comparisons figure 7b assumption data transmitted compressed using gzip course drastically reduces benefits caching technique however still see asymptotic reduction factors 13 29 suggesting approach remains worthwhile even circumstances clearly documents asymptotic reduction factors arbitrarily large since large constant text fragments count zero side scales gzip compress certain size hence feel justified claiming compression orthogonal approach http protocol supports compression represent string pool naive fashion rather trie since gzip better job plain string data note cases uncompressed residual dynamic data smaller compressed version original document figure 7d 7e quantify endtoend latency technique total download rendering times five services shown standard documents cached versions client internet explorer 5 running 800 mhz pentium iii windows pc connected server via either 288k modem 128k isdn modem still realistic configurations since august 2000 vast majority internet subscribers used dialup connections 10 situation change significantly within next couple years 15 times averaged several downloads plus renderings browser caching disabled expected yields dramatic reduction factors 21 97 288k modem 128k isdn modem factors reduce 14 39 even worstcase example dmodlog benefits setup higher bandwidth dimen sions results course less impressive figure 7f focus pure rendering times obtained averaging several document accesses plus renderings following initial download caching browser first three benchmarks times fact bit faster original html documents thus generating large document sometimes faster reading memory cache last two benchmarks somewhat slower figures course highly dependent quality javascript interpreter available browser compared download la tencies rendering times negligible visualized figure 7d 7e 6 future work following describe ideas cutting number bytes files transmitted server client many services certain templates often occur together show statements templates could grouped file caching thereby lowering transmission overhead html validation analysis 5 already approximates graph readily derive set templates reach given show statement sets could analyzed tightly connected templates using various heuristics however certain security concerns need taken consideration might good idea indirectly disclose template cache bundle show statement directly include finally possible also introduce languagebased serverside caching complementary clientside caching presented idea exploit structure programs automatically cache invalidate documents generated resembles serverside caching techniques mentioned sec original original dynamics dynamics2060100 z lycos z bachelor z jaoo z webboard z dmodlog kb b z lycos z bachelor z jaoo z webboard z dmodlog kb c gzip size51525 z lycos z bachelor z jaoo z webboard z dmodlog sec 288k modem downloadrendering2610 z lycos z bachelor z jaoo z webboard z dmodlog sec lycos z bachelor z jaoo z webboard z dmodlog msec f pure rendering figure 7 experiments template representation 7 conclusion presented technique revive existing clientside caching mechanisms context dynamically generated web pages approach programmer need aware caching issues since decomposition pages cachable dynamic parts performed automatically compiler resulting caching policy guaranteed sound experiments show results significantly smaller transmissions reduced latency technique requires extensions existing protocols clients servers proxies exploit browser interpret javascript code results lend support unique design dynamic documents r mawl domainspecific language formbased services changes web client access patterns characteristics caching implications world wide web caching trends tech niques project static validation dynamically generated html active cache caching dynamic contents web scalable system consistently caching dynamic web data hpp html macro preprocessing support dynamic document caching august 17 improving web server performance caching dynamic data programming web applicationoriented language hypermedia services xmill efficient compressor xml data balachander krishna murthy designing web usability practice simplicity simple effective caching scheme dynamic content type system dynamic web documents exploiting result equivalence caching dynamic web content survey web caching schemes internet studying impact complete server information web caching characterizing web workloads improve performance caching strategies dataintensive web sites tr potential benefits delta encoding data compression http type system dynamic web documents xmill static validation dynamically generated html survey web caching schemes internet myampersandltbigwigmyampersandgt project designing web usability changes web client access patterns caching strategies dataintensive web sites ctr peter thiemann xml templates caching wash proceedings acm sigplan workshop haskell p1926 august 2828 2003 uppsala sweden chun yuan zhigang hua zheng zhang proxy simple proxy augmentation dynamic content processing web content caching distribution proceedings 8th international workshop kluwer academic publishers norwell 2004 chihung chi hongguang wang generalized model characterizing content modification dynamics web objects web content caching distribution proceedings 8th international workshop kluwer academic publishers norwell 2004 peter thiemann xml templates caching wash proceedings acm sigplan workshop haskell p1926 august 2828 2003 uppsala sweden michael rabinovich zhen xiao fred douglis chuck kalmanek moving edgeside includes real edge clients proceedings 4th conference usenix symposium internet technologies systems p1212 march 2628 2003 seattle wa anindya datta kaushik dutta helen thomas debra vandermeer krithi ramamritham accelerating dynamic web content generation ieee internet computing v6 n5 p2736 september 2002