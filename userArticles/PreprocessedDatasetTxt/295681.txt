coordinating agent activities knowledge discovery processes knowledge discovery databases kdd increasingly widespread activity kdd processes may entail use large number data manipulation analysis techniques new techniques developed ongoing basis challenge effective use kdd coordinating use techniques may highly specialized conditional contingent additionally understanding validity kdd results depend critically processes derived propose use process programming address coordination agents use kdd techniques illustrate approach using process language littlejil program representative bivariate regression process littlejil programs clearly capture coordination kdd activities including control flow pre postrequisites exception handling resource usage b introduction kddknowledge discovery databaseshas become widespread activity undertaken increasing number variety industrial governmental research organizations kdd used address diverse often unprecedented questions issues ranging marketing fraud detection web analysis command control support diverse needs researchers devised scores techniques data preparation transformation mining postprocessing moreover dozens new techniques added year growing collection techniques tools helps address growing set needs size rapid growth collection becoming something problem many techniques yield incorrect results unless used correctly techniques addition kdd often done teams whose activities must correctly coordinated thus one chief challenges facing organization wishes conduct kdd assuring data analysis processing techniques used appropriately correctly activities teams assembled kdd properly controlled coordinated applicability techniques depend number factors including question addressed characteristics data studied history processing data problem compounded organization lacks experience possibly new techniques individual analysts team differ respect general level expertise specialized knowledge data eg biases assumptions familiarity particular analysis techniques pitfalls tricks problem exacerbated multiple analysts must orchestrated kdd effort resources required support kdd effort scarce subject competitive access view problems issues coordination general goal assure right team member applies right technique right data right time similar problems coordination come software development example application software tools software artifacts assignment developers development tasks organization tasks execution software methods applied process programming solve coordination problems software development 17 18 believe process programming also suited representing supporting coordination kdd processes applicability approaches based software process programming suggested similarities kdd processes software processes example sorts problems entail involvement human automated agents combination algorithmic nonalgorithmic techniques reliance external resources need react contingencies handle exceptions additionally issues process important understanding assuring validity kdd results paper argue process orientation important kdd process programming appropriate technique effecting good coordination copyright 1999 association computing machinery inc permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copyrights components work owned others acm must honored abstracting credit permitted copy otherwise republish post servers redistribtue lists requires prior specific permission andor fee use kdd techniques support argument examples programmed littlejil process language emphasizes coordination activities agents use resources artifacts believe littlejil provides basis orchestrating coordination assures correctness consistency specification execution kdd processes assures agents ability communicate analyze generally reason coordination kdd techniques 2 kdd processes process thought multistep plan completing given task process specification defines class process instances instance conforms specification carries work ways molded mix agents data available process executed instances differ ways include selection agents execute particular steps order steps executed choice substeps used complete given step example single kdd process specification bivariate regression might allow choice among multiple methods handling outliers eg manual removal automatic removal nonremoval constructing regression model simple leastsquares regression locally weighted regression three group resistant line estimating statistical significance parametric estimates randomization tests naively assuming interstep constraints three steps simple process instantiated different ways potentially confusing number unaided user possible configurations process steps clearly desirable effective others different situations thus researchers practitioners begun provide sort guidance presently takes form technical papers specify desirable processes informal ways believe considerable value augmenting informal descriptions precise complete formal specifications achievable process programming capturing representing processes precisely completely clearly notoriously difficult preliminary work indicates carefully designed process specification languages greatly facilitate task particularly important kdd explicit representation processes particularly important kdd first effective kdd requires managing dependencies steps steps may require disallow enable steps example using neural network training algorithms requires preceding step recode missing values nonparametric regression techniques disallow subsequent step construct parametric confidence intervals constructing decision tree enables future step pruning tree explicit representations dependencies assure appropriately handled second details processes essential determining statistical validity inductive inferences one example wellknown error testing training data 24 kdd processes enforce separation training testing data eg simple disjoint sets crossvalidation produce biased estimates model accuracy underlying cause phenomenon referred multiple comparisons statistics far general effects causally linked several pathologies data mining algorithms including attribute selection errors overfitting oversearching 14 pathological growth size decision trees 15 also causally linked errors evaluating several types modeling algorithms 8 11 12 kdd systems employ multiple analysts distributed time space particularly susceptible pathologies stemming multiple comparisons 16 explicit representation kdd processes supports analyses determine pathologies cannot occur addition ability reinvoke identical process necessary prerequisite solutions randomization tests crossvalidation bootstrap estimates 20 explicit representation processes provides vehicle assuring reinvocations indeed identical third process details vital establishing validity kdd results general ways literature kdd statistics machine learning filled discoveries implicit assumptions underlying particular techniques cases way verify whether assumptions met examine process used apply particular technique knowing process used derive result potential errors traced back source explicit kdd process descriptions capture details fourth explicit representation kdd processes help balance multiple performance goals several approaches given analysis task may produce results differing statistical validity comprehensibility ultimate utility addition techniques may require different amounts computation effort human attention explicitly representing characteristics part specification individual steps process specification created meets particular objectives eg give fast approximate result give highly accurate result take night need combining human analysts automated agen research kdd processes represents return one central issues early work kdd best combine goals expertise human users powerful automated data analysis tools topic identified central one early work field eg 9 overlooked rush develop sophisticated automated techniques recent work returned theme including general descriptions kdd processes eg 7 analysis integration steps 6 26 formulation exploratory data analysis ai planning activity 21 nascent industry effort formulate standard kdd processes crispdm see httpwwwncrdkcrisp broadly believe effective integration work human automated agents problem core growing number critical problems believe advance work problem studying specific context mixedagent coordination kdd process specification one important note work explores coordinate activities multiple kdd agents automated human work concern programming individual automated agents tasks training neural network calculating chisquare statistic tasks best done using conventional programming languages software engineering techniques work also attempt tell human analysts job human analysts knowledge expertise essential kdd process instead exploring flexible languages used coordinate actions experienced human analysts automated agents build processes enable less experienced analysts achieve highquality results next section provides extended example one language 3 example bivariate regression section present example kdd process bivariate regression regression appears relatively simple process appropriate example nevertheless first common data analysis activity regression tools included several kdd workbenches basic task deployed kdd applications second process actually simple may appear involves combination human automated agents may draw variety analytical techniques use techniques may conditional contingent interdependencies exist certain techniques whole process may entail sequential parallel alternative recursive activities thus although bivariate regression relatively small process still suffers many coordination problems process programming intended address basic bivariate regression problem described simply see figure 1a continuouslyvalued variable x eg advertising spending wish determine whether help us predict another continuouslyvalued variable eg net sales assess relationship x data sample n x tuples section present process coordinates agents techniques performance bivariate regression begin basic linear regression expand example incorporate functionality form nonlinear regression accommodation inhomogeneous data sets ie data reflecting two independent phenomena process defined using process language 25 described reference examples process taken complete comprehensive specification contains intentional unintentional simplifications said believe illustrates many necessary features complete specification littlejil language could used represent many necessary details complete specification 31 linear regression common approach task bivariate regression linear regression linear regression constructs model form assessment statistical significance slope 1 conclude x dependent reject null hypothesis 1 zero high confidence least squares regression lsr commonly used form linear regression advantages lsr include relatively high statistical power computational efficiency however lsrs desirable characteristics rest several assumptions including homoskedasticity variance independent x absence outliers x tuples lie far points outliers often represent errors highly unusual conditions produce extreme values outlier bivariate regression inhomogeneity figure 1 simple bivariate regression two common problems consider assumption outliers detail outliers strongly affect lsr modelsa single outlier sharply shift lsr model causing accurately predict neither outlier data points figure 1b alternative modeling technique three group regression 5is robust presence outliers tgr divides range x three groups equal numbers points finds median x value group constructs line three points median measure central tendency resistant outliers tgr much less strongly affected outliers lsr tgr addresses problem outliers parametric significance test 1 used lsr apply tgr instead computationallyintensivetechnique randomization test 1 4 used test significance slope line built tgr incidentally randomization test also used lsr although due computational cost chose exclude example process varied activities linear regression coordinated light relevant dependencies conditions alternatives contingencies precisely cogent process definition make clear process definitions require process language enables coordination semantics expressed clearly concisely allows rigor flexibility combined appropriate supports effective process enforcement admitting dynamic adaptation 32 representing linear regression process section illustrate linear regression process using littlejil process language littlejil visual language derived subset jil process language originally developed software development processes 22 littlejil focuses coordination agents performance process activities wide range processes littlejil represents activities process steps step decomposed substeps substeps within step invoked either proactively reactively step may also prerequisite guard entry step postrequisite guard exit step exception handlers handle exceptions thrown step requisites exception handlers turn steps may also substeps etc addition steps may include resource specifications runtime management resource allocation provides another means dynamically constraining adapting controlling process execution step also distinguished resource execution agent responsible initiating carrying work step execution agents may human automated types may transparently combined littlejil process features others illustrated discussed respect examples figure 2 shows littlejil specification linear regression process process steps littlejil represented visually step name surrounded several graphical badges represent aspects step semantics bar step represents control substeps leftmost element control bar sequencing badge indicates substeps executed example linear regression step figure 2 contains circlewithslash badge represents choice control construct indicates linear regression executed executing one alternatives least squares regression three group regression agent analyst step assigned makes choice least squares regression three group regression turn executed executing sequence substeps indicated arrow control badge two proactive control badges try parallel discussed respect later figures rightmost element step control bar represents exception handlers exception handlers may simple actions complex subprocesses represented figure 1 littlejil specification linear regression additional substeps simple actions include completing step continuing step restarting step rethrowing exception figure 2 exception handler outliers exception thrown step construct linear model substep rather handler simply traps exception continues linear regression step indicated arrow badge associated exception handler handler substep shown figure 4 context choice step continuing exception means agent offered choice remaining alternatives step may also include reactions attached substeps badge center control bar however reactions omitted sake simplicity visual representation littlejil steps circular badge step name represents interface step interface includes resources needed step well parameters sent step local data events exceptions may thrown step execution agents represented type resource step execution agent none specified step execution agent inherited steps parent figures 2 3 agents include humans automated tools data sets also modeled resources several steps example throw exceptions designated interface x much data flow steps shown simplified form data declarations omitted interfaces figures sake brevity littlejil step may also prerequisite andor postrequisite prerequisite indicated downward pointing triangle left step name postrequisite indicated upwardpointing triangle right empty triangle indicates requisite filled triangle text indicates name specified requisite body requisite separately specified step shown figures possibly containing multiple substeps requisite successful terminates normally fails throws exception example step construct lsr model postrequisite outliers outliers exist postrequisite throws outliers exception causes construct lsr model fail parent step least squares regression propagates exception handled parent linear regression clearly many ways add process specified figure 2 additional pre post requisites could added lsr tgr steps data preprocessing steps could added improve robustness process approaches regression could added next section discusses one important elaborations process deal nonlinearity 33 coping nonlinearity common diagnostic technique form linear regression examine plot residuals ideally residualsthe errors left unexplained modelshould vary x nonlinear relationship x residuals indicates nonlinear relationship x one adequately captured linear model checking linear residuals represented littlejil postrequisite linear regression step postrequisite fails one solution would try nonlinear modeling technique locallyweighted regression lowess 2 figure 3 shows process includes original figure 2 regression substeps linear nonlinear regression linear regression step new step nonlinear regression try sequencing badge root regression step indicates nonlinear regression invoked linear regression fails given current specification linear regression principal reason step might fail presence nonlinear residuals linear regression nonlinear regression partitioned separate alternatives different processes required determine linear nonlinear models indicate relationship x linear regression tests relatively simple statistical hypothesis regression relies step evaluate relationship human analyst makes qualitative judgement assist judgment step construct confidence intervals added nonlinear regression although analysts cautious distinguish confidence intervals significance tests 1 note overall regression process coordinates work human nonhuman agents participate various levels process linear regression many additions regression process possible include additional approaches nonlinear regression quantitative substitutes evaluate relationship step prerequisites regression step next section describes one particularly important prerequisite regressionhomogeneity 34 coping inhomogeneity frequently overlooked assumption regression data sample homogeneousthat represents single uniform phenomenon rather two phenomena fundamentally different behavior figure 1c example inhomogeneity occur men women different physiological responses phenomenon yet data men women mixed together purposes analysis contrast outliers often represent errors cannot explicitly modeled inhomogeneity represents two distinct data regimes require independent modeling figure 4 shows model relationships process handles inhomogeneous data process first attempts apply regression testing given bivariate data set however regression step guarded prerequisite tests homogeneity data prerequisite assures single regression performed heterogeneous data prerequisite violated exception nonhomogeneity thrown caught exception handler model relationships recursive process model subsets handles exception top level model subsets sequence first substep choose subset chooses data subset inhomogeneous data set second substep parallel step use choose next substep parallel applies regression selected subset recursively calls model subsets remaining part data set recursion model subsets iteratively models subsets original data set completing normally subsets available indicated check badge exception handler exception nosubsetavailable figure 3 handling inhomogeneous data combining parallel step recursion multiple data subsets may modeled concurrently note formulation process chosen data subset guaranteed homogeneous case process regression called subset homogeneity prerequisite throw nonhomogeneity exception take control back exception handler inhomogeneous data ie model subsets alternative could put test homogeneity postrequisite choose subset step 4 coordinating agents process execution time preceding sections shown littlejil used flexibly specify process manages interstep process dependencies multiple execution agents section describe activities agents coordinated process instantiated executed vehicle agent coordination process execution agenda management system ams agenda management system software system based metaphor using agendas todo lists coordinate activities various human automated agents system task execution assignments made placing agenda items agenda monitored one execution agents different types agenda items may used represent different kinds tasks agent asked perform agenda management system 19 composed substrate provides global access ams data set root object types agendas agenda items etc applicationspecific object types extend root types applicationspecific agent interfaces eg guis human agents designed implemented ams specifically support execution littlejil processes ams five types agenda items one item type corresponds four littlejil step kinds one item type corresponds process step lowest level decomposition littlejil agenda item many attributes including step name execution agent current status log step instance parameters throwable exceptions interpreter last attribute provided illustrate littlejil interpretation architecture allows step interpreter instance step process program first instantiated agenda item appropriate type created attribute values set accordingly eg status set posted input parameters given correct values process executes attribute values change accordingly eg execution agent sets output parameter values status changed thus process program execution state stored within ams approach storing process state similar used processwall 13 agent typically monitors one agendas receive tasks perform multiple agendas used agent may frequently involved several disjoint processes acting roles logically disjoint item posted agenda agent monitoring agent notified agenda changed case human agent example could result new item appearing persons agenda view window agent responsible interpreting item performing appropriate task agents may also monitor items individually gives ability post item agenda observe item react changes items status example mechanics sufficient littlejil interpreter instantiate execute multiagent littlejil process programs examining state agenda item corresponding step process program interpreter execute process new step executed interpreter identifies appropriate execution agent help resource management system creates appropriately typed agenda item step posts agents agenda agent executes step updated status reflected agenda items status attribute value monitored interpreter status changes interpreter accordingly creates posts substeps returns output parameters successful completion step propagates exceptions unsuccessful completion thus ams provides languageindependent facilities allow coordination take place interpreter encodes key coordination semantics littlejil language design decouples concerns coordination occur concerns coordination occur example consider process program fragment figure 2 would executed supposing interpreter created item correspond instance linear regression step littlejil choice step assume interpreter identified humananalyst task named herman posted hermans agenda started items interpreter stored interpreter attribute item point human analyst would use gui change status attribute linear regression item starting interpreter would notified change would create two new agenda items correspond least squares regression three group regression substeps set parent items status started new agents specified steps interpreter would post hermans agenda would start interpreters new items hermans agenda gui would render agenda clearly depict subitems choice item alternatives suppose herman chooses start least squares regression step changing status starting point linear regression items interpreter least squares regression items interpreter would notified change linear regression items interpreter would react setting status subitem three group regression retracted would cause item disappear hermans agenda meanwhile least squares regression items interpreter would create new item first substep construct model process specifies lsrtool step new item would posted particular lsrtools agenda least squares regression items status would set started whatever agent monitoring lsrtools agenda would notified tools agenda changed agent would extract whatever information needed tool agenda item set items status starting would invoke lsrtool agent construct lsr model leaf step items interpreter immediately changes state started lsrtool finishes tools agent would set status leaf step appropriately completing successful terminating steps interpreter would complete transition leaf step final state interpreter least squares regression item would notified step changed depending status would start next sequential substep would terminate parent previously mentioned littlejil makes distinction human tool agents similarly neither ams seen example different agents interact ams consequently running littlejil process via customized agent interfaces humans interface may gui used change items status signal exceptions change parameters etc cots tools lsrtool perhaps interface may wrapper agent integrates tool ams spawning tool perform tasks response agenda items posted tools agenda reporting results tool execution setting agenda item attributes eg parameters status required early experiences support belief agenda management system provides appropriate metaphor coordinating interaction mixedagent processes kdd intend continue experimenting use littlejil ams facilitate coordination processes 5 lessons learned experience using littlejil specify kdd processes instructive many coordination aspects kdd processes including examples described easily expressed using littlejil example one aspect well handled littlejil highly variable control requirements kdd processes conversely kdd processes drawn full range littlejil control constructs cases processes require extremely strict control littlejil allows us indicate eg executing substeps specified order cases loose control needed language allowed us specify well eg allowing user choice parallel execution believe successful process languages kdd must allow flexibility program processes strictly loosely littlejils pre postrequisites essential effective coordination processes prerequisites make explicit assumptions underlie sampling analysis technique postrequisites make explicit acceptance criteria successful completion technique ability make assumptions acceptance criteria explicit important making process understandable evaluating correctness assuring consistent execution validating results similarly ability represent exceptions exception handling critical process robustness reliability safety kdd examples exception management also crucial specifying process control structures many descriptions kdd techniques use nearly ideal data practitioners attempt apply techniques quickly uncover hidden assumptions leading exceptions idealized process models ability indicate possible exceptions specify handled direct subsequent execution essential coordinating kdd efforts realworld applications resource management provides another dimension coordination processes flexibility agent coordination afforded littlejil process written independently specific execution agents bound run time additionally control model language conjunction agenda management system allows processes written transparently respect issue human versus automated agents however runtime allocation agents allows dynamic orchestration agent activities enables dynamic adaptation process behaviors agent availability similar degrees flexibility opportunities dynamic control apply resources general 6 future work work date littlejil convinced us general utility process specification however least three important areas work remain first additional experience specifying processes needed intend increase level sophistication existing processes develop processes application domains particular begun development processes areas coordination robot processes used electronic commerce second believe littlejil specifications easy read write compared algorithmic languages would like kdd process extended nonprogrammers imagine providing sophisticated process editor would assist kdd researcher assisting insertion appropriate steps necessary prerequisites postrequisites data flow exception handling finally littlejil language still development number issues intend address investigating integrating ai planner 10 resourcebased scheduler 23 littlejil mechanisms would allow us schedule agents resources based cost availability specific time duration expected quality results results planning would help guide agents decision making choice parallel steps identifying substeps likely satisfy time cost quality constraints process instances also investigating use static analysis techniques 3 littlejil processes specifically wish prove properties littlejil processes ordering rules step always executes step b nonlocal dependencies step performed step b eventually performed also extensions littlejil want consider particular kdd processes appear need explicit means representing nonlocal control flow dependencies example example regression process parametric significance test applicable least squares regression used currently control flow dependency captured via data flow littlejil least squares regression results computation intermediate values used parametric test precondition test parametric test checks whether data exist prevents parametric test used direct means expressing control flow dependency would preferable hiding within data flow currently done direct means would also enable static analysis techniques reason effectively behavior program 7 conclusions knowledge discovery research developing exploiting diverse expanding set data manipulation analysis techniques analysts even organizations thorough knowledge correctly effectively combine deploy techniques process programming provides effective means specifying coordinated use kdd techniques agents potentially complex kdd processes demonstrated paper kdd process specifications written littlejil express requirements individual techniques capture dependencies among techniques littlejil highlevel process language designed support specification coordination processes offers appropriate control flow constructs pre postrequisites reactions exception handling agent specifications dynamic resource bindings littlejil enables explicit representation kdd processes allows reasoning processes supports correct execution processes turn enables kdd applications produce reliable repeatable results necessary effective use data mining across wide range organizations acknowledgments work supported part air force materiel command air force research laboratory defense advanced research projects agency contracts f3060294c0137 f306029720032 f3060293c 0100 r empirical methods artificial intelligence smoothing local regression principles methods discussion data flow analysis verifying properties concurrent programs randomization tests resistant lines x versus guided tour data mining jungle data mining knowledge discovery databases method learns data negotiationbased interface realtime scheduler decisionmaker statistical significance inductive learning presenting analyzing results ai experiments data averaging data snooping processwall process state server approach process programming multiple comparisons induction algorithms building simple models case study decision trees unique challenges managing inductive knowledge adaptable generation approach agenda management computer intensive methods testing hypotheses introduction complex goal criteria application designtocriteria scheduling computer systems learn kdd process planning tr randomization tests processwall statistical significance inductive learning data flow analysis verifying properties concurrent programs empirical methods artificial intelligence design nextgeneration process language adaptable generation approach agenda management multiple comparisons induction algorithms programming process coordination littlejil building simple models enhancing design methods support real design processes