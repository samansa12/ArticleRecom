mappings conflictfree access paths bidimensional arrays circular lists complete trees since divergence processor speed memory access rate progressively increasing efficient partition main memory multibanks useful improve overall system performance effectiveness multibank partition degraded memory conflicts occur many references memory bank accessing memory pattern therefore mapping schemes needed distribute data way data retrieved via regular patterns without conflicts paper problem conflictfree access arbitrary paths bidimensional arrays circular lists complete trees considered first time reduced variants graphcoloring problems balanced fast mappings proposed require optimal number colors ie memory banks solution bidimensional arrays based particular latin square functions map array node circular list node memory bank calculated constant time complete trees mapping tree node memory bank takes time grows logarithmically number nodes tree problem solved application minimizing number frequencies assigned stations wireless network avoid interference b introduction recent years traditional divergence processor speed memory access rate progressively increasing thus efficient organization main memory important achieve highspeed computations purpose main memory equipped cache memories cycle time processors partitioned multibanks since cost cache memory high size limited multibank partition mostly adopted especially sharedmemory multiprocessors 3 however effectiveness memory partition limited memory conflicts occur many references memory bank accessing memory pattern exploit fullest extent performance multibank partition mapping schemes employed avoid minimize memory conflicts 15 since hard find universal mappings mappings minimize conflicts arbitrary memory access patterns several specialized mappings designed accessing regular patterns specific data structures proposed literature see 12 2 complete list references particular bidimensional arrays budnik kuck 7 balakrishnan et al 4 kim prasanna 12 das sarkar 8 studied mappings provide conflictfree access rows columns positive negative diagonals subarrays distributed subarrays techniques used range latin squares perfect latin squares linear mappings quasigroups 11 subse quently mappings data structures like complete trees binomial trees devised particular mappings provide conflictfree access complete subtrees roottoleaves paths sub levels composite patterns obtained combination investigated 8 9 1 10 14 mapping schemes proposed papers optimal ie use memory modules possible balanced ie nodes data structures distributed evenly possible among banks fast ie bank address node assigned computed quickly knowledge entire structure mapping flexible ie used templates different size present paper optimal balanced fast mappings designed conflictfree access paths bidimensional arrays circular lists complete trees respect mentioned papers paths bidimensional arrays circular lists dealt first time moreover access roottoleaves paths complete trees provided remainder paper organized follows section 2 conflictfree access problem formally stated section 3 problem accessing paths bidimensional arrays solved proposed solution variant graphcoloring requires optimal number colors achieved using combinatorial object similar latin square byproduct memory bank array node assigned computed constant time section 4 problem accessing paths circular lists optimally solved function maps circular list node memory bank calculated constant time section 5 problem complete trees also optimally solved via variant graphcoloring problem time needed assign tree node memory bank grows logarithmically number nodes tree conclusions offered section 6 conflictfree access storing data structure represented general graph memory system consisting n memory banks desirable issue map subset n arbitrary nodes n different banks problem viewed coloring problem distribution nodes among banks done coloring nodes color set f0 hard solve problem general access regular patterns called templates special data structures like bidimensional arrays circular lists complete trees considered hereafter template connected subgraph occurrences ft template instances example complete binary tree path length k template paths length k template instances coloring conflict occurs two nodes template instance assigned memory bank ie get color access template instance results c conflicts belong memory bank given memory system n banks template goal find memory mapping colors nodes way number conflicts accessing instance minimal fact cost colored according u costu defined number conflicts accessing template instance highest cost determines overall cost mapping u mapping u conflictfree among desirable properties conflictfree mapping mapping balanced fast optimal mapping u termed balanced evenly distributes nodes data structure among n memory banks balanced mapping memory load almost banks mapping u called fast color node computed quickly possibly constant time without knowledge coloring entire data structure among possible conflictfree mappings given template data structure interesting ones use minimum possible number memory banks mappings called optimal worth note template size also overlapping template instances data structure determine lower bound number memory banks necessary guarantee conflictfree access scheme fact convincing argument accessing paths e graph representing data structure template p k path length k template instance p k x path length k two vertices x v sequence vertices v h v h1 conflicts eliminated p k x assigned different memory banks conflictfree access p k reduced classical coloring problem associated graph gdp k obtained follows vertex set gdp k vertex set gd edge r belongs edge set gdp k iff distance rs vertices r gd satisfies rs k distance length shortest path r colors must assigned vertices gdp k every pair vertices connected edge assigned couple different colors minimum number colors used hence role maximum clique gdp k apparent deriving lower bounds conflictfree access paths clique k gdp k subset vertices gdp k pair vertices k edge wellknown graph theoretical results clique size n associated graph gdp k implies least n different colors needed color gdp k words size largest clique gdp k lower bound number memory banks required access paths length k without conflicts hand conflictfree access p k gd equivalent color nodes gd way two nodes distance k less apart assigned different colors unfortunately latter coloring problem npcomplete 13 general graphs justifies investigation either good heuristics general graphs optimal algorithms special classes graphs next three sections optimal mappings bidimensional arrays circular lists complete binary trees derived conflictfree accessing p k accessing paths bidimensional arrays let bidimensional array data structure mapped multibank memory system array r theta c r rows c columns indexed respectively 0 r gamma 1 top bottom 0 c gamma 1 left right r c greater 1 graph e representing mesh whose vertices correspond elements whose arcs correspond pair adjacent elements row column sake simplicity used instead ga since ambiguity thus generic node x denoted row index j column index least l k1 2m memory banks required conflictfree accessing p k proof consider generic node opposite node distance k column ie nodes distance k less x mutually distance k less shown figure 1 therefore associated graph gap k form clique must assigned different colors details clique denoted ka x k defined follows ka ni l km l km l km l km l kmo summing size clique results k hence least l k1 2m colors required 2 b x x figure 1 subset ka x nodes forms clique gap k conflictfree mapping given color nodes array using colors lemma 1 therefore mapping optimal color assigned node x denoted flx algorithm arraycoloring k l k1 2m even k odd ffl assign node x color intuitively algorithm first covers tessellation basic subarrays size theta basic subarray colored latin square fashion follows ffl colors first row appear lefttoright sequence 0 ffl color sequence generic row obtained sequence previous row delta leftcyclic shift coloring decomposed 6 basic subarrays size theta illustrated figure 2 theorem 1 arraycoloring mapping optimal fast balanced proof prove optimality must shown mapping conflictfree minimum number colors used figure 2 array size 16 theta 24 tessellation 6 subarrays size 8 theta 8 colored arraycoloring algorithm conflictfree access p 3 consider generic node x g f associated clique ka x k defined lemma 1 order prove mapping conflictfree one needs show nodes ka x k mutually distance k assigned arraycoloring algorithm different colors formally consider arbitrary pair nodes belonging ka x k 0 roles w z could swapped mapping conflictfree arraycoloring algorithm guarantees colors flw flz different moreover let oew z difference two colors assigned w z mapping conflictfree following two conditions simultaneously hold 1 order show conditions 1 hold pair nodes ka x k two cases k even k odd must distinguished k even one l k1 2m oew z congruence oew z 6j 0 mod equivalent oew z 6 0 oew z 6 clearly oew verified either z w j gamma jj multiple k 1 since j gamma jj k implies oew z 6 0 two distinct nodes ka x color thus remains prove oew z 6 assume contradiction oew therefore three cases may occur l case oew contradicts fact jj gamma j k case ii oew z equal thus case ii pair nodes z w ka x satisfy first condition 1 results equal positive integer precisely violates second condition 1 finally case iii oew jj gamma 1 pair nodes z w ka x satisfying first condition 1 yields precisely violates second condition 1 distance w z conclusion k even two nodes whose colors differ exactly k relative positions depicted figure 3a k odd follows l k1 2m oew z equivalent oew z 6 0 oew z 6 clearly oew verified either multiple k hence two distinct nodes ka x color distance remains prove oew z 6 three cases may occur l note 2 l repeating reasoning done k even one show two nodes whose colors differ k apart relative positions illustrated figure 3b arraycoloring algorithm conflictfree moreover since uses minimum number colors proposed mapping optimal b figure 3 relative positions two nodes assigned color k even b k odd easy see time required color nodes array moreover color single node x j tree requires o1 time since hence mapping fast order prove mapping balanced observe color appears subrow size hence number nodes color verifies rb c e 2 observe arraycoloring algorithm guarantees conflictfree access paths longer k specifically possible access without conflicts horizontal path length vertical path length gcdmdelta l minimum integer finally since distance two consecutive nodes diagonal 2 b k consecutive elements diagonal accessed conflicts accessing paths circular lists let circular list c data structure mapped multibank memory system circular list n nodes indexed consecutively 0 n gamma 1 sequence n nodes node connected nodes gamma 1 mod n graph e representing c ring whose vertices correspond elements c whose arcs correspond pair adjacent elements c sake simplicity c used instead gc since ambiguity least memory banks required conflictfree accessing p k c proof conflictfree accessing p k c two nodes color must distance least k 1 nodes mutually distance less k must colored different colors color may appear times therefore figure 4 conflictfree access p 4 circular list c 13 nodes colored circularlistcoloring algorithm 7 least upsilon colors needed observed follows least memory banks required 2 optimal conflictfree mapping provided color nodes circular list c using colors lemma 2 color assigned node x denoted flx algorithm circularlistcoloring c k ffl assign node x 2 c color note linear non circular list l optimally colored conflictfree access p k matches trivial lower bound given number nodes p k fact l optimally colored naive algorithm assigns node x color naive algorithm work circular lists example consider circular list c nodes shown figure 4 colored access p 4 applying naive algorithm first 10 nodes feasibly colored 5 colors 3 additional colors required feasibly coloring last 3 nodes total 8 colors contrast optimal circularlist b figure 5 circular list c 17 nodes colored conflictfree access p 3 according circular coloring algorithm requires 7 colors moreover worth point naive algorithm always work circular lists even applied instance 5 applying naive algorithm instance 15 nodes colored using 5 colors 2 additional colors needed feasibly coloring last 2 nodes total 7 colors shown figure 5b instead optimal coloring provided circularlistcoloring algorithm uses 5 colors shown figure 5a indeed naive algorithm always produces feasible although necessarily optimal coloring applied using theorem 2 circularlistcoloring mapping optimal fast balanced proof prove optimality two cases may distinguished circularlistcoloring algorithm reuses color distance hence conflict arises n 6j 2 two nodes get color distances gamma 1 greater equal k 1 hence conflict arises since algorithm uses colors possible mapping optimal also fast since node colored constant time finally color assigned exactly n nodes n multiple l minn l maxngamma0 nodes colored color cases 2 interesting note point given circular list n nodes minimum number colors required conflictfree access p k satisfies following properties see figure 6 ffl results ie nodes must different colors indeed mutually distance k therefore form clique graph depends n k fixed k monotone mn figure number colors mn 6 required conflictfree access p 6 n ranges 1 58 function n contrast arrays trees proved next section depends k monotone accessing paths complete trees let rooted complete binary tree b data structure mapped multibank memory system level node x 2 b defined number edges path x root level 0 maximum level nodes b height b let levb set nodes b level 0 complete binary tree height h rooted tree b leaves level internal node exactly 2 children thus levb contains 2 nodes hth ancestor node j node children nodes lefttoright order generic node x jth node levb counting left right denoted therefore generic path instance p k x denoted lemma 3 least memory banks required conflictfree access p k b proof consider generic node x j 2 b k nodes subtree height b k rooted b k cth ancestor x mutually distance greater k addition consider k ancestors x path length k 2 e b k cth ancestor x kth ancestor x nodes distance greater k node x together nodes mutual distance greater k x b figure 7 subset kb k nodes b forms clique moreover nodes complete subtree height rooted j child belong nodes distance greater k x furthermore nodes along nodes together mutual distance greater k hence associated graph gdp k least clique size claim easily follows figure 7 shows subset kb k nodes b pairwise distance greater k 4 hence forms clique associated graph gbp kan optimal conflictfree mapping color complete binary tree b acts follows basic subtree kb k defined proof lemma 3 identified colored tree overlaid b way uppermost levels b coincide lowermost levels kb k complete coloring b produced level level assigning node color already colored node formally given k define binary tree kb k follows ffl kb k leftmost path k nodes ffl root kb k left child ffl complete subtree height rooted right child node level leftmost path kb k b6 7 8 934 figure 8 coloring b conflictfree accessing p 3 b p 4 kb 3 kb 4 depicted dash splines nodes kb k must colored 2 b k different colors thus uppermost levels b already colored sake simplicity color remaining part b levels counted starting root kb k level root b renumbered level 1 fixed algorithm color b acts follows algorithm binarytreecoloring b k ffl color kb k colors ffl visit tree b breadth first search node x b mod 2 assign x color node examples colorings conflictfree access p 3 p 4 illustrated figure 8 x figure 9 inherits color node theorem 3 binarytreecoloring mapping optimal fast balanced proof prove mapping optimal must shown conflictfree uses colors given lemma 3 first observe 2 b k c leaves subtree height mutual distance greater k therefore must colored different colors thus let level b partitioned starting leftmost node consecutive blocks size 2 b kc block bi w w 0 level b consists 2 b kc consecutive nodes w2 b k must assigned different color consider node x j colored node x belongs block b appears position inside block consider leftmost node z b x generalization kb z kb k defined depending z kb z includes following nodes b ffl nodes path gamma length k father z k 1th ancestor z ffl nodes complete binary tree q height k gamma q rooted child belong gamma qth ancestor z ffl nodes complete binary tree height rooted th ancestor z crucial note following nodes distance k 1 nodes b x root kb z k ii leaves q iii leaves parents node b x nodes b colored left right copying colors used nodes kb z specified ii iii considered increasing level left right illustrated figures 10 11 k even odd respectively particular assigned color root kb z k ancestor x 2 2 kgammaq nodes b x b j assigned colors leaves tree q observe number nodes colored two steps 1 k odd enough color entire block since 2 k c fact set nodes kb z specified iii empty k odd contrast k even first half block colored since 2 k color second half block one step required uses colors nodes kb z specified iii ffl rightmost 2 b k nodes b x assigned colors rightmost resp leftmost leaves complete binary tree rooted 1th ancestor z depending fact th ancestor z left resp right child father order prove mapping conflictfree inductive reasoning level tree followed basis induction tree coincides kb k colored definition different colors k consider generic node x j block b x leftmost node z inductive hypothesis nodes tree level colored conflictfree manner color repetitions particular subtree kb z k conflictfree since nodes mutually distance k must assigned different colors algorithm colors b x copying colors nodes kb z k specified ii iii exactly distance k 1 nodes b x therefore color repetitions b x conflict arise note nodes different blocks level may inherit color since two nodes different blocks distance least k conflict arise therefore nodes tree level colored conflictfree manner finally since tree colored colors kb k whose number equals lower bound lemma 3 treecoloring mapping optimal easy see time required color n nodes tree however color single node x tree requires olog n time since worst case nodes along path x root must colored one readily see height h tree b multiple k nodes b partitioned subsets induces copy kb k therefore color used times mapping balanced 2 z g figure 10 generalization kb z 6 kb 6 node z root kb z 6 leaves rightmost leaves used color nodes block b z g z figure 11 generalization kb z 5 kb 5 node z root kb z 5 leaves subtrees 4 5 used color nodes block b z results shown binary trees extended qary tree q q 2 corollary 1 least memory modules required conflictfree access p k qary tree q 2 similarly binary case given k define qary tree k q ffl k q q k leftmost path k ffl root k q q leftmost child ffl complete subtree height rooted q gamma 1 rightmost children node level leftmost path k q k q q k overlaid q way uppermost levels q coincide lowermost levels k q complete coloring q produced level level assigning node color already colored node sake simplicity color remaining part q levels counted starting root k q level root q renumbered level 1 algorithm color q following algorithm qarytreecoloring q k ffl color k q ffl visit tree q breadth first search node x q mod q assign x color node reasoning similar employed complete binary trees optimality qarytree coloring algorithm easily follows 6 conclusions paper problem conflictfree accessing arbitrary paths p k particular data structures bidimensional arrays circular lists complete trees considered first time reduced variants graphcoloring problems optimal fast balanced mappings proposed indeed memory bank node assigned computed constant time arrays circular lists computed logarithmic time complete trees however remains open question whether tree node assigned memory bank constant time hand conflictfree access p k arbitrary data structure npcomplete 13 justifies investigation good heuristics problem equivalent classical node coloring problem associated graph gdp k therefore solved effective coloring heuristic known far saturationdegree heuristic 6 works follows let nx neighborhood node x associated graph gdp k iteration saturation degree heuristic selects node x colored one largest number different colors already assigned nx ties nodes broken preferring node x largest number colored nodes nx selected node x assigned lowest color yet assigned nx experimentally proved 5 saturationdegree heuristic especially effective minimum number colors given size largest clique k gdp k therefore work efficiently also conflictfree access problem particular ddimensional arrays well generic ie necessarily complete trees indeed expected cases minimum number required memory banks equal lower bound given size largest clique k gdp k happened bidimensional arrays complete trees unfortunately resulting coloring guaranteed optimal fast balanced moreover still open question determine whether problem conflictfree accessing paths ddimensional arrays generic trees npcomplete finally practical perspective number memory banks available could fixed constant depending memory configuration number memory modules mk required given p k larger conflictfree access possible however assume p k 0 longest path accessed without conflicts using memory banks ie mk 0 accessing p k k conflicts may arise hence proposed mappings scalable acknowledgement authors grateful richard tan helpful comments thomas mccormick provided reference 13 r toward universal mapping algorithm accessing trees parallel memory systems multiple template access trees parallel memory systems accounting memory bank contention delay highbandwidth multiprocessors array storage conflictfree memory access parallel processors assigning codes wireless networks bounds scaling properties organization use parallel memories conflictfree data access arrays trees parallel memory systems parallel priority queues distributed memory hypercubes load balanced mapping data structures parallel memory modules fast conflictfree templates access new york optimal approximation sparse hessians equivalence graph coloring problem conflictfree template access kary binomial trees theoretical limitations efficient use parallel memories tr conflictfree template access italickitalicary binomial trees accounting memory bank contention delay highbandwidth multiprocessors multiple templates access trees parallel memory systems assigning codes wireless networks new methods color vertices graph latin squares parallel array access optimal load balanced mapping parallel priority queues hypercubes load balanced mapping data structures parallel memory modules fast conflictfree templates access toward universal mapping algorithm accessing trees parallel memory systems ctr alan bertossi cristina pinotti richard b tan channel assignment separation interference avoidance wireless networks ieee transactions parallel distributed systems v14 n3 p222235 march sajal k das irene finocchi rossella petreschi conflictfree staraccess parallel memory systems journal parallel distributed computing v66 n11 p14311441 november 2006