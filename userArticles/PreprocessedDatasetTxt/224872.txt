optimal wire sizing buffer insertion low power generalized delay model present efficient optimal algorithms timing optimization discrete wire sizing buffer insertion algorithms able minimize dynamic power dissipation subject given timing constraints addition compute complete powerdelay tradeoff curve added flexibility extend algorithm take account effect signal slew buffer delay contribute substantially overall delay effectiveness methods demonstrated experimentally b introduction timing optimization techniques vlsi circuits received much attention recent years due increasingly aggressive designs impact technological trends shrinking geometries among techniques performance driven placement routing gate sizing buffer insertion often referred fanout optimization prelayout works wire sizing work focus wire sizing buffer insertion wire sizing automatic sizing wire widths attractive technique timing optimization signal nets particularly advent submicron technology benefit wire sizing lies fact shrinking geometries wire resistance significant contributor overall delay result makes sense tune widths wires balance tradeoff added capacitance decreased resistance wire sizing significant benefit onchip interchip eg mcm interconnects cong leung zhou koh provided several studies wire sizing 4 2 3 demonstrated potential wire sizing improving delay works problem formulated task minimizing weighted sum sourcetosink elmore delays set identified critical sinks given routing tree weighting coefficients presumably provided user formulation prove several properties lead r algorithm net n segments r possible widths authors also propose greedy heuristic procedure run time 3 r cong et al also attack problem incorporating cost function area power formulation weighted sum stated timing objective function cost function later 12 sapatnekar studied common metric maximum sourcetosink delay generally task minimizing cost subject given timing constraints noted key property separability used cong leung designing algorithm hold case addition property monotonicity utilized cong et al apply length wire segments identical paper sapatnekar proposed geometric programming formulation maximum delay continuous wiresizing problem followed mapping heuristic discretize solution later 8 dynamic programming algorithm exploited fact lengths wire segments discrete nature ie integer multiples basic grid length given led observation possible width assignments subtree number distinct capacitive values root polynomially bounded yielded polynomial time minimum delay wire sizing dynamic programming algorithm however power considerations explicitly taken account buffer insertion research buffer insertion includes early works berman et al 1 touati 16 van ginneken 17 contributions area include 9 14 8 7 exceptions 17 7 recently 8 works focussed timing optimization prior layout imposing buffer trees network important engineering considerations associated approach perhaps important among considerations difficulty accurately taking account resistive capacitive effects interconnect observed 7 potential routability problems created prelayout buffer trees mentioned 1 result practical considerations focus postlayout methodology topological information available previous work postlayout buffer insertion includes 17 van ginneken gave elegant polynomial time algorithm delayoptimal buffer insertion given topology extended algorithm minimize number buffers subject given timing constraints noted extension general polynomial efficient runtime observed practice implementation details extension given algorithm consider effect signal slew buffer delay 8 delayoptimal algorithm simultaneous buffer insertion wire sizing given however neither power area considerations signal slew taken account contributions paper paper present efficient algorithms wire sizing buffer insertion techniques simultaneously main contributions summarized follows ffl give optimal polynomialtime algorithms min power wire sizing problem simultaneous wire sizing buffer insertion problem includes computation powerdelay curve novel datastructure efficiently pruning suboptimal solutions ffl incorporate signal slew buffer delay model manipulation piecewise linear functions work timing constraints given explicitly required arrival times sinks net rather coefficients weighted sum sink delays suggest computation entire powerdelay trade curve practical significance provides added flexibility designer incorporation signal slew also significant since contribution total delay 50 see eg 6 therefore cannot neglected practice ability use inverters buffers rather resorting pairs inverters ensure proper signal polarity also practical utility complexity algorithms without signal slew taken account summarized following table max reqtime min power wiresizing bufferinsertion 2 table n number sinks net number sizeable wire segments c max largest possible capacitive value component tree set b given buffer library w largest multiple basic wire width allowed component complexity assume capacitive parameters problem given translated polynomiallybounded integers algorithms pseudopolynomial however cases bounds pessimistic versus observed behavior signal slew incorporated delay model able give polynomial bounds due degenerate situations however practice observe algorithms perform similarly simpler counterparts usually constant factor slower best knowledge work represents efficient optimal algorithms date problems also improve results 8 terms runtime minimizing maximum delay independent power goal algorithms adopt bottomup dynamic programming approach rather computing single solution subtree compute set solutions member set characterized timing properties capacitance associated solution solution sets kept small employing observation made van ginneken 17 essentially says combining solution sets nodes left right children create new solution set new set need consider pairs left right solutions rather linear number pairs need considered since one branch always dominate addition minimizing power employ similar observation identify inherently suboptimal solutions thereby drastically reduce size solution sets property identified efficiently use novel tree datastructure generalizations techniques developed handle case slew taken account remainder paper organized follows section 2 gives notational conventions section 3 gives delay models problem formulations section 4 gives overall algorithmic framework section 5 addresses mindelaymaxrequired time formulation section 6 generalizes algorithm minimize power subject timing constraints section 7 generalizes algorithm account contribution signal slew delay manipulation piecewise linear functions section 8 gives experimental results conclude section 9 notational conventions throughout paper use following notation routing tree rooted node v lv rv left right children node v respectively e v tree edge wire node v parent l e length edge e c e capacitance edge e c v input capacitance sink v r e resistance edge e c b input capacitance buffer b output resistance buffer b gate g delay buffer b gate g usually referring signal b polarity buffer b indicating b inverter required arrival time sink node v largest possible wire width 1w possible library leaves tree 3 models problem formulation 31 delay models previous works adopt elmore delay model 5 interconnect delay standard rc models buffer delay given routing tree possibly containing buffers delay along rootsink path made 1 delay along wires 2 delay buffers driving gate computation delays detailed following capacitance c e resistance r e wire segment e width w e given ff fi characteristic constants 1 compute elmore delay wire e v tree first recursively define ct v total lumped capacitance v follows c v v sink node c b else buffer b placed v otherwise 1 algorithms presented model note key eg phenomenon fringe capacitance taken account intuitively ct v simply capacitive load seen v ie sum loads left right subtrees ct lv ct rv capacitance wires subtrees c e lv c e rv given notation elmore delay wire e v defined similarly delay buffer b node v basic model determined parameters ct v bs intrinsic load independent delay b output resistance r b delay buffer load c l output buf delayb c l key buffer insertion optimizing delay wellknown isolation property buffers exhibited equation 1 namely capacitance subtree rooted buffer seen ancestors tree determined entirely input capacitance buffer words buffer decouples capacitance descendants ancestors buffer common generalization basic buffer delay model includes additive term account slew signal entering buffer one model delay product buffer dependent constant b load delay previous stage lprev ie rc delay driving buffer thus denote augmented delay equation buf delay slew b c l similar models proposed various contexts eg 157 extension algorithms accommodate delay model discussed section 7 32 maximum required time formulation adopt maximization required arrival time root net timing metric required arrival time node v qt v latest time inputs v must available required arrival times sinks v met measure particularly useful since allows straightforward application algorithms optimize combinational network proceeding bottomup order formally qt v defined required arrival time qt root nonnegative tree said meet timing requirements note required time formulation generalization maximum delay formulation ie q sink v 33 minimizing power subject timing requirements dynamic power dissipation cmos technology p given 18 cl load capacitance f p switching frequency thus respect buffer insertion wire sizing total capacitance correct measure dynamic power dissipation since f p vdd unaffected methods let c total total capacitance associated buffered sized routing tree following problem minimize c total subject qt alternatively attractive approach problem provide designer powerdelay tradeoff curve desired solution may chosen implicitly assumed dynamic power dissipation dominates shortcircuit power dissipation justify assumption design techniques employed eliminate drastically reduce shortcircuit power dissipation 4 algorithmic framework first give framework high level dynamic programming algorithm subsequent algorithms fit framework covers variants interest instance interested wire sizing simply run algorithm empty buffer library b specific algorithms differ implementation basic routines called general algorithm characteristics solution sets compute general dynamic programming algorithm gdp given pseudocode figure 1 algorithm computes solution sets bot v top v set bot v thought set solutions subtree v including possibility inserting buffer v similarly set top v thought set solutions v augmented wire parent e v including possible sizing e v four procedures base case bot solutions top solutions optimal soln routines inductively compute solution sets solution sets descendants particular algorithm sets parameterized differently intuitively routines thought follows base case compute singleton set giving relevant parameters sink v bottom solutions given solution sets left right children compute solution set v including possibility inserting buffer v top solutions given solution set v construct solution set v augmented wire e v optimal soln given solution set root select best solution combined driver key solving particular problem eg minimizing power subject timing con straints content solution sets efficient computation routines limiting size much possible ensure computational efficiency next section detail simplest scenario maximizing required arrival qt time root tree basic rc delay model subsequently generalize problem minimizing power dissipation subject given timing constraints basic rc model finally generalize algorithm solve either preceding problems generalized delay model taking account effect signal slew cases algorithms sketched based framework section maximizing required arrival time case maximize qt required arrival time root basic rc delay model solution sets bot v top v partitioned two disjoint subsets bot v top v reason partitioning deal appropriately fact since may using inverters buffers signal may inverted portions net sets superscript contain solutions assume incoming signal noninverted sets superscript contain solutions incoming signal assumed solutions load requiredtime c q pairs intuitively english meaning sets example bot v exists assignment v upward load c required time q v incoming signal inverted important initial observation made van ginneken 17 following property 51 c q clear since larger load worsen delay ancestor components words always prefer smaller load larger required time suppose sets arranged increasing order load leads following property property 52 loadrequired time set increasing order load may replaced strictly increasing required time maintain sorted order invariant may easily exploit property context algorithmic framework fully specify algorithm follows recall c v q v input capacitance required arrival time sink v respectively routine compute base casev simply sets bot v bot v since valid solution inverted signal sink algorithm gdptbw foreach node v 2 topological order leaves root v leaf compute else compute v root compute else v root compute optimal figure 1 general algorithm structure algorithm bottom solutionsv top lv top rv 1 first compute unbuffered solutions 2 bot v 3 let l top lv 4 let r top rv 5 l indexed ordered c 7 js l j j js r 8 let c l q l 9 let c r q r bot v 11 q l q r left critical 12 q r q l right critical 13 compute bot v analogously 14 compute buffered solutions 15 foreach buffer 16 b inverter 17 find c q bot v st c maximized 18 else 19 find c q bot v st c maximized 20 analogously compute bot v bot v 23 bot v gamma bot v property 52 figure 2 bottom solutions routine max required time computation bottom solutions described pseudocode figure 2 algorithm first computes optimal c q pairs unbuffered solutions lines 213 achievable arrival time q find smallest load achieving q done manner similar merging two sorted lists time ensures property 52 holds key linear time operation size resulting set linear observed van ginneken 17 next find optimal buffer configurations lines 1520 pairing buffers b unbuffered solutions v perform merging additional pruning lines 2123 also note final pruning step also linear since sets sorted order give implementation top solutions figure 3 examine pairings widths w wire e v length l ev solutions c q v since loads c 0 fixed w 2 f1wg visit c 0 order without explicitly sorting pairing obtain new required time final sweep apply property 52 ensure set strictly increasing order c q finally must implement optimal solnv bot v done simply pairing previously computed nonbuffered c q bot v since signal leaving driver noninverted properties ie output resistance driver selecting solution largest resulting required arrival time construct solution achieving timing recursively revisit tree determine choices buffering wire sizing yield optimal solution accomplished storing c q pair local information indicating choices led solution comments simplicity presented algorithm terms binary tree note algorithm easily applied general trees one straightforward method achieve convert nonbinary tree equivalent binary tree simply adding zerolength wires instance suppose node v fanout 3 nodes b c replace v two nodes v 0 v 00 node v 0 children b v 00 children c v 0 wire v 00 v 0 length 0 algorithm modified prohibit placement buffers particular nodes v 0 case another issue described algorithm assumes exactly one sizeable wire segment nodes buffer insertion nodes tree however algorithm generalizable accommodate multiple sizeable segments single wire buffer insertion within wire introduction intermediate nodes note algorithm easily extended allow optimal sizing driving gate desired however realized sizing may global effects altering input capacitance driver thereby affecting timing requirements system whole comments apply subsequent algorithms paper 51 runtime analyze running time basic algorithm three scenarios sizing alone insertion alone scenario 1 wire sizing alone introduce notion basic gridwidth analyze complexity property 53 scenario 1 size loadrequired time set bounded mw total number basic grid lengths tree seen considering load node v expressed sink load fixed interconnect width ith wire fl constant derived ff basic grid length minimum width thus load entirely determined p w take integer value range mmw gives upperbound mw sizes loadrequired time sets algorithm computes since bounds number distinct load values thus even though exponential number width assignments polynomial number distinct resulting loads resulting runtime onw mw case every sizeable segment identical size 2 w 2 since case scenario 2 generalization situation algorithm van ginneken 17 since case computation top sets trivial thus size bot sets key factor runtime first state following properties alluded earlier property 54 bot v let l r top sets vs left right children respectively polarity following inequality holds js bot vj js l j property 55 scenario 2 loadrequired time sets jsj properties coupled fact merging operation linear js l j overall worstcase complexity onjbjn scenario 3 complicated fact input capacitance buffers may simple multiples capacitance unitlength wire however practice reasonable assume capacitive values linearly mapped onto polynomiallybounded integer domain sufficient precision given situation introduce another value c max largest capacitance possible among individual components tree eg may capacitance longest wire maximum width formulation upper bound size loadrequired time sets ncmax overall runtime 2 c max maxw jbj practice observed runtimes typically much less bound 6 minimizing power given timing constraints extend algorithm accommodate dynamic power considerations clarity present subsequent algorithms without regard signal polarity application ideas previous section straightforward note also extension presented section easily modified minimize area subject timing constraints first issue parameterize solution sets concerned load requiredtime subsolution also power consumes therefore solution sets bot v top v contain pairs p p p power consumption capacitive value p ordered set load required time pairs c q previous algorithm example p indicates power p every c q 2 exists assignment v consuming power p presenting load c upward yielding required time q v organize sets first sorting increasing order power set p ordered load c basic algorithm one might think sets p typically singleton sets however case many different configurations may consume precisely power example assigning identical set buffers different locations sets quite dense recalling dynamic power dissipation capacitance correct measure c v power associated sink v base casev simply sets bot gg pseudocode bottom solutions given figure 4 visit possible values total power consumption v values among buffered unbuffered configurations introduce notion nonbuffer oe unify notation case explicitly sort values however observe number distinct values p often orders magnitude less worst case quadratic observation utilize hash table make initial pass pairs extract distinct values sort avoids expensive sorting operation top solutions implemented similar manner pseudocode appears figure 5 described algorithms implement two types pruning first prune solutions power p way property 52 however additional pruning condition utilized figures 4 5 lines 9 6 respectively pruning captured following property property 61 solution c q consuming power p 9 solution algorithm top solutionsv bot v 2 foreach c q bot v w 2 f1wg increasing order c top v elmore delay evaluated width w 4 compute top v analogously 5 top v gamma top v property 52 figure 3 top solutions routine max required time algorithm bottom solutionsv top lv top rv 1 let b 2 bot v 3 foreach triple p l p l increasing order 4 combine p l pr lines 712 figure 2 give 0 5 b 6 oe 6 find c maximized 7 8 else 9 10 p previous triple gave p 12 prune p property 52 13 else 14 bot v bot v figure 4 bottom solutions routine low power algorithm top solutionsv bot v 1 top possible powerg 2 foreach pair w 2 1w p bot increasing order 3 foreach c q 2 p bot 4 p elmore delay evaluated width w 5 prune p property 52 7 p 6 8 top v top v figure 5 top solutions routine low power q 0 q solution c q suboptimal application property proven essential giving reasonable running times practice efficient detection property 61 addressed subsequently implement optimal solnv bot v simply selecting lowest power unbuffered solution root giving requiredtime qt paired driver alternatively set unbuffered solutions gives full tradeoff curve detection property 61 computing loadrequired time set p power p previous algorithms already computed loadrequired time sets p 0 p want datastructure efficiently determine c q 2 p property 61 holds since solution sets grow substantial size linear scan detect property would likely disaster since visit power values order know entries data structure power values p thus data structure need concern c q values thus need data structure efficiently supports following operations update data structure reflect solution c q ffl sub optc q returns true 9c previously inserted st c 0 c q 0 q false otherwise datastructure solves special case orthogonal range query problem computational geometry see eg 19 problem special case sense need retrieve count satisfying property subspace interested defined two inequalities c 0 c q 0 q rather four words subspace intersection halfplanes formed inequalities rather rectangle formed four inequalities special properties problem allow us support operations olog time om space entries use augmented binary search tree contrast fastest known approaches general 2dimensional orthogonal range query problem also run olog time use om log space support operations order binary search tree tree load values c node search tree store load value c largest q value left subtree refer value tq l max given augmentation insert easily implemented recursively sub opt implemented examining four following cases respect c q given tc tq l max stored current node tree boundary conditions given clarity following guidelines recursively search tree detect property time proportional depth tree 61 run time respect wiresizing alone ie notice every powerload required time triple since decoupling buffers thus basic algorithm sufficient solve lowpower problem get power minimization free general case simultaneous wire sizing buffer insertion buffer insertion alone take account quadratic nature algorithm since examine pairs power values left right children solution sets longer assured linear size however capacitive values given polynomially bounded integers mapped show runtime algorithm polynomial section 51 let c max largest possible capacitive value among compo nents scenario bound number loadrequired time pairs node gives overall run time bound onjbj log factor artifact sorting performed power values practice observe much better run times result additional pruning described previous section included analysis since cannot prove improves worst case performance 7 accounting signal slew give generalization algorithm account effect signal slew buffer delay key approach manipulation piecewise linear functions model effect signal slew overview equation 2 buffer delay augmented term b lprev recall b characteristic constant buffer b lprev rc delay previous stage since algorithm proceeds bottomup order unknown value computing delay associated buffer conceptually would like support queries form optimal solution v capacitance c linear lprev utilize piecewise linear functions model ef fect previously loadrequired time pairs c q loadrequired time func pairs c f f piecewise linear optimal required time q v load c illustrate modeling delay piecewise linear function figure 6 figure 6b shows piecewise linear delay function f node v figure 6a left right subtrees maximum delays 5 4 units respectively however since left right subtrees driven different buffer types different sensitivities l r straight lines figure 6b correspond two delay functions contributed two subtrees slopes corresponding sensitivities l r resulting delay function f node v shown solid line max two thus different values lprev result different critical paths represent piecewise linear function f linked list quadruples quadruple segment starting point ending x end slope manipulation piecewise linear functions based three basic operations first two operations performed manner similar merging two sorted lists linear time stepping lists examining points intersection generalized operate sets functions rather pairs repeated application giving example pwl maxf 1 f k third operation achieved simply adding starting ycoordinate 0 segment function respect dynamic programming algorithm must also associate segment piecewise linear function f relevant configuration information yields solution eg wirewidth buffer type algorithm modifications summarized follows 1 loadrequired time pairs c q loadrequired time func pairs 2 computed scalar max min operations arrival times q compute pwl max pwl min operations piecewise linear functions 3 eliminated suboptimal solutions c q properties 52 61 eliminate suboptimal portions solutions c f analogous properties suboptimal solutions give required arrival time gamma1 certain values lprev detailed description generalized algorithm follows generality focus low power formulation problem pruning operations presenting bottom solutions top solutions first discuss basic pruning operations used algorithm previously basic operation algorithms merging two loadrequired time sets two sets 1 2 solutions set consumed identical power p concerned power computed new set set provably suboptimal solutions property 52 ie c q 2 implied generalize concept loadrequired time func sets property analogous property 52 following property 71 let loadrequired time set ordered load ie defined may replace maintaining optimality f 0 may eliminated altogether property implemented figure 7 routine merge load func sets used bottom solutions top solutions addition previous low power algorithm utilized general pruning method given property 61 said pair solutions p c q p q q 0 p suboptimal may eliminated analogous property slew sensitive generalization follows property 72 solution p c f let 0 set solutions st p iff manner similar property 71 may replace f f 0 may eliminated entirely generalization datastructure section 6 presented later section efficiently implement pruning property 72 finally give pseudocode bottom solutions top solutions figures 8 9 respectively routines follow previous versions quite closely however properties 71 72 introduce partially defined functions total order c f sets therefore combining solutions children may look pairs worst case rather performing simple merge previously figure 2 lines 712 seen loop bottom solutions figure 8 particular f l must find appropriate f r js pair f l worst case js may candidates may hold however practice sets tend remain linear size related issue complexity functions principle size functions grow exponentially however observe phenomenon practice examples give intuition operation algorithm give illustrations figure shows function f load c buffer b considered insertion v performed bottom solutions since b drive load c lprev descendants l r5 delay vsink b l l 01 02 d5 d4 figure linear function modelling effect signal slew algorithm merge loadfunc foreach c f 2 0 increasing order c 9x st f 0 otherwise c f 0 useless return 0 figure 7 algorithm merging loadfunc sets presumably consuming power algorithm bottom solutionsv top lv top rv foreach triple p l p l increasing order pr indexed eg c l f l ith smallest load corresponding piecewise linear function p l else let j smallest index st f l 9x st f r jx f l ix f min pwl minf l f r j else arrival time output buffer segment pwl func prune solutions 0 per property 72 else new power value figure 8 bottom solutions routine low power signal slew algorithm top solutionsv bot v 1 top v 2 foreach pair w 2 1w p bot increasing order 3 foreach c f 2 p bot 4 p 5 prune suboptimal solutions p property 71 6 prune suboptimal solutions p property 72 7 p 6 8 top v top v figure 9 top solutions routine low power signal slew cr b therefore required arrival time output buffer t1 subtracting buffer delay buf delay required arrival time function input buffer shown solid line right figure slope gamma b figure 12 illustrates operation combining left right top solutions values lprev left subtree critical others right solid line graph right shows function resulting pwl min function capture combination two solutions algorithm prop72t c f tnull return f else c tc return prop72tleft c f else c tc return f 0 else return figure 10 implementation property 72 implementation property 72 give generalization datastructure section 6 implement property 72 given set pairs want efficiently compute f 0 described property 72 recall algorithm organized power p associated c f strictly greater p associated accomplish alter previous augmented tree data structure store pair tree node rather tc tq l max search tree ordered c piecewise linear function tf l max pwl resides either c left subtree pseudo code implementing property 72 given figure 10 ie given c f return portions f suboptimal form f 0 updating datastructure done recursively traversing search tree updating f l max function node go complexity operations logarithmic number entries data structure multiplied average complexity piecewise linear operations small experiments lprev lprev bufdelay cr cr reqtime reqtime figure 11 effect inserting buffer 8 experimental results implemented algorithms cunix environment sun sparc 20 workstation ran algorithms randomly generated routing topologies various sizes nonuniform segment lengths experiments discretization done arbitrarily large integer domain eg 1 000 000 yet impressive runtimes obtained since algorithms derive optimal solutions main focus experiments runtime nature tradeoff curves effect signal slew used 5 different buffer types smallest 1x buffer r b 08 largest buffer 8x intrinsic delay b identical buffers b assumed inversely proportional width largest b 08 smallest 01 experiments used variety wire widths 05m 5m additional benefit typically wasnt observed test cases beyond width experiments used maximum delay metric ie required times sinks 0 figure 13 shows optimal power vs delay curve 20 sink net utilized wire sizing buffer insertion example observed run times nets size typically 2030 second range unsizedunbuffered delay leftmost point minimum delay solution rightmost point curve clearly much better engineering choices appear elbow curve second set experiments appear table 1 show importance taking slew account buffer insertion performed experiments nets ranging 10 sinks variable scaling factor k coefficient b replace b k b k two columns b result running basic algorithm min delay evaluating delay resulting tree taking slew account result extended algorithm section 6 rightmost column worst runtime among experiments row k n grow see large variation observed delays approaching 50 one case 10 sink net critical path never included buffers accounting identical delays lprev lprev f r reqtime reqtime figure 12 combination left right solutions 46 48 50 52 54 power nf3555delay ns figure 13 powerdelay curve 20 sink net table 1 basic algorithm vs slew algorithm various sensitivities 9 conclusions presented efficient algorithms optimal wire sizing buffer insertion adopt flexible problem formulation minimizing power subject timing constraints alternatively compute entire powerdelay tradeoff curve additional complexity algorithm easily adapted perform area minimization addition incorporate contribution signal slew delay model shown significant contributor overall delay r fanout problem theory practice optimal wiresizing elmore delay model simultaneous driver wire sizing performance power optimiza tion performancedriven interconnect design based distributed rc delay model transient response damped linear network particular regard wideband amplifiers cmos circuit speed buffer optimization methodology algorithms postplacement delay optimization optimal efficient buffer insertion wire sizing fast efficient algorithm determining fanout trees large networks signal delay rc tree networks unified theory mixed cmosbicmos buffer optimization rc interconnect optimization elmore delay model wiresizing buffer sizing powerdelay tradeoffs using sensitivity based heuristic heuristic algorithm fanout problem static timing analysis performanceoriented technology mapping buffer placement distributed rctree networks minimal elmore delay principles cmos vlsi design computational geometry tr principles cmos vlsi design systems perspective performanceoriented technology mapping performancedriven interconnect design based distributed rc delay model simultaneous driver wire sizing performance power optimization methodology algorithms postplacement delay optimization rc interconnect optimization elmore delay model ctr king ho tam lei power optimal dualvdd buffered tree considering buffer stations blockages proceedings 42nd annual conference design automation june 1317 2005 san diego california usa norman kojima yukiko parameswar christian klingner yukio ohtaguro masataka matsui shigeaki iwasa tatsuo teruyama takayoshi shimazawa hideki takeda kouji hashizume haruyuki tago masaaki yamada repeater insertion method application 300mhz 128bit 2way superscalar microprocessor proceedings 2000 conference asia south pacific design automation p641646 january 2000 yokohama japan king ho tam tom tong jing lei fast dualvdd buffering based interconnect prediction sampling proceedings 2007 international workshop system level interconnect prediction march 1718 2007 austin texas usa chowdhury john lillis repeater insertion concurrent setup hold time violations powerdelay tradeoff proceedings 2007 international symposium physical design march 1821 2007 austin texas usa jengliang tsai tsunghao chen charlie chungping chen optimal minimumdelayarea zeroskew clock tree wiresizing pseudopolynomial time proceedings international symposium physical design april 0609 2003 monterey ca usa x zeng zhou wei li buffer insertion clock delay skew minimization proceedings 1999 international symposium physical design p3641 april 1214 1999 monterey california united states jin fuw lee l ostapko jeffery soreff c k wong signal bounding problem timing analysis proceedings 2001 ieeeacm international conference computeraided design november 0408 2001 san jose california rajeev murgai layoutdriven areaconstrained timing optimization net buffering proceedings 2000 ieeeacm international conference computeraided design november 0509 2000 san jose california xiaoping tang f wong planning buffer locations network flows proceedings 2000 international symposium physical design p180185 may 2000 san diego california united states hamid reza kheirabadi morteza saheb zamani efficient net ordering algorithm buffer insertion proceedings 17th great lakes symposium great lakes symposium vlsi march 1113 2007 stresalago maggiore italy jason cong lei efficient technique device interconnect optimization deep submicron designs proceedings 1998 international symposium physical design p4551 april 0608 1998 monterey california united states arlindo l oliveira rajeev murgai exact gate assignment algorithm tree circuits rise fall delays proceedings 2000 ieeeacm international conference computeraided design november 0509 2000 san jose california jason cong chengkok koh interconnect layout optimization higherorder rlc model proceedings 1997 ieeeacm international conference computeraided design p713720 november 0913 1997 san jose california united states rajeev murgai performance optimization rise fall parameters proceedings 1999 ieeeacm international conference computeraided design p185190 november 0711 1999 san jose california united states minghorng lai f wong maze routing buffer insertion wiresizing proceedings 37th conference design automation p374378 june 0509 2000 los angeles california united states xiaoping tang martin f wong tradeoff routing resource runtime quality buffered routing proceedings 2004 conference asia south pacific design automation electronic design solution fair p430433 january 2730 2004 yokohama japan jason cong tianming kong david zhigang pan buffer block planning interconnectdriven floorplanning proceedings 1999 ieeeacm international conference computeraided design p358363 november 0711 1999 san jose california united states baeres j cortadella kishinevsky layoutaware gate duplication buffer insertion proceedings conference design automation test europe april 1620 2007 nice france yuantao peng xun liu power macromodeling global interconnects considering practical repeater insertion proceedings 14th acm great lakes symposium vlsi april 2628 2004 boston usa charles alpert anirudh devgan wire segmenting improved buffer insertion proceedings 34th annual conference design automation p588593 june 0913 1997 anaheim california united states p sarkar c koh repeater block planning simultaneous delay transition time constraints proceedings conference design automation test europe p540545 march 2001 munich germany takumi okamoto jason cong buffered steiner tree construction wire sizing interconnect layout optimization proceedings 1996 ieeeacm international conference computeraided design p4449 november 1014 1996 san jose california united states jason cong tianming kong zhigang david pan buffer block planning interconnect planning prediction ieee transactions large scale integration vlsi systems v9 n6 p929937 1212001 minghorng lai f wong memoryefficient interconnect optimization proceedings 2001 conference asia south pacific design automation p198202 january 2001 yokohama japan j cong c koh k leung simultaneous buffer wire sizing performance power optimization proceedings 1996 international symposium low power electronics design p271276 august 1214 1996 monterey california united states feodor f dragan andrew b kahng ion mandoiu sudhakar muddu alexander zelikovsky provably good global buffering multiterminal multicommodity flow approximation proceedings 2001 conference asia south pacific design automation p120125 january 2001 yokohama japan xun liu yuantao peng marios c papaefthymiou practical repeater insertion low power repeater library need proceedings 41st annual conference design automation june 0711 2004 san diego ca usa imin liu adnan aziz f wong meeting delay constraints dsm minimal repeater insertion proceedings conference design automation test europe p436440 march 2730 2000 paris france xiaoping tang ruiqi tian hua xiang f wong new algorithm routing tree construction buffer insertion wire sizing obstacle constraints proceedings 2001 ieeeacm international conference computeraided design november 0408 2001 san jose california john lillis chungkuan cheng tingting lin chingyen ho new performance driven routing techniques explicit areadelay tradeoff simultaneous wire sizing proceedings 33rd annual conference design automation p395400 june 0307 1996 las vegas nevada united states chakraborty rajeev murgai layoutdriven timing optimization generalized de morgan transform proceedings 2002 conference asia south pacific design automationvlsi design p647 january 0711 2002 ruiming li dian zhou jin liu xuan zeng poweroptimal simultaneous buffer insertionsizing wire sizing proceedings ieeeacm international conference computeraided design p581 november 0913 probir sarkar vivek sundararaman chengkok koh routabilitydriven repeater block planning interconnectcentric floorplanning proceedings 2000 international symposium physical design p186191 may 2000 san diego california united states jason cong lei efficient approach simultaneous transistor interconnect sizing proceedings 1996 ieeeacm international conference computeraided design p181186 november 1014 1996 san jose california united states sampath dechu zion cien shen chris c n chu efficient routing tree construction algorithm buffer insertion wire sizing obstacle considerations proceedings 2004 conference asia south pacific design automation electronic design solution fair p361366 january 2730 2004 yokohama japan henrik esbensen ernest kuh performancedriven icmcm placement algorithm featuring explicit design space exploration acm transactions design automation electronic systems todaes v2 n1 p6280 jan 1997 feodor f dragan andrew b kahng ion mndoiu sudhakar muddu alexander zelikovsky provably good global buffering using available buffer block plan proceedings 2000 ieeeacm international conference computeraided design november 0509 2000 san jose california jason cong lei optimal wiresizing interconnects multiple sources acm transactions design automation electronic systems todaes v1 n4 p478511 oct 1996 christoph bartoschek stephan held dieter rautenbach jens vygen efficient generation short fast repeater tree topologies proceedings 2006 international symposium physical design april 0912 2006 san jose california usa rajeev murgai technologybased transformations logic synthesis verification kluwer academic publishers norwell 2001 jason cong patrick h madden performance driven global routing standard cell design proceedings 1997 international symposium physical design p7380 april 1416 1997 napa valley california united states jason cong zhigang pan lei chengkok koh keiyong khoo interconnect design deep submicron ics proceedings 1997 ieeeacm international conference computeraided design p478485 november 0913 1997 san jose california united states massoud pedram hirendu vaishnav power optimization vlsi layout survey journal vlsi signal processing systems v15 n3 p221232 march 1997 dian zhou ruiming li design verification highspeed vlsi physical design journal computer science technology v20 n2 p147165 march 2005