hop integrity computer networks computer network said provide hop integrity iff router p network receives message supposedly adjacent router q p check indeed sent q modified sent replay old message sent q p paper describe three protocols added routers computer network network provide hop integrity thus overcome denialofservice attacks three protocols secret exchange protocol weak integrity protocol strong integrity protocol three protocols stateless require small overhead constrain network protocol routers way b introduction computer networks suffer following security problem typical network adversary access network insert new messages modify current messages replay old messages network many cases inserted modified replayed messages go undetected time cause severe damage network importantly physical location network adversary inserts new messages modifies current messages replays old messages may never determined two wellknown examples attacks networks support internet protocol ip short transmission control protocol tcp short follows work supported part grant arp003658320 advanced research program texas higher education coordinating board smurf attack ip network computer send ping message computer replies sending back pong message first computer required internet control message protocol icmp short 14 ultimate destination pong message original source ping message adversary utilize messages attack computer network follows first adversary inserts network ping message whose original source computer whose ultimate destination multicast address every computer network second copy inserted ping message sent every computer network third every computer network replies ping message sending pong message computer thus computer flooded pong messages requested ii syn attack establish tcp connection two computers c one two computers c sends syn message computer receives syn message reserves resources expected connection sends synack message c c receives synack message replies sending back ack message receives ack message connection fully established two computers start exchanging data messages established connection hand receive ack message specified time period seconds sent synack message discards partially established connection releases resources reserved connection net effect scenario computer lost resources seconds adversary take advantage scenario attack computer follows 1 18 first adversary inserts network successive waves syn messages whose original sources different messages cannot easily detected filtered network whose ultimate destination second receives syn messages reserves resources expected connections replies sending synack messages waits corresponding ack messages never arrive third net effect wave inserted syn messages computer loses resources seconds 7 types attacks adversary inserts network messages wrong original sources messages accepted unsuspecting routers routed toward computer attack counter attacks router p network route received checks original source computer adjacent p forwarded p adjacent router q performing first check straightforward whereas performing second check requires special protocols adjacent routers paper present suite protocols provide hop integrity adjacent routers whenever router p receives message adjacent router q p detect whether indeed sent q modified replayed adversary operates p q instructive compare hop integrity secure routing 2 11 17 ingress filtering 4 ipsec 8 secure routing example 2 11 17 routing update messages routers exchange authenticated authentication ensures every routing update message modified replayed detected discarded contrast hop integrity ensures messages whether data routing update messages modified replayed detected discarded using ingress filtering 4 router network boundary checks whether recorded source received message consistent router received message message source consistent router forwards message usual otherwise router discards message thus ingress filtering detects messages whose recorded sources modified hide true sources messages provided modifications occur network boundary messages whose recorded sources modified adjacent routers middle network detected ingress filtering detected discarded hop integrity hop integrity protocol suite paper ipsec protocol suite presented 8 9 10 12 13 intended provide security ip layer nevertheless two protocol suites provide different somewhat complementary services one hand hop integrity protocols executed routers network provide minimum level security communications adjacent routers network hand ipsec protocols executed selected pairs computers network provide sophisticated levels security communications selected computer pairs clearly one envision networks hop integrity protocol suite ipsec protocol suite supported next describe concept hop integrity detail 2 hop integrity protocols network consists computers connected subnetworks examples subnetworks local area networks telephone lines satellite links two computers network called adjacent iff computers connected subnetwork two adjacent computers network exchange messages common subnetwork connected computers network classified hosts routers simplicity assume host network connected one subnetwork router connected two subnetworks message transmitted computer faraway computer network follows first message transmitted one hop computer router r1 adjacent second message transmitted one hop router r1 router r2 adjacent r1 finally message transmitted one hop router rn adjacent computer computer network said provide hop integrity iff following two conditions hold every pair adjacent routers p q network detection message modification whenever router p receives message subnetwork connecting routers p q p determine correctly whether message modified adversary sent q received p ii detection message replay whenever router p receives message subnetwork connecting routers p q determines message modified p determine correctly whether message another copy message received earlier p network provide hop integrity two thin protocol layers need added protocol stack router network discussed 3 16 protocol stack router host network consists four protocol layers bottom top subnetwork layer network layer transport layer application layer two thin layers need added protocol stack secret exchange layer integrity check layer secret exchange layer added network layer transport layer integrity check layer placed network layer subnetwork layer function secret exchange layer allow adjacent routers periodically generate exchange share new secrets exchanged secrets made available integrity check layer uses compute verify integrity check every data message transmitted adjacent routers figure 1 shows protocol stacks two adjacent routers p q secret exchange layer consists two processes pe qe routers p q respectively integrity check layer two versions weak strong weak version consists two processes pw qw routers p q respectively version detect message modification message replay strong version integrity check layer consists two processes ps qs routers p q respectively version detect message modification message replay next explain hop integrity along ingress filtering used prevent smurf syn attacks described introduction recall smurf syn attacks adversary inserts network ping syn messages wrong original sources forged messages inserted either boundary router two routers middle network ingress filtering usually installed boundary routers 4 detect forged messages inserted boundary router recorded sources messages would inconsistent hosts messages received however ingress filtering may fail detecting forged messages messages inserted two routers middle network example adversary log host located two routers p q use host insert forged messages toward router p pretending messages sent router q real source messages determined router p router p cannot decide whether messages sent router q host p q however hop integrity installed two routers p q weak strong integrity check layer router p concludes forged messages modified sent router q although actually inserted adversary sent router q discards smurf syn attacks also launched replaying old messages example adversary log host located two routers p q adversary spots passing legitimate ping syn message sent q p keeps copy passing message later time adversary replay copied messages launch smurf syn attack hop integrity defeat attack follows hop integrity installed two routers p q strong integrity check layer check layer exchange layer pe network pw ps applications transport subnetwork qe network qw qs applications transport subnetwork router p router q figure 1 protocol stack achieving hop integrity router p detect replayed messages discard next three sections describe detail protocols secret exchange layer two versions integrity check layer first protocol processes pe qe discussed section 3 second protocol processes pw qw discussed section 4 third protocol processes ps qs discussed section 5 three protocols described using variation abstract protocol notation presented 5 notation process protocol defined set inputs set variables set actions example protocol consisting processes px qx process px defined follows process px inp name input type input name input type input var name variable type variable name variable type variable begin comments added anywhere process definition comment placed two brackets inputs process px read updated actions process px thus value input px either fixed updated another process outside protocol consisting px qx variables process px read updated actions process px process px form action px either boolean expression statement form rcv qx action px sequence skip statements statement form variable px statement form send qx statement form boolean expression boolean expression executing action consists executing statement action executing actions different processes protocol proceeds according following three rules first action executed guard true second actions protocol executed one time third action whose guard continuously true eventually executed executing action process px cause message sent process qx two channels two processes one px qx qx px sent message px qx remains channel px qx eventually received process qx lost messages reside simultaneously channel form sequence m1 m2 mn accordance order sent head message sequence m1 earliest sent tail message sequence mn latest sent messages received order sent assume adversary exists processes px qx adversary perform following three types actions disrupt communications px qx first adversary perform message loss action discards head message one two channels px qx second adversary perform message modification action arbitrarily modifies contents head message one two channels px qx third adversary perform message replay action replaces head message one two channels message sent previously simplicity assume head message one two channels px qx affected one adversary action 3 secret exchange protocol secret exchange protocol two processes pe qe maintain two shared secrets sp sq secret sp used router p compute integrity check data message sent p router q also used router q verify integrity check data message received q router p similarly secret sq used q compute integrity checks data messages sent p used p verify integrity checks data messages received q part maintaining two secrets sp sq processes pe qe need change secrets periodically say every te hours chosen value te process pe initiate change secret sq process qe initiate change secret sp processes pe qe public key private key use encrypt decrypt messages carry new secrets pe qe public key known processes layer whereas private key known owner process public private keys process pe named b p r p respectively similarly public private keys process qe named b q r q respectively process pe change secret sq following four steps need performed first pe generates new sq encrypts concatenation old sq new sq using qes public key b q sends result rqst message qe second qe receives rqst message decrypts message contents using private r q obtains old sq new sq qe checks current sq equals old sq rqst message installs new sq current sq sends rply message containing encryption new sq using pes public key b p third pe waits receives rply message qe containing new sq encrypted using b p receiving rply message indicates qe received rqst message accepted new sq fourth pe sends rqst message qe receive rply message qe tr seconds indicating either rqst message rply message lost received pe resends rqst message qe thus tr upper bound round trip time pe qe note old secret along new secret included rqst message new secret included rply message ensure adversary modifies replays rqst rply messages messages detected discarded receiving process whether pe qe process pe two variables sp sq declared follows array 0 1 integer similarly process qe integer variable sq array variable sp process pe variable sp used storing secret sp variable sq0 used storing old sq variable sq1 used storing new sq assertion indicates process pe generated sent new secret sq qe may received yet assertion qe already received accepted new secret sq initially sq0 pe sq1 pe sq qe sp0 qe sp1 qe sp pe process pe defined follows process qe defined way except occurrence r p pe replaced occurrence r q qe occurrence b q pe replaced occurrence b p qe occurrence sp pe replaced occurrence sq qe occurrence sq0 sq1 pe replaced occurrence sp0 sp1 respectively qe process pe private key pe round trip time array 0 1 integer initially qe begin timeout te hours passed since rqst message sent last send rqste qe rcv rqste qe e ncrb q sp send rplye qe skip rcv rplye qe detect adversary skip timeout tr seconds passed since rqst message sent last send rqste qe four actions process pe use three functions newscr ncr dcr defined follows function newscr takes arguments invoked returns fresh secret different secret returned past function ncr encryption function takes two arguments key data item returns encryption data item using key example execution statement causes concatenation sq0 sq1 encrypted using public key b q result stored variable e function dcr decryption function takes two arguments key encrypted data item returns decryption data item using key example execution statement causes encrypted data item e decrypted using private key r p result stored variable another example consider statement statement indicates value e encryption concatenation two values v using thus executing statement causes e decrypted using key r p resulting first value v 0 stored variable resulting second value v 1 stored variable e proof correctness secret exchange protocol presented full version paper 6 4 weak integrity protocol main idea weak integrity protocol simple consider case datat message message text generated source src transmitted sequence adjacent routers r1 r2 rn destination dst datat reaches first router r1 r1 computes digest message follows mdt scr md message digest function scr concatenation message text shared secret scr r1 r2 provided secret exchange protocol r1 r1 adds message transmitting resulting datat message router r2 second router r2 receives datat message r2 computes message digest using secret shared r1 r2 provided secret exchange process r2 checks whether result equals unequal r2 concludes received message modified discards reports adversary equal r2 concludes received message modified proceeds prepare message transmission next router r3 preparing message transmission r3 consists computing using shared secret r2 r3 storing result field datat message last router rn receives datat message computes message digest using shared secret rn1 rn checks whether result equals unequal rn discards message reports adversary otherwise rn sends datat message destination dst note protocol detects discards every modified message importantly also determines location message modification occurred process pw weak integrity protocol two inputs sp sq pw reads never updates two inputs process pw also variables process pe pe updates periodically discussed previous section process pw defined follows process qw defined way except occurrence p q pw qw sp sq replaced occurrence q p qw pw sq sp respectively process pw array 0 1 integer var integer begin rcv datat qw mdt defined later rtmsg report adversary skip p receives datat router q checks message digest correct either p receives datat adjacent host p generates text next data message first action process pw pw receives datat message qw sq0 sq1 pw cannot determine beforehand whether qw computed using sq0 using sq1 case pw needs compute two message digests using sq0 sq1 respectively compare two digests either digest equals pw accepts message otherwise pw discards message reports detection adversary three actions process pw use two functions named md nxt one statement named rtmsg function md takes one argument namely concatenation text message appropriate secret computes digest argument function nxt takes one argument namely text message assume includes message header computes next router message forwarded statement rtmsg defined follows send datat qw compute message digest concatenation secret sending data nxtt forward datat router nxtt skip proof correctness weak integrity protocol presented full version paper 6 5 strong integrity protocol weak integrity protocol previous section detect message modification message replay section discuss strengthen protocol make detect message replay well present strong integrity protocol two steps first present protocol uses soft sequence numbers detect discard replayed data messages second show combine protocol weak integrity protocol previous section form strong integrity protocol consider protocol consists two processes u v process u continuously sends data messages process v assume adversary attempts disrupt communication u v inserting ie replaying old messages message stream u v order overcome adversary process u attaches integer sequence number every data message sent process v keep track sequence process u maintains variable nxt stores sequence number next data message sent u process v maintains variable exp stores sequence number next data message received v send next datas message process u assigns current value variable nxt increments nxt one process v receives datas message v compares variable exp exp q accepts received datas message assigns exp value discards datas message correctness protocol based observation predicate exp nxt holds reachable state protocol however due fault example accidental resetting values variable nxt value exp becomes much larger value nxt data messages u sends point wrongly discarded v nxt becomes equal exp next describe modify protocol number datas messages wrongly discarded synchronization u v lost due fault n chosen integer n much larger one modification consists adding process v two variables c cmax whose values range 0n 1 process v receives datas message v compares values c cmax c cmax process v increments c one mod n proceeds namely either accepts datas message exp discards message exp otherwise v accepts message assigns c value 0 assigns cmax random integer range 0n1 modification achieves two objectives first guarantees process v never discards n data messages synchronization u v lost due fault second ensures adversary cannot predict instants process v willing accept received data message cannot exploit predictions sending replayed data messages instants formally process u v protocol defined follows process u sequence number next sent message begin true send datanxt v nxt nxt process v sequence number received message sequence number next expected message begin rcv datas u reject message report adversary accept message exp c 0 processes u v soft sequence number protocol combined process pw weak integrity protocol construct process ps strong integrity protocol main difference processes pw ps pw exchanges messages form datat whereas ps exchanges messages form datas message sequence number computed according soft sequence number protocol message text message digest computed concatenation scr shared secret scr process ps strong integrity protocol defined follows process qs defined way process ps array 0 1 integer var integer begin rcv datas qs mds reject message report adversary accept message exp c 0 report adversary skip p receives datas router q checks encryption correct sequence number within range either p receives datat adjacent host p generates text next data first second actions process ps statement rtmsg defined follows send datanxt qs compute next soft sequence number compute message digest concatenation snxt secret sending data nxtt forward datas router nxtt skip proof correctness strong integrity protocol presented full version paper 6 6 implementation considerations section discuss several issues concerning implementation hop integrity protocols presented last three sections particular discuss acceptable values inputs protocols four inputs secret exchange protocol section 3 r p b q te tr input r p private key router p input b q public key router q longterm keys remain fixed long periods time say one three months changed offline system administrators two routers thus keys consist relatively large number bytes say 1024 bytes special requirements encryption decryption functions use keys secret exchange protocol input te time period two successive secret exchanges pe qe time period small adversary enough time deduce secrets sp sq used computing integrity checks data messages also large overhead results secret exchanges reduced acceptable value te around 4 hours input tr timeout period resending rqst message last rqst message corresponding rply message lost value tr upper bound roundtrip delay two adjacent routers two routers connected high speed ethernet acceptable value tr around 4 seconds next consider two inputs sp sq function md used integrity protocols sections 4 5 inputs sp sq shortlived secrets updated every 4 hours thus key consist relatively small number bytes say 8 bytes function md used compute digest data message function md computed two steps follows first standard function md5 15 used compute 16 byte digest data message second first 4 bytes digest constitute computed message digest discussed section 5 input n needs much larger 1 example n chosen 200 case maximum number messages discarded wrongly whenever synchronization two adjacent routers lost 200 probability adversary replays old message detected percent message overhead strong integrity protocol 8 bytes per data message 4 bytes storing message digest 4 bytes storing soft sequence number message 7 concluding remarks paper introduced concept hop integrity computer networks network said provide hop integrity iff whenever router p receives message supposedly adjacent router q router p check whether received message indeed sent q modified replayed adversary operates p q also presented three protocols used make computer network provide hop integrity three protocols secret exchange protocol section 3 weak integrity protocol section 4 strong integrity protocol section 5 three protocols several novel features make correct efficient first whenever secret exchange protocol attempts change secret keeps old secret new secret certain integrity check future message computed using old secret second integrity protocol computes digest every router along message route location occurrence message modification determined third strong integrity protocol uses soft sequence numbers make protocol tolerate loss synchronization three protocols stateless require small overhead hop constrain network protocol way thus believe compatible ip internet remains estimate measure performance ip augmented protocols r flooding ip spoofing attacks efficient message authentication scheme link state routing internetworking tcpip vol network ingress filtering defeating denial service attacks employ ip source address spoofing elements network protocol design hop integrity computer networks simple active attack tcp security architecture internet protocol ip authentication header ip encapsulating security payload esp digital signature protection ospf routing protocol internet security association key management protocol isakmp oakley key determination protocol internet control message protocol md5 messagedigest algorithm tcpip illustrated securing distance vector routing protocols internet security attacks basic levels tr internetworking tcpip principles protocols architecture tcpip illustrated vol 1 elements network protocol design hashbased ip traceback network support ip traceback internet security attacks basic levels digital signature protection ospf routing protocol securing distancevector routing protocols hop integrity computer networks efficient message authentication scheme link state routing ctr haining wang abhijit bose mohamed elgendy kang g shin ip easypass lightweight networkedge resource access control ieeeacm transactions networking ton v13 n6 p12471260 december 2005 yingfei dong changho choi zhili zhang lips lightweight permit system packet source origin accountability computer networks international journal computer telecommunications networking v50 n18 p36223641 21 december 2006 chris karlof naveen sastry david wagner tinysec link layer security architecture wireless sensor networks proceedings 2nd international conference embedded networked sensor systems november 0305 2004 baltimore md usa miao tabu marking scheme speedup ip traceback computer networks international journal computer telecommunications networking v50 n18 p35363549 21 december 2006