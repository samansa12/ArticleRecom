zerointeraction authentication laptops vulnerable theft greatly increasing likelihood exposing sensitive files unfortunately storing data cryptographic file system fully address problem systems ask user imbue longterm authority decryption authority used anyone physically possesses machine forcing user frequently reestablish identity intrusive encouraging disable encryptionour solution problem zerointeraction authentication zia zia user wears small authentication token communicates laptop shortrange wireless link whenever laptop needs decryption authority acquires token authority retained long necessary careful key management zia imposes overhead 93 representative workloads largest file cache hardware reencrypted within five seconds users departure restored six seconds detecting users return secures machine attacker gain physical access recovers full performance returning user resumes work b figure 1 decrypting file encrypting keys impose undue usability burdens noticeably reduce le system performance main contribution paper construction cryptographic le system blazes cfs 1 zadoks cryptfs 32 microsofts efs 19 address archi tecture administration cryptographic methods le system however none combine user authentication encryption properly systems efs require user reauthenticate certain events suspension hibernation long idle periods attempt bound window vulnerability user must explicitly produce password events oc cur burden though small encourage users disable work around mechanism 2 design zias goal provide eective le encryption without reducing performance usability ondisk les encrypted safety cached les decrypted per formance limited hardware networking per formance token able encrypt decrypt le data without signicant performance penalty instead le keys stored laptops disk encrypted keyencrypting key authorized token holds keyencrypting key thus token required read les process illustrated figure 1 two requirements system security first users token cannot provide key decryption services users laptops second token cannot send decrypted le keys wireless link cleartext form therefore token laptop use authenticated encrypted link rst use token user must unlock using pin must bind token laptop ensuring token answers key requests laptop next zia mutually authenticates identity token laptop wireless link exchanges session encryption key authentication polling ensures token thus user still present token range zia encrypts cached objects safety cache retains encrypted pages minimize recovery time user returns preserving usability overall process illustrated figure 2 remainder section presents detailed design zia starting trust threat model use pin bind token authentication session keys poll token secure laptop token returns gure shows process authenticating interacting token unlocked token bound laptop zia negotiates session keys detect departure token figure 2 token authentication system 21 trust threat model focus defend attacks involving physical possession laptop proximity possession enables wide range exploits user leaves login session open attacks even necessary attacker legitimate users rights even without current login session console access admits variety wellknown attacks resulting root access attacker also bypass operating system entirely example one remove inspect disk using another machine determined attacker might even probe physical memory running machine zia must also defend exploitation wireless link laptop token observation modica tion insertion messages simple attacks include eavesdropping hopes obtaining decrypted le keys sophisticated attacker might record session token laptop later steal laptop hopes decrypting prior trac zia defeats attacks use wellknown secure mechanisms assume collection users laptops belong single administrative domain within data shared domain includes least one trusted authority simplify key management rights revocation however system must usable even laptop disconnected rest network token laptop operating system form trusted computing base zia defend trusted malicious user easily leak sensitive data potentially extract key material zia provide protection remote users must physically present attackers jam spectrum used laptoptoken channel eectively deny users access les work orthogonal prevention networkbased exploits buer overow attacks zias security depends limited range radio link token laptop repeaters could used extend range though timebased techniques defeat wormhole attacks exist 4 13 similarly attacker arbitrarily powerful sensitive radio could extend range though attacks dicult given attenuation high frequency radios 22 keyencrypting keys zia ondisk object encrypted symmetric ke link connecting laptop token slow token much less powerful laptop consequently le decryption must take place laptop token le system stores ke encrypted keyencrypting key kk write kkke tokens know keyencrypting keys never di vulged token appropriate kk decrypt ke hence enable reading le encrypted ke model local administrative authority responsible assigning keyencrypting keys reliability face lost destroyed tokens administrative authority must also hold keys escrow otherwise losing token equivalent losing ones les escrowed keys need highly available eliminating need oblivious escrow 3 similar approaches laptops typically owned particular user many settings one could provide single unique kk user however zia must support shared access well installations within single administrative domain share notions identity privilege example two colleagues department may borrow others machines zia cannot preclude uses support sharing le key ke encrypted user key ku number group keys kg specic semantics group access authorization left le system example one assign keyencrypting keys approximate standard unix le protec tions access le unix model determined dividing universe users three disjoint sets les owner members les group anyone else empowered log machine refer last set world user particular identity member one groups one could assign user key ku user group key kg group world key kw machine users token holds specic ku applicable kg one kw per machine account les encryption key ke stored disk sealed owners key ku le readable writable executable members owning group kgke would also stored finally kwke would stored les worldaccessible note latter equivalent leaving worldaccessible les unencrypted login authority machine would hold appropriate kw group keys important implications sharing revocation zia members group implicit ability share les belonging group since member corresponding kg however user leaves group groups kg must changed new kg0 fur thermore departing userwho longer authorized view lesmay access previouslyunsealed le keys result rekeying group requires contents le accessible group reencrypted new ke0 new key resealed appropriate keyencrypting keys rekeying done incrementally distribute new group key administrative authority must supply certied kg0 token stillauthorized user must done secure environment prevent exposure kg0 thereafter token encountering laptop old continue use rekeyed however policy must pursued judiciously since increases amount data potentially visible ejected group member 23 token vulnerabilities tokens provide higher physical security laptops since worn rather carried unfortunately still possible user lose token token loss serious threat since tokens hold keyencrypting keys limit damage occurrence serious vulnerability surrounding token loss extraction keyencrypting keys pinprotected tamperresistant hardware 31 makes dicult storing kk encrypted password either case pinpassword must known tokens rightful owner rst glance seems merely shift problem authentication laptop token however since token worn physically secure laptopit reasonable allow longlived authentication token user perhaps order day bounding authentication session user token also prevents attacker protably stealing token later laptop authentication period expires token longer able supply requested ke schemes improved use serverassisted protocols prevent oine dictionary attacks 17 laptop playing role server tokens device even tokens stolen act liabili ties supposed attacker stolen laptop token sitting near legitimate user domain tailgating attacker force stolen laptop generate decryption requests could use one legitimate users keyencrypting keys legitimate token respond system would compromised prevent provide mechanism establishes bindings tokens laptops token respond particular laptops request user must acknowledge intends use token laptop several ways one accomplish exam ple token rudimentary user interface would alert user new laptop rst asks decrypt le key user chooses allow deny laptops current future requests token authentication bindings relatively long bounded duration binding expires tokenlaptop pair must rebound since user use one machine token may bound one laptop likewise laptop may one token bound usertoken authentication tokenlaptop binding necessarily visible user thus add burden using system however since long lived require infrequent user action practice intrusive unlock oce door daily without accompanying threat forgetting relock right balance usability security depends physical nature token user interface capabilities user population 24 tokenlaptop interaction binding process must accomplish two things mutual authentication session key establishment mutual authentication provided publickey cryptography 22 publickey systems principal pair keys one public one secret secure prin cipals public key must certied known belong principal laptops tokens fall administrative domain domain also responsible certifying public keys zia uses stationtostation protocol 9 combines publickey authentication diehellman key ex change diehellman key exchange provides perfect forward session keys cannot reconstructed even private keys endpoints known session key established used encrypt messages laptop token message includes nonce number uniquely identies packet within session prevent replay attacks 5 addition session key used compute message authentication code verifying received packet neither sent modied malicious third party 21 25 assigning file keys right granularity assign le encryption small grain size reduces data exposed le key revealed larger grain size provides opportunity key caching reuse zia hides latency key acquisition overlapping physical disk io must amortize acquisition costs reusing keys locality suggests benecial light chosen assign le keys perdirectory basis people tend put related les together les directory tend used time therefore many le systems place les directory cylinder group reduce seek time 18 makes dicult hide key acquisition costs perle keys instead since le directory shares le key key acquisition costs amortized across intra directory accesses alternatively one could imagine keeping perle keys one le reading bulk however maintaining structure requires extra seek le creation deletion prototype store le key directory keyle within directory keyle contains two encrypted copies le key kuke kgke ku kg correspond directorys owner group chosen implement world keys adding straightforward borrows unix protection model though replicate exactly afs andrew file system makes similar tradeo managing access control lists perdirectory basis rather perle one 28 however afs motivated conceptual simplicity storage overhead eciency retrieving access control list entries 26 handling keys efficiently key acquisition time signicant expense overlap key acquisition disk operations whenever possi ble since disk layout policies optimizations often reduce opportunity hide latency cache decrypted keys obtained token disk reads provide opportunities overlap read requiring uncached key commences zia asks token decrypt key parallel unfortunately writes oer opportunity key must hand encrypt data write commences however likely decryption key already key cache writes write le one must rst open open requires lookup enclosing directory lookup cached le key also likely cached key acquisition overlapped disk io required lookup neither overlapping caching applies directory cre ation requires fresh key since directory new cannot cached key already place since write key must acquired disk operation initiates however zia need particular key associate directory key therefore zia prefetch keys authentication token encrypted current users ku kg used directories created later initial set fresh keys prefetched user binds token laptop thereafter number fresh keys drops threshold background daemon obtains key caching prefetching greatly reduce need laptoptoken interactions however frequent assurance token present defense intruders provide assurance add periodic challengeresponse laptop token period must short enough time discover absence plus time secure machine less required physical attack also must long enough impose light load system currently set interval one second long enough produce measurable load shorter time protect laptop worst case thus contribute substantially window attacker work 27 departure return token respond key requests chal lenges user declared absent le system state must protected cached le keys ushed user returns zia must refetch le keys restore le cache predeparture state process transparent user complete resumes work two reasons laptop might receive response token user could truly away link may dropped packet zia must recover latter avoid imposing performance penalty still present user accomplish use expected round time laptop token single uncongested network hop time relatively stable zia retries key requests responses received within twice expected round trip time total three attempts retries employ exponential backo since expect losses due link noise congestion congestion nearby users unlikely short range still response user declared absent le system must secured zia rst removes name mappings name cache forcing new operations block lookup zia walks list cached pages removing clear text versions pages two ways accomplish writing dirty pages disk zeroing cache encrypting cached pages place zeroing cache attractive property little work required secure machine pages clean need written disk however user returns zia must recover decrypt pages cache likely scattered across disk expensive instead zia encrypts cached pages place page belongs le disk matching le key page descriptor holds reference cached decrypted key referenced keys may evictedthey wired cache without corresponding key would way encrypt cached page keys cannot obtained nowdeparted token expense encryption tolerable given goal foiling physical attack example largest le cache observe hardware encrypted within seconds successful attacker would gain possession machine extract information within timean unlikely occurance user absent disk operations block token within range zia resumes pending operations means background processes cannot continue user away physically secure location oce building xed beacons provide authentication lieu user unfortunately beacons would prevent intraoce theft must used judiciously insecure locations air port user must leave unencrypted data exposed background computation enabled would defeat purpose system 28 laptop vulnerabilities happens laptop stolen lost since zia automatically secures le system data extracted disk likewise le keys session zeroed memory however laptops private key sd must remain laptop allow transparent reauthentication attacker recovers sd impersonate valid laptop defend user must remove binding token stolen device capability provided simple interface token use tamperresistant hardware laptop would make extracting sd dicult instead oine inspection suppose attacker modies device returns user system may contain trojans nullifying protections aorded zia device stolen later recovered regarded suspect used secure booting 6 14 used guard attack vfs keyiod authentication page cache client keyd authentication server token zia key cache underlying fs kernel module gure shows zias design kernel module handles cryptographic le io authentication client server manage key decryption detect token proximity key cache included improve performance figure 3 overall view zia 3 implementation implementation zia consists two parts inkernel encryption module userlevel authentication system kernel portion provides cryptographic io manages le keys polls tokens presence authentication system consists client users laptop server token communicating via secured channel figure 3 block diagram zia prototype kernel module handles operations intended le system forwards key requests authentication sys tem used fist 33 tool constructing stackable le systems 11 27 build kernelresident code code integrated linux 2410 kernel authentication system consists two components client keyiod runs laptop server keyd runs token written c client handles session establishment request retransmission server must respond key decryption polling requests processing requirements keyd small enough implemented simple lowpower device 31 kernel module linux le system calls pass virtual file system vfs layer 15 vfs provides abstract view le systems supported os stackable le system inserts services concrete implementations upper lower le system fist implements general mechanism manipulating page data le names makes ideal constructing cryptographic le services fist distribution also includes proofofconcept cryptographic le system cryptfs 311 file name encryption kernel module encrypts le pages le names rijndael cipher 8 selected rijndael two reasons first chosen nists advanced encryption standard aes second excellent perfor mance particularly key setupa serious concern face perdirectory keys zia preserves le sizes encryption file pages encrypted cipher block chaining cbc mode byte block use inode page osets compute dierent initialization vector page le tail portions even 16 bytes encrypted cipher feedback mode cfb chose cfb rather ciphertext stealing 7 since concerned preventing exposure providing integrity zia preserve size le names encryp tion encoded base64 ensuring encrypted lenames use printable characters otherwise underlying le system might reject encrypted le names invalid exchange limits le path name sizes reduced 25 cryptfs made decision reasons 32 kernel module performs two additional tasks first module prefetches fresh le keys used directory creation second module manages storage encrypted keys underlying le system stores keys keyles visible within zia done transparency security ondisk le keys always encrypted 312 polling disconnection reconnection zia periodically polls token ensure user still present polling period must longer small multiple network roundtrip time shorter time required adversary obtain inspect laptop window hundreds milliseconds tens seconds chose period one second generates unnoticeable trac provides tight control demonstrated knowledge session key sucient prove tokens presence therefore poll message need exchange nonces 5 device sends num ber n encrypted key token returns n encrypted key kernel responsible polling cannot depend userlevel process declare token absent since must failstop similarly user suspends laptop suspends due inactivity kernel treats equivalent loss communication kernel declares user absent secures le system cached data encrypted decrypted le keys ushed marked invalid added ag page structure distinguish encrypted pages invalidated means io zia blocks users absence nonblocking operations return appropriate error code keyiod reestablishes secure connection token two things happen first decrypted le keys refetched token second le pages decrypted made valid pages made valid operations blocked resume considered overlapping key validation page decryption improve restore latency however simpler scheme suciently fast 32 authentication system authentication system implemented user space convenience laptoptoken communication encrypted authenticated session keys plus nonces communication laptop token uses udp rather tcp provide retransmission mechanism enables aggressive schedule since congestion concern declare user absent three dropped messages parameter tunable ken form keyd holds users keyencrypting keys since session establishment taxing operation required keyd infrequent keyd easily implemented lowpower hardware 4 evaluation evaluating zia set answer following questions cost key acquisition overhead zia impose contributes overhead zia secure machine quickly enough prevent attacks user departs zia recover system state returning user resumes work answer questions subjected prototype variety benchmarks experiments client machine ibm thinkpad 570 128 mb physical memory 366 mhz pentium ii cpu 64 gb ide disk drive 13 ms average seek time token compaq ipaq 3650 32mb ram connected 80211 wireless network running ad hoc mode 1 mbs keys 128 bits long token somewhat powerful current wearable devices however rapid advancements embedded lowpower devices makes realistic token near future 41 key acquisition rst task compare cost key acquisition typical le access times measured elapsed time kernels request key decryption delivery key kernel average acquisition cost 139 milliseconds standard deviation 00015 similar average seek time disk laptops though layout policy disk optimizations tend reduce seek costs common case 42 zia overhead second goal understand overhead imposed zia typical system operation benchmark similar andrew benchmark 12 structure andrew benchmark consists copying source tree traversing tree contents compiling use apache source tree 74 mb size compiled total tree occupies 97 mb precongure source tree trial benchmark since conguration step involve appreciable io test le system andrew benchmark well known several shortcomings primary one marked dependence compiler performance light also subject zia three iointensive workloads directory cre ation directory traversal tree copying rst two highlight cost key creation acquisition third measures cost data encryption decryption file system time sec ext2fs ext2fs 5263 030 base 5276 022 024 cryptfs 5752 018 928 zia 5754 020 932 shows performance ext2fs stacked le systems using modied andrew benchmark standard deviations shown parentheses zia overhead less 10 comparison ext2fs system performs similarly simple single key encryption system cryptfs figure 4 modied andrew benchmark 421 modified andrew benchmark compare performance linuxs ext2fs four stacking le systems base cryptfs zia zia npc base null stacked le system transfers le pages provides name translation cryptfs adds le name encryption uses single static key le system base cryptfs samples fist distribution 33 provide fair comparison replaced blowsh 29 rijndael cryptfs improving performance zia described paper zia npc obtains key every disk access provides neither caching prefetching keys experiment consists 20 runs set compile source separate location ensures test include eects loading compiler linker separate le system run uses separate source destination directories avoid caching les name translations results shown figure standard deviations shown parenthesis results ext2fs give baseline performance result base quanties penalty using stacking le system cryptfs adds overhead encrypting decrypting le pages names zia encompasses penalties plus costs due key retrieval token communication key storage benchmark zia imposes less 10 penalty ext2fs performance statistically indistinguishable cryptfs uses single key cryptographic operations key caching critical without zianpc four times slower base le system examine root causes zias overhead instrumented 28 major le inode operations zia base dierence two normalized number operations gives average time zia adds operations incur little penalty operations incur measurable overhead result shown figure 5 overhead operation stems zias encryption key management functions base readpage writepage functions merely transfer pages upper lower le system since writepage asynchro nous operation relatively inexpensive zia must encrypt page synchronously writing lower le system readpage must decrypt pages synchronously leads overheads shown zias mkdir must write keyle disk adds extra le creation every mkdir finally filldir and20001000 time us operation0 filldir mkdir readpage writepage lookup operation type shows peroperation overhead zia compared base le system writing reading directory keys disk expensive operation encrypting decrypting le pages figure 5 peroperation overhead file system time sec ext2fs ext2fs 967 023 base 966 013 015 cryptfs 988 014 217 zia 1025 009 59 table shows performance creation 1000 directories containing one zerolength le standard deviations shown parentheses although zia cache fresh keys directory creation must write keyles disk figure creating directories lookup must encrypt decrypt le names must sometimes acquire decrypted le key 422 io intensive benchmarks although modied andrew benchmark shows small overhead io intensive workloads incur larger penalties conducted three benchmarks quantify rst two stress directory operations third measures cost copying data bulk rst experiment measures time create 1000 directories containing zero length le results shown figure 6 new directory requires zia write new keyle disk adding extra disk write operation writebehind policy ext2fs keeps overheads manageable addition lenames must encrypted accounting rest overhead next benchmark examines zias overhead reading 1000 directories zero length le directory stresses keyle reads key acquisition note without empty le zia need decrypted key token would never used ran find across 1000 directories les created previous experiment rebooted machine previous test one make sure name cache factor results shown figure 7 results show large overhead zia surprising since created le layout smallest degree directory locality possible zia forced fetch 1000 keys one directory locality file system time sec ext2fs base 1572 116 104 cryptfs 1541 107 094 zia 2976 333 9124 table shows performance reading 1000 direc tories containing one zerolength le standard deviations shown parentheses case zia must synchronously acquire le key figure 7 scanning directories file system time sec ext2fs ext2fs 1968 028 base 3105 068 5778 cryptfs 4281 134 11757 zia 4356 113 12138 table shows performance copying 40mb source tree one directory le system standard deviations shown parentheses synchronously decrypting encrypting le page adds overhead page copy true zia well cryptfs figure 8 copying within file system key caching exploit inserts network round reading contents directory accounting extra 14 milliseconds per directory read note dierences base cryptfs ext2fs statistically signicant directory read zia requires keyle read acquisition addition work done underlying ext2fs interestingly amount unmasked acquisition time plus time read keyle similar measured acquisition costs better understand phenomenon instrumented internals directory operations surprisingly directory read completed tens microseconds keyle read typical disk access believe benchmark keyles directory pages always placed disk track situation track buer contain directory page requested likely aged le system would show consistent behavior 30 nevertheless considering moving keyles directories separate location lower le system since keys small one could read batches hopes prefetching useful encrypted le keys encrypted keys already hand directory read would longer found track buer would go disk however time would overlapped key acquisition reducing total overheads nal io intensive experiment copy pine 421 source tree one part le system another initial les copied machine rebooted avoid hitting page cache measures data intensive operations pine source 404 mb spread across 47 directories results shown figure 8 light previous experiments clear crypt zia slow comparison base ext2fs le page synchronously decrypted read encrypted time s20 reconnection disconnection page cache size mb plot shows disconnection encryption time reconnection decryption time line shows time required encrypt le pages token moves range blocks show time required refetch cached keys decrypt cached le pages figure 9 disconnection reconnection 43 departure return addition good performance zia must two additional properties security le page data must encrypted soon user departs usable zia restore machine predeparture state user resumes work recall user leaves system encrypts le pages place user turns zia requests decryption keys key cache decrypts data page cache measure disconnection reconnection time copied several source directories various sizes zia removed token brought back range figure 9 shows results line shows time required secure le system points represent time required restore rightmost points graph represent largest le cache could produce test system encryption time depends solely amount data page cache unsurprisingly encryption time linear page cache size decryption also linear though fetching requires variable amount time due unknown number keys cache believe window seconds short thief obtain laptop examine contents page cache user come back system warm cache user within radio range must walk laptop sit resume work likely six seconds 5 related work best knowledge zia rst system provide encrypted ling services defend physical attack imposing negligible usability performance burdens trusted user zia accomplishes separating longterm authority act users behalf entity performing actions actor holds authority short term refreshes necessary number le systems provide transparent encryption best known cfs 1 cfs built indirection layer applications arbitrary underlying le system layer implemented thin nfs server composes encryption atop locallyavailable le system keys assigned directory tree basis trees exposed user secure le system consists set one toplevel subtrees protected single key mounting secure directory tree cfs user must supply decryption keys via passphrase remain force user consciously revokes explicit design decision intended reduce burden users system exchange security system weakened vesting longterm authority laptop cfs also provides use smart cards provide keys 2 fetched mount time rather periodically even fetched periodically user would tempted leave smart card machine time cfs overhead substantial one way implement cryptographic le system eciently place kernel avoiding crossdomain copies task simplied stackable le system infrastructure 11 27 stackable le systems provide ability interpose layers within existing le systems enabling incremental construction services fist 33 language associated compiler constructing portable stackable le system layers use fist implementation zia though use virtual memory buer cache mechanisms native linux would require eort port operating systems found fist useful tool constructing le system services cryptfs complete prior example stacking implementation encryption rst implemented custombuilt stacked layer 32 later built example use fist cryptfsin formsshares many goals shortcomings cfs user supplies thereafter le system empowered decrypt les users behalf cryptfs signicantly outperforms cfs benchmarks show cryptfs even better light primarily due replacement blowsh 29 rijndael 8 microsoft windows 2000 provides encrypting file system efs 19 efs solves many administrative sues essentially dierent cfs cryptfs single password serves keyencrypting key ondisk perle keys efs still depends screen saver suspension locks revoke keyencrypting key rather departure authorized user user may disable screen saver suspension locks nding intru sive anecdotally found many windows 2000 laptop users done exactly addition le system state applications often hold sensitive data address spaces state paged disk available attacker much unencrypted le system would provos provides system protecting paging space using perpage encryption short lifetimes 26 zia complimentary system zia protects le system state provos system protects persistent copies application address spaces several eorts used proximitybased hardware tokens detect presence authorized user landwehr 16 proposes disabling hardware access keyboard mouse trusted user away system fully defend physical possession attacks since contents disk possibly memory may inspected attackers leisure similar systems reached commercial world example xyloc system 10 could serve hardware platform zias authentication token rather use passwords hardware tokens one could instead use biometrics biometric authentication schemes intrude users two ways rst falsenegative rate chance rejecting valid user 25 face recognition ranges 10 40 depending amount time training using recognition system ngerprints falsenegative rate high 44 depending subject second intrusion stems physical constraints example user must touch special reader validate ngerprint burdens encourage users disable work around biometric protection notable exception iris recognition low falsenegative rate performed unobtrusively 23 however requires three camerasan expensive bulky proposition laptop 6 conclusion laptops vulnerable theft require additional protection physical attacks without protection anyone possession laptop also possession data current cryptographic le systems oer protection user grants le system longterm authority decrypt half closing vulnerability available mechanisms passwords secure hardware biometricswould place unpleasant burdens user encouraging forfeit security entirely paper presents solution problem zero interaction authentication zia zia user wears authentication token retains longterm authority act behalf laptop connected token shortrange wireless link obtains authority needed despite additional communication required scheme imposes overhead 93 local le system representative workloads indistinguishable costs simple encryption user leaves laptop encrypts cached le system data largest buer cache hardware process takes less secondsless time would required nearby thief examine data user back range le system restored predeparture state within six seconds user never notices performance loss return zia thus prevents physical possession attacks without imposing performance usability burden currently extending zias model system services applications 24 protecting application state access sensitive services zia protect entire machinenot le systemfrom attack acknowledgements authors wish thank peter chen suggested recovery time metric peter honeyman many valuable conversations work mary baker landon cox jason flinn minkyong kim sam king james mickens provided helpful feedback earlier drafts work supported part intel corporation 15 novell inc national science foundation grant ccr0208740 defense advanced projects agency darpa air force materiel command usaf agreement number f306020020508 us government 16 authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon views conclusions contained herein authors interpreted 17 necessarily representing ocial policies endorsements either expressed implied intel corporation nov ell inc national science foundation defense advanced research projects agency darpa air force 18 research laboratory us government 7 r scale performance distributed le wormhole detection wireless ad hoc networks personal secure booting architecture multiple le system types sun unix association summer conference protecting unattended computers computer security applications conference cryptographic devices resilient capture httpwww howitworkssecurityencrypt design smart watch high resolution symposium wearable computers national institute standards technology computer data authentication encryption authentication large networks system public personal use case transient introduction evaluating biometric encrypting virtual memory ninth usenix security symposium evolving vnode interface usenix association conference integrating security large distributed system description new variablelength key file system measurement modeling computer systems pages 20313 secure coprocessors stackable vnode level encryption le system tr fast file system unix scale performance distributed file system integrating security large distributed system logic authentication cryptographic file system unix filesystem development stackable layers distancebounding protocols bits smartcard protected operating system file system agingmyampersandmdashincreasing relevance file system benchmarks using encryption authentication large networks computers introduction evaluating biometric systems iris biometric system public personal use personal secure booting oblevious key escrow description new variablelength key 64bit block cipher blowfish application design smart watch high resolution display protecting unattended computers without software networked cryptographic devices resilient capture ctr shwetak n patel jeffrey pierce gregory abowd gesturebased authentication scheme untrusted public terminals proceedings 17th annual acm symposium user interface software technology october 2427 2004 santa fe nm usa brian noble mark corner case transient authentication proceedings 10th workshop acm sigops european workshop beyond pc july 0101 2002 saintemilion france kenta matsumiya soko aoki masana murase hideyuki tokuda zerostop authentication system sensorbased embedded realtime applications journal embedded computing v1 n1 p119132 january 2005 andrew wilson raman sarin bluetable connecting wireless mobile devices interactive surfaces using visionbased handshaking proceedings graphics interface 2007 may 2830 2007 montreal canada naveen sastry umesh shankar david wagner secure verification location claims proceedings acm workshop wireless security september 1919 2003 san diego ca usa shelley zhuang kevin lai ion stoica randy katz scott shenker host mobility using internet indirection infrastructure wireless networks v11 n6 p741756 november 2005 mark corner brian noble protecting applications transient authentication proceedings 1st international conference mobile systems applications services p5770 may 0508 2003 san francisco california yihchun hu adrian perrig survey secure wireless ad hoc routing ieee security privacy v2 n3 p2839 may 2004 srdjan capkun jeanpierre hubaux biss building secure routing incomplete set security associations proceedings acm workshop wireless security september 1919 2003 san diego ca usa levente buttyn jeanpierre hubaux report working session security wireless ad hoc networks acm sigmobile mobile computing communications review v7 n1 january erez zadok rakesh iyer nikolai joukov gopalan sivathanu charles p wright incremental file system development acm transactions storage tos v2 n2 p161196 may 2006 julie thorpe p c van oorschot anil somayaji passthoughts authenticating minds proceedings 2005 workshop new security paradigms september 2023 2005 lake arrowhead california shelley zhuang kevin lai ion stoica randy katz scott shenker host mobility using internet indirection infrastructure proceedings 1st international conference mobile systems applications services p129144 may 0508 2003 san francisco california