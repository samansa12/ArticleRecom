spreadsheets images describe data visualization system based spreadsheets cells spreadsheet contain graphical objects images volumes movies cells may also contain widgets buttons sliders curve editors objects displayed miniature inside cell formulas cells written generalpurpose programming language tcl augmented operators array manipulation image processing renderingcompared flow chart visualization systems spreadsheets expressive morescalable easier program compared conventional numerical spreadsheets spreadsheets images pose several unique design problems larger formulas longer computation times complicated intercelldependencies response problems extended spreadsheet paradigm three ways formulas display results anywhere spreadsheet cells selectively disabled multiple cells edited discuss extensions implications also point unexpected uses spreadsheets visual database browser graphical user interface builder smart clipboard desktop presentation tool b introduction majority commercially available image processing data visualization systems employ flow chart paradigm users select processing modules menu wire together using mouse although elegant principle flow charts limited expressiveness scalability useful programming constructs like procedure calls variable substitution cannot conveniently expressed systems flow charts spend screen real estate operators interconnec tions becomes uninteresting flow chart address center integrated systems email levoycsstanfordedu stanford university web httpwwwgraphicsstanfordedu stanford ca 943054070 specified run screen space chart exceeds dozen operators flow charts also provide convenient mechanism managing multiple datasets propose alternative paradigm based spreadsheets broadly speaking spreadsheet system specifying constraints among cells arranged grid cells may contain constant data value formula evaluates data value formulas may reference value cells may alter value cells formulas typically written simple interpreted language examples spreadsheet systems microsofts excel lotuss 123 borlands quattro implemented spreadsheet images hen ceforth denoted si extend notion data value include graphical objects images objects displayed miniature inside cell double clicking cell brings fullsize object cells may also contain interactive widgets manipulating widget modifies data associated cell formulas cells reference modified cell recomputed well formulas spreadsheet written tcl generalpurpose programming language provides variables assignment statements procedures full complement control structures formula cell range oneline expression entire program support editing mulas si intimately tied emacs popular customizable text editor double clicking cell brings emacs window devoted cell compared flow chart systems presence embedded formula language makes si expressive infinite grid spreadsheet together ability resize cells gives si better scalability si also spends screen space operands rather operators usually interesting user finally spreadsheets twodimensional provide natural mechanism applying multiple operators multiple datasets compared conventional numerical spreadsheets si offers three important extensions firstly formula si display result anywhere spreadsheet allows users intermix functional imperative programming styles simplifying many common tasks secondly si allows cells selectively disabled allows users work one part spreadsheet time useful feature face long cell computation times thirdly si allows multiple cells edited fired group simplifies development complicated spreadsheets three extensions complicate dependency analysis cell firing algorithm shall see remainder paper organized follows section presents reasons choosing tcl formula language describes tcl si fit together section 3 describes logical structure command set si remaining sections describe sis implementation experiences si comparisons systems future si load store display openwindow closewindow popwindow pushwindow register manipulation loadsheet storesheet winsize titleheight viewpixel services cellsize viewcell cut copy paste delete enable disable cell manipulation regexists queryreg codereg codecell data structure queries figure 1 commands si kernel starred commands also available using point click interface 2 tcl formula language conceptual point view choice formula language unimportant envision si kit parts language replaceable module prototype sought language powerful easy type interpreted rather compiled interactivity choice tcl toolkit command language 3 tcl consists applicationindependent embeddable command interpreter set builtin commands manipulating variables strings lists files set ccallable interface routines adding additional commands examples tcl code scattered throughout paper users point view tcls advantages easy type like unix shell commands provides variety control structures substitution mechanisms like unix shell better implementors point view tcls advantages small code size fast execution fast enough use mouse event loops simple interface procedure calls string arguments tcl one advantage basis tk 4 x11 toolkit similar xt tk provides base set graphics textoriented widgets mechanism defining new widgets simplified interface user applications x window system sgi users tk replaces window management event handling services present gl missing opengl tcltk user communities expand expect see sets 3d graphics image processing tcl appears two places si firstly language formulas written secondly si program provides tcl command prompt users may invoke functionality si including functions normally driven mouse entering commands prompt capability allows users record play back interactive sessions customize si initialization script perform many useful tasks 3 structure commands si si consists kernel one standalone application packages kernel manages memory displays spreadsheet contains firing algorithm application packages create manipulate data registers responsible defining tkcompatible widgets display registers create modular design reflects one ousterhouts goals tcl systems composed compact reusable parts scalar vector scanline image volume register creation button slider label plot imageviewer cineviewer display widgets copy extract insert promote slice delete register manipulation add subtract multiply divide mod makeramp ramp shift pixel operations rotate convolve scale displace makedisplacement spatial operations readabekas deinterlace profile opinion occupancy 3d occupancy grids figure 2 commands prototype image processing package including commands processing 3d occupancy grids used generate figure 5 section take tour logical structure command set si kernel examples include commands simple image processing application package command set si kernel listed figure 1 command set image processing package listed figure 2 31 registers basic unit storage si called register register named allocation memory registers may contain thing images volumes geometry etc si kernel controls allocation deallocation registers kernel knows nothing contents register contents interpretation registers determined application package commands know manipulate commands si generally consist command name followed options one arguments argument list commands includes name one registers example rotate bspline myreg 45 newreg rotates volume register named myreg around yaxis 45 degrees command uses cubic bspline resampling filter places result register named newreg minimize number type coercions user must per commands accept variety register types performing conversions applying defaults ignoring arguments appropriate one important default name output register newreg omitted si make name make form useful commands produce register output return string result giving name output register register produced command used input another command using tcls command substitution mechanism rotate bspline load headmri 45 newreg formula load command executes first generating arbitrary name output register eg reg123 rotate executes next arguments reg123 45 newreg register produced load command never seen user unimportant deleted automatically si formula modified cell deleted 32 display widgets contents registers undisplayable second building block si display widget view register types registers may one widget knows display others may none register would need converted displayable type order view display widgets associated registers using widget command example cineviewer rocking load headmri loads volume register opens window workstation screen contains instance cine viewer widget widget contains image subwindows interactive controls viewing slices volume flipbook animation rocking option specifies animation alternate directions rather circling last frame back first frame 33 cells third building block si cell addition usual appearance display widgets si know draw miniature inside spreadsheet cell miniature versions widgets may live meaning respond mouse events like fullsize widget dead case double clicking miniature version brings fullsize widget display widgets associated cells adding cell name argument widget command display miniature version cine viewer widget cell a1 type cineviewer rocking load headmri far assumed formulas entered si program prompt formula instead typed emacs window associated particular cell cell name argument may omitted a1 cineviewer rocking load headmri use notation a1 typeset times roman signify formula follows typeset courier contained cell a1 a1 appear cell every type register default display widget volumes cine viewer therefore formula cell a1 could simplified read a1 load headmri executing formula would cause specified file loaded volume register miniature version cine viewer displayed cell formula contains one command separated newlines register returned last command executed displayed cell common case user doesnt need think registers display widgets writing formulas vast majority formulas look like last example key providing brevity flexibility formula language lies liberal use defaults 34 chaining formulas together cell names may used context register name valid allows us reference data cell either register name cell name simple three cell spreadsheet a1 load alpsrgb b1 rotate c1 ramp b1 makeramp 0 255 255 0 first command loads image cell a1 miniature version image displayed cell second command rotates image 45 degrees displays result cell b1 third command inverts pixel values rotated image displaying result cell c1 makeramp command accepts tcl list coordinate pairs returns tcl list coordinates piecewise linearly interpolated specified coordi nates example command would return tcl list 0 255 1 254 2 253 list becomes input argument ramp command modifies image cell b1 35 ways reference cell numerical spreadsheets references cells relative absolute b1 relative reference formula containing reference moved one row using cut paste reference would changed b2 formula edited emacs window time relocated si sends updated text emacs contrast notation b1 b1 b1 forces column row coordinates absolute respectively absolute references modified cells relocated si also supports arithmetic calculations cell references example a123 references cell two rows three columns right base address a1 formula containing reference moved one row base address would changed a2 reference would stay correct note construction similar excels offseta123 somewhat easier type finally tcls substitution mechanisms applied cell references thus a1ij references cell whose row column offsets a1 given tcl variables respectively similarly a1foobar references cell whose offsets values returned tcl commands foo bar finally every occupied cell spreadsheet associated tcl command returns contents register displayed cell thus a1b1b2 references cell whose offsets values contained cells b1 b2 36 active widgets addition live dead widgets may passive meaning display underlying registers active meaning display modify underlying registers example a1 load alpsrgb b1 slider b2 rotate command slider cell b1 widget command since invoked without arguments example compare cineviewer command example 1 default scalar integer register created slider displays contents register operand b1 cell b2 invokes command b1 returns current value slider cell b1 rotate command rotates image cell a1 amount since formula cell b2 depends cell b1 moving slider causes rotation recomputed spreadsheet example shown figure 3 slider widget really tks scale widget options visible slider command figure options defined tk scale command addition tkdefined options active widgets accept nocontinuous option specifying continuous means widget fire descendents repeatedly fast possible mouse button released slider previous example defined dragging slider bar back forth would cause image rotate back forth reduce computational delays cell b2 beginning long sequence operations active widgets also accept nofiredescendents option specifying nofiredescendents means widget fire immediate children long mouse button button released widgets descendents fired 37 control structures si supports control structures tcl including foreach case particular interest looping commands loops si take one three general forms singlecell loops easiest way code loop entirely within one cell using tcl command a1 load alpsreg temp set 0 90 incr 30 rotate temp a1 formula step alpine pasture image four rotational positions appear briefly cell a1 multicell forloop user already built sequence processing steps decides retrospectively iterate one parameters sequence range values done without reworking entire spreadsheet inserting one additional cell beginning loop trigger a2 set 0 90 incr 30 byte a2 fire b2 2 b1 load alpsreg b2 rotate b1 a2 b3 ramp b2 makeramp 0 0 255 100 original spreadsheet consisted cells b1 b3 cell a2 added control loop byte command creates scalar byte register displays a2 using label widget fire command executes cell b2 subroutine cell b2 descendents b3 example finished execut ing control returned a2 increments loops multicell whileloop user wishes predicate loop termination value computed loop body two cells required control loop a1 load alpsreg 3 b2 convolve box c1 c1 c3 max gradient byte example byte command cell c1 initializes loop command cell c3 evaluates data object computed loop body conditionally modifies cell c1 loop body depends loop body thereby reexecuted repeatedly condition becomes false figure 3 slider widget used control rotation cell b2 rotates image cell a1 angle specified slider cell b1 time slider moved cell b2 descendents recomputed example cell a1 blurred box filter increasing width starting 3x3 stopping maximum gradient magnitude image drops 50 4 selected implementation details 41 user interface si implemented c c tcltk emacs lisp depend unix x window system otherwise platform independent widgets currently depend gl nonportable version silicon graphicss graphics library shortly converted opengl platformindependent library unique characteristics si pose several challenging user interface design problems firstly cells larger numerical spreadsheets fewer displayed make navigation easier provide accelerated scrolling tool ability quickly change size cells individual cells cannot resized would destroy regularity spreadsheet grid secondly longer formulas powerful language semantics lead complicated intercell dependencies numerical spreadsheets keep users getting lost formula cell displayed inside cell long formulas optionally decimated fit see figures 5 6 although decimated text legible overall structure clearly visible clarify intercell dependencies dependency graph displayed overlay see figures 4 5 thirdly cells take longer compute cells numerical spreadsheets several minutes extreme cases keep spreadsheet visually consistent long computa tions cells depend modified cells grayed macintosh style indicate date cell fires highlighted provide feedback progress mouse alive cell computations used navigate spreadsheet abort errant computation response long cell computation times si allows cells selectively disabled allowing user work one part spreadsheet time addition user select group cells edit simultaneously emacs fire entire group single keystroke features described cosmetic last two profoundly affect firing algorithm discussed next section 42 managing dependencies dependency relationships si represented directed acyclic graph two types nodes formulas objects objects consist cell names register names tcl vari ables tcl procedures formula consumes object eg specifies cell input invokes tcl procedure etc represented graph directed edge object formula formula produces object eg specifies cell output defines tcl procedure etc represented directed edge formula object following user modification one formulas objects dependency graph traversed described appendix modified formulas descendents recomputed time required perform dependency analysis usually several orders magnitude smaller time required execute formula decimate image display discuss sis firing algorithm differs firing algorithms found conventional spreadsheets two ways firstly ability specify objects outputs formulas forces us distinguish formulas objects dependency graph gives rise producer edges edges formulas objects surprisingly additional flexibility complicate dependency analysis substantive way second difference arises ability selectively disable reenable cells edit several formulas conventional spreadsheets allow either action result firing algorithm begins queue edited reenabled formulas need executed complicate matters tcl allows conditionally executed commands substitutions command operands see section 35 prevents us lexically scanning formula advance execution determine set objects consume produce without information impossible determine formula queue executed first standard problem operating system design standard solutions solution used si described appendix execute modified formulas arbitrary order requeueing consume undefined invalid objects dependency relationships indeed acyclic algorithm guaranteed find valid firing order presence cycle leads condition called livelock detected firing algorithm solution lead wasted computation formula contains long computation followed reference invalid object requiring formula requeued recomputed scratch later cases rare practice formulas usually make consumer references early time lost requeuing negligible user sees final firing order currently investigating solutions including blocking formulas execution invalid object available case cycles lead condition called lexically scanning cell resolve many references possible allowing formulas declare set objects might consume produce executed 5 experience examples experience si limited positive although image processing package offers rudimentary functionality used several research projects see figure 5 also found unexpected uses si summarizing research results colleagues giving public presentations see figure 6 sometimes use simply smart clipboard storing images desktop like macintosh clipboard powerful plausible applications si database browser exposure sheet computer animation video postproduction planner ability specify outputs formulas makes si different conventional spreadsheet worthwhile consider additional power might used consider spreadsheet shown figure 4 user example began building pipeline classifying 3d medical datasets puzzled classified volume displayed cell d2 user added following diagnostic code formula cell set means set z 0 z d2 zlen incr z lappend means mean slice d2 set order lorder means set 0 5 incr slice d2 b40i lindex order code creates tcl list containing mean pixel intensity d2 zlen slices classified volume calls lorder tcl proc defined elsewhere formula generate second list containing slice numbers order decreasing mean slice pixel intensity displays brightest 5 slices cells b4 f4 still puzzled user created formulas cells f5 g5 analyze one slices example ability display results anywhere spreadsheet made easy insert visual equivalent printf statement existing formula without reorganize spreadsheet ability define reference local variables made easy write forloops needed sort slices conventional spreadsheets dont allow local variables formulas flexibility use imperative programming style assignment statements cell d2 produce cell f4 functional programming style cell g5 consume cell f4 extends break spreadsheet paradigm contrary seems natural example would difficult write without flexibility 6 comparisons discussion spreadsheets images new idea piersols asp package 6 spreadsheet program based smalltalk80 objectoriented programming environment anticipates many features si cells allowed contain sort object including images spreadsheets formulas written smalltalk general purpose programming language keeping conventional spreadsheet paradigm formulas cells asp permitted alter value cells palaniappans iiss environment 5 combines custom mathematicalike formula language mark overmarss forms ui toolkit khoros image processing library iiss appears allow assignment statements complete definition language firing algorithm yet published key feature si ability intermix functional imperative programming see example section 5 figure 4 simple classification pipeline 3d medical dataset slice chosen using slider cell b1 classified according transfer function selected cell c1 unclassified classified slices displayed cells b2 c2 respectively user presses button cell d1 entire volume classified displayed cell d2 addition brightest 5 slices displayed row 4 display classified slices controlled formula cell d2 see section 5 emacs editor window also visible currently editing contents formula cell d2 interestingly conventional numerical spreadsheets also offer imperative programming usually form second hidden command language flexible cell formula language write imperative program using excel version 40 2 user creates auxiliary spreadsheet called macro sheet special properties formulas macro sheet assign values cell macro sheet using setvalue function notation permitted main spreadsheet advantage twolanguage design presents simple programming model novice computer user disadvantage jump complexity spreadsheet programming macro sheet programming large currently dominant paradigm visualizing image data flow charts worthwhile comparing si earliest system combine graphbased execution model visual programming interface paul haeberlis conman 1 currently popular flowchart visualization packages include avs explorer ape khoros ibms data explorer pvwave wavefronts data visualizer fieldview intelligent light voxelview many others sgis explorer 7 perhaps highly developed packages base comparisons three major factors identified expressiveness repeat modules explorer approximate loops tcl explorer contains modules however evaluate conditionals perform substitutions unless user writes custom module scalability micro form module icon explorer measures modules associated wiring makes crowded window modules may coalesced single icon user must perform reduction cells si resized 12 x 17 pixels simply dragging window frame allowing 6000 cells displayed although cells unreadable size view makes easy navigate large spreadsheet customization explorer provides extensive support writing custom modules jump complexity visual programming module programming c fortran nontrivial si formula language also customization language transition novice user expert user therefore smooth facilitate rapid module prototyping explorer also offers interpreted language called shape power greater tcl directly supports array manipulations interface flow chart via encapsulating latfunction module somewhat cumbersome 7 status future work kernel si complete relatively stable efforts focused building application packages image processing package used examples needs commands richer library widgets plan soon add volume visualization package polygon mesh package surface fitting package critical issue future si performance spreadsheets offer natural mechanism present flow charts yet exploited si controlling computational expense images need computed resolution commensurate size cells displayed early stages data exploration miniature images suffice computations fast user stretches spreadsheet images get bigger computations slow user double clicks cell cell recalculated full resolution many image processing operators lend obvious way computation shedding spatial warps subsam pled frequency domain operators windowed polygonal meshes retiled using fewer polygons goal make optimizations transparent user another area future development formula language tcl ideal solution many respects offers one datatype strings numerical datatypes arithmetic expressions cumbersome write examples paper demonstrate tcl also support multidimensional arrays manipulation arrays hence images si must done clanguage commands finally tcl speed compiled language like c often find prototyping computation tcl rewriting combination tcl c alternatives tcl include lisp c c interpreter several exist new language combines simplicity tcl power array manipulation language like mathematica matlab summarize si combines power data analysis language interactivity flow chart visualizer extemporaneous qualities spreadsheet power si seems useful easily manageable examples one shown figure 4 si nevertheless general programming environment possible create confusing programs using particular flow control whileloop section 37 obvious general presence conditionally executed commands substitutions command operands means reference patterns formulas si dynamic cycles appear disappear spreadsheet recomputation ability si display dependency graph detect cycles helps foolproof continuing refine design si search data analysis paradigm simple enough keep novice trouble yet powerful enough satisfy needs scientistprogrammer 8 acknowledgements discussions david heeger richard frank bob brown robert skinner useful early stages project wish particularly acknowledge many fruitful discussions philippe lacroute research supported nsf contract ccr9157767 software publishing 9 r conman visual programming language interactive graphics microsoft corporation tcl embeddable command language x11 toolkit based tcl language exploratory analysis satellite data using interactive image spreadsheet iiss environment object oriented spreadsheets analytic spreadsheet package silicon graphics inc tr objectoriented spreadsheets analytic spreadsheet package ctr ed huaihsin chi john riedl phillip barry joseph konstan principles information visualization spreadsheets ieee computer graphics applications v18 n4 p3038 july 1998 ed huaihsin chi joseph konstan phillip barry john riedl spreadsheet approach information visualization proceedings 10th annual acm symposium user interface software technology p7980 october 1417 1997 banff alberta canada varshney kaufman finesse financial information spreadsheet proceedings 1996 ieee symposium information visualization infovis 96 p70 october 2829 1996 kwanliu image graphsa novel approach visual data exploration proceedings conference visualization 99 celebrating ten years p8188 october 1999 san francisco california united states glenn iwerks hanan samet internet spatial spreadsheet enabling remote visualization dynamic spatial data ongoing query results network proceedings 11th acm international symposium advances geographic information systems p154160 november 0708 2003 new orleans louisiana usa hidekazu shiozawa kenichi okada yutaka matsushita 3d interactive visualization intercell dependencies spreadsheets proceedings 1999 ieee symposium information visualization p79 october 2429 1999 j jankunkelly kwanliu spreadsheet interface visualization exploration proceedings conference visualization 00 p6976 october 2000 salt lake city utah united states e h h chi p barry j riedl j konstan spreadsheet approach information visualization proceedings 1997 ieee symposium information visualization infovis 97 p17 october 1825 1997 j jankunkelly kwanliu visualization exploration encapsulation via spreadsheetlike interface ieee transactions visualization computer graphics v7 n3 p275287 july 2001 eser kandogan eben haber rob barrett allen cypher paul maglio haixia zhao a1 enduser programming webbased system administration proceedings 18th annual acm symposium user interface software technology october 2326 2005 seattle wa usa ed huaihsin chi john riedl phillip barry joseph konstan principles information visualization spreadsheets ieee computer graphics applications v18 n4 p3038 july 1998 ed huaihsin chi john riedl operator interaction framework visualization systems proceedings 1998 ieee symposium information visualization p6370 october 1920 1998 north carolina margaret burnett john atwood rebecca walpole djang james reichwein herkimer gottfried sherry yang forms3 firstorder visual language explore boundaries spreadsheet paradigm journal functional programming v11 n2 p155206 march 2001