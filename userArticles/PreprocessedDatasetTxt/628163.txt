minimizing bandwidth requirements ondemand data delivery abstracttwo recent techniques multicast broadcast delivery streaming media provide immediate service client request yet achieve considerable client stream sharing leads significant server network bandwidth savings paper considers 1 well recently proposed techniques perform relative 2 whether new practical delivery techniques achieve better bandwidth savings previous techniques wide range client request rates principal results follows first recent partitioned dynamic skyscraper technique adapted provide immediate service client request simply directly original dynamic skyscraper method second moderate high client request rates dynamic skyscraper method required server bandwidth significantly lower recent optimized stream tappingpatchingcontrolled multicast technique third minimum required server bandwidth delivery technique provides immediate realtime delivery clients increases logarithmically constant factor equal one function client request arrival rate furthermore theoretically possible achieve close minimum required server bandwidth client receive bandwidth equal two times data streaming rate client storage capacity sufficient buffering data shared streams finally propose new practical delivery technique called hierarchical multicast stream merging hmsm required server bandwidth lower partitioned dynamic skyscraper reasonably close minimum achievable required server bandwidth wide range client request rates b introduction paper considers server disk io network io bandwidth required ondemand realtime delivery large data files audio video files 1 delivery data might done via internet via broadband eg satellite cable network combination networks focus popular widely shared files popular news clips product advertisements medical recreational information television shows successful distance education content name examples due large size typical skews file popularity popular files one expect many new requests file arrive time takes stream data given client prior research shown server network bandwidth required ondemand delivery files greatly reduced use multicast delivery techniques 2 simple approach make requests wait service hoping accumulate multiple requests short time served single multicast stream dass94 second approach called piggybacking dynamically speed slow client processing rates eg display rates video files bring different streams file position time streams merged golm95 agwy96a lalg98 appealing aspect approaches require minimum possible client receive bandwidth ie equal file play rate 3 minimal client buffer space hand clients receive bandwidth greater file work partially supported nsf grants ccr9704503 ccr9975044 nserc grant ogp0000264 shorter version paper appears proc 5 th intl workshop multimedia information systems mis 99 indian wells ca oct 1999 generally delivery techniques consider may fruitful data stream clients process sequentially use term multicast denote multicast true broadcast throughout paper 3 throughout paper use term play rate denote fixed rate file must transmitted order client process play stream arrives data assumed transmitted rate unless otherwise stated play rate spare buffer space significantly greater server bandwidth savings achieved agwy96b viim96 calo97 hush97 juts98 hucs98 eave98 cahv99 pacl99 gato99 sgrt99 eafv99 stream merging methods client receiving particular stream simultaneously receives buffers another portion data different multicast stream thus enabling greater opportunities one client catch share future streams another client two recent techniques namely dynamic skyscraper channel stealing eave98 stream tappingpatchingcontrolled multicast calo97 hucs98 cahv99 gato99 sgrt99 key property provide immediate realtime streaming client without requiring initial portions file preloaded client two techniques also require client receive bandwidth two times file play rate knowledge two techniques compare respect required server bandwidth previously studied paper addresses issue well following open questions 1 minimum required server disk network io bandwidth delivery techniques provide immediate service clients 2 interplay achievable server bandwidth reduction client receive bandwidth 3 new practical delivery techniques achieve better bandwidth savings previous techniques yet still provide immediate service client request best techniques provide immediate service client requests compare static periodic broadcast techniques eg agwy96b viim96 hush97 juts98 fixed server bandwidth independent client request rate principal system design results order appearance remainder paper follows review optimized stream tappinggrace patchingcontrolled multicast method required server bandwidth increases square root request arrival rate significantly better immediate service provided multicast delivery employed case required server bandwidth increases linearly request arrival rate develop new implementation partitioned dynamic skyscraper technique eafv99 provides immediate service client requests simply directly original dynamic skyscraper method show optimize partitioned dynamic skyscraper architecture optimized dynamic skyscraper technique required server bandwidth increases logarithmically constant factor two three function client request rate thus moderate high client request rate dynamic skyscraper technique significantly outperforms optimized patching stream tapping derive tight lower bound required server bandwidth technique provides immediate service client requests lower bound increases logarithmically constant factor one function client request arrival rate thus techniques provide immediate service client request potential quite competitive static broadcast techniques fixed server bandwidth independent client request rate define new family segmented delivery techniques called segmented sendlatest receiveearliest sslre although necessarily practical implement sslre techniques demonstrate least theoretically possible achieve nearly lower bound required server bandwidth client receive bandwidth equals twice file play rate assuming clients buffer required data shared streams propose new practical delivery technique hierarchical multicast stream merging hmsm simple implement provides immediate realtime service clients simulation results show client receive bandwidth equals two times file play rate required server bandwidth hmsm technique reasonably close minimum achievable required server bandwidth wide range client request rates purposes obtaining lower bound examining fundamental capabilities various delivery techniques results obtained assuming 1 clients sufficient space buffering data streams 2 entire file consumed sequentially client without use interactive functions pause rewind fast forward however techniques consider adapted limited client buffer space interactive functions concomitant increase required server bandwidth discussed section 5 paper required server bandwidth defined average server bandwidth used satisfy client requests particular file given client request rate server bandwidth unlimited least two reasons believing singlefile metric relatively easy compute good metric server bandwidth needed given client load first although server bandwidth consumed delivery given file vary time total bandwidth used deliver reasonably large number files lower coefficient variation time independently requested files fixed client request rates thus sum files average server bandwidth used deliver file good estimate total server bandwidth needed achieve low client waiting time second simulations various delivery techniques shown fixed client request rates finite server bandwidth equal sum average server bandwidth usage file average client waiting time due temporary server overload close zero eg eafv99 eavz99 furthermore results also shown total server bandwidth reduced value probability client cannot served immediately average client wait rapidly increase rest paper organized follows section 2 reviews derives required server bandwidth optimized stream tappinggrace patchingcontrolled multicast technique section 3 reviews dynamic skyscraper technique develops simpler method providing immediate service client requests defines optimize new dynamic skyscraper method derives required server bandwidth section 4 derives lower bound required server bandwidth delivery technique provides immediate service clients shows impact client receive bandwidth lower bound section 5 defines new hierarchical multicast stream merging technique section 6 concludes paper table defines notation used throughout rest paper required server bandwidth optimized stream tappinggrace patching two recent papers propose similar data delivery techniques called stream tapping calo97 patching hucs98 simple implement best proposed patching policies called grace patching identical stream tapping policy client buffer space sufficiently large assumed comparing delivery techniques paper optimized version delivery technique cahv99 gato99 also called controlled multicast gato99 considered stream tappinggrace patching policy operates follows response given client request server delivers requested file single multicast stream client submits new request file sufficiently soon stream started begins listening multicast buffering data received client also provided new unicast stream ie patch stream delivers data delivered multicast stream prior new clients request multicast stream patch stream deliver data file play rate client play file real time thus required client receive bandwidth twice file play rate patch stream terminates reaches point client joined fullfile multicast table 1 notation symbol definition request rate file total time play file equals total time transmit file average number requests file arrive period length z required server bandwidth deliver particular file using delivery technique z units file play rate threshold file optimized stream tappinggrace patching expressed fraction k number file segments dynamic skyscraper largest segment size dynamic skyscraper r stream transmission rate measured units play rate default value client receive bandwidth measured units play rate keep unicast patch streams short fraction file delivered recent multicast exceeds given threshold next client request triggers new fullfile multicast let denote threshold file denote duration fullfile multicast assuming poisson client request arrivals rate required server bandwidth delivery file using stream tappinggrace patching measured units play rate given ni ni patching average number client requests arrive time denominator middle equation average time elapses successive fullfile multicasts ie duration threshold period plus average time next client request arrives numerator expected value sum transmission times fullfile patch streams initiated interval note average number patch streams started threshold expires average duration patch streams 2 differentiating expression respect setting result zero obtain optimal threshold value substituting value expression required server bandwidth yields following result required server bandwidth optimized stream tappinggrace patching2n patching optimized 1 note required server bandwidth grows square root client request rate file optimal threshold decreases client request rate increases reader referred gato99 alternate derivation results 3 dynamic skyscraper delivery section 31 reviews recent partitioned dynamic skyscraper delivery technique eafv99 defines particular implementation provides immediate service client requests simpler direct way original dynamic skyscraper method required server bandwidth version partitioned dynamic skyscraper delivery derived section 32 31 providing immediate service using partitioned dynamic skyscraper static skyscraper broadcast scheme defined hush97 divides file k increasingsized segments largest segment size denoted w 4 broadband satellite cable network segment continuously broadcast file play rate channel illustrated figure 1 client given schedule tuning k channels receive file segments example client requests file broadcast period labelled 3 first channel would scheduled receive segments 13 sequentially periods labelled 3 segments 46 periods labelled 1 channels 46 structure server transmission schedule ensures given segment 1 broadcast client might receive client receive file segment time needs played listening two channels simultaneously reader verify 4 segment sizes strictly increasing pattern 122jjkk size change increase size original skyscraper scheme progression specified 1225512122525 upper bounded parameter w progression appears maximum possible size increases among progressions pattern clients never need listen two streams simultaneously progression 1224488 provides similar performance skyscraper broadcasts ie client receive bandwidth similar segment 1 delivery time similar client buffer space requirement increases efficiency dynamic skyscraper broadcasts figure 1 since larger segments multicast less frequently clients must able receive buffer segments ahead need played thus merging clients may different play points maximum client buffer space needed client transmission schedule equal largest segment size w hush97 required server bandwidth static skyscraper method equal k independent client request rate file duration segment 1 broadcast determined total file delivery time divided sum segment sizes thus larger values k w result lower average maximum client wait time receiving first segment desirable configuration might k10 segment size progression equal 1224488161632 case segment 1 broadcasts begin every required server bandwidth skyscraper lower optimized patching dynamic skyscraper delivery technique proposed eave98 improve performance skyscraper technique lower client request rates timevarying file popularities technique client request arrives prior broadcast period labeled 1 first channel figure 1 set segment broadcasts shaded figure called transmission cluster might scheduled deliver segments file arriving client needs segment transmissions labeled 1 channel however client requests file prior transmission period labeled 8 channel 1 receive broadcasts cluster scheduled first request arrived broadcast labeled 8 complete six channels eg satellite cable channels scheduled deliver identically structured transmission cluster different file thus queue pending client requests six channels deliver cluster segment broadcasts file requested client front queue client requests waiting six channels remain idle new client request arrives initiates new transmission cluster note optimized patching queueing discipline example one tailored needs service provider clients used determine order waiting clients served periods temporary server overload employ dynamic skyscraper technique internet transmission cluster implemented w multicast streams varying duration shown numbering cluster transmission periods figure 1 first stream delivers k segments second stream starts one unit segment later delivers first segment third stream starts one unit segment later second stream delivers first three segments total server bandwidth allocated units clusters w variablelength streams cluster streams uses k units server bandwidth unit bandwidth used duration w note implementation requires clients join fewer multicast groups provides time joining successive multicast groups needed receive entire file k multicast groups transmitting different segment file original dynamic skyscraper technique eave98 immediate service provided clients waiting start segment 1 multicast transmission cluster using technique termed channel stealing portions transmission cluster streams receiving clients may reallocated provide quick service newly arriving requests figure 1 skyscraper dynamic skyscraper delivery k6 w8 segment size progression 122448 segment 1 2 3 4 5 propose direct way provide immediate service client requests also simpler implement direct approach involves small modification segment size progression particular implementation partitioned skyscraper delivery eafv99 new segment size progression form 1122jjkk eave98 eafv99 size increase either twofold threefold two consecutive size increases threefold limit number streams client must listen concurrently also progression upperbounded parameter w purpose limit required client buffer space partition segments illustrated figure 2 streams deliver first two segments scheduled independently immediately response client request thus client requests file server schedules one stream deliver first two segments schedules w2 multicast streams deliver transmission cluster segments 3 k streams one delivers first two segments four deliver transmission cluster shaded figure 2 client b requests file server allocates new stream unscheduled bandwidth shown figure deliver first two segments file client b client b receives segments 3 k listening streams transmission cluster scheduled client arrived next section computes average server bandwidth used initial twosegment stream possible new transmission cluster scheduled immediately client request key observation partitioned dynamic skyscraper system segment size increase twofold increase ie progression 11224488 requires client receive bandwidth equal twice file play rate partitioned system least one threefold segment size increase progression 11226612123636 requires client receive bandwidth equal three times file play rate corresponding dynamic skyscraper system without partitioning 32 required server bandwidth dynamic skyscraper let u denote duration unitsegment multicast determined time duration sum segment sizes partitioned dynamic skyscraper system defined required server bandwidth delivery file measured units streaming rate given poisson request arrival stream given k skyscraper dynamic 2 figure 2 partitioned dynamic skyscraper immediate service k9 w8 segment size progression 112244888 client client b segment 1 2 3 4 5 7 8 k9 first term required bandwidth delivering first two unit segments file involves sending stream duration 2u frequency l second term required bandwidth delivering transmission clusters rest file use k2 units server bandwidth unit bandwidth used time equal wu values k w minimize required server bandwidth given equation 2 may found numerically particular segment size progression interest also possible determine asymptotic behavior high client request rate progression 11224488 appendix shows n 128 required server bandwidth approximately2 3 note required server bandwidth grows logarithmically client request rate skyscraper systems may similarly analyzed progression 11226612123636 required server bandwidth large client request rate shown be0 4 figure 3 shows required server bandwidth function client request rate n optimized dynamic skyscraper systems two different segment size progressions optimized stream tappinggrace patching required server bandwidth skyscraper systems computed using equation 2 optimal choices k w determined numerically n recall segment size progression 11224488 client receive bandwidth requirement optimized stream tappingpatching namely two times file play rate results show greater 64 requests average per time optimized dynamic skyscraper systems significantly lower bandwidth requirements optimized stream tappingpatching specifically optimized dynamic skyscraper delivery system required server bandwidth reasonably competitive optimized stream tappingpatching low client request rate better competitive static broadcast techniques range client request rates shown figure skyscraper systems second partition added channels k k1 2kk2 also interest eafv99 analysis shows adding second partition alter asymptotic behavior high client request arrival rates improve performance somewhat moderate arrival rates cost increase required client receive bandwidth k odd client receive bandwidth must three times file play rate progression 11224488 four times file play rate progression client request rate n required server bandwidth optimized patching dyn sky112244 dyn sky112266 figure 3 required server bandwidth dynamic skyscraper stream tappingpatching 4 minimum required server bandwidth immediate service given results figure 3 key question whether exist multicast delivery methods significantly outperform optimized stream tappingpatching dynamic skyscraper wide range client request arrival rates words much improvement required server bandwidth possible section 41 addresses question deriving simple yet tight lower bound required server bandwidth function client request rate delivery technique provides immediate realtime streaming clients lower bound assumes clients unlimited receive bandwidth section 42 considers much lower bound increases client receive bandwidth equal n times file play rate arbitrary n 1 41 lower bound required server bandwidth lower bound required server bandwidth delivery techniques provide immediate realtime service clients derived initially poisson client request arrivals extended much broader class client request arrival processes 5 let duration file average request rate consider infinitesimally small portion file plays arbitrary time x relative beginning file arbitrary client request arrives time portion file delivered late time tx later tx system provides immediate real time file delivery client portion multicast time tx clients request file time tx receive multicast portion position x poisson arrivals average time tx next request arrives file 1 thus minimum frequency multicasts portion beginning position x constraint immediate real time service client 1 x yields lower bound required server bandwidth units file play rate technique provides immediate service client requests minimum x 5 average number requests file arrive period length lower bound implies poisson arrivals immediate realtime service client required server bandwidth must grow least logarithmically client request rate fact true client arrival process expected time next arrival conditioned fact previous request arrived current time minus x 0 x bounded c constant c case replace 1 denominator integral equation 5 c yields lower bound required server bandwidth c result similar equation 5 fact c constant independent n furthermore general lower bound required server bandwidth tight arrivals occur batches c requests per batch batch arrival times poisson rate c illustrates key point greater opportunities stream sharing therefore server bandwidth requirement lower arrivals bursty ie larger values c considering poisson arrivals expect conservative performance estimates actual client request arrival process bursty poisson 5 poisson assumption likely reasonably accurate full streaming media file requests akev01 although one would expect approximately poisson request rate timevarying particular timeofday dependant relatively short files poisson analysis directly applicable case substantive change request rate occurs time scale similar file play duration eg perhaps two hour movie analysis broader class arrival processes yields applicable intuition similar result easy see bound equation 5 reformulated function startup delay static broadcast scheme instead function client request rate simply replacing result shown formally parallel work birk mondri bimo99 comparing equation 5 equations 1 4 shows considerable room improvement optimized stream tappingpatching dynamic skyscraper delivery methods however lower bound equation 5 assumes clients receive arbitrarily many multicasts simultaneously next section considers likely lower bound required server bandwidth client receive bandwidth small multiple file play rate 42 impact limited client receive bandwidth clients receive bandwidth equal n times file play rate n 1 define new family delivery techniques techniques may practical implement intuitively likely require close minimum possible server bandwidth immediate realtime service clients specified receive bandwidth technique family distinguished parameters n r r stream transmission rate units file play rate techniques discussed previous sections paper r equal one derive close upper bound required server bandwidth n r results show required server bandwidth new technique nearly equal lower bound required server bandwidth derived section 41 technique provides immediate realtime service clients suggests may possible develop new practical techniques nearly achieve lower bound derived section 41 require client bandwidth two times play rate new family delivery techniques operate follows segment transmission rate case n integer file divided arbitrarily small segments following two rules used deliver segments client requests given file time 1 client receives multicast segment begins position x file long multicast commences times tx long receiving multicast would violate limit n client receive bandwidth point time n concurrent multicasts client could fruitfully receive client receives n segments occur earliest file 2 segment file cannot received existing scheduled multicast scheduled multicast server latest possible time segment begins position x transmitted file play rate ie 1 segment scheduled begin transmission time tx lack better name call family techniques generalization r 1given appendix c segmented sendlatest receiveearliest sslrenr note sslre1 technique achieves lower bound required server bandwidth derived section 41 desired precision dividing file sufficiently small segments demonstrates lower bound derived previous section tight similar delivery technique defined unlimited client receive bandwidth augmented limited client buffer space shown parallel work sgrt99 optimal case available client buffer space may limit transmissions client receive sslrenr technique may impractical implement results fragmented complex delivery schedules furthermore sslrenr technique minimum required server bandwidth finite n optimal rearrangements scheduled multicast transmissions new client request arrives performed sslre however required server bandwidth sslrenr technique derived arbitrary n provides upper bound minimum required server bandwidth possible client receive bandwidth speculate bound provides accurate insight lower bound required server bandwidth client receive bandwidth particular optimal rearrangements scheduled multicast transmissions sslre perform intuitively likely secondary effect required server bandwidth compared heuristics given rules 1 2 implemented sslre technique intuition reinforced results show required server bandwidth sslre31 sslre2e close lower bound derived section 41 optimal rearrangements scheduled multicasts minor impact required server bandwidth cases division file sufficiently many small segments appendix b derives following estimate required server bandwidth ssrlen1 technique units file play rate b n positive real constant satisfies following equation11 n result assumes poisson arrivals generalized similar fashion done lower bound unlimited client receive bandwidth 1 decreases monotonically n 162 1 thus server transmits segment file play rate ie client receive bandwidth equal twice play rate ie possible although necessarily practical provide immediate service 62 greater server bandwidth minimally required clients unbounded receive bandwidth since 31 119 possible achieve nearly benefit unbounded client bandwidth respect minimizing required server bandwidth clients receive bandwidth equal three times play rate appendix c defines sslre technique general case segment transmission rate r different file play rate case client listen concurrent segment transmissions rate r total client receive bandwidth may integer general family techniques appendix c derives estimate required server bandwidth r r r r n positive real constant satisfies following equation r r r r n fixed n value r thus required server bandwidth minimized r tending zero ie lowrate segment transmissions denoting value nr limiting case n e n note 6 n decreases monotonically n 1255 thus client receive bandwidth n2 least theoretically possible provide immediate realtime streaming 25 greater server bandwidth minimally required clients unbounded receive bandwidth furthermore n 2 potential required server bandwidth grow logarithmically small constant factor function client request rate practical techniques exploit latter potential explored eavz00 figure 4 shows lower bound required server bandwidth unlimited client receive bandwidth equation 5 estimated required server 6 expected result bandwidth sslre31 sslre2e sslre21 equation 7 functions client request rate n note sslre31 close b minimum client request rates least average 1000 requests per file play time even sslre21 b reasonably competitive static broadcast techniques require fixed server bandwidth order five ten streams sslrenr techniques extended straightforward way operate finite client buffer space however since techniques involve complex server transmission schedules client receive schedules principal value techniques determine approximately lowest feasible required server bandwidth providing immediate service client requests clients receive bandwidth equal n next section propose new practical delivery technique evaluate performance new technique comparing required server bandwidth required server bandwidth sslre comment finite client buffer space context new practical delivery method 5 hierarchical multicast stream merging hmsm results figures 3 4 show considerable potential improving performance previous optimized stream tappingpatchingcontrolled multicast technique optimized dynamic skyscraper technique motivated results propose new delivery technique call hierarchical multicast stream merging hmsm new hmsm technique attempts capture advantages dynamic skyscraper eave98 piggybacking golm95 agwy96a lalg98 well strengths stream tappingpatching calo97 hucs98 particular clients request file repeatedly merged larger larger groups leading hierarchical merging structure dynamic skyscraper piggybacking furthermore clients merged using dynamically scheduled patch streams stream tappingpatching rather using transmission clusters altering client play rates 51 hmsm delivery technique key elements hierarchical multicast stream merging technique include 1 data transmission stream multicast client listen stream 2 clients accumulate data faster file play rate receiving multiple streams andor receiving accelerated stream thereby catching clients started receiving file earlier 3 clients merged larger larger groups 4 two transmission streams merged clients listen streams receive remainder file hierarchical multicast stream merging technique illustrated figure 5 particular set request arrivals arbitrary file assuming server transmits streams play rate ie clients receive bandwidth equal twice play rate case denoted hmsm21 efficient way client group clients merge earlier client group requested file listen latters transmission stream well ones stream one unit time xaxis corresponds client request rate n required server bandwidth dyn sky112244 figure 4 required server bandwidth immediate real time file delivery total time takes deliver file one unit data yaxis represents total data file solid lines figure represent data transmission streams always progress file rate equal one unit data per unit time dotted lines show amount useful data client group clients accumulated function time figure requests arrive clients b c times 0 01 03 04 respectively order provide immediate service new client provided new multicast stream initiates delivery initial portion requested file client b also listens stream initiated client accumulating data rate two merging client time 02 client listens stream initiated client c merges client c client c merge client c merge c listen streams initiated c clients accumulated enough data merge clients b note hierarchical merging structure would also formed clients c listen separately merge stream initiated client case merge clients c would terminate stream c would take place time 06 merge clients would terminate stream would take place time 08 alternate hierarchical merging structure would occur patching technique threshold larger 04 would require greater server bandwidth delivering file variants hierarchical multicast stream merging differ according precise policy used determine clients merge others order well according existing new streams listened clients accomplish desired merges homogeneous clients receive bandwidth equal twice streaming rate eavz99 proposes evaluates several heuristic policies merging streams transmitted file play rate one particularly simple proposed policy dictates client listens closest target ie recently initiated earlier stream still active addition stream merges occur timeorder ie earliest merge first policy evaluations show closest targetearliest merge first ct policy performs nearly well offline optimal merging policy client request arrivals known advance streams delivered play rate merges lead least total server bandwidth performed eavz99 hierarchical multicast stream merging policies homogeneous clients receive bandwidth less twice play rate considered eavz00 ongoing research considers contexts 52 required server bandwidth hmsm figure 6 provides required server bandwidth hmsm21 obtained simulation assuming poisson arrivals optimal merges computed known client request arrival times using dynamic programming technique adapted agwy96a shown eavz99 simple heuristics for010305070911 time position media stream progress client merged stream progress clients b merged stream clients c stream client b progress clients c progress client stream client merged stream progress clients abcd figure 5 example hierarchical multicast stream merging determining merges unknown future client request arrival times closest targetearliest merge first yield nearly performance offline optimal merges considered also shown figure lower bound given equation 5 required server bandwidths sslre21 optimized stream tappingpatching dynamic skyscraper system progression 11224488 optimal choices k w results show hmsm21 yields uniformly good performance substantially improving previous techniques fact hmsm21 nearly identical performance sslre21 suggests little scope improvement policies simple implement assuming b sslren1 provides accurate insight lower bound required server bandwidth streams transmitted file play rate seems likely case note similarity performance hmsm21 sslre21 also perhaps surprising given simplicity hmsm streams compared complexity sslre segment schedules analytic expression required server bandwidth hierarchical multicast stream merging appears quite difficult obtain however poisson arrivals n 1000 recalling equation 6 b sslre21 approximately equal 162 ln n 162 1 results figure 6 show required server bandwidth hmsm21 poisson arrivals also reasonably well approximated 162 furthermore upper bound required bandwidth optimal offline merging client receive bandwidth equal twice file play rate arbitrary client request arrival process derived appendix follows line optimaloff comparing upper bound approximation poisson arrivals shows bound quite conservative bursty client request arrivals however bound demonstrates required server bandwidth hmsm client receive bandwidth equal twice play rate logarithmic client request rate request arrival pattern 53 finite buffer space client interactivity paper thus far discussed analyzed multicast delivery techniques assuming clients buffer data received ahead scheduled playback time assuming client perform interactive functions pause rewind fast forward skip back skip ahead hand techniques easily extended handle either limited client storage interactive client requests example sen et al explored stream tappingpatching delivery technique modified accommodate constrained client buffer space sgrt99 hmsm technique client buffer space implement given merge particular merge simply scheduled impact limited client buffer space performance hmsm studied eavz99 client receive bandwidth equal twice play rate eavz00 required server bandwidth opt imized patching dyn sky112244 figure required server bandwidth hierarchical multicast stream merging client request rate n14 client receive bandwidth less twice file play rate studies show clients store 510 full file client request arrivals poisson impact limited client buffer space required server bandwidth fairly small eavz99 eavz00 intuitive explanation result client requests bursty buffer space equal 510 file enables merges take place hmsm technique also easily extended interactive client requests example fast forward client given new multicast stream fast forward operation fast forward operation complete new stream merged streams standard hmsm policy similarly pause rewind skip backahead interactive requests client given new stream start end interactive request appropriate new stream merged streams end interactive operation disk storage techniques support many interactive functions discussed example samr00 required server bandwidth supporting interactive functions depends frequency type duration interactive requests extra server bandwidth needed interactive requests multicast delivery techniques exploring full impact client interactivity relative required server bandwidth various delivery techniques left future work 6 conclusions paper investigated required server bandwidth ondemand realtime delivery large popular data files assuming multicast capability available multiple clients share reception single data transmission explained section 1 defined required server bandwidth average server bandwidth used deliver file given client request rate server unlimited disk network bandwidth developed new implementation partitioned dynamic skyscraper delivery technique provides immediate service clients simply easily original dynamic skyscraper technique defined method determining optimal parameters ie k w new dynamic skyscraper system given client request rate derived required server bandwidth logarithmic constant factor two three client request rate thus moderate high client request rates dynamic skyscraper system outperforms optimized stream tappingpatchingcontrolled multicast technique required server bandwidth increases square root client request rate derived tight lower bound server bandwidth required technique provides immediate realtime service found bandwidth must grow least logarithmically client request rate defining analyzing required server bandwidth new family delivery techniques complex fragmented segment delivery schedules sslrenr showed required server bandwidth generally increases client receive bandwidth n decreases client receive bandwidth equal twice file play rate potential required server bandwidth 2562 greater lower bound results sslrenr also demonstrated client receive bandwidth less twice file play rate ie n 2 potential required server bandwidth increase logarithmically small constant factor client request rate increases proposed new practical delivery method hierarchical multicast stream merging hmsm merges clients larger larger groups share multicast streams without altering client play rate new technique number important advantages first simple implement easily extended operate presence interactive client requests second hmsm outperforms optimized stream tappingpatching optimized dynamic skyscraper techniques client request rates much improvement required server bandwidth possible hmsm technique also competitive static broadcast techniques high client request rates far superior static broadcast techniques client request rate low varying example average 1000 client requests arrive time takes transmit full file file play rate required server bandwidth providing immediate realtime service client using hmsm n2 approximately equal 10 streams file play rate efficient hmsm techniques n 2 defined eavz00 finally slow logarithmic increase required server bandwidth function client request rate implies hmsm delivery technique could used offer new service clients join live multicast begun namely client could start earlier point multicast catch live multicast stream without much increase server bandwidth expended live multicast note also like multicast delivery methods examined paper hmsm delivery technique dependent particular form multicast support network ip multicast applicationlevel multicast broadband satellite cable broadcast multicast mechanisms used deliver hmsm data streams ongoing research includes 1 designing hmsm policies composite objects clients heterogeneous receive bandwidths storage capacities 2 evaluating impact file indexing client interactive functions required server bandwidth hmsm 3 developing optimal realtime delivery techniques support recovery packet loss 4 developing optimized caching models strategies eafv99 eafv00 hmsm systems 5 designing evaluating disk load balancing strategies hmsm systems 6 design implementation prototype system supports experimental evaluation alternative delivery techniques caching strategies r optimal piggyback merging policies videoondemand systems permutation based pyramid broadcasting scheme video ondemand systems analysis educational media server workloads tailored transmissions efficient nearvideoondemand service optimizing patching performance improving videoondemand server efficiency stream tapping scheduling policies ondemand video server batching dynamic skyscraper broadcasts videoondemand optimized regional caching ondemand data delivery optimized caching systems heterogeneous client populations optimal efficient merging schedules videoon demand servers bandwidth skimming technique costeffective video ondemand supplying instantaneous videoondemand services using controlled multicast reducing io demand videoondemand storage servers skyscraper broadcasting new broadcasting scheme metropolitan videoon demand systems patching multicast technique true videoondemand services fast data broadcasting receiving scheme popular video service queueing systems vol merging video streams multimedia storage server complexity heuristics hybrid broadcasting protocol video demand comparing random data allocation data striping multimedia servers optimal patching schemes efficient multimedia streaming metropolitan area videoondemand service using pyramid broadcasting tr ctr yi cui klara nahrstedt layered peertopeer streaming proceedings 13th international workshop network operating systems support digital audio video june 0103 2003 monterey ca usa zheng guobin shen shipeng li distributed prefetching scheme random seek support peertopeer streaming applications proceedings acm workshop advances peertopeer multimedia streaming november 1111 2005 hilton singapore chowsing lin yichi cheng p2mcmd scalable approach vod service peertopeer networks journal parallel distributed computing v67 n8 p903921 august 2007 yanping zhao derek l eager mary k vernon scalable ondemand streaming nonlinear media ieeeacm transactions networking ton v15 n5 p11491162 october 2007 liqi shi phillipa sessini anirban mahanti zongpeng li derek l eager scalable streaming heterogeneous clients proceedings 14th annual acm international conference multimedia october 2327 2006 santa barbara ca usa klara nahrstedt bin yu jin liang yi cui hourglass multimedia content service composition framework smart room environments pervasive mobile computing v1 n1 p4375 march 2005 juan segarra vicent cholvi convergence periodic broadcasting videoondemand computer communications v30 n5 p11361141 march 2007 marcus rocha marcelo maia talo cunha jussara almeida srgio campos scalable media streaming interactive users proceedings 13th annual acm international conference multimedia november 0611 2005 hilton singapore marcelo maia marcus rocha talo cunha jussara almeida srgio campos network bandwidth requirements optimized streaming media transmission interactive users proceedings 12th brazilian symposium multimedia web november 1922 2006 natal rio grande norte brazil xiaobo zhou chengzhong xu efficient algorithms video replication placement cluster streaming servers journal network computer applications v30 n2 p515540 april 2007 anirban mahanti derek l eager mary k vernon david j sundaramstukel scalable ondemand media streaming packet loss recovery ieeeacm transactions networking ton v11 n2 p195209 april meng guo mostafa h ammar ellen f zegura selecting among replicated batching videoondemand servers proceedings 12th international workshop network operating systems support digital audio video may 1214 2002 miami florida usa anirban mahanti derek l eager mary k vernon david sundaramstukel scalable ondemand media streaming packet loss recovery acm sigcomm computer communication review v31 n4 p97108 october 2001 haonan tan derek l eager mary k vernon hongfei guo quality service evaluations multicast streaming protocols acm sigmetrics performance evaluation review v30 n1 june 2002 bashar qudah nabil j sarhan towards scalable delivery video streams heterogeneous receivers proceedings 14th annual acm international conference multimedia october 2327 2006 santa barbara ca usa haonan tan derek l eager mary k vernon delimiting range effectiveness scalable ondemand streaming performance evaluation v49 n14 p387410 september 2002 niklas carlsson derek l eager mary k vernon multicast protocols scalable ondemand download performance evaluation v63 n9 p864891 october 2006 huadong g kang shin weibiao wu besteffort patching multicast true vod service multimedia tools applications v26 n1 p101122 may 2005 wuntat chan takwah lam hingfung ting prudence w h wong online stream merging general setting theoretical computer science v296 n1 p2746 4 march yanping zhao derek l eager mary k vernon network bandwidth requirements scalable ondemand streaming ieeeacm transactions networking ton v15 n4 p878891 august 2007 xiaobo zhou chengzhong xu harmonic proportional bandwidth allocation scheduling service differentiation streaming servers ieee transactions parallel distributed systems v15 n9 p835848 september 2004 shudong jin azer bestavros g ismo ying cai zhan chen wallapak tavanapong caching collaboration cache allocation peertopeer video systems multimedia tools applications v37 n2 p117134 april 2008 zongpeng li anirban mahanti progressive flow auction approach lowcost ondemand p2p media streaming proceedings 3rd international conference quality service heterogeneous wiredwireless networks august 0709 2006 waterloo ontario canada stergios v anastasiadis rajiv g wickremesinghe jeffrey chase circus opportunistic block reordering scalable content servers proceedings 3rd usenix conference file storage technologies march 3131 2004 san francisco ca shudong jin azer bestavros scalability multicast delivery nonsequential streaming access acm sigmetrics performance evaluation review v30 n1 june 2002 stergios v anastasiadis kenneth c sevcik michael stumm scalable faulttolerant support variable bitrate data exedra streaming server acm transactions storage tos v1 n4 p419456 november 2005