structure value modularity software design concept information hiding modularity cornerstone modern software design thought formulation remains casual emphasis changeability imperfectly related goal creating added value given context need better explanatory prescriptive models nature value information hiding evaluate potential new theorydeveloped account influence modularity evolution computer industryto inform software design theory uses design structure matrices model designs real options techniques value test potential utility theory software apply parnass kwic designs contribute extension design structure matrices show options results consistent parnass conclusions results suggest theory potential help inform software design b figure 1 elementary dsm three design parameters groups interdependent design parameters clustered protomodule show decisions managed collectively single design task see figure 2 dark lines denote desired protomodule clusters essence protomodule composite design parameter true module lexicon baldwin clark marks rows columns outside bounding box cluster connecting modules protomodules system x x figure 2 clustered prot omodular design merely clustering cannot convert monolithic design comprising one large tightly coupled protomodule modular design interdependent parameter cycles must broken define modules reasonable size complexity breaking cycle two interdependent parameters like b c requires additional step called splitting first step splitting identifies cause cyclesay shared data structure definitionand splits design parameter b c longer cyclically depend instead taking simple hierarchical dependence however b c must still wait completion ds design process order undertake counter design represented dsm modularized process splitting introduction design rules design rules additional design parameters decouple otherwise linked parameters asserting global rules rest design parameters must follow thus design rules de facto hierarchical parameters respect parameters dsm prevalent kind design rule software module interface example dsm figure 2 interface rule could added asserts implementation b access implementation interface defined thus could change details implementation freely without affecting b long interface changed well effects splitting b c adding design rules break nonmodular dependencies shown figure 3 eport cs 200113 submitted publication esecfse 2001 ai bc dia bc b c interface bc interface bc data struct figure 3 modular dsm resulting splitting adding design rules clustering baldwin clarks terminology design rule part visible module module depends design rules hidden module hidden module adapted improved without affecting modules application second operator called substitution splitting substitution operations examples six atomic modular operators baldwin clark introduced parsimoniously intuitively describe operations modular designs evolve others augmentation adds module system exclusion removes module standardizes common design element porting transports module use another system address operators paper 33 net options value modular design modularizations equally good thus evolving design useful able evaluate alternative paths based quantitative models value models need perfect essential capture important terms assumptions operation known understood analysts evaluate predictions 331 introduction real options concepts baldwin clarks theory based idea modularity design multiplies decentralizes real options increase value design monolithic system replaced whole one option replace exercising requires good bad parts new system accepted sense designer one option portfolio assets system two modules contrast kept either new modules accepted total four options designer accept good new modules contrast designer portfolio options modules system key result modern finance shows else remaining equal portfolio options worth option portfolio baldwin clarks theory defines model reasoning value added base system modularity formalize options value modular operator much worth able substitute modules augment etc 332 net options value modular design paper address substitution options splitting design n modules increases base value s0 fraction obtained summing net option values novi resulting options r nov benefit gained exercising option optimally accounting payoffs exercise costs baldwin clark present model calculating nov module creates opportunity invest k experiments create candidate replacements b cost related complexity module c results better existing choice substitute best cost related visibility module modules system first module sini12qki expected benefit best ki independently developed candidate replacements certain assumptions distribution values ciniki cost run ki experiments function ci module complexity ni cost replace module given number modules system directly depend complexity ni cost redesign parameters max picks number experiments ki maximizes gain module figure 4 presents typical scenario module valueadded increases number experiments better candidates found experiment costs meet diminishing returns max peak case six experiments maximizes net gain expected add 41 value existing module040302010 number experiments figure 4 value added k experiments novi formula assumes value added candidate replacement random variable normally distributed value existing module choice normalized zero variance si2ni reflects technical potential si module standard deviation returns complexity ni module assumption normal distribution consistent empirical observation high low outcomes rare middle outcomes common qk represents expected value best k independent draws standard normal distribution assuming positive maximum order statistic sample size k 4 overview analysis approach initial test potential dsms nov improve software design apply ideas reformulation parnass comparative analysis modularizations kwic program compute permuted indices 1 use kwicas eport cs 200113 submitted publication esecfse 2001 benchmark assessing concepts software design well established 79 parnas presents two modularizations traditional strawman based sequence abstract steps converting input output new one based information hiding new design used abstract data type interfaces decouple key design decisions involving data structure algorithm choices could changed without unduly expensive ripple effects parnas presents comparative analysis changeability two designs postulates changes assesses well modularization accommodate measured number modules would redesigned change finds informationhiding modularization better concludes designers prefer use information hiding design process begin design identifying decisions likely change define module hide decision reformulation parnass example given two basic steps first develop dsms two modularizations order answer several questions dsms presented baldwin clark well works eppinger steward 510 invented dsms expressive capacity capture relevant information parnas examples dsms reveal key aspects designs learn anything use dsms model software second apply baldwin clarks substitution nov model compute quantitative values two modularizations using parameter values derived information dsms combined judgments designer results backoftheenvelope predictions precise market valuations yet useful revealing answer two questions dsms contain information need justify estimates values nov parameters results comport accepted conclusions parnas evaluation revealed one shortcoming dsm framework relative needs dsms used baldwin clark earlier work appear model environment design embedded consequently unable model forces drove design changes parnas hypothesized kwic thus dsms defined permit sufficiently rich reasoning change provide enough information justify estimates environmentdependent technical potential parameters nov model thus extended dsm modeling framework model call environment parameters ep call models environment design structure matrices edsm dps control designer even design rules changed albeit possibly great cost however designer control eps extension edsm framework appears novel useful particular captures number important issues software design least case parnas modularization allows us infer parnass tacit assumptions change drivers next section presents dsms parnass kwic next present nov results finally close discussion 5 dsmbased analysis kwic first modularization parnas describes five modules input circular shift alphabetizing output master control concludes defining documents would include number pictures showing core format pointer conventions calling conventions etc interfaces four modules must specified work could beginthis modularization sense meant proponents modular programming system divided number modules welldefined interfaces one small enough simple enough thoroughly understood well programmed 8 51 dsm model strawman design surmise parnas viewed module interface comprising two parts exported data structure procedure invoked master control thus took choice data structures procedure declarations algorithms dps design resulting dsm presented figure 5 dps g j model procedure interfaces design rules running input shift sort output algorithms b e h k model data structure choices design rules parnas states agreement occur independent module implementation begin c f l model remaining unbound parameters choices algorithms manipulate fixed data structures dp dependencies derived directly parnass definitions g j input type g alph type data alph data x x alph alg figure 5 dsm strawman modularization dsm immediately reveals key properties design first design modularization parnas claims designers develop parts independently revealed absence unboxed marks lower right quadrant dsm second small partthe algorithmsis hidden independently changeable third algorithms tightly constrained data structure design rules moreover data structures interdependent knot upper left quadrant shift data structure points line data structure alphabetized structure identical shifted structure etc change thus doubly constrained algorithms constrained data structure rules rules would hard change tight interdependence eport cs 200113 submitted publication esecfse 2001 52 dsm model pre modular design declaring data structures design rules designer asserts little gain letting change parnass analysis reflects costly problems arise designer makes mistake prematurely accepting conclusion basing modularization furthermore see design also flawed design parameters limits valuable innovation designer cut potentially valuable parts design space one insight emerging work value declining modularize topography value landscape understood conclusion consistent baldwin clarks view designers must know parameter interdependencies formulate sensible design rules requisite knowledge isnt designers attempt modularize anyway resulting systems miss high peaks value end may work p 260 letting design rules revert normal design parameters clustering data structures respective algorithms interdependent produces dsm figure 6 dsm displays typical diagonal symmetry outlying marks indicating nonmodular design necessarily changed code design design process fundamentally different rather design overconstrained draconian design rules sense potentially complex design process meetings among many designers apparent innovative adaptive changes circular shifter might upstream impacts line store examplea kind change parnas consider analysis type data alg g alph type alph data alph alg figure 53 dsm information hiding design line store implicitly bundled input data protomodule prime target modularization many parameters depend vice versa splitting line store input giving interface design rule typical design step resolving problem alternative might merely put interface pair keep single module however dsm show line store doubleduty buffer input algorithm well serving downstream clients thus r appropriate split two protomodules modularized establishing interface design rules resulting dsm shown figure 7 notable design hidden information parameters l figure earlier designs see model permits complex innovation major system components increasing net options value design type g alph type x x x x x x x x line data data alg alph data alph alg x x figure 7 dsm information hiding modularization 54 introducing environment parameters evaluate adequacy dsms represent information needed reason modular design style parnas find dsm part incomplete particular make informed decisions choice design rules clustering design parameters found needed know changes environment would affect example perceive value splitting apart line store input design parameters perceiving independently affected different parameters environment instance input affected operating system line store affected size corpus indeed fitness functions found evolutionary theories complex adaptive systems baldwin clarks theory instance parameterized environment surprisingly perhaps also finding difficult estimate baldwin clarks technical potential term nov formula models likelihood changing module generate value dependent environmental conditions eg might change required paper address lack extension dsm framework introduce environment parameters ep model environments key property ep distinct dp designer control ep designers might able influence eps however call extended models environment design structure matrices edsms figure 8 presents edsm strawman kwic design eport cs 200113 submitted publication esecfse 2001 x type g alph type data alph data alg x x alph alg x computer figure 8 edsm strawman modularization rows columns edsm indexed eps dps eps first convention upper left block edsm thus models interactions among eps middle left block impact eps design rules lower left block impact hidden dps lower right block basic dsm partitioned highlight drs upper right block models feedback influence design decisions dps environment eps applying edsm concept parnass example reveals edsm provides clear visual representation genuine information hiding particular subblock edsm eps intersect drs blank indicating design rules invariant respect changes environment decisions hidden within modules change eps change design rulesthe load bearing walls system make ideas concrete context kwic case study parnas implicitly valued kwic designs environment made likely certain design changes would needed noted several decisions questionable likely change many circumstances p 305 input format character representation whether circular shifter precompute shifts compute fly similar considerations alphabetization changes said depend dramatic change input size dramatic change amount memory remains unclear parnass analysis forces would lead changes use computing infrastructure also know possible changes ruled likely time programs written assembler parnas concerned new computer new instruction set would render program inoperable dramatic change input size memory size could certainly accompanied change z x input type g alph type alph data alph alg figure 9 edsm inferred proto modular design x type g alph type line data alph data alph alg x x x x x x x x x x x computer figure 10 edsm information hiding modularization focusing whether internal design decisions questionable rather external forces would bring question scope considerations kept artificially narrow long ago using ascii text would unquestionable today internationalization makes turning design decisions explicit eps issues perhaps discovered accounted produce effective informationhiding designs make idea concrete illustrate extending dsms kwic begin hypothesizing three eps parnas might selected appear implied analysis computer configuration eg device capacity eport cs 200113 submitted publication esecfse 2001 corpus properties input size languageeg japanese user profile eg computer savvy interactive offline figure 8 9 10 edsms strawman pre modular information hiding designs respectively key characteristic strawman edsm drs invariant eps make key observation strawman informationhiding modularization sense baldwin clark designers change nondr dps algorithms independently informationhiding design sense parnas basic dsms alone insufficient represent parnass idea could annotated dps change probabilities would still miss essence loadbearing walls information hiding design drs invariant respect changes environment edsm notation expresses idea clearly figure 9 edsm premodular design data structures locked drs remaining drs procedure type signatures invariant eps extensive dependencies protomodule drs suggest changes eps costly ripple effects design evolution challenge edsm presents split protomodules way create new epdependent drs figure models result parnass information hiding design edsm highlights invariance drs eps sector eps meet drs 6 novbased analysis kwic apply nov model model much flexibility worth parnas designs fraction value base system taking parnass notion information hiding account analysis illustrative course outputs function inputs justify estimates model parameters using edsms reasonable back oftheenvelope assumptions benefit mathematical model supports rigorous sensitivity analysis analysis beyond scope paper pursue issue future make following assumptions use following notations analysis n number design parameters given design protomodular strawman modularizations 13 information hiding design given module p parameters complexity pn value one experiment unmodularized design sn12q1 1 value original system design cost c1n design parameter cost redesign whole system cn 1 visibility cost module size n icn one experiment unmodularized system breaks even balwin clark make breakeven assumption example book 1 given system size implies choice technical potential unmodularized design r case 25 take maximum technical potential module modularized version assumption unmodularized kwic modeling assumption precisely justified estimate practice designer would justify choices parameter values model baldwin clark quite sensitive technical potential give little guidance estimate observed environment determines whether variants design likely added value little added value gained replacing module given environment matter complex means module low technical potential chose estimate technical potential module system technical potential scaled fraction eps relevant module scaled technical potential modules strawman design 05 two reasons first half interactions eps strawman design design rules see visibility makes cost change prohibitive second judgment callthe hidden modules design algorithms tightly constrained design rules data structures assumed change would appear little gained varying algorithm implementations alone figure 11 shows assumptions technical potential modules strawman informationhiding designs strawman info hiding module name sigma z sigma z design rules 25 1 line storage na na 16 0 input 125 0 25 0 circular shift 125 0 25 0 alphabetizing 125 0 25 0 output figure 11 assumed technical potential visibility figures 12 present nov data per module figure 13 corresponding plots information hiding design figure 14 presents plots strawman option value module value peak omit disaggregated data strawman design matters bottom line summing module novs gives system nov 026 strawman design 156 informationhiding design numbers percentages value non modularized system base value 1 thus value system informationhiding design 26 times system unmodularized design strawmans worth 126 times much thus informationhiding version system twice valuable strawman ignoring base value focusing modularity observe informationhiding design provides 6 times value form modularitythan strawmans design eport cs 200113 submitted publication esecfse 2001 baldwin clark acknowledge designing modularizations free done costs amortized future evolution nov model ignores costs accounting important included model doubtful anywhere near 150 system value hand would come much closer 26 would tend reduce value added strawman modularization design rules 0 13 16 19 225 256 288 32 35 381 41 0 alpha mscon fig 12 option values information hiding design040 02 04 number experiments line store input cirshift alpha output master cont figure 13 options values information hiding design0101 02 03 04 number experiments input cirshift alpha output mscontrol figure 14 options values strawman design 7 discussion conclusion parnass informationhiding criterion modularity enormously influential computer science qualitative method lacking independent evaluation criterion possible perform precise comparison differing designs deriving desiderata paper novel application baldwin clarks options theoretic method modular design valuation subject informationhiding modularity goal lend insight informationhiding modularity ability options theory capture parnass intent designing change provided early validation application method software design reformulating parnass kwic modularizations baldwin clark framework baldwin clarks method two main components design structure matrix dsm net option value formula nov dsms provide intuitive qualitative framework design nov quantifies consequences particular design thus permitting precise comparison differing designs system shown tools provide significant insight modularity design software yet precisely modeling parnass informationhiding criterion requires explicitly modeling environmentthe context software intended usedin order capture notion design stability face change model environment extending dsms include environment parameters alongside traditional design parameters environment parameters inform estimation technical potential nov computation process learned parnas largely conceived change terms intrinsic properties design rather terms properties environment software embedded extensions baldwin clark model able model parnas designs quantitatively show set assumptionsthat informationhiding design indeed superior consistent accepted results parnas result value least three dimensions first provides quantitative account benefits good design second provides limited significant evidence models potential aid technical decisionmaking design value added explicit objective function paper thus early result emerging area strategic software design 4 aims descriptive prescriptive theoretical account software design valuemaximizing investment activity third result supports investigation implications follow acceptance model example value option increases technical potential risk modularity creates seemingly paradoxical incentives seek risks software design provided managed active creation exploitation options paradox resolved large part options model clarifies one right requirement exercise option thus downside risk cost largely limited purchase option introduction also raised question right time modularize commit software architecture eport cs 200113 submitted publication esecfse 2001 parnass method says write design decisions likely change design modules hide implicitly encourages programmers modularize early stages design nov calculations two kwic modularizations make possible consequences clear without knowledge environment parameters designer might rush implement strawman design effectively sacrificing opportunity profit superior modularization yet designers often luxury wait sufficient information choose optimal modularization may difficult precisely estimate environment going changeinnovation competitive marketplaces hard predict moreover many best ideas come users software uncertainty almost certain product released new design techniques create options delay modularizing sufficient information available might explored possible solution conundrum inclusion environment parameters design process additional implications example making parameters requires able sense changing influence slow change possible careful design coupling development process environment critical strategic software design example parameters whose values subject change sensor technologiesperhaps simple mailing list standardssetting committeecan help detect changes report designers timely fashion conversely lobbying standardssetting organization say deprecate interfaces rather change outright slow environmental change thus accommodating environmental change limited anticipating change originally stated parnas includes generally responsiveness change manipulation change paper represents first step validation baldwin clarks optiontheoretic approach quantifying value modularity software additional studies required adequately validate theory provide insight practical application also paper study found difficult estimate technical potentials modules despite added resolution provided environment parameters validation industrial project would provide realistic scale would also considerable historical data draw upon computation nov studies would help move field software design path powerful quantitative models design acknowl edgments work supported part national science foundation grants ccr9804078 ccr9970985 itr 0086003 discussions graduate students university virginia cs 851 spring 2001 helpful r design rules power modularity using tools compose systems criteria used decomposing system modules candidate model problems software architecture tr using tool abstraction compose systems software design extreme programming explained software economics criteria used decomposing systems modules design rules value based software reuse investment software design decisions real options ctr verifying design modularity hierarchy interaction locality using data clustering techniques proceedings 45th annual southeast regional conference march 2324 2007 winstonsalem north carolina yuanyuan song adaptation hiding modularity selfadaptive systems companion proceedings 29th international conference software engineering p8788 may 2026 2007 neeraj sangal ev jordan vineet sinha daniel jackson using dependency models manage complex software architecture acm sigplan notices v40 n10 october 2005 mikio aoyama sanjiva weerawarana hiroshi maruyama clemens szyperski kevin sullivan doug lea web services engineering promises challenges proceedings 24th international conference software engineering may 1925 2002 orlando florida barry boehm li guo huang valuebased software engineering case study computer v36 n3 p3341 march sushil krishna bajracharya trung chi ngo cristina videira lopes using net options value value based design framework acm sigsoft software engineering notes v30 n4 july 2005 john hunt john mcgregor series choices variability development process proceedings 44th annual southeast regional conference march 1012 2006 melbourne florida rami bahsoon wolfgang emmerich economicsdriven software mining proceedings first international workshop economics software computation p3 may 2026 2007 yuanfang cai kevin j sullivan valueoriented theory modularity design acm sigsoft software engineering notes v30 n4 july 2005 sunny huynh yuanfang cai evolutionary approach software modularity analysis proceedings first international workshop assessment contemporary modularization techniques p6 may 2026 2007 yuanfang cai kevin j sullivan simon modeling analysis design space structures proceedings 20th ieeeacm international conference automated software engineering november 0711 2005 long beach ca usa yuangfang cai sunny huynh evolution model software modularity assessment proceedings 5th international workshop software quality p3 may 2026 2007 kevin sullivan william g griswold yuanyuan song yuanfang cai macneil shonle nishit tewari hridesh rajan information hiding interfaces aspectoriented design acm sigsoft software engineering notes v30 n5 september 2005 barry boehm valuebased software engineering acm sigsoft software engineering notes v28 n2 march cristina videira lopes sushil krishna bajracharya analysis modularity aspect oriented design proceedings 4th international conference aspectoriented software development p1526 march 1418 2005 chicago illinois barry boehm valuebased software engineering reinventing acm sigsoft software engineering notes v28 n2 march