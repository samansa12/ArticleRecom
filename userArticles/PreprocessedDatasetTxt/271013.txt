structuring communication software qualityofservice guarantees abstracta growing number realtime applications require qualityofservice qos guarantees underlying communication subsystem communication subsystem host network must support realtime communication services provide required qos applications paper propose architectural mechanisms structuring host communication software provide qos guarantees particular present evaluate qossensitive communication subsystem architecture end hosts provides realtime communication support generic network hardware architecture provides services managing communication resources guaranteedqos realtime connections admission control traffic enforcement buffer management cpu link scheduling design architecture based three key goals maintenance qosguarantees perconnection basis overload protection established connections fairness delivered performance besteffort trafficusing architecture implement realtime channels paradigm realtime communication services packetswitched networks proposed architecture features processperchannel model associates channel handler established channel model employed handler execution one cooperative preemption executing handler yields cpu waiting higherpriority handler welldefined preemption points architecture provides several configurable policies protocol processing overload protection present extensions admission control procedure realtime channels account cooperative preemption overlap protocol processing link transmission sending host evaluate implementation demonstrate efficacy architecture maintains qos guarantees outgoing traffic adhering stated design goals evaluation also demonstrates need specific features policies provided architecture subsequent work refined architecture used realize fullfledged guaranteedqos communication service performs qossensitive resource management outgoing well incoming traffic b introduction distributed multimedia applications eg video conferenc ing videoondemand digital libraries distributed realtime commandcontrol systems require certain qualityof service qos guarantees underlyingnetwork qos guarantees may specified terms parameters endtoend delay delay jitter bandwidth delivered connection additional requirements regarding packet loss inorder delivery also specified support applications communication subsys work reported paper supported part national science foundation grant mip9203895 office naval research grants n000149410229 opinions findings conclusions recommendations expressed paper authors necessarily reflect views nsf onr tem end hosts network must designed provide perconnection qos guarantees assuming network provides appropriate support establish maintain guaranteedqos connections focus design host communication subsystem maintain qos guarantees protocol processing large data transfers common multimedia applications quite expensive resource management policies geared towards statistical fairness andor timesharing introduce excessive interference different connections thus degrading delivered qos individual connections since local delay bound node may fairly tight unpredictability excessive delays due interference different connections may even result qos violations performance degradation eliminated designing communication subsystem provide maintenance qos guarantees ii overload protection via perconnection traffic enforcement iii fairness besteffort traf fic requirements together ensure perconnection qos guarantees maintained number connections perconnection traffic load increases paper propose evaluate qossensitive communication subsystem architecture guaranteedqos connections focus architectural mechanisms used within communication subsystem satisfy qos requirements connections without undue degradation performance besteffort traffic qos guarantees proposed architecture applicable proposals guaranteedqos connections 3 focus realtime channels paradigm guaranteedqos communication services packetswitched networks 16 architecture features processperchannel model protocol processing coordinated unique channel handler created successful channel establishment service within channel fifo qos guarantees multiple channels provided via appropriate cpu scheduling channel handlers link scheduling packet transmissions traffic isolation channels facilitated via perchannel traffic enforcement interaction cpu link schedulers application programming interface admission control connection api entryexit packet transmission adapter cpu scheduler signal packet transmission completion interrupt device driver operations notification packet transmission initiation packet transmissions packets fragmentation encapsulation data messages feedback buffering queueing suspendyield resume protocol processing overall architecture b protocol processing figure 1 desired software architecture implemented architecture using modified xkernel 31 14 communication executive exercising complete control motorola 68040 cpu configuration avoids interference computation operating system activities host allowing us focus communication subsystem evaluate implementation different traffic loads demonstrate efficacy maintains qos guarantees realtime channels provides fair performance besteffort traf fic even presence illbehaved realtime channels endtoend guarantees resource management within communication subsystem must integrated applications proposed architecture directly applicable portion host processing capacity reserved communicationrelated activities 21 17 proposed architectural extensions realized server appropriate capacity reserves andor execution priority implementation indeed server executing standalone configuration importantly approach decouples protocol processing priority ap plication believe protocol processing priority connection must derived qos requirements traffic characteristics runtime communication behavior application connection integration proposed architecture resource management applications addressed forthcoming paper section 2 discusses architectural requirements guaranteedqos communication provides brief description realtime channels section 3 presents qossensitive communication subsystem architecture realizing requirements section 4 describes implementation section 5 experimentally evaluates efficacy proposed architecture section 6 discusses related work section 7 concludes paper 2 architectural requirements guaranteed qos communication guaranteedqos communication 3 consider unidirectional data transfer source sink via intermediate nodes data delivered sink order generated source corrupted delayed lost data little value continuous flow timesensitive data insufficient time error recovery thus consider data transfer unreliabledatagram semantics acknowledgements retransmissions provide perconnection qos guarantees host communication resources must managed qossensitive fashion ie according relative importance connections requesting service host communication resources include cpu bandwidth protocol processing link bandwidth packet transmissions buffer space figure 1a illustrates generic software architecture guaranteedqos communication services host components constituting architecture follows application programming interface api api must export routines set teardown guaranteedqos con nections perform data transfer connections signalling admission control signalling protocol required establishtear guaranteedqos connections across communicating hosts possibly via multiple network nodes communication subsystem must keep track communication resources perform admission control new connection requests establish connection state store connection specific information network transport protocols needed unidirectional reliable unreliable data transfers traffic enforcement provides overload protection established connections forcing application conform traffic specification required session level may also required link level link access scheduling link abstraction link bandwidth must managed active connections receive promised qos necessitates abstracting link terms transmission delay bandwidth scheduling outgoing packets network access minimum requirement provision qos guarantees packet transmission time bounded predictable assuming support signalling focus components involved data transfer namely traffic enforcement protocol processing link transmission particular study architectural mechanisms structuring host communication software provide qos guarantees 21 qossensitive data transport figure 1b application presents api data messages transported guaranteedqos connec tion api must allocate buffers data queue appropriately conformant data per traffic specifica tion forwarded protocol processing transmission maintenance perconnection qos guarantees protocol processing involves least fragmentation application messages including transport network layer encapsulation packets length smaller certain maximum typically mtu attached network additional computationally intensive services eg coding compression checksums may also performed protocol processing qossensitive allocation processing bandwidth necessitates multiplexing cpu amongst active connections control cpu scheduler must provide deadlinebased prioritybased policies scheduling protocol processing individual connections nonpreemptive protocol processing connection implies cpu reallocated another connection processing entire message resulting coarser temporal grain multiplexing making admission control less effective importantly admission control must consider largest possible message size maximum number bytes presented application one request across connections including besteffort traffic maximum message size guaranteedqos connections derived attributes frame size multimedia applications besteffort traffic may known priori thus mechanisms suspend resume protocol processing connection needed protocol processing connection may also need suspended available packet buffers packets generated via protocol processing cannot directly transmitted link would result fifo ie qosinsensitive consumption link bandwidth stead forwarded link scheduler must provide qossensitive policies scheduling packet trans missions link scheduler selects packet initiates packet transmission network adapter notification packet transmission completion relayed link scheduler another packet transmitted link scheduler must signal cpu scheduler resume protocol processing connection suspended earlier due shortage packet buffers overload protection via perconnection traffic enforce ment mentioned earlier conformant data forwarded protocol processing transmission necessary since qos guarantees based connections traffic specification connection violating traffic specification allowed consume communication resources reserved traffic specification violations one connection affect qos guarantees connections performance delivered besteffort traffic accordingly communication subsystem must police perconnection traffic general parameter constituting traffic specification eg rate burst length must policed individually important issue handling nonconformant traffic could buffered shaped conformant provided degraded qos treated besteffort traffic dropped altogether certain situations buffer overflows may necessary block application buffer space becomes available although may interfere timing behavior application appropriate policy therefore applicationdependent buffering nonconformant traffic till becomes conformant makes protocol processing nonworkconserving since cpu idles even work available discussion corresponds option alternately protocol processing workconserving cpu scheduling mechanisms ensuring qossensitive allocation cpu bandwidth connections workconserving protocol processing potentially improve cpu utilization since cpu idle work available unused capacity utilized execute besteffort activities background computations one also utilize cpu bandwidth processing nonconformant traffic assuming pending besteffort traf fic free cpu processing capacity subsequent messages absence besteffort traffic workconserving protocol processing also improve average qos delivered individual connections especially link scheduling workconserving fairness besteffort traffic besteffort traffic includes data transported conventional protocols tcp udp signalling guaranteedqos connections unduly penalized nonconformant realtime traffic especially workconserving processing 22 realtime channels several models proposed guaranteedqos communication packetswitched networks 3 architectural mechanisms proposed paper applicable proposed models focus realtime channels 9 16 realtime channel simplex fixed route virtual connection source destination host sequenced messages associated performance guarantees message delivery therefore conforms connection semantics mentioned earlier traffic qos specification traffic generation realtime channels based linear bounded arrival process 8 2 characterized three parameters maximum message size mmax bytes maximum message rate rmax messagessecond maximum burst size bmax mes sages notion logical arrival time used enforce minimum separation messages realtime channel ensures channel use resources reserved expense chan nels qos realtime channel specified desired deterministic worstcase bound endtoend delay experienced message see 16 details resource management admission control realtime channels provided algorithm order 16 uses fixedpriority scheduling computing worstcase delay experienced channel link runtime link scheduling hand governed multiclass variation earliestdeadlinefirst edf policy 23 performance related considerations provide deterministic qos guarantees communica tion processing costs overheads involved managing using resources must accounted processing costs include time required process transmit message overheads include preemption costs context switches cache misses costs accessing ordered data structures handling network inter rupts important keep overheads low predictable low variability reasonable worstcase estimates obtained resource management policies must maximize number connections accepted api entryexit handler run queue assignment cpu packet transmission link scheduler message queue handler api entryexit handler run queue assignment cpu packet reception channel message queue assignment handler packet queue source host b destination host figure 2 proposed architecture service addition processing costs implementation overheads factors affect admissibility include relative bandwidths cpu link coupling cpu link bandwidth allocation recent paper 19 studied extent factors affect admissibility context realtime channels 3 qossensitive communication architecture processpermessage model 23 process thread shepherds message protocol stack besides eliminating extraneous context switches encountered processperprotocol model 23 also facilitates protocol processing scheduled according variety policies opposed softwareinterrupt level processing bsd unix however processpermessage model introduces additional complexity supporting qos guarantees creating distinct thread handle message makes number active threads function number messages awaiting protocol processing channel consume kernel resources process control blocks kernel stacks also increases scheduling overheads typically function number runnable threads dynamic scheduling envi ronments importantly processpermessage model relatively harder maintain channel seman tics provide qos guarantees perform perchannel traffic policing example bursts channel get translated bursts processes scheduling queues making harder police illbehaved channels ensure fairness besteffort traffic scheduling overhead becomes unpredictable making worstcase estimates either overly conservative impossible provide since qos guarantees specified perchannel ba sis suffices single thread coordinate access resources messages given channel employ processperchannel model qossensitive extension processperconnection model 23 processperchannel model protocol processing channel coordinated unique channel handler lightweight thread created successful establishment channel unique perchannel handlers cpu scheduling overhead function number active channels messages waiting trans ported since number established channels hence number active channels varies much slowly compared number messages outstanding active channels cpu scheduling overhead significantly predictable discuss later processperchannel model also facilitates perchannel traffic enforcement fur ther since reduces context switches scheduling heads model likely provide good performance connectionoriented besteffort traffic figure 2 depicts key components proposed architecture source transmitting destination ceiving hosts components involved data transfer shown associated channel message queue fifo queue messages processed channel handler source received application destination channel also associated packet queue fifo queue packets waiting transmitted link scheduler source reassembled channel handler destination transmissionside processing figure 2a invocation message transmission transfers control api traffic enforcement traffic shaping deadline assign ment message enqueued onto corresponding channels message queue subsequent processing channel handler based channel type channel handler assigned one three cpu run queues execution described section 31 executes infinite loop dequeueing messages message queue performing protocol processing including fragmentation packets thus generated inserted channel packet queue one three outbound link packet queues corresponding link based channel type traffic gener ation transmitted link scheduler receptionside processing figure 2b received packet demultiplexed corresponding channels packet queue subsequent processing reassembly transmissionside processing channel handlers assigned one three cpu run queues execution execute infinite loop waiting packets arrive channel packet queue packets packet queue processed transferred channels reassembly queue last packet message arrives channel handler completes message reassembly inserts message corresponding message queue application retrieves message via apis receive routine intermediate nodes link scheduler relays arriving packets next node along route focus transmissionside processing sending host following discussion also applies receptionside processing message queue message queue semaphore packet queue packet queue semaphore deadlinepriority status type proxy process id deadlinepriority traffic specification qos specification relative channel priority local delay bound handler process id application requirements admission control buffer management protocol processing messages application channel message queue message processed completely channel packet queue inherit message deadline message early else initiate message processing initialize block count packet buffers available enqueue packet else suspend buffer available decrement block count block count zero yield condition true yield cpu else reset block count continue else continue message processed completely dequeue message process packet enqueue packet link packet queues suspend message current channel state b handler execution profile figure 3 channel state handler profile 31 salient features figure 3a illustrates portion state associated channel host upon successful establishment channel assigned priority relative channels determined admission control procedure local delay bound computed admission control host used compute deadlines individual messages handler associated type execution deadline priority execution status runnable blocked etc addition two semaphores allocated channel han dler one synchronize message insertions channels message queue message queue semaphore synchronize availability buffer space channels packet queue packet queue semaphore channel handlers broadly classified two types besteffort realtime besteffort handler one processes messages besteffort channel realtime handlers classified current realtime early realtime current realtime handler one processes ontime messages obeying channels rate specification early realtime handler one processes early messages violating channels rate specification figure 3b shows execution profile channel handler source host handler executes infinite loop processing messages one time initialized simply waits messages process message queue message becomes available handler dequeues message inherits deadline message early handler computes time message become current suspends execution dura tion message current handler initiates protocol processing message creating packet handler checks space packet queue via packet queue semaphore automatically blocked space available packets created enqueued onto chan nels packet queue queue previously empty link packet queues also updated reflect channel packets transmit handler execution employs cooperative preemption currentlyexecuting handler relinquishes cpu waiting higherpriority handler processing block packets explained suffices nonworkconserving protocol processing mechanism needed continue handler execution case workconserving protocol process ing accordingly addition blocking handler fore channel proxy created behalf handler channel proxy thread simply signals blocked channel handler resume execution competes cpu access channel proxies order logical arrival time exits immediately handler already woken ensures handler made runnable proxy obtains access cpu handler becomes current note early handler must still relinquish cpu waiting handler already current maintenance qos guarantees perchannel qos guarantees provided via appropriate preemptive scheduling channel handlers nonpreemptive scheduling packet transmissions cpu scheduling prioritybased using relative channel priorities consider deadlinebased scheduling channel handlers proxies execution deadline channel handler inherited dynamically deadline message pro cessed execution deadline channel proxy derived logical arrival time message processed channel handlers assigned one two run queues based type besteffort realtime channel proxies representing early realtime traffic assigned separate run queue relative priority assignment handler run queues ontime realtime traffic gets highest protocol processing priority followed besteffort traffic early realtime traffic order provision qos guarantees necessitates bounded delays obtaining cpu protocol processing shown 19 immediate preemption executing lowerpriority handler results expensive context switches cache misses channel admissibility significantly improved preemption overheads amortized processing several packets maximum number packets processed block system parameter determined via experimentation given host architecture cooperative preemption provides reasonable mechanism bound cpu access delays improving utilization especially handlers execute within single kernel address space link bandwidth managed via multiclass nonpreemptive edf scheduling link packet queues organized similar cpu run queues link scheduling nonworkconserving avoid stressing resources downstream hosts general link allowed work ahead limited fashion per link horizon 16 overload protection perchannel traffic enforcement performed new messages inserted message queue packets inserted link packet queues message queue absorbs message bursts channel preventing violations bmax rmax csw context switch time ccm cache miss penalty 90 1st processing cost 420 processing cost 170 c l perpacket link scheduling cost 160 packets preemption points 4 pkts maximum packet size 4k bytes table 1 important system parameters channel interfering wellbehaved channels deadline assignment new messages checked violations mmax rmax inserting message message queue intermessage spacing enforced according min violations mmax logical interarrival time messages increased proportion extra packets message number packet buffers available channel determined product maximum number packets constituting message derived mmax maximum allowable burst length bmax workconserving processing possible packets generated handler cannot accommodated channel packet queue packet buffers available channel exhausted similar situation could arise nonworkconserving processing violations mmax handlers violating channels prevented consuming excess processing link capacity either blocking execution lowering priority relative wellbehaved channels blocked handlers subsequently woken link scheduler indicates availability packet buffers blocking handlers fashion also useful slowdown service provided channel propagates application via message queue message queue fills application blocked additional space becomes available al ternately messages overflowing queue dropped application informed appropriately note scheduling handlers packets provides isolation traffic different channels interaction cpu link schedulers helps police perchannel traffic fairness nonworkconserving processing early realtime traffic consume resources expense besteffort traffic workconserving process ing besteffort traffic given processing transmission priority early realtime traffic 32 cpu preemption delays overheads admission control procedure order must account cpu preemption overheads access delays due cooperative preemption overheads involved managing resources addition must account overlap cpu processing link transmission hence relative bandwidths cpu link companion paper 19 presented extensions order account abovementioned factors table 1 lists important system parameters used extensions 33 determination p l x p determine granularity cpu link respectively multiplexed channels thus determine channel admissibility host 19 selection p governed architectural characteristics host cpu table 1 given host architecture p selected channel admissibility maximized delivering reasonable data transfer throughput selected either using endtoend transport protocol performance hostadapter design characteristics general latency throughput characteristics adapter function packet size used pick packet size minimizes delivering reasonable data transfer throughput typical network adapter transmission time packet size l x depends primarily overhead initiating transmission time transfer packet adapter link latter function packet size data transfer bandwidth available host adapter memories data transfer bandwidth determined hostadapter design features pipelining queueing adapter raw link band width c x overhead initiate transmission adapter feeding link bandwidth b l bytessecond l x approximated l x data transfer bandwidth available tofrom host mem ory b x determined factors mode di rect memory access dma programmed io efficiency data transfer degree adapter pipelines packet transmissions c x includes cost setting dma transfer operations 4 implementation implemented proposed architecture using modified xkernel 31 communication executive 14 exercises complete control 25 mhz motorola 68040 cpu cpu bandwidth consumed communicationrelated activities facilitating admission control resource management realtime channels 1 xkernel v31 employs processpermessage protocolprocessingmodel prioritybased nonpreemptive scheduler levels cpu allocated highestpriority runnable thread scheduling within priority level fifo 41 architectural configuration realtime communication accomplished via connectionoriented protocol stack communication executive see figure 4a api exports routines channel establishment channel teardown data also supports routines besteffort data transfer network transport signalling provided 1 implementation receptionside architecture slight variation transmissionside architecture applications rpc network layer link access layer application programming interface name service rtc signalling traffic enforcement synchronization clockcurrent besteffort early context switch handlers designated priority level xkernel context switch xkernel run queues xkernel process edf handler run queues active handlers xkernel scheduler selection process run selection handler run edf scheduler xkernel protocol stack b layered edf scheduler figure 4 implementation environment resource reservation protocol layered top remote procedure call rpc protocol derived xkernels chan protocol network data transport provided fragmentation packetizes large messages communication resources multiplexed channels packetbypacket basis frag transport protocol modified unreliable version xkernels blast protocol timeout data retransmission operations disabled protocol stack also provides protocols clock synchronization network layer encapsulation network layer protocol connectionoriented provides networklevel encapsulation data transport across pointtopoint communication network link access layer provides link scheduling includes network device driver details protocol stack provided 15 42 realizing qossensitive architecture processperchannel model successful establishment channel allocated channel handler space message packet queues message packet queue semaphores workconserving protocol processing de sired channel proxy also allocated channel channel handler xkernel process provides thread control additional attributes type channel besteffort realtime flags encoding state handler execution priority deadline event identifier corresponding recent xkernel timer event registered handler order suspend execution message current handler utilizes x timer event facility event semaphore signaled timer expires channel proxy also xkernel process execution priority deadline states established channels maintained linked list updated channel signalling extended xkernels process management semaphore routines support handler creation termi nation synchronization message insertions availability packet buffers packet transmissions packet message must inherit transmission category available policies protocol processperchannel processing workconserving nonworkconserving cpu fixedpriority scheduling multiclass earliestdeadlinefirst handler cooperative preemption configurable execution number packets preemptions link multiclass earliestdeadlinefirst scheduling options 1 2 overload block handler decay handler deadline protection enforce min drop overflow messages table 2 implementation policies deadline assigned message modified blast protocol message manipulation routines xkernel associate message deadline packet outgoing packet carries global channel identifier allowing efficient packet demultiplexing receiving node cpu scheduling multiclass edf scheduling three distinct run queues maintained channel handlers one three classes mentioned section 31 similar link packet queues q1 priority queue implemented heap ordered handler deadline q2 implemented fifo queue q3 utilized protocol processing workconserving priority queue implemented heap ordered logical arrival time message processed handler channel proxies also realized xkernel threads assigned q3 since q3 lowest priority proxies interfere execution channel handlers multiclass edf scheduler layered xkernel scheduler figure 4b channel handler proxy selected edf run queues associated xkernel process inserted designated xkernel priority level cpu allocation xkernel sched uler realize design modified xkernels context switch semaphore process management routines ap propriately example context switch channel handlers involves enqueuing currentlyactive handler edf run queues picking another runnable handler invoking normal xkernel code switch process con texts support cooperative preemption added new routines check edf xkernel run queues waiting higherpriority handlers native xkernel processes spectively yield cpu accordingly link scheduling implementation configured link scheduling performed via function call currently executing handlers context interrupt context option 1 dedicated processthread option 2 new thread packet transmission option 3 demonstrated 19 option 1 gives best performance terms throughput sensitivity channel admissibility p focus option 1 organization link packet queues similar handler run queues except q3 used early packets protocol processing workconserving inserting packet appropriate link packet queue channel handlers invoke scheduler directly function call link busy ie packet transmission progress function returns immediately handler continues execution link idle current packets transferred q3 q1 highest priority packet selected transmission q1 q2 q1 q2 empty wakeup event registered time packet head q3 becomes current scheduler processing repeated network adapter indicates completion packet transmission wakeup event early packets expires traffic enforcement channels message queue semaphore initialized bmax messages overflowing message queue dropped packet queue semaphore initialized bmax delta n pkts maximum number outstanding packets permitted channel completion packets transmission channels packet queue semaphore signalled indicate availability packet buffers enable execution blocked handler overflow due violation mmax handlers prioritydeadline degraded proportion extra packets payload consumption cpu bandwidth affect wellbehaved channels table 2 summarizes available policies options 43 system parameterization table 1 lists system parameters implementation selection p based tradeoff available resources channel admissibility 19 packet time model presented section 33 requires c x b x determined given network adapter host architecture evaluation available networking hardware revealed significant performancerelated deficiencies poor data transfer throughput high unpredictable packet transmission time 15 deficiences adapter design severely limited ability demonstrate capabilities architecture given focus unidirectional data transfer suffices ensure transmission packet size takes l x units achieved emulating network adapter consuming units packet transmitted implemented device emulator null device 19 configured emulate desired packet transmission time used study variety tradeoffssuch effects relationship cpu link processing bandwidth context qossensitive protocol processing 19 experimentally determined c x 40s experiments select correspond link data transfer speed 50 ns per byte effective packet transmission bandwidth 4kb packets 16 mbs 5 evaluation evaluate efficacy proposed architecture isolating realtime channels best traffic specification ch mmax bmax rmax min deadline 2 rt table 3 workload used evaluation effort traffic evaluation conducted subset policies listed table 2 varying degrees traffic load traffic specification violations particular evaluate processperchannel model nonwork conserving multiclass edf cpu scheduling nonwork conserving multiclass edf link scheduling using option 1 section 42 overload protection packet queue overflows provided via blocking channel handlers messages overflowing message queues dropped parameter settings table 1 used evaluation 51 methodology metrics chose workload stresses resources plat form shown table 3 similar results obtained workloads including large number channels wide variety deadlines traffic specifications three realtime channels established channel establishment strictly local different traffic specifica tions channels 0 1 bursty channel 2 periodic nature besteffort traffic realized channel 3 variable load depending experiment similar semantics realtime traffic ie unreliable retransmissions packet loss messages realtime channel generated xkernel process running highest priority specified linear bounded arrival process bursts bmax messages rate violations realized generating messages rates multiples rmax besteffort traffic generating process similar runs priority lower realtime generating processes higher xkernel priority assigned channel handlers experiments duration corresponds 32k packet transmissions steadystate behavior evaluated ignoring first 2k last 2k packets experiments reported traffic enforcement cpu link scheduling enabled following metrics measure perchannel performance throughput refers service received channel besteffort traffic calculated counting number packets successfully transmitted within experiment duration message laxity difference transmission deadline realtime message actual time completes transmission deadline misses measures number realtime packets missing deadlines packet drops measures number packets dropped realtime besteffort traffic deadline misses packet drops account qos violations individual channels 4096 load kbs throughput kbs mean rt channel 2 min 50 load kbs message laxity ms throughput b message laxity figure 5 maintenance qos guarantees traffic specifications honored 52 efficacy proposed architecture figure 5 depicts efficacy proposed architecture maintaining qos guarantees channels honor traffic specifications figure 5a plots throughput realtime channel besteffort traffic function offered besteffort load several conclusions drawn observed trends first realtime channels receive desired bandwidth since packets dropped shown late figure 5b qos requirements realtime channels met increase offered besteffort load effect service received realtime channels second besteffort traffic throughput increases linearly system capacity exceeded realtime traffic early current deny service besteffort traffic third even extreme overload condi tions besteffort throughput saturates declines slightly due packet drops without affecting realtime traffic figure 5b plots message laxity realtime traffic also function offered besteffort load messages miss deadlines since minimum laxity nonnegative channels addition mean laxity realtime messages largely unaffected increase besteffort load regardless whether channel bursty figure 6 demonstrates behavior even presence traffic specification violations realtime chan nels channel 0 generates messages rate faster specified besteffort traffic fixed 1900 kbs figure 6a wellbehaved realtime channels besteffort traffic receive expected service channel also receives expected service laxity behavior similar shown figure 5b realtime packets miss deadlines including channel 0 ever channel 0 overflows message queue drops excess messages figure 6b none realtime channels besteffort traffic incur packet drops 53 need cooperative preemption preceding results demonstrate architectural features provided sufficient maintain qos guarantees following results demonstrate features also necessary figure 7a protocol processing besteffort traffic nonpreemptive even though besteffort traffic processed lower priority realtime traf fic besteffort handler obtains cpu continues process messages message queue regardless waiting realtime handlers making cpu scheduling qosinsensitive seen introduces significant number deadline misses packet drops even low besteffort loads deadline misses packet drops increase besteffort load system capacity reached subsequently excess besteffort traffic dropped drops misses realtime channels decline behavior largely unpredictable different channels affected differently depends mix channels behavior exacerbated increase buffer space allocated besteffort traffic besteffort handler runs longer blocking due buffer overflow thus increasing window nonpreemptibility figure 7b shows effect processing realtime messages preemption message boundaries early handlers allowed execute workconserving fashion priority higher besteffort traffic note realtime traffic still shaped since logical arrival time enforced observe significant deadline misses packet drops realtime channels besteffort throughput also declines due early realtime traffic higher processing priority behavior worsens window nonpreemptibility increased draining message queue time handler executes discussion results demonstrate need cooperative preemption addition traffic enforcement cpu scheduling cpu link scheduling always enabled realtime traffic also shaped via traffic enforcement traffic shaped one would observe significantly worse realtime besteffort performance due nonconformant traffic also note fullypreemptive kernel likely larger unpredictable costs context switches cache misses cooperative preemption provides greater control preemption 3000 4000 5000 6000 4096 offered load ch throughput kbs 2000 3000 4000 30000 offered load ch number packets dropped throughput b number packets dropped figure 6 maintenance qos guarantees violation rmax points turn improves utilization resources may used concurrently example handler initiate transmission link yielding higher priority activity arbitrary preemption may occur handler initiates transmission thus idling link 6 related work focused host communication subsystem design implement realtime channels implementation methodology applicable proposals providing qos guarantees packetswitched networks detailed survey proposed techniques found 3 similar issues examined provision integrated services internet 7 6 expected qos requirements applications issues involved sharing link bandwidthacross multiple classes traffic explored 24 10 issues involved providing qos support ipoveratm networks also explored 5 22 tenet protocol suite 4 provides realtime communication widearea networks wans incorporate protocol processing overheads networklevel resource management policies particular provide qossensitive protocol processing inside end hosts need scheduling protocol processing priority levels consistent communicating application highlighted 1 implementation strategies demonstrated 12 processor capacity reserves realtime mach 21 combined userlevel protocol processing 18 predictable protocol processing inside hosts 17 operating system support multimedia communication explored 25 13 however explicit support provided traffic enforcement decoupling protocol processing priority application priority path abstraction 11 provides rich framework development realtime communication services 7 conclusions future work proposed evaluated qossensitive communication subsystem architecture end hosts supports guaranteedqos connections using implementation realtime channels demonstrated efficacy architecture maintains qos guarantees delivers reasonable performance besteffort traffic evaluated architecture relatively lightweight stack supportwould necessary computationallyintensive services coding compression checksums added protocol stack usefulness features also depends relative bandwidths cpu link proposed architectural features independent platform generally applicable work assumes network adapter ie underlying network provide explicit support qos guarantees providing bounded predictable packet transmission time assumption valid large class networks prevalent today fddi switchbased networks thus link scheduling realized software requiring lower layers protocol stack cognizant delaybandwidth characteristics network softwarebased implementation also enables experimentation variety link sharing policies especially multiple service classes supported architecture also extended networks providing explicit support qos guarantees atm extending null device sophisticated network device emulator providing link bandwidth management explore issues involved interfacing adapters support qos guarantees true endto guarantees scheduling channel handlers must integrated application scheduling currently implementing proposed architecture osf machrt microkernelbased uniprocessor realtime operating sys tem finally extended architecture sharedmemory multiprocessor multimedia servers 20 r structure scheduling realtime protocol implementations support continuousmedia dash sys tem tenet realtime protocol suite design integration realtime services ipatm network architecture integrated services internet architecture overview supporting realtime applications integrated services packet network architecture mechanism calculus network delay note topologies interconnection networks scheme realtime channel establishment widearea networks programming system resources support realtime distributed applications scheduling ipc mechanisms continuous media workstation support realtime multimedia communication design tradeoffs implementing realtime channels busbased multiprocessor hosts predictable communication protocol processing realtime mach resource management realtime communication making theory meet practice processor capacity reserves multimedia operating systems atm signaling support ip atm transport system architecture services highperformance communications systems scheduling service model anda schedulingarchitecture integrated services packet network heidelberg resource administration technique design philosophy goals tr ctr binoy ravindran lonnie welch behrooz shirazi resource management middleware dynamic dependablerealtime systems realtime systems v20 n2 p183196 march 2001 christopher gill jeanna gossett david corman joseph p loyall richard e schantz michael atighetchi douglas c schmidt integrated adaptive qos management middleware case study realtime systems v29 n23 p101130 march 2005 christopher gill david l levine douglas c schmidt design performance realtime corba schedulingservice realtime systems v20 n2 p117154 march 2001