active management framework distributed multimedia systems successful deployment nextgeneration distributed multimedia systems significantly dependent efficient management support improves performance reliability applications runtime paper describe active management framework based programmable monitoring agents eventfilteraction recursive model active management enables users define reconfigurable selfdirected monitoring tasks automatically customized runtime order track system behavior using active management framework monitoring agents programmed modify monitoring tasks dynamically based observed events information initiate appropriate management actions accordingly paper also emphasizes importance active management supporting scalable highly responsive nonintrusive distributed management infrastructure presented framework referred hifi monitoring system supports comprehensive environment including code instrumentation user subscription agents administration event filtering action service examples using hifi managing largescale distributed multimedia systems also shown b introduction nextgeneration distributed multimedia systems largescale resource intensive highly dynamic increasing demands deploying largescale distributed multimedia ldm systems efficient online monitoring control become essential service improving performance reliability complex applications examples ldm systems include largescale collaborative distance learning video telecon ferencing distributed interactive simulation reliable multipoint applications ldm environment large numbers events generated system components execution interaction external objects eg users processes events must monitored accurately determine runtime behavior ldm system obtain status information required management operations steering applications performing corrective action 7 16 however manner events generated ldm system complex represents number challenges online monitoring system correlated events generated concurrently occur multiple locations distributed throughout environment makes monitoring intricate task complicates management decision process furthermore large number entities geographical distribution inherent ldm systems increases challenge addressing important issues performance bottlenecks scalability application perturbation hifi active monitoring system attempt deliver management architecture explicitly addresses challenges requirements associated managing largescale distributed multimedia systems hifi active monitoring system supports dynamic automatic customization management operations response changes ldm systems behavior 19 24 achieved programmable monitoring agents redirect monitoring activities onthefly upon users requests based information events collected monitoring operation instance instead monitoring events processes system agents monitor subset eventsprocesses monitoring activities expand based information generated events therefore active monitoring reduces monitoring space significantly offers scalable management architecture monitoring intrusiveness also minimized architecture enables initiating monitoring tasks targets proper time addition hifi active monitoring enables agents react spontaneously eg corrective actions improves management operations response time compared human intheloop model 21 number monitoring approaches systems monitoring distributed systems proposed eg 5 11 15 17 21 22 23 although systems provide mechanisms modifying monitoring requests dynamically mechanisms manual ie require human intervention insufficient support programmable selfdirected monitoring tasks actions described paper addition support scalable fine grain event filtering mechanism significant monitoring largescale distributed systems internetbased applications paper organized follows section 2 explains monitoring model language specifications section 3 gives overview hifi monitoring architecture process section 4 describes active monitoring approach impact management infrastructure section 5 provides overview monitoring system implementation section 6 illustrates example effectiveness using hifi steering distributed multipoint applications section 7 shows evaluation hifi performance scalability system perturbation section 8 presents summary concluding remarks monitoring model order present complete abstraction active monitoring architecture work must include modeling application behavior monitoring demands monitoring mechanism considering design objectives presented section 1 program behavior expressed set events revealed application execution monitoring model call monitored programs event producers continuously emit events express execution status event significant occurrence system represented notification message notification message typically contains information captures event characteristics event type event values event generation time event source state changes event signaling process generating reporting event notification classify two types events used model primitive events based single notification message composite events depend one notification message monitoring language event format notification variable sequence event attributes determined user fixed header used monitoring process event attribute predicate contains attribute name typically represents variable producer ie program value event format also determines type event signaling immediate forward generated event immediately delayed allow buffering batching events producer sending table shows highlevel event specification language hesl bnf event abstraction enables consumers 1 specify arbitrary event format declarative way 2 construct complex multilevel abstraction program behavior using composite events addition event abstraction enables consumersusers assign values event attributes require specifying attribute type eg int float string provides simpler interface corba idl 11 call monitoring objects eg human software programs event consumers since receive present forwarded monitoring information consumers specify monitoring demands via sending filter program via subscription process configures monitoring system accordingly see section 3 monitoring operation eventdemanddriven model words producer behavior observed based event generated eventbased monitoring requests subscriptionbased therefore illustrated figure 1 events received monitoring system classified based exiting filters event detected action specified filter performed forwarding monitoring information corresponding consumers filter action specifications described section 4 show figure 1 three management applications model manual fault recovery requires forwarding monitoring information automatic fault recovery permit monitoring system perform actions event producers application steering application acts event producer consumer order tune parameters 3 overview hifi monitoring architecture hifi employs hierarchical event filteringbased monitoring architecture distribute monitoring load application environment based users monitoring requests monitoring system determines appropriate agent set agents within hierarchy tasked inspection evaluation application events monitoring system uses fine grain decomposition allocation mechanisms ensure filtering tasks efficiently distributed among monitoring agents prevent events propagation network since focus paper programmable monitoring environment hifi give brief overview hifi system refer 1 3 4 details hierarchical monitoring agents hifi monitoring system task detecting primitive composite events distributed among dedicated monitoring programs called monitoring agents applicationlevel monitoring program runs independently applications system communicates outside world including producers consumers via messagepassing hifi two types mas local monitoring agents lma domain monitoring agents dma see figure 2 former responsible detecting primitive events generated local applications machine latter responsible detecting composite events beyond lma scope knowledge one producer entities ie processes connected local lma machine every group lmas related one domain geograph ical logical domain attached one dma dmas also connected higher dmas form hierarchical structure exchanging monitoring information different roles lma dma lmas use direct acyclic graph dag 6 ever dmas use petri nets pn order record track event history 9 subscription process monitoring process starts consumer sending filter program describes monitoring request local filter validated decomposed subfilters eg f1 f2fn using decomposition algorithms manner one represents primitive event 1 decomposed subfilter assigned one lmas using allocation algorithms based event sources application distribution decomposition allocation algorithms described 1 monitoring system also determines proper dmas evaluating event filter expression filter program mas receive delegated monitoring tasks subfilters 10 configure accordingly inserting subfilter filtering internal representation direct acyclic graph dag lmas petri nets pn dmas 4 architecture alleviates performance bottlenecks scalability problems distributing monitoring load among mas limiting events propagation originating sources 1 4 techniques active monitoring main goal active monitoring offer dynamically customizable monitoring tasks provides flexible management infrastructure scales well number producers causes minimal overhead application environment shown section 7 addition active monitoring hifi reduces monitoring latency monitoring agents customize monitoring tasks automatically without users involvement section describe hifi active monitoring architecture impact improving scalability reducing perturbation monitoring system 41 filterbased programmable agents hifi users event consumers describe monitoring demands via programs called filters submitted monitoring system runtime filter set predicates predicate defined booleanvalued expression returns true false predicates may joined logical operators form expression model filter consists three major components event expression specifies relation interesting event filter expression specifies attributes value relation attributes different events action performed event filters expressions true table ii shows highlevel filter specification language hfsl bnf consumers may add modify delete filters onthefly subscription component interface described section 5 consumer performs filter subscription monitoring agents reconfigure accordingly updating internal filtering representation 4 different consumers potentially send different filters simultaneously however since dynamic subscription may create inconsistency monitoring environment hifi uses subscription protocol described 3 ensure atomic state update synchronization among monitoring agents event abstraction emphasizes declarative aspect model filterbased programming abstraction enables consumers describe relation expression different events attributes well improves expressive power usability monitoring language feature permits agent perform finegrain filtering based regular expressions example assume agents configured filter detect warning events audiowarning vidwarning generated audio video processes respectively consumers limit monitoring granularity reprogramming mas runtime detect event correlation two events generated machines via sending following filter forwardwarnings correlation filter decomposing allocating filter dma forward audio video warning events generated machine consumers also deactivate modify existing filter using del mod action part see table iii addition programming environment permits consumers overload attributes values events order create different event instance filter program 42 event incarnation actions monitoring model simply executing program local remote forwarding detected event corresponding consumers necessary automatic fault recovery application steering respectively order improve dynamism expressive power monitoring system model provides complex actions event filter incarnation hifi generating new events action called event incarnation hifi feature improves performance expressive power usability active management system follows ffl event incarnation enables consumer activate sequence monitoring operations automatically using eventfilteraction programming model see figure 1 without user intervene monitoring process new event may trigger filters turn causes performing actions checking status running processes example failure may occur producer process result abnormal close communication channel primitive event case management operation involves failure recovery well sending event triggers new filter diagnose process closed connection ffl action could generate summary event summarizes information detecting composite event eg event expression consists multiple events enables suppressing information multiple events one event summary thereby avoiding event report implosion reducing event traffic example monitoring agent may requested generate summary event conveys drop rate average set receivers present application example summary events section 6 ffl performing action executing program may change state running program therefore sending event reveals state change monitoring system important allow reobserving behavior enabling automatic application steering significantly important attaining system stability steering process shown section 6 43 filter incarnation addition manual reconfiguration via dynamic users subscription described section 3 hifi active monitoring also supports programmable agents reconfigure automatically based events occurrences filter action filter manipulation typically adding new filter deleting filter modifying filter thus example another new filter activated monitoring environment result detecting event call filter incarnation shown figure 1 filter incarnation formally defined table iii monitoring language adding new filter means activating predefined filter submitted system specified monitoring language using special reserved word add predefined filter name hand deletion modification must performed existing filter consumers subscribed specified using reserved words mod del active filter name modifying active filter consumers must specify parts modify event expression ex filter expression fx designated appending filter name prefix ex andor fx resulting ex andor fx effective filter parts subscription completed filter incarnation enables users define general monitoring tasks automatically customized agents runtime order track diagnose specific system behavior failures performance bottlenecks avoids overwhelming system large number static hardwired monitoring tasks observe system activities consequently consumers initiate filters modify change expand monitoring scope order include monitoring targets events processes whenever certain events detected following describe various applications filter incarnation active monitoring addingdeleting filters controlling monitor timing consumers specify start end times given monitoring activity based events words consumers specify startstop monitoring activity certain event primitive composite detected minimizes monitoring overhead produces concise event traces example assume consumer wants monitor drop rate receiving events recvevent bar program transmission rate transmission event transevent foo program drops certain threshold sthreshold case consumer specify filter monitorsender monitors transmis sion events foo trigger another filter monitorreceiver monitors receiving events bar transmission rate drops threshold filters example shown add monitorreceiver monintorsender f orward monintorreceiver monitorreceiver filter monitors receiving events recvevent foo forwards consumers drop rate exceeds rthreshold similarly monitorreceiver filter deactivated deleted based transrate value changes transevent permits activating monitorreceiver filter proper time automatically minimizing monitoring perturbation application environment modifying filters specifications usually monitoring tasks static defined prior monitoring operation however using filter incarnation filter information eg attribute values determined monitoring process based contents detected events purpose hasl provides set virtual registers called filter registers consumers use loadingrestoring variables infrom monitoring agents registers used mas restore attribute values received events consumers simply assign attribute value event used ex fx filter register vice versa purpose example consumers may want monitor events trace processes generated security warning event warningevent case monitoring agents identify module name information monitoring request ie filter subscription however monitoring agents determine module name monitoring operations achieved using filer registers save restore event information following dynamicerrortrace filter specification example uses filter registers filter incarnation program agent operations dynamically following example thismod filter register restores module name modulename occurrence warningevent type security filer incarnation used modify filter expression traceprocess filter order monitortrace events particular processmodule mod racep rocessf traceprocess traceprocess generic filter monitors forwards events modules corresponding consumers notice language keyword indicates string value however general filter customize dynamicerrortrace filter order perform specific monitoring operation result technique enables activatingdeactivating appropriate monitoring operations filters right time avoiding overhead launching multiple filters monitoring requests simultaneously also reduces monitoring latency since monitoring agents programmed react spontaneously without consumers intervention moreover filter incarnation feature provides extendible programming environment utilizing power eventfilteraction recursive model shown section 6 5 hifi monitoring system implementation hifi consists four main components instrumentation subscription service event filtering control figure 3 shows design monitoring system component level interactions provide overview hifi design components detailed description presented 4 1 instrumentation component process inserting monitoring instructions inside code observed programs called instrumentation process instrumentation component utilizes event information hesl supplied subscription component construct lowlevel event formats called event reporting criteria erc contains events information event location reporting mode event attributes type attribute erc used event reporting stub ers constructing reporting event notification ers hifi library linked monitored application compilation facilitate event reporting main function instrumentation component facilitate process inserting monitoring instruction sensors inside program code many monitoring systems 17 20 programmers write considerable size code generated event makes instrumentation task tedious errorprone hifi users insert user sense specifies event name eg reporteventwarningevent instrumentation component preprocesses instrumented code replaces user sensors extended system sensors contain events related information machine name process name report mode attributes types values program starts executing control transferred ers creates ie forks lma initiates agents organization protocol described 3 order establish agents hierarchy described section 3 subscription service component monitoring subscription process consumers would express monitoring demands represented filter programs using hfsl two major subcomponents subscription service 1 monitoring language processor used validating parsing constructing monitoring knowledge necessary distributing events filtering tasks 2 monitoring information processor used decomposing allocating information generate monitoring tasks executable monitoring agents packaging disseminating produced information event environment information agent networks using reliable multicasting subscription component also responsible receiving presenting event notifications forwarded mas event filtering component event filtering component core component monitoring system constitutes internal architecture monitoring agents lma dma main functionality 1 receiving processing filtering tasks delegated subscription component decomposition allocation 2 inspecting incoming events based event attributes filters information ie filter internal representation determine event interesting detected irrelevant rejected 4 component operates event filtering internal representation represent monitoring information consumers subscriptions event specifications internal filtering representation direct acyclic graph dag petri nets pn particular different roles lma dma lmas use dag however dmas use pn order keep track event history words filter implemented monitoring agents sequence dag pn nodes control component control component provided support reactive control management applications main function component perform actions specified filter program four types actions supported monitoring architecture program execution information dissemination event generation incarnation filter incarnation see table iii shown figure 3 control component two major subcomponents dissemination service uses multicasts information corresponding consumers action service used execute local remote programs send new event andor perform filter incarnation ie adding modifying deleting existing filter 6 active management steering distributed multipoint applications hifi monitoring system used number management applications application steering fault recovery debugging distributed multimedia systems section present example using hifi monitoring steering reliable multicast server rms 2 one known problems reliable multicasting effect slow members eg machines group communication machine described slow machine receiving rate much less members group case slow machine could typically slow communication entire group sender transmission rate rms eventually adapts rate slowest receiver developing solution slow members multicast groups beyond scope paper however application example show effectiveness hifi active monitoring approach supporting dynamic discovery mechanism slow members machines multicast session providing automatic feedback rms senders make proper steering management decision accordingly criteria slow members defined based user specifications example user manager may define slow member whose performance certain threshold example rms sender acts manager sends threshold information figure 4 shows event hesl filter hfsl specifications used discover slow members multicast groups figure 5 shows petri nets filters constructed hifi agents rms receiver instrumented using hifi instrumentation component send mcastrec event contains machine name domain name multicast group name total bytes received kbrec far number nacks scheduled nacksch equals number nacks sent plus number nacks cancelled nack suppression mechanism 8 number nacksch gives accurate estimation drop rate number nacks sent mcastrec event sent periodically based time limit maximum number bytes received rms senders send mcastsend events indicate two things transmission rate transrate drop rate threshold threshold receivers group thus mcastsend mcastrecieved events convey status senders receivers respectively order activate management operation proper time avoid unnecessary use resources slow members discovery process initiated sender suffers performance degradation ie low transmission rate due existence slow members sender called unhappy sender represented us event figure 5 reason transrate mcastsend event first checked monmcastsender filter t1 transition figure 5 order identify unhappy senders group names consequently activate slow members discovery filters monitor receivers update threshold transrate found sthreshold slow members filter modified get grpname value stored filter register described section 4 slow members update threshold filter activated fired figure 5 activated slow members filter compares nacksch mcastrec threshold mcastsend identify slow members however threshold value dynamic may determined overall performance participants another filter update threshold used provide feedback overall drop rate average senders consequently readjust threshold value accordingly lma forwards mcastsend mcastrec primitive events dma evaluates filter expression upon receiving events second filter slow members waits receive one mcastsend mcastrec events lmas domain filter expression evaluated ctr lmas hifi reserved key words used denote number event occurrences number lmas domain respectively filter expression evaluates true rms receivers domain send mcastrec event indicated group name grpname nacksch one receiver higher threshold filter expression becomes true t2 figure 5 fires three actions performed 1 average scheduled nacks receivers domain calculated calcavg action fires t3 transition 2 domavg represents summary event sent containing dma reveal domain average 3 mcastrec event matches slow member criteria represented filter expression ie nacksch threshold forwarded manager rms sender third filter update threshold receives domavg events dmas calculates total nacksch average updates threshold sends mcastsend new threshold lmasdmas causes t4 t5 transitions fire event figure 5 sent new threshold filter dma task instead rms senders however users must provide action updatethreashold dma update threshold notify rms senders automatically since senders receivers could members various multicast groups group name grpname used limit management activities filters multicast groups suffering slow members addition another filter used deactivate slow members filter transrate becomes less sthreshold way slow members filter activated deactivated dynamically based condition multicast group summary three filters used application monmcastsender discovers unhappy senders initiate discovery process slow members identifies receivers threshold update threshold update threshold value continuously base overall session performance slow members nacksch average information collected receiver via lmas combined propagated hierarchical fashion via dmas rms sender mechanism scalable avoids notifications implosion may occur mcastrec forwarded one rms sender group receivers furthermore distributing processing load calculating average drop rate contributes monitoring performance 7 performance evaluation section describes performance evaluation study hifi monitoring system conducted number benchmarking simulation experiments assess application perturbation scalability latency hifi section presents numerical results well conclusions obtained performance study application perturbation measurements application perturbation measured execution time overhead caused monitoring operations including ers event reporting process monitoring agents lmas dmas operations first experiment performed evaluate ers overhead respect event length order show effect eventreport function ers used constructing reporting events compare overhead traditional c printf function frequently used programmers simplest way debugging inspecting program state behavior figure 6 shows overhead eventreport comparable printf ranges 100 200 microseconds based event length figure also shows ers overhead grows slowly 2 per event attribute event length increased measured actual overhead caused monitoring system including reporting time ers processing primitive event filtering time lmas processing event correlation time dmas processing unix socket communication rms communication order measure experimentally use filter correlation example called helloworld filter experiment two event emulation processes called random event generator reg used generate 5000 events randomly using bernoulli distribution reg processes located different hosts sun sparc 5 running solaris 25 mbps ethernet lan event time reg process may choose generate generate hello world events 8 attributes long probability p reg program connected lma residing machine dma sends notification message manager hello event world event sequence number tstamp generated two different reg processes ie machines experiments reg programs fist run without instrumentation monitoring programs instrumented run hifi environment detect event interest figure 7a depicts results experiment various event generation probabilities developed minimize application perturbation including dynamic signaling events batching using dynamic signaling ers generates events contained expressions existing filter events defined used filter program suppressed ers even invoked event producers event batching mechanism buffer events sending used delayed mode selected hesl described section 2 measure effect dynamic signaling reg programs changed 50 generated events filtered ers measure impact dynamic signaling event batching maximum 5 events reg ers programs changed reflect effect figure 7a shows substantial improvement reducing application perturbation experiments also show low perturbation figure less p low 01 believe typical program generates distributed environment important mention agents communication primitives primary source overhead monitoring operation 1 scalability analysis approach evaluating scalability hifi measuring impact increasing event frequency number event producers mean response time monitoring latency paper present later case since results similar monitoring latency elapsed time event occurrence manager notification experiments developed simulation routines compare mean response time mrt 14 monitoring latency hierarchical filtering approach centralized decentralized monitoring approaches 5 12 13 15 17 18 22 25 simulation routines assume event arrivals exponentially distributed average monitoringfiltering service rate agent 8000 eventssecond experimentally derived benchmarking experiments lma filtering therefore mean response time mrt centralized architecture follows event frequency n number event producers decentralized monitoring architecture two levels processingfiltering producer agent centralized monitoring node thus however hifi hierarchical filteringbased monitoring latency dlog x ne x branching factor n number producers egt c neglected since comparison study thus mean response time expressed follows first factor represents lma filtering second represent dma filtering notice lma receives 05f events since 50 event average filtered ers since every event necessarily forwarded way dma hierarchy calculate mrt considering three different probabilities forwarding event 10 50 90 events forwarded also assume 10 lmas maximum connected one dma domain ie simulation results mrt verses number producers three approaches depicted figure 7b event frequency f considered 20 events per second figure shows high superiority response time latency hierarchical architecture centralized decentralized ones saturation points figures indicates buffer overflow indefinite response time since ae 1 case hierarchical architecture probability 09 still superior architecture use dynamic signaling figure also shows mrt hierarchical architecture grow slowly respect number producers fact jump points hierarchical graphs figure 7b represent creating new level hierarchy accommodate additional producers figures also show centralized decentralized approaches better mrt hierarchical approach event frequency low small number event producers exist system 8 conclusion future work paper describes novel active monitoring architecture called hifi distributed multimedia systems presented monitoring system organizes monitoring agents hierarchical structure distributes monitoring load limits event propagation monitoring agents programmable reconfigured manually users interactions automatically agents based detected events users utilize simple language interface called filter define monitoring demands associated actions users specify general monitoring tasks customized dynamically monitoring agents order perform special monitoring tasks developed several techniques support programmable agents environment active monitoring includes event incarnation enable eventfilteraction programming model filter incarnation filter registers enable selfconfigurable monitoring operations dynamic subscription enables users add delete modify requests runtime paper also demonstrate number examples using hifi monitoring steering largescale distributed multimedia systems active monitoring architecture offers significant advantages scalability performance monitoring systems also enables consumer control monitoring granularity thereby minimizing intrusiveness scalability testing results shows improvement 37 29 average hifi mean response time centralized decentralized architecture respectively increase event producers primary source improvements attributable programmable agents environment permits distributing monitoring load among lma dma groups increasing concurrency monitoring tasks hifi active architecture also enables localization event filtering classification area events originate necessary reducing monitoring intrusiveness hifis dynamic signaling inherent active monitoring event batching techniques significantly minimize application perturbation 50 although hifi developed used monitor existing applications rms remains prototype monitoring system many open issues remain addressed research plan include integration fault tolerance make hifi resilient network application failures improved filter incarnation mechanisms provide higher abstraction users specify ultimate monitoring target without specify intermediate monitoring tasks extended monitoring language architecture addresses temporal events r hifi new monitoring architecture distributed system management dynamic monitoring approach multipoint multimedia systems adaptive objectoriented filtering framework event management applications high speed robust event correlation patternbased packet classifier managing multimedia network services reliable multicast framework lightweight sessions application level framing detecting composite events active database systems using petri nets network management delegation mad approach object management group distributed performance monitoring methods arts computer systems performance analysis monitoring distributed systems generic model fault isolation integrated management system tools distributed application management debugging concurrent programs tempest practical framework network programmability architecture monitoring network distributed system management managing communication networks monitoring databases tr ctr salvatore gaglio luca gatani giuseppe alfonso urso logical architecture active network management journal network systems management v14 n1 p127146 march 2006 alshaer yongning tang qos path monitoring multicast networks journal network systems management v10 n3 p357381 september 2002