interpreted collaboration protocols use groupware prototyping correct timely creation systems coordination group work depends ability express analyze experiment protocols managing multiple work threads present evolution trellis model provides formal basis prototyping coordination structure collaboration system trellis group interaction protocols represented separately interface processes use coordination protocols interpreted rather compiled applications group interactions changed collaborative task progresses changes made either person editing protocol specification fly silent observation process participates application solely perform behavioral adaptationstrellis uniquely mixes hypermedia browsing collaboration support term combination hyperprogram say hyperprogram integrates description collaborative task information required task illustration describe protocol moderated meeting show trellis prototype conference tool controlled protocol b protocol moderated meeting show trellis prototype conference tool controlled protocol work partially supported national science foundation grant numbers iri9007746 iri 9015439 iri9496187 software engineering research center university florida purdue uni versity texas advanced research program grant 999903155 copyright notice present technology collectively called trellis modeling analysis coordination structures prototyping cscw system based coordination structures method separates collaboration protocol guiding behavior cscw system code system implementation collaboration protocol interpreted serves central information engine cscw system cscw systems already provide parameterized access underlying protocol example suite system 2 allows users set change granularity text exchange character level paragraph level approach takes ability customize protocol step allowing dynamic alteration aspect protocol even aspects system designers cannot anticipate capability useful longlived interactions ones nature shared tasks might evolve based outcomes earlier actions decisions difficult anticipate detail behaviors cscw systems especially parallel activities involved method separating protocol expressing form different code gives support examining formally informally interaction parallel tasks concurrent users graphical notation network difficult understand direct code researchers visual languages found graphical notations enhance human ability understand parallel computation threads exploit informal enhancement trellis methods also developed formal analysis methods find logical flaws protocols de veloped methods analogous program proof techniques formal software engineering complement code testing debugging cscw system prototyping process hyperprograms cscw report shows trellis hyperprograms used prototype groupware applications based explicitly expressed dynamically alterable collaboration protocols trellis project 12 13 investigated past several years structure semantics human computer interaction context hypertexthypermedia systems program browsers visual programming nota tions software process models design work guided since early projects simplicity overall principle means develop simple model practical first study far towards general solution take us add capability features formalism result interaction models strike balance fully programmablenonanalyzable like apples hypercard product fullyanalyzablenonprogrammable static directed graphs report refer information structure trellis hyperprogram due unique features combined trellis model hyperprogram integrates usermanipulatable information hypertext userdirected execution behavior process say hyperprogram integrates task informa tion cscw context task description coordinated interactions among multiple users information interpretation given coordination framework specific application domain trellis model serves several functions unified notational framework structures shared applica tions synchronizes loosely coupled parallel execution threads provides repository application information historical data provides mechanisms joint decision making action semantic nets link typing may useful pure hypertext description objectbased message passing languages probably appropriate expressing parallel threads production systems probably useful specifying group inter actions however trellis provides single formalism aspects collaboration support framework due wellunderstood interpretation hyper text trellis hyperprograms especially useful processes human direction important aspect control flow software process models forms computation referred en acted rather executed distinguish major role human input human decisions cscw human interactions complete formal definitions color trellis model found previous paper 16 report concentrating practical applications trellis collaboration protocols summarize model informally trellis project ongoing effort create interactive systems formal basis support analysis techniques first effort hypertext model 12 followed framework highlyinteractive timebased programming termed temporal hyperprogramming 13 model present extension earlier designs explicitly distinguishes various agents acting within linked structure provide mechanism agents may exchange data new model basically follows trellis framework annotating form placetransition net petri net using graph analysis statespace analysis exploit naturally dual formalism following short section outlines basic concepts terminology petri nets structure common behaviors readers familiar material may skip section colors net theory basics notation used taken reisig 11 interested formalist murata 9 gives broad thorough introduction net theory modeling ap plications present basics required understanding application theory petri net bipartite graph associated execution semantics two types nodes net termed places represented visually circles transitions represented visually bars activity net denoted tokens drawn dots places two nodes type may joined arc given arc structure net set inputs node n termed preset n denoted ffln set output nodes termed postset n denoted nffl figure 1 shows common representation petri net components discuss interpretation figure later varying patterns tokens diagram represent colors mechanism class typing discussed detail later transition petri net said enabled place fflt marked ie contains least one ken enabled transition may fire causing token removed place fflt depositing one token place tffl net marking net state vector integers telling many tokens pdddyydmmmmmmmmmmmmmmpppppppppreleasefloor speak getfloor listen dropfloor grabfloor addp delp susp moderate hold wait mutex figure 1 ctn simple meeting protocol side place execution petri net begins initial marking continues sequence state changes caused choosing enabled transition current state firing get new state execution certainly terminates state reached transitions enabled may also defined terminate marking special significance user net color time nets trellis model based primarily synchronously executed transitiontimed petri net structure hyperprogram use cscw employed form net model known generically highlevel nets highlevel nets introduced several forms different researchers including predicate transition nets 4 colored petri nets 6 nets individual tokens 10 present ideas hybrid notation use jensens terminology colored nets simplified syntax presented murata highlevel net summary 9 forms highlevel nets translated one another thus equivalent simple syntax use creates explanations clear net notation used trellis refer colored timed nets ctn ctns tokens type color may carry data ctn marking snapshot point ex ecution many tokens color reside net place token one color distinguishable token another color within color class however individual tokens cannot distinguished one another color expressions appear arcs ctn defining combinations token classes required event transition occur fire figure 1 appear boldfaced italics consisting variable constant names algebraic operations execution net requires pattern matching expressions input arcs transition colors tokens input places transition enabled one consistent color substitutions expressions transition fires one valid substitutions chosen proper color tokens removed input places output tokens produced according substitution expressions output arcs rather excessively formal explain ctn execution behavior informally thorough extended examples follow note event timing timing original trellis model retained combined color obtain ctn tation transition ctn two time values representing roughly delay timeout transition release time r represents number time units must pass enabled fired maximum latency represents number time units may pass enabled fires automatically time value may range 0 1 constraint r degenerate case 0 1 transition zero delay infinite time behavior transitions untimed net trellis implementation ctns defaults transition 0 1 timing changed designer net temporal structure similar mer lins time petri nets 7 8 differences two time values transition integers whereas merlin used reals also need maximum latency possibly unbounded using special designation 1 merlins model finally times thought durations transition firing trellis transitions still abstractly considered fire instantaneously like clicking button hypertext interface time values trellis thought defining ranges availability event previous report showed transition timings used adapt net execution user browsing behavior 14 though use timed events trellis hyperprograms space prevents us discussing examples details use timed events reported elsewhere 13 15 annotations ctn trellis hyperprogram completed giving annotations components ctn considering earlier claim trellis integrates task informa tion one consider ctn task description different annotations information required task one important category annotation content fragments information text graphics video audio executable code hyperprograms associated places ctn another category annotation events mapped transitions ctn third category annotation tributevalue av pair list av pairs kept place transition arc ctn whole annotations used trellis implementation prototype group interaction tools earlier ex periments showed annotations naturally used produce hypermedia documents coordinate multiple readers collaborative hyperdocuments basis prototyping approach discussed detail later section collaboration protocols next sections extended exam ple illustrate basic execution interpretation ctn collaboration protocol following discuss analysis collaboration protocols verification behavior encoded one analysis discuss current trellis implementation show used prototype groupware based ctn collaboration protocols example simple moderated meeting figure 1 shows ctn encodes simple moderated meeting enhance clarity example made simplifying assumptions actions meeting discuss realistic complexities following initial explanation envision meeting two classes agent par ticipants moderator may also act partic ipant participants either two states listen ing speaking listening request possibly obtain floor speak speaking release floor return listening modera ddddmmmmdelp addp pool listen moderate figure 2 detail participant allocation tor extensive abilities addition acting participant moderator add delete participants meeting suspend participants time return meeting presume suspension different deleted something like history would kept suspended participants grab floor preempting current speaker drop floor returning preempted participant speaking ctn shown represented participants one color used color represent entire class rather individuals conse quently net simpler initial discussion participant distinguished another remedy shortly assigned second color single moderator used third color token providing mutual exclusion potential speakers color constants simple protocol moderator fixed duration meeting explain complicated alternative well following understand notation net consider action add participant moderator perform represented net transition labeled addper son one input arc transition labeled coming place moderator label boldface indicates color constant selected moderator token addperson transition two output arcs one labeled p place listen another labeled back place moderator p color constant representing participant class token color present place moder ator operation invoked ie moderator invoke whenever desired preconditions exist firing transition consumes colored also places one back moderator place ie moderator give role adding new participant firing also places new p colored token place listen thereby increasing number participants one color variables far seen behavior accomplished color constants indicated arcs however real power ctn notation comes allowing color variables appear arcs structure appears figure 1 left side net region containing getfloor releasefloor operations note colored token located place listen along p colored tokens along color variables arcs implements claim moderator able act participant also arc leading place listen transition getfloor labeled expression italics indicates color variable arc leading getfloor place speak also labeled note arc leading getfloor place mutex annotated color constant meaning net fragment allows getfloor fire variability input token colorsnot specific input colors previous example transition getfloor may fire specifically color token place mutex ie one currently speaking token color call place listen fires color token consumed place mutex addition token whatever color stands removed listen token color deposited place speak means single operation getfloor may used move either color token p color token place speak sort color variable behavior controls firing transition releasefloor someone wished stop speaking distinguishing participants lets consider ctn structures add detail simple protocol previously discussed one reasonable change allow different color every meeting participant done creating finite pool differently colored tokens held reserve new participant added new dm dm pool newmod listen figure 3 detail changing moderator color allocated pool added meet ing participant removed meeting color returned pool alteration depicted ctn fragment figure 2 addition pool colored tokens net shown figure 1 changed include varying token colors place listen also arcs leading moderator operations place listen labeled variable expression instead constant p important analysis purposes explained later pool potential participants finite ctn must specify colors might used meeting participants truly new color injected net whole execution ever finite number participants arbitrarily large limit presents practical problem meeting protocol modeled must allow unbounded number participants note simple example presented first one color used entire class allows unbounded number indistinguishable participants whether truly unbounded number participants reasonable requirement cscw tool point separate discussion variant changing moderator another practical addition meeting protocol ability change moderators meeting progress example build one figure 2 finite pool participants continue assume participant moderator otherwise assigned unique token color figure 3 shows ctn details moderator swap ping fragment altered labels arcs moderator place previously existing operations like addperson delete variable expression labeled way moderator fixed always constant color instead color arcs place moderator operations like addperson specifies execution operation must maintain whatever color represents ie moderator cannot change simply executing addper son previously discussed meeting control functions added another operation newmoderator specifically perform moderator swapping arc leading newmoderator place moderator labeled expression arc leading transition place listen labeled shows newmoderator function invoked listen place contains participant color moderator another participant different color moderator assume aliasing color substitutions fired newmoderator transition leaves token counts listen unchanged takes whatever color moderator represented variable replaces token whatever color represented since know value different value aliasing assumption know moderator changed neither participant leaves exchange capabilities also note new moderator color drawn pool actual participants found place listen fi nally written ctn allow moderator swap someone listeninga speaker cannot become new moderator without first releasing floor need analyze ctn apparent reader spent time considering possible behavior even simple protocol given figure 1 motivation analysis section let us consider moment happen ctn simple meeting executed two pairs operations intended used alternation individual speakers getfloor followed releasefloor grabfloor followed dropfloor moderator normal participant executes getfloor dropfloor operation cannot executed thereafter since arc leading place speak transition requires colored token moderator executes getfloor operation normal participant would might appear moderator could execute dropfloor opera tion violation informal expectation fact net structure prevents requiring p colored token place hold firing transition dropfloor words dropfloor executed grabfloor operations first placed participant hold would appear quick informal analysis net maintains intentions however careful reasoning protocol uncovers interesting behavior moderator first executes grabfloor puts speaker hold requirement net next operation dropfloor colored token place speak releasefloor operation executed matter token got essence moderator grabs floor behave obtained floor normal channel moderator follows grabfloor releasefloor second colored token deposited place lis ten participant getfloor begin speaking scenario repeated moderator execute grabfloor followed releasefloor putting second participant hold putting third colored token place listen behavior continue participants put hold listen contains number moderator tokens equal one greater number participants hold behavior also undone participants hold moderator execute getfloor one colored tokens place listen alternation assumption follow dropfloor releasing one held p colored tokens eliminating one extra tokens partici pant speaking execute releasefloor rejoin listen pool moderator repeat cycle releasing turn held participants several points made situation first even simple protocols exhibit complex behav ior secondly complex behavior ctn easily unexpected intend example protocol behavior described covert operations discovered well design aspects ctn structure dis cussed surprise though small illustrates point analysis quite well case ctn behavior particularly harmful however operation match specifications mind extra behavior map well onto natural expected actions meeting thirdly informal reasoning cannot counted reliably uncover possible behaviors ctn draw analogy program testing vs program verifica testing sampling necessary sufficient full confidence example first concluded moderator could execute getfloor followed releasefloor arguing p color token needed place hold went contradict con clusion discovering another vector precondition could fact obtained informal reasoning one cannot sure important behavior deduced safe stop reasoning formal analysis methods developed analysis techniques ctns allow designer determine behavior net matches formal specifications desired behavior 17 current analysis software modification model checking system developed clarke verifying behavior concurrent programs since trellis model based concurrent automaton petri net hyper programs expressions concurrent processes quite amenable model checking methods veri fication model petri net annotated atomic predicates indicate true conditions node participant speaking floor grabbed temporal logic used specify properties protocol exhibit execution participant placed hold given back floor participant gets floor model checker examines state space automaton coupled atomic predicates state see specification upheld current system works expanding ctns normal petri nets termed unfolding net litera ture computing state space unfolded net model checker interpretation difficult approach temporal logic properties make statements unfolded model results must interpreted back original petri net protocol ease problem working model checking algorithms work directly ctn require unfolding step section explain basic architecture cannot affect progress collaboration clients arrows model observers arrows show information flow ctctcscw net color net wrapper ctct client traverse client readtraverse client readtraverse read client server editor client structure client creation structure engine structure display client analysis package figure 4 system architecture trellis implementation trellisbased implementation show used prototyping enactment ctn illustrate clearly earlier observation hyperprogram integrates task information recall ctn color time petri net ctn annotated fragments information text graph ics video audio executable code hyperprograms ctn encodes basic individual actions group interactions cscw application appropriate visual interfaces needed provide users tangible interpretation net annotations exam ple trellisbased hypertext system annotations net places unix file names button names attached transitions token enters place net execution file place presented viewing names enabled transitions leading place shown menu selectable words next file contents selecting button mouse usually would causes net fire associated tran sition moving tokens around changing content elements would active visible trellis implementation cooperative separation net interpretation realized distributed clientserver network shown figure 4 every trellis model instance information serveran engine accepts remote procedure call rpc requests services engine visible user interface api allows remote processes invoke functions building edit ing annotating executing ctn interface clients separate processes visible user interfaces communicate one engines via rpc clients collectively provide necessary views interac tions analyses net specific application domain simply put trellis clients syntax application whereas trellis engines dynamic se mantics clients servers provide applications look feel respectively early stages collaborative tool design trellis hyperdocument built encodes desired interactions moderated meeting protocol discussed earlier text graphics video needed created explain activity represented ctn part authoring process hyper document net components annotated names files containing explanatory content elements testing analysis protocol done model checking usage trials done hypertextual browsing via trellis client terfaces stage prototype groupware tool active hyperdocument user interactions accurately simulated necessary information exchange data manipulation simply explained text graphics stubs figure 5 shows stage prototyping conferencing tool based meeting protocol figure 1 figure 5 xted ctn editor client trellis figure shows one instance trellis ctn editor client two instances trellis text browser client three client processes communicating single trellis engine giving different view information stored engine one text browsers executed using moderator color meaning browser displays content elements places marked tokens color consists two windows upper right corner browser executed using participant color single text window lower left notice moderator window extra buttons button menu indicating operations moderator perform normal participant cannot notice also moderator browser shows windows moderating activity listening activity since ctn shows moderatorcolored tokens places moderator also participant conference protocol selective dislay events one use av pairs hiding events visible windows desired protocol designer consider hyperdocument shown figure 5 decision must made display buttons representing enabled ctn transitions notice net transition delete delete participant enabled firing input places moderator place listen place color expressions specify participantcolored token blue case place listen moderatorcolored token red case place moderator delete operation performed take participant conference listening participant presiding moderator required preconditions delete operation allowed invoke operation default trellis browser shown enabled transition displayed button window input places case default behavior either moderator participant could initiate delete operation selecting appropriate button respective menus notice however example delete operation appears button moderator window selective display accomplished av pairs override default constant stored engine value attribute hidebutton arc connecting listen place delete transition browser interprets av pair telling display button listen window matter color using thus neither participants moderator see delete button listen window able invoke delete operation notice moderator see delete button moderator window hidebut ton attribute defined arc place delete transition default display behavior applies different hiding behavior could achieved storing av pair hidebuttonblue arc place listen transition delete case rather hiding delete button listeners browsers executing behalf participants color would button hidden moderator browser displayed listen place contents delete button would shown moderator would option invoke delete operation either moderator window listen win dow example protocol designer thought less confusing special moderator functions accessible moderator place window evolution working code design collaboration protocol stable substantial implementation proceed altering content annotations ctn passive text graphics stubs replaced executable content componentscode written realize desired actual behavior provide services required groupware tool evolution content annotation stubs code assisted third class annotations attributevalue pairs migrating static stubs active code av pairs used exchange data av pair simply stored engine two character strings attached net component thus conference tool created hyperdocument shown taking copy browser code altering present chat windows instead simple text file displays chat behavior implemented browser instance capture keyboard input user store character string engine attached appropriate net component active place agreedupon attribute name like texttoyou browser would also query engine obtain value attribute texttoyou attached net component representing participant retrieving value browser displays text interface input participant dynamic protocols sophisticated behavior added emerging groupware tool prototyping proceeds desired level functionality results final prototype multiuser interactions governed trellis engine implementing collaboration protocol since ctn defining protocol interpreted engine opposed compiled ap plication ctn definition altered even collaborative work effort underway one way dynamically alter protocol use trellis ctn editor client accessing engine matter clients using engine thus human edit net specification protocol executed making changes testing collaboration progresses alterations probably useful debugging stage protocol de velopment might also important use collaborative system based trellis protocol especially effort duration days weeks months changing way meeting run would require termination meeting recompilation groupware tool effect trellis offers protocol interaction persistent data rather burned cscw system aspect significant changes made well minor variations changes anticipated programmed protocol illustrated example allows participant moderator exchange roles way trellis offers kind protocol parameterization offered systems suite 2 suite several ways users might want change protocol anticipated ability change aspects built user interface example users decide couple text exchanges tightly see every character others type typed loosely see new text others enter complete lines paragraphs coupling changed collaboration however everything anticipated protocol designer especially complex activities trellis entire collaboration protocol available alter ation certain designerchosen aspects like message coupling editing trellis ctn allow new forms interaction created tested linked new arcs net access control designed added net structure even collaboration progresses sections protocol behavior detached needed reattached needed observer using net editor annotation altered dynamically allowing new information substituted old trellis client server system rather altering protocol explicit human editing silent client listen collaboration gathering data interactions clients engine making decisions alterations make protocol client makes changes appropriate rpc calls engine add place add arc add transi tion delete annotate etc collaboration related research general previously cited papers defining various forms highlevel petri nets mention appropriateness model representing interactions among users computations project goes beyond recognition providing modeling framework includes unique analysis methods well system design prototyping simulation collaborative tools research projects looked various aspects domain studying fischer using io automata 3 model humancomputer interactions cscw settings among many group conferencing tools cscw systems built suite project 2 accord goals dynamic protocol changes easy prototyping collaborative interactions suite system construction cscw tools prototyping facilities sophisticated trellis suite group interactions collaboration change dynamically adjusting values predefined parameters main protocol parameters compiled application protocol specified programming language c rather specified abstract fashion trellis emphasis given suite formal methods analysis underlying protocol commercial package designcpn available metasoftware providing extensive editing capabilities building hierarchical color petri nets use petri nets specification medium manmachine interaction appears previously liter ature example van biljon 18 described special grammarbased notation designing manmachine dialogues languages realized hierarchy petri nets recognition automata another example work holt 5 designed ptnetbased graphical specification language coordination multiple cooperating agents information processing organization trellis complicated model previous proposals encompasses control aspects manmachine interactions contains inherent notion information presentation text graphics executable code timing events later versions includes lisp interpreter attribute processing facility underlying trellis information engine supporting trellis related hypertext engines used experimental software support systems ham hypertext abstract machine 1 developed 1986 textronix used basis hypertextual software support system called neptune uniqueness trellis basis parallel collaborative computation modelcolor time petri nets gives model elegant structure programmed analyzed r ham general purpose hypertext abstract machine decision making based practical knowledge system modeling highlevel petri nets new language study implementation coordination coloured petri nets invariant method study recoverability computing systems recoverability communication protocolsimplications theoretical study petri nets properties petri nets individual tokens petri nets introduction temporal hy perprogramming dynamic adaptation hypertext structure hypertextual concurrent control lisp kernel modeling prototyping collaborative software processes hyperdocuments automata tracebased browsing property verification extending petri nets specifying manmachine dialogues tr petri nets introduction diplans new language study implementation coordination ham general purpose hypertext abstract machine extending petri nets specifying manmachine dialogues petrinetbased hypertext document structure browsing semantics dynamic adaptation hypertext structure highlevel flexible framework implementing multiuser user interfaces hyperdocuments automata modelling prototyping collaborative software processes study recoverability computing systems ctr richard furuta david stotts dynamic hyperdocuments authoring replaces programming communications acm v38 n8 p111112 aug 1995 david stotts jaime navon model checking cobweb protocols verification html frames behavior proceedings 11th international conference world wide web may 0711 2002 honolulu hawaii usa weigang wang jrg haake flexible coordination cooperative hypertext proceedings ninth acm conference hypertext hypermedia links objects time spacestructure hypermedia systems links objects time spacestructure hypermedia systems p245255 june 2024 1998 pittsburgh pennsylvania united states weigang wang jrg haake tailoring groupware cooperative hypermediaapproach computer supported cooperative work v9 n1 p123146 2000 yang du li separating data control support adaptable consistency protocols collaborative systems proceedings 2004 acm conference computer supported cooperative work november 0610 2004 chicago illinois usa jincheon na richard furuta dynamic documents authoring browsing analysis using highlevel petri netbased hypermedia system proceedings 2001 acm symposium document engineering november 0910 2001 atlanta georgia usa collaborative objects coordination architecture proceedings 1998 acm conference computer supported cooperative work p179188 november 1418 1998 seattle washington united states du li richard r muntz runtime dynamics collaborative systems proceedings international acm siggroup conference supporting group work p336345 november 1417 1999 phoenix arizona united states collaboration specification language acm sigplan notices v35 n1 p149162 jan 2000 richard furuta jincheon na applying cats programmable browsing semantics specify worldwide web documents reflect place time reader community proceedings 2002 acm symposium document engineering november 0809 2002 mclean virginia usa p david stotts richard furuta cyrano ruiz cabarrus hyperdocuments automata verification tracebased browsing properties model checking acm transactions information systems tois v16 n1 p130 jan 1998 david stotts jason mcc smith karl gyllstrom facespace endo exospatial hypermedia transparent video facetop proceedings fifteenth acm conference hypertext hypermedia august 0913 2004 santa cruz ca usa