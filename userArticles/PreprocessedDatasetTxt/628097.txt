integrating security realtime requirements using covert channel capacity abstractdatabase systems realtime applications must satisfy timing constraints associated transactions addition maintaining data consistency addition realtime requirements security usually required many applications multilevel security requirements introduce new dimension transaction processing realtime database systems paper argue due conflicting goals requirement tradeoffs need made security timeliness first define mutual information measure degree security satisfied system secure twophase locking protocol described scheme proposed allow partial violations security improved timeliness analytical expressions mutual information resultant covert channel derived feedback control scheme proposed allow mutual information exceed specified upper bound results showing efficacy scheme obtained simulation experiments also discussed b introduction database security concerned ability database management system enforce security policy governing disclosure modification destruction information secure database systems use access control mechanism based belllapadula model 3 model stated terms subjects objects object understood data file record field within record subject active process requests access objects every object assigned classification every subject clearance classifications clearances collectively referred security classes levels partially ordered belllapadula model imposes following restrictions data accesses simple security property subject allowed read access object formers clearance identical higher partial order latters classification b property subject allowed write access object formers clearance identical lower latters classification two restrictions intended ensure flow information objects higher access class subjects lower access class since restrictions mandatory enforced automatically system checks security classes reads writes database systems support belllapadula properties called multilevel secure database systems mlsdbms belllapadula model prevents direct flow information higher access class lower access class conditions sufficient ensure security violated indirectly known covert channels 14 covert channel allows indirect transfer information subject higher access class subject lower access class context concurrency control approaches covert channel arises resource object database shared subjects different access classes two subjects cooperate transfer information important measure degree security compromised covert channel measured amount information may transferred highsubject lowsubject explained greater detail section 3 realtime database management system rtdbms transaction processing system transactions explicit timing constraints typically timing constraint expressed form deadline certain time future transaction needs completed realtime system transactions must scheduled processed way completed corresponding deadline expires conventional data models databases adequate timecritical applications designed provide good average performance possibly yielding unacceptable worstcase response times advances multilevel security take place mlsdbmss also required support realtime requirements systems use one cannot avoid need integrating realtime transaction processing techniques mlsdbmss concurrency control used databases manage concurrent execution operations different subjects data object consistency maintained multilevel secure databases additional problem maintaining consistency without introducing covert channels paper concern concurrency control mechanisms satisfy security realtime requirements advance claim conflicts two requirements inherent hence tradeoffs necessary summary related work area included section 2 background information correctness criteria secure schedulers covered section 3 section 4 problems associated timeconstrained secure concurrency control studied section 5 secure two phase locking protocol 2plhigh priority discussed scheme allows partial violations security requirements proposed section 6 mutual information resultant covert channel derived feedback control mechanism maintains amount mutual information system specified upper bound described section 7 section 8 shown analysis control single covert channel considered section 6 enough bound mutual information covert channels could potentially exploited implementation performance analysis feedback control mechanism explained section 9 section 10 concludes paper related work several interesting approaches analyzing reducing covert channel bandwidth 30 11 19 9 approaches could used specify policies make difficult exploit covert channels may arise tradeoff others may applicable realtime application example collection techniques known fuzzy time 30 11 inappropriate realtime setting since overall mission may jeopardized getting exact timing information fact problem realtime covert channel identified secure alpha work 10 pointed slowing clocks isolating processes precise timing information impractical realtime systems adaptive solution make appropriate tradeoffs requirements realtime security essential requires resolution rules specify appropriate behavior effective desirable rules based applicationspecific knowledge 5 resolution specification approach similar idea important enough interfere signaling cost consider timeliness levels covert channel could established idea using probabilistic partitioning buscontention covert channel proposed 9 instead keeping track percentage violations making decisions conflicts occur system could enforce certain predetermined percentage picking random number generates 0 1 based required percentage needs study find whether way enforcing requirements provides reasonable level flexibility specifying requirements reduced system overhead improve practicality usability covert channel analysis real systems might necessary provide methods specify higherlevel goals regarding potential tradeoffs realtime requirements covert channel leaks usercentered security approach 31 considers user needs primary design goal secure system development could useful figure higherlevel description user needs expectations specific situations could begin scenariobased requirement specification system clearly identify situation necessary actions take system may need install monitors check system states perform necessary adjustments feedback control mechanisms maintain highlevel goals specified user ideas similar dynamic adaptive security model proposed 29 could used provide allowable tradeoffs security realtime performance george haritsa studied problem supporting realtime security requirements 7 examined realtime concurrency control protocols identify ones support security requirement noninterference work fundamentally different work make assumption security must always maintained work permissible allow security violation order improve realtime performance several approaches exploit possible tradeoffs realtime security requirements 20 novel concurrency control protocol proposed meet realtime security serializability requirements applications protocol employs primary secondary copies object transactions higher levels refer secondary copy transactions classification level object refer primary copy due scheme higher level transaction never delayed due lowerlevel transaction similarly highlevel transaction never interferes lowlevel transaction 27 adaptive protocol proposed performance results illustrate clear benefit using adaptive approach secure realtime databases approach conflicts resolved based two factors security factor indicates degree security violations deadline miss factor indicates timeliness system depending values factors system takes either secure option security violation insecure option priority 21 multiversion locking protocol proposed provide security timeliness together using multiple versions data objects protocol provides 1copy serializability eliminates covert channels protocol ensures high priority transactions neither delayed aborted low priority transactions 28 set flexible security policies proposed evaluated based notion partial security instead absolute security proposed specification method enables system designer specify important properties database appropriate level tool analyze database specification find potential conflicts allow designer specify rules follow execution conflicts arise ahmed vrbsky also studied tradeoffs security realtime requirements proposed secure optimistic concurrency control protocol 2 3 correctness criteria secure schedulers covert channel analysis removal one important issues multilevel secure concurrency control notion noninterference proposed 8 simple intuitively satisfying definition means system secure property noninterference states output seen subject must unaffected inputs another subject higher access class means subject lower access class able distinguish outputs system response input sequence including actions higher level subject input sequence inputs higher access class removed 13 extensive analysis possible covert channels secure concurrency control mechanism necessary sufficient conditions secure interferencefree scheduler given 13 three properties relevance secure two phase locking protocol discussed paper property represents one way prevent covert channel secure system clearly three properties need enforced completely eliminate possibility covert channels secure twophase concurrency control protocols following definitions given schedule access level l purges l schedule actions level l removed scheduler satisfies property values read subject affected actions higher subject classification levels stated formally input schedule p output schedule said value secure purges l view equivalent 1 output schedule produced purgep l delay security property ensures delay experienced action affected actions subject higher classification level delay measured time arrival request execution action system time action completed input schedule p output schedule scheduler delay secure levels l p actions 1 purgep l delayed output schedule produced purgep l delayed purges l recovery security due conflicting actions transactions realtime database system may involved deadlock recovery system state involves aborting one actions leading deadlock recovery security property ensures occurrence deadlock appears lowlevel subject independent whether higher level actions schedule actions taken recover deadlock also affected presence higher level transactions deadlock occurs channels available signaling addition protected value security delay security following condition takes care channels 13 scheduler recovery secure schedules p arrival action ax scheduling 1 deadlock occurs resulting set actions rolled back subject classification levels l p dominate one deadlock also occurs response schedule purgep l arrival action ax actions purged l rolled back words presence higher level actions interfere occurrence deadlocks among lower level actions two schedules view equivalent read operation reads value readsfrom relationship final values data object schedules 4 deadlock occurs arrival ax subject classification levels l occur arrival ax input schedule purgep l words deadlocks among actions lower level presence higher level actions would none absence emphasizes noninterference highlevel actions lowlevel actions performance penalty enforcing security order enforce security database systems need enforce property noninterference highlevel transactions lowlevel transactions example secure environment transaction higher level ffl cannot cause transaction lower access class abort allowed possible control number times lower level transaction aborted thereby opening covert channel ffl cannot conflict transaction lower access class conflict occur higher level transaction blocked aborted low level transaction ffl cannot granted greater priority execution transaction lower access class however enforcement unfortunate effect degrading performance highlevel transactions realtime system example typical realtime data base assigns priorities transactions based close missing deadlines 1 22 24 highlevel transaction closer deadline assigned higherpriority possibly conflicting lowlevel transaction farther deadlines however may interpreted interference highlevel transaction lowlevel transaction secure environment words enforce security hence noninterference properties described need assign higher priority lowlevel transaction lower priority highlevel transaction may however result missing deadlines highlevel transaction words performance highlevel transactions penalized enforce security illustrate penalty highlevel transactions due security enforcement let us consider following example sequence four transactions input scheduler transactions arrived assume 1 2 3 4 priorities 5 7 10 12 respectively priority assignment scheme priorityt critical scheduled ahead 1 example 2 3 initially blocked 1 arrive 1 completes execution 3 scheduled ahead 2 since greater priority 2 transaction execution order would 1 however transaction 1 removed execution order would 2 3 4 2 would scheduled soon arrived presence secret transaction 1 thus changes value read unclassified transaction 4 violation value security delay security also violated since presence 1 delays 2 3 therefore satisfy correctness properties discussed section 3 ie close covert channels see high performance penalty would paid approach improving performance shall discuss method tradeoff mutual information transfer allowed covert channel performance measured terms deadline miss percentage 5 secure two phase locking discussion analysis covert channels let us study two concurrency control approaches different ends spectrumsecure 2pl fully secure protocol consider transaction priorities scheduling 2plhp deadline cognizance built free covert channels 51 secure 2pl basic twophase locking work secure databases transaction lower access class say l cannot blocked due conflicting lock held transaction higher access class h l somehow allowed continue execution spite conflict noninterference would satisfied basic principle behind secure twophase locking protocol try simulate execution basic 2pl without blocking lower access class transactions higher access class transactions consider two transactions following example example 1 basic two phase locking would fail w 2 x would blocked waiting 1 commit release readlock x ie ru 1 x modification two phase locking protocol 2 allowed set virtual lock vwl 2 x write onto version x local 2 continue execution next operation ie c 2 1 commits releases lock x 2 virtual write lock upgraded real lock w 2 x performed w 2 x performed conflicting action allowed set lock x sequence operations performed therefore rl 1 x r 1 x modification alone enough illustrated following example example 2 sequence operations would performed rl 1 x r 1 x vwl 2 x vw 2 x wl 2 w 2 c 2 operations deadlock would occur r 1 waits w 2 release virtual lock vw 2 x waits r 1 x release lock deadlock would occurred basic two phase locking note aim trying simulate execution basic two phase locking achieved closer inspection obvious problem arises w 2 allowed proceed execution even though w 2 x could write onto local version x due read lock rl 1 x set 1 avoid problem transaction two lists maintained beforet list active transactions precede serialization order aftert list active transactions follow serialization order idea adapted 24 cnt cnt used dynamically adjust serialization order transactions following additions made basic two phase locking protocol action p x sets virtual lock x real lock ql j x held j transactions aftert added aftert j j transactions added beforet action w x arrives finds previous action w data item already set virtual write lock vwl dependent lock dvwl x set respect vwl action p x arrives finds conflicting virtual dependent lock vql j x dvql j x set transaction j aftert p x allowed set lock x perform p x spite conflicting lock dependent virtual lock dvp x dependent action q upgraded virtual lock vql x upgraded real lock maintenance serialization order presence dependent locks necessary prevent uncontrolled acquisition virtual locks transactions lower access classes example 2 sequence operations would performed rl 1 x r 1 x vwl 2 x formal description secure 2pl algorithm correctness proofs given 6 52 2pl high priority 2plhp 1 data conflicts resolved favor transaction higher priority transaction requests lock object held transactions conflicting mode requesters priority higher lock holders holders restarted requester granted lock requesters priority lower waits lock holders release lock addition new read lock requester join group read lock holders priority higher waiting write lock operations realtime secure concurrency control must possess two characteristics high performance minimal deadline miss percentage secure two phase locking protocol 6 shown yield best average case performance among secure concurrency control approaches whose performance evaluated 26 therefore use basis approach problem realtime secure concurrency control discussion earlier paper clear priority based transaction scheduling feasible fully secure database system therefore minimizing deadline miss percentage take approach partial security violations certain conditions permissible results substantial gain time cognizance 6 covert channel analysis 61 covert channels mutual information systematic study covert channels began 14 example simple covert channel consider two processes running system schedules alternately exactly one two time quanta choice process 16 one process sender may send information covertly receiver encoding successive symbols 0s 1s paper amount time taken execution receiver wait one quantum execution assumes 0 sent waits two quanta assumes 1 sent absence processes maximum rate information transmitted channel one bit per quantum assuming 0s transmitted assuming 0s 1s transmitted equal frequency information rate 1051 052 23 bits per quanta presence processes system interferes transmission viewed noise presence noise decreases information rate covert channel analysis subset information theory concerned sending signals transmitter receiver possibility noise degrading signal fidelity shannons pioneering work 23 gives upper limit rate messages passed communication channel based solely noise affects transmission signals popular usage term information elusive define however information precise meaning communication theorist expressed solely terms probabilities source messages actions channel precise measurement information based various entropy uncertainty measures associated communication process information exchange defined reduction entropy consider discrete scalar random variable x regarded output discrete message source suppose variable x assume one k possible outcomes labeled x specified p entropy random variable x entropy measures information surprise different values x particular value x surprise log1p x happens certainty surprise zero x never occurs surprise maximal infinity note base two logarithm used units information bits information theory concerned input transmission entropy changes travels channel channel noiseless amount information transmission unchanged noise channel fidelity signal degraded information sent diminished channel noise great encom passing surprise seeing symbol another mathematically modeled equivocation conditional entropy hxjy x random variable representing channel input random variable representing channel output uncertainty associated x given conditional entropy therefore defined shannon defined information follows average mutual information shared random variables x ie information reveals x prior uncertainty x less posterior uncertainty x specified definition using definition conditional probability transmitting transmitter nothing noise receiver passive waits symbols passed channel however transmitter send different symbols different frequencies thus different distributions x changing frequency symbols sent transmitter affect amount information sent receiver critical difference covert channels communication channels though goal communication channel designer maximize mutual information minimize influence noise covert channels exist goal system designer exactly oppositeto try minimize mutual information usually increasing noise 62 noisy covert channel system locking mechanism used synchronization concurrently executing transactions whenever transaction 1 requests lock data item x another transaction holds conflicting lock two possible options could blocked 2 releases lock could aborted lock granted 1 latter option nonsecure option taken 2plhp 1 higher priority 2 former option along additional conditions actions described section 51 would secure option 1 higher security level 2 however option take account priorities 1 2 approach try strike balance two options consider bernoulli random variable x parameter q ie x takes value 1 probability q 0 probability conflict arises lock holding transaction 2 lock requesting transaction 1 priorityt 1 aborted aborted probability q nonsecure option taken secure option taken note q used control extent security satisfied lesser value q greater extent security satisfied therefore greater miss percentage unfortunately approach free covert channels consider two collaborating trans actions one security level low security level high consisting one operation assume start time interval duration henceforth referred tick low transaction submits write data item x shortly thereafter within tick high transaction submits read x also assume transactions collaborate ensure high transaction earlier deadline low transaction absence transactions q 1 low transaction would certainly aborted due high transaction high transaction submitted low transaction would commit therefore takes one tick high transaction transmit either 1 submitting operation 0 submitting operation case mutual information channel 1 bittick however two factors introduce noise channel firstly presence transactions secondly probability q lock holding transaction aborted first factor modeled set parameters r table 1 p 1 p 6 table 2 r probability transaction 1 2 earlier deadline low transaction submits read write x end execution low transaction ie aborting low transaction may caused either high transaction probabilities shown respect low high transactions summarized table 2 example p 1 probability arrive within l units arrival low transaction words high transaction h submitted p 1 probability would committed 0 conveyed low user similarly p 2 probability arrives arrival within lock holding time l since transaction often delayed due operating system overheads interrupt handling introduced timeout factor transactions example low user get response abort commit units initiation automatically aborted explicit operation low user instances considered error user next subsection shall derive equation mutual information terms factors important assumption stated point regarding extent knowledge high user assume high user information transactions collaborators submit ie systemmaintained information current arrival rate transactions deadlines transactions system locks held transactions etc superhigh level inaccessible high users assumption unfair concurrency control manager trusted therefore leak information could used malicious user assumption important malicious high user access system information control q knows transactions could possibly interfere transmission 1 low user get rid transactions follows start tick high user first finds set active transactions earlier deadline collaborating low level transaction data item transaction holds lock represented set tuples submits transactions lesser deadline access data items thereby causing abortion transactions set eliminate effect q channel reduces value 63 analysis mutual information derive expression mutual information covert channel make following assumptions ffl low user submits transaction periodically period computation time requirement l priority pl ffl requires writelock data object x beginning execution lock released end execution ffl high user also periodic behavior periodicity whenever intends send 1 via covert channel low user submits transaction th submit th period intends send 0 words time interval successive arrivals th integral multiple ffl arrivals th phase phaseshifted sense arrival th always takes place exactly delta units last arrival since information conveyed abortcommit words hold lock x long enough aborted high priority th requests readlock x parameter description lowlevel transaction th highpriority highlevel transaction besides request time phase time arrivals l lock holding execution time l timeout period low user pl priority ph priority th q prob aborting lowpriority transaction conflicting data lock request made highpriority transaction r prob prob 0 sent high user table 1 modeling parameters covert channel analysis event probability event relationships among probabilities table 2 probabilities related lock request release times discussed represents transactions besides may conflicting data access requirements x simplicity analysis assume one exists interfere covert operations th data access object x let us assume low user submitted tl time precisely instance consideration arrived requested writelock x time final outcome depend behavior th well present analysis terms two cases high user sends 0 high user send 1 case 1 high user sends 0 case since phaseout time th delta high user submit th delta accordingly instance tl interference th however may affected following subcases arise unlocked gets writelock however whether commits aborts prior following cases arrive prior l commits releases x l arrives prior l accordingly commits releases x l arrives prior l per concurrency control aborts continues commits l probability locked following cases waits either readlock released lowuser aborts inten tionally releases lock prior gets lock commits prior otherwise lowuser aborts considering error bit 22 aborts gets lock commits l however probability lock releases lock prior gets lock commits prior otherwise lowuser aborts considering error bit case 2 high user sends 1 case high user submits th delta hence outcome may depend th following cases arise unlocked whether commits depends th following cases arrive prior l th arrives delta aborted th probability q commits l probability delta thus cannot influence may aborted th commits l delta hence probability q aborted probability delta time th arrives two cases possible th aborts commits l probability arrives delta may already aborted th time probability q commits arrives delta tl may aborted th delta probability q tl still active arrives probability latter case may aborted probability q continues commits l probability locked following cases lock x hence one following subcases arise aborted tl probability q aborted th probability q commits l probability waits continues time following cases arise 4121 releases lock prior hence prior aborted th probability q commits prior tl probability 4122 lowuser aborts considering error bit lock x hence one following subcases arise 421 releases lock prior hence prior delta either aborted th probability q commits prior 422 lowuser aborts considering error bit subcases outcomes corresponding probabilities summarized table 3 probabilities derive following factors covert channel analysis x refers event input input binary either 0 1 similarly case abortcommit th submitted time 11 commit p 1 12 commit 13 abort commit 22 commit p 3 commit th submitted time commit commit commit 34 abort 411 abort p 3 commit p 3 4121 abort commit 4122 421 abort commit 422 table 3 abortcommit probabilities refers event output conceived low user 0 1 error denoted e j take values error value essentially represents event low user intentionally aborts execution complete within timeout period l assume high user sends 0 probability derive following substituting terms equation 1 get expression mutual information plot vs r different values fl aborted high arrives shown figure 1 addition parameters chosen possible exchange maximum mutual information covert channel accordingly may observed mutual information highest least intervention transactions r 10 similarly mutual information reaches upper bound 10 probability sending 0 1 equal impact arrival transactions illustrated figure 2 different values p chosen maximize assumed arriving high priority transaction always aborts low priority holder r capacity q10 low always aborted high figure 1 mutual information vs r low priority always aborted high priority r capacity q10 low always aborted high figure 2 mutual information vs r low priority always aborted high priority r capacity aborted high half time figure 3 mutual information vs r low priority aborted half time high priority impact high aborting low illustrated figure 3 low priority aborted high priority transaction probability 05 clearly mutual information smaller case assuming interference transactions ie r10 effect q illustrated figure 4 since interference p irrelevant may observed mutual information increases value q finally plot versus q r chosen values p displayed figure 5 results support intuitive understanding effect system parameters mutual information transferred covert channel 7 secure realtime concurrency control mechanism discussion clear mutual information covert channel determined parameters p 1 p 6 q r clearly q parameter completely control system parameter r however depends characteristic transactions system obviously r varies system load relative priority transactions respect low transaction larger values r implies higher interference low high users hence lower transfer mutual information covert channel thus reduce mutual information r arbitrarily increased introducing fake transactions change state database access data items randomly capacity r10 interference others figure 4 mutual information vs q interference transactions020610206102061 r capacity figure 5 mutual information vs q r desirable option since transactions compete resources data items would otherwise allocated normal transactions thereby degrading performance parameters p 1 p 6 influenced start finish times transactions active addition influenced l l delta low user transaction particular smaller timeout periods imply higher value p 4 hence higher probability lowuser receive error symbol e hand higher values timeout imply larger value p 3 smaller value p 4 resulting larger value p probability tl committed even th submitted therefore shall assume r parameter cannot controlled however average value r estimated scheduler level transactions periodically parameters even difficult estimate since depend parameters dictated low high user hence known scheduler trusted component system reason best make conservative estimate parameters resulting maximal mutual information covert channel finally q control scheduler tuned according allowable given r allowable value system adjust value q two transactions involved covert channel collaborate reduce duration tick thereby reducing r however certain lower bound duration cannot reduced three steps involved transmission symbol 0 start tick low transaction submits write operation high user wishes transmit 1 submits read operation system send transaction aborted message low user alternately start tick low transaction submits write operation high user wishes transmit 0 operation submitted otherwise submits read operation system sends either transaction committed transaction aborted message depending interference decision abortnotabort lowpriority transaction highpriority transaction covert channel effective duration tick cannot lower overhead involved performing three operations worst case two requirements secure realtime concurrency control mechanisma security requirement expressed upper bound mutual information realtime requirement expressed upper bound miss percentage given values r p 1 p 6 recall value r estimated p 1 p 6 computed based conservative assumptions q calculated equation derived mutual information previous section difficult derive closed form solution q terms r p 1 p 6 simple iterative solution q obtained easily using newtonraphson method direct mathematical relationship deadline miss percentage parameters simulation studies 26 indicate increasing arrival rate therefore increasing r deadline miss percentage increases slowly steadily certain point system becomes unstable similarly increasing q 0 1 deadline miss percentage first increases value r range 03 04 decreases continuously approach realtime secure concurrency control mechanism uses feedback control mechanism ensure mutual information given time exceed upper bound specified approach described following pseudocode desired deadline miss percentage ddmp mutual information calculate q given current r computed conservative estimates resulting deadline miss percentage dmp report back database administrator dba dba readjusts ddmp andor go step 2 else ddmp dmp threshold decrease q 0 reduce mutual information 0 go step 3 else go step 3 approach provides guarantees mutual information allowed resulting channel deadline miss percentage miss percentage increases desired miss percentage specified nothing system thing done report dba step 4 dba either increase upper bound thereby increasing q turn decreasing miss percentage relax miss percentage requirement increase value desired miss percentage deadline miss percentage requirement comfortably met system drop miss percentage afforded done step 5 covert channel effectively closed setting q 0 miss percentage increases approaches desired miss percentage value normal operation resumed value q calculated current value r p 1 p 6 amount mutual information transferred covert channel varies inversely degree randomness system scheme discussed much randomness since strive maintain mutual information specified value one therefore argue since amount mutual information allowed maintained less constant malicious subject utilize channelalbeit much lower fidelityto transmit information certain degree randomness introduced following procedure value q calculated desired value current value r instead using value q thus calculated value q sampled example uniform distribution ffi greater value ffi greater uncertainty resulting value might mean sometimes mutual information might increase beyond upper bound specified due uncertainty difficult user exploit channel derivations methods control explained paper type covert channel discussed section 62 covert channels malicious users exploit whose allowed mutual information would controlled feedback monitoring method explained earlier previous section let us investigate issue correctness criteria secure schedulers covert channels broadly classified three categories communicate information violation delay security violate recovery security violate value security 6 proved secure 2pl satisfies delay security realtime secure concurrency control mechanism explained section 7 based secure 2pl protocol approach differs secure 2pl conflict lock holding transaction 1 lock requesting transaction 2 priorityt 2 case 1 aborted 2 granted lock ie transaction blocked therefore delay security violated point covert channel studied section 62 canonical example channel exploits violation recovery security might complicated channels could involve two transactions parameters mutual information could exchange would dependent superset q r covert channel involving four collaborating transactions one high rest low exploits violation value security work follows ffl start tick low transaction 1 submits write data item x w 1 x ffl second low transaction 2 submits write x w 2 x ffl high transaction 3 wants transmit 1 submits read x result 2 aborted ffl receiving low transaction 4 submits read x reads value written 1 1is received reads value written 2 0 received covert channel dependent two factors probability transaction 4 would cause aborting 2 3 arrives probability q 2 would actually aborted 3 submits operation addition also possibility 1 could aborted 4 submits read introducing additional noise factor result mutual information allowed channel would actually less simple channel studied section 62 summarizing find simpler covert channel lesser number factors mutual information channel dependent therefore greater covert channel studied section 62 simplest possible channel exploited given correctness properties violated therefore bounding enough bound mutual information complicated covert channels could exploited 9 performance evaluation section present results performance study feedback control mechanism range transaction arrival rates goal analysis show variation miss percentage varying amounts mutual information transferred covert channel 91 simulation model central simulation model singlesite disk resident database system operating sharedmemory multiprocessors 15 system consists diskbased database main memory cache unit database granularity page transaction needs perform operation data item accesses page page found cache read disk cpu disk access mmk queueing system consisting single queue servers k number disks cpus amounts cpu disk io times specified model parameters table 4 since concerned providing security concurrency control level issue providing security operating system resource scheduling layer considered paper reason consider secure cpudisk scheduling approach assumption lower layers provide higher concurrency control layer fair resource scheduling policy feedback approach implemented layer secure 2pl model execution transaction consists multiple instances alternating data access requests data operation steps data operations complete aborted transaction makes data request ie lock request data object request must go concurrency control obtain lock data object transactions priority greater lock holders lock request conflicts holders holders aborted transaction granted lock probability q else steps taken secure 2pl protocol followed transactions priority lower waits lock holders release lock 1 probability q depends factors r available directly r calculated based arrival rate transactions probability contention deadlines analysis based preemptive priority queueing policy restart details analysis found 6 request lock granted transaction proceeds perform data operation consists possible disk access data item present cache followed cpu computation however virtual dependent lock granted transaction cpu computation since operation performed local version request lock denied transaction blocked transaction placed data queue waiting transaction granted lock perform data operation also virtual lock operation upgraded real lock data operation requires disk access cpu computation stage deadlock detected transaction aborted break deadlock determined aborted restarted operations transaction completed transaction commits even transaction misses deadline allowed execute actions completed 92 parameters performance metrics table 4 gives names meanings parameters control system resources parameters cputime disktime capture cpu disk processing times per data page simulation system explicitly account time needed data operation scheduling assume costs included cputime per data object basis use database cache simulated using probability transaction attempts read data page system determines whether page cache disk using probability bufprob page determined cache transaction continue processing without disk access otherwise disk access needed table 5 summarizes key parameters characterize system workload transactions parameter meaning base value hline dbsize number data pages database 350 numcpus number processors 2 numdisks number disks 4 cputime cpu time processing action 15 msec disktime disk service time action 25 msec bufprob prob page memory buffer 05 numseclevels num security levels supported 6 table 4 system resource parameters parameter meaning base value hline arrirate mean transaction arrival rate transsize average transaction size 6 restartdelay mean overhead restarting 1 msec minslack minimum slack factor 2 maxslack maximum slack factor 8 table 5 workload parameters transactions arrive poisson stream ie interarrival rates exponentially distributed arrirate parameter specifies mean rate transaction arrivals number data objects accessed transaction determined normal distribution mean transize actual data objects accessed determined uniformly database assignment deadlines transactions controlled parameters minslack maxs lack set lower upper bound respectively transactions slack time use formula deadlineassignment transaction et denote arrival time execution time respectively execution time transaction used formula actual execution time time estimated using values parameters transize cputime disktime priorities transactions decided earliest deadline first policy performance metric used miss percentage ratio number transactions meet deadline total number transactions committed 93 experimental results eventbased simulation framework written c experiment ran simulation parameters 6 different random number seeds simulation run continued 200 transactions access class committed run statistics gathered first seconds discarded order let system stabilize initial transient condition experiment required performance metric measured wide range workload data reported paper 90 confidence intervals whose endpoints within 10 point estimate experiment miss percentages feedback approach measured two different arrival rates resulting graph shown figure 6 since considering realtime database system restrict attention portion graph miss percentages less 10 performance saturation point issue also consider section graph less 01 low values value q also low means behavior system near identical secure 2pl higher values certain degree deadline cognizance introduced portion graph need concentrate low arrival rates dependence miss percentage minimal transactions miss deadline even low values increase appreciably decrease either high arrival rates however miss percentage rate quite sensitive changes expected lower values miss percentage highest obviously low value q signifies transactions aborted give greater priority transactions earlier deadline value increases value q increases behavior system approaches 2plhp resulting decreased misspercentage paper explored possible direction research scheduling transactions meet timing constraints secure database possible way security could partially compromised improved miss percentage explained expression mutual information resultant covert channel derived feedback control system developed ensured mutual information transferred covert channel exceed desired upper bound although guarantees provided system deadline miss percentage facility provided renegotiating desired deadline miss percentage desired amount mutual information desired miss percentage exceeded importance realtime database systems increasing number applications used military ones used national infrastructure electric power telecommunications growing applications obviously need support security capacity miss percentage x arr rate40 transactionssec figure miss percentage vs mutual information realtime requirements example accident failure detected considered severe physical electronic attack way system must switch crisis mode critical transactions executed deadline essential data maintained situations would much desirable allow minor security violations satisfy critical timing constraints number issues future work derivation mutual information covert channel concentrated mainly dependence parameter q dependence presence transactions system conveniently abstracted away single parameter q although approximate method estimation q used performance analysis precise calculation q considered formal queueing model system based arrival rate transactions calculation lock conflict probabilities blocking time etc important determining q could also help establishing probabilistic relationship miss percentage q r could eliminate need raising error condition desired miss percentage exceeded since correct setting r obtained mathematically desired miss percentage secondly 18 use measure security questioned examples zero mutual information channels provided short messages sent without errors loss fidelity small message criterion smc introduced indication tolerated system terms covertly leaking short covert message length n 0s 1s time fidelity transmission r work needed design formal criterion captures factors mathematical elegance mutual information acknowledgements work supported part nasa larc onr vcit r scheduling realtime transactions performance evaluation maintaining security firm realtime database systems secure computer systems unified exposition multics interpretation concurrency control recovery database systems toward multilevelsecure besteffort realtime scheduler secure two phase locking protocol secure transaction processing firm realtime database sys tems security policy security models introducing noise buscontention channel secure alpha study final summary report reducing timing channels fuzzy time alternative correctness criteria concurrent execution transactions multilevel secure databases multilevel secure database concurrency control note confinement problem concurrency control algorithms realtime database systems finitestate noiseless covert channels channel capacity certain noisy timing channel covert channels stay analysis timed zchannel secure concurrency control protocol realtime databases prioritydriven secure multiversion locking protocol realtime secure database systems priority inheritance protocol approach realtime synchronization mathematical theory communication hybrid protocols using dynamic adjustment serialization order realtime concurrency control towards multilevel secure database management system realtime applications design analysis secure twophase locking protocol design analysis adaptive policy secure realtime locking protocol partial security policies support timeliness secure realtime databases security model dynamic adaptive traffic masking analysis covert timing channels usercentered security tr ctr sang h son ravi mukkamala rasikan david correction integrating security realtime requirements using covert channel capacity ieee transactions knowledge data engineering v13 n5 p862 september 2001 quazi n ahmed susan v vrbsky maintaining security timeliness realtime database system journal systems software v61 n1 p1529 march 2002 kyoungdon kang sang h son towards security qos optimization realtime embedded systems acm sigbed review v3 n1 p2934 january 2006 kyoungdon kang sang h son john stankovic managing deadline miss ratio sensor data freshness realtime databases ieee transactions knowledge data engineering v16 n10 p12001216 october 2004 kyoungdon kang sang h son john stankovic differentiated realtime data services ecommerce applications electronic commerce research v3 n12 p113142 januaryapril tao xie xiao qin improving security periodic tasks embedded systems scheduling acm transactions embedded computing systems tecs v6 n3 p20es july 2007 chanjung park seog park sang h son multiversion locking protocol freezing secure realtime database systems ieee transactions knowledge data engineering v14 n5 p11411154 september 2002 krithi ramamritham sang h son lisa cingiser dipippo realtime databases data services realtime systems v28 n23 p179215 novemberdecember 2004