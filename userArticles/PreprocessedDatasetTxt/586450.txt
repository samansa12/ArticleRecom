principles componentbased design intelligent agents compositional multiagent system design methodological perspective multiagent system design based software engineering principles process knowledge abstraction compositionality reuse specification verification paper addresses principles generic perspective context compositional development method desire overview given reusable generic models design patterns different types agents problem solving methods tasks reasoning patterns examples supporting tools described b introduction area componentbased software engineering currently welldeveloped area research within software engineering eg 15 27 42 43 specific approaches componentbased design agents often restricted objectoriented implementation environments usually based java 2 23 36 approaches agents often rarely knowledgebased architectures covered agents based one knowledge base 38 techniques complex knowledgeintensive tasks domains developed within knowledge engineering play significant role contrast paper addresses design componentbased intelligent agents sense 1 agents specified conceptual design level instead implementation level 2 specifications exploit knowledgebased techniques developed within knowledge engineering enabling design complex agents example knowledgeintensive applications compositional multiagent design method desire design specification interacting reasoning components supports design componentbased autonomous interactive agents intraagent functionality ie expertise required perform tasks agent responsible terms knowledge reasoning acting capabilities interagent functionality ie expertise required perform guide coordination cooperation forms social interaction terms knowledge reasoning acting capabilities explicitly modelled desire views individual agents overall system compositional structures hence functionality designed terms interacting compositionally structured components paper overview given principles behind design method sections 2 briefly discusses process design role compositionality within process section 3 discuuses problem analysis requirements elicitation process section 4 introduces elements used specify conceptual design detailed design process composition knowledge composition relationships design rationale verification discussed section 5 section 6 discusses notion componentbased generic models form basis reuse design processes availability large variety generic models agents tasks forms important basis design method section number models presented section 7 briefly discusses graphical software environment support design process section 8 concludes paper discussion 2 design process types compositionality design multiagent system iterative process aims identification parties involved ie human agents system agents external worlds processes addition types knowledge needed conceptual descriptions specific processes knowledge often first attained explication conceptual design descriptions results detailed design descriptions often iteration conceptual design design models partial prototype implementations may used analyse verify resulting behaviour basis examination partial prototypes new designs prototypes generated examined forth approach evolutionary development systems characteristic development multiagent systems desire multiagent system design process desire distinguishes following descriptions see figure 1 problem description conceptual design detailed design operational design design rationale problem description includes requirements imposed design rationale specifies choices made design levels assumptions respect use conceptual design detailed design operational design problem description design rationale figure problem description levels design design rationale relationship levels design conceptual detailed operational welldefined structurepreserving conceptual design includes conceptual models individual agent external world interaction agents interaction agents external world detailed design system based conceptual design specifies aspects systems knowledge behaviour detailed design provides sufficient detail operational design prototype implementations automatically generated detailed design fixed sequence design depending specific situation different types knowledge available different points system design end result final multiagent system design specified system designer level detailed design addition important assumptions design decisions specified design rationale alternative design options together argumentation included basis verification design process properties models documented related assumptions assumptions define limiting conditions model exhibit specific behaviour compositionality general principle refers use components structure design within desire method components often complex compositional structures number specific components grouped design different levels process abstraction identified processes levels except lowest level modelled process components composed components adjacent lower level processes within multiagent system may viewed result interaction specific processes complete multiagent system may example seen one single component responsible performance overall process within one single component number agent components external world may distinguished responsible specific process agent component may turn number internal components responsible specific parts process components may composed entailing interaction specific processes ontology used express knowledge needed reason specific domain may also seen single knowledge component knowledge structure may composed number specific knowledge structures turn may composed even specific knowledge structures shown figure 2 compositionality processes compositionality knowledge two separate orthogonal dimensions compositional knowledge structures referenced compositional process structures needed compositionality knowledge compositionality processes figure 2 compositionality processes compositionality knowledge compositionality means acquire information process hiding within model defining processes knowledge different levels abstraction unnecessary detail hidden compositionality also makes possible integrate different types components one agent components groups components easily included new designs supporting reuse components levels design 3 problem description requirements elicitation techniques used acquire problem description predefined techniques vary applicability depending example situation task type knowledge system developer wishes focus acquisition requirements imposed system part problem description crucial requirements part initial problem definition may also evolve development system requirements engineering wellstudied field research recent years requirements engineering distributed agent systems studied eg 19 level multiagent system requirements related dynamics interaction cooperation patterns level individual agents requirements related agent behaviour due dynamic complexity analysis specification requirements difficult process requirements expressed informal semiformal formal manner context described following informally expressed requirement dynamics multiagent system whole r2 service request must followed adequate service proposal certain time delay structured semiformal manner requirement expressed follows point time agent outputs service request appropriate agent b later point time agent b outputs proposal request agent still later point time agent outputs proposal accepted agent b following temporal formalisation made holdsstate outputa communicationfromtorequestr b formal language used comparable situation calculus eg compare holdsto holdspredicate situation calculus explicit variables traces time expression holdsstate outputa communicationfromtorequestr b means within trace time point communication statement placed output interface agent trace sequence time threevalued information states system including input output information states agents environment time frame discrete finite variability assumption used details use predicate logic temporal language see 25 besides requirements dynamics overall multiagent system also requirements expressed behaviour single agents example agent expected adequately handle service requests satisfy following behaviour requirements a1 agent b receives request service client necessary information regarding client available agent b issues request information client requirements dynamics multiagent system higher process abstraction level behaviour requirements agents 4 conceptual design detailed design conceptual detailed designs consist specifications following three types process composition knowledge composition relation process composition knowledge composition three types specifications discussed detail 41 process composition process composition identifies relevant processes different levels process abstraction describes process defined terms lower level processes depending context system designed two different views taken task perspective multiagent perspective task perspective refers view processes needed perform overall task first identified processes subtasks delegated appropriate agents external world agents external world designed multiagent perspective refers view agents external world first identified processes within agent within external world 411 identification processes different levels abstraction processes described different levels abstraction example processes multiagent system whole processes within individual agents external world processes within taskrelated components individual agents modelling process processes identified modelled components process types information used input resulting output identified modelled input output interfaces component modelling process abstraction levels levels process abstraction identified modelled abstractionspecialisation relations components adjacent levels abstraction components may composed components may primitive primitive components may either reasoning components example based knowledge base alternatively components capable performing tasks calculation information retrieval optimisation et cetera identification processes different abstraction levels results specification components used building blocks specification subcomponent relation defining components subcomponent component distinction different process abstraction levels results process hiding 412 composition way processes one level abstraction system composed processes adjacent lower abstraction level system called composition composition processes described componentsubcomponent relations addition possibilities information exchange processes static view composition task control knowledge used control processes information exchange dynamic view composition information exchange information exchange defines types information transferred components information links achieved within components private information links defined transfer information one component another addition mediating links defined transfer information input interfaces encompassing components input interfaces internal components transfer information output interfaces internal components output interface encompassing components task control knowledge components may activated sequentially may continually capable processing new input soon arrives awake holds information links information links may explicitly activated may awake task control knowledge specifies conditions components information links active made awake evaluation criteria expressed terms evaluation results success failure provide means guide processing task control knowledge specifies processes performed evaluated goals process defined task control foci together extent pursued evaluation success failure processs performance specified evaluation criteria together extent processes may performed sequence parallel may continually awake eg able react new input soon arrives others may need activated explicitly 42 knowledge composition knowledge composition identifies knowledge structures different levels knowledge abstraction describes knowledge structure defined terms lower level knowledge structures knowledge abstraction levels may correspond process abstraction levels often case often matrix depicted figure 2 shows n correspondence processes knowledge structures n 1 421 identification knowledge structures different abstraction levels two main structures used building blocks model knowledge information types knowledge bases knowledge structures identified described different levels abstraction higher levels details hidden resulting levels knowledge abstraction distinguished information types knowledge bases information types information type defines ontology lexicon vocabulary describe objects terms sorts relations functions defined objects information types defined signatures sets names sorts objects functions relations ordersorted predicate logic information types specified graphical form formal textual form knowledge bases knowledge bases use ontologies defined information types relations information types knowledge bases define precisely information types used relationships concepts specified information types defined knowledge bases detailed design 422 composition knowledge structures information types composed specific information types following principle compositionality discussed similarly knowledge bases composed specific knowledge bases compositional structure based different levels knowledge abstraction distinguished results information knowledge hiding 43 relation process composition knowledge composition process process composition uses knowledge structures knowledge structures information types knowledge bases used processes defined relation process composition knowledge composition cells within matrix depicted figure 2 define relations 5 design rationale compositional verification design rationale behind design process describes relevant properties system relation design requirements relevant assumptions initial requirements stated initial problem description others originate design process added problem description important design decisions made explicit together alternative choices could made arguments favour different options operational level design rationale includes decisions based operational considerations choice implement parallel process one machines depending available capacity information particular importance verification requirements imposed multiagent systems designed perform complex interactive tasks often requirements behaviour agents system nontrivial applications dynamics multiagent system control thereof importance vital understand system states change time principle design specifies changes possible anticipated behaviour intended obtain understanding behaviour compositional multiagent system dynamics expressed means evolution information states time information states defined different levels process abstraction behaviour described different levels process abstraction well purpose verification prove certain set assumptions system adheres certain set properties example design requirements compositional multiagent system verification method takes process abstraction levels related compositional structure account 18 30 6 compositional verification method described applied diagnostic reasoning cooperative information gathering agents negotiating agents respectively verification process done mathematical proof ie proof form mathematicians accustomed specification system together assumptions imply properties system needs fulfil requirements formulated formally terms temporal semantics verification process requirements system whole derived properties agents one process abstraction level lower agent properties turn derived properties agent components one abstraction level lower primitive components components composed others verified using traditional verification methods knowledgebased systems specified means knowledge base verification methods tuned type specification used verification composed component given process abstraction level done using properties subcomponents embeds specification process composition relation environmental properties component depending rest system including world introduces compositionality verification process given set environmental properties proof certain component adheres set behavioural properties depends assumed properties subcomponents composition relation properties interactions subcomponents manner controlled assumptions component functions properly properties proven subcomponents implies properties different levels process abstraction play role verification process compositional verification following advantages see also 1 26 30 reuse verification results supported refining existing verified compositional model decomposition leads verification refined system verification structure original system reused process hiding limits complexity verification per abstraction level condition apply compositional verification method described availability explicit specification system description abstraction level composed descriptions adjacent lower abstraction level formalised properties logical relations resulting compositional verification process provide general insight relations different forms behaviour example 18 different properties diagnostic reasoning logical relations formalised manner 30 done proactiveness reactiveness properties cooperative information gathering agents 6 termination successfulness properties negotiation processes analysed 6 reusability generic models iterative process modelling processes knowledge often resourceconsuming limit time expertise required design system development method reuse many elements possible within compositional development method generic agent models task models existing knowledge structures ontologies knowledge bases may used purpose models used depends problem description existing models examined discussed rejected modified refined andor instantiated context problem hand initial abstract descriptions agents tasks used generate variety specific agent task descriptions refinement composition existing models employed well agent models task models generic two senses respect processes abstracting processes lower levels process abstraction respect knowledge abstracting lower levels knowledge abstraction eg specific domain application often different levels genericity model may distinguished refinement generic model lower process abstraction levels resulting specific model called specialisation refinement generic model lower knowledge abstraction levels eg model specific domain application called instantiation compositional system design focuses aspects genericity often starting generic agent model model may modified refined specialisation instantiation process specialisation replaces single empty component generic model composed component consisting number sub components process instantiation takes component generic model fills domain specific information types knowledge bases refinement processes components also deleted added compositional structure design basis performing operations design applicability generic agent model depends basic characteristics agent problem description applicability generic task model agentspecific tasks depends type task involved also way task approached since availability variety generic models crucial quality support offered design process section number generic models available desire discussed 61 generic agent models characteristics automated agents vary significantly depending purposes tasks designed agents may may example capable communicating agents fully reactive agent may capable reacting incoming information external world fully cognitive social agent comparison may capable planning monitoring effectuating cooperation agents agent models applicable given situation possibly combination determined system design generic models weak agents cooperative agents bdiagents deliberative normative agents briefly described communicated observation results wim observed agent communicated agent agent task control process control maintenance agent information agent task maintenance world information agent interaction management world interaction management process info wim process info aim process info process info mwi info communicated communicated info ast communicated world info observations actions observed info ast observed world info action observation info ast communication info ast agent info opc world info opc agent info wim agent info aim world info aim world info wim figure 3 generic model weak agent notion 611 generic model weak agent notion gam generic agent model gam depicted figure 3 supports notion weak agent autonomy proactiveness reactiveness social abilities distinguished characteristics cf 44 type agent reasons processes supporting autonomy proactiveness interacts maintains information agents supporting social abilities reactiveness proactiveness respect agents interacts maintains information external world supporting reactiveness proactiveness respect external world six components process control opc maintenance world information mwi world interaction management wim maintenance agent information mai agent interaction management aim agent specific tasks ast processes involved controlling agent eg determining monitoring evaluating goals plans also processes maintaining self model task component process control processes involved managing communication agents task component agent interaction management maintaining knowledge agents abilities knowledge task component maintenance agent information comparably processes involved managing interaction external material world task component world interaction management maintaining knowledge external material world task component maintenance world information specific task agent designed example design diagnosis modelled component agent specific task existing generic task models may used specialise component see section 62 612 generic cooperative agent model gcam agent explicitly reasons cooperation agents generic model agent depicted figure 3 extended include additional component cooperation management component cooperation management component includes knowledge needed acquire cooperation shown figure 4 cooperation management task control monitor project generate project required project info agents required monitoring info monitoring info output required info agents commitments output generated project incoming project info monitoring info figure 4 refinement cooperation management generic cooperative agent model gcam achieve cooperation number agents requires specific plans devised specifically purpose plans result reasoning component generate project component identifies commitments needed agents involved modifies existing plans necessary figure 5 composition component generate project gcam composition component generate project figure 5 includes two components prepare project commitments composing initial project team generate modify project recipe determine detailed schedule project interaction project team members two purposes execution plan also part cooperation monitored individual agent involved task component monitor project two subcomponents component depicted figure 6 assess viability determine feasibility plan determine consequences consequences changes agents involved generic model cooperative agent based approach put forward 28 detailed explanation composition processes knowledge involved interaction components see 9 monitor project task control determine consequences assess viability project info assessment info dc info project changes assessment info output figure 6 composition component monitor project gcam 613 generic model bdiagent gbdim agent bases control processes beliefs desires commitments intentions called bdiagent bdiagent model refinement model weak agent gam refinement process control generic model bdiagents gbdim shown figure 7 process control task control desire determination determination intention commitment determination transferdesireinfoforid transferbeliefinfoforid infofordd agentinfo figure 7 refinement component process control generic bdiagent model gbdim beliefs desires intentions together commitments determined separate components interaction three distinction made 1 intentions commitments respect goals 2 intentions commitments respect plans distinction involves different types knowledge result modelled two different components depicted figure 8 intention commitment determination task control goal determination plan determination figure 8 refinement component intention commitment determination please note influence intentions commitments respect goals directly influences intentions commitments respect plans vice versa detail see 8 goal management process control management management plan management belief info nm normative meta goals goal control plan control belief info gm evaluation info monitor information selected goals goal information selected actions belief info sm norms figure 9 generic model deliberative normative agent gdnm 614 generic model deliberative normative agent gdnm many agent societies norms assumed play role claimed following norms also possibility intelligent norm violation importance principles agents able behave deliberatively basis explicitly represented norms identified incorporated generic model deliberative normative agent using agent model norms communicated adopted used metagoals agents processes impact deliberation goal generation goal selection plan generation plan selection generic model agent uses norms deliberative behaviour refinement generic agent model gam new component included society information component maintenance society information msi top level component process control refined shown figure 9 details see 16 62 generic models problem solving methods tasks specific tasks agents designed vary significantly likewise variety tasks generic models based specific problem solving methods developed wide diagnosis design process control planning scheduling examples tasks generic models available section compositional generic task models developed desire first three types tasks briefly described task models combined agent models described used specialise agent specific task component 621 generic model diagnostic tasks gdim tasks specifically related diagnosis included generic task model diagnosis top level composition see figure 10 generic model generic diagnosis model gdim based determination validation hypotheses subsumes causal anticausal diagnostic reasoning application generic model types diagnosis discussed 13 diagnostic reasoning system task control hypothesis determination hypothesis validation hypotheses observation info assessments symptoms presence diagnosis required observations hyp target info focus info figure generic task model diagnosis gdim component hypothesis determination used dynamically focus certain hypotheses process hypothesis validation includes determination observations observation determination needed validate hypothesis transferred external world performed evaluation results observation respect hypothesis focus hypothesis evaluation hypothesis validation task control hypothesis evaluation observation determination predictions observed obs info focus hyp focus hyp od performed obs eval info obs info output obs target info figure 11 composition component hypothesis validation gdim 622 generic model design tasks gdem compositional generic design model gdem see figure 12 10 based logical analysis design processes analyses applications including elevator configuration design environmental measures 14 model requirement qualification sets manipulation component rqs manipulation rqsm design object description manipulation component dod manipulation dodm design process coordination dpc distinguished three separate interacting processes model provides generic structure refined specific design tasks different domains application initial design problem statement expressed set initial requirements requirement qualifications requirements impose conditions restrictions structure functionality behaviour design object structural description generated design qualifications requirements qualitative expressions extent individual groups requirements considered hard preferred either isolation relation individual groups requirements one point time design design process focuses specific subset set requirements subset requirements plays central role design process temporarily committed current requirement qualification set aim generating design object description satisfy requirements design task control design process coordination dod manipulation rqs manipulation design process objective description design process evaluation report overall design strategy rqsm overall design strategy dodm rqsm process evaluation report results rqs information rqs dodm results dod intermediate dod information intermediate rqs information intermediate dodm results dod information dodm process evaluation report figure 12 composition design task gdem design subsets set requirements considered may change may requirements holds design object descriptions representing structure object designed component requirement qualification set manipulation four subcomponents rqs modification current requirement qualification set analysed proposals modification generated compared promising according deductive rqs refinement current requirement qualification set deductively refined means theory requirement qualification sets current rqs maintenance current requirement qualification set stored maintained rqsm history maintenance history requirement qualification sets modification stored maintained component manipulation design object descriptions also four subcomponents dod modification current design object description analysed relation current requirement set proposals modification generated compared promising according measure selected deductive dod refinement current design object description deductively refined means theory design object descriptions current dod maintenance current design object description stored maintained dodm history maintenance history design object descriptions modification stored maintained detail model found 10 11 different levels strategic reasoning model described detail including component design process coordination highest level strategic reasoning 623 generic model process control tasks gpcm process control involves three subprocesses process analysis simulation world processes plan determination subprocesses represented explicitly toplevel generic process control model gpcm depicted figure 13 process control task task control selected observations selected actions plan determination simulated world processes process analysis evaluation information spy points finalisation current world state simulation selected actions process analysis proposed actions world obs info simulation information figure process composition process control gpcm process analysis involves evaluation process whole determination observations performed external world depicted figure 14 composition component process analysis process analysis task control process evaluation determine observations eval info selected observations world simulation obs info evaluation evaluation information performed world obs plans eval plans determ obs figure 14 process composition process analysis information links note two types observations performed incidental observations return observation result current point time continuous observations continuously return updated observation results soon changes world occur 63 generic models reasoning patterns example generic model specific reasoning pattern model reasoning patterns assumptions dynamically added retracted sometimes called hypothetical reasoning discussed reasoning assumptions entails deciding set assumptions assumed reasoning assumptions deriving facts logically implied set assumptions reasoning assumptions derived facts may evaluated based evaluation assumptions may rejected andor new set assumptions may chosen reasoning assumptions example assumption chosen facts derived assumption contradict information obtained different source eg observation assumption may rejected converse may assumed reasoning assumptions reflective reasoning method proceeds following alternation object level metalevel reasoning upward downward reflection inspecting information currently available epistemic upward reflection determining set assumptions metalevel reasoning assuming set assumptions downward reflection assumptions deriving facts follow assumed information object level reasoning inspecting information currently available epistemic upward reflection evaluating derived facts metalevel reasoning deciding reject assumptions andor choose new set assumptions based evaluation metalevel reasoning example assumption true chosen facts derived assumption contradict information obtained different source assumption true may rejected converse false may assumed reasoning pattern also occurs diagnostic reasoning based causal knowledge system task control assumption determination assumption evaluation observation result prediction external world assessments required observations predictions hypotheses assumptions observation results figure generic model reasoning assumptions garm generic model reasoning assumptions consists four primitive components external world observation results prediction assumption determination assumption evaluation see figure 15 first two components represent object level last two metalevel component observation result prediction reasons assumptions two components assumption determination assumption evaluation reason assumptions note generic reasoning model applied among others de generic model diagnosis gdim presented section 621 however model types application well example basis reasoning model specialised models designed generic model default reasoning explicit strategic knowledge resolution conflicting defaults gdrm generic model reasoning basis closed world assumption gcwarm possibilities contextsensitive informed scoped variants closed world assumption 7 supporting software environment compositional design method desire supported software environment desire software environment includes number facilities graphical design tools support specification conceptual detailed design processes knowledge different abstraction levels detailed design desire provides enough detail able develop operational implementation automatically desired environment implementation generator supports prototype generation partially fully specified models code generated implementation generator executed execution environment screenshots interaction tools illustrate support tools provide figure 16 shows result creation mouse click filling names two components agent external world two links components precise specifications components links created interaction graphical editors make drawing shown figures 17 18 moreover within one components compositional structure using subcomponents required mouse click component new drawing area opened components introducedzoom external world figure graphical design tool process composition figure 17 depicts initial specification agent component example input output information types defined figure 18 shows specification information link external world agent example type information exchanged namely actioninfo specified window figure 19 shows information types defined example information type temperatures requires new sort tempvalue object input information typ e observationresults object output information typ e actioninfo additional information typ e specification object input information typ e observationresultinfo figure component editing window component information type information type external world figure editor information links information type temperatures information type references figure 19 editor information types 8 discussion basic principles behind compositional multiagent system design described paper process knowledge abstraction compositionality reusability formal semantics formal evaluation principles generally acknowledged importance software engineering knowledge engineering operationalisation principles within compositional development method multiagent systems however distinguishing element method supported graphical software environment three levels design supported conceptual design implementation libraries generic models instantiated components highlighted paper support system designers levels design generic agent models generic task models generic models reasoning patterns help structure process system design formal semantics provide basis methods verification essential part method number approaches conceptuallevel specification multiagent systems recently proposed one hand generalpurpose formal specification languages stemming software engineering applied specification multiagent systems eg 35 40 approaches using z resp z csp compositional development method desire committed wellstructured compositional designs specified higher level conceptualisation z vdm particular allows specification terms knowledge bases especially applications informationintensive domains advantage moreover designs implemented automatically using automated prototype generators 34 approach composition reactive system components described specification components done basis temporal logic two differences approach following first approach limited reactive components approach components allowed nonreactive well another difference case specification type composition components limited case task control specification forms part composition specification dynamics composition defined tailored manner using temporal task control rules enables specify composition precisely type composition required also difference 35 40 hand new development methods specification multiagent systems proposed methods often commit specific agent architecture instance 32 describe language one hand based bdi agent architecture 39 hand based objectoriented design methods 42 agent constructed components using central message board within agent manages interaction agents components integrates activity within agent approach general sense componentbased architecture agent eg model gam need commit central messageboard desired one architectural possibilities moreover components within desire selfcontained sense include knowledge bases relate specific inference procedures settings contrast 42 components quite heterogeneous example component knowledge base gets dynamic semantics processed another component another difference 42 components specified type logic programs clear declarative andor procedural semantics programs defined example allow component replacement one steps dynamics suggests dynamic semantics programming level define semantics conceptual level far trivial approach semantics defined conceptual design level based traces compositional states concurrent metatem framework 22 another modelling framework multiagent systems comparison discussed structure agents interagent communication metalevel reasoning extensive comparison see 37 structure agents desire knowledge structures used knowledge bases input output interfaces components defined terms information types sort hierarchies defined signatures define sets ground atoms assignment truth values true false unknown atoms called information state every primitive component internal information state input output interfaces information states information states evolve time atoms persistent sense atom certain information state assigned truth value previous information state unless truth value changed updating information link concurrent metatem information types predefined set atoms sorts input output interface object consists names predicates two valued logic used closed world assumption thus information state defined set atoms true desire specification multiagent system agents usually subcomponents toplevel component represents whole multiagent system together one components represent rest environment component represents agent composed component agent task hierarchy mapped hierarchy components subcomponents information links time scale concurrent metatem model agents modelled objects structure tasks modelled one set rules every object timescale communication agents desire defined information links communication based pointtopoint broadcast message passing communication agents concurrent metatem done broadcast message passing object sends message received objects top multicast pointtopoint message passing defined desire metareasoning modelled using separate components object metalevel example one component reason reasoning process information state another component two types interaction object metalevel distinguished upward reflection object metalevel downward reflection meta objectlevel knowledge structures used metalevel reasoning defined terms information types standard metainformation type automatically generated metareasoning concurrent metatem logic mml developed mml domain terms range extended incorporate names objectlevel formulae execution temporal formulae controlled executing metainterpreter metafacilities implemented yet compositional approach agent design paper aspects common object oriented design methods eg 5 17 41 however differences well examples approaches objectoriented agent specifications found 4 31 first interesting point discussion difference agents objects tend classify agents different objects example 29 compare objects agents dimension autonomy following way object encapsulates state control state accessed modified via methods object provides agents encapsulate state way however also think agents encapsulating behaviour addition state object encapsulate behaviour control execution methods object x invokes method object control whether executed sense object autonomous control actions contrast think agent exactly kind control actions performs distinction think agents invoking methods actions agents rather tend think requesting actions performed decision whether act upon request lies recipient others consider agents specific type objects able decide whether execute method objects say initiate action objects say go difference compositional design method desire objectoriented design methods representation basic functionality within desire declarative knowledgebased specification forms used whereas method specifications usually procedural style specification used objectoriented design another difference within desire composition relation defined specific manner static aspects information links dynamic aspects temporal task control knowledge according prespecified format similarity reuse generic structures generic models desire patterns cf 3 23 objectoriented design methods although functionality compositionality specified different manners discussed r acm transactions programming languages systems plangent appreoahc making mobile agents intelligent pattern language agent design patterns elements agent application design compositional design verification multiagent system onetomany negotiation formal specification multiagent systems realworld case modelling internal behaviour bdiagents formalisation cooperation model based joint intentions formal specification design tasks strategic knowledge compositional design models acquisition shared task model principles architecture compositional verification knowledgebased systems case study diagnostic reasoning science computer programming formal refinement patterns goaldriven requirements elaboration formal representing executing agentbased systems elements reusable objectoriented software specification behavioural requirements within compositional multiagent system design compositional verification distributed realtime arbitration protocol communications acm controlling cooperative problem solving industrial multiagent systems using joint intentions compositional verification multiagent systems formal analysis proactiveness reactiveness methodology technique systems bdi agents processes techniques composition reactive system components formal framework agency autonomy open agent archtiecture framework building distributed software systems agent modelling metatem desire modeling rational agents within bdi architecture architectural issues componentbased software engineering department computer science lessons learned six years componentbased development tr objectoriented modeling design composing specifications goaldirected requirements acquisition objectoriented development objectoriented analysis design applications 2nd ed compositional verification distributed realtime arbitration protocol design patterns agent theories architectures languages representing executing agentbased systems controlling cooperative problem solving industrial multiagent systems using joint intentions methodology modelling technique systems bdi agents formal refinement patterns goaldriven requirements elaboration applications intelligent agents agent design patterns zeus composition reactive system components component primer lessons learned six years componentbased development requirements engineering acquisition shared task model compositional verification knowledgebased systems modelling internal dynamic behaviour bdi agents compositional verification multiagent systems formalization cooperation model based joint intentions agent modelling metatem desire deliberative normative agents specification bahavioural requirements within compositional multiagent system design compositional design verification multiagent system onetomany negotiation ctr frances brazier frank cornelissen rune gustavsson catholijn jonker olle lindeberg bianca polak jan treur compositional verification multiagent system onetomany negotiation applied intelligence v20 n2 p95117 marchapril 2004 f brazier b j overeinder van steen n j e wijngaards agent factory generative migration mobile agents heterogeneous environments proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain catholijn jonker jan treur wouter c wijngaards specification analysis simulation dynamics within organisation applied intelligence v27 n2 p131152 october 2007 catholijn jonker jan treur agentoriented modeling dynamics biological organisms applied intelligence v27 n1 p120 august 2007