consistent initial condition calculation differentialalgebraic systems paper describe new algorithm calculation consistent initial conditions class systems differentialalgebraic equations includes semiexplicit indexone systems consider initial condition problems two typesone differential variables specified one derivative vector specified algorithm requires minimum additional information user outline implementation generalpurpose solver daspk differentialalgebraic equations present numerical experiments illustrate effectiveness b introduction paper concerned calculation initial conditions systems differentialalgebraic equations daes write dae system general form gt g 0 ndimensional vectors initial value problem system problem finding solution satisfies consistent set initial conditions yt 0 two software packages written solving initial value problems dae system 11dassl 2 extension called daspk 7 use variableorder variable stepsize backward differentiation formulas dassl solves linear system time step dense banded direct linear system methods daspk linear systems arise time step solved either direct linear system methods preconditioned krylov iterative method namely gmres 16 largescale systems iterative method combined suitable preconditioner quite effective using either solvers dassl daspk integration must started consistent set initial conditions 0 0 consistency requires particular gt 0 usually components 0 0 known directly original problem specification problem finding consistent initial values challenging task present dassl daspk solvers offer option finding consistent 0 0 given initial 0 taking small artificial step backward euler method however initialization problems always arise form even intended problem type technique always successful case unsatisfactory produces values paper propose alternative procedure class dae problems show method combination modified newton methods dassl newtonkrylov methods 5 6 yields algorithm converges nearly rapidly underlying newton newtonkrylov method new method convenient user makes use jacobian preconditioner matrices already required dassl daspk consistent initialization problem studied 1 8 9 12 13 15 14 general dae systems consider however none algorithms offer simplicity convenience approach develop research supported part applied mathematical sciences subprogram office energy research us dept energy lawrence livermore national laboratory contract w7405eng48 center computational sciences engineering l316 lawrence livermore national laboratory livermore california 94551 z department computer science university minnesota minneapolis mn 55455 work author partially supported aro contract number daal0392g0247 doe contract number defg0292er25130 nist contract number 60nanb2d1272 minnesota supercomputer institute class problems consider generalization semiexplicit indexone dae systems semiexplicit indexone dae systems characterized follows dependent variable vector split vector u size n called differential variables vector v size n called algebraic variables equations form g v gv nonsingular square matrix concerned initialization problem finding initial value v 0 v initial value u 0 u specified easily generalize class problems considered ode subsystem u may implicit thus consider systems form matrix f u square nonsingular continue refer problems form 13 f u 0 g v nonsingular semiexplicit indexone even though may explicit u 0 fact main initialization technique applies even general class problems explain later also consider second type initialization problem initial derivatives specified dependent variables unknown must solve 0 given 0 example beginning dae solution steady state corresponds specifying 0 problem involve split vector differential algebraic parts semiexplicit form equations later sections refer two problems initialization problem 1 initialization problem 2 2 basic method central idea paper solve initial condition problems help mechanisms already place solution dae system rather requiring user perform special computation consider first initialization problem 1 semiexplicit indexone system 13 v determined given u initial point expand problem include calculation u 0 thus form nonlinear system nvector namely general approach solving expanded problem also used 12 newton iteration solution f would require jacobian matrix f assumption matrix nonsingular least neighborhood desired solution course integrating dae system dassl daspk user must call upon one several linear system algorithms solve n theta n linear systems every time step arise newtonlike method solving algebraic systems gt vector containing past values c constant set solver inversely proportional stepsize h thus linear systems form r residual vector deltay correction matrix j dae system iteration matrix user encouraged supply approximation j use either newton matrix case direct methods preconditioner case krylov method direct case j generated difference quotient approximations supplied user case system 13 f f cf order make use j solving f pick artificial stepsize h set 25 recover block f u 0 rescale first blockcolumn j h using scaling matrix identity matrices size n n respectively thus consider matrix hg evaluated note f thus h small appropriate sense expect j good approximation f 0 x proposed initialization procedure carry newtonlike iteration corrections iteration call linear system solution procedure used later solving dae system also require information components differential algebraic order apply correction deltax vectors 0 otherwise procedure requires additional information methodology upon convergence components yt 0 components corresponding u 0 0 derivatives differential variables remaining components corresponding v 0 simply set zero integration procedure insensitive since v 0 appear 13 1 1 although bdf formulas depend values error test end first step depends unless v variables excluded error test option code first time step produce accurate values next two sections present procedure formal manner prove convergence initialization problem 2 given initial value 0 must compute initial case simply interested solving system 0 assume problem wellposed provided user f 0 g nonsingular neighborhood solution including initial guess supplied first problem call user supply dae iteration matrix j time set matrix involved simply stepsize h proceed newton iterations using j corrections deltay finally remark extension ideas hessenberg index2 dae systems way authors 3 general problems case initialization problem 1 full scope problems idea applied general systems form 13 0 satisfies f true jacobian f 0 approximated suitably small 32 permuted variables wish generalize system 13 first dropping requirement differential algebraic components separated blocks thus assume permutation matrix p size n terms z system function g form vector unknowns terms z terms order express objective function f x precisely introduce two projections r n 0 satisfy help projections write p p x vector containing unknown algebraic components corresponding similarly vector containing unknown derivative components corresponding u 0 known components 0 comprise vector write x fact g depend v 0 means gt thus system solved x way need require components g blocked 32 thus allow permutation q components g qg blocked form course qf however work g hence f original ordering initialization procedure 33 implicit constraints generalize form problem solve suppose permuting vector z py dae system function g form gt full rank n class problems generalizes 13 32 algebraic constraints gt u 13 need identified explicitly systems form define projection matrices p p 35 true gt define vectors w x 33 34 system solved jacobian function knowing h u 0 full rank nonsingular matrix mh 1 1 square nonsingular matrix size n fact index one implies b 2 nonsingular near consistent initial value see x25 2 thus w f 0 nonsingular hand jacobian supplied approximated user taking recalling scaling matrix defined 26 corresponding scaling x thus find comparing 310 312 expect j work well approximation f 0 x modified newton iteration solve f corrections x take form class problems given 38 take scope initialization problem 1 implemented algorithm described 34 general indexone systems note 38 include fullyimplicit index one daes rank dependency conditions combined exclude certain indexone sys tems simple example system index one wellposed given value 1 0 fit scheme 38 contains derivatives variables rank 2 theta 2 matrix h 0 1 principle scheme applied general index1 dae systems allowing p general matrix permutation constant nonsingular matrix p found transforms full rank 38 gt defined 35 vector x function f x defined 34 39 0d defined input vector 0 p 0 36 jacobian f 0 approximation satisfy 310 312 thus procedure still work long problem supplied user wellposed however contrast case p permutation solution vector x found vector may differ 0in components example system appropriate matrix p making choice p input initial value 2 differs g 2 0 components 0 would altered procedure hand preserving 1 approach would used procedure general constant p determines consistent set initial conditions sense initial values transformed variables consistent initial values derivatives original variables may consistent example system 2 initialized correctly whereas 0 1 0 2 individually determined information constraint derivative g 0 2 available 13 general index1 systems due complications expense finding smooth p continuing change variables later time steps chosen implement extension algorithm instead restricting p class permutation matrices necessary user may able bring problem form 38 change variables described 4 convergence theory case initialization problem 1 given 3839 question convergence newton modified newton iteration arises give convergence analysis iteration theorem includes full modified newton iteration problem full refers fact approximate jacobian evaluated every iteration first prove main convergence result theorem 41 discuss applicability initialization problems sections 2 3 last subsection comment use newtonkrylov iteration solve initialization problems 41 newton iteration convergence consider convergence x iteration include types newton iterations taking ae x k full newton iteration x modified newton iteration x fixed function f x general function assumed exist smooth matrixvalued functions jx h cx h interest following theorem says iteration converges mild smoothness assumptions functions f c norm k delta k used arbitrary theorem 41 let f r n r n continuously differentiable open convex set ae r n assume exists x 2 f x c exists ae 0 neighborhood nx condition nx ae constant fl exist matrixvalued functions jx h cx h 0 x 2 related cx satisfying lipschitz condition nx ae constant fl c exist constants ffl 0 h 0 x h x 2 nx ffl modified newton case sequence generated 41 welldefined converges x conditions iterates obey k full newton case modified newton case proof extension proof dennis schnabel 11 p 90 treats full newton case exact jacobian main complication due inaccuracy iteration matrix giving proof give three lemmas useful three hypotheses theorem assumed lemma 42 ffl minfae 12fiflg proof first note lipschitz condition f 0 perturbation relation 3120 dennis schnabel 11 p 45 f 0 x nonsingular lemma 43 ffl minfae 12fiflg proof lemma 42 using 43 perturbation relation 3120 11 jx h nonsingular lemma 44 ffl minfae 12fiflg proof norm first term bounded xk using lemma 43 lipschitz condition f 0 second term bounded 4hfic 0 since kcxk c 0 previous lemma proof theorem 41 derive recurrence 44 gives linear convergence cases qsuperlinear convergence limit let ae oe lemmas 42 43 f 0 x jx h nonsingular h value ffl also measure nonlinearity problem prove bound 44 induction iteration number k 0 h h welldefined two terms final equation 46 first bounded using lemma 4112 dennis schnabel 11 p 75 says kf x norm first term bounded 2fiflkx second term bounded using lemma 44 gives bound 4fiflkx norm matrix coefficient thus obtain shown 44 note since x 0 x 0 nx ffl using 45 jacobian welldefined nonsingular general induction step goes exactly obtain 44 thus x showing iteration welldefined fact gives linear convergence sequence fx k g 2 42 application dae systems explained section 2 central objective solve initial condition problems help mechanisms already place integration dae system general time step within dassl daspk solvers involves solution linear systems j deltax r matrix dae system iteration order use values j inside newton modified newton iteration solving nonlinear problem f must derive relationship jacobian matrix f 0 x j following lemma generalizes similar relationships derived earlier sections lemma 45 assume exists projection matrix p gt define projection matrix p j gamma p function f x 0d given x proof 411 next partial derivatives evaluated proves lemma daspk starting input initial guesses 0 0 corresponding initial value x x pick suitably small value h set 1h define jx h matrix lemma 45 satisfies 4 note newton iteration 41 based jx h correction daspk direct methods selected jt supplied user possibly approximate form generated difference quotients j gamma1 realized lu method case 0 fixed therefore 414 represents modified newton method theorem 41 applied iteration one assumes differentiability g respect 0 partial derivatives g respect 0 locally lipschitz continuous wellposed initialization problems type discussed sections 2 3 clear assumptions theorem hold thus iteration x converge given h small enough good enough initial guess x 0 43 newtonkrylov iteration using newtonkrylov iteration solve initialization problems sections 2 3 use preconditioned gmres linear iteration finitedifference approximations involving gt approximate action j arbitrary vector preconditioner approximates j gamma1 gmres computes approximate solution p k small enough step deltax k given deltax implies small reason finite differences g used instead f gmres solver daspk uses finite differences g approximate j times arbitrary vector dae time step thus able apply machinery already available user need concerned j f 0 relationship j f 0 given lemma 45 also clear good preconditioner j suffice iteration considerations lead us consider convergence following inexact newton iteration general function f x 1 general inexact newton setting manner step increment k computed unimportant need know k found assume exist smooth matrixvalued functions jx h cx interest following theorem says iteration converges mild smoothness assumptions functions f c theorem 46 let f r n r n continuously differentiable open convex set ae r n assume conditions ad theorem 41 hold exist constants ffl 0 x h 0 1 sequence generated 415 welldefined converges linearly x proof since assumptions ad theorem 41 hold choose ffl h 45 thus x h nonsingular existence 0 satisfying guaranteed given 0 ks hence follows ks 1 choose h smaller necessary j 4fi1jhc 0 1 residual norm condition 416 0 rest proof follows along lines proof theorem 23 dembo et al 10 5 linesearch algorithm order improve robustness newton algorithm discussed also employ linesearch backtracking algorithm consider general function let x ffi r n residual norm condition holds euclidean norm vector ffi thought approximate solution newton equations f 0 obtained using either direct solve approximate jacobian iterative method gmres given ffi shown brown saad 6 ffi descent direction f x ie given ffi descent direction f x employ following backtracking algorithm algorithm 51 given 1 2 fx exit otherwise go next step 3 choose 2 min max set go step 2 global convergence algorithm used connection inexact newton iteration discussed length 6 simplest choice take 12 makes 2 use choice implementation also use small decrease f required given f defined 51 algorithm ffi exact newton step x ie hence case condition step 2 algorithm 51 simply next gmres solution mth step applied f 0 shown 5 condition step 2 algorithm 51 present context want solve nonlinear system f 29 39 however direct measure size f directly available weighted rootmeansquare wrms norm used daspk norms suggest solve instead problem matrix current approximate system jacobian matrix j 24 direct case preconditioner p krylov case diagonal matrix containing weights used wrms norm thus f square wrms norm gamma1 f either case likely f x wellscaled wrms norm direction vector ffi available us newton correction given 210 313 thus 312 case initialization problem 1 case initialization problem 2 cases expect question arises whether ffi descent direction f current approximate solution x easy calculation gives using assure small follows ffi descent direction f x 6 implementation implemented algorithms described initialization problems 1 2 new options generalpurpose dae solver daspk 7 initialization problem 1 implemented general class indexone systems described section 33 give details concerning implementation describe briefly use new options assume reader familiar use dassl daspk detailed descriptions solvers found 2 7 respectively solvers normally require initial 0 consistent within dependent variable vector daspk denote differential variables denote algebraic variables specifying input parameter info11 daspk solve one following two initialization problems initial values already consistent default given calculate 0 option specified user must identify daspk differential algebraic components done setting differential variable algebraic variable 2 solve initialization problem 2 given 0 calculate either case initial values given components input initial guesses unknown components must also provided input algorithm problem 1 requires initial stepsize scaling h determine first approximation try initial stepsize h 0 used dassl daspk 2 p 128 since know advance value small enough achieve convergence modified newton iteration set loop starting initialization fails divide h 10 initialization fails mxnh nominally 5 different values h code returns error flag user program experience initialization succeeds usually succeeds initial choice h 0 initialization problem 2 always set loop h either case initialization completed reset initial stepsize h 0 first step daspk based newly computed initial values using formula 2 given value c initialization problem solved either modified newton method inexact newton method 10 similar used general time step augmented linesearch algorithm described improved global convergence case initialization problem 1 given eq 39 problem 2 given eq 29 must solve system f x residual dae system 0 0 x represents variables solving jacobian matrix preconditioner matrix krylov case obtained either finitedifference approximations calling user subroutine calculate jacobian depending option specified routines specify dae jacobianpreconditioner exactly ones needed time integration newton iteration given terms approximation system jacobian j relaxation steplength 0 1 linesearch algorithm given section 5 initialization problem 2 scaling matrix absent code organized newton solver independent initialization problem solved vector calculated separate routine called construct apply increment deltax follows ffl problem 1 increment 0 gammap p increment 0 0 gammacp p ffl problem 2 increment 0 meaning j 62 depends choice methods case direct methods value j approximation system jacobian evaluated difference quotients usersupplied routine start iteration evaluation j involves call backsubstitution routine case krylov methods however j refers exact system jacobian current values 0 j gamma1 f x evaluated call routine preconditioned gmres method 16 makes use preconditioner p supplied user evaluated start iteration cases inaccuracy fixed approximation j p system jacobian additional potential cause difficulty newton iteration complete algorithm actually involves three loop levels problem 1 two levels problem 2 innermost level mxnit newton iterations performed given value h given value jacobian preconditioner iteration considered converged scaled residual small norm ae current approximate system jacobian j direct case preconditioner matrix p krylov case test constant epconi tolerance newton iteration subsequent time steps epinit swing factor nominally equal 001 norm used throughout weighted rootmeansquare wrms norm weights formed usersupplied tolerances see 7 values ae mth iteration used infer convergence rate convergence achieved mxnit iterations strategy repeated attempts depends rate convergence failed rate 08 iterations converging slowly retry newton iteration current values 0 new value ie j p limit mxnj attempts addition case krylov method gmres solver failed converge least two newton iterations rate 1 newton iteration retried new value p limit mxnj retries reached reduce h retry iteration new current 0 case problem 1 give return error flag case problem 2 convergence inner newton iteration failed rate 08 recoverable failure occurred retry iteration reduced value h initial 0 problem 1 give problem 2 total number iterations performed therefore large mxnhmxnjmxnit problem 1 mxnjmxnit problem 2 currently set set case direct methods case krylov methods however four controls optional inputs daspk user may specify different values addition option provided turn linesearch algorithm actually additional level logic added around initialization algorithm described reason error weights involved convergence error tests depend current solution vector thus initialization algorithm may succeeded using weights evaluated initial guess weights may differ greatly updated values using converged vector since updating weights every iteration seems rather extreme adopted following scheme weights set using input vector initialization algorithm called succeeds update weights call second time succeeds update weights proceed first time step either initialization fails error flag returned user case krylov method second initialization call preconditioner updated unless convergence failure 7 numerical experiments tested initialization algorithm several problems found performed much expected course development debugging used simple indexone system size 2 known analytic solution first second initialization problem types wide range initial guesses initialization algorithm converged within limits imposed direct krylov method options attempts integrate system without initialization option failed except initial values consistent realistic test used model multispecies food web 3 mutual competition andor predatorprey relationships spatial domain simulated consider 2species model species 1 prey species 2 predator predator assumed infinitely fast reaction rate specifically model equations concentration vector interaction diffusion coefficients could functions x general choices made test problem follows domain unit square 10 boundary conditions homogeneous neumann type zero normal derivatives everywhere coefficients unique stable equilibrium guaranteed exist derivatives appear equations species 2 3 empirically stable equilibrium appears exist 71 ff fi positive although may unique tests problem take 100 considerable spatial variation solution pde system 71 together boundary conditions discretized central differencing l theta l mesh described 7 taken quite sufficient accurate spatial resolution resulting dae system gt 0 tolerances used run sun sparc10 workstation 71 initialization problem 1 tests problem reported 7 initial conditions taken mildly peaked functions nearly satisfy constraint equations ae predator value c determined equation f 2 x approximate quasisteady state qss value original daspk solver difficulty problem without adjustment initial values however expect typical application type impractical find accurate initial values tests prescribe flat value predas initial guess input array invoke new algorithm initialization problem 1 present problem parameters qss values c 2 time within 10 vary c pred report tests krylov method gmres option daspk preconditioner use product spatiallybased factor reactionbased factor notation 7 given r respectively reaction diffusion terms righthand side dae system problem form gt 0 1 identity matrix 0 place 1 positions corresponding components c 2 spatial factor p sr consists 5 gaussseidel iterations reaction factor uses difference quotient approximations diagonal blocks daspk input parameters relating krylov method default values specified table 71 summarize results daspk tests new initialization algorithm incorporated value c pred qss denoting values 76 tabulated quantities number newton iterations initial condition calculation number linear iterations initial condition calculation total number newton iterations complete integration total number linear iterations complete integration total number residual evaluations complete integration numbers nni0 nli0 measure cost initialization algorithm nni nli nre measure total cost solving problem convergence correct values initialization achieved reasonable additional cost pred evidently convergence region initialization problem strongly skewed high side permit errors least 40 low side case c pred algorithm converged value c corresponds solution valid different one interest comparison initial condition calculation option selected qss initial values successful case total cost figures 709 slightly larger initialization indicating even approximate qss values 76 somewhat error unmodified daspk solver run initial condition option also unable solve case except qss initial values case total costs 971 failed cases either halted initialization algorithm initialization option failed first time step either repeated corrector convergence failures repeated error test failures 2 basis experience tests however changed default value nrmax maximum number gmres restarts 2 5 c pred failed ic calculation table test results new initialization algorithm food web problem 72 initialization problem 2 tests specify initial time derivatives 0 0 ie posing steadystate problem 71 since explicit timedependence righthand sides consistent initial values determined solution dae problem constant time type problem much harder initialization problem 1 absence time derivative operator moreover preconditioners devised dae problem less useful first describe tests using direct method specified banded jacobian generated internally difference quotients two halfbandwidths equal simplicity initial guesses discrete c values taken spatially flat values prey subsequent time integration issue stopped performed tests variety values ff fi revealing case problem 1 nontrivial region convergence case table 72 upper half gives results case tabulated counter nni0 defined convergence achieved difficulty always using full newton step least values prey interval c prey interval c prey algorithm fails find solution interval c prey converges incorrect solution negative values c interval c prey converges correct solution difficulty linesearch algorithm must choose vales 1 reference note true steady state values c 1 case range 99 66 2d problem using jacobian full bandwidth quite costly attempt reduce costs also tested halfbandwidths equal 1 corresponding approximate jacobian ignores diffusion terms however results completely unsuccessful resulting lumped tridiagonal preconditioner evidently inaccurate considering tests krylov method problem choice preconditioner problematical terms form true jacobian steady state problem since initialization algorithm sets usersupplied preconditioner choice p sr 77 used problem 1 undefined therefore use gammar blockdiagonal matrix involving reaction jacobian elements tried variety values ff fi provided flat initial guesses 78 however larger values parameters found convergence gmres iteration much slower case initialization problem 1 expected since diffusion terms contribute significantly system completely absent preconditioner order achieve convergence therefore increased krylov subspace parameters default values setting maximum size krylov subspace maxl 20 number gmres restarts allowed nrmax 19 allows total 400 gmres iterations linear system values c prey algorithm appears fail values prey least converges correct solution c prey linear method nni0 nli0 notes direct fails ic calculation direct 11 incorrect solution direct 11 linesearch min direct fails ic calculation 50 direct 11 direct 11 direct 12 50 krylov fails ic calculation table test results food web problem initialization problem 2 cases tabulated compared computed solution vector initialization algorithm accurate solution direct method integrated tighter tolerances virtually steady state values problem 2 tests errors less tolerances imposed example prey maximum relative error observed users daspk cautioned initialization problem 2 difficult initialization problem 1 extra effort may necessary comparison problem 1 time integration convergence algorithm problem 2 sensitive initial guess quality approximate jacobian j preconditioner p j p used time steps good approximation limit c 1 case problem 1 food web tests different preconditioner steadystate initialization problem seriously considered user easily determine jac psol whether preconditioner called steadystate initial condition calculation parameter cj equal zero nonzero situation branch accordingly appropriate preconditioner r developing software time dependent problems using method lines differentialalgebraic integrators numerical solution initialvalue problems differentialalgebraic equations decay uniform states food webs local convergence theory combined inexactnewtonfinitedifference projection methods hybrid krylov methods nonlinear systems equations convergence theory nonlinear newtonkrylov algorithms using krylov methods solution largescale differentialalgebraic systems consistent initial conditions linear time varying singular systems computational method general higherindex nonlinear singular systems differential equations numerical methods unconstrained optimization nonlinear equations shooting method fullyimplicit index2 differentialalgebraic equations approximation methods consistent initialization differentialalgebraic equations zur theory und numerischen realisierung von losungmethoden bei differentialgleichungen mit angekoppelten algebraischen gleichung consistent initialization differentialalgebraic systems gmres generalized minimal residual algorithm solving nonsymmetric linear systems tr ctr alan c hindmarsh peter n brown keith e grant steven l lee radu serban dan e shumaker carol woodward sundials suite nonlinear differentialalgebraic equation solvers acm transactions mathematical software toms v31 n3 p363396 september 2005 c h baker c h paul h tian differential algebraic equations aftereffect journal computational applied mathematics v140 n12 p6380 1 march 2002 van beek v bos j e rooda declaration unknowns daebased hybrid system specification acm transactions modeling computer simulation tomacs v13 n1 p3961 january