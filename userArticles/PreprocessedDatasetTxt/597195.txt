optimal scheduling parallel cbr video servers parallel video servers necessary largescale videoondemand multimedia systems paper addresses scheduling problem parallel video servers discuss scheduling requirements constant bit rate cbr video streams optimal algorithms presented conflictfree scheduling delay minimization request relocation admission control algorithms video streams precisely scheduled quality service requirements performance algorithms also presented b introduction increasing demand capacity video servers largescale videoon demand systems 9 3 parallel video servers become inevitable provide large capacity required system service thousands concurrent clients two major types parallel video servers shared memory multiprocessors distributed memory clustered architectures figure 1 shows diagram sharedmemory architecture architecture set storage nodes set computing nodes connected shared memory video data sent memory buffer highspeed network bus clients mass storage system presented capacity supporting hundreds requests 13 however yet clear multiprocessor video server scalable clustered architecture easy scale thousands server nodes system set storage nodes set delivery nodes connected interconnection network data retrieved storage nodes sent delivery nodes send data clients figure 2 shows diagram clustered architecture number works describe clustered systems 18 14 15 clustered architecture extended directaccess architecture provides interface storage system network 4 7 figure 3 shows diagram directaccess architecture eliminates delivery nodes clustered architecture storage nodes send video data directed high speed wan network interface video file stored single storage node architecture cannot guarantee order data arrival different storage nodes problem solved project mars using chain connection atmbased interconnection within server connect storage devices atmbased broadband network 4 storage node storage node storage node storage node memory banks processors high speed wan network interface figure 1 sharedmemory architecture video servers storage node storage node storage node storage node node delivery node delivery node delivery node delivery high speed wan interconnection network figure 2 clustered architecture video servers optimal scheduling parallel cbr video server 3 storage node storage node storage node storage node high speed wan network interface interconnection network figure 3 directaccess architecture video servers paper evaluate scheduling strategies clustered architecture shown figure 2 interconnection network connects storage nodes delivery nodes storage nodes responsible storing video data storage medium disks storage node deals disk scheduling problem separately provide specified bandwidth delivery nodes responsible clients requests receiving request client delivery node schedule time interval deliver appropriate data blocks within time deadline client playout video delivery node output buffer interface highspeed wan wan congestion output buffer becomes full feedback signal sent corresponding storage nodes stop sending video blocks logical storage delivery nodes mapped different physical nodes cluster configuration called twotier architecture 18 also node storage node delivery node called flat architecture paper flat architecture assumed scheduling policies critical performance video servers currently many scheduling algorithms parallel video servers particular clustered video servers without good scheduling algorithm video streams may conflict resulting delays rejections larger buffer size may required tolerate delay good scheduling algorithms guarantee qualityofservice efficiently utilize resources reduce buffer size increase system throughput paper organized follows section 2 briefly describes underlying model parallel cbr video server conflictfree scheduling algorithm delay minimization presented sections 3 4 section 5 request relocation algorithm presented admission control discussed section 6 performance comparison presented section 7 section 8 gives related works section 9 discusses future works 2 system architecture background section model scheduling problem video servers first assume wide striping video data striped across nodes roundrobin fashion different video files start different nodes balanced load example first file starts node 0 second file starts node 1 etc results obtained extended short striping distributes video blocks subset nodes depending selected block size base stream rate r time divided time cycles length cycle sr time access n blocks one storage node called time period thus time period includes n time cycles general data transfer rate single disk disk array much higher base stream rate r therefore time cycle multiple video streams serviced storage node individual stream rate still preserved time cycle thus divided time slots length slot equal longer time required retrieving block storage node transmitting delivery node whichever larger value determined experiments similar qualityofservice qos problems two type guarantees deterministic guarantee statistical guarantee deterministic guarantee determines using worst case numbers approach described 15 approach guarantees qos requests system may underutilized statistical guarantee determines using average numbers period time increases system utilization data may miss deadline buffer space necessary smooth delay jitter number slots cycle determined adjusted f similar model used tiger system 7 experiment results showed model worked well real systems assume video server consists n storage nodes n delivery nodes interconnected highspeed network individual request r handled delivery node node responsible delivering data blocks retrieved storage nodes client via network entire lifetime request r unless request relocation required blocks video file consecutively distributed n storage nodes request r time cycle retrieves data block storage node retrieve data block node sr video block scheduling illustrated simple example figure 4 shows schedule 3 balanced load video stream start different storage nodes entry figure shows request optimal scheduling parallel cbr video server 5 slot node 0 node 3 node 2 node 1r 0 r 43 r r 90 time cycle 0 r 01 r r 91 time cycle 1 r r r 92 time cycle 2 r r 42 r 81 r 93 time cycle 3 delivery node request r k storage node j figure 4 complete video schedule time period number r k delivery node number storage node number j request retrieves block storage node j delivery node video stream access pattern listed horizontally row blocks single stream separated time slots example request r 0 scheduled time slot 0 first row request delivery node 0 retrieves block storage node 1 time cycle 0 retrieves blocks storage nodes 2 3 0 next three cycles schedule table wrapped around n theta requests scheduled time slot one request needs retrieve blocks storage node compete resource order avoid conflict requests access different storage nodes scheduled onto time slot thus every time slot n requests scheduled retrieves block different storage nodes first cycle conflictfree schedule following cycles conflict therefore discussing scheduling problem show first time cycle long access patterns video streams change model extended scheduling interactive operations fast forward rewind access patterns interactive operations irregular set scheduling algorithms designed retain access order storage nodes 20 define conflictfree schedule follows 6 minyou wu wei shu definition 1 conflictfree schedule conflictfree schedule schedule time slot two video streams request block storage node 2 conflictfree schedule imply two constraints first one imposed disk retrieving bandwidth storage nodes measured total number requests retrieving blocks storage node j time cycle one request access storage node time slot requests access storage node time cycle second one limited io bandwidth delivery nodes within time slot delivery node cannot handle one stream different storage nodes total number requests handled delivery node bounded requests may access arbitrary storage nodes necessarily distinct two constraints summarized following lemma lemma 1 necessary condition conflictfree schedule time cycle question whether necessary condition also sufficient condition word given set requests satisfying necessary condition exist conflictfree schedule next section prove lemma 1 also sufficient condition conflictfree schedule giving algorithm find conflictfree schedule 3 conflictfree scheduling video streams going generate conflictfree schedule given set requests v greedy algorithm proposed 15 schedules requests arriving order whenever request arrives next available slot conflict existing ones assigned request example illustrates algorithm example 1 assume set requests arrive order shown figure 5a greedy algorithm schedules requests shown figures 5b request r 1 cannot scheduled slot 0 scheduled slot 1 r 3 requests r 4 r 7 must scheduled slot 2 requests r 8 able scheduled thus nine requests scheduled 2 greedy algorithm cannot schedule requests even lemma 1 satisfied rearranging allocation existing requests requests accommodated lets revisit example 1 figure 5c request r 8 arrives cannot scheduled empty slot slot 1 due conflict r 3 however exchange r 3 r 7 r 8 scheduled slot 1 shown figure 6a r 9 scheduled slot 2 shown figure 6b optimal scheduling parallel cbr video server 7 node 0 node 3 node 2 node 1 r r r 11 slot node 0 node 3 node 2 r 01 r 11 r r 42 r 53 r 62 r 73 r 9 slot r r r3 11 node 0 node 3 node 2 r 01 r 11 r r 42 r 53 r 62 r 7 slot r r r r3 118 100 b c r r delivery node request r storage node j figure 5 example greedy scheduling algorithm request r 10 arrives cannot scheduled slot 2 since conflicts r 9 table rearranged moving r 2 slot 0 slot 2 r 3 slot 2 slot scheduled slot 0 shown figure 6c finally r 11 scheduled slot 2 shown figure 6d example shows better schedule achieved rearranging requests need systematic approach schedule requests without conflict present optimal algorithm conflictfree scheduling problem algorithm converts scheduling problem matching problem bipartite graphs perfect matching algorithm applied solve problem algorithm 1 conflictfree scheduling construct bipartite graph g bipartition x joined j delivery node handles request retrieves block storage node j delivery node handles requests requests retrieve blocks storage node j constructed graph mregular bipartite graph first time slot whether exists set requests accesses different storage node different delivery node equivalent find perfect matching g according marriage theorem 12 g kregular bipartite graph k 0 g perfect matching determining perfect matching time slot 0 eliminate matched edges original problem scheduling nm requests time slots reduced problem scheduling n gamma 1 requests gamma slots thus applying perfect matching algorithm times schedule time slots generated 2 perfect matching algorithm called hungarian method found 2 give brief description algorithm start arbitrary matching perfect matching yet munsaturated node u chosen search maugmenting path origin u construct larger matching procedure repeated perfect matching found example conflictfree algorithm shown figure 7 uses set requests figure 5 three iterations resultant schedule shown figure 7d equivalent figure 6d algorithm also used situation less nm requests exist v requests inserted algorithm easy see lemma 1 also sufficient condition conflictfree scheduling algorithm called request arrives conflictfree slot multiple requests arrive simultaneously requests scheduled empty slots one one conflict occurs algorithm called scheduling requests instead single request optimal scheduling parallel cbr video server 9 node 0 node 3 node 2 r 01 r 42 r 53 r 62 r 71 r r 8 slot r r r3 11 node 0 node 3 node 2 r 01 r 42 r 53 r 62 r 71 r r r 9 node 0 node 3 node 2 r 00 r 42 r 53 r 62 r 71 r 81 r 21 r 33 r 9 r 11 node 0 node 3 node 2 r 00 r 42 r 53 r 62 r 71 r 81 r 21 r 33 r 9 r33r 11 b slot r r3 11c slot figure 6 improvement example 1 node 0 node 3 node 2 r 43 r 91 r r 00 r 12 r r 22 r 73 r 6 r33r 11 slot delivery node storage node delivery node storage node delivery node storage node slot 0 b slot 1 c slot 2 optimal schedule figure 7 bipartite graph request set example 1 optimal scheduling parallel cbr video server 11 4 request delay minimization consider situation total number requests less equal nm w exists j v case requests fulfilled storage node j v must delayed node j called peg hand storage node j v leaves spaces node j called hole peg requests fulfilled delaying holes large system delay significant problem minimize delay peg requests problem solved simple pegandhole algorithm presented follows algorithm 2 pegandhole let rj hold kth requests node v p extra requests remove request x node p v h found hole node h algorithm request r represented fsr stands number cycles delayed request r initialized zero entry twodimension array rj indicates kth request storage node j variables p h indices pointing peg hole storage nodes respectively basically request cannot fulfilled current time cycle delayed nearest unpacked time slot algorithm guarantees minimum delay example 2 set requests given shown figure 8a v 2 thus storage nodes 1 2 pegs storage nodes 0 3 holes requests r 6 r 11 delayed two time cycles request r 8 delayed one time cycle given figure 8b resultant schedule shown figure 8c 2 r 01 r 11 r 22 r r 42 r 5r 63r 71 r r 9 r103r 11 a1 r 8r 62r 21 r r 9 r103r r 52 r 72 r 111 r 4 slot start request b1 r 33 r 52 r r 93 r 70 r 42 r 00 r 73 r 21 r 92 r r 00 r 11 r 43 r r 90 r 21 r 70r 01 r103r r 43 r 92 r 7 node 0 node 3 node 2 node 1 time cycle 0 delivery node request r storage node j figure 8 example request delay optimal scheduling parallel cbr video server 13 5 request relocation section consider situation load unbalanced definition load balance different traditional definition video stream scheduling realtime problem system long every w considered balanced load otherwise requests need relocated assume total number requests less equal nm case total number requests nm nm requests fulfilled many existing load relocation algorithms applied problem objective move requests overloaded nodes underloaded nodes minimal cost rips 17 runtime incremental parallel scheduling algorithm designed balance independent tasks largescale parallel machines algorithm modified parallel video servers every node presently handles requests send excess load nearest underloaded nodes figure 9 present modified algorithm assumption nodes arranged linear chain algorithms topologies developed similarly first step obtain accumulated number requests using scan sum operation node n gamma 1 node 0 node records partial sum second step node calculates accumulation quota algorithm seen another pegandhole algorithm peg overloaded node hole underloaded node respect quota corresponding flows also calculated positive flow means flow node gamma 1 node negative flow means flow node node gamma 1 third step proximities calculated distance nearest hole nodes assume every hole unlimited capacity minimal flow f igamma1i result deliverying every extra work nearest hole case tie leftnearest hole hence flow across hole node therefore nodes resultant minimal flow f igamma1i determined nodes leftnearest hole rightnearest hole bounded indices b l b r f igamma1i summation possible flows lefthanded nodes node b r nearest hole righthanded nodes node b l nearest hole fourth step two flows igamma1i f igamma1i available construct optimal flow x igamma1i closed f igamma1i much possible overload hole node case flow igamma1i optimal one otherwise auxiliary variable g used record many streams adjusted initially g 0 maximum number streams allowed adjusted g becomes zero rest optimal flows f must according values x workload exchanged node requests number communication steps algorithm 5n step 1 takes n steps calculate step 3 takes 2n steps one calculating p one f step 4 takes 2n steps one calculating x one load exchange algorithm minimizes number communications communication distance also maximizes locality 14 minyou wu wei shu algorithm 3 request relocation let w number video streams node 1 global reduction perform scan sum operation w 2 quota calculation accumulation quota corresponding flow node computed 3 proximity calculation node proximity leftrightnearest hole defined p l follows l node segment leftnearest hole rightnearest hole bounded indices b l b r l assume every hole unlimited capacity minimal flow f igamma1i result delivering every extra work nearest hole case tie leftnearest hole l 4 load exchange receive x igamma1i tasks node gamma 1 receive jx ii1 j tasks node 1 tasks node gamma 1 tasks node 1 figure 9 request relocation algorithm chain optimal scheduling parallel cbr video server 15 example 3 table 1 figure 10 show example loadbalancing algo rithm calculated steps 1 2 step 3 p l calculated comparing values overloaded node determine intention sending extra load value f example node 3 intends send request node 2 f gamma1 similarly node 4 intends send request node 5 f 45 1 p l node intends send extra load left step 4 value x calculated according values g since value x must range gamma g final flow could different value f example node 4 intends send request node 5 according value f finally sends request node 3 otherwise nodes 5 6 7 would overloaded 2 table 1 example request relocation 29 26 22 22 17 12 11 3 28 igamma1i l l x igamma1i figure 10 example request relocation complexity algorithm listed conflictfree scheduling omn log n request delaying omn request relocation 6 admission control conflictfree scheduling algorithm request delaying algorithm loadbalancing algorithm ready define admission control policy new requests new request admitted scheduled without conflict could scheduled time slot immediately upon arrival delivery node conflictfree time slot available otherwise new request must delayed video streams need rescheduled accommodate new request admission rejection request request relocation delaying conflictfree scheduling tnm empty slot new request find figure 11 admission control algorithm admission control algorithm shown figure 11 let 0 current total number video streams serviced one requests arrive condition nm checked r number newly arrived requests condition holds requests admitted otherwise r requests admitted others must rejected admitted requests test whether delivery nodes overloaded requests relocated next step check whether storage nodes overloaded requests delayed finally check whether nonconflict time slots new requests conflictfree scheduling algorithm applied rearrange video streams admission control algorithm deals single request multiple requests separately following steps applied multiple requests arriving system simultaneously ffl delivery node w request relocation algorithm applied ffl storage node j v request delay algorithm applied optimal scheduling parallel cbr video server 17 ffl request cannot find empty conflictfree slot conflictfree scheduling algorithm applied situation single request arrives system simple policy applied described follows ffl assume new request r k arrives w leftnearest right nearest underloaded nodes node searched new request transferred nearest underloaded node request delayed nearest hole ffl conflictfree time slot new request scheduled time slot otherwise conflictfree scheduling algorithm applied policy schedules multiple requests together reduce scheduling overhead sometime lead better schedule 7 simulation performance conducted simulation study various scheduling algorithms include greedy algorithm conflict free scheduling cfs cfs delay cfsd cfs delay relocation cfsdr simulation configured five parameters total number storagedelivery nodes n number slots per time cycle load measurement l based available capacity average file size z specified terms number slots required retrieve entire file duration simulation terms number time cycles following simulation average file size 200 time slots simulation duration cycles arrival rate r calculated following equation z step probability exactly r new requests given ae calculated r x simulation proceeds step step time cycle follows step number new requests calculated according probability ae b new request randomly generate delivery node starting storage node first block file stored size file terms number slots c admission control policy applied determine requests admitted rejected admitted scheduling algorithm used schedule requests single new request generated step algorithms single request employed one new requests generated algorithms multiple requests employed end simulation statistics obtained include total number requests generated number rejected requests number delayed requests number relocated requests etc different versions cfs algorithm first studied tested different arrival rates table 2 shows performance algorithms cfs cfsd cfsdr different loads instance listed table 1 percentage delayed requests 2 average delay per delayed request terms time cycles 3 percentage relocated requests 4 average distance per relocated request terms hops 5 rejection rate ratio number rejected requests total number requests items 2 4 give detailed information delayed requests relocated requests respectively shown system lightly loaded delay around one time cycle load increases average delay may increase time cycles number delayed requests average delay cfsdr algorithm substantially larger cfsd algorithm cfsdr admits much requests rejected cfsd requests must relocated delayed also number relocated requests average distance cfsdr algorithm increase load heavilyloaded system 90 cfs cfsd exhibits high rejection rate whereas cfsdr reduce rejection rate significantly penalty paid low rejection rate large number relocations delays enforced incoming requests due highly saturated system next compare performance greedy algorithm different versions cfs algorithm figure 12 shows performance different values number time slots time cycle increases rejection rate four algorithms decreases partially reason phenomenon delivery node handles requests difference number requests arrived becomes smaller figure 13 shows performance different number nodes n substantial change rejection rates n varies greedy cfs cfsd algorithms cfsdr rejection rate decreases n increases since could chances relocate newly arrived requests finally figure 14 shows performance different loads obviously rejection rates four algorithms become high load increases cfsdr rejection rate remains around 0 load becomes 80 load 80 rejection rate 064 general rejection rate less 1 considered acceptable optimal scheduling parallel cbr video server 19 table 2 performance variances different loads m10 n16 load algorithms delayed avg delay relocated avg distance rejection requests per delayed requests per relocated rate request request 30 cfsd 08 100 012 cfsdr 08 100 12 100 000 40 cfsd 70 100 072 cfsdr 70 100 72 100 000 50 cfsd 225 107 212 cfsdr 254 109 232 100 000 cfsdr 649 128 549 104 000 70 cfsd 765 124 843 cfsdr 131 158 118 111 005 80 cfsd 117 136 1332 cfsdr 314 236 317 149 064 90 cfsd 141 144 1597 cfsdr 424 289 421 175 257 100 cfsd 170 155 2127 cfsdr 533 369 526 219 825 0 5 10 15 20 30 40 rejection rate greedy cfs cfsd cfsdr figure 12 rejection rate number time slots varies 0 5 10 15 20 30 rejection rate greedy cfs cfsd cfsdr figure 13 rejection rate number storage nodes varies optimal scheduling parallel cbr video server 21 30 40 50 60 70 80 90 100 load 0 5 10 15 20 30 rejection rate greedy cfs cfsd cfsdr figure 14 rejection rate load increases 22 minyou wu wei shu 8 related work past years several research projects investigated techniques designing video servers related issues include disk layout scheduling strategies admission control strategies realtime support etc 5 10 16 19 6 research works assumed single disk storage system several research projects investigated design techniques parallel video servers 15 4 13 18 14 7 11 video data stripping schemes studied 15 1 5 10 7 11 however video stream scheduling problem formally addressed many systems rely statistical multiplexing cannot truly guarantee quality service system resources cannot fully utilized without sophisticated scheduling strategy arranging video streams properly large buffer space required particular prefetch technique requests huge memory space 8 greedy scheduling clustered architectures proposed reddy 15 approach aims precise scheduling video streams maximize system throughput minimize usage buffers mitra scalable media server cluster multidisk workstations connected using atm switch 11 data partitioned many blocks distributed across disks piece block termed fragment time period fixed media types time period scheduler issues read request block disks disk transfers fragment client scheduling applied transfer fragments tiger directaccess architecture uses wide striping strategy balance load similar delay strategy described paper assumes files bit rate 7 however tiger conflictfree scheduling algorithm avoid unnecessary delay instead scheduling current time slot newly arrived request delayed next available slot large system delay significant system load reaches 50 80 delay increases drastically algorithms applied directaccess architecture equally well using conflictfree scheduling algorithm requests exceed disk capacity delayed experimental result shows request delayed average delay less three time cycles rejection rate less 3 system load 90 9 conclusion future work paper addressed scheduling problem parallel cbr video servers number algorithms including conflictfree scheduling request delay minimiza tion request relocation admission control presented combining algorithms able achieve optimal scheduling distributed memory clustered architectures current scheduling techniques based statistical multiplexing guarantee timely video signal delivery system able reach maximum capacity statistical multiplexing method precisely schedules video streams quality service requirement method maximizes video server capacity optimal scheduling parallel cbr video server 23 minimizes delay time minimize buffer size required reduce effect unpredictable network delay scheme described paper extended support interactive operations fast forward rewind 20 discuss network conflict problem paper network traffic scheduling important issue addressed topologies omega network hypercube network set requests scheduled without conflict time cycle conflict cycles however network topologies might necessary scheduling individual time cycle paper addressed scheduling problem cbr video appli cations clients may request retrieval variable bit rate encoded media streams scheduling type requests much difficult addressed future work acknowledgments authors would like thank xin helpful discussion karthikeyan samuthiram simulation work research partially supported nsf grants ccr9505300 ccr9625784 r staggered striping multimedia information systems graph theory applications hierarchical storage management distributed vod system scalable video data placement parallel disk array storage subsystem large multimedia server highspeed network environments tiger video fileserver spiffi scalable videoondemand server multimedia storage servers tutorial continuous retrieval multimedia data using paral lelism scalable continuous media server representatives subsets performance mass storage system videoondemand techniques scheduling io high performance multimediaondemand server scheduling data distribution multiprocessor video server runtime incremental parallel scheduling rips distributed memory computers design performance tradeoffs clustered multimedia servers admission control algorithm multimedia ondemand servers scheduling interactive operations parallel video servers tr ctr minyou wu sujun wei shu scheduled video delivery scalable ondemand service proceedings 12th international workshop network operating systems support digital audio video may 1214 2002 miami florida usa harald kosch ahmed mostefaoui lszl bszrmnyi lionel brunie heuristics optimizing multiclip queries video databases multimedia tools applications v22 n3 p235262 march 2004 chowsing lin yichi cheng p2mcmd scalable approach vod service peertopeer networks journal parallel distributed computing v67 n8 p903921 august 2007 minyou wu wei shu chowsing lin odyssey highperformance clustered video server softwarepractice experience v33 n7 p673700 june