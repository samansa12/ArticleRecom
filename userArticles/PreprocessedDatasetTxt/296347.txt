highlevel design verification microprocessors via error modeling design verification methodology microprocessor hardware based modeling design errors generating simulation vectors modeled errors via physical fault testing techniques presented systematically collected design error data number microprocessor design projects error data used derive error models suitable design verification testing class basic error models identified shown yield tests provide good coverage common error types improve coverage complex errors new class conditional error models introduced experiment evaluate effectiveness methodology presented single actual design errors injected correct design determined methodology generate test detects actual errors experiment conducted two microprocessor designs results indicate high coverage actual design errors obtained test sets complete small number synthetic error models b introduction well known third cost developing new microprocessor devoted hardware debugging testing 25 inadequacy existing hardware verification methods graphically illustrated pentiums fdiv error cost manufacturer estimated 500 million development practical verification methodologies hardware verification long handicapped two related problems 1 preliminary version paper presented 4 1997 ieee international high level design validation test workshop oakland california november 1415 1997 permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit direct commercial advantage copies show notice first page initial screen display along full citation copyrights components work owned others acm must hon ored abstracting credit permitted copy otherwise republish post servers redistribute lists use component work works requires prior specific permission andor fee permissions may requested publications dept acm inc 1515 broadway new york ny 10036 usa fax 1 212 8690481 permissionsacmorg 1998 association computing machinery inc alasaad j p hayes mudge r b brown lack published data nature frequency severity design errors occurring largescale design projects 2 absence verification methodology whose effectiveness readily quantified two broad approaches hardware design verification formal simula tionbased formal methods try verify correctness system using mathematical proofs 32 methods implicitly consider possible behavior models representing system specification whereas simulationbased methods consider limited range behaviors accuracy completeness system specification models fundamental limitation formal method simulationbased design verification tries uncover design errors detecting cir cuits faulty behavior deterministic pseudorandom tests simulation vectors applied microprocessors usually verified simulationbased methods require extremely large number simulation vectors whose coverage often uncertain handwritten test cases form first line defense bugs focusing basic functionality important corner exceptional cases tests effective beginning debug phase lose usefulness later recently tools developed assist generation focused tests 1320 although tools significantly increase design productivity far fully automated widely used method generate verification tests automatically random test generation provides cheap way take advantage billioncyclesaday simulation capacity networked workstations available many big design organizations sophisticated systems developed biased towards corner cases thus improving quality tests significantly 2 advances simulator emulator technology enabled use large sets test stimuli existing application system software successfully booting operating system become basic quality requirement 1725 common test generation techniques mentioned targeted specific design errors poses problem quantifying effectiveness test set number errors covered various coverage metrics proposed address problem include code coverage metrics software testing 2711 finite state machine coverage 202228 architectural event coverage 22 observabilitybased metrics 16 shortcoming metrics relationship metric detection classes design errors well understood different approach use synthetic design error models guide test generation exploits similarity hardware design verification physical fault test ing illustrated figure 1 example alasaad hayes 3 define class design error models gatelevel combinational circuits describe errors mapped onto singlestuck line ssl faults targeted standard automated test pattern generation atpg tools provides method generate tests provably high coverage certain classes modeled errors second method class stems area software testing mutation testing 15 considers programs termed mutants differ program test single small error changing operator add subtract rationale approach supported two hypotheses 1 programmers write programs close highlevel design verification microprocessors via error modeling 3 correct ones 2 test set distinguishes program mutants also sensitive complex errors although considered costly widescale industrial use mutation testing one approaches yielded automatic test generation system software testing well quantitative measure error coverage mutation score 24 recently al hayek robach 5 successfully applied mutation testing hardware design verification case small vhdl modules paper addresses design verification via error modeling test generation complex highlevel designs microprocessors block diagram summarizing methodology shown figure 2 implementation verified specification given microprocessors specification typically instruction set architecture isa implementation description new design hardware description language hdl vhdl verilog approach synthetic error models used guide test generation tests applied simulated models implementation specification discrepancy two simulation outcomes indicates error either implementation specification section 2 describes method design error collection presents preliminary design error statistics collected section 3 discusses design error modeling illustrates test generation models experimental evaluation methodology error models presented section 4 section 5 discusses results gives concluding remarks 2 design error collection hardware design verification physical fault testing closely related conceptual level 3 basic task physical fault testing hardware design verification generate tests distinguish correct circuit faulty erroneous ones class faulty prototype system operational system design manufacturing verification tests physical fault tests design errors physical faults design development field deployment model fault model 1 correspondence design verification physical fault testing residual design errors van campenhout h alasaad j p hayes mudge r b brown circuits considered defined logical fault model logical fault models represent effect physical faults behavior system free us deal plethora physical fault types directly widely used logical fault model ssl model combines simplicity fact forces line circuit exercised typical hardware design methodologies employ hardware description languages input medium use previously designed highlevel modules capture richness design environment ssl model needs supplemented additional error models lack published data nature frequency severity design errors occurring largescale projects serious obstacle development error models hardware design verification although bug reports collected analyzed internally industrial design projects results rarely published examples useroriented bug lists found 2126 insight go wrong large processor design project provided 14 considerations led us implement systematic method collecting design errors method uses cvs revision management tool 12 targets ongoing design projects university michigan including puma highperformance microprocessor project 9 various class projects computer architecture vlsi 2 deployment proposed design verification methodology design error models test generator implementation simulator specification simulator equal diagnose specification unverified design verified design cvs revision database unknown actual error assisted verification assisted verification highlevel design verification microprocessors via error modeling 5 design employ verilog hardware description medium designers asked archive new revision via cvs whenever design error corrected whenever design process interrupted making possible isolate single design errors augmented cvs time design change entered designer prompted fill standardized multiplechoice questionnaire attempts gather four key pieces information 1 motivation revising design 2 method bug detected 3 generic designerror class bug belongs 4 short narrative description bug uniform reporting method greatly simplifies analysis errors sample error report using standard questionnaire shown figure 3 error classification shown report form result analysis error data several earlier design projects design error data collected far four vlsi design class projects involve implementing dlx microprocessor 19 implementation lc2 microprocessor 29 described later preliminary designs pumas fixedpoint floatingpoint units 9 distributions found various representative design errors summarized table 1 error types occurred low frequency combined others category table replace x motivation correction design modification design continuation performance optimization synthesis simplification documentation bug detected inspection compilation simulation synthesis please try identify primary source error doubt check categories apply verilog syntax error conceptual error combinational logic wrong signal source missing inputs unconnected floating inputs unconnected floating conflicting outputs wrong gatemodule type missing instance gatemodule sequential logic extra latchflipflop missing latchflipflop extra state missing state wrong next state finite state machine error statement statement case statement always statement declaration port list module declaration expression rhs assignment missing termfactor extra termfactor missing inversion extra inversion wrong operator wrong constant completely wrong buses wrong bus width wrong bit order new category describe used wrong field instruction 3 sample error report 6 van campenhout h alasaad j p hayes mudge r b brown 3 error modeling standard simulation logic synthesis tools side effect detecting design error categories table 1 hence need develop models particular errors example simulator verilogxl 10 flags verilog syntax errors category 9 declaration statement errors category 12 incorrect port lists modules category 16 also logic synthesis tools synopsys usually flag wrong bus width errors category 10 sensitivitylist errors always statement category 13 useful design verification error models satisfy three requirements 1 tests simulation vectors provide complete coverage modeled errors also provide high coverage actual design errors 2 modeled errors amenable automated test generation 3 number modeled errors relatively small practice third requirement means error models define number error instances linear quadratic size circuit preferred error models need mimic actual design bugs precisely tests derived complete coverage modeled errors provide good coverage actual design bugs 31 basic error models set error models satisfy requirements restricted case gatelevel logic circuits developed 3 several models appear useful higherlevel rtl designs found verilog descriptions well actual error data table 1 derive following set five basic error models 1 actual error distributions three groups design projects design error category relative frequency 1 wrong signal source 299 284 250 2 conceptual error 390 191 00 3 case statement 4 gate module input 112 98 00 5 wrong gatemodule type 121 6 wrong constant 04 57 100 7 logical expression wrong 8 missing inputs 00 52 00 9 verilog syntax error 10 bit width error 00 22 150 11 statement 11 16 50 12 declaration statement 13 always statement 04 14 50 14 fsm error 31 15 wrong operator 17 03 00 16 others 11 58 250 highlevel design verification microprocessors via error modeling 7 bus ssl error ssl bus one lines totally stuckat0 stuckat 1 lines bus stuck logic level 0 1 generalization standard ssl model introduced 6 context physical fault testing many design errors listed table 1 modeled ssl errors categories 4 6 module substitution error mse refers mistakenly replacing module another module number inputs outputs category 5 class includes word gate substitution errors extramissing inversion errors bus order error boe refers incorrectly ordering bits bus category 16 bus flipping appears common form boe bus source error bse error corresponds connecting module input wrong source category 1 bus driver error bde refers mistakenly driving bus two sources category 16 direct generation tests basic error models difficult supported currently available cad tools errors easily activated propagation effects difficult especially modules behavioral constructs transparent operating modes following demonstrate manual test generation various basic error models 32 test generation examples relative simplicity foregoing error models allow tests generated error coverage evaluated rtl circuits moderate size analyzed test requirements two representative combinational circuits carrylookahead adder alu since suitable rtl tools available test generation done manually systematic manner could readily automated three basic error models consid ered boes mses bses test generation ssls discussed 16 tests needed bdes since circuits consideration tristate buses example 1 74283 adder rtl model 18 74283 4bit fast adder 30 appears figure 4 consists carrylookahead generator clg word gates show generate tests design error models adder discuss overall coverage targeted error models boe bus possible bus value activates error unknown value erroneous value thus hence represent error represents error signal 1 0 good circuit 0 1 erroneous circuit one way propagate error gate g 1 set hence get g g module clg x resulting outputs implies hence error detected primary outputs need assign input values propagate error set c dxxd dxxd dxxd 8 van campenhout h alasaad j p hayes mudge r b brown hence error propagated complete test vector b c 0xx11xx10 generating tests bses adder find 2 tests detect 33 detectable bses single bse redundant shown targeted mses adder found 3 tests detect 27 detectable mses proved single mse g 3 xnor redundant finally found boes detected tests generated bses mses therefore complete coverage boes bses mses achieved 5 tests example 2 c880 alu example try generate tests modeled design errors c880 alu member iscas85 benchmark suite 8 highlevel model based verilog description alu 23 shown figure 5 composed six modules adder two multiplexers parity unit two control units circuit 60 inputs 26 puts gatelevel implementation alu 383 gates design error models considered c880 boes bses mses inversion errors 1bit signals next generate tests error models boes general attempt determine minimum set assignments needed detect error boes redundant boe b parity boes easily detectable consider example boe one possible way activate error set propagate error primary output path inmux outmux selected signal values needed activate path solving gatelevel logic equations g c get signals mentioned test dont care values found 10 tests detect 22 detectable boes c880 serve prove another 2 boes redundant 4 highlevel model 74283 carrylookahead adder 18 g highlevel design verification microprocessors via error modeling 9 mses tests boes detect inversion errors multibit buses process test generation c880 alu noticed case test inversion error bus found even though boe redundant case nbit bus n odd fed parity function testing inversion errors 1bit signals needs considered explicitly since boe 1bit bus possible inversion errors 1bit signals c880 alu detected tests generated boes bses especially true control signals multiplexers 33 conditional error model preceding examples well prior work ssl error detection 16 show basic error models used rtl circuits high complete error coverage achieved small test sets results reinforced experiments microprocessor verification section indicate large fraction actual design errors 67 one case 75 detected complete test sets basic errors increase coverage actual errors high levels needed design verification additional error models required guide test generation many complex error models derived directly actual data table 1 supplement basic error types following set representative bus count error bce corresponds defining module fewer input buses required categories 4 8 5 highlevel model c880 alu inmux outmux g cin c cont para parb f parhi paral parbl passb uselg cout gen adder passh fadd fand fxor alasaad j p hayes mudge r b brown module count error mce corresponds incorrectly adding removing module category 16 includes extramissing word gate errors extramissing registers label count error lce error corresponds incorrectly adding removing labels case statement category 3 expression structure error ese includes various deviations correct expression categories 3 6 7 11 15 extramissing terms extra missing inversions wrong operator wrong constant state count error sce error corresponds incorrect finite state machine extra missing state category 14 next state error nse error corresponds incorrect next state function finite state machine fsm category 14 although extended set error models increases number actual errors modeled directly found complex practical use manual automated test generation observed difficult actual errors often composed multiple basic errors component basic errors interact way test detect actual error must much specific test detect component basic errors modeling difficult composite errors directly impractical number error instances considered large composite modeled errors complex automated test generation however noted earlier good error model necessarily need mimic actual errors accu rately required error model necessitates generation specific tests practical complexity new error models comparable basic error models furthermore unavoidable increase number error instances controlled allow tradeoffs test generation effort verification confidence found requirements combined augmenting basic error models condition conditional error ce consists condition c basic error e interpretation e active c satisfied general c predicate signals circuit time period limit number error instances restrict c conjunction terms signal circuit w constant bitwidth whose value either all0s all1s number terms condition variables appearing c said order ce specifically consider following conditional error types conditional singlestuck line cssln error order n conditional bus order error cboen order n conditional bus source error cbsen order n reduces basic error e derived higherorder conditional errors enable generation specific tests lead greater test generation cost due larger number error instances exam ple number cssln errors circuit n signals although total set n signals consider term condition possibly reduced cssln errors n 2 probably practical gatelevel circuits signals 1bit shown cssl1 errors highlevel design verification microprocessors via error modeling 11 cover following basic error models mses excluding xor xnor gates missing 2input gate errors bses single bces excluding xor xnor gates bus driver errors cssl1 errors cover missing twoinput gate errors seen follows consider twoinput gate yandx1x2 correct design erroneous design gate missing net identical net x1 expose error set x1 1 x2 0 sensitize test detects cssl1 error x20 sa0 erroneous design also detect missing gate error proof gate types similar higherorder cssln errors improve coverage even 4 coverage evaluation show effectiveness verification methodology one could apply competing methodology unverified design methodology uncovers hard er design errors fixed amount time effective however comparison practical fast efficient highlevel test generation tools error models appear necessary although demonstrated test generation section 32 yet automated therefore designed controlled experiment approximates conditions original experiment avoiding need automated test generation experiment evaluates effectiveness verification methodology applied two studentdesigned microprocessors block diagram experimental setup show figure 6 design error models used guide test generation effectiveness closely related synthetic error models used evaluate methodology circuit chosen design errors systematically recorded design let 0 final presumably correct design cvs revision database actual errors extracted converted injected final design 0 evaluation phase design restored artificial erroneous state 1 injecting single actual error final design 0 setup approximates realistic onthefly design verification scenario experiment answers question given 1 proposed methodology produce test determines 1 erroneous achieved examining actual error 1 determining modeled design error exists dominated actual error let 2 design constructed injecting dominated modeled error 1 let error model defines dominated modeled error dominated modeled error property test detects modeled error 2 also detect actual error 1 consequently generate complete test set every error defined 1 error model 1 would found erroneous test set error detection determined discussed earlier see section 1 figure 2 note concept dominance context design verification slightly different physical fault testing unlike testing problem cannot remove actual design error 1 injecting dominated modeled error distinction important generating test error omission generally hard becomes easy given instead 1 erroneous design 1 considered experiment somewhat artificial reality design evolves time bugs introduced eliminated end design process target circuit state differs final design 0 single design error prior time design may contain one alasaad j p hayes mudge r b brown design error extent design errors independent matter consider single multiple design errors time furthermore results independent order one applies generated tests implemented preceding coverageevaluation experiment two small representative designs simple microprocessor pipelined microprocessor present results remainder section 41 simple microprocessor little computer 2 lc2 29 small microprocessor conventional design used teaching purposes university michigan representative set 16 instructions subset instruction sets current microprocessors serve test case design verification one us designed behavioral rtl synthesizable verilog descriptions lc2 behavioral model specification lc2 consists 235 lines behavioral verilog code rtl design implementation consists datapath module described interconnection library modules custom modules control module described fsm five states comprises 921 lines verilog code excluding models library modules adders register files etc gatelevel model lc2 thus obtained using logic synthesis tools design errors made design lc2 systematically recorded using error collection system section 2 actual design error recorded derived necessary conditions detect error detected instruction sequence external output signals behavioral rtl models distinguished found errors undetectable since affect functionality microprocessor detection conditions used determine modeled error dominated actual error 6 experiment evaluate proposed design verification methodology simulate simulate actual error database debug design error collection test modeled error evaluation verification methodology expose modeled error expose actual error design debugging process design inject single actual error inject modeled error design error model designer actual error modeled error revisions highlevel design verification microprocessors via error modeling 13 found example able shown figure 7 error bse data input 1 multiplexer attached program counter pc testing detect bse since outputs pc incrementer always different ie error always activated testing ssl error propagate signal 1 primary output microprocessor case able find modeled error dominated actual error shown figure 8 error occurs signal assigned value independent condition however correct implementation requires ifthenelse construct control signal assignment activate error need set irout1512 4b1101 irout86 3b111 refers contents register register file instruction sequence detects error shown figure 8 analyzed actual design errors behavioral rtl designs lc 2 results summarized table 2 total 20 design errors made design four errors easily detected verilog simulator andor logic synthesis tools two undetectable actual design errors grouped cate gory numbers parentheses refer corresponding category table 1 columns table give type simplest dominated modeled error corresponding actual error example among 4 remaining wrongsignalsource errors 2 dom 7 example actual design error dominated ssl error design correct design incrementer incrementer mux instruction decoding decoding register file inputs 1 decoding correct code irout1512 4b1101 else erroneous code 8 example actual design error dominated modeled error found instruction sequence detects actual error instruction sequence 3000 main jsr sub0 sub0 execution instructions correct design design error test sequence 14 van campenhout h alasaad j p hayes mudge r b brown inate ssl error 2 dominate bse error infer table 2 errors detected tests ssl errors bses 75 actual errors lc2 design detected simulation tests ssl errors bses coverage increases 90 tests cssl1 added 42 pipelined microprocessor second design case study considers wellknown dlx microprocessor 19 features found contemporary microprocessors particular dlx version considered studentwritten design implements 44 instructions fivestage pipeline branch prediction logic consists 1552 lines structural verilog code excluding models library modules adders registerfiles etc design errors committed student design process systematically recorded using error collection system actual design error painstakingly derived requirements detect detection determined respect one two reference models specifica tions first reference model isa model cycleaccurate changes made isavisible part machine state register file memory compared second reference model contains information microarchitecture implementation gives cycleaccurate view isa visible part machine state including program counter determined actual error whether detectable respect reference model errors undetectable respect reference models may arise following two rea sons 1 designers sometimes make changes dont care features log errors happens designers detailed specification design mind actually specified 2 inaccuracies occur fixing error requires multiple revisions analyzed detection requirements actual error constructed modeled 2 actual design errors corresponding dominated modeled errors lc2 actual errors corresponding dominated modeled errors category total easily detected undetec table ssl bse cssl1 un known wrong signal source 1 4 expression error 7 4 bit width error missing assignment wrong constant unused signal wrong module 5 1 always statement total highlevel design verification microprocessors via error modeling 15 error dominated actual error wherever possible one actual error involved multiple signal source errors shown figure 9 also shown truth tables immediately affected signals differing entries shaded error detection via fanout y1 requires setting sensitizing y1 however combination achievable thus error detection via y1 possible detection via fanout y2 y3 requires setting sensitizing y2 y3 however blocks error propagation via y2 downstream hence error detection requirements sensitizing y3 consider modeled error activation e 1 d1 requires sensitizing y1 y2 y3 mentioned blocks error propagation via y2 e 1 exposed via y1 without sensitizing y3 e 1 dominated given actual error ensure detection actual error condition s0 sa0 sensitization y3 required design contains signal jumptoreginstr set 1 blocks sensitization y1 allows sensitization y3 hence cssl1 error dominated actual error results experiment summarized table 3 total 39 design errors recorded designer actual design errors grouped category numbers parentheses refer table 1 correspondence categories imprecise inconsistencies way different student designers classified errors also errors table 3 assigned specific category table 1 highlight correlation errors dominate missing mod ule wrong signal source errors account half errors column headed isa indicates many errors detectable respect isamodel isab lists number errors detectable respect microarchitectural reference model sum isa isab always add number given 9 example actual design error dlx implementation van campenhout h alasaad j p hayes mudge r b brown total difference corresponds actual errors undetectable respect either reference model remaining columns give type simplest dominated modeled error corresponding actual error among 10 detectable missing mod ules errors 2 dominate ssl error 6 dominate cssl1 error one dominates cboe remaining one able find dominated modeled error conservative measure overall effectiveness verification approach given coverage actual design errors complete test sets modeled errors table 3 concluded experiment complete test set inverter insertion errors inv also detects least 21 detectable actual design errors complete test set inv ssl errors covers least 52 actual design errors complete test set inv ssl bse cssl1 cboe used least 94 actual design errors detected 5 discussion preceding experiments indicate high coverage actual design errors obtained complete test sets limited number modeled error types defined basic conditional error models thus methodology used construct focused test sets aimed detecting broad range actual design bugs impor tantly perhaps also supports incremental design verification process implemented follows first generate tests ssl errors generate tests basic error types bses finally generate tests conditional errors number ssl errors circuit linear number signals complete test sets ssl errors relatively small experiments test sets already detect least half actual errors improve coverage actual design errors hence increase confidence design error model quadratic number error instances bse cssl1 used guide test generation conditional error models proved especially useful detecting actual errors involve missing logic missing modules missing inputs table 3 3 actual design errors corresponding dominated modeled errors dlx actual errors corresponding dominated modeled errors category isa isab total inv ssl bse cssl1 cboe cssl2 un known missing module 2 8 2 14 wrong singal source 1 9 2 complex inversion missing input unconnected input missing minterm 2 extra input 2 total highlevel design verification microprocessors via error modeling 17 cannot covered basic errors targeted however one covered cssl1 cboe errors targeted well observation applies missing assignments errors table 2 designs used experiments small appear representative real industrial designs important benefit smallscale designs allow us analyze actual design error detail coverage results obtained strongly demonstrate effectiveness modelbased verification methodology furthermore analysis conclusions independent manner test generation nevertheless validation methodology using industrialsize designs desirable become practical cad support design error test generation becomes available models kind introduced also used compute metrics assess quality given verification test set example full coverage basic uncondi tional errors provides one level confidence design coverage conditional errors order provides another higher confidence level metrics also used compare test sets direct test generation envision proposed methodology eventually deployed suggested figure 2 given unverified design specification tests targeted modeled design errors automatically generated applied specification implementation discrepancy encountered designer informed perhaps given guidance diagnosing fixing error acknowledgments thank steve raasch jonathan hauke help design error collection process thank matt postiff helpful comments research discussed paper supported darpa contract dabt6396c0074 results presented herein necessarily reflect position policy us government r logic design verification via test generation verification ibm risc system6000 dynamic biased pseudorandom test program generator design verification via simulation automatic test pattern gen eration highlevel design verification microprocessors via error modeling specification validation hardware testing unified method highlevel test generation using bus faults new york neutral netlist 10 combinational benchmark circuits target translator fortran complementary gaas technology ghz microprocessor cadence design systems inc functional verification methodology chameleon processor version management cvs avpgen test generator architecture verification latent design faults development multiflow trace200 hints test data selection help practicing programmer observabilitybased code coverage metric functional simulation hardware emulation functional verification k5 highlevel test generation using physicallyinduced faults computer architecture quantitative approach code generation analysis functional verification microprocessors pentium processor specification update im done simulating verification coverage analysis correctness checking decchip 21164 alpha microprocessor highlevel verilog description fortran language system mutationbased software testing prototyping m68060 concurrent verification mips technologies inc experimental determination sufficient mutant operators finite state machine trace analysis program ttl logic data book mutation testing origin evolution formal verification hardware design tr computer architecture quantitative approach software testing techniques 2nd ed fortran language system mutationbased software testing verification ibm risc system6000 dynamic biased pseudorandom test program generator avpgenmyampersandmdasha test generator architecture verification design verification via simulation automatic test pattern generation experimental determination sufficient mutant operators code generation analysis functional verification micro processors hardware emulation functional verification k5 im done simulating verification coverage analysis correctness checking dec chip 21164 alpha microprocessor functional verification methodology chameleon processor observabilitybased code coverage metric functional simulation formal verification hardware design prototyping m68060 concurrent verification specification validation hardware testing highlevel test generation using physicallyinduced faults ctr david van campenhout trevor mudge john p hayes collection analysis microprocessor design errors ieee design test v17 n4 p5160 october 2000 katarzyna radecka zeljko zilic identifying redundant wire replacements synthesis verification proceedings 2002 conference asia south pacific design automationvlsi design p517 january 0711 2002 tao lv jianping fan xiaowei li lingyi liu observability statement coverage based dynamic factored usedefinition chains functional verification journal electronic testing theory applications v22 n3 p273285 june 2006 katarzyna radecka zeljko zilic design verification test vectors arithmetic transform universal test set ieee transactions computers v53 n5 p628640 may 2004 wei lu xiutao yang tao lv xiaowei li efficient evaluation vector generation method observabilityenhanced statement coverage journal computer science technology v20 n6 p875884 november 2005 anand l dsouza michael hsiao error diagnosis sequential circuits using regionbased model journal electronic testing theory applications v21 n2 p115126 april 2005 serdar tasiran kurt keutzer coverage metrics functional validation hardware designs ieee design test v18 n4 p3645 july 2001 david van campenhout trevor mudge john p hayes highlevel test generation design verification pipelined microprocessors proceedings 36th acmieee conference design automation p185188 june 2125 1999 new orleans louisiana united states jian shen jacob abraham rtl abstraction technique processor microarchitecturevalidation test generation journal electronic testing theory applications v16 n12 p6781 febapril 2000 ghazanfar asadi seyed ghassem miremadi alireza ejlali fast coverification hdl models microelectronic engineering v84 n2 p218228 february 2007 miroslav n velev randal e bryant effective use boolean satisfiability procedures formal verification superscalar vliw microprocessors journal symbolic computation v35 n2 p73106 february