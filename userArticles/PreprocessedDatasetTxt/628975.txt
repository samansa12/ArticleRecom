efficient data dependence analysis parallelizing compilers novel algorithm called lambda test presented efficient accurate data dependence analysis multidimensional array references extends numerical methods allow dimensions array references tested simultaneously hence combines efficiency accuracy approaches algorithm implemented parafrase fortran program parallelization restructurer developed university illinois urbanachampaign experimental results presented show effectiveness b introduction parallelizing compiler relies data dependence analysis detect independent operations users program array operands analysis needs check existence integer solutions linear system obtained array subscript expressions simple cases done rather easily many cases analyzer resort checking certain sufficient conditions determine absence data dependence conditions hold existence data dependence becomes unclear err safe side analyzer must assume data dependence exists existing analysis algorithms give incomplete tests several wellknown data dependence analysis algorithms practice based theories diophantine equations bounds real functions 3 4 22 1 2 13 calls class algorithms numerical methods current numerical methods handle one single dimension multidimensional array references dimension tested separatedly methods generally efficient detect data independence many practical cases nevertheless complicated array subscripts especially multidimensional arrays test results often conservative precise results achieved checking consistency linear system inequalities equalities theory could solved integer programming ip loss precision linear programming lp however currently known lp ip algorithms simplex method 7 karmarkars method 8 aimed large systems least hundred constraints variables suitable data dependence analysis large number small systems need analyzed program verification faces similar problems methods ip lp needed improve efficiency recently several authors proposed use methods fouriermotzkin elimination loop residue method see e g 6 17 data dependence analysis 11 20 13 1 21 modified simplex method ip without considering cycling problem considered yield conservative solution conclusion could reached certain number iterations methods determine whether exists realvalued solution system equations inequalities even though methods 11 20 13 still answer whether integer solutions exist good approximation practical cases unfortunately compared earlier numerical methods methods time consuming worstcase computing time exponential number loop indices even singledimensional array references even though empirical data efficiency methods limited experimental results shown average testing time fouriermotzkin elimination 22 28 times longer existing numerical methods 19 unless far efficient algorithms found difficulties testing multidimensional array references remain paper extend existing numerical methods overcome difficulties geometrical analysis reveals take advantage regular shape convex sets derived multidimensional arrays data dependence test general methods proposed assume general convex sets assumption causes inefficiency implemented new algorithm called ltest performed measurements results quite encouraging see section 4 earlier numerical methods proposed scheme uses diophantine equations bounds real functions major difference lies way multiple dimensions treated earlier numerical methods data areas accessed two array references examined dimension dimension examination dimension shows two areas representing subscript expressions disjoint data dependence two references however pair areas appears overlap individual dimension unclear whether overlapped area dimensions considered simultaneously case data dependence assumed algorithm treats dimensions simultaneously based subscripts selects suitable viewing angles gets exact view data areas selection viewing angles rather straightforward angles needed cases present rest paper follows section 2 give examples illustrate difficulties data dependence analysis multidimensional array references measurement results large set real programs presented show actual frequency difficult cases section 3 describe new algorithm provide theoretical background section 4 present experimental results give brief conclusion 2 coupled subscripts multidimensional array references section identify coupled subscripts main difficulty data dependence analysis multidimensional array references first show couple examples example 21 end end r1 r2 two references array data dependence r1 r2 loops example parallelized order determine whether data dependence r1 r2 system equations inequalities examined let x x 2 j reference r1 x 3 x 4 j reference r2 equate subscript expressions r1 r2 get followings loop bounds data dependence exists r1 r2 equations 21 22 common integer solutions within loop bounds show common solutions exist example consider linear combination 21 22 21 3 22 2 gives new equation given loop bounds minimum value left hand side 23 17 larger right hand side 5 means 21 22 solutions thus r1 r2 independent however existing numerical methods dimension array treated separately therefore instead examining 21 22 simultaneously algorithms examine equation separately equation shown solution within loop bounds data dependence equation solutions independently algorithm assume existence data dependence 21 22 loop indices appear dimensions array either r1 r2 result equations 21 22 share common unknowns say references coupled subscripts due coupled subscripts simultaneous equations common solutions shown earlier individual equation may independent solutions matter fact solution 21 solution 22 solutions within loop bounds algorithms based dimensionbydimension approach could detect independence r1 r2 next example consider effect coupled subscripts determination dependence directions 22 example 22 obviously data dependence references r1 r2 loop however dependence cross loop iterations loop still parallelized exactly case inner loop index outer loop fixed r1 r2 could never access data element different iterations inner loop inner loop parallelized testing crossiteration dependences normally done examining dependence directions 22 procedure checking directions starts setting following equations inequalities dependence directions examined specified 27 iteration outer loop fixed condition data dependence r1 r2 cross iterations inner loop note also need examine crossiteration dependences r2 r1 set discussion similar omit hard see equations 24 25 common solutions satisfying 26 27 however earlier numerical methods cannot detect treat dimension array separately check two subsystems one contains 24 26 27 contains 25 26 27 subsystem solutions e g 27 algorithms must assume inner loop crossiteration dependences dimensionbydimension approach fails detect impossible dependence directions case loop indices say index appear dimensions array ie coupled subscripts according empirical study reported 16 coupled subscripts appear quite frequently real programs study twelve fortran program packages contain 1074 subroutines one hundred thousand lines statements examined packages include linpack eispack itpack fishpak spice others array references examined twodimensional array references account 3623 threedimensional array references account 7 percentage array references three dimensions negligible four thousand pairs twodimensional array references linear subscripts loops 46 coupled subscripts 2 array references two dimensions 2 coupled subscripts data show several interesting things first multidimensional array references common second coupled subscripts appear quite frequently third twodimensional arrays dominant references coupled sub scripts although single dimension test could sometimes succeed detecting data independence despite coupled subscripts often may fail therefore important efficient test algorithm handle coupled subscripts data indicates twodimensional array references especially important 3 ltest new algorithm present new algorithm ltest section consider data dependence problem subscript expressions linear terms loop indices loop bounds assumed con stant otherwise replaced closest constant bounds dependence directions may also given required consider constant loop bounds paper efficient test presence variable loop bounds research topic beyond scope paper 5 gave good discussion dependence tests single dimensional array references presence variable loop bounds handling coupled subscripts loops variable bounds discussed 12 given data dependence problem specified l test examines system equalities inequalities determines whether system realvalued solutions section 4 discuss integer solutions notations need defined describe test 31 notation r 1 r 2 pair references array dimensions r 1 nested l 1 loops r 1 af 1 1 loop indices outermost inner loops constant lower bounds l constant upper bounds u r 2 nested l 2 loops r 2 ag 1 j 1 loop indices outermost innermost loops constant lower bounds l j constant upper bounds u j equating subscripts r 1 r 2 following 31 integer solution 1 etc r 1 r 2 said intersect 1 assume f g linear dependence direction q dependence direction vector q q dependence direction 22 suppose r 1 r 2 l c common loops innermost indexed l r 1 j l c r 2 l c minl 1 l 2 r 1 r 2 said intersect dependence direction vector q intersect 1 may intersect one dependence direction vector denote set loop indices r 1 denote index set r 1 r 2 appears array dimension j 1j ind appears either f j g j ind j 1 dimension j 1 dimension j 2 said coupled r 1 r 2 said coupled subscripts b dimension j 1 j 2 coupled j 2 j 3 coupled j 1 j 3 also coupled 32 geometrical analysis algorithm best explained aid geometrical illustration suppose f g 31 linear equations n unknowns rewrite 31 n 2 n 1 n assume redundant equations 32 otherwise simply eliminated array dimensions assumed coupled otherwise 32 broken several disjoint subsystems partial solutions obtained subsystem later merged together form complete solution course number coupled dimensions small practice especially important case effort expended derive fast test geometrically linear equation hyperplane p r n space intersection hyperplanes corresponds common solutions equations 32 obvi ously empty data dependence checking whether empty trivial linear algebra therefore consider nonempty henceforth loop bounds given dependence directions correspond bounded convex set v r n equation realvalued solution satisfying loop bounds dependence directions corresponding hyperplane p intersects v dimensionbydimension test would able determine whether p intersects v want determine whether intersects v hyperplanes intersect v obviously cannot intersect v however even every hyperplane 32 intersects v still possible v disjoint figure 1 p 1 p 2 two hyperplanes representing two equations system intersects v intersection p 1 p 2 outside v one find new hyperplane contains disjoint v immediately follows v intersect figure 1 p 3 new hyperplane following theorem guarantees v disjoint must hyperplane r n contains disjoint v hyperplane linear combination hyperplanes 32 hand v intersect linear combination exists theorem 1 exists hyperplane p corresponds linear combination equations l denotes inner product 1 proof see appendix array l 1 l 2 l theorem 1 determines hyperplane contains infinite number hyperplanes tricky part ltest examine hyperplanes necessary determine whether v intersect start case convenience presentation practical importance case described 33 case 2dimensional array references case 2dimensional array references equations 32 f n convenience directly refer linear equation hyperplane r n arbitrary linear combination two equations written domain l 1 l 2 whole r 2 space let f l 1 f l 1 l 2 2 n viewed two ways l 1 l 2 linear function v 1 v 2 v n r n v 1 v 2 v n linear function l 1 l 2 r 2 coefficient v f l 1 linear function l 1 l 2 r 2 e definition equation called yequation yequation corresponds line r 2 called yline definition yline boundary two halfspaces n ylines together divide r 2 2n regions region cone figure 2 called lcone lcone none functions change sign value except change zero line leads following lemma defined loop bounds dependence directions note consider dependence directions later f l 1 every l 1 l 2 every yline f l 1 every l 1 l 2 r 2 proof wellknown intermediate value theorem f l 1 minf l 1 v since v bounded f l 1 continuous v l 1 l 2 fixed exist v minf l 1 v min v maxf l 1 v max fixed l 1 l 2 easy verify v max v min determined sign coefficient v x lower bound upper bound v respectively x arbitrary values l u coefficient v f l 1 change sign lcone follows v max v min remain lcone therefore f l 1 l 2 v n 1 n linear function l 1 l 2 lcone assumption lemma f l 1 l 2 v boundaries cone wellknown fact convex theory point l 1 l 2 cone expressed linear combination points cones boun daries immediately follows f l 1 v true lcone course also true whole r 2 space argument f l 1 v therefore l 1 l 2 intersects v r n space v defined loop bounds plus dependence directions similar lemma first discuss rules selection v min v dependence directions given note dependence direction q relates unique pair loop indices v j associated one common loops l u j obviously v min j j chosen partial sum j minimum value v min j maximum value v max j constrained dependence direction v max v min chosen proof lemma 1 following rules determine minimum maximum points function f f 1 v 1 2 v 2 convex set v defined loop bounds dependence directions rules v j j consider iia iib unless 0 j 0 j u j j 0 j rules iia would conflict dependence direction instead since rules case j j j similar consider iic iid unless 0 j 0 j j 1 j 0 u j j 0 j j rules case v v j symmetrical ii details omitted sum coefficients v v j f l 1 v v j related dependence direction e f j j rules stated clear minimum point maximum point f l 1 v presence dependence directions depend sign coefficient v also sign f j called fequation fequation corresponds fline r 2 space n2 flines flines ylines divide r 2 space 3n regions region cone still called lcone following lemma similar lemma 1 defined loop bounds well dependence directions f l 1 l 1 l 2 every yline every fline f l 1 l 2 proof follow argument lemma 1 matter fact order determine whether f l 1 l 2 sects v every l 1 l 2 fline yline suffices test single point line following lemma lemma 3 given line r 2 corresponding equation al 1 fixed l 1 line every l 1 l 2 line f l 1 proof note f l 1 minf l 1 v every point line expressed el 1 el 2 min f el 1 f l 1 therefore minf el 1 0 e 0 v min f el 1 v v minf el 1 0 either case minf el 1 minf l 1 reason maxf el 1 definition given equation form l 1 zero simultaneously define canonical solution equation follows neither b zero b 0 neither b zero b 0 definition l set defined set canonical solutions yequations fequations hyperplane r n corresponding l 1 canonical solution l called lplane obvi ously size l set n v defined loop bounds 3n2 v defined loop bounds well dependence directions theorem 2 intersects v every lplane intersects v v defined loop bounds n lplanes v defined loop bounds well dependence directions 3n2 lplanes proof lemmas 13 definition lplanes theorem 2 provides foundation ltest case 2 test examines subscripts two coupled dimensions determines l set fequations yequations element l determines lplane lplane tested see intersects v checking minimum maximum values done banerjeewolfe test single dimension lplane intersect v data dependence every lplane intersects v data dependence assumed unless tests integer solutions performed sake efficiency computation l set test lplanes performed alternately ie new element l computed tested previous lplane intersects v obviously repeated canonical solutions ignored illustrate ltest applying examples 21 22 section 2 example 21 dependence directions given yequations l set easily determined 1 1 1 canonical solution 3 2 determines lplane exactly linear combination used show absence data dependence example 21 example 22 yequations two canonical solutions 1 1 corresponding original hyperplane one dimensions fequations l 1 l 2 canonical solutions 1 1 gives lplane intersect v practice original hyperplanes f usually lplanes tested due regularity coefficients subscripts extremely rare one lplane besides f needs tested experiments ltest takes less twice much time needed dimensionbydimension test programs total increase compile time insignificant hence l test quite efficient 34 case 2 generalize ltest consider equations 32 2 equations assumed connected otherwise partitioned smaller systems case theoretical interest practical concern since rare real programs two coupled dimensions stated assume redundant equations arbitrary linear combination equations written l 2 l 2 l j j l j j l j j n determined whether f l 1 l space arbitrary l 1 l 2 l coefficient v f l 1 l 2 linear function l 1 l 2 l r definition equation called yequation yequation corresponds hyperplane r called yplane yplane boundary two halfspaces defined follows sum coefficients v v j f l 1 l 2 v v j related dependence direction e f j j j j definition equation f called fequation fequation corresponds hyperplane r called fplane fplane boundary two halfspaces defined follows f definition v defined loop bounds nonempty set called l region definition v defined loop bounds well dependence directions nonempty set called lregion note intersection f j taken pairs index variables related dependence direction lemma 4 every lregion cone r space lregions r space several lines frame boundaries line called lline intersection yplanes fplanes lemma 5 f l 1 l 2 every l 1 l 2 l every lline f l 1 l 2 every l 1 l 2 l r proof follow argument lemmas 1 2 note every point cone expressed linear combination points cones 1dimensional boundaries lemma 6 given line r crosses origin coordinates f l 1 l 2 fixed l 1 line every l 1 l 2 l line f l 1 l 2 v proof follow argument lemma 3 theorem 3 finite set hyperplanes r n intersects v every hyperplane set intersects v v defined loop bounds hyperplanes set v defined loop bounds well dependence directions hyperplanes set proof see appendix lemmas 4 6 theorem 3 provide foundation ltest case 3 obviously theorem 3 also true case 2 go detail ltest general case since discussion similar case 2 compared theoretical time complexity methods based inequality consistency checking ltest clearly much faster especially small 4 experimental results conclusion 41 experimental results implemented ltest program parallelization restructurer parafrase 10 9 15 almost wellknown dimensionbydimension data dependence test algorithms found parafrase added ltest performed experiments numerical package eispack 18 package 56 subroutines 31 found coupled subscripts among 31 subroutines 25 data dependence analysis improved ltest experiments parallelization eispack subroutines required examination 72697 pairs array references array dimensions ranged one three involved pair array references different dependence directions dimensionbydimension algorithms parafrase found 30973 cases data dependence many cases algorithms made conservative assumption dependences existed checked whether coupled subscripts present ltest applied l test found additional 3214 cases data dependence improvement rate 104 improvement rate affected two factors first frequency coupled subscripts second success rate ltest mean often ltest detects case data independence experiment coupled subscripts found 8943 cases dimensionbydimension algorithms assumed data dependences 3214 found data dependence success rate 36 table 1 shows rough breakdown improvement rate various subroutines instance first row shows 7 subroutines improvement rate 20 40 subroutine experiments lplanes always included hyperplane dimension array reference note dimensionbydimension algorithms already tested hyperplanes ltests examined total number 8971 additional lplanes experiment almost every ltest examined one additional lplane light fact additional time needed ltest small timing results shown table 2 row shows much additional time needed ltests instance first row shows 12 subroutines ltests consumed 20 additional time subroutines 53 56 ltests never need 100 additional time additional time spent mostly 1 finding coupled dimensions 2 calculating lvalues 3 examining lplane 42 conclusion ltest new algorithm improve data dependence analysis significantly coupled subscripts multidimensional array references achieves testing precision methods based inequality consistency checking however testing time much less especially small coupled dimensions occur frequently therefore seems promising practical scheme overcome many difficulties existing data dependence analysis methods methods based inequality consistency checking ltest determine whether realvalued solutions exist however practical cases good approximation 14 found many common cases existence realvalued solutions unconstrained integer solutions e integer solutions without considering loop bounds well dependence directions 5 14 guarantee existence integer solutions satisfy loop bounds well dependence directions still much work done data dependence analysis general efficient way obtain integer solutions desirable hope proposed ltest moved one step closer toward goal r dependence analysis subscripted variables application program transformations automatic translation fortran programs vector form data dependence ordinary programs speedup ordinary programs dependence analysis supercomputing automatic discovery linear restraints among variables pro gram linear programming extensions new polynomialtime algorithm linear programming structure advanced vectorizer pipelined processors automatic program restructuring highspeed computations optimization interconnection complexity parallel processors singlestage networks decision trees intraprocedural interprocedural data dependence analysis parallel computing introducing symbolic problem solving techniques dependence testing phase vectorizer practical methods exact data dependence analysis highspeed multiprocessors compilation techniques empirical study array subscripts data dependences deciding linear inequalities computing loop residues matrix eigensystem routines eispack guide interprocedural analysis program restructuring parafrase direct parallelization call statements dependence multidimensional array references optimizing supercompilers supercomputers tr direct parallelization call statements introducing symbolic problem solving techniques dependence testing phases vectorizer dependence multidimensional array references results exact data dependence analysis linear programming 1 deciding linear inequalities computing loop residues automatic discovery linear restraints among variables program dependence analysis supercomputing automatic program restructuring highspeed computation new polynomialtime algorithm linear programming speedup ordinary programs optimization interconnection complexity dependence analysis subscripted variables application program transformations optimizing supercompilers supercomputers intraprocedural interprocedural data dependence analysis parallel computing ctr wenglong chang chihping chu infinity lambda test proceedings 12th international conference supercomputing p196203 july 1998 melbourne australia jay p hoeflinger yunheung paek kwang yi unified interprocedural parallelism detection international journal parallel programming v29 n2 p185215 april 2001 jingke li michael wolfe defining analyzing transforming program constructs ieee parallel distributed technology systems technology v2 n1 p3239 march 1994 sharma ch huang p sadayappan data dependence analysis compiling programs distributedmemory machines extended abstract acm sigplan notices v28 n1 p1316 jan 1993 janjan wu interleaving transformation parallelizing reductions distributedmemory parallel machines journal supercomputing v15 n3 p321339 mar12000 dror e maydan john l hennessy monica lam efficient exact data dependence analysis acm sigplan notices v26 n6 p114 june 1991 h tzen l ni dependence uniformization loop parallelization technique ieee transactions parallel distributed systems v4 n5 p547558 may 1993 leechung lu marina c chen subdomain dependence test massive parallelism proceedings 1990 conference supercomputing p962972 october 1990 new york new york united states leechung lu marina c chen subdomain dependence test massive parallelism proceedings 1990 acmieee conference supercomputing p962972 november 1216 1990 new york new york michael wolfe experiences data dependence abstractions proceedings 5th international conference supercomputing p321329 june 1721 1991 cologne west germany z shen z li p c yew empirical study fortran programs parallelizing compilers ieee transactions parallel distributed systems v1 n3 p356364 july 1990 yukwong kwok ishfaq ahmad fastest practical lowcomplexity algorithm compiletime assignment parallel programs multiprocessors ieee transactions parallel distributed systems v10 n2 p147159 february 1999 wenglong chang chihping chu jiahwa wu polynomialtime dependence test determining integervalued solutions multidimensional arrays variable bounds journal supercomputing v31 n2 p111135 december 2004 yunheung paek jay hoeflinger david padua simplification array access patterns compiler optimizations acm sigplan notices v33 n5 p6071 may 1998 wolfe c w tseng power test data dependence ieee transactions parallel distributed systems v3 n5 p591601 september 1992 junjie gu zhiyuan li gyungho lee symbolic array dataflow analysis array privatization program parallelization proceedings 1995 acmieee conference supercomputing cdrom p47es december 0408 1995 san diego california united states minjoong rim rajiv jain valid transformations new class loop transformations highlevel synthesis pipelined scheduling applications ieee transactions parallel distributed systems v7 n4 p399410 april 1996 david j lilja cache coherence largescale sharedmemory multiprocessors issues comparisons acm computing surveys csur v25 n3 p303338 sept 1993 david f bacon susan l graham oliver j sharp compiler transformations highperformance computing acm computing surveys csur v26 n4 p345420 dec 1994 baowen xu ju qian xiaofang zhang zhongqiang wu lin chen brief survey program slicing acm sigsoft software engineering notes v30 n2 march 2005