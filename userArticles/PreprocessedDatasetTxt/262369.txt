computing accumulated delays realtime systems present verification algorithm duration properties realtime systems simple realtime properties constrain total elapsed time events duration properties constrain accumulated satisfaction time state predicates formalize concept durations introducing duration measures timed automata duration measure assigns finite run timed automaton real number duration run may accumulated satisfaction time state predicate along run given timed automaton duration measure initial final state arithmetic constraint durationbounded reachability problem asks run automaton initial state final state duration run satisfies constraint main result optimal pspace decision procedure durationbounded reachability problem b introduction past decade model checking ce81 qs81 emerged powerful tool automatic verification finitestate systems recently modelchecking paradigm extended realtime systems acd93 hnsy94 afh96 thus given description finitestate system together timing assumptions algorithms test whether system satisfies specification written realtime temporal logic typical property specified realtime temporal logics following timebounded causality property response obtained whenever ringer pressed continuously 2 seconds standard realtime temporal logics ah92 however limited expressiveness cannot specify timing properties may want verify given system particular allow us constrain accumulated satisfaction times state predicates example consider following durationbounded causality property response obtained whenever ringer pressed possibly intermittently total duration 2 seconds preliminary version paper appeared proceedings fifth international conference computeraided verification cav 93 springerverlag lncs 818 pp 181193 1993 bell laboratories murray hill new jersey usa z department computer science university crete institute computer science forth greece partially supported bra esprit project react x department electrical engineering computer sciences university california berkeley usa partially supported onr yip award n000149510520 nsf career award ccr9501708 nsf grants ccr9200794 ccr9504469 afosr contract f496209310056 arpa grant nag2892 specify duration property need measure accumulated time spent state models ringer pressed purpose concept duration operators state predicates introduced calculus durations chr91 axiom system given proving duration properties realtime systems address algorithmic verification problem duration properties realtime sys tems use formalism timed automata ad94 representing realtime systems timed automaton operates finite control finite number fictitious time gauges called clocks allow annotation control graph timing constraints state timed automaton includes apart location control also realnumbered values clocks consequently state space timed automaton infinite complicates analysis basic question timed automaton following timebounded reachability problem given initial state oe final state interval run automaton starting state oe ending state total elapsed time run interval solution problem relies partition infinite state space finitely many regions connected transition time edges form region graph timed automaton ad94 states within region equivalent respect many standard questions particular region graph used testing emptiness timed automaton ad94 checking timebounded branching properties acd93 testing bisimilarity states cer92 computing lower upper bounds time delays cy91 unfortunately region graph adequate checking duration properties durationbounded causality property two runs start different states within region one may satisfy durationbounded causality property whereas one hence new technique needed analyzing duration properties introduce concept durations timed automaton associate every finite run nonnegative real number called duration run duration run defined inductively using duration measure function maps control locations nonnegative integers duration empty run 0 duration measure location gives rate duration run increases automaton control resides location example duration measure 0 means duration run stays unchanged ie time spent location accumulated duration measure 1 means duration run increases rate time ie time spent location accumulated duration measure 2 means duration run increases twice rate time timebounded reachability problem generalized durationbounded reachability problem given initial state oe final state duration measure interval run automaton starting state oe ending state duration run interval show durationbounded reachability problem pspacecomplete provide optimal solution algorithm used verify duration properties realtime systems modeled timed automata durationbounded causality property let us briefly outline construction given region r final state path region graph r show lower upper bounds durations runs start state r follow chosen path written linear expressions variables represent clock values start state first step provide recipe computing socalled bound expressions next step define infinite graph bounds graph whose vertices regions tagged bound expressions specify set possible durations path final state final step show infinite bounds graph collapsed finite graph solving durationbounded reachability problem 2 durationbounded reachability problem timed automata timed automata formal model realtime systems dil89 ad94 automaton finite set control locations finite set realvalued clocks clocks proceed rate thus clock measures amount time elapsed since started transition timed automaton taken current clock values satisfy constraint associated transition taken transition changes control location automaton restarts one clocks formally timed automaton triple x e following components ffl finite set locations ffl x finite set clocks ffl e finite set transitions form x source location 2 target location 2 clock constraint clock x 2 x clock constraint positive boolean combination atomic formulas form k k k k clock 2 x nonnegative integer constant k 2 n configuration timed automaton fully described specifying location control values clocks clock valuation c 2 r x assignment nonnegative reals clocks x state oe pair c consisting location 2 clock valuation c write sigma infinite set states time elapses values clocks increase uniformly time thereby changing state thus state c time assuming transition occurs state c clock valuation assigns cx ffi clock x state may also change transition x e transition taken state whose location whose clock valuation satisfies constraint transition instantaneous transition automaton state location new clock valuation cx 0 clock x associated transition reset value 0 clocks remain unchanged possible behaviors timed automaton defined successor relation states transition successor states c 2 sigma transitions x 2 e c satisfies c 0 time successor states c 2 sigma time increments state successor state c written c iff exists nonnegative real ffi c ffi successor relation defines infinite graph ka state space sigma transitive closure successor relation called reachability relation 2 figure 1 sample timed automaton example 1 sample timed automaton shown figure 1 automaton four locations two clocks edge labeled clock constraint clock reset state automaton contains location realnumbered values clocks x sample pairs successor relation shown 0 0depending application timed automaton may augmented additional components initial locations accepting locations transition labels synchronization timed automata atomic propositions location labels also useful label location clock constraint limits amount time spent location hnsy94 chosen simple definition timed automata illustrate essential computational aspects solving reachability problems also standard definition timed automaton allows possibly empty set clocks reset transition requirement precisely one clock reset transition affect expressiveness timed automata clock regions region graph let us review standard method analyzing timed automata key solving many verification problems timed automaton construction socalled region graph ad94 region graph timed automaton finite quotient infinite state graph retains enough information answering certain reachability questions suppose given timed automaton equivalence relation states sigma oe 2 sigma write equivalence class states contains state oe successor relation extended equivalence classes follows define state oe 0 2 nonnegative real ffi oe 0 ffi nonnegative reals ffi oe quotient graph respect equivalence relation written graph whose vertices equivalence classes whose edges given successor relation equivalence relation stable iff state 0 2 back stable iff whenever oe states state oe 0 2 quotient graph respect back stable equivalence relation used solving reachability problem equivalence classes given two equivalence classes r 0 r f state oe 2 r 0 state 2 r f oe equivalence relation back stable answer reachability problem affirmative iff path r 0 r f quotient graph region graph timed automaton quotient graph respect equivalence relation defined x 2 x let x largest constant clock x compared clock constraint denote integral part ffi let denote fractional part ffi thus freely use constraints like clock x nonnegative integer constant k eg clock valuation c satisfies constraint bxc k iff bcxc k two states c regionequivalent written c iff following four conditions hold 1 2 clock x 2 x either 3 clocks x 2 x valuation c satisfies valuation satisfies 4 clock x 2 x valuation c satisfies valuation satisfies clock region r sigma equivalence class states hence region fully specified location integral parts clock values ordering fractional parts clock values instance x contains three clocks x z region contains states c c satisfies z 1 region r write z say r location satisfies constraints etc finitely many regions exact value integral part clock x recorded smaller number regions bounded jsj number clocks region graph ra timed automaton finite quotient graph respect region equivalence relation region equivalence relation stable well backstable ad94 hence region graph used solving reachability problems regions also solving timebounded reachability problems acd93 useful define edges region graph explicitly region r boundary region iff clock x r satisfies constraint region boundary region called open region boundary region r define predecessor region predr open region q states c 2 q time increment ffi 2 r c nonnegative reals similarly define successor region succr r open region q 0 states c 2 q time increment ffi 2 r nonnegative reals state timed automaton belongs boundary region r instantaneously instant state belongs predr instant state belongs succr example boundary region r given predr open region succr open region z edges region graph ra fall two categories transition edges c 0 edge region c region time edges boundary region r edge predr r edge r succr addition region selfloop ignored solving reachability problems duration measures durationbounded reachability duration measure timed automaton function p locations nonnegative integers duration constraint form r duration measure bounded interval nonnegative real line whose endpoints integers may open halfopen closed let p duration measure extend state space evaluate integral r along runs extended state pair oe consisting state oe nonnegative real number successor relation states extended follows transition successor extended states c transitions x c satisfies define c 0 time successor extended states c time increments c ffi consider durationbounded reachability problem regions given two regions r 0 r f timed automaton duration constraint r state oe 2 r 0 state nonnegative real oe refer durationbounded reachability problem using tuple r example 2 recall sample timed automaton figure 1 suppose duration measure p defined 1 let initial region r 0 singleton let final region r f fs 0g duration constraint r answer durationbounded reachability problem affirmative following sequence successor pairs justification last component denotes value integral r 0 0 hand duration constraint r answer durationbounded reachability problem negative reader verify 0 0 2 2 duration measure p constant function 1 ie locations integral r measures total elapsed time durationbounded reachability problem regions called timebounded reachability problem case oe states oe 0 2 oe state 0 2 real number hence region graph suffices solve timebounded reachability problem however true general duration measures 3 solution durationbounded reachability problem boundlabeled regions bounds graph consider timed automaton two regions r 0 r f duration measure p determine set possible values ffi oe compute lower upper bounds integral r along path region graph refine graph labeling regions expressions specify extremal values integral define infinite graph vertices form r l l u u r region l u linear expressions clock variables l u boolean values intended meaning bound expressions l u moving state c 2 r state final region r f set possible values integral r p infimum l supremum u functions current clock values c bit l 0 infimum l included set possible values integral l 1 l excluded similarly bit u 0 supremum u included set possible values r u 1 u excluded example leftclosed rightopen interval l u gives possible values integral r p bound expressions l u associated region r special form suppose set clocks states c 2 r clock valuation c clock smallest fractional part r x n clock largest fractional part fractional parts n clocks partition unit interval represented expressions e x x n bound expression r positive linear combination expressions e bound expression r form 0 nonnegative integer constants denote bound expressions n 1tuples coefficients write bound expression bound expression e clock valuation c denote result evaluating e using clock values given c time advances value bound expression changes rate 0 gamma n region r satisfies constraint boundary region coefficient 0 irrelevant r coefficient irrelevant henceforth assume irrelevant coefficients set 0 boundlabeled region r l l u u timed automaton consists clock region r two bound expressions l u r two bits l u 2 f0 1g construct b pr f bounds graph duration measure p final region r f vertices b pr f boundlabeled regions special vertex r f outgoing edges first define edges target r f edges boundlabeled regions edges target r f correspond runs automaton reach state r f without passing regions suppose r f open region duration measure ie location r f final region r f reachable state c 2 r f remaining r f least 0 units since integral r p increases rate lower bound integral value states c 2 r f 0 z x 1 2 3 1 2 3 1 figure 2 upper bound lower bound 0 possible value integral 0 upper bound supremum possible values hence add edge bounds graph r f r f l 0 u u r f boundary region time spent r f bounds 0 case add edge r f r f l 0 u let us look paths reach final region r f passing regions edge r r 0 region graph ra bounds graph b pr f exactly one edge boundlabeled region form r boundlabeled region form r l l u u first let us consider example understand determination lower bound l corresponding bit l upper bound u bit u determined similarly suppose boundary region r 1 satisfies labeled lower bound l bit l 1 means starting state c 2 r 1 lower bound integral r reaching state r f consider open predecessor region r 2 r 1 satisfies x let duration measure r 2 time edge r 2 r 1 region graph want compute lowerbound label l 2 r 2 lowerbound label l 1 r 1 starting state c 2 r 2 state c reached time furthermore state c 2 r 2 integral r p value entering region r 1 hence new lower bound label l 2 1 2 3 1 see figure 2 whether lower bound l 2 possible value integral depends whether original lower bound l 1 possible value integral starting r 1 thus bit l 2 labeling r 2 bit l 1 labeling r 1 next consider boundary region r 3 r 2 successor region r 3 region x time edge r 3 r 2 region graph reader verify updated lowerbound label l 3 r 3 l 2 namely 1 2 3 1 simplified 0 region see figure 3 updated bit l 3 r 3 l 2 z x 1 2 1 3 2 3 1 figure 3 0 z x immediate delayed 2 3 1 2 2 3 3 3 3 figure 4 process repeats consider time edges let us consider transition edge region r 4 region r 3 resets clock assume region r 4 open duration measure b r 4 satisfies x consider state 2 r 4 suppose transition happens time ffi state transition c 2 r 3 ffi lower bound l 4 corresponding scenario value integral transition b delta ffi added value lower bound l 3 state c z obtain value lower bound l 4 state need compute infimum choices ffi hence desired lower bound z substituting simplifies z infimum monotonic function ffi reached one two extreme points ie transition occurs immediately value l 4 z ie transition occurs late possible value l 4 z lowerbound label l 4 r 4 2 3 3 4 4 minimum 1 2 figure 4 finally need x 2 3 3 4 2 3 4 figure 5 deduce bit l 4 indicates whether lower bound l 4 possible value integral 1 lower bound obtained possible r 4 iff l 3 possible r 3 l 4 l 3 otherwise 1 lower bound obtained ffi approaching l 4 possible iff l 3 possible r 3 l formally define edges boundlabeled regions bounds graph b pr f suppose region graph ra edge r r 0 let duration measure r bounds graph edge r l l u u r iff bound expressions bits l u l 0 u 0 related follows various cases consider depending whether edge r r 0 time edge transition edge time edge 1 r 0 boundary region open region let 1 k n largest index r 0 satisfies x ik b time edge 2 r boundary region r open region transition edge 1 r 0 boundary region r open region clock kth smallest fractional part r reset 0 0 0 0 transition edge 2 r r 0 boundary regions clock kth smallest fractional part r reset k n case illustrated figure 5 completes definition bounds graph b pr f reachability bounds graph given state oe c two bound expressions l u two bits l u define bounded interval ioe l l u u nonnegative real line follows left endpoint right endpoint u interval leftclosed else leftopen interval rightclosed else rightopen following lemma states fundamental property bounds graph b pr f timed automaton let p duration measure let r f region every state oe every nonnegative real ffi state 2 r f bounds graph b pr f path r f boundlabeled region r proof consider state oe nonnegative real ffi suppose oe definition region graph ra sequence successors extended states oe region graph contains edge region r i1 containing oe i1 region r containing oe claim exist boundlabeled regions 1 region component b r 2 bounds graph b pr f edge b 0 r f b i1 b claim proved induction using definition edges bounds graph conversely consider sequence boundlabeled regions b bounds graph edge b 0 r f b i1 b r claim exists 2 r f oe proved induction using definition edges bounds graph 2 boundlabeled region denote union oe2r ioe l l u u intervals difficult check set ib bounded interval nonnegative real line integer endpoints left endpoint ib infimum choices clock valuations c consistent r rg since irrelevant coefficients bound expression l 0 infimum equal smallest nonzero coefficient l left endpoint 0 coefficients 0 similarly right endpoint ib supremum u choices c consistent r supremum equal largest coefficient u type interval ib determined follows let ffl ib leftclosed otherwise ib leftopen ib rightclosed otherwise ib rightopen instance consider region r satisfies z let open interval 1 5 irrespective values l u timed automaton let r duration constraint let r 0 two regions two states oe 2 r 0 2 r f real number bounds graph b pr f path r f boundlabeled region b region component r 0 ib 6 hence solve durationbounded reachability problem r construct portion bounds graph b pr f special vertex r f reachable done backward breadthfirst fashion starting final region r f particular path bounds graph region may appear different bound expressions although infinitely many distinct bound expressions backward search terminated within finitely many steps coefficients bound expressions become sufficiently large relative actual values become irrelevant shown following section collapsing bounds graph given nonnegative integer constant define equivalence relation boundlabeled regions follows two nonnegative integers b define b iff either b two bound expressions e iff two boundlabeled regions iff following four conditions hold 2 3 either l coefficient l 1 greater 4 either coefficient u 1 greater following lemma states equivalence relation boundlabeled regions back stable lemma 3 bounds graph b pr f contains edge boundlabeled region b 1 bound labeled region b 0 exists boundlabeled region b 2 b 1 bounds graph contains edge b 2 b 0 proof consider two boundlabeled regions b 0 2 b 0 b 0 let r 0 clock region b 0 1 b 0 r clock region region graph ra edge r r 0 unique boundlabeled region bounds graph b pr f edge b 1 b 0 1 unique boundlabeled region bounds graph edge b 2 b 0 2 remains shown b 1 4 cases consider according rules edges bounds graph consider case corresponding transition edge 2 corresponds case r 0 boundary region r open region clock kth smallest fractional part r reset let duration measure r establish l 1 coefficient l 1 greater case upper bounds similar according rule 2 0 follows 4 cases consider n n since 0 n n case l 1 l 2 l 0 2 boundary region coefficient 0 j thus coefficient l 1 also exceeds ii case 0 follows values 0 exceed hence b n since least one coefficient l 1 least requirement l indeed different cases iii n iv similar analysis 2 since equivalence relation back stable checking reachability boundlabeled regions bounds graph b pr f suffices look quotient graph b pr f following lemma indicates suitable choice constant solving durationbounded reachability problem lemma 4 consider two boundlabeled regions b 1 b 2 bounded interval r integer endpoints b 1 right endpoint proof consider boundlabeled regions easy check left endpoints ib 1 ib 2 either equal exceed see rules determining left endpoint need show left endpoints either ib 1 ib 2 leftopen leftclosed trivially true suppose l 1 know coefficient l 1 l 2 exceeds since left endpoint smaller know l 1 l 2 least two nonzero coefficients case intervals leftopen irrespective bits l 1 l 2 similar analysis right endpoints shows either right endpoints exceed equal intervals either rightopen rightclosed 2 bound expression e mconstrained nonnegative integer iff coefficients e 1 clearly every bound expression e exists unique mconstrained bound expression fle e fle boundlabeled region mconstrained iff 1 l u mconstrained 2 coefficient l 1 l 0 3 coefficient u every boundlabeled region b exists unique mconstrained boundlabeled region flb b flb since two distinct mconstrained boundlabeled regions equivalent follows every equivalence class contains precisely one mconstrained boundlabeled region use mconstrained bound labeled regions represent equivalence classes number mconstrained expressions n clocks m2 n1 hence given region r number mconstrained boundlabeled regions form r l l u u 4 delta m2 2n1 bound number clock regions obtain bound number mconstrained boundlabeled regions equivalently number equivalence classes bound labeled regions lemma 5 let timed automaton location set clock set x n number clocks clock x compared constant larger x every nonnegative integer number mconstrained boundlabeled regions consider durationbounded reachability problem r right endpoint interval lemma 5 number mconstrained boundlabeled regions exponential length problem description combining lemmas 2 3 4 obtain following exponentialtime decision procedure solving given durationbounded reachability problem theorem right endpoint interval r answer duration bounded reachability problem r affirmative iff exists finite sequence mconstrained boundlabeled regions 1 bounds graph b pr f contains edge r f boundlabeled region b 2 bounds graph b pr f contains edge b boundlabeled region b 3 clock region b k r 0 hence constructing backward breadthfirst fashion portion bounds graph special vertex r f reachable need explore mconstrained boundlabeled regions mconstrained boundlabeled region b first construct predecessors b number predecessors b finite corresponds number predecessors clock region b region graph ra predecessor b b mconstrained boundlabeled region replaced equivalent mconstrained region flb durationbounded reachability property holds boundlabeled region b found search terminates otherwise generating new mconstrained boundlabeled regions answer durationbounded reachability problem negative time complexity search proportional number mconstrained boundlabeled regions given lemma 5 space complexity search pspace representation mconstrained boundlabeled region predecessor computation requires space polynomial length problem description corollary 1 durationbounded reachability problem timed automata decided pspace durationbounded reachability problem timed automata pspacehard already unbounded reachability problem clock regions pspacehard ad94 solved durationbounded reachability problem two specified clock regions construction used solving many related problems first clear initial andor final region replaced either specific state rational clock values specific location ie set clock regions instance suppose given initial state oe final state duration constraint r asked decide whether assuming oe assign rational values clocks choose appropriate time unit regions oe singletons follows durationbounded reachability problem rational states also solvable pspace second example duration property decide following given realtime system modeled timed automaton nonnegative integers b sometimes want verify every time interval length system spends least b accumulated time units given set locations instance railroad crossing similar one appears various papers realtime verification ahh96 algorithm used check every interval 1 hour gate closed 5 minutes verification duration property depends various gate delays minimum separation time consecutive trains requires accumulation time gate closed third final example recall durationbounded causality property introduction assume location timed automaton labeled atomic propositions q denoting ringer pressed r denoting response duration measure defined label otherwise labeling locations atomic propositions extended regions boundlabeled regions desired duration bounded causality property hold iff initial region r 0 final region r f labeled r boundlabeled region r bounds graph b pr f path b r f passes regions labeled r durationbounded reachability problem studied independently kpsy93 also approach taken quite different first problem solved case discrete time transitions timed automaton occur integer time values next shown cases discrete integervalued time dense realvalued time answer provided following two conditions met 1 clock constraints timed automata use positive boolean combinations nonstrict inequalities ie inequalities involving 2 duration constraint onesided ie form r n first requirement ensures runs timed automaton closed digitization ie rounding realnumbered transition times relative arbitrary fixed fractional part ffl 2 0 1 hmp92 second requirement rules duration constraints r r 3 approach proving discretetime densetime answers durationbounded reachability problem coincide gives simpler solution also admits duration measures assign negative integers locations however requirements 1 2 essential approach also note timed automata single clock kpsy93 gives algorithm checking complex duration constraints r r different duration measures p p 0 instead equipping timed automata duration measures general approach extends timed automata variables measure accumulated durations variables called integrators stop watches may advance given location either time derivative 1 like clock time derivative 0 changing value like clocks integrators reset transitions automaton constraints guarding automaton transitions test integrator values reachability problem locations timed automaton integrators however undecidable ach single integrator cause undecidability hkpv95 still many cases practical interest reachability problem timed automata integrators answered symbolic execution automaton contrast use integrators whose realnumbered values part automaton state achieved decidability separating duration constraints system treating properties distinction strengthening model strengthening specification language duration constraints essential decidability resulting verification problem expressiveness specification languages increased example possible define temporal logics duration constraints integrators decidability modelchecking problem logics remains open problem model checking given formula need compute characteristic set contains states satisfy formula particular given initial region r 0 final state duration constraint r need compute set q 0 r 0 states oe 2 r 0 exists real number oe boundlabeled region r u r f reachable bounds graph b pr f contributes subset foe 2 r 0 j ioe l l u u 6 g q 0 general infinitely many contributions possibly singletons know description q 0 used decide modelchecking problem contrast discrete time characteristic sets formulas integrators computed bes93 also dense time characteristic sets approximated symbolically ahh96 acknowledgements thank sergio yovine careful reading manuscript r model checking dense real time theory timed automata benefits relaxing punctuality logics models real time survey automatic symbolic verification embedded systems model checking realtime properties durations design synthesis synchronization skeletons using branchingtime temporal logic decidability bisimulation equivalence parallel timer processes calculus durations minimum maximum delay problems realtime systems timing assumptions verification finitestate concurrent systems whats decidable hybrid automata good digital clocks symbolic model checking realtime systems integration graphs class decidable hybrid systems specification verification concurrent systems cesar tr ctr nicolas markey jeanfranois raskin model checking restricted sets timed paths theoretical computer science v358 n2 p273292 7 august 2006 yasmina abdeddam eugene asarin oded maler scheduling timed automata theoretical computer science v354 n2 p272300 28 march 2006