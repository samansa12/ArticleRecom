domainspecific software architecture adaptive intelligent systems good software architecture facilitates application system development promotes achievement functional requirements supports system reconfiguration present domainspecific software architecture dssa developed large application domain adaptive intelligent systems aiss dssa provides ais reference architecture designed meet functional requirements shared applications domain b principles decomposing expertise highly reusable components c application configuration method selecting relevant components library automatically configuring instances components instance architecture ais reference architecture incorporates features layered pipe filter blackboard style architectures describe three studies demonstrating utility architecture subdomain mobile office robots identify software engineering principles embodied architecture b introduction architecture complex software system style method design construction 25 applied appropriately good software architecture facilitates application system development promotes achievement systems functional requirements supports reconfiguration bad architectureor absence clearly defined architecturecan thwart three objectives designing implementing good software architecture associated development debugging environments challenging expensive replicating activity across many projects systems similar requirements unnecessarily inflates expense conversely competition limited project resources may limit quality architectural support realized given system achieve benefits good software architecture containing cost studying software engineering methodology based domainspecific software architectures dssas 18 36 34 35 37 24 term domain refers class applications dssa comprises reference architecture describes general computational framework significant domain applications b component library contains reusable chunks domain expertise c application configuration method selecting configuring components within architecture meet particular application requirements developing experimenting particular dssa domain adaptive intelligent systems aiss perceive reason act achieve multiple goals dynamic uncertain complex environments ais applications share functional requirements concurrent perception reasoning action sensitivity externally determined priorities deadlines dynamic global control systems behavior illustrated taxonomy figure 1 ais domain may partitioned subdomains defined specific shared task requirements example autonomous robots require capabilities path planning navigation monitoring systems require capabilities pattern classification fault detection subclasses may introduce additional task requirements place constraints inherited requirements instantiating general definition given ais dssa comprises implemented ais reference architecture supports shared computational requirements adaptive intelligent systems also provides congenial framework compiletime runtime configuration components b framework decomposing applicationspecific expertise reusable components along evolving library implemented components c application configuration tool completely implemented takes input domain description instantiated extended applicationspecific requirements automatically selects configures best available components library elements described section 2 office robots factory robots household robots medical patients power plant operations semiconductor mfg equipment email manager meeting manager reference librarian aiss monitoring systems autonomous robots electronic softbots surveillance delivery intensive care anesthesia figure 1 partial taxonomy adaptive intelligent systems experimented dssa three major subclasses ais applications monitoring systems four specific domains intensive care 15 20 22 materials processing 29 semiconductor manufacturing 27 power plant operations 31 b layout design systems two specific domains protein structure modeling 17 18 construction site layout 33 c autonomous office robots two specific domains office surveillance office delivery 19 section 3 present three studies results work office robots demonstrate utility ais dssa section 4 presents conclusions 2 ais dssa 21 ais reference architecture ais reference architecture heterogeneous mixture common architectural styles 9 divided hierarchically layers different sets computational tasks layers relations among provide properties pipe filter style architectures layer comprises number components organized blackboard style allow range potentially complex behavior 211 organization layers architecture currently two layers levels control concurrent physical cognitive behaviors behaviors physical level implement perception action external environment behaviors cognitive level implement abstract reasoning activities situation assessment planning problemsolving etc information flow bi directional results cognitive behaviors influence physical behaviors vice versa addition categorical distinctions behavior levels differ following ways information cognitive level tends represented symbolically information physical level tends metric b cognitive control plans described section 2123 temporally extensive relatively complex physical control plans severely bounded dimensions c cognitive level temporal horizon state information effectively unbounded directions whereas physical level effectively immediate reaction time order magnitude faster physical level cognitive level general cognitive behaviors representations abstract physical level current architecture contains two levels could incorporate levels internal organization lowest level would interact external environment next higher level higher level would interact levels immediately levels would exhibit graded differences along dimensions difference mentioned generally higher levels would organize computations higher levels abstraction ais architecture two levels current applications require finer resolution along dimensions 11 6 discuss similar architectures robot agents 1 2 21 32 discuss extended multilevel architectures architectural organization provides usual benefits software layering restricting interactions adjacent levels provides modularity allowing easy replacement enhancement individual levels note modularity addition modularity provided within level described next section also hierarchically increasing levels abstraction facilitate construction complex behaviors manipulation higher level concepts 9 1 2 however architecture differs common architectural layering terms adjacent levels interact conventional layered systems interactions levels occur function procedure calls one level next lower level interface functions level serve abstract virtual machine next higher level 9 contrast levels communicate flexible messagepassing style levels operate concurrently sending information adjacent levels appropriate thus architectural organization also viewed bidirectional pipe filter model 9 level reads two input data streams writes two output data streams course highest architectural level one pair inputoutput streams single adjacent level lowest architectural level one two pairs inputoutput strems external environment shown figure 2 two architectural levels asynchronously exchange information physical level sends processed perceptual information including feedback execution actions cognitive level cognitive level sends control plans physical level otherwise share normal pipe filter properties share state directly know one anothers computations hybrid pipe filter layered architectural styles quite useful two styles conflict provide modularity addition hybrid introduces combined advantages abstraction due layering style concurrent execution due pipe filter style 9 perceptions action feedback cognitive level physical plan current plan information base world model behavior metacontroller executed behavior behavior current plan information base world model behavior metacontroller executed behavior behavior perceptions action feedback physical actions sensory inputs figure 2 ais reference architecture arrows show data flow control flow 212 internal organization layer level architecture isomorphic internal structure shared abstract control model embodied bb1 blackboard architecture 12 13 bb1 system used implementation cognitive level much simpler implementation basic model used physical level discussed section 211 simpler implementation physical level restricts computational power order achieve orderofmagnitude speedup remainder section characterizes important aspects internal architecture section 213 discusses bb1 blackboard styles distinctive control properties underlie flexible runtime behavior crucial aiss 2121 behaviors behaviors embody potential application particular methods particular tasks example physical level one behavior might apply reactive feedbackcontrol method navigate along path cognitive level one behavior might apply specialized planning method sequence travel destinations taking account constraints order destinations must visited behavior set triggering conditions satisfied particular kinds eventschanges information baseworld model see resulting perceptual inputs previously executed behaviors example destination sequencing behavior might triggered whenever new set places visit appears event satisfies behaviors triggering conditions behavior enabled parameters bound variable values triggering situation given behavior enabled therefore executable whenever events satisfying triggering conditions occur regardless relative utility achieving current goals conversely point time many competing behaviors enabled system must choose among control goaldirected behavior support control decisions behavior interface describes kinds events enable variables bound enabling context task performs type method applies required resources eg computation perceptual data effectors execution properties eg speed complexity use resources completeness result properties eg accuracy precision interface descriptions resemble software wrappings 23 model description language 26 providing information circumstances use available resources 2122 information base world model ibwm disparate behaviors system performs interact one another via changes make information baseworld modela declarative data base houses systems factual knowledge descriptions potential behaviors temporally organized representation runtime perception reasoning action capacity knowledge base ibwm provides skeletal conceptual graph type hierarchies tasks methods domain concepts attached compile time accessed run time role workspace ibwm provides data exchange medium interacting behaviors executed cognitive physical behavior makes changes contents ibwm producing events enable subsequent behaviors information may influence execution example destination sequencing behavior mentioned produces part output representation planned destination sequence cognitive ibwm appearance new destination sequence enable available cognitive methods path planning thus ibwm provides workspace system coordinate interactions products groups related tasks may performed number alternative methods order achieve higherorder goals 2123 control plans control plans describe systems intended behavior temporal pattern plan steps comprises start condition stop condition intended activity form 3tuple task parameters constraints example physical activity navigate origin destination fast describes task moving quickly origin destination control plans reside data structures ibwm system develop modify dynamically means whatever control planning methods enabled run time situation note control plans refer explicitly particular method systems repertoire unlike simple list machine instructions program subroutines directly executable instead control plans describe intended behaviors terms desired tasks parameter values constraints thus point time system plan intended action intensionally describes equivalence class desirable behaviors currently enabled specific behaviors may graded degrees membership see 14 19 detailed treatment ideas 2124 metacontroller metacontroller attempts follow systems current control plan executing appropriate enabled behaviors specifically point time metacontroller executes enabled behavior capable performing currently planned task specified parameterization b description matches specified constraints better enabled behaviors also satisfy example system might two methods navigation fast dead reckoning method uses minimal sensory feedback requires accurate metric map area slower reactive feedbackcontrol method capable avoiding collisions requires less information area given plan step navigate origin destination fast system execute dead reckoning method detailed metric map information area origin destination execute reactive method otherwise conversely given plan step navigate origin destination safe system execute reactive method avoid collisions regardless accuracy map thus system continuously improvises specific course behavior following intended plans well possible given behaviors happen enabled along way 213 key properties reference architecture ais two key architectural properties pipe filter properties layered architecture adaptive properties control model designed support distinctive interactions required aiss environments 13 14 16 2131 pipe filter properties layered architecture ais architectures hybrid combination layered pipe filter styles designed support resourcebounded timesensitive interaction dynamic complex uncertain environments conventional application systems function precisely structured static environments function call interactions appropriate example operating systems environment computer hardware well defined behavior successive layer operating system provides higherlevel abstraction computational machine controls 9 one might argue user provide welldefined behavior user conventional layered systems typically interacts highest layer hierarchy lowest contrast aiss function environments unpredictable external events occur asynchronously system limited resources computation time data knowledge responding events must satisfy constraints timing well quality responses successful performance environments demands opportunistic message passing continuous filtering input data streams continuous management output data streams 2132 adaptive properties control model ais architectures withinlevel dynamic control model designed support considerable flexibility behavior required ais environments system knowledge base many alternative behavioral methods performing diverse tasks coordinate different combinations sequences tasks methods order achieve goals without planning exact sequence tasks methods advance whatever events occur enable associated behavioral methods depending current control plans meta controllers choose execute whichever enabled behaviors best match plans thus system work toward highlevel objectives coordinating performance variety tasks variety contextspecific constraints plan pursue intended course action incorporating best available behaviors enabled immediate situation dynamically adapt plans response changing environmental conditions result plans plan following extremely robust range situations runtime flexibility important precisely dynamic uncertain natures external environment defining characteristics adaptive intelligent systems demonstrated dynamic control model also provides framework appropriate sets components configured design time run time application domain schemas see section 23 generalize concept descriptive control plans allow application builder describe kinds cognitive physical tasks system might perform kinds constraints might perform moreover applications configured design time reconfigured later system operation shown section 3 metacontroller makes use whatever planrelevant components available enabled run time 22 framework component library ais reference architecture provides extremely general computational framework configure diverse software components coordinate activities amplifying capacity architecture reuse also provide framework developing software components reused reconfigured easily large domain applications specifically decompose expertise along three orthogonal dimensions figure 3 three components produced given decomposition may reused combination multiple necessarily alternative components two dimensions operations strategies resource requirements performance properties deductive casebased associative subject ontology factual knowledge metric knowledge io specifications resource parameters performance parameters assess plan schedule monitor explain office critical care semiconductor mfg figure 3 orthogonal components expertise definitions examples tasks classes jobs system might perform defined abstract inputoutput specifications independent method domain example task path planning transforms initial final location representation path performed number different methods many different domains tasks may specified imposing resource limitations eg time limits performance requirements eg precision reliability example agent used interchangeably system may need plan quickly necessarily guarantee optimal plans discussed section 23 certain classes applications defined characteristic configurations required tasks along potential constraints performance tasks example mobile office robot must perform navigation bedside critical care monitoring agent need methods classes computational approaches system exploits variety tasks independent domain defined terms sets abstract component operations may enabled runtime events along abstract strategies selecting sequencing enabled operations run time order achieve goals example generative reasoning casebased reasoning two different cognitive methods system might apply planning task casebased planning would comprise abstract operations find similar case abstract strategies find n similar cases map n cases onto present situation methods given task may differ resource requirements eg amount real time computation time sensor utilization domain knowledge runtime properties eg interruptability intermediate results incremental solution improvement characteristic results eg precision reliability qualitative contents conclusions thus different methods equivalent logical applicability abstract task may less appropriate different task instances domains example casebased methods may appropriate generative methods tasks require fast realtime performance require guaranteed optimal solutions generally casebased methods appropriate domains large numbers relevant cases exist subject domains comprise different kinds knowledge eg ontology facts relations system might regarding environment subject matter independent tasks might perform methods might perform example office domain might include cognitive knowledge eg ontology office objects services symbolic model relationships certain objects locations topological model office layout physical knowledge eg metric models passageways recognition templates important objects knowledge could used support various methods various tasks jobs eg office surveillance robot office delivery robot office design assistant threeway decomposition expertise combines complementary decompositions software engineering knowledge engineering practice software engineers typically decompose software interface conflating task subject domain components implementation method component knowledge engineers typically decompose software knowledge subject domain component inference engine conflating task method components 5 demonstrated experimental results section 3 threeway decomposition expands opportunities reuse component along one dimension might reused combination alternative necessarily components either two dimensions produce large number distinctive competencies example cognitive level either generative casebased methods could applied either destination sequencing path planning tasks several robot domains eg office factory surveillance office delivery household chores autonomous vehicle domains eg errands chauffeur similarly physical level either reactive feedbackcontrol closed loop blind dead reckoning openloop navigation could used perform path following task variety domains configuration reuse purposes descriptive language tasks methods domains critical work identified number descriptive characteristics important experimental domains however developing formal descriptive language software components remains important research problem see also 23 26 23 application configuration even though ais architecture supports runtime enabling selection competing components application system configuration remains important inclusion extra components application may increase utility may degrade performance inclusion extra components increase utility example components irrelevant application necessary hardware eg sensors effectors available application platform required knowledge data available application domain inclusion extra components degrade performance example cause knowledge base exceed space limitations metacontrol decision time exceed acceptable response latencies together ais reference architecture orthogonal decomposition expertise support designtime runtime system configuration design time one select configure applicationspecific set required tasks applicationspecific set appropriate methods performing tasks applicationspecific domain knowledge required apply methods tasks cases given task must performed variable circumstances suitable alternative methods selected configured design time selectively enabled executed run time run time useful new applicationrelevant task method domain components become available new components substituted old ones added knowledge base alongside old ones without interrupting system operation architectures eventbased enabling behavioral methods planbased metacontrol choices among competing methods efforts retrieve necessary knowledge ibwm preprogrammed require particular tasks methods domain facts operate whatever task method domain knowledge available ibwm run time ais architecture accommodate new components acquired machine learning exactly fashion demonstrated domain knowledge experiments demonstrated initial experiment already create diverse agents design time reconfigure agents run time manually selecting automatically loading different combinations components architecture configuration components conceptually complete eg includes required domain knowledge apply least one method specified tasks agent runs immediately makes appropriate use available components illustrated figure 4 agent instantiates different applicationspecific configuration cognitive physical task method domain components application shemas automate process propose use application configuration tool automatically configure diverse ais agents design time run time cognitive components physical components reference architecture component library tasks methods domains variety individual agents office surveillance robot office delivery robot icu patient monitoring agent anesthesia monitoring agent cognitive level physical level environment application configuration tool tasks methods domains figure 4 building variety individual agents configuring selected components within reference architecture application schemas generalize abstract language control plans specified tasks parameters constraints describe range behavior capabilities agent might need particular application every potentially useful task application one schema entries specify subject domain elements task might instantiated constraints might applied formally application schema 3tuple task domain constraints example schema entry plandestinationsequence ksl offices fast optimal specifies agent might perform destination planning task instantiated subset ksl offices either two constraints fast realtime planning guaranteed optimal plans given schema entry application configuration tool would select best available components meeting specified constraints using component characterizations used metacontrollers runtime selection among enabled components within already configured agent thus configuration tool metacontroller use language semantics describe select task method domain components however configuration tool operates design time run time case system reconfiguration assembling repertoire components agent need order function effectively period time anticipated application environment metacontroller operates run time selecting best available components agents repertoire apply present situation envision taxonomy domainspecific skeletal schemas corresponding ais taxonomy sketched figure 1 subdomain schema would specialize elaborate parent schema example autonomous robot schema might describe agent sequence set destinations using constraints plan path two successive destinations control robots motion follow path schema would quite general specifying small number components variety constraints might performed office robot schema might describe specific kind autonomous robot specifying tasks restrictive set constraints may performed application builder would begin selecting specific schema applied target application modify specify elaborate 3 empirical studies 31 overview three studies conducted three empirical studies approach using nomad 200 mobile office robot 39 nomad 200 hardware sensing moving communicating sensing robot orientable 2d laser beam three sensor rings holding infrared sensors 20 pressuresensitive bumpers moving effectors control translational rotational speed rotation laser communicating robot voice synthesizer exchange electronic messages computers nomad robot simulator provides interface command language used actual nomad robot sampling sensor data actuating effectors permits simulation uncertainty sensing moving three studies differ several dimensions summarized see table 1 described detail section 32 study 1 automatically configured three different agents control simulated robot performing surveillance job office environment 1 agent instantiates ais architecture different subset components component library 1 components library 1 developed research group study 2 configured single agent control simulated robot performing delivery job office 2 agent instantiates ais architecture components library 2 includes subset library 1 components developed surveillance job new components developed research group delivery job new components imported another research group particular interest either surveillance delivery job study 3 configured single agent control physical robot performing delivery job laboratory ksl building c office 3 agent instantiates ais architecture components library 3 includes components library 2 three exceptions domain component office 3 instead office 2 physical method components modified cope realworld complexities noise learning component excluded table 1 summary differences studies 1 2 3 number agents 3 agents 1 agent 1 agent robot embodiment simulated simulated physical agent job surveillance delivery delivery office environment office 1 office 2 office 3 ksl building c components used library 1 library 2 subset library library 3 library modifications discussed section 33 three studies demonstrates way advantages ais dssa promotion functional requirements adaptive intelligent systems facilitation new application development support system reconfiguration discussed section 34 three studies together demonstrate cumulative advantages dssa evolutionary development efforts 32 details three studies surveillance three different simulated robots 3211 surveillance job surveillance job requires agent respond two kinds electronic messages received asynchronously run time basic surveillance instructions alarm signals basic surveillance instructions designate regular destinations job subset potential destinations agents map constraints agent must satisfy visiting regular alarm destinations eg pairwise ordering constraints relative frequencies etc alarm signals identify alarms occurring subset potential destinations map possibly including regular destinations job well surveillance agent must perform three activities must repeatedly visit regular destinations accordance constraints among whenever alarms occur must visit alarm destinations quickly possible accordance constraints possible must acquire new knowledge eg metric map information cases destination sequences exploit new knowledge new behavioral methods eg new planning navigation methods improve performance 3212 component library 1 study developed initial component library containing components tasks methods subject domain knowledge useful surveillance job e f figure 5 office 1 subject domain used study 1 domain study 1 office 1 figure 5 cognitive domain component topological map represents office 1 set potential destinations shown alphabetic characters intervening nodes shown numbers connecting paths physical domain component includes metric information objects spaces information potential destinations library 1 also includes components representing seven cognitive physical tasks required surveillance job table 2 13 alternative methods tasks table 3 methods powerful robust others rudimentary simulate part ostensible functionality purpose creating presenting claim anything methods illustrate kinds methods might exist component library configured ais architecture produce variety surveillance agents table 2 cognitive physical task components library 1 input output cognitive tasks physical level physical level 1 assess communication new message received regular destinations alarm destinations set destinations contextspecific constraints 2 plan reasoning changed goal new goal prior goal achieved new reasoning plan sequence reasoning tasks contextspecific constraints 3 sequence destinations new goal new destination sequence sequence destinations plan routes new destination plan new route plan sequence paths ab constraints monitor execution new perceived node new physical navigate next path physical tasks cognitive level cognitive level navigate new node perceived environment neighboring node cognitive level new node new node perceived conditions perceived messages new electronic message new perceived problem regular destinations alarm destinations table 3 method components cognitive physical tasks library 1 methods requirements advantages cognitive tasks 1 assess communication message driven messages 2 plan reasoning skeletal planning skeletal plans 3 plan destination sequence casebased planning generative planning relevant cases computation time fast planning optimal complete case learned plan routes graph searchd graph searchu nodepath graph marked graph real time short distance time learns new paths monitor execution step sequential plan physical tasks navigate dead reckoning feedbackcontrol mapping nav path known sonar infrared sonar infrared laser fast fast safe safe path learned messages template based alarm template summarize seven tasks associated methods follows note cases enabling execution methods decoupled enabling automatic inevitable given relevant events whereas execution discretionary depends metacontrol decision 1 assess communication newly perceived communication gives regular surveillance instructions agent sets goal visit specified set regular destinations contextspecific constraints safe learning fast new problem signals alarm agent sets goal visit specified alarm destinations contextspecific constraints fast 2 plan reasoning given new regular goal agent instantiates skeletal control plan r plandestinationsequence regdestset regdestsequence safe learning fast b planroutes regdestsequence regpathsequence safe learning fast c monitorexecution regpathsequence safe learning fast go b begin next surveillance round given new alarm goal agent temporarily deactivates plan r instantiates skeletal control plan plandestinationsequence alarmdestset alarmdestsequence fast b planroutes alarmdestsequence alarmpathsequence fast c monitorexecution alarmpathsequence fast addition goalspecific dynamic plans static cognitive plans always influence agent plan reasoning assess communication 3 sequence destinations given new goal casebased method retrieves previously generated sequence specified destinations reuse fast applicable relevant case available alternatively generative method applies relevant static constraints construct optimal sequence specified destinations stores sequence new case method slower works every goal plan routes given new destination sequence two alternative methods search topological graph traversable space eg corridors method searches direct route minimize travel distance time method u searches route includes previously untravelled paths within general constraints distance create opportunity learn metric information new regions monitor execution given new route single method steps specified route plan requesting physical level navigate along successive leg journey satisfying specified constraints perceptually confirming arrival expected next location navigate given new leg traverse dead reckoning method uses metric knowledge environment along planned path move quickly next node little sensing alternatively reactive feedbackcontrol method uses sonar infrared sensors move slowly safely mapping method uses sonar infrared move even slowly using laser gather metric map information simulate learning prestoring metric path information making accessible agent traverses1 given path using informationgathering method three methods asynchronously send whatever sensor data acquire cognitive level messages given new electronic message single templatebased method interprets message 3213 illustration agent 1as performance present excerpts performance particular agent agent 1a task method subject domain components library 1 section 332 describes differences among three agents configured study 1 round 1 figure 6 agent 1a office 1 first time positioned node 6 receives electronic message specifies set regular surveillance destinations e figure 6 b constraints apply destinations office 1 agent 1a assesses situation given message committing new goal appropriately ordered set constraints safe learning fast given new goal agent 1a instantiates skeletal reasoning plan r regular destinations rather plan alarm destinations guides subsequent cognitive behavior plan destination sequence agent 1a uses generative planning applicable method learned cases learns resulting plan new case route planning chooses graph search u rather graph search r satisfy learning constraint agent 1a monitors plan following sending successive plan step physical level implementation waiting one perceive arrived intended destination since paths unlearned uses mapping method successive instance navigate task e f initial place117954171314 figure 6 round 1 agent 1a makes regular surveillance round visiting nodes sequence 6 9 8 8 7 10 10 11 12 e dotted dashed lines indicate use mapping nav feedback control methods round 2 illustrated figure 7 agent 1a returns step b reasoning plan replan route second surveillance round plans route current location e back first regular destination chooses graph search u learning constraint try plan different route among destinations however potential new paths far way agent 1a plans paths monitors plan following physical level using mapping method learn new paths e using faster feedback control method already learned paths agent 1a approaches destination receives message reporting alarms destinations b static reasoning plans plan reasoning assess situation guide reason alarms monitoring current plan agent 1a assesses new situation committing new alarm goal single constraint fast replaces current reasoning plan instantiating skeletal reasoning plan new alarms uses generative method plan sequence alarm destinations learns plan new case given constraint fast agent 1a chooses graph search path planning minimize planning time distance maximize speed monitors plan following alarm destinations physical level uses feedback control navigate along every path route alarm destinations however guided constraints reasoning plan step safe learning fast uses mapping nav learn new paths return trip e f initial place117954171314 alarm b figure 7 agent 1a begins second surveillance round interrupting respond alarm visiting nodes sequence e 12 13 9 8 8 7 4 3 3 b 3 4 7 10 10 11 12 e dotted dashed lines indicate use mapping nav feedback control methods round 3 illustrated figure 8 agent 1a encounters situation round 2 alarms destinations b time responds faster learned knowledge required faster casebased dead reckoning methods traversing known paths return alarms agent 1a uses safer feedbackcontrol method e f initial place117954171314 alarm b figure 8 round three agent 1a exploits recently learned subject domain knowledge respond faster repeat alarm visiting nodes sequence e 12 13 9 8 8 7 4 3 3 b 3 4 7 10 10 11 12 e dotted dashed solid lines indicate use mapping nav feedback control dead reckoning methods 322 study 2 delivery simulated robot 3221 delivery job delivery job requires agent respond electronic messages received asynchronously run time messages may require agent deliver verbal email message person known location b deliver document person known location c create deliver copies slides document person known location agent also set goals learn physical dimensions physical objects newly detected course deliveries goal may associated priority realtime deadline agent tries satisfy agent also tries minimize time distance traveled learn passively times learn deliberately pursue learning goals convenient 3222 component library 2 study 2 developed library 2 new delivery job new environment components duplicates extensions components library 1 others new components implemented us members another laboratory stanford cognitive domain component study 2 includes map see figure 9 representing office 2 environment unlike map study 1 include nodes however augmented symbolic information particular people located offices particular functions eg copying performed physical domain component includes metric information static objects spaces environment semantic information dynamic unanticipated objects appear either component copier herve michelle george ronny david feigenbaum nancy richard anthony grace figure 9 office 2 subject domain study 2 table 4 characterizes ten task components used delivery job four correspond slightly elaborate task components library 1 assess communication extended interpret greater variety requested tasks plan tasks extension plan destination sequence handle increased variety tasks create linear nonlinear plans monitor plan execution extended monitor complex plans navigation generalized take coordinates rather map nodes arguments exactly one method used task study multiple methods per task could easily incorporated table 4 cognitive physical tasks components used study 2 input output cognitive tasks 1 assess situation based perception new perceived sensor data unanticipated obstacle new 2 assess situation based communication new message received new goal requested goal priority deadline 3 group goals new goal compatible pending goal goal group make new goal group plan tasks new goal group new plan sequence physical tasks achieve goals goal group schedule realtime tasks new plan includes rt tasks incorporate rt tasks real time schedule modify control plan new goal goal achieved new reasoning plan addremove reasoning tasks goal monitor plan execution perceived completion task new physical planned physical task physical tasks navigation new navigation task go perceive commanded destination messages new electronic message parsed instruction data detect record unanticipated obstacles 3223 illustration agent 2s performance present excerpts performance agent 2 starting point figure 10 agent 2 receives electronic message tell david book human information processing available time priority 4 makes plan 1 go davids office deliver message begins monitoring execution reaching point b agent 2 receives two new messages bring 5 copies feigenbaums computer industry paper anthony priority 3 tell michelle meeting canceled goals independent agent 2 makes separate plans achieving plans 2 3 continuing execution plan 1 reaching point c agent 2 detects unexpected obstacle box marked x adds symbolic representation new obstacle cognitive map metric representation perception heavy border physical map creates goal learn obstacles complete dimensions time agent 2 receives another message bring feigenbaums expert systems paper michelle priority 5 new goal related two pending goals requires fetching something feigenbaums office delivering something michelle therefore agent 2 discards plans 2 3 creates plan 4 merges common subgoals achieve three goals efficiently point figure 10 agent 2 interrupts execution plan 1 begin executing plan 4 higher priority completing first goal plan 4 delivering feigenbaums expert systems paper michelle agent 2 goes copy room make copies feigenbaums computer industry paper making copies agent 2 receives three new messages tell scott meeting started nancy workshop full bring book building expert systems richard agent 4 begins scheduling tasks must perform goals deadlines since delivering message scott deadline works goal first interrupts execution plan 4 point e begin executing newly created plan 5 time constructs plans 6 7 new goals completing plan 5 agent 2 executes plan 6 order meet deadline soon since plan 7 longer deadline today agent 2 handle pending plans priority order time resumes interrupted plan 4 resumes interrupted plan 1 executes plan 7 shown figure 10 agent 2 also construct eventually execute plan achieve learning goal box x copier anthony herve michelle george ronny david feigenbaum nancy richard b x c execution plan 1 execution plan 4 e execution plan 5 grace execution plan 6 figure 10 excerpt agent 2s performance delivery job office 2 323 study 3 delivery physical robot study 3 real nomad 200 robot performs delivery job real building ksl building c library 3 contains components used study 2 except domain components describe new office figure 11 navigation component made robust handle realworld complexitysensor noise error effector control map learning component needs similar improvements made yet except learning agent 3 replicates delivery behavior agent 2 stairs machine room accessible torstens office karls office markos office jays office meeting room figure 11 office 3 ksl building c domain used study 3 33 results three studies 331 meeting ais requirements briefly describe agents studies demonstrate basic functionality required broad class adaptive intelligent systems see 12 13 14 16 19 discussion ais functionality three studies agents perform concurrent perception action cognition tasks making new plans navigating destination informed new goal based relative priorities deadlines agents juggle activities related multiple competing complementary asynchronouslyarriving goals agents dynamically interrupt execution cognitive physical plans favor plans driven goals higher priorities shorter deadlines agents deliberately coordinate tasks relevant related sets goals opportunistically choose best available methods tasks based resource availability performance constraints things equal agents three studies focus attention higherpriority shorterdeadline activities agents automatically use new knowledge new cases new map information acquired runtime finally three studies agents construct dynamic control plans guide cognitive behavior turn influence construction plans guide physical behavior although goal paper comparatively evaluate alternative agent architectures worth noting researchers proposed experimented interesting agent architectures example 11 6 28 architectures designed address particular model required agent functionality overlapping identical model ais functionality present purposes ais architecture distinguished architecture provides uniform reasoning framework constructing modifying following abstract control plans run time b supports agents broad range application domains exception soar c directly supports designtime runtime configuration diverse agents reusable components 332 designtime configuration diverse agents created simple menubased interface allows application builder select library components automatic configuration instance ais architecture user selects sufficient set task method domain components job hand resulting agent ready run immediately example perform surveillance job study 1 sufficient set components must include seven task components library 1 least one method component task relevant office 1 domain components since multiple methods available three tasks library 1 possible configure different surveillance agents different surveillance jobs table 5 describes three jobs differ available resources performance constraints along three jobspecific agents configured job 1a provides ample computation space power imposes three performance constraints therefore configured available methods give agent 1a maximum runtime flexibility job 1b limits space computation imposes deadlines given space limitation configured useful subset method components agent 1b casebased method computationally efficient graph 4searchd new path exploration unnecessary feedbackcontrol mapping navigation dead reckoning unnecessary job 1c limits space power imposes deadlines configured useful subset method components agent 1c generative method produces optimal destination sequences graphsearchd new path exploration unnecessary consumes power feedbackcontrol mapping navigation dead reckoning unnecessary consume power three agents performs surveillance job well anticipated runtime conditions agents 1b 1c fail obvious ways unanticipated conditions eg deadlines agent 1a flexibly adapts full range runtime conditions table 5 configuring different agents different surveillance jobs job 1a job 1b job 1c resources available computation space power ample ample ample limited limited ample ample limited limited performance constraints efficiency safety deadlines important important deadlines important important important important agent 1a agent 1a agent 1a components configured sequence destinations plan routes navigate casebased generative graph searchd graph searchu dead reckoning feedbackcontrol mapping navigation casebased graph searchd feedbackcontrol generative graph searchd feedbackcontrol although demonstrate selection process full set components three studies would straightforward set menubased interface however even small number components user needs assistance unstructured menu application schemas discussed section 23 would allow user begin basic jobappropriate agent configuration complete making smaller number structured decisions winograd 38 observes fundamental use programming system creating sequences instructions accomplishing tasks carrying algorithms expressing manipulating descriptions computational processes objects carried developing formal languages describing application requirements application schemas available components important research direction 23 26 333 runtime reconfiguration studies demonstrate two kinds runtime reconfiguration application systems first three studies agents acquired new domain knowledge eg destination sequence cases metric map information incidentally deliberately agents used newly acquired knowledge first subsequent opportunity enable method components required second study 1 loaded casebased planning method dead reckoning navigation method running agent initially configured without agent used new methods first subsequent opportunity perform tasks appropriate necessary knowledge cases agents exploited new knowledge method components modification existing components general add remove components agents ibwm time long agent least minimally complete set components job hand continue performing best ability evolving set available components 334 cooperative evolutionary system development together three studies provide casestudy efficacy ais dssa approach multiperson evolutionary system development project study 1 presented initial set system requirements frequently happens successive stages real system development projects study 2 presented new disjoint set system requirements designed implemented study 2 agents reusing entire ais architecture components implemented study 1 study 3 dealt switch simulation real physical robot requiring substantially robust perception navigation methods simply replaced subject domain maps new environment collaborator modified navigation component agent 3 immediately succeeded controlling nomad robots performance delivery job ksl offices although agents experimental software systems components quite simplistic toy systems ais architecture comprises bb1 software system cognitive level 30k lines lisp code newly implemented control loop physical level 400 lines lisp code components agent 1 added another 4k lines lisp code components agents 2 3 added another 7k lines lisp code 6k lines c code core team comprised five individuals collaborated design implementation agents three studies despite small group size group dynamics academic research environment amplified problem coordination manifested many issues arise larger professional software teams members group possessed shared model computation used different programming styles even different languages worked asynchronously member group acting manager coordinator many separate subprojects prior project worked together complete system comprises heterogeneous set hardware software environments requiring complex interfaces among concurrently executing parts multiple lisp processes communicate within lisp interpreter multiple unix processes c programs communicate unix sockets many across different workstations lisp c routines call interface robot simulator unix workstation communicates via radiomodem physical robot onboard 486 processor running msdos furthermore long periods time ranging months especially three studies separated intervals work project course year group members worked less half time average directly systems architectural issues described devoting rest time aspects research unrelated projects addition indicated imported several software components bb1 system designed implemented barbara hayesroth micheal hewett lee brownston others goal grouper designed implemented scott benson phd student prof nils nilsson navigation components used studies 2 3 designed implemented david zhu postdoctoral associate prof jeanclaude latombe thus present experiments provide representative case study demonstration ais dssas support cooperative evolutionary software development 4 conclusions reusable software components persistent elusive goal software engineering community 4 8 30 despite progress tools organize index select reusable software components existing components amenable manipulations moreover reengineering existing software components expensive yielding limited actual reusability 36 34 35 response argue order realize promise reusable software need design highly reusable software right start general dssa approach aims factor large classes applications reusable reference architectures components ais dssa elaborates prescribed factorization imposing additional design constraints design reference architecture components attendant increases reusability result supports applications throughout class adaptive intelligent systems characterized taxonomy figure 1 besides office robots applications discussed paper research group used ais architecture two subdomains intelligent monitoring systems layout design systems see section 1 examples illustrate domain adaptive intelligent systems larger typical domains targeted dssas closer size ais subdomains mobile office robots semiconductor manufacturing important question evaluating expected utility designing dssa particular domain extent shared properties instances domain demand common architectural properties common components expertise ais reference architectures use basic blackboard organization specifically enables integration interoperation diverse components originally designed 7 additional characteristics bb1 dynamic control model provide necessary additional support flexible runtime configuration metacontrol particularly useful foundation ais applications must integrate diverse methods performing multiple looselycoupled tasks dynamic uncertain environments complex systems whose components evolve time architecture reflects many personyears design implementation testing debugging documentation thus blackboards general bb1 particular represent costeffective architectural foundations large classes applications threeway decomposition expertise also extends opportunities component reuse throughout larger application domains three subdomains studied able transfer task method components among less diverse domains eg office surveillance vs delivery protein structure vs construction site layout intensive care versus several manufacturing domains components developed applications fully applicationindependent reusable domains well actual savings realized component reuse componentspecific example many components developed office robots domain quite simple easy recreate however others eg planner navigation components moderatesized programs 2700 lines lisp code 6000 lines c code respectively represent substantial cost saving reuse application components monitoring layout design applications larger however since interest focused architectural support reuse reconfiguration invested heavily developing industrial strength components would provide much higher savings reuse opportunity one architectures advantages support runtime selection components also carries significant cost runtime selection requires time things equal system configured optimal components hardwired control regime outperform system multiple components choose extent system designers determine exact set situations system find try deduce ideal configuration system components optimal control regime familiar tradeoff designtime human effort runtime system effort degree decide position given development effort continuum however complexity generality evolutionary lifespan target applications increase intrinsic requirement runtime adaptation course reference architecture components marginal cost developing software addition meeting primary specifications highly reusable cost must weighed benefits subsequent reuse applications 3 experience making ais reference architecture applicationindependent contributed small part initial cost may actually simplified tasks designing implementing similarly making components reusable threeway decomposition expertise increases development cost slightly important offering large domain past prospective reuse opportunities substantial cost savings reuse application ais dssa offers substantial expected return reuse investment conclusion ais dssa captures powerful costly software architecture growing repertoire components making available reuse reconfiguration throughout large application domain r outline theory intelligence making reuse costeffective reusability framework generic tasks knowledgebased reasoning highlevel building blocks expert system design sss hybrid architecture applied robot navigation hearsayii speechunderstanding system integrating knowledge resolve uncertainty software reusability introduction software architecture bb1 user manual integrating planning reacting heterogenous asynchronous architecture controlling realworld mobile robots blackboard control architectural foundations realtime performance intelligent agents opportunistic control action intelligent agents domainspecific software architecture class intelligent patient monitoring agents architecture adaptive intelligent systems deriving protein structure constraints modular layered environment reasoning action plans behavior intelligent agents prototype intelligent agent intensivecare monitoring distributed intelligent control communication physical systems modeling integrated reasoning role selfreferential logics software architecture using wrapping domain specific software architectures american heritage dictionary english language matching individuation modelbased diagnosis manufacturing equipment intelligent monitoring semiconductor manufacturing unified theories cognition intelligent control complex materials processes domain analysis software systems modeling integrating qualitative quantitative methods modelbased diagnosis overview teknowledges domainspecific software architecture program altering sightplan knowledgebased systems software reuse emerging technology software reuse technical opportunities software reuse maxims domainspecific software architecture engineering process outline beyond programming languages host software development environment unix version 11 tr ctr baojian li guangzhou zeng zongkai lin domain specific software architecture style cscd system acm sigsoft software engineering notes v24 n1 p5964 jan 1999 ieee intelligent systems staff interactive fiction ieee intelligent systems v13 n6 p1221 november 1998 barbara hayesroth robert van gent storymarking improvisational puppets proceedings first international conference autonomous agents p17 february 0508 1997 marina del rey california united states diana l webber hassan gomaa modeling variability software product lines variation point model science computer programming v53 n3 p305331 december 2004 gregory abowd robert allen david garlan formalizing style understand descriptions software architecture acm transactions software engineering methodology tosem v4 n4 p319364 oct 1995 lawrence chung nary subramanian adaptable architecture generation embedded systems journal systems software v71 n3 p271295 may 2004 vijay k vaishnavi gary c buchanan william l kuechler jr dataknowledge paradigm modeling design operations support systems ieee transactions knowledge data engineering v9 n2 p275291 march 1997 richard n taylor andre van der hoek software design architecture future focus software engineering 2007 future software engineering p226243 may 2325 2007