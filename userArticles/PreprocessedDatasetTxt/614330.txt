near optimal isosurface extraction algorithm using span space abstractwe present near optimal isosurface extraction noise algorithm rapidly extracting isosurfaces structured unstructured grids using span space new representation underlying domain develop n isosurface extraction algorithm worst case complexity oleft sqrt n kright search phase n size data set k number cells intersected isosurface memory requirement kept preprocessing step log n utilize span space representation tool comparing isosurface extraction methods structured unstructured grids also present fast triangulation scheme generating displaying unstructured tetrahedral grids b introduction isosurface extraction powerful tool investigating scalar fields within volumetric data sets position isosurface well relation neighboring isosurfaces provide clues underlying structure scalar field medical imaging applications isosurfaces permit extraction particular anatomical structures tissues isosurfaces static nature dynamic use isosurfaces called many computational science applications computational fluid dynamics atmospheric simulations ap plications scientists would ideally like dynamically investigate scalar field order gain better insight simulation results scientific computation demands higher accuracy stateoftheart medical scanners increase resolution resulting data sets visualization expand rapidly sheer size data sets well structure pose major obstacles interactive investigation medical imaging data usually structured nature scientific engineering data sets frequently consist geometry represented unstructured finite element grids originally isosurface extraction methods restricted structured grid geometry early efforts focused extracting single isosurface 1 volumetric data set recently effort speed isosurface ex traction several methods developed could adapted extraction multiple isosurfaces structured 2 3 well unstructured geometry 4 5 nevertheless large data sets existing methods allow interactive investigation data set especially unstructured grids defining n number authors department computer science university utah salt lake city ut 84112 email yliv nathwshencrjcsutahedu web httpwwwcsutahedusci data cells k number cells intersecting given isosurface existing algorithms time complexity 2 improved time complexity ok log n k algorithm suitable structured hexahedral grids paper introduce new view underlying domain call new representation span space based new perspective propose fast effi cient isosurface extraction algorithm structured unstructured grids section ii investigates underlying domain structured unstructured problems new decomposition domain proposed proposed span space used section iii common backdrop comparing previous methods isosurface extraction section iv shows span space paradigm leads efficient representation fast isosurface extraction meth ods section v present several optimizations respect memory time requirements fast triangulation method unstructured tetrahedral grid presented section vi conclude analyzing results testing new algorithm several science engineering applications ii span space field let sample set g r p geometric space v r q associated value space jdj size data set given set samples field g v given single value note isosurface need topologically simple approximating isosurface global solution eq 1 difficult task sheer size typical science engineering data set data often generated 3d images solutions numerical approximation techniques finite difference finite element methods methods naturally decompose geometric space g set polyhedral cells c data points define ver tices rather finding global solution one seek ieee transactions visualization computer graphics submited local approximation within cell hence isosurface extraction becomes twostage process locating cells intersect isosurface locally approximating isosurface inside cell focus attention problem finding cells intersect isosurface specified isovalue structured grids position cell represented geometric space g representation require explicit adjacency information cells isosurface extraction methods structured grids conduct searches geometric space g problem stated methods defined follows approach 1 geometric search given point v 2 vand given set c cells g space cell associated set values fv j g 2 v find subset c isosurface value v intersects efficient isosurface extraction unstructured grids difficult explicit order ie position shape imposed cells implicit one difficult utilize methods designed work domain use additional explicit information revert search value space v advantage latter approach one needs examine minimum maximum values cell determine isosurface intersects cell hence dimensionality problem reduces two scalar fields current methods isosurface extraction unstructured grids well structured grids view isosurface extraction problem following way approach 2 interval search given point given set cells represented intervals find subset norm used dimensionality vis greater one posing search problem intervals introduces difficulties intervals length mutually exclusive organized efficient way suitable quick queries however much less obvious organize arbitrary set intervals indeed distinguishes methods one another way organize intervals rather perform searches key point minimum maximum values given dimension formally minimumand maximumvalues represented basis includes one unit vector degenerated basis cause difficulties able obtain simpler representation use basis includes two unit vectors one min value one max value better still maximum separation representation min max values occur two unit vectors perpendicular therefore led new representation point plane using natural coordinate system represent minimum maximum values method proposed paper addresses problem isosurface generation unstructured grids searches value space approach nevertheless view problem search intervals v rather search points v 2 start augmented definition search space given set cells define set points fv j g values vertices cell though conceptually much different interval space span space nevertheless lead simple near optimal search algorithm addition span space enable us clarify differences commonalities previous interval approaches benefit using span space points 2d exhibit explicit relations intervals tend viewed stacked top overlapping intervals exhibit merely coincidental links points exhibit arbitrary ties respect lend many different organizations however shall show later previous methods grouped points similar ways looked interval perspective using augmented definition isosurface extraction problem stated approach 3 span search given set cells c associated set points p span space given value v 2 v find subset p p note 8x thus associated points lie line perspective span search given fig 1 iii previous work examine previous approaches problem isosurface generation geometric space decomposition originally structured grids available underlying geometry structured grids impose order given cell set fact helps keep geometric complexity entire cell set g utilizing order methods based geometry data set could take advantage coherence adjacent cells livnat hanwei johnson near optimal isosurface extraction algorithm using span space 3 min fig 1 search span space data cell represented point based upon minimum maximum values vertices cell points shaded area represent cells intersect isovalue v a1 marching cubes perhaps well known isosurface extraction method achieve high resolution results marching cubes method introduced lorensen cline 1 marching cubes method concentrated approximation isosurface inside cells rather efficient locations involved cells end marching cube method scans entire cell set one cell time novelty method way decides cell whether isosurface intersects cell approximate a2 octrees marching cubes method attempt optimize time needed search cells actually intersect isosurface issue later addressed wilhelms gelder 2 employed octree effectively creating 3d hierarchical decomposition cell set c node tree tagged minimum maximum values cells represents tags hierarchical nature octree enable one trim sections tree search thus restrict search portion original geometric space wilhelms gelder analyze time complexity search phase algorithm however octree decompositions known sensitive underlying data underlying data contains fluctuations noise octree traversed fig 13 example data set ultimately undermines geometric decomposition scheme appendix present analysis octree algorithm show algorithm worst case complexity ok log nk finally octrees primarily applied structured grids easily adapted deal unstructured grids a3 extrema graphs recently itoh koyamada 3 presented new method generating isosurfaces unstructured grids using extrema graphs search starts seed cell known intersect isosurface propagates recursively neighbor cells knowing isosurface intersects current cell enables algorithm move neighbor cells guaranteed intersect isosurface order find seed cell itoh koyamada employed extrema graphs nodes graphs cells include local extrema vertices arc graphs list cells connecting two end nodes given isovalue extrema graph first scanned located arcs span across isovalue cells arcs list scanned sequentially seed cell found boundary cells must also traversed hence complexity algorithm best size boundary list itoh koyamada estimate 23 analysis shows number arcs worst case case occurs data exhibits small perturbations node local extrema case numbers arcs extrema graph equal number cells though arc contain single cell storage requirements extrema graph method high since propagation search requires four links cell neighbors addition maximum minimum values vertices addition algorithm uses queue propagating search yet maximumrequired size queue unknown advance b value space decomposition decomposing value space rather geometric space two advantages first underlying geometric structure importance decomposition works well unstructured grids second scalar field 3d dimensionality search reduced three two b1 span filter key issue isosurface extraction size data set gallagher 5 addressed issue scanning data set generating compressed representation suitable isosurface extraction range data values divided subranges termed buckets cell classified based bucket minimum value resides many buckets cells range spans ie span cell cells grouped according span within group cells grouped according starting bucket internal group representation compressed according unique id assigned cell rather requiring span list every possible span length method uses one span list catch cells span 4 ieee transactions visualization computer graphics submited min bucket span 2 span 3 span n span 1 fig 2 span filter shown ad hoc division fields range subranges called buckets point represents data cell assigned min max bucket based upon points min max coordinate points grouped spans based upon difference assigned buckets numbers span n represents spans index larger predefined index ie 3 example predefined number buckets fig 2 depicts span filter organization span space note compression cells id shown given isovalue v cells intersect isosurface lie left dashed line use perspective stresses importance first division buckets entire organization domain controlled one set parameters position original buckets may help ensure even distribution first span provide control distribution cells spans furthermore division automated crafted trial error new data set finally search algorithm complexity time b2 active list different approach taken giles haimes 4 find cells intersect isosurface incrementally isosurface found neighbor isosurface isovalue close first one found minimal effort algorithm based two cell lists ordered cells minimum maximum values delta global maximum range cells isovalue first given change previous value greater delta active cell list formed active list first initialized cells minimum value given isovalue v v gamma delta consulting minimum list active list purged cells maximum value less v isovalue changed less delta active list augmented cells lie previous isovalue v min vd nv vd fig 3 active list doted area represents points initially put active list points doted area horizontal line v removed active list new isovalue nv close current isovalue v points striped area added active list points horizontal nv line within striped dotted areas removed active list new one nv new cells found using one two ordered lists based upon whether change positive negative active list purged cells intersect isosurface fig 3 depicts giles haimes algorithm span space though algorithm explicitly partition space advance use global maximum cell span delta thing implicitly width area needs scanned constant change isovalue greater delta algorithm must linearly scan cells range nv gamma delta nv since delta depends data set algorithm control size scanned list two test cases heart brain cells boundary large span causes delta large algorithm must linearly scan approximately half data set hand delta might small neighborhood search may used using span perspective fig 3 see isovalue changed v nv algorithm scan cells striped band discard cells lower triangle band triangle usually dense part band large number cells must scanned dis carded one scans across entire range data set typical change isovalue larger 05 large data set delta much smaller taking advantage neighboring isosurfaces finally algorithms complexity still time b3 sweeping simplices recently two authors shen johnson 6 developed sweeping simplices method extracting isosurfaces unstructured threedimensional meshes algorithm utilizes coherence adjacent isosurfaces explicit space decomposition livnat hanwei johnson near optimal isosurface extraction algorithm using span space 5 sweeping simplices uses two ordered cell lists sweep list min list element sweep list contains pointer cell cells maximum value flag sweep list sorted according cells maximum value min list contains minimum value cell well pointer corresponding element sweep list ordered minimum values initialization step requires time log n given isovalue sweeping simplices algorithm marks cells minimum value less given isovalue using min list setting corresponding flag sweep list isovalue previously given min list traversed previous isovalue new one corresponding flags sweep list set reset based whether new isovalue greater smaller previous isovalue flags changed sweep list traversed starting first cell maximumvalue greater new isovalue cells intersect isosurface cells corresponding flag set complexity algorithm time space sweeping simplices algorithm uses hierarchical data decomposition lowest level range data values subdivided several subgroups levels created recursively grouping consecutive pairs previous level top level exists single subgroup range entire data set cells associated smallest subgroup contains cell subgroup associated min sweep list described isosurface extraction accomplished selecting level subgroup contains given isovalue performing search using min sweep lists space decomposition sweeping simplices al gorithm well marked cells isovalue pv shown fig 4 full dots marked cells new isovalue selected cells lie vertical lines pv v first marked cells intersect isosurface marked cells lie horizontal line v though sweeping simplices faster active list algorithm depend global delta space decomposition optimal groups whose range intersect isovalue lines fig 4 must linearly scanned group contains area outside target isosurface region remark using span space perspective second author recently devised efficient space decomposition algorithm improved overall performance sweeping simplices algorithm b4 summary existing methods previous value space decomposition algorithms use wide range terminology approaches use span space provides common ground methods compared effect shown methods use similar approaches searching space decomposition methods complexity time memory requirements min pv level 1 level 2 level 3 level 4 marked unmarked fig 4 sweeping simplices range field divided subranges turn organized levels see text details iv new algorithm common obstacle interval methods intervals ordered according either maximum minimum value sweep algorithm minmax attempted tackle issue maintaining two lists intervals ordered maximum minimum values missing however way combine two lists single list following present solution obstacle using span space underlying domain employ kdtree means simultaneously ordering cells according maximum minimum values kdtrees kdtrees designed bentley 1975 7 data structure efficient associative searching essence kdtrees multidimensional version binary search trees node tree holds one data values two subtrees children subtrees constructed nodes one subtree left one example hold values less parent nodes value values right subtree greater parent nodes value binary trees partition data according one dimen sion kdtrees hand utilize multidimensional data partition data alternating dimensions data level tree b search span space using kdtree given data set kdtree contains pointers data cells constructed using kdtree index data set algorithm rapidly answer isosurface queries fig 5 depicts typical decomposition span space kdtree construction construction kdtrees done recursively optimal time log n approach find 6 ieee transactions visualization computer graphics submited min root12 2v fig 5 kd tree lines represent structure kdtree vertical line root represents first split span space along min coordinate next split level 1 represented two horizontal lines split two major subregions along max coordinate level 2 tree split four subspaces along min coordinate processes continues points accounted median data values along one dimension store root node data partitioned according median recursively stored two subtrees partition level alternates min coordinates efficient way achieve log n time recursively find median using method described blum et al8 partition data within time bound simpler approach sort data two lists according maximum minimum coordinates spectively order log n first partition accesses median first list min coordinate constant time marks data points values less median use marks construct two sub groups continue recursively though methods complexity log n weaknesses finding median optimal time theoretically possible yet difficult program second algorithm requires sorting two lists maintaining total four lists pointers although still linear respect memory quirement nevertheless poses problem large data sets simple think elegant solution use quicksortbased selection 9 method worst case 2 average case fur thermore selection algorithm requires additional memory operates directly tree note algorithm performed least four time faster application data sets section vii two sorted lists algorithm pseudo code kdtree construction given fig 6 clear kdtree one node per cell span point thus memory requirement kdtree buildkdtree array size recursive build build array size min build array size criterion criterion either min max coordinate array size criterion build array size2 othercriterion build array1size2 size12 othercriterion array size criterion use quicksort partition algorithm rearrange array based given criterion median element arraysize2 elements less median array0size21 fig 6 kdtree construction query given isovalue v seek locate points fig 1 left vertical line v horizontal line v note need locate points horizontal vertical lines assume nondegenerate cells minimum maximum values unique remove restriction later kdtree traversed recursively comparing isovalue value stored current root alternating roots minimum maximum values odd even levels root node right isovalue line left right subtree traversed otherwise subtrees traversed recursively furthermore last case roots value also compared given isovalue determine corresponding cell triangulated efficiency define two search routines searchmin searchmaxmin dimension currently checking first named dimension still need search named second importance naming second dimension evident next section consider optimizing algorithm following short pseudocode minmax routine searchminmax isovalue root livnat hanwei johnson near optimal isosurface extraction algorithm using span space 7 construct polygons roots cell searchmaxmin isovalue rootright searchmaxmin isovalue rootleft estimating complexity query straight forward indeed analysis worst case developed lee wong 10 several years bentley introduced kdtrees clearly query time proportional number nodes visited lee wong analyzed worst case constructing situation visited nodes part final result analysis showed worst case time complexity k average case analysis region query still open problem though observations suggest much faster almost typical applications n suggests complexity ok hand complexity isosurface extraction problem omegagamma k bound size output hence proposed algorithm noise optimal k almost cases near optimal general case degenerate cells degenerate cell defined cell one vertex minimum maximum value given isovalue equal extrema value cell isosurface intersect cell rather isosurface touch cell vertex edge face based many vertices share extrema value first two cases vertex edge cell ignored last case problematic ignoring case lead hole isosurface furthermore face ignored drawn twice one solution perturb isovalue small amount isosurface intersect inside one cells another solution check sides kdtree case occurs direct cost approach high happen twice higher cost performing equality test level note data sets tested single case degeneracy v optimization algorithm presented previous section optimal regards memory requirement search time present several strategies optimize algorithm pointerless kdtree kdtree node presented previously must maintain links two subtrees links introduce high cost terms memory requirements overcome defi tree array r fig 7 two representations kdtree relative position nodes ciency note case kdtree completely balanced level one data point stored node rest equally divided two sub trees therefore represent pointerless kdtree onedimensional array nodes root node placed middle array first n2 nodes represent left subtree last n gamma 12 nodes right subtree shown fig 7 memory requirement per node pointerless kdtree reduces two real numbers minimum maximum values one pointer back original cell later usage considering cell 3d application tetrahedral cells pointers four vertices kdtree memory overhead even less size set cells use pointerless kdtree enables one compute tree line preprocess load tree using single read time complexity data acquisition via ctmri scans scientific simulations generally time consuming ability build kdtree separate preprocess allows one shift cost computing tree data acquisition stage hence reducing impact initialization stage extraction isosurfaces large data sets b optimized search search algorithm enhanced let us consider minmax maxmin routine original algorithm isovalue less minimum value node know trim right subtree consider case isovalue greater nodes minimum coordinate case need traverse subtrees new information respect search right subtree search left subtree know minimum condition satisfied take advantage fact skipping odd levels point achieve define two new routines searchmin searchmax adhering previous notation name searchmin states looking minimum value 8 ieee transactions visualization computer graphics submited searchminmax isovalue root construct polygons roots cell searchmaxmin isovalue rootright searchmax isovalue rootleft else searchmaxmin isovalue rootleft searchmin isovalue root construct polygons roots cell searchskipmin isovalue rootright collect rootleft else searchskipmin isovalue rootleft searchskipmin isovalue skipnode construct polygons skipnodes cell searchmin isovalue skipnoderight searchmin isovalue skipnodeleft leaf node construct polygons leafs cell note leaf nodes organized sequentially thus need descend subtree fig 8 optimized search examining searchmin routine note maximum requirement already satisfied gain new information isovalue less current nodes minimum trim right subtree isovalue greater nodes minimum recursively traverse right subtree regard left subtree know points querys domain therefore need collect using notion pointerless kdtree proposed sec subtree represented contiguous block trees nodes collecting nodes subtree requires sequentially traversing contiguous block pseudo code optimized search odd levels tree ie searching minima presented fig 8 code even levels searching maxima essentially uses collect routine c count mode extracting isosurfaces important goal yet particular application one may wish know many cells intersect particular isosurface knowing number cells intersect isosurface help one give rough estimate surface area isosurface structured grid well behaved unstructured grid volume encompassed isosurface also estimated one knows number cells lie inside isosurface well number cells intersect algorithm accommodate need particular knowledge simple way number cells intersecting isosurface found incrementing counter rather constructing polygons node replacing collection single increment counter size subtree known without need traverse tree count number cells lie inside isosurface one need look cells maximum value isovalue worst case complexity count mode n complete analysis presented appendix b important note count mode depend size isosurface shall show section vii count extremely fast introduces meaningful cost time count mode thus enables application quickly count cells intersect isosurface allocate prepare appropriate resources full search begins neighborhood search sweeping simplices active list algorithms designed take advantage coherence isosurfaces close isovalues present variant proposed algorithm also takes advantage coherence examining fig 10 see isovalue pv changed v set cells intersect new isosurface generated adjusting current set cells essence v pv need remove cells lie bottom rectangle add lie right rectangle v pv add remove roles rectangles flipped opposed previous methods decompose space specifically small changes isovalue use kdtree decomposition turn means time either regular neighborhood search performed data structure thus choose one likely best one based current esti mation new set cells achieved performing two searches first kdtree searched cells need removed second search performed find new cells add list fig 9 depicts pseudo code part second search neighborhood search benefit change isovalue small small number cells needs added removed especially count mode however several disadvantages using type search case previous methods first active cell list must maintained adds overhead time memory second node kdtree must maintain yet another pointer cell entry active list removed quickly without traversing active list finally number cells belong current new cell list small effort find new isosurface doubled livnat hanwei johnson near optimal isosurface extraction algorithm using span space 9 nearsearchminmax pv v node nearsearchmaxmin pv v noderight else nearsearchmaxmin pv v nodeleft else add node nearsearchmaxmin pv v noderight nearsearchmaxmin pv v nodeleft fig 9 neighborhood search pseudo code min fig 10 neighborhoodsearch points dotted area represent cells intersected current isosurface new isosurface points cells right striped area added isosurface points cells lower striped area removed isosurface remark current performance algorithm current available hardware bottle neck longer finding isosurface even computing rather actual time takes display vi triangulation cell identified intersecting isosurface need approximate isosurface inside cell toward goal marching cubes algorithm checks cells vertices marks either isosurface using information lookup table algorithm identifies particular way isosurface intersects cell marching cubes many variants designed structured grids though applied unstructured grids well propose new algorithm unstructured grids tetrahedral cells first note isosurface intersects inside cell vertex maximum value must isosurface vertex minimum value must fig 11 triangulation vertices numbered according ascending values take advantage fact reorder vertices cell according ascending values say v1 v4 priori initialization stage cell determined intersect isosurface need compare isovalue two middle vertices since three possible cases v1 isosurface v4 isosurface fv1v2g fv3 v4g see fig 11 moreover order vertices approximating triangles triangles oriented correctly respect isosurface known advance cost take advantage fact four possible triangles cell compute normals priory option improve triangulation time dramatically yet comes high memory price tag vii results evaluate proposed algorithms done extensive tests various data sets tests carried sgi r4400 150mhz workstations 256mb 640mb memory data sets used several data sets variety sources table shows characteristics models first three data sets consists bioelectric field problems solved using finite element method unstructured tetrahedral grids fig 14 15 16 head 128 3 mri scan human head fig 12 fd fluid dynamics data set computed 256 3 spectral cfd simulation fig 13 also used subsampled sets large data set sizes data sets source type vertices cells heart fem ugrid 11504 69892 torso fem ugrid 201142 1290072 brain fem ugrid 74217 471770 head mri sgrid 2m 2048383 fd128 fem sgrid 2m 2048383 1 note submit color figures final paper b benchmarks algorithm tested respect cpu run time complexity relative given data set test included 1000 random value isosurface extractions table ii shows distribution number cells isosurfaces different models brain model example nonuniform cell size position distribu tion cells large span would caused worstcase performance previous isosurface extraction algorithms performed two tests model first using isovalues entire model domain second checking small dense area paper concentrated finding cells intersect isosurface performing fast triangulation tetrahedral cells therefore measure triangulation structured grid model data sets issued call empty stub function cell intersects isosurface therefore introducing cost per intersected cell ii isosurface statistics cells isosurfaces torso brain partial 5287 26710 10713 full 12 14756 25 head 8 610291 61091 iii performance statistics isosurface nodes overhead max size checked collected heart 1617 687 473 17472 torso 8001 3487 2679 20156 partial 10713 2295 1570 14742 full head 61091 4568 3735 512095 c analysis table iii shows performance algorithm respect size average isosurface first col iv cpu time build count search per cell per cell sec msec nanosec msec nanosec heart 76 04 57 70 43 torso 271 22 17 438 55 partial 15 32 539 50 full 10 21 11 440 head 352 30 14 314 15 23 09 35 77 31 fd128 226 29 14 692 34 search times include triangulation unstructured grids umn taken verbatim table ii nodes checked column represents average number tree nodes actually examined algorithm overhead part final isosurface example average isosurface fd128 case intersected 172 247 cells yet algorithm examine 4 489 tree nodes order locate cells 4 489 nodes checked 3 405 nodes intersect isosurface represent overhead sense key point algorithm ability locate large groups intersected cells ie large subtrees nodes represent cells intersected isosurface subtree located need traverse subtree leaf nodes form continuous block largest subtree found paticular data set depicted collected column table case previous example fd128 largest subtree contained 512 095 nodes algorithm consistently examined many fewer nodes size extracted isosurface exception full brain data set average isosurface less empty even pathological case number cells examined small 043 case algorithm optimal n yet overhead negligible overall overhead examining extra nodes kept minimum collection scheme achieved excellent results complexity search phase kept 3 depend size resulting isosurface predicted count mode analysis cpu run time shown tab iv initialization step measured seconds count search milliseconds numbers represent average run time per query search includes triangulation unstructured grid data sets using proposed fast triangulation algorithm time requirements count mode kept milliseconds even large data sets corre livnat hanwei johnson near optimal isosurface extraction algorithm using span space 11 spondingly large numbers isosurfaces search optimization clearly benefited collect routine evident large collected blocks performance algorithm viewed respect main goal locating cells intersect isosurface respect ie count mode cpu time requirements low milliseconds even large data sets exhibit complexity n ie dependency size isosurface noticed search mode cpu time clearly dominated size isosurface intersected cell must examined triangulated case unstructured grid datasets entire process search triangulation 50ms however large structured grid datasets average size isosurfaces much larger caused total time increase approximately 08 seconds viii conclusions presented near optimal isosurface extraction noise algorithm worstcase performance nk algorithm near optimal sense typical case k n noise optimal rest cases overhead negligible memory requirement noise preprocess step complexity log n performed offline preprocessing done offline results loaded algorithm performs well large small data sets size isosurface number cells intersect isosurface also found n time enables fast rough estimates surface area corresponding volume encompassed isosurface able create noise algorithm projecting data onto new space termed span space turn lends simple decomposition utilizing kdtree furthermore span space serve common ground methods compared analyzed also presented fast triangulation scheme based one time preprocess reorganization cells vertices acknowledgments work supported part national science foundation national institutes health authors would like thanks k coles j painter helpful comments suggestions wish thank los alamos national laboratory use facilities head data set fd data set courtesy shiyi chen lanl furthermore appreciate access facilities part nsf stc computer graphics scientific visualization appendices worst case analysis octree isosurface extraction wilhelms gelder analyze time complexity octreebased isosurface extraction algorithm section iiia2 present worstcase analysis method first note octree used wilhelms gelder derived geometry data set augmented minimum maximum values cells tree octree relies solely geometry group cells close field values hand octree guaranteed balanced also note data cells occur leaves tree simplicity consider first 1d case binary tree n leaves given k seek one groups k leaves highest cost locate cost log n suggests estimate ok log n worst case clearly overestimate many segments paths k cells shared 2 two paths root must share several intermediate nodes maximum cost occur root node shared therefore log n leads example n since binary tree n leaves nodes general case ddimensional tree follows immediately binary case let k solution recursive formula log special case octree 3 log n complexity ok b performance analysis count mode node kdtree holds information regarding value used split current tree forces search algorithm always traverse least one subtree best case performance count mode thus ologn examine worst case complexity count mode referring optimized version section va find two cases isovalue less value root tree need traversed one subtree otherwise subtrees traverse yet one know min max condition satisfied clearly worst case involves second case case min max condition satisfied two cases cases however different respect whether one subtree completely empty full cases one subtree descended moreover next level subtree skipped algorithm descends directly subsubtrees note root subtree still need checked therefore log 4 n 4 substituting eq 4 eq 3 using eq 2 get log n hence complexity n r marching cubes high resolution 3d surface construction algorithm octrees faster isosurface generation isosurface generation using extrema graphs advanced interactive visualization cfd span filter optimization scheme volume visualization large finite element models sweeping simplicies fast isosurface extraction algorithm unstructured grids multidimentional binary search trees used associative search time bounds selection algorithms c worstcase analysis region partial region searches multidimentional binary search trees balanced quad trees analysis range searches quad trees tr ctr christopher johnson steven g parker charles hansen gordon l kindlmann yarden livnat interactive simulation visualization computer v32 n12 p5965 december 1999 hanwei shen isosurface extraction timevarying fields using temporal hierarchical index tree proceedings conference visualization 98 p159166 october 1823 1998 research triangle park north carolina united states takayuki itoh yasushi yamaguchi koji koyamada volume thinning automatic isosurface propagation proceedings 7th conference visualization 96 p303ff october 2829 1996 san francisco california united states todd elvins visfiles visualizing simulation data acm siggraph computer graphics v33 n1 february 1999 benjamin vrolijk charl p botha frits h post fast timedependent isosurface extraction rendering proceedings 20th spring conference computer graphics april 2224 2004 budmerice slovakia andrew forsberg david h laidlaw andries van dam robert kirby george e karniadakis jonathan l elion immersive virtual reality visualizing flow artery proceedings conference visualization 00 p457460 october 2000 salt lake city utah united states hanwei shen charles hansen yarden livnat christopher r johnson isosurfacing span space utmost efficiency issue proceedings 7th conference visualization 96 p287ff october 2829 1996 san francisco california united states chandrajit l bajaj valerio pascucci daniel r schikore fast isocontouring improved interactivity proceedings 1996 symposium volume visualization p39ff october 2829 1996 san francisco california united states james painter hanspeter bunge yarden livnat mantle convection visualization cray t3d proceedings 7th conference visualization 96 p409ff october 2829 1996 san francisco california united states jinzhu gao hanwei shen parallel viewdependent isosurface extraction using multipass occlusion culling proceedings ieee 2001 symposium parallel largedata visualization graphics october 2223 2001 san diego california p cignoni c montani e puppo r scopigno optimal isosurface extraction irregular volume data proceedings 1996 symposium volume visualization p3138 october 2829 1996 san francisco california united states caleb lyness edwin blake real time isosurface browsing proceedings 1st international conference computer graphics virtual reality visualisation november 0507 2001 camps bay cape town south africa yarden livnat charles hansen view dependent isosurface extraction proceedings conference visualization 98 p175180 october 1823 1998 research triangle park north carolina united states chikeung tang grard medioni extremal feature extraction 3d vector noisy scalar fields proceedings conference visualization 98 p95102 october 1823 1998 research triangle park north carolina united states udeepta bordoloi hanwei shen space efficient fast isosurface extraction large datasets proceedings 14th ieee visualization 2003 vis03 p27 october 2224 chandrajit l bajaj valerio pascucci daniel r schikore contour spectrum proceedings 8th conference visualization 97 p167ff october 1824 1997 phoenix arizona united states stefan rttger martin kraus thomas ertl hardwareaccelerated volume isosurface rendering based cellprojection proceedings conference visualization 00 p109116 october 2000 salt lake city utah united states bill hibbard vis files computational field visualization acm siggraph computer graphics v35 n4 november 2001 bruno lvy guillaume caumon stphane conreaux xavier cavin circular incident edge lists data structure rendering complex unstructured grids proceedings conference visualization 01 october 2126 2001 san diego california reinhard charles hansen steve parker interactive ray tracing time varying data proceedings fourth eurographics workshop parallel graphics visualization september 0910 2002 blaubeuren germany paolo cignoni paola marino claudio montani enrico puppo roberto scopigno speeding isosurface extraction using interval trees ieee transactions visualization computer graphics v3 n2 p158170 april 1997 takayuki itoh yasushi yamaguchi koji koyamada fast isosurface generation using volume thinning algorithm ieee transactions visualization computer graphics v7 n1 p3246 january 2001 yijen chiang cludio silva io optimal isosurface extraction extended abstract proceedings 8th conference visualization 97 p293ff october 1824 1997 phoenix arizona united states philip sutton charles hansen isosurface extraction timevarying fields using temporal branchonneed tree tbon proceedings conference visualization 99 celebrating ten years p147153 october 1999 san francisco california united states klaus engel rdiger westermann thomas ertl isosurface extraction techniques webbased volume visualization proceedings conference visualization 99 celebrating ten years p139146 october 1999 san francisco california united states c l bajaj v pascucci thompson x zhang parallel accelerated isocontouring outofcore visualization proceedings 1999 ieee symposium parallel visualization graphics p97104 october 2526 1999 san francisco california united states philip sutton charles hansen accelerated isosurface extraction timevarying fields ieee transactions visualization computer graphics v6 n2 p98107 april 2000 thomas gerstner renato pajarola topology preserving controlled topology simplifying multiresolution isosurface extraction proceedings conference visualization 00 p259266 october 2000 salt lake city utah united states yijen chiang outofcore isosurface extraction timevarying fields irregular grids proceedings 14th ieee visualization 2003 vis03 p29 october 2224 tao ju frank losasso scott schaefer joe warren dual contouring hermite data acm transactions graphics tog v21 n3 july 2002 marc van kreveld ren van oostrum chandrajit bajaj valerio pascucci dan schikore contour trees small seed sets isosurface traversal proceedings thirteenth annual symposium computational geometry p212220 june 0406 1997 nice france michael burns janek klawe szymon rusinkiewicz adam finkelstein doug decarlo line drawings volume data acm transactions graphics tog v24 n3 july 2005 ingo wald heiko friedrich gerd marmitt philipp slusallek hanspeter seidel faster isosurface ray tracing using implicit kdtrees ieee transactions visualization computer graphics v11 n5 p562572 september 2005 bartosz von rymonlipinski nils hanssen thomas jansen lutz ritter erwin keeve efficient pointbased isosurface exploration using spantriangle proceedings conference visualization 04 p441448 october 1015 2004 alexander gre reinhard klein efficient representation extraction 2manifold isosurfaces using kdtrees graphical models v66 n6 p370397 november 2004 hamish carr jack snoeyink ulrike axen computing contour trees dimensions computational geometry theory applications v24 n2 p7594 february yijen chiang cludio silva william j schroeder interactive outofcore isosurface extraction proceedings conference visualization 98 p167174 october 1823 1998 research triangle park north carolina united states leif p kobbelt mario botsch ulrich schwanecke hanspeter seidel feature sensitive surface extraction volume data proceedings 28th annual conference computer graphics interactive techniques p5766 august 2001 yarden livnat xavier tricoche interactive pointbased isosurface extraction proceedings conference visualization 04 p457464 october 1015 2004 kwanliu steven parker massively parallel software rendering visualizing largescale data sets ieee computer graphics applications v21 n4 p7283 july 2001 jim cox b karron nazma ferdous topological zone organization scalar volume data journal mathematical imaging vision v18 n2 p95117 march v pascucci c l bajaj time critical isosurface refinement smoothing proceedings 2000 ieee symposium volume visualization p3342 october 0910 2000 salt lake city utah united states lutz kettner jarek rossignac jack snoeyink safari interface visualizing timedependent volume data using isosurfaces contour spectra computational geometry theory applications v25 n12 p97116 may yijen chiang ricardo farias cludio silva bin wei unified infrastructure parallel outofcore isosurface extraction volume rendering unstructured grids proceedings ieee 2001 symposium parallel largedata visualization graphics october 2223 2001 san diego california lutz kettner jarek rossignac jack snoeyink safari interface visualizing timedependent volume data using isosurfaces contour spectra computational geometry theory applications v25 n12 p97116 may george j grevera jayaram k udupa dewey odhner order magnitude faster isosurface rendering software pc using dedicated general purpose rendering hardware ieee transactions visualization computer graphics v6 n4 p335345 october 2000 mario ohlberger martin rumpf adaptive projection operators multiresolution scientific visualization ieee transactions visualization computer graphics v5 n1 p7494 january 1999 mario ohlberger martin rumpf adaptive projection operators multiresolution scientific visualization ieee transactions visualization computer graphics v4 n4 p344364 october 1998 steven parker michael parker yarden livnat peterpike sloan charles hansen peter shirley interactive ray tracing volume visualization ieee transactions visualization computer graphics v5 n3 p238250 july 1999 steven parker michael parker yarden livnat peterpike sloan charles hansen peter shirley interactive ray tracing volume visualization acm siggraph 2005 courses july 31august tim purcell parallel ray tracing chip practical parallel rendering k peters ltd natick 2002