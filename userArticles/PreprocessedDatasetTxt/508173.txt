computational paradigms protection investigate protection requirements may specified implemented using imperative availability coercion paradigms conventional protection mechanisms generally follow imperative paradigm requiring explicit often centralized control sequencing mediation security critical operations paper illustrates casting protection availability andor coercion styles provides basis flexible potentially distributed control sequencing mediation operations b introduction sequencing operations computation may classified terms three fundamental paradigms traditional imperative paradigm programmer explicitly determines sequencing constraints operations availability paradigm sequencing operations depends availability operand data coercion paradigm operations executed results needed paradigms interpreted context pro tection conventional protection mechanisms generally follow imperative paradigm enforcing explicit mediation sequencing operations example mediating purchase order transaction order validate invoice payment imperative protection mechanism might ensure permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee operations done correct sequence suitable separation duties applied stage weakness imperative approach protection based explicit control sequencing mediation explicit control become difficult flexibility sequencing operations required example often desirable allow unvalidated order progress system assumption validation done stage payment made sometimes may even expedient make payment without validation requirements constructed terms explicit sequencing control may natural consider requirements terms data dependencies operations example operation pay depends operations validate invoice operation validate depends operation order forth relationships expressed terms graph operations nodes linked together data passed implicit parallelism operations graph gives rise two different paradigms specifying enforcing protection requirements availability paradigm sequencing mediation operations depend availability operands dataflow like sequencing operations gives rise eager execution example order proposed validation invoice processing done stage payment coercion paradigm sequencing mediation operations determined basis results needed functional style operation sequencing gives rise lazy evaluation example payment finally required order validation sought paper investigate protection requirements specified implemented using imperative availability coercion paradigms done using condensed graphs model computation 8 11 provides single framework unifies three paradigms addition providing flexibility sequencing control security critical operations paradigms facilitated development novel distributed protection mechanisms also described paper following inherently parallel availability coercion paradigms proposed protection mechanisms need necessarily rely centralized security state section 2 provides brief outline condensed graphs model using purchase order transaction exam ple section 3 considers various sequencing constraints one may wish enforce section also serves illustrate notation semantics condensed graph model protection model based permissions protection domains described section 4 specific protection mechanisms model considered section 5 2 condensed graphs like classical dataflow 1 condensed graphs cg model 8 11 graphbased uses flow entities arcs trigger execution contrast condensed graphs directed acyclic graphs every node contains operand ports also operator destination port arcs incident respective ports carry condensed graphs representing operands operators destinations condensed graphs called nodes may condensations abstractions condensed graphs condensation concept used graph theoreticians exposing metalevel information graph partitioning vertex set defining subset partition node condensation connecting nodes according welldefined rule 6 condensed graphs thus represented single node called condensed node graph higher level abstraction basis cg firing rule presence condensed graph every port node condensed graph representing operand associated every operand port operator condensed graph operator port destination condensed graph destination port way three essential ingredients instruction brought together ingredients also present dataflow model operator destination statically part graph condensed graph may represent operator may condensed node node whose operator port associated machine primitive sequence machine primitives may multinode condensed graph5 f figure 1 condensed graphs congregating node form instruction present representation destination cg model node whose destination port associated one port identifications figure 1 illustrates congregation instruction elements node resultant rewriting takes place decorate connections distinguish different kinds ports use numbers distinguish input ports executing condensed graph corresponds scheduling fireable nodes run ancillary processors based constraints graph nodes graph represented triples operation operands destination constructed triple manager tm graph exe cutes node ready fire triple manager schedule execution ancillary processor cg operators divided two categories valuetransforming move condensed graphs one node another welldefined manner valuetransforming operators intimately connected ancillary processors range simple arithmetic operations invocation software components form part application system contrast condensed graph moving instructions number architecture independent tm primitives include condensed node evaporation operator ifel node number working prototypes use condensed graphs developed demonstrating usefulness general model computation prototypes include sequential tm interpreter 8 webbased distributed computing engine 10 webcom 10 schedules execution coarsegrain computations described condensed graphs web clients ancillary processors connect webcom server triple manager whereupon served appropriate computations cg operations statically constructing condensed graph contain operators destinations flow operand condensed graphs sequences computation dataflow manner similarly constructing condensed graph statically contain operands operators flow destination condensed graphs drive computation demanddriven manner finally constructing condensed graphs statically contain operands destinations flow operators result controldriven evaluation latter evaluation order conjunction sideeffects used implement imperative semantics power cg model results able exploit evaluation strategies computation dynamically move using single uniform formalism 3 operation sequencing section consider variety controls one may wish place purchase order transaction example discussed section 1 examples also serve illustrate notation semantics cg model example 1 condensed node poi specifies allowable behaviour order processing figure 2 definition 8 po figure 2 imperative style defintion poi behaviour condensed node poi constructed condensed graph single entry node single exit node x nodes graph represent operations available propose order validate order v process associated invoice make payment p arcs represent data paths operations case may fire execute data arrives input ports example order proposed value details output passed v may turn fire forth firing condensed node evaporates graph defines input available e node final output emanating x node figure 2 may regarded specifying sequential ordering constraints ovip imperative style 4 example 2 figure 3 specifies purchase order transaction simple dataflow availability manner order proposed details available v may fire either order inputs po figure 3 availability style definition poa outputs v available payment proceedexample 3 figure 4 orders validated needed v executed demand coercion driven manner v node acts input value node po figure 4 demanddriven validation orders poc results v becoming fireable needed illustrated figure 5 id represents transaction identifier poc id evaporates firing defining graph id passed entry node e operation fires denoted generating output purchase order po figure 5a acts input v operation fires figure 5b since input value present output port bound destination however input value present v output port bound destination therefore may yet fire operation fired operation p values ports simple value inv graph connected node v output destination therefore fireable ever p expects values input ports atomic values po executable graph object preliminary firing p execute p grafts node v input port acts value figure 5c result p longer fireable output port v becomes bound fires figure 5d result operation p atomic input values fires generates check figure 5e example v executed availability demanddriven manner result validation required scheduled execution execution may regarded eager execution v regarded lazy 4 example 4 figure 6 specifies variation purchase order graph whereby validation requirement may bypassed invoices certain limit operation lim ifel x po l1 lim true figure inspects invoice returning true value certain limit otherwise returns false payment operation p behaviour p except takes one input conditional operation ifel provided triple manager takes boolean value b input port true passes value port output otherwise passes value else port output note decorations ports e indicate nonstrict input values grafted atomic unlike strict ports nonatomic values always grafted thus ifel fires graph e port simply passes depending value b port figure 7 illustrates part behaviour lim returns true input port x strict output p grafted input x making p fireable note case p never fires consequently v never fires p selected ifel becomes grafted x fireable never fires graph figure 6 instead specified direct grafted connection outputs p p ifel operation operation v may eventually fire regardless whether needed analogous kind speculative validation may validate regardless opposed conservative validation validate required specified original graph 4 example 5 nonstrictness provides degree higher orderedness graphs operationgraph may treated data moves around graph execution deferred arrives strict port whereupon becomes grafted figure 8 revised invoiceprocessing operation non po l2 p figure 8 lazy validation ii pol2 strict validation port checks invoice order outputs suitable value graph includes yettobe executed v operation inputs payment operation p also nonstrict input port generates printcheck operation ck dependency v operation see figure 9a graph value po po b c e ok ck id po po id po po ok id po po figure 5 firing sequence poc true ifel ifel lim true b figure 7 snapshot lazy order validation pol1 may thought representing behaviour issuing check validation must done graph arrives strict port x grafted figure 9b turn results grafting v figure 9c turn becomes fireable validation done check printed pol2 completed 4 condensed graphs provide executable notation allows us precisely specify operations glued together next section proposes protection framework glue 4 protection framework triple manager schedules nodes graph fired ancillary processors participating computation processors could components parallel machine network workstations variety heterogenous systems connected local networks andor internet security perspective assume node fires within security domain reflects resources accessed node thus domain could correspond specific host network subnet forth however limited network computing model domain could represent traditional protection domain 7 example node performs secret operation could scheduled domain secret alternatively authenticated domain might represented publickey speaks operation may scheduled particular security domain security domain holds correct permission provides authorization execute operation node permission attribute reflects necessary authorization required domain execute triple manager provides primitive operation perm permnonstrict node n permn returns permission associated node n nonstrictness required since examining permission attribute node result execution permissions treated primitive value nodes within condensed graph assumed structured lattice means permission provides less authorization x simple example powerset lattice fread writeg ordering defined subset lowest bound defined union thus lowest upper bound operator may used compose permissions triple manager schedules nodes graph executing fire security domains appropriate permissions primitive operation provided perm sdomnonstrict node n given node sdoma returns permission assigned domain scheduled yet ready fire sdom may either return domain planned may block known andor ready fire single permission need associated security domain since composite permissions may constructed using node primitive operation condensed node scheduled xp b c ck ck ck figure 9 strictness eventual validation pol2 main current triple manager current triple manager manage scheduling graph defined scheduled fire different domain another triple manager running domain schedule graph defines primitive tm operation perm cdom returns permission assigned domain graph currently executing permission assigned triple manager executing graph figure 10 illustrates relationship securityrelated tm prim itives triple manager scheduled condensed node security attribute executed another triple manager running domain permission x graph defined said run security context xa triple manager regarded trusted component sense triples manages may accessed triple manager constructs schedules triples faithfully according graph executing 1 node permission attribute fires domain permission x said security context x security defined terms whether graph one security context may schedule node fire another security context possibly node permission attribute b part graph security context x may scheduled domain implies partial ordering relation security contexts relation called scheduling constraint controls graphs evaporate prescribe specific definition implies relation however one possible definition could based permission orderings considering figure 10 triple manager must sufficient permissions execute graph defined x triple manager must also sufficient permission schedule node graph another domain x similarly b must authorized run domain b thus impliesx b example 6 triple manager schedules nodes graph fired ancillary processors participating computation suppose purchase order system implemented across network personal workstations connected trusted server define set permissions powerset fclk mgrg subset ordering relation operations believe assuring correctness triple manager straightforward core current implementation stands hundred lines c code permission attribute fclkg operations v p permission attribute fmgrg condensed node poi permission attribute fg alice manager bound permission fmgrg bob clerk bound permission fclkg suppose alice requests instance poi executed trusted server domain fclk mgrg provides context fclk mgrg fg operations v p scheduled operations may scheduled alices domain context fclkgfg workstation similarly v p may scheduled bob5 protection mechanisms security graph based scheduling con straint defined operational denotational manner operationally graph secure triple manager schedules nodes uphold scheduling constraint disadvantage approach security mechanism must hardcoded part triple manager implementation dependent alternative define security denotational way define enforcement scheduling constraint terms condensed graph take approach guaranteeing proposed security mechanisms implemented worry stage lowlevel operational de tails another advantage defining security way program alternative protection mechanisms 51 fragile protection fragile protection operation f takes node input operand scheduling constraint upheld may fire f evaluates scheduling constraint fails may fire result evaluation null figure 11 defines operation condensed node purposes cdom perm sdom f null ifel figure 11 definition fragile protection operator paper assume graph defined f executes context yb firesevaporates sdom cdom perm x z graph defined scheduled atriple manager running sdom cdom context xa perm x domain permission x graph containing condensed node runs domain holds permission w context wp operation b executes domain holds permission schedules figure condensed node b scheduled fire executes scheduled protection domain parent ensures value cdom referenced figure 11 corresponds cdom parent domain schedules node input f since input port fragile protection operation nonstrict operand passes graph without graftingfiring lazy evaluation within graph ensures passes x node scheduled appropriate domain whereupon becomes grafted strict port x fires example 7 figure 12 protects ordering process defined figure 8 protection nodes protect operations p immediately available fire figure 13 illustrates result nodes firing alternate firing sequence might fire protection node followed forth validation operation mediated lazy basis protected v operation subgraph passes p nodes becoming input x node protection operation becomes grafted fires mediating scheduling v 4 paper consider security constraints scheduling nodes exactly triple manager decides schedule fireable nodes must left triple manager would straightforward implement triple manager tried ensure scheduling constraint always upheld scheduling practice expect fragile protection node would implemented tm primitive rather condensed node implementation triple manager must also decide whether protection operation fire soon possible whether wait node mediates input ports bound immediately firing protection node gives rise notion speculative protection whereby triple manager schedules advance au thorized domain operation ready fire alternatively deferring firing protection node operation mediates input ports bound gives rise conservative protection like speculative conservative computation controlled within triple manager 52 tenacious protection disadvantage fragile protection operator potential results lost scheduling constraint upheld rather failing would preferable reschedule node later evaluation allow scheduled another triple manager authority assign appropriate domain achieved tenacious protection operation defined figure 14 graph defined recursively scheduling constraint cdom perm sdom ifel figure 14 definition tenacious protection operator upheld node becomes grafted input port x may fired scheduling constraint upheld result lazily protected unlike fragile protection tenacious protection operator behaves like security wrapper repeatedly probed unwrapped scheduled authorized domain tenacious protection operator could implemented tm primitive one interpretation tm postpones scheduling node authorized domain available however general interpretations pos sible example current triple manager cannot assign authorized domain protected operation scheduled another triple manager assign authorized domain example 8 suppose network partitioned terms clerk subnet management subnet subnet server routes traffic sub nets triple manager clerk server starts po f f f f figure 12 protecting ordering process f figure 13 protecting ordering process transaction graph schedules requested operation clerks workstation since cannot schedule management operation passes wrapped operation triple manager management server scheduling turn schedules appropriate management workstation 4 domain scheduling heuristics discussed example 8 considered part implementation triple manager tenacious protection operator could thought scout node sent across network looking suitable triple manager schedule protected node found underlying triple manager transparently retrieves protected node alternative speculative approach would multicast protection operator across network soon one triple manager schedule protected node node migrates speculative protection nodes garbage collected lowlevel protocols support effect remote node invocation investigated else triple manager scheduling pvm processes 9 traditional dataflow system 13 investigating suitable domain scheduling heuristics topic future research example 9 condensed graphs used exploit parallelism computation triple managers schedule computation across networks workstations 10 figure 15 gives example graph schedules distributed bruteforce key search given known plaincipher text key space split series intervals indexed primitive operation crint interval searches specified interval key found key returned otherwise 0 returned operation search defined recursively high degree parallelism exploited triple manager schedules operation cr executed participating processors operation search passed initial value maxindex organization wishes use application find particular key purposes security search operations may scheduled systems within organization intranet cr operation may scheduled recognized system figure 15 illustrates requirements selectively programmed within appli cation operations search cr assigned permission attributes respectively permission may associated node introducing additional permission input port node illustrated using ifel ifel searchsearch0 cr figure 15 programming protection solid input arrowhead given permission ordering systems domains within intranet given permission recognized external systems given permission schedules impliesinininin im pliesininoutout impliesinininout hold 4 53 emergent protection many protection policies base access decisions previous decisions andor behaviour example chinese walls 3 dynamic separation duties 12 condensed graphs represent distributed computation preferable rely upon centralizedstate approaches 4 provide mechanisms enforce requirements wrapping protection mechanism specified figure 16 used support distributed fashion limited form dynamic separation duties wrapping operator takes input node permits fire domain strictly authorized uncomparable authorization x result r firing wrapped wx r thus first parameter w used continue local state node acting highwater mark permissions past domains figure 17 gives snapshot mechanism opera tion given wax sdoma 6 x explicitly grafted second input port new w operation makes fireable nonstrictness port w graft resulting output r resulting output r protected may fire suitably different domain forth wrapping operation tenacious easily extended enforce vw z x r z r fires domain wz outputs fires domain yx outputs r r z zx figure 17 snapshot wrapping unwrapping sdom sdom ifel figure wrapping protection mechanism scheduling constraint example 10 consider simplified version purchase order transaction figure 18 order operation takes input orderid nonstrict payment op eration outputs payment operation p appropriately transformed include order value forth fg w x figure dynamic separation duty order operation mediated wo fg fg empty permission manager permission fmgrg may execute operation result wrapped node payment p may fire domains permissions fclkg fclkmgrg 4 tailored specific requirement proposed wrapping mechanism illustrates flexibility using condensed graphs specify implement protection quirements rather maintaining centralized security state operator w thought providing emergent protection mediation results emergence protection mechanism mediate subsequent op eration investigating mechanism might applied practice developing emergent mechanisms general protection policies topic future research 6 discussion conclusion condensed graphs model provides single framework protection requirements specified implemented within imperative availability coercion paradigms section 3 illustrated using paradigms provide flexibility sequencing control security critical operations sections 4 5 draw techniques develop novel protection mechanisms tena ciously protected node operation data repeatedly probed passed around may unwrapped appropriate domain referential transparency condensed graphs model means tenacity may applied results generated operation emerge protected mechanism created fly triple managers transparently schedule graph operations appropriate security domains allows protection requirements coded part graph program independently underlying architecture graphbased protection operators tenacious protection viewed protection wrapper may unwrapped authorized security domain scheduling tenaciously protected node authorized domain completely trans parent even though may necessary migrate protected node number triple managers could successfully scheduled secure webcom 5 provides one possible implementation protection model described paper bcom 10 masters schedule condensed graph applications remote webcom clients ancillary processors web com masters use keynote credentials 2 determine operations client authorized execute web com master credentials used clients determine master authorization schedule trusted mobilecomputation client execute implementation interpreted terms protection mechanisms described paper client master public keys provide security domains credentials define associated permissions authorization check similar fragile mediation every node graph much work remains done investigating protection model described paper might used prac tice protection model might also used part conventional secure system condensed graph regarded sophisticated jobcontrol language used schedule operations multilevel transactions protection domains separation kernel 14 acknowledgements thanks anonymous referees workshop audience useful comments paper research suported part enterprise ireland national software directorate r keynote trustmanagement system version 2 chinese wall security policy specification implementation commercial security requirements including dynamic segregation duties exploiting keynote web com architecture neutral glue trust management structural models introduction theory directed graphs acm operating systems review 8 condensed graphs unifying availabilitydriven facilitating parallel programming pvm using condensed graphs condensed graphs engine drive metacomputing managing exploiting speculative computations flow driven conundrums concerning separation duty design verification secure systems tr specification implementation myampersandldquocommercialmyampersandrdquo security requirements including dynamic segregation duties facilitating parallel programming pvm using condensed graphs protection design verification secure systems