performance analysis stochastic timed petri nets using linear programming approach abstractstochastic timed petri nets useful tool performance analysis concurrent systems parallel computers communication networks flexible manufacturing systems general performance measures stochastic timed petri nets difficult obtain practical problems due sizes paper provide method compute efficiently upper lower bounds throughputs mean token numbers large class stochastic timed petri nets approach based uniformization technique linear programming b introduction stochastic timed petri nets stpn petri nets transitions ring delays since last decade receiving increasing interest modeling performance analysis discrete event systems tool particularly useful modeling systems exhibit concurrent asynchronous nondeterministic behaviors parallel distributed systems communication networks aeexible manufacturing systems reader referred extensive survey 36 theoretical analyses applications petri nets applications performance evaluation parallel distributed machines hardware components parallel distributed computations software components also found 3 special issue j parallel distributed computing vol 15 3 july 1992 literature stpn stochastic petri nets spn 29 35 transition ring times mutually independent exponentially distributed random variables extensions generalized stochastic petri nets gspn 2 immediate transitions ie without ring delay allowed extended stochastic petri nets espn 28 transitions allowed generate random numbers tokens upon rings numerical analysis nets based analysis embedded markov chains decomposition techniques proposed see eg 19 34 references therein analytical solutions exist productform equilibrium distributions special cases spn see 15 references also exist analyses stochastic timed petri nets without markovian assump tions provide performance bounds see 10 11 17 18 25 others analyze stability conditions 4 9 reader referred 5 survey recent results quantitative analysis stpn including approximations simulations although exist various quantitative analysis techniques software tools eg greatspn 23 spnp 27 stpn applications stpn often limited small size problems mostly due time space complexity numerical analysis algorithms simulations paper provide new method compute eoeciently upper lower bounds linear functions throughputs mean token numbers general markovian petri nets approach based uniformization technique linear programming stpn models consideration closely related gspn models dened 24 addition possibility randomly generating tokens upon transition rings uniformization technique one useful techniques analyzing continuous time markov chains 31 32 technique used establish linear equality constraints among expectation state variables queueing networks allowed rr nsigma2642 4 z liu authors bound performance measures solving linear program similar approaches taken determine lower bounds achievable performance control policies multiclass queueing networks 13 optimal control policies klimovs problem 14 stability regions queueing networks scheduling policies 33 studies linear nonlinear programming used obtain bounds method linear programming already used operational analysis deriving bounds nonmarkovian stpn 17 18 25 since statistical assumptions made distributions ring times bounds usually loose several techniques proposed improvement bounds special cases petri nets 20 21 work consider markovian stpn show like 32 13 markovian assumption allows us establish set linear equality constraints among expectation state variables petri nets token numbers places indicator functions whether transitions enabled precisely analyze evolution state variables steady state write evolution equations using uniformization technique taking quadratic forms equations allows us establish linear constraints exploiting structural probabilistic properties petri nets obtain augmenting set linear equalities inequalities similar 25 upper lower bounds performance measures obtained solving linear program paper organized follows section 2 dene stpn models consideration well notation section 3 derive linear equalities based uniformization technique section 4 establish linear constraints based behavioral properties probabilistic laws section 5 provide summary linear programming formulation section 6 present applications technique finally section 7 conclude remarks extensions results notation petri net viewed directed graph e set vertices union set places p set transitions set arcs e composed two subsets e 0 e 00 arcs e 0 either form p form p shall denote set transitions precede place p p ffl set transitions follow place p p set places precede transition inria performance analysis stochastic timed petri nets 5 set places follow transition g arcs e 00 inhibitor arcs connecting places transitions 2 let ffi set places inhibitor arc p 2 p let p ffi set transitions inhibitor arc denote j pt weight inhibitor arc place p transition net n strongly connected path placetransition placetransition p 2 p dene following set transitions tokens circulate petri net circulation takes place transitions red transition 2 red pt tokens consumed place p 2 ffl oe tp tokens created place p 2 ffl variables pt oe tp considered weights arcs e 0 example petri net illustrated figure 1 contains 7 places g transitions immediate transitions places p 1 p 6 initial marking 1 whereas others initial marking 0 two inhibitor arcs p represented arcs ended circle weights arcs upper bounded 1 n called ordinary net opposed weighted net paper consider general case numbers tokens created ring completions random variables transition 2 red nth time oe tp n tokens created place p 2 ffl assumed sequence independent identically distributed iid random variables sequences random variables foe 1 p n however general dependent 1 6 2 let oe tp expectation oe tp n n oe tp 2 n dependent p 1 example creates one token one output places rr nsigma2642 6 z liu figure 1 example petri net ring two cases considered independent token generation selective token generation case independent token generation assume 2 sequences random variables foe tp ng n assumed statistically independent case selective token generation however sequences random variables foe tp ng n dependent way n one output places tokens created oe tp 1 p 1 special case selective token generation routing mechanism token generated one one output places ring discussions immediate transitions two special classes ordinary petri nets referred state machines marked graphs state machine ordinary petri net without inhibitor arcs transition ffl singleton marked graph ordinary petri net without inhibitor arcs place p ffl p p ffl singleton firings transitions timed ie ring takes certain amount time completion token consumptions places ffl token creations places ffl occur simultaneously end ring transition throughout paper assume ring times independent random variables ring times transition iid random variables exponential distribution parameter gspn framework petri nets immediate transitions ie transitions whose ring times zero case immediate transitions higher ring priorities see 24 using algorithms 26 immediate transitions eliminated without changing performance behavior net inria performance analysis stochastic timed petri nets 7 particular interests immediate transitions play roles synchronization andor routing precisely case assume immediate transition output transition input places ie assume immediate transition ffl either oe tp 0 ffl oe tp harmless abuse notation index ffl p denotes unique transition preceding place p appendix present direct transformation technique removes kind immediate transitions without changing ring behavior transitions thus assume throughout paper petri net n immediate transition parameters nite transition enabled least pt tokens place p 2 ffl j tokens place adopt singleserver semantics transitions ring start transition enabled previous ring completed assumed rings started soon possible case inniteserver semantics discussed section 7 ring transition preempted transition disabled ie least one place strictly less pt tokens least one place equal j pt tokens ring time expires ring resumed soon transition becomes enabled disabling transition due competitions transitions common input places tokens places consumed transitions ring transition token arrivals input places inhibitor arcs ring mechanism described called cf 1 race policy age memory note case exponential distributions ring times race policies without age memory stochastically performance behavior due memorylessness property exponential distributions however section 7 consider case ring times general distributions race policy consideration age memory state system characterized marking number tokens place p time process x assumed leftcontinuous x p number tokens place time initial marking marking time 0 rr nsigma2642 8 z liu markovian petri net described denoted throughout paper assume petri net live moreover assume net stable sense x converges stationary variable x dimension jpj goes innity moreover assume rst second moments x nite ie ex p assumptions easy see using hlders inequality 1 let e indicator function whether transition enabled time precisely time let e stationary version e q denote x mean number tokens place p 2 p corresponding vectors denoted asymptotic throughput transition 2 ie number completed rings transition per unit time sequel provide method computing upper lower bounds lx arbitrarily xed linear function l approach based linear programming upper resp lower bound obtained maximizing resp minimizing objective function l linear constraints 3 uniformization linear equalities use uniformization technique derive linear equalities variables x q consider petri net n transition 2 continuously ring iid exponentially distributed ring times parameter ring completed transition 2 two possibilities enabled tokens consumed places ffl created places ffl otherwise disabled ring completed nothing happens ring completion corresponds ctive ring completion inria performance analysis stochastic timed petri nets 9 let f n g sequence time epochs real ctive ring completions n clear f n g distributed according poisson process parameter let f n denote oeeld generated events time n let n indicator function nth real ctive ring completion occurs transition 2 clearly 2 fa ng sequence iid random variables independent e n p since xed 2 random variables oe tp n iid n assume loss generality numbers tokens created places ffl time n oe tp n enabled time n assume without loss generality system steady state owing process see time average property cf eg 6 x n e n law x e throughput transition 2 computed follows system transitions red either really ctively rate ring completion epoch n ring occurs transition 2 probability therefore real ctive ring completions occur transition rate since ring completions independent e following evolution equation essential 2 taking conditional expectation yields rr nsigma2642 z liu thus steady state ex p n1 taking expectation 3 obtain following aeow balance equalities calculating second moments 2 yields thus steady state ex 2 ee n hence taking expectation 5 obtain following second moment conditionx inria performance analysis stochastic timed petri nets 11 generally p 1 compute expectation product numbers tokens 2 assume rst token generations transitions 2 statistically independent ie random variables oe tp n independent rr nsigma2642 z liu simple algebra obtain steady state thus taking expectation 7 obtain following population covariance condition inria performance analysis stochastic timed petri nets 13 note relations 6 8 identical assume token generations transitions selective ie 2 subset transitions selective token generations 2 0 p 1 therefore similar computation obtain observe equality 8 considered special case 9 indeed equalities coincide 4 constraints section derive linear constraints variables x q except 24 linear constraints established section requires markovian assumption holds general stochastic petri nets 41 behavioral properties liveness since assume net live least one transition enabled rr nsigma2642 14 z liu consequence conaeicting transitions convention j pair transitions enabled 1 enabled e 1 hence transitions equal conaeict ie 1 relation implies q 1 boundedness minimum maximum numbers respectively tokens place p trivially consequence place p 2 p bounds 13 extended set places p let b 0 minimum maximum total numbers tokens places trivially cycle population conservation special case 15 subset places consists cycle ie set transitions inria performance analysis stochastic timed petri nets 15 ffl g since net live stable sum tokens places constant denote c cycle n c c population c follows reachable markings let incidence matrix c e wellknown see eg 36 reachable marking x initial marking written superscript denotes transpose operator column vector h corresponds ring sequence reach x precisely vector numbers rings transition order reach x let x 19 random variable marking stationary regime taking expectation 19 obtain newly introduced unknown variables rewriting 20 scalar form yields oe tp u 42 constraints derived probability theory path comparisons since 2 e 1 almost surely enabling rate bounded one reason x p e x p rr nsigma2642 z liu another consequence according relation taking expectation obtain probabilistic inequalities according chernooes inequality get n 1 v iminj operation bounded places inria performance analysis stochastic timed petri nets 17 therefore equivalently consider transition 2 incoming places bounded ie 1 using fact obtain last inequality comes relations 2729 hence obtain enabling lower applying chernooes inequality 30 yields last inequality comes relations 2729 thus obtain enabling upper rr nsigma2642 z liu note 32 iminj operator nonlinear however linear inequalities generated taking either operand iminj operators consider arbitrary bounded place p bound b p 2 thus similarly last inequality comes 28 thus single entry transitions inria performance analysis stochastic timed petri nets 19 littles law according littles law see eg 40 input rate tokens place p r p mean token sojourn time place p since r p lower bounded minimum ring times output transitions p obtain equivalently 43 subnet throughputs like 21 derive bounds throughputs transitions comparing throughputs n subnets considered isolation n consider particular two special classes subnets strongly connected state machines scsm strongly connected marked graphs scmg e arbitrary petri net n subnet n restriction e fp 0 0 g theta fp 0 0 g assume transitions 0 resp arcs e 0 places p 0 sequences ring times resp weights initial markings nets assume none places connected transitions original net n noninhibitor arcs ie n p 2 denote throughput transition 2 0 subnet n 0 considered isolation following theorems show conditions throughputs transitions n 0 upper bounds throughputs transitions original net theorem 1 n 0 strongly connected marked graph transition n 0 proof due fact original net n none places p 0 connected transitions noninhibitor arcs subnet connected rest rr nsigma2642 z liu system transitions 0 n 0 strongly connected marked graph transitions n 0 conaeict moreover n ring mechanism race policy age memory thus transition 2 0 eoeect tokens places delaying rings 0 thus monotonicity property marked graphs 11 conclude 0 2 0 theorem 2 assume n 0 strongly connected state machine two transitions 1 2 n 0 1 2 conaeict n 0 implies 1 2 equal conaeict n ie ffl transition n 0 0 proof proof similar theorem 1 note rst subnet n 0 connected rest system transitions 0 inhibitor arcs assumption theorem two transitions equal conaeict n 0 equal conaeict n moreover n ring mechanism race policy age memory thus n tokens places t2t 0 change winners ring races among transitions 0 words eoeect tokens places ffl delaying rings transitions 0 thus monotonicity property state machines 8 conclude 0 2 0 note two theorems hold arbitrarily xed sequences ring times markovian assumption needed eoecient computational algorithms computing throughput state machines proposed queueing literature see eg 16 22 38 39 computation throughput scmgs investigated 11 various computable upper bounds proposed exact value throughput obtained simulation using matrix multiplications max algebra see 7 5 summary linear programming formulation theorem 3 let arbitrary markovian timed petri net arbitrary linear function dened nonnegative state variables x net let ff fi solutions linear programming problems inria performance analysis stochastic timed petri nets 21 linear constraints table 1 satised u recall table 1 inequalities containing operator inequalities generated taking either operand iminj operators 6 applications section illustrate applications techniques performance ana lyses shall consider two applications one manufacturing system another parallel computing unless otherwise stated numerical results obtained without linear inequalities pertaining boundedness subsets places subnet throughputs 61 production line rst example concerned production line innite supply see figure 2 example four servers represented circles rst server innitecapacity buoeer innite number production requirements represented small dashed circles three servers nitecapacity buoeers 3 2 4 starts service downstream buoeer 1 least one empty room corresponds socalled blocking service corresponding petri net model depicted figure 2b transitions represent servers initial markings places bottom represent buoeer capacities assume service times server iid exponentially distributed parameter 4 objective function problem total throughput numerical results presented compared exact values experimentation carried computations sets parameters lower upper bounds given columns ilbj iub1j iub2j whereas exact values provided column iexactj upper bounds column iub1j obtained using subnet throughput constraints columns iolbj ioubj also present bounds computed linear programming approch based linear constraints section 4 without markovian assumption implies particular linear equalities section 3 used rr nsigma2642 22 z liu table 1 summary linear constraints aeow balance second moment 2 population covariance liveness conaeicting transitions boundedness cycle population reachable marking x sample path comparisons pt x p 8p 2 enabling bound q bp gamma pt 1 xp bp gammaj pt 1 inria performance analysis stochastic timed petri nets 23 b server 3 server 4 server 2 server 1 figure 2 example production line b corresponding petri net model table 2 bounds throughput production line case exact ub1 ub2 olb oub 5 1111 1111 1111 1111 1350 2667 2963 2963 1111 4444 rr nsigma2642 z liu recall petri net marked graph according 11 throughput increasing ring rates transitions fact clearly shown column iexactj cases 1 2 3 4 worthwhile noticing lower upper bounds columns ilbj iub1j iub2j also reaeect monotonicity 62 cyclic execution consider performance analysis parallel computing system parallel programs represented directed acyclic graphs referred task graphs vertices correspond tasks parallel program directed edges correspond precedence relations tasks task start execution predecessors completed execution tasks assigned parallel processors execution according predened rules example parallel programs structure given task graph figure 3a programs dioeer running times tasks independently exponentially distributed random variables parameters tasks three identical processors tasks 1 2 assigned processor 1 tasks 3 4 processor 2 tasks 5 6 processor 3 b figure 3 task graph parallel programs b cyclic execution parallel program processor dioeerent instantiations task executed according rule rst come rst serve fcfs ie task nth arrived program start execution task program completes dioeerent tasks assigned processor however executed according processor sharing ps discipline example since two dioeerent tasks assigned processor processor inria performance analysis stochastic timed petri nets 25 shared two tasks parallel program considered completed tasks nish execution consider cyclic execution task graph cf figure 3b cyclic execution dened way task t1 resp task t2 program n h start execution task t5 resp t6 program n completes execution number h referred height cyclic execution literature 30 representation parallel computing system stpn illustrated figure 4 initial marking place p1 place p2 corresponds height h p3 p6 p7 p8 figure 4 petri net representation cyclic execution inhibitor arcs used model ps mechanism transitions t11 t12 resp t21 t22 t31 t32 t33 t41 t42 t51 t52 t61 t62 t63 represent tasks 1 resp 2 3 4 5 6 firing times transitions t11 t12 resp t21 t22 rr nsigma2642 26 z liu t31 t32 t33 t41 t42 t51 t52 t61 t62 t63 exponentially distributed parameter two three transitions used task order represent situations whether execution task shared others note transitions t32 t33 resp t62 t63 never enabled simultaneously use two additional transitions task 3 resp task due fact program task 4 resp task 5 allowed start execution tasks 1 2 resp tasks 3 4 completed execution thus execution task 3 resp task 6 shared task 4 resp task 5 task 1 task 2 resp task 3 task objective function problem still total throughput ie sum transition throughputs easy see total throughput equal six times throughput parallel system terms number programs completed per unit time table 3 provide numerical results dioeerent sets parameters xed height 4 lower upper bounds given columns ilbj iubj whereas columns iolbj ioubj also present bounds computed linear programming approch based linear constraints section 4 without markovian assumption implies particular linear equalities section 3 used table 3 bounds throughput cyclic execution case figures 5 6 provide curves bounds functions height cyclic execution cases 1 2 7 conclusions extensions paper established performance bounds markovian stpn taking linear programming approach rst provided set linear equality constraints among expectation state variables petri nets token numbers places indicator functions transition enabling obtained augmenting set inria performance analysis stochastic timed petri nets 27 olb lb ub oub height h figure 5 bounds functions height cyclic execution case 1 olb lb ub oub height h figure bounds functions height cyclic execution case 2 rr nsigma2642 28 z liu linear equalities inequalities exploiting structural probabilistic properties petri nets linear constraints allowed us compute upper lower bounds performance measures solving linear program applied method performance analyses manufacturing system parallel system constraints derived section 4 restricted exponentially distributed ring times inequalities also used operational analysis timed petri nets theorems 1 2 compared throughputs transitions net scmg scsm subnet considered isolation similar inequalities obtained using monotonicity results 11 8 12 subnets throughout paper transitions singleserver semantics analysis extended immediately stpn bounded marking inniteserver transitions indeed case inniteserver transition replaced k singleserver transitions k upper bound token numbers places precisely replace inniteserver transition k singleserver transitions way pt k example transformation illustrated figure 7 b312 figure 7 transformation inniteserver transition singleserver transitions inniteserver transition b equivalent singleserver transitions analysis assumed ring times transition iid exponential random variables xed parameter simple extend results case marking dependent ring rates ie ring rate transition depends marking input places provided number dioeerent ring rates bounded example consider transition single input place let 1 3 ring rates inria performance analysis stochastic timed petri nets 29 transition one token two tokens 3 tokens input place replace transition three transitions 1 2 3 ring rates 1 3 respectively way time one transitions enabled see figure 8 set outgoing places oe k 3 b3123 figure 8 transformation markingdependent ring rate markingindependent ring rates transition 3 ring rates b equivalent transitions xed ring rates approach extended case ring times phasetype distributions 37 phasetype distribution considered distribution time token passes ordinary markovian state machine single source single sink transitions ring times exponential distributions transitions except source sink immediate transitions sink transition represents absorbing state let transition phasetype distribution represented markovian state machine n 0 source transition 0 sink transition replace transition original net subnet n 0 follows p 2 p transition 0 6 n 0 including 0 excluding oe 0 p 2 new place initial marking 1 example construction illustrated figure 9 erlang distribution 3 stages recall ring mechanism consideration race policy age memory reader therefore easily check transitions whose ring times phasetype distributions thus replaced corresponding markovian state machines obtain stochastically equivalent stpn exponential ring times performance measures considered paper mostly throughputs transitions expectations x p x p e approach used rr nsigma2642 z liu a122224b figure 9 transformation phasetype ring times exponential ring times transition 3stageserlangdistribution ring times b transitions exponential ring times inria performance analysis stochastic timed petri nets 31 obtain linear equalities among higher moments token numbers precisely 1 linear equalities established variables ex k ii similarly 1 linear equalities established variables ex k 1 p2 n1 jf n ii finally remark weights stpn real numbers analyses go straightforwardly results hold appendix elimination immediate transitions present direct transformation technique removes immediate transitions playing roles synchronization andor routing assume immediate transition output transition input places ie assume immediate transition ffl either oe tp 0 ffl oe tp harmless abuse notation index ffl p denotes unique transition preceding place p show kind immediate transitions removed net without changing ring behavior transitions consider net e initial marking weights oe let 0 immediate transition g without loss generality assume min p2 ffl 0 construct new net f e initial marking f weights oe key idea create place p pair input place p output place p j transition 0 set input transitions p j union ffl p ffl p j set output transitions p transformation illustrated figure 10 transition 0 immediate transition mathematical denition f n follows e rr nsigma2642 z liu b figure 10 removal immediate transitions subnet containing immediate transition b subnet without immediate transition e e e dened initial marking f weights oe dened accordingly f oe tp easily seen sequences rings times transitions n f ring commencement completion times identical detailed proof done induction left interested reader inria performance analysis stochastic timed petri nets 33 acknowledgements author grateful dr alain jeanmarie constructive comments eoecient help computation numerical results r ithe eoeect execution policies semantics analysis stochastic petri netsj ia class generalized stochastic petri nets performance analysis multiprocessor systemsj performance models multiprocessor systems iergodic theory stochastic petri netsj iannotated bibliography stochastic petri netsj elements queueing theory iparallel simulation stochastic petri nets using recursive equationsj irecursive equations basic properties timed petri netsj istationary regime stability freechoice petri netsj iestimates cycle times stochastic petri netsj icomparison properties stochastic decision free petri netsj iglobal local monotonicities stochastic petri netsj ioptimization multiclass queueing networks polyhedral nonlinear characterizations achievable performancej achievable region side constraintsj ia characterisation independence competing markov chains applications stochastic petri netsj ia computational algorithm closed queueing networks exponential servers iergodicity throughput bounds petri nets unique consistent firing count vectorj iproperties performance bounds closed free choice synchronized monoclass queueing networksj ia general iterative technique approximate throughput computation stochastique marked graphsj iembedded productform queueing networks improvement performance bounds petri net systemsj icomputational algorithms product form queueing networks igeneralized stochastic petri nets denition net level implicationsj ioperational analysis timed petri nets application computation performance boundsj spn actual role immediate transitions ispnp stochastic petri net packagej iextended stochastic petri nets applications analysisj icyclic scheduling parallel processors overviewj markov chain models rarity exponentiality iperformance bounds queueing networks scheduling policiesj istability queueing networks scheduling policiesj icomplete decomposition stochastic petri nets representing generalized service networksj iperformance analysis using stochastic petri netsj iqueueing networks multiple closed chains theory computational algorithms ia last word l tr ctr jinjun chen yun yang adaptive selection necessary sufficient checkpoints dynamic verification temporal constraints grid workflow systems acm transactions autonomous adaptive systems taas v2 n2 p6es june 2007