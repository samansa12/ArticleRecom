language constructs transformation hard realtime systems practice time critical portions hard realtime systems still implemented lowlevel programming languages manually tuned meet timing requirements without realtime language supports appropriate way specifying timing constraints generic hard realtime systems high precision timing analysis transparent users users ever suffer complex coding analysis particularly systems requiring fast turnaround responsesin paper propose novel language constructs added imperative programming language extended language provides users way specify relative timing constraints arbitrary operations instructionlevel compilation techniques unique transformation proposed language also presented part charts compiler hard realtime systems generates valid instruction sequence target execution model b introduction view realtime systems realtime system consists controlling subsystem controlled entities controlling subsystem set computer systems controlled entities broad range systems mechanical behavior device simple blender complex robot 19 typically controlling subsystem executes control programs receive input environment andor send commands controlled entities appropriately realtime system function correctly control program must logically correct controlling subsystem must execute program without timing faults either failure perform action appropriate time flaw control programs logic yield catastrophic consequences hard realtime systems thus meeting timing constraints extremely important systems based control program scheduled realtime systems divided two categories dynamic static execution order control tasks dynamic system determined onthefly runtime scheduler examines current status system often scheduler part operating system even though dynamic systems flexible suffer scheduling overhead unpredictable risks contrast static system scheduled compile time based analysis program timing con straints resource use predictions 16 static system schedules execution order compile time based predicted behavior controlled entities timing properties controlling subsys tems thus static system guarantees properly scheduled code function without timing failure however despite fact guaranteed timely execution makes static systems attractive hard realtime environment highprecision static systems received little attention due 1 unpredictable machine behavior generalpurpose processors often implement instructions execution time dependent operand values pipeline conflicts memory hierarchy use eg cache misses dynamic ram refresh virtual memory page faults variables degrades accuracy required timing analysis 2 scheduling complexity instructionlevel timing analysis code reorganization npcomplete problems 6 thus static scheduling focused coarsegrain tasks reduce problem size 3 lack programming support programming language supports mechanism express fully general realtime constraints first problem easily solved avoided careful design computer hardware example tms320c40 highperformance dsp completely static timing properties provided interrupts disabled local memory implemented sram 10 even interactions multiple processors made static timing properties example papers purdues adapter parallel execution rapid synchronization provide finegrain communication synchronization precise static timing properties 5 although work needed believe techniques presented 3 form basic foundation appropriate static scheduling algorithm thus second problem partially solved practical solution likely found soon leaves problem providing appropriate programming model language part problem specifying finegrain timing constraints context highlevel programming language seems paradoxical assembly language hand coding resolve finegrain timing constraints answer programs difficult write maintain automated scheduling almost impossible 11 equally futile directly use existing highlevel realtime programming languages ada 2 edison 9 programming languages extended general purpose languages like rteuclid 12 flex 15 mpl 17 tcel 7 provide mechanism specifying timing constraints language construct finer granularity entire task languages also suffer use programming model represents timing constraints relationships task pairs lexicographically adjacent source program adjacency constraint artificial insufficiently expres sive timing relationships arbitrary poten tially parallel operations cannot expressed relationships cannot mapped lexicographically adjacent positions program section 2 paper proposes novel language constructs added imperative programming language extended language provides users way specify relative timing constraints arbitrary actions level individual structions aid reader understanding timing constraints extracted processed section 3 provides brief summary relevant compiler technology section 4 summarizes contributions paper suggests future directions research realtime language motivate design new language constructs consider informally annotated control program fragment shown figure 1 although example remarkably simple embodies timing constraints could easily found real application none existing programming languages capable expressing form would facilitate static timing analysis scheduling value sensor 1 must execute later 1 3 must execute least 1 5 value sensor 2 must execute later 1 1 inputs figure 1 example realtime code segment 21 timing constraint model realtime language propose paper implements graphical model denoted directed graph g consists set nodes gamma set edges theta nodes edges associated instructions realtime constraints respectively graphical model called directed timed graph dtg distinguished conventional directed graphs several aspects importantly edge dtg necessarily indicate precedence dependence relation represents direction temporal relation two control action instruction gamma classified externally viewed instructionevi internally viewed instruc tionivi based effect instruction 1 effect ivi limited internal compu tation evi changes status control environment example variables defined volatile c language 20 commands control robots using rccl 13 evis execution must meet timing constraints specified evis may depend values computed ivis dependence also implies relative timing constraint execution order must preserved directed edge theta associated multiple tributes source object fl sink object fl e relational concept common similar view taken compiler designers code optimization 4 realtime compiler developers improved schedulability 7 operator j offset ffi constraint k defined type relationship represented edge specified j concurrent exclusive6 indeed temporal relations fl fl e edge type expressed time value ffi must happen latest ffi ffl constraint must happen earliest ffi ffl concurrent constraint must happen exactly ffi must happen ffi edge representing direction temporal relation source instruction fl sink instruction fl e follows simple rule fl fl e appear respectively rhs lhs constraint fl fl e arbitrary pair instruc tions moreover method sufficient specify constraints among n instructions using less nn 12 constraints model constraint among multiple instructions specified constraint model even constraints cannot satisfied sequential schedule ie constraints imply parallel execution significant simple ordering precedence constraints represented without introducing additional types precedence constraint form x uses ys result encoded constraint x happens earliest 0 hence timing constraints precedence constraints expressed using syntax 22 realtime languages features single important aspect programming system easily system used create maintain working programs although relative ease programming various languages largely matter religious debate clear familiar language constructs programming tools effective completely new program development style must adopted realtime language look feel like popular conventional language eg c likewise familiar syntax borrowed expressing timing constraints critical timing aspects code directly observable easy modify timing constraint involving two operations able expressed directly without adjust portions code part ability treat constraint independently depends ability combine multiple constraints affect operation although work realtime systems suggests constraints always combined requiring constraints met sometimes necessary 8 combine constraints requiring one constraints met concept oring constraint quite new realtime community suppose event 1 executed either 2 3 shown figure 2 mathematically expressed shows possible range 1 could different constraint based temporal values 2 3 despite usefulness necessity construct oring constraints conspicuously absent realtime programming languages perhaps scheduling made complex supporting types constraint combining time axis time axis figure 2 example oring constraint suggest critical timing constraints expressed finest possible grain level finer grain yields freedom compilers scheduling yields highest probability timing constraints met course freedom scheduling also implies larger search space schedules user need aware additional complexity compiler concept cyclic task program structure unique realtime systems commonly used obvious way obtain effect using constructs subtle methods destroy maintainability thus suggest cyclic structures directly represented lan guage making easy recognize programmer compiler fact language allow multiple arbitrary cyclic tasks specified without concern different length cycles converted single coherent schedule 23 parent language thus far none existing realtime languages provides features mentioned realtime languages easy program based finegrain tasks andor designed express relative constraints among arbitrary control operations thus propose extension imperative language facilitate features even though imperative language extended features develop novel language constructs onto subset c language c used embedded realtime systems conjunction assembly macros time critical portions parent language propose includes expressions using arithmetic relational operators state ment statement time neither aliasing floating point computation supported 24 proposed language constructs order specify constraints top parent language introduce several new constructs timing block temporal expression cyclic block timing block defines code segment manipulated unit purpose constraint specification time expression specifies relative constraints terms timing blocks cyclic block defined code sequence runs indefinitely program ter minates program may contain one cyclic block illustrating constructs consider example control program shown figure 3 program written read data memory locations updated devices write commands memory locations dispatched devices desired times 241 timing block timing block userdefined variable sequence statements could viewed task traditional realtime systems contains either volatile variable evi statements consist least one evi timing block contains evi temporal expressions associated temporal variable ignored implying constraint automatically timing variable identifying timing block appears followed evi body block shown syntax tvar variable tvar user defined name block variable regular variable evi 2 notation statement denotes one statements 2 volatile variables translated one instructions lowlevel languages 1 main 2 f 3 volatile char action1 action2 action3 4 volatile int sense1 sense2 sense3 5 char command1 command2 int abcd 7 8 9 cycle tp15 f 10 read data stored sensors 13 specify timing reads 14 tv1 action based data read 19 else 21 specifying timing action 25 timing constraints loop 27 28 34 tv8 tv6 10 37 cycle tp210 f 38 int c 43 tp2 started tp1 44 45 exit0 figure 3 program new constructs composing timing block example line 12 figure 3 defines temporal variables tv2 tv3 associated variable sensor2 statement b 4 case tv2 nested block tv3 timing block properties regular block lexically scoped variable declarations allowed beginning block also timing blocks nested unless inter leaved interleaving timing blocks disallowed increases complexity destroys structured language feature 242 cyclic block cyclic block special case timing block sense block executed repeatedly program terminated thus compiler treat block differently blocks analysis well scheduling cyclic block identified temporal variable tvar period ffi defined cycle tvarffi f statements g cycle keyword indicating following block enclosed f g cyclic block tvar temporal variable name block ffi specifies timing requirement cyclic block must complete within statements timing block looping overhead must completed within ffi timing constraints associated cyclic block may expressed temporal expressions described later example program figure 3 consists two cyclic blocks tp1 line 9 35 tp2 line 37 42 temporal relation cyclic blocks specified line 44 temporal expression line 44 implies first action tp2 executed later 2 time units last action tp1 243 temporal expression temporal expression classified either temporal assignment temporal relation temporal assignment way defining another temporal variable temporal distance existing temporal vari able temporal relation used express relationship temporal variables syntax tvar name temporal vari able etvar extended temporal variable indicating start time completion time using prefixed dot postfixeddot respectively figure 3 tv1 line 14 indicates completion time tv1 tv3 line 15 indicates start time tv3 also j one temporal relation operator defined previous section ffi offset time unit small clock cycle also temporal relation indicates zero temporal relations specify oring constraint seen syntax temporal signment computation upon temporal variables allowed example temporal assignment implies start time tv3 must happen earlier 14 time units start time tv3 equivalent tv3 7 figure 3 illustrates one unique temporal expression timing constraints involving iterations block appears iterated loop consid ered necessary specify timing constraints instances different iterations introduce array temporal variables resolve problem see line 31 figure 3 distance instances expressed index array example line 31 says loop executed within units temporal expression requires first action 1th iteration started earlier 25 time units last action ith iteration point formally define etar tvar temporal variable fig optional expression denoting ith instance iteration 244 illegal expressions lines 17 20 figure 3 defines temporal variables tv4 tv5 lines 22 23 shows corresponding temporal expressions temporal assignment temporal relation says action clause performed later 14 time units tv2 completed thus timing constraint taken account b holds however temporal expression pair instructions one clause else clause illegal impossible run branches execution another illegal expression statement whose pair instructions necessarily include statement unpredictable timing property statements instructions whose timings predictable break statement loop unpredictable number iterations unpredictable instructions involving interrupts example execution tv6 line 26 32 repeated long holds hence range b non deterministic temporal expression line 34 illegal expression temporal expression specifying timely conflict actions also classified illegal expression consider two expressions line 14 15 modify line 14 solution implying code cannot valid schedule thus two temporal expressions illegal illegal expressions found thorough semantic analysis 3 compilation techniques section briefly explain compilation techniques unique process language transformation particularly compiler organization data structure intermediate representation cyclic block scheduling focused either much different conventional compilation techniques 1 4 novel concept compilation 31 compiler organization see figure 4 charts consists four software modules syntax analysis semantic analysis code scheduling code generation module module designed implemented independent software individually replaced enhance ment example scheduling algorithm developed 3 replaced better one without affecting modules except minimal modification interface implementation modules written c language support pccts purdue compiler construction tool set analysis code scheduling analysis code generation intermediate representation frontend phase backend phase program system data target code figure 4 compiler architecture proposed language syntax analysis module performs building intermediate representation source program intermediate representation charts unique described section 32 timing constraint specification cyclic blocks function semantic analysis module verify program context language semantics including followings ffl timing block contain least one evi ffl temporal expression semantically legal ffl compliant parent language objective code scheduling module reorganize instruction sequence meet timing constraints well logical correctness module code generation module entirely system dependent timing properties hardware components instruction sets either hardwired compiler read system file shown figure 4 input scheduling module tuples whose timing characteristic close object code execution time tuples preserved code generation time 32 intermediate representation addition traditional role lexical analyzer parser syntax analysis module extracts constraints information timing blocks program builds intermediate representation depicted figure 5 data structure intermediate representation consists two tables three trees tables consist symbol table symtab table temporal variables tvartab tree structures include abstract syntax tree ast cycle syntax tree cst temporal syntax tree tst childsibling trees 18 although ast symtab sufficient data structure conventional compilers compiler realtime systems propose needs information organized tvartab store information timing blocks block type entryexit points cst manipulate blocks executed periodically tst represent temporal expressions particular manipulation cst conjunction temporal expressions specifying timing constraints among cyclic blocks quite complex new concept compiler community multiple cyclic blocks need executed indefinitely considering period timing constraints among cyclic blocks 33 cyclic block scheduling scheduling cyclic blocks different conventional compilation techniques conven cyclic syntax treecst temporal abstract symbol tablesymtab temporal syntax treetst figure 5 data structure ir form charts tional compilation notion interleaving loops cyclic blocks need integrated single cyclic block executed without explicit dynamic scheduler dispatcher sec tion develop novel scheme integrate given cyclic blocks associated different periods single cyclic block integrated cyclic block executed indefinitely semiindefinitely program terminates self expansion b cyclecarried c intracycle expansion expansion intercycle expansion242424242424242135554 figure cyclic block expansion timing constraints cyclic blocks associated periods execution first temporal variable block started every p rearrangement cyclic blocks single cyclic block psi processed follow using fundamental property scheduling periodic tasks 14 1 compute least common multiplier periods 2 8i replicate instructions pp times 3 8i expand timing constraints notice expansion simple addition temporal expressions model dependence subtype simple constraint define fl k instruction x k th instance say original cyclic block associated period represents instruction x constraint expansion performed based following analysis self expansion replicated instructions add timing constraints maintain execution order replicated instructions ex pansion periodic constraint enforced first control action namely 8i 8j temporal added x first control action otherwise 3 graphical representation self expansion depicted figure 6 instruction first control action cyclecarried expansion suppose fl k1 dependent say 0 case dependence enforced replica adding temporal expressions applied every cycliccarried dependences shown b figure 6 figure fl k1 uses result fl k thus temporal expression relation represented intracycle expansion temporal expressions specifying constraints instructions block replicated necessary added every replica c figure 6 temporal replicated intercycle expansion temporal expressions specifying constraints instructions beyond one block within block replicated necessary let k starting time fl k k range k expressed thus intercycle temporal expression yields temporal expressions fl k consider figure 6 assume 3 assume p implies first control action repeated every p time units instructions correctly executed long expanded dependences violated expressions added 4 psi scheduled instruction level finegrain scheduling algorithm one approaches find valid schedule using genetic search based algorithm given 3 building staticallyscheduled realtime system difficult first appears appropriate realtime language compiler technology making significant strides towards development compiler technology believe key building language providing general model programmer compiler easily understand manipulate paper proposed language basic features language include ffl basic syntax conventional language paper c compatibility lan guages programming idioms ffl ability place relative timing constraints arbitrary pairs finegrain operations cyclic blocks ffl ability specify arbitrary types relative timing constraints eg con current exclusive combined either anding oring features greatly complicate com pilers job enlarging schedule search space adding complexity evaluation constraints however made good progress toward solving problems nothing language lies far beyond ability new compiler technology developed implemented current future work centers implementation complete compiler language charts compiler hard realtime systems primary focuses complete compiler control structure analysis code scheduling based highprecision timing analysis code generation serial parallel execution models acknowledgement work supported office naval research onr grant number n0001491j4013 r compiler principles ada static scheduling hard realtime code instructionlevel timing accuracy refinedlanguage approach compiling parallel supercomputers implementation purdues adapter parallel execution rapid synchronization computers intractability scheduling tasks andor precedence constraints multiprocessor language texas instruments inc unimate industrial robot programming manual implementation rccl note preemptive scheduling periodic realtime tasks expressing maintaining timing constraints flex software architecture hard realtime applications cyclic vs language support maruti realtime sys tem reference manual hard realtime systems tutorial tr compilers principles techniques tools realtime euclid language reliable realtime systems refinedlanguage approach compiling parallel supercomputers second generation tms20 users guide tutorial hard realtime systems reference manual software architecture hard realtime applications computers intractability static scheduling hard realtime code instructionlevel timing accuracy ctr mohamed f younis thomas j marlowe alexander stoyen grace tsai statically safe speculative execution realtime systems ieee transactions software engineering v25 n5 p701721 september 1999