exact methodology scheduling 3d design space abstract paper describes exact solution methodology implemented rensselaers voyager design space exploration system solving scheduling problem 3dimensional 3d design space usual 2d design space trades area schedule length plus third dimension representing clock length unlike design space exploration methodologies rely bounds estimates methodology guaranteed find globally optimal solution 3d scheduling problem furthermore methodology efficiently prunes search space eliminating provably inferior design points careful selection candidate clock lengths tight bounds number functional units type schedule length b introduction highlevel synthesis process solving scheduling problem viewed process exploring 2dimensional 2d design space axes representing time schedule length area ideally total area often simplified functional unit area reality however 2d design space small part much larger design space one larger design space presented de micheli 15 illustrated figure 1 design space highlevel synthesis viewed 3 dimensional 3d space axes representing schedule length area clock cycle length well typical scheduling algorithm explores one 2d slice larger 3d design space 2d slice corresponding fixed clock length chosen priori designer clock length depends many factors including delays functional units storage elements glue logic wiring well clock skew values unknown scheduling therefore estimated stage design process given lack detailed information designer forced make ad hoc frequently arbitrary guess clock length unfortunately eliminating entire dimension search space thus even optimal scheduler explore one 2d slice design space produce schedule optimal one clock length better schedule may exist different clock length better schedule found motivate need explore larger design space consider problem scheduling wellknown elliptic wave filter 23 p206 ewf benchmark variety material based upon work supported national science foundation grant mip9211323 dept electrical computer systems engineering z department computer science schedule length area length figure 1 larger 3dimensional 3d design space clock csteps ns csteps ns csteps ns 48 25 1200 26 1248 37 1776 table 1 resourceconstrained scheduling results ewf resource constraints find fastest possible schedule assume vdp100 module library 16 24 used multiplication delay 163ns addition delay 48ns forced choose clock length scheduling algorithm use designer would probably choose either clock length 48ns 163ns execution delay either addition multiplication given clock lengths optimal scheduler supports multicycle operations ilpbased scheduler 5 voyager design space exploration system would produce results shown lines labeled 48 163 table 1 consider lines table 1 represent perhaps less obvious choices clock length resource constraint fastest design corresponds clock length 24ns design would found scheduling methodology limited ad hoc guesses 1 thus important explore number candidate clock lengths find globally optimal solution paper presents exact solution methodology implemented voyager design space exploration system find globally optimal solution scheduling problem 3d design space methodology makes problem tractable careful pruning provably inferior points design space 2 provably efficient exact algorithms solving individual problems course small clock length also results larger number control steps thus larger complex control unit however note clock length 55ns comparable ad hoc guesses results schedule almost fast one corresponding 24ns clock faster corresponding ad hoc guesses 8th int symp system synthesis cannes france september 1995 timeconstrained 3d scheduling tcs3d read dfg module library time constraint compute minimal set candidate clock lengths clock length perform timeconstrained scheduling tcs present results user evaluation timeconstrained scheduling tcs compute tight lower bounds number functional units type use lower bounds resource constraints solve trcs decision problem feasible schedule found increase resource constraints solve trcs decision problem figure 2 voyagers timeconstrained 3d scheduling tcs3d methodology paper presents two methodologies solve clock determination scheduling problem guaranteed find globally optimal design far efficient exhaustive search design space one methodology solves timeconstrained 3d scheduling problem figure 2 solves resourceconstrained 3d scheduling rcs3d problem figure 3 methodologies implemented rens selaers voyager design space exploration system core methodology roughly methodology computes set candidate clock lengths candidate clock length optimally solves scheduling problem however straightforward implementation core methodology takes much long solve even small benchmarks thus important 1 solve scheduling problem small provably minimal set candidate clock lengths 2 solve scheduling problems efficiently possible optimal solution found reasonable amount time since search spaces tcs rcs problems larger trcs problem methodologies solve tcs rcs problems generating missing constraints effect converting easiertosolve trcs problem tcs problem methodology computes constraints number functional units type rcs problem computes time constraint length schedule since constraints also found efficiently entire methodology efficient 21 timeconstrained 3d scheduling tcs3d voyagers methodology solving timeconstrained 3d scheduling problem outlined figure 2 methodology begins reading data flow graph dfg execution delays relevant functional units module library overall time constraint minimal set candidate clock lengths determined see section 3 based execution delays relevant functional units module library ewf module library described earlier 10 candidate clock lengths would generated clock lengths resourceconstrained 3d scheduling rcs3d read dfg module library resource constraints compute minimal set candidate clock lengths clock length perform resourceconstrained scheduling rcs present results user evaluation resourceconstrained scheduling rcs compute tight lower bound schedule length use lower bound time constraint solve trcs decision problem feasible schedule found increase time constraint solve trcs decision problem figure 3 voyagers resourceconstrained 3d scheduling rcs timeconstrained scheduling performed results presented user evaluation solve tcs problem efficiently voyagers ilp formulation trcs problem described section 4 used follows first tight lower bounds number functional units type computed using method sketched section 5 bounds used resource constraints trcs problem solved decision problem trcs produces feasible schedule schedule guaranteed optimal resource constraints increased process repeated tcs3d solution methodology relatively efficient following reasons first functional unit lower bounds computed polynomial time solving two linear programs lps second trcs solved decision problem rather optimization problem using formulation wellstructured requires branches branchandbound search 5 finally functional unit lower bounds highly accurate 4 almost every case lead immediately feasible lution practice lower bounds seldom increased solve trcs thus tcs3d problem solved quickly even mediumsized benchmarks see section 7 efficiency methodology increased goal find schedule fewest number functional units case tcs problem solved trcs problem fu lower bounds compared number fus required best previous schedule new bounds smaller trcs problem solved explained new bounds larger need solve trcs problem since would require functional units best solution found far 22 resourceconstrained 3d scheduling rcs3d voyagers methodology solving resourceconstrained 3d scheduling problem similar see figure 3 methodology reads resource constraint generates minimal set candidate clocks using clock length determination algorithm described section 3 clock lengths resourceconstrained scheduling performed solve rcs problem efficiently voyagers ilp formulation trcs problem section 4 used fol lows first tight lower bound overall length schedule computed section 6 bound used time constraint trcs problem solved decision problem trcs produces feasible schedule schedule guaranteed optimal time constraint increased process repeated rcs problem solved quickly even mediumsized benchmarks see section 7 efficiency methodology increased goal find shortest schedule case rcs problem solved trcs problem schedule length lower bound compared length best previous schedule new bound smaller trcs problem solved explained new bound larger need solve trcs problem since would result longer schedule best solution found far 23 advantages solution methodology summary voyagers exact solution methodology twofold advantage previous methodologies 1 guaranteed optimal results 2 solution techniques based efficient pruning search space unlike design space exploration methodologies rely bounds estimates make problem tractable methodology generates minimal set candidate clock lengths could possibly correspond optimal design optimally solves either tcs rcs problem clock lengths thus guaranteed find globally optimal result furthermore although methodology may appear first glance perform exhaustive scheduling reality quite efficient three reasons first minimal set candidate clock lengths generated scheduling performed values second instead directly solving tcs rcs problem missing constraints generated converting problem trcs problem smaller search space moreover constraints tight also generated efficiently finally trcs formulation used carefully designed wellstructured 5 therefore usually finds optimal solution branches 3 determining candidate clock lengths one important parameters needed scheduling algorithm length system clock however determining clock length requires detailed analysis clock skew wire delays glue logic de lays setup propagation delays storage elements etc 1 quantities largely unknown highlevel syn thesis fortunately although detailed analysis necessary later design process needed highlevel synthesis macroscopic structure circuit determined one appropriate model clock length highlevel synthesis presented chaiyakul gajski 3 clock length assumed 3 components datapath delay control delay wire delay three control delays wire delays cannot meaningfully estimated scheduling fortunately delays play major role scheduling problem resource utilization datapath primarily affected delays datapath units thus scheduling use datapath delays determine clock length ignore control wire delays realizing actual clock length determined later longer due delays furthermore operation execution delays computed assuming busbased architecture pointtopoint interconnection topology meaning exists one bus two functional unit andor storage unit ports setup time propagation delay registers let delay tristate driver delay functional unit type k denoted delay k execution delay k registerto register transfer executing operation type k given throughout remainder section set used denote set k found given dfg discussing voyagers methodology determining candidate clock lengths necessary measure quality one clock length respect clock lengths particular operation one measure commonly used operation slack defined follows definition 2 given clock length c slack k operation type k given voyagers methodology determines minimal set candidate clock lengths range c c range bounded c minimum clock length possible implementing designs controller one goals voyagers 3d design space exploration methodology find minimal set noninferior clock lengths c range need examined order find globally optimal solution unfortunately clock determination problem usually ignored favor ad hoc decisions estimates demonstrated later ignore much design space lead inferior design example several previous clock estimation schemes 19 11 use delay slowest functional unit estimated clock length realistic approach used 16 contiguous range integer candidate clock lengths heuristically evaluated attempt provide guidance best clock length choose however approaches choose clock length independent scheduling thus best estimates since never possible guarantee better schedule different clock length exist therefore may seem first globally optimal solution 3d scheduling problem cannot found without optimally solving scheduling problem every possible clock length prohibitively expensive exhaustive search fortunately exhaustive search necessary 7 corazao et al combined clock length determination problem operation template matching made suggestions reduce number candidate clock lengths however number candidate clock lengths reduced even shown theorem 1 similar observation made chen et al 6 presented without proof following theorem shows certain clock lengths range c c must explored find globally optimal clock length c chaining consid ered clock lengths assumed integers theorem 1 c integrally divides least one register transfer delays formally k c least one proof consider clock period c k c 0 8 k optimal basic schedule generated using c clock length show c optimal found another clock period c 0 leads faster schedule number functional units csteps original schedule ceg new clock period c 0 found c ffl using definition k c definition 2 value c 0 derived substituted c 0 furthermore since c 0 c also follows dd k c 0 e dd k ce two relations imply dd k c register transfer takes number control steps new clock c 0 original clock c hence original schedule still valid new clock c 0 however c 0 less c result faster execution time number csteps functional units remain corollary 1 using integer clock lengths noninteger clock c generated application theorem 1 replaced c least one k 2 k summary theorem 1 corollary 1 give method determining small set candidate clock lengths ck provably contains optimum clock length c set computed denotes ceilings integral divisors delays k fall range c c practice size ck less 10 integer range c c similar theorems developed scheduler supports chaining scheduler supports operation templates however theorems presented due lack space optimally solving scheduling problem highlevel synthesis basic scheduling problem problem determining control step operation execute careful formal analysis scheduling problem 5 able develop wellstructured integer linear programming ilp formulations scheduling problems particular trcs problem voyagers formulation trcs problem summarized follows denotes set op erations denotes schedule interval asap operation binary variables x 2 used indicate whether operation scheduled cstep feasible schedule values variables must satisfy three types constraints 1 assignment constraints ensure operation scheduled onto exactly one cstep 2 precedence constraints p ensure operation always scheduled predecessors 3 resource constraints r ensure schedule use available number functional units type trcs problem problem determining whether feasible schedule exists satisfies constraints written succinctly 0 vector zeros r coefficient matrices due assignment constraints precedence constraints resource constraints respectively details voyagers scheduling ilp formulations found 5 5 bounding number functional units discussed earlier section 2 important generate tight lower bounds number functional units type bounds used resource constraints convert tcs problem easierto solve trcs problem furthermore bounds must computed efficiently preferably polynomialtime algorithm functional unit lowerbounding problem viewed relaxation functional unit minimization problem unfortunately many possible relaxations problem therefore many possible functional unit lowerbounding problems ideally would like find tightest bounds possible relaxations efficient solution methodology one approach forming fu lowerbounding problem fu minimization problem relax precedence constraints operations work 4 aware two methodologies compute fu lower bounds manner relaxations considered jain 12 similar relaxation 13 tighter relaxations 22 18 10 20 based method originally proposed fernandez bussell 8 theorem 1 work described fully 4 takes different approach start formal description fu minimization problem finds minimum value k number functional units type k 2 k relax problem form generic description entire class fu lowerbounding problems problems special cases generic class finally select one lowerbounding problem produces tightest possible bound solve problem thus approach formalizes entire class fu lowerbounding problems guaranteed produce tightest possible bounds practice verified bounds produced exact cases furthermore solution functional unit lowerbounding problem found solving two lps done polynomial time thus developed functional unit lowerbounding methodology 4 guaranteed produce tightest bounds possible precedence relaxations polynomial time even though original formulation ilp formulation 6 bounding length schedule previous section briefly described voyagers method generate tight lower bounds number functional units search space tcs problem could reduced solve problem efficiently described section 2 section presents similar method generate tight lower bound schedule length rcs problem solved efficiently one early formulation schedule length lowerbounding problem presence resource constraints presented 12 however bounds produced approach loose recent algorithms produce tighter bounds 21 20 based jacksons earliest deadline rule edrule 2 22 10 based theorem originally given fernandez bussell 8 theorem 2 furthermore algorithms applied iteratively hu et al apply fernandez theorem 2 9 langevin applies edrule 14 producing even tighter bounds although cost increased algorithmic complexity investigations problem shown relax ilp formulation rcs problem form generic description entire class schedule length lowerbounding problems much manner fu lowerbounding functional unit lower bounding select one lowerbounding problem produces tightest possible bound problems special cases generic class solve prob lem thus approach formalizes entire class schedule length lowerbounding problems guaranteed produce tightest bound possible precedence relaxations polynomial time 7 experimental results demonstrate accuracy performance voy agers 3d scheduling methodology conducted series experiments using wellknown elliptic wave filter ewf 23 p206 discrete cosine transform 17 dct benchmarks used vdp100 module library 16 24 giving datapath delay 48ns addition 56ns subtraction 163ns multiplication benchmark performed timeconstrained 3d scheduling tcs3d resourceconstrained 3d scheduling rcs3d using methodologies presented section 2 71 elliptic wave filter ewf tcs3d results ewf presented table 2 show two time constraints clock lengths candidate set lead feasible schedule clock lengths lead infeasible schedules regardless number functional units available time constraint 1394ns three clock lengths 55ns 48ns 24ns led minimum number functional units schedule 55ns clock dd mult 3e requires fewest control steps thus potentially time clock csteps ns mult add time constraint 1394ns 48 29 1392 2 2 time constraint 1035ns tightest 43 1032 4 table 2 ewf tcs3d results ns cs ns cs ns cs ns 48 23 1104 lb 1632 26 1248 25 1200 28 40 1120 lb 1596 44 1232 42 1176 43 1032 66 1584 48 1152 46 1104 table 3 ewf rcs3d results smaller controller would preferable note 48ns clock one obvious ad hoc guesses add may require additional multiplier find fastest possible design critical path length used derive tightest possible time constraint 1035ns time constraint one clock length 24ns led feasible schedule thus guaranteed fastest design rcs3d results ewf shown table 3 schedule lengths interest shown boldface lowerboundedby rcs3d methodology shown gray along lowerbounded schedule length described section 22 trcs problem solved clock lengths since would result schedule longer shortest schedule found previous clock lengths 55ns 24ns clock lengths correspond fastest schedules interesting note neither clock lengths obvious ad hoc guess 55 dd mult 3e 24 dd mult 7e dd add 2e means fastest schedule might missed using conventional methodologies furthermore although clock length 24ns would correspond larger number control steps perhaps larger controller small clock length result overall fastest schedule small clock granularity tends reduce operation slack 72 discrete cosine transform dct tcs3d results dct presented table 4 first set results time constraint 500ns corresponding design run 2mhz eight clock lengths produced feasible schedules one 24ns led minimum number functional units find fastest possible design critical path length used derive tightest possible time constraint 434ns one clock length 24ns led feasible schedule thus guaranteed fastest design rcs3d results dct presented table 5 56ns clock length sub corresponds fastest schedule time clock csteps ns mult add sub time constraint 500ns 2mhz 28 17 476 11 7 4 15 5 19 26 494 11 5 4 15 7 434ns tightest table 4 dct tcs3d results clock csteps ns 48 lb 816 28 28 784 19 lb 798 table 5 dct rcs3d results 73 methodology run times voyagers design space exploration methodologies consists three main tasks computing minimal set candidate clock lengths computing tight bounds number functional units schedule length solving trcs problem minimal set candidate clock lengths computed quickly bounds computed solving two linear programs polynomial time discussed sections 5 6 finally trcs formulation used voyager carefully constructed well structured meaning convergeson optimal solution faster arbitrary formulation motivate need solving tcs rcs problem first computing bounds solving resulting trcs problem consider result solving tcs problem directly time constraint 1394ns 24ns clock ewf benchmark even wellstructured formulation voyagers solving problem directly took hour cpu time using lindo sun sparcstation 2 contrast spent 151 sec compute lower boundson number functional units 775 sec solve trcs problem solving problem two orders magnitude less time larger benchmark dct time constraint 500ns 24ns clock spent 828 sec compute lower bounds number functional units 262 sec solve trcs problem directly solving tcs problem case took hour general best designs example generated within seconds however small clock lengths eg 19ns ilp trcs problem becomes quite large cases would taken hours find exact solution fortunately even cases bounds produced fairly quickly could often obviate need solve trcs problem clock lengths described sections 21 22 summary paper defined new problem 3d scheduling problem presented exact solution methodology solve problem without resorting timeconsuming exhaustive search solution methodology exact guaranteed find optimal clock length schedule furthermore efficient prunes inferior points design space careful selection candidate clock lengths important design parameter often determined guesswork estimates tight bounds number functional units length schedule r simple algorithms multiprocessor scheduling meet dead lines timing models high level synthesis computing lower bounds functional units scheduling analyzing exploiting structure constraints ilp approach scheduling problem optimal module set clock cycle selection dsp synthesis instruction set mapping performance optimization bounds number processors time multiprocessor optimal schedule improved lower bounds scheduling optimization problem lower bounds iteration time number resources functional pipelined data flow graphs module selection pipeline synthesis predicting systemlevel area delay pipelined nonpipelined designs recursive technique computing lowerbound performance schedules synthesis optimization digital circuits system clock estimation based clock slack minimization salsa new approach scheduling timing constraints comprehensive lower bound estimation behavioral descriptions synthesis optimal clocking schemes estimating implementation bounds real time dsp application specific circuits estimating architectural resources performance highlevel synthesis applications algorithmic register transfer level synthesis system ar chitects workbench vlsi technologies inc tr system clock estimation based clock slack minimization timing models highlevel synthesis comprehensive lower bound estimation behavioral descriptions analyzing exploiting structure constraints ilp approach scheduling problem computing lower bounds functional units scheduling instruction set mapping performance optimization module selection pipelined synthesis synthesis optimal clocking schemes synthesis optimization digital circuits algorithmic registertransfer level synthesis ctr h juan bakshi gajski clock optimization highperformance pipelined design proceedings conference european design automation p330335 september 1996 geneva switzerland narasimhan j ramanujam improving computational performance ilpbased problems proceedings 1998 ieeeacm international conference computeraided design p593596 november 0812 1998 san jose california united states anne mignotte olivier peyran reducing complexity ilp formulations synthesis proceedings 10th international symposium system synthesis p5864 september 1719 1997 antwerp belgium anand raghunathan niraj k jha iterative improvement algorithm low power data path synthesis proceedings 1995 ieeeacm international conference computeraided design p597602 november 0509 1995 san jose california united states ranga vemuri sriram govindarajan iyad ouaiss meenakshi kaul vinoo srinivasan shankar radhakrishnan sujatha sundaraman satish ganesan awartika pandey preetham lakshmikanthan automated design synthesis partitioning adaptive reconfigurable hardware hardware implementation intelligent systems physicaverlag gmbh heidelberg germany 2001