online difference maximization paper examine problems motivated online financial problems stochastic games particular consider sequence entirely arbitrary distinct values arriving random order must devise strategies selecting low values followed high values way maximize expected gain rank low values high valuesfirst consider scenario one low value one high value may selected give optimal online algorithm scenario analyze show surprisingly expected gain no1 differs best possible offline gain constant additive term fact fairly smallat 15in second scenario allow multiple nonoverlapping lowhigh selections total gain algorithm sum individual pair gains also give optimal online algorithm problem expected gain n28thetanlog n analysis shows optimal expected offline gain n26theta1 performance online algorithm within factor 34 best offline strategy b introduction paper examine problem accepting values online source selecting values way maximize difference ranks selected values input values arbitrary distinct real numbers thus cannot determine certainty actual ranks input values see since care ranks equivalent way defining input sequence n integers x denotes rank ith input item among first items ranks uniquely define ordering n inputs specified sequence ranks r ranks form permutation set ng refer r ranks final ranks since represent rank item among final set n inputs assume inputs come probabilistic source permutations n final ranks equally likely original motivation problem came considering online financial problems 2 4 7 8 9 maximizing difference selected items naturally corresponds maximizing difference buying selling prices investment use generic terminology order generalize setting example make low selection rather pick buying price many problems examined paper easily understood using notions invest ing paper first step applying online algorithmic techniques realistic online investment problems original motivation comes financial problems current input model little realistic financial markets selected mathe received editors july 29 1996 accepted publication revised form march 5 1998 published electronically date department computer science yale university new ct 06520 kaomingyangcsyaleedu supported part nsf grant ccr9531028 z department computer science university north texas denton srtcsuntedu supported part nsf grant ccr9409945 kao r tate matical cleanness relation fundamental problems stochastic games main difference model realistic financial problems usual stock trading optimizating rankrelated quantities always correlated optimizing profits dollar amount however strong similarities well exotic financial derivatives based quantities similar ranks 20 current formulation closely related important mathematical problem known secretary problem 11 6 become standard textbook example 3 5 19 basis many interesting extensions includ ing 1 14 15 17 18 secretary problem comes following scenario set candidates single secretarial position presented random order interviewer sees candidates one time must make decision hire hire immediately upon seeing candidate candidate passed interviewer may go back hire candidate general goal maximize either probability selecting top candidate expected rank selected candidate problem also stated slightly different story princess selecting suitor 3 p 110 made relationship current problem secretary problem x2 reading secretary problem refer reader survey freeman 10 mentioned assume input comes random source permutations final ranks equally likely thus rank x uniformly distributed set f1 ranks independent one another fact closely parallels popular algorithm generating random permutation 13 p 139 natural question ask knowing relative rank x current input expected final rank item ie er jx due uniform nature input source final rank ith item simply scales number items left input sequence er jx simple proof given appendix since input ranks x independent uniformly distributed little inferred future inputs consider games player watches stream inputs select items seen however item passed gone good may selected later interested strategies two games ffl single pair selection game player make two selections first low selection second high selection goal player maximize difference final ranks two selections player picks low selection upon seeing input x time step picks high selection input x h time step h profit given player end game difference final ranks items r ffl multiple pair selection game player makes multiple choices lowhigh pairs end game difference final ranks selected pair items taken differences pairs added produce players final profit strategies games share common difficulty player waits long make low selection risks enough choices good high selection however making low selection early may result item selected truly low items seen player second game afford less selective one chosen pair give large difference may still many pairs good enough make pairs small difference online difference maximization 3 present optimal solutions games first game player makes single low selection single high selection strategy expected profit derivation strategy clear strategy optimal even full knowledge final ranks input items best expected profit game less n standard terms online performance measurement 12 16 competitive ratio 1 strategy one strength online strategy rather intriguing second game multiple lowhigh pairs selected provide optimal strategy expected profit 1 log n problem optimal offline strategy expected profit approximately 1 competitive ratio strategy 4 3 2 single lowhigh selection section considers scenario player may pick single item low selection single later item high selection low selection made time step high selection made time step h expected profit er players goal use strategy picking h order maximize expected profit mentioned previous section problem closely related secretary problem great deal work done secretary problem variations problem taken fundamental role study games stochastic opponent work extends secretary problem gives complete solutions two natural variants previously appeared literature much insight gained looking optimal solution secretary problem first sketch solution using terminology problem high selection maximize expected rank single high selection define optimal strategy recursively using following two functions hn limit player selects current item rn expected final rank high selection optimal strategy followed starting ith time step since permutations final ranks equally likely ith input item rank x among first data items expected final rank n1 optimal strategy secretary problem select ith input item expected final rank better could obtained passing item using optimal strategy step words select item time step n made selection nth step must select last item whose rank uniformly distributed range integers 1 n expected final rank case rn 2 competitive ratio usually refers worstcase ratio online offline cost however case inputs entirely probabilistic competitive ratio refers expected online expected offline cost worstcase measure doesnt even make sense 4 kao r tate force selection last time step define hn furthermore given definition hn optimal strategy step depends rank current item uniformly distributed range optimal strategy time i1 allows us recursively define rn follows 2 full recursive specification optimal strategy performance optimal strategy performance optimal strategy taken beginning rn 1 value computed recursive equations proved chow et al tend n furthermore performance approaches limit n performance greater single pair selection low selection made want maximize expected final rank high selection made low selection step optimally make high selection following strategy secretary problem results expected high selection rank rn 1 make low selection optimally extending recursive definitions given two new functions ln limit player selects current item pn expected highlow difference optimal strategy making low high selections followed starting step thus choose ith input low selection expected profit rn select item expected profit less expected profit skip item leads definition ln using ln derive following profit function derivation clear optimal strategy implemented using recursive formulas compute ln values expected profit algorithm given pn 1 bounded following theorem theorem 21 online algorithm single lowhigh selection optimal expected profit proof suffices prove certain inferior algorithm expected profit o1 inferior algorithm follows use solution secretary problem online difference maximization 5 select first bn2c input items item minimum expected final rank similarly pick item maximum expected rank second dn2e inputs simplicity initially assume n even see comments end proof odd n let time step low selection made h time step high selection made using bounds chow et al 6 bound expected profit inferior algorithm chow et al 6 show c 387 expected profit inferior algorithm least n gamma 1448 odd n derivation almost identical change least significant term specifically expected profit inferior algorithm odd n n3 least n gamma 1448 3 multiple lowhigh selection section considers scenario player selects low item followed high item may repeat process often desired player makes k low high selections time steps respectively require expected profit resulting selections 31 offline analysis let interval j refer time period instant input item j arriving instant input item arriving particular sequence low high selections call interval j active index amortize total profit particular algorithm b defining amortized profit ab j interval j ae r note fixed sequence lowhigh selections sum amortized profits exactly total profit ie offline algorithm maximize total profit need maximize amortized profit done particular sequence r making interval active r j1 r j translating back original problem making low high selections equivalent identifying maximallength increasing intervals selecting beginning ending points intervals low high selections respectively observations analysis give following lemma 6 kao r tate lemma 31 optimal offline algorithm described expected profit6 proof analysis performed examining expected amortized profits individual intervals particular interval j since analysis independent interval number j summing amortized profit intervals gives expected profit stated lemma 32 online analysis online algorithm multiple pair selection two possible states free holding free state choose current item low selection x furthermore select item move free state holding state hand holding state current item x i1 choose item high selection move free state name algorithm op stand opportunistic since algorithm makes low selection whenever probability greater 1 2 next input item greater one later see name op could well stand optimal since algorithm indeed optimal following lemma gives expected profit algorithm proof lemma use following equality lemma 32 expected profit online algorithm n even n odd cleaner forms epop proof let r random variable final rank ith input item let aop amortized cost interval defined x31 since aop nonzero interval active therefore conditions interval active x interval certainly active algorithm holding state prior step would seeing input x similarly x i1the algorithm must free state interval interval active finally x 2 state remains interval gamma 1 furthermore since must odd case possible cannot thus x unambiguously indicates whether interval active summary determining whether interval active requires looking x occasionally x igamma1 since expected amortized profit step depends whether odd even break analysis two cases case 1 even note p robx 2 x cannot exactly i1 means probability 1 interval active furthermore r i1 independent whether interval active ijinterval case 2 odd since interval 1 cannot active assume 3 need consider case x 2 robinterval active computing expected amortized cost interval slightly complex case 1 ijinterval active 8 kao r tate combining cases ijinterval active delta p robinterval active first sum accounts odd terms original sum second sum accounts even terms n even sum becomes agrees claim lemma n odd sum simplified agrees claim lemma simplified forms follow fact odd n 3 bound 1 combining result x31 see online algorithm expected profit 34 could obtained full knowledge future terms competitive analysis algorithm competitive ratio 43 means knowing future terribly harmful problem 33 optimality online algorithm section proves algorithm op optimal denote permutations small greek letter subscript giving size permutation words permutation set may denoted ae oe permutation items describes fully first inputs problem given permutation also compute permutation described first use notation oe j igamma1 denote restriction restriction domain permutation unless oe restriction form valid permutation upon seeing ith input algorithm may make one following moves may make input low selection may make input high selection may simply ignore input wait next input therefore algorithm entirely described function maps permutations representing inputs arbitrary length set moves denote move function algorithm b mb permutation oe maps mb oe element set flow high waitg notice move functions give valid algorithms example possible define move function makes two low selections row certain inputs even though allowed problem define generic holding state algorithm algorithm holding state time made low selection yet made corresponding high selection algorithm b define set lb set permutations items result algorithm holding state processing inputs explicitly define sets using move function lb sets need compute expected amortized profit interval since jlb ij ae use notation observations prove optimality algorithm op theorem 33 algorithm op optimal algorithm multiple pair selection problem proof since move functions define specific algorithms work permu tations fix ordering permutations order compare strategies order permutations first size lexicographic ordering actual permutations comparing two different algorithms b c start enumerating permutations order count many permutations cause move b c stopping first permutation oe mb oe ie first permutation algorithms make different moves call kao r tate number permutations produce identical moves comparison process length agreement b c prove optimality algorithm contradiction assume optimal optimal algorithms let b algorithm longest possible length agreement algorithm op let oe k first permutation mb oe k 6 mop oe k since b different op point least one following cases must hold oe k j 2 mb oe k 6 low ie algorithm b holding state gets low rank input make low selection 2 mb oe k 6 wait ie algorithm b holding state gets high rank input makes low selection anyway c oe k j 2 mb oe k 6 high ie algorithm b holding state gets high rank input doesnt make high selection 2 mb oe k 6 wait ie algorithm b holding state gets low rank input makes high selection anyway case show transform algorithm b new algorithm c c performs least well b length agreement c op longer b op provides contradiction need case algorithm cs move function identical bs except following values wait ae words algorithm c algorithm b except correct bs error made input low selection changes moves input k lb k 1 easily verified new sets lc corresponding holding state identical sets lb 6 k difference k insertion oe k ie lc g let pb pc profits b c respectively since amortized costs differ interval k k jlc kj ae k 2lc k ae k ka ae k 2lb k ae k ka online difference maximization 11 one conditions case oe k finish derivation noting 0 therefore expected profit algorithm c greater b case b case select move function algorithm c causes one change sets holding states algorithm c make input k low selection particular sets identical algorithm b one exception lc g analysis similar case shows 0 case c case select move function algorithm c lc resulting algorithm c selecting input k high selection giving expected profit gain 0 case case select move function algorithm c lc resulting algorithm c taking input k high selection giving expected profit gain 0 case transformed algorithm b new algorithm c performs least well hence must optimal longer length agreement algorithm op b directly contradicts selection b optimal algorithm longest length agreement op contradiction finishes proof algorithm op optimal 4 conclusion paper examined natural online problem related financial games classic secretary problem select low high values randomly ordered set values presented online fashion goal maximizing difference final ranks lowhigh pairs considered two variations problem first allowed us choose single low value followed single high value sequence n values second allowed selection arbitrarily many lowhigh pairs presented provably optimal algorithms variants gave tight analyses performance algorithms analyzed well online performance compares optimal offline performance paper opens many problems two particularly interesting directions consider realistic input sources maximize quantities difference rank appendix proof expected final rank appendix section prove item relative rank x among first inputs expected rank r among n inputs given er jx kao r tate lemma a1 given item rank x among first inputs 1st input uniformly distributed possible rankings expected rank given item among first inputs i2 proof let r random variable denoting rank given item among first see value r depends rank 1st input particular rank 1st input x happens probability x new rank given item x 1 hand rank 1st input x happens probability rank given item still x among first inputs using observation see claimed lemma fixed position extension rank position times rank item among first inputs simply extend lemma case x fixed rank random variable know expected rank among first items corollary a2 given item expected rank x among first inputs 1st input uniformly distributed possible rankings expected rank given item among first inputs i2 simply multiplying together change expected rank among inputs among n inputs get telescoping product cancellations successive terms resulting following corollary corollary a3 given item rank x among first inputs remaining inputs uniformly distributed possible rankings expected rank given item among n inputs n1 r improved algorithms analysis secretary problems generalizations fundamentals investments probability measure statistical adversary allows optimal moneymaking trading strategies theory optimal stop ping secretary problem algorithm maximizing expected log investment return competitive analysis financial games foundations finance secretary problem extensions review art computer programming choosing maximum sequence discount function amortized efficiency list update paging rules secretary problem finite memory recognizing maximum second maximum sequence dynamic programming stochastic control mathematics financial derivatives tr ctr avrim blum tuomas sandholm martin zinkevich online algorithms market clearing proceedings thirteenth annual acmsiam symposium discrete algorithms p971980 january 0608 2002 san francisco california