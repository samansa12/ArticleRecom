risk expectations apriori time allocation multiagent contracting related research proposed market architecture multiagent contracting implemented prototypes market architecture agents system called magnet customer agent magnet solicits bids execution multistep plans tasks precedence time constraints posting request quotes market request quotes needs include task precedence constraints time window paper study problem optimizing time windows requests quotes approach use expected utility theory reduce likelihood receiving unattractive bids maximizing number bids likely included winning bundle describe model illustrate operation properties discuss assumptions required successful integration magnet multiagent contracting systems b introduction magnet multiagent negotiation testbed 4 system designed support multiple agents negotiating permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee aamas02 july 1519 2002 bologna italy contracts tasks complex temporal precedence constraints distinguish two agent roles customer supplier customer agent needs resources outside direct control order carry plans soliciting help selfinterested agents requests quotes rfq supplier agent response rfq may oer provide requested resources services specified prices specified time periods objective agents maximize profits predicting managing financial risk exposure paper focus decision process customer agent needs go order generate rfq study particular problem specify time windows dierent tasks rfq decision determines approximate schedule setting limits start finish times individual task since rfq includes early start late finish times task probability loss well probability gain must deal risk posture person organization whose behalf agent acting show use expected utility theory determine time windows tasks task network bids close time windows form preferred riskpayo combinations customer agent examine extent behavior model corresponds expectations explain market information needs collected order integrate model magnet system finally discuss use resulting time allocations construct rfqs 2 relevance problem presenting proposed solution need understand importance selecting appropriate time windows tasks rfqs choice aects customer agents ability accomplish tasks economically rapidly possible choosing appropriate time windows aects number price bids received ability compose bids feasible schedule financial exposure customer agent two major decisions agent take relative allocation time among dierent tasks extent time windows tasks connected precedence relations allowed overlap shown 1 time constraints specified rfq aect customers outcome two major ways 1 aecting number price time windows bids submitted assume bids reflect supplier resource commitments therefore larger time windows result bids better utilization resources turn leading lower prices 3 however rfq features overlapping time windows makes process winner determination complex 2 another less obvious problem every extra bid minimum needed cover tasks adds one rejected bid ultimately large percentage rejections reduce customer agents credibility turn result fewer bids andor higher costs 2 aecting financial exposure customer agent assume nonrefundable deposits paid secure awarded bids payments task made tasks completed payment customer occurs completion tasks task starts case successfully completed time period specified contract customer liable full cost regardless whether meantime plan whole abandoned due failure branch plan define successful plan execution completed deadline define successful completion task completed without violating temporal constraints plan note task completed successfully even finished within duration promised bidder long schedule sucient slack absorb overrun plan completed deadline failed ignore residual value customer work completed uncertainty whether tasks completed time promised suppliers complicates decision process temporal constraints tasks failure accomplish task necessarily mean failure goal recovery might possible provided whenever supplier fails perform decommits suppliers willing task sucient time recover without invalidating rest schedule task completed supplier customer agent liable cost failure devastating eect parts plan slack schedule increases probability tasks completed successfully enough time recover one tasks fails however slack extends completion time reduces reward madeto order products speed essence taking extra time might prevent supplier getting contract complicates selection bids accept lowest cost combination bids tightest schedule achievable necessarily preferable schedule likely brittle risk also reduced consolidating tasks fewer suppliers suppliers bid packages composed subsets tasks rfq general customer better risk standpoint takes packages assuming supplier willing paid whole package time completion cases customer may willing pay premium individual task prices order reduce risk advantage greater toward end plan near beginning since point customer already paid significant part tasks greater financial exposure provides additional incentive reduce risk 3 magnet framework 31 general terms customer human artificial agent wants achieve goal needs resources services beyond direct control supplier human artificial agent direct control resources services may oer provide response external request ie may submit commit bids mediator magnetassisted human agent meets needs customer negotiating multiple goods services one suppliers often refer artificial part duo customer agent request quotes signal composed customer agent basis customers needs sent solicit suppliers bids magnet mixed initiative system composing rfqs sending stage human user impose preferences rfq choices 32 task network task network see figure 1 represents structure customers plan essence connected directed acyclic graph masonry roofing plumbing electric exterior interior24 figure 1 task network example mathematically speaking task network tuple n set n individual tasks strict partial ordering conveniently abuse n also denote number tasks task network represents plan accomplish agents goal define p n n n set predecessors n n every predecessor completed task n might start note general p n completely ordered similarly n denote set successors n 33 time allocation probabilities task network characterized start time delimit interval time tasks scheduled placement individual task n schedule characterized start time n finish time f n subject following constraints p1 n set immediate predecessors n defined similarly set immediate successors task n probability task n completion time conditional successful completion task n distributed according cumulative distribution function cdf 1 observe n defined explicitly dependent start time n see rationale consider probability successful mail delivery x days packages mailed dierent days week associated unconditional probability success characterizing percentage tasks successfully completed given infinite time see figure 2p n figure 2 unconditional distribution successful completion probability 34 monetary transfers bears associated cost 1 assume total cost task n two parts deposit paid task starts cost cn due time successful completion n since never compare plans dierent deposits assume without loss generality deposit 0 single final payment v scheduled plan conditional tasks n successfully completed time associated rate return qn 2 used calculate discounted present value pv payo cn due time associate return q final payment v 4 expected utility 41 general terms represent customer agents preferences pay os von neumannmorgenstern utility function u 1 hereafter use words cost reward denote monetary value referring value payo payment whenever scheduled time 2 reason multiple qn individual tasks financed dierent sources thus aecting task scheduling assume absolute riskaversion coe cient 14 r u u u constant value argument hence u represented follows gamble set payoprobability pairs 1 expectation utility function gamble g expected utility eu certainty equivalent ce gamble g defined single monetary value whose utility matches expected utility entire gamble g ie u ce g eu g hence assumptions r log naturally agent willing accept gambles less positive certainty equivalent higher values certainty equivalent correspond attractive gambles illustrate concept figure 3 shows certainty equivalent depends riskaversity agent figure consider gamble brings agent either 100 nothing equal probabilities agents positive rs riskaverse negative rs riskloving agents zero riskaversity zero ie riskneutral ce equal gambles weighted mean 50 figure 3 certainty equivalent simple gamble function riskaversity 42 cumulative probabilities compute certainty equivalent gamble need determine schedule tasks compute payo probability pairs assume payo cn task n scheduled f present value cn 3 3 hereafter wiggle variables depend current task schedule omitting corresponding indices sake simplicity define conditional probability task n success also define precursors task n set tasks finish task n starts schedule ie unconditional probability task n completed successfully pm probability successful completion every precursor task n considered independent events reason calculated form task fails completed need execute task n probability receiving final payment v therefor pn 43 example discussion illustrate definitions assumptions lets return task network figure 1 consider sample task schedule figure 4 figure xaxis time yaxis shows task numbers individual task also shows cumulative distribution unconditional probability completion compare figure 2 circle markers show start times n crosses indicate finish times f n success probabilities pn numbers next point square markers denote corresponding task cannot span past point due precedence constraints finally thick part cdf shows time allocation task figure 4 ce maximizing time allocations plan figure 1 practice customer agent needs way collecting market information necessary build use model probability success relatively easy observe market reason introducing cumulative probability success n probability success pn instead average project life span probability failure hazard function indeed rational supplier report successful completion immediately order maximize present value payment also rational report failure last possible moment due possibility earning payment rescheduling outsourcing somehow else fixing problem specific information agent needs collect empirical distribution long take point starting task point completion reported data unlike data failures actual positions suppliers schedule less likely private unobservable 5 maximization 51 gamble calculation algorithm given schedule like one shown figure 4 need compute payo probability maximize ce gamble writing explicit description expected utility function gambles overly complicated relies order task completions instead propose simple recursive algorithm creates gam bles maximize ce space gambles proposed algorithm depend structure task network number tasks scheduled parallel algorithm g calcgamblet requires tasks process processed tasks returns g subtree gamble branch according ordering pn endfor calcgamblet n follow n path endfor return g subtree processed else leaf tasks done return v 1 else task failed return 0 1 endif endif first call algorithm receives todo task list done task list subsequent calls recursive illustrate idea behind algorithm refer payoprobability tree figure 6 tree built time allocations figure 5 reflects precursor relations case figure 5 ce maximizing time allocations plan figure 1 looking time allocation note probability fails customer agent pay receive anything stops execution path 1 tree probability p1 agent proceeds task path 1 tree turn task 3 either fails probability p3 case agent ends stopping plan paying total c1 path 1 3 completed corresponding probability p3 case 1 3 completed agent starts 2 4 parallel becomes liable paying c2 c4 respectively even task fails paths fail resulting path tree 1 corresponding payoprobability pair framed figure 52 computational complexity computational complexity maximization procedure determined two parameters first procedure nonlinear maximization 2n choice variables internal precedence constraints second calculate certainty equivalent value every time schedule maximization procedure able build corresponding gamble compute expected utility maximization use neldermead simplex direct search method matlab optimization toolbox complexity calcgamble algorithm shown 2 k1 maximum number tasks scheduled executed parallel complexity estimate based observation depth payoprobability tree n subtree following unsuccessful task execution depth k 1 last statement follows assumption k 1 tasks running parallel one failed therefore tasks start failure reported whether possible create algorithm significantly lower computational costs one questions plan address future research commercial projects ratio kn usually low since figure payoprobability tree time allocations figure 5 many exhibit high degree parallelism preliminary experiments reported section 53 allow us conclude kn ratio likely lower riskaverse agents presumably businessmen risklovers gamblers 53 preliminary experimental results conducted series experiments ce maximization results summarized figure 7 figure yaxis shows 11 dierent risk aversity r settings bottom xaxis time plan top xaxis maximum ce value r setting rounded horizontal bars 11 sections denote time allocations six tasks task 1 top sections correspond figure 4 figure 5 respectively finally vertical bars show maximum ce values lets examine relative placement time allocations function r purpose highlighted task 3 black bars task 4 white bars task 3 higher variance cdf lower probability success task 4 0032 095 vs 0026 098 also task 3 expensive 15 vs 7 four dierent cases experimental data 1 riskloving agents tend schedule tasks parallel late time order maximize present value expected dierence reward payos suppliers confirms intuition figure 3 risklovers lean toward receiving high risky payments rather low certain payments 2 risk neutral low riskaverse agents place risky task 3 first make sure failure doesnt happen far project note still keep task 2 running parallel case 2 fails liable paying supplier task 4 success one consider agents somewhat optimistic 3 moderately riskaverse agents try dodge situation scheduling task 3 task 2 finished r figure 7 ce maximizing schedules ce values plan figure 1 r 003 007 agents willing accept plan expectations quite pessimistic 4 highly riskaverse agents shrink task 1 interval zero thus cheating avoid covering costs one may interpret way signaling refusal accepting plan 6 issues future research 61 multiple local maxima one open issues existence multiple local maxima ce even cases task networks fairly simple reason relative task placement two preferred configurations independent individual tasks either performed parallel thus increasing probability successful completion scheduled sequence minimize overall payos case one tasks fails illustrate issue constructed sample task network two parallel tasks task 1 higher variance completion time probability lower probability success task 2 everything else resulting graph ce shown figure 8 3 local maxima figure one left side corresponds task 2 scheduled first sequential order another right side corresponding task 1 first yet another one furthermost corner graph representing tasks scheduled time 0 executed parallel5010515task 1 start time figure 8 local maxima two parallel tasks course research able get around issue multiple local maxima starting maximization procedure dierent points however one may note number possible start points grows considerably complexity task network algorithm checks every one scalable solution considering use simulated annealing 20 node search queue represents local maximum particular ordering tasks 62 slack allocation rfq last issue want address paper use ce maximization procedure construct rfqs magnet framework ce maximizing schedule contains information desirable task scheduling customer agent however hard imagine always bids cover exactly time intervals maximizing schedule suggest following specify percentile maximum ce value considered acceptable agent define start time task n set values n ce schedule diers maximizing one start time task n less maximum graphically process represented building projection ce percentile graph see figure 9 task n time axis assuming one continuous interval n values every n n denote finally submit interval f times maximizing schedule part rfq taskstart time 95 90 50 figure 9 contours percentile graphs ce graph figure 8 leaves several open questions study instance could one interval tasks need distinguish rfq composition also might appropriate decrease acceptable ce percentile tasks involving goods services rare attract many bids time increase percentile tasks receive overly many bids addition rfq might split two parts requests rare goods services submitted first rest rfq composed bids rare products received deciding split rfqs still open question although specifically address mentioned related issues current paper ce maximization approach promises powerful flexible enough help us resolve future research 7 related work expected utility theory 19 mature field eco nomics attracted many supportive well critical studies theoretical 12 13 empirical 23 10 believe expected utility play increasing role automated auctions since provides practical way describing risk estimations temporal preferences previous work expected utility 1 mostly concerned computing marginal expected utility completing successfully tasks within duration promised long term objective automate scheduling execution cycle autonomous agent needs services agents accomplish tasks pollacks dipart system 18 sharedplans 7 assume multiple agents operate independently work towards achievement global goal agents trying achieve goals maximize profits global goal combinatorial auctions becoming important mechanism agentmediated electronic commerce 8 26 22 also allocation tasks cooperative agents see instance 9 5 9 combinatorial auctions used initial commitment decision problem problem agent solve deciding whether join proposed col laboration agents precedence hard temporal constraints however reduce search eort use domainspecific roles shorthand notation collections tasks formulation task type associated single role magnet agents selfinterested limits types tasks decide 6 scheduling decisions made agents instead central authority central authority insight states schedules participating agents agents rely authority supporting decisions nisans bidding language 16 allows bidders express certain types constraints magnet bidder bidtaker customer need communicate constraints inspite abundance work auctions 15 limited attention devoted auctions tasks time constraints interdependencies 17 method proposed auction shared track line train scheduling problem formulated mixed integer programming many domainspecific optimiza tions bids expressed specifying price enter line time window bidding language similar use magnet avoids use discrete time slots time slots used 25 protocol decentralized scheduling proposed study limited scheduling single resource magnet agents deal multiple resources work supplychain management limited hierarchical modeling decision making process inadequate distributed supplychains organization selfinterested cooperative walsh et al 24 propose protocol combinatorial auctions supply chain formation using gametheoretical perspective allow complex task networks include time con straints magnet agents also ensure scheduling feasibility bids accept must evaluate risk well agents mascot 21 coordinate scheduling user explicit notion money transfers contracts criteria acceptingrejecting bid explicitly stated major objective show policies optimize schedules locally 11 objective optimize customers utility 8 acknowledgments partial support research gratefully acknowledged national science foundation award nsfiis0084202 9 r decision processes agentbased automated contracting evaluating risk flexibility feasibility multiagent contracting market architecture multiagent contracting distributed control multirobot system socially conscious decisionmaking ai magazine combinatorial auction collaborative planning estimating preferences risk case racetrack bettors coordinated supply chain scheduling choice uncertainty problems solved unsolved dynamic consistency nonexpected utility models choice und er uncertainty microeconomic theory auctions bidding bidding allocation combinatorial auctions auctionbased method decentralized train scheduling planning dynamic environments dipart system risk aversion small large modern heuristic techniques combinatorial problems mascot agentbased architecture coordinated mixedinitiative supply chain planning scheduling algorithm winner determination combinatorial auctions empirical analysis economic value risk changes combinatorial auctions supply chain formation auction protocols decentralized scheduling michigan internet auctionbot configurable auction server human software agents tr modern heuristic techniques combinatorial problems market architecture multiagent contracting michigan internet auctionbot evaluating risk socially conscious decisionmaking bidding allocation combinatorial auctions combinatorial auctions supply chain formation auctionbased method decentralized train scheduling decision processes agentbased automated contracting algorithm optimal winner determination combinatorial auctions combinatorial auction collaborative planning ctr alexander babanov john collins maria gini scheduling tasks precedence constraints solicit desirable bid combinations proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia gleser k demir maria gini risk user preferences winner determination proceedings 5th international conference electronic commerce p150157 september 30october 03 2003 pittsburgh pennsylvania john collins wolfgang ketter maria gini multiagent negotiation testbed contracting tasks temporal precedence constraints international journal electronic commerce v7 n1 p3557 number 1fall 2002 alexander babanov john collins maria gini asking right question risk expectation multiagent contracting artificial intelligence engineering design analysis manufacturing v17 n3 p173186 june kaman lam hofung leung trusthonesty model adaptive strategy multiagent semicompetitive environments autonomous agents multiagent systems v12 n3 p293359 may 2006