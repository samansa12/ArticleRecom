role polymorphic reuse mechanisms schema evolution objectoriented database abstracta seamless approach incremental design reuse objectoriented methods query specifications presented argue avoiding minimizing effort required manually reprogramming methods queries due schema modifications demonstrate role polymorphic reuse mechanisms exploited enhancing adaptiveness database programs schema evolution objectoriented database salient features approach use propagation patterns mechanism propagation pattern refinement propagation patterns employed interesting specification formalism modeling operational requirements encourage reuse operational specifications structural modification objectoriented schema propagation pattern refinement suited specification reusable operational modules promotes reusability propagation patterns toward operational requirement changes approach formal basis emphasizes structural derivation specifications main innovations raising level abstraction behavioral schema design making possible derivation operational semantics structural specifications result modularity reusability objectoriented schemas increased b introduction schema evolution general ability database system respond real world requirement changes allowing schema evolve seamlessly possible seamless extension work carried university frankfurt supported partly european committee esprit project 6612 fcube work northeastern university supported part ibm corporation mettler toledo ag national science foundation grants ccr9102578 ccr9402486 cda9015692 research instrumentation current address ling liu department computer science university alberta edmonton t6g 2h1 alberta canada objectoriented schema important increasing application developers productivity also facilitating supporting extensibility example additional functionality added seamlessly existing application programs may either optionally ignore require minimal modifications added functionality becomes available therefore effectively manage impact schema modification clearly becomes important issue achieving seamlessness argue one way achieve seamless extensions employ polymorphic reuse mechanisms objectoriented database specifications thus application programs remain syntactically unchanged incrementally modified presence schema evolution paper assume schema modifications objectoriented database system performed database populated object instances application programs implemented tested thus impact schema modifications implies propagation restructuring operations database instances also reprogramming existing application programs eg relevant methods queries example existing method definition query specification languages name used methods queries must associated precise path expression order traverse nested structure objects whenever schema modification involves one existing class path expressions relevant classes changed modified schema methods queries use old path expressions must updated accordingly enable valid modified schema many researchers studied issues related avoiding database restructuring reorganization due schema modification 1 3 10 21 22 23 however issue avoiding minimizing database reprogramming due schema modification received surprisingly little attention database research community reprogramming due schema modification avoided reprogramming object methods database queries usually follows evolutionary changes logical object structure ie database schema operations reprogramming methods queries expensive especially relevant application programs large complex moreover operations conflict reuse software components objective seamless extension reprogramming avoided concept polymorphism mechanisms reuse software components useful utilities avoiding minimizing reprogramming effort required schema modifications one major reasons manually reprogramming methods queries schema modifications keep path expressions required method definitions query specifications consistent modified schema precise knowledge path expressions actually derivable logical object structure corresponding schema although objectoriented systems none existing objectoriented dbms products know include support structuring deriving operational semantics structural specifications believe adding support automatically semiautomatically deriving semantics operation propagation hierarchical structure complex objects opens new possibilities reuse operational specifications methods query programs objectoriented database systems reprogramming always avoided cases schema modification incurs change propagation paths existing methods queries eg new class added two existing classes construction ispartof relationship schema modification changes properties objects eg new property added existing class manually reprogramming existing methods queries due schema modification avoided structural derivation operation propagation semantics especially polymorphic reuse mechanisms employed specification methods database queries unfortunately schema modification substantially updated logical object structure schema particular schema modification changes minimal knowledge required specifying method query reprogramming cannot avoided completely baselines mind propose seamless approach incremental design reuse objectoriented methods query specifications show polymorphic reuse mechanisms exploited improving adaptiveness software programs schema modification objectoriented database argue using approach operational specifications become robust adaptive towards schema modifications effort manually reprogram methods queries necessitated schema modifications avoided minimized salient features approach use propagation patterns mechanism propagation pattern refinement propagation patterns seen interesting specification formalism modeling operational requirements objectoriented database systems encourage reuse operational specifications structural modification objectoriented schema using propagation patterns provides method designers query writers opportunity specify operations without detailed navigational information propagation pattern refinement suited specification reusable operational mod ules promotes reusability propagation patterns towards operational requirement changes provide number examples illustrate concepts propagation patterns propagation pattern refinement show concepts important polymorphic reuse mechanisms employed avoid minimize effort required manually reprogramming methods queries schema modifications section 2 give brief presentation reference object model discuss propagation patterns formal semantics section 3 several characteristics propagation patterns formally studied section 4 introduce mechanism propagation pattern refinement present formalization concept number examples illustration compare approach related work section 5 section 6 concludes summary discussion implementation considerations well research directions 2 reference object model use kernel demeter data model 16 reference object model allows us show polymorphic approach directly available using existing tool demeter systemc tm 11 12 19 object reference model describe structure objects classes terms class dictionary graph called schema graph two kinds classes distinguished alternation classes construction classes alternation classes regarded abstract classes construction classes instantiable classes two kinds relationships distinguished classes inheritance relationships called alternation edges object reference relationships called construction edges information methods need attached class deliberately omitted class dictionary graph stage injected class via propagation patterns method propagation time see section 3 details dictionary graph class dictionary graph g defined labeled directed graph v finite sets construction alternation vertices respectively collectively called vertices g l ordered set labels described character string ec ternary relation v theta l theta v representing construction edges ea binary relation v theta v representing alternation edges 2 presentation brevity sometimes denote class dictionary graph simply example 1 suppose want model document described title authors date annotations document body annotations consist number pages document body contains number components consists collection pages component either text component figure component class dictionary graph representing situation shown figure 1 figure annotation date string annotate content date authors title pages page component document components docbody docbody onetoone construction edge onetomany construction edge alternation edge construction class alternation class figure 1 class dictionary graph schema document class dictionary graph example described follows figure annotation string date documentdatedate documentdocbodydocbody documentannotateannotation docbodycomponentscomponent componentpagespage annotationcontentpage alternation reachable class dictionary graph vertex alternation reachable vertex denoted w u iff one following conditions satisfied let us take look figure 1 according definition 2ii class text alternation reachable class component note transitive closure ea since reflexive antisymmetric transitive cyclic alternation path allowed say class dictionary graph legal cyclic alternation paths sequel assume class dictionary graphs legal definition 3 construction reachable gamma class dictionary graph vertex construction reachable w one following conditions satisfied consider figure 1 condition ii definition class vertex page construction reachable class vertex text applying construction reachability alternation reachability may directly obtain inheritance property class hierarchy 4 alternation edges specifically class vertex v alternation reachable vertex u vertex w 2 v construction reachable u w also construction reachable v prove property following proposition proposition 1 let class dictionary graph vertices u alternation reachable u ie u v class vertex w 2 v u gamma w holds v gamma w proof given u v let w 2 v u gamma w proof follows cases definition 2 v proposition trivially satisfied ii u v 2 ea u gamma w follow cases definition 3 case 9u w 2 ec u v definition 3ii v gamma w case b 9u u v definition 2iii u 0 v definition 3ii get v gamma w operation void printdocument document page wrapper document prefix date gprint wrapper page prefix gprint figure 2 propagation pattern printdocument case c 9u induction u gamma u ie number construction edges u u 0 definition 3ii obtain since u v v gamma u 0 u 0 gamma w using definition 3iii obtain v gamma w iii 9u 0 st u u 0 u 0 v induction u gamma w definition 3ii obtain u 0 gamma w since u u 0 similarly induction u 0 gamma w u 0 v 3 propagation patterns 31 informal overview concept propagation patterns originally introduced demeter system tm order specify objectoriented programs higher level abstraction 13 15 believe propagation patterns also useful conceptual programming technique database applications enables system designers programmers conceptualize application programs system behavior minimal knowledge data structure propagation patterns seen kind behavioral abstraction application programs define patterns operation propagation reasoning behavioral dependencies among cooperating objects proved effective aid building highly adaptive database programs methods queries supporting incremental schema evolution consider following example example 2 consider class dictionary graph shown figure 1 suppose want method printdocument prints creation date document entire document body none annotations may define method writing following propagation pattern see figure 2 propagation pattern states method printdocument print creation date document printing entire document content besides annotation objects document excluded printing task idea behind propagation pattern based fact number classes class dictionary figure 1 need cooperate accomplish task printdocument little information necessary specifying task since rest easily derived structural specifications schema instance figure 2 specify interface method propagated clause operation void printdocument source propagation pattern given clause document specifying propagation pattern starts target propagation pattern provided clause page indicating classes propagation pattern terminates clause bypassing annotate identifies restriction propagation constraints propagation pattern order exclude annotations printing task source clause target clause propagation constraint clause together called propagation directive pattern printdocument note instead clause document clause page used edge documentannotateannotation would participated propagation undesired ef fect clauses wrapper document wrapper page followed actual programming code eg c code surrounded specify method body provide detailed syntax description appendix remarks writing propagation pattern require knowledge detailed data struc ture one obvious benefit feature allow reuse propagation patterns hand several similar data structures thus increase adaptiveness operational specifications future schema changes instance writing propagation pattern printdocument minimal knowledge need know document page date annotate figure 2 critical information called hooks defining function suppose need modify schema figure 1 changing layout document logical structure see figure 3 schema modification needs reprogramming method printdocument although path document page changed modified schema critical information specifying printdocument unchanged included modified document schema thus propagation pattern printdocument still used valid meaningful propagation pattern modified document schema see section 33 explanation ii bypassing option included propagation pattern propagation path implied given propagation directive include path document docbody page path document annotate page means task print document print entire document content document annotations iii propagation patterns automatically translated socalled method propagation time code written objectoriented programming language eg c code fragments inserted classes participate propagation pattern traversal provide illustration point section 33 contrast robustness propagation patterns conventional objectoriented database languages reaction schema modifications express operation printdocument using existing objectoriented languages method designers query writers must refer article document page figure section annotation date string chapter annotate content date affiliate authors title chapters content sections pages figure 3 modified class dictionary graph schema document objects interest precise path expressions example using sqllike language propagation pattern printdocument defined schema document figure 1 expressed follows print ddate dtitle dauthors ddocbodycomponentspages document schema modified items path expression involved modifica tion sqllike operation becomes invalid instance document schema updated schema figure 3 adding new property affiliate document objects inserting class section docbody component expression ddocbodycomponentspages becomes invalid must manually updated ddocbodysectionscomponentspages single case might seem like lot work however many routines number application programs implemented old schema one single modification schema could possibly require massive rewriting routines relevant application programs rather tedious task contrast using propagation patterns schema modifications usually less impact existing database programs propagation pattern specifications require neither knowledge detailed structure schema navigational information traverse schema example propagation pattern printdocument defined figure 2 remains valid modified document schema thus need update propagation pattern even modification document schema summary propagation patterns propose novel method specification technique promotes adaptive objectoriented schema design used database programming language enhancing robustness database programs adaptiveness robustness propagation patterns achieved delaying binding concrete propagation paths used method query specification method query writing time operation propagation time prior compile time 32 formal definitions order define reuse mechanisms propagation patterns present formal definitions propagation directives propagation patterns introduce concept propagation scope definition 4 propagation directive given class dictionary graph propagation directive ffi g defined triple ffl f denotes nonempty set source vertices f ffl pc denotes propagation constraints set edges called restriction constraints x set bypassing edges called exclusion constraints ffl denotes nonempty set target vertices v 2 propagation directive specifies set propagation paths described set source vertices set propagation constraints set target vertices definition 5 propagation pattern class dictionary graph propagation pattern ff g defined triple pdma ffl mff method interface defined triple u mn lpa denotes output type either class vertex keyword void indicating empty result type mn method name lpa list n n 0 parameters parameter name ffl pdff denotes nonempty set propagation directives g ffl maff set method annotations method annotation consists set prefix suffix components denoted w fg pre w fg suf w class vertex v fg pre fg suf denotes code fragment describing userdefined method implementation fg character string containing code fragmentgnote definition classified method annotation prefix suffix code fragments classification plays important role identifying activation sequence fragments refer activation sequence wrapper code fragments propagation pattern wrapper order propagation pattern specific object types encountered traversal prefix code fragments executed suffix code fragments exact execution sequence depends jointly propagation pattern class dictionary graph object traversed general following rules wrapper execution order hold class propagation scope see def 7 traversed 1 prefix fragments executed suffix fragments 2 class one prefix prefix fragments executed order appear textually propagation pattern definition 3 suffix wrappers class executed reverse textual 4 class vertex v alternation reachable another class vertex u prefix wrapper u executed prefix wrapper v suffix wrapper u executed suffix wrapper v 5 class vertex v construction reachable another class vertex u prefix wrapper u executed prefix wrapper v suffix wrapper u executed suffix wrapper v interesting note rule 4 describes dependency relationship code fragments specialized class code fragments general class specific code could dependent general code general code depend specific code rule5 specifies dependency component class container class example 3 consider propagation pattern defined figure 2 two wrapper fragments documentfg document pre pagefg page pre wrapper execution order fragments follows document fg document capture relationships propagation pattern class dictionary graph object traversed introduce notions propagation paths propagation scope well compatibility propagation patterns readers interested formal semantics wrapper orders implementation considerations may refer 18 8 33 scope compatibility propagation patterns section define scope compatibility propagation patterns scope propagation pattern identifies given class dictionary graph complete set classes vertices relationships edges involved executing task specified propagation pattern compatibility propagation pattern defines family class dictionary graphs propagation pattern directly applicable definition 6 legal path class dictionary graph two vertices u v g predicate holds recursively derived using following construction rules ii u gamma v note legal path p u v set edges ep involved given path p represented e contained pg computation ep easily obtained using definition 2 definition 3 definition 7 put differently may compute ep recursively constructing edges involved path pu v follows ffl u v definition 2 9w ffl u gamma v definition 3 two cases possible note u v could several legal paths u v example 4 consider document page figure 1 example definition 3ii text gamma page figure gamma page component text component figure hold component pages page2 ec thus according definition 6 get following three legal paths document page 1 document 2 document docbody component figure page 3 document docbody component page 4 document annotation page unique legal path document text page edocument page f documentdocbodydocbody docbodycomponentscomponent componentpagespageg actually due fact class component generalization classes figure text traversing third path implies first path second one visited definition 7 propagation scope given class dictionary graph propagation pattern defined denote propagation directive described say legal path p satisfies propagation constraint following hold let p set possible legal paths vertex u 2 f vertex v v satisfying v 2 g propagation scope directive denoted psffi ff defined follows ep propagation scope pattern ff denoted psff described union scopes propagation directives ff ffnote given propagation pattern set propagation directives decides propagation scope whereas method signature method annotations specify propagated within scope detailed discussion may refer 18 example 5 consider figure 1 propagation pattern given example 2 call ff let denote propagation scope directive denoting document bypassing annotate page let psff propagation scope pattern ff schema class dictionary graph defined figure 1 thus componentpagespage componenttext componentfigure documentauthorstring documenttitlestring documentdatedate g propagation pattern ff one propagation directive important note propagation pattern syntactically correct according definition 5 may semantically correct example consider simple class dictionary graph lcdg means objects class composed objects class b class c objects class b class c contain objects class subobjects assume following two propagation patterns pp 1 operation void pp1 operation void pp2 alabb wrapper wrapper wrapper c wrapper c wrapper wrapper obviously syntactically correct propagation patterns g terms definition 5 ever pp 2 semantically incorrect propagation pattern g class c included propagation scope pp 2 wrapper reference c pp 2 invalid one possible means define check semantic correctness propagation pattern given class dictionary graph use concept propagation scope definition 8 semantic correctness propagation scope given class dictionary graph propagation pattern defined g propagation scope psff v psff denotes set class vertices involved psff defined follows iii nothing else v psff propagation pattern ff said semantically correct g u fg u maff sequel assume propagation patterns deal correct syntax semantics major advantage propagation patterns applied one class dictionary graph family class dictionary graphs property makes truly adaptive reusable order determine set class dictionary graphs compatible given propagation pattern need define notion compatibility say propagation pattern compatible class dictionary graph class dictionary includes information contained hooks propagation pattern informally hooks propagation pattern consist vertices labels referred bypassing edges vertices referred method interface method annotations definition 9 compatibility propagation pattern gamma set class dictionary graphs g 2 gamma let v g eag lg set class vertices set alternation edges set labels g respectively let propagation pattern defined g hkff denote set key information pattern ff call hooks pattern ff x 2 define x 2 hkff iff one following conditions verified g 0 2 gamma say ff compatible g 0 iff hkff example 6 recall propagation pattern printdocument defined example 2 denoted ff let class dictionary graphs figure 1 figure 3 respectively fdocumentannotatepagedateg thus propagation pattern printdocument compatible g 1 g 2 34 polymorphic character propagation patterns stated earlier using propagation patterns model dynamic part objectoriented database system may achieve certain degree adaptiveness flexibility database specifications future changes especially respect several types structural changes example propagation pattern given figure 2 defined class dictionary graph figure 1 also used propagation pattern class dictionary graph given figure 3 class schemas include document objects page objects subparts using propagation patterns schema designers programmers may focus interesting components class structure precise knowledge structural details modeled particular schema class dictionary graph required refer particular feature polymorphic character propagation patterns interesting note pattern printdocument propagation scope class schema figure 1 quite different one class schema figure 3 although propagation pattern specification valid schemas binding involved classes code generated based different polymorphic character propagation pattern apparent generally speaking polymorphism propagation patterns belongs family adhoc polymorphism 5 provide another example example 7 suppose define trip schema class dictionary graph shown figure 4 trip objects parts called departure arrival printed trip object contains list location objects ident object component describing city visited trip list location objects modeled third kind class repetition class repetition class implements onetomany relationship trip class location class remainder paper replace onetomany construction edges repetition classes order show actual method code classes time trip location location departure arrival locations number value figure 4 class dictionary graph schema trip consider operational requirement printing trip itineraries travel agency given trip object need print departure time list cities visited followed arrival time application described using propagation pattern see figure 5 following lists key information hooks propagation pattern ftripdeparturearrivalidentg operation void printitinerary trip wrapper trip prefix departure gprint suffix arrival gprint prefix gprint figure 5 example propagation pattern printitinerary wrapper order matrip follows example prefix annotation used print departure time trip object traversed suffix annotation prints arrival time trip object traversed primary annotation replaces default traversal code printing current ident object propagation pattern injected class structure figure 4 propagation time program fragments automatically generated according given method annotations see c codes attached classes figure 6 obtained running demeter systemc example c method definitions attached class figure 6 generated according propagation pattern given figure 5 completeness c methods fully depends specification details propagation patterns using propagation patterns unnecessary information class structure need hardwired specification allows specification propagation pattern flexible towards schema modification example suppose schema shown figure 4 extended adding class daytrip trip object contains list daytrip objects daytrip object contains list location objects printable ident objects see schema presented figure 7 although propagation pattern figure 5 defined schema figure 4 modification trip schema requires reprogramming method hooks printitinerary included modified schema figure 7 consequently propagation pattern also compatible schema figure 7 even reuse propagation pattern defined figure 5 trip schema figure 7 without changing specification propagation pattern code generated previously based propagation pattern clearly respect two trip schemas propagation pattern printitinerary also presents kind adhoc polymorphism interestingly propagation pattern actually compatible family trip class structures long trip class departure arrival part path class ident polymorphism may provide sound theoretical basis investigating adaptiveness objectoriented schema design schema evolution structural dynamic aspect time trip location number location departure arrival value locations void locationlistiterator nextloc location eachloc void tripprintitinerary departure gprint locations printitinerary arrival gprint void gprint void city printitinerary figure trip schema generated c code attached corresponding classes 35 remarks reuse possibility shown examples propagation patterns promising conceptual programming technique modeling programming dynamic behavior objectoriented database systems adaptiveness structural changes schema adaptiveness propagation patterns results number interesting features first specification propagation patterns require hardwiring particular class structure leaves room deriving behavioral abstraction based structure abstraction incremental design methods eg propagation patterns secondly propagation patterns defined terms essential classes relationship specifications serve hooks class structure 11 rest knowledge required behavior implementation actually derived basis hooks corresponding class schema last least propagation patterns promote wellknown concept late binding instead binding methods classes programwriting time propagation patterns encourage binding methods classes propagation time prior compile time therefore given propagation pattern defined class structure say g change structure g affect hooks propagation pattern little impact specification propagation pattern even though scope modified class schema could changed accordingly words given propagation pattern specification reused modified class schema additional propagation constraints method annotations required binding method interface annotations relevant classes may need readjusted implicitly propagation time propagation pattern interpretation contrast changes required dynamic behavioral aspect schema thus existing propagation patterns becomes indispensable redefine affected propagation patterns time trip location number location departure arrival value locations void gprint daytrips void locationlistiterator nextloc location eachloc void daytriplistprintitinerary daytriplistiterator nextday eachday printitinerary void city printitinerary void daytripprintitinerary locations printitinerary void tripprintitinerary departure gprint daytrips printitinerary arrival gprint figure 7 second trip schema generated c code extend existing propagation patterns see example 8 next section definitely beneficial reuse mechanisms provided adaptation existing propagation patterns new requirement changes start scratch rewritten completely even affected propagation patterns simple ones propagation pattern reused programming codes generated terms existing binding methods classes propagation time may inherently reused well besides reusing specification propagation patterns information involved maximumly localized change existing specifications carried one place effort manually preserve consistency specifications due schema modification minimized follows introduce reuse mechanism propagation patterns allows new propagation patterns defined terms existing ones behavioral refinement mechanism behavioral refinement propagation patterns refinement propagation patterns behavioral abstraction mechanism allows us define specialized propagation patterns terms existing propagation patterns restricting propagation behavior one specialized classes arguments method b imposing extra propagation constraints c adding additional method annotations 41 motivating example example 8 consider trip schema figure 7 propagation pattern printing trip itineraries travel agency defined figure 5 suppose want modify trip schema figure 7 adding new property date class daytrip see figure 8 time trip location number location departure arrival value void gprint daytrips void locationlistiterator nextloc location eachloc void city printitinerary date locations date day year month void daytriplistprintitinerary daytriplistiterator nextday eachday printitinerary void daytripprintitinerary date gprint locations printitinerary void tripprintitinerary departure gprint daytrips printitinerary arrival gprint figure 8 extended trip schema generated c code also want extend task printing trip itineraries adding new operational requirement trip date every travel day must also printed comparing old propagation pattern print itinerary defined figure 5 extended task let us call printdetaileditinerary obviously includes functionalities old propagation pattern printitinerary see figure 5 also additional propagation constraints method annotations instance following annotation needs added printing date travel day within trip wrapper daytrip prefix date gprint operation void printdetaileditinerary trip daytriplocationslocationlist indent wrapper trip prefix departure gprint suffix arrival gprint wrapper daytrip prefix date gprint prefix gprint figure 9 modified propagation pattern printitinerary additionally schema figure 8 one path trip edge locations edge date also need add following extra propagation constraint propagation pattern defined figure 5 daytriplocationslocationlist bypassing daytripdatedate two ways accomplish operational requirement change one way redefine rewrite previous propagation pattern printitinerary completely redo binding injection methods classes propagation time example may rewrite propagation pattern print itinerary completely shown figure 9 although previous bindings remain redefined propagation pattern compare code generated figure 7 figure 8 need rebind methods classes regenerate code modified propagation pattern see code attached classes figure 8 way employ reuse mechanisms specialized propagation patterns defined terms existing ones means propagation constraint method annotation new need defined rest directly reused shared existing pattern means propagation refinement mechanism furthermore propagation time refined propagation pattern new method annotations need injected involved classes since previous bindings code generated terms old method annotations may reused accordingly example compare propagation pattern given figure 9 one defined figure 5 one prefix annotation new one extra propagation constraint added moreover addition date task printing trip itineraries fact affects old binding method printitinerary class vertex daytrip code generated binding rest remains exactly thus using propagation refinement mechanism see next section may specify desired requirement change shown figure 10 operation void printdetaileditinerary behavioral refinement printitinerary add constraint daytriplocationslocationlist add annotation wrapper daytrip prefix date gprint figure 10 refined propagation pattern printitinerary 42 definition present formal definition propagation pattern refinement based concept signature refinement propagation directive refinement e class dictionary graph given two method interfaces 1 2 say method interface 2 signature refinement method interface 1 denoted 2 sig 1 iff following conditions verified note definition also identifies given two operation interfaces 1 2 2 signature refinement 1 2 may additional arguments 1 see condition 0 n important property behavioral refinement propagation patterns example propagation patterns refined groups often requires adding extra arguments calls definition 11 propagation directive refinement e class dictionary graph two given propagation directives defined g let pc propagation scopes directives ffi 1 ffi 2 respectively ffi 2 propagation directive refinement following conditions verified 1 8y alternation reachable x 2 means whenever hook propagation directive ffi 1 included hook propagation directive propagation constraints ffi 1 implied propagation constraints 3 vertex u set 2 target vertices ffi 2 vertex v set 1 target vertices ffi 1 u alternation reachable v 4 condition 1 amounts saying whenever ffi 2 propagation directive refinement ffi 1 given source vertex u f 2 must corresponding source vertex say v f 1 u alternation reachable v v u condition 3 identifies similar result target sets 1 two cases involved condition 2 definition 11 illustrate example 10 example 11 respectively following example combines conditions 1 3 4 infer propagation directive refinement holds example 9 let ffi 1 ffi 2 two propagation directives c f fcg c lambda c holds means ffi 2 propagation directive refinement ffi 1 definition 12 propagation pattern refinement e class dictionary graph pdfi mafi two given propagation patterns defined g let propagation pattern fi behavioral refinement propagation pattern ff iff following conditions verified 1 mfi sig mff mfi signature refinement mff 2 means ffi pdff refined propagation directive j pdfi 3 maff mafi 2 definition states fi behavioral refinement propagation pattern ff signature refinement condition propagation directive refinement condition hold also inclusion wrapper set ff wrapper set fi verified one three invalid fi propagation pattern refinement ff put differently three conditions work together guarantee scope refined propagation pattern made smaller limit wrappers generic propagation pattern still applicable addition condition 3 presents following wrapper refinement rule propagation pattern fi behavioral refinement propagation pattern ff prefix wrappers fi may extend prefix wrappers propagation pattern ff adding extra wrappers providing additional wrapper fragments existing wrappers may introduce keyword add annotation add fragment within wrapper clause serve purpose also definition 11 property propagation pattern fi behavioral refinement propagation pattern ff code fragments defined pattern ff executed order execution propagation pattern fi consider motivating example given previous section schema figure 8 let ff denote propagation pattern defined figure 5 page 16 ffi propagation directive ff let fi modified propagation pattern defined figure 10 propagation directive fi wrapper order ff trip fg rip wrapper order fi tripfg rip g therefore definition 12 conclude propagation pattern fi correctly defined behavioral refinement propagation pattern ff example also shows wrappers printitinerary activated order refined propagation pattern printdetaileditinerary put differently behavioral refinement mechanism guarantees wrapper order refined propagation pattern preserve imply wrapper order given predefined propagation pattern important property propagation pattern refinement stated formally following proposition readers interested formal proof proposition may refer technical report techniques developed 18 8 also used constructive proof proposition proposition 2 wrapper order property propagation pattern refinement let e class dictionary graph two given propagation patterns compatible g propagation pattern fi behavioral refinement propagation pattern ff wrappers pattern ff executed order mafi maff note propagation pattern refinement mechanism increases flexibility adaptiveness propagation patterns future operational requirement changes also useful promoting concept propagation pattern inheritance class dictionary graph especially need applying existing method function subset current domain codomain instead example 11 recall propagation pattern printdocument given figure 2 page 6 suppose propagation pattern used propagation pattern document schema given figure 3 want add new method prints documents type article ie subset document objects providing support behavioral refinement propagation patterns could easily reuse propagation pattern printdocument obtain specialized propagation pattern printarticle job see figure 11 operation void printarticle behavioral refinement printdocument article page figure 11 refined propagation pattern figure 2 let ff denote propagation pattern printdocument fi denote printarticle defined class schema figure 3 obviously mfi signature refinement mff since ff fi return void empty argument list ii pdfi propagation directive refinement pdff since document article document62 thus definition 11 propagation pattern fi printarticle correct behavioral refinement propagation pattern ff printdocument another interesting feature propagation pattern refinement presented transitivity prove propagation pattern ff fi fl pattern ff behavioral refinement pattern fi pattern fi behavioral refinement pattern fl pattern ff also behavioral refinement pattern fl proposition 3 let predicate pprefinementff fi hold propagation pattern ff behavioral refinement propagation pattern fi proof let ff denote propagation pattern described triple mff pdff maff need prove ii j 2 pdfl exists ffi 2 pdff ffi pd j proof may proceed follows pprefinementff fi pprefinementfi fl definition 11 mff sig mfi mfi sig mfl held prove mff sig mfl let mff sig mfi get similarly mfi sig mfl get u 3 thus according definition 2iii u 3 holds proof ii goes follows pprefinementfi fl definition 11 get 8j 2 pdfl 9 2 quite similarly pprefinementff fi get 8 2 pdfi 9ffi 2 pdff st according definition 10 could easily prove 8j 2 pdfl 9ffi 2 pdff st ffi pd j holds proof iii follows directly transitivity set inclusion since according given predicates definition 11 maff mafi mafi mafl 2 transitivity propagation pattern refinement provides sound basis incremental design propagation patterns far shown propagation pattern refinement important behavioral abstraction mechanism reuse method definitions query specifications encourages information localization offers better flexibility adaptiveness towards schema modifications especially towards future operational requirement changes means behavioral refinement mechanism three levels reusability obtained managing operational schema changes specification propagation patterns easily reused see figure 10 figure 11 ii binding method annotations classes propagation time largely reused compare binding shown figure 7 figure 8 iii generated code eg c possibly reused well compare code generated figure 7 figure 8 believe propagation pattern refinement mechanism increase potential benefits using propagation patterns higher level database programming technique 5 related research schema evolution commonly recognized required facility persistent objectoriented system generally speaking schema describes interface set application programs persistent repository objects schema changes interface possibly incurs incompatible elements sides two main research directions achieving seamless schema evolution objectoriented database system one effectively integrate schema modifications propagation schema changes object instances instance adaptation well application programs program adaptation several research projects contributed issue one way encore 20 gemstone 6 2 23 orion 1 otgen one recent contributions along direction lazy update propagation problem solutions addressed provides mechanisms guarantee correct update propagation terms conversion functions presence schema modification large efforts however remain required practice order provide adequate propagation mechanisms make instance adaptation program adaptation effective direction improve design database method query specification languages software programs written advanced languages higher adaptiveness seamlessness schema evolution however surprisingly little attention paid database community towards direction although software reuse one critical issues software engineering last decade 2 shown program adaptation exceedingly hard typed languages c even simple schema changes therefore important beneficial put research effort avoiding minimizing program changes anticipation schema updates rather trying fix things changes occured work reported paper presents contributions use polymorphic reuse mechanisms achieve higher adaptiveness objectoriented database specifications presented two polymorphic reuse mechanisms propagation patterns propagation pattern refinement shown role two reuse mechanisms avoiding minimizing impact schema evolution application programs objectoriented database work mostly encouraged demeter system 11 12 19 contract model 7 activity model 17 comparison contract model propagation patterns contracts encourage separation object behavior specification object structure specification present interesting techniques operational specification also number differences first propagation patterns provide better adaptiveness towards schema evolution change management means propagation patterns propagation pattern refinement mechanism reprogramming methods queries due schema modifications avoided minimized second propagation patterns concentrate specification reasoning operation propagations among group related classes whereas contracts emphasize obligation specification participant class accomplishing task defined group cooperating classes third conformance contracts classes required explicitly contract model whereas conformance propagation patterns classes derived implicitly propagation time comparing reuse mechanism propagation patterns behavioral abstraction mechanisms defined activity model 17 interesting note although similarity concept propagation pattern refinement concept activity specialization emphasis functionality activity model declarative specification reasoning communication behavior objects consideration specifying reasoning operation propagations among cooperating classes current activity model efficient implementation propagation patterns described 18 paper shows generate efficient objectoriented program say c given propagation pattern compatible class dictionary graph proof correctness core translation given work 8 presented formal framework maintaining behavior consistency objectoriented systems software evolution framework effectively couples change avoidance approach propagation patterns change management mechanism fully automate evolution class structure transformations may render existing objects programs inconsistent paper identifies introduced inconsistencies provides necessary object program transformations reinstate consistency maintaining behavior system formal definition behavioral equivalence given prove behavioral equivalency propagation patterns paper defines formal semantics propagation patterns describes proof system semantics semantics formally defines order wrapper execution prefix suffix wrappers feasibility evolution framework demonstrated representative set primitive class structure transformations mainly based extension relations identified 9 14 extension relations useful means quality control schema transformations quite differently work presented paper focuses reuse existing design specification schema modifications requirement changes existing propagation patterns reused extended incrementally cover new requirements especially structural operational changes required another interesting project based graph class hierarchy oql proposal oql query specified subgraph schema graph subgraph contains traversals object classes branches association operators comparing calculusbased language oql approach emphasizes adaptive design specification databases facilitate program adaptation change propagation anticipation schema changes 6 concluding remarks shown viability approach incremental design reuse objectoriented database specifications argue raising level abstraction specification object methods database queries show helps avoid minimize reprogramming methods queries due schema modifications salient features approach use propagation patterns propagation pattern refinement main benefits using polymorphic reuse mechanisms objectoriented database specifications following ffl concept propagation patterns presents promising technique enhancing robustness methods query programs respect schema modifications using propagation patterns provides method designers query writers opportunity specify operations without knowledge detailed navigational information compared existing objectoriented languages effort required manually reprogramming methods queries due schema modifications largely avoided minimized ffl concept propagation pattern refinement important mechanism abstraction reuse propagation patterns promotes incremental design methods especially useful dealing class operational requirement changes knowledge none existing objectoriented specification languages provides similar support incremental definition methods ffl studied formal semantics propagation patterns propagation pattern refinement formal basis provides sound framework implementation development ideas presented shown examples previous sections propagation patterns currently wellsupported case tool called demeter system tm c therefore easily adopted c based objectoriented database system demeter c tool order give road map possible implementation considerations propagation patterns propagation pattern refinement would like add brief illustration demeter c tools translate propagation patterns c code demeter tools divided three categories consistency checker code generators runtime library consistency checker code generators used compiletime divided structural behavioral part apply class dictionary graphs propagation patterns respectively words compile time application development consists exclusively c code runtime constructs needed implement propagation patterns gained two advantages 1 system speed degradation due propagation pattern runtime overhead 2 desired system could decoupled demeter system time become standalone application structural consistency checker first checks class dictionary graph validity structural code generator generates c class definitions accordance class dictionary graph task behavioral consistency checker takes input list propagation patterns class dictionary graph examines whether propagation patterns syntactically correct whether compatible given class dictionary graph behavioral code generator generates appropriate member function headers c implementations future work research development propagation patterns behavioral refinement propagation patterns continues interested investigation theoretical justification practical applicability approach example would interesting extend polymorphic reuse mechanisms discussed paper use candidate objectoriented view defini tions object view important feature persistent oodb systems becomes popular use view approach deal interoperability distributed heterogeneous database environment believe using polymorphic reuse mechanisms would greatly enhance adaptiveness robustness global virtual view schema thus application programs developed users different sites local schema changes also interested exploring issues critical rules achieving good understanding effective translation propagation patterns behavioral refinement propagation patterns polymorphic type theory may enhance formal development propagation patterns kinds behavioral abstractions propagation patterns acknowledgement would like thank subject editor stanley su editorinchief benjamin wah reviewers helpful comments suggestions thanks also due susan even markku sakkinen ignacio silvalepe cun xiao discussion remarks earlier version paper extended abstract published proceedings icde94 r semantics implementation schema evolution objectoriented data bases maintaining behavioral consistency schema evolution view mechnism objectoriented databases semantics multiple inheritance understanding types development objectoriented dbms specifying behavioral compositions objectoriented systems automating change management objectoriented systems breakdown information model multidatabase systems art growing adaptive objectoriented software formulations benefits law demeter experience graphbased propagation pattern programming tool adaptive objectoriented programming using graphbased customization formal foundations objectoriented data modeling activity model declarative approach capturing communication behavior objectoriented databases efficient implementation adaptive software report demeterc type evolution objectoriented data base schema modification without database reorganization framework schema updates objectoriented database framework schema updates objectoriented database system tr ctr zahir tari xue li ling liu type safety context method updates journal intelligent information systems v13 n3 p279298 novdec 1999 salvatore march charles wood gove n allen research frontiers object technology information systems frontiers v1 n1 p5174 july 1999