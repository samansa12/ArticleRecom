single machine scheduling release dates consider scheduling problem minimizing average weighted completion time n jobs release dates single machine first study two linear programming relaxations problem one based timeindexed formulation completiontime formulation show equivalence proving log n greedy algorithm leads optimal solutions relaxations proof relies notion mean busy times jobs concept enhances understanding lp relaxations based greedy solution describe two simple randomized approximation algorithms guaranteed deliver feasible schedules expected objective function value within factors 17451 16853 respectively optimum based concept common independent alphapoints respectively analysis implies particular worstcase relative error lp relaxations 16853 provide instances showing least ee1 approx 15819 algorithms may derandomized deterministic versions run on2 time randomized algorithms also apply online setting jobs arrive dynamically time one must decide job process without knowledge jobs released afterwards b introduction study singlemachine scheduling problem release dates objective minimize weighted sum completion times dened follows set ng n jobs scheduled single disjunctive machine job j processing time released time r j 0 assume release dates processing times integral completion time job j schedule denoted c j goal nd nonpreemptive schedule minimizes w j given positive weights mit department mathematics room 2351 77 massachusetts avenue cambridge 02139 usa university british columbia faculty commerce business administration vancouver bc canada v6t 1z2 email mauricequeyrannecommerceubcca z mit sloan school management room e53361 77 massachusetts avenue cambridge 02139 usa x technische universitat berlin fakultat ii mathematik und naturwissenschaften institut fur mathematik 61 strae des 17 juni 136 10623 berlin germany email skutellamathtuberlinde peoplesoft inc san mateo ca usa 94404 email yaoguang wangpeoplesoftcom classical scheduling notation 12 problem denoted 1j r strongly nphard even w one key ingredients design analysis approximation algorithms well design implicit enumeration methods choice bound optimal value several linear programming based well combinatorial lower bounds proposed well studied scheduling problem see example dyer wolsey 9 queyranne 22 queyranne schulz 23 well belouadah posner potts 4 lp relaxations involve variety dierent types variables e g either express whether job j completed time nonpreemptive timeindexed relaxation whether processed time preemptive timeindexed relaxation job j completed completion time relax ation dyer wolsey show nonpreemptive timeindexed relaxation stronger preemptive timeindexed relaxation show latter relaxation equivalent completion time relaxation makes use socalled shifted parallel inequalities fact turns polyhedron dened inequalities supermodular hence one optimize using greedy algorithm similar situation arises 24 greedy solution may actually interpreted terms following preemptive schedule call lp schedule point time schedules among available jobs one largest ratio weight processing time uma wein 38 point value lp solution coincides one combinatorial bounds belouadah posner potts based idea allowing jobs split smaller pieces scheduled individually show optimal value 1j r j j 16853 times lower bound given three equivalent relaxations preemptive timeindexed relaxation completion time relaxation combinatorial relaxation 4 prove result quality relaxations converting preemptive lp schedule nonpreemptive schedule technique leads approximation algorithms 1j r j j recall approximation algorithm polynomialtime algorithm guaranteed deliver solution cost times optimal value randomized approximation algorithm polynomialtime algorithm produces feasible solution whose expected objective function value within factor optimal value technique converting preemptive schedules nonpreemptive schedules design approximation algorithms introduced phillips stein wein 21 specically showed list scheduling order completion times given preemptive schedule produces nonpreemptive schedule increasing total weighted completion time factor 2 paper also introduced concept points notion also used hall shmoys wein 13 connection nonpreemptive timeindexed relaxation dyer wolsey design approximation algorithms various scheduling environments purposes point job j given preemptive schedule rst point time fraction j completed one chooses dierent values sequencing order nondecreasing points preemptive schedule may lead dierent nonpreemptive schedules increased exibility led improved approximation algorithms chekuri motwani natarajan stein 6 goemans 11 1j r chose random analyzed expected performance resulting randomized algorithms show using common value jobs appropriate probability distribution sequencing order points lp schedule expected performance worse 17451 times optimal preemptive timeindexed lp value also prove selecting separate value j job j one improve bound factor 16853 algorithms inspired partly resemble algorithms hall et al 13 chekuri et al 6 contrast hall et al reference andor oline online type schedule deterministic randomized deterministic phillips et al 21 hall et al 13 4 4 schulz 26 3 hall et al 14 3 3 chakrabarti et al 5 28854 combining 5 14 24427 schedule table 1 summary approximation bounds 1j r j schedule obtained sequencing jobs order nondecreasing points lp schedule use jobdependent j yields schedule results discussed paper second double line subsequently anderson potts 2 gave deterministic 2competitive algorithm unitweight problem 1j r j rst constantfactor approximation algorithm due phillips stein wein 21 performance ratio 2 also works online deterministic 2competitive algorithms given stougie 36 hoogeveen vestjens 15 algorithms optimal deterministic online algorithms 15 chekuri motwani natarajan stein 6 gave randomized ee 1approximation algorithm optimal randomized online algorithms 37 39 exploit preemptive timeindexed lp relaxation one hand provides us highly structured optimal solutions hand enables us work mean busy times also use random points algorithm chekuri et al starts arbitrary preemptive schedule makes use random points relate value resulting schedule given preemptive schedule underlying lp relaxation approach gives better approximations 1j r insights limits power preemption link lp schedule preemptive timeindexed lp relaxation helps us obtain good approximations total weighted completion time variants algorithms also work online jobs arrive dynamically time point time one decide job process without knowledge jobs released afterwards even online setting compare value computed schedule optimal oline schedule derive bounds competitive ratios line setting see table 1 account evolution oline online approximation results single machine problem consideration main ingredient obtain results presented paper exploitation structure lp schedule surprisingly lp schedule solve strongly nphard 16 preemptive version problem 1j r however show lp schedule solves optimally preemptive problem related objective function j mean busy time job j e average point time machine busy processing j observe although 1j r equivalent optimization problems nonpreemptive case since c considering preemptive schedules approximation techniques presented paper also proved useful general scheduling problems problem precedence constraints 1j r sequencing jobs order random points based optimal solution timeindexed relaxation leads 27183approximation algorithm 27 2approximation algorithm identical parallel machine scheduling given 28 result based timeindexed lp relaxation optimal solution interpreted preemptive schedule fast single machine jobs assigned randomly machines sequenced order random j points preemptive schedule corresponding scheduling problem unrelated parallel machines r j r j j performance guarantee 2 obtained randomized rounding based convex quadratic programming relaxation 33 inspired timeindexed lp relaxations like one discussed herein 28 refer 32 detailed discussion use points machine scheduling problems signicant progress recently made understanding approximability scheduling problems average weighted completion time objective skutella woeginger 34 developed polynomialtime approximation scheme scheduling identical parallel machines absence release dates subsequently several research groups found polynomialtime approximation schemes problems release dates see resulting joint conference proceedings publication 1 details brie discuss practical consequences work savelsbergh uma wein 25 uma wein 38 performed experimental studies evaluate part quality lp relaxation approximation algorithms studied herein 1j r related scheduling problems rst authors report except instances deliberately constructed hard approach present formulation algorithms deliver surprisingly strong experimental performance also note ideas led improved approximation algorithms also lead heuristics quite eective empirical experiments furthermore extended give improved heuristics complex problems arise practice authors followup study 38 report coupled local improvement lpbased heuristics generally produce best solutions also nd simple heuristic often outperforms lpbased heuristics whenever machine becomes idle heuristic starts nonpreemptively processing available job largest w j p j ratio analyzing dierences lp schedule heuristic schedule chou queyranne simchilevi 7 subsequently shown asymptotic optimality online heuristic classes instances bounded job weights bounded processing times contents paper follows section 2 concerned lp relaxations relationship begin presentation discussion lp schedule section 21 review timeindexed formulation introduced dyer wolsey 9 show solved optimality lp schedule section 22 present mean busy time relaxation completion time relaxation prove among properties equivalence timeindexed formulation section 23 explores polyhedral consequences particular fact mean busy time relaxation scaling job processing times supermodular linear program jobbased method constructing lp schedule equivalent corresponding greedy algorithm section 3 deals approximation algorithms derived lp relaxations section 31 present method constructing j schedules allows us analyze bound job completion times resulting schedules section 32 derive simple bounds schedules j schedules using deterministic common uniformly distributed random j using appropriate probability distributions improve approximation bound value 17451 schedules section 33 value 16853 j schedules section 34 also indicate algorithms derandomized 2 time constructing deterministic schedules performance guarantees section 35 show randomized approximations also apply online setting section 36 present class bad instances ratio optimal objective function value lp bound arbitrarily close e 15819 constant denes lower bound approximation results obtained present approach conclude section 4 discussing related problems open questions relaxations section present two linear programming relaxations 1j r j j show equivalence discuss polyhedral consequences relaxations following preemptive schedule plays crucial role point time schedule preemptively available job highest w j p j ratio assume throughout paper jobs indexed order nonincreasing ratios w 1 wn pn ties broken according order therefore whenever job released job processed preempted released job smaller index refer preemptive schedule lp schedule see figure 1 example lp schedule011011011 figure 1 lp schedule 4job instance given r 1 r 4 5 higher rectangles represent jobs larger weight processing time ratio time shown horizontal axis notice lp schedule general minimize preemptive schedules surprising since preemptive problem 1j r strongly nphard 16 shown however total weighted completion time lp schedule always within factor 2 optimal value 1j r bound tight see 29 lp schedule constructed log n time see describe implementation may seen dynamic eventoriented using terminology 19 machinebased even executed online jobs dynamically arrive time algorithm keeps priority queue 8 currently available jobs yet completely processed ratio w j p j key another eld indicating remaining processing time scheduling decision made two types events job released job completes processing former case released job added priority queue latter case completed job removed priority queue either case top element priority queue one highest w ratio processed queue empty move next job release none jobs processed lp schedule complete implementation results total priority queue operations since operation implemented olog n time 8 algorithm runs log n time lp schedule also dened somewhat dierent manner may seen static jobbased 19 consider jobs one time order nonincreasing w j p j schedule job j early possible starting r j preempting whenever machine busy processing another job thus came earlier w j p j ordering pointofview leads alternate log n construction lp schedule see 10 21 timeindexed relaxation dyer wolsey 9 investigate several types relaxations 1j r j j strongest ones timeindexed consider weaker two timeindexed formulations call formulation uses two types variables processed time interval 1 zero otherwise j represents start time job j simplicity add p j j replace resulting expression c j gives equivalent relaxation subject upper bound makespan optimal schedule example refer relaxation preemptive timeindexed relaxation expression c j given 1 corresponds correct value completion time job j preempted interpretation terms mean busy times given next section case preemptions observe number variables formulation pseudo polynomial eliminate c j relaxation using 1 obtain transportation problem 9 result j assumed integral lemma 21 exists optimal solution j 2 f0 1g j indicated 9 solved log n time actually one derive feasible solution lp schedule letting lp j equal 1 job j processed theorem 22 solution lp derived lp schedule optimal solution proof proof based interchange argument consider optimal 01solution exist j k r j replacing j 0 j k 1 obtain another feasible solution increase objective function value 0 resulting solution must therefore also optimal repeating interchange argument derive exists optimal solution exist j k r j implies solution must correspond lp schedule particular despite pseudopolynomial number variables lp relaxation optimal solution obtained eciently make use fact well special structure lp schedule design analysis approximation algorithms see section 3 note spite nice properties preemptive timeindexed lp relaxation solves neither 1j r former case processing job lp solution may fail consecutive latter case equation 1 necessarily dene completion time job preemptive lp schedule shown next lemma 22 mean busy time relaxation given preemptive schedule let j indicator function processing job j time e j 1 machine processing j time 0 otherwise avoid pathological situations require preemptive schedule machine starts processing job positive amount time given preemptive schedule dene mean busy time j job j average time machine processing j e instance example given figure 1 used throughout paper mean busy time job 4 55 rst establish important properties j next two lemmas lemma 23 preemptive schedule let c j j denote completion mean busy time respectively job j job j job j preempted proof job j processed without preemption j processed intervals total length l 0 times c r j must processed time intervals total length l c j p j therefore proof complete let n denote set jobs dene let j2s j since machine capacity constraint 2 f0 1g may view indicator function job set thus dene mean busy time set 1 r dt note j unlike start completion time mean busy time job set simple weighted average mean busy times elements one consequence observation validity shifted parallel inequalities 3 see eg 10 23 24 lemma 24 set jobs preemptive schedule mean busy time vector equality holds jobs scheduled without interruption r min r min proof note r r min dt 1 r min r r min minimized uniquely minimized among feasible preemptive schedules jobs continuously processed r min r min ps minimum value psr min 2 ps lower bound feasible preemptive schedule result lemma 24 following linear program provides lower bound optimal value 1j r hence 1j r j j subject r proof following theorem later developments use notion canonical decompositions 10 set jobs consider schedule processes jobs early possible say order release dates schedule induces partition machine busy processing jobs exactly disjoint refer partition canonical decomposition set canonical identical canonical decomposition e canonical decomposition fsg thus set canonical feasible schedule jobs time interval r min r min sps note set example canonical whereas subset f1 2 3g decomposition ff3g f1 2gg let canonical decomposition n lemma 24 implies valid inequality mean busy time vector preemptive schedule words relaxation r may written min theorem 25 let lp j mean busy time job j lp schedule lp optimal solution r proof lemma 24 lp feasible solution r prove optimality lp construct lower bound optimal value r show equal objective function value lp recall jobs indexed nonincreasing order w ki denote canonical decomposition observe vector let w n1 p n1 0 therefore expressed nonnegative combination expressions sets construction lp schedule jobs canonical sets continuously processed r min r min lp schedule thus feasible solution r canonical set r min last equation follows lemma 24 combining 5 derive lower bound feasible solution r lower bound attained lp schedule theorems 22 25 derive values two relaxations r equal corollary 26 lp relaxations r yield optimal objective function value e weights w 0 value computed log n time proof equivalence lower bounds note mean busy time lp j job j lp schedule expressed lp lp solution derived lp schedule result follows directly theorems 22 25 shown earlier lp schedule constructed log n time although lp schedule necessarily minimize preemptive sched ules theorem 25 implies minimizes preemptive schedules addition lemma 23 lp schedule also optimal preemptive nonpreemptive problems preempt job example case processing times equal 1 jobs released date thus lp schedule provides optimal solution problems 1j r already known latter case coincides smiths ratio rule 35 see queyranne schulz 24 former case 23 polyhedral consequences consider polyhedral consequences preceding results let p 1 feasible region dened constraints relaxation addition denote pr fm 2 r polyhedron dened constraints relaxation r theorem 27 polyhedron pr convex hull mean busy time vectors preemptive sched ules moreover every vertex pr mean busy time vector lp schedule ii polyhedron pr also image p 1 space mvariables linear mapping dened j 2 n proof lemma 24 implies convex hull mean busy time vectors feasible preemptive schedules contained pr show reverse inclusion suces show every extreme point pr corresponds preemptive schedule b every extreme ray pr direction recession convex hull mean busy time vectors property second part statement follow theorem 25 fact every extreme point pr unique minimizer note extreme rays pr n unit vectors r n immediate extension preemptive schedules mean busy times results balas 3 implies unit vectors r n directions recession convex hull mean busy time vectors completes proof ii rst show image mp 1 contained pr let vector p 1 n canonical decomposition g denition j r min inequality follows constraints dening p 1 interchange argument already used proof theorem 22 shows 2 pr thus mp 1 show reverse inclusion use observation proof part pr represented sum convex hull mean busy time vectors lp schedules nonnegative orthant since equation 6 mean busy time vector lp lp schedule projection corresponding 01vector lp remains show every unit vector e j direction recession mp 1 x lp schedule let lp denote associated 01 yvector mean busy time vector respectively job j 2 n real 0 need show lp let max argmaxfy lp ng choose lp choose integer k otherwise associated preemptive schedule processing job j done interval 1 postponed time units interval 1 therefore mean busy time vector k k 6 j let 0 p j vector lp e j convex combination corresponding convex combination lp 0 since p 1 convex since mapping linear lp view earlier results single machine scheduling identical release dates 22 well parallel machine scheduling unit processing times integer release dates 24 interesting note feasible set pr mean busy time relaxation scaling job processing times supermodular polyhedron proposition 28 set function h dened 4 supermodular proof consider two elements subset n n fj kg may construct lp schedule minimizing using jobbased method considering rst jobs job k note considering jobs sequence leads schedule minimizing jobs weighted processing times objective function denition 4 resulting mean busy times lp satisfy note job k scheduled earlier release date rst p k units idle time left insertion jobs thus lp k mean p k time units similarly may construct lp schedule whose mean busy time vector denoted f considering rst jobs f f job k f inserted subset scheduled job k cannot use idle time interval earlier used former schedule lp previously available idle time may occupied job j causing delay mean busy time job k thus f k therefore f suces establish h supermodular alternate proof supermodularity h derived 10 fact observed dyer wolsey already mentioned relaxation becomes transportation problem elimination c j indeed interpretation nemhauser wolsey fisher 20 result shapley 31 follows value transportation problem function supermodular one consequences proposition 28 jobbased method construct lp schedule manifestation greedy algorithm minimizing supermodular polyhedron pr nally note separation problem polyhedron pr solved combina torially one separate family inequalities trying possible values r min n applying log n separation routine queyranne 22 problem without release dates overall separation routine implemented 2 time observing bottleneck step queyrannes algorithm sorting mean busy times jobs needs done whole job set provably good schedules lp relaxations section derive approximation algorithms 1j r j j based converting preemptive lp schedule feasible nonpreemptive schedule whose value bounded terms optimal lp value yields results quality computed schedule lp relaxations consideration since value computed schedule upper bound optimal lp value lower bound value optimal schedule section 36 describe family instances ratio optimal value 1j r problem lower bounds zr zd arbitrarily close e 15819 lower bound e e 1 sets target design approximation algorithms based lp relaxations order convert preemptive lp schedule nonpreemptive schedule make use socalled points jobs 0 1 point j job j rst point time fraction job j completed lp schedule e j processed p j time units particular j 1 equal completion time dene start time job j notice denition mean busy time lp j job j lp schedule average points also use following notation xed job j 0 1 denote fraction job k completed lp schedule time j k particular j amount idle time occurs time 0 start job j lp schedule denoted idle note k idle implicitly depend xed job j construction idle time start completion job j lp schedule therefore express js point given 0 1 dene schedule schedule jobs processed nonpreemptively early possible order nondecreasing points denote completion time job j schedule c idea scheduling nonpreemptively order points preemptive schedule introduced phillips stein wein 21 used many subsequent results area idea extended individual e jobdependent j points 1 denote vector consisting j j schedule constructed processing jobs early possible nondecreasing order j points completion time job j j schedule denoted c figure compares schedule j schedule derived lp schedule figure 1 sequel present several results quality schedules j schedules results also imply bounds quality lp relaxations previous section main result construction random j schedule whose expected value factor 16853 optimal lp value therefore lp relaxations r deliver lower bound least 05933 16853 1 times optimal value corresponding randomized algorithm implemented online competitive ratio 16853 running time log n also derandomized run oline 2 time also investigate case single common show best schedule always within factor 17451 optimum figure 2 nonpreemptive schedule j schedule shown lp schedule respectively notice common value would lead latter schedule 31 bounding completion times j schedules analyze completion times jobs j schedules consider nonpreemptive schedules similar structure however constructed slightly dierent conversion routine call j conversion consider jobs j 2 n order nonincreasing j points iteratively change preemptive lp schedule nonpreemptive schedule applying following steps remove j p j units job j processed j leave machine idle corresponding time intervals say idle time caused job j ii delay whole processing done later iii remove remaining 1 j fraction job j machine shrink corresponding time intervals shrinking time interval means discard interval move earlier corresponding amount processing occurs later iv process job j released time interval figure 3 contains example illustrating action j conversion starting lp schedule figure 1 observe resulting schedule jobs processed nondecreasing order j points job j started time latter property useful analysis online j schedules figure 3 illustration individual iterations j conversion lemma 31 completion time job j schedule constructed equal proof consider schedule constructed conversion completion time job j equal idle time start plus sum processing times jobs start later j since jobs processed nondecreasing order j points amount processing completion job j idle time start job j written sum idle time idle already existed lp schedule js start plus idle time start job j caused steps j conversion notice steps iii create additional idle time since shrink aected time intervals job k started later j e k units idle time jobs k contribute units idle time result total idle time start job j written completion time job j schedule constructed equal sum expressions 9 10 result follows equation 8 follows lemma 31 completion time c j job j nonpreemptive schedule constructed hence feasible schedule since j schedule processes jobs early possible order j conversion schedule obtain following corollary corollary 32 completion time job j j schedule bounded 32 bounds schedules j schedules start result quality schedule xed common value theorem 33 xed value schedule within factor max optimal lp value particular 2 bound 1 2 simultaneously ii length schedule within factor 1 optimal makespan proof proof ii immediate consequence 8 corollary 32 follows proof theorem 25 sucient prove canonical set indeed using 5 lemma 24 would follow proving result consider canonical set let us assume renumbering jobs ordering necessarily anymore nonincreasing order w j p j fix job j 2 corollary 32 derive k k represents fraction job k processed lp schedule j let r denote set jobs k k r min thus k since canonical set jobs processed continuously lp schedule r min therefore every job k k either r observe implies pr 1 r min thus simplify 12 since jobs scheduled gaps r min r min ps combining 13 14 derive multiplying p j summing get implies 11 sequel compare completion time c j every job j completion time lp schedule however xed common value exist instances show type jobbyjob analysis give bound better 1 one also show given value exist instances objective function value schedule bad twice lp lower bound view results advantageous use several values appears instance simultaneously bad choices fact points develop full power combination randomization e common even jobdependent j chosen randomly 0 1 according appropriate density function also motivated equation 7 relates expected point job uniform distribution lp variable lp random values j analyze expected value resulting schedule compare optimal lp value notice bound expected value proves existence vector j corresponding j schedule meets bound moreover results always compute j polynomial time derandomizing algorithms standard methods see propositions 38 313 although currently best known bounds achieved j schedules jobdependent j investigate schedules single common well one hand helps better understand potential advantages j schedules hand randomized algorithm relies single admits natural derandomization fact easily compute schedule least objective function value 0 1 refer schedule bestschedule proposition 38 show n dierent schedules bestschedule constructed 2 time evaluating dierent schedules warmup exercise kind analysis use start proving bound 2 expected worstcase performance ratio uniformly generated j schedules following theorem result improved using intricate probability distributions taking advantage additional insights structure lp schedule theorem 34 let random variables j pairwise independently uniformly drawn 0 1 expected value resulting j schedule within factor 2 optimal lp value proof remember optimal lp value given get claimed result prove eu c denotes expectation function f random variable latter uniformly distributed overall performance follows jobbyjob bound linearity expectations consider arbitrary xed job j 2 n analyze expected completion time j rst keep j xed consider conditional expectation eu c random variables j k independent k 6 j corollary 32 equation 8 yield eu c obtain unconditional expectation eu c integrate possible choices eu c z 1eu c last equation follows 7 turn deriving improved results start analysis structure lp schedule consider job j assume lp schedule j preempted time processing resumes time jobs processed smaller index result jobs completely processed times thus lp schedule start time completion time job j machine constantly busy alternating processing portions j complete processing groups jobs smaller index conversely job preempted wait least job j complete processing resumed capture structure partitioning xed job j set jobs n n fjg two subsets n 1 denote set jobs processed start completion job j remaining jobs put subset n 1 notice function k constant jobs k 2 n 1 simplify notation write k k j jobs k 2 n 2 fraction job j processed start job k function k given rewrite equation 8 plugging 15 equation 7 yields corollary 32 rewritten k 2 n 2 used fact k k j equivalent j k expressions 15 16 17 ect structural insights need proving stronger bounds j schedules schedules sequel mentioned second ingredient improvement bound 2 sophisticated probability distribution random variables j view bound c given 17 cope two contrary phenomena one hand small values k keep terms form 1 righthand side 17 small hand choosing larger values decreases number terms rst sum righthand side 17 balancing two eects contributes reducing bound expected value c 33 improved bounds schedules subsection prove following theorem theorem 35 let 04675 unique solution equation satisfying 0 1 dene c 1 e 17451 1 1 08511 chosen according density function expected value resulting random schedule bounded c times optimal lp value prove theorem 35 state two properties density function f crucial analysis corresponding random schedule lemma 36 function f given theorem 35 density function following properties property used bound delay job j caused jobs n 1 corresponds rst summation righthand side 17 second summation ects delay caused jobs n 2 bounded property ii proof lemma 36 short computation shows function f density function since z e order prove property observe 2 0 2 1 therefore get property ii holds 2 1 since lefthand side 0 case 2 0 e completes proof lemma proof theorem 35 lemma 36 denotes expected value random variable distributed according density f given theorem 35 thus using inequality 17 lemma 36 derive c last inequality follows denition n 1 k last equality follows 16 notice density function satisfying properties ii lemma 36 value c 0 directly leads jobbyjob bound e f c corresponding random schedule easy see unit function satises lemma 36 c establishes following variant theorem 34 corollary 37 let random variable uniformly drawn 0 1 expected value resulting schedule within factor 2 optimal lp value use exponential density function motivated rst property lemma 36 notice function 7 c 1e satises equality hand exponential function truncated order reduce term second property fact truncated exponential function f theorem 35 shown minimize c 0 therefore optimal analysis addition exists class instances ratio expected cost schedule determined using density function cost optimal lp value arbitrarily close 1745 shows preceding analysis essentially tight conjunction truncated exponential functions theorem 35 implies bestschedule value 17451 zr following proposition shows randomized algorithm yields schedule easily derandomized sample space small proposition 38 n dierent schedules computed 2 time proof goes 0 1 schedule changes whenever point say reaches time job j preempted thus total number changes schedule bounded total number preemptions since preemption occur lp schedule whenever job released total number preemptions n 1 number schedules n since schedules computed time result running time follows 34 improved bounds j schedules subsection prove following theorem theorem 39 let 04835 unique solution equation e satisfying 0 1 dene 16853 let chosen pairwise independently probability distribution 0 1 density function expected value resulting random j schedule bounded c times optimal lp value bound theorem 39 yields also bound quality lp relaxations corollary 310 lp relaxations r deliver log n time lower bound least 05933 16853 1 times objective function value optimal schedule following lines last subsection state two properties density function g crucial analysis corresponding random j schedule lemma 311 function g given theorem 39 density function following properties denotes expected value random variable distributed according g notice similarity lemma 311 lemma 36 last subsection properties ii used bound delay job j caused jobs n 1 n 2 respectively righthand side inequality 17 property yield e g c 1 proof lemma 311 short computation shows thus follows arguments proof lemma 36 g density function property holds order prove property ii rst compute z e property ii certainly holds 2 1 2 0 get e e e e completes proof lemma proof theorem 39 analysis expected completion time job j random schedule follows line argument developed proof theorem 34 first consider xed choice j bound corresponding conditional expectation e g c second step bound unconditional expectation e g c integrating product interval 0 1 xed job j xed value j bound 17 lemma 311 yield last inequality follows 15 using property ii equation 16 yields result follows linearity expectations total number possible orderings jobs log n show following lemma maximum number j schedules 2 n 1 use following observation let q j denote number dierent pieces job j lp schedule thus q j represents number times job j preempted plus 1 since n 1 preemptions lemma 312 maximum number j schedules 2 n 1 bound attained proof number j schedules given note q preempted lp schedule thus 1 mean inequality furthermore bound attained q achieved example instance therefore contrast case random schedules cannot aord derandomize randomized 16853approximation algorithm enumerating j schedules instead use method conditional probabilities 18 inequality 17 obtain every vector upper bound objective function value corresponding j schedule denotes righthand side inequality 17 taking expectations using theorem 39 already shown c 16853 job j 2 n let g denote set intervals j corresponding q j pieces job j lp schedule consider jobs one one arbitrary order say assume step j derandomized algorithm identied intervals q using conditional expectations lefthand side inequality since exists least one interval q j 2 q j therefore suces identify interval q satisfying 18 may conclude determined way interval q j every job note schedule 2 q q q n deterministic objective function value j schedule desired every checking whether interval q amounts evaluating terms may computed constant time since observed lemma 312 total follows derandomized algorithm runs 2 time proposition 313 randomized 16853approximation algorithm derandomized resulting deterministic algorithm runs 2 time performance guarantee 16853 well constructing provably good schedules online subsection show randomized approximation results also apply online setting several dierent online paradigms studied area scheduling refer 30 survey consider setting jobs continually arrive time time must construct schedule time without knowledge jobs arrive afterwards particular characteristics job e processing time weight become known release date already shown section 2 lp schedule constructed online unfortunately given vector j corresponding j schedule cannot constructed online learn position job k sequence dened nondecreasing points time k k therefore cannot start job k earlier point time online setting hand however start time k j schedule earlier k point k k although j schedule cannot constructed online discussion reveals following variant call online j schedule constructed online given vector j process jobs early possible order j points additional constraint job k may start time k k see figure 4 example note idea delaying start jobs sucient information good decision available setting introduced phillips stein wein 21 notice nonpreemptive schedule constructed straints value therefore upper bound value online j schedule analysis last subsections relies bound given corollary 32 also holds schedule constructed 31 yields following results theorem 314 instance scheduling problem 1j r j j choosing 2 constructing onlineschedule yields deterministic online algorithm competitive ratio 1 24143 running time log n b choosing j randomly pairwise independently 0 1 according density function g theorem 39 constructing online j schedule yields randomized online algorithm competitive ratio 16853 running time log n competitive ratio 16853 theorem 314 beats deterministic online lower bound 2 unitweight problem 1j r 36 problem stougie vestjens proved lower bound e randomized online algorithms 37 39 figure 4 online schedule previously considered instance j points lp schedule shown comparison 36 bad instances lp relaxations subsection describe family instances ratio optimal value 1j r j j problem lower bounds zr zd arbitrarily close e instances n n 2 jobs follows one large job denoted job n small jobs denoted 1 large job processing time release date r n 1 small jobs j zero processing time weight release date r throughout paper assumed processing times nonzero order satisfy assumption could impose processing time 1k small jobs multiply processing times release dates k make data integral let k tend innity simplicity however let processing time small jobs 0 lp solution job n start time 0 preempted small jobs hence mean busy times lp objective function value notice completion time job j fact equal lp actual value preemptive schedule equal zr consider optimal nonpreemptive schedule c let c n 0 k number small jobs processed job n optimal process small jobs release dates start processing job n date r job k also optimal process remaining jobs k job n let c k denote resulting schedule c k otherwise objective function value nn 1 therefore optimal schedule c n 1 objective function value n grows large lp objective function value approaches e 1 optimal nonpreemptive cost approaches e even though polynomialtime approximation schemes discovered problem 1 algorithms developed variants likely superior practice experimental studies savelsbergh et al 25 uma wein 38 indicate lpbased relaxations scheduling order j points powerful tools variety scheduling problems several intriguing questions remain open regarding quality linear programming relaxations would interesting close gap upper 16853 lower 15819 bound quality relaxations considered paper point situation strongly nphard 16 problem 1j r similar shown 29 completion time relaxation worst case least factor 87 factor 43 optimum latter bound achieved scheduling preemptively lpbased random points chekuri et al 6 prove optimal nonpreemptive value ee 1 times optimal preemptive value example section 36 shows bound tight dyer wolsey 9 propose also nonpreemptive timeindexed relaxation stronger preemptive version studied relaxation involves variables job time representing whether job completed rather simply processed time relaxation least strong preemptive version worstcase ratio known strictly better randomized online algorithms also gap known upper lower bound competitive ratios given end section 35 deterministic online algorithms 2competitve algorithm anderson potts 2 optimal acknowledgements research rst author performed partly author core louvain laneuve belgium supported part nsf contract 9623859ccr research second author supported part research grant nserc natural sciences research council canada uniturim spa societa per luniversita nel riminese whose support gratefully acknowledged research third author performed partly department mathematics technische universitat berlin germany fourth author supported part donet within frame tmr programme contract number erb fmrxct980202 staying core louvainlaneuve belgium academic year 199899 fth author supported research fellowship maxplanck institute computer science saarbrucken germany also grateful anonymous referee whose comments helped improve presentation paper r introduction algorithms rinnooy kan rinnooy kan rinnooy kan p randomized algorithms mathematical programming 82 199223 1998 extended abstract appeared title scheduling jobs arrive time r burkard cited personal communication tr ctr jairo r montoyatorres competitive analysis better online algorithm minimize total completion time singlemachine journal global optimization v27 n1 p97103 september leah epstein rob van stee lower bounds online singlemachine scheduling theoretical computer science v299 n13 p439450 r n uma joel wein david p williamson relationship combinatorial lpbased lower bounds nphard scheduling problems theoretical computer science v361 n2 p241256 1 september 2006 martin w p savelsbergh r n uma joel wein experimental study lpbased approximation algorithms scheduling problems informs journal computing v17 n1 p123136 winter 2005 martin skutella convex quadratic semidefinite programming relaxations scheduling journal acm jacm v48 n2 p206242 march 2001 f afrati milis designing ptass minsum scheduling problems discrete applied mathematics v154 n4 p622639 15 march 2006 rolf h mhring andreas schulz frederik stork marc uetz solving project scheduling problems minimum cut computations management science v49 n3 p330350 march