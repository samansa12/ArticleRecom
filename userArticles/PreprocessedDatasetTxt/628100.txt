exploiting spatial indexes semijoinbased join processing distributed spatial databases abstractin distributed spatial database system user may issue query relates two spatial relations stored site sheer volume complexity spatial data spatial joins two spatial relations different sites expensive terms computation transmission cost paper address problems processing spatial joins distributed environment propose semijoinlike operator called spatial semijoin prune away objects contribute join result operator also reduces transmission local processing costs later join operation however cost elimination process must taken account consider approaches minimize overheads also studied compared two families distributed join algorithms based spatial semijoin operator first based multidimensional approximations obtained index rtree second based singledimensional approximations obtained object mapping conducted experiments real data sets report results paper b introduction queries spatial databases frequently involve relationships two spatial entities relationships include containment intersection adjacency proximity example query schools adjacent areas zoned industrial purposes requires adjacency relationship query police stations within 1 kilometer major road involves proximity relationship answer queries spatial joins used materialize relationships two spatial entities like relational join operation spatial joins expensive received much research attention recently 5 9 8 11 12 14 15 spatial database research date largely focused singlesite databases prospective applications call distributed spatial databases representative example government agencies sharing core data sets across agencies shown provide high savings 33 legislative organizational requirements make difficult establish single unified database rather data sharing must approached problem distributed access many autonomous databases realize full potential distributed spatial database system many issues addressed issues similar arise designing heterogeneous database systems 30 include integration existing schemas data processing optimization distributed queries transaction processing issues however issue processing distributed spatial query largely ignored distributed spatial database system user may issue query joins two spatial relations stored different sites sheer volume complexity spatial data lead expensive spatial join processing across sites terms computation transmission cost paper focus design distributed spatial join algorithms unlike conventional distributed databases transmission cost dominant 26 transmission cost processing cost may comparable distributed spatial databases thus longer appropriate design algorithms minimize transmission cost alone instead design study distributed spatial join algorithms based concept spatial semijoins spatial semijoin eliminates objects transmission reduce transmission local processing costs elimination performed spatial selection one database using approximations spatial descriptions inherently elimination process introduces additional costs hence choice approximation critical performance distributed algorithms varying approximations spatial descriptions study tradeoffs transmission cost processing cost earlier paper 4 proposed distributed semijoinbased strategy employs singledimensional approximations obtained object mapping possible join optimization strategy heterogeneous spatial database system 3 technique allows us exploit sortmerge algorithm paper built extended initial work besides reporting experimental studies algorithms also propose new family join strategies employ spatial semijoin operator new algorithms based multidimensional approximations obtained index study rtree index use bounding boxes stored existing rtree approximations conducted extensive experiments semijoinbased algorithms real data sets results show methods effective reducing total processing cost distributed join processing also report comparative study two families algorithms remainder paper organized follows next section shall look issues involved distributed spatial join processing also review uniprocessor spatial join algorithms section section 3 introduces concept spatial semijoin present framework designing distributed spatial join algorithms section 4 describe two families join strategies studied section 5 present analyze results experiments representative database finally summarize conclusions section 6 2 spatial join processing section review uniprocessor join algorithms particular pay attention join algorithms employ rtrees 13 locational key techniques 10 distributed spatial join strategies based 21 uniprocessor join processing brief review several spatial join processing algorithms studied experimental analytical results shown algorithms employ indexing ordering techniques much efficient simple nestedloops joins 9 11 12 17 looking schemes worth pointing several spatial join algorithms recently proposed nonindexed relations patitionbased merge join 27 spatial hash join 18 size separation spatial join 15 scalable sweepingbased spatial join 5 211 joins based multidimensional indexing techniques spatial joins performed efficiently exploiting existing indexes rotem 28 applied concept join indexes 34 two frequently joined spatial relations indexed grid files 22 lu han also proposed similar mechanism using distance metrics facilitate fast access spatial window queries 20 approximate join indexes 19 speeds join processing precomputing pairs index pages contain matching objects 32 join algorithm relations indexed filter trees proposed several spatial join algorithms based rtreelike indexes also studied 12 9 17 rtree 13 variants r tree 31 r tree 7 widely used speed access multidimensional spatial objects like tree rtree heightbalanced internal rtree node contains entries form mbr childptr mbr represents minimum bounding rectangle mbr enclosing objects described child node pointed childptr leaf node contains entries form mbr oid mbr mbr object oid points figure 1 illustrates index structure rtree spatial join algorithms based rtrees require relations indexed relation indexed one created temporally join processing 17 basic idea traverse spatial indexes simultaneously entries internal nodes checked see overlap condition true subtrees recursively traversed results produced leaf nodes reached 12 breadthfirstsearch algorithm adopted traversing tree depthfirstsearch algorithm employed 9 17 figure 1 rtree index 212 joins based linearized singledimensional object mapping linearizing spatial objects advantage sortmerge join methods exploited sortmerge join methods require best case data sets scanned various techniques ordering multidimensional objects using singledimensional values proposed 10 23 one popular ordering techniques based bit interleaving proposed morton 21 23 space recursively divided four equalsized quadrants quadtree 29 forming hierarchy quadrants quadrants linearized based zordering see figure 2 objects accessed quickly using onedimensional indexes b tree zvalues join two relations performed using mergelike operation zvalues objects 24 25 similar approach adopted 10 however quadrant unique key base 5 attached figure 2 illustrates example key assignment seen figure keys traced zorder enumeration grid cells 23 object fully contained subspace assigned key improve approximation objects quadrants object assigned k locational keys 10 4 example using 4 rectangular object figure 2 assigned keys 1100 1233 1300 1410 spatial objects held sorted ascending sequence locational key value member sorted list consisting object identifier mbr assigned locational key b tree used provide direct access spatial objects based locational keys 1 consider two spatial relations r joined figure 3a shows objects figure 2 assignment locational keys r figure 3b shows locational key values objects example allowed object maximum 4 keys joining two relations performed mergelike operation along two sorted lists locational keys note following first join nonequi join example locational key value 1240 matches two locational key values r1 namely 1241 1242 second results may contain duplicates object multiple keys different pairs keys objects may intersect example two resulting pairs r1 s4 finally results may contain false drops ie results obtained matching locational keys actual objects match looking figure 3a notice two intersections obtain four pair r1 s4 r2 s2 false drops arises locational keys approximations actual objects 22 issues distributed spatial join processing much research done distributed query processing see 26 37 unique characteristics spatial data large volume large data items complex operations poses interesting challenges traditionally assumed transmission data dominates distributed query processing performance result many algorithms designed minimize transmission cost 26 assumption valid old days network speeds slow wide area networks assumed transmission cost exporting spatial data set one site another high assumption may longer valid distributed spatial databases high local processing cost spatial operations local processing cost cannot ignored since ffl many spatial databases realworld interest large sizes ranging tens objects r objects sample objects two relations b sortmerge join processing figure 3 local join processing using locational keys thousands millions objects ffl spatial descriptions objects typically extensive ranging hundred bytes land information system applications megabytes natural resource applications 2 ffl many basic spatial operations testing intersection two polygons expensive broad indication relative costs operations transmission land parcel spatial description average size 48 bytes ethernet local area network requires milliseconds hand retrieving polygon database 50000 polygons using intersection qualification costs region 2 milliseconds sun sparc10 machine challenge develop new distributed spatial join strategies take account transmission cost well local processing cost paper unless otherwise stated r represent two spatial relations r resides site r site site site spatial join r spatial attributes ra sb result spatial join produced site site 3 framework semijoinbased spatial join straightforward approach perform spatial join r transmit whole r r site site spatial join performed site using existing uniprocessor join algorithm method though simple incurs high transmission cost high local processing cost section present alternative approach based concept semijoin first look semijoin operator spatial databases called spatial semijoin present framework designing semijoinbased algorithms 31 spatial semijoin conventional distributed databases semijoin operator 6 proposed reduce transmission costs semijoin relation r another relation join condition ra sb relation r 0 r records r 0 satisfy join condition scalar comparison operator ie 1 join r located sites r site site respectively performed using semijoin three steps first projected joining attribute site resultant set distinct values say 0 transmitted r site next semijoin r 0 performed r site give r 0 sent site finally join r 0 performed site produce join result since r 0 fewer records r transmitting r 0 cheaper moreover saving local processing costs evaluation final join site site clearly additional local processing transmission operations performed design objective ensure net saving cost semijoin concept readily adapted perform joins distributed spatial databases however conventional semijoin extended additional considerations peculiar spatial databases considerations ffl conventional semijoin uses distinct values joining attribute minimize transmission cost site r site cost evaluate semijoin however spatial descriptions intrinsically complex data types represent irregular nonoverlapping partitions space direct equivalent projection singlevalue attribute joining attribute spatial description consider example relation representing soil types region record describes polygonal area occupied certain soil type polygons represented arrays coordinates vertices natural resource databases spatial descriptions typically hundreds thousands bytes long 9 cadastral databases descriptions much smaller still region 100 bytes 2 therefore transmitting spatial descriptions remains costly ffl evaluation spatial relationships containment intersection adjacency two polygons complex expensive compared testing equality two singlevalue attributes example study shows testing intersection two polygons average six vertices costs 250 microseconds sun sparc10 workstation equality test two singlevalue attributes order 01 microseconds 6 set cut transmission cost local processing cost evaluate semijoin spatial attributes r propose approximations objects r computationally less expensive weaker spatial relationship used approximations weaker spatial relationship must satisfy property conservation ie two objects spatially related approximations must also related weaker relationship example shown figure 4 object e 2 possibly contained object e 1 approximation e2 figure 4 e1 overlaps e2 e1 includes e2 extent idea spatial semijoins using weaker relationships similar joins approximations 12 table 1 lists examples spatial relationships denoted approximations denoted theta distance e distance e 2 measured center points measured closest points contained e table 1 examples operations approximations using approximations weaker relationship motivated two observations first approximation shorter full descriptions spatial object hence incur lower transmission costs second geometricallysimple approximations minimum bounding rectangles allow simple evaluation spatial relationships reduce computation cost evaluating semijoin example referring figure 4 transmitting rectangles 2 vertices definitely cheaper transmitting irregularly shaped ob jects moreover checking rectangle intersection also cheaper checking polygon containment formally spatial semijoin defined follows definition 1 let r two spatial relations b attributes r spatial domains respectively spatial semijoin r attributes b denoted r defined r sbg g spatial operators f r f approximation functions g mapping function relationships following holds two records 2 r following remarks definition spatial semijoin 1 approximation functions used map complex spatial descriptions objects simpler form functions f r f may different example f r may map record r minimum bounding rectangle f may map record rotated minimum bounding rectangle 2 semantics dependent fact weaker relationship generally refer relationship may different table 1 illustrates 3 result point 2 ie using weaker relationship result spatial semijoin contains records r participate final join operation contrary conventional semijoin result semijoin set records r participate final join operation spatial semijoin using weaker relationship eliminate totally records contribute final answer words spatial semijoin result contains hits false drops hits records r satisfy join operation false drops satisfy join operation 32 framework distributed spatial join preprocessed using spatial semijoin basic framework spatial join r site site using semijoin expressed follows framework 1 distributed spatial join processing using semijoin input two relations r spatial attributes b respectively 1 2 3 send distinct values b f site r site 4 reduce r r fr ta b 5 send r 0 site 6 perform r 0 performance framework hinges approximations spatial descriptions ie step 2 restrict discussion three possible approximation functions ffl f identity function words spatial descriptions records sent r site ffl f 11 mapping record b 0 mapped record b f however instead complex spatial description simpler approximation bounds spatial object used example minimum bounding rectangles mbr records may used transmitted ffl f m1 mapping several records b 0 mapped b f record example smaller set mbrs used mbr bounds several spatial objects first two approaches lead b f many records b last approach hand potential varying size b f optimize total cost operation first approach false drops r 0 last approach highest number false drops r 0 however first approach incurs highest cost transmitting b f site r site last approach requires minimum transmission cost since number objects reduced using third approach might significant transmitting r 0 could still expensive effect defeat purpose spatial semijoin second third approaches follow closely usual practice spatial database structuring operations filter operation using simplified descriptions approximations followed full evaluation using full descriptions objects 23 9 8 11 36 35 typi cally polygonal object represented filter operation mbr mbrs inexpensive store 16 bytes singleprecision spatial relationships inexpensive evaluate filter test formulated reject cases satisfy full evaluation however typically reject cases satisfy full test design seeks good compromise false drops costs filter operation costs storing necessary deriving approximations place mbrs accurate single object filters convex hull ncorner gdegree rotated xrange gdegree rotated yrange 8 36 35 used reduce number false drops however filters require additional storage computation overhead points needed represent bounding box definition spatial semijoin description basic distributed join framework note independent approximations used spatial relationships joining attributes r thus adopting different approximations spatial relationships lead different families classes semijoinbased algorithms without loss generality shall adopt mbr basic approximation intersection spatial relationship 4 distributed spatial join algorithms section present several distributed intersectionjoin algorithms use spatial semi joins assume r indexed unreasonable since large spatial relations practice usually existing spatial indexes algorithms exploit existing spatial indexes two ways ffl provide approximations spatial objects ffl perform semijoin final join using indexes respective site 41 semijoins using multidimensional approximations category adopt rtree indexing technique rtree index exists exploited distributed spatial join processing since mbrs held level rtree form candidate set containing rectangles objects mbrs considered approximations objects words mbrs level rtree correspond result implicit m1 mapping function objects fact implicit m1 mapping function reasonably good one since data objects bounded mbr rtree clustered choosing level nodes rtree supply mbrs equivalent choosing number mbrs approximating using higher level rtree provides smaller number mbrs employing lower level provides better approximations semijoin r site final join site local singlesite spatial join operations since semijoin final join performed similar manner shall describe semijoin performed main concern index approximations 0 r site two possible techniques adopted ffl create rtree index 0 r site 2 allows us exploit existing join techniques proposed 9 require precomputed rtree indexes exist data sets join performed described section 211 ffl employ nestedindex technique performing series selections r technique essentially treats mbr 0 query window r 2 assumption r indexed using family indexes ie rtree case note restriction proposed semijoinbased join techniques r indexed using indexing schemes r tree 7 also create r tree 0 perform join accordingly preliminary experimental study indicated creating rtree expensive oper ation using data sets cost creating rtrees semijoin final join half total processing cost using second approach well simplicity employ nestedindex technique paper 42 semijoins using linearized singledimensional object mapping category employ quadtree based key assignment order spatial objects object locational keys mbr used approximations distributed spatial join performed transmitting locational keys since locational keys sorted semijoin r site final join site performed using mergelike algorithm described section 212 object multiple keys join result may contain duplicates hashing used remove duplicates note semijoin less complex final join since join nonequijoin scanning sorted lists final join requires backing hand semijoin requires full scan r full scan suffices check record r matches least one record 0 rather multiple records 0 final join cut cost io records backedup cached records r 0 join multiple records r 0 5 performance study performance study distributed join algorithms performed answer following questions ffl effective semijoinbased algorithms compared naive methods evaluating join distributed spatial databases ffl approximations lead best performance ffl relative performance algorithms based approximations cluster objects based singledimensional locational keys section report experiments conducted results 51 experimental setup data set land parcels whole state south australia used experi ments database 762000 records polygonal spatial descriptions average 6 vertices three pairs test sets extracted sets 10r 10s 10000 parcels 50r 50s 50000 parcels 100r 100s 100000 parcels generation pairs sets sought ensure controlled number intersecting parcels database initially divided three parts corresponding three geographic regions south australia upper part contained 280000 parcels middle 245000 parcels lower 237000 parcels set 10r generated randomly selecting two thirds records ie 6666 parcels upper part one third ie 3334 parcels middle set 10s generated selecting one third records middle part two thirds lower objects translated 100m northward eastward way objects database appear r become different pairs test sets similarly generated tests showed 135 intersections objects pair 10r 10s 3253 pair 50r 50s 13096 pair 100r 100s performance various algorithms compared total time distributed spatial join processing omit cost producing final result since strategies total cost perform distributed spatial join given c transmit c cpu c io respectively represent transmission cpu io cost required join transmission cost incurred includes cost transmitting approximations 0 site r site cost transmitting records r participate final join r 0 r site site cpu cost comprises several components include cost initiate ios initiate sending receiving objectsapproximations extract approximations perform semijoin r site perform final join site io cost comes fetching records generating 0 site storing 0 r site fetching 0 performing semijoin fetching r 0 storing r 0 site refetching r 0 performing final join various algorithms implemented sun sparc10 machine evaluation algorithms conducted performing semijoin final join using data sets provided information size approximations used evaluate semijoin size semijoin result also monitored cpu usage number page accesses value cpu cost monitored reflects cpu usage transmission io cost computed respectively follows number bytes transmitted delta bandwidth number page accesses delta io w bandwidth represents bandwidth communication network io represents cost per page access study unless otherwise stated bandwidth 100kbytessec io cost 8 kbytes block 0025 secblock system buffer size 10 mbytes rtrees trees locational keys implemented c two series experiments conducted first evaluates algorithms make use approximations obtained rtree second examines performance locational key algorithms also conducted experimental study relative performance rtree based locational key based algorithms 52 results algorithms using multidimensional approximations rtree index node 2kbytes node 56 entries least 28 entries characteristics trees summarized table 2 relation r relation cardinality 10k 50k 100k 10k 50k 100k height tree 3 3 4 3 3 4 number nodes 285 1415 2829 281 1397 2838 table 2 properties rtrees following distributed join strategies described section 41 studied following three strategies ffl algorithm rtn naive algorithm transmits r site evaluates join directly sequence selections ffl algorithm rtl mbr object used approximation mbrs taken leaf nodes rtree mbrs transmitted r site reduce r r sent site final join ffl algorithm rti algorithm similar algorithm rtl except approximations taken internal nodes level immediately leaf level rtree figure 5 shows result experiment relations r size figure lower middle upper bars represent cpu transmission io cost respectively corresponding information number objects transmitted semijoinbased algorithms tabulated table 3 table 0 denotes number approximations ie mbrs transmitted r site semijoin r 0 number r objects satisfying semijoin transmitted site final join number observations made bearing mind valid within context characteristics data sets used particularly short spatial descriptions land information systems data relatively high transmission rate used first cardinality rtl rti 100k100k 100000 17112 2759 33319 table 3 number objects transmitted rtreebased algorithms algorithms local processing cost c cpu significantly higher communication cost confirms local processing cost cannot ignored query processing distributed spatial joins note several recent join algorithms 5 15 18 27 employed local join processing techniques may reduce cpu io cost expect relative performance various schemes remain cpu cost io cost transmission cost 10r 10s 50r 50s 100r 100s rtl rtl rtl rtn rti rti rtn rtn rti total time sec figure 5 comparisons rtree based algorithms second result shows effect choosing number mbrs approximate tradeoff number mbrs used approximate number false drops shown table 3 large number mbrs results small number false drops small number mbrs leads large number false drops figure 5 see algorithm rtl uses large number mbrs approximate performs worse algorithm rtn rtl managed reduce communication cost semijoin processing cost much larger rtn rtl requires many rtree probes perform semijoin rtn takes perform final join additional overhead incurred final join enough offset benefits transmitting reduced r hand algorithm rti outperforms algorithm rtn transmitting smaller number mbrs leads lower communication processing cost semijoin however larger number false drops results higher communication processing cost final join turns total cost reduced particular significance observation containing rectangles internal nodes rtree one level leaf nodes good source approximating rectangles objects indexed relation means semijoin algorithm reuse spatial index normally recommended large spatial relations study effect size joining relations algorithms conducted experiments using relations different sizes results summarized figure 6 several interesting observations made first r large compared see cases 100r 10s 50r 10s rtl performs best joining large r small effect false drops becomes significant algorithms rtn rti large number false drops leads high communication cost high processing cost final join second algorithm rti outperforms rtn cases shows semijoin algorithms effective distributed spatial databases leaving section would like point exploited obvious optimization treating r larger relations may help cases expected context result site fixed site means additional phase shipping result r site site would necessary optimization adopted small r large relation pairs 50s 10r 100s 50r 100s 50r 10s 100r 50s 100r total time sec rtl rti figure based joins different relation sizes understand fully effects transmission rates algorithms also performed sensitivity studies transmission rates figures 7a7c show results tests communication bandwidth varies 20 kbytessec 100 kbytessec figure 7d shows result 100r 100s communication bandwidth varies 100 kbytessec 1 mbytessec effectively models range network speeds wan lan experiments length spatial description fixed 48 bytes result shows communication bandwidth low semijoin based algorithms efficient naive approach low communication bandwidth transmission cost may become dominant component total processing cost ability prune away objects satisfy join conditions makes semijoin based algorithms effective attractive hand transmission cost naive strategy transmit entirety r r site site high resulting poor performance however bandwidth increases naive strategy slowly catches semijoin based techniques bandwidth greater outperforms rtl bandwidth greater 300 kbytessec performs best higher communication bandwidth communication cost decreases processing cost dominates performance turns semijoinbased algorithms incur higher processing cost small spatial descriptions semijoinbased algorithms need write approximations r site site result semijoin site moreover ios incurred twice one write reread see tradeoff total io cost incurred io cost saved semijoinbased algorithms note io cost saved comes two components number false drops reduced algorithm naive method reduce false drops size spatial descriptions length spatial descriptions small io cost saved relatively small length spatial descriptions affects io communication cost figures 8a8c show results vary length spatial descriptions 50 bytes 2 kbytes lower end range towards 50 bytes models lis applications small spatial descriptions higher end towards 2kbytes represents gis applications long descriptions study communication bandwidth 100 kbytessec used result shows rti always outperform rtn regardless size spatial descriptions rtl outperforms rtn large spatial descriptions due significantly higher transmission cost io cost rtn comparing rti rtl note rtl outperforms rti large spatial descriptions size spatial descriptions creases false drops result data transmitted leading higher communication io cost hence rtl becomes comparable rti experiments doubt effectiveness using semijoins since rtn always worse either rti rtl except high communication band width however choice approximations critical effectiveness semijoin applications small spatial descriptions rti best choice hand applications large spatial descriptions rtl proves effective results expected spatial description small unless reduced r small saving significant case overhead transmitting reducing approximations high semijoinbased algorithms effective rti smaller number approximations better scheme spatial description large saving transmitting spatial objects interest e comm bandwidth kbytes rtn theta theta theta theta theta theta 10r total time comm bandwidth kbytes rtn theta theta theta theta theta theta b 50r total time comm bandwidth kbytes rtn theta theta theta theta theta theta c 100r total time comm bandwidth kbytes rtn theta theta theta theta theta theta theta 100r figure 7 rtree based joins varying communication bandwidth answer much higher accurate approximations effective cost transmitting approximations much lower cost transmitting real objects leaving section would like add data set used land parcels densely populated sparsely populated data sets may possible rtl outperform rti since mbrs rti likely generate large number false drops 53 results algorithms using single dimensional object mapping section report experiments results algorithms based single dimensional object mapping note results section also reported 4 data sets generated locational key values objects three e rtn theta theta theta theta theta theta theta theta record total time rtn theta theta theta theta theta theta theta b record total time theta theta theta theta theta c record figure 8 rtree based joins varying record width strategies based locational keys evaluated ffl algorithm qtn naive algorithm transmits r associated locational keys site evaluates join directly 3 ffl algorithm qt4 algorithm uses semijoin locational keys objects used approximations locational keys readily available leaf nodes tree study object four locational keys 4 duplicate keys removed transmission 3 conducted preliminary tests nestedloops algorithm transmits r site performs join series spatial selections r records results turned bad always worse algorithm qtn performed much 4 times worse algorithm qtn omitted nestedloops algorithm experiments 4 derive family algorithms different number locational keys preliminary study however shows 4 locational keys perform well ffl algorithm qtc algorithm qt4 may redundancy approximations first region represented locational key may contained region represented another locational key second 4 regions represented 4 distinct locational keys may merged bigger region represented single locational key remove redundancy approximations compacted transmitting r site denote new algorithm qtc note compaction result loss information compaction minimizes size approximations transmitted cost semijoin also incurs additional cpu cost compact approximations data sets object average 23 locational keys relations 23k locational keys table 4 summarizes data various relations used relation r relation cardinality 10k 50k 100k 10k 50k 100k total number keys 23189 115484 231426 23175 115904 232169 table 4 total number locational keys repeated sets experiments multidimensional approximation based algorithms using locational key algorithms results summarized figures 9 11 figure relations r size corresponding information data transmitted shown table 5 0 corresponds number locational keys transmitted r site r 0 cardinality semijoin result ie number objects r satisfy semijoin r 00 corresponding number locational keys transmitted semijoin result first observe unlike multidimensional approximation based algorithms communication cost locational key based algorithms significant two reasons account lower local processing especially cpu cost larger amount data transmitted using sortmerge join method two lists locational keys scanned simultaneously resulting low cpu cost semijoin final join hand size approximations could large transmitting approximations becomes costly second note algorithms based semijoins outperform naive approach algorithm qtn communication cost dominates performance algorithm qt4 performs better since able cut size data transmitted algorithm qtc outperforms qt4 slightly reduces size approximations transmitted result see qtc effective large large approximations compacted figure shows results experiments r different relation sizes cardinality qt4 qtc table 5 number objects transmitted locational key based algorithms qtc qtn qt4 qtc qtn qt4 qtc qtn qt4 50r 50s 10r 10s 100r 100s cpu cost transmission cost io cost1095 10515655151586115100total time sec figure 9 comparisons locational key based algorithms algorithms qt4 qtc inferior qtn larger r expected since large transmitting large number approximations r site less expensive transmitting entirety smaller r site thus savings gained reducing r cannot outweigh overhead figures 11a11c show results spatial joins different relation sizes communication bandwidth varies 20 kbytessec 100 kbytessec result communication bandwidth varies 100 kbytessec 1 mbytessec shown figure 11d shown figures semijoinbased algorithms effective lower communication bandwidth 300 kbytessec expected since communication cost critical locational key based algorithms data transmitted figures 12a12c note semijoinbased algorithms also perform best 50s 10s 100r 50s 100r60150qt4 qtc qtn 10r 100s 10r 50r 100s 50r total time sec figure 10 locational keys based joins different relation sizes varying length spatial descriptions longer spatial descriptions higher communication cost io cost leads poor performance naive methods note difference two semijoin algorithms significant fact difference decreases length increases compaction locational keys benefits transmission approximations change length spatial descriptions ie total cost increasing saving due compaction stays constant 54 comparison multidimensional singledimensional approximations algorithm fair comparison multidimensional approximations singledimensional algorithms include comprehensive study 1 set operations eg selection intersectionjoin adjacencyjoin etc 2 large set data 3 different applications eg gis lis would thus note comparative study rtree locational key algorithms reported section valid respect data sets furthermore restricted evaluation intersectionjoin operation based results experiments rtree based locational keys based algorithms compare rti qtc simplicity denote two algorithms rt qt respectively figures 13 representative sets results results note algorithm qt outperforms rt almost cases seen figure 13 algorithm rt costly terms local processing especially cpu cost probing rtree hand qt requires one scan sorted lists locational makes efficient largest test data sets used ie 100r 100s cache size 20 pages 4kbytes enough contain records r 0 join multiple records words relations need read high cpu cost rt decide investigate effect faster cpu speed fixed io communication costs figure 14 shows result 100r 100s using e comm bandwidth kbytes qtn theta theta theta theta theta 10r total time comm bandwidth kbytes qtn theta theta theta theta theta theta b 50r total time comm bandwidth kbytes qtn theta theta theta theta theta theta c 100r total time comm bandwidth kbytes qtn theta theta theta theta theta theta 100r figure 11 locational keys based joins varying communication bandwidth default setting figure xaxis denotes cpu speed factor eg value 2 refers processor speed twice used study shown figure faster processor rt outperform qt however achieved fast processors factor 6 figure 15 shows results communication bandwidth varies figure 15a spatial description short 50 bytes note qt superior wide range bandwidth gain performance rt decreases bandwidth decreases moreover spatial description large 1000 bytes rt performs equally well qt low bandwidth see figure 15b cases reason qt transmits data locational keys data recall locational keys object obtained mbr means qt less effective reducing r semijoin ie qt number false drops larger study find false drops produced e qtn theta theta theta theta theta theta theta theta record total time theta theta theta theta theta theta theta b record total time theta theta theta theta theta c record figure 12 locational keys based joins varying communication bandwidth qt twice much produced rt result data transmitted ios incurred figure compares two algorithms varying length spatial descriptions study conducted low high communication bandwidth 20 100 kbsec respectively results confirm earlier observation qt superior high communication bandwidth small spatial descriptions hand rt performs better low communication bandwidth large spatial descriptions summarize results show rt qt perform equally well gis applications lis applications qt best lis applications however faster cpu rt promising cpu cost transmission cost io cost qt rt qt rt qt rt 10r 10s 50r 50s 100r 100s10223105111796200 total time sec figure 13 comparisons rtree locational keys based algorithms 6 conclusions paper presented spatial semijoin operator basis improved algorithms evaluation joins distributed spatial databases formulation application draw concepts semijoin conventional databases filter test spatial query processing application spatial semijoin two families algorithms one based use multidimensional approximations based use singledimensional locational keys described multidimensional approximation based semijoin algorithms use minimum bounding rectangles derived nodes certain level rtree approximations hand singledimensional locational key based algorithms exploit sortmerge techniques representing object four singledimensional locational keys experimental study showed semijoin algorithms provide useful reductions cost evaluating join cases algorithms based approximations rtree choice number approximations critical different domains application particular geographic information system gis applications larger number approximations preferred however applications like land information system lis applications smaller number approximations result better performance locational key algorithms compacting large relations could reduce cost gain significant especially applications large spatial descriptions comparison two families algorithms showed locational key multidimensional approximation based semijoin algorithms suited gis applications locational cpu speed factor x rt qt figure 14 effect cpu speed based semijoin algorithms effective lis applications however faster cpu expect rtree based methods promising plan extend work several directions first would like cut high cpu cost rtree based algorithms second adequately addressed issue buffering recent results effect buffering buffering schemes provide good starting point 16 finally locational key based techniques besides compaction nonloss plan look approximations may impact performance algorithm locational key based techniques besides compaction nonloss plan look approximations may impact performance algorithm acknowledgement would like thank robert power csiro jeffrey x yu dept computer science australian national unviersity contributions discussion also read earlier draft paper provided helpful comments robert power also helped set experiments work anonymous referees also provided insightful comments help improve paper r evolutionary paths spatial database virtual database tool migration legacy lis spatial join strategies distributed spatial dbms scalable sweepingbased spatial join using semijoins solve relational queries efficient processing spatial joins using rtrees processing joins userdefined functions efficient computation spatial joins dynamic index structure spatial searching spatial joins using rtrees breadthfirst traversal global optimizations size separation spatial joins effect buffering performance rtrees spatial joins using seeded trees spatial hashjoins spatial joins precomputation approximation computer oriented geodetic data base new technique file sequencing grid file adaptable spatial query processing objectoriented database system comparison spatial query processing techniques naive parameter spaces algorithm computing overlay kdimensional spaces principles distributed database systems spatial join indices design analysis spatial data structures filter trees managing spatial data range size granularities gis planning land status assets management join indices optimization nway spatial joins using filters query optimization gis using filters distributed query processing tr ctr orlando karam fred petry optimizing distributed spatial joins using rtrees proceedings 43rd annual southeast regional conference march 1820 2005 kennesaw georgia edwin h jacox hanan samet spatial join techniques acm transactions database systems tods v32 n1 p7es march 2007