checking simple properties transition systems defined thue specifications possibly infinite deterministic labeled transition systems defined thue congruences labels considered functions states states paper provides method computing domains functions large class transition systems latter related model checking transition systems defined thue congruences b introduction countable transition systems model software digital hardware system appear one fundamental structures computer science research finite transition systems long tradition see eg 1 references infinite transition systems recently attracted attention computer scientists one basic problems concerning infinite transition systems effective description argue thue systems may used defining finite infinite transition systems semi thue systems may used mechanization tools reasoning underlying transition systems transition system models reallife system properties latter correspond theory transition system within suitable logic falsity sentence given transition system amounts emptiness certain set namely meaning sentence roughly speaking set obtained combination elementary relations interpret atomic formulae combination computable whenever elementary relations operators logic simple enough particular case hennessymilner logic 9 elementary relations unary operations boolean ones establish truth sentence central problem compute elementary relations subject present paper work related well established grounds formal verification based connections logic formal languages see eg 19 approach truth sentence finite transition system checked using automatatheoretic con structions decidable transition systems considered general possibly infinite consequence relations interpreting atomic formulae always computable situation truth decidable thus fall common pattern various areas automated reasoning deduction rules yield algorithm rather always terminating procedure follow similar approach problem first step towards formal verification call thue specifications may summarized follows semantics thue specification given labeled transition system states form language alphabet sigma labels belong alphabet gamma label gamma corresponds event may seen partial function states hoare triple p domain resp range partial function associated program p restricted precondition resp postcondition event 2 gamma may restricted partial function x u x u subsets set states written xu besides letters gamma words gamma may seen functions leads wordfunctions form u xu problem studied paper finding maximal subset x 0 x u defined ux 0 u however solutions interest may readily subject boolean operations emptiness problem decidable within chomsky hierarchy rational languages satisfy requirements leads us problem determining domain u xu whenever rational assuming x u also rational solve problem introduce procedure given form three deduction rules derive system leftlinear language equations wordfunction u xu procedure terminates least solution resulting system equations domain u xu deduction rulebased automated reasoning fundamental issues soundness completeness 20 soundness obvious requirement completeness may range certain situations unlike set consequences finite set axioms theory single structure need recursively enumerable instance since theory standard model arithmetics undecidable see eg 17 turingpost theorem one concludes theory recursively enumerable complete method deciding truth sentence cannot exist case limitation well known area inductive theorem proving see eg survey 4 similarly problem studied paper recursively enumerable hence procedure introduced complete particular procedure guaranteed terminate instance problem rational solution nevertheless establish reasonably weak sufficient condition termination show condition satisfied several wellknown classes semithue systems termination expected paper organized follows section 1 basic notions language theory string rewriting recalled section 2 introduces thue specifications models main problem paper stated section 3 related hennessymilner logic section 4 procedure treats problem provided section 5 devoted correctness procedure section 6 established problem recursively enumerable reasonably weak condition termination procedure provided techniques developed paper applied section 7 example simple railway network brief conclusions close paper assuming minimum theoretical background rational languages 16 stringrewrit ing 6 recall section several notions topics set notations sequel family rational languages alphabet sigma written ratsigma family rational subsets language l sigma written ratl viz stands powerset l systems equations speak rational expressions usual meaning also use rational expressions variables variables written assumed form infinite countable set subsequently shall often replace variables given rational expression r resp set equations e rational expressions possibly variables applying substitution oe resulting expression resp set equations written roe resp e oe substitution single variable x expression p may application expression r resp set equations e written left linear system equations set equations variable one equation variable lefthand side equation form rational expression rational expression denoting nonempty set variables equation called constant term say system equations e balanced variable x system exactly one equation e x lefthand side among solutions e respect wrt given variable x distinguish least solution wrt inclusion well known balanced linear system n equations least solution wrt variables one may compute solution using gauss elimination method details related topic reader may consult eg 3 suffixes prefixes quotients remainders given u v w 2 sigma called prefix v suffix w v 6 resp u 6 u resp v proper prefix suffix w note pref u resp suff u set prefixes resp suffixes word u notations extended sets instance given x sigma pref x stands u2x pref u words x z called factor w xz 6 proper factor w right quotient resp remainder sigma n sigma written mn resp min defined follows resp see steps procedure main point paper depend computations quotients remainders rational languages remember family rational languages closed quotients remainders 10 string rewriting semithue system sts alphabet sigma binary relation di also noted g called rule lr resp rr stands lefthand resp righthand side r ie g resp latter notation extended sets pairs eg binary relations functions etc especially ls denotes domain rs range sts 1 special 2 monadic rs fg jlj jrj l r 2 3 leftbasic x 2 rs x reduction relation sigma associated usual way namely rewrite relation reflexivetransitive closure word said reducible resp irreducible wrt belongs resp belong l set irreducible words sigma written sigma well known set rational whenever ls since sigma normal form word u wrt irreducible word v 2 sigma u v 1 say sts confluent words u v v 0 2 sigma u v u v 0 exists word w 2 sigma v w v 0 w addition terminating ie infinite chain said convergent well known convergence sts implies existence uniqueness normal form word throughout paper use convergent semithue systems unique normal form word u written u notation usually omit subscript ambiguity sts refer notice notations lower precedence concatenation thus uv stands normal form uv notations rewriting rational expressions similar individual words sake simplicity identify every rational expression language denotes may write etc rational expressions x context stand associated languages consequently speak normal form rational expression x write x reference set fu j u 2 xg possibly rational expression denoting set may useful restrict applications rules sts rewrite prefixes words aim may assume alphabet sigma may extended additional symbol words rewrite belong sigma sigma subset sigma sigma theta sigma sigma sigma theta sigma note rules sigma sigma theta sigma sigma particular case regular canonical systems 5 see also 815 latter known generating rational languages convergent thue specifications languages models convergent thue specification cts triple hsigma state alphabet gamma event alphabet r rational subset sigma sigma sigma sigma sigma theta sigma sigma finite convergent sts sigma gamma word r irreducible ie r 2 rat sigma sigma distinction state alphabet event alphabet importance theoretical point view useful practical situations simply write hsigma r si recall convergence decidable general contrary rational language r decidable whether r aim thue specifications provide means specifying verifying processes article discuss approach specification technique focuses merely use restricted version notion normal form common termrewriting general version normal form word u wrt irreducible word v 2 sigma u v basic problem related formal verification field semithue systems needed moreover since intersted deterministic processes consider confluent semi thue systems semantics thue specifications given terms variant labeled transition systems formally labeled transition system lts tuple hqa set states gamma alphabet 2 qa initial state ffi qa theta gamma theta qa transition relation q q 0 say q resp q 0 origin resp target transition labeled transition system deterministic q q implies q state q 2 qa recognizes set words defined smallest set satisfying following conditions language written l set words recognized states namely q2qa definition 21 lts initial model cts following holds u v 2 r ua language l cts cts language initial model l cag c c c c c deltaff au c c c c c c c c deltaff au c c gammapsi r b c gammapsi r b c c c c c c c deltaff au deltaff au ae ae ae ae ae ae ae ae z z z z z z z z c c c b fig 21 convergent thue specification initial model emphasize according definition states qa initial model identified words r may observed confluence sufficient initial model deterministic consequently convergent thue specifications model deterministic processes henceforth initial model cts ffi considered function write ffi u v instead u v 2 ffi another important observation language cts always closed nonempty prefixes language transition system speak initial model one may define satisfaction relation labeled transition systems thue specifications one may consider initial object category models cts initial object may alternatively characterized initial model sense definition obviously initial model unique isomorphism always exists example convergent thue specification together initial model provided fig 21 example identification set states r 1 left exercise reader sake simplicity sect 7 neglect distinction state alphabet event alphabet alphabets assumed equal cts written 3 domains wordfunctions hennessymilner logic previous section explained relationship convergent thue specifications deterministic labeled transition systems convergent thue specification hsigma r si one may associate initial model say concerning basic problem consists characterizing transitions given label 2 sigma precisely one may wish characterize states origins transitions labeled aim convenient view function states 2 states writing rr problem consists therefore characterizing domain function instead taking states account one may consider restriction function written xu subsets x u r sequel restrict attention case x u rational subsets r main problem paper may stated follows problem given convergent thue specification cts hsigma r si function xu relative cts x u rational subsets r x u 2 ratr find doma xu viz domain function whenever rational better understand problem one reason initial model cts say according definition 21 given state w 2 x hence w 2 doma xu wa 2 u thus doma xu largest subset x 0 x x 0 u order solve problem useful consider bit general question appears technical trick without specific semantics related transition systems aim view given u 2 sigma rational subsets xu r wordfunction u xu defined follows uw wu every w 2 x wu 2 u thus remember r set states important note without additional assumptions wordfunction needs coincide corresponding composition functions associated labels unless 1g since set states cts may strictly included sigma assumption sigma source target function compatible semantics terms transition systems reason wordfunction considered technical tool without special meaning close section point problem interested related model checking least context hennessymilner logic checking properties expressed hennessymilner logic formulae hennessymilner logic 9 built constants 1 0 using classical connectives etc unary operator hai letter alphabet sigma given labeled transition system meaning formula viz set states satisfy written inductively defined follows map hai qa defined transition system initial model cts si express meaning formula terms domains wordfunctions aim equalities 31 remain valid precisely becomes hai obvious procedure developed sequel may used checking properties expressed hennessymilner logic systems defined convergent thue specifications relevant ctss procedure succeeds computing doma rx 2 sigma x 2 ratr see subsection 62 since case success doma rx rational boolean operations stipulated may readily performed 4 introducing procedure method solving problem stated latter section developed instance problem consists cts hsigma r si wordfunction u xu relative x u rational subset r precisely x u r rational expressions sake simplicity identified corresponding languages addition u required irreducible restrictive since u xu u xu equal due convergence hence u reducible u normalized applying method solution instance problem subset x 0 x x however method developed sequel find x 0 rational method consists procedure provided terminates computes system equations least solution also solution instance problem basic ideas underlying procedure developed subsequent paragraphs task finding domu xu becomes easier x partitioned two parts z u irreducible word zu reducible z partitioned smaller parts say z indeed divide conquer strategy based following obvious equality order characterize z assume rule g applicable word vu zu since v u irreducible g overlaps v u ie x 6 w 6 remark leads following definition definition 41 word x 2 sigma leftoverlap completion u 2 sigma respect semithue system exist w w 0 2 sigma xw 2 ls ww leftoverlap completion x u minimal leftoverlap completion u proper suffix x view definition word z suffix belongs set say l leftoverlap completions u set complement z x characterized x l fact one may characterize x l min l min stands set minimal leftoverlap completions u order partition z smaller parts observe given leftoverlap completion x u expression xxxu denotes words xu may reduced rule w prefix u consequently one may wish partition z according l x2l xxx however partition xx 1 x 1 xx 2 x 2 whenever x 2 suffix x 1 fact l min provides partition z namely xxx sum following partition x used basis divide conquer strategy according 41 domain corresponding part found respect first member partition difficult see indeed since u xil min u irreducible respect members partition described 42 domu xxxu found x 2 l min observe first consider various ways computing xxxu obviously one may compute xu first subsequently compute normal form xxxu thus maximal suffix xu rewritten computation normal form xxxu isolated concept introduced following definition useful purpose definition 42 word v sigma right irreducible divisor respect sts fg set right irreducible divisors wrt written rid u 2 sigma rid say w right irreducible divisor wrt set right irreducible divisors u written rid u right irreducible divisor u maximal proper suffix right irreducible divisor u easy see rid consequently since finite sigma rational rid rational also obvious rightirreducible divisor xu rewritten computation xxxu proposition u 2 rid w 2 sigma satisfy let us go back problem finding domxu xxu assuming z maximal right irreducible divisor xu suppose also v sigma v view proposition v yz u therefore v uz consequently sum taking 44 45 account next definition indispensable since combines definitions 41 42 nevertheless allow concise presentation procedure definition 43 leftoverlap triple word u wrt triple words hx x minimal leftoverlap completion u z maximal right irreducible divisor xu set leftoverlap triples u written lot u simply lot u determined context triple 2 lot u written hx z procedure given form three deduction rules see table 41 generate eliminate first corresponds roughly speaking transformations discussed section using 41 42 46 definition 43 transformations may summarized next lemma henceforth speak irreducible expression mean expression denotes language word irreducible lemma 44 let x irreducible rational expression u irreducible word uz 6 proof lemma follows discussion together following remarks xx reason cases excluded 47 also first member sum written way slightly differs righthand side 43 since xi x set minimal leftoverlap completions u formerly l min table 41 deduction rules uz 6 uz 6 xx set fresh variables shall describe procedure explaining principles related notations mentioned beginning section case success result procedure consists system equations consequently still need variables derivation system expression form x 7 u xu variable x represents goal means domu xu least solution wrt x resulting system equations rule procedure applied downwards reference goal goal said treated otherwise called fresh denote f resp set fresh resp treated goals thus procedure manipulates sequents form f e e system equations let us explain role rule procedure first note rule applied reference fresh goal given fresh goal x 7 u xu rule generate introduces new equation based 47 uz 6 2 lotu xx 6 uz 6 introduces fresh goal x new variable goal x 7 u xu longer fresh transferred notice new equation replace x domuxu x domy xx uz thereby obtain 47 fresh introduced step correspond principle procedure applied recurrently order compute domy xx uz following idea underlies rule identify treated goal x 7 u xu one equation generated fresh goal x 0 7 generate equation x 0 7 instead identify two variables x x 0 realized renaming x 0 x current system equations goal x 0 7 simply removed f rule eliminate deals goals x 7 u xu xu irreducible fresh goal satisfying condition moved equation added systems equations applicability rules restricted certain conditions written beside rule insist fact within applicability conditions xu understood language rt set wordfunctions range assignment notation f q fx 7 u xug used partition f 0 xug derivations related concepts defined follows derivation possibly finite sequence sequents 0 exists instance rule upper lower sequent equal resp i1 satisfies applicability conditions rule derivation called maximal proper prefix another derivation say sequent pure form fx 0 7 stands irreducible rational expression u 0 irreducible word rid fg say derivation pure starts pure sequent order compute domu xu procedure starts pure sequent fg restrictive since z maximal right irreducible divisor u z 6 xuz procedure may therefore start pure sequent fx 7 xuzig next rules applied long possible order produce maximal derivation procedure stops rule may applied happens fresh goals remains compute solution resulting system equations wrt x let us illustrate applying procedure example example 45 let cts 1 convergent thue specification fig 21 want compute check irreducible ridc fg taking account lot c fha bi hb c aig following derivation generate ae oe eliminate ae oe ae oe ae oe ae oe finally least solution resulting system wrt x 0 yields expected according minimal model cts 1 depicted fig 21 5 correctness procedure usually sequentlike calculus correct transforms valid sequents valid ones shall use following notation order explain mean valid sequent notation 51 set g goals denote oe g following substitution following definition used basis correctness definition 52 sequent f e valid domv v least solution goal 7 v v 2 need establish following theorem theorem 53 sequent pure derivation valid proof let derivation satisfying assumptions theorem let us prove statement sequent k induction k 2 n basis statement holds trivially pure sequent fx 0 7 induction step distinguish 3 cases depending rule yields k kgamma1 induction hypothesis kgamma1 valid validity k obtained using correctness rule established appendix b 2 main result correctness given corollary theorem 53 corollary correctness let maximal finite derivation starting pure sequent last sequent domu xu least solution proof obvious first sequent either generate eliminate may applied consequently x 7 u xu 2 hand f empty since rule applied last sequent hence oe f empty theorem 53 conclude domuxu least solution 6 incompleteness termination since procedure computes linear systems equations rationality domain wordfunction obviously necessary condition termination see condition sufficient consider following specification cts apply procedure goal procedure generates following infinite sequence goals example points procedure complete fact established next subsection complete procedure problem cannot exist completeness procedure mean terminates instance problem rational solution subsection 62 therefore investigate sufficient condition termination procedure 61 incompleteness problem question whether complete procedure exists problem equivalent recursive enumerability following set tuples precisely consider even simpler version problem ctss form hsigma sigma si word functions form xu establish following set pairs recursively enumerable convergent sts sigma 2 sigma end reduce complement halting problem turing machines precisely given deterministic turing machine input word w construct convergent sts wordfunction domain rational halt w deterministic singletape turing machine tape alphabet denotes blank symbol q set states transition function q 0 initial respfinal state observe without loss generality implicitly assumed cannot print consequently tape cell visited tape head contains letter pi language accepted stands reflexivetransitive closure singlestep computation relation without loss generality assume addition set overlined versions letters pi 0 0 additional symbols let input word given pair ht wi construct pair hs xwu sts st sigma union several groups rules two rules differ 0 1 abbreviate metavariables 0 rank f0 1g use overlined underlined symbols relevant understanding construction aims avoiding overlaps lefthand sides st first reading reader may assume underlined overlined versions symbol symbol identical ffl initialization rules ffl rules simulate behaviour ffl rules apply immediately simulation step result configuration tape head reads ffl rules apply simulation step ii vii ffl terminal rules justifying construction state several lemmas first one obvious lemma 61 xw u irreducible wrt st 2 lemma 62 st confluent proof establish confluence enough check lefthand sides st lemma 63 st terminating proof consider following precedence sigma 0 1 2 pi let 1 following rewrite ordering sigma r fg lex lexicographic extension e x resp e stands reversal x resp using 1 define reduction ordering 2 sigma r fg easy check except rule l r 2 st satisfies l 2 r let 3 reduction ordering sigma defined x 2 sigma follows x 3 stands number occurrences x lex stands lexicographic extension 2 rule 3 0 lex 1 rule l r 2 st also l 3 r 2 3 coincide sigma r fg 2 justification construction given word q 0 wx 2 xw rewrite steps word q 0 wx sequences rules used steps denoted rational expressions starting q 0 wx get end u n q n v n provided thus halt w domxwu assume halts k steps configuration u k q f v k let v b length 2n x may arbitrarily big without loss generality assume n k l starting q 0 wx analogous rewrite steps lead get viii ixvii using rules x xi end u k q f word belongs dyck language consequently domxwu rational language therefore established following lemma lemma 64 domxwu rational halt w 2 putting together lemmas 61 62 63 64 taking account fact complement halting problem turing machines recursively enumerable conclude following holds theorem 65 domrat recursively enumerable 2 view theorem complete procedure problem computing rational domains even singleletter wordfunctions cannot exist otherwise would exist turing machine semidecides complement halting problem 62 termination subsection state sufficient condition termination procedure following definition provides tool studying termination definition 66 generation set goal x 7 domuxu wrt sts written smallest subset sigma theta sigma theta sigma contains hu xui whenever hv w 2 lot v sequel shall consider first second third projections generation set g u xu state two lemmas lead final result section first one obvious lemma 67 maximal derivation starting pure sequent fx 7 domu xug finite generation set finite 2 lemma 68 second resp third projection generation set g u xu finite proof note first given rational set z cardinality set greater 2 k k number states minimal automaton accepting z order prove statement therefore enough show 2 g u xu qx according definition 66 exist hy lot n thus hence following theorem states simple sufficient condition guarantees procedure terminate theorem 69 starting pure sequent fx 7 domu xug procedure terminates 1 finite 2 minimal leftoverlap completion x u word xu belongs ls 3 rule r 2 2 lot rr minimal leftoverlap completion x 0 word x 0 belongs ls proof according lemmas 67 68 termination procedure guaranteed 1 g u xu finite easy induction allows us establish exists rule r 2 xy x minimal leftoverlap completion hence 1 g u xu included finite set namely suff ls 2 note used computing domain wordfunction single letter eg case hennessymilner logic procedure terminates provided first third requirements theorem 69 hold may use observation general word functions order compute domu xu wrt hsigma r si second requirement theorem 69 satisfied whereas first third ones may proceed follows 1 compute ranges word functions computation ranges may use procedure 11 procedure always terminates singleletter wordfunction conditions 1 3 theorem 69 2 set apply procedure computing domains word functions important point three classes semithue systems may successfully used letterwise computation domains wordfunctions namely leftbasic stss monadic stss special stss corollary 610 starting pure sequent fx 7 doma xug 2 sigma procedure terminates finite special monadic leftbasic proof monadic r 2 set lot rr may contain elements form hx hx ai xrr rule leftbasic special obviously rule r hence stss special monadic leftbasic satisfy third requirement theorem 69 2 view corollary may assert requirements theorem 69 provide reasonably weak sufficient condition termination requirements capture well known classes stss models related transition graphs pushdown machines 712 latter rationality domains wordfunctions follows well known fact pushdown store languages rational addition scope theorem 69 restricted special monadic leftbasic stss indeed 1 see fig 21 neither special monadic leftbasic whereas satisfies requirements 1 3 theorem last least example non termination opened section one interesting property namely cts 0 equivalent cts 2 sense cts 2 cts 0 2 initial model time procedure terminates cts 0 2 singleletter wordfunction 7 final example consider simple portion railway network single track connects two stations left l right r via central one c following picture l c r trains run l r viceversa stop c never allowed go reverse central station two platforms allowing train crossing platforms may occupied one train model situation may consider following state alphabet sigma train left l yet arrived c train left r yet arrived c gamma c train left c r yet arrived r train left c l yet arrived l gamma c train coming l waiting platform c train coming r waiting platform c underlined versions gamma c special meaning modeling aim making easier definition transitions semithue system reason distinguish set sigma 0 nonunderlined letters sigma sigma g also consider following event alphabet gamma l departure train l departure train r gamma c departure train c r departure train c l gamma c arrival train l c c arrival train r c l arrival train l r arrival train r modeling train appears leaves one stations l r disap pears arrives opposite terminal station since trains go reverse deadlock two trains run towards one another portion track l c c r order define set r states need following expressions describes fact subset r satisfying characteristic property stated paren l trains run l r trains run r l l trains run towards c trains run c l r using expressions states system may defined follows word r reflects events reverse chronological order state alphabet letter corresponding recent event written immediately instance means one train say running r c second one say running l c third one say 3 platform c coming r events corresponding configuration occurred following left r 2 left l 2 left l 3 arrived c transitions defined following sts fg xd l gamma l x x 2 sigma 0 xd r gamma r x x 2 sigma 0 l gamma l gamma r x gamma c gamma gamma c x gamma c gamma gamma c x x 2 sigma 0 r f gamma c gamma c gamma gamma c c gamma x gamma c gamma gamma c gamma x x 2 sigma 0 gamma gamma x gamma c gamma gamma c x x 2 sigma 0 r f gamma c x gamma c gamma gamma c gamma c gamma gamma c gamma x gamma c gamma gamma c gamma x x 2 sigma 0 gamma gamma gamma r x x 2 sigma 0 r f gamma c xa l gamma l gamma c r l metavariable x replaced possible values get system 62 rules nonoverlapping lefthand sides system therefore finite confluent termination may readily established using standard reduction orderings thus concluding convergent example questions concerning system may ask set states departure train may occur one terminal stations instance r set states say p precisely given p r computing p r useful ask termination procedure case since first condition theorem 69 obviously satisfied check whether second one satified r indeed letter leftoverlap completion x xa 2 ls hence remains verify third condition theorem 69 end compute set leftoverlap triples rs rules metavariable obtain x 2 sigma 0 lotd l xig lot r xig lot gamma c lot gamma c lot gamma c xig lot xig lot gamma c lot gamma c lot gamma c xig lot gamma c xig lota r lot l rules lotd l gamma c rules lot gamma c ig lot ig lot gamma c ig lot gamma c ig observe 2 fg thus u 2 2 leftoverlap completion x u xu 2 ls meaning third condition theorem 69 satisfied may therefore conclude procedure terminates singleletter wordfunction starting pure sequent fx 7 domd r procedure terminates yields system equations least solution expected ing thus departures trains r possible trains running c r concluding remarks semithue systems transition systems related sketching formal specification technique named thue specifications particular emphasis placed simplest case problem formal verification pragmatic point view necessary approaching latter problem since shown recursively enumerable led incomplete procedure problem perhaps elementary problem one deal order able approach model checking thue specifications least special case hennessymilner logic however since expressive power latter rich work needs extended handle powerful logics aim view attention currently focussed monadic secondorder logic 13 one important problems concerns specification systems consist interacting processes problem may handled via concept synchronized product 2 within approach component system specified separately interactions components defined synchronization constraints instance railway example may specified even elegant way four interacting processes two portions track two platforms central station system specified componentwise several thue specifications provided synchronization constraint specifications may combined single one wich procedure may applied checking properties system based ideas 14 algorithm performs latter task developed 18 acknowledgments wish thank mariecatherine danielvatonne etienne payet careful reading preliminary version paper adrian bondy correcting english text grateful damian niwinski numerous suggestions helped improving presentation paper special thanks due serge burckel whose comments influenced subsection 61 anonymous referee suggested current proof lemma 63 elegant original proof r finite transition systems comportements de processus theorem proving hierarchical clausal specifications regular canonical systems stringrewriting characterization contextfree graphs regular structure prefix rewriting algebraic laws nondeterminism concurrency introduction automata theory procedure computing normal forms certain rational sets graphs finite monadic semithue systems decidable monadic secondorder theory thue specifications monadic secondorder properties method enumerating cosets group presented canonical system finite automata mathematical logic automatatheoretic approach automatic program verification automated reasoning introduction applications first occur selfidentify steps identify steps occur tr