matching index expressions information retrieval inn system dynamic hypertext tool searching exploring www uses dynamically built ancillary layer support easy interaction layer features subexpressions index expressions extracted rendered documents currently inn system uses keyword based matching effectiveness inn system may increased using matching functions index expressions design functions several constraints stemming inn must taken account important constraints limited response time storage space focus discriminating different notions subexpressions index expressions domain independency contextual constraints mind several matching functions designed theoretically practically evaluated b introduction searching large dynamic information spaces dicult task many authors opted approach combining browsing searching hypertext environment see eg 12 21 5 motivated renements overview hyperindex navigation used query formulation formulation query index expression used render relevant documents inn currently uses existing search engines rendering utilising terms keywords query thus relations terms modeled query largely get lost exploiting similarity measures index expressions rendering eg reranking documents would alleviate problem intended use similarity measures inn poses number constraints design documents rendered search engines likely contain required keywords query however interterm relations modeled index expressions satised since matching keywordbased may repaired reranking rendered set documents according similarity measures go beyond keywords thus similarity measures focus interterm relations consequently hierarchical composition index expressions www contains documents wide range topics therefore inn designed domain independent exploration search tool means domain dependent approaches conceptual ir 13 coordinated concepts 20 make heavy use domain specic knowledge bases adequately general purposes use thorough linguistic analysis viable inn due need quick responses limited amount available memory since inn runs web server potentially serves many users may cause explosion required memory especially holds considerable linguistic knowledge used instance detailed parsing similarity values computed real time next rendering documents form search engines locating extracting index expressions documents parsing thus focus matching basic syntactic renement structure phrases captured index expressions turn means ambiguities encountered content analysis resolved renements hyperindex directly stem particular view decomposition index expressions notion subexpressions instance order subexpressions may deemed relevant computing renements hyperindex addition dierent views embedding index expressions envisaged user may select preferred notion subexpression constructing hyperindex otherwise preferred notion may derived analysing types renements user makes navigational query formulation order render documents consistent users preferences similarity measure used reranking accordance preferred notion subexpressions presented topic overview inn based small subset 10100 documents complete collection statistics thus apply small part information space consequence domain dependent collection statistics cannot globally computed addition term weights query supplied inn system article therefore focus core function similarity structure index expressions provide abstract functions comparing terms goal article design relatively simple ecient similarity measures focus structure index expressions particular order subexpressions dierent notions embedding modeled similarity measures structure article follows section 2 approach put context work linguistically motivated indexing structural matching section 3 introduces two representations index expressions section 4 elaborates several topics concerning contents structure index expressions topics lead design several similarity measures index expressions section 5 section 6 provides experimental evaluation proposed measures finally section 7 provides concluding remarks directions research related work 21 obtaining index expressions text currently inn system directly extracts index expressions titles rendered doc uments produces acceptable results since titles often form permits ready transformation index expressions similar point departure taken closely resembling sys tem hyperindex browser 10 simple parsing method based twolevel priority scheme connectors 4 used allowed connectors listed together priority words encountered interpreted terms keywords stoplist list stopwords lters unwanted words like instance articles determiners parsing priority connector hand determines already parsed part index expression broadened deepened thus explicit linguistic grammar used parser parser results one parse tree thus possibly neglecting dierent interpretations test cacm document collection showed parsing method accurate approximately 90 percent cases additional sources linguistic knowledge used inn although approach rather simplistic although syntax cannot resolve many ambiguities complicate content analysis task 16 view advantages oered inn system augmented similarity measures index expressions produce workable balance keyword based approaches sophisticated linguistic analysis general approach indexing documents index expression could make use part ofspeech pos tagger extractor closely related descriptors called phrase frames approach described 1 phrase frames headmodier structures connectors eventually omitted preprocessing documents ltering nontextual parts moulding text acceptable format pos tagger labels words part speech well performing pos tagger described 3 extractor applied next uses pos labels identifying linguistic constructs parsed index expressions extractor uses pattern matching regular expressions extractor index expressions would constitute subset patterns used phrase frames albeit augmented connectors finally parser used although sophisticated parsers available however scope article general architecture nlpir system advocated 19 also includes stemmer normalisation term level eg stemming largely orthogonal approach possible include considered article however provide abstract similarity functions terms connectors could instantiated measures take instance stemming account regularisation syntactical normalisation phrase level aims recall enhancement reducing syntactical variation 19 phrase frames syntactic normalisation described 1 approach mutatis mutandis also applied index expressions since phrase frames closely resemble index expressions however requires use additional linguistic knowledge elaborate issue instead normalising descriptors systematically generating linguistically motivated alternative variants 18 similar aim semantic linguistic knowledge exploited generate invalid variants although restricts number generated variants number may explode especially complex composed descriptors matching done via translation generated variants boolean query due need ecient matching inn system generate variants index expressions constituent object parser 14 also uses syntactic structure matching descriptors produces binary dependency trees indicate directed dependency scope relationships terms many dierent syntactic forms represented single dependency relation result ambiguities retained representation 19 comparable approach using tree structured analytics 17 approaches use external sources linguistic knowledge oer best reasonable eciency index expressions make distinction types dependency given connectors taking actual contents connectors account eg allowing wildcard connectors matching normalised index expressions eectuates similar directed notion dependency intermediate form dependency colliding connectors type described section 412 clarit system 7 6 integrates several nlp techniques vector space retrieval model techniques include morphological analysis robust nounphrase parsing automatic construction rst order thesauri construction thesauri used support selection appropriate terms requires substantial minimally 2 gb sample documents certain topic limited response times available memory expect approach demanding application 22 comparing structured descriptors similarity measures index expressions described section 5 focus structure index expressions ie way subexpressions nested three similarity measures provided skeleton content fullproduct twigbased measure measures represent dierent views order subexpressions embedding headedness concept modication headmodier structure considered well 11 language querying structured text based tree inclusion described approach exploits inclusion patterns ensure preservation binary properties nodes takes structure content account example inclusion patterns l labels ancestorship lefttoright ordered tree inclusion skeletoncontent approach resembles flaogembedding ancestorship ordering preserved labels taken account however approach require labels equal supports approximate matching oering abstract similarity functions terms connectors introduction mentioned article authors indicate indeed standard ir techniques added language similarity measures index expressions capture aspects approximation sensitive structure using abstract term comparison functions content skeletoncontent approach thus preserves labels taking account similarity essen tially searches best fl 0 aogembedding delivers degree embedding similar line reasoning shows full product approach computes degree flagembedding since full product measure order subexpressions considered irrelevant corresponding inclusion pattern satised 1 approach compare headmodier structures described lexicosemantical relations used computing similarity binary terms set based similarity measures twigs explicitly make use semantical network however may incorporated abstractly modeled comparison functions terms connectors addition twigs tertiary structures also including information type connection head modier furthermore focus similarities sets twigs rather individual similarities advantages disadvantages use inductive structural representations representations describe language index expressions dier denotational properties adjectives gerunds attribute values connectors denote relations terms form prepositions showing place position time method present participles eg using 31 inductive representation inductive representation described denition 31 used since basically describes decomposition index expressions underlying idea index expressions augmented subexpressions connectors illustrated gure 1 advantage elementary representation allows several auxiliary functions readily designed c figure 1 basic setup inductive representation denition 31 let nonempty set terms c set connectors language nonempty index expressions dened 1 2 nonempty index expression 2 j nonempty index expressions c 2 c connector addi c j also nonempty index expression 3 nonempty index expressions existexample 31 single word queries document representations modeled terms example terms con ference biology holland composed index expressions constructed add operator also exploits connectors instance composed index expression addconference biology represents information conference biology complex example consider addaddconference biology holland denoting information conference biology held holland semantics index expressions depends structure dierences nested subexpressions may cause dierences se mantics example compare last index expression slightly dierent holland last one denotes conference biology far practiced holland 2 connsaddi c figure 2 auxiliary functions index expressions three auxiliary functions index expressions introduced gure 2 functions used dening similarity measures denitions formulated terms inductive denition index expressions functions result terms index expression connectors head respectively 32 structural representation inductive representation provides horizontal decomposition index expressions subexpressions added right another representational formalism index expressions called structural representation serves better subexpressions certain depth addressed time structural representation provides vertical decomposition index expressions allowing direct clear look structure structural representation exploited cases order subexpressions taken account structural representation composed index expression denoted h head k subexpressions connected head connectors c subexpressions denoted structural representation well composition operator provides notational shorthand 1 k figure 3 structural representation figure 3 gives schematic view structural representation example 32 two last mentioned index expressions example 31 denoted structural representation conference biology holland conference biology holland respectively note structural representation dierences semantics modeled brackets4 issues concerning semantics index expression seen description concept named h rened relations called concepts consequence comparison concepts names contents well rening mechanism structure important issues matching index expressions section presents several topics concerning contents structure rene abovementioned view semantics index expressions contents index expressions given terms connectors 411 terms order match index expressions terms compared therefore assume similarity function terms denoted sim 01 expression sim 0 denotes similarity concepts referred terms 0 similarity terms obtained several ways instance computed string comparison algorithms ngrams overlapping substrings terms length n furthermore additional lexicosemantical knowledge used taking instance hypernyms synonyms account ir stemming often performed reduce morphological variance abstract particular techniques used computing similarity concentrate using computing similarity index expressions 412 connectors similar terms also assume similarity function sim connectors similarity expresses strength relation connectors similarity function connectors take several aspects account instance based types connectors identied farradane see 8 9 approach called relational indexing connectors model relationships terms connectors model relationship could given high similarity value furthermore priority connectors within index expressions exploited addition occurrencefrequencies connectors could used abstract dierent approaches focus exploiting similarity connectors matching index expressions 42 structure structure index expressions partly determines semantics therefore taken account matching three issues concerning structure considered article order subexpressions embedding headedness 421 order subexpressions important question considering semantics index expressions whether order subexpressions relevant consider example following index expressions hiking mountains friends hiking friends mountains one may argue meaning equivalent situations however may cases order subexpressions relevant ie causes dierent meaning instance sequential order paragraphs text represented index expression notion order subexpressions formalised relation eqorder follows denition 41 call two index expressions denoted eqorderi j 1 2 exists projection 1k 1l 1 k holds c eqorderi j two index expressions equal modulo order heads equal recursively subexpressions rst equal modulo order one subexpressions second second criterion holds instance index expressions subexpressions recursively permutation others addition holds index expressions contain several copies subexpressions instance illustrated index expressions retrieval information retrieval information information furthermore equality modulo order exive later article describe matching strategy computes maximal similarity index expressions equal modulo order 422 embedding embedding containment plays prominent role ir example often applied strategy querydocument matching query contained embedded document document deemed relevant query dierent notions embedding exist subexpression relation index expressions example denes connected variant embedding subexpression connected part superexpressions instance surng holland subexpression surng holland november subexpression surng sunny holland subexpression relation see 23 denoted 4 expression 4 j means index expression subexpression j abovementioned case sunny modies last term holland path expression sunny holland view surng holland therefore embedded surng sunny holland cater cases exploit slightly liberal version embedment connectedness context subexpressions described direct ancestorship parenthood means terms index expression parent must also parent index expressions embedded instead direct ancestorship use notion general ancestorship means index expression embedded j terms ancestors also ancestors j considerations ected notion embedding index expressions formalised embedment relation follows denition 42 embedding index expressions captured binary relation j means embedded j dened addj c k j k k j l stop cases applyterms embedded described case denition 42 case sub states index expression embedded composed one addj c k embedded either subexpression j k third case split shows composed index expression addi c j embedded another composed index expression addk l connectors equal leftmost subexpression embedded leftmost subexpression k similar argument holds rightmost subexpressions j l 423 headedness head index expression considered important part address notion implemented headmodier pairs 19 headedness subexpressions modify main concept stated head consequently lower terms occur ie deeper respect nested expressions less important taken account matching exploiting depth terms multiplying factor inversely proportional depth gives desired result indicate similarity function described equipped depth factor 5 similarity measures index expressions section several similarity measures index expressions designed vary simple measures consider content index expressions section 51 comprehensive measures consider content structure section 52 measuring similarity index expressions sets terms connectors considers provide similarity measures contents index expressions example set measures dice cosine jaccard measures see eg 15 measures use similarity functions terms connectors described sections 411 412 respectively instead use set primitives union disjunction cardinality use equality elements terms connectors dice measure normalizes intersection b sum constituents cosine measure relating overlap sets geometric average jaccard measure expressing degree overlap two sets proportion overlap whole dened case denominator equal zero case measures return similarity value zero considering sets terms connectors index expressions set based measures exploited index expressions example consider similarity measure index expressions based dice coecient shown gure 4 dice figure 4 dices similarity measure index expressions factor determines relative uence terms connectors similarity value terms considered connectors taken account note depth factor cannot taken account directly since information structure available sets terms say measure maximal certain index expressions maximal similarity returned descriptors dice measure maximal embedded index expressions subexpressions consider example index expression surng holland subexpression holland since sets terms connectors dierent dice measure maximal index expressions 52 contents structure section provides three similarity measures take content structure index expressions account rst measure coined full product adheres idea order subexpressions irrelevant meaning index expressions contrary second mea sure called embedded content deems order relevant addition embedded content based non contiguous embedding finally twigs measure based decomposing index expressions elementary connections called twigs 521 full product full product similarity measure computes degree index expression equal modulo order another one means order subexpressions considered irrelevant since structural representation appears appropriate case full product measure denoted fp specied depicted gure 5 fph fph jtermsh figure 5 full product algorithm full product algorithm shown gure 5 consists four cases readily translated functional algorithm using pattern matching rst case terms computes similarity single terms case top embedment single term composed index expression computed comparing head h since occur depth third case tall computes similarity two composed index expressions correspondingly denition 41 product similarity heads maximum similarity values subexpressions subexpression j nal case toll gives penalty fact composed index expression cannot equal modulo order term returned similarity value smaller mismatch size number terms larger note full product measure computes similarity value layer layer terms connectors occur depth compared full product similarity measure maximal index expressions equal modulo order shown following theorem theorem 51 eqorderi j fpi proof proof done structural induction index expressions investigate inter esting case composed index expressions suppose equal modulo order subexpressions means value 1 2 1 k exists 1 j l sim c induction hypothesis fpi means j case 2 sim h 1 total similarity measure comes 1 direct consequence theorem 51 conclude full product similarity measure maximal equal arguments ie fpi 1 addition full product computes maximal similarity index expressions subexpressions recursively permutation others occur multiple times full product measure maximal embedded index expressions consider example index expressions surng holland surng sunny holland since full product measure computes similarity values layer layer keyword holland resides dierent depths given index expressions maximally similar addition full product measure maximal subexpressions illustrating consider holland surng holland since heads index expressions unequal full product measure maximal fp sim dt 1 depth factor incorporated full product algorithm gure 5 replacing case tall equation 1 note shown depth factor correctly computed case multiplying case factor inversely proportional depth factor takes headedness account 522 embedded content embedded content measure see gure computes best way index expression embedded dened denition 42 another one means order subexpressions considered relevant eases use inductive representation index expressions thus enables elementary decomposition index expressions figure embedded content algorithm cases considered embedded content measure full product measure case terms gure 6 exactly full product calls similarity function terms sim second case top states degree term embedded composed index expression addi c j equal maximal similarity one subexpressions j case tall computes strength embedding composed index expression addi c j another one addk l computes maximum similarity following three cases 1 addi c j completely embedded leftmost subexpression k 2 completely embedded rightmost subexpression l 3 subexpression embedded k subexpression j embedded l connectors c similar case toll gives penalty mismatch since composed index expressions never embedded terms embedded content measure maximal embedded index expressions stated formally next theorem theorem 52 j proof theorem proven induction structure index expressions suppose j basis suppose term rst two cases denition 42 embedded content sub examined since third case split cannot apply cannot composed suppose case denition 42 applies consequently sub suppose case applies means j composed say addk c l thus k l combining induction hypothesis implies 1 means case top embedded content algorithm eci induction step suppose composed index expression say addk c l furthermore without loss generality let cases sub split denition 42 need examined result eci sub 1 implying eci 2 n means case tall algorithm applied computes maximum cases options cause eci split case induction hypothesis implies together sim c causes case tall embedded content algorithm compute eci shown possible cases embedded j embedded content measure computes eci embedded content measure also maximal subexpressions stems observation every index expression subexpression another also embedded turn follows observation subexpression relation direct ancestorship preserved stricter general ancestorship preserved embedment relation addition embedded content measure maximal equal arguments since every index expression embedded ie embedment exive embedded content measure maximal index expressions equal modulo order consider example following pair index expressions equal modulo order subexpressions conference biology holland conference holland biology since embedded content measure order subexpressions relevant index expressions j maximally similar ec addi c j addk ec d1 depth factor incorporated inductive representation scheme equation 2 note rightmost subexpressions j l reside one layer deeper head 523 twigs twigs see 2 index expression subexpressions consist exactly two terms one connector twigs elementary connections concept graph formed index expression twigs essentially structure headmodier pairs described 19 except also contain connector twigs enable us form global picture similarity focusing elementary renements denote subexpressions size two use subexpression relation described section 422 twigs dened constructively terms inductive representation index expressions shows twigs index expression produced straightforward syntactic process twigs accompanied depth factor modeled positive integer since head index expression assigned depth one expression twigsi 1 according denition computes twigs correct depths single terms contain subexpressions size two thus twigs composed index expressions addi c j lead least one twig headi c headj additional twigs may result subexpressions modeled recursive calls observed 2 twigs conserve structure index expressions fact terms dierent complete structure correctly reconstructed without additional information twigs depth factor relieved terms depth dierent twigs index expressions seem resemble trigrams strings considerations similar trigrams therefore expected hold twigs instance advantage use twigs equalitymatching robustness spelling variations example index expressions equal modulo order twigs stated following lemma lemma 51 eqorderi j setbased approaches described terms section 51 also equipped twigs instead calling set based approaches sets terms connectors arguments sets twigs used yields similarity measures using twigs example dice measure twigs dened dice measure twigs maximal index expressions equal modulo order identical index expressions since twigs equal dice measure twigs maximal embedded index expressions subexpressions illustrated instance index expressions surng holland holland 6 experimental evaluation subexpressions basic notion hyperindex generated inn system thus heavily uses subexpressions therefore evaluate dierent similarity measures behave context subexpressions number experiments described section give insight matter retrieval workshop amsterdam holidays agents information thesis disk java classification november similarity subexpressions dicetwigs dice terms figure 7 index expression used experiments b overview similarity measures experiments exploit nontrivial index expression see gure 7a consisting 11 terms nested subexpressions dierent forms similarity index expression subexpressions computed according dierent similarity measures contiguous noncontiguous eg workshop november subexpressions generated original total experiment featured 439 subexpressions similar tests may performed notions subexpressions instance order subexpressions may varied figure 7b gives overview dierent similarity measures graphs provided gure serve reference next sections setbased measures provided dice measure terms twigs given representative several reasons subexpressions xaxis sorted according similarities nonincreasing graphs obtained sorting similarities nonincreasingly therefore grouping together subexpressions equally similar original index expression intervals clearly shows results similarity measures instance without sorting dierent measures graph would hard distinguish furthermore since subexpressions within interval similarity value intervals rather positions xaxis serve indication ordering instance number intervals gives indication granularity measure therefore compare similarity measures examining dierences intervals order subexpressions xaxis may dierent dierent similarity measures since sort nonincreasingly per measure dierent orders per measure explicitly visualised graphs therefore examination used detailed information kept test results next graphs dierences measures examined rest section experiments examine dierences similarity measures imposing order one similarity measure called dominant measure onto similarity measures subordinate measures order subexpressions xaxis set conform non increasing order dominant measure according ordering subordinate measures plotted way dierences ordering visualised plateau 10602 subordinate measure10 100 200 300 400 subexpressions similarity dominant measure figure 8 generic sketch results figure 8 gives generic sketch graphs resulted experiments gure solid line depicts similarity values dominant measure later gures actual similarity measures used line dominant measure equals similarity graph gure 7b subexpressions xaxis sorted nonincreasing line dominant measure obtained according dominant ordering subordinate measures plotted note example dominant measure three horizontal plateaus ie intervals subexpressions receive similarity value discriminated dominant measure subexpressions plateau dierences positions xaxis thus irrelevant dominant measure however subordinate measure may assign dierent similarity values subexpressions dominant plateau therefore resort subexpressions per dominant plateau according subordinate measures way obtain nonincreasing graphs subordinate measures per dominant plateau note number subordinate plateaus may dier per dominant plateau however number equals number plateaus original graph subordinate measure gure 7b result sorting nonincreasingly peaks subordinate graphs occur beginning dominant plateaus form actual graphs later conforms generic sketch gure 8 much ner granularity smaller plateaus rst compare measures use content structure full product embedded content set based measure twigs sections 61 62 respectively full product embedded content used primary measure setbased measures twigs compared section 63 61 full product results imposing full product ordering onto embedded content dices measure twigs shown figure 9 three measures dene dierent orderings concluded many peaks embedded content drops dicetwigs respect original lines gure 7b ordering imposed full product related removal leaves starting maximal depth layer layer bottom defoliation thus full product measure scores high heads recursively equal words subexpression equals topmost layer layer part original gets high score full product thus demands main concepts equal less sensitive modication specic maximal depth modiers gradually decreasing graph full product measure combined high granularity implies measure delicately distinguishes subexpressions rightmost interval full product large zeroplateau large interval subordinate measures resemble original graphs gure 7b inspection test results showed subexpressions plateau compared original either dierent head contain single subexpression dierent head comparing index expressions represent dierent main concepts full product measure thus inadequate02061 similarity subexpressions dicetwigs figure 9 full product order imposed general full product interval shows peak embedded content drop dice measure twigs examining subexpressions cause drops peaks dierences measures studied basically two types subexpressions cause peaks embedded content measure types stereotypical example investigated consider instance peak gure 9 occurs position 43 similarity value 05 subexpression causing peak consists 10 terms missing depth two leaf amsterdam however full product favours subexpressions obtained removing leaves larger depth many possibilities construct subexpressions way makes full product many higher scoring subexpressions concluded analysing test results embedded content would placed interval positions 25 gure 7b removal highest leaf ie amsterdam embedded content similar removing leaf largest depth disk similar subexpressions cause peaks positions 17 80 101 171 thus uence concept modication desired gradually decrease depth full product better measure embedded content another type subexpression causes peak position 277 visually somewhat obscured simultaneous drop graph dicetwig measure peak similarity value 025 surrounded values 009 caused index expression workshop head large embedded subexpression consisting 7 terms since main concepts dierent full product scores low however embedded content scores higher resorts beginning value zero interval embedded content order would placed interval positions 25 thus full product strongly embedded content targets equal main concepts drop dices graph position 68 similarity value 0375 caused noncontiguous subexpression whose six twigs occur original full product layer layer computation favour noncontiguous layer skipping subexpressions similar argument applies drops positions 133 214 263 twig based measures thus robust slightly diering noncontiguous subexpressions full product dices drop xaxis position 271 caused single term workshop consists head original index expression stated single terms twigs dices twig measure thus returns value zero 62 embedded content second experiment imposes embedded content order onto full product dice measure twigs results given gure 10 consider line embedded content measure striking feature large rightmost plateau stemming following computed embedment original index expression subexpressions way around since would result maximal embedment subexpressions thus embedding original computed components subexpressions many subexpressions eventually results embedding original single terms subexpression turn results constant value inversely proportional size original consequence embedded content context best used discriminating highly similar subexpressions02061 similarity subexpressions dicetwigs figure 10 embedded content order imposed general order imposed embedded content relative removal terms irrespective depth instance removing amsterdam disk results equally similar subexpressions thus embedded content makes distinction specicity depth removed term consequence sensitive removal addition complete modication subexpres sion makes embedded content measure suitable matching queries rich document characterisations position 88 graphs full product dicetwigs seem equal original graphs gure 7b caused large dominant plateau starting position resorting subordinate measures ensures subexpressions order original graph dierences original graphs caused subexpressions placed last interval dominant measure original order subordinate measure vice versa number stepwise drops occur line full product gure 10 instance full product drops zero positions 22 23 8487 caused subexpressions dierent heads also observed rst experiment embedded content robust changes main concept downward steps towards value zero caused subexpressions miss several terms preserve parts subexpressions dices twig measure shows clear drop position 65 caused rather small noncontiguous subexpression twigs common original however embedded content robust noncontiguous subexpressions ranks relatively high similar argument holds drops positions 22 87 thus highly noncontiguous subexpressions still recognised relevant embedded content 63 setbased twig similarity nal experiment compared setbased approaches terms twigs particular dice measure terms used baseline comparison dice jaccard cosine measures twigs figure 11 provides overview used setbased measures measure non increasingly ordered done measures gure 7b02061 similarity subexpressions dice terms 05 dice terms 10 cosinetwigs dicetwigs jaccardtwigs figure 11 setbased approaches terms twigs experiments twig based measures ner granularity term based measures concluded number intervals imposed measures set based measures divide subexpressions classes intervals corresponding number constituents common original seen gure 11 dice measure terms 10 intervals connectors considered 20 05 measures twigs 26 intervals number directly depends number dierent twigs generated subexpressions since included noncontiguous subexpressions experiment new twigs introduced original original index expression 10 twigs thus leaving room newly introduced twigs suggests twig based measures favoured term based measures delicate matching required lines twigbased measures eventually drop zero whereas termbased measure reason single terms result twigs although every nonempty subexpression minimal overlap least one term original clearly twig based measures thus used matching single terms minimal similarity value according dice terms 0167 order compare setbased approaches jaccard ordering twigs imposed others figure 12 shows results dice jaccard twigs impose ordering exactly intervals thus concluded denitions measures see section 51 comparing two subexpressions distinction terms ordering made similarity subexpressions dice terms cosinetwigs dicetwigs jaccardtwigs figure 12 jaccard twigs order imposed sum twigs number dierent twigs similarity values however dier size basically means practically dierences measures overcome using rightly set thresholds cosine measure twigs closely resembling intervals 26 intervals six dier slightly maximally nine subexpressions big dierence setbased approaches terms twigs since terms capture structure peaks line dices term measure gure 12 caused noncontiguous subexpressions many twigs common irrespective structure however share terms original clearly structure descriptors taken account twig based measures suitable term based measures experiments illustrated characteristics dierent similarity measures number conclusions drawn first approaches using terms avoided structure descriptors relevant one would expect well set based measures using terms provide less granularity using twigs second dierent criteria subexpressions resulted similarity measures distinct properties layer layer computation full product measure derived idea headedness favours descriptors dier specic subexpressions however inadequate comparing index expressions represent dierent main concepts naturally supports delicate discrimination subexpressions gradual notion concept modication embedded content measure sensitive depth deleted subexpression furthermore since based embedding robust noncontiguous subexpressions embedded content context experiments best used discriminating highly similar subexpressions twig based measures fall somewhere somewhat sensitive noncontiguous subexpressions introduces new twigs may preserve twigs little dierence twig based measures appears mainly matter thresholds viz size similarity values distinguish conclusions article devised several similarity measures index expressions aiming use dynamic hypertext system inn system envisaged application implied focus dierent notions subexpressions index expressions several constraints concerning high eciency domain independency restricted memory constraints prohibit use sophisticated natural language processing techniques however several issues semantics index expressions corresponding notions subexpressions formulated criteria issues order subexpressions non contiguous embedding headedness devised similarity measures theoretically experimentally evaluated showing suitability mentioned criteria although experiments described article rather small illustrate essential characteristics similarity values future research directed towards augmenting index expressions wildcards design corresponding matching functions could aim using structure index expressions fact nding generation partly specied overviews augmented language descriptors like ying tasmania used nd documents deal air transport island tasmania destination furthermore would interesting see approach also viable retrieval related tasks clustering routing ltering would enable augmentation functionality inn system instance inn system could present grouped results could work oline using stable information needs case ltering also interesting investigate dierent instantiations abstract term connector comparison functions instance stemming could included computing similarity stems addition connectors grouped function type matching connectors function could given higher similarity including term weights potentially increases eectiveness matching focus issue since primarily concerned structure index expressions however seems valuable extension worth research acknowledgment authors kindly acknowledge valuable remarks referees r navigational query construction hypertext environment advances rulebased part speech tagging relational indexing part relational indexing part ii open information locator project information retrieval hypertext approach using plausible inference retrieval performance ferret constituent object parser syntactic structure information retrieval information retrieval application syntactic methodologies automatic text indexing using morphosyntactic language analysis phrase matching automatic search term variant generation natural language information retrieval integrated information access via structure index navigator searching exploring www nesting defoliation index expressions information retrieval tr