conceptual framework evolving software processes software processes complex entities may last long periods time carried interaction humans computerized tools need continuously evolve order cope different kinds changes customizations organization technologies used support software production activitiesin recent years many software process support technologies developed currently extended used trial projects moreover research prototypes generated commercial products marketed currently used industrial organizations despite significant efforts results however still little conceptual characterization assessment properties software processes related support environments difficult compare assess existing approaches even common characterization problems addressed seems problematic difficult achieve particularly true consider process evolution problem seem common view issue established yetthis paper aims proposing conceptual framework describe assess flexible evolving software processes based assumption software process composed two main components software production process carry software production activities software metaprocess improve evolve whole software processthe general requirements properties process domain first discussed metaprocess concept introduced discuss several process related concepts particular relationship metaprocess rest software process methods technologies needed support metaprocess highlighted discussed finally apply resulting framework example order show potential expected benefits proposed approach b introduction last decades problem producing high quality software products become increasingly complex difficult manage one reason rapid evolution technologies methods produce software together increased complexity applications developed two factors strongly interrelated advances technology enable creation new products services activities modification old ones turn produce new needs feedbacks requirements software technology providers secondly software processes humanoriented cffs92 interactions among humans humans tools support activities characterized high variability unpredictability fact increases complexity resulting software process puts hard demands management finally software processes may last long periods time thus likely undergo many changes lifetime order cope new requirements bl79 examples changes substitution part technologies used produce software applications modification development strategy procedures important reasons process evolution need dynamically customize process accommodate requirements preferences individuals take part process cope various unanticipated situations wide consensus among researchers practitioners complex nature software processes among main reasons software crisis experiencing last decades insight quality products services intrinsically depends quality associated process steered work software quality towards improvement software processes specifically researchers concentrating following topics ffl describe software process order understand facilitate communication teaching rules procedures ffl better manage improve software process ffl humans computerized tools cooperating coordinated controlled way support software process around software process management improvement several recent initiatives launched industrial initiatives improve software processes adopted within software development organizations cooperations academia industry also established wellknow initiative area darpas software engineering insti tute created carnegie mellon university pittsburgh 1983 sei91 ffl new research area grown supported scientific events facilitate exchange discussion results problems early experiences der92 iee91a iee91b ffl outside area software production similar efforts emerge within area information systems office automation example carried common heading workflow support hl91 far little crossfertilization areas taking consideration situation many initiatives launched area believe two aspects deserve attention ffl recent intensive work software processes led terminology definitions software processes rather confusing many different terms used similar concepts viceversa consequence difficult compare different technologies solutions order understand particularities assess specific merits drawbacks ffl software processes production processes aim reusing experience research disciplines information systems cim systems vlsi design production therefore seems worthwhile establish reference framework software process concepts used within software process community common set terms concepts aim facilitate communication assessment emerging software process technologies especially respect software process evolution see also used exploit commonalities related disciplines research areas similar efforts done recent past see dnr91 fh92 cffs92 lon93 work still needed properly take account different requirements issues emerged discussion propose base framework following assumptions ffl software process complex longlived needs evolve cope different kinds changes discussed ffl software process therefore composed two parts actual software production process software metaprocess software production process includes activities used build deliver maintain software product software metaprocess simply metaprocess includes activities related evolution entire software process ie software production process metaprocess goal introduce software process innovations enhance overall quality delivered products software production process metaprocess opinion metaprocess crucial component reference framework represents effective support software process improvement organization process operates must seen organic entity production process metaprocess cooperate highly interacting way evaluate performance software process thus drive evolution necessary observe joint behavior software production process metaprocess ie result interaction therefore metaprocess must built observe manipulate whole software process including means software process conceived reflective system summing work based assumption software process organic entity whose goals 1 produce highquality software products 2 observe improve structure according performances organizations overall strategy objectives paper elaborates discusses basic assumption structured follows section 2 presents basic concepts used throughout paper accomplish tried provide synthesis current practice associating term definition independent possible specific technology approach section 3 provides fundamentals conceptual framework presenting detailed discussion metaprocess concepts related evolution software process model section 4 analyzes technological methodological issues related development support metaprocess section 5 provides examples put presented concepts practice finally section 6 provides conclusions points possible applications proposed framework 2 basic concepts section present basic concepts proposed framework first step informally introduce motivate basic definitions put general systematic context software production process coarsely characterized partially ordered network interacting activities aiming producing software product activities carried human agents possibly organized teams supported tools work upon software components related documents called software items set software items constitutes called software product software production process needs modeled ie explicitly represented order effectively repeatable supportive automatable manageable particular want able control process support former issue related ability ensure process evolves according specific desirable rules procedures latter related ability automate production steps guide solicit human activities actual process corresponding process model need continuously evolved modified refined customized order cope different kinds change requests thus software production process part encompassing process called software pro cess also includes metaactivities support evolution whole software pro cess denote set metaactivities term metaprocess described metaprocess model part software process model elements produced software process denoted software process artifacts consist software items produced software production process software process models tools various forms see section 31 produce model software process need software process languages offering suitable features describe manipulate process artifacts 1 parts software process potentially adopted different circumstances different organizations software process models partly reusable project defines context specific instantiation software process project context includes 1 note software process model artifact one entities described using process formalism aspect selfreference fundamental reason considering software processes reflective systems profile product developed scheduling budgetary organizational constraints available resources specific tools used information characterizes activities related production specific software product let us provide systematic presentation processrelated definitions process realworld elements involved production maintenance product ie artifacts production technology activities agents process support composed production process process support metaprocess ffl process model description process expressed suitable process modeling language model always abstraction reality represents partial description ie always parts aspects process captured model eg consist templates types instances describe various process elements ffl artifact products raw material process artifact produced process may later used raw material different process produce artifacts artifacts often persistent versioned ffl production technology set tools used support agents process perform operations artifacts ffl activity atomic composite production step process incorporates implements procedures rules policies aims generating modifying given set artifacts activities may organized networks horizontal chaining vertical decomposition dimensions activities associated roles production technology artifacts ffl agent human performing activities related role agent characterized skills cost availability ffl tool computer program supporting automating part work related role tools characterized operations implement cost use availability tools may characterized according kind interaction support active tools able start interaction example urge individual accomplish specific action interaction passive tools always initiated humans ffl role role describes set responsibilities obligations covered agent related role skills required agent role descriptions part process models ffl process modeling language formal notation used express process models production processes metaprocesses process models analysis design implementation phase could modeled section 33 ffl process support technology technology used manipulate execute process models particular consider process modeling languages process modeling support tools operating environment process model interpreters ffl process support process model appropriate process support technology define modify analyse execute ffl production process part process charge producing maintaining product delivered ffl metaprocess part process charge maintaining evolving whole process ie production process process support metaprocess ffl software production process realworld elements involved production maintenance software product ffl software production process model description software production process ffl software item artifact produced software production process includes software documents components user requirements design specifications source code test data documentation releases aggregates mutual dependencies ffl software product set required software items developed delivered possibly maintained ffl software production technology production technology software production process typical examples constituent tools compilers case tools reverse engineering tools 2 ffl software metaprocess metaprocess whose goal maintain evolve whole software process ie software production process software process support software metaprocess ffl software metaprocess model model software metaprocess ffl software process software production process software metaprocess corresponding software process support ffl software process model model software process ffl software process modeling language formal notation used express software process models may sublanguages corresponding submodels different aspects software process objectoriented entityrelationship modeling often used describe software items relationships software activities often expressed either production rules triggers task networks process programs hybrids tools often described activity envelopes bcn90 operation signatures express formal io parameters constraints since want model metaprocess software production process process modeling language must offer reflective features ie must possible create models able modify structure nonreflective formalisms model part software process typically software production process used describe single integrated system process metaprocess activities ffl software project instantiation software process produce specific software product given organization specific temporal constraints objectives ffl software process evolution effect operations issued within software metaprocess modify partially replace refine customize software production process software metaprocess software process support evolution thus encompasses realworld software production process software metaprocess description software process model discussed section 3 summing software production process software metaprocess entities 2 note businesses software production modeled supported using framework presented paper substituting software production technology kinds technologies example information systems processes humans computer tools cooperate achieve specific business goal eg provide financial banking similar kinds services production technology used within processes edp systems similar computerized applications realworld described models enable use computers support control discussed detail later models manipulated different ways order achieve abovementioned goals control support evolve according evolution external realworld process elements considered versioned composite object controlled configuration management cm system raises classical issues change consistency control change propagation etc traditionally cm needs pm control activities related updating change propagation auditing rebuilding etc conversely process elements cm control corresponding metaactivities see next section cjm 3 software process evolution metaprocess previous section software process defined composition software production process software metaprocess 3 corresponding software process sup port fully understand nature software process evolution understand components evolve considering isolation taking account possible mutual dependencies firstly obviously possible change production process without modifying meta process means change way conduct production activities change way model evolve also since models partial change realworld process effect modeled parts need reflected changes process support secondly improve modify metaprocess ie way model evolve software process without affecting production process thirdly possible change process support even neither production process metaprocess changed process model associated tools may extended ie cover parts process described initial model refined ie give details made powerful eg giving better user guidance without needing change realworld process summary software production process metaprocess corresponding models may evolve independently one another 31 evolution process support characterize evolution software process support need better understand nature structure software process model evolution drive cause evolution entire process support software process model composed several model variations holding refined customized embodiments representations model variations classified three different categories levels 3 following consider processes domain software abbreviated forms pro duction process metaprocess frequently used meaning software production process software metaprocess respectively purpose purpose variation application change model model template none create modify enactable create modify enacting create modify figure 1 operations variations model application model change 1 template model variation definition process model expressed process modeling language depending underlying paradigm language template may consist type definitions reentrant code simply source code may generate several runtime occurrences 2 enactable model variation uniquely identifiable instance obtained template variation furthermore contains necessary contextspecific information make possible execute 4 notice thus given time possible several enactable variations originated template variation 3 enacting model variation enactment actually starts binding process model interpreter explicit enactment state enacting variation created enactable application dimension describe primitive operations three variations process models order create one another also change dimension characterize modifications applied existing variation according given requirements example template variation software process model changed specify alternative better way accomplish given goal specializedcustomized cope specific requirements example also possible modify enactable variation without changing template variation software process model enacting variation created start executing two relevant primitive operations variations create modify enactment software process model involves six possible operations creation modification three model variations depending purpose enactment step different operations invoked shown figure 1 ffl purpose apply existing model new enactable enacting variations created ffl purpose change existing model accomplished either creating modifying template modifying enactable enacting variations operations model variations implemented tools software process support eg process language editor process language interpreter debugger enacting line common practice use enactment synonym execution domain process models variations etc let us consider three process support systems three authors involved slang bfg93 one process engine tool creates enactable enacting variations intertwined way starting template variation software process model epos c 90 planner tool creates enactable variation second execution manager tool creates operates executes enacting variations two tools work intertwined process weaver fer93 process instantiation tool copies template provides enactment parameters links interpretor form enactable variation enacting variation created process starter tool simply managed unix process process instantiation starter tools accessed enacting models allow process support metaprocess addition three process support systems offer process model editors help creating modifying template variations evolution software process support simply creation modification template variations different scenarios envisaged considering different sequences variation operations consider three significant styles evolution ffl first style call delayed change software process support modify template variation software process model propagate corresponding modification existing enactable enacting variations modification seen new enactable enacting variations process model created ffl second style call busy change software process support modify template variation software process model also propagate consequences modification enactable enacting variations generated ffl third style call local customization enactable enacted variation software process model case interested change affect template variation software process model effective long affected variation exists software process described single integrated model reflective system operations invoked activity variation part metaprocess general therefore evolution software process model carried control enacting metavariations fact particularly significant shall consider structure metaprocess following important comment concerns granularity operations along two dimensions sake simplicity implicitly assumed variation associated process model actually possible extend redefine variation concept eg activity level activity template variation several enactable enacting variations extension substantially affect general scheme presented indeed allows us characterize real situations software process model evolves invocation operations applied eg single activity variations software process model notice also borderlines different kinds model variations may technically vanish adopting specific technologies within process formalism support tools particular latedynamic binding facilitate incremental creation evolution template enactable enacting variations thus providing high degree flexibility variability 32 evolution processes previous section concerned evolution process support specially models various forms little said evolution process focus identify new process meets new requirements build process model sufficient detail allow enactment support new process outside scope laboratories however unlikely new process corresponding enactment new process model installed without preparation migration existing process target process metaprocess transient change process part problem addressed metaprocess therefore define process model transient process numerous advantages creating explicit model transient process firstly model constitutes proof target process attainable existing process impossible define transient process also unlikely defined target process replace existing process secondly may guide preparation environment accept new target process preparation may farreaching include technical aspects introduction new tools environment transformation data correctly represent new types information structures well nontechnical aspects user training motivation preparation new user documentation thirdly may used plan budget introduction new process process improvement ultimately measured terms cost benefits changing existing process must therefore measurable either short term eg reduced endtoend time resource costs medium term eg better sharing resources higher degree reuse across projects long term eg higher skills better team motivation however benefits improved processes must put relation cost process change ie cost transient process finally transient process model help measure progress introducing new target process state transient process indicates far process improvement activity come reach goal installing new process 33 structure metaprocess process lifecycle previous sections provided concepts understand nature software processes realworld corresponding models characterize changed section shall consider evolution general point view analyze properties metaprocess stated earlier metaprocess process concerned creating evolving software process means must include activities allow agents apply changes existing process corresponding process support therefore section describe metaprocess terms principal constituent metaactivities metaactivities built composed many different ways ie possible identify one universal metaprocess possible software processes however possible define basic general metaactivities constitute skeleton metaprocess technology provision metaactivity charge producing acquiring technologies tools used within production process software production technologies software process support software process support technology notice involves actual production technology leads process within process thus introduces level recursion software process process requirements analysis metaactivity takes account software production process metaprocess existing software process support provide new requirements design metaactivity resulting requirements specify part features properties software process offer process design new software process created new requirements existing process identified metaactivity provides general detailed architecture software process design specifications might affect different parts software process ie production process metaprocess andor process support important input metaactivity description technology integrated used within software process process implementation metaactivity charge implementing design specification produced previous metaactivity described previously includes two conceptually distinct aspects ffl changing process support section 31 design specification requires creationmodification process support implementation accomplished creating modifying model variations software process model possibly fine granularity addition comes possible changes support tools ffl changing realworld process section 32 design specification requires modificationcreation realworld process usually involves definition transient change process manage installation new process process assessment metaactivity provides quantitative qualitative information describing performance software process information used process requirements analysis metaactivity want stress proposed set metaactivities impose specific metaprocess lifecycle give indication fundamental steps taken order manage software process possible support metaprocess following evolutionary incremental lifecycle able technically build software process support allows us launch multiple metaactivities different metaactivity variations notice also evident analogy metaprocess software process domain traditional software production lifecycles suggests identify adopt technologies methods might quite similar least principle used software production instance might use executable specifications analysis design implementation metaactivities order support metaprocess based transformational lifecycle particular aspect software process domain however evolving reflective nature imposes specific requirements software process support technology see section 4 34 key roles software process following main roles identified relation principal activities software process process owner responsible software process consideration provides informal process descriptions evaluates process performance thus producing additional feedback requirements process improvement process owner main source information process analysis metaactivity process technology provider responsible providing software process technol ogy metaactivity technology provision process designer responsible providing process support software process template variation process model specifications process support tools metaactivities process requirements analysis process design process manager responsible implementation software process particular transformation template variation process model enactable enacted variations process manager also charge collecting data information describing performance software process metaactivities process implementation process assessment process agent human operates within software production process process agent uses set domainapplicationspecific rules tools technologies controlled assisted enforced software process support 4 techniques methods process evolution mentioned process consists production process metaprocess consisting external process elements artifacts agents tools etc ie realworld internal process support latter consists process model different variations process model support tools natural question aspects process elements support process pa rameters inclined allowed change due inputs feedbacks change implemented propagated metaactivity human roles involves discussing detailed requirements architecture metaprocess implementation thus specific procedures rules activities used produce enact maintain software process previous section discussed aspects mainly process models evolution associated metaactivities following first elaborate nature metaprocess categorize available techniques manage process evolution sketch framework method support evolution discuss current method approaches focus evolution models tools external process artifacts 41 nature metaprocesses need character process support process changes differ organizations sometimes fixed process imposed management times process change almost continuously process agents acting process managers controlled manner latter case want treat metaactivities flexible integrated parts process need activated appropriate times points process lifecycle feedbacks incremental detailing model definitions often technically modeled implemented normal production activities special metaactivities previous discussions four observations naturally come ffl metaactivities deep semantics may occur frequently activities may fundamentally affect process behavior metaartifacts large influence range frequent process changes also necessitate technologies like dynamic schemas rapid prototyping see next subsection ffl metaactivities must carefully controlled regardless underlying machinery change support need methods structure control metaprocess cannot allow undisciplined access transformations metamodels metatools ffl potentially infinite recursion metameta processes metaprocess normal process created controlled maintained metametaprocess produce metaprocess like reflective framework must let metatools embedded semantics root recursion note analogy bootstrapped systems eg selfdefining compilers two recursion steps per new version compiler ffl lessons learned software engineering respect methods techniques tools mechanisms principles methods policies implement within metaprocess produce build maintain software process existing software production technologies methods carefully assessed verify suitability within software process metaprocess domain could even suggest case tools process support assisting development maintenance process models tools integrated metatools would combine individual metatools technologies could coherently offer metaactivity support model definition analysis creation evolution assessment etc high degree flexibility meta metalevel needed case tools effective 42 mechanisms assist process evolution software technology embodies arsenal techniques used support meta processes rulebased expression constraints rapid prototyping structured analysis design topdown andor bottomup design objectoriented design coding modularization explicit interfaces reusable libraries reflection dynamic binding verification validation including testing configuration management schema evolution assessment propagation sideeffects access control human roles etc properly support process model evolution transformation probably need several kinds mechanisms following five technologies seem important flexible architectures support reconfigurable modular distributed systems needed order dynamically reconfigure process support environment upon changes ffl reflection ie process modeling language support late dynamic binding allow executable code manipulated data like lisp smalltalk prolog necessary make possible dynamically reason upon manipulate interpret model code eg represented reified classes metaclasses mn88 needed want describe software process single integrated model therefore process support environments highly diverse process modeling languages rely techniques achieve model flexibility enactment ffl schema evolution versioning technically manage evolving typesclasses versioned modified classes possible consequences class instances 5 see also subclasses genericsparameterized classes views instancelevel delegation adhoc embedded binding mechanisms process support tools schema evolution discussed extensively database literature b 87 fundamental impact persistent data structured according given schema however process models mostly need consider soft behavioral changes hard changes structure stored data altering attribute layout surgery class hierarchy ffl impact analysis needed assess effect changes eg check stated constraints still satisfied potential change restricting access rights eg modularization interfaces scoping associating roles activities 43 methods principles guide process evolution previous subsection dealt technical mechanisms handle process support evolution shall briefly study define method ie metalevel rules policies etc control guide evolution assume method used define provide initial process support also used evolve later definition process support evolutionary namely need evolutionary production method software processes method must cover entire lifecycle process technology provision analysis design implementation assessment opinion total method reached sufficient maturity consider today method fragments may applied individual metaactivities exploiting established methods software engineering might come following list ffl technology provision various process support tools need embody significant number mechanisms described section 42 due researchoriented nature expected technology provision prototypeoriented evolutionary introduction new features ffl process requirement analysis generally believe conventional methods analysing information systems like sadtros77 semantic modeling objectoriented analysis used certain pects however current knowledge especially finegrained process aspects 5 software artifacts longer lifetime stable modelsest92 low need rely combinations knowledge acquisition techniques formal techniques ffl process design expect process modeling languages design implementation embody known support modularity reuse future trend significant number process supported projects successfully completed towards process design reusable process fragments role process designer change character technical good programming skills towards focus quality methods techniques ffl process implementation process implementation probably innovative area role process manager quite new responsibilities somewhere quality manager project manager typical processes manage cross organizational boundaries ie involve several teams subteams especially domain process evolution activity entangle new methods techniques technical managerial ffl process assessment seems emerging process capability method hum88 application must regretfully conclude section saying little new method work systematic support process evolution production process metaprocess large repertoire technologies available process metaprocess modeling instrumentation complete method base missing one significant example however method encompassing production process metaprocess prism model change mad91 method suggests general scheme apply track changes different kinds artifacts software items roles also process models metaprocess related entities 5 example bank edp center edp center bank usually large organization whose goal provide bank departments computer applications support conduct banks business ie offer efficient valuable financial services customers edp center software process analysts programmers human agents use software development tools follow specific rules procedures order produce abovementioned software products management edp center must coordinate manage different activities carried within ensure software products delivered maintained according edp centers quality plan moreover maintain evolve process used deliver software products ie manages metaprocess metaprocess charge acquiring new software development tools eg new cobol compiler reverse engineering tool introducing new methods approaches software development eg prototypebased development updating procedures used software process eg modifying cm operating procedures production process metaprocess described better provide guidance support edp centers employees let us assume metaprocess formally modeled supported moreover assume process support includes model part software production process namely cm activities worthwhile see different kinds changes accomplished described using conceptual framework presented paper ffl enriching process productivity measurements let us suppose decide introduce measurement activity software pro cess evaluate programmer productivity requirement established managing director bank process owner wants clearer assessment productivity edp center designing change process software process designer realizes affect current model software production process since least first place deal cm activ ities decides software production process modified programmers filling information form soon release source module implementation design specification accomplished sending memorandum programmers indications accomplish abovementioned measurement activity distributing copy form ffl revising process model cm procedures checkin later may want change way specific part cm activity carried particular want add step checkin procedure email automatically sent programmer releasing module invite complete productivity form might also require checkin operations terminated yet restarted using new activity specification using terminology introduced previous sections specification requires modified template variation checkin activity modify enactable enacted variations accordingly implement modification therefore use model editor modify template variation checkin activity adding invocation email tool moreover need invoke monitordebugger tool propagate modification ongoing checkin activities ie existing enactable enacted variations model editor mon itordebugger metatools process support technology used create software process support notice since metaprocess modeled thus managed software process support process managerdesigner properly invoke editor monitor order accomplish required modification software process support ffl modeling implementation metaactivity busy vs delayed propagation model changes finally may want change process support introducing model implementation metaactivity therefore introducing way automatically support changes software process previous case invoke editor specify new template variation describing implementation metaactivity variation contain formal description steps manually conducting far example modify checkin activity model particular contain invocations model editor monitor specify use accomplish required evolution strategy delayed change busy change soon editing activity terminated template variation implementation metaactivity therefore available possible implement changes process model creating enactable enacted variations newly created meta activity eventually manually introduced changes software process model automatically support guide future modifications seems us example demonstrates proposed framework fruitfully used describe analyze evolution software process ie software production process metaprocess software process support particular possible describe operations occurring integrated production process metaprocess system according highlevel reference model using set coherent consistent concepts 6 conclusions paper presented reference framework concepts software processes emphasis evolution main concepts follows whole process consists production process metaprocess process support production process set external production elements realworld activities artifacts tools agents roles embedding project metaprocess set similar external metaelements evolve control whole process process support internal process model tools govern production process metaprocess metaactivities divided five phases process lifecycle technology provi sion process requirements analysis process design process implementation process assessment phases active finegrained incremental way eg based feedbacks later phases process model describes abovementioned process elements possibly fine granu larity dynamically incrementally reelaborated transformed process implementation metaactivity goes template model variation via enacted model variation enacting model variation framework applicable technology providers technology users act mere checklist eg system x offer formal metaprocess tools enacting template models rather provide systematic way understand assess compare process support systems compare objectoriented database system manifesto abd section 1 paper points related work much underlying technology taken adapted general software engineering including dynamic instrumentation binding facilities however still miss reference method process evolution covers nontrial applica tions coupled tools roles process actors metaprocess also need better understanding process implementation issue especially respect managing process evolution framework evaluated esprit basic research action 7082 promoter applied different scenarios process management systems acknowledgements thanks go participants 2nd european software process workshop partners promoter particular want acknowledge contribution bob snowdon icl provided us many valuable ideas comments individually authors also want express thanks colleagues politecnico di milano cefriel nth cap gemini innovation eureka software factory project r objectoriented database system manifesto atis reference model process modeling large slang semantics implementation schema evolution objectoriented databases characteristics large systems design kernel epos software engineering environ ment towards reference framework fundamental software process concepts fundamental software process concepts discussing dynamic typing adele versioned software engineering database process weaver adding process support unix software process development enact ment definitions workflow management software business opportunity characterizing software process maturity framework ieee computer society ieee computer society structured conceptual terminological framework software process engineering process cycle structured analysis requirements definition tr ctr ulrike beckerkornstaedt roman reinert concept support process model maintenance systematic experience capture proceedings 14th international conference software engineering knowledge engineering july 1519 2002 ischia italy gregor joeris change management needs integrated process configuration management acm sigsoft software engineering notes v22 n6 p125141 nov 1997 bjrn decker jrg rech klausdieter althoff andreas klotz edda leopold angie voss eparticipative process learning processoriented experience management conflict solving data knowledge engineering v52 n1 p531 january 2005