formal verification standards distance vector routing protocols show use interactive theorem prover hol together model checker spin prove key properties distance vector routing protocols three case studies correctness rip standard sharp realtime bound rip stability preservation loopfreedom aodv distance vector protocol wireless networks develop verification techniques suited routing protocols generally case studies show significant benefits automated support reduced verification workload assistance finding new insights gaps standard specifications b introduction aim paper study methods automated reasoning used prove properties network routing protocols carry three case studies based distance vector routing study provide proof automated formal sense computer aided construction checking proof using formal mathematical logic able show automated verification key properties feasible based ietf standard draft specifications efforts achieve automated proofs aid discovery useful properties direct attention potentially troublesome boundary cases automated proofs also supplement means assurance like manual mathematical proofs testing easing workload tedious checking cases providing thorough analyses certain kinds conditions 11 case studies first case study proves correctness asynchronous distributed bellmanford protocol specified ietf rip standard 7 12 classic proof pure form protocol given 2 result covers additional features included standard improve realtime response times eg split horizons poison reverse features add additional cases considered proof automated support reduces impact complexity adding extensions make theory better match standard hence also implementations proof also uses different technique one 2 providing noteworthy properties network stability second case study provides sharp realtime convergence bound rip terms radius network around nodes worst case bellmanford protocol convergence time bad number nodes network however maximum number hops source needs traverse reach destination k radius around destination link changes rip converge k timeout intervals destination easy see convergence occurs within proof sharp bound k complicated number cases need checked show use automated support verification based approach developed previous case study thus network maximum radius 5 destinations converge 5 intervals even network 100 nodes assuming timing intervals rip standard network converge within 15 minutes link changes find statement result literature may folklore knowledge main point show automated support cover realtime properties routing protocols third case study intended explore automated support assist new protocol development efforts consider distance vector routing protocol arising work manet ietf work group mobile ad hoc networks specific choice adhoc ondemand distance vector aodv protocol perkins royer 18 specified second version ietf internet draft 17 protocol uses sequence numbers protect formation loops widely noted shortcoming rip proof loops cannot form given 18 show derive property general invariant paths formed aodv essentially recasting proof contradiction 18 positive result use invariant analyze conditions concerning failures fully specified 17 could affect preservation key invariant treated properly primary conclusion automated verification tools aid analysis emerging protocol specifications acceptable scales effort timetomarket 12 verification networking standards automated logical reasoning computer systems widely known formal methods successful number domains proving properties computer instruction sets perhaps established application many major hardware vendors programs modeling verification systems using formal methods another area success safety critical devices instance 6 studies invariants weapons control panel submarines modeled contractor design documents study led good simulator panel located serious safety violations application formal methods software slower process noteworthy success avionic systems air traffic control systems others one key impediment applying formal methods nonsafety critical systems concerns existence specification software system necessary know software intended satisfy verification possible many software systems technical specification exists verification documented properties means checking invariants inline code comments examples user manuals exception lack documentation software telecommunications area researchers penchant detailed technical specifica tions rip offers case study motivation early implementations distance vector routing incompatible routers running rip domain needed use implementation users implementors led correct problem providing specification would define precise protocols packet formats find resulting standard 7 12 precise enough support without significant supplementation detailed proof correctness terms invariants referenced specification proved properties guaranteed hold conformant implementation network conformant routers rip perhaps better average respect since 1 standard seeks bind closely underlying theory 2 distance vector routing simpler alternative routing approaches 3 stage rip highly seasoned standard whose shortcomings identified substantial experience say rip already verified referenced theory substantial gaps 7 12 asynchronous distributed protocol proved correct 2 algorithm different several nontrivial ways model different state maintained different analysis narrows gap extends results theory applied standard version protocol natural expect newer protocols possibly specified sequence draft standards gaps likely evolve useful application formal methods projects must track instability locating errors gaps quickly leveraging activities like revision draft standard development simulations implementations test agility tools methods extended analysis rip newer applications distance vector routing emerging area mobile ad hoc networks ad hoc networks networks formed mobile computers without use centralized authority variety protocols development networks 21 including many based distance vector routing 16 3 15 18 requirements routing protocol ad hoc networks quite different kinds networks considerations like highly variable connectivity low bandwidth links given rapid rate evolution area sheer number new ideas seems like appropriate area test case formal methods part protocol design effort 13 verification attributes routing protocols variety successful studies communication protocols instance 13 provides proof key properties ssl 30 handshake protocol 4 however studies date focused endpoint protocols like ssl using models involve two three processes representing endpoints adversary instance studies routing protocols must different flavor since proof works two three routers interesting unless generalized routing protocols generally following attributes influence way formal verification techniques applied 1 essentially unbounded number replicated simple processes execute concurrently 2 dynamic connectivity assumed fault tolerance required 3 processes reactive systems discrete interface modest complexity 4 real time important many actions carried timeout limit response timeout routing protocols attributes latencies information flow limiting example feasibility global concept time need protect network resources attributes sometimes make protocols complex instance asynchronous version bellmanford protocol much harder prove correct synchronous version 2 rip standard still harder prove correct addition complicating optimizations intended reduce latencies paper verify protocols using tools general hol tuned verification communication protocols spin tools described section 2 rest paper focuses applications case studies key technique replica generalization technique consists considering first router r connected interfaces network n satisfies property prove r satisfies property b next step attempt prove property c r assuming properties hold n b 0 property routers n satisfy b proof organized sequence replica generalizations using technique others provide proof correctness rip section 3 proof sharp realtime bound convergence rip section 4 proof path invariants aodv section 5 offer conclusions statistics final section 2 approaches formal verification computer protocols long chosen targets verification validation efforts primarily protocol design often introduces subtle bugs remain hidden runs protocol bugs nevertheless prove fatal system occur section discuss complexities involved verifying network protocols propose automated tool support task example consider simple protocol leaderelection network variant protocol used discovering spanning trees extended lan 19 20 network consists n connected nodes node unique integer id node least id called leader aim protocol every node discover id leader accomplish node maintains leaderid estimate leader based information far initially node believes leader every p seconds node sends advertisement containing leaderid neighbors receiving advertisement node updates leaderid received lower id message protocol involves n processes react incoming messages state system consists integer leaderids process events occur message transmissions initiated processes however due asynchronous nature processes message transmissions could occur order means period p seconds could n possible sequences events system needs react easy see manual enumeration protocol event state sequences becomes impossible n increased complex protocols manually tracing path protocol even single sample trace becomes tedious errorprone automated support kind analysis clearly required wellknown design tool protocol analysis simulation however simulate election protocol would first fix network size topology specify length simulation finally run protocol look trace given initial state single sequence events simulation process although informative provide complete verification verification provide guarantees behavior protocol networks lengths time possible initial states every sequence events occur discuss two automated tools help provide guarantees first describe modelchecker spin used simulate possibly verify protocol given network initial state describe interactive theoremprover hol manual effort used verify general mathematical properties protocol arbitrary network 21 model checking using spin spin modelchecking system 9 10 widely used verify communication protocols spin system three main components 1 promela protocol specification language 2 protocol simulator perform random guided simulations 3 modelchecker performs exhaustive statespace search verify property holds possible simulations system verify leaderelection protocol using spin first model protocol promela promela model consists processes communicate messagepassing along buffered channels processes modify local global state result event promela process modeling leader election protocol single node given table 1 hardcode table 1 leader election promela define nodes 3 define bufsize 1 chan chan broadcast 0 intint int leaderidnodes proctype node int int myid int advert else skip true broadcastmeleaderidme od network broadcast mechanism simulate protocol using spin spin simulates behavior protocol random sequence events viewing values leaderids period simulation provides valuable debugging information well intuitions possible invariants system finally use spin verifier prove election protocol succeeds 3node network involves specifying correctness property linear temporal logic ltl case specification simply insists leaderid node eventually stabilizes correct id verifier carries exhaustive search ensure property true every possible simulation system fails allowed event sequence verifier indicates failure along counterexample subsequently resimulated discover possible bug 22 interactive theorem proving using hol hol theorem proving system 5 8 widely used generalpurpose verification environment main components hol system 1 functional programming language used specifying functions 2 higherorder logic used specify properties functions 3 proof assistant allows user construct proofs properties using inbuilt userdefined proof techniques programming model proof environment general capable proving mathematical theorem designing proof strategy users responsibility order model leaderelection protocol hol need model processes messagepassing functional framework take cue reactive nature protocol input protocol potentially infinite sequence messages processes considered functions take message input describe system state modified resulting model essentially function table 2 note generality table 2 state update function function update receiver mesg else statereceiver else statenode programming platform allows us define protocol arbitrary network uniform way specify property desire protocol theorem wish prove hol theorem 1 eventually every nodes leaderid minimum node ids network order prove property specify lemmas must true protocol well easily encoded higherorder logic node leaderid decrease time lemma 3 state network unchanged message node n 1 node n 2 well message n 2 n 1 leaderids n 1 n 2 must lemma 4 nodes leaderid becomes correct stays correct finally construct proof desired theorem proof assistant organizes proof ensures proofs complete bugfree first prove lemmas case analysis states possible messages point time lemmas 2 3 used prove state network must progress nodes leaderid moreover since leader nodes leaderid never changes lemma 4 nodes must end correct leaderid proofs carried simple deductive style managed proof assistant proof one many different proofs could developed hol system example instead correctness interested proving long protocol takes elect leader could prove following lemma recall p interval advertisements lemma 5 nodes within distance k leader become correct seconds nodes within distance must become correct within seconds conjunction lemma 4 provides informative inductive proof theorem 23 model checking vs interactive theorem proving described two systems address common protocol verification problem two systems clearly different payoffs spin offers comprehensive infrastructure easily modeling simulating communication protocols fixed verification strategies domain hand hol offers powerful mathematical infrastructure allowing user develop general proofs spin verifications generally bound memory expressiveness hol verifications bound manmonths technique code protocol first spin use hol address limits expressiveness spin achieved using hol prove abstractions showing properties like property p holds two routers hold arbitrarily many routers advertisements distances assumed equal k k 1 also abstraction proofs hol used reduce memory demands spin proofs assure spin implementation properly reflected standard give examples tradeoffs case studies summarize statistical data conclusions 3 stability rip assume reader already familiar rip protocol specification given 7 12 good exposition found 11 31 formal terminology model universe u bipartite connected graph whose nodes partitioned networks routers router connected least two networks goal protocol compute table router providing network n length shortest path n next hop along one path protocol viewed inappropriate networks 15 hops router destination network hop count limited maximum 16 network marked hops away considered unreachable proof shows destination routers eventually obtain correct shortest path entry router r consists three parameters current estimate distance metric integer 1 16 inclusively ffl nextnr next network route ffl nextrr next router route r nextrr must connected nextnr say r points nextrr initially routers connected must metric set 1 others must set values strictly greater 1 two routers neighbors connected network universe changes state ie routing tables reaction update messages sent neighboring routers update message represented triple snd net rcv meaning router src sends current distance estimate network net router rcv cases cause receiving router update routing entry infinite sequence messages snd said fair every pair neighboring routers r exchanges messages infinitely often property simply assures router communicate routing information neighbors distance defined ae r connected neighbor rg otherwise k 1 kcircle around set routers say universe kstable following properties s2 hold every router r 2 c k metric set actual distance r connected next network next router set first network router shortest path s2 every router r 62 c k given kstable universe say router r distance k 1 1stable optimal route 32 proof results first goal show rip indeed eventually discovers shortest paths length less 16 theorem 6 correctness rip k 16 starting arbitrary state universe u fair sequence update messages time k u kstable times k particular 15stability achieved original goal notice result applies arbitrary initial state critical fault tolerance aspect rip since assures convergence even presence topology changes long changes frequent apply theorem periods proof call radius proof differs one described 2 asynchronous bellmanford algorithm rather inducting estimates upper lower bounds distances induct radius kstable region around proof two attributes interest 1 states property rip protocol rather asynchrous distributed bellmanford algorithm closer analysis reveals subtle substantial differences two case bellmanford routers keep neighbors recently advertised metric estimates whereas rip keeps best value furthermore bellmanford metric ranges set positive integers rip metric saturates 16 regarded infinity finally rip includes certain engineering optimizations split horizon poison reverse exist bellmanford algorithm 2 radius proof informative shows correctness achieved quickly close destination slowly away exploit next section show realtime bound convergence theorem 6 proved induction k four parts lemma 7 universe u initially 1stable lemma 8 preservation stability k 16 universe kstable time kstable time 0 lemma 9 k 15 router r universe kstable time k time rk stable times rk universe u kstable time k time k1 k u 1stable times lemma 7 easily proved hol serves basis overall induction lemma 8 fundamental safety property also proved hol parts proved either tool typically done spin since provides automation lemma 9 main progress property proof proved spin spin used verification models constant upper bound number states whereas model lemma 9 principle arbitrarily large state space problem solved finding finitary propertypreserving abstraction system checking desired property abstracted system using spin proof abstraction indeed propertypreserving done hol proof whole illustrates well two systems prove properties team interestingly enough argument uses previouslyproved lemma preservation stability instance replica generalization proving one invariant allowed us simplify ie abstract system turn facilitated derivation yet another property lemma 10 inductive step derived hol easy generalization lemma 9 considering fact number routers finite timing bounds rip stability previous section proved convergence rip conditioned fact topology stays unchanged period time calculate big period time must need knowledge times protocol events must occur case rip use following fundamental timing assumption value delta every topologystable time interval length delta router gets least one update message neighbors assumption make timing update messages rip routers normally try exchange messages every failure receive update within 180 seconds treated link failure thus satisfies fundamental timing assumption rip previous section concentrate particular destination network timing analysis based notion weak kstability say universe u weakly kstable following conditions hold kgammastable hopsr k weak kstability stronger 1stability weaker kstability disjunction ws2 distinguishes weak stability ordinary stability typically introduce additional complexity case analyses arising reasoning weak stability kstability following lemma 11 preservation weak stability 2 k 15 universe weakly kstable time weakly kstable time must also show initial state inevitably becomes weakly 2stable messages exchanged every pair neighbors lemma 12 initial progress topology change universe becomes weakly 2stable delta time main progress property says takes 1 update interval get weakly kstable state weakly 1stable state property shown two steps first show condition ws1 1stability holds delta lemma 13 2 k 15 universe weakly kstable time kstable time delta show conditions ws2 ws3 following puts steps together lemma 14 progress 2 k 15 universe weakly kstable time weakly k 1stable time delta radius universe respect maximum distance r routerg main theorem describes convergence time destination terms radius theorem 15 rip convergence time universe radius r becomes 15 stable within maxf15 rg delta delta time assuming topology changes time interval theorem easy corollary preceding lemmas consider universe radius r 15 show converges r delta delta time observe happens deltainterval time delta weakly 2stable lemma 12 3 delta delta weakly 4stable lemma r r delta delta rstable lemma rstability means routers r hops away shortest routes since radius universe r includes routers interesting observation progress ordinary kstability ordinary k1stability guaranteed happen less 2 delta leave reader consequently chosen calculate convergence time using stability rather weak stability would get worse upper bound 2 delta fact upper bound sharp linear topology update messages interleaved way convergence time becomes bad r delta delta figure 1 shows example consists k routers dr1 r2 r3 rk figure 1 maximum convergence time radius k respect router r 1 connected correct metric router r 2 also correct metric points wrong direction routers route state r 2 ignore message r 1 route better r 2 thinks already however receiving message r 3 points r 2 update metric lose route suppose point messages interleaved way every update interval routers first send update messages receive update messages neighbors cause exactly one new router discover shortest route every update interval router r 2 route second interval r 3 kth shows upper bound k delta delta reachable 41 proof methodology lemmas 11 12 14 proved spin lemma 13 consequence lemma 14 theorem 15 derived corollary hol spin turned extremely helpful proving properties lemma 14 involve tedious case analysis illustrate assuming weak kstability time let us look takes show condition ws2 weak 1stability holds delta time ws1 hold lemma 13 effort required ws3 prove ws2 let r router 1 weak kstability time two possibilities r 1 r kstable neighbor 2 neighbors r hops k show r eventually progress either k1stable state state hops k1 need break case 2 three subcases respect properties router r points 2a r points 2 c k kcircle neighbor r c k 2b r points 2 c k r another neighbor 2 c k 6 2c r points 62 c k cases branches several subcases based relative ordering r possibly send receive update messages proofs hand difficult prone errors essentially proof deeplynested case analysis final cases straightforward provean ideal job computer spin verification divided four parts accounting differences possible topologies part distinguished process representing r another processes modeling environment r environment abstraction rest universe generates message sequences could possibly observed r sometimes model simplified allowing environments generate sequences possible reality affect confidence positive verification answers since invariant holds less constrained environment also holds constrained one spin considered cases manual proof would required 21487 altogether lemma 14 checked 17 seconds cpu time even counting setup time verification significant timesaver resulting proof probably also reliable manual one summarize similar analyses results conclusions verifying properties aodv mobile ad hoc network model consists number mobile nodes capable communicating neighbors via broadcast pointtopoint links mobility nodes nature broadcast media make links temporary low bandwidth highly lossy nodes used routers forward packets point time nodes thought forming connected ad hoc network multihop paths nodes environment goal routing protocol discover maintain routes nodes essential requirements protocol would 1 react quickly topology changes discover new routes 2 send minimal amount control information 3 maintain good routes data packet throughput maximized distancevector protocols like rip probably satisfactory requirements 2 3 however behavior protocols drastically altered presence topology changes example rip link goes network could take infinite time 15 update periods adapt new topology presence routing loops network resulting called countingtoinfinity problem routing loops could avoided distancevector protocols would strong candidates routing mobile adhoc networks variety proposals distance vector protocols avoid loop formation consider aodv 18 recently introduced protocol aims minimize flow control information establishing routes demand analysis based version 2 draft specification 17 network running aodv every node n maintains two counters sequence number seqnon broadcast id broadcast idn sequence number incremented node discovers local topology change broadcast id incremented every time node makes routediscovery broadcast node also maintains routing table containing routes destination needs send packets route contains hopcount hops n next node next n route also contains last known sequence number seqno n destination measure freshness route source node needs discover route destination broadcasts routerequest rreq packet neighbors rreq packet contains following fields hs seqnos hop cnt seqno broadcast idsi rreq thought requesting route least fresh last known destination sequence number seqno time packet informs recipient node hop cnt hops away node whose current sequence number seqnos consequently node receives new rreq rebroadcasts incremented hop cnt cannot satisfy request using source information packet every intermediate node also sets reverseroute node sent rreq broadcast id used identify discard multiple copies rreq received node rreq reaches node fresh enough route node unicasts routereply rrep packet back remember nodes forwarded rreq set reverse route used unicast rrep packet contains following fields hs seqnod hop cnt lifetimei rreq case message provides information hop cnt seqnod recipient node use set route route assumed valid lifetime milliseconds node receiving rrep updates route passes along towards requesting source node incrementing hop cnt case receiving node already route uses route maximum seqnod one least hop cnt process used establish routes network stable however link along route goes source node needs recognize change look alternative route achieve node immediately upstream link sends rrep messages neighbors actively using route rrep messages hop cnt set infinity 255 seqnod set one plus previously known sequence number forces neighbors recognize route unavailable forward message active neighbors relevant nodes know route failure note however process depends nodes directly connected link able detect unavailability link failure detection assumed handled linklayer mechanism nodes run hello protocol requires neighbors send periodic hello messages indicating availability 51 path invariants mentioned essential property aodv handling topological changes loopfree hand proof contradiction given 18 provide automated proof fact corollary preservation key path invariant protocol invariant also used prove route validity first model aodv spin promela processes node described earlier process needs maintain state form broadcastid sequence number routing table following write seqno denote ds sequence number seqnod process needs react several events possibly updating state main events neighbour discovery data control rreprreq packet arrival timeout events like link failure detection route expiration relatively straightforward generate promela processes 17 prove following invariant time aodv process node n every destination theorem 16 next 1 seqno 2 seqno n invariant two important consequences 1 loopfreedom consider network instant look routingtable entries destination data packet traveling towards would move along path defined next pointers however know theorem 16 hop along path either sequence number must increase hopcount must decrease particular node cannot occur two points path guarantees loopfreedom aodv 2 route validity loopfreedom finite network guarantees data paths finite guarantee path ends however sequence numbers along path hopcounts must strictly decrease theorem 16 particular last node n l path cannot hopcount infinity route since n l route must equal prove theorem 16 first prove following properties routing table node n considered function time lemma seqno lemma seqno hops suppose next define lut last update time last time next n changed n 0 claim following lemma holds times lut lemma 19 next 1 seqno n 0 lut 2 hops hops lemmas proved spin using promela model described earlier lemmas 17 proved without restrictions events produced environment lemma 19 trickier requires model record incoming seqno protocol decides change next n n 0 easily done addition two variables subsequently lemma 19 also verified spin proof three lemmas together imply theorem 16 involves standard deductive reasoning hol 52 failure conditions previous section described promela model aodv claimed straightforward develop protocol model standard specification 17 clear possible events corresponding actions internet draft leave boundary conditions unspecified particular say initial state node must assume reasonable initial state namely one nodes sequence number broadcastid 0 routing table empty proofs previous section carried initialstate assump tion however unclear assumption necessary importantly would aodv implementation chose default route sequencenumber fail satisfy crucial properties approach problem identifying key invariants must satisfied strategy node may use reboot choose invariant theorem 16 target efforts since violating invariant may result breaking loopfreedom property newlyinitialized node n break invariant exactly two ways 1 means node initialized route goes n 0 2 node n route n even though n come implies n previously active failed node failure noticed n key choices left implementor 1 whether node failures detected neighbors 2 whether nodes initialize default route 3 whether nodes initialize arbitrary sequence number however choice programmer makes must comply invariant proved theorem 16 keeping mind analyze possible choices first find failuredetection 1 necessary otherwise possible next route part 1 invariant theorem 16 immediately broken loops may formed instance n may soon look route accept route n offer thus forming loop assuming failure detection safest answer 2 disallow initial routes ensures invariant cannot violated therefore loop freedom preserved hand initial routes allowed multiple failures would make invariant impossible guarantee choice 3 comes play destination initialized assume route choices 3 obey invariant presence failure detection 1 moreover never member routing loop means choice 2 table 3 protocol verification effort task hol spin modeling rip 495 lines 19 defs 20 lemmas 141 lines proving lemma 8 9 lemmas 119 cases 903 steps proving lemma 8 29 lemmas 102 cases 565 steps 207 lines 439 states proving lemma 9 reuse lemma 8 abstractions 285 lines 7116 states proving lemma 11 reuse lemma 8 abstractions 216 lines 1019 states proving lemma 12 reuse lemma 8 abstractions 221 lines 1139 states proving lemma 14 reuse lemma 8 abstractions 342 lines 21804 states modeling aodv 95 lines 6 defs 302 lines proving lemma 17 173 lines 5106 states proving lemma lines 5106 states proving lemma 19 157 lines 721668 states proving theorem 16 4 lemmas 2 cases 5 steps would safe next irrespective invariant suggests analysis leads following theorem 20 aodv loopfree sufficient 1 node failures detected neighbors 2 initial state node n route n b destination either n route next n implementation aodv conform theorem example simple way guarantee nodefailure detection insist nodes remain silent fixed time coming sure previous absence detected ensuring rest conditions straightforward 6 conclusion paper provides extensive automated mathematical analysis class routing protocols date results show possible provide formal analysis correctness routing protocols ietf standards drafts reasonable effort speed thus demonstrating techniques effectively supplement means improving assurance manual proof simulation testing specific technical contributions include first proof correctness rip standard statement automated proof sharp realtime bound convergence rip automated proof loopfreedom aodv table summarizes experience complexity proofs terms automated support tools complexity hol verification human verifier described following statistics measuring things written human number lines hol code number lemmas definitions number proof steps proof steps measured number instances hol construct hol automated contribution measured number cases discovered managed hol measured number thenls weighted number elements argument lists complexity spin verification human verifier measured number lines promela code written spin automated contribution measured number states examined amount memory used verification mentioned spin memory bound verifications took less minute time generally proportional memory lemmas consumed spinminimum 254mb memory lemma 19 required 228mb figures collected runs lightlyloaded sun ultra enterprise 1016mb memory 4 cpus running sunos 551 tool versions used hol9010 spin 324 carried parallel proofs lemma 8 stability preservation lemma using hol hol together spin extensions results paper possible several areas additional pro tocols better tool support techniques proving kinds properties could prove correctness properties similar ones paper routing protocols including approaches like link state routing 1 would challenging prove ospf 14 complexity protocol specification techniques used would apply much needs done intend pursue better tool support particular interested integration simulation implementation code may allow us leverage several related activities also improve conformance key artifacts standard spin program hol invariants environment model simulation code course implementation one program analysis technology particular interest slicing since important know parts program might affect values messages also interested prove additional kinds properties security quality service including reservation assurances security particularly challenging difficulty modeling secrecy precisely acknowledgments would like thank following people assistance encouragement roch guerin elsa l gunter luke hornof sampath kannan insup lee charles perkins jonathan smith research supported nsf contract ccr 9505469 darpa contract f306029820198 r reliable data networks routing clustered multihop secure socket layer introduction hol theorem proving environment higher order logic applying scr requirements method weapons control panel experience report routing information protocol home page hol interactive theorem proving system design validation computer protocols spin model checker routing internet carrying additional information ospf version 2 highly dynamic destinationsequenced distancevector routing dsdv mobile computers ad hoc demand distance vector aodv routing algorithm distributed computation spanning trees extended lan interconnections bridges routers review current routing protocols ad hoc mobile wireless networks tr data networks design validation computer protocols temporal logic reactive concurrent systems interconnections bridges routers introduction hol model checking abstraction highly dynamic destinationsequenced distancevector routing dsdv mobile computers routing internet model checker spin efficient routing protocol wireless networks applying scr requirements method weapons control panel analysis bgp convergence properties algorithm distributed computation spanningtree extended lan stable internet routing without global coordination fault origin adjudication adhoc ondemand distance vector routing ctr shahan yang john baras modeling vulnerabilities ad hoc routing protocols proceedings 1st acm workshop security ad hoc sensor networks october 31 2003 fairfax virginia michael compton stennings protocol implemented udp verified isabelle proceedings 2005 australasian symposium theory computing p2130 january 01 2005 newcastle australia steve bishop matthew fairbairn michael norrish peter sewell michael smith keith wansbrough engineering logic hol specification symbolicevaluation testing tcp implementations acm sigplan notices v41 n1 p5566 january 2006 nick feamster hari balakrishnan detecting bgp configuration faults static analysis proceedings 2nd conference symposium networked systems design implementation p4356 may 0204 2005 steve bishop matthew fairbairn michael norrish peter sewell michael smith keith wansbrough rigorous specification conformance testing techniques network protocols applied tcp udp sockets acm sigcomm computer communication review v35 n4 october 2005 sebastian nanz chris hankin framework security analysis mobile wireless networks theoretical computer science v367 n1 p203227 24 november 2006 alwyn goodloe carl gunter markoliver stehr formal prototyping early stages protocol design proceedings 2005 workshop issues theory security p6780 january 1011 2005 long beach california alma l juarez dominguez nancy day compositional reasoning portbased distributed systems proceedings 20th ieeeacm international conference automated software engineering november 0711 2005 long beach ca usa