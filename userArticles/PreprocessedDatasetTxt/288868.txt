rankings graphs vertex edge coloring phivrightarrow 12ldots phierightarrow 12ldots graph gve vertex edge tranking two vertices edges color every path contains vertex edge larger color em vertex ranking number chirg em edge ranking number chirg smallest value g vertex edge tranking paper study algorithmic complexity sc vertex ranking sc edge ranking problems shown chirg computed polynomial time restricted graphs treewidth k fixed k characterize graphs vertex ranking number chir chromatic number chi coincide induced subgraphs show chirgchi g implies chi gomega g largest clique size give formula chirkn b introduction paper consider vertex rankings edge rankings graphs vertex ranking problem also called ordered coloring problem 15 received much attention lately growing number applications applications scheduling problems assembly steps manufacturing systems 19 eg edge ranking trees used model parallel assembly product components quite natural manner 6 12 13 14 department computer science utrecht university po box 80089 3508 netherlands email hansbcsruunl author partially supported esprit basic research actions ec contract 7141 project alcom ii department computer science engineering university nebraska lincoln lincoln ne 685880115 usa author partially supported office naval research grant n001491j1693 z institut fr informatik tu munchen 80290 munchen germany leave univer sitat trier germany x department mathematics computing science eindhoven university technology pobox 513 5600 mb eindhoven netherlands irisa campus universitaire de beaulieu 35042 rennes cedex france leave friedrichschilleruniversitt jena author partially supported deutsche kr 137111 k fakultt fr mathematik und informatik friedrichschilleruniversitt universitts hochhaus 07740 jena germany computer automation institute hungarian academy sciences h1111 budapest kende u 1317 hungary author partially supported otka research fund hungarian academy sciences grant 2569 furthermore problem finding optimal vertex ranking equivalent problem finding minimumheight elimination tree graph 6 7 measure importance parallel cholesky factorization matrices 3 9 18 yet applications lie field vlsilayout 17 26 vertex ranking problem given graph g positive integer decide whether r g npcomplete even restricted cobipartite graphs since pothen shown equivalent minimum elimination tree height problem remains npcomplete cobipartite graphs 20 short proof npcompleteness vertex ranking given section 3 much work done finding optimal rankings trees trees lineartime algorithm finding optimal vertex ranking 24 closely related edge ranking problem trees 3 algorithm given 8 recently zhou nishizeki obtained log n algorithm optimally edge ranking trees 28 see also 29 efficient vertex ranking algorithms permutation trapezoid interval circulararc circular permutation graphs cocompara bility graphs bounded dimension presented 7 moreover vertex ranking problem trivial split graphs solvable linear time cographs 25 15 typical graph theoretical questions known coloring theory graphs investigated also leads n bound vertex ranking number planar graph authors describe polynomialtime algorithm finds vertex ranking planar graph using n colors graphs general approximation algorithm performance ratio olog 2 n vertex ranking number 3 16 3 also shown one plus pathwidth graph lower bound vertex ranking number graph hence planar graph pathwidth n also shown 16 using different methods goal extend known results algorithmic graph theoretic directions paper organized follows section 2 necessary notions preliminary results given study algorithmic complexity determining whether graph g fulfills r g 0 respectively sections 3 4 5 section 6 characterize graphs vertex ranking number chromatic number coincide every induced subgraph graphs turn precisely containing path cycle four vertices induced subgraph hence obtain characterization trivially perfect graphs 11 terms rankings moreover show implies chromatic number g equal largest clique size section 7 give recurrence relation allowing us compute edge ranking number complete graph preliminaries consider finite undirected simple graphs e throughout paper n denotes cardinality vertex set v denotes edge set e graph e graphtheoretic concepts definitions properties graph classes given refer 4 5 11 e graph subset u v independent pair vertices nonadjacent graph e bipartite partition v two independent sets b complement graph e graph g vertex set v edge set ffv wg j v 6 eg w v denote gw subgraph e induced vertices w x e write gx graph edge set x e graph let positive integer vertex tranking called ranking short ambiguity coloring every pair vertices x every path x vertex z path cz cx vertex ranking number g r g smallest value graph g admits tranking definition adjacent vertices different colors tranking thus ranking proper tcoloring hence r g bounded chromatic number g vertex r granking g said optimal vertex ranking g edge ranking problem closely related vertex ranking problem e graph let positive integer edge tranking edge coloring c 0 every pair edges e f c 0 every path e f edge g path c 0 g c 0 e edge ranking number 0 r g smallest value g edge tranking remark 3 onetoone correspondence edge trankings graph g vertex trankings line graph lg hence 0 edge tranking graph g particular proper edge coloring g hence r g bounded chromatic index 0 g edge 0 r granking g said optimal edge ranking g shown 7 vertex ranking number connected graph equal minimum elimination tree height plus one thus vertex separators edge separators convenient tool investigating rankings graphs subset graph e said separator gv n disconnected subset r e graph e said edge separator edge cut ge n r disconnected paper use separator tree studying vertex rankings concept closely related elimination trees cf3 7 18 definition 4 given vertex tranking connected graph e assign rooted tree c inductive construction separator certain induced subgraph g assigned internal node c vertices set assigned leaf c different colors 1 color occurs g c consists single vertex r called root assigned vertex set g 2 otherwise let largest color assigned one vertex c separator g create root r c assign r induced subgraph g corresponding subtree rooted r g assuming separator tree already defined connected component g graph gv n children r c vertices r subtree c rooted r c rooted tree c said separator tree g notice vertices g assigned nodes c path leaf root different colors 3 unbounded ranking still unknown whether edge ranking problem given graph g positive integer decide whether 0 remark 3 problem equivalent vertex ranking problem given graph g positive integer decide whether r g restricted line graphs hand consequence npcompleteness minimum elimination tree height problem shown pothen 20 equivalence problem vertex ranking problem 6 7 latter npcomplete even restricted graphs complement bipartite graphs socalled cobipartite graphs reasons selfcontainedness start short proof npcompleteness vertex ranking restricted cobipartite graphs following problem called balanced complete bipartite subgraph abbre viated bcbs npcomplete problem gt24 10 instance bipartite graph e positive integer k question two disjoint subsets u implies theorem 5 vertex ranking npcomplete cobipartite graphs proof clearly problem np nphardness shown reduction bcbs let bipartite graph e positive integer k given let g complement g thus g cobipartite graph claim g balanced complete bipartite subgraph 2 delta k vertices g n gamma kranking suppose sets w 1 u construct k ranking g write w ngamma2deltak g define vertex ranking c g follows cv 1 one easily observes c vertex n gamma kranking next let c ngammakranking g since g cobipartite graph color two vertices color one lying v 1 v 2 therefore k pairs v 1 cv 1 assume w show subgraph induced set w 1 w 2 forms balanced complete bipartite subgraph g show prove pair vertices adjacent g suppose v 1 adjacent g colors vertices must different furthermore assume wlog cv 1 path v 1 cv 1 contradicting fact c ranking hence subgraph induced w 1 w 2 indeed balanced complete bipartite subgraph proves claim npcompleteness vertex ranking 2 show analogous result holds bipartite graphs well theorem 6 vertex ranking remains npcomplete bipartite graphs proof transformation vertex ranking arbitrary graphs without isolated vertices given graph g construct graph g clearly constructed graph g 0 bipartite graph show g tranking g 0 1ranking suppose g tranking tg construct coloring c g 0 following way vertices vertices c 1ranking g 0 hand let 1g 1ranking g 0 show cv 1 every vertex suppose let v vertex v wg edge incident v g hence v adjacent e 1 1ranking l l 0 l 6 l 0 implying path e assumption c ranking proves cv 1 holds every vertex consequence edge vertex ce 1ranking g 0 define coloring c tranking g since existence path two vertices v w g cw inner vertices smaller colors implies existence path v w g 0 cw inner vertices smaller colors contradicting fact c 1ranking g 0 2 4 bounded ranking show bounded ranking problems given graph g decide whether solvable linear time fixed done verifying corresponding graph classes closed certain operations definition 7 edge contraction operation graph g replacing two adjacent vertices u v g vertex adjacent vertices adjacent u v edge lift operation graph g replacing two adjacent edges fv wg fu wg g one edge fu vg definition 8 graph h minor graph g h obtained g series following operations vertex deletion edge deletion edge contraction graph class g minor closed every minor h every graph g 2 g also belongs g lemma 9 class graphs satisfying r g minor closed fixed proof since vertexedge deletion cannot create new paths monochromatic pairs vertices show edge contraction increase ranking number let e graph assume obtained g contracting edge new vertex c uv suppose c tranking g construct h follows uv suppose c tranking h path c tranking g vertex c uv must occur path depending neighbors p decontract c uv path p u v getting path p 0 g violating ranking condition contradiction choice c 2 corollary 10 fixed class graphs satisfying r g recognized linear time proof 1 using results robertson seymour 22 23 shown every minor closed class graphs contain planar graphs linear time recognition algorithm result follows directly lemma 9 2 regards edge rankings simple argument yields much stronger assertion follows theorem 11 fixed class connected graphs satisfying 0 recognized constant time proof fixed finite number connected graphs g necessary conditions maximum degree g diameter g bounded 2 gamma 1 2 certainly theorem immediately implies graphs g satisfying recognized linear time inspecting connected components separately result might also obtained via involved methods using results robertson seymour graph immersions 21 similarly one show fixed class connected graphs r g maximum vertex degree recognized constant time definition 12 graph h immersion graph g h obtained g series following operations vertex deletion edge deletion edge lift graph class g immersion closed every immersion h graph g 2 g also belongs g proof following lemma similar one lemma 9 therefore omitted lemma 13 class graphs satisfying 0 closed fixed lineartime recognizability class graphs satisfying 0 also follows lemma 13 results robertson seymour fact graphs 0 treewidth 2t 2 5 computing vertex ranking number graphs bounded treewidth section show one compute r g graph g treewidth k polynomial time fixed k graph also called partial ktree result implies polynomial time computability vertex ranking number class graphs uniform upper bound treewidth eg outerplanar graphs seriesparallel graphs halin graphs notion treewidth introduced robertson seymour see eg 22 definition 14 treedecomposition graph e pair fx collection subsets v tree ffl edges fv wg 2 e 2 v w ffl path k width treedecomposition fx 1 treewidth graph e minimum width treedecompositions g often abbreviate fx treewidth e bounded constant k one find time treedecomposition x width k rooted binary tree 1 denote root r say x rooted binary treedecomposition definition 15 terminal graph triple v e z v e undirected graph z v subset vertices called terminals node rooted binary treedecomposition x graph e associate terminal graph g descendant ig g shorthand notation write pv w g c ff iff path g v w internal vertices colors smaller ff coloring c g c ff denote p v w g c ff set paths g v w internal vertices colors using color function c smaller ff following suppose given terminal graph let c vertex tranking v e characteristic c c quadruple cj z ffl cj z function c restricted domain z defined true vertex x 2 v g c defined vertex x 2 v g c g c 1g defined f 3 v w smallest integer 0 pv w g c 0 path v w g definition 17 set characteristics vertex trankings terminal graph g full set characteristics vertex trankings g short full set g every vertex tranking c g c 2 set c vertex trankings terminal graph g example set vertex trankings g short example set g every vertex tranking c g c 0 2 c set characteristics elements c forms full set characteristics vertex trankings g full set characteristics vertex trankings jzj polynomial v olog k1 n possible values cj z 2 ok1 log n possible values f 1 log n possible values f 2 olog 1kk1 n possible values f 3 following lemma given 3 shows ensure property graphs treewidth k fixed k lemma treewidth e k r log n let x rooted binary treedecomposition g suppose j 2 descendant 2 suppose c vertex tranking g restriction c g j function cj g j defined 8v clearly cj g j vertex tranking g j c 0 another vertex tranking g j define function rc c lemma 19 let x rooted binary treedecomposition e let j descendant let c vertex tranking g c 0 vertex tranking g j cj g j vertex tranking g proof brevity write c write cj g j start proving two claims proof let v w 2 w 1 suppose path consider parts path p part g p ff 0 ff r path vertices w 1 p 0 path g j path collection successive edges ie last vertex path first vertex next path write v ff first vertex path ff w ff last vertex path p 0 1 note also exists path p 00 words exists path v w g j colors internal vertices smaller 0 using coloring c equivalently cj g j cj g j c 0 characteristics also exists path using color function c 0 path formed sequence p path g v w colors internal vertices smaller 0 hence pv w g shows pv w g shown way 2 exists vertex exists vertex w w claim 20 pv w g x last vertex path belongs w 1 write last vertex p 0 first vertex p 00 p exists path q using equality characteristics cj g j c 0 exists vertex path v w 0 g internal vertices color color function c 00 smaller 0 hence pv w reverse implication claim shown similar way 2 show c 00 vertex tranking equivalently consider four cases 1 v w c vertex ranking contradiction 2 exists c vertex ranking contradiction 3 w similar case 2 4 v w vertices p belong w 2 p path g j hence c 0 vertex ranking g j contradiction exist vertices p belong w 1 let x first vertex p belongs w 1 must exist vertices path v 0 w 0 internal vertices color color function c less 0 hence c vertex ranking contradiction remains show suppose 3 follows directly consider v w vertex true x 2 x j let last vertex x j p 1 similarly write implies f 2 z 0 true hence vertex x 0 paths also lemma 20 paths p 0 using path p 0 12 v x 0 path p 0 22 w x 0 follows almost identical argument shows finally follows directly claim 20 g describe algorithm rooted binary treedecomposition e found linear time 1 algorithm computes full set example set every node 2 bottomup order clearly full set root node determine whether g vertex tranking check whether full set root nonempty element example set root node gives us vertex tranking g remains show compute node 2 full set example set given full set example set children 2 straightforward case leaf node enumerate functions c function c test whether vertex tranking g put c example set c full set characteristics next suppose 2 two children j 1 j 2 one child add another child j 2 leaf example sets compute full set example set q g following way initially take q empty triple element q 1 c 2 element 3 arbitrary function c ffl check whether v skip following steps proceed next triple ffl compute function c defined follows ffl check whether c vertex tranking g skip following steps proceed next triple ffl c 62 put c put c q claim resulting sets q form full set example set g consider arbitrary vertex tranking c 0 g let c 1 2 q 1 vertex tranking characteristic c 0 definition example set c 1 must exist similarly let c defined c 3 algorithm processes triple first test hold suppose c function computed second test note hence lemma 19 c vertex tranking characteristic c 0 hence contain c q contain vertex tranking g characteristic c c 0 size full set hence example set graphs g 2 polynomial follows computation full set example set sets associated children node done polynomial time polynomial number triples triple computation given costs polynomial time linear number nodes treedecomposition computing whether exists vertex tranking costs polynomial time assuming testing applicable value see lemma 18 existence vertex trankings g obtain following result theorem 22 fixed k exists polynomial time algorithm determines vertex ranking number graphs g treewidth k finds optimal vertex ranking g 6 equality section consider questions related equality chromatic number vertex ranking number graphs theorem 23 r holds graph g g also satisfies proof suppose e vertex tranking g going consider separator tree c ranking recall c rooted tree every internal node c assigned subset vertex set g separator corresponding subgraph g namely one component arises subsets path node root deleted graph furthermore vertices assigned nodes path leaf root c pairwise different colors goal following recoloring procedure show either g recolor g obtain proper coloring smaller number colors however latter contradicts choice granking c label nodes tree c according following marking rules 1 mark node c union us vertex sets assigned nodes path root clique g 2 also mark leaf l c union ul vertex sets assigned nodes path l root clique g julj case 1 unmarked leaf l ul clique hence case 2 unmarked leaf show would enable us recolor g saving one color contradicting choice c since every leaf c marked every path leaf root consists marked nodes eventually followed unmarked nodes consequently collection marked branches c ie subtrees c induced one node descendants nodes marked father highest node branch unmarked highest node root c root c marked exactly one marked branch namely c definition separator assigned root clique however none colors used ranking vertices simply coloring separator fewer j j colors produce coloring g fewer g colors contradiction root unmarked work collection b marked branches b 1 notice color1 vertices g assigned leaves c leaf c belongs marked branch b going recolor graph g recoloring marked branches one one new coloring g use color 1 let us consider marked branch b let h highest node c sh set assigned h since h marked root unmarked must exist vertex x sh vertex belonging uh nonadjacent cx 6 cy since vertices uh pairwise different colors assume leaf c hence x respectively color1 vertex g assigned node b simply recolor x maxcx cy finally consider case cx 6 1 cy 6 1 color1 vertices subgraph g corresponding b recolored cx x recolored cy construction c influence parts graph since separated vertex sets higher colors done operation every marked branch eventually get new color assignment g still proper coloring though usually ranking since leaves c marked internal node c contains color1 vertices color 1 eliminated g contradicting assumption r consequently case 2 cannot occur implying completes proof 2 imply g perfect graph trivial counterexamples form arbitrary imperfect graph hand require equality induced subgraphs remain relatively small class graphs also called trivially perfect literature cf 11 theorem 24 graph e satisfies r neither p 4 c 4 induced subgraph g proof condition necessary since r p 4 2 let g p 4 free c 4 free graph graphs induced precisely every connected induced subgraph h contains dominating vertex w ie w adjacent vertices h 27 hence following efficient algorithm produces optimal ranking graphs assign color h dominating vertex w clearly hv 0 easily seen r hv 0 thus induction applied hand h disconnected optimal ranking generated components separately 2 7 edge rankings complete graphs obviously r k n easy give closed formula edge ranking number complete graph convenient way determine r k n seems introduce function gn rules terms gn following statement proved theorem 25 every positive integer n r k n proof assertion obviously true 3 larger values n going apply induction similarly vertex trankings following property holds every edge tranking graph largest color occurring edges colors form edge separator g moreover appropriate relabeling colors get new edge tranking g property color j edges colors form edge separator g minimal inclusion show best way choose edge separator r respect edge ranking complete graph making two components ge n r equalsized possible let us consider k n 2 numbers vertices components hence corresponding edge separator size n 1 n 2 every edge ranking starting separator least r k n1 r k r k maxfn1 n2 g colors indeed one using exactly many colors defining 1 repeating argument n 0 eventually get sequence positive integers ijs j 1 notice least last two terms sequence equal 1 easy see number colors edge ranking represented equal 1ijs j consequently r k n 1ijs subject condition 1 since decreasing sort sequence maintains 1 may assume 1 2 thus value 1ijs j attained precisely unique sequence satisfying ijs j c particular obtain r k n r k dn2e applying recursion difficult verify indeed 0 r k n written form 1 function defined 2 observing g2 n obtain following interesting result corollary 26 conclusions studied algorithmic graphtheoretic properties rankings graphs many special classes graphs algorithmic complexity vertex ranking known however algorithmic complexity vertex ranking restricted chordal graphs circle graphs still unknown furthermore even known whether edge ranking problem npcomplete started graphtheoretic study vertex ranking edge ranking particular kind proper vertex coloring proper edge coloring respec tively much research done direction particular interest wellknown problems theory vertex colorings edge colorings also worth studying vertex rankings edge rankings r linear time algorithm finding treedecompositions small treewidth tourist guide treewidth approximating treewidth graph theory applications edge ranking trees multifrontal solution indefinite sparse symmetric linear equations computers intractability guide theory npcompleteness algorithmic graph theory perfect graphs optimal node ranking trees parallel assembly modular productsan analysis edge ranking problem trees graphs ordered colourings area efficient graph layouts vlsi role elimination trees sparse factorization concurrent design products processes complexity optimal elimination trees graph minors graph minors graph minors node ranking searching graphs abstract graph partition problem application vlsi layout comparability graph tree finding optimal edgerankings trees efficient algorithm edgeranking trees tr ctr tak wah lam fung ling yue optimal edge ranking trees linear time proceedings ninth annual acmsiam symposium discrete algorithms p436445 january 2527 1998 san francisco california united states kazuhisa makino yushi uno toshihide ibaraki minimum edge ranking spanning trees split graphs discrete applied mathematics v154 n16 p23732386 1 november 2006 shinichi nakayama shigeru masuyama polynomial time algorithm obtaining minimum edge ranking twoconnected outerplanar graphs information processing letters v103 n6 p216221 september 2007 keizo miyata shigeru masuyama shinichi nakayama liang zhao nphardness proof approximation algorithm minimum vertex ranking spanning tree problem discrete applied mathematics v154 n16 p24022410 1 november 2006 md abul kashem ziaur rahman optimal parallel algorithm cvertexranking trees information processing letters v92 n4 p179184 november 2004 dariusz dereniowski adam nadolski vertex rankings chordal graphs weighted trees information processing letters v98 n3 p96100 16 may 2006 chunghsien hsu shenglung peng chonghui shi constructing minimum height elimination tree tree linear time information sciences international journal v177 n12 p24732479 june 2007