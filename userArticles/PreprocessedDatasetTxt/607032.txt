concepts realization diagram editor generator based hypergraph transformation diagram editors tailored specific diagram language typically support either syntaxdirected editing freehand editing ie user either restricted collection predefined editing operations restricted misses convenience complex editing operations paper describes diagen rapid prototyping tool creating diagram editors support modes order get combined advantages created editors use hypergraphs internal diagram model hypergraph parsers syntactic analysis whereas syntaxdirected editing realized programmed hypergraph transformation internal hypergraphs approach proven powerful general sense supports quick prototyping diagram editors restrict class diagram languages applied b introduction diagram editors graphical editors tailored specific diagram language distinguished pure drawing tools capability understanding edited diagrams extent furthermore diagram editors allow create arbitrary drawings restricted visual components occur diagram language instance editor uml class diagrams typically allow draw transistor symbol preprint submitted elsevier science 27 march 2001 would possible circuit diagram editor current diagram editors support either syntaxdirected editing freehand editing syntaxdirected editors provide set editing operations operations geared modify meaning diagram editing mode requires internal diagram model primarily modified opera tions diagrams updated according modified model models commonly described kind graph editing operations represented graph transformations eg 12 diagram editors providing freehand editing lowlevel graphics editors allow user directly manipulate diagram graphics editor becomes diagram editor oering pictorial objects used visual language combining parser parser necessary checking correctness diagrams analyzing syntactic structure diagram grammar formalisms parsers require internal diagram model intermediate diagram representation operate directly diagram eg constraint multiset grammars 3 approaches use internal model analyzed parser eg vispro 4 graphs common means describing model advantage freehand editing syntaxdirected editing diagram language defined concise graph grammar editing operations omitted editor force user edit diagrams certain way since restriction predefined editing operations however may turn disadvantage since editors permit create diagram oer explicit guidance user furthermore freehand editing requires parser thus restricted diagrams graph grammars oer ecient parsers editors either support syntaxdirected editing freehand editing editor supports editing modes time would combine positive aspects editing modes reduce negative ones despite observation one proposal yet realized known us rekers schurr propose use two kinds graphs internal representations diagrams 5 spatial relationship graph srg abstracts physical diagram layout represents higher level spatial relations additionally abstract syntax graph asg represents logical structure diagram kept uptodate srg contextsensitive graph grammars used define syntax graphs freehand editing diagrams planned modify first graph syntaxdirected editing going modify second case graph modified accordingly therefore kind diagram semantics available asg however approach requires almost onetoone relationship srg asg required approach paper come back approach conclusions cf section 6 paper describes diagen rapidprototyping tool creating diagram editors support editing modes time diagen diagram editor generator supports freehand editing based internal hypergraph model parsed according hypergraph grammar attribute evaluation directed syntactic structure diagram used creating userspecified semantic representation diagram freehand editing mode seamlessly extended syntaxdirected editing mode also requires automatic layout mechanism diagrams support automatic diagram layout used syntaxdirected editing freehand editing briefly outlined next section gives overview diagen tool common architecture editors created diagen section 3 explains freehand editing mode editors diagram analysis steps necessary translating freely edited diagrams semantic rep resentation integration additional syntaxdirected editing operations editors explained section 4 automatic layout mechanism required syntaxdirected editing outlined section 5 section 6 concludes paper diagen provides environment rapidly developing diagram editors section first outlines environment used creating diagram editor tailored specific diagram language diagen editors based editor architecture adjusted specific diagram language architecture described afterwards 21 diagen environment diagen completely implemented java consists editor framework program generator diagen free software downloaded diagen web site 6 fig 1 shows structure diagen process using rapidprototyping tool developing diagram editors framework collection java classes provides generic editor functionality necessary editing analyzing diagrams order create editor specific diagen editor framework generator program specification code generated program code program specific editor iagen editor developer diagram editor fig 1 generating diagram editors diagen diagram language editor developer primarily supply specifica tion textually describes syntax semantics diagram language additional program code written manually supplied manual programming necessary visual representation diagram components screen processing specific data structures problem domain eg semantic processing using editor component another software system specification translated java classes program generator generated classes together editor framework manually written code implement editor specified diagram language editor run standalone program also used software component since editor framework well generated program code conformable javabeans standard software component model java common integrated development environments ides eg jbuilder impriseborland visualcafe symantec visual age java ibm used visually plug generated editors software systems without much programming eort diagram editors developed using diagen editors called diagen editors following provide following features diagen editors always support freehand editing editor framework contains generic drawing tool adjusted specified diagram language program generator visual representation diagram components used drawing tool supplied editor developer editor framework provides extensive class library purpose diagrams drawn using drawing tool internally modeled hypergraphs analyzed primarily hypergraph parser cf section 3 hypergraph grammar used hypergraph parser core diagram language specification analysis results used provide user feedback diagram parts correct respect diagram language diagrams created using diagen editor translated semantic representation process driven syntactic analysis makes use program code data structures provided ed itor specific program code fig 1 reverse translation ie creating diagrams external representations also supported mechanism similar one syntaxdirected editing operations diagen editors optionally support syntaxdirected editing editor developer specified syntaxdirected editing operations operations primarily hypergraph transformations modify internal hypergraph model edited diagrams cf section 4 diagen editors specified developed rapid prototyping fashion without syntaxdirected editing operation diagram diagram language created freehand editing desirable editing operations added later automatic layout optional diagen editor feature obligatory specifying syntaxdirected operations automatic layout mechanism adjusts diagram layout applying syntaxdirected editing operations modified internal diagram model automatic layout also assists freehand editing layout modification user layout mechanism changes diagram structure diagram remains unchanged diagen oers constraints specifying layout mechanism declarative way cf section 5 programming interface plugging layout mechanisms diagen comes general layouting mechanisms like forcedriven layout simple constraint propagation methods parameterized editor developer rest paper presents concepts realization features means formal specification based hypergraph transformation generating editor using specification editors architecture considered next 22 diagen editor architecture fig 2 shows structure common diagen editors described following paragraphs ovals data structures rectangles represent functional components gray rectangles parts editor framework adjusted diagen program generator based specification specific diagram language flow information represented arrows labeled information flow means reading resp creating corresponding data structures editor supports freehand editing means included drawing tool part editor framework adjusted operations selects selects operations addsremoves components modifies reads reads reads modifies reads marks syntactically correct subdiagrams modifies gathers gathers gathers layouter diagram information derivation structure reduced hypergraph model drawing tool hypergraph transformer modeler reducer parser semantic representation attribute evaluation hypergraph model fig 2 architecture diagram editor based diagen program generator drawing tool editor user create arrange modify diagram components specific diagram language editor specific program code supplied editor developer responsible visual representation language specific compo nents examples rectangular text boxes diamondshaped conditions flowcharts fig 3 shows screenshot editor whose visual appearance characterized drawing tool components selected socalled handles like conventional drawing tools show allow move modify single grouped diagram components like common otheshelf drawing tools cf fig 9a drawing tool creates data structure diagram set diagram components together attributes position size etc sequence processing steps starts modeler ends attribute evaluation cf fig 2 realizes diagram analysis necessary freehand editing modeler first transforms diagram internal model hypergraph model task analyzing hypergraph model quite similar familiar compiler techniques reducer corresponds scanner compiler performs kind lexical analysis creates reduced hypergraph model syntactically analyzed hypergraph parser processing step identifies maximal parts diagram syntactically correct provides visual feedback user coloring subdiagram dierent color correct diagram thus entirely colored single color errors indicated missing colors driven syntactic structure subdiagram similar semantic analysis step compilers attribute evaluation used create semantic representation subdiagrams fig 3 screenshot diagram editor flowcharts layouter modifies attributes diagram components thus diagram layout using information gathered reducer parser attribute evaluation cf section 5 layouter necessary realizing syntaxdirected editing syntaxdirected editing operations modify hypergraph model means hypergraph transformer add remove components resp diagram visual representation diagram layout computed layouter processing steps outlined referring fig 2 described detail following sections 3 freehand editing section describes processing steps diagen editor used freehand editing shown fig 2 diagen used creating editors many diagram languages eg uml diagrams ladder di agrams petri nets sample diagram language paper uses flowcharts although admittedly simple language however languages less suited presentation paper 31 hypergraph model diagram consists finite set diagram components determined attributes flowcharts rectangular text boxes diamondshaped conditions whose positions defined x coordinates size width height attribute vertical well horizontal lines arrows x coordinates starting end points canvas however attributes describe arrangement diagram components terms numbers meaning diagram determined diagram components spatial arrangement specific arrangement flowchart components made boxes diamonds connected arrows lines specific way arrangements always described spatial relationships diagram components purpose diagram component typically several distinct attachment areas connected diagram components flowchart diamond eg top vertex well left right one connected lines arrows whereas lines arrows end points well line please note arrows connected middle another arrow shown fig 3 attachment areas connections established spatially related eg overlapping attachment areas flowcharts arrow end exact position order connected diamond diagen uses hypergraphs describe diagram set diagram components relationships attachment areas connected com ponents hypergraphs consist two finite sets nodes hyperedges simply edges short hyperedge carries type connected ordered sequence nodes sequence certain length called arity hyperedge determined type edge node sequence called visited hyperedge familiar directed edgelabeled graphs special hypergraphs hyperedge arity 2 hypergraphs obvious means modeling diagrams diagram component modeled hyperedge kind diagram component hyperedge type number attachment areas arity attachment areas modeled nodes visited hyperedge sequence visited nodes determines attachment area modeled node set diagram components thus represented set nodes set hyperedges node visited exactly one hyperedge relationships attachment areas modeled hyperedges arity 2 carry type describes kind relationship related attachment areas fig 4 shows hypergraph model subdiagram one shown fig 3 nodes depicted black dots component edges represent diagram components shown gray rectangles connected visited nodes thin lines line numbers represent sequence visited nodes relation edges represent relationships attachment areas depicted arrows connected nodes arrow direction indicates node sequence fig 4 shows hypergraph similar way represented sub diagram rectangular boxes diamondshaped conditions represented box edges resp cond edges arity 2 resp 3 vertical horizontal arrows resp lines shown varrow harrow vline hline edges resp cond hline hline flowin flowout flowout varrow harrow join box flowin flowout varrow fig 4 part flowchart shown fig 3 corresponding hypergraph model relationship edge types flowin flowout join relationship vertical arrow ends upper attachment area box diamond represented flowin relation end node arrow upper node corresponding varrow box edges flowout relationship used similar way leaving arrows join relation connects arrow end lines arrows hypergraph models created modeler diagen editors modeler first creates component edges diagram component nodes attachment areas afterwards modeler checks pair attachment areas whether related defined specification 2 language specification describes relationships terms relations attribute values corresponding attachment areas eg flowchart ex ample end attachment area vertical arrow upper attachment area rectangular box flowinrelated attachment areas overlap ie close positions canvas relationship detected modeler adds corresponding relation edge corresponding nodes 32 reduced hypergraph model hypergraph models tend quite large even small diagrams stance fig 4 shows small portion hypergraph model really small flowchart fig 3 hypergraph model represents diagram component relationship directly structure meaning diagram however generally represented terms larger groups components relationship flowcharts eg crucial 2 eciency reasons pairs attachment areas overlapping bounding boxes actually considered abc abc ab varrow c 3 flowin varrow cconn conn statement2 box varrow continue connect flowout2a beginafig 5 reduction rules flowcharts information contained set boxes conditions interconnected lines arrows specific path lines arrows connected boxes irrelevant diagen editors therefore analyze hypergraph model directly first identify groups components relationships similar common compiler techniques lexical analysis used group input stream characters tokens eg identifiers key words leaving characters unconsidered eg comments reducer searches matches specified patterns creates reduced hypergraph model represents diagram structure directly similar compiler generators require specification lexical analy sis reducer specified specific diagram language diagen provides reduction rules end rule consists pair p r hypergraphs additional application conditions p pattern whose occurrences searched hypergraph model hypergraph r result describes modification reduced hypergraph match p also satisfies application conditions fig 5 shows five reduction rules flowcharts form p r pattern rightmost rule actually consists varrow edge three visited nodes gray crossed subhypergraphs negative application conditions match varrow edge used rule application none three crossed subhypergraphs matched well ie match valid additional flowin continue connect edge connected start node varrow edge continue edges considered hypergraph r rule shows hypergraph added reduced hypergraph model valid match p hypergraph node labels indicate corresponding nodes hypergraph model reduced one hypergraph model nodes lie dierent pattern occurrences necessarily dierent patterns always correspond node reduced model three special cases mentioned conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn statement f c e statement statement statement condition condition statement statement begin fig 6 reduced hypergraph model flowchart fig 3 nodes matched p hypergraph rule corresponding nodes reduced model nodes lie dierent pattern occurrences none pattern nodes corresponding node r graph nodes corresponding nodes reduced model two p nodes may correspond single rnode eg second fourth rule nodes hypergraph model match identified p nodes correspond single node reduced hypergraph model fig 6 shows reduced hypergraph model flowchart fig 3 created reduction rules structure model similar structure hypergraph model reduction rules identify nodes much cleaner hypergraph model created conn edges grayed since actually needed following syntactic analysis corresponding reduction rules could omitted pure freehand editing editors section 4 however shows needed context syntaxdirected editing operations concept reduction rules similar hypergraph transformation rules l r l r l lefthand side lhs r righthand side hypergraphs 78 transformation rule l r applied hypergraph h finding l subgraph h replacing match r obtaining hypergraph h say h derived h one deriva step derivation sequence sequence derivation steps resulting hypergraph step immediately derived next step following observations show specifying reducer reducing process specific diagram language would rather dicult reducer defined terms derivation sequences hypergraph models reduced ones instead reducer applies reduction rules occurrences lefthand sides kind parallel fashion patterns frequently overlap since meaning group diagram components relationships meaning tried represented edges reduced hypergraph model often depends context part another group eg last rule fig 5 uses flowout edge negative context also occurs pattern third rule applying one rule would change context one regular hypergraph transformations used would dicult task specify desired reducing semantics general many dierent derivation sequences starting specific hypergraph would produce dierent reduced hypergraphs overlapping patterns editor developer take measures avoid nondeterminism however nontrivial task set confluent sets transformations 9 instead reduction rules applied follows possible matches rule patterns searched first without changing hypergraph matches selected satisfy corresponding application conditions second step corresponding result hypergraphs instantiated parallel valid match corresponding pattern hypergraphs connected common nodes according correspondence nodes hypergraph model reduced one 3 reduced hypergraph model directly represents structure diagram syntactically analyzed parser 33 parsing syntactic structure diagram described terms reduced hypergraph model ie diagram language corresponds class hypergraphs literature exist two main approaches specifying graph hypergraph classes first one uses graph schema kind entityrelationship diagram describes edges nodes certain types may interconnect eg eer 11 one uses kind graph hyper 3 formal treatment reduction rule p r represents hypergraph morphism pr union pattern result hypergraph corresponding nodes p r well identified nodes r identified pr reduced hypergraph model computed first creating colimes match morphisms dierent patterns hypergraph model together morphisms p p r removing edges unnecessary nodes hypergraph model colimes hypergraph 10 graph grammar eg 12 generalizes idea chomsky grammars strings also used standard compiler generators 13 similarity diagram analysis program analysis performed compilers availability derivation trees directed acyclic graphs dags see easily allow represent syntactic structure diagram diagen uses hypergraph grammar approach specifying class reduced hypergraph models diagram language already mentioned hypergraph grammars similar string grammars hypergraph grammar consists two finite sets terminal nonterminal hyperedge labels starting hypergraph contains nonterminally labeled hyperedges syntax described set hypergraph transformation rules called productions context hypergraph class language grammar defined set terminally labeled hypergraphs derived starting hypergraph finite derivation sequence dierent types hypergraph grammars impose restrictions lhs rhs production well allowed sequence derivation steps contextfree hypergraph grammars simplest ones lhs consist single nonterminally labeled hyperedge together appropriate number nodes application production removes lhs hyperedge replaces rhs matching node labels lhs rhs determine rhs fit removing lhs hyperedge productions fig 7 contextfree ones productions l lhs drawn l r 1 r 2 actually fig 7 shows productions hypergraph grammar whose language set reduced hypergraph models structured flowcharts ie flowcharts whose blocks single entry single exit types statement condition conn terminal hyperedge labels used reduced hypergraph models set nonterminal labels consists flowchart blockseq block conn flowchart edges connect node arity 0 starting hypergraph consists single flowchart edge conn edges conn edges grayed since actually required freehand editing syntaxdirected editing cf section 4 contextfree hypergraph grammars describe limited hypergraph languages 1214 therefore suited specifying syntax many diagram languages 4 contextfree hypergraph grammars embeddings expressive contextfree ones additionally allow 4 actually diagram languages know described contextfree grammars nassishneiderman diagrams 15 syntax diagrams 16 flowcharts used paper blockseq block conn block flowchart begin block condition conn conn statement condition conn condition conn condition conn condition conn condition conn condition conn conn conn conn conn fig 7 productions grammar reduced hypergraph models flowcharts embedding productions l r rhs r extends lhs l r edges nodes embedded context provided lhs applying production limited treatment context chosen since proven sucient diagram languages treated diagen still allows ecient parsing contextfree hypergraph grammars embeddings even appear suitable possible kinds diagram languages 5 parsing algorithms detailed description grammar types found 191710 prominent feature parsing algorithms used diagen editors capability dealing diagram errors erroneous diagrams resp reduced hypergraph models rejected instead maximal subdiagrams resp subhypergraphs identified correct respect hypergraph grammar feedback correct subdiagrams provided user drawing diagram components color whose representing edges belong correct subhypergraph result step diagram analysis derivation structure reduced hypergraph describes syntactic structure diagram derivation structure similar contextfree string grammars derivation tree contextfree hypergraph grammar used contextfree hypergraph grammars embeddings directed acyclic graph derivation dag 1710 tree root represents nonterminal edge starting hypergraph terminal edges reduced hypergraph 5 plain contextfree grammars embeddings may restricted diagram languages eg uml class diagrams 17 however diagen allows restrict productions application conditions feature diagen applied realworld languages like statecharts uml class diagrams 186 begina blockseqai statementab blockbc statementbc blockseqhc blockhc statementhc statementei flowchart fig 8 derivation tree reduced hypergraph model fig 6 according grammar fig 7 omitting conn edge model represented leaves tree fig 8 shows derivation tree reduced hypergraph model fig 6 conn edge however omitted simplicity edges written edge labels together labels visited nodes parentheses 34 attribute evaluation task final step diagram analysis translating diagram data structure specific application domain diagram editor used eg flowchart editor used part programming tool probably create textual representation flowchart purpose diagen uses common syntaxdirected translation mechanism based attribute evaluation similar attribute string grammars 13 hyperedge carries attributes number types attributes specified editor developer depend hyperedge label productions hypergraph grammar may augmented attribute evaluation rules compute values attributes accessible edges referred production parsing attribute evaluation works follows hyperedge occurs derivation tree dag general distinct number attributes grammar productions used creating tree impose rules attribute values computed soon value others known even attribute values terminal edges already known derived attributes diagram components reducing step feature omitted section 32 attribute evaluation mechanism editor computes valid evaluation order please note diagen require specific form attributed definition like lattributed definitions 13 least dealing derivation dags forms would fail editor developer therefore allowed define evaluation rules rather freely grammar production evaluation mechanism determine evaluation order diagram analysis run anew course developer careful order introduce inconsistencies cyclic attribute dependencies syntaxdirected translation context flowcharts rather simple obvious data structure representing flowchart textual program eg pascallike notation possible since syntactically flowcharts well structured least using hypergraph grammar shown fig 7 purpose hyperedge needs single attribute type string terminal hyperedges contain text corresponding diagram components whereas nonterminal hyperedges contain program text subdiagram attribute evaluation rules straightforward attribute evaluation last step diagram analysis editing diagrams freehand editing following section shows syntaxdirected editing seamlessly integrated diagen means editors make use diagram analysis described even editing diagrams syntaxdirected way syntaxdirected editing discussed introduction syntaxdirected editing several important benefits approaches freehand editing make use abstract internal models eg penguins system based constraint multiset grammars 320 cannot extend freehand editing syntaxdirected editing requires abstract model since diagen approach based model hypergraph model quite obvious oer syntaxdirected editing however freehand editing using parser requires hypergraph grammar remains syntax description reduced hypergraph model thus diagram language syntaxdirected editing operations must change syntax diagram language oer additional support user requirement two immediate consequences possible specify editing rules deliberately transform correct diagram incorrect one respect hypergraph grammar might appear undesired feature consider process creating complex diagram intermediate drawings need generally make correct diagram final drawing order support intermediate incorrect results syntaxdirected editing operations allow disimprovements editing operations quite similar macros otheshelf text graphics editors combine several actions also performed freehand editing one complex editing operation however syntaxdirected editing rules actually much powerful macros oer recording editing operations playback complex operation syntaxdirected editing operations also take care providing valid diagram layout possible incorrect diagrams general valid layout furthermore editing operations take account context information may rather complex application conditions makes use graph transformation obvious choice adding syntaxdirected editing freehand editing mode editing operations specified hypergraph transformations hypergraph model shown fig 2 following explained hypergraph transformations may use information reduced hypergraph model derivation structure whenever hypergraph model changed transformation parsed results parser used indicate correct subdiagrams create valid layout cf section 5 please note hypergraph model directly modified transformation rules modeling step necessary freehand editing take place following two examples editing operations flowchart editor used describing specification realization syntaxdirected editing operations first example demonstrates use simple hypergraph transformation rules whereas second one shows additional information reduced hypergraph model well derivation dag may necessary 41 example 1 simple hypergraph transformation rules fig 9 shows example syntaxdirected editing operation adds new statement existing one flowchart editor situation applying editing operation depicted fig 9a topmost statement selected indicated thick border gray handles editing operation whose hypergraph transformation rule shown fig 9b adds new statement selected one result shown fig 9c hypergraph transformation rule fig 9b depicted lhs rhs separated corresponding edges nodes lhs rhs carry labels host nodes edges match lhs without b2 x flowout box flowout flowout flowin varrow box x b22 e c fig 9 syntaxdirected editing operation inserts new statement selected one identically labeled counterpart rhs removed applying rule marked box hyperedge lhs indicates edge match hypergraph model edge diagram component selected editor user applied rule removes flowout relation edge connects selected statement box outgoing line arrow specified new vertical arrow new statement box together relation edges added applying rule resulting hypergraph reduced parsed cf fig 2 layouter properly layout resulting diagram contains new statement box box carries default text action fig 9c fig 10 shows concrete specification simple editing operation together transformation rule diagen syntaxdirected editing operations specified terms simple rules complex operations quite similar rules transformation units grace 21 shown following rule add rule fig 10 specified lhs list edges rhs diers lhs ie edges removed indicated ones added indicated rule hyperedge written edge type together visited nodes parentheses node hyperedges special actually pseudo edges allow refer nodes notation edges lhs fig 10 consists box edge flowout edge nodes node pseudo edge used rule addrule boxa fflowoutab nnodea f operationsupportcreatevarrown operationsupportcreateboxn operation addstmtafterstmt add statement specify box b select statement addruleb fig 10 diagen specification adding statement another statement refer node applying rule removes flowout edge indicated f f edge reference introduced lhs furthermore varrow instance etc added hypergraph model java methods curly braces responsible creating corresponding diagram components ie vertical arrow statement box syntaxdirected editing operation specified complex operation defined terms rules control program describes operation defined sequence rules complex control structures control programs diagen inspired 21 22 semantics much simpler backtracking performed 10 fig 10 shows operation add stmt stmt uses trivial control program simply calls single rule operation fig 10 requires statement box parameter b indicated specify box b simply calls add rule rule described parameter b passed rule simply defines partial match applying rule corresponding formal parameters first edges specified lhs invoked rule important issue syntaxdirected editing question select parts diagram aected application editing operation diagen solved adding parameters complex operations indicated specify box b fig 10 user selects editing operation application editor requests user specify single diagram component parameters operation hyperedges internally represent components specify partial match used select operation rules ap plied diagen simplifies user interaction process diagram component selected editor oers editing operations user require diagram component selected type first parameter user selects one operations editor asks missing param eters however many operations eg add stmt stmt operation require single parameter ie user interaction necessary selecting operation 42 example 2 utilizing additional information former example rather simple sense operation described single transformation rule furthermore uses information readily available hypergraph model subsection outlines editing operations general complicated use additional information beyond plain hypergraph model fig 11 shows operation action screenshots b fig 11 syntaxdirected editing operation removes conditional block applying 6 task removing conditional block user chosen selecting condition diamond unlike former example number edges removed unknown operation specified moreover dicult decide whether diagram component hyperedge belong conditional block solely considering hypergraph model however since problem diagram syntax quite easy task also using syntactic information last parsing step operation remove leaves blockd hsubtree derivation tree fig 8 crucial task editing operation thus find blockd hnode derivation tree terminal hyperedges reached paths tree node finally corresponding component edges well diagram components identified apparently editing operations take account information collected diagram analysis ie information reduced hypergraph model derivation structure cf fig 2 diagen editors make information available socalled crossmodel links connect corresponding nodes edges hypergraph model reduced hypergraph model derivation dag path expressions allow specify navigate models using crossmodel links sample operation shown fig 12 lack space neither show path expressions hypergraph model diagram reduced hypergraph model simplified derivation tree cf figures 11a 6 8 thick arrows indicate models used find starting selected condition diamond terminal statement hyperedges belong conditional block dashed edges show correspond diagram components resp component hyperedges omitted removed diagram please note statement boxes condition diamonds removed operation also lines arrows order also match path expressions components must represented reduced hypergraph model well derivation tree 6 actually fig 11a shows diagram fig 3 condition selected conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn conn statement c e begina blockseqai statementab blockbc statementbc blockseqhc blockhc statementhc statementei flowchart statement statement statement condition condition statement statement begin fig 12 using crossmodel information editing operations reason using conn conn edges clarity omitted section 3 also derivation tree fig 12 5 automatic layout become clear previous section transformations hypergraph model modify structure internal model describe eects position size diagram components automatic layout mechanism considers diagram syntax needed diagen oers two kinds automatic layout support tailored layout modules programmed hand layout connected diagram analysis generic java interface attribute evaluation cf fig 2 information syntactic structure diagram prepared syntaxdirected attribute evaluation first layout module uses information compute diagram layout generic layout modules realized already eg forcedirected layout algorithm cf 23 used statechart well uml class diagram editor 186 programming layout module hand quite complicated reducing eort diagen oers constraintbased specification diagram layout computing diagram layout constraint solver earlier work 24 main idea describe diagram layout terms values assigned attributes diagram components eg position valid diagram layout specified set constraints attributes constraint set determined syntactic structure diagram similar syntaxdirected translation attribute evaluation hyperedges hypergraph model terminal well nonterminal hyperedges reduced hypergraph model carry additional layout attributes reduction step rules well grammar productions augmented constraints accessible attributes constraints added set constraints specify diagram layout whenever corresponding rule production instantiated reduction step parsing process important define layout constraints hypergraph grammar used parsing step also rule set specifies reduction step cf fig 2 reduction step may reduce away explicit representation specific diagram components eg lines flowchart example restricted specification layout constraints hypergraph grammar would able describe layout diagram components flowcharts eg constraints require minimum length lines arrows automatic layout restricted syntaxdirected editing information also available freehand editing editors specified generated diagen therefore oer intelligent diagram mode diagram components may modified arbitrarily components especially position may aected modifications layouter takes care modifying overall appearance diagram syntax preserved layout beautified work intelligent diagrams similar approach chok marriott paton 20 6 conclusions paper presented diagen rapidprototyping tool based hypergraph transformation creating diagram editors support freehand editing well syntaxdirected editing supporting editing modes one editor combines positive aspects modes ie unrestricted editing capabilities convenient syntaxdirected editing approach proven powerful general sense supports quick prototyping diagram editors restrict class diagram languages applied demonstrated several diagram languages diagram editors already generated eg flowcharts nassishneiderman diagrams 19 syntax diagrams 16 visual calculus 25 ladder diagrams 26 msc 17 uml class diagrams signal interpreted petri nets sfc diagrams 27 approach presented paper appears quite similar approach rekers schurr 5 already outlined section 1 approaches make use two hypergraphs resp graphs spatial relationship graph srg rekers schurrs approach quite similar hypergraph model diagen abstract syntax graph asg represents abstract meaning diagram introduced dierent reason reduced hypergraph model dia gen hypergraph models also srgs generally quite complicated hypergraph parser analyze hypergraph model therefore diagen reduces hypergraph model parses much simpler reduced hypergraph model instead hypergraph model demonstrated parsing reduced hypergraph model performed efficiently 10 however rekers schurrs approach srg asg always strongly coupled since use triple graph grammars defining syntax srg asg one formalism asg introduced reducing complexity instead graph grammar parser analyze srg directly asg ie abstract meaning diagram parsed created sideeect parsing srg freehand editing requirement graph parser srg imposes strong restriction approach concepts paper implemented constraintbased automatic layout based constraint solver qoca chok marriott 20 penguins system also allows generate freehand editors however generate internal model use constraint multiset grammars cmgs 3 hypergraph grammar approach diagen appears better suited problem since report performance two orders magnitude worse performance diagen editors comparable computers furthermore system cannot support syntaxdirected editing since use intermediate internal model examples syntaxdirected editing operations suggest appears unsatisfactory extent specify syntaxdirected editing operations less abstract hypergraph model instead reduced one appears better suited syntaxdirected editing cf rekers schurrs approach 5 however since mapping hypergraph model reduced one noninjective approach presented paper leave much choice expressiveness sacrificed however future work investigate specifying syntaxdirected editing operations abstract hypergraph model sucient r genged generic graphical graph grammars diagram editing automatic construction user interfaces constraint multiset grammars vispro visual language generation toolset graph based framework implementation visual environments diagen web site httpwww2 algebraic approaches graph transformation part basic concepts double pushout approach computing graph rewriting specifying generating diagram graph based modeling implementation eergral grammars languages hyperedge replacement graph grammars flowchart techniques structured programming pascal user manual report application graph transformation visual languages diagram editing hypergraph parser support programmed graph replacement systems experimental comparison forcedirected randomized graph drawing algorithms specification diagram automatically generating environments dynamic diagram languages creating semantic representations diagrams international standard 61131 programmable logic controllers handbook graph grammars computing graph transformation tr compilers principles techniques tools handbook graph grammars computing graph transformation hyperedge replacement graph grammars algebraic approaches graph transformation part algebraic approaches graph transformation part ii programmed graph replacement systems graph transformation specification programming application graph transformation visual languages hyperedge replacement pascaluser manual report creating semantic representations diagrams graph based modeling implementation eer gral experimental comparison forcedirected randomized graph drawing algorithms graph grammars diagram editing automatic construction user interfaces constraint multiset grammars graph based framework implementation visual environments diagram editing hypergraph parser support vispro automatically generating environments dynamic diagram languages genged generic graphical editor visual languages based algebraic graph grammars constraintbased diagram beautification flowchart techniques structured programming ctr ewa grabska andrzej achwa grazyna slusarczyk katarzyna grzesiakkopec jacek lembas hierarchical layout hypergraph operations diagrammatic reasoning machine graphics vision international journal v16 n1 p2338 january 2007 g sharov n afanasev syntaxdirected implementation visual languages based automaton graphical grammars programming computing software v31 n6 p332339 november 2005 mark minas syntax analysis diagram editors constraint satisfaction problem proceedings working conference advanced visual interfaces may 2326 2006 venezia italy hans vangheluwe juan de lara foundations multiparadigm modeling simulation computer automated multiparadigm modelling metamodelling graph transformation proceedings 35th conference winter simulation driving innovation december 0710 2003 new orleans louisiana gennaro costagliola vincenzo deufemia giuseppe polese visual language implementation standard compilercompiler techniques journal visual languages computing v18 n2 p165226 april 2007 frank drewes berthold hoffmann mark minas contextexploiting shapes diagram transformation machine graphics vision international journal v12 n1 p117132 january frank drewes berthold hoffmann detlef plump hierarchical graph transformation journal computer system sciences v64 n2 p249283 march 2002 berthold hoffmann abstraction control shapely nested graph transformation fundamenta informaticae v58 n1 p3965 november berthold hoffmann abstraction control shapely nested graph transformation fundamenta informaticae v58 n1 p3965 january jun kong kang zhang xiaoqin zeng spatial graph grammars graphical user interfaces acm transactions computerhuman interaction tochi v13 n2 p268307 june 2006 gennaro costagliola vincenzo deufemia giuseppe polese framework modeling implementing visual notations applications software engineering acm transactions software engineering methodology tosem v13 n4 p431487 october 2004