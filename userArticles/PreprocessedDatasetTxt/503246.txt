empirical study utility formal routines transfer knowledge experience quality software process improvement frameworks emphasize written ie formal documentation convey recommended work practices however considerable skepticism among developers learn adhere prescribed process models latter often perceived overly structured implying much control relevant knowledge often decided othersoften quality manager study carried context national software process improvement program norway small mediumsized companies assess attitude formalized knowledge experience sources results show developers rather skeptical using written routines quality technical managers taking granted explosive combination conclusion formal routines must supplemented collaborative social processes promote effective dissemination organizational learning trying force wellintended quality system developers throats futile demoralizing wider implications quality improvement work must strike balance disciplined rational creative way working b figure 1 model knowledge conversion tacit explicit knowledge 27 figure 1 expresses practitioners first internalize new knowledge ie individual learning new knowledge socialized revised work processes changed behavior group learning new work processes changed behavior observed abstracted ie externalized new knowledge combined refine extend existing knowledge organizational learning process continues new cycles etc enable learning crucial issue individual group organizational level latter means creating sustaining learning organization constantly improves work letting employees share experience around underlying experience bases may special suborganizations manage disseminate stored experience knowledge exemplified experience factory 7 also refer workshop series learning software organizations 4 9 fields introduced term organizational corporate memory characterize organizations strategic assets although learning point view 1 knowledge engineering community also worked experience bases often emphasis effective knowledge representations deduction techniques etc towards wide range applications subfield casebased reasoning 3 sprung work enabling reuse similar past information cases better master new situations also mention subfield data mining 20 social anthropologists psychologists studied organizations learn employees make use information sources daily work much rd effort spent externalizing flow looking valid experience analyzed generalized synthesized packaged disseminated form improved models concepts instance make calibrate improve estimation model based performance previous software projects explicit knowledge may nevertheless misunderstood due lack context nuances eg understand context postmortems however hard part internalizing flow make impact current practice even updated knowledge may convincingly available see instance ethnographic study use quality systems 40 typical inhibitors notinventedhere mistrust beenburnedbefore lack extra timeresources notgetting started plain unwillingness try something new different like adhering formal procedures quality system study maintenance technicians copy machines indicated experts likely ask colleagues advice rather look even follow book 10 indeed many times computer scientists asked office mates commands word ntwindows instead directly consulting relevant documentation although query latter hard formulate furthermore existence software quality manuals either paper thick binders sometimes 12 shelves web documents intranet guarantee use fact since manuals may dictate people perform job traditional quality departments many software organizations looked upon high esteem developers instance 250 proposed software standards 32 many recommending standard process models many practical use succeed formal routines explicit knowledge quality system seb achieve learning must carry traditional qa hat control mean formal knowledge form books reports etc like article discarded lesson formal routines must formulated introduced proper participation people involved order intended effect practice lastly many ideas techniques quality improvement tqm similar come manufacturing rather stable products processes organizations information technology hand characterized rapid product innovation gradual process refinement 33 one year like dog year 7 years disciplines timetomarket seems sacred ie schedule pressure strength many software smes small mediumsized enterprises lies ability turn around fast convert next weeks technologies radically new products services barrett 6 used term improvisation jazz metaphor characterize performers execute evolving activities employing large competence base reference software development context must carefully adopt set quality improvement technologies function dynamic environment manage constant change 17 since spi assumes something stable improved must pick learning focus accordingly instance norwegian computer society wwwdndno offering course chaos complexity theory alternative manage highly evolving projects however fair say especially tqm aware cultural social dimensions quality work tqm strong emphasis creating learning organization employees participate involve order satisfy customers software organizations best systematize organize exploit previous experience order improve work 3 context questions 31 spiq project spiq project 12 run three years 199799 halfyear prestudy 1996 spiq stands spi better quality project funded part research council norway involved three research institutions 12 companies mostly smes 20 spi pilot projects run companies followup project called profit carried 20002002 main result spiq project pragmatic method handbook 16 following components dual topdownbottomup approach using tqm 15 quality improvement paradigm 7 ideas adapted process essitype 19 process improvement experiments pies goalquestionmetric gqm method 8 eg gqm feedback sessions experience factory concept 7 refine disseminate project experiences incremental approach relying action research 22 reported empirical studies five spiq companies typical work 12 spiq companies included pilot projects test certain improvement technology like novel inspection techniques incremental development use measurement software experience bases results comparative studies spi success spiq companies several scandinavian pies emphasizing organizational cultural factors see eg 13 14 18 37 32 study performed organization actual study carried ntnusintef five companies participating spiq project data collection carried two ntnu students last year msc study part prethesis project 11 two students advised two authors paper former teacher also spiq researcher latter researcher phd student attached project preparation first student read learnt project relevant literature tried initial formulation important issues form research questions discussed time contacted potential companies checked willingness participate availability detailed interview guide see 33 designed dialogue students advisors companies briefed questions interviews going run research questions important issues address q1 knowledge routines used q2 routines used q3 updated q4 effective medium transfer knowledge experience furthermore important differences developers managers much cooperation involved making updating routines subjects initially tried dozen companies involved time frame students availability three months spring 1999 allowed five companies one trondheim rest oslo three companies iso 9001 certified two companies ittelecom companies rest software houses convenience sample ie available volunteers 23 persons interviewed based experience spi whereof 13 developers 10 managers latter group included one quality manager one software manager eg division project manager five companies data collection finishing interview guide sent email respondents days later two students visited companies spent full day company place spent one hour respondent semistructured interviews interview four questions treated one another one students asking questions students made notes interview records interview student served scribe wrote structured summary immediately interview first student checked notes data analysis ensuing categorization data analysis done two students cooperation authors reported students prediploma thesis 33 interview guide mentioned formulated four main research questions total 14 subquestions q1 knowledge routines 11 describe possible contents routines used software development 12 routines introduced company 13 purpose routines 14 personal impression routines q2 use routines 21 status given routine among developers 22 degree routines actually used 23 activepassive users 24 availability routines 25 followup control usage done q3 updating routines 31 procedures used update routines 32 participates update activities q4 routines medium transfer knowledge experience 41 regard written routines efficient medium transfer knowledge experience 42 alternatives written routines think useful use company 43 barriers transfer experiences think important interview guide contained advice deal structured questions usually three answer categories yesmaybeno littlesomemuch allowed unstructured commentaries form prose answers solicit direct commentary opinions 4 results section present results study regarding utility formal routines medium transfer knowledge experience focus participation potential differences opinion developers managers regarding utility routines 41 knowledge routines respondents fairly good knowledge routines place respective companies fact two thirds respondents showed good knowledge content routines table 1 illustrates shows well developers managers able describe specific contents routines company table 1 knowledge company routines software developers managers frequency percent frequency percent little 646220 much 754880 however came knowledge routines introduced 50 developers know anything process hand one manager know introduction process turned 30 developers 70 managers actively participated introduction routines table 2 table 2 degree involvement introduction routines degree involvement low high freq percent freq percent developers 969431 managers 330770 furthermore seemed common understanding regarding objective formal routines respondents said routines useful respect quality assurance respondents said would enable unified way working however emphasized routines formalistic rather useful necessary respondents three iso9001 certified companies claimed routines first foremost established get certificate wall quality software processes gained little nothing iso certification one respondents expressed views following example might iso certified produce lifebelts concrete long put exact amount concrete lifebelt although respondents critical routines stating 10 routines useful remaining 90 nonsense respondents nevertheless good impression routines typically stating routines prerequisite internal collaboration routines reassurance great help 42 use routines software developers managers agreed degree routines used general answered 50 routines use experienced developers used routines lesser extent inexperienced developers furthermore common agreement point routines considered useful however status routines among software developers highly divergent seen following statements routines generally good useful developers frustrated regarding use system bureaucratic better freedom decide best done routines easy use routines uninteresting revision meetings boring 43 updating routines none companies scheduled revisions part process updating routines answers issue rather vague respondents explained revisions informally triggered respondents know propose implement changes existing routines however respondents companies managers software developers said employees respective companies could participate revision activities wanted 44 routines medium transfer knowledge experience answers issue varied lot indicated highly different attitudes regarding effectiveness formal routines knowledge experience transfer particularly seemed clear difference judgment software developers managers seven ten managers regarded written routines efficient medium knowledge transfer none developers furthermore half developers considered routines inefficient knowledge transfer one managers shared view typically managers said written routines important means replacing knowledge people left company software developers hand make clear connection experience knowledge transfer formal routines one software developer said different groups within company never read others reports another developer maintained would take much time learn experience groups several developers explained views stating documentation good enough hard find boring use takes much time asked useful alternatives written routines respondents answered regarded kind experience base newsgroup highest ranked alternative highranked alternatives socialization discussion groups experience reports group meetings onthejob training table 3 shows alternatives rank order 1 best software developers managers respectively also asked respondents regarded important barriers transfer knowledge experience nearly said transfer first foremost personal matter depending much individual whishes teach lessonslearned others furthermore willingness share depends available time personality selfinterest company culture table 3 alternative media knowledge transfer rank medium developers managers experience basenewsgroups 1 1 socialization discussion groups 3 2 experience reports 4 3 onthejobtraining 5 6 work ext consultants 6 group meetings 7 5 shown table 4 seven six developers one manager 23 respondents answered definite question regarding efficiency written routines medium transfer knowledge experience likewise seven respondents managers answered equally clear yes question last nine respondents answered somewhere said cases written routines could effective situations would rather barrier table 4 regard written routines efficient medium transfer knowledge experience software developers managers frequency percent frequency percent 754220 due rather small sample size study low expected frequency several cells table 4 compared respondents assessments routines job function using fishers exact probability test test exact probability significance level obtained result purely product chance calculated 23 test statistic 1302 highly significant p0002 twotailed thus rejected hypothesis independence concluded difference distribution assessment usefulness formal routines efficient medium transfer knowledge experience software developers managers since software developers involved process introducing routines much lesser extent managers compared respondents assessment routines level involvement using fishers exact test table 5 test statistic 1471 highly significant p00005 twotailed thus concluded difference assessment usefulness formal routines efficient medium transfer knowledge experience respect degree involvement introduction process table 5 degree involvement vs assessment formal routinized solutions often ignore social realities routines efficient medium transfer knowledge workplace see work kunda 24 thomas 38 experience background easily understand degree involvement preference formal routines within spi community espoused quality managers members software efficient medium low high engineering process groups sepgs likewise managers 7rather put emphasis rules procedures instructions dialog discussion employee participation 54 software development radically different manufacturing former mechanical process strong causal models need establish right formal routines rather developers view software 5 discussion development largely intellectual social activity section restrict discussion possible explanations therefore cannot apply rationalistic linear model none software developers study regarded software engineering admit reality formal routines efficient medium transfer knowledge software organizations nondeterministic multidirectional experience reason regard formalization flux involves constant negotiation renegotiation among participation important issues relevance much social groups shaping software 17 spi work done today researchers practitioners mean discard discipline respondents study software engineers formalization altogether needed balance odd managers engineering background furthermore software couple discipline creativity software development 21 quality managers engineering background wrote balance challenging since losing sight creative routines thus routines large part written designintense nature software work leads stifling rigidity engineers engineers still highly significant losing sight need discipline leads chaos difference attitudes regarding usefulness routines leads us second possible reason divergent transferring knowledge experience software attitudes developer managers employee engineers managers participation around formal routines seen point view three main reasons observed diversity regarding assessment efficiency 52 participation routines one potential conflict occupational employee participation way people treated cultures software developers managers second reason noted crucial factor organizational management degree developer participation developing development ever since famous productivity studies introducing routines third explanation western electrics hawthorne plant 1920s results views working learning thus ability written studies started revolution management thinking routines general transfer human knowledge experience showing even routine jobs improved workers reasons discussed 5153 treated respect 51 occupational culture interestingly study shows managers participate significantly introduction routines general agreement among respondents also actual development routines however intention introducing formal routines contribute one expert realities software companys efficient process developing quality software words business software developers intention behind formal routines provide experts work also experts appropriate methods techniques standardize work improve thus developers software processes needed solve problems hand organizations important source productivity profits differences observed attitude efficiency formal human capital view therefore important involve routines software developers managers close people take part problem solution resemblance lack alignment among executives decisions made respect companies engineers operators described schein 34 explained violated one important aspects employee differences cultural perspective defining culture involvement work environment may even set basic tacit assumptions world ought violated norwegian work environment legislation group people share determines formalization central feature webers 39 bureaucratic perceptions thoughts feelings degree overt ideal type viewed light results surprising behavior ibid p 11 schein claimed major occupational research formalization often presents conflicting empirical communities really understand findings regarding efficiency adler borys 2 explained leads failures organizational learning according schein divergence saying prior research focused engineering culture executive culture common different degrees formalization paid insufficient preference see people impersonal resources generate attention different types formalization emphasize problems rather solutions furthermore engineers need enabling type formalization procedures provide real engineering drive toward simplicity organizational memory resource capture lessonslearned best practice opposite coercive type formalization procedures presented without motivating rationale thus tend disobeyed resulting noncompliant process results regarding developers assessment routines closely resemble coercive type formalization developers clearly formal routines fact expressed views favor routines especially captured prior project experience contrary existing routines deemed coercive wanted routines enabling type formalization thus highest ranked alternative formal routines sort experience base newsgroup 53 working learning another aspect results support brown duguids 10 perspective learninginworking emphasize informal opposed formal learning authors referred learning modes respectively noncanonical canonical practices suggested training socialization processes likely ineffective based canonical practice instead realistic noncanonical practice people typically viewed performing jobs according formal job descriptions despite fact daily evidence points contrary held accountable map road conditions ibid p 42 thus formal routines alone inadequate might well demand improvisational skills among developers rigidities routines fact reflect actual experience 17 although many routines prescriptive simple still hard change cannot help complex situations actual practice abstracted surprising therefore socialization discussion groups among highest ranked alternatives formal routines also agreement brown duguids finding storytelling utmost importance dealing complexities daytoday practice furthermore authors highlighted story telling means diagnosing problems shared repositories accumulated wisdom similar zuboffs 40 emphasis storytelling deal smart machines greenwood levins 22 use narratives action research thus contrary rigidities formal routines stories tacit social activities seen flexible adaptable relevant software developers study furthermore results support assertion significant learning divorced specific context socalled situated learning therefore routines generalizations means strip away context examined caution indeed seems learning could regarded product community ie organizational learning rather individual thus lessonslearned cannot easily transferred one setting another see lave wenger 25 54 implications although study limited discussion suggests several implications first studies effects formalization whether enabling coercive focus features actual routines well implementation addition pay attention process designing features goals govern process second must recognize confront implications deeply embedded tacit assumptions different occupational cultures furthermore learn establish better crosscultural dialogues order enable organizational learning spi third major practical implication managers recognize needs balancing discipline creativity order supplement formal routines collaborative social processes deep honest appreciation managers expect effective dissemination knowledge experience within organization based findings study conclude software managers developers must maintain open dialogue regarding utility formal routines dialogue open way empirically based learning spi thus attain rewards enabling type formalization 55 limitations recommendations future research study focused utility formal routines transfer knowledge experience although provide valuable insights introduction formal routines software industry study without limitations first small sample lack randomness choice respondents may threat external validity general work spi suffers nonrepresentative participation since companies voluntarily engage systematic improvement activities must assumed betterthanaverage second major threat internal validity assessed reliability measures variables degree involvement efficiency routines measured subjective ordinal scale important issue future studies therefore ensure reliability validity measures used see 18 may also ask respondents truthful answers instance may sensed looking trouble thus giving us wanted ie exaggerating possible problems however answers four main questions added qualitative comments show consistent picture skepticism lack participation concerning formal routines therefore choose generally believe answers despite mentioned limitations lack crosschecks feel study makes important contribution understanding formal routines role organizational learning spi future studies examine enabling features formal routines much detail features could refined operationalized used crosssectional longitudinal studies much larger number companies furthermore studies include multiple respondent approach cover major occupational cultures also perform supplementary ethnographic studies developers really work work relate formal routines see 31 observational studies developers att 6 conclusion results survey reported paper show software developers perceive formal routines alone efficient way transfer knowledge experience furthermore study confirms suspicions large differences perception utility formal routines transfer experiences knowledge developers skeptical adopt formal routines found traditional quality systems also want routines introduced updated cooperative manner results revolutionary line many investigations similar themes 2 24 34 see also parnas clements article 29 fake rational design process spite small sample think results representative large class software companies remedy seems create cooperative open work atmosphere strong developer participation designing promoting future quality systems developers also seem open start exploiting new electronic media means collaboration linking newer seb technologies see also previous studies 13 however major difficult work remains nontechnical build learning organization lastly able make precise hypotheses four issues beforehand study character preliminary investigation later studies may undertaken precise hypotheses larger sample 7 acknowledgements thanks colleagues spiq project colleagues ntnu sintef least students jon e carlsen marius fornss fieldwork 8 r wolfgang carlsen marius forn software experience bases consolidated evaluation status report crisis tore dyb tore dyb tore dyb essi project office chapter introduction action research social research social change control commitment hightech corporation legitimate peripheral participation marciniak editor encyclopedia software engineering 2 volume volumesetvolume knowledgecreating company capability maturity model software guidelines improving software process discipline market leaders accelerators measurement fifth discipline art practice learning organization machines cant makt og byr age smart machine tr rational design process fake age smart machine future work power encyclopedia software engineering people organizations process improvement software creativity capability maturity model iso 9000 approach building quality software data mining knowledge discovery reexamining organizational memory instrument measuring key factors success software process improvement evaluating software engineering standards improvisation small software organizations software experience bases icodai ctr tore dyb enabling software process improvement investigation importance organizational issues empirical software engineering v7 n4 p387390 december 2002 reidar conradi alfonso fuggetta improving software process improvement ieee software v19 n4 p9299 july 2002 tore dyba empirical investigation key factors success software process improvement ieee transactions software engineering v31 n5 p410424 may 2005