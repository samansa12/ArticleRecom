implementation constructive synchronous programs polis design tools embedded reactive systems commonly use model computation employs synchronous asynchronous communication styles form junction two implementation synchronous languages circuits esterel asynchronous networks polis implement fact propagation key concept synchronous constructive semantics asynchronous nondeterministic network polis nodes cfsms save state locally deduce facts network globally propagates facts result correct implementation synchronous inputoutput behavior program model compositional thus permits implementations various levels granularity one cfsm per circuit gate one cfsm per circuit allows one explore various tradeoffs synchronous asynchronous implementations b introduction purpose reduce gap two distinct models concurrency fundamental embedded systems framework synchronous asynchronous models application systems written esterel synchronous programming language implemented polis system developed uc berkeley cadence synchronous zerodelay model used circuit design synchronous programming languages esterel 6 lustre 12 signal 10 synccharts 2 synchronous version statecharts 13 see 11 global overview model bookkeeping actions control transmission signal broadcasting conceptually performed zero time explicit delays taking time thus conceptual global clock controls precisely statements simultaneously compute exchange messages model makes possible base design deterministic concurrency much easier deal classical nondeterministic concurrency compiling optimizing verifying programs done using powerful boolean computation techniques see 5 synchronous model wellsuited direct specication implementation comparatively compact programs protocols controllers humanmachine interface drivers glue logic case one build global clock slow enough react possible environmental input asynchronous model processes exchange information messages nonzero travel time asynchronous models wellsuited networkbased distributed systems speci cation hardwaresoftware codesign relative speed components may vary work begun rst author visiting cadence berkeley laboratories august 1998 widely many asynchronous formalisms varied communication policies ex ample csp processes 14 communicate rendezvous dataaeow processes 15 exchange data queues buoeers polis 3 mixed synchronousasynchronous model developed uc berkeley cadence primary focus codesign globally asynchronous locally synchronous gals model synchronous nodes called cfsms codesign finite state machines arranged asynchronous network communicate using nonblocking 1 place buoeers synthesized realtime operating system rtos software part cfsms programmed concurrent synchronous language esterel thus taking maximal advantage synchronous model node level model eoeciently simulated implemented hardware andor software notice 1place buoeers much simpler implement fifos especially hardwaresoftware boundaries however polis networks much less intrinsic semantic safety fifobased dataaeow kahn networks 15 behaviorally deterministic behavior must carefully controlled particular buoeer overwriting polis lead nondeterministic behaviors hard analyze prove correct show behavior synchronous circuit program nicely implemented polis network course one implement synchronous program single cfsm node straightforward way interested distributed implementations synchronous behavior split asynchronously communicating units without global clock practice useful application behavior naturally synchronous execution architecture distributed possibly heterogeneous physical inputs outputs linked dioeerent computing units retain synchronous philosophy specifying application benet aeexibility eoeciency cfsm networks implementation propose solution cfsm granularity chosen part synchronous program implemented single synchronous cfsm makes possible partition program according architecture constraints best synchronyasynchrony compromise authors proposed distributed implementations synchronous programs asynchronous networks see example 9 8 draw much work however implementation takes maximal advantage semantics objects deal presented dioeerently trivial correctness proof technically speaking present polis implementation constructive synchronous circuits 5 18 class wellbehaved cyclic circuits generalizes usual class acyclic circuits since esterel programs translated constructive circuits 4 implementation handles esterel well key implementation synchronous programs realization conceptual zerodelay reaction input assignment distributed asynchronous network must done series message exchanges implementation messages cfsm events carry proven facts synchronous circuit wire expression values facts exactly logical information quanta constructive semantics based cfsm nodes generate output facts input facts according semantic deduction rules done series computations since conceptually simultaneous facts arrive dioeerent times single reaction program number events uniformly bounded buoeer overwrite occur network although internal behavior nondeterministic overall behavior respects synchronous semantics original program thus de terministic true independently schedule employed rtos addition execution successive synchronous reactions pipelined finally implementation takes full advantage mathematical properties constructive semantics particular compositionality property makes possible arbitrarily group elementary circuit gates cfsm nodes allows level granularity one single cfsm program one extreme one cfsm per individual gate clearly many applications using synchronous formalism spec ication level makes sense case results directly applicable nevertheless think show apparent distance synchrony controlled asyn ijyxfigure 1 circuit c 1 chrony reduced hope technology present serve basis future mixedmode language developments start section 2 presenting logical semantical electrical views constructive circuits section 3 brieaey present polis cfsm network model computation implementation constructive circuits model presented section 4 discuss possible applications synchronyasynchrony tradeooes section 5 conclude section 6 constructive circuits constructive circuits iwellbehavedj possibly cyclic circuits generalize class acyclic circuits acyclic circuits viewed two dioeerent ways ffl boolean equation systems dening boolean function associates output value assignment input value assignment ffl electrical devices made wires gates propagate voltages certain delays inputs kept electrically stable long enough one two binary voltages say 0v 3v outputs stabilize one binary voltages relating boolean electrical approaches easy acyclic circuits outputs electrically stabilize take voltages corresponding results boolean inputoutput function constructive circuits exactly characteristics even presence cycles 21 behavior cyclic circuits circuit input output internal wires latter also call local variables examples use letters j inputs xy outputs locals making precise outputs necessary output local variable dened equation expression built using variables operators negation conjunction disjunction simplicity assume expression e either variable negation variable single nary operator applied variables negation variables circuit put form adding enough auxiliary variables circuit also considered network gates pictured figure 1 wire single source multiple targets gates correspond operators running example shall consider following circuit c 1 outputs x ae notice c 1 cyclic appears equation x conversely 211 circuits boolean equations boolean view try solve circuit equations using boolean values 0 1 input assignment associates 0 1 input variables input assignment complete associates value input variable complete assignment boolean solution circuit assignment values 0 1 variables satises equations acyclic circuit exactly one boolean solution complete input assignment cyclic circuit may zero one several solutions given complete input assignment example consider case input one output x solution unique solution two solutions unique solution solution equations reduce two solutions 212 circuits electrical devices electrical view one preferably uses graphical presentation vocabulary wires associated variables carry two dioeerent voltages also called 0 1 simplicity logic gates implement boolean operators wires gates propagation delays shall accurate delays technically delay model refer upbounded inertial delay model described 7 17 complete input assignment realized keeping input wires stable time appropriate voltages voltages propagate circuit wires according laws electricity property interested wire voltage stabilization bounded time noninput wires assumed initially unstable outputs acyclic circuits always stabilize outputs cyclic circuits may may stabi lize example output stabilizes 0 1 output remains unstable wires stabilize values always satisfy equations stabilization may depend delays example hamlet circuit 1 dened output x stabilizes 1 delays stabilize others see 5 stabilization may also depend input assignment c 1 outputs stabilize right boolean values unless behavior delaydependent stabilization delays 22 constructive boolean logic notice perfect match boolean electrical solution lost cyclic circuits hamlet boolean output function welldened yields electrical stabilization may occur hamlet unique boolean solution 1 happens solution 0 finding solution involves propagating noncausal information cannot done nonsoothsaying electrons wires fortunately boolean logic weakened constructive boolean logic solution hamlet rejected thereby rendering boolean electrical results solution exists constructive boolean logic precisely models electrical behavior 221 facts proofs constructive boolean logic deals facts proofs fact form e boolean expression input fact 0 1 input variable input assignment set input facts facts deduced facts deduction rules deduction rules type gate one rule handle equations rules conjunction operator 1 think x land rand band facts horizontal bar premises fact bar conclusion rule band reads follows facts 1 rules orgate dual rules negation notice x behaves x classical boolean logic rules circuit equation b either 0 1 proof sequence facts starts facts input assignment fact deduced previous facts using rule following consistency lemma shows soundness proof system easily shown induction length proof lemma 1 exists proof fact 1 proof 222 proof examples give proof examples c 1 present annotated proof form writing step deduced fact premises applied deduction rule annotated proof complete input assignment 0 1 land 2 5 band dual proof 1 land 2 5 band notice deduction ordering x rst next p 01 reverse ordering rst x next p 10 main dioeerence acyclic constructive circuits acyclic circuits one nd dataindependent variable ordering valid input assignments constructive circuits ordering exists input assignment may datadependent 223 example nonprovable circuits circuits rejected output proof reason way start proof notice existence nonexistence boolean solution relevant circuit example two boolean solutions 1 however verify either solution one would rst make assumption solution verify validity assumption constructive proofs must propagate facts allowed make assumptions constructive boolean logic rejects hamlet circuit output fact proven way start proof without making assumption law excluded middle x hold constructive logic unless x already proved 0 1 224 output proofs complete proofs output proof proof proves fact output variable complete proof proof proves fact variable circuit output constructive wrt complete input assignment output proof starting facts circuit completely constructive wrt complete proof starting facts dioeerence fact needed intermediate variable output proof variable needed prove output facts even allowed fact variable proved consider example x output fact proved circuit output constructive completely constructive input assignment although output constructiveness seems general shall deal complete construc tiveness sequel since much easier handle complete constructiveness also required semantics esterel 4 225 constructive logic matches delay independence constructive boolean logic exactly represents delay independence given complete input signment circuit electrically stabilizes output wires resp wires gate wire delays output constructive resp completely constructive fundamental result shown 18 17 using techniques originally developed asynchronous circuit analysis 7 notice given fact several proofs delay assignments actually select proofs consider output two proofs 0 rst one deduces second one deduces fact deduced electrically speaking rst proof occurs propagates xs gate second proof occurs long delay input wire long enough propagate xs gate 0 23 scotts fixpoint semantics classical model boolean logic binary variables taking values 1g constructive boolean logic natural ternary semantic model 231 ternary model ternary domain 1g undened value read bottom represents absence nonprovability information domain partially ordered scotts information ordering total values 0 1 incomparable 2 tuples partially ordered componentwise x ioe x k k k functions required monotonic must fx fy b n composition monotonic functions monotonic functions partially ordered f g 232 fixpoint theorem key result scotts semantics xpoint theorem state simple case monotonic let xpoint f element x b n x theorem states f least xpoint lfpf nite limit increasing sequence function lfp associates least xpoint lfpf f monotonic 233 basic ternary operators boolean operators extended follows ternary logic choice negation must monotonically dened choose parallel extension least monotone function closely corresponds electrical gate behavior proof rules extension disjunction dual possible extensions strict extension 0 left sequential extension symmetrical right sequential extension denable parallel extension constructive logic hint expression xx value 1 x denedsee 16 1 complete discussion extensions interesting note parallel extension cannot dened sequential languages c requires parallel interpretation mechanism hence name 234 circuits fixpoint operators circuit input vector variables vector x denes equation form kth component f given righthandside equation x k given input assignment let us write f b n call solution circuit wrt least xpoint lfpf f example circuit c 1 least xpoint input 0 least xpoint next theorem shows constructively deducible facts exactly correspond xpoint solution theorem 1 given circuit c dening function f input assignment fact constructively provable xcomponent least xpoint f value b unfortunately authors use f0 mean thing proof standard left reader use inductions term size proof length notice theorem require input assignment complete also valid inputs fact inputs used deductions concludes theory constructive circuits electrically stabilizing delayindependent way provable constructive boolean logic non value least xpoint 24 algorithms circuit constructiveness algorithms detect whether circuit constructive given input assignment complete input assignments present lineartime algorithm works one complete input assignment used esterel v5 compiler interpretation mode option algorithms checking constructiveness inputs input classes much complex bddbased algorithm used esterel v5 compiler option causal presented 18 17 19 considered 241 interpretation algorithm running data structure algorithm composed two sets facts called todo array pred integer values indexed noninput variable names todo set initially contains input facts done set initially empty array entry predx initialized number predecessors x number variable occurrences denition equation x also called fanin number electrical presentation algorithm successively takes fact todo puts done propagates constructive consequences may add new facts todo decrement predecessor counts propagating consequences fact works follows ffl variables refer v denition decrement predecessor count according number occurrences v denition immediately determines fact added todo occurs dened conjunction v appears positively case disjunction v appears negatively case symmetrically 1 fact propagation rule corresponds deduction rules land rand possibly combined not0 not1 ffl predecessor count variable w falls 0 value w yet determined new fact added todo c identity denition operator w ie 1 0 corresponds rules band 242 execution example inputs 0 start following state remove 0 todo put done decrement predecessor count x immediately implies add fact todo process 1 consequence number predecessors decremented since determine process fact directly determine value exhausts predecessor list deduce value 1 since empty conjunction add fact todo computed facts need however useful perform last step bring us back nice clean state processing puts fact done decrements xs predecessor count since build proofs result algorithm depend order pick facts todo input 0 run output values computed faster cleanup longer nonconstructive input rapidly reach deadlock remaining facts todo yet fact established x predecessor counts positive following result shows algorithm correct complete theorem 2 let c circuit n variables complete input assignment circuit output constructive wrt algorithm starts computes fact output variable circuit completely constructive wrt algorithm terminates predecessor counts 0 completely constructive circuit algorithm always takes number steps sum fanin counts 3 polis cfsm model recall goal implement synchronous circuits within polis system polis 3 software tool developed uc berkeley synthesis controldominated reactive systems targeted mixed hardwaresoftware implementations primary feature polis underlying cfsm model computation within model implement synchronous circuits 31 overview model computation consists network communicating codesign finite state machines cfsms communication style called gals globally asynchronous locally syn chronous node level cfsm synchronous semantics run cfsm reads inputs computes writes outputs instantaneously network level cfsms communicate asynchronously communication done via data transmission buoeers assumptions made relative delays computations performed cfsm delays data transmission 32 cfsm communication cfsm set inputs outputs cfsms connected nets net associates output one cfsm inputs cfsms information transmitted cfsms composed status value stored 1place communication buoeers net one associated value buoeer multiple status buoeers one attached cfsm input thus cfsm local copy status inputs value stored shared buoeer cfsm input buoeer composed local status buoeer shared value buoeer 3 status buoeer stores either 1 0 representing presence absence valid data value buoeer cfsm input assignment set values stored input buoeers cfsm equivalent circuit input assignment given section 211 cfsm input assignment may complete partial captured input assignment corresponds statuses values actually read buoeers cfsm run 33 cfsm computation cfsm computation called cfsm execution cfsm run cfsm executes reads inputs makes computation writes outputs resets consumes inputs input reading cfsm atomically reads resets status buoeers simultaneously reads status buoeers sets 0 ready arrival new inputs 4 subsequently reads values present inputs determines captured input assignment computation cfsm uses captured input assignment make computation computes outputs next states based values given state transition table computation done synchronously means cfsm reacts precisely captured input assignment regardless whether inputs change cfsm computing output writing output cfsm writes value buoeer subsequently atomically sets status buoeers associated cfsm input 5 cfsmevent consists output emitting data corresponding input status buoeers set 1 34 cfsm network computation network computation called network execution network run corresponds several cfsm executions cfsm network associated schedulers scheduler continuously reads current input assignments determines cfsms runnable chooses order 3 note 3 word event used status alone statusvalue pair polis cfsm may empty execution means react current inputs case current inputs saved inputs received cfsm determining empty reaction added input assignment restored thus read next run use feature 5 atomic reads writes expensive since require implementation guarantees actions happen simultaneously decision made polis make status buoeer reading writing atomic valuebuoeer reading writing atomically reading writing short bit strings implemented eoeciently guarantees certain desirable behavioral properties system run 6 cfsm runnable least one input status buoeer set 1 cfsm run scheduler sometime runnable typically input assignment given network scheduler runs cfsms according schedule changes communication buoeers called complete network execution time eoeectively passes control returned scheduler thus instantaneous communication cfsm modules possible implementing constructive circuits cfsm networks section explain realization synchronous behavior circuit cfsm network facilitate exposition restrict extreme case one cfsm per gate realistic levels granularity handled section 5 section 24 presented algorithm compute behavior circuit given circuit input assignment essential ingredients set todo facts propagate set done established facts predecessor counter variable basic idea cfsm network implementation presented distribute similar algorithm network cfsms associating cfsm circuit gate equation start studying reaction single input assignment present various ways chaining reactions handle circuit input assignment sequences obtain cyclic behavior characteristic synchronous systems 41 fact propagation cfsm network implement gate cfsm reads write facts encoded polis cfsmevents sent one gate fanouts arrival fact gate makes gate runnable run provable output fact facts received far gate cfsm outputs fact propagation gates directly performed underlying polis scheduling cfsmevent broadcasting mechanisms polis execution schedule thus precisely proof fact propagation ordering facts arrive sequentially gate cfsm therefore combinational circuit gate must implemented sequential cfsm remembers facts received far sequential state gate cfsm encodes number predecessors interpretation algorithm section 24 42 basic gate cfsm ease exposition write gate cfsms esterel makes gate specication aeexible useful next sections preliminary knowledge esterel required handle running example suoeces describe andnot gate gates similar esterel program andnot following interface module andnot b c esterel signals type boolean values called true false esterel signals like polis buoeers additional notation event booleanvalued signal two components binary presence status component also written take values present absent value component type boolean written choose encode fact present value true resp 6 polis scheduler automatically synthesized parameters type scheduling algorithm given user false 7 notice use two pieces information status value represent fact ie stable value wire present status component indicates stability ie fact propagated point value component represents boolean value fact like polis captured input assignment esterel input assignment denes presence status input signal value present signal instance andnot atruebfalse esterel input assignment present value true b present value false encoding facts input assignment present value false b absent encoding fact like cfsm esterel program repeatedly reacts externally provided input assignment generating output assignment processing input assignment also called reaction instant polis run esterel cfsm triggers exactly one reaction esterel program input assignment unlike polis communication esterel instantaneous signal emitted statement instantaneously received statements listen similarly control propagation instantaneous example sequence p q q immediately starts p terminates statements break aeow control explicit delays iawait sj waits next occurrence signal finally esterel signal presence status memorized reaction reaction value value esterel expression reaction absent one previous reaction notice value signal may change signal present rst attempt write esterel body andnot await emit cfalse end b emit cfalse end b emit ctrue end program reads follows first start two parallel threads rst thread waits presence second threads waits presence b rst input assignment present b present empty assignment neither b present would leave program state assignment permitted esterel never generated polis scheduler absent rst thread continues waiting present rst thread immediately checks value immediately outputs cfalse false thus mimicking land deduction rule thread terminates immediately either case second thread behaves symmetrically checks truth b emit cfalse b present threads evolve simultaneously esterel parallel construct terminates immediately branches termi nated therefore parallel statement terminates exactly b received either simultaneously successive input assignments instant ctrue emitted possibly memorized values b respectively true false mimicking band deduction rule negated second argument 421 avoiding double output gate cfsm almost works quite since cfalse emitted twice possibly dioeerent instants false b true gate output c correct problem use auxiliary boolean signal caux 7 equivalent encodings considered one example use pair pure signals variable one presence one value encoding use makes clear dioeerence availability value sd figure 2 partial state transition graph module andnot signal caux combine boolean await emit cauxfalse end b emit cauxfalse end b emit cauxtrue end await caux emit ccaux signal rst branch outermost parallel behaves emits caux instead c second branch waits caux emit c value immediately terminates caux emitted twice succession rst branch second emission simply unused since iawait cauxj statement already terminated icombine boolean andj declaration smoothly handles simultaneous double emission also called collision example collision occurs afalse btrue occur simultaneously case iemit cfalsej statements simultaneously executed combine declaration species result value caux conjunction separately emitted values could well use disjunction false values combined 422 gate cfsm state graph gate cfsm state transition graph stg partially shown figure 2 transitions shown cases received b cases b arriving rst b arriving simultaneously similar pictured partial stg shown help visualize sequential state traversal familiar syntax practical input mechanism reactive modules compared esterel language example module waits n signals concurrently 2 n states esterel description size n note also c aux signal shown output list visualization purposes internal signal seen module 423 gate cfsm execution example become familiar esterel semantics let us run andnot program two dioeerent input assignment sequences start state 0 waiting inputs b internally caux pictured underlining active await statements signal caux combine boolean await emit cauxfalse end b emit cauxfalse end b emit cauxtrue end await caux emit ccaux signal assume rst gate input assignment atrue b absent iawait aj terminates execute test inot aj since test fails rst parallel branch terminates without emitting caux reach state 1 continue waiting b caux signal caux combine boolean await emit cauxfalse end b emit cauxfalse end b emit cauxtrue end await caux emit ccaux signal input bfalse execute b test also fails since second parallel branch terminates parallel statement terminates immediately execute ia bj test succeeds emit cauxtrue makes iawait cauxj statement instantaneously terminate output ctrue emitted since reach dead state signal awaited assume rst gate input assignment afalse b absent starting 0 execute rst test succeeds emits cauxfalse iawait cauxj statement immediately terminates cfalse emitted continue waiting b following signal caux combine boolean await emit cauxfalse end b emit cauxfalse end b emit cauxtrue end await caux emit ccaux signal b occurs later input assignment iawait bj statement terminates program reaches dead state b true emission cauxfalse performed unused last step waiting b mimics last cleanup step propagation algorithm section 24 essential chain cycles section 44 b occur together rst input assignment andnot immediately emits c appropriate value transitions directly state 0 dead state notice number predecessor waited algorithm section 24 exactly number underlined statements among iawait aj await bj scheduler figure 3 cfsm network circuit c 1 43 performing single reaction network gates given circuit c cfsm network c obtained creating input buoeer input signal c output buoeer output signal gate cfsm equation c gate cfsm outputs broadcast gate cfsms use specied circuit equations run network given circuit input assignment suoeces put input values dened network input buoeers gate cfsms directly connected inputs become runnable soon gate computed result puts output buoeer results value automatically transferred fanout cfsm input buoeers network cfsms become runnable 431 execution example consider network c 1 pictured figure 3 cfsms x called cx cy rectangular buoeers 1place buoeers used communicate cfsmevents modules note two information storage mechanisms work execution circuit 1 cfsmgates implemented esterel modules internally store signals received thus still waiting using implicit states 2 cfsmnetwork implemented polis stores copy cfsmevent one fanout event using 1place buoeers consider input assignment 0 rst put false buoeer true js buoeer cfsms cx cy become runnable assume cx run rst captures partial input assignment afalse b absent encodes 0 cx cfsm outputs cfalse encoding goes state 1 false event made visible cys b input buoeer time ffl assume rst cy run arrival cxs output cy captures partial input assignment atrue b absent encodes fact 1 cy cfsm emits output continues waiting b input state 2 xs false value written cys b input buoeer cy made runnable runs captured input assignment absent bfalse emits ctrue encodes 1 goes dead state ffl assume instead cxs false output written cys input buoeer b cy run cy later run captures complete input assignment atruebfalse encodes facts emits ctrue goes directly dead state cy emitted output ctrue true value written cxs input buoeer b cx made runnable cx run input assignment btrue absent encodes goes dead state 432 correctness cfsm implementation cfsm network computes proof way interpretation algorithm section 24 dynamic concurrent scheduling fact propagation building new fact equivalent generating cfsmevent propagating fact equivalent broadcasting cfsmevent fanouts running fanout cfsms exactly network automatically provides following theorem summarizes results theorem 3 let c circuit let n number output local variables fanouts let f number variable occurrences righthandsides cs equations fanins let circuit input assignment run network associated c initialized following holds 1 number created cfsmevents bounded n number cfsm runs bounded f buoeer overwrite occur 2 complete network execution sequence exactly n cfsmevents created implemented circuit completely constructive wrt output gate cfsm generated events encodings output values c wrt complete execution sequences give result independent schedule gate cfsms terminate dead state cfsmevents processed 3 complete run less n cfsmevents created true runs c completely constructive wrt output constructive circuits handled slight modication result loosing nice fact gate cfsms terminate dead state useful chaining reactions demonstrate next section 44 chaining reactions synchronous circuit program meant used sequentially user rtos providing sequence input assignments reading sequence output assignments polis implementation user alternates writing circuit input assignments network input buoeers reading computed circuit output assignments network output buoeers since polis uses 1place buoeers communication must make sure buoeer overwrite occurs network particular cannot let user overwrite input buoeer value completely processed gates connected four possible userlevel protocols ffl wait given amount time technique used singleclocked electrical circuits since number operations performed uniformly bounded underlying machinery cpus network etc predictable performance figure 4 circuit c 1 guaranteed reaction complete maximal predictable time buoeer overwriting occurs solution often used cycledbased control systems implemented software programmable logic controllers plcs protocol realized implementation addition performance estimation order compute frequency new inputs fed synchronous circuit ffl compute return termination signal circuit completely constructive wrt input know computation nished gate cfsms read inputs ie network processed given number cfsmevents either modify scheduler report completion user build explicit termination signal gate output separate cfsmevent processed inputs cfsmevents gathered auxiliary gate generates termination event user input arrived centralized solutions spirit distributed systems ffl implement local aeow control protocol gate cfsm much natural solution distributed setting makes possible pipeline execution input user may enter new value soon aeowcontrol protocol says without waiting reaction complete protocol must ensure input conceptual synchronous cycle never interferes values cycles ffl queue input events solution used 9 8 implies user always write new inputs never blocked implementation aeow control problem simply pushed inside network since cfsms communicate using queues present aeowcontrol protocol supports pipelining reactions remain globally wellordered required synchronous model nth value input processed conceptual synchronous cycle nth value input j however pipelining internal network cfsm scheduling cfsmevent generation occur intricate orderings make gate reusable suoeces embed bodies esterel iloopendj innite loop instead going dead state gate cfsm returns initial state much easier handle complete proofs deal general output proofs add complicated gate reset mechanism reset automatically performed complete proofs thanks aeexibility esterel code protocol requires slight modication basic gate code addition new module corresponding cfsm network shown figure 4 consider output x cfsm read example two cfsms n p x n resp p associate signal xfreen resp xfreep written n resp p x associate signal xfreem read written auxiliary module xcfsm consumes xfreen xfreep writes xfreem xfreen xfreep received value buoeers figure 4 signal used polis actual information determining signal x free written contained implicit states xcfsm new module written follows module xcfsm input xfreen xfreep output xfreem loop await xfreen await xfreep emit xfreem loop module similarly network input broadcast n p generate network output buoeer ifree lled auxiliary cfsm reading ifreen ifreep network output network input buoeer ofree lled user ready accept new value require write x output xfreem holds 0 consuming value require n resp p write 0 xfreen resp xfreep reads local copy input x andnot cfsm modied follows module andnot output afree bfree input cfree loop signal caux combine boolean await emit afree emit cauxfalse end emit bfree b emit cauxfalse end b emit cauxtrue end await caux await cfree emit ccaux signal loop output c emitted last caux cfree received gate cfsm instantiated node afree bfree cfree buoeers must appropriately renamed afreem bfreem cfreem avoid name clashes aeowcontrol mechanism acts two ways first prevents buoeer overwriting second makes pipelining possible given circuit input assignment n cycle n new value circuit input cycle written network input buoeer soon ifree full therefore necessary wait global end cycle locally start new one last technical problem solve assume andnot gate cfsm starts circuit cycle n assume gate cfsm receives input event say afalse b absent gate sends back afree gate receive two inputs ffl b input event holds bs value cycle n input processed normally since gate cfsm currently processing cycle n ffl outoforder input event holds value cycle n 1 processing input deferred b processed current polis network model cfsm made runnable soon receives input event therefore gate made runnable input cycle still processing cycle n point gate either internally memorize value rewrite buoeer leaving cases afree aeow control buoeer empty nished cycle n solutions expensive somewhat ugly suggest slight modication polis scheduling policy cfsm tell scheduler input buoeers currently interested scheduler make cfsm runnable none buoeers holds event cfsm run captured input assignment contain events buoeers cfsm explicitly waiting leaving rest input buoeers example gate cfsm tells scheduler waiting b new value comes cfsm made runnable b occurs gate made runnable run input b gate processed b tells scheduler waiting b since already gate immediately made runnable nal version gate cfsm involves auxiliary wait signals sent scheduler implement mechanism module andnot output afree bfree output await bwait input cfree output cfreewait loop signal caux combine boolean abort sustain await emit afree emit cauxfalse end abort sustain bwait b emit bfree b emit cauxfalse end b emit cauxtrue end await caux abort sustain cfreewait cfree emit ccaux signal loop iawait aj statement become iabort sustain await aj isustain awaitj statement emits await clock cycle iabort p aj aborts body p right away occurs executing p abortion time therefore await emitted received instant excluded 5 mixed synchronousasynchronous implementation two dioeerent levels granularity implementing esterel program polis compiling program single cfsm node building separate cfsm gate program circuit rst support distribution second clearly ineoecient associated overhead unacceptable large programs since involves scheduling individual gate cfsm multiple times brieaey explain deal many implementation choices dioeer ent levels granularity using compositional incremental character constructive semantics retain full synchronous semantics program trade ooe synchrony asynchrony implementation idea one moves larger granularity implementation partition set gates gate clusters g 1 cluster g k groups gates single cfsm clusters connected polis network partition arbitrary chosen match locality performance constraints facts processed synchronously asynchronously proofs derived synchronous constructive semantics particular synchronous fact processing done within cluster using algorithm section 24 single cfsm one computation cfsm asynchronous fact processing done across network thus cfsms facts synchronously asynchronously processed eg output gate g 1 input another gate g 0in cluster g 1 g 2 another cluster g 2 makes possible ability centralized distributed algorithms deal partial deduction given partial input assignment algorithms generate facts deduced new fact added algorithms incrementally deduce consequences therefore matter whether facts handled synchronously gate cluster asynchronously polis cluster network consider example following circuit c 2 obtained adding output z c 1 consider rst clusters g fzg assume receive fact deduces outputs fact g 2 make local transition reach state 1 waits also internally remembers local state lost predecessor thus synchronously propagated cluster asynchronously propagated z cluster another call cfsm receive sends fact g 2 output input sequence consider clusters g g receiving instantaneously generates facts determined synchronously fact asynchronously propagated g 2 network g 2 cfsm transitions state waits j occurs cfsm outputs fact propagated g 1 cfsm goes back initial state optimal solutions problem determining set clusters beyond scope paper number clustering algorithms exist literature design may entered partitioned fashion leads natural clustering well case clustering according source code module structure obvious candidate clustering heuristic well clustering according frequency use signals like clocks lus tre simply point algorithms semantics behind permit level granularity individual gates implemented separate cfsms entire synchronous program implemented single cfsm thus tradeooe synchronous asynchronous implementation synchronous program fully explored 6 conclusions future work described method implementing synchronous esterel programs circuits globally asynchronous locally synchronous gals polis networks method based fact propagation algorithms directly implement constructive semantics synchronous programs developed aeowcontrol techniques automatically ensure polis buoeer overwritten make pipelining possible initially associated polis cfsm circuit gate unrealistic practice however method fully compositional fact propagation performed either synchronously node asynchronously nodes makes possible cluster gates bigger synchronous nodes explore tradeooe synchronous asynchronous implementation simplicity dealt pure fragment esterel signals carry value extension full valuepassing esterel constructs raises particular dioeculty complete implementation currently developed r domains lambdacalculi constructive semantics esterel foundations esterel esterel synchronous programming language design asynchronous circuits distributing automata asynchronous networks processors distributing reactive systems programming realtime applications signal synchronous programming reactive systems synchronous dataaeow programming language lustre visual approach complex systems communicating sequential processes semantics simple language parallel programming lcf programming language formal analysis cyclic circuits constructive analysis cyclic circuits analyse constructive et optimisation tr communicating sequential processes statecharts visual formalism complex systems esterel synchronous programming language formal verification embedded systems based cfsm networks hardwaresoftware codesign embedded systems domains lambdacalculi foundations esterel synchronous programming reactive systems constructive analysis cyclic circuits formal analysis synchronous circuits ctr gerald lttgen michael mendler intuitionism behind statecharts steps acm transactions computational logic tocl v3 n1 p141 january 2002 mohammad reza mousavi paul le guernic jeanpierre talpin sandeep kumar shukla twan basten modeling validating globally asynchronous design synchronous frameworks proceedings conference design automation test europe p10384 february 1620 2004 stephen edwards olivier tardieu shim deterministic model heterogeneous embedded systems proceedings 5th acm international conference embedded software september 1822 2005 jersey city nj usa stephen edwards edward lee semantics execution synchronous blockdiagram language science computer programming v48 n1 p2142 july