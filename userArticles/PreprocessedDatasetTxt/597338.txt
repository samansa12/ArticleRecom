coordinating electronic commerce activities manifold modern electronic commerce environments heavily webbased involve issues distributed execution multiuser interactive access interface use middleware platforms thus components exhibit properties communication cooperation coordination cscw groupware workflow management systems paper examine potential using coordination technology model electronic commerce activities show benefits approach furthermore argue controloriented eventdriven coordination models enjoy inherent properties security suitable electronic commerce datadriven ones based accessing open shared communication medium almost unrestricted ways b introduction modelling activities within information system different information systems become complex task performing activities often known groupware workflow electronic commerce enterprize reengineering often done conjunction computerbased cooperative environments electronic mail voice video teleconferencing electronic classrooms etc addition emergence world wide web main medium passive presentation information also active cooperation different agents collaborating single task enhances properties activities distribution openess typical examples complexinnature activities range finding suitable timeslots locations group meetings performing administrative procedures eg organising conferences carrying reviews draft documents developing distributed webbased electronic commerce applications eg reserving flight seats hotel rooms means dedicated www servers modelling activities become task often impossible perform single individuals requiring groups people sometimes distributed different organisations countries etc recently seen proliferation socalled coordination models associated programming languages 2616 coordination programming provides new perspective constructing computer software instead developing computer program scratch coordination models allow gluing together existing components coordination science right whose role goes beyond computer programming also proposed 11 point argued coordination number advantages traditional process models explicit representation organisational goals constraints dependencies opposed compiled process descriptions opportunistic selection required mechanisms given current coordination requirements opposed fullydefined processes ahead time sensitivity exception handling well ability adapt dynamically opposed processes rigid welldefined behaviour paper use generic coordination model iwim ideal worker ideal manager specific controloriented eventdriven coordination language manifold based iwim 34 model electronic commerce activities electronic commerce makes heavy use aspects related coordination technologies namely communication say sellers potential customers cooperation case brokering coordination case distributed auction bidding furthermore webbased electronic commerce environments inherently distributed require support security measures iwim associated language manifold based pointtopoint communication therefore inherently secured coordination systems opposed category shared dataspace coordination models inherently weaker security aspects see following section rest paper organised follows section 2 briefly compare two main approaches developing coordination models languages section 3 describe coordination model iwim associated language manifold section 4 use manifold model electronic commerce activities finally section 5 present conclusions related work 2 data vs controldriven coordination models languages past years number coordination models languages developed 2616 however first model still remains popular one linda 1 linda underlying view system coordinated usually distributed open asynchronous ensemble formed agents latter perform activities independently coordination achieved via medium asynchronous manner linda introduces socalled notion uncoupled communication whereby agents question either insert retrieve shared medium data exchanged shared dataspace referred tuple space information exchange agents via tuple space performed posting retrieving tuples tuples addressed associatively suitable patterns used match one tuples general tuples produced carry information regarding identity producers intended consumers communication anonymous although linda indeed successful coordination model potentially serious deficiencies least applications electronic commerce penetrate related models based deficiencies datadriven state agent defined terms kind data posts retrieves tuple space natural interested flow information involved agents setup agent reacts receiving information rather kind data sends receives shared dataspace agents communicate may intuitive ordinary parallel programming concerned offering easy understand use metaphors one shared memory believe hardly intuitive realistic cases modelling organisational activities people working environments take work done others common rooms people pass pick work true sometimes selective broadcasting eg providing group people job work letting sort workload among unrestricted broadcasting tuple space variants suggest enforce hardly appropriate leads unnecessary efficiency overheads furthermore perhaps importantly use widely public medium tuple space variants suffers inherently major security problem gives rise problems least three dimensions related fate data posted seen examined anyone ii removed wrong agent intentionally unintentionally even worse iii forged without anyone noticing repercussions deficiencies modelling information systems rather obvious need discussed suffices say example directly related context paper would want broadcast tuplespace credit card number hoping picked intended recipient problems already concern researchers area shareddataspacebased coordination models solutions sought 71216 nevertheless implementing solutions requires quite extra effort effectively leads design new coordination models top vanilla type ones new models often counterintuitive relatively complex compared inherent philosophy underlying basic model 3 iwim model language manifold manifold 4 coordination language opposed linda family coordination models described previous section control rather data driven realisation new type coordination models namely ideal worker ideal manager iwim one 3 manifold two different types processes managers coordinators workers manager responsible setting taking care communication needs group worker processes controls nonexclusively worker hand completely unaware anyone needs results computes receives data process manifold possess following characteristics processes process black box welldefined ports connection exchanges units information rest world process either manager coordinator process worker manager process responsible setting managing computation performed group workers note worker processes managers subgroups processes one manager coordinate workers activities member different subgroups bottom line hierarchy atomic processes may fact written programming language ports named openings boundary walls process units information exchanged using standard primitives analogous read write without loss generality assume port used exchange information one direction either input port output port process use notation pi refer port process instance p streams means interconnections ports processes realised stream connects port producer process port consumer process write po qi denote stream connecting port producer process p port consumer process q events independent streams also event mechanism information exchange events broadcast sources environment yielding event occurrences principle process environment pick broadcast event practice though usually subset potential receivers interested event occurrence say processes tuned sources events receive write ep refer event e raised source p activity manifold configuration event driven coordinator process waits observe occurrence specific event usually raised worker process coordinates triggers enter certain state perform actions actions typically consist setting breaking connections ports channels remains state observes occurrence event causes preemption current state favour new one corresponding event event raised source generally continues activities event occurrence propagates environment independently observed processes according observers sense priorities figure 1 shows diagramatically infrastructure manifold process figure process p two input ports in1 in2 output one two input streams s1 s2 connected in1 another one s3 in2 delivering input data p furthermore p produces data via port replicated outgoing streams s4 s5 finally p observes occurrence events e1 e2 raise events e3 e4 note p need know anything else environment within functions ie sending data sends data etc following manifold program computes fibonacci series manifold printunits import manifold variableport import manifold sumevent port x port import event overflow auto process v0 variable0 auto process v1 variable1 auto process print printunits auto process sigma sumoverflow manifold main beginv0sigmax v1sigmayv1v0sigmav1sigmaprint overflowsigmahalt code defines sigma instance predefined process sum two input ports x default output one main part program sets network initial values 01 fed network means two variables v0 v1 continuous generation series realised feeding output sigma back via v0 v1 note manifold variables constants matter manifold variable rather simple process forwards whatever input receives via input port streams connected output port variable assignment realised feeding contents output port input note also computation end event overflow raised sigma main get preempted begin state make transition overflow state subsequently terminate executing halt preemption main begin state causes breaking stream connections processes involved network detect breaking incoming streams also terminate 4 electronic commerce frameworks manifold section show controlbased eventdriven coordination model like manifold used model transactions electronic commerce concentrate three aspects modelling ecommerce transactions realizing security mechanisms illustrating integration different components process take opportunity introduce additional features manifold 41 modelling ecommerce activities start considering case general scenario whereby sellers potential buyers exchanging control data information follows seller raise event offerservice whereby informs market product able offer simplicity assume seller question offer one product whose nature selfevident event raised certainly need case seller may offering one product addition raising event seller places tuple detailed description offered ptoduct default output port potential buyer detects raising event interested uses id events sender connect sellers output port order retrieve detailed description offered product use atomic process propose instant checkdescr decides whether interest continuing transaction activities decides buy raises event iaminterested simplicity assume events meaning selfevident sense seller exists confusion intention potential buyer point need case model handle arbitrarily complex transaction patterns upon detecting presence event iaminterested seller uses events source id connect default input port potential buyer place detailed offer including perhaps discounts special prices etc potential buyer decides whether wishes complete transaction abort use atomic process checkspecs process introduced describing advisor sends appropriate accept reject message seller former case possibly along information eg credit card number reject message sent transaction process aborted instead accept message sent possibly along verification information buyer sends product user finally user sends buyer required amount money scenario presented graphically interesting point figure 2 comes close visual coordination program would written visual interface manifold namely visifold 5 suggests use visual programming modelling electronic commerce scenarios furthermore stress point virtue iwim model transactions secured particular agents involved transaction namely seller potential buyer broadcast intention selling something intention possibly buying something respectively rest information involved transaction ie description product particular offer seller may make potential buyer acceptance offer buyer along possibly sensitive information credit card number exchanged means point topoint port connections default secure private reliable offerservice proddescr proddescr iaminterested proposal figure accept reject product money furthermore stress point virtue iwim model transactions secured particular agents involved transaction namely seller potential buyer broadcast intention selling something intention possibly buying something respectively rest information involved transaction ie description product particular offer seller may make potential buyer acceptance offer buyer along possibly sensitive information credit card number exchanged means point topoint port connections default secure private reliable actual manifold code seller potential buyer shown event offerservice iaminterested manifold event gotanswer gotmoney begin raiseofferservice output iaminterestedbuyer begin buyer input buyer buyer payment manifold buyer port itemspeecs port specs stream kk specs auto process myspecs variableitemspecs check products description auto process propose checkdescr check products specs auto process advise checkspecsmyspecs begin variableitemspecs specs offerserviceseller begin getunitseller propose continuepropose raiseiaminterested getunitinput advise recommendadvise accept seller seller gotproduct seller next postbegin probably stress fact actual information particular heroes scenario parametric words code specifies implements welldefined way coordination protocol transaction paying attention important issues security anonymous communication virtue iwim model also paying little attention offered offering interested buying case purchase actually taking place buyer pays thus protocol reusable applied many similar cases combined protocols form general complicated ones etc 42 realizing security mechanisms previous case seen manifold provide necessary security implementation level words sure basic communication among interacting agents secured transmitted data cannot lost intercepted forged however tackled issue security logical level ie whether involved agents right type valid identity behave intended way although transaction process figure 2 secured far communication needs concerned framework allows agents b anything wish without restricting checking behaviour way happens mixed together communication behaviour protocols every agent free define completely behaviour irrespective may affect agents however manifold coordinators used somewhat different manner whereby addition security implementation level also enjoy security logical level achieved special manifold coordinators used interfaces actual agents possibly manifold coordinators agent say seller buyer cannot arbitrarily communicate agent instead ask permission special coordinator latter may allow communication continue may behalf agent requested thus special coordinators interpose agent rest world regulate behaviour agents provide logical security coordinators seen law enforcers law defined implemented manifold code idea special law enforcing agents introduced 1213 section illustrate framework described 13 implemented naturally model overall setup illustrated figure 3 ecommerce agent implemented manifold typical programming languages java exists controller law enforcer implemented manifold latter used intercept messages sent agent rest world ie agents cooperates well messages sent agent agents agent allowed enter get involved transaction without presence manifold controller rest world manifold law enforcers ecommerce agent figure particular show number regulator coordinators enforce following nticket law defined 13 client wishing buy goods first sends ticket seller request consisting value n ticket electronic certificate certificate valid ticket seller sends back client nticket client use ticket n times buy goods addition elementary security needed implementation communication level also want logical security sense ticket seller allowed provide tickets ii tickets duplicated clients iii clients use n ticket n times manifold code scenario follows promptly event sendticket auto process agora mall auto process seller ticketseller auto process client client manifold clientlawprocess client event getticket buy reqok auto process ec electroniccertificate auto process value variable auto process certificate variable begin terminatedself getticketclient client value selfvaluecertificate seller terminatedself sendticketseller auto process idseller variable auto process idclient variable begin getunitinput idsellerseller idclientclient value client begin terminatedself buyclient value1 auto process request variable auto process valid validate client valid request reqokvalid request agora manifold ticketlaw process seller event ecok auto process value variable auto process ec variable auto process idclient variable begin getunitinput idclientvalueec valueec seller terminatedself selfidclientvalue idclient every client wishing get nticket starting buying goods every seller providing tickets exist respectively clientlaw ticketlaw regulator enforce law intercept communication client seller client process wants get ticket corresponding clientlaw process sends tuple clientidnvalueelectrcertificate ticketlaw process latter informs seller process monitors ticket requested seller checks certificate certificate valid seller informs ticketlaw latter uses clientid part tuple received connect clientlaw send requested ticket upon receiving ticket checking means comparing ids ticket sent right seller addressed intended client clientlaw informs client ticket arrived monitors attempted transaction client agora group service providers monitored regulator coordinator shown making sure client exceed nvalue limit note coordinators enforce security logical implementation level client process cannot copy received ticket similar process since ticket held regulator clientlaw process client exceed tickets value since n0 additional transaction client agora allowed furthermore ticketlaw process makes sure tickets issued valid seller process ticket issued forwarded client process requested achieved making use ids well client process requested ticket finally already discussed previously elementary security level exchanging information guaranteed virtue iwim model manifolds implementation 43 integrating different components section show applicability controlbased event driven coordination models manifold development generic interaction frameworks often referred shopping models 10 interaction communication part words program logic separated low level details security payment mechanisms employed etc toplevel environment follows logic 10 consists four main components merchant handler customer handler shopping controller services controller first two used intercept handle requests messages data interchanged customer merchant third one coordinates interaction previous two entities last one controls invocation specific services payment methods illustrated figure 4 customers merchants interchange messages indirectly via shopping controller monitors interaction need arises plays role objective referee furthermore clients interact service controllers delegate often lower level nature tasks invoking specific services interactions event driven coordinators four basic entities shown shaded rectangular boxes implemented manifold actual model mind quite elaborate complicated purposes paper show important parts manifold code case initiating payment customer merchant assuming order completed event ordercomplete commencepayment receiveorder paymentcomplete manifold customerhandler event proceed process checkpaymentproceed checkpayment atomic begin terminatedself payshoppingcontroller activate checkpayment terminatedself proceedcheckpayment raisecommencepayment manifold merchanthandler event orderok auto process checkorderorderok checkorder atomic begin terminatedself receiveordershoppingcontroller shoppingcontroller checkorder raiseordercomplete manifold shoppingcontroller begin terminatedself raisepay paymentcompleteservicescontroller manifold servicescontroller event paymentdone process paymentservicepaymentdone paymentservice atomic begin terminatedself commencepaymentcustomerhandler activate paymentservice terminatedself paymentdonepaymentservice raisepaymentcomplete alerted means observing event receiveorder services controller arrival new order merchant handler checks order complete lower level details done immaterial basic program logic delegated atomic process typically c program accessing database information making necessary checks upon receiving atomic process confirmation order ok merchant handler raises event ordercomplete indicating phase customer ordering goods completed services controller commences payment phase raising event pay response observing event customer handler first makes sure agrees details payment procedure lower level activity performed atomic process checkpayment possibly contacting merchant handler raising event commencepayment latter observed services handler proceed perform payment lower level details actual payment transactions delegated atomic process paymentservice parametric top level generic shopping model substituted eg initially digicash used later switching made first virtual customer services shopping controller merchant manifold coordinator figure exchange messages 5 conclusions related work paper examined use controloriented eventdriven coordination mechanism namely iwim model associated language manifold modelling electronic commerce activities believe electronic commerce framework based manifold enjoys number desirable properties natural distribution hiding lower level details exploitation highperformance computational resources secure communication without compromising flexibility openess environment support approach allows formation coordination patterns electronic commerce transactions used many cases irrespective types potential sellers buyers offered services products etc coordination languages like manifold support complete decoupling time space ie agents send information without worrying anyone receives information agents receive information without worrying sent whether sender still alive thus possible introduce new players coordination protocol electronic commerce transaction enhance replace existing offered services etc furthermore use coordination technology along lines described paper orthogonal many issues relevant case electronic commerce point work combined work intelligent agents typically used offer customer support finding selecting appropriate service derive coordination protocols manifold process behaves agent dedicated perform particular task furthermore atomic processes ie processes written manifold due involvement aspects directly related coordination protocols elaborate necessary without complicating communication protocols instance checkdescr checkspecs similar processes could actually interfacing sophisticated knowledge base use constraint satisfaction techniques order reach decisions another front manifold processes seen mobile agents migrating one place another order efficient possible also exploit underlying hardware infrastructure currently designing elaborate environment electronic commerce based principles described paper paper complements initial work others use coordination models modelling electronic commerce activities point 8 describes model based linda coordination framework argued paper elsewhere 141516 vanilla linda formalism based use open public shared communication medium case 8 pagespace access either placing retrieving information almost unrestricted thus basic model inherently insecure extra devices must built top said work presented 9 prolog used model agents communicating via marketspace medium similar lindas tuplespace hand framework based secured virtue underlying iwim model pointtopoint communications broadcasting limited publicizing necessary information r linda friends iwim model coordination concurrent activities overview manifold implementation visifold visual environment coordination language communications acm 352 collaborative applications experience bauhaus coordination language coordinating distributed applets shadejada surfing market making sense web interfacing web open agentbased market infrastructure flexible architecture information commerce interdisciplinary study coordination mechanism establishing policies electronic commerce modelling activities information systems using coordination language manifold coordination models languages tr ctr peter mcburney simon parsons posit spaces performative model ecommerce proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia