volumepreserving freeform solids abstractsome important trends geometric modeling reliance solid models rather surfacebased models enhancement expressive power models using freeform objects addition usual geometric primitives incorporating physical principles additional trend emphasis interactive performance paper integrate requirements single geometric primitive endowing trivariate tensor product freeform solid several important physical properties including volume internal deformation energy volume preservation benefit several application areas geometric modeling including computer animation industrial design mechanical engineering however previous physicsbased methods usually used forms energy neglected issue volume area preservation present novel method modeling object composed several tensorproduct solids preserving desired volume primitive ensuring highorder continuity constraints primitives method utilizes uzawa algorithm nonlinear optimization objective functions based deformation energy least squares show algorithm used interactive environment relaxing exactness requirements user interactively manipulates freeform solid primitives current workstations algorithm runs realtime triquadratic volumes close realtime tricubic volumes b introduction modern geometric modeling emphasizes solid models rather surfacebased models usage freeform objects addition usual geometric primitives incorporation physical prin ciples interactive performance paper integrate four issues single setting endowing trivariate tensor product bezier freeform solid physical properties 11 background common approach representing manipulating freeform objects using boundary representation brep parametric surfaces boundary adjacencies neighboring surface patches stored explicitly using brep inherently difficult model physical attributes associated object attributes easier consider using parametric freeform solids instead surfaces difference two dimension parameter space two surfaces three solids previous systems used freeform solids eg farouki85 however parametric volumes usually used way surfaces used direct object design rather design separate deformation entities used modification existing objects explained fact boundary object interest need use freeform solids enable control happens inside object freeform deformations ffd introduced sederberg86 technique defining smooth deformation space including objects embedded within space regardless geometric representation ffd utilizes trivariate tensorproduct parametric bezier solid defined lattice control points defining parameter space unit cube deform object point local coordinates inside unit cube computed image point deformation computed using bezier control points basis functions naturally basis functions nurbs could used well griessmair89 suggested user interface based control point manipulation rather difficult tedious obtain desired defor mation direct manipulation object points instead control point manipulation suggested borrel91 hsu92 user directly moves object point system automatically computes control point configuration yielding desired point displacement constraints rap poport94 extends method approximate probabilistic point constraints nonisotropic shape parameter joy91 gave methods manipulate group control points single operation general type extension ffd presented coquillart91 defined arbitrary volume used numerical routines compute local coordinates within volume neither methods attaches physical meaning deformation simple constrained deformations described bor rel94 physicsbased modeling successful research area geometric modeling several papers terzopoulos94 welch92 kallay93 moreton92 celniker91 greiner93 presented surface design schemes based minimization energy functional subject linear point constraints location tangent vectors aware work using similar ideas freeform solids applications physicsbased modeling reconstruction tracking fang92 motion control shapiro88 modeling flexible rigid objects barzel88 relevant reference aware volume preservation 1 aumann92 gives algorithm approximates surface revolution surface surface revolution trying preserve original volume freeform solids discussed seems algorithm suited computing area volume en refers unpublished report volume preserving deformations deformations cannot everywhere locally satisfied polynomial fields except simple case pure shears closed curves surface patches given elber94 liu87 12 proposed approach use freeform solids design primitives context solid model design general specifically freeform solids one basic physical properties space cell volume size major drawback current user interaction techniques applied freeform solid design user way controlling contained volume size currently solid design opposed using volumes freeform deformations much design surfaces bounding volume independently present novel method modeling object composed several tensorproduct solids preserving desired volume primitive ensuring highorder continuity constraints linear constraints control points primitives method utilizes uzawa algorithm nonlinear opti mization objective function based deformation energy least squares lsq algorithm useful several appli cations example hierarchical ffds used chadwick89 computer animation muscles similar effect could achieved combination point displacement constraints smooth modification desired volume size algorithm useful industrial design basic functional requirements automatically obeyed without imposing limitation creativity designer object material known volume preservation means weight preservation hence attractive mechanical engineering applications engineer designs part assembly preservation volume element objects enables us keep required proportions volumes weights object parts obviously simple scaling object order achieve desired volume possible due presence point location continuity constraints algorithm uses bezier solids arbitrary orders underlying mathematical definition freeform solid primitive bezier solid known orders completely specified control points input algorithm consists desired object form set primitives defined control points configurations desired primitives volume sizes set linear constraints control points implied continuity requirements primitives imposed directly user control points configurations either given directly user control point manipulation computed point displacement constraints specified direct solid manipulation borrel91 hsu92 algorithm computes control point configuration closest given one deformation energy minimization least square sense deformed primitives contain volume given sizes obeying linear constraints algorithm automatically guarantee boundaries selfintersect note global volume given freeform cell preserved volume object embedded within cell local subcells approach introduced finite element method rubber type terials avoid complexity penalty approach bercovier81 use duality argument deal constraint based uzawa algorithm nonlinear programming arrow58 ciarlet88 special measures taken order endow algorithm realtime performance current workstations utilize fact volume size actually depends boundary surfaces deformed primitive hence volume size computation done subset control points inside points interest user well objects geome try required physical computations object tear strength deformation energy inside control points computed outside points using 3d variant coons surface formula energy computation required prevent general crossing parametric boundary intersection caused modeled objects interactive setting algorithm relaxes accuracy requirements object manipu lation computing accurate solution realtime performance longer essential technique gives user feeling volume preserved interaction although work limit method description bezier solids easily adopted common definitions freeform solids example nurbs restriction mathematical definition solid defined linear combination control points paper organized follows section 2 gives necessary mathematical notations section 3 formalizes mathematical problem involved section 4 explains detail compute size volume enclosed tensor product bezier solid partial derivatives volume size function section 5 explains represent continuity constraints section 6 explains compute energy required change tensor product bezier solid one control point configuration another energy derivative section 7 presents numerical algorithm used solve mathematical problem section 8 describes implementation results notations introduce formal mathematical notations used rest work tensor product bezier solid defined using set control points p ijk 2 r 3 image parametric point u v w unit cube nw bernstein polynomial defined denote x z coordinates control point p x ijk respectively denote volume solid primitive defined set p control points v olumep denote v olumep p vector whose components partial derivatives abc abc p z abc every triplet abc denote energy transformation bezier solid defined configuration q control points one defined configuration p control points energyp gamma q denote qp vector whose components partial derivatives abc abc p z abc denote p column vector control points bezier solids system 3 problem statement general problem handle finding control point configuration satisfies constraints linear volume results object close possible given one change object represented two ways simpler sum squares distances original control point positions new ones second energy required get original object new one section formalize problem set mathematicalrequirements target control points configuration satisfy denote distp q distance two objects resulting control points locations p q stand using energy approach using lsq approach case objects modeled directly original objects usually close desired final ones case distance measure lsq since want resulting object control points close original ones shape object incur minimal change physicsbased modeling use original object element initial state deform applying linear constraints minimizing energy resulting object simulates behavior elastic material internal pressure initial control point configurations specification constraints obtained method including direct control point manipulation direct manipulation points vectors inside object resulting constrained minimization problem given control point configuration q representing single trivariate primitive set corresponding volume vn matrix c representing linear constraints control points find new control point configuration following holds ffl p solution min p 0 ffl v olumep desired volumes v could initial volume sizes number example smooth variation desired volumes used dilating object animations 4 volume function volume preservation algorithm requires computations v olumep v olumep p show analytically compute exact volume size tensor product bezier solid show computation volume size represented scalar product two vec tors one whose components multiplication coordinates solids control points second one whose components based bezier basis functions therefore computed offline combination orders basis functions 41 computing volume size volume specified threedimensional function f u v w defined unit cube z 1z 1z 1jf dudvdw jf determinant jacobian matrix case f given equation 1 exam ple entry first row column jacobian matrix du derivative bernstein polynomial order n expressed scaled difference two bernstein polynomials order du convention b 0 b denote du similarly v ijk w ijk determinant jf written det ijk ijk ijk ijk ijk ijk ijk ijk expanding obtain ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk ijk since determinant multylinear operator due structure summations write ijk lmn lmn p z ijklmnopq new index notation denote determinant equation 4 det u v w denote z 1z 1z 1det u v wdudvdw since integral linear operator volume written ijk lmn p x lmn p z let p column vector indexed containing terms form p x lmn p z opq let c column vector size whose components c equation 5 expressed scalar product p c vector c depends orders bezier basis functions hence computed every practical order combination number practically useful order combinations small computing elements c via symbolic integration complicated even relatively small bezier orders therefore compute using gauss numerical integration press88 gives exact result since integrated functions polynomials component c computed r gauss weights corresponding points x r unit terval number sample points dimension determined according order basis function dimension description simplified ease explanation actually volume size depends boundary surfaces stokes formula gib son44 bezier volumes boundary surfaces influenced inner control points completely neglected computation volume size fact computing elements c vector find index ijklmnopq containing coordinates inside point value c ijklnmopq zero practice accelerate volume computation let index run values ijklmnopq define outer control points 42 computing volume deriva tive volume preservation algorithm requires computation vector v olumep p whose components form v olumep p r abc r x z example abc ijk lmn lmn p z abc since every ijk 6 abc partial derivative vanishes get abc lmn lmn p z 5 constraints section explain different linear constraints imposed control point configuration required order achieve desired geometric physical results 51 continuity constraints continuity constraints primitives object essential object design continuity order k c k two adjacent volumes defined 0 1 u direction achieved following holds every v case two adjacent primitives defined control points configurations p q get since derivative linear operator get x ijk ijk therefore 1p ijk hold v necessary sufficient condition 0q ijk thus getting set n v nw linear equations derivative bernstein polynomial order given equation 2 l 0 6 0 l 1 6 0 number k b nu holds fore c k continuity conditions adjacent bezier volumes expressed set n v nw linear equations k layers control points volume adjacent border common cases conditions another kind continuity constraint elements geometric continuity general parametric continuity geometric continuity yields nonlinear constraints difficult express solve therefore use work details geometric constraints see bercovier93 52 constraints following types constraints easily handled addition continuity constraints ffl fixing point given location resulting equations p r constant ffl attaching two points together resulting equations p r ffl preserving given distance points 53 summary general linear equation variables p expressed x vector representation c 0 denote c matrix whose rows coefficients c linear equations p column vector control points constraints achieved c 6 energy function energy computation deformation bezier primitive one control point configuration another required algorithm show computed using matrix whose elements depend order bezier basis functions 61 computing energy energy deformation unit cube specified 3d vector function f usually terzopolus94 described z 1z 1z 11fi ff ff fi material property constants write z 1z 1z 1 f dudvdw 2 ff z 1z 1z 1 f dudvdw z 1z 1z 1 f j dudvdw z 1z 1z 1 f j dudvdw case deformations body defined one bezier point configuration body defined another one hence deformation defined trivariate bezier function distances control points two configurations serving control point lattice using p new control points write ijk ijk consequently ijk lmn z 1z 1z 1 f x z ijk lmn ijk lmn lmn z 1z 1z 1 let du matrix indexed ijk lmn defined z 1z 1z 1 define dv dw similarly let px column vector components p x ijk similarly define p p z z 1z 1z 1 f x denote duv matrix mixed derivatives given z 1z 1z 1 define duw dvw similarly duv z 1z 1z 1 f f x elements three matrices also computed numerically substituting matrices equation 7 finally let matrix whose rows are2 let p column vector concatenating elements depend orders bezier basis functions hence computed exactly every practical order combination using gauss quadrature 62 computing energy deriva tive minimize deformation energy algorithm requires computation vector energyp p whose components abc r x z easy see example abc r lmn since every rijk 6 xabc partial derivative energyp according p x abc vanishes 7 uzawabased volume preservation algorithm section explain detail algorithm use solving problem defined section 3 71 lagrangian multiplier method convert constrained minimization problem subject constraints unconstrained minmax problem define new functional l called lagrangian associated problem fl vector size number linear constraints vector called lagrange multipliers vector called lagrange multiplier constraint called lagrange multiplier constraint c j stands row j c explained ciarlet88 constrained minimization problem reformulated finding solution unconstrained minmax problem defined necessary condition triplet p fl solution vanishing partial derivatives means cj denotes columns c multiply points p 72 solution method volume derivative expression nonlinear hence usual direct methods ldl gauss elimination cannot used solve use version uzawa method tailored problem ciarlet88 uzawas method iterative method allowing one solve inequality constrained minimization problem replacing sequence unconstrained minimization problems since inequality constraints use simpler version given problem iteration starts arbitrary values 0 2 r n start 0 initial value p 0 use q initial guesses especially suitable interactive setting expected q change much constraints satisfied sequence triplets defined means following iterations algorithm runs constraints satisfied number iterations exceeds given limit pseudocode algorithm shown figure 1 initial values fl set lines 1 2 line 3 computes current volumes v line 4 initializes loop counter k main outer loop algorithm performed lines 510 loop iterates constraints satisfied stopping limit number iterations reached iteration system equation 8 solved line 6 current value fl updated using tuning parameters ae 1 ae 2 respectively lines 78 line 11 returns p answer choice tuning parameters ae 1 ae 2 used equation 10 equation 11 difficult practical issue using uzawas method type problem best range values ae case found best use ae energy distance function ae least squares distance function general larger aes faster convergence becomes risk nonconvergence due overstepping convergence point increases pseudocode one way solving inner problem shown figure 2 inner problem solving equation 8 p given nonlinear problem figure 2 shows solve using successive approximation p iteratively compute new values p based equation 8 distance two successive iterations small enough dist several possible techniques solving set nonlinear equations used well usually solving physicsbased problems lagrange multipliers methods additional variables added multipliers physical mean ing case one interpret inner hydrostatic pressure keep volume given value looking value pressure uzawa outer step seen augmenting diminishing hydrostatic pressure convergence tuning done parameter ae 1 observation relates method socalled mixed finite element methods stokes problem hughes87 case constant pressure small volume element algorithm implemented c unix using sgigl graphics motif user interface interface lets user work number bezier primitives order selectable user initial state primitives displayed unit cubes cubes whose volume 1 control points primitive selected manipulated 3d implement direct manipulation boundary surface points since immaterial problem tackled primitives whole selected well manipulated constraints inserted via motifbased user interface type constraint set direct point manipulation points surfaces involved chosen two methods object design first method volume preservation turned interaction performed arriving desired configuration second method turned whole interaction process first option necessary since high orders performance fully interactive due complexity computations interactive stage cannot satisfy volume linear constraints simultaneously user choose one preferred three sets parameters algo rithm parameters influence volume preservation interaction user drags mouse parameters solving volume constraint leaving mouse parameters global computation solving constraints typically interaction mode iteration limits lower convergence tolerances larger final mode global computation tolerances usually increase iteration limits larger ae used smaller different sets parameters cause divergence algorithm since interaction current configuration close solution satisfying volume constraint algorithm needs fewer iterations reach solu tion parameter sets tuned using dialog box user manipulate scale widget defines desired volume chosen primitive volume preservation algorithm performed repeatedly scale dragged triquadratic freeform volume design fully interactive typical movement single control point reach final volume tolerance 10 gamma4 final distance tolerance 10 gamma3 requires 15 outer iterations 12 inner iterations takes 3 seconds silicon graphics workstations mips r 4000 processor interaction enough set tolerances 10 gamma2 case solution completed realtime tricubic freeform volume reach tolerances requires 2530 outer itera tions one inner iteration takes 15 seconds tolerances set 10 gamma2 interaction solver takes 3 seconds hence tricubic interaction could done realtime using faster processor running times course dependent number linear constraints far current configuration solution designed using system amphora modeled single primitive phone modeled three tricubic primitives conditions parts designed volume modifications create right proportions keeping desired shape constraints continuity 9 conclusion presented approach modeling freeform solid primitives preserving volume contained within primitive satisfying continuity constraints primitives careful tuning allows uzawabased nonlinear optimization algorithm fully interactive triquadratic volume elements almost interactive tricubic elements algorithm possesses several possible applications computer animation industrial design mechanical en gineering broadening scope physicsbased geometric modeling acknowledgments daniel youlus participated early part work thank naftali tishby fruitful comment reviewers detailed comments r studies linear nonlinear programming two algorithms volumepreserving approximations surfaces revolution modeling system based dynamic constraints finite element procedure nonlinear incompressible elasticity minimization constraints composite bezier curves deformation ndimensional objects simple constrained deformations geometric modeling interactive design deformable curve surface finite elements layered construction deformable animated characters introduction numerical linear algebra optimization sculpturing tool 3d geometric modeling symbolic numeric computation curve interrogation reconstruction smooth parametric surfaces unorganized data points curves surfaces computer aided geometric design hierarchy geometric forms curvature continuous blend surfaces deformation solids trivariate bsplines direct manipulation freeform deformations finite element method utilizing parametric hyperpatch methods modeling display free form solids constrained optimization surface design algorithms computing area volume functional optimization fair surface design numerical recipes c interactive design smooth objects using probabilistic point constraints motion interpolation optimal control dynamic nurbs geometric constraints interactive sculpting computer graphics tr ctr gershon elber multiresolution curve editing linear constraints proceedings sixth acm symposium solid modeling applications p109119 may 2001 ann arbor michigan united states stefanie hahmann basile sauvage georgespierre bonneau area preserving deformation multiresolution curves computer aided geometric design v22 n4 p349367 may 2005 jin huang xiaohan shi xinguo liu kun zhou liyi wei shanghua teng hujun bao baining guo heungyeung shum subspace gradient domain mesh deformation acm transactions graphics tog v25 n3 july 2006 victor brian zordan bhrigu celly bill chiu paul c dilorenzo breathe easy model control simulated respiration animation proceedings 2004 acm siggrapheurographics symposium computer animation august 2729 2004 grenoble france wolfram von funck holger theisel hanspeter seidel vector field based shape deformations acm transactions graphics tog v25 n3 july 2006 victor b zordan bhrigu celly bill chiu paul c dilorenzo breathe easy model control human respiration computer animation graphical models v68 n2 p113132 march 2006 gentaro hirota renee maheshwari ming c lin fast volumepreserving free form deformation using multilevel optimization proceedings fifth acm symposium solid modeling applications p234245 june 0811 1999 ann arbor michigan united states christoph hoffmann jaroslaw r rossignac road map solid modeling ieee transactions visualization computer graphics v2 n1 p310 march 1996