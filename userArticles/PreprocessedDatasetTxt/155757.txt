templatedriven interfaces numerical subroutines paper describes set interfaces numerical subroutines typing short often oneline description allows one solve problems application domains including leastsquares data fitting differential equations minimization root finding integration approach templatedriven programming makes easy build interface simple one takes hours construct days suffice build complex program describe b introduction numerical subroutine packages one oldest effective approaches software use experts familiar good library rapidly combine tested robust components useful software effective experts however large libraries difficult casual user suppose instance programmer desires find root nonlinear equation usually entails looking appropriate routine modifying sample program compiling program links appropriate libraries testing possibly debugging code interpreting output find answer process easily take hour two rice 1989 p 2 summarizes problem user must write code target programming language creates input output data structures invokes procedures code usually lengthy compared invocation library procedures many solutions proposed problem gill murray picken wright 1979 describe principles constructing subroutine libraries easy use large environments matlab provide elegant interfaces sophisticated software libraries environments excellent expert novice users require many programmeryears build wish make easy individual programmers quickly build effective interfaces software libraries paper describe set programs provide interface port subroutine library described fox 1984 program solves popular form common numerical prob lem instance dialog first find root function sinx interval 3 4 find root x interval 01 09 maria fernandez currently department computer science princeton university princeton nj 08544 electronic addresses jlbresearchattcom mffprincetonedu bwkresearchattcom nlsresearchattcom dollar sign system prompt behind scenes root program uses template write compile execute fortran program calls appropriate subroutine refer approach templatedriven programming undertook construct similar interfaces parts port library following design goals interfaces accessible novices yet powerful enough convenient experienced users problem specifications succinct interfaces easy build hours dozen lines code day two hundred lines paper illustrates technique several major parts port library section 2 introduces templatedriven approach building interfaces section 3 describes leastsquares data fitting detail section 4 surveys several problem domains section 5 describes complex problem domain differential equations applications templatedriven programming described section 6 conclusions offered section 7 2 templatedriven programming section introduce templatedriven approach building interfaces studying implementation root program saw earlier program calls port function dzero find zero function specified interval documentation function libraries illustrates use function small example generalize example template program calls double precision dzero external f stop double precision function fx double precision f x return template three parameters exp lo hi surrounded atsigns root program reads three arguments command line substitutes template produce fortran program compiles executes fortran program writes answer straightforward implement approach many systems course tailored implementation computing environment numerical routines port library call routines fortran programs interfaces implemented awk body awk implementation minimal root program begin dotemplateroottplt junkf subarr systemf77 junkf lport 2junkerr aout exit aho kernighan weinberger 1988 describe awk programming language first three lines read commandline arguments fourth line calls dotemplate function instantiate template roottplt fortran file junkf fifth line compiles program executes object code writes answer dotemplate function passed name template file name output file substitution array namevalue pairs trivial implementation function dotemplatetemplatefile outfile subarr getline templatefile subarr print 0 outfile appendix describes complete function instantiating templates minimal program correctly handles correct programs implemented 9line template 14 lines awk complete root program careful error checking command line precisely three arguments fortran compile successfully report error messages complete root program including template code error checking template interpretation requires 40 lines lines library template functions root program easy implement templatedriven awk program hard implement directly fortran one possible fortran implementation parses expression interprets run time another choice write compile fortran program within fortran neither choice particularly appealing implementation parcels jobs right tools awk program interprets template unix shell calls fortran compiler compile expression port library supplies effective solver although weve used tools convenient home system similar tools could used environments implement essential ideas simple concise interfaces use templatedriven programs 3 leastsquares regression datafitting problem given set x pairs assumed modeled equation vector reals goal find vector p minimizes sum squares residuals min library offers several routines various forms task based excellent algorithm dennis gay welsch 1981 widely known nl2sol provide access algorithm program called l2fit least squares fit illustrate program file contains data traveling salesman tours point sets randomly distributed unit square x value number points value length certain tour points reason believe tour length grow c real numbers synonyms model type following command ten vax8550 cpu seconds later program writes computed values b c alphabetical order second line side effect computation l2fit produces troff output file l2fitout displayed figure 1 command line l2fit troff s06 lxy abxc datatourlend least squares regression type unweighted input data file datatourlend input expression abxc canonical parameters final 0630579 0733034 0499881 standard errors 012083 00166733 000240624 algorithm termination x relative function convergence 100 1000 100001050 circles input xy pairs line least squares fit 100 1000 10000 circles residuals f xp figure 1 l2fit output tsp data text top figure 1 summarizes computation command line typed user repeated indispensable searching pile l2fit runs case lxy flag requests graphs plotted logarithmic x scales data file datatourlend two flags added command line shown earlier prepare l2fitout file inclusion troff document troff applies appropriate document production programs s06 shrinks graphs 60 default size final values parameters displayed along standard errors multiplying 196 gives 95 confidence intervals top graph displays input data fitted function residuals bottom graph quite wellbehaved appear decrease value x grows roughly normally distributed two graphs together give us confidence tour length grows next command therefore new l2fitout file included paper shows computed values b quite close old values standard error decreases 0121 0044 b decreases 00167 00010 graphs essentially unchanged example typical users view session l2fit l2fit provides following services behind scenes uses template write fortran program calls appropriate port routine compiles program checks fortran compilation status find errors input expression executes program reads interprets output leastsquares routine values extracted directly others require processing instance standard errors square roots diagonals covariance matrix performs certain straightforward data processing tasks checking line input file contains two numeric fields counting number parameters expression determine large make vector p sorting x values draw function output graph uses another template prepare summary page l2fitout template uses troff language typesetting grap language graphical display data described bentley kernighan 1986 performs minor translations among various languages used variable input expression replaced p1 fortran program computed value grap output fortran exponentiation operator grap operator eqn operator sup properly exchanged grap log function returns baseten logarithm replaced natural logarithm function mechanizing job makes much easier faster use leastsquares fitting routines port importantly l2fit supports better data fitting automatically generating graphical displays along numerical answers figure contains second example l2fit output case x value number objects search tree value corresponding average number nodes visited search theory suggests logarithmic growth one possibility try functional form ten observations x value w flag calls weighted regression x value assigned mean value together weight inversely proportional sample standard deviation x primary graph shows best fit equation x accurate description data note small variances larger x values give greater weight fit better region weighted residuals reasonable dispersal means show great deal structure data computed parameters little meaning pictures show model poor second experiment fitting model c data shows data accurately described 192 260x 039 appendix describes l2fit detail l2fit unix system filter may combined tools system instance one may desire fit data exponential model accomplished command command line l2fit troff s06 w lx ablogx 1 1 datakdnodesd least squares regression type weighted input data file datakdnodesd input expression ablogx canonical parameters final 15621 0281858 standard errors 0484768 00440454 algorithm termination x relative function convergence 100 1000 10000 1000001418 circles input xy pairs line least squares fit 100 1000 10000 100000 5circles weighted residuals f xpstddevx figure 2 l2fit output search tree data mathematical model underlying leastsquare regression assumes residual errors independently chosen normal distribution errors normal logarithmic scale however one take logarithm variables performing regression command print log1 log2 datafile l2fit lxy awk program takes logarithm fields input file awk programs useful many common tasks data analysis filtering subsets data reexpressing data people use l2fit perform single fit single data set extreme built scripts perform dozen l2fit regressions combine single troff output file single program cover possible cases data fitting l2fit missing desirable features instance one might want specify fortran routine function fit underlying nl2sol program easily handle functions many variables l2fit interface restricted single independent variable x interested users use l2fit similar problems flag leave temporary files may used templates solving complex problems appendix describes implementation l2fit detail simple version l2fit performs leastsquares regression calculate parameters prepare graphical summary implemented 50line awk program 40line fortran template complete l2fit 330line awk program uses 45line fortran template also uses 60line troff grap template produce output 4 survey problem domains section survey templatedriven interfaces port routines several problem domains start programs use format lower bound upper bound int program performs numerical integration numerical approximation 1 e 1x dx default error tolerance adjusted input flag saw root program earlier invocation find root x interval 01 09 want insight function plot interval command show x exp1x1logx 1 9 produces file showout contains picture like show many options l2fit logarithmic scales output suitable troff input saving temporary files text labels etc well option changing number points function plotted sophisticated version show plot multiple equations x data files related smooth program computes smooth function input x data set output set x smoothx pairs produces picture smoothed function sideeffect purposes numeric function values useful plots feval program function evaluation computes values feval given single fortran expression reads sequence x values input prints corresponding output values programs unix system input terminated typing controld feval program paper designed used interactively min program performs multivariate minimization region specified upper lower bounds variable first apply favorite univariate function interval variables minimized named b c etc l2fit ranges given inequalities b5 c10 also work first output value real value function mini mized second value function real substantial input file using long format field given separate line problem 5 hock schittkowski 1981 min first four lines comments fifth line contains expression minimized next two lines give bounds last two lines specify starting values two variables file named hock5 invoked command five programs sketched section straightforward implement templatedriven awk programs share library awk functions contains 150 lines code shorter implementation l2fit also uses library beyond library code feval takes 6 lines awk root int implemented lines including 10line fortran templates show takes 110 lines 30line troffgrap template min takes 180 lines 50line fortran template 5 differential equations simple problems domains seen far simple descriptions turn differential equations elementary problems difficult describe problem descriptions complicated even though often rely heavily conventions abbreviations appropriate domain goal section present details programs rather give flavor succinct descriptions complicated mathematical objects start considering solution ordinary differential equations odes explicit form interval start stop f vectorvalued function time solution vector xt given initial conditions xt start problem typically unique solution exam ple ode system solution ode c solved numerically command odes vars sc ode sc cs x 0 1 0 1 interface uses odes solver port library fields command grouped namevalue phrases phrase consists one fields usually identified first field phrase odes name underlying numerical software also name interface vars assigns names c dependent variables ode determines components f ode system solved case x initial conditions dependent variables xt start time interval command converted 60 lines ratfor fortran preprocessor dialect 140line awk program awk script ode interface initially written couple hours additional hours added control initial time step error recovery etc solve complicated problems considering broad class partial differential equations pdes one space variable semilinear divergence form x ut x vector pde variables f vectorvalued functions arguments etc boundary conditions form b l b r vectorvalued functions start considering heat equation temperature variable equation time range space range 0 x 1 initial condition t0 boundary conditions tt initial boundary conditions conflict solution pde approximately erfcx2t thus default initial timestep e e machine rounding error roughly 510 9 vax archi tecture first plot unit spike width roughly evolution system final solution shown 105the code automatically gone 2 mesh points 33 enough model nasty function first time step default 01 accuracy solution finally relaxes equilibrium value 1 x time needed graph produced command sketch fields command describing phrases poss program name partial ordinary differential equations space smooth splines name derived post partial ordinary differential equations space time vars assigns single pde variable name names must upper case af equations given form f letter specifies differential x txtt states partials respect x bc specifies boundary conditions left right separated character left condition tt right tt phrase 0 1 gives range next phrase gives range x u specifies initial condition u0 underlying port software generates necessary jacobian information partial derivatives f bc respect dependent variables u u etc finitedifference methods thus user need provide information crucial success interfaces specifying partial derivatives cumbersome users user needs exact instead approxi mate derivatives interface uses maple compute symbolically char et al 1988 describe maple although description heat equation less transparent naive user much succinct traditional approaches problem specification translated 170 lines ratfor awk program performs translation 220 lines long originally written afternoon several additional halfhour sessions since added bells whistles able set storage limits change integration methods built interfaces several kinds differential equation solvers software underlying poss adaptive pde solver one space variable based adaptive mesh spline fitter fixed mesh pde solver post dynamically determines mesh use obtain solution desired accuracy another program solves pdes using fixed mesh based extension post software another interface uses continuation code solving problems become difficult parameter changes interfaces solve stiff ordinary differential equations implicit form iode solver port library benvenuti et al 1991 use interfaces solve number problems including driftdiffusion energy balance fluid dynamics models semiconductor device behavior experiment built significantly sophisticated interface port pde solvers figure 3 describes pde four variables used semiconductor device modeling graciously supplied bill coughran specification uses notation dconx denote conx allows pass complete information partial derivatives underlying solver whereas earlier code always used finitedifference derivatives completeness figure 4 shows pde described original interface together help unix shell naming parameters program processes description figure 3 constructed using language development tools described kernighan pike 1984 chapter 8 serves interface three different related port routines handling odes implicit odes pdes program implemented 160 lines lex lexical analysis 1070 lines yacc parsing 2100 lines c 250line fortran template files could probably shortened half coding style used awk programs addition handling syntactic structure shown program performs extensive error checking instance identifies line number source file fortran syntax errors interface also ensures variables equations appropriate type equation also gives useful error messages earlier interfaces may pass faulty equations fortran tem plate errors reported compiler problem pde pdevar pot con temp vel potential concentration temperature velocity precision double double precision solution error 1d2 1d2 scaled boltzmanns constant scaled effective mass scaled mobility scaled elementary charge scaled ambient temperature scaled saturation velocity voltage applied right scaled background doping init pot logabs n vx2d2 init con n init temp t0 init vel 0 figure 3 description pde tradeoffs awk yacc implementation languages awk best suited fast implementation particularly execution speed resulting product primary concern awk convenient string processing symboltable management also good handling keyword value pairs weak parsing anything complicated contrast yacc intended languages richer grammatical structure especially nested constructions yaccbased program semantic actions implemented c also execute much faster error detection recovery also better price using yacc implementation time significantly longer 6 templatedriven programs templatedriven programs apply far beyond interfaces numerical functions obvious extension nonnumeric functions given efficient sort function make sort pipe uses template c program templates could also provide pipelike interfaces functions domains regularexpression pattern matching random number generation cryptology data compression many applications however effective call function single c program c concentration scaled boltzmanns constant scaled effective mass scaled mobility scaled elementary charge scaled ambient temperature scaled saturation velocity scaled background doping voltage applied right taupm mu t0qt kp15muc poss vars pctv af kp bc plogabsn cn tt0 vx errpar 1e2 1e2 figure 4 poss description pde figure 3 without using template templates effective object must processed compiler examples seen far paper deal fortran expressions possible build interpret expression tree run time easier pass expression compiler via template study program uses template study runtime cost various c expressions template repeatedly evaluates expression tight loop include mathh double d1 d2 d3 d4 d5 int n exp complete schema also includes declarations initializations variables type int float interactive session resulting ctime program set 40 micsloop 04u 00s 0r 300 micsloop 30u 00s 4r 410 micsloop 41u 00s 5r first line uses ctime keyword set assign variables d2 d3 nonzero values subsequent pairs lines contain expression typed user followed averaged cost output time command timing program means perfect optimizer could move computation timing loop ignores caching nevertheless found program useful limited domain apart applications though ctime program illustrates power templatedriven pro gramming complete programs lines 20 lines template 20 lines primary awk func tions 20 lines supporting awk functions copied programs template instantiation error message reporting wrote ctime program couple hours converted fortran ftime ten minutes couple hours built version times c constructs across half dozen types machines easily reached network home machine templatedriven style made easy construct variants 7 conclusions interfaces described provide easy access major areas port library aimed handling common cases cover high percentage users high percentage total cpu time used port routines although many users novices pleasantly surprised numerical experts also seem make extensive use interfaces templatedriven interfaces easy build hours days dont require weeks investment time building one usually returned interest first applications believe building interface easily pay numerical routine tested debugged quality software improved result interfaces available quickly answer questions functional behavior time complexity routines generate broad short test cases code several interfaces available netlib receive index collection instructions get want type echo send index templates mail netlibresearchattcom semisymbolic nature awk interfaces changed way build numerical routines fortran example solution twodimensional pdes coupling variables important variables coupled nonlinear lowertriangular manner various iterative methods may costeffective compared default direct factorization schemes interface could ask user state whether problem triangular adds complexity user may lead errors easy awk program determine whether given expression contains specified variable thereby compute triangular structure equations solved programs describe operate independently batch programs interactive cooperative elegant way take output one another integrating interfaces philosophy scientific computing tools proposed coughran grosse 1989 remains important open problem acknowledgments grateful helpful comments rick becker bill coughran eric grosse colin mal lows daryl pregibon margaret wright several anonymous referees r typesetting graphs eval uation influence convective energy hbts using fully hydrodynamic model philosophy scientific computing tools adaptive nonlinear leastsquares algorithm design structure fortran program library optimization composition libraries software parts problem solving environments tr grapmyampersandmdasha language typesetting graphs awk programming language philosophy scientific computing tools design structure fortran program library optimization adaptive nonlinear leastsquares algorithm unix programming environment test examples nonlinear programming codes ctr tzvetan drashansky sanjiva weerawarana anupam joshi ranjeewa weerasinghe elias n houstis software architecture ubiquitous scientific computing environments mobile platforms mobile networks applications v1 n4 p421432 dec 1996