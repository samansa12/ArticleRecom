stability issues factorization structured matrices paper provides error analysis generalized schur algorithm kailath chun siam j matrix anal appl 15 1994 pp 114128a class algorithms used factorize toeplitzlike matrices including blocktoeplitz matrices matrices form ttt toeplitz conclusion drawn algorithm implemented hyperbolic transformations factored form well known provide numerical stability context cholesky downdating generalized schur algorithm stable direct implementation hyperbolic transformations used unstable respect algorithm analogous cholesky downdating details implementation hyperbolic transformations essential stability example illustrates instability given result contrast ordinary schur algorithm analysis bojanczyk brent de hoog sweet siam j matrix anal appl 16 1995 pp 4057 shows sta bility algorithm dependent implementation hyperbolic transformations b introduction schur algorithm popular fast method cholesky factorization square positive definite toeplitz matrix performs reliably 3 shown stable sense algorithm runs completion c computed cholesky factor ck guaranteed small paper perform similar stability analysis applies several special cases generalized schur algorithm 10 full generality generalized schur algorithm adapted factorization wide variety structured matrices analysis given primarily interest block toeplitz toeplitzblock matrices well matrices form rectangular toeplitz key notion behind general algorithm concept displacement rank 10 one significant examples cholesky factorization factor also factor r qr factorization rectangular toeplitz matrix obvious application fact solution toeplitz least squares problems explored 1 however analysis given assumes use algorithm presented 2 rather generalized schur algorithm basic idea obtain r without bothering finding q thus avoiding problems associated loss orthogonality common fast toeplitz qr algorithms method seminormal equations possibly iterative refinement used find least squares solution resulting equations weak stability result given concerning solution provided computed r kr shown done using generalized schur algorithm well algorithm 2 consequently observations concerning toeplitz least squares problems 1 adapted alternate approachthat finding r generalized schur algorithm solving seminormal equations obtain solution comparison analysis paper also made analysis schur algorithm given 3 despite major similarities conclusions work supported arpa grant 60nanb2d1272 nsf grant ccr9209349 stewartsccmstanfordedu z dept mathematical engineering universite catholique de louvain louvainlaneuve bel gium vandoorenanmauclacbe paper one important respect quite different implementation details schur algorithm less critical stability generalized schur algorithm implemented using hyperbolic transformations transformations applied straightforward matrix multiplication however reasons concerned stability approach many algorithms cholesky downdating 4 good idea downdating algorithm based transformations stable unless implemented factored form ae worth noting manner elements factors computed also important stability details found 4 correct implementation found section 3 seemingly minor difference implementation makes difference stability instability cholesky downdating schur algorithm robustit stable using either approach unfortunately generalized schur algorithm shown analogous downdating problem regard factored transformations essential stability proof stability factored hyperbolic approach given section 4 example illustrates instability approach given section 5 stability proof 1 also requires use factored hyperbolic transformations surprising since presentation 2 recasts problem form downdating problem finally section 5 comments made nature instability propagation errors essentially stable regardless implementation used difference size local errors fact error propagation stable possible show many instances instability completely destroy accuracy computed factors true even quite illconditioned problems numerical examples given support claim 2 displacement rank stable computation initial genera tors given n theta n symmetric positivedefinite matrix necessarily toeplitz define displacement 1 za strictly lower triangulara matrix zeros diagonal restriction symmetry easily relaxed allow hermitian simplicity deal real symmetric case 10 additional restriction z fast rather process multiply vector z otherwise factorization algorithm complexity 3 instead 2 addition also make two assumptions guarantee stability algorithm simplify analysis stability necessary assume kzk 2 1 otherwise repeated multiplication z magnify errors simplify analysis assumed vector multiplied z without incurring error two assumptions essentially limit z shift block shift since forms z takes toeplitz least squares problems blocktoeplitz factorization respectively assumptions reasonable even remove good deal generality second assumption essential multiplication done stable manner dont seem common examples analysis could made apply dropping specific typical examples z square toeplitz form rectangular toeplitz matrix choose z would require zb block shift ones subdiagonal replaced identity matrices significance analysis algorithms based displacements involving z zb well known symmetric toeplitz matrix normalized ones diagonal indefinite rank two matrix sigma vectors u v referred generators clearly matrix uniquely determined generators performing operations genera tors rather directly allows efficient 2 algorithms toeplitz systems assume za satisfying previously specified restrictions belongs class positivedefinite matrices da defined equation 1 rank ff clearly da decomposition form sigma p phi q take u 11 v 11 scalars u 21 v 21 column vectors size respectively section 3 give summary general algorithm details many special cases found 10 first since numerical stability overall factorization depend stability process finding generators briefly discuss done stable manner already seen generators toeplitz matrix found trivially error symmetric blocktoeplitz matrix process slightly complicated errors initial generators cause problem stability generators toeplitz least squares problem also found reliable manner minimal amount computation process stable general numbers p q correspond respectively number positive negative eigenvalues decomposition cannot obtained trivially toeplitz blocktoeplitz case obtained eigenvalue decomposition gaussian elimination symmetric pivoting strategy obtain ldl factorization displacement 7 course computing full eigenvalue decomposition slow overall algorithm absence specific knowledge form generators take case computed 2 complexity computing ff steps ldl decomposition give set generators without destroying 2 complexity algorithm however important note truncating decomposition pivoting scheme chosen critical stability decomposition carried completely fact bunchparlett strategy backward stable method computing ldl well known 7 stability bunchkaufman procedure established recently 9 however simple verify numerically 178 constant chosen minimize element growth symmetric pivoting ffl 0 small leads large error two steps bunch kaufman approach used obtain rank 2 ldl factorization bunch parlett procedure problem reason difference found looking sensitivity scalar schur complement truncated two algorithms analysis pivoted low rank cholesky factorization highlights relevance schur complement sensitivity case semidefinite matrices given 8 issues indefinite matrices extension complicated pivoting strategies direct result summarized follows backward stability guarantees computed schur complement two stages factorization process small large errors incurred dropping terminating factorization rank deficiency ensures exact value schur complement zero highly sensitive perturbations original matrix backward error cause computed value become large shown 8 sensitivity schur complement depend size elements l careful scrutiny two pivoting strategies shows although backward stable give bounds norms schur complements bunchparlett gives bounds elements l however digression included completeness show process obtaining generators always done stable fashion practice generally simpler means obtaining generators toeplitz matrices obtained computation general factorization method would needed rare case zero structure makes choice generators obvious least easy compute example case general nontoeplitz matrices ff equals two class matrices broader class toeplitz matrices da always zero structure makes process finding generators trivial 3 generalized schur algorithm assuming managed find generators structured matrix apply generalized schur algorithm find factorization much power generality approach due fact straightforward intuitively clear generalization schur algorithm little essential difference cases 2 since former case well known presentation latter case kept brief leisurely description found 10 since z strictly lower triangular 0 follows 2 transformation j j find jg also set generators follows immediately since g j sigmaj equation 2 positivity see means transformation j 1 form orthogonal applied g give u 22 ju therefore possible take ae gammav 11 u 11 u 22 note j j 2 j 1 g also set generators proven always find set generators first column one nonzero element generators said proper form generators useful equation 2 implies first row different first row g sigmag generators proper form means theta u 11 clearly first row cholesky factor theta let theta schur complement see theta theta means merely postmultiplying first row generators theta z give generators schur complement additional unitary hyperbolic transformations used introduce zeros second elements vectors obtain first row cholesky factor schur complementthe second row cholesky factor process continued recursively obtain complete cholesky factor stage positivity schur complements guarantee appropriate ae found resulting algorithm hyperbolic transformations implemented stable form matlab c code follows function cgschurgnpq i1n gp1i1ns cg1pp1i1n mentioned section 1 computation elements factors significant stability also important leading element first generator computed separately shown analysis 4 apply implementations although algorithm given suffice find factors block toeplitz matrix significantly different approaches given literature numerical properties different block oriented perspective blocktoeplitz factorization found 6 2generator case matrix j 2 zeros first elements generators except first almost uniquely defined constraints x sigma possible variation row h multiplied gamma1 case generators obvious example possibility applying arbitrary hyperbolic transformation acting last generators appropriate zeros introduced leading elements paper show j formed block diagonal orthogonal matrix appropriately implemented hyperbolic transformation algorithm stable 4 stability analysis stability analysis schur algorithm toeplitz factorization presented 3 analysis broken two parts one shows local errors propagate algorithm one bounds local errors propagation errors essentially generalized schur algorithm problem bounding local errors slightly difficult first modify results 3 apply general algorithm later develop new inequalities complete analysis end kth stage algorithm let generators stored computer u 22k u 2k using matlab c g kz defined g kz 1 also let g k g kz generators would result exact computations computed generators satisfy ffl machine precision fflf k errors incurred locally computing new form generators step k use orthogonal hyperbolic transformations since possible g 1 already proper form assume treat errors appear separately errors summing equation grouping terms related top rows g k g kz left hand side gives g g simplifying terms cancel right hand side obtain r r r using find displacement r r applying equation 2 gives r sum k reduced noting z shows bound errors computation initial generators local errors algorithm stable errors initial generators problem since generators obtained backward stable manner using bunchparlett pivoting compute ldl typically direct fashion since methods obtaining generators may vary analysis error bounds follow ignore source error concern effects local errors due unitary hyperbolic transformations local errors given expression bounds errors produced transformations depend norm generators essential bound generators theorem 41 generators computed applying sequence plane rotations hyperbolic transformation satisfy f 1 two generators u 1 v 1 orthogonal transformations performed generators step k gamma 1 ae ae u taking frobenius norms gives see final inequality true let look minimum value 0 x 1 easy see f assumes lower values point possible maximum since plane rotations dont affect norm generators since kzk 2 1 inequality expanded recursively give finally arbitrary positive semidefinite rank factorization follows fact frobenius norm squared equals sum squares singular values standard inequality relating vector 2norm vector 1norm completes proof theorem complete stability analysis needed show orthogonal hyperbolic transformations produce local error fflf k proportional norm generators note necessarily refer norm generators prior transformation fact case hyperbolic transformation necessary look norm one generators produced hyperbolic transformation error analysis hyperbolic transformations given 4 result transformations applied factored formp ae deltau deltav mixed error vectors c deltau c deltav satisfy deltau c deltav f f ffl unit roundoff addition result 11 concerning application plane rotations particular exist orthogonal u 2k u 2k f f let theta clearly also let deltau c deltav error bounds 5 7 used show c deltau c deltau c deltav c deltav standard basis vectors gives theta deltag k corresponding bound since theorem 41 shows get bound local error ip f 3 see gammap f 5 unstable implementation last section stability generalized schur algorithm proven case hyperbolic transformations applied factored form already noted implementation unique many transformations introduce needed zeros generators applied multiple ways obvious example application hyperbolic transformation factored form 4 versus direct multiplication approach turns factored form hyperbolic transformation crucial stability algorithm see take generators small j generators correspond illconditioned 4 schur algorithm hyperbolic transformations applied factored form used small error achieved independent size j however hyperbolic transformations multiplied directly backward error depend significant extent j see note example gives two steps generalized schur algorithm following generators fact example obtained performing reversal algorithm equation 12 construction matrix equation 11 really necessary since essential mechanism instability represented equation 12 construction merely removes objection whether generators 12 corresponding displacement rank 2 matrix could actually occur factorization displacement rank 4 matrix one might argue instability shown applying schur algorithm equation 12 really relevant stability factorization displacement rank 4 matrices since matrix equation 11 corresponds four linearly independent generators reduce equation 11 two steps schur procedure objection dismissed table 5 shows dependence errors j necessary go illconditioned matrices demonstrate significant loss accuracy increase backward error factor 10 5 seems reasonable backward stable algorithm yet increase error quite modest unstable algorithm condition number increased factor turns primarily result fact instability due large local errors rather unstable propagation errors contrast wide condition numbers error cholesky factors computed stable form algorithm around 10 gamma15 consistent conclusion last section algorithm stable interesting note algorithm stable even hyperbolic transformations applied directly proven 3 reason whenever hyperbolic transformation large norm might magnify errors performed proven norm generators drops drastically since error bounds 4 unstabilized form hyperbolic transformation proportional norm new generators multiplied norm transformation large norm hyperbolic transformation canceled proportional decrease norm generators reason decrease norm generators whenever ae close negative one action hyperbolic transformation close taking difference two generators scaling result 1 case whenever leading nonzero elements oj apart leading ae close one proven components generators within oj seen example clearly case two generators leading elements hyperbolic transformation computed within oj components two generators within p j difference isnt small enough completely cancel large norm hyperbolic transformation table errors different values j table 5 backward error seems display proportionality square root condition number property suggested theorem 41 fact overall backward error sum local errors imply neither generators effect previous errors unduly magnified hyperbolic transformations makes possible concentrate attention one stage algorithm expect results overall factorization significantly worse worst possible loss accuracy single stage note already proven applying hyperbolic transforma tion result always set generators satisfy bound looking two generators hyperbolic transformation acted direct result analysis 4 local error introduced hyperbolic transformation produces u 1k v 1k proportional norm generators norm transformation bounded follows ip f although appear general theory relating condition number arbitrary low ffrank matrix values ae k proven 5 positive definite toeplitz matrix similar inequalities hold matrices displacement rank ff enough suggest errors tend proportional square root condition get somewhat conclusive result assume factorization goes completion write leading elements u ae computed assumed without loss generality v case either generator multiplied gamma1 without causing problems means error incurred hyperbolic transformation worst proportional top ip f explains results table 5 stability error propagation algorithm well bound generators errors worst modest multiple p ffl although backward errors dependent reflection coefficients limit dependence 6 summary paper proven stability method cholesky factorization low ffrank matrices stability result dependent particular implementation since result depends bound norm gener ators important choose transformations permit bound working transformations factored product sequence plane rotations one hyperbolic transformation gives bound case algorithm implemented unfactored hyperbolic transformations bound generators sufficient stability however bounds given support assertion stability error propagation keeps instability bad might otherwise expected although discussed worth noting approach paper used manner similar 1 provide fast weakly stable solution toeplitz least squares problems conclusions would essentially 1 r weakly stable algorithm general toeplitz systems stability bareiss related toeplitz factorization algorithms note downdating cholesky factorization numerical stability levinsondurbin algorithm toeplitz systems equations high performance algorithms toeplitz block toeplitz matrices matrix computations analysis cholesky decomposition semidefinite matrix generalized displacement structure blocktoeplitz algebraic eigenvalue problem tr ctr paolo foschi erricos j kontoghiorghes estimation var models computational aspects computational economics v21 n12 p322 february april p alonso j bada vidal efficient parallel algorithm solve blocktoeplitz systems journal supercomputing v32 n3 p251278 june 2005