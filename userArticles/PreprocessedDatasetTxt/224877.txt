design verification via simulation automatic test pattern generation present simulationbased method combinational design verification aims complete coverage specified design errors using conventional atpg tools error models used prior research examined reduced four types gate substitution errors gses gate count errors gces input count errors ices wrong input errors wies conditions derived gate completely testable gses conditions lead small test sets gses nearminimal test sets also derived gces analyze redundancy design errors relate single stuckline ssl redundancy show map foregoing error types ssl faults describe extensive set experiments evaluate proposed method experiments demonstrate high coverage modeled design errors achieved small test sets b introduction design verification process ensuring new design exhibits specified behavior many approaches design error detection proposed based formal verification 1 however formal verification impractical large logic circuits practice circuits verified simulation using representative input patterns tests 2 basic question address tests applied efficiency abadir et al 3 defined set likely design errors combinational logic shown complete test sets single stuckline ssl faults detect many errors recent research considered use implementationindependent universal test sets 45 well random tests 6 design error detection case number tests needed good coverage design errors excessive 100 percent coverage guaranteed example universal tests exploit unateness properties functions implemented tests become exhaustive often case unate variables section 2 reduce design errors considered literature four classes study detection properties error classes section 3 describes mapping design errors ssl faults well process generating test sets using standard atpg tools ssl faults section 4 presents results applying method representative benchmark circuits tests design errors many types design errors classified literature 357 error types necessarily com plete believed common design pro cess condense errors identified abadir et al 3 four categories similar classification given independently 5 gate substitution error gse refers mistakenly replacing gate another gate number inputs extra missing inverter errors 35 7 considered substitution inverter buffer buffer inverter respectively gate count error gce corresponds incorrectly adding removing gate includes extra missing gate errors 3 category combined gate substitution 5 unlike xor xnor gates considered class local errors defined 6 includes errors category input count error ice corresponds using gate fewer inputs required wrong input error wie error corresponds connecting gate input wrong signal signallike source error 6 special case wie although wie may viewed multiple ice multiple ice cannot model wie inverter errors category studied next test patterns detect determined following assumptions made concerning design verified 35 gatelevel implementation purely combinational gate types used xor nand xnor buf buffer similar 356 functional specification design verification via simulation automatic test pattern generation 1 hussain alasaad john p hayes advanced computer architecture laboratory department electrical engineering computer science university michigan ann arbor mi 481092122 email halasaad jhayeseecsumichedu design completely simulatable input pattern applied produces completely specified output single design error assumed occur assumption analogous single stuckline ssl fault assumption standard model used testing physical faults 21 notation let e set 2 n input vectors ninput gate g divide e disjoint subsets contains input vectors exactly k 1s binary representation disjoint sets v null v v odd v even defined follows example case 3input nand gate 101 110 sets v null v v odd v even called characterizing sets csets g table 1 shows output gate type response various csets sets v null v nonempty always cardinality one singleinput gates v even v odd empty multipleinput gates set v odd contains least two elements set v even empty cardinality v even v odd even finally v k denotes arbitrary vector set v k notation enables us express sets vectors simple way example complete test set ssl faults ninput nand gate also write tests 111 011 101 110 general verify identity gate g determine tests required verification use notation conjunction table 1 22 gate substitution errors gses according experiments reported 7 frequent design error made humans gate substitution accounting around 67 errors gate substitution refers mistakenly replacing gate g another gate g number inputs represent error gg gates multiple inputs multipleinput gse migse one six possible forms gand gnand gor gnor gxor gxnor multipleinput gate five migses example migses occur gate except gand considered error gates single input ie buffers inverters singleinput gse sigse one two possible forms gnot gbuf singleinput gate one sigse cover extramissing inverters gses buffer inserted gates fanout branches well inputs fanout suggested gses detected complete test set ssl faults 3 simulation study section shows test set cover 80 100 migses 100 sigses actual coverage migses function circuit structure well types gates used circuit goal achieve 100 coverage gses singleinput gate identified one test vector either v null v hand multipleinput gate identified three test vectors one v null one v odd one v n even v even n odd hence three test vectors sufficient identify ninput gate two test vectors suffice cases exam ple gate identified applying one test vector v null one v odd number tests needed test ninput gate ssl faults gates nand two three xor xnor depending parity n number tests needed test ssl faults greater equal number tests needed test migses cases introduce notation specify effects csets gate g within circuit definition 1 inputs gate g circuit c forced pattern v assigning primary inputs c g controllable v otherwise uncontrollable v output g respect pattern v sensitiz able primary output response v said observable g otherwise unobservable gate g circuit c vcontrollable g controllable least one vector v input vector set v v also observable g g excitable v vexcit able gate g fully excitable g excitable every nonempty cset g otherwise partially excitable illustrate definitions consider circuit shown figure 1 g 1 g 2 controllable pattern 00 g 3 uncontrollable 00 response pattern 00 observable g 2 observable g 1 gate g 3 0011excitable g 3 controllable 11 response 11 observable g 3 hand g 3 00excitable g 3 uncontrollable elements set 00 gates partially excitable following theorem gives solution verification problem gses table 1 responses various gate types csets cset even n odd even na na even figure realizing xor function z theorem 1 necessary sufficient condition test set verify fully excitable gate produce test vectors shown table 2 inputs gate sensitize gate output primary output gates fanoutfree circuit fully excitable circuit fanout possible input combinations cannot forced inputs gates example element v null forced inputs gate g 3 figure 1 table 1 see v null necessary distinguish 2input gate gate replacement xnor gate cannot detected replacement change function circuit hence considered redundant undetectable migse likewise input combinations forced inputs gates responses cannot observed example pattern 00 forced inputs g 1 figure 1 response g 1 cannot propagated primary output examples show natural gates fully excitable therefore undetectable design errors also suggests modification test vectors 1 table 2 verify partially excitable gate definition 3 partially excitable gate g excitable one nonempty csets g strong partially excitable otherwise weak partially excitable consider circuit figure 1 gates g 1 g 2 g 3 strong partially excitable excitable two three nonempty csets respective gates example weak partially excitable gate 3input xor inputs connected single source case gate excitable two v null v four csets since strong partially excitable gate g excitable one nonempty csets one migses unde tectable remaining four migses g detected least two vectors table 1 implies arbitrary vector detects three gs five migses therefore apply least three test vectors g g controllable one vectors one vectors responses observable two detect detectable migses leads following result theorem 2 gates circuit either fully excitable strong partially excitable test set 2 shown table detect detectable gses circuit analysis 2 shows verify weak partially excitable gate apply patterns 3 shown table 2 since cannot always assert gates design test fully excitable strong partially excitable may apply patterns 3 detect gses note test set generated gses assuming gates weak partially excitable detect gses circuit hand test set generated gses assuming gates fully excitable strong partially excitable may detect gses complete test set ssl faults guarantees detection sigses 3 tests migses also cover many sigses circuit sslirredundant contains undetectable ssl faults theorem 3 complete test set migses sslirre dundant circuit also complete test set sigses circuit lines except inputs fanout produces v input every nand gate v null input every gate responses observable theorem conclude detection sigses ensured test sets 2 3 1 experiments show test set 3 detects sigses one considered benchmark circuits 23 gate count errors gces distinguish two types gate count errors extragate errors missinggate errors extragate design error ege defined inserting gate g inputs taken n inputs gate g feeding output g g consequence number inputs gate g becomes represent ege eggg easy see egandand egandnand egoror egornor egxorxor egxorxnor undetectable redundant explicit test generation eges needed due following theorem theorem 4 complete test set gses also complete test set eges eges also detected complete test set ssl faults guaranteed complete test set ssl faults circuit figure 2 000 100 001 010 test set detect xor gate extra gate need vector 011 table 2 test vectors required verify ninput fully excitable gate gate fanin n test set test set test set 3 odd v v odd even even v null v odd even even even even even v null v even v v null v odd v even even v null v even even xnor even even even v null v even v odd even even figure example shows ege detected complete test set ssl faults e c missinggate design error mge defined removing gate g inputs feeds ninput gate g changing inputs g inputs g see figure 3 consequence number inputs g becomes represent mge mggg extragate case errors mgand mgand nand mgor mgor mgxorxor mgxorxnor undetectable consider problem finding minimal set vectors detect mges ninput gate g mggg insert gate g shown figure 4 g chosen function circuit changed example g nand g gate detect gse gg order detect mggg theorem 5 test sets sufficient nearminimal detecting mges ninput fully excitable nand xor xnor respectively test set given theorem one test minimum example 11member test set generated mges 4input nand gate g 1111 1110 1101 1011 0111 1100 1010 1001 0110 0101 0011 one tests 1110 1101 1011 0111 dropped still detects mges however mges g cannot detected fewer 10 vectors general theorem 5 gives nearminimal test sets ninput fully excitable gate easy prove test sets detect mges ninput partially excitable gate high probability 24 input count errors ices wrong input errors wies input count errors ices classified extra input missing input errors extra input design error eie defined replacement ninput gate input gate additional input connected arbitrary signal circuit missing input design error mie defined replacement ninput gate input gate inputs connected arbitrary subset original n inputs represent eie gate g eieg e extra input represent mie gate g mimg source missing input test eie given input nand gate input must set 0 activate error inputs must forced 1 gates output signal must propagated primary output exactly requirement test stuckat1 fault input gate question similarly testing eies input x gate testing stuckat0 fault x test mie gate g inputs g set 1 signal considered missing set 0 gs output signal propagated primary output restrictive test stuckat0 output g similarly testing mie nand restrictive testing gate output stuckat1 stuckat1 stuckat0 respectively foregoing tests complete nand gates hence complete test set ices given circuit detects ssl faults nand gates complete test set ices also detects ssl faults affecting xor xnor gates example testing eies input xor xnor gate equivalent testing stuckat0 fault input wrong input error wie defined connection gate input wrong signal source represent wie gate g wiuwg u wrong input gate w correct input vector v detects wiuwg must set u w opposite values propagate signal u primary output wie appears second common design erroraround 17 errors reported 7 relationship mies wies stated following theorem theorem 6 complete test set mies gates type nand complete test set wies gates practice rarely find complete test set mies fact given mixg redundant imply wiuxg redundant every u also complete test set mies guarantee detection wies xor xnor buf gates hence cannot conclude test set mies covers wies numbers ices wies circuit largeapproximately ok 2 k number distinct signals circuit hence use simulation extract errors detected test set ssl gse mge complete test sets ssl faults gses mges respec tively fact eies detected test set ssl faults alone 3 hence generate tests undetected mies wies experimental results show mies wies detected set basic question concerning mies wies source missing wrong input must depend erroneous gates output otherwise circuit become sequential errors make combinational circuit sequential detected levelization procedure 2 coverage relationships various design errors summarized follows complete test set migses missing correct circuit erroneous circuit g g g figure 3 missinggate design error mge gate g g g figure 4 reducing problem detecting mges detecting gses detects eges hand complete test set ssl faults detects eies sigses complete test sets mies mges wies guarantee detection error types example test mies detects many necessarily ssl faults 25 design error redundancy noted earlier design errors undetect able leads type redundancy quite different previously studied 8 definition 4 gate g circuit c redundant inputs function implemented c changed proper subset inputs g removed circuit c called giirredundant gate c redundant inputs giredundancy imply sslredundancy example 5input xor inputs connected source giredundant sslirredundant simi larly sslredundancy imply giredundancy example buffer whose input connected ground sslredundant giirredundant redundant design error one test vector exists example substitution xnor gate g 3 figure 1 cannot detected input vector hence migse g 3 xnor redundant following theorem characterizes redundant gses theorem 7 giirredundant sslirredundant circuit c following holds 1 c redundant sigses 2 gg redundant migse every migse g irredundant vice versa corollary 1 gates giirredundant sslirre dundant circuit c restricted nand buf c redundant gses number gates redundant migses circuit c varies circuit structure types gates c example fanoutfree circuits redundant gses hand 2input exclusiveor implementation using four 2input nand gates four possible redundant migses nand gate replaced xor without affecting overall exclusiveor function 3 test generation section describe test generation method design errors order use standard atpg tools map design errors ssl faults mapping process consists modifying circuits netlist injecting predefined set ssl faults test set generated ssl faults modified netlist detects design errors original netlist map migses mges ssl faults gate original netlist replaced functionally equivalent circuit called gate replacement module carefully selected ssl faults injected gate replacement module test injected fault forces input gate vector one sets required verify gate cover possible migses circuit must assume gates weak partially excitable consider example replacement module shown figure 5 faults c stuckat0 stuckat0 e stuckat0 force inputs replacement module v null v odd v respectively input patterns determine gate circuit correct ie presence migse gate detected gate replacement modules migses mges gate types designed systematically similar way general requirements met gate replacement module mg gate g following function mg must g test injected ssl fault mg must force input g certain vector needed verify g injected ssl faults must sensitizable output mg injected ssl fault mg detected vector must detected vector v requirement simplifies detection injected ssl faults test generator leads smaller test sets mapping migses mges ssl faults manytoone detecting given set injected ssl faults detects larger set migses mges example detection three ssl faults figure 5 detects five migses onetoone correspondence net errors eies mies wies ssl faults mapping eie ssl fault simple detect whether nand gates input x extra need set x 0 set every input 1 propagate gates output signal primary output testing x stuckat1 also test extra input xor xnor gate test input stuck at1 required detection mies wies performed inserting mapping circuit called net attachment module shown figure 6 let c c circuits obtained adding net attachment module following requirements must met g xor xnor figure 5 replacement module detecting gses 2input gate c e stuckat0 equivalent circuit missing input wrong input correct input c e f z design error net attachment module c e design error equivalent circuit e f z net attachment module figure 6 mapping mies wies ssl faults function circuit c must c test injected ssl fault net attachment module must detect mie wie injected ssl fault must sensitizable net attachment module typical design net attachment module mies shown figure 7a g 2 nand g 1 must xnor fault p stuckat1 injected hand g 2 gates xor xnor g 1 must xor fault p stuckat0 injected cases output g 2 independent z hence function circuit changed also ssl fault sensitizable output net attachment module vector testing detects mimg 2 typical design net attachment module wie shown figure 7b output net attachment module hence circuit function preserved test p stuckat0 forces opposing values hence corresponding wie detected test overall verification process divided two phases first phase checks gate errors migses mges shown figure 8 second phase performs error simulation net errors mies wies generates tests undetected ones flowchart phase 2 similar phase 1 complete coverage net errors may require several iterations phase 2 checking modeled errors implementation found match functional specifications conclude high confidence circuit correct designed 4 experimental results section describe experiments performed support preceding analysis experiments used atpg tool determine capability given test set detect design errors ssl faults developed errorfault simulator esim simulator uses parallelpattern evaluation critical path tracing techniques 2 simulates circuit multiple vectors concurrently determines detected errorsfaults without explicit simulation errorfault circuits used throughout experiments iscas 85 benchmarks 10 standard ttl circuits 11 note circuits except c432 c499 sslirredun dant conducted preliminary experiment determine coverage design errors using complete test set detectable ssl faults results table 3 show complete test set ssl faults guarantees detection sigses eies confirming results 3 detection design errors guaranteed likely detected test set exercise net circuit next experiments concerned generating almost complete test sets design errors use method described previous section generate test vectors targeting indicated errors modified netlist supplied atalanta test set generated z net attachment net attachment b figure 7 net attachment module mies b wies module module simulator specs functional netlist functional simulator logic stop phase 2 gses mges test netlist modifier netlist test netlist modifier netlist test test vectors agree start figure 8 first phase design verification process comparator faults table 3 percentage design errors detected using complete test sets ssl faults circuit test set size detd faults detected gses detected gces detected ices detd wies c432 46 992 1000 893 1000 955 986 713 964 c432nr 44 1000 1000 891 1000 955 1000 731 969 c499nr 52 1000 1000 979 462 938 1000 888 989 74181 74283 12 1000 1000 913 1000 841 1000 745 922 table 4 percentage errors detected using generated tests circuit tests targeting gses tests targeting mges simulation mies wies using test set size detd migses detd sigses detd eges test set size detd mges test set size detd mies detd wies c432nr c499nr 43 984 133 932 997 74181 15 985 1000 889 36 99 generated test sets evaluated using simulation find coverage gses shown table 4 since tests migses cover eges theorem 4 results detecting eges shown table 4 coverage mges using generated test set also shown table 4 testing mies wies performed errors detected error simulation using set coverage eies shown table 3 complete test set ssl faults detects eies error simulation results mies wies also appear table 4 tests generated using remaining undetected mies wies error simulation reported large percentage errors redundant adding generated tests coverage mies wies improved shown table 5 coverage design errors using generated test sets quite high 80100 cases confident irredundant design errors detected explore analyzed circuits 7485 74181 74283 found migses eges detected test sets redundant hence test sets cover 100 detectable migses eges difficult compare coverage results obtained paper related work literature following reasons 1 different error models used 2 test set sizes missing results 6 3 standard benchmarks used prior work moreover cpu times cannot accurately compared runs sun workstation esim runs ibm pc cpu times found range seconds minutes cases conclusions presented method verifying logic circuits using standard simulation atpg tools showed common design errors readily mapped ssl faults presented systematic method perform mapping experimental results show complete test sets ssl faults detect almost detectable errors test sets design errors small size provide high coveragethe percentage detected design errors modeled errors detectable redundant greater 90 benchmark circuits experiments also show fraction redundant design errors significant practical circuits even circuit ssl irredundant example 116 migses 7485 comparator circuit undetectable design verification method directly applicable gatelevel sequential circuits need sequential atpg tool gives test sets ssl faults high cov erage extending verification method highlevel circuits well gatelevel design error diagno sis extensions cannot easily performed using bddbased design verification methods high memory requirements independence design structural representation stress design verification method used atpg tool require modification test generation program ensure full detectability design errors injecting ssl faults modified netlist apply atpg program therefore future improvements atpg tools extended directly design error detection acknowledgments wish thank krishnendu chakrabarty mark hansen helpful comments r formal verification hardware design digital systems testing testable design logic design verification via test generation exhaustive simulation need require exponential number tests design verification using universal test sets simulation automation system sas concepts implementation results quantifying design quality design experiments properties irredundant logic net works generation test patterns combinational circuits neutral netlist 10 combinational benchmark circuits target translator fortran ttl logic data book tr formal verification hardware design quantifying design quality design experiments ctr huang kwangting cheng kuangchien chen juinyeu joseph lu faultsimulation based design error diagnosis sequential circuits proceedings 35th annual conference design automation p632637 june 1519 1998 san francisco california united states kypros constantinides stephen plaza jason blome valeria bertacco scott mahlke todd austin bin zhang michael orshansky architecting reliable cmp switch architecture acm transactions architecture code optimization taco v4 n1 p2es march 2007 hussain alasaad john p hayes logic design validation via simulation automatic test pattern generation journal electronic testing theory applications v16 n6 p575589 dec 2000 van campenhout h alasaad j p hayes mudge r b brown highlevel design verification microprocessors via error modeling acm transactions design automation electronic systems todaes v3 n4 p581599 oct 1998 tao lv jianping fan xiaowei li lingyi liu observability statement coverage based dynamic factored usedefinition chains functional verification journal electronic testing theory applications v22 n3 p273285 june 2006 katarzyna radecka zeljko zilic design verification test vectors arithmetic transform universal test set ieee transactions computers v53 n5 p628640 may 2004 david van campenhout trevor mudge john p hayes highlevel test generation design verification pipelined microprocessors proceedings 36th acmieee conference design automation p185188 june 2125 1999 new orleans louisiana united states wei lu xiutao yang tao lv xiaowei li efficient evaluation vector generation method observabilityenhanced statement coverage journal computer science technology v20 n6 p875884 november 2005 jian shen jacob abraham rtl abstraction technique processor microarchitecturevalidation test generation journal electronic testing theory applications v16 n12 p6781 febapril 2000