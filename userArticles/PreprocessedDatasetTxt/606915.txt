optimal propositional proof system structure easy subsets taut paper develop connection optimal propositional proof systems structural complexity theoryspecifically exists optimal propositional proof system suitable recursive presentation class easy polynomial time recognizable subsets taut corollary obtain result exist optimal propositional proof system every theory exists easy subset taut tprovably easy b introduction first classification propositional proof systems relative efficiency done cook r reckhow 4 1979 key tool comparing relative strength proof systems p simulation intuitively proof system h psimulates second one g polynomial time computable function translating proofs proofs h propositional proof system called poptimal psimulates propositional proof system question existence poptimal propositional proof system nondeterministic counterpart optimal propositional proof system posed j krajicek p pudlak 9 still open known whether manyone complete languages exist promise classes recursively enumerable representation appropriate sets turing machines known moreover j hartmanis l hemachandra 5 w kowalczyk 7 pointed np conp possess complete languages recursive enumerations polynomial time clocked turing machines covering languages classes paper show question existence optimal poptimal propositional proof systems characterized similar manner main result paper shows optimal proof systems taut set propositional tautologies exist recursive enumeration polynomial time clocked turing machines covering easy recognizable polynomial time subsets taut means problem existence complete languages promise classes problem existence optimal proof systems taut although distant first sight structurally similar since complete languages promise classes unsuccesfully searched past equivalence gives evidence fact optimal propositional proof systems might exist result related already existing line research computational complexity revelation connection existence optimal proof systems existence manyone complete languages promise classes 12 15 subject intensively investigated j kobler j messner 8 formalized relationship introducing concept test set showed existence poptimal proof systems taut sat set satisfiable boolean formulas suffices obtain complete language np conp j messner j toran showed 12 complete language exists case poptimal proof system taut believe results make next step towards deeper understanding link optimal proof systems complete languages promise classes paper organized follows section 2 set notation used throughout paper background information propositional proof systems presented section 3 problems existence complete languages classes conp characterization terms polynomial time clocked machines covering languages classes presented section 4 section 5 give precise definition family propositional formulas used proofs main results section 6 main results stated proved last section discuss corollaries arising main results paper preliminaries assume familiarity basic complexity theory see 1 symbol sigma denotes throughout paper certain fixed finite alphabet set strings sigma denoted sigma string x jxj denotes length x language ae sigma complement set strings use turing machines acceptors transducers basic computational model distinguish machine code deterministic turing machine input w denotes computing time w nondeterministic turing machine timem w defined ws accepted denotes number steps shortest accepting computation w turing machine denotes language accepted output turing transducer input w 2 sigma denoted mw consider deterministic nondeterministic polynomial time clocked turing machines uniformly attached standard clocks stop computations polynomial time see 1 impose restrictions encoding machines code polynomial time clocked turing machines detect easily polynomial time natural k n k k polynomial time bound let 1 2 3 n 1 n 2 n 3 respectively standard enumerations deterministic nondeterministic polynomial time clocked turing machines recall classes p np conp respectively class languages recognized deterministic turing machines working polynomial time class languages accepted nondeterministic turing machines working polynomial time class complements languages np symbol taut denotes set encodings propositional tautologies fixed adequate set connectives sat denotes set satisfiable boolean formulas finally standard polynomial time computable tupling function 3 propositional proof systems abstract notion propositional proof system introduced cook r reckhow 4 following way definition 1 propositional proof system function f gamma taut computable deterministic turing machine time bounded polynomial length input string w call proof formula ff propositional proof system allows short proofs tautologies called polynomially bounded propositional proof system definition 2 cook reckhow propositional proof system polynomially bounded exists polynomial pn every tautology ff proof length pjffj system existence polynomially bounded propositional proof system equivalent one fundamental problems complexity theory fact 1 cook reckhow npconp exists polynomially bounded propositional proof system cook r reckhow first propose program research aimed attacking np versus conp problem classifying propositional proof systems relative efficiency systematically studying powerful concrete proof systems see 2 natural way classification introduce partial order reflecting relative strength propositional proof systems done two different manners definition 3 cook reckhow propositional proof system p polynomially simulates psimulates propositional proof system q exists polynomial time computable function f every w w proof ff q fw proof ff p definition 4 krajicek pudlak propositional proof system p simulates propositional proof system q exists polynomial p every tautology ff ff proof length n q ff proof length pn p obviously psimulation stronger notion simulation would like pay attention fact simulation proof systems may treated counterpart complexitytheoretic notion reducibility problems analogously notion complete problem complete language would correspond notion optimal proof system notion optimal propositional proof system introduced j krajicek p pudlak 9 two different versions definition 5 propositional proof system optimal simulates every propositional proof system propositional proof system poptimal psimulates every propositional proof system following open problem posed j krajicek p pudlak studied paper open problem 1 exist optimal propositional proof system 2 exist poptimal propositional proof system importance questions connection np versus conp problem described following fact fact 2 optimal poptimal propositional proof system exists npconp system polynomially bounded complete languages np conp classes np conp called promise classes defined using nondeterministic polynomial time clocked turing machines obey special conditions promises problem whether given nondeterministic polynomial time clocked turing machine indeed defines language classes undecidable complete languages classes known since exist relativizations two classes complete languages well relativizations problems existence complete languages seem difficult turns existence complete languages classes depends certain structural condition set machines defining languages classes since condition chief motivation main theorems survey known results direction class np conp often defined using complementary pairs nondeterministic turing machines use strong nondeterministic turing machines define class strong nondeterministic turing machine one three possible comes yes maybe say machine accepts language l following true x 2 l computations end yes maybe least one yes x 62 l computations end maybe least one standard enumeration nondeterministic polynomial time clocked turing machines strong nondeterministicg following theorem links question existence complete language np conp existence recursively enumerable list machines covering languages np conp 7 list machines called nice presentation theorem 1 kowalczyk exists complete language np conp exists recursively enumerable list strong nondeterministic polynomial time clocked turing machines n 1 theorem exploited obtain following independence result let formal theory whose language contains language arithmetic e language f01 delta g specify detail assume sound prove true theorems set theorems recursively enumerable theorem 2 kowalczyk np conp complete languages theory exists l 2 np conp nondeterministic polynomial time clocked n ln proven n strong nondeterministic class closely related oneway function notion central publickey cryptography see 13 class defined using categorical unambiguous turing machines call nondeterministic turing machine categorical unambiguous following property input x one accepting computation define upfln g see following theorems problem existence complete language similar np conp counterpart theorem 3 hartmanis hemachandra exists complete language exists recursively enumerable list categorical nondeterministic polynomial time clocked turing machines n 1 fln k theorem 4 hartmanis hemachandra complete languages theory exists nondeterministic polynomial time clocked proven n categorical sections 6 7 show similarity problems existence complete languages np conp also shared problem existence optimal propositional proof system 5 formulas expressing soundness turing machines section construct boolean formulas used verify given deterministic polynomial time clocked transducer integer n input length n produces propositional tautologies use formulas proofs theorems 5 6 transducer n denote fn function computed n f definition 6 turing transducer n called sound fn maps polynomial time clocked transducer assign set f sound 1 g propositional formulas propositional tautology every input length n machine outputs propositional tautology polynomial time clocked transducer holds sound ae taut let n fixed nondeterministic turing machine working polynomial time accepts string w w propositional tautology fixed polynomial time clocked transducer let us consider set bmfhm 0 n exists string x length n mx 62 taut g using machines n construct nondeterministic turing machine 0 guesses string x length n runs input x runs n output produced works polynomial time accepts bm let fmn cooks theorem formula see 3 machine 0 input hm 0 n define sound n fmn formula tautology every input length n outputs tautology structure cooks reduction fmn clearly displays n follows fixed set p moreover formulas describing soundness turing machines possess following properties 1 global uniformity property exists polynomial time computable function f polynomial time clocked transducer time bound 2 local uniformity property let fixed polynomial time clocked transducer exists polynomial time computable function fm w 2 sigma 6 main results class sets recursively presentable exists effective enumeration devices recognizing members class 10 paper use notions recursive p presentation recursive nppresentation mutations notion recursive presentability definition 7 easy subset taut mean set ae taut 2 p polynomial time recognizable definition 8 optimal nondeterministic algorithm taut nondeterministic turing machine accepts taut every nondeterministic turing machine 0 accepts taut exists polynomial p every tautology ff let easy subset taut say nondeterministic polynomial time clocked turing machine names set obviously may possess many names following theorem states optimal propositional proof system exists exists recursively enumerable list names easy subsets taut would like pay attention similarity next theorem theorems 1 3 section 4 theorem 5 statements iii equivalent exists optimal propositional proof system ii exists optimal nondeterministic algorithm taut iii class easy subsets taut possesses recursive np presentation statement iii mean exists recursively enumerable list nondeterministic polynomial time clocked turing machines 2 every ae taut 2 p exists j proof every propositional proof system associate nondeterministic guess verify algorithm taut input ff algorithm guesses string w checks polynomial time whether w proof ff successful algorithm halts accepting state symmetrically nondeterministic algorithm taut transformed propositional proof system proof formula ff system computation accepting ff let opt denote optimal propositional proof system let denote nondeterministic turing machine associated opt guess verify algorithm associated opt easily checked accepts taut nondeterministic turing machine 0 accepting taut exists polynomial p every tautology ff holds let optimal nondeterministic algorithm taut recursive nppresentation easy subsets taut define two steps first step define recursively enumerable list nondeterministic turing machines f 1 f 2 f 3 machine f k obtained attaching shutoff clock n k k machine input w machine f k accepts w accepts w jwj sequence f 1 f 2 f 3 f 4 nondeterministic turing machines possesses properties 1 2 1 every holds 2 every easy subset taut exists j ae lf j second step define new recursively enumerable list nondeterministic polynomial time clocked turing machines k 1 machine simulates steps f steps n j see section 2 definition n j accepts w f n j accept w let fixed easy subset taut exist k ln k ae lfm follows definition sequence k 1 k 2 k 3 accepted machine provides recursive nppresentation easy subsets taut let g machine generating codes machines sequence n 1 forming recursive nppresentation easy subsets taut say string v 2 sigma good form g comp gamma sound jwj polynomial time clocked turing transducer time bound g computation machine g computation produces code certain machine n j computation machine n j accepting formula sound jwj sequence zeros padding call turing transducer nsound input length n produces propositional tautology let us notice v good form sound jwj formula accepted certain machine nppresentation propositional tautology clearly forces nsound input w produces propositional tautology let ff 0 certain fixed propositional tautology define following way good g comp gamma sound jwj ff propositional tautology produced input w otherwise gamma taut order prove opt polynomial time computable sufficient notice using global uniformity property check polynomial time whether v good form hence opt propositional proof system remains prove opt simulates propositional proof system let h propositional proof system computed polynomial time clocked transducer k time bound n l set ak fsound 1 k g easy subset taut exists machine n j nppresentation let ff propositional tautology let x proof h ff possesses proof opt form g comp gamma sound jxj word comp gamma g computation g producing code k computation n j accepting sound jxj k let us notice jcomp gamma constant polynomial time clocked exists polynomial p pjxj constants c 1 l polynomial depend n j fixed connected k proves opt simulates h following definition nondeterministic counterpart definition 7 definition 9 npeasy subset taut mean set ae taut 2 np slight change previous proof shows also second version theorem 5 valid version condition iii replaced following one iv class npeasy subsets taut possesses recursive nppresentation translate previous result deterministic case definition 10 almost optimal deterministic algorithm taut deterministic turing machine accepts taut every deterministic turing machine 0 accepts taut exists polynomial p every tautology ff name algorithm almost optimal deterministic algorithm taut optimality property stated input string x belongs taut nothing claimed xs compare definition optimal acceptor taut 11 equivalence ii next theorem restated 9 order emphasize symmetry theorem 5 theorem 6 theorem 6 statements iii equivalent exists poptimal propositional proof system ii exists almost optimal deterministic algorithm taut iii class easy subsets taut possesses recursive p presentation statement iii mean exists recursively enumerable list deterministic polynomial time clocked turing machines 2 every ae taut 2 p exists j proof follows arguments proof ii iii theorem 5 change use deterministic turing machines instead nondeterministic ones string v 2 sigma good form g comp gamma sound jwj appropriate symbols mean define analogously proof theorem 5 good form g comp gamma sound jwj ff propositional tautology produced input w otherwise certain fixed propositional tautology remains prove opt psimulates propositional proof system let h propositional proof system computed polynomial time clocked transducer k time bound n l set ak fsound 1 k g easy subset taut exists machine j ppresentation function g comp gamma sound jxj translates proofs h proofs opt word comp gamma g definition computation g producing code j k computation j accepting sound jxj k fact j deterministic works polynomial time local uniformity property see section comp gamma sound jxj k constructed polynomial time proves polynomial time computable definition 11 turing machine acceptor called sound ae taut question whether set sound deterministic non deterministic polynomial time clocked turing machines yields desired ppresentation nppresentation whether set recursively enumerable occurs naturally connection theorems 5 6 negative answer question provided next theorem theorem 7 set sound deterministic nondeterministic polynomial time clocked turing acceptors recursively enumerable follows immediately rices theorem see 14 7 independence results let formal theory satisfying assumptions section 4 notation fi means first order formula fi provable let turing machine lm ae taut denote first order formula expresses soundness ie 8w2lm w propositional tautology definition 12 deterministic nondeterministic turing machine definition 13 set ae taut provably npeasy exists nondeterministic polynomial time clocked turing machine fulfilling 1 2 1 case classes np conp obtain following independence result theorem 8 exist optimal propositional proof system every theory exists easy subset taut provably npeasy proof suppose contrary exists theory easy subsets taut provably npeasy following recursively enumerable set machinesomega nondeterministic polynomial time clocked turing machine creates recursive nppresentation class easy subsets taut theorem 5 implies exists optimal propositional proof system giving contradiction following result obtained second version theorem 5 theorem 9 exist optimal propositional proof system every theory exists npeasy subset taut provably npeasy translation result deterministic case goes along following lines definition 14 set ae taut provably easy exists deterministic polynomial time clocked turing machine fulfilling 1 theorem 10 exist poptimal propositional proof system every theory exists easy subset taut provably easy 8 conclusion paper related question existence optimal propositional proof system recursive presentability family easy subsets taut means polynomial time clocked turing machines problems existence complete languages classes np conp similar characterization characterization variety interesting results promise classes np conp derived recursiontheoretic techniques see 7 5 although recursiontheoretic methods seem unable solve problem existence optimal propositional proof system believe main results section 6 allow application methods case promise classes see 5 6 study problem r structural complexity springerverlag lectures proof theory complexity theorem proving procedures relative efficiency propositional proof systems complexity classes without machines complete languages complete problems np connections presentability complexity classes power formal systems reasoning complete problems promise classes optimal proof systems test sets propositional proof systems structure sets np complexity classes optimal algoritms optimal proof systems optimal proof systems propositional logic complete sets computational complexity classes recursively enumerable sets decision problems optimal quantified propositional proof system complete language np tr complexity classes without machines complete languages connections representability complexity classes power formal systems reasoning complete problems npcapconp optimal proof systems propositional logic complete sets optimal quantified propositional proof system complete language np cap conp complete problems promise classes optimal proof systems test sets complexity theoremproving procedures ctr christian glaer alan l selman samik sengupta reductions disjoint nppairs information computation v200 n2 p247267 1 august 2005