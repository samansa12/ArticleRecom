constructing planar cuttings theory practice present several variants new randomized incremental algorithm computing cutting arrangement n lines plane algorithms produce cuttings whose expected size or2 expected running time algorithms onr bounds asymptotically optimal nondegenerate arrangements algorithms also simple implement present empirical results showing perform well practice also present another efficient algorithm slightly worse time bound generates small cuttings whose size guaranteed close best known upper bound j matousek discrete comput geom 20 1998 pp 427448 b introduction natural approach solving various problems computational geometry divideand conquer paradigm typical application paradigm problems involving set l n lines plane fix parameter r 0 partition plane regions r regions usually vertical trapezoids triangles number lines l intersect interior r nr allows us split problem hand subproblems involving subset lines intersecting region r partition known 1rcutting plane see aga91 survey algorithms use cuttings work related cuttings see am95 first though optimal construction cuttings due clarkson cla87 chazelle friedman cf90 showed existence 1rcuttings bound worstcase tight also showed cuttings consisting vertical trapezoids computed onr time although construction asymptotically optimal seem produce practically small number regions coming smallest possible number regions ie reducing constant proportionality important efficiency recursive data structures use cuttings currently best lower bound number vertical trapezoids 1rcutting arrangement lines 2541 gamma o1r 2 preliminary version paper appeared 14th acm symposium computational geometry 1998 work supported grant usisraeli binational science foundation work part authors phd thesis prepared telaviv university supervision prof micha sharir school mathematical sciences tel aviv university tel aviv 69978 israel sarielmathtauacil httpwwwmathtauacil sariel optimal cutting 8r 2 6r4 trapezoids see mat98 improving upper lower bounds size cuttings still open indicating understanding cuttings still far satisfactory section 3 outline matousek construction achieving upper bound show slightly improved construction see details spite theoretical importance cuttings plane higher dimensions aware implementation efficient algorithms constructing cuttings paper propose new simple randomized incremental algorithm constructing cuttings prove expected worstcase tight performance bounds new algorithm stated abstract also present empirical results several algorithmsheuristics computing cuttings implemented mostly variants new algorithm perform well practice 2 bound expected size cuttings variants proved others formal proof performance currently available leave open question research matousek mat98 gave alternative construction cuttings showing exists 1rcutting roughly 8r 2 vertical trapezoids unfortunately construction relies computing whole arrangement computation thus takes 2 time present new randomized algorithm based matouseks construction generates 1rcutting size 1 8r 2 log expected time prescribed constant section 2 present new algorithm analyze expected running time expected number trapezoids produces specifically expected running time onr expected size output cutting 2 section 3 present variant matouseks construction section 4 present empirical results comparing new algorithm several algorithmsheuristics constructing cuttings algorithms mostly variants main algorithm also include variant older algorithm chazelle friedman cuttings generated new algorithm variants size roughly 14r 2 algorithms generate smaller cutting r small example constant 9 contrast chazellefriedman algorithm generates cuttings size roughly 70r 2 variants algorithm based cuttings convex polygons small number edges perform even better practice proof optimality one methods polyvertical interpreted extension cutrandominc conclude section 5 mentioning open problems incremental randomized construction cuttings given set n lines plane let denote arrangement namely partition plane faces edges vertices induced lines let avd denote partition plane vertical trapezoid obtained erecting two vertical segments vertex extending either reaches line way infinity computing decomposed arrangement avd done follows pick random permutation incrementally decomposed arrangements avd inserting ith line avd compute zone z avd igamma1 set trapezoids avd igamma1 intersect split trapezoid z 4 trapezoids trapezoid intersects interior sa95 finally perform pass newly created trapezoids merging vertical trapezoids adjacent identical top bottom lines merging step guarantees resulting decomposition independently insertion order elements see dbvkos97 however decide skip merging step resulting structure denoted j depends order lines inserted arrangement fact j additional superfluous vertical walls vertical wall fragment vertical wall created earlier stage got split later insertion step set n lines plane let c 0 constant ccutting partition plane regions r number lines intersect interior r cn region c plane cactive number lines intersect interior c larger cn 1rcutting thus partition plane regions none 1ractive chazelle friedman cf90 showed one compute onr time 1rcutting consists 2 vertical trapezoids propose new algorithm computing cutting works incrementally computing arrangements j using random insertion order lines new idea algorithm light trapezoid ie trapezoid 1ractive constructed algorithm immediately added final cutting algorithm maintain arrangement inside trapezoid point sense one think algorithm greedy adds trapezoid cutting soon one constructed whole plane covered algorithm called cutrandominc depicted figure 1 cutrandominc outputs c k k n c k 1ractive trapezoids thus 1rcutting otherwise c n output 1ractive trapezoids trapezoid must processed split earlier one lines crossing trapezoid inserted thus c n 1rcutting implies correctness cutrandominc covering c plane maintained cutrandominc depends heavily order lines inserted arrangement bound expected running time cutrandominc expected size cutting computes adapt analysis agarwal et al ams94 case following elegant argument due agarwal et al aeg98 shows expected complexity j remains quadratic ie use cutrandominc compute 0cutting lemma 22 let set n lines let random permutation expected complexity j 2 j decomposed arrangement computed incremental algorithm outlined beginning section without performing merging proof let v set intersection points pairs lines vertices indicator variable dv resp uv 1 vertical wall emanating v still exists j go downward resp upward algorithm input set n lines positive integer r output 1rcutting vertical trapezoids begin choose random permutation 1ractive trapezoids c zone set 1ractive trapezoids c igamma1 intersect zone 0 operation splitting vertical trapezoid crossed line four vertical trapezoids dbvkos97 new trapezoids cover intersect interior return c figure 1 algorithm constructing 1rcutting arrangement lines v crossing lines clearly complexity j proportional however dv two lines defining v must appear first lines intersect downward ray emanating v thus p r inequality holds uv therefore expected complexity j analysis applied following abstract framework let set n objects case objects lines ir 2 selection ordered sequence distinct elements let oe denote set selections permutation let denote subsequence consisting first elements n r 2 define collection ct r regions case region either trapezoid segment defined small subset r let denote set possible regions associate two subsets ddelta k delta region delta 2 ddelta defining set delta sense delta 2 ct r ddelta r size ddelta assumed bounded fixed constant set k delta killing set delta namely k delta r 6 denote weight delta let ct r denote set regions ct r weight least k k positive integer region delta plane denote ct r k delta set regions ct r k contained delta set objects sequence r 2 following axioms hold delta 2 ct r ddelta r k delta r subsequence r 0 r ddelta r 0 r 0 natural extension settings agarwal et al ams94 insertion order objects sample important natural number k define following key lemma asserts expected number heavy regions decreases exponentially function weight lemma 23 given set n objects let r random sequence r n distinct elements sequence size r chosen equal probability let parameter assuming satisfies axioms b r 0 j r 0 random subsequence size r proof proof straightforward adaptation proof lemma 22 ams94 ordered sampling intuitively execution cutrandominc progresses number trapezoids heavy weight becomes smaller unfortunately lemma 23 applied directly analyze distribution weights active trapezoids c since axiom b hold active trapezoids c see remark 210 analyze cutrandominc prove weaker version lemma 23 relying fact c lies two structures lemma 23 hold following denote set n lines plane denote r selection length r n definition 24 vertical segment serves left right side trapezoid called splitter let ct w r denote set splitters trapezoids j r splitter ct w r uniquely defined 4 lines let ct w r denote set splitters might appear j r denote set vertical trapezoids top bottom line similarly let ct v r denote set trapezoids avd r trapezoid ct v r defined 4 lines figure 2 vertical trapezoid weight k either one vertical sides intersects least k4 lines least k2 lines pass bottom top trapezoid lemma 25 let set n lines plane let r selection axioms b holds ct w r ct v r proof let splitter ct w r segment part vertical ray emanating intersection point p two lines l 1 l 2 r additionally two additional lines define bottom top intersection points clearly general position assumption 2 ct w r line intersects appear r axiom b let r 0 subsequence r contains ds let minimal index l 1 clearly point j r 0 contains vertical wall contains since vertex p ar 0 either downward upward ray emanating p must include otherwise appear j r thus inserting l 3 l 4 arrangement r 0 splitter appear resulting arrangement implying 2 ct w r 0 second part lemma well known dbvkos97 lemma 26 let delta trapezoid weight k avd r let l g set disjoint trapezoids contained inside delta bottom top lines delta splitters belong ct w r weight least k 0 number trapezoids v proof either vertical sides ie splitters delta intersects k 0 4 lines charge trapezoid relevant splitter ct w r k 0 4 delta otherwise least k lines intersects top bottom parts namely lines intersection delta lie inside delta see figure 2 thus number trapezoids kk 0 2 definition 27 let k positive integer number let u set disjoint trapezoids set u k rcompliant trapezoid delta u weight least k ffi contained single trapezoid avd r delta union trapezoids j r note set 1ractive trapezoids c covering plane computed ith iteration cutrandominc nr compliant moreover remains true even cutrandominc performs merging lemma 28 let r selection r n distinct lines selection size r chosen equal probability let u nr rcompliant set trapezoids let parameter 1 r6 dnre proof since u nr rcompliant lemma 26 r ewdeltai1d n r e r lemma 23 theorem 29 expected size 1rcutting generated cutrandominc 2 expected running time onr integer 1 r n proof let csn r denote maximum expected size 1rcutting generated r maximum taken sets n lines plane suppose execute cutrandominc cr lines inserted c constant specified shortly stage expected size covering cr computed cutrandominc ocr 2 indeed trapezoid c union one trapezoids j cr hence lemma 22 ejcj ej j cr hence algorithm terminates cr lines inserted expected size covering 2 csdelta expected number vertical trapezoids contained delta belong final covering computed algorithm resume execution cutrandominc terminates however csdelta cswdelta dwdeltarne since interpret execution cutrandominc within delta executing cutrandominc fresh k delta order compute wdeltar cutting inside delta indeed set c 0 algorithm given trapezoid delta cutrandominc compute cutting inside delta lines k delta relevant behavior algorithm see figure 1 moreover analysis performance cutrandominc depend shape c 0 initialized thus csn r delta2cwdeltanr cs wdeltar delta2c cr cr cs c applying lemma 22 lemma 28 expected number vertical trapezoids c weight tncr o2 gammat4 cr 2 1 cr6 thus cr6 tc cs cr c tc cs cr c choose c sufficiently large constant solution recurrence 2 easy verify induction next analyze expected running time algorithm implement cutrandominc using conflict graph namely trapezoid delta c maintain list elements k delta similarly line maintain list active trapezoids c intersects zone line c let w denote expected work ith iteration algorithm easy verify say 10 analyze expected value w applying lemma 22 lemma 28 cutrandominc iterations performed ie random sample size gamma 1 probability trapezoid processed ith iteration algorithm wdeltan trapezoids inactive moreover delta processed ith stage work associated delta stage owdelta thus delta2c r wdelta delta2c hence ii delta2c lemma 22 lemma 28 thus expected running time algorithm first cr iterations ocnr let n r maximum expected running time cutrandominc maximum taken sets n lines plane consider set n r maximized arguing delta2cwdeltanr delta2c cr wdeltat1 n cr c tc cr c cr6 cnr tc cr c cr2 gammacr24 using lemma 28 c sufficiently large solution recurrence easily verified using induction onr completes proof theorem remark 210 apply lemma 23 directly 1ractive regions c axiom b hold case see figure 3 example shows axiom may violated use merging even use merging cutrandominc axiom b still violated see figure 4 algorithm cutrandomincworks also planar arrangements segments xmonotone curves number intersection pair curves bounded constant l 3 l 2 l 1 l 4 l 6 l 5 b c l 3 l 2 l 1 l 4 l 6 l 5 c l 3 l 2 l 1 l 6 l 5 b c ii iii figure 3 axiom b fails merging used thick lines represent two sets 100 parallel lines want compute 110cutting execute cutrandominc first 6 lines l 6 order note trapezoid intersects thick line active first trapezoid delta 0 inside 4abc becomes inactive created line l 5 inserted see parts ii however skip insertion line l 4 part iii corresponding inactive trapezoid delta 00 extend downwards intersect delta since delta 00 inactive decomposition plane inside delta 00 longer maintained particular implies trapezoid delta created since blocked delta 00 merging involving areas inside delta 00 take place contradiction axiom b since l 4 belong killing defining sets delta l 3 l 2 l 4 l 1 l 5 c l 6 l 7 l 3 l 2 l 4 l 5 c l 6 l 7 figure 4 axiom b fails even merging used cutrandominc indeed cutrandominc insert lines order l 1 trapezoid delta created see however skip insertion line l 1 trapezoid delta created ray emanating downward l 2 l 3 intersects follows immediately observing lemma 22 lemma 28 extended cases axioms b hold vertical decomposition arrangements set splitters arrangements lemma 211 let gamma set xmonotone curves pair intersects constant number points expected size 1rcutting generated cutrandominc gamma 2 expected running time onr integer 1 r n however arrangement set n segments curves might subquadratic complexity since number intersection points might subquadratic raises question whether cutrandominc generates smaller cuttings sparse arrangements definition 212 let gamma set curves plane denote gamma number intersection points pairs curves gamma lemma 213 let gamma set n curves pair curves gamma intersection points let gamma random permutation gamma expected complexity j gamma log n gamma j gamma decomposed arrangement computed incremental insertion algorithm without performing merging proof note intersection point pair curves gamma induces upward downward vertical walls expected number vertical walls j gamma gamma arguing proof lemma 22 additionally vertical walls defined endpoints curves gamma let p endpoint curve gamma probability vertical upward ray v p emanating introduce vertical walls j gamma probability fl chosen first curves gamma vertical ray intersects thus expected number superfluous vertical walls introduced v p thus total number vertical walls j gamma introduced endpoints arcs gamma log n lemma readily follows corollary 214 let gamma set n curves pair curves gamma intersection points let gamma r random selection r elements gamma expected complexity j gamma r log r proof note probability intersection point gamma appear rrgamma1 hence expected number intersection points arcs lemma readily follows applying lemma 213 j gamma r theorem 215 let gamma set n curves pair curves intersect constant number points expected size 1rcutting generated cutrandominc applied gamma expected running time log gamma proof proof tedious extension proof theorem 29 derive similar recurrences ones used proof theorem 29 deriving solving recurrences repeatedly apply bounds stated lemma 211 omit details remark 216 interesting question whether cutrandominc extended higher di mensions execute cutrandominc higher dimensions need use complicated technique decomposing vertical trapezoids whenever intersects newly inserted hyperplane chazelle friedmans algorithm uses bottom vertex triangulation decomposition however case easy verify cutrandominc might generate simplices defining set longer constant number hyperplanes implies lemma 23 longer applied cutrandominc higher dimension leave problem extending cutrandominc higher dimensions open problem research generating small cuttings section present efficient algorithm generates cuttings guaranteed small size algorithm based matouseks construction small cuttings mat98 first review construction show modify building small cuttings efficiently definition 31 mat98 let l set n lines plane general position ie every pair lines intersect exactly one point three common point line vertical horizontal xcoordinate intersections pairwise distinct level point plane number lines l lying strictly consider set e k edges arrangement l level k 0 k n edges form xmonotone connected polygonal line called level k arrangement l definition 32 mat98 let e k level k arrangement al edges left right let p point interior edge e qsimplification level k integer parameter 1 q defined x monotone polygonal line containing part e 0 left point p 0 segments p 0 p q part e right p let simp q polygonal line let l set n lines let e iq denote union levels denote set edges qsimplifications levels e iq matousek showed vertical decomposition plane induced simp q e iq assume n divisible 2r 1rcutting plane 1 moreover following holds theorem 33 mat98 let l set n lines general position let r positive integer let n2r subdivision plane defined vertical decomposition simp q e mq 1rcutting al index je iq j minimized moreover cutting generated 8r 2 remark 34 matouseks construction slightly improved noting leftmost rightmost points qsimplification level placed infinity replace first second edges qsimplification ray emanating p q parallel e 0 thing two last edges simplified level denote improved simplification simp 0 q easy prove using improved simplification results 1rcutting al 8r 2 trapezoids ii inspecting matouseks construction see find prescribed constant vertical decomposition induced simp q e iq 1rcutting c8r trapezoids construction carried computing picking minimal number n guaranteed larger average n 2 q unfortunately implementing scheme directly requires computing whole arrangement al resulting running time 2 let us assume moment one compute numbers n quickly following lemma testifies one compute number n 1 computing n lemma 35 let n positive integers whose sum known ad vance let 0 prescribed constant one compute index 0 k q mqe repeatedly picking uniformly independently random index q checking whether n mqe expected number iterations required proof let random variable value n picked ith iteration using markovs inequality 1 one obtain probability failure ith iteration 1 inequality asserts p r random variable assumes nonnegative values let x denote number iterations required algorithm ex bounded expected number trials first success geometric distribution probability 1 thus expected number iterations bounded 1 apply lemma 35 setting need supply efficient algorithm computing level arrangement lines plane lemma 36 let l set n lines plane one compute time level k al complexity level proof technique presented well known see bdh97 recent example include sake completeness exposition let e edges level k left right e rays let e edge level k clearly exists face f al e boundary f lies e particular edges bottom part f belong level k r faces al level k floor left right ray e 0 computed time since lies line l k l kth largest slope moreover intersecting l k lines l one compute e 0 linear time face al uniquely defined intersection halfplanes induced lines l faces f 1 compute halfplanes intersection corresponds f 1 log n time see dbvkos97 carry computation bottom parts dynamically maintain intersection representing f traverse level k left right use datastructure overmars van leeuwen ovl81 maintains intersection olog 2 n time update operation move f f i1 vertex v flip two halfplanes associated two lines passing v thus operation cost us olog 2 n time similarly given edge e boundary f compute next edge olog 2 n time thus compute level k al combining lemma 35 lemma 36 theorem 37 let l set n lines plane let prescribed constant one compute 1rcutting al 1 trapezoids expected running time algorithm nr log 2 n proof discussion enough find index 0 q gamma 1 dn2re remark 34 ii vertical decomposition simp 0 1rcutting required size picking randomly check whether je iq j compute e iq computing levels output sensitive manner using lemma 36 note je iq j abort soon number edges computed exceeds thus checking je iq j takes o1 time lemma 36 expected number iterations algorithm performs inequality je iq j satisfied thus expected running time algorithm nr log 2 n since vertical decomposition simp 0 resulting cutting computed additional o1 fact one also compute o1 trapezoid cutting lines l intersect 4 empirical results section present empirical results got computing cuttings plane using cutrandominc various related heuristics tested test program gui alogrithm presented paper avaliable web source form downloaded httpwwwmathtauacil sarielcgcuttingcuttingshtml 41 implemented algorithms using vertical trapezoids implemented algorithm cutrandominc presented section 2 well several algorithms constructing cuttings also experimented algorithm section 3 section report experimental results obtained algorithms implemented variants cutrandominc algorithms implemented following classical variant algorithm chazelle friedman cf90 constructing cutting pick sample r r lines compute arrangement active trapezoid delta 2 pick random sample r delta k delta size 6k log k deltajne compute arrangement avd r delta inside delta avd r delta 1rcutting classical algorithm performs resampling inside delta reaches cutting implementation naive simply continues recursively active subtrapezoids avd r delta cut randomized incremental cutrandominc without merging described figure 1 following four heuristics currently proof concrete bound expected size cutting generate also perform well practice parallel incremental let c covering generated ith iteration algorithm active trapezoid pick random line k delta insert delta ie splitting delta continue active trapezoids note unlike cutrandominc insertion operations performed locally inside trapezoid line chosen insertion trapezoid independent lines chosen trapezoids randomized incremental cutrandominc merging greedy trapezoid variant cutrandominc try smarter line inserted partition iteration let v set trapezoids c maximal weight pick randomly trapezoid delta trapezoids v pick randomly line k delta insert c greedy line similar greedy trapezoid compute set u lines w 0 maximal w 0 number active trapezoids c intersect line pick randomly line u insert current partition plane greedy weighted line similar greedy line weight function wdelta xi n 3r namely give higher priority lines intersect heavier 1ractive trapezoids 42 polygonal cuttings judging quality cuttings size cutting major concern however factors might also important example want regions defining cutting simple possible furthermore applications interested directly size cutting rather overall number vertices defining cutting regions useful applying cuttings dual plane transforming vertices cutting back primal plane done computation partition trees mat92 natural question following one compute better cuttings one willing use cutting regions different vertical trapezoids example one willing cut using nonconvex regions nonconstant description complexity size cutting improved however one wishes cut collection lines triangles instead trapezoids situation becomes somewhat dis appointing smallest cuttings currently known case generated taking cutting remark 34 splitting trapezoid two triangles results cuttings roughly 16r 2 triangles section present slightly different approach computing cuttings suggested us jiri write name matousek works extremely well practice new approach based cuttings using small polygonal convex regions instead vertical trapezoids namely apply cutrandominc region convex polygon constant complexity whenever insert new line active region split polygon two new polygons course might number vertices new polygon large split polygon two subpolygons ensuring number vertices new polygons threshold intuitively benefit approach number superfluous entities ie vertical walls case vertical trapezoids participating definition cutting regions figure 5 polytree algorithm time polygon split line might split split region might many vertices much smaller moreover since cutting regions less restrictive algorithm flexible maintenance active regions different methods tried polytree use cutrandominc region convex polygon k sides inserting new line first split active regions intersect two subpolygons split region r k sides split using diagonal r achieves best balanced partition r namely pair vertices b realizing following minimum min ab ab r set vertices r wr number lines intersecting r h ab ab closed halfplane lying right resp left ab see figure 5 polytriangle modified polytree generating cuttings triangles stage check whether newly created region r triangulated set inactive triangles applying arbitrary triangulation region r check triangles generated arbitrary triangulation r inactive replace r cuttings modified polytree generating cuttings triangles whenever region created check whether leaf triangle triangle defined three consecutive vertices region inactive find inactive triangle add immediately final cutting repeat process region shrunk 2 computing best ie weight heaviest triangle minimized triangulation relatively compli cated requires dynamic programming clear going perform better polydeadleaf described use polytree instead splitting along diagonal split along vertical ray emanating one vertices region algorithm also tries remove dead regions left right side region intuitively region extended vertical trapezoid convex ceiling floor two additional vertical walls theorem 41 expected size 1rcutting generated polyvertical 2 expected running time onr integer 1 r n proof sketch proof first note number regions maintained polyvertical ith iteration oi 2 since region maintained polyvertical union trapezoids j total complexity j oi 2 lemma 22 let maximal number vertical region maintained curing execution polyvertical parameter algorithm know region p 1ractive ith iteration algorithm p must contain least one vertical trapezoid 28 expected number trapezoids weight larger dnre thus exponential decay bound distribution heavy trapezoids execution algorithm derive similar recurrences recurrences used theorem 29 bound running time size cutting generated polyvertical remark 42 note polygonal cutting methods except polyvertical even clear number regions maintain ith iteration oi 2 thus proof theorem 29 work methods 43 implementation details underlying datastructure testing implemented historygraph datastructure sei91 random arrangements constructed choosing n points uniformly independently left side unit square similarly right side unit square sorted points connected lines transposed manner yields random arrangement intersections inside unit square implemented algorithm c encountered problems floating point robustness early stage implementation decided use exact arithmetic instead using leda rational numbers mn95 solved robustness problems deal issues ffl speed using exact arithmetic instead floating point arithmetic resulted slow factor 2040 time perform operation exact arithmetic proportional bitsizes numbers involved minimize size numbers used computations normalized line equations coefficients integer numbers reduced form ffl memory consumption leda rational represented block memory dynamically allocated heap order save memory consumed time used dynamic memory allocator observe representation vertical decomposition number appears several places ie xcoordinate intersection point appears 6 different vertical trapezoids reduce memory consumption storing number use repository rational numbers generated far algorithm whenever compute new xcoordinate search repository exist insert particular vertical trapezoid represented two pointers x lef x right coordinates pointers top bottom lines repository implemented using treaps sa96 44 results empirical results got algorithmsheuristics subsection 41 depicted tables value r value n computed random arrangement lines inside unit square described arrangement performed 10 tests algorithmheuristic tables present size minimal cutting computed tests entry size output cutting divided r 2 addition table caption presents range containing size cutting obtained matouseks algorithm mat98 noted remark 210 interesting question whether using merging results smaller cuttings generated cutrandominc tested empirically results presented table 6 seen table 6 using merging generate smaller cuttings improvement cutting size rather small difference size cuttings generated seems less 2r 2 45 implementing matouseks construction table 7 present empirical results matouseks construction comparing slight improvement described remark 34 small values r improved version yields considerably smaller cuttings matouseks construction making best method aware constructing small cuttings implemented matouseks algorithm naively using quadratic space time cur rently implementation used larger inputs runs memory implementing efficient algorithm described theorem 37 nontrivial since requires implementation datastructure overmars van leeuwen ovl81 however critical reduce size cutting large inputs algorithm theorem 37 seems best available option look papers cuttings possible picking r lines computing arrangement might enough using distribution lemma didnt idea appear matousek paper partition trees work lazy cuttings penalty lazy cuttings indeed useful indicate introduction cuttings interesting add reference matousek deterministic construction cuttings 46 polygonal cuttings results polygonal cuttings presented tables 8 9 seen tables polygonal cutting methods perform well practice particular polytree method generated cuttings average size roughly 75r 2 beating cutting methods use vertical trapezoids triangles situation even better polydeadleaf generates cuttings triangles size 12r 2 better additive factor 4r 2 best theoretical bound summarize polygonal cutting methods seems clear winner practice generate quickly cuttings small size small number vertices small number triangles conclusions paper presented new approach different cf90 constructing cuttings new algorithm rather simple easy implement proved correctness bounded expected running time new algorithm demonstrating new algorithm performs much better practice algorithm cf90 believe results paper shows planar cuttings practical might useful practice constructing datastructures rangesearching moreover empirical results show size cutting constructed new algorithm considerably larger cases better cuttings computed currently best theoretical algorithm slow useful practice due running time matousek mat98 empirical constants obtain generally 10 13 vertical trapezoids polygonal cuttings get constant 7 cutting convex polygons using polytree 6 vertices moreover various variants cutrandominc seem produce constants rather close noted method described remark 34 generates smallest cuttings vertical trapezoids rather slow naive implementation tables 9 present running time got various cutting algorithms information taken reservation since serious effort gone optimizing code speed measurements tend change execution execution recall also use exact arithmetic slows running time significantly however provide general comparison running times various methods practice given results recommend use practice one polygonalcutting methods perform well practice used whenever possible restricted vertical trapezoid cutrandominc seems like reasonable algorithm used practice without merging nontrivial part implementation algorithm several interesting open problems research ffl one obtain provable bound expected size cutting generated polytree methods ffl one prove existence cutting smaller one guaranteed algorithm remark 34 specific values r example table 1 suggests smaller cutting exist 2 particular test results hint cutting made vertical trapezoid exist cutting size guaranteed matouseks algorithm mat98 48 ffl one generate smaller cuttings modifying cutrandominc smarter decision merge trapezoids ffl simple practical algorithm computing cuttings three higher di mensions current algorithms seems far practical acknowledgments author wishes thank pankaj agarwal boris aronov herve bronnimann bernard chazelle jiri matousek joe mitchell helpful discussions concerning problems studied paper related problems wish thank micha sharir help guidance preparing paper r kinetic binary space partitions triangles geometric partitioning applications area bisectors polygon force equilibria programmable vector fields deterministic view random sampling use geometry new applications random sampling computational geometry computational geometry algorithms applications leda platform combinatorial geometric computing maintenance configurations plane randomized search trees simple fast incremental randomized algorithm computing trapezoidal decompositions triangulating polygons tr ctr micha sharir emo welzl pointline incidences space proceedings eighteenth annual symposium computational geometry p107115 june 0507 2002 barcelona spain micha sharir emo welzl pointline incidences space combinatorics probability computing v13 n2 p203220 march 2004 siuwing cheng antoine vigneron motorcycle graphs straight skeletons proceedings thirteenth annual acmsiam symposium discrete algorithms p156165 january 0608 2002 san francisco california sariel harpeled micha sharir online point location planar arrangements applications proceedings twelfth annual acmsiam symposium discrete algorithms p5766 january 0709 2001 washington dc united states hayim shaul dan halperin improved construction vertical decompositions threedimensional arrangements proceedings eighteenth annual symposium computational geometry p283292 june 0507 2002 barcelona spain pankaj k agarwal micha sharir pseudoline arrangements duality algorithms applications proceedings thirteenth annual acmsiam symposium discrete algorithms p800809 january 0608 2002 san francisco california