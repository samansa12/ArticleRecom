contexts dynamic predicate logic paper introduce notion context groenendijk stokhofs dynamic predicate logic dpl use contexts give characterization relations assignments generated composition tests random resettings case working infinite domain relations precisely ones expressible dpl allow arbitrary tests starting point discuss possible extensions dpl way extensions interact notion context b introduction dynamic predicate logic dpl invented jeroen groenendijk martin stokhof see 1 see also section 2 specification language better module specification language meanings fragments natural language research concerning dpl gone integrating versions montague grammar see 5 integrating frank veltmans update semantics see 6 dpl theory testing resetting variablesregisters fundamental operations computer science thus apart use logical semantics dpl simple theory basic operations 1 dpl natural variant predicate logic mainly differs treatment scope existential quantifier certain basic truths variables predicate logic however fail dpl see section 2 see also 2 similar observations dple study dpl kin makes dependence truths specific choice scoping mechanisms standard predicate logic visible light varied interest dpl seems good idea make closer study metamathematical properties focus closely related questions ffl relations assignments definable dpl sense specify later ffl dpl treat variables throw light questions good notion context dpl indispensable studying classical dpl based total assignments contexts appear objets trouves part design language become clear paper viewed result abstracting away erasing certain properties predicate logical language vocabulary structure thus yielding underspecified language underspecification simply means denotations meanings contexts properties relations rather relations 1 dpl one theory family alternatives predicate logic alternatives resetting register replaced related actions like create new register see section 7 references view happens paper different light deeper interest grand questions ffl general theory information processing look like ffl nature variable seems questions closely related ideas involving dynamics contexts play role answer study dpl analogous study fruitfly laboratory situation allows us focus problems involving dynamics variables information processing still problems remain feasible end introduction brief sketch paper section 2 straightforward introduction predicate logic contains technical material reader needs know discussion applications discourse phenomena however reader consult 1 section 3 presents theory contexts dpl study contexts mathematical objects right establish connections language semantics materials concerning information ordering contexts placed appendix section 4 treat switching propery property characteristic dpldefinable relations section 5 contains main result paper relation infinite domain dpldefinable iff context satisfies switching property next section touch subject extending dpllanguage new operations conjunction disjunction consider question whether extensions support good theory contexts produce two extensions complete relations context words relations definable extensions last section 7 devoted idea making context part semantics 2 dynamic predicate logic provide basic definitions dpl nothing section pretends original start introducing basic relational notions definition 21 let x nonempty set relx set binary relations x ie x let r 2 relx define 1 composition r ffi r defined xr ffi sy 9z xrzsy note composition order application 2 dynamic implication rs r defined xrsy use overloads symbol since also use implication objectlanguage write r r 3 id x identity relation r condition test r id x 4 consider x define diagy g 5 domr fx2x j 9y xryg codr fy2x j 9x xryg notion dynamic implication first introduced hans kamp pioneering paper 4 note domr relations range diag precisely conditions writing z xny z thus diag homomorphic embedding structure hx structure sometimes confuse relational context set x relation diagx need relational notions specifically concerned relations assignments definition 22 let nonempty domain let var set variables let r2reld var define result changing values f v varnv write v fvg ffl hv iset f 2 fi v g finitely restricted hiiset finite condition finitely restricted iff image finitely restricted set want make dependence var visible add subscripts collect simple facts concerning notions note classical meaning existential quantifier cylindrification given turn definition dpl definition 23 dpllanguage l structure hpred ar var coni pred set predicate symbols ar function pred natural numbers including 0 var possibly empty set variables con possibly empty set constants let ref var con set referents use v constants referents set lformulas l smallest set l ffl oe 2 l oe oe feel faithful semantics leave brackets formation rule dot officially nothing important hangs choice paper get ambiguous syntax still unique meanings since operation composition semantic counterpart associative alternative notation 9v v random reset use oe 8voe abbreviations respectively oe 9v oe x 2 var r 2 ref x r distinct write x r definition 24 dplmodel dpllanguage l structure hd ii nonempty set domain function assigns predicate symbol p pred l arpary relation constant c element assm set assignments var consider r 2 ref define ae interpretation function write oe jm oe define validity dpl usual oe appropriate given language binary relation r definable dplmodel language l lformula oe defines r ie often suppress subscript model clear context could extend dpllanguage function symbols copying way done ordinary predicate logic however kind result extension immaterial since usual trick eliminate function symbols works also dpl small twist eg p fgx translated 9ugx u9vf u vp v remind reader geachs donkey sentence farmer owns donkey beats sentence translated dpl compositional way one striking feature dpl structural values predicate symbols may assume possible meaning objects provided semantics allow tests second striking feature time symmetry resetting composition constrast strongly time asymetric intuition say meaning p x9xqx asymmetry intuition may explained fact tend think terms successful resetting terms resetting relation ordinary predicate logic interpreted dpl follows suppose predicate logical language connectives quantifiers 9x translate follows ffl commutes atomic formulas find oe usual valuation function predicate logic translation compositional shows may consider predicate logic subsystem dpl also kind inverse translation ffi satisfies oe involves renaming variables cannot taken show dpl subsystem predicate logic 3 contexts dynamic predicate logic section study notion context connections relations language placed materials concerning information ordering contexts appendix since one hand conceptually relevant clear place total picture hand direct bearing upon main results paper 31 introductory remarks motivate notion contexts first give intuitive discussion substitution kinds variable occurrences dpl 2 predicate logic variables may occur formula two ways freely bound free variables admit certain conditions substitution bound variables may renamed salva significatione ffconversion lets write oe x oe result substituting x oe predicate logic eg f ic proper analogue fact dpl simplify discussion treat special case refrain giving official definitions consider dplformula p x9xqx9xrx 1 f ic 2 f p x9xqx9xrx g ic meditation upon 1 2 suggests dpl distinguish two kinds substitution left substitution right substitution corresponding kinds two kinds free occurrence right free also speak input occurrences output occurrences following temporal intuitions ignoring essentially timesymmetric character resetting composition may also call left free occurrences simply free right free occurrences actively bound consider following formula say oe 0 tagged occurrences x superscript numerals see x 1 left free input occurrence left substitution x cause replaced form semantics values assigned x 0 x 1 unified form 9xoe 0 x 1 bound initialized new quantifier symmetrically x 7 right free actively bound scope right substitution form oe 0 values x 7 x 0 unified form oe 0 9x x 7 aborted neither x 1 x 7 open ffconversion salva significatione x 3 accessible substitution ffconvertible replacing x 2 x 3 x 4 say result formula resets oe 0 doesnt call x 3 garbage occurrence something exists longer used 3 x 6 also inaccessible substitution addition ffconverted replacing x 5 x 6 change meaning oe 0 say x 6 clasically bound finally consider x 2 x 4 x 5 occurrences purely syntactical sense represent files carrying information signal incoming files labeled x unified outgoing files labeled x say occurrences blockers x 5 blocker oe 0 whole 4 2 subject kinds variables substitution would merit far extensive discussion regrettably discussion beyond scope present paper 3 notion garbage studied 8 9 4 even vermeulens dple see 7 quite close dpl discussion kinds occurrences would different contexts present setup signal presence input occurrences blockers output occurrences 5 abstract comparison formulas sense contain information number place occurrences contexts studied independently connection logical language contexts familiar predicate logic context associated formula oe simply set f free variables oe 6 salient property contexts predicate logic follows suppose f context oe work section devoted proving appropriate dplanalogue property predicate logic 32 contexts considered subsection treat contexts mathematical objects right natural connection dpl surface subsequent subsections definition 31 dplcontext triple hi b oi b finite sets variables equivalently b set input set ie set incoming assignments constrained set output set ie set outgoing assignments constrained finally set b set blocks set variables identity input output value cut block barrier past future breaking link input outputvalue write defined converges undefined diverges define ffl id h partial operation contexts defined otherwise use c variables contexts write c first component c etcetera meanings objects relations operations become apparent subsection 33 lemma 32 operations ffl well defined proof see ffl well defined note 5 fact good reasons also put witnesses garbage contexts present paper since necessery results moreover adding garbage leads considerable complication framework necessitates bringing category theory refer reader 9 6 reader referred 3 categorytheoretical framework appropriate study contexts predicate logic trivial well defined proof well defined refer reader appendix 2 theorem 33 contexts id ffl form monoid moreover partial ordering proof theorem easy appendix show defined infimum wrt consider monoid contexts represented alternative way follows monoid monoid two generators b given equations ffl b tabel monoidal operation ffl follows ffl e b ab ba aba e e b ab ba aba ab ab aba aba ab ab aba ab ab aba aba ba ba ba b b ba ba aba aba aba ab ab aba aba monoid contexts given set functions var finitely many arguments equal e put f ffl gv fv ffl gv triple hi b oi translates function f eg translates triple abag etcetera easily seen translations give us isomorphism monoids representations fact isomorphic monoid contexts case fxg alternative representation possible fact monoidal operation treats variables independently difficult extend structure get function representation also paper stick set representation since representation closest relational notions need formulate theorem contexts relations theorem tells us contexts function representation however two advantages first easier use computations head secondly connection framework developed 9 study contexts perspicuous 33 contexts relations turn connection contexts relations 7 show connection commutes wrt fflffi fix nonempty domain definition 34 consider relation r var r hi b oirelation say c context r r crelation r iborelation r hi b oi relation hi b oi assign context c property meaning fcg set crelations var often suppress subscript heuristic property follows r means r concerned values incoming assignment r cares values outgoing assingment constraint going input output values variables b changed proving facts notion introduced sample immediate insights 7 semantics contexts given certainly exhaust possible uses contexts eg problem explaining variable occurrence certain kind left untouched undoubtedly contexts play role solving problem ffl r hi iirelation precisely r hiicondition show contexts describes information ordering contexts idea simply c informative fcg fdg theorem 35 1 c fcg fdg 2 suppose jdj 2 fcg fdg c proof prove 1 let c r 2 fcg want show trivially r contained 0 show 0 immediate f 0 frgio g 0 show f bg suppose since frg r b v 62 b finally since r crelation may conclude f 0 rg 0 prove 2 write x c varnx let jdj 2 fcg fdg since b 2 fcg fdg hence using facts page 3 find b immediate arguments 0 0 analogous one another give argument icase suppose reductio v 2 ini 0 let e distinct elements test fvd consider relation r r 2 fdg consider f case v 2 b 0 f e 0 frgio 0 g since already shown g hence since r 2 fdg f rg quod non turn case v 62 b 0 since 0 nb 0 frgio 0 g e find f e thus since r 2 fdg f v quod non 2 theorem 35 shows clearly contexts stand manymany relation relations thus question context r definite answer appendix show one notable exception every relation informative context next lemma may used cases simplify verification relation hi b oi lemma 36 r oirelation proof clearly sufficient show r b left right immediate since io io b converse suppose f 0 frgio b g 0 show gio g 0 consider v 2 case v 2 b also since frg r b v 62 b putting identities together find following lemma quite useful applications see example 314 write b lemma 37 suppose r hi b oirelation f 0 frg unique g 0 g g 0 following property set variables j f 0 j f g 0 j g consequence find g 0 g hence g 0 ia g also g 0 io g proof let r hi b oirelation f 0 frg g 0 f 0 rg 0 ib g must satisfy f 0 bg 0 ib g possible choice verify g 0 thus defined satisfies sufficient show gio g 0 turn follows immediately property last part theorem consider set j f 0 j f suppose v 2 j case v 2 b v case finally f 0 since v 62 b putting things together find note lemma plays significant role due forward looking time asymmetric nature however definitions implication validity dpl sufficient applications immediate consequence lemma r hi b oirelation domr hiicondition symmetry codr hoicondition theorem 38 suppose r crelation drelation r ffi c ffl drelation proof easy see r converse suppose f 0 b 00 show f 0 r ffi sg 0 h frhsg partition var three sets show f 0 rh 0 sg 0 first prove f 0 rh 0 check conditions applying fact r hi b oirelation 1 f 0 00 f hence since 00 f 0 f 2 frh 3 hio 0 h 0 hence hioh 0 4 show f 0 bh 0 consider variable v b show f 0 v run trouble case v x 3 ie v bnb 0 0 first possibility excluded fact v b suppose v 0 h 0 r hi b oirelation r b may conclude case 00 case v 2 0 find v 2 0 nb 00 cases v 2 00 since f 0 00 f follows v composing identities find 14 may conclude f 0 rh 0 next check conditions applying fact hi 1 hio 0 h 0 hence h 0 0 h 2 hsg 3 gio 00 g 0 hence since 0 00 gio 0 g 0 4 show h 0 b 0 g 0 consider variable v b 0 show h 0 inspecting definition h 0 see desired identity fail either v 62 b consider case v 62 b already showed f 0 bh 0 moreover assumed f 0 b 00 find h 0 v next consider case v 2 b v 2 0 b choose v outside b 0 need consider possibility v 2 0 early assumption gio 00 g 0 v 2 0 nb v putting identities together find h 0 14 h 0 sg 0 2 theorem 39 suppose r crelation drelation r cdrelation proof suppose r crelation drelation let trivially r moreover since id 00 r prove converse suppose f 0 00 f fr sf show f 0 r sf 0 suppose f 0 rg 0 lemma 37 g frgi 00 b g 0 follows g 0 0 g since find h gsh applying lemma 37 find h 0 g 0 sh 0 close subsection languagefree soundness result definition 310 relation var dpldefinable iff generated composition resettings v finitely restricted conditions theorem 311 every dpldefinable relation iborelation proof obvious induction way relation generated 34 contexts language turn discussion contexts connected formulas definition 312 assign every dplformula oe context c oe define write oe c oe etcetera note definition correctly defines function associativity ffl prove main theorem section theorem 313 every formula oe oe c oe relation var proof proof induction oe using theorems 38 33 atomic cases easy 2 obtain following picture way contexts work oe mapped c oe abstracting part vocabulary part structure c oe mapped fc oe g property relations via different route oe mapped relation oe two routes connected theorem note c oe always minimal context oe witnessed fact c identity var thus admitting context h example 314 provide two examples theorem 313 combination lemma 37 used verify valid principle dpl first prove suppose oeg produce h goeh since f oeg find j joeg theorem 313 jb oe g oe j gi oe joeg theorem 313 lemma 37 find h goeh second example prove suppose g produce h f h assumptions j f oeij hence f b oe fi thus fi ij may conclude h f h examples demonstrate role contexts must play formulation schematic principles dpl 4 switching property section 3 introduced contexts ibos properties relations showed every oe iborelations first conjecture characterizing dpldefinable relations would precisely iborelations see however conjecture false characterize dpldefinable relations need one extra property switching property present section prove dpldefinable relations switching property soundness section 5 show every iborelation infinite domain switching property dpldefinable completeness definition 41 relation r var switching property either condition variables x necessarily distinct codr second case obtains call variables x involved pair switching variables might one pair switching variables various ways define switching property submit one presented natural one lemma collect helpful insights lemma 42 suppose r relation var 1 2 suppose r c conditions relation domr 3 suppose c condition c easy proof left reader theorem 43 every dpldefinable relation switching property proof case r condition done suppose r condition easily seen r must form c conditions c c 0 relation formula oe defining r x would correspond first existential quantifier occurring oe last note allow x variable even first last existential quantifier occurrence occurrence using lemma 42 domr domr domr domr rthe results section 3 section combine obvious soundnessresult theorem 44 every dpldefinable relation iborelation switching property example 45 show use switching property prove certain relations dpldefinable suppose jdj 2 ffl let r x xy r iborelation context hfx yg fx yg fx ygi suppose r switching property r evidently condition let v w pair switching variables let frg 6 e using fact domain r set assignments find hence switching property f e rg r obviously injective contradiction suppose model usual structure natural numbers let x x x iborelation context hfxg fxg fxgi switching property since condition domain set assignments injective iborelation surprisingly best context find hfx yg fx yg fx ygi 8 suppose switching property condition find switching variables v w symmetry may assume v 6 x find f g fsg fx 6 gx choose 6 gv using fact domain set assignments find f switching property f g two distinct variables x v f gv clearly impossible 8 discuss fenomenon detail subsection 63 5 dpldefinable relations infinite domain sections 3 4 seen dpldefinable relations iborelations switching property show converse case domain infinite theorem 51 let infinite set dpldefinable relations precisely iborelations switching property var proof one direction previous results let r hi b oirelation switching property case r condition done suppose r condition let x pair switching variables switching property cody note domr hiicondition codr hoicondition thus sufficient show x dpldefinable x hinfxg b onfygirelation x 2 b renaming see sufficient prove hi b oirelation r x 2 b x 62 62 dpldefinable assume x 6 case proof simpler increase readability specify r dpllanguage introduce along way suppose g k supposed mutually distinct similarly sets since infinite coding finite sequences elements par abus de langage confuse coding ordinary sequences elements language 1ary predicate symbol p remember x short 9yy x formula oe given stands obvious condition note oe hi b oirelation claim r oe suppose first frg take x remember x 62 g clearly f g witness hfi 1 ii ip next set find using 62 since f bg easy see converse suppose f 0 oeg 0 let h 1 going apply fact r hi b oirelation fact h 1 definition p find f g frg fi 1 x since x 62 follows f 0 f collecting see frg lemma 36 need check consider 62 find h 3 finally v among b putting itemized insights together may conclude f 0 rg 0 2 6 extensions dpllanguage consider three extensions dpllanguage one conjunction interpreted intersection relations one new quantifier 99 one disjunction interpreted union relations show contexts work extensions contexts provided disjunction optimally informative intuitively queer however give hints think apparent defect repaired show 99 definable using system 99 iborelations definable 61 conjunction study effect adding intersection relations dplrepertoire one way thinking r reset simultaneously via r via compare results equal make output new relation shared output otherwise abort syntactical level reflect new operation extending language dpl adding clause ffl oe 2 l oe 2 l call new language l semantic clause oe oe define intersection contexts follows note welldefined operation contexts define note difference easy see precisely infimum respect theorem 61 let r crelation let drelation r cdrelation proof suppose conditions theorem fulfilled let suppose fr sg follows f b b 0 g r 00 converse suppose f 0 00 f extend definition c oe new language adding clause c oe theorem 61 immediately yields next theorem theorem 62 oe c oe relation every oe2l consider example let c g let oe9b 1 thus example conjunction contexts gives us intuitive result ie condition lets say dplrelations given domain relations domain generated finitely restricted conditions resettings using composition intersection results present section show dplrelations iborelations results next section imply conversely every iborelation dpl 62 new existential quantifier define 99xr x case r hi b oirelation see 99xr x ffi bnfxg follows result subsection 61 99r hinfxg bnfxg onfxgi relation extend language dpl adding clause ffl oe 2 l v 2 var 99voe 2 l note overloading notations new language l99 new semantical clause obvious 99voe 99v definable l follows suppose c put 9xoe9x 9b theorem 63 nonempty domain dpl99definable relations precisely ibo relations proof sketch already seen every dpl99definable relation ibo converse suppose r g k supposed mutually distinct similarly sets take dpl99 language pary predicate symbol p fo 1 let variables disjoint b let oe given clearly oe hi b oirelation verification r oe along lines proof theorem 51 2 example 64 show define three relations example 45 bit theorem promises give explicit descriptions p defined note gives us expected context hfx yg fx yg fx ygi defined strictly speaking working relational language suggestive notation say sv x context produced formula expected ffl define 9x9y gives us context hfx yg fx yg fx ygi discuss context next subsection since 99 definable using expressive completeness 99 wrt iborelations implies expressive completeness finally translate predicate logic dpl changing 9clause earlier translation 9oe 99oe remarkably old new translation produce precisely relations semantical level operations like thereis actions sense semantics transformers actions yet tendency understand 99xoe dynamically sequence actions reset x execute oe set x back original value problem way viewing things summarized question store original value x restore end dplsemantics supply right kind memory realize 99oe sequence actions rather something much like richer semantics kees vermeulens dple see 7 variablename store one value stack values original value x simply stored new one relations context 17 63 disjunction section brief look problem adding disjunctionunion dpl adding disjunctionunion evokes problems definitely beyond scope present paper offer tantalizing remarks one way thinking rs choose r reset via relation chosen syntactical level reflect new operation extending language dpl adding clause ffl oe 2 l oe 2 l call new language l semantic clause oe oe could context x experimentation shows best seems wasteful way represent variable handling relation intuition tells us x pure resetter something constrains wrt x resetting part contexts somehow crude represent choice well example tell us strict sense present framework wrong suggests possibly could better might try richer notions context obvious proposal take context new sense set contexts old sense set given disjunctive reading 9 eg would c 9x9yp xy note eg second occurrence x 9x9yp x seems ambiguous free actively bound ambiguous occurrence handle theoretically propose addres question elsewhere 7 relations context dpl meanings relations contexts studied appear properties relations could give alternative semantics dpl building context meaning thus take meanings pairs hc ri r 2 fcg lets call pair crelation define new domain meanings one hand essentially richer old one since relation falls several contexts hand threw noniborelations away lift notions intoduced paper crelations ffl ccondition crelations form hhi ii ri ffl diagdomri similarly cod ffl crelation r switching property either ccondition variables v w ffl crelation dpldefinable given domain generated using ffl cconditions resettings 9 fact think proposal right direction still quite right convinced enriched semantics better usual one argue case relations context similar way upgrade 99 inspection proofs paper shows case infinite dpldefinable crelations precisely ones switching property moreover crelations given domain infinite dpl99definable consider example remember let model domain given assume least two elements let id id var consider three crelations associate relation id 1 2 3 1 2 cconditions hence dpldefinable fact defined language respectively contrast 3 condition easy see 3 switching property since domain internal relation id consists assignments id injective hence 3 dpldefinable note hh fxg idi crelation step modifying semantics make assignments local idea context provides filesdiscourse referentsvariables variables defined thus meaning objects would form hhi b oi ri r would relation taking input assignments defined yielding output assignments defined approach leads semantics much like vermeulens referent systems see 8 one effect modification leads somewhat different view contexts local approach contexts central engines manage flow files interactions meanings dramatic view contexts elaborated 9 concluding remarks paper introduced notion context specified connections relational semantics language used contexts prove characterization dpldefinable relations moreover illustrated usefulness contexts formulating verifying valid sequents dpl illustrated fact understanding going automatically preserved extend dpllanguage eg adding disjunction leads ambiguous occurrences variables observation tells us study extensions provide us clues regarding question variable occurrence certain kind apart concrete results general conclusions may draw paper first one surely study elementaria dpl necessary rewarding questions nature variable occurrences proper notion syntactic substitution etcetera appear new light fruitfulness study dpl independent question whether dpl really best choice medium representing dynamic phenomena one reason sense relational semantics dpl simple therefore easier make progress second conclusion rewarding engage study stresses differences dpl predicate logic much effort gone integrating dpl classical montague framework project unavoidably conservative flavour result unfamiliarity strangeness dpl underadvertised precisely mastering strangeness provides us better insight formerly familiar notions third conclusion simply contexts essential study dpl kin may want vary contexts eg may want add garbage elements ignore ocomponent contexts per se stay third conclusion points larger programmatic point study contexts way contexts contents one central endeavors study information processing dynamics references 19 acknowledgements thank kees vermeulen many enlightening conversations careful reading version paper grateful students various classes dynamic logic amsterdam utrecht providing critical forum ideas dpl dynamics r dynamic predicate logic counting variables dynamic setting categorical type theory theory truth semantic representation anaphora logic change defaults update semantics sequence semantics dynamic predicate logic merging without mystery dynamic bracketing discourse representation tr ctr c f vermeulen variables stacks journal logic language information v9 n2 p143167 april 2000 c f vermeulen text structure proof structure journal logic language information v9 n3 p273311 july 2000