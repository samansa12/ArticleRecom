scalable humanfriendly resource names currently uniform resource locators urls used name access webbased resources however urls pose significant scalability problem cannot used refer replicated web pages authors propose new uri scheme called humanfriendly names hfns solve scalability problem hfns highlevel names easytouse humans name web resources locationindependent way article describes scalable hfntourl resolution mechanism based urns makes use domain name system dns globe location service b introduction resources world wide web named using uniform resource identifiers uris common wellknown type uri uniform resource locator url url used web two distinct purposes identify resources access resources unfortunately combining two leads scalability problem since resource identification different requirements resource access consider example popular web page want replicate improve availability currently replicated web pages named means multiple urls one replica shown figure 1a however hide replication users make replication transparent need name identifies page words name refer specific replica instead refer set replicas whole uniform resource names urns provide solution scalability prob lem urn also type uri differs url identifies web resource urn indicate location resource paper updated version technical report ir466 contain information might change future good example urn isbn number book isbn number identifies book copies access resource identified urn urn needs resolved access information url using urns identify resources urls access resources allows one urn indirectly refer many copies different locations shown figure 1b separation allows transparent replication web resources moreover since urn stable reference resource location also move resource around without changing urn aurn thus support mobile resources indirectly referring set urls changes time url url url replica replica replica url url url url url url urn urn hfn replica replica replica replica replica replica b c figure 1 naming replicated resource using multiple urls b using single urn c using hfn combined urn since urns intended primarily used machines identify sources requirement make easytouse remember humans requirement urns regarding humans stated rfc 1737 urns human transcribable instance isbn numbers easily written copied humans easily remembered however humans need way name web resources way names easily shared remembered fill gap urns provide humans need new kind uri needed suggested rfc 2276 propose introduction new uri scheme called humanfriendly names hfns meet need hfns tailored convenient use humans therefore explicitly allow use descriptive names unlike urns different approaches human friendly naming two wellknown approaches yellow pages white pages services yellow pages approach use directory service based ldap 6 service allows user search resource based attribute values assigned resource main drawback directory services limited scalability practice implementations based localarea networks offer acceptable performance largescale worldwide directory services yet developed best current implementations constructed federations local directory services searches allowed span multiple sites unless severely restricted white pages approach make use possibly hierarchical naming graph used file systems domain name system dns prime example traditional naming services although naming services offer less advanced facilities directory services proven easily scale worldwide networks millions users perspective choose base hfns hierarchical name space implemented using dns hierarchical name space provides users convenient wellknown way name resources return choice dns later like urn hfn needs resolved one urls user needs access named resource propose twostep process hfn resolution approach bind hierarchical hfn urn bind urn possibly multiple urls described hfn resolution consists first resolving hfn associated urn resolving urn associated urls shown figure 1c many advantages twostep approach resource repli cated moved another location affect name given users likewise user free change hfn since affect placement replicas moreover user may even decide use several names refer resource similar use symbolic links file systems hfntourl resolution mechanism pays specific attention two scalability issues first support large number resources second support resources distributed large geographical area best knowledge design provides first solution largescale hfntourl resolution model naming system restrict naming highly popular replicated web resources support resource types personal web pages highly mobile resources yet incorporated also assume changes particular part name space always originate geographical area reason choosing restricted resource model allows us make efficient use existing dns infrastructure given restrictions hfn scheme currently appropriate replacement urls general since hfns implemented using dns syntax closely follows structure domain names example hfn refers source code current stable linux kernel hfnstablesrclinuxorg hfn prefix identifies uri scheme rest actual name resource security policy minimal want prevent unauthorized changes hfntourl map ping make hfntourl mapping confidential since assume hfns shared open much way urls shared today since use locality prime importance scalability want hfn resolution service various components use locality possible resolving name locality used two distinct ways first resolution service provide user access nearest replica type locality needed scalable web system second form locality requires name resolution process also use nearby resources possible example assume user located san francisco wants dns name vunl resolved current dns name resolution normally proceeds root server name server nl domain located netherlands name server vrije universiteit located amsterdam resource named vunl happens replicated already available san francisco lookup request traveled across world subsequently return address close requesting user case would better name resolution process would used name servers proximity user architecture general form hfntourl mapping ntom relation words multiple hfns may refer set urls mapping may change regularly example resource given extra name replica added moved another location efficiently store retrieve update hfntourl mapping split two separate mappings discussed first mapping hfntourn mapping second mapping urntourl mapping use urns provide us stable globally unique name every resource splitting hfntourl mapping two separate mappings nto1 relation 1tom relation far easier maintain compared single ntom relation main purpose hfntourn mapping uniquely identify resource providing urn hfntourn mapping maintained name service urntourl mapping maintained location service whose sole purpose locate resource hfn resolution thus consists two steps first step hfn resolved urn name service second step urn resolved url location service type urn used naming scheme determined location service use naming system add three new elements normal setup web browsers http servers hfntourl proxy name service location service task hfntourl proxy recognize hfns resolve querying name location service operates front end two services url obtained location service proxy accesses named resource design chose proxy separate process interact standard web browser however plugin module introduce functionality directly web browser figure 2 shows setup propose retrieve web resources named hfns user enters hfn web browser browser contacts hfntourl proxy obtain web resource named hfn step 1 proxy recognizes hfn contacts name service step 2 name service resolves name urn returns proxy step 3 proxy contacts location service step 4 location service resolves urn url returns proxy step 5 proxy contact http server storing named resource step 6 returns html page step 7 proxy returns html page web browser step 8 proxy web browser name service server location service2 357 figure 2 setup retrieve web resources named hfns name service use dns store mapping hfn urn dns moment primarily used name internet hosts email destinations however reuse existing dns infrastructure hfns minimal changes explain next domain name system dns provides extensible hierarchical name space general naming authorities delegate responsibility parts name space subdomains specific naming authorities example naming authority responsible com domain delegates responsibility intelcom domain intel corporation naming authority responsible providing resources needed store query dns name decide names store subdomain intel corporation thus create whatever host name email destination wants subdomain resolving host name dns consists conceptually contacting sequence name servers domains stored sequence name servers increasingly specific allowing resolution increasing part host name example resolve host name wwwintelcom resolution process visits turn name servers responsible root com intelcom domains respec tively last name server able resolve complete host name enhance performance dns makes extensive use caching name server asked resolve dns name recursively contact sequence name servers resolve name name server cache intermediate end results resolution process procedure avoids contact sequence name servers second time similar name looked however effective caching dns needs assume nametoaddress mapping change frequently dns uses resource records store name mappings name servers dns name zero resource records two kinds resource records first kind stores user data like resource records naming internet hosts email destinations kind record associates ip address mail server dns name second kind name server resource record used internally dns implement name space delegation resource record associates another dns server dns name indicating another name server continue name resolution using dns store hfns introduce new type resource record store association urn dns name user introduces new hfn create resource record store urn associated hfn record subsequently inserted dns name space proper name server store record one responsible parent domain hfn instance insert hfn hfndevelsrclinuxorg need contact server responsible srclinuxorg domain actual insertion server done dynamically using dns update operation described rfc 2136 location service use globe location service 9 resolve urns urls allows us associate set urls single urn since location service uses socalled object handles identify resources use object handles urns twolevel naming scheme however ease discussion continue use term urn location service offers addition lookup operation urns two update operations insert delete insert delete operation used modify set urls associated urn architecture efficiently update look urls organize underlying widearea network ie internet hierarchy domains domains similar ones used dns however use completely independent dns domains tailored location service particular domains location service represent geographical administrative network topological regions example lowestlevel domain may represent campuswide network university whereas next higherlevel domain represents city campus located another important difference domain hierarchy completely internal structure unlike dns visible users domain represented location service directory node together directory nodes form worldwide search tree directory node contact record every registered resource domain contact record divided number contact fields one child node directory node stores either forwarding pointer actual urls contact field forwarding pointer indicates urls found child node contact records leaf nodes slightly different contain one contact field storing urls leaf domain every url stored location service path forwarding pointers root pointing thus always locate url starting root node following path normal case urls stored leaf nodes storing urls intermediate nodes may case highly mobile resources lead considerably efficient lookup operations discussed low however since current model excludes highly mobile resources safely assume urls always stored leaf nodes figure 3 shows example contact records one urn example root node one forwarding pointer urn indicating urls found left subtree rooted usa node usa node turn two forwarding pointers pointing california texas nodes respectively nodes forwarding pointer leaf node url actually stored operations user wants know url resource initiates lookup operation leaf node domain resides user provides resources urn parameter lookup operation starts checking whether leaf node contact record urn contact record operation returns world los angeles houston miami california florida texas usa empty contact field contact field forwarding pointer contact field url figure 3 organization contact records tree specific resource url found contact record otherwise operation recursively checks nodes path leaf node root lookup operation finds contact record nodes path forwarding pointers starting node followed downwards leaf node url found contact record found nodes path leaf node root urn unknown location service example consider user located near leaf node miami shown figure 3 leaf node contacted user request url forward request parent florida node since contain contact record florida node also know urn turn forward request parent usa node usa node know urn forwards request one children indicated forwarding pointer lookup operation follows path forwarding pointers one leaf nodes instance houston leaf node going higher search tree lookup operation effectively broadens area searched url thus resembling search algorithms based expanding rings goal insert operation store url leaf node create path forwarding pointers leaf node resource new replica leaf domain url new replica inserted node leaf domain insert operation starts inserting url contact record leaf node insert operation recursively requests parent node grandparent node etc install forwarding pointer recursion stops node found already contains forwarding pointer otherwise root delete operation removes url path forwarding pointers analogous insert operation technical details found 10 improvements basic search tree described far obviously scale yet particular higherlevel directory nodes root pose serious problem store large number contact records handle large numbers requests solution partition overloaded directory node multiple directory subnodes subnode responsible subset contact records originally stored directory node therefore much smaller load use hashing technique decide subnode place contact record hashing technique determines subnode using contact records urn second way alleviate load higherlevel nodes make use caches cannot effectively use scheme urls cached since urls easily change presence mobility therefore devised caching scheme called pointer caches assume resource changes url mainly within domain hardly ever moves outside domain case makes sense let directory node store url subsequently let nodes cache pointer directory node since resource hardly ever move outside domain cached pointer remain valid despite url resource may change regularly approach whenever lookup operation finds url node n returns url well pointer n nodes visited lookup subsequently store pointer n local pointer cache next time lookup operation visits nodes immediately directed node n way lookup operation avoids visits higherlevel nodes details caching scheme found 1 effects improvements described discussion important aspect hfntourl resolution scheme scalability explained introduction distinguish two types scalability support large number resources support resources distributed large geographical area resolution scheme scalable kinds scalability need addressed name service location service name service first form scalability requires name service deal large number resources deal large number hfntourn mappings current dns infrastructure supports order 10 8 host names email destina tions supporting popular web resources significantly increase number names stored dns thereby ensure exceed capacity second form scalability requires name service deal names distributed large geographical area tackle second problem ensuring use locality lookup update operations locality lookup operations dns provided caches resource named hfn popu lar hfntourn mapping stored caches name servers providing users located near cache local access hfntourn mapping dns query obtain urn thus answered directly without need contact name server located far away assuming use popular web resources stable hfntourn mapping ensure caching remains ef fective update operations name service exploit locality well since assume changes specific part ie subdomain name space always originate geographical area place name server responsible part near area changes originate restrictions discussed dns attractive name service given existing infrastructure unfortunately want drop restrictions resource model scalability problems could arise dns prevent hfn resolution mechanism scaling want support resources unpopular caching ineffective dns might become overloaded want support mobile resources caching mechanism might cache mappings wrong place therefore want support general resource model need replace dns scalable name service describe design name service 2 note criticize dns never designed support hfns propose argued actually misusing system location service problem storing large number urntourl mappings globe location service divided storage processing problem show simple computation storage requirements location service problem consider example root node assume single contact record size 1 kbyte root 1 kbyte data contain urn forwarding pointers local administrative information still leave space future additions like cryptographic keys assume worstcase scenario system supports order 10 8 resources discussed would mean root node store 100 gbyte using partitioning scheme mentioned earlier distribute 10 8 contact records say 100 subnodes resulting 1 gbyte per subnode using partitioning scheme storage requirements clearly problem processing lookup requests poses serious threat ignore update requests since rare compared lookup requests partitioning scheme clearly also increases lookup processing capacity still enough investigate processing load calculated effect replicated resources simulated effects pointer caching lookup processing load metric scalability location service introduce lookup length lookup length number nodes visited lookup operation provides intuitive measure processing load tree large value means many nodes visited resulting load increase nodes also means general nodes higher tree ie centralized nodes visited essence would like keep lookup length small possible first investigate effect resource replication location service resource becomes popular invariably replicas resource added results urls stored location service provide optimal local access replicas distributed far away results tree paths forwarding pointers root different urls meet root node assume node tree fanout n replicas created evenly distributed across leaf domains case expect n children root node registered replica respective domain consequence n lookup requests longer need forwarded root node replicas evenly distributed across leaf domains load root node thus decreases linearly number replicas root node longer used lookup operations investigate effects pointer cache system conducted simulation experiment basic idea increasing number lookup operations pointer caches incur higher hit ratios turn decreasing average lookup length simulation built search tree height four fanout 32 leading million leaf nodes simulation consists inserting single url arbitrary leaf node initiating lookup operations randomly chosen leaf nodes operation makes use pointer caches possibly creating new entries explained lookup operation compute length counting number nodes visited end compute average length average lookup length decrease number performed operations figure 4 shows result simulation confirms increasing number lookup operations lookup length decreases putting less load higher nodes tree importantly figure also shows effect already present small numbers lookup operations since support popular web resources know pointer cache entries reused caching therefore effective location service deals urls distributed large geographical area using locality distributed search tree related lookup algorithm starting lookup operation leaf node search nearby areas first continuing higher nodes tree search larger areas location service avoids using remote resources url found using local resources given goal support popular replicated web resources always average lookup length number lookup operations logarithmic cache effect lookup operation figure 4 average lookup length lookup operation replica nearby related work work regarding uris done within working groups internet engineering task force ietf urn working group primarily responsible defining urns instance defined overall urn name space rfc 2141 provided example urn namespace ietf documents rfc 2648 outlined general architecture resolve urns rfc 2276 architecture urn name space actually consists several independent urn name spaces every urn name space potentially specific urn resolver resolving urn thus requires selection appropriate urn solver selection urn resolver done resolver discovery service rds daniel mealling propose build rds using dns 3 pro posal dns contains resource records specifying rewrite rules urn needs resolved rewrite rules applied urn resulting resolver resolve complete urn possibly even resource research included rds since focused one specific urn namespace object handle space another related working group ietf common name resolution protocol cnrp working group group relatively new deals notion human friendly naming socalled common names 7 examples common names trade names company names book titles goal working group create lightweight search protocol protocol user provides parameters beside common name specify information searched common names resolved different information providers get different types information implementation scalable common name resolution service outside scope working group related work done urn working group work done international doi foundation 4 goal develop digital object doi system identifying exchanging intellectual property digital environment work initiated american publishing community current doi implementation uses handle system location service handle system maps doi known handle consisting prefix suffix access information instance url prefix handle specifies naming authority suffix specifies name naming authority resolving handle consists contacting global handle registry find local handle registry handle fully resolved handle system supports scalability allowing global local handle registries replicated however ensure access information provides refers resources local user handle resolution process use local resources possible kangasharju et al 5 describe location service called lds based solely dns system maps urls ip addresses whereas approach hfns mapped urls lds ip addresses servers directly stored dns store urn dns use separate service provide set urls named resource since lds stores ip addresses dns dns server needs updated every time replica added removed making system dynamic caching less effective addition easily efficiently provide url nearest user case lds location servers storing replicated web resources integral part commercial content delivery system akamai sandpiper systems original url replicated resource needs changed point servers delivery system akamai uses modified web server redirect clients servers sandpiper uses dnsbased solution systems said take client location current network condition account providing client web server systems provide local access web resources support naming system local conclusions future work developed location service together dns used resolve hfns urls scalable fashion scalability achieved using two distinct mappings one naming resources one locating using separation apply techniques specific respective services obtain scalability important part design reuse existing dns frastructure provides us benefits form existing infrastructure experience using aware limitations imposed dns never designed support naming proposed us dns seen example naming system used demonstrating feasibility approach implemented hfn resolution scheme using software bind project software developed part globe project implementation currently used initial setup involving four european sites one site usa one site middleeast future work consist using implementation two experimental applications gain experience first application deals replicating web documents second deals distribution free software packages experiments allow us substantiate scalability humanfriendliness claims r efficient tracking mobile objects globe scalable naming global middleware resolution uniform resource identifiers using domain name system international doi foundation locating copies objects using domain name system big book lightweight directory access protocol ldap rfcs context goals common name resolution architectural principles uniform resource name resolution locating objects widearea systems algorithmic design globe widearea location service tr ctr n j e wijngaards b j overeinder van steen f brazier supporting internetscale multiagent systems data knowledge engineering v41 n23 p229245 june 2002 michael walfish hari balakrishnan scott shenker untangling web dns proceedings 1st conference symposium networked systems design implementation p1717 march 2931 2004 san francisco california hari balakrishnan karthik lakshminarayanan sylvia ratnasamy scott shenker ion stoica michael walfish layered naming architecture internet acm sigcomm computer communication review v34 n4 october 2004 jeffrey pang james hendricks aditya akella roberto de prisco bruce maggs srinivasan seshan availability usage deployment characteristics domain name system proceedings 4th acm sigcomm conference internet measurement october 2527 2004 taormina sicily italy arno bakker maarten van steen andrew tanenbaum widearea distribution network transactions internet technology toit v6 n3 p259281 august 2006 bogdan c popescu bruno crispo andrew tanenbaum arno bakker design implementation secure widearea object middleware computer networks international journal computer telecommunications networking v51 n10 p24842513 july 2007 sylvia ratnasamy scott shenker steven mccanne towards evolvable internet architecture acm sigcomm computer communication review v35 n4 october 2005