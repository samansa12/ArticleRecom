mimicry attacks hostbased intrusion detection systems examine several hostbased anomaly detection systems study security evasion attacks first introduce notion mimicry attack allows sophisticated attacker cloak intrusion avoid detection ids develop theoretical framework evaluating security ids mimicry attacks show break security one published ids methods experimentally confirm power mimicry attacks giving worked example attack concrete ids implementation conclude call research intrusion detection attackers defenders viewpoints b introduction goal intrusion detection system ids like watchful burglar alarm attacker manages penetrate somehow security perimeter ids set alarms system administrator may take appropriate action course attackers necessarily cooperate us cat burglars use stealth escape without noticed expect computer hackers may take steps hide presence try evade detection hence ids useful research supported part nsf career ccr0093337 permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee ccs02 november 1822 2002 washington dc usa would good idea make dicult attackers cause harm without detected paper study ability idss reliably detect stealthy attackers trying avoid notice fundamental challenge attackers adapt response defensive measures deploy enough design system withstand attacks common time system deployed rather security like game chess one must anticipate moves attacker might make ensure system remain secure attackers possible responses conse quently ids susceptible evasion attacks attacker cloak attack evade detection uncertain utility long term expect ids sees widespread deployment attackers change behavior routinely evade since practice many attacks arise automated scripts script writers may someday incorporate techniques designed evade popular idss scripts sense success approach intrusion detection may lead downfall approach secure evasion attacks broadly speaking two kinds intrusion detection systems network intrusion detection systems hostbased intrusion detection systems several researchers previously identied number evasion attacks network intrusion detection systems 19 18 7 1 motivated results paper turn attention hostbased intrusion detection though good deal research security network idss evasion attacks security hostbased intrusion detection systems evasion attacks seems received much attention security literature one nd many papers proposing new techniques intrusion detection authors often try measure detection power testing whether detect currentlypopular attacks however notion security adaptive adversarial attacks much harder measure apart recent work 23 24 subject seem received great deal coverage literature remedy shortcoming paper undertake systematic study issue hostbased intrusion detection systems divided two categories signaturebased schemes ie misuse detection anomaly detection signaturebased schemes typically trivial bypass simply varying attack slightly much way polymorphic viruses evade virus checkers show section 42 automatically create many equivalent variants given attack could used attacker avoid matching idss signature attack unavoidable weakness misuse detection evasion attacks signaturebased schemes childs play consider paper anomaly detection systems interesting point view evasion attacks paper focus specically anomaly detection systems show section 3 several general evasion methods including notion mimicry attack idea introducing semantic noops middle attack throw ids next section 4 introduce principled framework nding mimicry attacks building ideas language automata theory argue section 42 nearly every system call used noop giving attacker great freedom constructing attack trigger intrusion alarms sections 5 6 describe empirical experience using mimicry attacks escape de tection convert otheshelf exploit script one works without detected ph ids finally sections 8 9 conclude parting thoughts countermeasures implications expository purposes paper written point view attacker nonetheless goal empower computer criminals rather explore limits current intrusion detection technology enable development robust intrusion detection sys tems cryptographic community benetted tremendously combination research attacks defensesfor instance accepted wisdom one must rst become expert codebreaking one wants successful codemaking many cryptosystems validated according ability stand concerted adversarial analysisyet intrusion detection community date benet style adversarial scholarship hope work help jumpstart dialogue intrusion detection research literature 2 typical hostbased ids many proposals hostbased anomaly detection paradigmatic seminal example general approach forrest et al 3 2 8 26 21 brie review scheme monitor behavior applications host observing interaction applications underlying operating system practice securityrelevant interactions typically take form system calls scheme works examining trace system calls performed application scheme motivated using human immune system biological analogy system call traces normal applications selfsimilar attempt build ids learns normal behavior applications recognizes possible attacks looking abnormalities learning phase sort scheme ids gathers system call traces times system attack extracts subtraces containing six consecutive system calls creates database observed subtraces 1 subtrace deemed anomalous practice ph uses lookahead pairs reduce size database increases set system call appear database monitoring phase abnormality new system call trace measured counting many anomalous subtraces contains authors experience attacks often appear radically abnormal traces instance imagine mail client attack script exploits buer overrun adds backdoor password le spawns new shell listening port 80 case system call trace probably contain segment looking something like open write close socket bind listen accept read fork since seems unlikely mail client would normally open le bind network socket fork child immediate succession sequence would likely contain several anomalous subtraces thus attack would easily detected selected somayaji forrests ph intrusion detection system 21 detailed analysis mainly system full source code could obtained analysis many proposals hostbased anomaly detection may found literature 3 2 8 26 21 5 14 15 4 26 12 13 17 27 however ph fairly typical sense many hostbased idss rely recognizing attacks based traces produce traces system calls bsm audit events unix commands use ph motivating example throughout paper expect techniques apply generally hostbased intrusion detection systems based detecting anomalies sequences events instance possible use approach analyze systems based system call sequences 3 2 8 26 5 27 data mining 14 15 neural networks 4 nite automata 17 hidden markov models 26 pattern matching behavioral sequences 12 13 3 building blocks evasion background first let us start assumptions simplify analysis follow seems natural assume attacker knows ids works seems unavoidable ids becomes popular deployed many sites extremely dicult prevent source code ids leaking usual security obscurity rarely reliable defense seems natural assume ids algorithm available inspection study attackers similarly ids relies database normal behav ior typically straightforward attacker predict approximation database behavior system software depends primarily operating system version conguration details variables held constant normal databases produced dierent machines quite similar hence attacker could readily obtain useful approximation database target host examining normal databases found several hosts type retaining program behaviors common databases using result prediction normal database target host since attacks traces allowed ph attacker needs underapproximation normal database use suce hence seems reasonable assume database normal behaviors mostly entirely known moreover also assume attacker silently take control application without detected assumption always satised many common attack vectors actual penetration leaves trace system call trace instance exploiting buer overrun vulnerability involves change control ow program cause system calls invoked thus syscallbased ids detect buer overrun general attacks divided penetration phase attacker takes control application injects remote code exploitation phase attacker exploits control application bring harm rest system executing recentlyinjected foreign code anomaly detection systems based detecting harmful eects exploitation detecting penetration consequently seems reasonable believe many applications may contain vulnerabilities allow attackers secretly gain control application background remainder section describes six simple ideas avoiding detection order increasing sophistication power presume attacker malicious sequence actions cause harm wants executed goal execute sequence without detected slip radar rst evasion technique based trying avoid causing change whatsoever observable behavior application simple observation system callbased idss detect attacks signature system call trace application possible cause harm system without issuing system calls ids hope detecting attack instance old versions solaris possible become root simply triggering dividebyzero trap handler involve system calls however os vulnerabilities appear exceptionally rare general instance attack class attacker usually cause application compute incorrect results instance compromised web browser might invisibly elide headlines mentioning democratic party whenever user visits news site compromised mailer might silently change word isnt every third email companys ceo seems little ids class attacks fortunately harm attacker rest system without executing system calls appears limited patient second technique evading detection simply patient wait passively time malicious sequence accepted ids normal behavior pause application insert malicious sequence course attacker readily recognize sequence allowed simply simulating behavior ids simulating ids easy since discussion secrets ids algorithm moreover straightforward attacker retain control allowing application execute usual sequence system calls instance attacker takes control application could embed trojan horse replacing library functions applications address space modied code replacement implementation might behave like preexisting library code except returning caller function could check whether time right begin executing malicious sequence modication completed attacker could return ow program control application condent knowledge retain power regain control time many ways accomplish sort parasitic infection seems defense invasion one substantial constraint attacker though attack assumes come time malicious sequence accepted attacker gains nothing thus power attack limited precision database normal behavior another limitation attacker malicious sequence executed resuming execution application may well lead abnormal system call trace case two choices immediately present selves could allow application continue executing thereby allowing ids detect attack albeit harm already done could freeze application permanently likely noticeable thus might attract attention slightly better strategy may cause application crash way makes crash appear come innocuous program bug rather security violation since practice many programs rather buggy system administrators used seeing coredumps blue screen death time time may well ignore crash however strategy without risk attacker short patient attacker probably somewhat dangerous naive impatient attacker attacker still get lucky cause harm scenarios risk might acceptable defenders patient make luck one way attacker improve upon passive patience loading dice typically many possible paths execution application may lead slightly dierent system call trace suggests attack strat egy attacker look favorable path execution nudge application following path optimization rather embedding trojan horse allowing application execute normally attacker discard application entirely simulate presence example attacker identify favorable path execution synthetically construct sequence system calls would executed path issue directly inserting malicious sequence appropriate point analysis eort precomputed thus stealthy attack might simply contain sequence hardcoded system calls simulate presence application eventually execute malicious sequence fact see reason attacker restrict feasible execution paths appli cation attacker even consider system call traces could possibly output execution application long traces accepted mal ids words attacker examine set system call traces wont trigger alarms look one trace malicious sequence safely inserted path identied attacker simulate execution proceed evade ids essence mimicking behavior applica tion malicious twist continue biological analogy successful mimic recognized self immune system cause alarms reason dub mimicry attack 25 style attack powerful requires careful examination ids attacker also somehow identify favorable traces study topic greater detail section 4 replace system call parameters another observation schemes completely ignore arguments system call instance innocuous system call openliblibcso ordonly looks indistinguishable ids malicious call openetcshadow ordwr evasion technique obvious want write shadow password le need wait application open shadow password le normal execution instead may simply wait application open le whatsoever substitute parameters etcshadow ordwr applications apparently another form mimicry attack far tell almost hostbased intrusion detection systems completely ignore system call parameters return values exception aware wagner deans static ids 25 look small class system call parameters parameterreplacement attacks may problematic scheme well insert noops another observation convenient way insert given malicious sequence applications system call stream often vary malicious sequence slightly inserting noops context term noop indicates system call eect whose eect irrelevant goals tacker opening nonexistent le opening le immediately closing reading 0 bytes open le de scriptor calling getpid discarding result examples likely noops note even original malicious sequence never accepted ids modied sequence appropriate noops embedded might well accepted without triggering alarms show later paper see section 42 table 1 one two exceptions nearly every system call used noop gives attacker great power since pad desired malicious sequence system calls chosen freely maximize chances avoiding detection one might expect intuitively every system call found normal database may become reachable mimicry attack inserting appropriate noops develop partial evidence support intuition section 6 generate equivalent attacks generally way generating variations malicious sequence without changing eect gives attacker extra degree freedom trying evade detection one imagine many ways systematically create equivalent variations given malicious sequence instance call read open le descriptor typically replaced call mmap followed memory access another exam ple many cases system calls malicious sequence reordered attacker try many possibilities see inserted compromised application without detection entire computation done oine single precomputation also system calls give attacker special power executed without detection part exploit sequence instance idss handle fork cloning ids monitoring child parent application process independently hence attacker reach fork system call split exploit sequence two concurrent chunks eg overwriting password le placing backdoor ls program attacker call fork execute rst chunk parent second chunk child another example ability execute execve system call gives attacker power run program whatsoever system course ideas evasion combined freely makes situation appear rather grim defenders attacker many options though checking options may require lot eort attackers part also seems unclear whether defenders evaluate advance whether might work given ids shall address issue next 4 theoretical framework section develop systematic framework methodically identifying potential mimicry attacks start given malicious sequence system calls model intrusion detection system goal identify whether trace system calls accepted ids without triggering alarms yet contains malicious sequence equivalent variant formalized follows let denote set system calls set sequences alphabet say system call trace 2 accepted al lowed ids executing sequence trigger alarms let denote set system call traces allowed ids ie accepted idsg also let denote set traces achieve attackers goals eg equivalent variant given malicious sequenceg succinctly state condition existence mimicry attacks set exactly set traces permit attacker achieve goals without detection thus mimicry attacks possible 6 intersection nonempty elements gives stealthy exploit sequence used achieve intruders goals reliably evading detection main idea proposed analytic method frame problem terms formal language theory pa per regular language fairly natural 20 nitestate idss always described nitestate automata thus accept regular language syscall traces moreover insist also regular language requires bit justication see section 42 hopefully sound unreasonable point easy generalize framework still 2 formulation adequate hostbased idss considered experiments formulation testing mimicry attacks done automatically polynomial time standard theorem language theory l l 0 two regular languages l l 0 l l 0 computed eectively 11 x32 also given regular language l 00 eciently test whether l 00 l 00 nonempty quickly nd member l 00 11 x33 follows compute descriptions eciently test existence mimicry attacks remainder section describe rst compute compute 41 modelling ids forrests ids predict whether next system call allowed need know previous system calls consequence fact forrests ids works looking subtraces six consecutive system calls checking observed subtrace database allowable subtraces consequently case model ids nitestate automaton statespace given vetuples system calls transition allowable system call action formally statespace recall denotes set system calls transition subtrace found idss database allowable subtraces automaton represented eciently way normal database represented next need initial state set nal accepting states require patching things bit introduce new absorbing state alarm selftransition alarm alarm system call 2 ensure every trace sets intrusion alarm ends state alarm adding transition s0 alarm subtrace found idss database allowable subtraces nal ac cepting states nonalarm states excluding special state alarm initial state automaton represents state application application rst penetrated heavily dependent application attack vector used presumably dierent vulnerability lead dierent initial state instance buer overrun allows attacker gain control 2 instance could allow contextfree languages without violence polynomialtime nature analysis application executed consecutive read system calls initial state automaton read read read read read extensions practice one may want rene model account additional features ids instance locality frame count slightly forgiving occasional mismatched subtraces triggers alarms suciently many mismatches seen handled within nitestate model details see appendix 42 modelling malicious sequence next consider express desired malicious sequence within framework particular generate many equivalent variations ability generate equivalent variations critical success attack rests knowledge equivalences induced operating system semantics following let malicious sequence want sneak ids adding noops noted one simple way generate equivalent variants freely inserting noops malicious sequence noop system call eect generally one eect success malicious sequence instance call getpid ignore return value call brk ignore newly allocated returned memory useful trick nding noops invoke system call invalid argument system call fails action taken yet ids appear system call executed give examples open nonexistent pathname call mkdir invalid pointer say null pointer one cause access violation call dup invalid le descriptor every ids known authors ignores return value system calls allows intruder nullify eect system call fooling ids thinking system call succeeded conclusion analysis almost every system call nullied way sideeectfree system call already noop system call takes pointer memory address le descriptor signal number pid uid gid nullied passing invalid arguments one notable exception exit kills process matter argument see table 1 list system calls found might cause diculties rest may freely used generate equivalent variants malicious sequence 3 surprise hard nd nulliable system calls rather easy nd themwith exceptions nearly every system call readily nulliable gives attacker extraordinary freedom vary malicious exploit sequence characterize equivalent sequences obtained way simple regular expression let n denote set nulliable system calls consider regular 3 certainly possible might overlooked problematic system calls particularly systems linux however yet encountered problematic system call found table 1 system call nulli able useful attacker comments process cause problems intruder unlikely puts process sleep would cause problem intruder attacker might able cause process receive signal wake eg sending sigurg tcp band data applicationdependent hangs current terminal might problematic intruder rarely used applications hence shouldnt cause problem usually creates new copy process since ids probably clone monitor separately unlikely cause problems attacker similar comments apply vfork clone linux calling alarm0 sets new alarms likely safe sideeect cancelling previous alarm might occasionally interfere normal application operation rare usually creates new session process already session leader seems unlikely interfere typical attack goals practice nullify passing socket type parameter nullify passing null pointer parameter nullify passing null lename parameter yes yes table 1 system calls whether used build equivalent variants given malicious sequence second column indicates whether system call reliably turned noop ie nullied third column indicates whether attacker intersperse system call freely given malicious sequence obtain equivalent variants instance exit nulliable kills process hence usable generating equivalent variants malicious sequence table shows system calls know attacker might able nullify remaining system calls shown easily nullied expression dened matches set sequences obtained inserting noops sequence matching regular expression eect hence interchangeable moreover regular expression may expressed nitestate automaton standard methods 11 x28 way obtain representation set dened earlier desired extensions necessary could introduce variability set variants considered considering equivalent system calls instance read system call appears malicious sequence could also easily replace read mmap system call helps avoid detection another example often collapse multiple consecutive read calls single read call multiple chdir system calls single chdir equivalences also modelled within nitestate framework assume relation r obeying following condition may assume sequence x equivalently replaced x 0 without altering resulting eect system suppose moreover relation expressed nitestate transducer eg mealy moore machine equivalently assume r forms rational transduction dene standard result language theory 11 x112 nd regular language moreover easily compute representation nitestate automaton given nitestate representation r note also generalizes strategy inserting noops dene relation rn rn x obtained x inserting noops set n hard see relation rn given nitestate transduction hence idea introducing noops seen special case general theory based rational transductions summary see framework fairly general expect model ids set malicious sequences nitestate automata 5 implementation implemented ideas follows first trained ids programmatically built automaton resulting database normal sequences system calls automaton formed described next step form composition taking usual product construction implementation tests nonempty intersection constructing product automaton explicitly memory 11 x32 performing depthrst search initial state see accepting state reachable 11 x33 yes weve found stealthy malicious sequence mimicry attack failed essence simple way modelchecking system property note many ways optimize computation using ideas modelchecking literature instance rather explicitly computing entire product automaton advance storing memory reduce space could perform depthrst search generating states lazily also could use hashing keep bitvector previously visited states reduce memory consumption 9 10 enough could even use techniques symbolic modelchecking represent automata using bdds compute product symbolically standard algorithms 16 however found fancy optimizations seem unnecessary practice simple approach seems adequate cases weve looked experiments algorithm runs less second surprising one considers usage scenarios automaton typically thousand states contains half dozen states hence composition contains tens thousands states easy compute 6 empirical experience section report experimental evidence power mimicry attacks investigated number hostbased anomaly detection systems although many papers written proposing various techniques found one working implementation source code could download use tests ph process homeostasis system 21 ph derivative rest et als early system twist ph responds attacks slowing application addition raising alarms system administrator system call ph delays response 2 counts number mismatched length6 subtraces last 128 system calls used ph version 017 running fresh linux redhat 50 installation version 2219 kernel 4 test host disconnected network duration experiments avoid possibility attacks external sources corrupting experiment also selected otheshelf exploit see whether could made stealthy using techniques chose one less random selecting attack script called autowuxc exploits site exec vulnerability wuftpd ftp server autowux attack script exploits string vulnerability calls setreuid00 escapes chroot protection execs binsh using execve system call turns fairly typical payload shellcode found many attack scripts exploit unrelated vulnerabilities 5 conjecture authors autowux script copied shellcode previous source rather developing new shellcode version linux redhat 50 runs wuftpd version wu242academbeta151 trained ph running wuftpd hundreds large 4 since work done version 018 ph leased new version uses longer window length 9 might improve security test whether change improves resistance ph mimicry attacks 5 interesting instructive notice widespread attack payload includes provisions default always attempt escaping chroot jail lesson weak protection measure becomes widespread enough eventually attackers routinely incorporate countermeasures attacks implications intrusion detection systems susceptible mimicry attacks troubling le downloads period two days veried ph detects unmodied exploit 6 next attempted modify exploit evade de tection parsed phs database learned length6 sub traces built automaton recognizing exactly system call traces never cause mismatches bother rene representation model fact intruder safely cause occasional mismatches without causing problems see appendix renement turned unnecessary also examined point time autowux mounts buer ow attack wuftpd server found window last system calls executed wuftpd exploit rst gains control determines initial state addition reverse engineered exploit script learned performs following sequence 15 system calls 9 chdir chroot execvebinsh noticed nine consecutive chdir calls case collapsed single always one also freely introduce noops two simple observations built automaton recognizing regular expression program performs depthrst search product automaton informs us stealthy trace matching regular expression next modied attack sequence slightly hand repair deciency interactively invoking tool times discovered reason original pattern infeasible path normal database reaching dup2 mkdir execve hence attack uses system calls completely avoid mismatches however note three system calls readily dispensed need create new directory existing directory well escaping chroot jail side benet leave fewer traces also dup2 execve needed spawn interactive shell yet attacker still cause harm simply hardcoding exploit shellcode actions wants take without ever spawning shell hypothesized typical harmful action attacker might want perform add backdoor root account password le hence proposed attacker might happy perform following 6 took care ensure ids learn exploit code normal process subsequent experiments virgin database trained scratch using procedure completely untouched attack read stat close close munmap brk fcntl setregid open fcntl close brk time getpid sigaction socketcall figure 1 stealthy attack sequence found tool exploit sequence intended executed taking control wuftpd site exec format string vulnerability modication preexisting sequence found autowux ex ploit underlined system calls original attack sequence tool takes underlined system calls input outputs entire sequence nonunderlined system calls intended nullied play role seman tic noops present ensure ph ids detect attack eect resulting stealthy exploit escape chroot jail add backdoor root account system password le variant original exploit sequence openetcpasswd appendo wronly closefd exit0 fd represents le descriptor returned open call value readily predicted modied attack sequence becomes root escapes chroot jail appends backdoor root account password le check whether modied attack sequence could executed stealthily built automaton recognizing regular expression found sequence raises alarms matches pattern see fig 1 stealthy sequence finding stealthy sequence took us hours interactive exploration search program software implemented build modied exploit script implement attack instead independently verify correctness stealthy sequence separately ran sequence stide 7 conrmed would accepted zero mismatches database generated earlier note able transform original attack sequence modied variant would trigger even single mismatch would similarly harmful eect words need take advantage fact ph allows occasional mismatches without setting alarms attack would successful matter setting chosen ph locality frame count threshold makes successful results meaningful summary experiments indicate sophisticated attackers evade ph ids fairly surprised success mimicry attack converting autowux script one would avoid detection rst glance worried would able much attack script payload contains fairly unusual looking system call sequence nonetheless seems database normal system call sequences rich enough allow attacker considerable power shortcomings aware several signicant limitations experimental methodology compiled stealthy sequence fig 1 modied exploit script tried running modied script machine protected ph moreover assumed could modify autowux exploit sequence long aect eect successful attack however example would convincing attack require modications original exploit sequence also tested single exploit script autowux single vulnerable application wuftpd single operating system redhat linux single system conguration default redhat 50 installation single intrusion detection system ph enough establish presence risk provide enough data assess magnitude risk evaluate dierences operating systems congurations might aect risk tried assess practical attack might study much eort knowledge required attacker mount sort attack empirically test eectively one predict conguration ids normal database found target host measure whether database diversity signicant barrier attack estimate percentage vulnerabilities would give attacker sucient control application mount mimicry attack permit injection enough foreign code execute entire stealthy sequence also attacks often get better time may soon draw denite conclusions unknown factors thorough study needed con dently evaluate level risk associated mimicry attacks practice 7 ph uses lookahead pairs stide restrictive ph however results test still valid since modied sequence accepted stide expect accepted ph anything using stide makes experiment meaningful indicates stidebased idss also vulnerable mimicry attacks 7 related work recent research security hostbased anomaly detection systems phisticated adaptive adversaries wagner dean brie sketched idea mimicry attacks earlier work 25 x6 gin jha miller elaborated outlining metric susceptibility evasion attacks based attack automata 6 x45 somayaji suggested may possible principle dicult practice evade ph ids giving brief example justify claim 22 x75 none papers developed ideas depth examined implications eld set stage future research recently independently tan killourhy maxion provided much thorough treatment issue 23 research shows attackers render hostbased idss blind presence attacks presented compelling experimental results illustrate risk followup work tan mchugh killourhy rened technique gave experimental conr mation risk attacks 24 methods dierent given paper results agreement 8 discussion several lessons suggest experiments first foremost possible intrusion detection systems designed resist mimicry attacks stealthy behavior sophisticated attackers attacks also give specic guidance ids designers might help idss observe system calls attempted also ones fail error codes returned might good idea monitor predict systems calls executed also arguments passed otherwise attacker might much leeway moreover database normal behavior minimal precise possible reduce degree freedom aorded attacker second recommend future published work proposing new ids designs include detailed analysis proposals security evasion attacks even type vulnerability cannot completely countered clever design seems worthwhile evaluate carefully risks finally encourage ids designers publicly release full implementation designs enable independent security analysis several proposed intrusion detection techniques would liked examine detail work unable access reference implementation 9 conclusions shown attackers may able evade detection hostbased anomaly intrusion detection systems presented initial evidence idss may vulnerable clear serious threat mimicry attacks practice nonetheless lesson enough merely protect todays attacks one must also defend tomorrows attacks keeping mind tomorrows attackers might adapt response protection measures deploy today suggest attention could paid intrusion detection community security adaptive attackers hope stimulate research area 10 acknowledgements thank umesh shankar anil somayaji anonymous reviewers many insightful comments earlier draft paper also indebted somayaji making ph source code publicly available without research would possible 11 r design validation computer protocols introduction automata theory tr design validation computer protocols model checker spin temporal sequence learning data reduction anomaly detection bro enforceable security policies symbolic model checking introduction automata theory languages computation intrusion detection using variablelength audit trail patterns using finite automata mine execution data intrusion detection detecting manipulated remote call streams learning program behavior profiles intrusion detection hiding intrusions selfnonself discrimination computer sense self unix processes intrusion detection via static analysis operating system stability security process homeostasis ctr wunhwa chen shenghsun hsu hwangpin shen application svm ann intrusion detection computers operations research v32 n10 p26172634 october 2005 hilmi gne kayacik malcolm heywood nur zincirheywood evolving buffer overflow attacks using genetic programming proceedings 8th annual conference genetic evolutionary computation july 0812 2006 seattle washington usa jesse c rabek roger khazan scott lewandowski robert k cunningham detection injected dynamically generated obfuscated malicious code proceedings acm workshop rapid malcode october 2727 2003 washington dc usa christopher kruegel engin kirda darren mutz william robertson giovanni vigna automating mimicry attacks using static binary analysis proceedings 14th conference usenix security symposium p1111 july 31august 05 2005 baltimore md james poe tao li bass benchmark suite evaluating architectural security systems acm sigarch computer architecture news v34 n4 p2633 september 2006 debin gao michael k reiter dawn song graybox program tracking anomaly detection proceedings 13th conference usenix security symposium p88 august 0913 2004 san diego ca haizhi xu steve j chapin improving address space randomization dynamic offset randomization technique proceedings 2006 acm symposium applied computing april 2327 2006 dijon france timothy hollebeek rand waltzman role suspicion modelbased intrusion detection proceedings 2004 workshop new security paradigms september 2023 2004 nova scotia canada analyzing evaluating dynamics stide performance intrusion detection knowledgebased systems v19 n7 p576591 november 2006 niels provos virtual honeypot framework proceedings 13th conference usenix security symposium p11 august 0913 2004 san diego ca prahlad fogla wenke lee evading network anomaly detection systems formal reasoning practical techniques proceedings 13th acm conference computer communications security october 30november 03 2006 alexandria virginia usa wes masri andy podgurski using dynamic information flow analysis detect attacks applications acm sigsoft software engineering notes v30 n4 july 2005 hassen sadi guarded models intrusion detection proceedings 2007 workshop programming languages analysis security june 1414 2007 san diego california usa gaurav tandon philip chan debasis mitra morpheus motif oriented representations purge hostile events unlabeled sequences proceedings 2004 acm workshop visualization data mining computer security october 2929 2004 washington dc usa salvatore j stolfo shlomo hershkop chiawei hu weijen li olivier nimeskern ke wang behaviorbased modeling application email analysis acm transactions internet technology toit v6 n2 p187221 may 2006 niels provos improving host security system call policies proceedings 12th conference usenix security symposium p1818 august 0408 2003 washington dc darren mutz fredrik valeur giovanni vigna christopher kruegel anomalous system call detection acm transactions information system security tissec v9 n1 p6193 february 2006 c linn rajagopalan baker c collberg k debray j h hartman protecting unexpected system calls proceedings 14th conference usenix security symposium p1616 july 31august 05 2005 baltimore md r sekar vn venkatakrishnan samik basu sandeep bhatkar daniel c duvarney modelcarrying code practical approach safe execution untrusted applications proceedings nineteenth acm symposium operating systems principles october 1922 2003 bolton landing ny usa maja pusara carla e brodley user reauthentication via mouse movements proceedings 2004 acm workshop visualization data mining computer security october 2929 2004 washington dc usa janak j parekh ke wang salvatore j stolfo privacypreserving payloadbased correlation accurate malicious traffic detection proceedings 2006 sigcomm workshop largescale attack defense p99106 september 1115 2006 pisa italy kenneth l ingham anil somayaji john burge stephanie forrest learning dfa representations http protecting web applications computer networks international journal computer telecommunications networking v51 n5 p12391255 april 2007 christopher kruegel giovanni vigna william robertson multimodel approach detection webbased attacks computer networks international journal computer telecommunications networking v48 n5 p717738 5 august 2005 shuo chen jun xu emre c sezer prachi gauriar ravishankar k iyer noncontroldata attacks realistic threats proceedings 14th conference usenix security symposium p1212 july 31august 05 2005 baltimore md jedidiah r crandall felix wu frederic chong minos architectural support protecting control data acm transactions architecture code optimization taco v3 n4 p359389 december 2006 martn abadi mihai budiu lfar erlingsson jay ligatti controlflow integrity proceedings 12th acm conference computer communications security november 0711 2005 alexandria va usa