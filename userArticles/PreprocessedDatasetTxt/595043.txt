solving vehicle routing problems using constraint programming metaheuristics constraint programming typically uses technique depthfirst branch bound method solving optimization problems although method give optimal solution large problems time needed find optimal prohibitive paper introduces method using local search techniques within constraint programming framework applies technique vehicle routing problems introduce constraint programming model vehicle routing system integrating constraint programming local search techniques describe method accelerated handling core constraints using fast local checks complex constraints left constraint propagation system coupled local search method metaheuristic avoid search trapped local minima several metaheuristics investigated ranging simple tabu search method guided local search empirical study benchmark problems shows relative merits techniques investigations indicate specific longterm memory technique used guided local search used diversification method tabu search resulting significant benefit several new best solutions solomon problems found relatively iterations algorithm b introduction paper describes use iterative improvement techniques metaheuristics search engine within constraint programming framework ilog solver application vehicle routing problem vrp vrp practical problem studied widely literature 10 problem usually expressed follows given set customers requiring visit fleet vehicles based depot perform visits construct set routes vehicles minimises costs operation objective function usually expressed costs related number vehicles distance travelled constraints include various capacity constraints weight volume length etc time constraints customer accept visit total length routes however practical problems may many different kinds additional constraints including legislative restrictions established work practices customer preferences complex objective function reflecting complicated pay provisions constraint programming cp paradigm representing solving wide variety problems problems expressed terms variables domains variables constraints variables problems solved using complete search techniques depthfirst search satisfaction branch bound optimi richness language used express problems cp makes ideal candidate vrps however vrp nphard problem 3 problems practical size computing optimal solutions time consuming paper investigate iterative improvement techniques used cp framework replace complete search simple local search procedures get trapped local minima improvement techniques used conjunction metaheuristic examine two metaheuristics simple tabu search approach 5 6 guided local search 21 23 paper organised follows section 2 describe constraint programming paradigm applied vrp local search performed within framework section 3 solution technique using metaheuristics discussed section 4 computational tests two metaheuristics reported investigations reveal performance simple tabu search significantly increased incorporating specific longterm memory features guided local search 2 constraintbased modelling vrps part attraction constraint programming richness language specifying model ilog solver 14 allows real integer variables constrained simple bounds linear nonlinear constraints similarly objective function complex general expressions used constraints addition expressions involving usual arithmetic logical operators complex symbolic constraints used describe problem examples include alldifferent constraint used express efficiently propagate fact variable set must take different value ability constrain index array using constrained variable enhances search using constraint propagation bounds constraints variable inferred tentatively set changes propagated constraints reduce domains constrained variables ilog solver uses depthfirst search constraint propagation node search tree propagation mechanism removes values domains constrained variables inconsistent variables propagation mechanism removes values variable cannot solution subtree search backtracks making different decision backtrack point backtracking chrono logical decisions undone opposite order made moreover domains constrained variables reduced search progresses tree domains constrained variables restored backtracking previous node general enlargement relaxation domains supported important implications way vehicle routing problems solved paper discussed section 24 21 constraint programming model vrp decision variable r associated customer visit representing next visit performed vehicle vehicle k additional visits k marking start route e k marking end route read itinerary vehicle k start k follow next pointers e k set customer visits referred n starting visits ending visits e visits regarding r function r maps n onto model vrp routing problems desirable special constraint type dealing constraints along paths use path constraint 1 8 allows realvalued quantities accumulated along route bounded quantities accumulated relate time load variables constraints form thus visit j immediately follows visit quantity q accumulated example setting equal travel time j means q j would arrival time j setting q ij demand would accumulate load vehicle specification allows realworld constraints expressed succinctly case fixed point boundary condition must supplied example case load constraints single constraint type contains upper bound also effect eliminating subtours routes include k 22 core constraints core constraints vehicle routing problems related time capacity time restricted working day time windows customers capacity may restricted terms weight volume number pallet places etc path constraint used propagate start time customer service along vehicle route case q ij service time plus travel time j single multiple service time windows could set constraining start service variable visit start end working day vehicle represented imposing time windows visits e method modelling capacity constraints vehicles propagate via path constraint free space vehicle along vehicle route model f free space arrival visit q ij change free space associated visit indicate vehicles must overfilled time constraints form f imposed vehicle k capacity c k fixed point f set simultaneous pickups deliveries modelled similar way discussed 23 side constraints one significant benefits cp techniques side constraints incorporated model comparative ease example visits may require special equip ment vehicles may simply large enter premises therefore need able disallow visit made particular vehicles model propagating vehicle tag k visit k along route using constraint similar path constraint r thus customer visits served vehicle k tag k vehicle k forbidden making visit imposing constraint form 6 k conjunction expressions used exclude one vehicle requirement two visits j must made different vehicles also specified using tags implementing length capacity vehicles provides one final example demonstrates powerful use vehicle tags length restriction different capacity constraint accumulate route visit involves goods length l l k length vehicle k constraint l l defines length constraint 24 search strategy solutions cp problems usually found using complete methods depthfirst search branch bound however routing problems practical size complete search methods cannot produce solutions short reliable time period contrast iterative improvement methods proved successful regard iterative improvement methods operate changing small parts solution instance moving visit one route another type operation involves retracting previous decisions making new ones contrast depthfirst search retraction done order simply opposite order decisions made general overhead implementing type nonchronological retraction mechanism cp frameworks high overcome problem cp system used check validity solutions determine values constrained variables search solutions search performed iterative improvement procedure procedure needs check validity potential solution handed cp system part checking constraint propagation using constraints still takes place adds value constraint check iterative improvement method take advantage reduced domains speed search performing fast legality checks see later section implementation relies two representations solution passive rep resentation template new solutions constructed holds current solution necessarily best solution second active representation holds constrained variables within constraint propagation takes place variable states active representation checkpointed current domains saved changes made domains restored later cp system performs propagation validity checks instantiates set decision variables r using itinerary passive representation constraints propagate constrained variables time capacity variables domains reduced variable legal values solution illegal improvement heuristics generally modify small part routing plan fore testing complete solution manner inefficient tried avoid inefficiency two ways reducing amount work carried cp system perform check bypassing cp checks altogether first method applies vehicle routes independent ie constraints acting visits case many routing problems problems routes involved modification plan need instantiated active representation normally means one two routes instantiated second method increasing efficiency perform tests core constraints situ using domains constrained variables capacity time preserved last propagation described earlier propagation precisely computes remaining slack cumulative q variable slack reduced much possible using constraints ie side constraints problem situ checks done constant time using method derived savelsbergh 17 constant time check successful need route set passed cp system full checking acceleration techniques described increase performance vrp search engine factor twenty 200000 neighbourhood moves examined per second highend pc 1 3 solution methods local search operates considering set possible moves moves considered paper described following section local search repeatedly chooses move reduces objective value implements move legal costreducing moves available two alternatives choosing move perform first accept choose first costreducing move found best accept choose legal move reduces objective largest amount best accept method used throughout paper local search suffers problem get caught first local minimum encounters order escape local minimum controlled method accepting uphill move required metaheuristics provide framework accepting moves paper examine two metaheuristics tabu search 5 6 guided local search 21 23 described detail later 31 move operators considered four move operators see figure 1 2opt reverses section route deleting two arcs replacing two others reform route b relocate moves visit position one route another position either different route c exchange swaps two visits either different route cross swaps end portions two route 2opt described 11 others 16 2opt heuristic b relocate heuristic c exchange heuristic cross heuristic figure 1 four move operators 32 tabu search tabu search metaheuristic widely applied many combinatorial optimization problems 7 gives numerous applications great success particular tabu search extensively applied vehicle routing problems good results example 4 12 13 15 19 tabu search sufficiently well known give general description descriptions found 5 6 7 table 1 thresholds different move operators operator arcs threshold cross 4 3 exchange 8 6 relocate 6 5 implementation tabu search simple one involving tabu moves use longterm memory explicit intensification diversification phases vrp moves characterised two sets directed arcs arcs added arcs removed example relocate operator figure 1b removes three arcs adds three new arcs use two tabu lists fixed equal size one storing recently added arcs storing recently removed arcs use following procedures performs local search starting solution returns new solution use best accept algorithm among legal moves defined move operators section 31 choose move decreases objective greatest amount repeat move strictly decreases objective ffl rankmovess returns list legal moves ordered according ascending cost difference moves reducing objective greatest amount near beginning list ffl isnottabum true move tabu dictated tabu lists implementation tabu status move decided follows arcs removed occur recently added tabu list counted likewise arcs added occur recently deleted tabu list counted sum compared threshold dependent move type see table 1 threshold met passed move tabu tabu otherwise note table 1 number arcs modified 2opt variable inverted part route may length experiments length lists 100 arcs aspiration criterion used could change tabu status move move would result solution better current best accepted even tabu ffl performm performs move ffl insertintabulistm inserts added deleted arcs appropriate tabu lists tabu search algorithm described figure 2 os objective function function headl returns first element list l removes l initialsolu tion stoppingcondition defined section 4 initialsolution current solution localsearch make sure start local min best solution stoppingcondition moves rankmovess moved false moved isnottabum performm moved true return figure 2 tabu search algorithm 33 guided local search guided local search gls 21 23 metaheuristic based penalties method works adding penalty factor objective function based experience search gained roughly speaking search penalised strays close previously visited local minima allowing escape local minima gls proved effective metaheuristic range combinatorial optimization problems example see 20 22 23 24 follows describe general algorithm application vehicle routing problem 331 guided local search algorithm guided local search moves local minimum penalizing particular solution features considers occur good solution defines modified objective function augmented set penalty terms features usual local search method invoked improve augmented objective function cycle local search penalty term update repeated often required gls requires following components ffl set features f let indicator function feature 2 f f f feature solution 0 otherwise ffl cost vector c c cost feature ffl penalty factor gls tracks penalties applied via penalty vector p p integer number times feature penalised far assuming os original objective function problem gls defines augmented objective function requires local search procedure minimises user must provide procedure performs local search starting solution returns new solution improvement carried respect augmented objective 0 gls provides function called choosepenaltyfeaturess p takes solution current spread penalties returns set features penalised gls penalises costly features current solution weighted number times features already penalised effect concentrating penalties bad features tending accept bad features keep appearing local minima ie seem inevitable gls chooses features 2 c p 1 largest amongst features unless cost values c equivalent low multiples usually one feature chosen penalise assuming usual functions initialsolution stoppingcondition exist gls algorithm described figure 3 initialsolution current solution localsearch make sure start local min best solution stoppingcondition f choosepenaltyfeaturess p forall g f return figure 3 gls algorithm parallels drawn gls use frequency memory tabu search 5 frequency memory records number times particular feature appeared previous solutions used diversification phase penalise occurrence features appeared often however two main differences ideas gls uses memory throughout search rather separate phase eliminates need tuning parameters use duration diversification phase second selection features penalise gls based cost features well frequency occurrence penalising features appeared often tabu search may attempt drive good features gls uses domain knowledge form feature costing try avoid addition sense frequency used different gls often feature appears penalised less likely penalised case tabu search 332 gls vehicle routing define implementation gls vrp reference description ffl feature set f 21 23 travelling salesman problem arcs chosen feature penalise use method use directed arcs since routing problems involving time direction important ffl feature costing assume cost c directed arc feature length arc ffl penalty factor found values 01 03 work well used 02 results section 4 ffl use best accept algorithm among legal moves defined operators section 31 choose move decreases objective greatest amount stop move strictly decreases objective implement objective 0 local search carried using modified distance matrix modified matrix directed arc penalised distance p matrix updated time element p changed initialsolution stoppingcondition defined section 4 4 computational experiments computational experiments performed using tabu search guided local search metaheuristics heuristics stoppingcondition function used 1000 forward moves search space 1000 forward moves took 10 minutes cpu time initialsolution function used produced savings method 2 followed search local minimum objective function total distance travelled vehicles incentive reduce number vehicles means although results different methods comparable directly comparable previously reported best values emphasise reducing number vehicles 1000 moves final phase entered tabu search gls restrictions switched search performed local minimum gls corresponds zeroing penalties finding local minimum tabu search search local minimum using tabu list final improvement particularly useful case gls may prevented reaching true local minimum search due penalty method employed data comparison used solomon 18 problems 6 classes c1 c2 r1 r2 rc1 rc2 class contains 8 12 individual problem instances problems 100 customers central depot capacity constraints time windows time delivery total route time constraint c problems customers located clusters r problems customers random positions rc problems contain mix random clustered customers c1 rc1 problems sets short scheduling horizon require 9 19 vehicles problem classes c2 rc2 representative longhaul delivery longer scheduling horizons require fewer 2 vehicles time distance given euclidean distance points 41 performance algorithms figure 4 shows rate improvement tabu search gls six problem classes graphs produced follows forward move lowest travel distance found far metaheuristic problem recorded describes series monotonically decreasing curves metaheuristic applied problem curves corresponding single problem class single metaheuristic av eraged resulting 12 curves finally curves normalised baseline best average distance value class attained best metaheuristic class thus graphs one metaheuristics always attains 0 point five six classes gls outperforms simple tabu search margin varying 12 27 remaining class tabu search performs 05 better gls 42 inside search attempt understand better performance gls simple tabu search examined search process observing change objective function hope see search stagnates aggressively search attempts move local minima figure 5 shows best objective value found far os current objective value os gls tabu search proceed 1000 iterations problem rc107 problem rc107 typical problem starting solution improved problem rc107 demonstrates gradual fall cost also shows gls diversifies search moving new best solution seen rise cost following fall cost period diversification gls moves current local minimum finds path new local minimum trace also shows diversification period tends become longer search suggesting search must roam farther previous best solution order reduce best cost comparison simple tabu search appears roam within relatively small distance cannot escape local minimum trapped figure 6 shows behaviour problem c106 initial solution c106 optimal search futile conjecture gls investigated three distinct local minima clusters local minima appears search repeatedly returns nearby local minimum escaping new part solution space new deep local minimum simple tabu search appears exhibit harmonic behaviour swinging away back frequency apparently related tabu tenure percent min iterations gls tabu search problem class c11357 percent min iterations gls tabu search problem class c21357 percent min iterations gls tabu search problem class r11357 percent min iterations gls tabu search problem class r21357 percent min iterations gls tabu search problem class rc11357 percent min iterations gls tabu search problem class rc2 figure 4 rate improvement tabu search gls 43 including glstype longterm memory tabu search drawback simple tabu search approach presented based shortterm memory limits capability explore various regions search distance iterations current gls problem rc10712601300134013800 200 400 600 800 1000 distance iterations current tabu search problem rc107 figure 5 inside search problem rc107 left gls right simple tabu search see search proceeds gls tends roam progressively whereas tabu search appears wander within small distance 85095010500 200 400 600 800 1000 distance iterations current gls problem c10685095010500 200 400 600 800 1000 distance iterations current tabu search problem c106 figure 6 inside search problem c106 starting solution optimal see left gls roams progesssively appears find 2 3 new local minima right harmonic appears within simple tabu search frequency possibly function tabu tenure space better diversify search various procedures already proposed literature including frequency memory discussed section 33 alternative method addresses specific case vrp see 15 gls simplicity excellent results gives see 9 comparison gls best reported methods seems offer alternative method implementing longterm memory within tabu search diversification two advantages methods incorporation domain knowledge costing arcs constant diversification without need separate phase resulting tabu search still operates selecting nontabu move available neighbourhood however move glstype procedure called update weights cost matrix method called guided tabu search gts combined method length tabu lists remained 100 arcs however slightly better results achieved reducing penalty factor 02 015 performance gts relative gls simple tabu search shown figure 7 guided tabu search outperforms two methods long haul problems rc2 performing average 17 better remaining problem classes gts quite convincing competitive 5 conclusion described method combining constraint programming iterative improvement techniques combination makes full use propagation facilities constraint programming framework use backtracking procedure method accelerated using system whereby certain core constraints maintained within search engine side constraints handled constraint programming system method applied vehicle routing problem search engines using two different metaheuristics examined simple tabu search technique guided local search techniques compared set standard benchmark problems guided local search found superior simple tabu search method examination behaviour algorithms suggested adding features guided local search tabu search would improve performance combined method guided tabu search able outperform methods problems future wish examine diversification methods tabu search compare results obtained guided tabu search intensification strategies guided local guided tabu search also interest testing realworld problems progress hope give us insights ways improving methods presented acknowledgments production paper supported greentrip project research development undertaking partially funded esprit programme commission european union project number 20603 partners project pirelli tollpostglobe n university strathclyde uk percent min iterations gls tabu search problem class c12610 percent min iterations gls tabu search problem class c22610 percent min iterations gls tabu search problem class r12610 percent min iterations gls tabu search problem class r22610 percent min iterations gls tabu search problem class rc12610 percent min iterations gls tabu search problem class rc2 figure 7 rate improvement basic tabu search gls tabu search gls longterm memory r scheduling vehicles central depot number delivery points computers intractability guide theory npcompleteness tabu search heuristic vehicle routing problem search search search guided local search vehicle routing problem routing problems bibliography computer solutions traveling salesman problem metastrategy simulated annealing tabu search algorithms vehicle routing problem tabu search heuristic vehicle routing problem time windows beyond glassbox constraints objects probabilitic diversification intensification local search vehicle routing computer aided routing vehicle routing problem time windows minimizing route duration algorithms vehicle routing scheduling problem time window constraints hybrid genetic algorithm fast local search guided local search application british telecoms workforce scheduling problem guided local search combinatorial problems function optimization using guided local search guided local search partial constraint satisfaction problems guided local search tr ctr vincent tam k combining metaheuristics effectively solvethe vehicle routing problems time windows artificial intelligence review v21 n2 p87112 april 2004 andrew lim brian rodrigues lei song manpower scheduling time windows proceedings acm symposium applied computing march 0912 2003 melbourne florida c voudouris guided local search illustrative example function optimisation bt technology journal v16 n3 p4650 july 1998 pascal hentenryck laurent michel control abstractions local search constraints v10 n2 p137157 april 2005 alain chabrier vehicle routing problem elementary shortest path based column generation computers operations research v33 n10 p29722990 october 2006 laurent michel pascal van hentenryck comet context proceedings paris c kanellakis memorial workshop principles computing knowledge paris c kanellakis memorial workshop occasion 50th birthday p95107 june 0808 2003 san diego california usa filippo focacci andrea lodi michela milano mathematical programming techniques constraint programming short overview journal heuristics v8 n1 p717 january 2002 j christopher beck patrick prosser evgeny selensky case study mutual routingscheduling reformulation journal scheduling v9 n5 p469491 october 2006 christian blum andrea roli metaheuristics combinatorial optimization overview conceptual comparison acm computing surveys csur v35 n3 p268308 september haibing li andrew lim local search annealinglike restarts solve vehicle routing problem time windows proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain beatrice ombuki brian j ross franklin hanshar multiobjective genetic algorithms vehicle routing problem time windows applied intelligence v24 n1 p1730 february 2006 k c tan h chew l h lee hybrid multiobjective evolutionary algorithm solving vehicle routing problem time windows computational optimization applications v34 n1 p115151 may 2006 alexandre le bouthillier teodor gabriel crainic cooperative parallel metaheuristic vehicle routing problem time windows computers operations research v32 n7 p16851708 july 2005