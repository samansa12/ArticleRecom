global scheduling flexible transactions heterogeneous distributed database systems abstracta heterogeneous distributed database environment integrates set autonomous database systems provide global database functions flexible transaction approach proposed heterogeneous distributed database environments environment flexible transactions increase failure resilience global transactions allowing alternate sense equivalent executions attempted local database system fails subtransactions global transaction abort paper study impact compensation retry switching alternative executions global concurrency control execution flexible transactions propose new concurrency control criterion execution flexible local transactions termed fserializability errorprone heterogeneous distributed database environments present scheduling protocol ensures fserializability global schedules also demonstrate scheduler avoids unnecessary aborts compensation b introduction heterogeneous distributed database system hddbs integrates set autonomous database systems provide global database functions hddbs environment transaction management handled global local levels confederation preexisting local current address mcc 3500 west balcones center dr austin databases overriding concern hddbs must preservation local autonomy lit86 gmk88 bs88 pu88 vei90 vw92 accomplished superimposition global transaction manager gtm upon set local database systems ldbss global transactions submitted global transaction manager parsed set global subtransactions individually submitted local transaction management systems local sites lss time local transactions directly submitted local transaction management systems local transaction management system maintains correct execution local global subtransactions site left global transaction manager maintain correct execution global transactions preservation atomicity isolation global transactions fundamental achieving correct execution global transactions preserving atomicity semantic atomicity gm83 global transactions hddbs systems recognized open difficult issue ssu91 traditional twophase commit protocol 2pc developed distributed database environments shown lks91a sks91 mr91 bz94 inadequate preservation atomicity global transactions hddbs environment example local database systems may support visible preparetocommit state transaction yet committed guaranteed ability commit situations local database system participates hddbs environment may unilaterally abort global subtransaction without agreement global level moreover even local database systems assumed support preparetocommit state traditional distributed database systems potential blocking long delays caused states severely degrade performance concept compensation proposed gm83 address semantic atomicity longrunning transactions shown lks91a useful hddbs environment using technique global subtransactions global transaction may commit unilaterally local sites semantic atomicity guarantees global subtransactions commit global transaction commits otherwise tentatively committed global subtransactions compensated mehrotra et al mrks92 identified class global transactions semantic atomicity maintained hddbs environment global transaction contains set subtransactions either compensatable retriable pivot one subtransaction pivot znbb94 shown class extended specifying global transactions flexible transactions flexible transaction models contracts flex transactions stransactions others dhl91 ellr90 bds increase failure resilience global transactions allowing alternate subtransactions executed ldbs fails subtransaction aborts nonflexible transaction global subtransaction abort followed either global transaction abort decision retry global subtransaction flexible transaction model additional option switching alternate global transaction execution following example illustrative example 1 client bank b 1 wishes withdraw 50 savings account 1 deposit friends checking account 2 bank b 2 possible deposit 50 checking account 3 bank b 3 flexible transactions represented following set subtransactions savings account 1 bank b 1 checking account 2 bank b 2 checking account 3 bank b 3 global transaction either acceptable preferred 2 fails entire global transaction thus may aborted even 2 fails 2 flexibility allows flexible transaction adhere weaker form atomicity term semiatomicity still maintaining correct execution hddbs semiatomicity allows flexible transaction commit long subset subtransactions represents execution entire flexible transaction commit enforcing semiatomicity flexible trans actions class executable global transactions enlarged heterogeneous distributed database system znbb94 effect retrial compensation methods investigated preserve semiatomicity flexible transactions however design scheduling approaches global concurrency control execution flexible transactions carefully investigated global concurrency control considering effect compensation respect traditional transaction model extensively studied kls90 formal analysis presented situations transaction may see partial effect another transaction partial effects compensated proposed lks91a prevent inconsistent database state seen distributed database environment global transaction unaffected aborted committed subtransactions another global transaction concurrency control correctness criterion termed serializability respect compensation src proposed mrks92 preserve database consistency hddbs environment throughout execution global transactions possessing value dependencies among subtransactions criterion prohibits global transaction serialized global transaction g compensating transaction cg accessing local sites g aborts proposed approaches inadequate situation value dependencies present among subtransactions global transaction value dependencies specify data flow among global subtransactions global transaction important characteristics flexible transactions paper propose concurrency control criterion execution flexible local transactions hddbs environment carefully analyze effects compensa tion retry switching alternate executions global concurrency control propose specific correctness criterion schedules concurrent flexible local transactions called fserializability hddbs environment demonstrate fserializable execution maintains global database consistency also present graphbased scheduling protocol flexible transactions ensures fserizalibility paper organized follows section 2 introduces system flexible transaction models section 3 discuss issues relevant global concurrency control execution flexible local transactions section 4 proposes global concurrency control criterion section 5 offer scheduling protocol implement proposed criterion concluding remarks presented section 6 preliminaries section shall introduce system transaction models used rest paper 21 system model system architecture consideration shown figure 1 hddbs consists set ldbs preexisting autonomous database management system set data items local site ls superimposed global transaction manager gtm assume integrated schema provided users know existence local database systems set data items local site ls partitioned local data items denoted ld global data items denoted gd ld set global data items denoted gd transactions submitted gtm divided set subtransactions submitted ldbss individually local transactions directly submitted ldbss assume gtm submits flexible transaction operations local databases servers associated ldbs hddbs global consistency means integrity constraints among data different local databases violated transactions database global flexible transactions hddbs defined executed isolation would violate global consistency hddbs concurrency control protocol schedules concurrent execution flexible subtransactions hddbs global consistency maintained however unlike monolithic databases data strictly controlled single trans computer network gtm interpreter user local transactions local transactions server server server gtm gtm gtm gi figure 1 hddbs system model action manager hddbss submit transactions autonomous local databases thus hddbs transaction manager cannot ensure transactions submitted independently local databases violate global integrity constraints following previous research commonly proposed community bst90 assume local transactions modify global data items gd note prevent local transactions read global data items long execution local transaction maintains local integrity constraints based assumption local transactions maintain local global integrity constraints 22 flexible transaction model users point view transaction sequence actions performed data items database hddbs environment global transaction set subtransactions subtransaction transaction accessing data items single local site flexible transaction model supports flexible execution control flow specifying two types dependencies among subtransactions global transaction 1 execution ordering dependencies two subtransactions 2 alternative dependencies two subsets subtransactions formal model offered znbb94 shall provide brief introduction model repertoire subtransactions pt collection subsets let assume two types control flow relations defined subsets pt respectively 2 preference j preferred j 6 j j also say j alternative 1 note j may disjoint precedence preference relations irreflexive transitive define partial order relations words precedence relation defines correct parallel sequential execution ordering dependencies among subtransactions semantics precedence relation refers execution order subtransactions 1 oe 2 implies 1 finishes execution 2 note may start 1 finishes preference relation defines priority dependencies among alternate sets subtransactions selection completing execution instance implies either j k must abort commits j k executed commits situation ft g higher priority chosen execution flexible transaction defined follows transaction set related subtransactions precedence oe preference relations defined execution flexible transaction may contain several alternatives let subset precedence relation oe defined defined oe partial order subtransactions representative partial order abbreviated oerpo execution subtransactions represents committed execution entire flexible transaction clearly oe oerpo subsets i1 i2 i1 i2 structure flexible transaction thus depicted set oerpos ft subtransactions k may contain one subtransaction local site let oe oerpo partial order 0 oe 0 prefix oe denoted ffl ffl 2 0 predecessors 0 partial order 0 oe 0 prefix oe respect 2 denoted 0 prefix oe 0 contains predecessors partial order 0 oe 0 suffix oe respect 2 denoted contains successors general alternate relationship need exist two individual subtransactions one subtransaction may semantic alternative several subtransactions 2 note transaction becomes traditional global transaction use prefixes suffixes show flexible transaction switch executing one oerpo executing lowerpriority alternative intuitively oerpos prefix subtransactions immediately following prefix execution continue execution point shared prefix completed case set ft forms switching set formally defined follows subtransactions oerpo oe flexible transaction forms switching set oe ffl oerpo 0 oe 0 prefix 0 oe 0 switching point subtransaction switching set relates one oerpo another oerpo two oerpos flexible transaction say higher priority p 2 denoted 1i 1 2j 2 preference relation defines preferred order alternatives state two subsets priority ae j k execution flexible transaction moment must uniquely determined say flexible transaction unambiguous following conditions satisfied ffl switching set oerpo oe two alternatives priority ffl none oerpos priority cycle p 1 permutation note set oerpos flexible transaction may clearly ranked even unambiguous aborting subtransactions determines alternative oerpo chosen remainder paper assume flexible transactions unambiguous following example given znbb94 example 2 consider travel agent information system arranging travel schedule customer assume flexible transaction following subtransactions plane fare account 1 plane fare account reserve pay nonrefundable plane ticket rent car avis limo seat hotel following oerpos defined subtransactions switching set p 1 ft 4 g switching set p 1 p 3 switching sets g clearly set oerpos flexible transaction unambiguous note cannot ranked preferred order 2 oerpo subtransactions value dependencies among operations different subtransactions define data flow among subtransactions let oe oerpo subtransactions say value dependent j 1 execution one operations j determined values read subtransaction categorized either retriable compensatable pivot say subtransaction retriable guaranteed commit finite number submissions executed consistent database state retriability subtransactions highly determined implicit explicit integrity constraints instance bank account usually upper limit deposit action retriable however usually lower limit withdrawal action retriable subtransaction compensatable effects execution semantically undone commitment executing compensating subtransaction local site assume compensating subtransaction ct subtransaction commit successfully persistently retried 3 ct must also independent transactions execute ct local database autonomy requires arbitrary local transactions executable time committed time ct executed local transactions must able see overwrite effects time example consider hddbs account ls 1 account b ls 2 integrity constraints 0 b 0 suppose transaction 1 transfers 100 b withdrawal subtransaction 1 ls 1 compensatable deposit subtransaction 2 ls 2 compensation 2 may violate integrity constraint local transaction executed 2 compensating subtransaction takes amount b note 1 2 compensatable traditional distributed database environment ensures transactions executed 2 compensating subtransaction ct 2 commutative ct 2 kls90 br92 subtransaction pivot subtransaction neither retriable compensatable 3 requirement termed persistence compensation discussed literature gm83 example consider subtransaction reserves pays nonrefundable plane ticket clearly subtransaction compensatable subtransaction also retriable since ticket might never available concept semiatomicity introduced znbb94 commitment flexible transactions execution flexible transaction committable property semi atomicity preserved requires one following two conditions satisfied ffl subtransactions one oerpo commit attempted subtransactions committed oerpo either aborted effects undone effects subtransactions remain permanent local databases define commit dependency relationships two subtransactions flexible transaction obeyed commitment subtransactions say j commit dependent denoted commitment must precede j preserve semiatomicity clearly oe j de pendencies determined execution control flow among subtransactions termed ecommit dependencies ensure execution oerpo terminate commitment compensatable subtransactions always precede pivot subtransactions turn precede commitment retriable subtransactions dependencies termed commit dependencies also subtransactions retriable value dependencies must considered determining commitment order retriable subtransaction remains retriable without resulting database inconsistency long subtransactions value dependent upon committed dependencies termed vcommit dependencies say flexible transaction wellformed committable wellformed flexible transactions identified znbb94 semiatomicity maintained wellformed global transactions identified mrks92 semantic atomicity gm83 maintained assume paper flexible transactions wellformed discussion global concurrency control say database state consistent preserves database integrity constraints defined traditional transactions execution flexible transaction single unit map one consistent hddbs state another however flexible transactions definition consistency requires execution subtransactions oerpo must map one consistent hddbs state another discussion used banking travel agency application examples recognized concept flexible transactions extended specify activities involving coordinated execution multiple tasks performed different processing entities 93 instance manufacturing applications flexible transactions used specify control data flow agile partner applications typical intertask dependencies include 1 ordering dependencies define parallel sequential executions among tasks 2 trigger dependencies define contingency executions among tasks 3 realtime dependencies define realtime constraints tasks eg chronological dependency defined specifying start time expected completion time tasks dependencies realized using flexible transaction model extension dependencies also recognized concept workflow used specification facility separate control data flows multisystem application rest application code 3 issues global concurrency control section discuss various inconsistent scenarios may arise compensation retrial allowed observations important input establishment suitable global concurrency control correctness criterion 31 global serializability global serializability bs88 bgms92 accepted correctness criterion execution nonflexible global local transactions hddbs environment global schedule globally serializable committed projection global transactions hddbs environment transactions run independently local sites conflictequivalent serial execution transactions 4 traditional transaction model shown global schedule globally serializable serializable exists total order global transactions local site ls k 1 k serialization order global subtransactions k consistent grs91 mrb note global transaction one subtransactions local site long serialization order consistent global transaction g 2 precedes global transaction g 3 follows global transaction g 1 serialization order serialization order subtransactions g 2 must precede subtransactions g 3 follow subtransactions g 1 local site following definition semiatomicity flexible transactions committed flexible transaction considered traditional global transaction contains subtransactions committed oerpo subtransactions flexible transaction belong committed oerpo may committed effects compensated discussion call subtransactions invalid subtransactions invalid subtransactions compensating transactions termed surplus transactions effects visible hddbs 4 see bhg87 definitions committed projection conflict equivalence flexible transaction committed let global schedule containing concurrent executions subtransactions compensating subtransactions flexible transactions l set local transactions c projection committed local transactions subtransactions committed oerpos extend global serializability treat surplus transactions local transactions definition 3 global serializability global schedule globally serializable projection committed local flexible surplus transactions conflictequivalent serial execution transactions rest paper sake similicity assume global transaction one subtransaction local site however theorems directly applied general situation multiple subtransactions permitted global transaction case flexible transaction consider oerpo flexible transaction one subtransaction local site note may still contain one subtransaction local site provided different oerpos denote executed operation im subtransactions local sites ls 1 lsm committed oerpo flexible transaction jm analogous subtransactions committed oerpo flexible transaction j ip jp executed local site ls p let serialization ordering transactions indicating execution ip must serialized jp ldbs executed applying global serializability theory execution flexible transactions following theorem theorem l wellformed flexible transactions global schedule assume ldbss maintain serializability local transactions subtransactions sites global serializability preserved c exists permutation p local sites ls p several solutions proposed enforce serializable execution global transactions including forced local conflicts grs91 approaches readily applicable flexible trans actions however globally serializable schedules may longer preserve database consistency execution flexible local transactions global serializability criterion fails consider constraints committed subtransactions part committed oerpos compensating subtransactions fact every commit protocol uses compensation execution flexible transactions may face difficulties preservation consistency globally serializable schedules 32 problematic situations consider scenarios may arise compensation retrial allowed discussing scenarios first introduce concept serialization point similar existing notion serialization event ed90 serialization function mrb definition 4 serialization point let ip jp two subtransactions executed local site ls p operation ip ip serialization point ip global schedule subtransaction jp exists operation jp jp ip determination serialization points depends concurrency control protocol ldbs instance local database system uses strict twophase locking pessimistic concurrency control serialization point fall anywhere moment subtransaction takes last lock commitment mrb local conflicts forced subtransaction updates shared data item local site order updates forms serialization order detailed discussion procedure found mrb general individual transaction may serialization point schedule case serialization graph testing bhg87 used concurrency control protocol however enforcing globally serializable schedules must determine serialization orders subtransactions local sites order deal local indirect conflicts grs91 mrb thus assume serialization point subtransaction determined local site also assume help forced local conflicts ensure serialization point reached transaction begins commits bounded serialization point assumption first let us consider following example example 3 consider hddbs data items b ls p data item c ls p1 let integrity constraints c b c two flexible transactions 1 2 local site ls p executed follows b executes serialization point enforcing 1p 2p 2p read data item b written 1p ffl 1p1 c c gamma 1 aborts 1 makes global decision abort compensating subtransaction ct 1p b b 1 executed 2 example effects 1 eventually removed execution including effects 1p global serializability preserved flexible transaction 1 aborted correctly compensated even though effects read flexible transaction 2 however proceeds based reading data item updated 1p thus may inconsistent consider initial database state 5 4 resulting database state execution ct 1p would 4 inconsistent concept isolation recovery lks91b lks91a states global transaction unaffected aborted committed subtransactions global transactions addition example shows global transaction affected committed subtransaction must later compensated task constructing compensating subtransaction greatly complicated need restore database consistency compensating subtransactions must capable undoing effects may seen global transactions example example ct 1p must restore data item b also data item however also undesirable ct 1p check reads global sub transactions note effects compensated subtransactions local transactions need considered assume execution subtransaction transfers local database one consistent state another leads us following observation necessary condition maintaining database consistency execution containing concurrent flexible transactions compensating subtransactions undo effects corresponding compensatable subtransactions compensatable subtransaction ip given local site ls p 1 p subtransactions subsequently serialized local site must read data items updated ip either makes global decision commit oerpo containing ip compensating subtransaction ip executed serialization point complication compensating subtransaction ct ip may still unilaterally abort need retried conflicting subtransactions may aborted ensure serialized ct ip avoid undesirable cascading aborts must delay execution serialization point conflicting subtransactions one following conditions holds ffl flexible transaction containing ip made decision commit oerpo contains ip ct ip committed following example also problematic example 4 two flexible transactions 1 2 local site ls p executed follows makes global decision commit executes serialization point executes serialization point enforcing 1p 2p retriable unilaterally aborts ffl 1p resubmitted reexecutes serialization point 2p 1p contradicts order 1p 2p enforced point serialization order consistent local sites 2p must aborted 2 avoid cascading aborts make following observation necessary condition avoiding cascading aborts subtransaction retried ensure subtransaction execute serialization point retriable subtransactions precede serialization order execution aborted successfully committed situation avoid cascading abort also allow situation compensation must cascaded makes global decision commit executes serialization point executes serialization point enforcing 1p 2p commits retriable unilaterally aborts ffl 1p resubmitted reexecutes serialization point 2p 1p contradicts order 1p 2p enforced case 2 must backtrack compensate 2p correct serialization order attained ls p unfortunately 2p compensatable may impossible whether global transaction flexible using either compensation retrial regain consistency leads blocking furthermore flexible transactions switching alternate oerpo also create problems let us consider alternate flexible transaction 1 let 1n preferred oerpo let 11 oe 1j second alternate oerpo note 1j different local site subtransaction preferred oerpo following example 1 serialized example 5 executions two flexible transactions 1 2 given follows pivot commits therefore 1 makes global decision commit executes serialization point executes serialization point unilaterally aborts chooses alternate oerpo submits 1j yet execute serialization point 2j 1j contradicts serialization order enforced point 2j must aborted maintain global serializability 2 cascading abort avoided also allow cascading compensation situation compensatable commits pivot commits 2 makes global decision commit issuing compensating subtransaction ct 1p different oerpo issuing subtransaction 0 1p 1p contradicts serialization order furthermore since 2p compensatable way regain global serializability abort entire flexible transaction 1 observe later prove cascading abort avoided cascading compensation cannot occur avoid cascading aborts situation following observation observation 3 necessary condition avoiding cascading aborts alternate oerpo attempted ensure local site ldbs execute serialization point subtransaction uncompleted flexible transactions precede global serialization order alternate subtransaction possibly initiated observations 1 2 3 indicate blocking execution subtransactions reach serialization point early may unavoidable concurrency control algorithm designed avoid cascading aborts blocking result delay commitment operations subtransactions observations 1 2 relate directly delays caused compensation retrial cannot therefore avoided global transaction model uses techniques regain consistency subtransaction aborts observation 3 concerns delays arise flexible transactions conflicting considerations flexible therefore failureresilient global transactions prone greater delays global transactions less flexibility less resilient failure fewer delays consequently flexible transaction approach indeed extend scope global transactions cause blocking traditional transaction model observations made concerning concurrency control play dominant role design concurrency control algorithms maintaining global serializability execution flexible local transactions following observations see execution flexible transaction may greatly affected concurrent execution flexible transactions 4 global scheduling criterion propose new concurrency control criterion execution flexible local transactions criterion termed fserializability places restrictions global serializability thus set fserializable schedules subset globally serializable schedules following observations 13 see observation 1 effect definition criterion observations 2 3 impact design concurrency control protocol 41 serializability flexible transactions clearly database inconsistency may caused compensation prevented globally serializable execution simply requiring compensatable subtransaction given local site ls conflicting subtransactions subsequently serialized local site execute serialization points either makes global decision commit oerpo containing compensating subtransaction executed serialization point less restrictive approach also possible definition compensating subtransaction ct able compensate effect regardless transactions execute ct however transactions may propagate effect transactions propagation cannot statically considered ct flexible transaction j following global serialization order subtransaction j j accesses reads writes data items written j definitely propagate effect serialized ct manner local transaction j accesses data items written may database inconsistency result let act denote set data items accesses commits rct denote set data items reads commits wct denote set data items writes commits define compensationinterference free property global schedules follows definition 5 compensationinterference free global schedule compensationinterference subtransaction j serialized subtransaction compensating transaction ct wct propose new global concurrency control criterion follows definition 6 fserializability let global schedule set wellformed flexible transactions local transactions fserializable globally serializable compensation interference free note definition 6 execution wellformed flexible transaction may result committed flexible transaction surplus transactions comparing definition fserializable schedules given global serializable schedules given definition 3 easily see set fserializable schedules subset globally serializable schedules however followed traditional definition global serializability subtransactions compensating subtransactions flexible transaction local site treated logically atomic subtransaction set fserializable schedules would superset globally serializable schedules example consider committed flexible transaction 1 generated surplus pair subtransaction 1 compensating subtransaction ct 1 let another flexible transaction 2 contain data items rct 1 fserialized 1 ct 1 cannot globally serialized 1 ct 1 addition since surplus pair subtransactions belong different representative partial order committed one subtransactions treated separate global transaction theorem 2 given demonstrates fserializability ensures global database consistency first show compensationinterference free property fserializable global schedule inherited conflict equivalent schedule given fserializable global schedule schedule 0 conflictequivalent compensationinterference free proof proof proceeds contradiction suppose schedule 0 conflict equivalent compensationinterference free exists subtransaction j serialized subtransaction compensating transaction ct 0 j accesses data item written since 0 conflict equivalent j must also access written serialized ct consequently compensationinterference free contradicting given condition 2 without loss generality assume theorem local flexible surplus transactions committed thus identical c theorem 2 fserializable schedule preserves global database consistency proof let fserializable schedule transfers consistent database state ds 0 new database state ds 1 let equivalent global serial schedule n committed local flexible invalid compensating subtransaction lemma 1 know 0 compensationinterference free demonstrate ds 1 consistent first prove every local flexible invalid subtransaction reads consistent database state proof proceeds induction position transaction basis obviously 1 either local flexible invalid subtransaction since 1 reads ds 0 reads consistent database state induction assume transactions compensating subtransaction reads consistent state consider k two cases local transaction since transactions preserve local database consistency k thus reads locally consistent database state invalid subtransaction committed flexible transaction let set data items existing global database let 0 dgammafthe set data items updated invalid subtransactions appeared 1 compensating subtransactions appeared k g since 0 compensationinterference free reads state 0 thus k reads consistent database state semantics compensation partial effects invalid subtransactions 0 semantically compensated compensating subtransactions since effects invalid subtransactions seen transactions compensated inconsistencies caused invalid subtransactions restored compensating subtransactions let 00 0 restricted transactions neither invalid subtransactions compensating sub transactions thus 00 consists serial execution atomic local flexible transactions since transaction 00 sees consistent database state 00 preserves global database consistency therefore ds 1 consistent 2 42 avoiding cascading aborts compensations maintained global schedule following rules necessary sufficient flexible transaction scheduler follow order avoid cascading aborts serialization reasons ffl subtransaction flexible transaction j execute serialization point retriable subtransactions flexible transactions ffl subtransaction flexible transaction j execute serialization point alternative subtransactions flexible transactions committed longer participate committed oerpo proof necessary condition shown observations 2 3 sufficient condition shown observation cascading aborts really occur subtransaction j flexible transaction j serialized subtransaction flexible transaction local database conditions ensure serialization point subtransaction fixes place local databases serialization order made subtransactions could precede global serialization order either committed decided since earlier subtransaction attempt execute new subtransaction local database cascading abort occur 2 recall example 5 cascading compensations occur subtransaction 2 reads uncommitted subtransaction 1 commits 1 later aborts 2 must compensated show following theorem respect cascading compensations theorem 3 flexible transaction scheduler avoids cascading compensations avoids cascading aborts proof assume scheduler avoids cascading aborts means never needs force abort uncommitted subtransaction violation serialization lemma 2 guaranteed delaying execution serialization point subtransactions must serialized previously committed therefore cannot committed subtransactions commit thus need never compensated cascading compensation also avoided 2 5 scheduling protocol section present gtm scheduling protocol ensures fserializability execution local flexible transactions avoids cascading aborts protocol based assumption concurrency control protocol local database allow hddbs determine serialization point subtransaction ticket scheme similar grs91 implemented local database thus serialization point subtransaction always reached time subtransaction begins time commits gtm scheduling protocol propose execution graph testing method avoid high overhead keeping track serialization points ensure fserializability avoid aborts scheduling purposes maintain stored subtransaction execution graph sseg among subtransactions scheduled sseg defined follows definition 7 stored subtransaction execution graph stored subtransaction execution graph sseg set flexible transactions global schedule directed graph whose nodes global subtransactions compensating subtransactions flexible transactions whose edges must serialize due preference precedence conflict global subtransaction nodes labeled ip flexible transaction running local site p one global subtransaction defined ls p nodes ordered order oerpos indicates nodes position order ip compensatable compensating subtransactions node ct ip begin definitions flexible transaction commits pivot subtransaction commits say flexible transaction robustly terminates subtransactions committed oerpo committed compensating subtransactions committed subtransactions committed oerpo also committed gtm scheduling protocol assumes global subtransaction compensating subtransaction predeclares read write sets includes node edge insertion deletion rules operation submission rule nodes edges associated flexible transaction inserted unit edge insertion fails flexible transaction edges may inserted subsequent flexible transaction j either insertion succeeds edges deleted nodes edges flexible transaction inserted sseg according following rules node insertion rule insert node subtransaction defined compensatable subtransaction insert node ct ip edge insertion rule subtransaction ip edge insertion cause cycle 1 previouslyscheduled n hp 2 previouslyscheduled ct n ct hp 3 ip compensatable insert edge ct ip 4 ip e v commitdependent n iq 5 ip n ip compensatable insert edge ct n ip first two edge insertion cases ensure fserializability third rule ensures surplus pair invalid subtransaction precedes compensating transaction rest cases ensure flexible transactions resulting schedule commitdependency preserving alternatives attempted order nodes edges deleted sseg according following rules node deletion rule 1 upon completion flexible transaction backtrack delete nodes representing subtransactions current switching set successors well nodes representing compensating subtransactions 2 upon commitment subtransaction compensating subtransaction delete node 3 upon commitment pivot retriable subtransaction delete nodes representing alternatives successors flexible transaction well nodes representing compensating subtransactions deleted nodes 4 upon robust termination flexible transaction delete remaining nodes edge deletion rule delete edges incident deleted nodes operations global subtransaction submitted local databases according following rule operation submission rule submit operations subtransaction including begin commit local database node sseg outgoing edges sseg algorithm defined based rules note implementation operation submission rule vary depending concurrency control mechanism used local site local dbms uses strict twophase locking concurrency control mechanism serialization point subtransaction controlled gtm result operations subtransaction flexible transaction may submitted subtransactions serialized reach serialization points however concurrency control mechanisms generally cannot gain local dbmss show sseg algorithm maintains global consistency begin basic lemma restraints sseg places execution apply scheduling algorithm lemma 3 edge jq ip sseg ip jq execute commit ip must serialize jq proof operation submission rule operation jq including begin commit executed node jq outgoing edges therefore jq cannot begin consequently bounded serialization point assumption cannot execute serialization point edge deleted edge deletion rule edge deleted node ip deleted node deletion rule node ip deleted subtransaction commits bounded serialization point assumption ip must executed serialization point commits therefore ip must executed serialization point jq could possibly executed serialization point two subtransactions must serialize order ip precedes jq 2 note also edge jq ip sseg one commit either fails execute aborts one present serialization order actually executed unimportant theorem 4 consider two flexible transactions j fserialized j nodes edges inserted j proof since nodes inserted nodes inserted j know edge insertion rule edges subtransactions subtransactions j must directed subtransaction j subtransaction local database consider local site ls p j conflict first edge insertion rule edge jp ip sseg lemma 3 means subtransactions execute commit ip serializes jp ls p one two subtransactions commit two committed oerpos flexible transactions may subtransactions ls p case ls p effect serialization order j ip executed later compensated jp also executed following two cases case 1 compensationinterference free condition hold execution ip jp second edge insertion rule edge jp ct ip sseg operations jp could submitted edge deleted lemma 3 jp ct ip execute commit means ct ip must serialize jp case 2 compensationinterference free condition hold edge ct ip jp may interleaved ip ct ip however resulting schedule still compensationinterference free consequently fserialized j 2 following theorem 4 see sseg algorithm maintains global consistency also show sseg algorithm additional desirable property avoiding cascading aborts cascading compensations know theorem 3 avoids cascading aborts avoids cascading compensations therefore show following theorem 5 sseg protocol scheduling flexible transactions avoids cascading aborts proof lemma 3 know subtransactions j edge must serialize j fact similar reasoning shows us edge exists sseg must either commit abort removed consideration j begin thus proof merely need show edges inserted sseg sufficient prevent concurrent execution allows cascading abort first condition avoiding cascading aborts subtransaction flexible transaction j execute serialization point retriable subtransactions committed first case edge insertion rule enforces inserting edges ip previouslyscheduled n ip second condition avoiding cascading aborts subtransaction flexible transaction j execute serialization point alternative subtransactions flexible transaction committed longer participate committed oerpo first case edge insertion rule also enforces since sseg protocol ensures conditions necessary avoiding cascading aborts enforced theorem holds 2 thus shown sseg algorithm maintains global consistency also shown sseg algorithm additional desirable property avoiding cascading aborts cascading compensations based rules insertion deletion nodes edges sseg well operation submission rule sseg algorithm efficiently implemented hddbs environment 6 conclusions paper proposed new correctness criterion execution local flexible transactions hddbs environment advanced theory facilitates maintenance fserializability concurrency control criterion stricter global serializability prevents flexible transactions serialized flexible transaction compensating subtransactions affect data items updated flexible transaction consequently effect compensatable subtransaction spread flexible transactions compensated order prevent cascading aborts effects retrial alternatives concurrency control must also considered factors generate unavoidable blocking execution flexible transactions thus tradeoff flexibility specifying global transactions high concurrency execution flexible transactions remains r using flexible transactions support multisystem telecommunication applications merging applicationcentric datacentric approaches support transactionoriented multisystem workflows overview multidatabase transaction management concurrency control recovery databases systems multidatabase update issues reliable transaction management multidatabase system scheduling compensation multidatabase systems transactional model longrunning activities paradigm concurrency control heterogeneous distributed database systems multidatabase transaction model interbase using semantic knowledge transaction processing distributed database node autonomy distributed systems serializability multidatabase transactions forced local conflicts formal approach recovery compensating transactions multidatabase interoperability theory relaxed atomicity optimistic commit protocol distributed transaction management atomic commitment integrated database systems concurrency control problem multidatabases characteristics solutions transaction model multidatabase systems superdatabases composition heterogeneous databases transaction workflows database systems achievements opportunities transaction concepts autonomous database environments prepare commit certification decentralized transaction management rigorous heterogeneous multidatabases theory global concurrency control multidatabase systems ensuring relaxed atomicity flexible transactions multidatabase systems tr ctr heiko schuldt gustavo alonso catriel beeri hansjrg schek atomicity isolation transactional processes acm transactions database systems tods v27 n1 p63116 march 2002