approximate timing analysis combinational circuits xbd0 model paper concerned approximate delay computation algorithms combinational circuits result intensive research early 90s efficient tools exist analyze circuits thousands gates minutes even seconds many cases however computation time tools predictable since internal engine analysis either sat solver modified atpg algorithm heuristic algorithms npcomplete problem although highly tuned cad applications exists class problem instances exhibits worstcase exponential cpu time behavior context timing analysis circuits high amount reconvergence eg c6288 iscas benchmark suite known difficult analyze sophisticated delay models even stateoftheart techniques example mcgeer93 could complete analysis c6288 mapped delay model make timing analysis corner case circuits feasible propose approximate computation scheme timing analysis problem extension exact analysis method proposed mcgeer93 sensitization conditions conservatively approximated selective fashion size sat problems solved analysis controlled experimental results show approximation technique effective reducing total analysis time without losing accuracy case exact approach takes much time cannot complete b introduction late 80s early 90s significant progress 2 8 made theory exact gatelevel timing analysis false paths correctly identified exact delays computed theory progressed efficiency size limitation actual implementations timing analysis tools dramatically improved 3 8 although stateoftheart implementations handle circuits composed thousands gates mapped delay models evident current size limitation far satisfactory analyzing industrialstrength circuits furthermore even handle large circuits computation time often prohibitively large especially delay models elaborate alleviate problem several researchers proposed approximate timing analysis algorithms goal compute conservative yet accurate enough approximation true delays less computation time make analysis large circuits tractable huang et al 4 6 proposed part optimization techniques used exact analysis simple approximation heuristic complex timed boolean calculus expression internal node simplified new independent variable arriving latest work supported src97dc324 time referred original expression simplification applied number terms boolean calculus expression exceeds certain limit control computational complexity accuracy loss comes fact original functional relationship completely lost substitution also investigated powerful approximation technique 5 timed boolean calculus formula approximated sum literals products literals respectively sensitizability check satisfiability problem exact analysis performed conservatively polynomial time since approximation fairly aggressive guarantee polynomial time complexity estimated delays seem accurate enough useful unfortunately results shown 5 clear accuracy approximate delays merely showed ratios internal nodeswhose delays match exact delays nodes result shown accuracy circuit delays recently yalcin et al 11 proposed approximation technique utilizes users knowledge primary inputs categorize primary input either data control label internal nodes either data control using certain rule sensitization condition node simplified conservatively becomes independent data variables intuition behind delay circuit likely determined control signals data signals minor effects final delay 11 shows experimentally dramatic speedup possible without losing much accuracy unitdelay timing analysis based static sensitization unfortunately sensitization criterion known underapproximate true delays ie safe criterion defeats whole purpose timing analysis recently confirmed similar speedup accuracy achieved correct sensitization criterion floating mode unitdelay model 9 although application technique sophisticated delay models theoretically possible clear whether algorithm handle large circuits delay models moreover cpu times exact analysis much worse stateofthe art implementations available cancels speedup since speedup reported relative slower algorithm 1 paper apply idea using datacontrol separation stateoftheart timing analysis technique 8 design approximate algorithm sensitization criterion xbd0 model 8 one wellaccepted delay models shown correct accurate addition novel technique control complexity analysis proposed combination two ideas leads new approximation scheme 1 one reasons exact algorithm slower try represent bdd input minterms activate longest sensitizable delay stateoftheart techniques determine delay without representing input minterms explicitly extreme cases shows speedup 70x maintaining accuracy within noise range paper organized follows section 2 summarizes false path analysis forms basis work specially focus technique proposed 8 section 3 proposes two approximation schemes discusses selectively applied trade accuracy speedup experimental results given section 4 section 5 concludes paper preliminaries section review sensitization theory false path problem specifically theory developed 8 detailed since analysis following section heavily based particular theory 21 functional delay analysis functional delay analysis false path analysis seeksto determine primary output signals boolean network become stable final values given maximum delays gate arrival times primary inputs since paths may never sensitized stable time computed functional delay analysis earlier time computed topological delay analysis thereby capturing timing characteristic network accurately paths along signals never propagate called false paths extended bounded delay0 model 8 xbd0 model delay model commonly used false path analysis underlying model floating mode analysis 1 viability analysis 7 xbd0 model gate network maximum positive delay minimum delay zero sensitization analysis done assumption gate take delay maximum value zero core idea 8 characterize recursively set input vectors make signal value primary output stable constant given required time sets identified constants 0 1 one compare onset offset primary output respectively see output indeed stable input vectors required time overall scenario computing true delay start setting required time longest topological delay minus gradually decrease input vector cannotmake output stable required time next last required time gives approximation true arrival time output process guessing next required time sped refined making use binary search let us illustrate compute sets let n dn node gate boolean network n maximum delay node n respectively 2 let nv characteristic function set input minterms output node becomes stable constant v 2 f0 1g time let fn local functionality node n terms immediate fanins n ease explanation let twoinput gate clear functionality gate set n constant 1 time fanins required stable 1 time equivalent note two functions fanins anded take intersection two sets similarly set n constant 0 2 possible differentiate rise delays fall delays paper however distinguish simplify exposition time least one fanins must stabilized 0 time two functions ored take union two conditions easy see computations generalized case local functionality n given arbitrary function terms fanins follows n sets primes fn fn respec tively one easily verify recursive formulations gate shown captured general formulation noticing terminal cases given node n primary input x arrx denotes arrival time x formulas simply say primary input stable given arrival time key observation formulation characteristic functions computed recursively characteristic functions constants 0 1 computed primary output two comparisons made one characteristic function 1 onset output characteristic function 0 offset output comparison done creating boolean network computes difference two functions using sat solver checkwhether output network satisfiable boolean network called network 22 optimal construction networks argue approximation algorithms presented paper details construction networks need beunderstood mentioned network constructed recursively primary output 8 optimization reduce size networks discussed given required time primary output assume backward requiredtime propagation n done primary inputs list required times internal node computed propagation done potential required times computed node instead earliest required time network constructed naively internal node n distinct node created required time list however necessary since possible different required times exhibit stability behavior case single node network required times enough detect case forward arrivaltime propagation primary inputs primary outputs performed compute list potential arrival times node note potential arrival time corresponds topological delay path primary input internal node therefore stability node change times words two adjacent potential arrival times one cannot see change stability consider internal node n 2 n let sorted list required times arrival times respectively node n consider function maximum arrival time since event happeningbetween time j r nv matchings required times arrival times performed fashion identify subset required compute final function optimization avoids creating redundant nodes network thereby reducing size network without losing accuracy analysis arrival times match required times yield nodes network another type optimization suggested 8 generate list arrival times carefully potential arrival time equivalence corresponding function onset offset whichever suitable checked satisfiability call new node created network two functions different otherwise original function complement used although requires additional cpu time spent satisfiability calls experimentally confirmed size reduction final network significant total runtime decreases cases 3 approximation algorithms 31 limitation exact algorithm although exact algorithm proposed 8 handle many circuits thousands gates still size limitation large network given timing analysis requested detailed delay model like technology mapped delay model likely algorithm runs practically forever 3 even timing analysis tractable computation time large practical seen previous section exact timing analysis consists repeated sat solver calls precisely time tested primary output network constructed network computes difference onset offset primary output set input vectors make primary output stable value 1 0 given time output never becomes 1 input assignment ie satisfiable know output becomes stable completely time tested test whether condition holds sat formula satisfiable output satisfiable created directly network sat solver called size sat formula roughly proportional size network main difficulty analysis large networks due potentially large size networks size sat formulas generated large sat solver solve even optimization discussed previous section applied 4 following discuss control size networks without losing much accuracy 32 reducing size networks effective approximation main reason networks become large exact approach functions many distinct arrival times must computed internal nodes size increase occurs many distinct path delays internal nodes due reconvergence circuit therefore goal control number distinct arrival times considered internal node specifically create small number functions internal node strategy avoids creation huge networks thereby controlling size sat formulas generated although idea certainly helps reduce size networks must done carefully correctness analysis 3 algorithm cpu intensive rather memory intensive since core part algorithm sat theoretically necessarily true smaller sat formula easier solve however observed size sat formulas well correlated time solver takes guaranteed must never underapproximate true delays since otherwise timing analysis could miss timing violations used context timing verification overapproximation acceptable long reasonable accuracy maintained guarantee property selectively underapproximating stability signals underapproximation turn overapproximates instability signals thereby guaranteeing estimated delays never underapproximated key idea approximation modify mapping required times arrival times discussed section 22 small set arrival times forms image mapping given sorted set required times sorted set arrival times internal node n mapping f r 7 used exact analysis defined ae r r 1 since stability signal node increases monotonically time elapses definition functions safe change mapping maps required time time earlier time defined corresponds underapproximation signal stability thus modifying mapping constraint small set arrival times required one control number nodes introduced network without violating correctness analysis depending original mapping exact analysis changed several conservative approximation schemes devised two approximation schemes described next 321 topological approximation aggressive approximation call topological ap proximation map required times either topological arrival time aq 5 gamma1 formally mapping f defined follows ae easy see f conservative approximation f since need create new node function network 6 instead node function complement original network used function arrival time gamma1 gamma1 1g therefore sufficient constant zero node network use cases zero function needed since neither arrival times needs additional node network approximation never increases size network reduction applied nodes analysis simply becomes pure topological analysis therefore approximation makes sense selectively invoked subset nodes selection strategy described later 322 semitopological approximation thesecondapproximationscheme called semitopological approx imation slightly milder first terms power simplifying networks required times mapped two arrival times times chosen different times picked 1 arrival time say ae matched r 1 exact mapping f 2 topological arrival time aq first approximation first approximation one different ae 6 gamma1 case second one 5 precise aq earlier topological arrival time intermediate satisfiability call already verified time aq signal stabilized completely 6 notice network always includes original circuit gives accurate approximation precise definition new mapping function f follows ae ae r aq aq otherwise ae 6 gamma1 function time ae computed explic itly corresponding node added network similar extensions give tighter approximations possible allowing arrival times remain mapping set various approximations gives tradeoff compactness networks accuracy analysis 33 controldata dichotomy approximation strategie 11 yalcin et al proposed use designers knowledge controldata separation primary inputs effective approximate timing analysis applied idea speed timing analysis technique using conditional delays 10 simplifying signal propagation conditions data variables adapt idea using knowledge xbd0 analysis develop selection strategy various approximation schemes 331 labeling datacontrol types given datacontrol types primary inputs internal node labeled data control based following procedure nodes network visited primary inputs primary outputs topological order node types fanins examined data node labeled data otherwise labeled control hence nodes labeled data pure data variables dependencyon control variables labeled control variables dependency control variables labeling policy different one used 11 node labeled data least one fanins labeled data labeling nodes labeled data variables dependency data whereas nodes labeled control pure control variables difference two labelings whether pure data variables pure control variables distinguished labeling lead tighter approximations 332 applying different approximations based types nodes labeled different approximation schemes applied nodes based types strategy follows node control variable semitopological approximation f applied node data variable topological approximation f applied intuition use tighter approximation control variables preserve accuracy performing maximum simplification data variables assuming less impact delays control variables 333 extracting control circuitry ap proximation approximation far powerful enough make analysis tractable approximation possible extracting controlintensive portion circuit performing timing analysis subcircuit extraction control portion done stripping pure data nodes original network analysis note circuit decomposed cascade circuit nodes driving circuit labeled data driven circuit control definition data variables therefore primary inputs subcircuit boundary variables separate subcircuit pure data portion assume conservatively delays pure data portion circuit topological delays gives arrival times primary inputs extracted circuit analysis performed subcircuit circuit given notice similar flavor approximation proposed 4 difference approximation previous method subcircuit new set primary inputs assumed independent however possible original circuit certain subset signal combinations appears boundary variables since approximation assumes signal combinations show analysis becomes pessimistic 7 example signal combination appear cut makes long path sensitizable make delay estimation unnecessarily pessimistic although method conservative one without subcircuit extraction reduces size circuit analyzed much significantly one 4 experimental results implemented new approximation scheme top implementation 8 sis environment evaluate effectiveness approximation focused timing analysis mapped iscas combinational circuits generally much timeconsuming analysis basedon simpler delay models table 1 8 results three circuits whose exact analysis takes 20 secondson dec alpha server 7000610 shown 9 circuit technologymapped first option specified second column using lib2genlib library delay circuit analyzed using three techniques first one exact exact method presented 8 remaining two approximate methods second called approx1 technique section 332 third called approx2 one section 333 involves subcircuit extraction controldata specification primary inputs circuits 11 10 three analyses estimated delay cpu time shown last two columns one observe accuracy preserved three examples approximation methods cpu time reduced significantly table summarizes similar experiment c6288 integer multiplier known difficult exact timing analysis due huge amount reconvergence since primary inputs data variables approximate techniques proposed degenerated topological analysis avoid inaccuracy primary inputs set control note sets intermediate nodes control applied first approximate method labeling although approximation powerful original algorithms least enables us reduce size networks without giving accuracy completely since data variable network approx1 tried significant time saving achieved slight overapproximation terms analysis quality exact analysis cputime intensive also much memoryintensive approximate analysis fact could completeany three exact analyses within 150mb memory ran memory couple minutes exact analyses possible 7 set possible signal combinations boundaryvariables represented compactly one safely avoid pessimism multiplying additional constraint sat formula generated 8 timing analysis done linear search mode 8 decrement time step 01 error tolerance 001 9 exact analysis already efficient approximation cannot make significant improvement cpu time fact overall performance degraded due additional tasks involved approximation precisely c19081 c35401 11 used circuit techmap gates topological delay type approx estimated delay cpu time exact 3477 291 exact 3576 412 exact 3566 7270 table 1 exact analysis vs approximate analysis cpu time seconds dec alphaserver 7000610 circuit techmap gates topological delay type approx estimated delay cpu times exact 12387 78502 exact 11916 189562 exact 11292 156105 table 2 exact analysis vs approximate analysis c6288 cpu time seconds dec alphaserver 7000610 memory limit expanded 1gb last example needs additional explanation example estimated delay approximate algorithm smaller exact algorithm although section 3 claimed approximation algorithm never underapproximates exact delay reason sat solver perfect given hard sat problem solver may able determine result given resource case solver simply returns unknown conservatively interpreted satisfiable timing analysis particular example sat solver returned unknown exact timing analysis resulted overapproximation estimated delay approximate analysis sat solver never aborted simplification networks gave better overapproximation example shows approximate analysis gives computational efficiency also better accuracy cases compare exact approximate methods examined total cpu time exact analysis see broken first example c6288 exact analysis took 7147 seconds conclude path length 12393 false four times longer approximate analysis conclude delay circuit 12394 situation much worse second example exact analysis took seconds conclude path length 11921 false approximate method took 14 time finish entire analysis conclusions proposed new approximation algorithms extension xbd0 timing analysis 8 core idea algorithms control size sensitization networks prevent size sat formulas solved getting large use knowledge datacontrol separation primary inputs originally proposed 11 adapted choose appropriate approximation node showed experimentally technique helps simplify analysis maintaining accuracy well within accuracy delay model acknowledgments hakan yalcin kindly offered detailed data iscas benchmark circuits r path sensitization critical path problem computation floating mode delay combinational circuits theory algorithms computation floating mode delay combinational circuits practice implementation new approach solving false path problem timing analysis polynomialtime heuristic approach approximate solution false path problem timed boolean calculus applications timing analysis integrating functional temporal domains logic design delay models exact timing private communication hierarchical timing analysis using conditional delays approximate timing analysis method datapath circuits tr polynomialtime heuristic approach approximate solution false path problem hierarchical timing analysis using conditional delays approximate timing analysis method datapath circuits integrating functional temporal domains logic design ctr david blaauw rajendran panda abhijit das removing user specified false paths timing graphs proceedings 37th conference design automation p270273 june 0509 2000 los angeles california united states hakan yalcin mohammad mortazavi robert palermo cyrus bamji karem sakallah functional timing analysis ip characterization proceedings 36th acmieee conference design automation p731736 june 2125 1999 new orleans louisiana united states mark c hansen hakan yalcin john p hayes unveiling iscas85 benchmarks case study reverse engineering ieee design test v16 n3 p7280 july 1999 david blaauw vladimir zolotov savithri sundareswaran chanhee oh rajendran panda slope propagation static timing analysis proceedings 2000 ieeeacm international conference computeraided design november 0509 2000 san jose california