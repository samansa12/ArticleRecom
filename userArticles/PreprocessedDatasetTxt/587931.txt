scheduling unrelated machines randomized rounding present new class randomized approximation algorithms unrelated parallel machine scheduling problems average weighted completion time objective key idea assign jobs randomly machines probabilities derived optimal solution linear programming lp relaxation timeindexed variables main results 2varepsilonapproximation algorithm model individual job release dates 32varepsilonapproximation algorithm jobs released simultaneously obtain corresponding bounds quality lp relaxation interesting implication identical parallel machine scheduling jobs randomly assigned machines machine equally likely addition case algorithm running time log n performance guarantee 2 moreover approximation result identical parallel machine scheduling applies online setting jobs arrive time well difference performance guarantee b introduction wellknown randomization help design algorithms cf e g 27 26 one way guiding randomness use linear programs lps paper give lpbased approximation algorithms problems particularly wellknown difficulties obtain good lower bounds machine processor scheduling problems random choices involved algorithms rather randomized approximation algorithms randomized rapproximation algorithm polynomialtime algorithm produces feasible solution whose expected value within factor r optimum r also called expected performance guarantee algorithm actually often compare output algorithm lower bound given optimum solution certain lp relaxation hence time obtain analysis quality respective lp offline algorithms derandomized difference performance guarantee cost increased still polynomial running times consider following model given set j n jobs tasks unrelated parallel machines job j positive integral processing requirement depends machine job j processed job j must processed respective amount time one machines may assigned every machine process one job time preemptive schedules job may repeatedly interrupted continued later another machine nonpreemptive schedules job must processed uninterrupted fashion job j integral release date r j 0 parts paper appeared preliminary form 36 35 mit sloan school management operations research center e53361 fachbereich mathematik 61 technische universitat berlin strae des 17 juni 136 d10623 berlin germany skutellamathtu berlinde cannot processed denote completion time job j schedule c c j confusion possible seek minimize total weighted completion time weight w associated job j goal find schedule minimizes j2j w j c j scheduling quite convenient refer respective problems using standard classification scheme graham lawler lenstra rinnooy kan 17 nonpreemptive problem r j r described strongly nphard 23 scheduling minimize total weighted completion time equivalently average weighted completion time recently achieved great deal attention partly importance fundamental problem scheduling also new applications instance compiler optimization 5 parallel computing 3 significant progress design approximation algorithms kind problems led development first constant worstcase bounds number settings progress essentially follows one hand use preemptive schedules construct nonpreemptive ones 31 4 7 14 16 hand one solves lp relaxation schedule constructed list scheduling natural order dictated lp solution 31 19 34 18 25 14 8 28 37 paper utilize different idea random assignments jobs machines precise exploit lp relaxation timeindexed variables problem r j r show certain variant randomized rounding leads eapproximation algorithm e 0 absence nontrivial release dates performance guarantee improved 32 e moment corresponding lp respectively e true optimum always within factor optimal value lp relaxation algorithm improves upon 163approximation algorithm hall shmoys wein 19 also based timeindexed variables different meaning ever contrast approach algorithm rely shmoys tardos rounding technique generalized assignment problem 39 rather exploit lp interpreting lp values probabilities jobs assigned machines introduction application randomized rounding combinatorial optimization problems reader referred 33 26 using different approach second author subsequently developed slightly improved approximation results problems consideration problem r gives 32approximation algorithm 41 based convex quadratic programming relaxation assignment variables inspired timeindexed lp relaxation presented paper recently approach generalized problem release dates yields performance guarantee 2 42 special case identical parallel machines e job j machines chakrabarti et al 4 obtained 289 eapproximation refining online greedy framework hall et al 19 former best known lpbased algorithm however relies lp relaxation solely completion time variables weaker one propose performance guarantee 4 gamma 1m see 18 details lp use optimum solution greedily obtained certain preemptive schedule virtual single machine times fast original machines idea using preemptive relaxation virtual machine employed chekuri motwani natarajan stein 7 show preemptive schedule machine converted nonpreemptive schedule identical parallel machines job j completion time nonpreemptive schedule 3 gamma 1m times preemptive completion time problem minimize average completion time refine 285approximation algorithm algorithm propose delivers time onlogn solution expected within factor 2 optimum since lp relaxation use even relaxation corresponding preemptive problem algorithm also 2approximation improves upon 3approximation algorithm due hall schulz shmoys wein 18 particular result implies value optimal nonpreemptive schedule factor 2 value optimal preemptive schedule problem without release dates algorithm achieves performance guarantee 32 since optimum solution lp relaxation obtained greedily algorithm also works corresponding online setting jobs continually arrive processed time must construct schedule time without knowledge jobs arrive afterwards algorithm achieves competitive ratio 2 nonpreemptive preemptive variant setting recently skutella woeginger 43 developed polynomialtime approximation scheme problem improves upon previously best known 1 22approximation algorithm due kawaguchi kyan 22 subsequently chekuri karger khanna skutella stein 6 gave polynomialtime approximation schemes problem preemptive variant also corresponding problems constant number unrelated machines rm j r hand shown hoogeveen schuurman woeginger 20 problems r j r maxsnphard therefore polynomial time approximation scheme unless pnp rest paper organized follows section 2 start discussion main result algorithm performance guarantee 2 general context unrelated parallel machine scheduling next section give combinatorial approximation algorithms identical parallel machine scheduling also show use algorithms online setting section 4 discuss derandomization previously given randomized algorithms finally section 5 give technical details turning pseudopolynomial algorithm section 2 polynomialtime algorithm performance guarantee conclude pointing open problems section 6 unrelated parallel machine scheduling release dates section consider problem r j r 30 19 18 42 actually discuss slightly general problem release date every job j may also depend machine release date job j machine thus denoted r j machinedependent release dates relevant model network scheduling parallel machines connected network job located given machine time 0 cannot started another machine sufficient time elapses allow job transmitted new machine model introduced 9 1 problem r j r wellknown strongly nphard fact already p2 strongly nphard see 2 23 first nontrivial approximation algorithm problem given phillips stein wein 30 performance guarantee olog 2 n subsequently hall et al 19 gave 163approximation algorithm relies timeindexed lp relaxation whose optimum value serves surrogate true optimum estimations use somewhat similar lp relaxation whereas hall et al invoke deterministic rounding technique shmoys tardos 39 construct feasible schedule randomly round lp solutions feasible schedules time horizon introduce every job j 2 j every machine every point represents time job j processed machine within time interval equivalently one say jt p j fraction job j processed machine within time interval 1 lp extension single machine lp relaxation dyer wolsey 10 follows minimize subject equations 1 ensure whole processing requirement every job satisfied machine capacity constraints 2 simply express machine process one job time 3 consider arbitrary feasible schedule job j continuously processed time c machine h expression c lp 3 corresponds real completion time c j j assign values lp variables jt defined e wise righthand side 4 equals processing time p h j job j schedule therefore lower bound completion time c finally constraints 5 ensure job processed release date hence lp r relaxation scheduling problem r j r fact note even corresponding mixedinteger program yvariables forced binary relaxation following algorithm takes optimum lp solution constructs feasible schedule using kind randomized rounding algorithm lp rounding compute optimum solution lp r assign job j machinetime pair independently random probability jt draw j chosen time interval 1 independently random uniform distribution schedule machine jobs assigned nonpreemptively early possible order nondecreasing j last step ties broken arbitrarily occur probability zero analysis algorithm sufficient assume random decisions different jobs pairwise independent remark 21 reader might wonder whether seemingly artificial random choice j algorithm lp rounding really necessary indeed also implies could work discrete probability space following results still true simply set assigned machinetime pair ties broken randomly even arbitrarily mainly chose presentation sake giving different interpretation terms socalled apoints section 3 following lemma illuminates intuition algorithm lp rounding relating implications second step solution lp r analysis algorithm however make use second part lemma first part generalization result due goemans 14 single machine case lemma 22 let optimum solution lp r first step algorithm lp rounding j following holds expected value j equal jt b expected processing time job j schedule constructed algorithm lp rounding equal proof first fix machinetime pair job j assigned expected processing time j condition p j moreover conditional expectation j equal adding conditional expectations machines time intervals weighted corresponding probabilities jt get claimed results note lemma remains true start arbitrary necessarily optimal solution lp r first step algorithm lp rounding also true following results optimality lp solution needed get lower bound value optimal schedule lemma 23 expected completion time job j schedule constructed algorithm lp rounding bounded bound even true j set second step algorithm ties broken arbitrarily see remark 21 absence nontrivial release dates following stronger bound holds bound also holds j set second step algorithm ties broken uniformly random proof consider arbitrary fixed job j 2 j analyze expected completion time job j first also consider fixed assignment j machinetime pair expected starting time job j conditions precisely conditional expected idle time plus conditional expected amount processing jobs come j machine observe idle time machine maximum release date jobs machine start later j starting time job j follows ordering jobs constraints 5 maximum release date therefore idle time machine starting time j bounded absence nontrivial release dates need idle time hand get following bound conditional expected processing time machine start j ik ik last inequality follows machine capacity constraints 2 however j set second step algorithm ties broken arbitrarily replace et 1 righthand side get weaker bound 1 putting observations together get upper bound 2 2 conditional expectation starting time j absence nontrivial release dates bounded unconditioning expectation formula total expectation together lemma 22 b yields result theorem 24 instances r j r expected value schedule constructed algorithm lp rounding bounded twice value optimal solution proof lemma 23 constraints 3 expected completion time job bounded twice lp completion time c lp since optimal lp value lower bound value optimal schedule weights nonnegative result follows linearity expectations note theorem 24 still holds use weaker lp relaxation constraints 4 missing ever true following result theorem 25 instances r expected value schedule constructed algorithm lp rounding bounded 32 times value optimal solution proof result follows lemma 23 lp constraints 3 4 independently result theorem 25 also obtained fabian chudak communicated us david b shmoys march 1997 reading preliminary version paper hand contained bound 2 r j r theorem 24 absence nontrivial release dates algorithm lp rounding improved simplified corollary 26 instances r approximation result theorem 25 also holds following improved simplified variant algorithm lp rounding second step assign job j independently random probability machine last step apply smiths ratio rule 44 machine e schedule jobs assigned machine order nonincreasing ratios w proof notice random assignment jobs machines remains unchanged described variant algorithm lp rounding however fixed assignment jobs machines sequencing jobs according smiths ratio rule machine optimal particular improves upon random sequence used final step algorithm lp rounding analysis algorithm lp rounding always compared value computed solution optimal lp value lower bound value optimal solution therefore state following result quality lp relaxation corollary 27 linear program lp r 2relaxation r j r even without constraints 4 a2 relaxation r show following section lp r without constraints 4 better 2relaxation even instances p hand relaxation strengthened adding constraints constraints ensure time period job use capacity one machine unfor tunately know use constraints get provably stronger results quality lp relaxation better performance guarantees algorithm lp rounding notice results theorem 24 theorem 25 directly lead approximation algorithms considered scheduling problems reason cannot solve lp r polynomial time due exponentially many variables however overcome drawback introducing new variables associated exponentially many time intervals length 1 rather polynomial number intervals geometrically increasing size order get polynomialtime approximation algorithms way pay slightly worse performance guarantee constant e 0 get approximation algorithms performance guarantee 2 e 32 e scheduling problems consideration elaborate section 5 shown 40 ideas techniques presented section section 5 modified construct approximation algorithms corresponding preemptive scheduling problems notice although lp relaxation lp r allows preemptions jobs relaxation r j r shown 40 example 2108 righthand side 3 fact overestimate actual completion time job preemptive schedule corresponding solution lp r however one construct lp relaxation preemptive scheduling problem replacing 3 slightly weaker constraint leads 3 approximation algorithm r j r eapproximation algorithm r j pmtn j w j c j results slightly improved using convex quadratic programming relaxations see 42 scheduling release dates consider special case identical parallel machines processing requirement release date job j longer depend machine job j processed thus denoted p j r j respectively mentioned already problem p2 setting algorithm lp rounding turned purely combinatorial algorithm taking idea used earlier e g chekuri et al 7 reduce identical parallel machine instance single machine instance however single machine assumed times fast original machines e virtual processing time job j virtual single machine p 0 without loss generality p j multiple weight release date remain crucial idea algorithm assign jobs uniformly random machines machine sequence assigned jobs order random apoints respect preemptive schedule fast single machine 1 apoint c j job j respect given preemptive schedule fast single machine first point time afraction job j completed e j processed time units particular c j j 0 starting time job j slightly varying notions apoints considered 31 19 full potential revealed chekuri et al 7 well goemans 14 chose parameter random following algorithm may seen extension single machine techniques identical parallel machines algorithm random assignment construct preemptive schedule virtual single machine scheduling point time among available jobs one largest w j p 0 ratio job j 2 j draw j independently random uniformly distributed 0 1 assign j uniformly random one machines schedule machine jobs assigned nonpreemptively early possible nondecreasing order c notice first step whenever job released job processed preempted released job larger ratio illustration algorithm random assignment found appendix running time algorithm dominated effort compute preemptive schedule first step goemans observed done onlogn time using priority queue 14 following show algorithm random assignment interpreted reformulation algorithm lp rounding special case identical parallel machines one crucial insight analysis preemptive schedule virtual single machine corresponds optimum solution lp relaxation equivalent lp r introduce variable jt every job j every time period 1 set 1m job j processed one machines period 0 otherwise notice contrast unrelated parallel machine case need machine dependent variables since necessity distinguish identical parallel machines express new variables jt old variables jt setting leads following simplified lp ignoring constraints 4 lp r minimize subject jt special case introduced dyer wolsey 10 also indicated follows work posner 32 program solved onlogn time goemans 13 showed also case 1 preemptive schedule constructed first step algorithm random assignment defines optimum solution lp p result well proof easily generalized arbitrary number identical parallel machines lemma 31 instances problems relaxation lp p solved onlogn time preemptive schedule fast single machine first step algorithm random assignment corresponds optimum solution theorem 32 algorithm random assignment randomized 2approximation algorithm proof show algorithm random assignment interpreted special case algorithm lp rounding result follows polynomial running time theorem 24 lemma 31 implies first step algorithm random assignment simply compute optimum solution lp relaxation lp p equivalent lp r without constraints 4 particular corresponding solution lp r symmetric regard machines therefore algorithm lp rounding job assigned uniformly random one machines symmetry also yields job j choice j correlated choice algorithm lp rounding easily seen probability distribution random variable j algorithm lp rounding exactly equals probability distribution c algorithm random assignment observe probability c equals fraction jt p 0 j job j processed time interval moreover since j uniformly distributed 01 point 1 equally likely obtained c therefore random choice c algorithm random assignment alternative way choosing j done algorithm lp rounding consequently two algorithms coincide identical parallel machine case particular expected completion time job bounded twice lp completion time result follows linearity expectations point let us briefly compare approximation results section single machine case related results work one jobs instead individual independent j draw uniformly 0 1 random assignment precisely becomes goemans randomized 2approximation algorithm random 1jr j j w j c j 14 goemans queyranne schulz skutella wang improved result performance guarantee 16853 using jobdependent j algorithm random assignment together nonuniform choice j 15 idea also applied parallel machine setting get performance guarantee better 2 algorithm random assignment improvement however depends refer reader single machine case details comprehensive treatment detailed overview concept apoints machine scheduling problems found 40 chapter 2 already argued last section lp r thus lp p 2relaxation scheduling problem consideration corollary 33 relaxation lp p 2relaxation scheduling problem bound tight even proof positive result follows corollary 27 tightness consider instance machines one job length unit weight optimum lp completion time 12 whereas optimum completion time goes infinity ratio two values converges 2 approximation result identical parallel machine scheduling directly generalized corresponding preemptive scheduling problem preemptive schedules job may repeatedly interrupted continued later another machine follows work mcnaughton 24 already nphard since always exists optimal nonpreemptive schedule corresponding nonpreemptive problem nphard make use following observation lemma 34 linear program lp p also relaxation preemptive problem proof since release dates processing times integral exists optimal preemptive schedule preemptions occur integral points time take optimal schedule construct corresponding feasible solution lp p setting processed one machines within time interval 1 easy observation c lp j equality holds job j continuously processed time interval c thus value constructed solution lp p lower bound value optimal schedule observation leads following results generalize theorem 32 corollary 33 corollary 35 value nonpreemptive schedule constructed algorithm random assignment worse twice value optimum preemptive schedule moreover relaxation lp p 2 relaxation scheduling problem bound tight 2approximation algorithm corollary 35 improves upon performance guarantee 3 due hall schulz shmoys wein 18 another consequence considerations following result power preemption corollary 36 identical parallel machine scheduling release dates minimize weighted sum completion times value optimal nonpreemptive schedule twice large value optimal preemptive one moreover techniques algorithm lp rounding used convert arbitrary preemptive schedule nonpreemptive one value increases factor 2 given preemptive schedule construct corresponding solution lp p lp r respectively value feasible solution lp relaxation lower bound value given preemptive schedule using algorithm lp rounding solution lp r turned nonpreemptive schedule whose expected value bounded twice value lp solution thus twice value preemptive schedule started improves upon bound 73 due phillips et al 29 algorithm random assignment easily turned online algorithm several different online paradigms studied area scheduling see 38 survey consider setting jobs continually arrive time time must construct schedule time without knowledge jobs arrive afterwards particular characteristics job e processing time weight become known release date order apply algorithm random assignment online setting note job j random variable j drawn immediately job released since interdependency decisions randomized algorithm holds random machine assignments moreover preemptive schedule first step constructed time without need knowledge jobs released afterwards furthermore follows analysis proof lemma 23 get performance guarantee job j started time j respectively c thus online variant algorithm random assignment schedule jobs early possible order nondecreasing c additional constraint job j may start time c following result improves upon competitive ratio 289 corollary 37 online variant algorithm random assignment achieves competitive ratio 2 perhaps appealing aspect algorithm random assignment assignment jobs machines depend job characteristics job put probability 1m machines technique also proves useful problem without nontrivial release dates theorem 38 assigning jobs independently uniformly random machines applying smiths ratio rule machine 32approximation algorithm p exist instances bound asymptotically tight proof first notice described algorithm exactly coincides algorithm random assignment lp rounding respectively negative result corollary 33 cannot derive bound 32 comparing expected value computed solution optimal value lp p remember used stronger relaxation including constraints 4 order derive bound unrelated parallel machine setting however result lemma 23 get since second term righthand side 6 equal p j case identical parallel machines since lower bounds value optimal solution result follows order show performance guarantee 32 tight consider instances identical parallel machines jobs unit length weight get optimal schedule value assigning one job machine hand show expected completion time job schedule constructed random machine assignment 32 gamma 12m converges 32 increasing since jobs without loss generality schedule machine jobs assigned random order consider fixed job j machine assigned probability job k 6 j assigned machine 1m case k processed j machine probability 12 therefore get ec j 2m quite interestingly derandomized variant algorithm precisely coincides wsptrule kawaguchi kyan proved performance guarantee 1 22 121 22 list jobs according nonincreasing ratios w j p j schedule next job whenever machine becomes available details derandomization given section 4 proof given kawaguchi kyan somewhat complicated simpler randomized analysis yields performance guarantee 32 algorithm however weaker result also follows work eastman even isaacs 11 gave combinatorial lower bound coincides lower bound given lp p latter observation due uma wein 48 williamson 50 derandomization presented randomized algorithms compute feasible schedule expected value bounded terms optimum solution scheduling problem consideration means algorithms perform well average however cannot give firm guarantee performance single execution theoretical point view perhaps desirable deterministic algorithms obtain certain performance cases one important techniques derandomization method conditional probabilities method implicitly contained paper erdos selfridge 12 developed general context spencer 45 idea consider random decisions randomized algorithm one another always choose promising alternative done assuming remaining decisions made randomly thus alternative said promising corresponding conditional expectation value solution small possible randomized algorithms paper derandomized method conditional probabilities demonstrate technique general problem r j r algorithm lp rounding making use remark 21 lemma 23 consider variant algorithm set assigned machinetime pair ties broken prefering jobs smaller indices thus construct deterministic assignment jobs machinetime pairs analysis algorithm lp rounding proof lemma 23 give precise expression expected value computed solution upper bound hence sake accessible derandomization modify algorithm lp rounding replacing last step following variant 3 schedule machine jobs assigned nonpreemptively nondecreasing order j ties broken preferring jobs smaller indices starting time job j amount idle time machine exactly j job j assigned machine j 6 k job k scheduled job j step 3 defines feasible schedule proof lemma 23 bounded idle time start job j machine j thus analysis still works modified algorithm lp rounding main advantage modification step 3 give precise expressions expectations conditional expectations completion times let optimum solution started first step algorithm lp rounding using arguments proof lemma 23 get following expected completion time job j schedule constructed modified algorithm lp rounding ikt moreover also interested conditional expectation js completion time jobs already assigned machinetime pair let k j subset jobs job k 2 k 01 variable x ikt r ik indicates whether k assigned machinetime pair enables us give following expressions conditional expectation js completion time j 62 k get ikt j 2 k get machinetime pair job j assigned e x 1 following lemma important part derandomization algorithm lp rounding lemma 41 let optimum solution started first step algorithm lp rounding k j x fixed assignment jobs k machinetime pairs furthermore let j 2 j nk exists assignment j machinetime pair e x 6 ekx proof using formula total expectation conditional expectation righthand side 11 written convex combination conditional expectations e kf jgx theta possible assignments job j machinetime pairs coefficients jt therefore get derandomized version algorithm lp rounding replace second step 0 x0 j 2 j possible assignments job j machinetime pairs e x theta ii determine machinetime pair minimizes conditional expectation set k kf jg x notice replaced step 3 algorithm lp rounding 3 give accessible analysis derandomization since value schedule constructed step 3 always least good one constructed step 3 following theorem formulated algorithm lp rounding original step 3 theorem 42 replace step 2 algorithm lp rounding 2 get deterministic algorithm whose performance guarantee least good expected performance guarantee randomized algorithm moreover running time algorithm polynomially bounded number variables lp relaxation proof result follows inductive use lemma 41 computation 9 10 polynomially bounded number variables therefore running time n iterations step 2 polynomially bounded number derandomization also works polynomial time algorithms based intervalindexed lp relaxations described section 5 since lp relaxations contain polynomial number variables running time derandomized algorithms also bounded polynomial input size scheduling problem notice contrast situation randomized algorithms longer give jobbyjob bounds derandomized algorithms interesting application method conditional probabilities derandomization algorithm random assignment absence release dates already discussed matter end section 3 essentially follows considerations derandomized version algorithm always assigns job machine smallest load far consider jobs order nonincreasing thus resulting algorithm coincides wsptrule analyzed kawaguchi kyan 22 5 intervalindexed lp relaxations mentioned earlier lpbased algorithms unrelated parallel machine scheduling suffer exponential number variables corresponding lp relaxation lp r however overcome drawback using new variables associated exponentially many time intervals length 1 rather polynomial number intervals geometrically increasing size idea earlier introduced hall et al 19 show algorithm lp rounding turned polynomial time algorithm r j r cost increase performance guarantee 2 e technique used derive eapproximation algorithm r given h 0 l chosen smallest integer 1 consequently l polynomially bounded input size considered scheduling problem let theta 1 6 6 l let denote ji j length th interval e ji simplify notation define 1 h gamma1 1 following interpretation time job j processed machine within time interval equivalently j delta ji jp j fraction job j processed machine within consider following linear program intervalindexed variables minimize subject consider feasible schedule assign values variables j defined solution clearly feasible constraints 12 satisfied since job j consumes units processed machine constraints 13 satisfied since total amount processing machine jobs processed within interval cannot exceed size finally job j continuously processed c machine h righthand side equation 14 lower bound real completion time thus lp h r relaxation scheduling problem r j r since lp r polynomial size optimum solution computed polynomial time rewrite algorithm lp rounding new lp algorithm lp rounding compute optimum solution lp h assign job j machineinterval pair independently random probability chosen time interval independently random uniform distribution machine schedule jobs assigned order nondecreasing j following lemma reformulation lemma 22 b new situation proved analogously lemma 51 expected processing time job j 2 j schedule constructed algorithm lp rounding equal theorem 52 expected completion time job j schedule constructed algorithm lp rounding 2 delta 1 h delta c lp proof argue almost exactly proof lemma 23 use lemma 51 instead lemma 22 b consider arbitrary fixed job j 2 j also consider fixed assignment j machine time interval conditional expectation js starting time equals expected idle time plus expected processing time machine j started similar arguments proof lemma 23 bound sum idle time plus processing time 2 together lemma 51 14 yields theorem given e 0 choose eapproximation algorithm problem r j r r 6 concluding remarks open problems paper developed lpbased approximation algorithms different scheduling problems also gained insight quality employed timeindexed lps number open problems arises related research following wrap distinguish offline online setting central offline result 2eapproximation r j r exist instances show underlying lp relaxation lp r without inequalities 4 indeed better 2relaxation however open whether quality lp r 4 andor 7 better 2 therefore also whether used derive approximation algorithm performance guarantee strictly less 2 negative side words best known approximation algorithm r j r performance guarantee 2 proved 2 e 42 gets rid e using convex quadratic relaxation known limit approximation nonexistence polynomialtime approximation scheme unless np situation r j j w j c j similar lp r 32relaxation quality lp r together 7 unknown 32approximation given 41 improving upon 32eapproximation section 2 best known cannot ptas unless far identical parallel machines concerned one important property 2approximation algorithm runs time onlogn running time recent ptas 6 important feature onlogn algorithm capable working online context well brings us second set open problems jobs arrive time performance algorithms measured terms competitiveness optimal offline algorithms theoretically utmost importance distinguish deterministic randomized algorithms identical parallel machine scheduling minimize total weighted completion time significant gap bestknown deterministic lower bound competitive ratio bestknown deterministic algorithm lower bound 2 follows fact online single machine scheduling minimize total completion time deterministic algorithm competitive ratio less 2 21 46 4 ecompetitive algorithm emerges general framework 19 18 randomized algorithms understanding seems slightly better bestknown randomized lower bound ee gamma 1 inherited single machine case 47 49 randomized 2competitive algorithm given paper hand acknowledgements authors grateful chandra chekuri michel x goemans david b shmoys helpful comments earlier version paper 36 r competitive distributed job scheduling resource scheduling parallel database scientific applications improved scheduling algorithms minsum criteria approximation schemes minimizing average weighted completion time release dates approximation techniques average completion time scheduling approximation algorithms precedenceconstrained scheduling problems parallel machines run different speeds deterministic load balancing computer networks formulating single machine sequencing problem release dates mixed integer program bounds optimal scheduling n jobs processors supermodular relaxation scheduling release dates single machine scheduling release dates rinnooy kan scheduling minimize average completion time offline online approximation algorithms scheduling minimize average completion time offline online algorithms optimal online algorithms singlemachine schedul ing worst case bound lrf schedule mean weighted flowtime problem rinnooy kan management science randomized approximation algorithms combinatorial opti mization randomized algorithms approximation bounds general class precedence constrained parallel machine scheduling problems improved bounds relaxations parallel machine scheduling problem task scheduling networks sequencing problem release dates clustered jobs technique provably good algorithms algorithmic proofs scheduling minimize total weighted completion time performance guarantees lpbased heuristics lower bounds new approximations lp lower bounds approximation algorithm generalized assignment problem approximation randomization scheduling ptas minimizing weighted sum job completion times parallel machines various optimizers singlestage production ten lectures probabilistic method cited personal communication low cant go relationship combinatorial lpbased approaches nphard scheduling problems phd thesis cited personal communication tr ctr feng lu dan c marinescu r cmax quantum scheduling algorithm quantum information processing v6 n3 p159178 june 2007 nicole megow marc uetz tjark vredeveld models algorithms stochastic online scheduling mathematics operations research v31 n3 p513525 august 2006 martin skutella convex quadratic semidefinite programming relaxations scheduling journal acm jacm v48 n2 p206242 march 2001