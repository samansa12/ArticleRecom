extending graphical toolkit twohanded interaction multimodal interaction combines input multiple sensors pointing devices speech recognition systems order achieve fluid natural interaction twohanded interaction used recently enrich graphical interaction building applications use combined interaction requires new software techniques frameworks using additional devices means user interface toolkits must flexible regard input devices event types possibility parallel interactions must also taken account consequences structure toolkits finally frameworks must provided combination events status several devices paper reports extensions made direct manipulation interface toolkit whizz order experiment twohanded interaction extensions range structural adaptations toolkit new techniques specifying timedependent fusion events b introduction though many aspects construction still matter research graphical interfaces well known make use pointing device users manipulate dominant hand led introduction number interaction styles centered around pointing device buttons menus pointandclick draganddrop interaction styles enable interface designers build systems fairly efficient easy use however efficiency interfaces probably improved real world perform many tasks hands efficient natural skills drawing pictures macdrawlike tool sometimes frustrating significant part time spent moving mouse around select tools locking objects move working similar handcrafting ones hand behind ones back tools make possible cost considerable waste time considering graphical software interesting note keyboard shortcuts way us use nondominant hand drawing avoid unnecessary movements dominant one recent study shows carefully designed twohanded graphical interaction improve efficiency interfaces 11 apart drawing tools number application domains could benefit interfaces among domains users welltrained professionals whose attention focused task performing believe airtraffic control good example domain interfaces provided airtraffic controllers essentially consist presentation situation airspace socalled radar image composed maps number symbols representing waypoints aircraft useful information many countries currently working new interfaces allow controllers manipulate representations modern interaction techniques cena exploring hypothesis controllers might able plan work manipulating future trajectories aircraft investigating efficient techniques interaction curves objects moving along among techniques developing twohanded interfaces order test efficiency experiments measurements graphical interaction provides designers many degrees freedom also many possibilities build bad systems even true twohanded interaction even made less efficient singlehanded equivalents order explore possible interaction styles determine efficient ones given task studies twohanded interaction must supported versatile enough software tools currently available graphical toolkits provide enough support building highly interactive interfaces however support even impede construction twohanded interfaces paper reports extensions made whizz graphical toolkit handle twohanded interaction first review number twohanded interaction styles identify three classes technical issues raised construction classes closely related general classification multimodal interfaces give brief description whizz supports construction singlehanded graphical interfaces last three sections devoted three classes technical issues raised twohanded interfaces solutions issues implemented whizz graphical interaction related software issues widely explored ten years number graphical toolkits proposed ease construction graphical presentations description mouse keyboardbased dialogues x toolkit interviews 13 toolkits systems garnet 14 x 1 2 pay great attention description direct manipulation interfaces however systems dedicated interfaces based single pointing device keyboard notion multimodal interaction identified bolt 5 different opinions still exist exact definition term multimodal however authors recently wrote subject considered defining systems feature multiple input devices multisensor multiple interpretations input issued single device number studies dealt combination voice recognition graphical interaction 8 4 authors studied combination direct manipulation 2d gesture recognition 12 graphic toolkits sassafras 9 grandma 17 support construction multithreaded interfaces french ihm91 workshop 10 classification multimodal systems later refined nigay coutaz 15 devised classification organized along two axes sequential concurrent use modalities independent combined interpretation systems feature two modalities parallel combined interpretation input tokens called synergistic put style interaction example synergistic multimodal input possibilities exclusive concurrent alternate modalities nigay coutaz also stress distinction combining lowlevel input tokens phonemes mouse events highlevel ones example highlevel fusion put style meaning words identity designated objects necessary fusion input data twohanded interaction suggested long time ago 6 gained popularity since recent work xerox parc university toronto 3 twohanded interaction special case multisensor interaction therefore multimodal interaction multimodal interfaces twohanded interfaces may use exclusive alternate concurrent synergistic modalities similarly interfaces feature highlevel fusion instance one could imagine two handed iconic interface one hand would select objects would choose operations menus may also feature lowlevel fusion well known shiftclicks favorite desktop interface see later paper forms lowlevel fusion twohanded interaction deeply involve time 3 twohanded interaction let us review styles graphical interaction involving hands singlehanded input offers number degrees freedom designers twohanded input increases freedom first debate choice input devices reappear better use two mice mouse trackball instance open debate acknowledge diversity choices example virtual reality designers want use two digital gloves early 1986 paper buxton myers explored use graphics tablet slider box sort 1d mouse todays keyboards definitely considered twohanded input devices text input even management straightforward domain graphics manipulation quick survey reveals potential applications several combinations devices used shiftclicks combine actions mouse one hand actions keyboard hand onedimensional input devices may also combined mouse slider rotary knob controls zoom factor display mouse used draw using devices parallel would spare time drawing precise figures one often switches high scale draw details normal scale see overall result finally two pointing devices may used xerox parcs toolglass exception digital gloves use two pointing devices biggest power expression demanding terms software complexity reason majority examples use two pointers considering twohanded interaction handled similar way 31 guidelines twohanded interaction probably task twohanded input way perform operations always situations one hand used another task holding sheet paper glass water means systems based twohanded input usable one hand obvious design rules suggest onehanded twohanded actions operation similar one easily inferred suggest requirement easily met using paradigms real world opinion interfaces based paradigms need extended twohanded input according paradigm instance good intuition happens pick object one hand drag similarly something predictable happen pick object hands stretch claim twohanded interaction styles generally follow rule stated still many possibilities twohanded interaction classification multimodal interfaces provides good framework exploring possibilities defines kind hierarchy among simplest usage several modalities exclusive usage basis usages system allows parallel combined modalities obviously able provide independent interactions modalities except possibility explicitly disabled next step complexity use parallel interactions two hands work time finally complex interfaces combine input hands using classification see singlehanded graphical interaction extended 32 independent interaction simple way smoothly extend onehanded interfaces consists adding second pointing device used way first enables users save considerable amount time pressing buttons selecting tools instance nondominant hand select tools dominant one rests object manipulated interfaces still used one hand efficient hands xerox parcs toolglass sophisticated version tools located transparent palette moved around allows users keep focus object interest similar interactions may used control global parameters display zoom moving dominant hand finally second pointing device could used drawing pictures moving icons ever people slower performing precision tasks nondominant hand designers toolglass solved issue assigning task moving palette hand whose designation easy size target compensates relative imprecision hand another possibility may suggested using nondominant hand designation small objects bigger cursors every part cursor active however even system may designed take care imprecision real benefit using nondominant hand dominant one used except actions performed parallel 33 parallel interaction parallel interaction natural next step soon twohanded interaction possible even though people trained perform real independent tasks parallel unconsciously use nondominant hand secondary tasks bringing tool dominant one utility toolglass instance would limited interactions strictly serialized hands used waiting performing operations imposing would frustrating therefore parallelism inherent twohanded interaction natural habits consequently examples interaction styles mention paper use parallel interaction less obvious way applications also found real parallel interaction two hands perform independent tasks importance course mention games simulation games make use parallel actions tasks simulate make use driving car piloting plane example games may designed challenge human capabilities juggling games twohanded action games imagined exploring technical issues associated parallel interaction also mention use parallelism manipulating cards game patience nevertheless believe parallelism necessity goal mainly useful combining actions two hands 34 combined interaction elaborate way use two pointing devices combine actions real world often use nondominant hand hold objects performing precise operations also use coordination dominant hand provide additional strength manipulate objects precisely moved held two distant points traditional interfaces replaced second hand kind magic drawing tool move one end segment end held invisible hand suggest disable magic two hands work nondominant hand hold end segment need magic leads interaction style based physical metaphor one hand picks end segment drags whole segment moves second hand holds end operation segment deformed like metal stick would call holdandpull another example combined interaction simultaneous designation two objects type interaction used real world security dangerous operations 16 operation performed two buttons pressed simultaneously instance immediately transposed graphical interfaces instance designer drawing editor could decide clicking two graphical buttons simultaneously user may quit editor without saving edited files role time interactions important doubleclicking reasonable tolerance must specified therefore time taken account performing fusion input data identified several twohanded interaction styles illustrate different aspects multisensor interaction independent parallel combined interaction rest article see support interaction styles added whizz overview whizz whizz toolkit aimed describing behaviour highly interactive animated user interfaces designed three main goals mind ffl homogeneity consider direct manipulation users animation data visualization different aspects dynamic behaviour interface design interactive object graphical behaviour reusable different contexts instance scrollbar always behaviour whether driven users actions mouse clock one arrows depressed variations piece data size document changes instance illustrated figure 1 3moving users actions moving automatically moving according variable figure 1 scrollbar graphical behaviour whether driven time users action data variations ffl straightforward visual representation whizz designed allow development visual user interface construction tools goal applying tools design highly interactive user interfaces led us identifying number basic building blocks behaviour interface graphical objects visual appearance graphical interfaces obtained assembling number building blocks ffl extensibility whizz implements number graphical behaviours handles mouse keyboard input also wanted paradigm usable media sound input devices rotating knobs 3d devices order achieve goals whizz object oriented structure makes distinction graphical objects graphical behaviours latter decomposed movement shape movement source movement shapes implemented objects manage trajectories straight lines circles paths etc similar objects manage visual variations color changes movement sources clocks active values representation users actions simple movement achieved connecting source trajectory graphical object programming interface whizz uses musical metaphor order make structure easy learn movement sources tempos trajectories instruments graphical objects dancers small pieces information circulating tempos instruments instruments dancers notes depending type dancers number input slots control position shape appearance instance segment slots control two ends note reaching one slots change position corresponding end similarly instruments input slot control stepbystep emission notes output slots also input slots allow random access figure 2 illustrates segment trajectory position figure 2 animating segment one ends segment connected output circular trajectory trajectory emits positions receives pulses tempo simple animation scene built whizz figure 3 shows another simple whizz construction describes action dragging icon pointer icon figure 3 dragging icon module representing users action mouse connected position icon complex graphical interfaces achieved establishing links number dancers instruments tempos thus utilizing underlying dataflow structure whizz modules ones described may added describe complex behaviours filters perform numeric geometric operations logic gates flow graphs built way give account continuous evolutions display isolated evolutions traditionally associated input events also handled whizz events button clicks either converted notes associated reconfigurations flow graph order change behaviour interface create new graphical objects instance details features whizz found 7 whizz implemented c top x graphical toolkit designed university paris sud serve basis experiments interaction styles user interface software 1 see whizz extended support development twohanded interfaces thinking using two devices parallel combining actions first step towards building twohanded interfaces consists able handle two devices allow independent exclusive interaction interaction styles depend one properly supported consider lowlevel details connecting managing devices traditional mouse keyboard issues solved using operating system facilities extensions window server rather focus issues related interaction management affect structure graphical toolkits issues dynamic management event types event handling scheme support handling imprecision nondominant hand 6 new event types great effort put graphical toolkits provide homogeneous framework manipulating input keyboard mouse homogeneity key construction maintainable interactive software must lost adding new devices reason first requirement multisensor interaction toolkit smooth integration signals new devices traditional ones eventbased systems provide elegant solution requirement one needs insert events event queue ever supposes new event types created new event types include associated new devices modalities event type gesture type instance may also include synthetic event types resulting combination primitive event types twohanded interaction new primitive type needed synthetic ones necessary describe simultaneous clicks pointing devices instance ability manage new event types rarely found user interface toolkits serious problem using statically typed language c event types cannot statically defined typing scheme language cannot used order solve problem whizz provides mechanism dynamically defining new event types whizz event type full blown object instantiated necessary every event type contains description fields found events type creating event one needs provide reference desired event type whizz allocates necessary space mechanism compatible existence default event types globally defined objects creation new event types 61 event selection handling events created integrated event queue dispatched graphical objects handled means event selection distribution mechanism provided toolkit extensible dynamically defined event types example programmer may wish bind circling gestures graphical object callback function ticking gestures another callback function twohanded interaction also introduces need flexibility event selection twohanded interface offer equal treatment hands expect graphical toolkit handle events pointing devices way instance let us consider graphical button callback function figure 4 toolkit must allow programmers bind button events button callback function without mentioning specific device expected behaviour illustrated figure 5 clicking either pointer results callback function called void ok whzevent ev printf okn figure 4 graphical button associated callback function however also want avoid interferences depressing button left hand releasing another button right one must interpreted button click shown figure 6 soon action started symmetry broken toolkit must allow programmers specify event selection mechanism x used whizz permits definitions first x explicit notion devices classes devices mice keyboards instantiated represent physical devices used program programmer bind number reactions graphical object one must specify set event types set devices device types whose events managed reaction reactions dynamically created destroyed bound unbound makes easy specify behaviour button figure 4 illustrated figure 7 reaction permanently bound button events ok left right time ok figure 5 clicking button either pointing device produces result device button reaction triggered binds new reaction button second reaction associated button events device emitted button activates button destroys ok left right time figure pointing devices must avoided 62 handling imprecision finally irrespective amount symmetry desired two hands imprecision nondominant hand taken care proposed use bigger cursors decide points active example clicking tip arrow object tail consequences challenges another assumption heavily used graphical toolkits fact designations occur precision one pixel mouse events significantly dispatching built around assumption cursor hot spot events contain position hot spot dispatching mechanism usually considers every graphical object view button b 100 50 200 100 ok whzreaction dn downcallback dnbind b mousebuttondn xtvmice void downcallback whzreaction r whzevent ev bselect whzreaction new whzreaction upcallback upbind b mousebuttonup evgetdevice void upcallback whzreaction r whzevent ev bfire delete figure 7 whizz code making button sensitive button events button events emitted corresponding device event occurred asks graphical object whether contains pixel hot spot located order support less precise cursors toolkits would replace test point shape test shape another shape would course require complex costly geometric computations current version whizz implemented circular cursors circular zones around arbitrary cursors nevertheless believe present speed computers allows implementation general mechanism one novelties twohanded input impact userinterface construction possibility perform parallel actions isolated actions associated single event pose real problem instance let us consider twohanded macdrawlike tool dominant hand draws figures nondominant one selects tools palette parallelism lies ability move hands time click nondominant pointing device time relies correct management event queue however many actions performed pointing device made several events rather single one click button followed button drag additional mouse move events furthermore actions generally associated visual feedback performing two actions parallel imposes constraints underlying toolkit illustrate issue experiment extended simple graphical application twohanded interaction application chose game patience played cards aligned four rows face empty space left row card moved space according simple rule thus leaving new empty space already implemented simple version game cards successively moved drag actions however players game usually think several movements ahead playing real cards often use hands move two cards time one occupying space left empty decided experiment technique two pointing devices allow users drag two cards time figure 8 two cards moved time 71 actions independent entities implementing parallel drags consequences input management drag long action composed several events drag data stored maintain status action visual feedback storage data form dialogue control depending architectural model implemented toolkit control may global associated visual representation independent parallel actions possible control independent stressed rubine 17 visual feedback associated dragged card managed property window one card could moved time feedback would keep blinking one pointer issue want manage several actions time therefore need store status several dialogue controls straightforward solution consists considering actions fullblown objects dynamically created destroyed needed facilities garnets interactors action modules whizz well suited situations whizz every new users action results instantiation module emits positions pointer graphical object connected module see figure 9 interface allowing parallel interactions cards shown figure 8 right pointer figure 9 whizz construction moving two cards parallel flow graph composed two independent parts 72 two actions object natural extension parallel interactions consists using hands manipulate single object may understood form combined interaction actually og6754 new route previous route parallel edition segment whizz construction behind scene segment right pointer left pointer figure 10 two actions parallel object instance pointer may used control one end segment pointer controls end long one end moved independently usually case combination required event received pointer corresponding end moved two events result two moves using whizz obtained simply connecting two pointers two ends segment figure 10 shows construction applied context airtraffic control type parallel interaction sheds light called parallelism multimodal interfaces parallelism present higher levels interaction management two visual feedbacks maintained time instance lowest level deals events everything sequential see consequences events combined 8 combined interaction last complex task supporting twohanded input supporting combined inter actions noted combination input data generally occurs low level contrast multimodal interactions put high level fusion may occur actions given meaning ie completed incompatible fact twohanded interaction generally involves parallel actions performed hands want system wait completion actions combining least want feedback operation per forming reason toolkit twohanded interaction must support combination input events fusion semantic operations another distinction introduced combination status events combination events former useful implementing holdandpull interactions whereas latter needed simultaneous clicks buttons 81 combining status events let us consider segment want deform holdandpull interaction one event received pointer grabs segment event usually button event changes status segment considered held initial event combined mouse move events pointer produce deformation objet rather status segment depending status mouse move events result segment moved deformed combination events status least important combination events systems built using whizz status interface components stored modules configuration flow graph instance animated object follows circular trajectory current position stored module manages trajectory user clicks icon drag fact drag started materialized action module connection slot icon order support combination status events added number facility modules store status modify structure flow graph according status instance introduced switches modules one input slot control slot two output slots notes received input slot emitted one output slots notes received control slot change output slot emit notes received input slot new module used figure 11 implement holdandpull interactions figure positions emitted right pointer used move segment deform depending state switch extension added module implementing segment extension reaction button button events left pointer reaction converts events notes used control switch button event occurs switch moves position 2 segment ready deformed button occurs switch moves back position 1 segment moved illustrates status input device easily made control input another device reaction switch position right pointer segment switch control1 left pointer updown moving segment moving one end figure 11 partial view whizz construction supporting twohanded interaction segment right pointer used move whole segment left pointer clicked icon materializes end segment flow redirected segment deformed 82 combining events finally interactions simultaneous clicks buttons need real combination events case two graphical buttons three high level classes events may occur clicks first button clicks second one simultaneous clicks two buttons events third class obtained merging events first two classes order combine events one needs introduce notion simultaneity events notion complex implement solution consists delaying handling events usually done multiple clicks event device received delay got two simultaneous events nothing happens delayed events may released handled added modules whizz supporting notion simultaneity modules called temporal filters two input plugs three output plugs two notes received two input plugs time merged emitted central output plug notes correlated emitted separately two output plugs figure 12 shows temporal filters used implement simultaneous clicks notes received simultaneously result note emitted towards onoff module construction users may quit application clicking two icons time temporal filters used synchronizing flows data instance connected two action modules allow programmers decide object probably heavy one moved pulled hands time tools expect able explore new kinds combined interactions future temporal filter input1 input2 output1 output2 fusionned output reaction reaction switch figure 12 temporal fusion events clicks icons transformed notes temporal filter emits merged notes receives two notes two slots specified interval time 9 conclusion paper identified several twohanded interaction styles classified terms two main characteristics multimodal interaction parallelism combination exposed technical issues raised implementation interaction styles issues related independent interaction parallel interaction finally combined interaction issues range structural problems graphical toolkits extensibility input mechanism need new abstractions describing combined interactions explained toolkit whizz solves problems extended solve extensions whizz supports use twohanded input strongly believe easily extensible kinds multisensor input future directions work include ffl integration new synchronization modules whizzed experimental visual tool interface programming allow easier exploration new interaction styles ffl experiments modalities speech recognition determine whizz abstractions provides applied multimodal interactions ffl evaluation interaction styles proposed air traffic control first evaluate styles simple drawing tasks integrate realistic environment test impact work controllers acknowledgements michelle jacomi helped implement features described article author also wishes thank michel beaudouinlafon thomas baudel lri university paris philippe palanque lis university toulouse useful comments paper r creating direct manipulation interfaces x tour avis seethrough interface multimedia interface design study twohanded input defining behaviour animated interfaces two case studies software architecture multimodal interactive systems voicepaint voiceenabled graphical notebook supporting concurrency groupe multimodalite hypermarks issuing commands drawing marks hypercard composing user interfaces interviews design space multimodal systems concurrent processing data fusion design everyday things automatic recognition gestures tr study twohanded input supporting concurrency communication synchronization humancomputer interactionmyampersandmdashthe sassafras uims composing user interfaces interviews new model handling input mmm automatic recognition gestures multimedia interface design interaction techniques using hand tracking speech recognition toolglass magic lenses design space multimodal systems twohanded input compound task two case studies software architecture multimodal interactive systems defining dynamic behaviour animated interfaces formes ctr scott e hudson jennifer mankoff ian smith extensible input handling subarctic toolkit proceedings sigchi conference human factors computing systems april 0207 2005 portland oregon usa stphane chatty patrick lecoanet pen computing air traffic control proceedings sigchi conference human factors computing systems common ground p8794 april 1318 1996 vancouver british columbia canada edward lank jaime ruiz william cowan concurrent bimanual stylus interaction study nonpreferred hand mode manipulation proceedings 2006 conference graphics interface june 0709 2006 quebec canada stphane chatty stphane sire jeanluc vinot patrick lecoanet alexandre lemort christophe mertz revisiting visual interface programming creating gui tools designers programmers proceedings 17th annual acm symposium user interface software technology october 2427 2004 santa fe nm usa lecolinet multiple pointers study implementation proceedings 15th frenchspeaking conference humancomputer interaction 15eme conference francophone sur linteraction hommemachine p134141 november 2528 2003 caen france amlie schyn david navarre philippe palanque luciana porcher nedel formal description multimodal interaction technique immersive virtual reality application proceedings 15th frenchspeaking conference humancomputer interaction 15eme conference francophone sur linteraction hommemachine p150157 november 2528 2003 caen france renaud blanch programmer iinteraction avec des machines tats hirarchiques proceedings 14th frenchspeaking conference humancomputer interaction confrence francophone sur linteraction hommemachine p129136 november 2629 2002 poitiers france celine latulipe craig kaplan charles l clarke bimanual unimanual image alignment evaluation mousebased techniques proceedings 18th annual acm symposium user interface software technology october 2326 2005 seattle wa usa robert j k jacob leonidas deligiannidis stephen morrison software model specification language nonwimp user interfaces acm transactions computerhuman interaction tochi v6 n1 p146 march 1999 poika isokoski roope raisamo benot martin grigori evreinov user performance trackballmice interacting computers v19 n3 p407427 may 2007 roope raisamo kirijouko rih new direct manipulation technique aligning objects drawing programs proceedings 9th annual acm symposium user interface software technology p157164 november 0608 1996 seattle washington united states ken hinckley randy pausch dennis proffitt neal f kassell twohanded virtual manipulation acm transactions computerhuman interaction tochi v5 n3 p260302 sept 1998