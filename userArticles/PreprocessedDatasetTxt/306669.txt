behavior model next generation test systems defining information required automatic test systems frequently involves description system behavior facilitate capturing required behavior information context testing formal model behavior developed use test systems approach taken defining behavior model based information modeling derived recent work formal methods hardware software design communities specifically information model developed express capturing relationships essential entities characterizing behavior paper provide high level description behavior information model several examples applying model test environment b introduction defining information required automatic test systems frequently involves description system behavior one way another behavior characteristic entity describes entity acts reacts within context environment within context test systems behavior defined observed result testing recent work defining architecture next generation test systems determined behavior descriptions relevant least five contexts 1 characterizing expected behavior product 2 defining test requirements defining resource capabilities requirements defining behavior test strategies 5 guiding system diagnostics facilitate capturing required behavior information contexts information model defining behavior developed paper provide high level description behavior information model several examples applying model test environment specifically focus applying model capturing test requirements resource capabilities approach taken defining behavior model derived recent work formal methods hardware software design communities cook 1992 hall 1990 thomas 1993 formal methods mathematicallybased languages used capture essential attributes system designed methods used typically guide process design verification proofofcorrectness formal methods apply declarative approach specifying systems declarative approaches specify systems stating logical properties relationships among entities within system abramsky hanking 1987 hogger 1984 process instantiating design corresponds assigning legal values parameters within system description properties relationships defined description consistent approach taken defining behavior model develop express information model capturing relationships essential entities characterizing behavior 10303111994 approach declarative simplest case process using behavior model consists matching implementation model verify two correspond one another thus case selecting appropriate resource perform test model required behavior instantiated compared model possible behaviors provided available resource resource selected matches required behavior following sections discuss simplified view express behavior model well slightly detailed view discussion put context trivial test program highlight describe major entities model following introduction provide several examples using behavior model context test requirements test program synthesis resource behaviors triggers events simplified view behavior model shown figure 1 simplified model expanded later sufficient explain basic concepts five entities model 1 location captures something happens current model location ports unit test uut cells uut 2 behavior captures something happens entity distinct whole behavior model limited identifying span time something occurs entity defined start stop attributes 3 signal captures happens types signals include dcsignal acsignal well standard programming data types eg integer real boolean 4 constraint defines rules constraining restricting values may appear signals 5 time exists model solely support definition behavior entity subtype property entity defined used type start stop attributes behavior behavior model used describe requirements test program capabilities test resource time constraint location behavior signal start stop constrains figure 1 simplified behavior model detailed view behavior information model shown figure 2 figure five entities figure 1 shown plus several additional entities capturing constraint information significant figure observation behavior composite lowerlevel behaviors ultimately containing zero signals behavior signal characterized set properties constrained way addition constraints applied signals constraints also applied behaviors finally current version behavior model identifies four types constraints range constraints limiting property lie within range legal values accuracy constraints identifying acceptable variation property value specified reference timing constraints indicating legal ordering timing relationships respect another variable value constraints indicating possible legal values discrete values arbitrary relationship constraints defined constraint supertype without need instantiate one subtypes first glance appears behavior model describes example test program must execute almost quite correct behavior really provides set criteria one determine test program executed properly see distinction important consider uut two power supplies may used establish type time constraint behavior signal start property timing range accuracy stoplocation includes constrainedby s0 props s0 props s0 location location constrainedby value figure 2 detailed behavior model power ground established testing may done uut power supplies established situation shown flow chart figure 3 branches labeled ps 1 ps 2 execute concurrently sequentiallythe constraints branches cannot begin establish ground complete run tests cannot begin power supply branches complete consider hypothetical test program test program sequential might look something like establish ground establish ps1 establish ps2 run tests establish psx routines decomposed basic set statements consisting example setup apply statements following version program also legal establish ground setup ps1 setup ps2 apply ps1 apply ps2 run tests many different legal execution paths may taken test program would inappropriate behavior specification state exactly one paths correct others incorrect approach would improperly restrict legal paths 1 behavior model describes desired result test program rather test program previous example provided pseudo code test whose objective verification specified behavior example executed real signals would generated 1 however may compelling administrative reasons insist upon particular order eg procedural reusability test consistency establish ground run tests figure 3 flow chart providing power tests test equipment applied uut real signals would observed measured ultimately behavior model specifies requirements signals suppose following execution test program complete record signals interface uut available sake discussion assume signals recorded infinite precision record called execution trace test program example execution trace would include voltage current ground power supply pins uut test program executed execution trace examined see voltages time test behavior model defines constraints execution traces constraints applied directly test programthey influence decisions made configuring executing test program model declarative representation behavior explicitly prescribe behavior test program might expected imperative eg procedural functional description instead describes behavior expected program psuedolanguage invented illustration purposes used demonstrate structure behavior model associated properties behavior behavior class therefore instance behavior name declaration behavior may include behaviors ie subbehaviors well signals constraints properties format used pseudolanguage follows behaviorname property definition property definition may include subbehaviors signals associated behavior locations constraints defined behavior properties following discussion pseudolanguage used present several example declarative fragments let us refine elements behavior model example first use phrase establish ground must clarified tester means ground pins uut connect digital analog system ground tester next consider means establish ps1 means stable voltage proper value proper pins uut brokent two pieces declaration voltage uut pins constraint value voltage establishps1 signal vcc1 dcsignal located hips1pin logndpin constrain vcc1voltage 475v vcc1voltage 525v point four five entities simplified behavior model evident signal named vcc1 type signal dcsignal type extension simplified model shown figure 2 two locations named ps1pin gndpin signal vcc1 occurs constraint restricts voltage attribute vcc1 lie 475v 525v behavior named establishps1 defines period property definitions active 2 behavior model states voltage two pins uut voltage must lie within range 475v 525v behavior provide actual value voltage even constrain value constant duration behavior however constancy implied type dcsignal given model test program verified satisfy objectives constraints model thereby verifying test program behaving specified formally test program cannot verified rather test program run resulting execution trace examined execution trace voltage corresponding signal vcc1 determined ensure voltage lies within proper range duration establishps1 behavior notice time entities defined example test program behavior establishps1 begins time later ends specific values assigned example start stop times identified examining execution trace program rather included test program prescribe specifically behavior occurs considering whole test program however one finds start stop times specified terms timing constraints example wholetestprogram behavior ps1 establishps1 behavior ps2 establishps2 behavior rt runtests constrain ps1stop rtstart ps2stop rtstart example behavior defined wholetestprogram contains three subbehaviors named ps1 ps2 rt behavior wholetestprogram also contains constraint relates start stop times three subbehaviors ordering behaviors conforms flow chart figure 3 notice start stop times specified constraint values specified anywhere described actual values derived execution trace test program applications behavior following sections provide several examples using constraint model examples necessarily simplified serve illustrate concepts introduced previous section behavior model applied test requirements specification synthesis verification common thread applications use behavior model test program specification test resource allocation fourth application occur test 2 example specific duration specified program development ie static allocation test program execution ie dynamic allocation applications expected model becomes widely used test requirements specification behavior model used capture test requirements test requirements context requirements test program requirements test development process nagy newberg 1994 atkins rolince 1994 behavior model addresses test requirements safetoturnon test must performed test tests must run range ambient temperature frequency stability must measured 1250000 mhz using requirements examples demonstrate represent requirements behavior model use requirements test program synthesis verification test requirements provided english although understandable engineers difficult computer understand first step specifying requirements machineunderstable way add detail statements expressed formally safetoturnon test requirement safetoturnon stto test defined behavior precedes behaviors test program test program represents enclosing behavior includes stto test tests stto behavior typically tests shorts power ground direct resistance measurement tests excessive current uut powered stto returns value determines whether tests may run specifically stto behavior represented wholetestprogram behavior st safetoturnonsafetotest boolean behavior rt runtests constrain rtexecute rtstart ststop constrain rtexecute stsafetotest model behavior defined wholetestprogram contains two sub behaviors st rt behavior st instance safetoturnon behavior defined st return parameter called safetotest behavior rt simply encapsulates tests test program 3 example introduce rtexecute notation rtexecute true subbehavior rt actually executes false otherwise however subbehavior declared inside behavior mean subbehavior actually executes additional constraints required ensure subbehavior executes many times necessary first constraint ensures rt actually executes rt follows st second constraint ensures rt execute behavior st returns true safetotest parameter constraint looks backwards behavior supposed occur rtexecute appears test statement behavior supposed occurred appears clause behavior descriptions declarativethey prescribe execute test program describe must true test program executes test program executes execution trace value rtexecute stsafetotest way constraint satisfied stsafetotest rtexecute true rtexecute false notice rt required actually run instead requirement rt run unless uut safetoturnon test test test requirement products typically temperature range expected operate normally implies product must tested one ambient temperature let us assume example product tested three temperatures room temperature low temperature high temperature assumption captured first expanding definition runtests behavior include notion ambient temperature runtests signal ambient temperature next definition wholetestprogram expanded require runtests execute least temperature around room temperature temperature near low end range temperature near high end range wholetestprogram behavior st safetoturnonsafetotest boolean behavior rtroom runtests constrain rtroomexecute rtroomstart ststop constrain rtroomexecute stsafetotest constrain rtroomexecute rtambient roomrange behavior rtlow runtests constrain rtlowexecute rtlowstart ststop constrain rtlowexecute stsafetotest constrain rtlowexecute rtambient lowrange behavior runtests constrain rthighexecute rthighstart ststop constrain rthighexecute stsafetotest constrain rthighexecute rtambient highrange wholetestprogram description modified include three copies runtests constrained run within particular temperature range denoted names roomrange lowrange highrange would defined full model note sequencing constraints various runtests implementation free pick whatever temperature sequence deems appropriate also notice none runtests required execute particular example decision execution left diagnostic controller diagnostic controller might instance decide test high low temperature room temperature test fails decision entirely consistent test requirements example frequency stability test requirement frequency stability test might verify uut output signal constant frequency term constant must qualified mean constant within error test requirement captured defining terms behavior one approach specifying behavior frequencystable signal osc acsignal located hioscpin logndpin constrain abs oscfrequency 125 mhz freqerror model defines behavior frequencystable one signal type acsignal single constraint forces frequency close 125 mhz close defined within freqerror unfortunately description incorrect one know oscillator really stable forced stable current description demands oscillator stable invalidates observation behavior oscillator stable description needs report whether oscillator stable rather forcing stability oscillator focus describing rather prescribing behavior example frequencystable property oscok boolean signal osc acsignal located hioscpin logndpin description says oscok property true oscillator frequency stable false otherwise notice oscok required true true faultfree uut may false faulty uut behavior frequencystable permitted take either value reasonable expect diagnostics use oscok among others indicate whether uut faulty test declarative behavior description usually capture enough information directly generate code test program however behavior used guide test program generation papachristou carletta 1995 general code synthesis process follow constraint satisfaction process coupled code generator side effect dechter 1992 pearl 1988 example determining order execute rt st legal values ranges values need instantiated rtstart ststop variables side effect instantiating values code generator determine functions associated rt st must generated sequenced according legal values illustration consider example previous section describing stto test example synthesis begins code implementing wholetestprogram must generated might involve including standard startup code may include generation sitespecific user interfaces test requirements behavior description silent issues synthesis program expected generate details sources information separation test requirements depend uut information test equipment local test procedures deliberate principal advantage using behavior model remaining discussion assume synthesis program adding local information talk terms satisfying test requirements begun wholetestprogram one must select component test program synthesize four statements wholetestprogram two behaviors two constraints note first constraint prohibits running rt running st also note second constraint cannot evaluated st executes therefore st synthesized first exactly common sense would dictate branch executes rt st returned true safetotest parameter synthesized using programming language like c code wholetestprogram would resemble following skeleton void wholetestprogram void boolean safetotest execute safetoturnon getting safetotest parameter back safetoturnon safetotest execute runtests safetotest true safetotest note constraint st run rt ensured order safetoturnon runtests routines called test program also note c program executes runtests safetotest true even though test requirements demand test programs often constrained test requirements due considerations operator convenience test time minimization concerns directly related requirements test test program verification process comparing existing test program set test requirements ensure program satisfies requirements caunegre abraham 1995 discussed earlier behavior description test program constrains execution trace execution trace truly verified however impractical inefficient verify execution trace therefore alternative analyze test program predict whether execution traces produced test program correct aspects execution trace predicted high confidence gross timing relationships good example following example behavior sometest two subbehaviors b1 b2 b2 must occur b1 sometest behavior b1 testa behavior b2 testb constraint b2start b1stop corresponding test program written sequential programming language c b1 b2 implemented subroutines code sometest might look like sometest void case b2 guaranteed follow b1 unless catastrophic failure occurs compiler host computer aspects execution trace predicted less certainty example consider behavior contains signal whose voltage constrained small range around 33v somevoltagetest signal vcc dcsignal located hips1pin logndpin constrain absvccvoltage 33v 01v behavior might implemented code programs power supply 33v analysis test program code would show power supply programming consistent behavior however execution trace would consistent behavior selected power supply adequate accuracy precision line loss supply uut negligible concerns test engineers deal daily basis must considered analysis sometimes analysis test program code yield enough information conclude anything expected execution trace eg interactions selected test resource interface test adapter cannot predicted easily cases simulation test program also called virtual tests generate predictions execution traces test program miegler wolz 1996 predicted execution traces verified respect behavior enough simulations test program could declared acceptable test resource allocation test resource allocation identifies candidate resources determines candidates suitable required task hardenburg nichols 1995 test resource allocation important function test development automation function important automating test program generation process automated allocation also enables dynamic allocation test resources turn leads portable test programs test program one requirements must satisfied test resource test resource set capabilities resource capabilities satisfy requirements resource functionally suitable behavior model supports test functional suitability acting specification test requirements test resource capabilities example supposed following test requirement applied amplifier gain two sometest signal v1 dcsignal signal vin dcsignal located hiinpin logndpin signal vout dcsignal located hioutpin logndpin signal v2 dcsignal property ampok boolean constrain absv1voltage 4v 05v constrain absvinvoltage v1voltage 2mv constrain absv2voltage voutvoltage 2mv four signals behavior 1 v1 input voltage amplifier program programmed 2 v2 output voltage reported instrument 3 vin actual input voltage amplifier 4 vout actual output voltage amplifier also four constraints behavior 1 programmed input voltage value range 35v 45v 2 actual input voltage must within 2mv programmed voltage 3 reported output voltage must within 2mv actual output voltage 4 boolean property ampok true amplifier gain calculated programmed reported voltages two plus minus one tenth one percent description three things sometest observed first use signals programmed reported voltages allows behavior model capture accuracy requirements relationship vin v1 one accuracy constraint relationship v2 vout second behavior model allows test program test amplifier voltage one volt range eg 35v 45v accuracy overall test required relatively high requirements cannot specified simple range vin third implicit constraint vin vout since vin constrained relative v1 vout constrained relative v2 explicit constraint exists v1 v2 constraint similar form v1 v2 might classified product requirement test resource required implement behavior specified model obtain required behavior two resources probably requiredone apply input voltage one measure output voltage sake discussion consider measurement resource input resource would treated similarly possible behavior model describing measurement resource property offset voltage property tolerance real signal vmeas dcsignal located hiinputpin logndpin signal vread dcsignal constrain 10v vmeas vmeas 10v constrain absvmeas vread offset constrain 0v offset offset 100uv tolerance tolerance 2e4 resource two signalsthe voltage appears input voltage reported resource behavior four constraints first limits range input voltage plus minus 10v last three constraints limit measurement error first expresses resource accuracy linear function offset tolerance second limits legal range offset third limits legal range tolerance notice behavior state offset example 100uv instead behavior states offset 100uv interpreting model measurespec behavior states behavior resource gives information control resource one approach controlling resource resource separate set methods provide program control approach taken one would expect find method returns vreadvoltage methods returning vmeasvoltage offset tolerance would methods setting properties signals set methods entirely consistent control real resources assume process chosen resource associated measurespec implement test requirements sometest resource connected uut new behavior specified union original behaviors sometestusingresource behavior x sometest behavior measurespec constrain absxvoutvoltage yvmeasvoltage italoss instance sometest instance measurespec subbehaviors x constrained simultaneous constraints omitted simplicity additional constraint couples uut output voltage test resource input voltage corresponding wiring interface test adapter constraint say two voltages equal rather states two voltages closer factor called italoss test resource compatible test requirements conflicts constraints constraints numbered convenience coupled connecting resource uut signal v1 dcsignal signal vin dcsignal located hiinpin logndpin signal vout dcsignal located hioutpin logndpin signal v2 dcsignal property ampok boolean 1 constrain absv1voltage 4v 05v 2 constrain absvinvoltage v1voltage 2mv 3 constrain absv2voltage voutvoltage 2mv 4 constrain property offset voltage property tolerance real signal vmeas dcsignal located hiinputpin logndpin signal vread dcsignal 5 constrain 10v vmeas vmeas 10v 6 constrain absvmeas vread offset 7 constrain 0v offset offset 100uv 8 constrain 0 tolerance tolerance 2e4 9 constrain absvoutvoltage vmeasvoltage italoss uut good one deduce model output voltage may range approximately 7v 8v output may actually range 6992502v 9008502v derived constraints 1 2 4 lies comfortably within resource input range given constraint 5 note range vout constrained therefore one cannot certain vmeas lie within 10v range present example one could probably clamp vout protect resource input without affecting validity test program uut good one also deduce model vread adequate substitute v2 provided italoss less 100uv maximum error resource given vread respect vmeas occurs 9v 19mv specified constraints 6 7 8 maximum error permitted v2 given v2 respect vout 2mv specified constraint 3 maximum error vout vmeas italoss specified constraint 9 therefore italoss 100uv vread resource substituted v2 constraint 4 example illustrates analyzing behavior specifications test requirements resource capabilities verifies resource satisfies requirements used test program provided ita loss kept low enough different values constraints could lead different conclusion triggers events one reasonable issue behavior model address representation events including various triggers timers behavior model quite readily represents concepts recognize special way trigger defines precise timing relationship two actions example trigger establish relationship rising edge voltage signal start oscillator shown figure 4 behavior model captures trigger follows assume several subbehaviors oscillatoron oscillatoroff dclow dchigh defined oscillatortrigger behavior oscoff oscillatoroff behavior oscon oscillatoron constrain oscoffstart oscillatortriggerstart constrain osconstart oscoffstop constrain osconstop oscillatortriggerstop behavior trigdown dclow behavior trigup dchigh constrain trigdownstart oscillatortriggerstart figure 5 pairing two oscillators oscillator voltage delay figure 4 trigger initiating oscillator constrain trigupstart trigdownstop constrain trigupstop trigupstart trigdelay constrain osconstart trigupstart trigdelay four subbehaviors oscillatortrigger two govern behavior oscillator must occur sequentially ie oscon starts soon oscoff stops together two subbehaviors span entire containing behavior two subbehaviors govern trigger signal two subbehaviors also sequential need run end containing behavior example oscillator running trigger signal change without affecting oscillator finally constraint imposed oscillator turn delay following rising edge trigger signal delay named trigdelay example would normally passed parameter behavior notice oscillatortrigger describes simple timing relationship indication relationship implemented could implemented trigger software sideeffect something else test program behavior model describes constraints satisfy constraints real world equality constraints difficult realize example oscillatortrigger requires time difference trigupstart osconstart exactly trigdelay time difference would never exactly trigdelay real test program matter instead actual time difference measured execution trace trigdelay within error captured following constraint constrain absosconstart trigupstart trigdelay trigerror new constraint says difference actual delay osconstart trigupstart desired delay trigdelay must less allowable error trigerror complicated constraints used capture asymmetric tolerances ie tolerances symmetrically distributed expected value returning example evident behavior model adequately describes relationships implemented events triggers also evident behavior model distinguish timing relationships implemented hardware eg triggers software eg software delay loops primary difference hardware triggers software timing potential error triggering delay test programmer selects voltage delay delay figure 6 implementing two paired oscillators hardware implementation get precise delay concerned issues accessing allocating controlling hardware obtain desired delay hand test programmer selects software implementation precision less important ease programming test program would normally use behavior oscillatortrigger trigger signal example probably implementation detail likely scenario behavior two oscillators start within fixed time illustrated figure 5 might implemented figure 6 behavior properly describe requirement oscillators begin time implementation detail referencing common rising edge paper provide description behavior information model proposed next generation test system architecture development ari model facilitates specification behaviors related test subjects test requirements test strategies test resources product diagnostics using declarative approach behavior model provides formal approach specifying behaviors thereby facilitating specification development reusable transportable test programs r abstract interpretation declarative languages trsl standard supports current future test processes achieving simulationbased test program verification fault simulation capabilities mixedsignal systems formal methodsmathematics theory recipes constraint networks survey seven myths formal methods ieee abbet lower layers definition status introduction logic programming development test programs virtual test environment capturing boardlevel test requirements generic formats test synthesis behavioral domain probabilistic reasoning intelligent systems information modeling express way industrial use formal methods tr