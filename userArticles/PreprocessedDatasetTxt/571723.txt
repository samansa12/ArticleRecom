gametheoretic approach towards congestion control communication networks endtoend congestion control schemes voluntary nature critically depend enduser cooperation show presence selfish users schemes inevitably lead congestion collapse router switch mechanisms service disciplines buffer management policies determine sharing resources congestion show using gametheoretic approach currently proposed mechanisms either encourage behaviour leads congestion oblivious itwe propose class service disciplines called diminishing weight schedulers dws punish misbehaving users reward congestion avoiding well behaved users also propose sample service discipline called rate inverse scheduling ris class dws schedulers dws schedulers deployed network maxmin fair rates constitute unique nash stackelberg equilibrium show ris solves problems excessive congestion due unresponsive flows aggressive versions tcp multiple parallel connections also fair tcp b introduction end end congestion control schemes 23 17 32 26 16 voluntary nature critically depend enduser cooperation tcp congestion control algorithms 23 5 20 21 19 9 voluntarily reduce sending rate upon receiving congestion signal ecn 25 packet loss 14 10 18 source quench 24 congestion control schemes successful endusers cooperate volunteer reduce sending rates using ibm india research lab hauz khas new delhi 110016 india indian institute technology delhi hauz khas new z network appliance ca usa permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee similar algorithms upon detection congestion internet grows small experimental network large commercial network assumptions cooperative enduser behaviour may remain valid factors diversity commercialization growth may lead noncooperative competitive behaviours 12 aim derive better individual utility shared internet resources enduser reduce sending rate upon congestion detection get better share network bandwidth ows users called unresponsive ows 8 7 even responsive ows react congestion signal get unfair share network bandwidth conservative reducing rates aggressive increasing rates ows termed tcpincompatible ows 8 7 even tcpcompatible ows dierent variants tcp give dierent performance 21 dierent conditions behaviours though currently prevalent present internet pose serious threat internet stability 12 8 widespread behaviours may lead congestion collapse internet see section 2 therefore important approach towards congestion control dependent cooperative end users voluntarily following enduser behaviour class predened behaviours paper propose gametheoretic approach towards congestion control crux approach deploy schedulers andor buer management policies intermediate switches routers punish misbehaving ows cutting rates thereby encouraging well behaved ows discussions 29 punishing misbehaving users talk punishments gametheoretic framework propose class scheduling algorithms called diminishing weight scheduling dws punish misbehaving ows way resulting gametheoretic equilibrium nash equilibrium results fair resource allocations show dws scheduling deployed network maxmin fair rates 4 constitute nash well stackelberg equilibrium thus dws scheduling deployed best selsh behaviour user estimate fair rate send trac rate gametheoretic approach similar proposed shenker 27 analyze switch service disciplines however shenker uses discrete queueing theoretic model input trac accurately model trac todays data networks moreover shenkers analysis restricted single switchrouter extend arbitrary network straight forward manner use continuous uid ow based input trac model realistic amenable analysis arbitrary network makes approach practical applicable networks internet steepness diminishing weight function determines amount penalty imposed misbehaving ow steeper weight functions impose stricter penalties misbe ows weight function becomes dws approaches wfq scheduling imposes penalty misbehaving ow also present sample service discipline called rate inverse scheduling ris diminishing weight function inverse input rate using dierent weight functions dws switch designers isps choose variety rewardpenalty proles meet policy requirements dws deployed show interest individual enduser follow tcpstyle creasedecrease algorithm using simulations show endusers using dierent versions tcp actually able converge fair rates even presence misbehaving users section 2 present gametheoretic formulation show presence selsh users current resource management policies lead congestion col lapse section 3 present dws scheduling algorithm discuss properties section 4 present preliminary simulation results section 5 conclude section 6 proofs provided appendix 2 gametheoretic model consider link capacity c shared n users suciently large shared buer buer management policy service discipline partition link capacity among users assume user sends constant rate trac ow rate r input rate trafc may dropped due buer ows assume steady state trac user delivered destination average output rate output rate function sending rate n users switch service discipline buer management policy b mathematically written denotes ndimensional vector input rates denotes n dimensional vector output rates sb function called resource management function dependent scheduling discipline buer management policy b mapping vector input rates vector output rates consider network comprising multiple nodes links assume trac user traverses links l 1 resource management function link l j denote vector input rates users link l j input rate user link l 1 r 1 since assume users send trac constant rate output rate user link l 1 also constant given therefore input rate user link l 2 also constant given r 2 similarly output rate mbps input rate mbps flows sending 1 mbps fcfs red fred lqd ris figure 1 uncongested link05152535 output rate mbps input rate mbps flows sending 4 mbps fcfs red fred lqd ris figure 2 congested link nal output rate user given general users utility satisfaction depends output rate loss rate endtoend delay however majority applications output rate important factor determining users utility instance rehose applications described 29 completely loss tolerant streaming media applications loss tolerance obtained using forward error correction techniques 2 bulk transfer applications loss tolerance achieved using selective retransmissions 4 therefore simplicity assume users utility increasing function output rate class utility functions u formally dened 1 u 2 u maps users output rate realvalued nonnegative utility 2 u user act selsh manner would choose sending rate r would maximize utility hence output rate irrespective amount inconvenience caused loss utility users consider happen scenario dierent packet service disciplines buer management policies consider link capacity shared users sending trac constant rate figures 1 2 1 later section 4 also consider class utility function u l users utility also dependent loss rate legend scheduling discipline buer management policy fcfs first come rst serve shared buers drop tail worst case fair weighted fair queueing per ow buers drop tail 3 lqd first come rst serve longest queue tail drop 30 first come rst serve dynamic threshold 6 red first come rst serve random early drop 10 fred first come rst serve flow red 18 ris rate inverse scheduling per ow buers drop tail table 1 notations schedulers buer management policies link speeds l n 1 mbps figure 3 congestion collapse sample network show variation users output rate function input rate dierent scheduling disciplines buer management policies refer table 1 notations fcfs output rate user hence users utility always increases input rate increases ever slope graph depends input rate users case incentive user increase sending input rate irrespective users user act selshly maximize utility link end becoming heavily congested user sending trac maximum possible rate receiving tiny fraction trac sent characterized concept nash equilibrium 11 utility player player adopts strategy players adopt strategy strategy prole nash equilibrium every player set strategies user adopt words nash equilibrium strategy prole user incentive deviate unilaterally strategy users selsh noncooperating would eventually adopt strategies constitute nash equilibrium vector input rates r constitutes strategy prole users utility u monotonically increasing function output rate fcfs red dt resource management policies nash equilibrium input rates approach innity therefore appropriate say fcfs encourages behaviour leads congestion network comprising multiple nodes links selsh user behaviour lead worse disasters 7 8 similar congestion collapse input rate user approach maximum possible output rates approach zero see consider network ows shown figure 3 assume fcfs policy deployed every link every user send trac rate access link 10 mbps get net output rate less 100kbps nal destination consider wf2q output rate user remains equal input rate long less equal fair rate input rate becomes larger fair rate output rate remains constant fair rate cn true irrespective input rates users scenario selsh user increase input rate till fair rate however user incentive increase input rate beyond fair rate incentive keep input rate fair rate therefore network comprising multiple nodes links selsh user neither knows fair rate resource management policies employed fcfs wfq may simply nd convenient keep increasing input rate much beyond fair rate wf2q lqd fred seems vector input rates users input rate cn constitutes nash equilibrium say policies oblivious congestion causing behaviour observe figures 1 2 resource management policies except ris described following sections either encourage behaviour leading congestion oblivious endtoend congestion control schemes eective presence selsh users absence incentives usage based charging congestion pricing etc resource management mechanism interior network ie trac police needed punishes misbehaving users rewards well behaved users present todays networks opposite following section describe class service disciplines achieve purpose rewarding well behaved users punishing misbehaving users 3 diminishing weightschedulers class diminishing weight schedulers dws dened idealized uid ow trac model derived generalized processor sharing gps scheduling algorithm 22 consider link capacity c shared users sending trac n distinct ows let amount trac ow entering scheduler buer interval 0 amount trac ow served scheduler interval 0 dene backlog ow time 0 total system backlog time dene input rate ow link time r dene output rate ow link time gps scheduler 22 link may dened unique scheduler satisfying following properties flow conservation 0 2 work conservation bt 0 gps fairness gps weight assigned ow ow conservation property implies ow trac served cannot trac arrived work conservation property implies nonzero backlog system link kept idle fairness property implies output service rates backlogged ows proportional respective gps weights output rates nonbacklogged ows smaller gps assigns constant weights ows dws differ gps regard dws bit gets gps weight decreasing function bits arrival put rate bit head queue ow time arrived time dws w r diminishing weight function continuous strictly decreasing function r class dws schedulers formally dened schedulers satisfying following properties flow conservation work conservation bt 0 dws fairness dws weight ow thus dws rewards ows small rates assigning large gps weights punishing ows large rates assigning small gps weights amount punishment depends upon steepness diminishing weight function function 1logr function dws resembles gps scheduling diminishing weight function steep strict penalties enforced misbehaving users dws weights may set accordance pric ing resource sharing administrative policies way gps weights set gps based schedulers deployed rate inverse scheduler ris special case dws scheduler diminishing weight function inverse function w 1r thus dws fairness condition ris reduces following ris fairness assume simplicity dws weights set 1 users send trac constant rate thus output rates also constant ow conservation property follows dws fairness condition simplied follows follows two ows j backlogged prove important properties dws schedul ing dene congestion characteristic function gx r dene rate constant link vector input rates r theorem 31 rate constant rate constant dened eq 11 unique output rate ow uniquely given proof provided appendix hence given input rates ows using rate constant possible uniquely determine output rate ow dene fair rate f follows lemma 31 fair rate f dened eq12 unique proof provided appendix output rate represented terms fair rate follows show input rate ow less equal fair rate ow get bits transmitted without loss otherwise suer loss according diminishing weight function w lemma 32 r f f proof case w f since w strictly decreasing function hence get r w r fw f using eq12 get r w r therefore case case get r w r fw f since w strictly decreasing function use eq12 get f behaviour also evident figures 2 7 say ow contributes links congestion scheduling output rate ow remains equal input rate long ow contribute congestion however soon ow contributes congestion output rate begins decline according diminishing weight function w dws dierent weight functions chosen meet specic policy requirements observe figure 7 weight function w imposes small penalty misbehaving ows similar wfq whereas weight function w imposes strict penalties following result follows lemma 32 corollary 31 output rate ow less equal fair rate establish relationship fair rate f link capacity c number users n also suggests users equal equal dws weights fair rate indeed fair lemma 33 fair rate f greater equal cn proof provided appendix lemmas 32 33 observe user input rate cn output rate also equal cn since r hence dws results fair allocation resources lemma 34 ow experiencing losses decreasing ows input rate suciently small amount either increase output rate leave unchanged ie 9 0 st r 0 proof provided appendix lemma 35 ow experiencing losses increasing ows input rate suciently small amount either increase output rate leave unchanged ie proof provided appendix two lemmas establish ow experiencing may incentive reduce input rate whereas ow experiencing losses may incentive increase input rate similar behaviour tcps increasedecrease algorithms increase input rate losses decrease input rate soon losses observed later section 5 using simulations show dierent versions tcp actually converge close fair rate dws schedulers deployed 31 packetized diminishing weight schedulers pdws network trac ow uid instead ows packets containing chunks data arrive discrete time boundaries therefore scheduler needed buffers ris scheduler packet collector output link packet streams input figure 4 hypothetical model dws discrete packet boundaries works discrete packets packetized dws derived dws scheduler way packetized gps derived gps scheduler therefore implementation details pdws similar pgps except minor changes equations computing timestamps straightforward adapt pdws simplications pgps like virtual clock 34 self clocked fair queueing 13 wf2q 33 frame based fair queueing denote arrival time k th packet ow k length k th packet ow l k model th arrival ow uid owing rate r k interval k 1 rate arrival bits packet given r k therefore packet gets gps weight given k special case dws k ris packet becomes eligible service scheduler last bit arrived ie time k assume hypothetical packet collector dws scheduler collects bits packet gives dws become eligible see figure 4 dene nish time packet time last bit packet gets serviced hypothetical dws scheduler packet collector shown figure 4 pdws dened scheduler schedules packets increasing order nish times along lines pgps implementation 31 pdws based concept system virtual time virtual n ish time packets scheduler maintains virtual time function vt upon packet arrival packet tagged virtual nish time follows packets serviced increasing order virtual nish times compute virtual time stant emulation hypothetical dws system figure 4 maintained similar pgps implementa tions packet k ow arrives tagged gps weight k also given dws emula tion emulation computes virtual nish time packet eq 15 rate change virtual time real time given gps weight corresponding packet ow currently service dws emulation real practice trac arrivals bursty therefore better use smoothed arrival rate instead instantaneous arrival rates gps weight computation scheduler pdws smoothing sets k value taken half life smoothing order one round trip time r packet size lmax used send trac gives f fair rate ow 4 properties dws describe desirable gametheoretic properties dws schedulers section results number users n 2 unless otherwise specied 41 single link dws scheduling best strategy individual user send trac fair rate formally illustrated following theorem theorem 41 consider link capacity c shared users using dws scheduling unit dws weights unique nash equilibrium system proof provided appendix naive selsh users converge nash equilibrium however case user say leader information users utility functions behaviours scheduling andor queue management policies gateways could choose value input rate users would equilibrate nash equilibrium n 1 user subsystem leading user choose input rate based n 1 subsystem nash equilibria maximizes leading users util ity formally called stackelberg equilibrium prole stackelberg equilibrium user 1 leading 1 nash equilibrium users 2 leaders utility maximized ie nash equilibrium users adopts strategy 1 set strategies user follow leaders utility stackelberg equilibrium never less nash equilibrium user information may try drive system towards one stackelberg equilibria avoided nash stackelberg equilibria coincide show true single link dws scheduling theorem 42 consider link capacity c shared users using dws scheduling unit dws weights unique stackelberg equilibrium system proof provided appendix since unique nash stackelberg equilibria coincide user benet sending fair rate user sending rate higher fair rate penalized users receive better output rate characterized concept nash rate definition 3 given user input rate r dene nash rate remaining users discuss properties nash rate lemma 41 nash rate r strictly increasing function r range cn 1 proof r 2 cn 1 rewrite denition 17 since w strictly decreasing r increases x increases viceversa also note value x satisfying equation given value r unique lemma 42 nash rate greater equal cn ie r cn proof r cn see denition nash rate eq 17 r cn r cn note lemma 41 r increasing cn 1 also note r continuous cn eq 17 cn cn hence r cn user sends r best strategy users send trac nash rate r formally stated following theorem theorem 43 user say user 1 sends r1 unique nash equilibrium remaining n 1 users proof provided appendix observe user sends r1 cn thereby contributing congestion spare capacity divided equally among others 1 user misbehaves sends trac rate r1 cn users remain well behaved users safely increase rate upto r1 whereas misbehaving user gets penalized residual nash rate r r dened follows definition 4 given user input rate r dene residual nash rate following two lemmas illustrate user contributes congestion penalty incurs lemma 43 residual nash rate less equal cn ie r r cn immediately follows eq lemma 44 rr strictly decreasing function r range cn 1 proof immediately follows eq steep weight function results severer punishment user contributing congestion larger equilibrium output rate well behaving users illustrated figure 5 plots nash rate residual nash rate different diminishing weight functions easily ob served steeper weight functionw results larger penalty compared less steep weight function nash rate mbps input rate r mbps nash rates wr1r figure 5 nash rate 42 arbitrary network links consider arbitrary network servicing n ows assume dws scheduling deployed every link net work assume input rate ow constant therefore input output rates users every link also constant input output rate ow link computed using eq 1 12 13 following theorem establishes even arbitrary network links maxmin fair input rates constitute nash well stackelberg equilibrium dws schedulers deployed link maxmin fairness 4 well known notion fairness arbitrary network denote 1 n vector maxmin fair rates ows network theorem 44 consider n users sending trac distinct ows arbitrary network independent dws scheduling link maxmin fair rates constitute nash well stackelberg equilibrium users proof provided appendix furthermore necessary weight function used link makes easier adopt dws heterogenous environment dierent administrative domains policies besides may equilibria also users may try aect equilibrium reach case shown least one user experience losses nash equilibria illustrated following lemma lemma 45 consider n users sending trac n distinct ows arbitrary network independent dws scheduling link maxmin fair rates constitutes unique nash well stackelberg equilibrium losses system proof provided appendix general users utility may also depend loss rate addition output rate many nash equilibrias giving output rates generally users prefer one smaller losses formally dene class utility functions u l follows mbps 2ms 100 mbps 30ms 100 mbps 30ms 100 mbps 30ms 100 mbps 30ms 100 mbps 30ms figure simulation scenario 1 u 2 u l maps users output rate lossrate l realvalued nonnegative utility 2 u 3 u users utility functions turns unique nash well stackelberg equilibrium illustrated following theorem similar theorem 41 theorem 42 single link theorem 45 consider n users sending trac distinct ows arbitrary network independent dws scheduling link let u utility function user 8 u l maxmin fair rates constitutes unique nash stackelberg equilibrium proof provided appendix therefore best selsh behaviour user send trac maxmin fair rate 5 simulation results results previous section imply best selsh behaviour user presence similar users send trac maxmin fair rate however maxmin fair rate depends link capacities b number ows link c input rate ows path ow user know parameters general thus able know maxmin fair rate however lemmas 34 35 seem case single link dws scheduling iteration tcp style increasedecrease algorithm suitable parameters bring input rates closer fair rates therefore single link dws scheduling modeled game tcplike end user algorithms seem reasonable strategies play game section illustrate simulations dierent versions tcp algorithms indeed able converge maxmin fair rate nash rates presence misbehaving users dws schedulers deployed network convergence nash rates also shown dierent diminishing weight functions specic versions tcp round trip times individual ows little impact average output rate ow therefore dws scheduling solves problems congestion control presence misbehaving users 7 8 output rate mbps input rate mbps flows sending 4 mbps fcfs red wr1logr ris wr1r wr1r2 wr1r4 figure 7 dws performance presence cbr ows 51 simulation scenario simulation scenario shown figure 6 bottleneck link capacity 10 mbps propagation delay 2 ms access links capacity 100 mbps propagation delay ms buer size ow link set round product pdws smoothing per ow buers tail drop used ns 1 used carry simulations 52 cbr flows bottleneck link shared cbr ows four send trac constant rate 4 mbps rate fth ow varied 0 mbps 72 mbps plot output rate vs input rate various scheduling algorithms buer management policies shown figure 7 scenario heavy congestion note figure 7 dws scheduling ow able receive fair rate long cause congestion ow starts receiving penalty input rate exceeds fair rate amount penalty depends weight function w note penalties higher w lower w logr 53 tcp unresponsive flows ow change input rate congestion referred unresponsive ow 7 responsive ows back reducing sending rate upon detecting congestion unresponsive ows continue inject packets network thereby grabbing larger share bandwidth result presence unresponsive ows gives rise unfairness bandwidth allocation pdws scheduling deployed show tcp style aimd algorithms estimate send trac maxmin fair rate nash rate even presence misbehaving ows bottleneck link shared 5 users 4 using sponsive tcp tahoe one unresponsive constant bit rate cbr source responsive tcp ows back congestion unresponsive cbr ows continue inject packets network thus attempting grab larger share bandwidth figure 8 shows average output rates representative tcp ow input rate the051525 output rate mbps input rate mbps cbr 4 tcp 1 cbr cbr wr1r cbr wr1r2 figure 8 dws performance presence tcp cbr ows cbr ow varied point graph represents simulation 20 seconds however output rates correspond average rate last 10 seconds simulation get stabilized figure 8 shows tcp ows able get close nash rate shown figure 5 hence nash equilibrium according theorem 43 note w logr output rate cbr ow greater tcp ow inverse log weight function gives little penalty misbehaving cbr ow similar wfq bandwidth left tcp timeouts retransmits grabbed cbr ow despite slightly small gps weight cbr increases rate penalty slowly increases allowing tcp grab larger share 54 tcp versions dierent versions tcp like tahoe reno 21 vegas 5 sack 20 known perform dierently 21 show dws scheduling little dierence output rates achieved versions simulation scenario shown figure 6 dierent versions tcp n2 n3 n4 n5 packetized rate inverse scheduler used bottleneck link figure 9 shows total bytes ow transferred function time output rate given slope graph since slopes almost identical see versions get identical rates 55 multiple vs single connection opening multiple simultaneous connections simple way grab bandwidth simple fcfs drop tail gateways simulation scenario shown figure 6 fcfs employed node n0 users nodes n2 n3 n4 n5 n6 open 1 2 3 4 5 tcp reno connections node n1 respectively typically user opening simultaneous connection able grab bandwidth however case dws scheduling tcp connections user treated single ow figure shows plot bytes transferred vs time pris deployed node n0 see users get almost identical bandwidth 56 tcp different round trip times total data received time sec versions sack reno vegas tahoe figure 9 pris performance presence different total data received time sec multiple tcp connections connections connections connections connections connections figure 10 pris performance presence multiple connections round trip time rtt tcp connection determines fast adapts current state network connection smaller rtt able infer status network earlier connection larger rtt therefore large rtt connections typically achieve lower output rates simulation scenario shown figure 6 except propagation delays links n2n0 n3 n0 n4n0 n5n0 n6n0 set 5 10 20 50 100 ms respectively pris scheduler used value taken 09 corresponds minimum rtt ow according eq 16 figure 11 shows pris deployed transients initially ows able achieve almost identical rates 57 network section show dws scheduling deployed network adaptive ows like tcp able estimate converge maxmin fair rates simulation scenario shown figure 12 6 tcp reno ows paths ows 0 1 2 3 4 5 n0n2n1 n4n3n5 n0n2n3n4 n1n2n3n5 n0 n1n2n3n4 respectively buer size ow gateway taken 300 packets bandwidth delay product ow total data received time sec 5 tcps different rtt rtt 14ms rtt 24ms rtt 44ms 104ms rtt 204ms figure 11 pris performance presence ows varying rtts ms ms ms ms ms link capacities 10mbps figure 12 simulation scenario network135790 output rate mbps time sec ris scheduling network flowid 3 flowid 4 flowid 5 figure 13 output rates ows network pris largest rtt scenario maxmin fair rate 4 ows 0 1 5 mbps ows 2 3 4 5 25 mbps figure 13 shows plot output rate vs time 6 ows see initial transients ows converge maxmin fair rates 6 conclusions using techniques gametheory showed current resource sharing mechanisms internet either encourage congestion causing behaviour oblivious mechanisms may adequate currently applicability future remains questionable growth heterogeneity commercialization inter net assumption endusers cooperative might remain valid may lead congestion collapse internet due selsh behaviour endusers proposed class switch scheduling algorithms name diminishing weight schedulers dws showed encourage congestion avoiding behaviour punish behaviours lead congestion showed single link dws scheduling fair rates constitute unique nash stackelberg equilibrium also showed arbitrary network dws scheduling every link maxmin fair rates constitute nash well stackelberg equilibrium therefore dws schedulers deployed even selsh users try estimate maxmin fair rate send trac rate possible set dierent dws weights dierent users trac classes lead gametheoretic manner weighted fair sharing case single link weighted maxmin fair sharing case network weights may set accordance pricing resource sharing policies dened concept nash rate showed choice dierent weight functions aect rewardpenalty prole dws 1r 2 diminishing weight function penalty imposed large whereas 1 logr diminishing weight function behaviour dws marginally dierent gps imposes penalty therefore dws may also viewed generalization gps scheduling suitable gametheoretic properties dws require dierent nodes use weight function therefore well suited heterogenous environment consisting dierent administrative domains domain may independently choose diminishing weight function according administrative policies although maxmin rate constitute nash stackelberg equilibrium clear users estimate maxmin fair rates decentralized distributed scheme one proposed 15 required moreover one needs establish distributed scheme stable indeed converge maxmin fair rates dws schedulers deployed network topic investigation current paper address issue theoretical framework also paper assumed input rate every user constant distributed scheme estimate maxmin fair rate assumption remain valid analyzing dws scheduling dynamically changing rates another open problem believe possible design distributed algorithms stable converge maxmin fair rates presence dws scheduling seems additive increase multiplicative decrease algorithms one followed tcp proper engineering may perform well dws scheduling using simulations showed network dws scheduling tcp variants able estimate maxmin fair rate reasonably well irrespective versions round trip times rtt also showed dws tcp users indeed get rewarded according nash rates presence unresponsive misbehaving cbr ows get punished proposed model requires per ow queueing scheduling core routers may easy implement realistic situation however work presents signicantly dierent view resource sharing congestion control communication networks gives class scheduling algorithms used solve problem gametheoretic framework based work one may able design core stateless policies 29 similar properties 7 acknowledgements thank computer communication review editors anonymous reviewers helpful comments paper 8 r priority encoding transmission data networks vegas new techniques congestion detection avoidance dynamic queue length thresholds shared memory atm switch congestion control principles promoting use endtoend congestion control internet newreno modi random early detection gateways congestion avoidance game theory eliciting cooperation sel congestion avoidance control erica switch algorithm complete description credit update protocol owcontrolled atm networks statistical multiplexing adaptive credit allocation dynamics random early detection forward acknowledgement selective acknowledgement options analysis comparison tcp reno vegas generalized processor sharing approach ow control single node case transmission control protocol something host could source quench source quench introduced delay squid proposal add explicit congestion noti binary feedback scheme congestion avoidance computer networks making greed work networks gametheoretic analysis switch service disciplines design analysis framebased fair queuing new trac scheduling algorithm packet switched networks hardware implementation fair queueing algorithms asynchronous transfer mode networks taxonomy congestion control algorithms packet switching networks hierarchical packet fair queueing algorithms virtual clock tr data networks congestion avoidance control binary feedback scheme congestion avoidance computer networks virtualclock random early detection gateways congestion avoidance making greed work networks creditbased flow control atm networks design analysis framebased fair queueing hierarchical packet fair queueing algorithms forward acknowledgement dynamics random early detection italiccoreitalicstateless fair queueing promoting use endtoend congestion control internet ctr luis lpez gemma del rey almansa stphane paquelet antonio fernndez mathematical model tcp tragedy commons theoretical computer science v343 n12 p426 10 october 2005 petteri nurmi modeling energy constrained routing selfish ad hoc networks proceeding 2006 workshop game theory communications networks october 1414 2006 pisa italy menasch r figueiredo e de souza e silva evolutionary gametheoretic approach congestion control performance evaluation v62 n14 p295312 october 2005 xiaojie gao leonard j schulman feedback control router congestion resolution proceedings twentyfourth annual acm symposium principles distributed computing july 1720 2005 las vegas nv usa altman boulogne r elazouzi jimnez l wynter survey networking games telecommunications computers operations research v33 n2 p286311 february 2006 luis lpez antonio fernndez vicent cholvi game theoretic comparison tcp digital fountain based protocols computer networks international journal computer telecommunications networking v51 n12 p34133426 august 2007