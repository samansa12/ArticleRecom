retraction approach cps transform study continuation passing style cps transform generalization computational transform notion computation generalized continuation passing arbitrary one establish relation direct style continuation passing style interpretation sequential callbyvalue programs prove retraction theorem says lambda term recovered cps form via definable retraction retraction theorem proved logic computational lambda calculus simply typable terms b introduction notions continuation continuation passing style cps transform introduced number authors see rey93 historical overview main motivation independent developments concepts seemed twofold explaining behavior imperative features functional languages compilation programs higher order procedures research led development cps denotational semantics sw74 see also sto77 later categorical semantics computations mog89 well compilers based cps transform ste78 see also app92 kinds applications one central goals research supported part types algorithms office naval research n000149311015 computational efficiency optimal reduction lambda calculus national science foundation cda9504288 logic complexity programming languages national science foundation ccr9216185 research establish relationship original terms images transform work view cps transform formalization contin uation passing style denotational semantics callbyvalue programming language fij lambda calculus n model callbyvalue evaluation programming language choose moggis mog88 computational lambda calculus c two reasons 1 logic c sound callbyvalue reasoning 2 logic c complete class models computational lambda models mog88 commonly used computational effects expressed one way asserting correctness cps transform interpretation c n equational correspondence result due sabry felleisen sf92 theorem 11 sabryfelleisen two lambda terms n lefttoright implication theorem says cps transform preserves equality righttoleft implication says transform also preserves distinctions thus transform gives accurate picture equivalence n formalize problem trying solve observe lefttoright implication theorem also says cps transform defines function mapping c equivalence classes lambda terms n equivalence classes lambda terms righttoleft implication understood saying injective therefore left ask question whether functions inverse definable precisely ffl lambda term p n p ffl lambda term r c r elementary argument given mr shows answer first question must work give affirmative answer second question precisely prove following theorem theorem 12 retraction cps transform simple type oe lambda term r oe closed lambda terms type oe r oe version retraction theorem proven meyer wand mw85 conclusion theorem holds logic n however authors pointed us result misleading interested behavior term callbyvalue evaluation n sound callbyvalue reasoning presence computational effects interesting point cps transform viewed interpretation callbyvalue programs interpret pure functional programs also extended interpret programs control operators callcc abort different extensions functional language impure features also given denotational semantics using similar transform example interpretation programs language mutable store given using state passing style sps transform shown moggi mog88 number computational effects described notion monad cps sps transforms generalized call computational transform wad90 sw96 equational correspondence computational transform holds well sw96 natural ask whether retraction theorem theorem 12 generalizes however computational transform maps lambda terms terms monadic metalanguage ml mog91 language ml extended new constructs logic computational lambda calculus axioms question whether lambda term r even language ml denotes computational transform ill formed order study retraction theorem abstract setting applied transforms well cps transform define modified computational transform pi mapping lambda terms lambda terms extended two constants e r satisfy axiom r modified computational transform satisfies equational correspondence result closed terms prove retraction theorem logic c extended axiom theorem 13 retraction pi simple type oe term r oe closed lambda terms type oe r oe pi pi stands modified computational transform proof theorem consists defining interpretations types terms well relation interpretations proving term type oe meaning meaning oe related relation framework many ways similar inspired type inference models developed mit88 even though transforms interests namely cps transform sps transform special cases modified computational trans form benefit studying abstract transform obtain proof depend details particular transform applied modifying definitions appropriately either cps sps transform hence obtain retraction theorems cps sps transforms fore mentioned results apply simply typed closed terms extend applicability results proceed two directions extend computational lambda calculus new language constructs axioms define equational behavior new terms extend type system results apply larger class terms results easily extended calculus extending c datatype natural numbers primitive operators natural numbers important class extensions consists extensions introduce computational effect c able extend retraction theorem c extended divergent element however stop short proving retraction theorem c terms extended recursion attempt prove retraction theorem untyped closed terms extend type system recursive types prove following result call term f total function value v f v c equivalent value theorem 14 assume terms e r exist e r total functions satisfying c r e x every term r pi analogous theorems also hold cps sps transforms assumption theorem quite strong remains seen whether terms e r exist one also investigate whether elements exist models would allow interesting applications theorem assume reader familiar elementary concepts lambda calculus details one referred bar84 section provide concise definitions order disambiguate notation 21 lambda calculus lambda terms terms formed infinite set variables lambda abstraction application use number standard conventions writing lambda terms application associates left general use parentheses freely make terms easier read let xm n abbreviate term xn ffi n term xm n x part exclusively use letters n p etc range arbitrary lambda terms letters u v w range values lambda terms either variables lambda abstractions constants lowercase letters x z etc used variables study provable equality untyped lambda terms set axions equation derived using rules lambda congruence axioms let xm table 1 axioms c part paper consider equalities provable moggis table 1 possibly extended additional axioms constants particular use constants e r satisfying axiom r 22 typing system consider type system assigning types untyped lambda terms simple types defined base type ie type oe type whenever oe types type inference system consists set rules given table 2 deriving sequents form gamma oe oe called typing assertion gamma typing hypothesis ie set typing assertions form x always assume variable x occurs gamma gamma x oe x oe var n app gamma x oe abs table 2 type inference rules simple types 23 transforms work concentrate three transforms mapping lambda terms lambda terms first study modified computational transform pi mapping pure lambda terms lambda terms extended two constants e r see table 3 transform pi viewed abstract transform captures purposes important properties cps sps transforms namely transform pi term order evaluation lefttoright callbyvalue made explicit however additional structure makes particular cps transform attractive compiler designers reflected definition pi table 3 modified computational transform pi next transform study callbyvalue version fischer reynolds cps transform definition use well overline taken plo75 see table 4 analogous cps transform used give denotational semantics programs mutable store instead control operators state passing style transform sps definition given table 5 used pairing constructs abbreviations namely let hx 1 im n table 4 cps transform abbreviates expression let xm let x 1 1 x let x 2 2 x n x table 5 sps transform even though give untyped definitions transforms believe transforms understood context typed language view supported monadic framework developed moggi mog88 programs interpreted computations leave details moggis monadic interpretation well definitions typed transforms since central development rather sketch intuitive picture help motivate definitions think transform mapping terms type oe intuitively programs terms type oe 0 intuitively computations unary type constructor depends particular transform oe 0 defined inductively using 0 made precise defining typed version transform mapping typing sequents typing sequents 3 retraction theorem section state prove retraction theorem abstract transform pi well cps sps transforms one might find transform pi interesting us serves purpose precisely develop framework enables us prove retraction theorem transform pi free details specific cps sps transforms nevertheless framework effortlessly modified prove retraction theorem transforms thus believe focusing abstract transform improves clarity presentation 31 retractions retraction theorem asserts definability inverse cps transform well transforms interest give construction typeindexed family lambda terms define retraction note give following definitions using terms e r definitions understood parameterized terms inverse modified computational transform defined using constants e r definition inverse cps transform constants replaced terms e k r k likewise sps transform terms e r used think transforms context typed language mapping terms type oe terms representing computations type oe 0 tuitively understand pairs terms defined retraction embedding pairs types oe oe 0 one also formally define notion type oe retract type sense definition given exhibit terms r oe e oe form retraction embedding pair types oe oe 0 moreover show suitable versions terms r oe define required inverses transforms study definition 31 type oe said retract type pair lambda terms r oe e oe types oe oe respectively r oe e oe definition 32 simple type oe define terms e oe r oe inductively structure oe follows higher types r r f e lemma 33 c r oe e oe proof easy induction oe note lemma holds whenever replace constants e r values e 0 r 0 c r 0 finally define terms r r x e later show r oe inverse transform pi define inverse cps transform first define terms r k def xkk x easy show c r k e k retractionembedding pair r k oe using terms r k e k instead constants r e definitions similarly sps transform define terms represents initial state store define terms r oe e oe using terms instead 32 interpretations terms types framework develop prove retraction theorem closely related mitchells type inference models mit88 definition type inference model define interpretations terms types well relation two however definition type inference model assumes one works full fijequality need relax definitions accommodate reasoning weaker logic c first sketch definitions general framework fill details apply particular transform study interpretation terms assume app applicative structure set app binary operation assume also distinguished subset vd values given environment ae mapping variables vd define interpretation relative ae term assigns element jmkae addition assume particular define set equivalence classes terms set values equivalence classes terms values note may informal identify terms equivalence classes interpretation function defined transform consideration interpretation types types interpreted certain subsets called type sets particular chose type sets contain equivalence classes terms form interpretation types defined using relation defined inductively set terms form set form e v 8n 2 joek r r oe n relating interpretations relate meanings terms types instead using simple setmembership relation define extended 2 relation general depend structure transform consideration intuitively serve purpose separating important part transformed term truth validity defined notions say typing assertion oe true respect ae written ae joek notions satisfaction validity defined standard way relative definition truth namely ae satisfies typing hypothesis gamma written ae every typing assertion gamma true respect ae typing sequent gamma oe valid true every ae satisfies gamma aim prove soundness lemma type inference system would imply retraction theorem state lemma single two conditions necessary lemma hold namely require joek n joek r r oe n z r oe etc defined section 31 equality provable equality c main reason two conditions singled proved retraction theorem modified computational transform modify definition interpretations terms types well relation reflect properties cps transform conditions z need proved show retraction theorem holds cps transform similarly sps transform 33 modified computational transform previous section outlined definitions framework fill details following definitions given particular prove retraction theorem modified computational transform also indicate definitions need changed subsequent sections prove retraction theorem cps sps transforms write denote equality provable c definition 34 let ae substitution mapping variables values define interpretation function j deltak jmkae definition 35 type sets sets terms form value note definition understood parameterized term e consider say cps transform use term e k instead definition 36 n terms define application codomain transform follows easy see jm definition 37 let type set let term write value v terms p 1 definition 38 interpretation types defined inductively structure type expressions namely set terms form set form e v 8n 2 joek r r oe n recall r note understand definition parameterized e r app consider cps sps transform appropriate definitions used instead equipped definitions prove soundness lemma first need auxiliary results lemma 39 type oe value v proof easy induction oe lemma 310 two terms n joek r r oe n proof first observe statement lemma stronger given definition 38 definition requires two statements hold n 2 joek lemma show two statements hold n joek conditions easily proved using definitions axioms c soundness lemma consists two parts s1 s2 first part asserts soundness interpretation respect typing rules simply typed lambda calculus second part fact statement retraction theorem lemma 311 soundness let gamma typing hypothesis let ae substitution satisfies gamma let ae 0 substitution r oe aem pi proof prove lemma induction derivation gamma oe var case follows assumptions app case follows directly lemma 310 induction hypotheses abs case slightly involved assume j xn oe j gamma xn derived gamma x 1 using abs rule show s1 first observe aexn pi need show aexn pi term j 1 k therefore since aefvxg satisfies gamma x 1 induction hypothesis s1 k moreover compute r 2 appaexn pi r using definition retractionembedding pairs induction hypotheses s1 s2 establishes s1 show s2 simply compute r using properties retractionembedding pairs lemma 39 induction hypothesis s2 retraction theorem follows directly lemma theorem 312 retraction pi closed term simple type oe r oe pi 34 cps transform prove retraction theorem cps transform indicated fore use exactly framework modify definitions using appropriate definitions application codomain transform relation first recall define retractionembedding r easy see c r k e k abstract property e r use define interpretation terms relative substitution ae using cps transform jmkae application codomain transform defined finally define extended membership relation k terms p value v fresh variable k understood definitions used preceding section defined using e k r k app k k instead e r app new definitions prove following lemma analogous lemma 310 asserting conditions z hold lemma 313 two terms n k joek app k r k oe r k oe proof proof straightforward using definitions axioms c shown lemma rest proof soundness lemma cps transform exactly case modified computational transform corollary obtain retraction result theorem 314 retraction cps transform closed term simple type oe r k 35 sps transform adopt framework sps transform define e r app place e r app prove conditions z still hold recall terms e r defined init initial state store interpretation terms defined using sps transform namely jmkae application codomain transform define n finally define extended membership terms p value v furthermore interpret definitions type sets interpretation types retractionembedding pairs defined earlier given using place e r app new definitions show conditions z still satisfied yields retraction theorem sps transform theorem 315 retraction sps transform closed term simple type oe r oe 36 extensions thus far proved retraction results pure simply typed terms order make results applicable would like extend theorems larger class terms essentially two directions proceed extend class terms adding constants term constructors including possibly new axioms define functional behavior new terms secondly extend type system one type larger class terms extending retraction theorem extension c constants base type primitive operators numerals quite straight forward however adding arbitrary constants higher order types may difficult difficulty lies ensuring closure conditions imposed type sets addition constants satisfied example constant c type oe added c need make sure oe appc pi closure conditions determined based type new constants proof satisfied general depend functional behavior new constants divergence difference callbyname callbyvalue evaluation strategies becomes apparent presence actual computational effects far considered pure simply typed terms setting every closed term equivalent value logics c n therefore stop would unjustified claim significant improvement original meyerwand retraction theorem simplest computational effect add language diver gence presence divergence n reasoning longer sound call byvalue languages applications c extended divergence really need stronger version retraction theorem provable weaker logic c extension retraction theorem language divergence present quite straightforward important since illustrates difference meyer wands formulation retraction theorem divergence represented divergent element omegagamma added language c constant considered value axioms foromega specify application diverges either operators operand diverges moreover axioms identify divergent terms axioms areomega omega omegagamma one verify resulting equational logic consistent cannot value v type system extended axiom omegagamma oe says thatomega every type modified computational transform defined onomega every type prove retraction theorem comega need extend soundness lemma case typing words need show s1 s2 r omega every type oe second condition follows trivially definition ofomega pi axioms prove first condition observe xomega e e oe x lemma 39 e e oe x 2 joek every oe reasoning applied extend retraction theorem cps transform comegagamma cps transform defined onomega komega k recursive types well known terms typed using recursive type system order extend retraction theorem closed terms study recursive types recursive type discipline introduces types form toe use denote type variable order extend results c extended recursive types need define retractionembedding pairs oe new types particular one define e toe r toe even e r motivate solution consider following example let ttt recursive type discipline one type xx x assume defined terms e r try compute r xx x pi r r e x e x complete derivation one would like e continue r see example two occurrences x xx x act types respectively similarly would like two occurrences e xr r e x e x act e e solution problem find uniform definition es rs types namely want retractionembedding pair r e satisfies following definition definition 316 term f called total function f value value v provably equal value pair total functions r e uniform retractionembedding pair e r satisfy system equations r remains open whether pair terms satisfying conditions assume given pair functions assumption show retraction theorem extended recursive types moreover since recursive type system type terms corollary obtain following theorem theorem 317 assume total functions e r exist satisfy equations closed lambda term r pi course analogous theorems hold transforms well sketch main idea proof theorem detailed proof found kuc97 recursive type system extends simple types adding type variables type expressions form toe new inference rules e one understand rules considering type toe type satisfying equation oeftg thus need define interpretation jk satisfies equation words jk fixed point function sjoekfstg assume interpretation satisfy joekfjktg difficulty lies showing oe function sjoekfstg always fixed point define metric space type sets resulting metric space complete show function sjoekfstg contraction thus banachs fixedpoint theorem unique fixed point mac queen et al mps86 developed framework development viewed special case namely domain consists finite elements typ ing sequents ordered discrete order thus greatly simplifying general purpose structures used mps86 concluding remarks work established relation direct style cps terms using definable retraction functions retraction theorem shows term recovered c equivalence image cps transform therefore retraction approach fact provides relation equivalence classes terms contrast results others provide perhaps even stronger relation lambda terms cps forms eg sw96 emphasize inverse cps transform obtain definable another important point conclusion version retraction theorem equation provable logic c callbyvalue logic unlike results mw85 fil94 give similar equalities callbyname logic consequence results applicable even callbyname reasoning sound open questions practical applications functional programming languages equipped form recursion therefore make retraction approach applicable practice need extend results language recursion done two ways extending type system fixedpoint operator definable pure language adding language construct constant letrec etc first approach partial results discussed one difficulty adding fixedpoint operator similar language construct additional closure conditions needed definition type sets havent able construct type sets satisfying conditions difficulty determining correct axiomatization fixedpoint operator appears axiom suffice models c fixedpoint operator defined using called fixpoint object crole pitts cp92 define object models c discuss logical system reasoning fixpoint computations may hold answer questions another class extensions motivated application retraction theorem developed riecke viswanathan rv95 show one isolate effects extension language assignment control interfering pure functional code natural question arises whether possible extend approach isolate one computational effect interfering code possibly containing different computational effect instance program say call byvalue pcf assignment define operator call encap extension callbyvalue pcf assignment control encap behave behaves extension callby value pcf assignment believe appropriate extension retraction theorem programming language imperative features may give us results r compiling continuations lambda calculus syntax se mantics new foundations fixpoint computations fixhyperdoctrines fixlogic representing monads free theorems type inference containment computational lambdacaluclus monads computational lambdacaluclus monads notions computation monads ideal model recursive polymorphic types continuations may unrea sonable continuation semantics typed lambdacalculi summary discoveries continutions isolating side effects sequential languages reasoning programs continuationpassing style compiler scheme denotational semantics scottstrachey approach programming language theory mathematical semantics handling full jumps reflection callbyvalue comprehending monads tr ctr andrzej filinski relations monadic semantics theoretical computer science v375 n13 p4175 may 2007