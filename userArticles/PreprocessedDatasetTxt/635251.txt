algorithms fixed linear crossing number problem several heuristics exact branchandbound algorithm described fixed linear crossing number problem flcnp experimental study comparing heuristics large set test graphs given flcnp similar 2page book crossing number problem vertices graph optimally placed horizontal node line plane edge drawn arc one halfplane page objective minimize number edge crossings restricted version problem order vertices along node line predetermined fixed flcnp belongs class nphard optimization problems ieee trans comput 39 1 1990 124 heuristics tested compared variety graphs including real world instances interconnection networks proposed models parallel computing experimental results indicate heuristic based neural network model yields nearoptimal solutions outperforms heuristics also experiments show exact algorithm feasible graphs 50 edges general although quality initial upper bound critical runing time graph size b introduction recently several linear graph layout problems subject study given set vertices problem involves placing vertices along horizontal node line plane adding edges specied interconnection pattern node line spine divides plane two halfplanes also called pages corresponding two pages open book examples linear layout problems bandwith problem 8 book thickness problem 229 pagenumber problem 932 boundary vlsi layout problem 50 singlerow routing problem 37 preprint submitted elsevier science 22 august 2001 b figure 1 fixed linear embedding complete graph k 6 crossings b l k 6 surveys linear layout problems see 451 linear layout important several applications eg sorting parallel stacks 49 faulttolerant processor array design 39 vlsi design 9 paper study restricted version linear graph layout vertex order predetermined xed along node line edge drawn arc one two pages objective embed edges total number crossings minimized see figure 1 refer xed linear crossing number problem flcnp denote minimum number crossings l g graph g flcnp shown nphard 33 singlerow routing restriction wires cross node line similar flcnp although objective nd layout crossings flcnp also appears subproblem communications network management graphics facilities cnmgraf 21 problem also general interest graph drawing graphical visualization systems crossing minimization aesthetic criterion used measure quality graph drawing 1448 variant problem vertex positions xed studied 35 heuristic given solution related parameter book crossing number graph g k g minimum number crossings kpage embedding g 22942 note vertex positions xed hence rst necessary nd optimal ordering vertices order determine k g book crossing number problem closely related pagenumber problem pagenumber graph minimum number pages necessary embed edges graph edge one page without crossings known outerplanar graphs comprise 1page embeddable graphs 2 subhamiltonian graphs ie subgraphs planar hamiltonian graphs precisely 2page embeddable graphs 2 planar graphs 4page embeddable 52 nonplanar graphs however require least three pages 2 recent survey k pagenumber general crossing number problem various surfaces found 40 crossing minimization also studied case two l figure 2 edge crossing condition j k l levels vertices 17 28 general case 15 let g denote general planar crossing number graph g 43 shown 2 g g observe l g 2 g since achievement minimum crossings dependent optimal ordering vertices node line ng 2page drawing graph represented pair binary adjacency matrices b edge ij ai j bi j embedded upper lower page 0 otherwise pair edges ik jl cross drawing lie page see figure 2 hence following formula counts number crossings 2page drawing paper present eight dierent heuristics flcnp well branchandbound algorithm nding exact solutions test methods random graphs addition real world instances graphs model interconnection topologies proposed architectures parallel comput ing results show heuristic based neural network model computation simulate sequential algorithm highly effective method computing l g heuristic consistently outperforms heuristics solution quality running time furthermore graphs approximately 50 edges exact algorithm practical choice although performance highly dependent quality initial upper bound value hence algorithms present serve useful methods computing l g also obtaining good linear 2page layouts various networks also since l g g provide upper bounds general planar crossing number graph g begin presenting theoretical bounds followed description algorithms conclude experimental analysis theoretical bounds present theoretical upper lower bounds l g used assessing performance algorithms throughout discussion assume good drawings graphs following conditions hold edge cross ii edges common endpoints cross iii intersection two edges crossing rather tangential iv three edges common crossing v pair edges cross routine exercise show graph g good drawing g minimum number crossings 29 1 g dened outerplanar crossing number results given however 42 following results shown theorem 1 1 2 theorem 2 1 n 4 3n theorem 3 k g 3 27knalso following result deduced theorem 4 1 k n proof equivalent problem arranging vertices graph boundary circle drawing edges chords 4tuple vertices j k l along boundary labels satisfying precisely one crossing caused edges ik jl henceb n1 c gives correct number crossings 2 following result k n previously shown 24 see also 2223 theorem 5 2 k n actually equality shown formula 13 alternate upper bound based adjacency matrix given drawn k pages tables results dierent n k values given results theorem 5 theorem 6 proof construct 2page drawing g dm2e edges one page bm2c assuming worst case edge crosses every edge exactly mostb dm2e1 c cross ings expanding sum using identity dn2e given inequality 2 also 42 following result greedy algorithm given constructing kpage drawing g 1page drawing indicated number crossings theorem 7 k g 1 gk 3 heuristics developed tested eight dierent heuristics grouped two general categories greedy nongreedy two greedy heuristics dier order edges added layout descriptions heuristics given following sections assume vertices xed order 1 2 n along node line preprocessing step algorithm remove insignicant edges observe edges consecutive vertices node line edge 1n cannot involved crossings according constraints problem also vertex k edge ij k j exists edges 1k kn cannot cause crossings hence edges insignicant may ignored without aecting nal solution time problem size reduced larger instances solved output heuristic minimum number crossings obtained corresponding embedding 31 greedy heuristics greedy heuristic adds edges layout rowmajor order adjacency matrix graph rst edges 1i added increasing order ivalue edges 2i increasing ivalue order etc step edge embedded page upper lower results smallest increase number crossings ties broken placing edge upper page heuristic grran uses approach adds edges random order 32 maximal planar heuristic heuristic mplan nds maximal planar subgraph page rst phase edges added rowmajor order adjacency matrix upper page edge causes crossing put aside second phase second phase edges put aside rst phase added lower page edge causes crossing put aside third phase edges put aside second phase added page smallest increase crossings 33 edgelength heuristic heuristic elen initially orders edges nonincreasingly length ie ju vj edge uv intuition longer edges greater potential crossings shorter edges hence embedded rst edge added one time page smallest increase crossings 34 onepage heuristic essentially method described 42 implied theorem 7 2 heuristic 1page initially embeds edges upper page figure 3 fixed embeddings base cases dynamic programming heuristic followed local improvement phase edge moved lower page results fewer crossings edges considered movement order nonincreasing local crossing number ie number crossings involving edge 35 dynamic programming heuristic unfortunately flcnp satisfy principle optimality says optimal sequence decisions subsequence must also opti mal subgraphs embedded optimally earlier process necessarily lead optimal embeddings larger subgraphs edges added smaller subgraphs later however preclude potential benet dynamic programming approach problem heuristic lution crossings localized within relatively small subgraphs along node line given graph dynamic programming method may produce good solution let g ij denote subgraph induced consecutive vertices ij along node line let cri k j number crossings subgraph g ik set link edges g ik g k1j compute cri k j greedily adding link edge page smallest increase crossings leads recurrence number crossings nc1 n computed dynamic programming solution base cases algorithm subgraphs order 2 4 optimal embeddings predetermined shown figure 3 36 bisection heuristic heuristic uses straightforward divideandconquer approach original graph g 1n initially bisected two smaller subgraphs g 1b nc g b nc1n temporarily removing link edges subgraph bisected recursively manner subgraphs order 4 less obtained embeddings base cases shown figure 3 combining smaller subgraphs link edges subgraphs embedded greedy fashion similar method described 3 although way edges reinserted embedding bisection phase clearly specied 37 neural network heuristic heuristic based neural network model parallel computation 27 model large number simple processing elements called assume mccullochpitts binary neuron element binary state 34 model also used graph planarization problem 47 testing purposes sequential simulator actual parallel algorithm used model uses 2m neurons graph edges edge associated neuron representing two pages plane brie two kinds forces excitatory inhibitory present neural network presence edge uv graph encourages two neurons edge excitatory force neurons crossing edges discouraged ring inhibitory force iteration main processing loop neuron values recalculated according specied motion equations eventually several iterations either neuron edge excitatory state nal embedding obtained straightforward simulate parallel algorithm sequential algo rithm whereas parallel algorithm output values neurons simultaneously updated outside motion equation loop sequential simulator output value neuron individually computed sequence soon input neuron evaluated inside motion equation loop drawback neural network algorithms possibility nonconvergence typically constant limit imposed upon number iterations motion equation computation loop process terminated convergence equilibrium state occurred limit full details heuristic given 11 table time complexities heuristics heuristic time complexity greedy om 2 grran om 2 mplan om 2 1page om 2 dynamic om 2 bisection 4 neural om 4 time complexities heuristics time complexities heuristics exact algorithm given table 1 greedy maximal planar edgelength onepage heuristics total time dominated time calculate number crossings edge added layout 4 eq 1 directly applied instead however use dynamic crossing recalculation method checks crossings involving edge added lowers recalculation time om edge added dynamic programming heuristic total 2 subgraphs process subgraph requires om 2 time add link edges recalculate crossings time bisection heuristic given recurrence 4 time merge pair subgraphs recurrence solution 4 sequential simulator neural network heuristic main loop number iterations dependent rate convergence system stable state bounded function input size however experimental testing maximum number loop iterations observed test graph 84 o1 operations performed edge neurons per iteration hence time complexity om 5 exact algorithm number xed linear layouts graph 2 ignoring n insignificant edges yields 2 nn 32 dierent layouts since layout mirror image symmetric drawing number crossings obtained switching embeddings two pages one half number need checked 2 nn 32 1 branchandbound algorithm developed nd optimal solutions enumerating possible embeddings edges subject optimization bound conditions two bounding conditions applied prune partial solution paths search tree path branch tree pruned 1 number crossings partial solution exceeds current global upper bound 2 number crossings partial solution plus number extra crossings resulting adding remaining edge partial embeddding greedily independently remaining edges exceeds current global upper bound backtracking algorithm developed enumerate embeddings apply bounding conditions initial global upper bound obtained best solution generated theoretical bounds heuristics heuristics output algorithm number crossings obtained corresponding embedding 6 test graphs several classes test graphs generated brie described following sections since interested obtaining good upper bounds planar crossing number families graphs generated several types hamiltonian graphs many networks proposed models parallel computer architectures hamiltonian graph g strategy x vertices along node line order hamiltonian cycle possible since g may crossingminimal drawing hamiltonian cycle crossed edge vertices positioned along node line given hamiltonian order edges optimally drawn drawing would g crossings however discussed 9 hamiltonian cycle orderings vertices correspond optimal vertex ordering one leads linear layout number crossings equivalent planar crossing number graph nd optimal cycle example ddimensional hypercube many 2 3 cycles 41 worst case would generated tested would impractical large nevertheless using hamiltonian ordering vertices node line likelihood computing planar crossing number graph increased 61 random graphs used traditional model g np random graphs 6 formed independently including edge k n probability random graphs order made nd hamiltonian cycle graph due computational diculty problem hence vertices simply positioned along node line order 62 interconnection network graphs many interconnection topologies proposed parallel computing architectures optimal book embeddings investigated several networks eg 926 xed linear crossing number knowledge investigated detailed descriptions many networks found 3053 provide brief descriptions network graphs generated hamiltonian since hamiltonian cycles may easily found graphs vertices positioned along node line hamiltonian order testing hope obtaining better approximations planar crossing number graph discussed earlier 621 hypercubic networks hypercube q dimension dregular graph 2 vertices vertex labelled distinct dbit binary string two vertices adjacent dier exactly one bit q 3 shown figure 4a hypercubes dimension several derivatives hypercube also proposed generally referred hypercubic networks hypercube unbounded vertex degree according dimension hypercubic networks constant degree bounds usually 3 4 making less dense increasing order cubeconnectedcycles 36 ccc dimension formed q replacing vertex u dcycle vertices ccc joining cycle vertex cycle vertex corresponding neighbor u figure 4b shows ccc 3 ccc d2 vertices 3d2 1 edges 3regular instances twisted cube 7 tq order size regularity q tq formed twisting one pair edges shortest cycle 4cycle q figure 4c displays tq 3 tq dimension crossed cube cq dened 18 like q cq 2 vertices d2 1 edges dregular figure 4d displays cq 3 cq dimension generated folded cube 19 flq formed q adding 2 1 extra complementary edges fu ug vertex u u dbit binary string figure 4e displays flq 3 flq dimension hamming cube 16 hq dimension 2 vertices d22 1 2 edges hq minimum degree 1 maximum degree 2d 1 supergraph q figure 4f displays hq 3 hq dimension generated binary de bruijn graph 12 db directed graph 2 vertices arcs vertices labelled 2 binary dtuples arc vertex x 1 x vertex 1 x 2 x result vertices 000 111 selfloops undirected de bruijn graphs 1 udb formed directed de bruijn graphs ignoring orientations edges deleting two selfloops irrelevant determining crossing number udb 2 vertices 2 d1 2 edges maximum degree 4 figure 4g displays udb 3 planar ubd dimension generated wrapped butter graph 30 wbf dimension d2 vertices d2 d1 edges graph 4regular figure 5f displays wbf 3 wbf dimension shueexchange graph 30 sx 2 vertices 3 2 1 edges uv edge sx either u v dbit binary strings dier precisely last bit u left right cyclic shift v embedding purposes ignore two selfloop edges vertices 000 111 results graph 3 2 1 2 edges pendant vertices 0001 1110 may also ignored facilitate hamiltonian vertex ordering along node line figure 5d displays sx 3 sx dimension b c e figure 4 interconnection networks hypercube conected cycles ccc 3 c twisted cube tq 3 crossed cube cq 3 e folded cube hamming cube hq 3 g undirected de bruijn graph udb 3 622 networks torus dd graphical cross product cycles c c figure 5a displays 44 torii dd star graph 45 st vertices labelled permutations f1 2 3 dg two vertices adjacent corresponding permutations dier rst one position hence st 1d2 edges 1 regular figure 5b displays st 4 st pancake graph 45 pk vertices labelled permutations elements dg two vertices adjacent one obtained ipping rst elements 2 pk order size st also 1regular figure 5c displays pk 4 pk pyramid graph 30 pm levels vertices level k 0 k 4 vertices total 4 13 vertices interconnection structure pm 3 shown figure 5e pm c b figure 5 additional interconnection networks torus 44 b star graph wrapped butter 63 graph families also included testing complete graphs k n circulant graphs circulant graph 5 c n k n 12 regular hamiltonian graph n vertices vertices n adjacent vertex c n 2046 various values generated c 8 1 2 4 shown figure 5g vertices placed along node line hamiltonian order testing 7 experimental results algorithms implemented c language dec alphaserver 2100a 5300 workstation 300 mhz cpu speed 512 megabytes ram test graph size limited excessive time requirements bisection dynamic heuristics branchandbound algorithm largest test graph contained 1016 edges due memory needed program store subgraphs generated bisection dynamic impossible test graphs larger current implementation hardware two greedy heuristics heuristics mplan 1page neural elen hand accommodate much larger graphs results dierent classes graphs shown tables 25 figures 610 figure 11 shows plot heuristic performance 196 test graphs complete graphs table 2 neural elen found optimal solutions cases greedy heuristic worst performance graphs hypercubic networks indicated table 3 figure 8 bisect dynamic performed poorly remaining heuristics much better performance particular neural found optimal solution 15 39 test cases random graphs tested see figure 7 edge density approximately 05 instances minor variation due normal inconsistencies pseudorandom number generator dene edge density graph mjek n j nvertex medge graph figure 11 plotted number crossings versus edge density test graphs interesting observe number crossings found heuristics increases dramatically 80 vertices even though edge density constant likely xed vertex orderings along node line become factor heuristic performance number vertices increases due rather large scale gure plot undetectable sparse graphs density exceeds 05 dierences performance six heuristics excluding bisect dynamic still hard observe hence gain better perspective relative performance also compared heuristics according ranking scheme rank heuristic dened k 1 k 8 obtained k th best solution among eight heuristics given instance table 6 shows overall rankings test graphs heuristic neural either tied best average rank 15 17 classes also best composite average rank 135 eight heuristics test graphs extreme bisect exhibited poorest overall performance nish ing last tied last average rank graph classes performance probably improved clever method adding link edges subgraphs bisection process applies dynamic programming heuristic although performance signicantly better bisect also interesting examine degree optimality heuristics cases optimal solution known summarized table 7 optimal solutions obtained 95 196 test graphs neural found optimal solution 75 79 cases solution deviated optimal total 38 crossings remaining 20 cases average deviation 19 crossings maximum deviation 6 crossings neural occurred circulant graph c 24 1 3 5 classes complete graphs torii de bruijn hypercubic graphs except hypercubes neural found optimal conjectured optimal solution test cases known solutions random greedy heuristic nished second overall performance average deviation 19 crossings optimal solution 95 graphs standard greedy heuristic hand second last perfor mance hence advantage random edge selection apparent tables column headings abbreviated follows opt optimal solution branchandbound algorithm greedy greedy heuristic grran random greedy heuristic mplan maximal planar heuristic elen edge length heuristic 1page onepage heuristic dyn dynamic programming heuristic bisect bisection heuristic neural neural network heuristic within opt column cases optimal solution obtainable due problem size pair values lbub indicates best known theoretical lower upper bounds except noted bounds obtained theorems 37 note hypercube q 5 optimal solution obtained exact algorithm contained 60 crossings however drawing given 31 56 crossings hence particular hamiltonian cycle used results complete graphs number crossings found heuristic graph opt greedy grran mplan elen 1page dyn bisect neural k8 optimal value conjectured optimal value optimal vertex ordering necessary achieve minimum noted solutions obtained torii 55 77 20 48 resp higher known optimal values 15 35 respectively heuristics neural grran best solution obtained 10 trials per instance indicated practical limit neural allowed iterate 5000 times per instance nonconvergence assumed however maximum number iterations observed test graph 84 moreover graph size observable eect number iterations comparison running times heuristics sampling 48 graphs shown figure 12 times elen mplan 1page dwarfed dynamic programming heuristic thus barely discernible along xaxis plot running times bisection heuristic somewhat longer still much shorter dynamic programming heuristic figure 12 shows running times heuristics representative sampling test cases selected dierent classes graphs sharp spikes plots dynamic bisection heuristics may attributed instances large number vertices since dramatic eect depth recursion resulting cpu overhead heuristics cpu times remaining heuristics comparatively fast particular neural network heuristic required 84 iterations instance ran noticeably faster heuristics cases cpu times exact algorithm shown table 8 sampling 17 graphs table includes percentage total search space explored results hypercubic networks number crossings found heuristic graph n opt greedy grran mplan elen 1page dyn bisect neural 28 34 28 29 29 29 29 34 28 single value indicates optimal solution pair values indicates theoretical lower upper bounds 1 lower bound dd 12 d31 2 upper bound 1654 d2d 4 upper bound 34 d3 2 d2 10 number crossings number vertices greedy grran mplan elen 1page dyn bisect neural figure 6 heuristic results complete graphs general exact solutions feasible graphs approximately 50 signicant edges however quality initial upper bound also critical running time example able process cubeconnected cycles ccc 4 96 edges 3 cpu seconds due optimality heuristic solution initial upper bound 8 conclusion remarks presented several heuristics exact algorithm computing xed linear crossing number graph experimental analysis performance variety test graphs given main conclusion heuristic based neural network model computation highly eective method solving problem giving nearoptimal solutions cases consistently better solutions popular heuristics cases exact algorithm shown eective graphs 50 signicant edges general although handle much larger graphs number crossings number vertices greedy grran mplan elen 1page dyn bisect neural figure 7 heuristic results 100 random graphs initial upper bound fairly tight algorithms useful providing upper bounds book crossing number planar crossing number graph well nding crossing minimal 2page layouts parallel interconnection networks future work plan study worstcase performance heuristics investigate adaptation unxed linear crossing number problem since requires nding optimal vertex ordering node line problem complexity greater flcnp also recently algorithms brought attention author ie 4638 may included along present set algorithms future experiments number crossings number edges greedy grran mplan elen 1page dyn bisect neural figure 8 heuristic results hypercubic networks r competitor hypercube book thickness graph framework solving vlsi graph layout problems embedding graphs books survey circulants connectivities new variation hypercubes smaller diameter embedding graphs books layout problem applications vlsi design topological properties interconnection network graphs neural network algorithm graph layout problem upper bound crossing number complete graph drawn pages book algorithms drawing graphs annotated bibliography experimental comparison four graph drawing algorithms theoretical network model hamming cube networks heuristics reducing crossings 2layered networks crossed cube architecture parallel computation eggleton guy conjectured upper bound crossing number ncube crossing number graphs latest results crossing numbers toroidal crossing number complete graph toroidal graphs arbitrarily high crossing numbers kautz shu book thickness graph introduction parallel algorithms architectures arrays bounds crossing number ncube page number graphs crossing minimization linear embeddings graphs logical calculus ideas imminent nervous activity permutation procedure minimising number crossings network cubeconnected cycles versatile network parallel computation ieee trans using simulated annealing diogenes approach testable faulttolerant arrays processors topological properties hypercubes parallel stochastic optimization algorithm automatic graph drawing readability diagrams sorting using networks queues stacks computational aspects vlsi linear book embeddings graphs four pages necessary sucient planar graphs parallel distributed computing handbook tr four pages necessary sufficient planar graphs linear book embeddings graphs embedding graphs books layout problem applications vlsi design automatic graph drawing readability diagrams crossing minimization linear embeddings graphs bounds crossing number italicnitaliccube introduction parallel algorithms architectures new variation hypercubes smaller diameter graphs pub fmt italicepub fmt italic edges pagenumberinlineequation f fen lpparradrcdieircdradrp postparfen f inlineequation pub fmt italicopub fmt italic vlsi layouts star graph related networks algorithms drawing graphs parallel distributed computing handbook book crossing number graph embedding de bruijn kautz shuffleexchange networks books experimental comparison four graph drawing algorithms cnmgrafmyampersandmdashgraphic presentation services network management sorting using networks queues stacks cubeconnected cycles versatile network parallel computation properties performance folded hypercubes crossed cube architecture parallel computation theoretical network model hamming cube networks book embeddings crossing numbers