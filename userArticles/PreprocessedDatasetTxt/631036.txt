formal analysis faultdetecting ability testing methods several relationships software testing criteria induced relation corresponding multisets subdomains examined authors discuss whether relation r pair criteria csub 1 csub 2 rcsub 1 csub 2 guarantees csub 1 better detecting faults csub 2 according various probabilistic measures faultdetecting ability shown fact csub 1 subsumes csub 2 guarantee csub 1 better detecting faults relations strengthen subsumption relation bearing faultdetecting ability introduced b introduction last several years researchers defined wide variety software testing techniques studied properties built tools based recently increasing interest question techniques compare one another terms ability expose faults aspects problem addressed experiments 2 simulations 1 7 analysis 9 14 approaches offer certain insights results lack generality either inherent nature experimentation simulation assumptions underlying simulations analyses particular simulations analyses 1 7 14 investigated criteria partition input domain program disjoint subdomains paper analyze realistic situation criteria divide input domain overlapping subdomains authors address computer science dept polytechnic university 333 jay st brooklyn ny 11201 supported nsf grant ccr8810287 new york state science technology foundation center advanced technology program authors address courant institute mathematical sciences new york university 251 mercer street new york ny 10012 supported nsf grant ccr8920701 nasa grant nag11238 characterize various relationships criteria show circumstances conclude test suites chosen using one criterion likely expose faults test suites chosen using another also apply results compare wellknown control flow based data flow based techniques subsumption frequently used compare criteria criterion c 1 subsumes criterion c 2 every test suite satisfies c 1 also satisfies c 2 paper show according three probabilistic measures faultdetecting ability fact c 1 subsumes c 2 guarantee c 1 better detecting faults c 2 measures related two different test data selection strategies also explore question subsumes relation strengthened order obtain relation bearing faultdetecting ability define two natural relations covers partitions stronger subsumes show worst case neither provide much additional insight faultdetecting ability finally define two variations relations properly covers properly partitions prove c 1 properly covers properly partitions c 2 c 1 guaranteed better detecting faults c 2 assessed using certain reasonable probabilistic measures 11 preliminary definitions multiset collection objects duplicates may occur formally mapping set objects nonnegative integers shall delimit multisets curly braces use settheoretic operator symbols denote corresponding multiset operators throughout multiset 1 submultiset multiset 2 must least many copies element 1 2 1 therefore f0 case f0 1 1g f0 1 2g test suite multiset test cases possible input program many systematic approaches testing based idea dividing input domain program subsets called subdomains requiring test suite include elements subdomain techniques sometimes referred partition testing fact subdivide input domain overlapping subdomains thus form true partition input domain paper refer strategies subdomainbased testing subdomain strategies based programs structure subdomain consists elements cause particular code element executed example branch testing subdomain consists inputs cause execution particular branch path testing subdomain consists inputs cause execution particular path data flow testing using alluses criterion subdomain consists inputs execute path particular definition variable v particular use v without intervening redefinition v subdomainbased testing strategies include mutation testing subdomain consists inputs kill particular mutant specificationbased testing techniques subdomain consists inputs satisfy particular condition combination conditions mentioned specification exhaustive testing subdomain consists single point strategies programs specifications give rise overlapping duplicate subdomains test data adequacy criterion relation c test suitesthetaprogramsthetaspecifications practice used determine whether given test set thorough job testing program p specification ct holds say adequate testing p according c simply cadequate p testing criterion c subdomainbased program p specification nonempty multiset sdc p subdomains subsets input domain c requires selection one test cases subdomain c requires selection one test case given subdomain need distinct general sdc p multiset rather set criteria possible two different requirements correspond subdomain example set test cases might cause execution two different statements hence appear twice multiset subdomains arising statement testing criterion depending details criterion test selection strategy may necessary choose test cases subdomain note since sdc assumed nonempty least one test case must chosen subdomain empty test suite cadequate subdomain criterion subdomainbased criterion c said applicable ps exists test suite ct c universally applicable applicable p every programspecification pair p note since empty test suite cadequate c applicable p empty subdomain element sdc throughout paper testing criteria discussed universally applicable subdomainbased criteria unless otherwise specifically noted fact many criteria defined discussed software testing literature universally applicable pathbased structural criteria occurs infeasible paths program lead testing requirements never fulfilled represented empty subdomains belonging sdc p mutation testing occurs due mutants equivalent original program however universally applicable analogs criteria obtained removing empty subdomain sdc p actually usable practice important note relationship universally applicable analogs criteria may different original criteria example 3 defined universally applicable analogs data flow testing criteria defined 12 13 showed alldupaths criterion subsumes alluses criterion universally applicable analog alldupaths subsume universally applicable analog alluses order illustrate points realistic examples review definitions several wellknown criteria since criteria based program structure necessary point make certain assumptions programs test limit attention programs written pascal goto statements 1 also assume every program least one conditional repetitive statement least one variable occurs every boolean expression controlling conditional repetitive statement program also require programs satisfy feasible anomalies nfa property every feasible path start node use variable v must pass node definition v reasonable property require since programs satisfy nfa possibility referencing undefined variable although question whether given program satisfies nfa undecidable possible check stronger anomalies property na requires every path start node use variable v pass node definition v furthermore na enforced adding dummy definition variable start node alledges criterion also known branch testing requires every edge programs flow graph executed least one test case data flow testing criteria 8 10 11 13 require test data exercise paths points variables defined points values subsequently used occurrences variables program test classified either definitions values stored uses values fetched 13 variable uses classified either puses ie uses occurring boolean expression conditional statement cuses ie uses occurring assignment statements arguments procedure call alluses criterion 13 requires test data cover every definitionuse association dua program dua triple duv node programs flow graph variable v defined u node edge v used definitionclear path respect v u 2 test case covers dua duv causes definitionclear path respect v u executed similarly allpuses criterion 13 restricted version alluses requires test data cover every duv u edge puse variable v precise definitions criteria subset pascal question given 3 notice criteria universally applicable fact many programs allpuses alluses criteria applicable dua executable example program loop whose bounds nonequal constants unexecutable dua involving initialization counter variable edge exiting loop dua unexecutable executable path definition use traverses loop least redefines counter variable 3 sequel use terms alledges allpuses alluses refer universally applicable analogs criteria unless otherwise specifically noted assumption used proof theorem 5 2 definitionclear path respect v path none nodes except perhaps first last definition variable v program satisfies syntactic undefined puses property nsup every puse variable v path program entry puse along v defined rapps weyuker showed class programs satisfies nsup original universally applicable criteria allpuses subsumes alledges 3 showed stronger restriction class programs considered needed make subsumption hold universally applicable analogs criteria namely required feasible undefined puses property nfup requires every puse variable v executable path program entry puse along v defined since program satisfies nfa also satisfies nfup class programs considering alluses subsumes alledges detecting ability subdomain criteria section define three probabilistic measures faultdetecting ability testing criterion 1 7 14 probability test set generated satisfy subdomainbased testing strategy would expose fault compared probability randomly generated test set size would expose fault contrast interested comparing probability test sets generated satisfy different subdomainbased strategies detect least one fault focus two conceptually simple test selection strategies first requires tester independently randomly select test cases domain adequacy criterion satisfied second strategy assumes domain first divided subdomains requires independent random selection predetermined number n test cases subdomain assume throughout random selection done using uniform distribution strategies sel 1 sel 2 shown figure 1 analytical results faultdetecting ability subdomain criteria based assumption test suites selected using sel 1 sel 2 practice rare use either strategies rather something closer combination two typically tester begins selecting test cases sometimes test cases chosen tester believes particular significance sometimes chosen ad hoc fashion amount testing tester checks see features program still need exercised order satisfy criterion tries select test cases accordingly corresponds selecting test cases appropriate subdomains manner similar second strategy thus example one might select alledges adequate test suite generating initial test suite checking see edges yet covered selecting test cases specifically aimed covering edges remain unexercised note sel 1 used test case lies intersection two subdomains may count toward subdomain using sel 2 test suite repeat uniformly randomly selected element input domain add cadequate test suite subdomain 2 sdc p begin n begin uniformly randomly selected element add figure 1 two test suite selection strategies thus sel 1 may lead selection substantially smaller test suites sel 2 1 also note multiset sdc contains copies subdomain sel 2 n requires n test cases selected independently different times total theta n test cases make sel 2 sensitive details definitions testing criterion example number alledges subdomains given program p depend details construction ps flow graph whether extra exit node added graph one could avoid problems assuming duplicate elements sdc p removed test case selection however practice one usually works predicates describing subdomains rather explicit lists elements since undecidable whether two predicates equivalent always possible identify duplicate subdomains consequently assume duplicates eliminated obviously many reasonable measures faultdetecting ability could defined measures related probability test suite expose fault following notation used 14 given program p specification criterion c let number failurecausing inputs g weyuker jeng 14 noted faultdetecting ability criterion related extent failurecausing inputs concentrated subdomains first measure consider let max denote subdomain highest concentration failurecausing inputs ie subdomain maximal since considering subdomainbased criteria cadequate test set contains least one test case max using sel 1 sel 2 element max equally likely selected represent max therefore 1 gives crude lower bound probability cadequate test suite selected using sel 1 sel 2 expose least one fault second measure consider gives exact probability test set chosen using sel 2 1 expose least one fault duran ntafos 1 hamlet taylor 7 performed simulations investigating whether hypothetical partition testing strategies ie subdomainbased testing strategies subdomains pairwise disjoint likely expose faults random testing according measure weyuker jeng investigated similar questions analytically 14 paper investigate realistic case subdomainbased criteria subdomains may intersect compare subdomainbased criteria one another rather random testing one problem using 2 measure one subdomainbased criterion c 1 may divide domain k 1 subdomains another criterion c 2 divides subdomains sense 2 gives c 1 unfair advantage since test cases c 2 requires k 2 hence 2 comparing faultdetecting qualities different sized test suites order correct imbalance first define measure generalization 2 instead always selecting one test case per subdomain n test cases chosen per subdomain call measure course measure still deficiency cited different numbers test cases might needed satisfy c 1 c 2 reason 3 useful generalization 2 allows us adjust test suite size differences letting k 1 denote number subdomains c 1 c 2 respectively program p specification letting compensate inequality test set size comparing 3 actually special case measure called p p 1 7 14 papers strategy could select different number test cases subdomain whereas 3 requires number selected subdomain 3 relations criteria section define five relations criteria narrows covers partitions properly covers properly partitions relations compare relations one another subsumes relation illustrate relations examples examine knowing c 1 narrows covers partitions properly covers properly partitions c 2 program p specification tells us relative values measure faultdetecting ability specifically investigate whether relationship r every program p specification resulting theorems summarized table 1 many relations previously studied connection faultdetecting ability depend distribution failurecausing inputs include gourlays properly sometimes always sometimes covers properly always always sometimes partitions c 2 table 1 summary results power relation 6 better probbetter relations proposed weyuker weiss hamlet 15 contrast relations criteria introduced induced relation corresponding multisets subdomains thus relations question whether specification depends purely way criteria divide input domain subdomains factors way failurecausing inputs distributed input domain consequently results general prove c 1 least good c 2 according probabilistic measure prove holds programs specifications class guaranteed c 1 least good c 2 testing programs class regardless particular faults occur program 31 narrows relation every subdomain subdomain 0 2 sdc1 p 0 notion known refinement point set topology c 1 universally narrows c 2 every program specification pair ps c 1 narrows c 2 ps observation 1 program p specification narrows relation reflexive transitive sdc2 next theorem shows narrows relation closely related subsumes relation however question whether c 1 narrows c 2 deals relationships multisets subdomains induced two criteria question whether c 1 subsumes c 2 may involve additional considerations number test cases subdomain required criterion example consider criteria ps c 1 c 2 give rise set subdomains c 2 requires selection two test cases subdomain whereas c 1 requires selection one test case subdomain trivially c 1 universally narrows c 2 however c 1 subsume c 2 since test suite consisting one element subdomain c 1 adequate c 2 adequate next theorem shows long criteria require selection least one element subdomain opposed requiring selection least k elements k 1 subsumption equivalent universally narrows relation theorem 1 let c 1 c 2 subdomainbased criteria explicitly requires selection least one test case subdomain c 1 subsumes c 2 c 1 universally narrows c 2 proof assume c 1 universally narrows c 2 let test suite c 1 adequate program p specification contains least one element subdomain thus since subdomain sdc2 p superset subdomain belonging sdc1 contains least one element subdomain conversely assume c 1 universally narrow c 2 exists program p specification subdomain 2 sdc2 p superset subdomain sdc1 p thus 0 2 sdc1 test suite obtained selecting one element 0 gamma 0 2 sdc1 c 1 adequate c 2 adequate ps c 1 subsume c 2 2 next group theorems establish fact criterion c 1 narrows criterion guarantee c 1 better able detect faults c 2 according three measures theorem 2 exists program p specification criteria c 1 c 2 proof let p program whose input domain integers gamman n n 1 let c 1 criterion requires selection least one test case zero least one test case nonzero let c 2 criterion requires selection least one test case greater equal zero least one test case less equal zero suppose suppose p correct inputs except exists program p specification criteria c 1 c 2 proof proof theorem 2 let p incorrect inputs except 1 exists program p specification criteria c 1 c 2 proof let p c 1 c 2 theorem 3 since jsdc1 1corollary 1 measure exists criteria c 1 c 2 program p specification c 1 subsumes c 32 covers relation next relation examine covers relation strengthens narrows relation natural way covers relation interesting examine many criteria previously shown subsume alledges criterion actually also cover alledges every subdomain nonempty collection subdomains fd belonging sdc1 p 1 universally covers c 2 every program specification pair ps c 1 covers c 2 ps observation 2 program p specification covers relation reflexive transitive c 1 covers c 2 ps c 1 narrows c 2 ps sdc2 following example illustrates distinction narrows covers relations example 1 consider criteria proof theorem 2 since 1 3 1 4 c 1 narrows however since 3 6 1 3 6 2 3 6 1 cover c 2 2 next show allpuses alluses criteria universally cover alledges criterion theorem 5 allpuses criterion universally covers alledges criterion proof let p program let e executable edge p let e subdomain corresponding e set inputs execute paths cover edge e case 1 e puse variable v let definitions v feasible definitionclear path respect v ffi e subdomain ftjt covers dua vg since program satisfies nfa property every feasible path start node e passes least one case 2 e puse variable since p goto statements edges e puses variables st em see let innermost nested conditional repetitive statement e subgraph corresponding ifthen ifthenelse case statement edge going decision node toward e statement edge entering loop repeat statement backedge loop edge exiting loop e contained conditional repetitive statement e edges first decision node encountered path beginning start node case 1 e union allpuses subdomains thus union allpuses subdomains equals e 2 corollary 2 alluses criterion universally covers alledges criterion proof program p specification sd allgammapgammauses observation 2 alluses covers allpuses since covers transitive relation observation 2 alluses covers alledges 2 next group theorems shows fact c 1 covers c 2 guarantee c 1 better c 2 according measures theorem 6 exists program p specification criteria c 1 c 2 proof let p program whose input domain integers gamman n n 1 let let c 1 c 2 criteria whose subdomains g p let specification failurecausing inputs gamman n snote proof theorem 6 fact failurecausing inputs lie outside intersection 2 3 contributes fact 1 higher concentration failurecausing inputs 2 3 next show phenomenon occur real adequacy criteria exhibiting program specification example 2 consider program shown figure 2 3 assume inputs x lie range executable edges executable definition puse associations shown column 2 table 2 corresponding subdomains shown column 3 table 2 assume 3 max n notice max otherwise input x max gamma 2 path taken go either node 4 node 5 first traversal loop depending parity x alternate going node 4 going node 5 subsequent traversals loop consequently among inputs cause execution edge 63 except definitionuse associations 463y 563y manufacture specification program fail precisely inputs lie within subdomain corresponding edge 63 outside intersection subdomains corresponding 463y 563y ie 3 note fact program statement branches ifthenelse statement merely convenience makes easy achieve desired behavior certainly possible devise program without characteristic also desired behavior dua 12 whole input domain n 2 n l 235y eveny max oddy max eveny table 2 subdomains program shown figure 2 program pinputoutput const var begin 3 repeat oddyx 4 1 5 else 1 6 max end figure 2 program 1 max otherwise subdomains alledges criterion shown first eight rows table 2 allpuses criterion shown last ten rows thus note last inequality holds since max 3 assumptionwe next investigate relationship covering measure 2 theorem 7 exists program p specification criteria c 1 c 2 figure 3 program illustrating 2 alluses proof corollary 2 suffices exhibit program p specification whose flow graph shown figure 3 assume input domain fxj0 x 200g c constant specification set failurecausing inputs f0 197 198 199g subdomains arising alledges alluses criteria corresponding values shown table 3 notice criterion induces nine subdomains program case two subdomains contain failurecausing inputs since dua table 3 subdomains program shown figure 3 following corollary follows fact number alledges subdomains equal number alluses subdomains program figure 3 corollary 3 exists program p specification criteria c 1 c 2 33 partitions relation partitions c 2 ps every subdomain nonempty collection fd pairwise disjoint subdomains belonging sdc1 p universally partitions every programspecification pair ps c 1 partitions c 2 ps note term partition used strict mathematical sense observation 3 program p specification partitions relation reflexive transitive c 1 partitions c 2 ps c 1 covers c 2 ps next example illustrates distinction covers partitions relations example 3 consider program whose flow graph shown figure 2 executable edges executable definitionpuse associations corresponding subdomains shown table 2 recall allpuses criterion universally covers alledges criterion see allpuses partition alledges program consider edge 6 main g elements sd allgammapgammauses contained g dmd n since subdomains contain inputs max gamma 1 since n nonempty intersection neither equal g allpuses partition alledges program executable definitioncuse associations program shown table 4 note definitioncuse association except 12input definitionp use association subdomain consequently argument also shows program alluses partition alledges since set definitionuse associations alluses criterion simply union sets associations allpuses allcuses 2 next examine relationship partitioning fault exposing ability assessed measures id defcuse assoc equiv defpuse assoc x 47y 467y q 57y 567y r table 4 definitioncuse associations program shown figure 2 theorem 8 c 1 partitions c 2 program p specification 1 proof disjoint subdomains belonging sdc1 therefore 1 theorem 9 exists program p specification criteria c 1 c 2 proof consider program specification proof theorem 7 shown less 2 alledges alluses partitions edges program since element sd alledges belong sd alluses fxj0 x 200g equal union disjoint elements sd allgammauses corollary 4 exists program p specification criteria c 1 c 2 34 properly covers relation seen fact c 1 covers c 2 guarantee c 1 better detecting faults according 2 however additional constraint nature covering added situation improves g let sdc2 g c 1 properly covers c 2 ps multiset sdc1 p nkn note number occurrences subdomain 1 ij expression less equal number occurrences subdomain multiset sdc1 universally properly covers c 2 every program p specification c 1 properly covers c 2 ps observation 4 properly covers relation reflexive transitive c 1 properly covers c 2 ps c 1 covers c 2 ps sdc2 properly covers c 2 ps elements sdc2 p disjoint ie c 2 induces true partition input domain c 1 covers c 2 c 1 properly covers next example illustrates distinction covers properly covers relations example 4 consider program p integer input domain fxj0 x 3g criteria c 1 c 2 3g c 1 covers fact partitions c 2 however c 1 properly cover c 2 subdomain b needed coverings e occurs multiset sdc1 hand consider criterion c 3 g c 3 properly cover c 2 legitimate use b twice covering since occurs twice sdc3 note duplication subdomains frequently occurs real subdomain based criteria example table 2 also consider c 4 subdomains c 4 properly covers c 2 subdomain contained intersection c 2 subdomains danger one need used covering c 2 subdomains 2 example 5 next example also illustrates properly covers relation show program p figure 2 alluses properly covers alledges allpuses properly cover alledges consider subdomains arising edges definitionpuse associations shown table 2 definitioncuse associations shown table 4 recall allcuses note since multiset proper covering hand subdomains arising allpuses criterion used cover alledges subdomains necessary use subdomains often occur multiset sd allpuses consequently allpuses properly cover alledges p 2 next three theorems show c 1 properly covers c 2 c 1 guaranteed better according 2 necessarily according 1 3 theorem exists program p specification criteria c 1 c 2 c 1 properly covers c 2 p 1 proof consider program p specification figure 2 shown example 5 alluses properly covers alledges p since program 1 allpuses shows 1 alledges hand fact c 1 properly covers c 2 guarantee better according 2 theorem 11 c 1 properly covers c 2 program p specification 2 c fact given program p specification criteria c 1 c 2 c 1 covers c 2 p one always manufacture criterion c 0such c 0properly covers c 2 p simply adding duplicates certain c 1 subdomains sdc1 p following lemma proved appendix prove theorem 11 proof assume c 1 properly covers c 2 program p specification let sdc2 g let multiset sdc1 p nkn line 2 follows lemma 1 line 3 holds 1 ij occurs times product line 2 product line 3 consequently 2 c theorem 12 exists program p specification criteria c 1 c 2 proof 3g shown example 4 c 1 called properly covers fact properly partitions c 2 let p program integer input domain fxj0 x 3g correct respect specification every input except 35 properly partitions relation g let sdc2 g c 1 properly partitions c 2 ps multiset sdc1 nkn collection fd 1 g pairwise disjoint c 1 universally properly partitions c 2 every program p specification c 1 properly partitions c 2 ps observation 5 properly partitions relation reflexive transitive c 1 properly partitions c 2 ps c 1 partitions c 2 ps c 1 properly covers c 2 ps sdc2 properly partitions c 2 ps elements sdc2 p pairwise disjoint ie c 2 induces true partition input domain c 1 partitions c 2 c 1 properly partitions c 2 theorem 13 c 1 properly partitions c 2 program p specification 1 proof c 1 properly partitions c 2 ps c 1 partitions c 2 ps result follows theorem 8 2 theorem 14 c 1 properly partitions c 2 program p specification proof c 1 properly partitions c 2 ps c 1 properly covers c 2 ps result follows theorem 11 2 theorem 15 exists program p specification criteria c 1 c 2 proof proof theorem 12 c 1 properly partitions c 2 2 paper defined several relationships software testing criteria induced relation corresponding multisets subdomains also investigated whether relations r detecting faults c 2 according various measures three measures faultdetecting ability related probability test suite selected according particular strategy detect fault first relation examined narrows relation shown closely related commonly used means comparing criteria called subsumption showed fact criterion c 1 narrows criterion c 2 guarantee c 1 better detecting faults c 2 according measures next relation examined covers relation strengthens narrows relation natural way well known pairs criteria alluses alledges related one another according relation also showed fact criterion c 1 covers criterion guarantee c 1 better detecting faults c 2 according measures partitions relation strengthens covers relation fact c 1 partitions c 2 guarantee c 1 better according one guarantee c 1 better according measures last two relations criteria properly covers properly partitions relations designed overcome deficiencies covers partitions relations proved fact c 1 properly covers c 2 guarantee c 1 better c 2 according measure 2 fact c 1 properly partitions guarantees c 1 better c 2 according measures 1 2 since criteria interest universally narrows relation equivalent subsumes relation one could interpret results saying subsumption poor basis comparing criteria however important note results worst case results sense consider whether fact one criterion subsumes another guarantees improved faultdetecting ability question c 1 subsuming narrowing covering partitioning c 2 tells us relative ability detect faults typical programs remains open recently shown allpuses alluses criteria properly cover variant branch testing known decision coverage investigated relationships among several subdomainbased criteria including data flow testing criteria mutationtesting multiplecondition coverage 5 directions future analytical research include finding conditions programs guarantee c 1 properly covers c 2 various wellknown criteria c 1 c 2 finding conditions c 1 guaranteed better c 2 according 3 finding weaker conditions guarantee c 1 better c 2 according 2 results also suggest several pragmatic research problems including design new criteria guaranteed properly cover commonly used criteria alledges design test data selection tools approximate selection strategies upon results based acknowledgments results paper appeared proceedings acm sigsoft 91 conference software critical systems 4 r evaluation random testing experimental comparison effectiveness alluses alledges adequacy criteria applicable family data flow testing criteria assessing faultdetecting ability testing methods analytical comparison several testing strategies mathematical framework investigation testing partition testing inspire confidence data flow analysis approach program testing observations partition testing data flow oriented program testing strategy required element testing data flow analyisis techniques program test data selection selecting software test data using data flow information analyzing partition testing strategies comparison program testing strate gies tr selecting software test data using data flow information applicable family data flow testing criteria observations partition testing partition testing inspire confidence program testing analyzing partition testing strategies comparison program testing strategies experimental comparison effectiveness alluses alledges adequacy criteria assessing faultdetecting ability testing methods data flow analysis techniques test data selection ctr dick hamlet learn testing program acm sigsoft software engineering notes v23 n2 p5052 march 1998 antonia bertolino lorenzo strigini using testability measures dependability assessment proceedings 17th international conference software engineering p6170 april 2428 1995 seattle washington united states weyuker goradia singh automatically generating test data boolean specification ieee transactions software engineering v20 n5 p353363 may 1994 allen parrish stuart h zweben relationships among alluses alldupaths alledges testing criteria ieee transactions software engineering v21 n12 p10061009 december 1995 finding failures cluster analysis execution profiles proceedings 23rd international conference software engineering p339348 may 1219 2001 toronto ontario canada r k singh pravin chandra yogesh singh evaluation boolean expression testing techniques acm sigsoft software engineering notes v31 n5 september 2006 w eric wong yu qi kendra cooper source codebased software risk assessing proceedings 2005 acm symposium applied computing march 1317 2005 santa fe new mexico silvia regina vergilio jos carlos maldonado mario jino constraint based criteria approach test case selection structural testing journal electronic testing theory applications v17 n2 p175183 april 2001 sandro morasca stefano serracapizzano analytical comparison testing techniques acm sigsoft software engineering notes v29 n4 july 2004 tsong yueh chen yuen tak yu expected number failures detected subdomain testing random testing ieee transactions software engineering v22 n2 p109119 february 1996 w e howden yudong huang software trustability analysis acm transactions software engineering methodology tosem v4 n1 p3664 jan 1995 phyllis g frankl elaine j weyuker analytical comparison faultdetecting ability data flow testing techniques proceedings 15th international conference software engineering p415424 may 1721 1993 baltimore maryland united states r hierons comparing test sets criteria presence test hypotheses fault domains acm transactions software engineering methodology tosem v11 n4 p427448 october 2002 hong zhu formal analysis subsume relation software test adequacy criteria ieee transactions software engineering v22 n4 p248255 april 1996 dick hamlet foundations software testing dependability theory acm sigsoft software engineering notes v19 n5 p128139 dec 1994 andy podgurski wassim masri yolanda mccleese francis g wolff charles yang estimation software reliability stratified sampling acm transactions software engineering methodology tosem v8 n3 p263283 july 1999 walter j gutjahr partition testing vs random testing influence uncertainty ieee transactions software engineering v25 n5 p661674 september 1999 j weyuker experience data flow testing ieee transactions software engineering v19 n9 p912919 september 1993 elaine j weyuker using operational distributions judge testing progress proceedings acm symposium applied computing march 0912 2003 melbourne florida phyllis g frankl yuetang deng comparison delivered reliability branch data flow operational testing case study acm sigsoft software engineering notes v25 n5 p124134 sept 2000 christoph c michael jeffrey voas ability directed tests predict software quality annals software engineering 4 p3164 1997 chi keen low chen ralph rnnquist automated test case generation bdi agents autonomous agents multiagent systems v2 n4 p311332 november 1999 silvia regina vergilio jos carlos maldonado mario jino inali wisniewski soares constraint based structural testing criteria journal systems software v79 n6 p756771 june 2006 philip j boland harshinder singh bojan cukic comparing partition random testing via majorization schur functions ieee transactions software engineering v29 n1 p8894 january p g frankl e j weyuker provable improvements branch testing ieee transactions software engineering v19 n10 p962975 october 1993 richard demillo aditya p mathur w eric wong critical remarks hierarchy faultdetecting abilities test methods ieee transactions software engineering v21 n10 p858861 october 1995 w eric wong tatiana sugeta j jenny li jos c maldonado coverage testing software architectural design sdl computer networks international journal computer telecommunications networking v42 n3 p359374 21 june prem devanbu stuart g stubblebine cryptographic verification test coverage claims acm sigsoft software engineering notes v22 n6 p395413 nov 1997 mrcio eduardo delamaro jos carlos maldonado alberto pasquini aditya p mathur interface mutation test adequacy criterion empirical evaluation empirical software engineering v6 n2 p111142 june 2001 marcio e delamaro jos c maldonado aditya p mathur interface mutation approach integration testing ieee transactions software engineering v27 n3 p228247 march 2001 c c michael g mcgraw schatz generating software test data evolution ieee transactions software engineering v27 n12 p10851110 december 2001 p g frankl n weiss experimental comparison effectiveness branch testing data flow testing ieee transactions software engineering v19 n8 p774787 august 1993 premkumar thomas devanbu stuart g stubblebine cryptographic verification test coverage claims ieee transactions software engineering v26 n2 p178192 february 2000 michael ellims james bridges darrel c ince economics unit testing empirical software engineering v11 n1 p531 march 2006 hong zhu lingzi jin dan diaper ganghong bai software requirements validation via task analysis journal systems software v61 n2 p145169 march 2002 matthew b dwyer john hatcliff robby robby corina pasareanu willem visser formal software analysis emerging trends software model checking 2007 future software engineering p120136 may 2325 2007 hong zhu patrick v hall john h r may software unit test coverage adequacy acm computing surveys csur v29 n4 p366427 dec 1997