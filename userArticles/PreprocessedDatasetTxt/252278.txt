finding even cycles even faster describe efficient algorithms finding even cycles undirected graphs main results following every k geq 2 ov2 time algorithm decides whether undirected graph gve contains simple cycle length 2k finds one ii ov2 time algorithm finds shortest even cycle undirected graph gve b introduction throughout work term cycle refers simple closed walk term path refers simple nonclosed walk even odd cycle cycle whose length even odd even odd path path whose length even odd problem finding cycles given length finding shortest shortest even shortest odd cycle undirected directed graphs among basic natural algorithmic graph problems problems considered many researchers see 10 survey work consider almost exclusively undirected versions problems directed versions believed much harder problem given directed graph e contain directed cycle even length example known p known npcomplete see 9 though shed new light directed versions problems obtain surprisingly fast algorithms undirected versions monien 7 presented ove algorithm finding pairs vertices connected paths length fixed integer note k part input problem nphard simple consequence algorithm ove algorithm finding cycle length k one exists 1 omv log v algorithm obtained problem complexity boolean matrix multiplication algorithm efficient g dense algorithms work directed well undirected graphs work work supported part basic research foundation administrated israel academy sciences humanities preliminary version paper appeared proceedings 21st international colloquium automata languages programming jerusalem israel 1994 pages 532543 department computer science school mathematical sciences tel aviv university tel aviv 69978 israel email addresses authors fraphyzwickgmathtauacil show k even graph undirected bounds improved obtain ov 2 algorithm finding cycles given even length undirected graphs ov 2 algorithm finding quadrilaterals cycles length four part folklore cf 8 cases new obtain ov 2 algorithm utilize combinatorial theorem bondy simonovits 4 states roughly dense enough undirected graphs contain many even cycles also prove constructive version theorem ov 2 algorithm finding cycles given even length leads following strange state affairs deciding whether given undirected graph contains cycle length say 100 asymptotically faster deciding using known algorithm whether graph contains triangle cycle length 3 term asymptotically stressed ov 2 bound well moniens ove bound hides huge multiplicative factors depend exponentially k exponential dependence k probably unavoidable problem nphard k part input shortest cycle directed undirected graph e easily found ove time conducting bfs breadth first search vertex itai rodeh 5 show shortest cycle also found omv time undirected case omv log v time directed case also notice halting bfs conducted vertex ove algorithm first nontree edge found implies ov running time bfs almost shortest cycle cycle whose length exceeds length shortest cycle one undirected graph found ov 2 time monien 6 described sophisticated ov 2 ffv algorithm finding shortest even cycles selcs short undirected graphs n functional inverse ackermanns function algorithm uses fast unionfind data structure describe ov 2 algorithm finding selcs algorithm somewhat simpler use sophisticated data structure heart algorithm lies combinatorial lemma interest right lemma states c shortest even cycle graph exists vertex v c paths cycle vertices cycle almost shortest possible fact paths length one greater distance endpoints path path cycle v vertex u either shortest path exceeds length shortest path almost shortest possible also describe simple omv finding shortest odd cycle solc short undirected graph e simple ove algorithm finding solc directed undirected graph e monien 7 described ove algorithm undirected case paper organized follows section 2 present algorithm finding fixed length even cycles undirected graphs section 3 investigate combinatorial structure selcs section 4 describe algorithm finding selc prove correctness section 5 describe simple algorithms finding solcs directed undirected graphs end section 6 concluding remarks finding even cycles given length throughout section use c l denote cycle length l main result section following theorem theorem 21 every k 2 o2k decides whether undirected graph e contains c 2k finds one also obtain following result algorithmic version result bondy simonovits 4 theorem 22 let l 2 integer let e undirected graph jej 100l delta jv j 11l g contains c 2k every k 2 l l delta jv j 1l furthermore c 2k found ok particular cycle length exactly bl delta jv j 1l c found ov 21l time interesting comment relation two theorems undirected graph e k 2 find c 2k one exists o2k running time ov 2 every fixed k 2 running time exponential however k part input graph e dense enough ie contain c 2k c 2k found ok deltav 2 note polynomial v k dense enough graphs therefore find extremely long cycles efficiently graph containing example find ov 25 time cycle length thetav 12 compared fact problem deciding whether undirected graph e contains cycle even cycle first ingredient used proofs theorems 21 22 combinatorial lemma bondy simonovits 4 see also 3 proof lemma nonconstructive slightly altering arguments obtain constructive version lemma required proof theorem 22 stating lemma need following definition definition 23 coloring vertices undirected graph e said tperiodic endpoints every path length colored color note coloring definition required proper ie adjacent vertices may colored color state lemma bondy simonovits 4 present algorithmic proof lemma 24 let positive integer let e connected undirected graph coloring vertices g uses least three distinct colors tperiodic furthermore g nonbipartite coloring vertices g uses least two distinct colors tperiodic bipartite nonbipartite cases two vertices distinct colors path length connecting found oe time proof begin showing g contains two adjacent vertices joined two vertexdisjoint paths length least subgraph called thetagraph found oe time easy see g contains subgraph g 0 whose minimal degree least 2t subgraph easily found oe time sequentially removing g vertices whose degrees less 2t let maximal path g 0 ie path cannot extended path greedily constructed oe time vertex v 1 adjacent least 2t vertices 2t path path along edges v 1 desired thetagraph thetagraph found contains three distinct cycles respectively 2 every vertex v thetagraph four distinct paths length thetagraph start v easily check ov time whether v endpoints paths colored color v case done since found two vertices colored distinct colors path length connecting assume therefore thetagraph tperiodic easy see one cycles l 3 periodic cycles therefore thetagraph must also periodic let smallest integer thetagraph periodic follows also smallest period cycles consequence jl l 1 get number colors used color thetagraph 2 every vertex g connected simple path whose length multiple vertex say colored color appearing l 1 simple path whose endpoints colored distinct colors easily found ov time finally note 2periodic coloring graph e uses two colors necessarily proper coloring graph e 2periodic coloring uses two colors must therefore bipartite 2 second ingredient used proof theorem 21 following result monien 7 lemma 25 ok delta e time algorithm given directed undirected graph e integer k 2 vertex 2 v finds vertices connected paths length k exhibits one path v following immediate consequences lemma 25 corollary 26 let e directed undirected graph let k 3 integer ok gamma 1deltae time algorithm given vertex 2 v decides whether c k passes finds c k one exists proof find vertices connected paths length check whether one also connected edge 2 corollary 27 let e directed undirected graph let k 1 integer ok e time algorithm given two disjoint subsets b vertices determines whether path length k connecting vertex vertex b finds path one exists proof assume graph directed replace undirected edge two antiparallel directed edges add new vertex connect vertices find vertices directed paths length alon yuster zwick 1 recently described 2 ok performing task lemma 25 2 ok deltae expected time algorithms tasks corollaries 26 27 dependency k complexity bounds improved therefore k 2 ok randomization extra log v factor allowed ready prove theorem 21 prove fact following slightly stronger result theorem 28 let k 1 fixed integer o2k given undirected graph e vertex 2 v either verifies contained c 2k finds c 2k g necessarily passing proof algorithm starts bfs vertex distance v g let l ig set vertices level bfs tree stage algorithm scans adjacency lists vertices l scan algorithm keeps count number edges found far inside l edge inside l endpoints l similarly keeps count number edges found far l l i1 use i1 denote set vertices l i1 already discovered search search halted one following conditions hold 1 stage k gamma 1 completed bfs ended 2 least 4k delta jl j edges found inside l 3 least 4k delta jl since l disjoint total number edges scanned search halted 12k delta jv j hence search takes ok bfs vertex v 2 l discovered let v vertex l igamma1 discovered way shortest path tree rooted consisting discovered vertices maintained algorithm continues one three possible ways according condition caused bfs halt case 1 bfs halted stage case first k1 levels l discovered subgraph g 0 induced containing edges inside l k contains 12k delta jv j edges c 2k c 2k completely contained g 0 corollary 26 check whether cycle exists o2k case 2 bfs halted 4k delta jl j edges found inside l k stage search left incomplete first already completely discovered consider subgraph g induced l subgraph contains least one connected component whose vertex set u l whose number edges least 4k delta ju j denote subgraph composed connected component h subgraph easily found ok delta time note ju j 1 assume first h nonbipartite easily verified okdeltav time since h contains okdeltav edges let c lowest common ancestor bfs tree vertices u vertex c easily found okdeltau following fcg ju j 1 c must least two children u h1 let one let x 1 ae u descendents u let color vertices x 1 red vertices x 2 blue lemma 24 subgraph h cannot nonbipartite connected colored two distinct colors must therefore path length red vertex blue vertex explained proof lemma 24 find path p okdeltau time path also found using corollary 27 running time would o2kdeltav path p extended cycle length 2k adding disjoint paths bfs tree c two endpoints p length note cycle contains similar actions taken h bipartite let b vertex classes h ie disjoint u edges h b assume without loss generality jaj 1 let c lowest common ancestor bfs tree vertices vertex c found using way described assume c level h must least two children level h 1 let one let x 1 ae descendents let color vertices x 1 red vertices x 2 blue vertices b green lemma 24 subgraph h cannot connected colored three distinct colors must therefore path p length two differently colored vertices path must red vertex blue vertex path even length starts green vertex also ends green vertex path found ok extended cycle length 2k case 3 bfs halted 4k delta jl find connected subgraph h subgraph g induced l l 0 vertex set u least 4kdeltaju j edges subgraph easily found ok deltav time note h bipartite vertex classes algorithm proceed previous case one three cases running time o2k delta v fact running time algorithm second third cases ok delta v case c 2k found algorithm c 2k passes completes proof theorem 2 theorem 21 follows immediately theorem apply algorithm described vertex turn proof theorem 22 proof bondy simonovits actually shows jej 100l delta jv j 11l k 2 l l delta jv j 1l exists vertex 2 v algorithm theorem 28 stops completing stage k gamma 1 immediately leads desired ok deltav 2 theorem 28 another interesting consequence theorem 29 c 2k undirected graph e jej 101k delta jv j 11k found expected time proof graph jv j vertices least 100k delta jv j 11k edges contains c 2k follows immediately number edges graph e contained c 2k 100k delta jv j 11k e contains least 101k delta jv j 11k edges randomly chosen edge probability least 1101 belonging c 2k randomized algorithm simply chooses random edge applies algorithm theorem 28 one endpoints expected number applications desired c 2k found o1 expected running time o2k 3 structure shortest even length cycles let g undirected graph let c selc shortest even length cycle suppose vertices cycle consecutively labeled denote dx distance two vertices x g clearly dv c selc easily found using bfs v 0 however paths c v 0 v v 0 v 2kgammai necessarily shortest paths g example consider k 4 complete graph four vertices even cycles k 4 length 4 distance two vertices 1 may therefore dv k immediately clear find c selc case main result section following lemma states every selc c vertex v 0 paths c vertices c almost shortest paths almost shortest path path whose length exceeds length corresponding shortest path one specifically lemma 31 let c selc g vertices c consecutively labeled lemma cornerstone ov 2 algorithm finding selcs presented next section think also lemma interest right presenting proof lemma 31 present following simple useful lemma lemma 32 p 1 p 2 two distinct necessarily disjoint shortest paths g x c contains even cycle whose length 2dx two distinct shortest paths minimal index minimal index j two shortest paths connecting j whose inner vertices disjoint thus obtain cycle length proof lemma 31 let h minimal subgraph g respect containment containing c dh x denotes distance x h let eh edge set h done otherwise let path p whose two endpoints b c none inner vertices c satisfies length p called b shortcut first claim p collection vertex disjoint shortcuts c b x figure 1 one cycles c c e f j figure 2 shortcuts p see let p 0 connected component p minimality h implies edge p 0 contained shortcut component p 0 must therefore contain b shortcut p 1 b 2 c p 0 composed solely shortcut done otherwise let x vertex incident edge e p 0 p 1 x may b edge e contained shortcut p 2 shortcuts p 1 p 2 meet x met vertex shorter even cycle would existed lemma 32 graph let p 3 portion p 2 connects x vertex c c consider cycles c shown left fig 1 cycles size less 2k c 1 follows fact show jc 2 j 2k follows let c 4 cycle comprised p 1 part c b containing c since jp jc 4 p 3 shortest path c x get jc 2k fact jc 3 2k follows similar arguments sum lengths cycles 2k even thus one must even contradicting minimality c contradiction shows p 0 must simply shortcut shown set disjoint shortcuts shortcut contains two vertices c claim every two distinct shortcuts p p j must cross one another ie two paths c endpoints p contains endpoint p j see left fig 2 assume contradiction shortcuts p p j cross one another shown right fig 1 length cycles c less 2k sum lengths 2k one must even contradicting minimality c shown mutual position p p j must shown middle fig 2 let b c denote four segments c determined endpoints shortcuts minimality c implies jp odd since lengths cycles smaller 2k turn implies jp even two expressions lengths twisted cycles b consequence lengths least 2k particular third claim two vertices x cycle c exists shortest path uses one shortcut consider shortest path x contains least two shortcuts let p p j two consecutive shortcuts appearing path let c portion path connects shown middle fig 2 1 get jp jdj therefore replace portion path path b c without increasing length continuing way obtain shortest path uses one shortcut view lemma 32 shortest path uses one shortcut must connect two antipodal vertices ie two vertices whose distance k cycle convenient point fix consecutive numbering 0 vertices cycle c identify vertices c numbers let b two endpoints shortcut p every shortcut p attach following interval endpoints interval integral b gamma jp j different parities otherwise c would selc jp subset vertices c claim v 2 c every vertex u c shortest path v u uses shortcut p shortcut path v u along cycle c almost shortest path v u recall almost shortest path v u path whose length dv u 1 see suppose v 2 c shortest path v u uses p shortcut shortest path must either go along portion e cycle c v use p go along c go along portion f cycle c v b use p go along c cases shown right figure 2 definition c implies however path e p therefore replaced path f path f p replaced path e increasing length one required final task show intersection intervals empty v paths along c v 0 vertices cycle almost shortest paths required c intervals enough show two intersect let c c j two intervals j fact p p j cross one another implies show c c j intersect show first inequality equivalent jp length twisted cycle shown middle fig 2 length cycle least 2k 1 proving first inequality second inequality follows immediately fact shown therefore intervals c c j therefore intervals intersect vertex play role v 0 statement lemma completes proof lemma 2 selc c edge disjoint selcs sharp inequality holds 1 used show intervals c 0 every vertex v 0 intersection property shortest paths along cycle c v 0 vertices fact shortest paths intersection may however empty c edge disjoint selcs ordering c satisfies conditions lemma 31 view lemma 32 impossible dv yields two shortest paths lengths may assume therefore without loss generality dv call v 0 root c dv cycle type one wrt v 0 dv call c cycle type two wrt v 0 every cycle type two wrt v 0 unique dv index c wrt root v 0 finally note v 0 v 2kgamma1 ordering c satisfies conditions lemma 31 also ordering ie v k play role v 0 4 ov 2 algorithm finding shortest even cycle relying lemma 31 obtain ov 2 algorithm finding selc undirected graph e algorithm starts bfs every vertex stops soon even cycle detected ensures time spent bfs ov show shortest even cycle found way algorithm indeed selc graph bfs performed augmented version standard bfs capable detecting even cycles let vertex augmented bfs performed called root bfs record every vertex v set four variables first two variables standard two used detect even cycles four variables distance v ie level v bfs tree yet discovered v parent v bfs tree v yet discovered v match v v 6 0 v vertex level v v v 2 e vertex v said matched v 6 0 v matched v also matched v set edges fv v j v 6 0g therefore matching aev highest proper ancestor v bfs tree matched v matched proper ancestors describe process vertex v popped bfs queue start scanning vs neighbors assume aev dv v correctly set v may may matched point depending whether adjacent vertex level processed action taken edge v u depends value du v u following way 1 nothing edge processed opposite direction 2 enqueue u bfs queue 3 bfs even cycle found let c lowest common ancestor bfs tree v u c v c u tree paths edge v u form even cycle length 2dv cycle shown fig 3 4 also means nothing edge processed opposite direction 5 u zero halt bfs even cycle found assume example c lowest common ancestor bfs tree x u c x c u tree paths edges x v v u form even cycle length 2dv cycle shown fig 3 6 test whether aeu equal let v u u v equal halt bfs even cycle found follows assume example c lowest common ancestor bfs tree u c tree path followed edge x followed path followed edge v u followed u c tree path closes even cycle length 2dv cycle shown fig 3 note cycle ie simple since x ancestor u finish scanning neighbors v rescan set aeu every u become child v put aeu aev unless case put aeu v completes description algorithm theorem 41 augmented bfs scans 3jv j2 edges therefore runs ov time furthermore c selc length 2k v 0 root augmented bfs starts v 0 finds even cycle length 2k proof bfs halts either completed even cycle found edges scanned bfs tree edges edges matched vertices c c c x figure 3 even cycles detected rules 35 6 wm figure 4 aev k edges form matching possibly edge closes even cycle jv tree edges jv edges matching root bfs never matched total number edges scanned therefore 3jv j2 complexity claim obvious scanning edge entails constant number operations prove second part theorem consider augmented bfs starts root v 0 selc c note according six rules bfs halts scanning neighbors vertex v even cycle found length 2dv 1 suppose c selc type one wrt v 0 type one type two selcs defined end previous section v level bfs suppose v k1 processed v kgamma1 even cycle found edge v length must 2k cannot shorter course otherwise even cycle length 2k found using rule 3 edge v suppose c selc type two index level bfs even cycle length 2k found processing vertex v k cycle found using rule 5 v k processed adjacent two vertices level finally suppose c selc type two level bfs v k1 level k gamma 2 claim aev therefore even cycle found using rule 6 edge v cycle found first note v 2kgammaj level j edge halt level j second note v shortest paths g refer fig 4 shortest paths connect vertices whose distance less k must unique shortest paths vertices cf lemma 32 paths must therefore tree paths ie must contained bfs tree follows ancestor v k level j therefore aev k 6 0 aev done otherwise proper ancestors v unmatched assume contradiction aev k matched ancestor ancestor v 2kgammaj gamma1 let match v let v 2kgammar lowest common ancestor bfs tree wm v 2kgammaj v 2kgammar may v 0 obtain following even cycle cycle c 1 fig 4 g v denote tree paths vertices edges matching vertices tree paths v may coincide initially causes problems cycle c 1 indeed cycle ie simple composed tree paths cannot interset one another length c 1 contradicting minimality c 2 corollary theorem 41 get graph containing 3v gamma 12 edges contains even cycle simple example shows bound best possible take connected graph whose biconnected components triangles furthermore checking whether graph contains even cycle exhibiting one done ov time perform one augmented bfs arbitrary vertex finally point result section implied results section 2 cannot afford checking whether graph contains c 2k length smallest even cycle may large 5 finding shortest odd cycle undirected directed graphs shortest odd length cycles solcs found polynomial time directed undirected graphs objective section describe simple yet efficient algorithms problems monien 6 obtained simple ove time algorithm finding solcs undirected graphs using fast boolean matrix multiplication algorithms obtain omv task algorithm efficient moniens algorithm dense graphs theorem 51 omv finds shortest odd cycle undirected graph e proof let adjacency matrix g assume g nonbipartite otherwise contains odd cycles recall k closed walk length k multiplications used obtain k assumed boolean since closed walk odd length contains odd cycle length solcs g minimal odd k exists k g undirected 1 therefore look minimal k using following approach start computing 3 binary search along odd numbers 2 used find k number boolean matrix multiplication required clearly olog v specific solc length k found without increasing complexity algorithm 2 turn attention finding shortest odd cycles directed graphs unlike undirected case subpaths solcs necessarily shortest paths therefore simple bfs every vertex suffice let edu v length shortest even length directed walk u v similarly let odu v length shortest odd length directed walk u v odd length walk exists set odu 1 note existence walk length edu v odu v imply existence simple walk length edu v odu v lemma 52 directed graph g edv proof closed walk odd length contains odd cycle odd length closed walk containing v 0 whose length edv 2i minimality c implies edv however path length 2i v 0 v 2i therefore edv 2i second equality statement lemma follows using similar arguments 2 given vertex easily compute eds v ods v every v 2 v follows construct graph g graph g 0 directed bipartite graph contains even representative v e odd representative v every vertex easily seen edu denotes distance u 0 v 0 g 0 performing bfs g 0 e therefore find eds v ods v every assume graph contains isolated vertices every 2 v find oe time shortest odd length closed walk contains simply compute eg ocs 6 1 closed walk length ocs minimal possible odd length easily found tracing shortest odd path vertex minimum achieved shortest odd length closed walk found way must solc thus obtain following theorem 53 shortest odd length cycle directed graph one exists found ove time 6 concluding remarks shown interesting combinatorial properties even cycles undirected graphs lead efficient algorithms finding even cycles given length finding shortest even cycles note input graph given using adjacency matrix ov 2 algorithms optimal seems plausible conjecture ov 2 best possible bound terms v problems even adjacency lists graphs given input note ov 2 time currently best known time even finding quadrilaterals c 4 based results paper alon yuster zwick 2 recently obtained finding c 4 undirected graphs generally c 4k found algorithms better ov 2 presented relatively sparse graphs interesting note hardest cases c 4 problem example graphs thetav 32 edges authors would like thank noga alon many helpful discussions r colorcoding journal acm finding counting given length cycles extremal graph theory cycles even length graphs finding minimum circuit graph complexity determining shortest cycle even length find long paths efficiently finding cycles given length even cycles directed graphs graph algorithms tr ctr friedrich eisenbrand fabrizio grandoni detecting directed 4cycles still faster information processing letters v87 n1 p1315 july harold n gabow shuxin nie finding long directed cycle proceedings fifteenth annual acmsiam symposium discrete algorithms january 1114 2004 new orleans louisiana