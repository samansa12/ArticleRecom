efficient queries web views abstractlarge web sites becoming repositories structured information benefit viewed queried relational databases however querying views efficiently requires new techniques data usually resides remote site organized set related html documents network access primary cost factor query evaluation cost reduced exploiting redundancy often found site design use simple data model subset araneus data model describe structure web site augment model link inclusion constraints capture redundancies site map relational views site navigational algebra show use constraints rewrite algebraic expressions reducing number network accesses show similar techniques used maintain materialized views sets html pages b introduction web becomes preferred medium disseminating information kinds sets pages many web sites come exhibit regular complex structure unlike structures described schemes database systems example atzeni et al 4 show describe structure wellknown database logic programming bibliography university trier 9 using data model araneus data model sites become large manual navigation hypertext structures becomes clearly inadequate retrieve information effectively typ ically adhoc search interfaces provided usually built around fulltext indexing pages site however fulltext queries good retrieving documents relevant set terms answering precise questions eg find authors papers last three vldb conferences impose site database abstraction say relational schema use powerful database query languages sql pose queries leave system translate declarative queries navigation underlying hypertext paper explore issues involved translation general declarative query admit different translations corresponding different navigation paths get data example query could answered 1 starting home page follow link list conferences vldb page last three vldb conferences extract list authors intersect three lists 2 go directly home page list database confer ences smaller page one lists conferences 3 go directly home page vldb page link 4 go list authors author list publications keep papers last three vldbs use number pages accessed rough measure query execution cost see large differences among possible access paths particular last one three 16000 authors represented bibliography last access path would retrieve several orders magnitude pages others given large performance differentials query optimizer needed translate declarative query efficient navigation plan relational optimizer maps sql query efficient access plan fact even closer similarity problem mapping declarative queries network objectoriented data models discuss section 2 summarize approach build relational abstractions large fairly wellstructured web sites use optimizer translate declarative queries relational abstractions efficient navigation plans use simple subset araneus data model adm describe web sites augmenting link constraints capture redundancy present many web sites example want know editors vldb 96 find information page lists vldb conferences need follow link page specific page vldb 96 information repeated also use inclusion constraints state pages accessed using certain path also accessed using another path use navigational algebra target language describes navigation plans show use rewrite rules spirit relational optimizers taking link inclusion constraints account reduce number page accesses needed answer query query relational views issued repeatedly rewritten using rules process generates number navigation plans compute query cost plans estimated based simple cost model takes network accesses primary cost parameter way efficient execution plan selected processing query query optimization hardly new topic however optimization web fundamentally different optimizing relational oo databases fact web exhibits two peculiarities cost model lack control web sites cost model since data reside remote site cost model based number network accesses instead io cpu cost allocate cost local processing joins ii lack control site unlike ordinary databases sites autonomous beyond control query system first possible influence organization data site second site manager inserts deletes modifies pages without notifying remote users updates points fundamental implications query processing main one cannot rely auxiliary access structures besides ones already built right html pages access structures like indices class extents heavily used optimizing queries relational objectoriented databases 14 techniques proposed query optimization rely availability suitable access structures one might think extending techniques speed evaluation queries example storing urls local data structures using query evaluation however solution general unfeasible data structures constructed maintained since system notified updates pages way maintaining structures actually navigate site query time checking updates general cost comparable cost computing query therefore start analysis assumption access structures pages ones built right hypertext due space limitations concentrate issue mapping queries virtual relational views navigation underlying hypertext develop algorithm selecting efficient execution plans based suitable cost function 10 study problem querying materialized views show techniques developed virtual views extended management materialized views outline paper outline paper follows discuss related work section 2 sections 3 4 present data model navigational algebra problem querying virtual views introduced section 5 rewrite rules optimization algorithm presented section 6 section 7 discusses several interesting examples due space limitations presentation mainly informal details found 10 related work query optimization approach query optimization based algebraic rewriting rules inspired relational objectoriented query optimization e g 18 5 surprising since noted context objectoriented databases relational query optimization well extended complex structures 14 7 however differences problem treat conventional query optimization listed introduction lead rather different solutions optimizing path expressions evaluating queries web points contact problem optimizing pathexpressions 22 objectoriented databases see example 6 14 since pathexpressions represent powerful means express navigation object databases large body research query processing devoted optimization research focus transforming pointer chasing operations considered rather expensive joins pointer sets stored auxiliary access structures class extents 7 access support relations 8 join indices 19 20 although may seem similar approach may extended web show involved nature access paths web sites absence adhoc auxiliary structures introduces number subtleties compare two main approaches query optimization first one might call pointer join approach inspired objectoriented query op timization aims reducing link traversal manipulating joining pointer sets ii second call pointer chase approach links data used restrict network access relevant items interesting result cost model sometimes navigation less expensive joins different objectoriented databases choice two generally favor former 6 relational views network databases idea managing relational views hypertextual sources similar proposals eg 21 13 16 accessing network databases relational views links pages may recall set types correlate records network model however works focus developing tools methods automatically deriving relational view network database query optimization specifically one critical aspects accessing data web ie selecting one among multiple paths reach data addressed indices relational databases already noted previous section approach extends web number query optimization techniques developed context relational databases another related issue problem selecting one among several indices available relation relational database see example 15 12 points common problem selecting one among different access paths pages web site however paths web usually complex simple indices cost model radically different ones adopted relational databases path constraints presence path constraints web sites core approach developed 1 authors recognize important structural information portions web expressed constraints consider processing queries scenario discuss take advantage constraints fundamental difference approach work intensional description web data based databaselike data model authors 1 reason directly extension data 3 data model data model essentially subset adm 4 araneus data model notion pagescheme used describe possibly nested structure set homogeneous web pages since interested query optimization paper enrich model constraints allow reasoning redundancies site eg multiple paths reach data perspective scheme gives description portion web terms pageschemes constraints important note description web portion usually posteriori pageschemes constraints obtained forward engineering phase rather reverse engineering phase aims describing structure existing site analysis conducted human designer help number tools semiautomatically analyze web order find regular patterns 31 pageschemes web page viewed object set attributes structurally similar pages grouped together sets described pageschemes attributes may simple complex type simple type attributes monovalued correspond essentially text images links pages complex type multivalued attributes used model collections objects inside pages correspond lists tuples possibly nested set pages described given pagescheme instance page scheme convenient think pagescheme nested relation scheme page nested tuple certain pagescheme set similar pages instance pagescheme one aspect framework counterpart traditional data models pages special role act entrypoints hypertext typically least home page site falls category adm entry points modeled pageschemes whose instance contains one tuple formalize ideas need two interrelated definitions types pageschemes follows given set base types containing types text image set attribute names simply attributes set pagescheme names set web types defined follows type either monovalued multivalued base type monovalued web type link p monovalued web type pagescheme name list multivalued web type 1 attributes web types pagescheme form p url page scheme name attribute web type url universal resource locator p forms key p entrypoint pair p url p pagescheme url url page p tuple instance p suggested instance pagescheme pagerelation ie set nested tuples one corresponding pages url value appropriate type pagescheme attribute entry points pagerelations containing single nested tuple note assume availability pagescheme extents pages whose url known system instances entry points pagerelation accessed navigating site starting entry point also worth noting order see pages ie html files instances pageschemes ie nested tuples assume suitable wrappers 3 2 applied pages order access attribute values experimented approach several reallife web sites ever paper choose refer fictional site hypothetical university web site constructed way allow us discuss single familiar example relevant aspects work figure 1 shows examples pageschemes site 32 constraints hypertextual nature web usually associated high degree redundancy redundancy appears two ways first many pieces information replicated several pages consider department example site name department say computer science found computer science department page also many pages instance presumably used anchor every page link towards department page occurs second pages usually reached following different navigational paths site capture redundancies toses toprof proflist dname todept deptlist cname tocourse courselist cname description type instructor toprof rank email dname pname cname tocourse courselist todept address dname pname toprof professors departments pname homepage sessionlistpage sessionsindexhtml proflistpage profindexhtml deptlistpage deptindexhtml sessionpage profpage deptpage coursepage name httpurl name listname legenda pagescheme unique pagescheme text attribute link attribute list attribute sessionpagesession coursepagesession coursepagecname profpagecourselistcname profpagecourselistcname coursepagecname deptpageproflistpname profpagepname deptpagedname profpagedname profpagedname deptpagedname profpagepname deptpageproflistpname deptlistpagedeptlistdname deptpagedname deptpageproflisttoprof proflistpageproflisttoprof coursepagetoprof proflistpageproflisttoprof profpagetodept deptlistpagedeptlisttodept profpagecourselisttocourse sessionpagecourselisttocourse inclusion constraints fig 1 webscheme university web site exploited query optimization enrich model two kinds integrity constraints link constraints inclusion constraints link constraint predicate associated link used document fact value attribute source pagerelation equals value another attribute related tuple target pagerelation exam ple respect figure 1 case attribute dname pageschemes deptpage profpage attribute session sessionpage coursepage model documented following link constraints formalize given two pageschemes p 1 p 2 connected link top 2 link constraint p 1 p 2 expression form monovalued attribute p 1 b monovalued attribute p 2 given instance two pageschemes say link holds pair tuples attribute url 2 attribute 1 equals attribute b 2 besides link constraints also extend model notion inclusion constraint order reason containment among different navigation paths consider figure 1 seen pagescheme profpage reached either proflistpage deptpage coursepage since pagescheme proflistpage corresponds list professors easy see following inclusion constraints hold coursepagetoprof proflistpageproflisttoprof note inverse containments hold general example following path goes course pages professors teach least one course reached may professors teach courses formalize given pagescheme p two link attributes inclusion constraint expression form p 1 given instances p 1 p 2 pagescheme say constraint holds tuple tuple value l 1 1 equals value l 2 2 two constraints form p 1 may written compact form figure 1 also shows link inclusion constraints department example navigational algebra section introduce navigational algebra nalg algebra nested relations extended navigational primitives nalg abstraction practical language ulixes 4 also similar expressive power subset weboql 2 allows expression queries adm scheme besides traditional selection projection join operators nalg two simple operators introduced order describe navigation first opera tor called unnest page traditional unnest 17 operator allows access data different levels nesting inside page instead traditional prefix notation r paper prefer use different symbol pi infix notation rpia second called follow link denoted symbol gamma used follow links sense may say pi used navigate inside pages ie inside hierarchical structure page whereas gamma navigate outside ie pages note selectionprojectionjoin algebra sublanguage navigational algebra way able manipulate relational navigational queries appropriate web framework give example consider figure 1 suppose interested name email professors computer science department reach data interest first need navigate site follows proflistpage pi proflist toprof gamma profpage semantics expression follows entry point proflistpage accessed url corresponding nested relation unnested respect attribute proflist order able access attribute toprof finally links followed reach corresponding profpage operator toprof gamma essentially expands source relation joining target one join particular one since physically corresponds following links implicitly imposes equality link attribute source relation url attribute target one assume attributes suitably renamed whenever needed since result expression nested relation containing tuple tuple page scheme profpage query name email professors computer science department expressed follows pnameegammamail oe dname 0 cs 0 proflistpagepiproflist toprof gamma profpage 1 formalize navigational algebra algebra adm model operators navigational algebra work pagerelations return pagerelations follows selection oe projection join 1 usual semantics unnest page pi binary operator takes input nested relation r nested attribute r semantics defined result unnesting r respect r gamma binary operator takes input two pagerelations link attribute l r 1 r 2 execution gammar 2 corresponds computing join r 1 r 2 based link attribute r 1 thus expands source relation following links corresponding attribute l nalg expression scheme combination operators page relations expression possible associate usual way query tree query plan leaf nodes correspond pagerelations nodes nalg operators see figures 2 3 note navigational algebra expressions computable fact pagerelations web scheme directly accessible ones corresponding entrypoints whose url known documented scheme thus order computable navigational paths involved query must start entry point thus define notion computable expression navigational algebra expression leaf nodes corresponding query plan entry points querying virtual views web approach querying web consists offering relational view data portion web allowing users pose queries view paper concentrate conjunctive queries query issued system query engine transparently navigates web returns answer assume query engine knowledge following elements adm scheme site ii set relations offered external view user call relations external relations iii external relation one computable navigational algebra expression whose execution correspond materializing extent external relation note use adm navigational algebra completely transparent user whose perception query process relies relational view relational query language give example suppose consider department site whose scheme reported figure 1 suppose also interested pieces information departments professors courses may decide offer view site based following external relations 1 deptdname address 2 professorpname rank email 3 profdeptpname dname 4 coursecname session description type 5 courseinstructorcname pname case order answer queries query engine must know web scheme figure 1 external scheme items 15 moreover must also know navigate scheme order build extent external relation corresponds associating external relation one computable nalg expressions whose execution materializes given relation example respect external relations dept professor profdept following navigations 1 deptdname address dnameaddressdeptlistpagepideptlist todept gamma deptpage 2 professorpname rank email proflistpagepiproflist toprof gamma profpage 3 profdeptpname dname pnamedname proflistpagepiproflist toprof gamma profpage pnamedname deptlistpagepideptlist todept gamma deptpagepiproflist call expressions default navigations associated external relations may different alternative expressions associated external relation see 3 note also given external relation may possible navigational expressions contained default navigations example professors may reached also courses however guaranteed professors may reached using path 6 query optimization system receives query external view choose efficient strategy navigate site answer query optimization proceeds follows original query translated corresponding projectionselection join algebraic expression expression converted computable nalg expression repeatedly rewritten applying nalg rewriting rules order derive number candidate execution plans ie executable algebra expressions finally cost alternatives evaluated best one chosen based specific cost model since network accesses considerably expensive memory accesses decide adopt simple cost model 10 based number pages downloaded network thus aim finding execution plan query minimizes number pages visited navigation note cost model made accurate taking account also parameters size pages deployment web servers network query locality 11 also expensive local operations considered omit details sake simplicity following section introduce number rewriting rules navigational algebra used end 10 develop optimization algorithm based rules successive rewritings generates number candidate execution plans evaluated based cost function optimal one chosen 61 nalg rewriting rules first fundamental rule simply says order evaluate query involves external relations external relation must replaced one corresponding nalg expressions fact extent external relation directly accessible must built navigating site rule 1 default navigation external relation replaced default navigations rules based simple properties navigational algebra thus rather straightforward follows rule 2 given two relations r 1 r 1 attribute l type link r 2 suppose link constraint r 1 associated l rule 3 given relation r suppose x set nonnested attributes r nested attribute x rule 4 given relation r suppose nested attribute r set nonnested attributes r ir 1y rule 5 given two relations r 1 suppose x set attributes r 1 suppose also r 1 attribute l type link r 2 r 1 following two rules extend ordinary selection projection pushing navigations show based link constraints selections projections moved along path order reduce size intermediate results thus network accesses rule 6 pushing selections given two relations r 1 r 1 attribute l type link r 2 suppose link constraint r 1 associated l oe bv 0 r 1 rule 7 pushing projections given two relations r 1 attribute l r 1 type link r 2 suppose link constraint r 1 r 2 b associated l b r 1 concentrate investigating relationship joins nav igations rules make use link inclusion constraints first rule rule states cases necessary join result two different paths denoted r 1 r 2 pointing r 3 possible join two sets pointers r 1 r 2 actually navigating r 3 navigate result rule 8 pointer join given relations r 1 r 1 r 2 attribute l type link r 3 suppose link constraint associated l r 1 gammar 3 second rule says cases joins page sets eliminated favor navigations essence join implicitly computed chasing links pages rule 9 pointer chase given relations r 1 r 1 r 2 attribute l type link r 3 suppose x set attributes belonging r 1 suppose also link constraint r 2 associated l inclusion constraint r 2 l r 1 l 7 pointerjoin vs pointerchase rules 8 9 essentially correspond two alternative approaches query opti mization called pointer join approach aiming reducing link traversal pushing joins link sets versus pointer chase approach links data followed restrict network access relevant items large number queries strategies possible optimization algorithm generates evaluates plans based strategies following discuss interaction join navigation web show pointer chase sometimes less expensive joins example 1 pointerjoin consider scheme figure 1 suppose need answer following query name description courses taught full professors fall session query expressed external view follows cnamedesc oe sesf 0 rankfull 0 note several ways rewrite query example since external relation courseinstructor two different default navigations rule 1 first rewrite step originates two different plans number plans increases due use alternative rules examine two possible rewritings based pointerjoin pointerchase strategy respec tively discuss relationship two first rewriting essentially based rule 8 corresponds adopting traditional optimization strategy link chasing reduced using joins rewriting goes follows cnamedescr oe sesf 0 rankf ull 0 professor 1pname courseinstructor 1cname course rule 1 proflistpagepiproflist toprof gamma profpage 1pname proflistpagepiproflist toprof gamma profpagepicourselist 1cname sessionlistpagepiseslist toses gamma sessionpagepicourselist tocourse gamma coursepage rule 4 proflistpagepiproflist toprof gamma 1cname sessionlistpagepiseslist toses gamma sessionpagepicourselist tocourse gamma coursepage rule 8 proflistpagepiproflist toprof gamma 1tocourse sessionlistpagepiseslist toses gamma tocourse gamma coursepage rule 6 1tocourse oe sesf 0 sessionlistpagepiseslist toses gamma tocourse gamma coursepage first rule 1 external relation replaced corresponding default navigation 1a rule 4 applied eliminate repeated navigations 1b rule 8 join pushed query plan order reduce number courses navigate join two pointer sets courselist navigate link tocourse 1c finally based link constraints rule 6 used push selections 1d plan rewritten push projections well radically different way rewriting query based rule 9 case first two rewritings rule 9 join removed favor navigations site finally projections pushed generate plan 2d follows proflistpagepi proflist toprof dprofpagepi courselist tocourse dcoursepage seslist toses dcoursepage tocoursed tocourse toprof 6oe rank 0 f ull 0 profpagepicourselist sessionpagepicourselist proflistpagepiproflist fig 2 alternative plans query example 1 2d cnamedescr oe sesf 0 oe rankf ull 0 proflistpagepiproflist toprof gamma profpagepicourselist tocourse gamma coursepage plans corresponding expressions 1d 2d represented figure 2 plan 1d corresponds finding links courses taught full professors ii finding links courses taught fall session iii joining two sets order obtain intersection iv navigate pages result hand plan 2d corresponds finding full professors ii navigating courses taught full professors iii selecting courses fall section rather easy see plan 1d lower cost fact plan 2d navigates courses taught full professors selects ones belonging result contrary plan 1d pointers courses first selected pages belonging result navigated pointerjoin strategy chosen optimizer example 1 reminiscent ones proposed relational databases optimize selections relation multiple indices 12 objectoriented query processors reduce pointer chasing evaluating pathexpressions assuming join index professors courses available 8 however following two examples show web context always optimal solution cases pointerchasing less expensive shown following example example 2 pointerchasing consider scheme figure 1 suppose need answer following query name email professors members computer science department instructors graduate courses query expressed external view follows professor 1 profdept examine two interesting candidate execution plans pointerjoin approach yields expression 1 rule 8 applied join links toprof coursepage tocourse 6 toses deptlistpagepideptlist todept deptpagepiproflist dsessionpagepicourselist 1 2 toprof ddprofpagepicourselist sessionlistpagepiseslist tocourse dprofpage aa toprofd toprof todept6 deptpagepiproflist coursepage deptlistpagepideptlist fig 3 alternative plans query example 2 coursepage proflist navigating profpage rule 6 used push selections alternative pointerchasing strategy 2 corresponds completely eliminate joins replacing navigations query plans corresponding expressions figure 3 let us compare cost two plans plan 1 intersects two pointer sets obtained follows lefthand side path navigates computer science department page retrieves pointers members righthand side path essentially downloads session pages course pages derives pointers instructors graduate courses two pointer sets joined urls navigated build result contrary plan 2 downloads pages professors computer science department pages corresponding courses little reflection shows plan 2 lower cost navigating instances coursepage plan 1 makes excessively expensive fact due topology site know several professors department several courses professor intuitive explanation fact following case efficient access structure pagescheme coursepage order select graduate courses necessary navigate courses makes cost excessively high pointerjoin approach fails contrary following links computer science department yields reasonable degree selectivity reduces number network accesses based previous examples conclude ordinary pointerjoin techniques transfer directly web number new issues taken account namely different cost model absence adequate access structures general several alternative strategies based pointerchasing need evaluated acknowledgments authors would like thank paolo atzeni giuseppe sin doni useful discussions early drafts paper special thanks go alessandro masci implemented navigational algebra relational view manager provided insightful comments supported us every phase work work part done third author visiting university toronto first third author partially supported universita di roma tre murst consiglio nazionale delle ricerche second author supported natural sciences engineering research council canada center information technology ontario r regular path queries constraints restructuring documents cut paste weave web algebraic optimization objectoriented query lan guages general framework optimization objectoriented queries query processing distributed orion access support relations indexing method object bases database systems logic programming bibliography site efficient queries web views querying world wide web single table access using multiple indexes optimization intuitive view normalize network structured data architecture query optimization querying relational views networks extended algebra calculus 1nf relational databases objectoriented query algebra join indices join index hierarchies supporting efficient navigations objectoriented databases design relational views network schemas database language gem tr