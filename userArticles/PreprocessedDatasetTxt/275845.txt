strong interaction fairness via randomization abstractwe present multi symmetric distributed randomized algorithm probability one schedules multiparty interactions strongly fair manner knowledge multi first algorithm strong interaction fairness appear literature moreover expected time taken multi establish interaction constant depending total number processes system sense multi guarantees realtime response multi makes assumptions boundedness time takes processes communicate thus offers appealing tonic impossibility results tsay bagrodia joung concerning strong interaction fairness environment sharedmemory messagepassing processes deterministic communication time nonnegligible strong interaction fairness strong fairness condition one might actually want impose practice results indicate randomization may also prove fruitful notions fairness lacking deterministic realizations requiring realtime response b introduction multiparty interaction set io actions executed jointly number processes must ready execute action actions set occur attempt participate interaction delays process participants available actions executed participating processes continue local computation although relatively new concept multiparty interaction found way various distributed programming languages algebraic models concurrency see 11 taxonomy programming languages offering linguistic support multiparty interaction although multiparty interactions executed synchronously underlying model communication usually asynchronous bipartied multiparty interaction scheduling problem concerned synchronizing asynchronous processes satisfy following requirements 1 interaction established enabled ie participants ready 2 process participate one interaction time moreover notion fairness typically associated implementation prevent unfair computations favor particular process interaction several important fairness notions proposed literature 1 2 3 including weak interaction fairness interaction continually enabled participants eventually engage interaction strong interaction fairness interaction infinitely often enabled established infinitely often distinguishing characteristic interaction fairness much weaker known fairness notions strong interaction fairness much stronger general stronger fairness notions induce liveness properties also difficult implement therefore surprising see weak interaction fairness widely implemented eg 18 15 4 14 12 20 10 also surprising see algorithms asymmetric deterministic weak interaction fairness thus strong interaction fairness proven impossible symmetric deterministic distributed algorithm 8 13 given process decides autonomously attempt interaction time cannot predicted advance strong interaction fairness still possible even symmetry requirement dropped 19 9 note impossibility results depend type communication primitives eg messagepassing sharedmemory provided underlying execution model hold long one processs readiness multiparty interaction known another communications time takes two processes communicate nonnegligible finitely bounded case csp communication guard scheduling special case multiparty interaction scheduling problem interaction involves exactly two processes randomization proven effective technique coping aforementioned impossibility phenomena ex ample randomized algorithm reif spirakis 17 symmetric weak interaction fair probability 1 guarantees real time response two processes continuously willing interact within time interval delta establish interaction within delta time high likelihood expected time establishment interaction constant randomized algorithm francez rodeh 8 simpler process p expresses willingness establish interaction process p j setting boolean variable shared two may need wait certain amount time ffi reaccessing variable determine p j likewise interested interaction authors show proviso time access shared variable negligible compared ffi algorithm weak interaction fair probability 1 note however assumption combined fact lower bound ffi provided may significantly limit algorithms practicality furthermore strong interaction fairness claimed either algorithm paper present multi extension francez rodehs randomized algorithm multiparty case prove multi weak interaction fair probability 1 also show transition process state ready interaction independent random draws processes probability 1 multi strong interaction fair knowledge multi first algorithm strong interaction fairness appear literature also present detailed timing analysis multi establish lower bound long process must wait reaccessing shared variable consequently algorithm finetuned optimal performance moreover show expected time establish interaction constant depending total number processes system thus multi also guarantees realtime response strong interaction fairness strong fairness condition one might actually want impose practice results indicate randomization may also prove fruitful notions fairness lacking deterministic realizations requiring realtime response rest paper organized follows section 2 describes multiparty interaction scheduling problem anthropomorphic setting known committee coordination randomized algorithm presented section 3 analyzed section 4 section 5 concludes 2 committee coordination problem problem scheduling multiparty interactions asynchronous systems elegantly characterized chandy misra one committee coordination 5 professors cf processes certain university organized committees cf interactions committee fixed membership roster one professors time time professor may decide attend committee meeting starts waiting continues wait meeting committee member established state committee coordination problem formally need following two assumptions 1 professor attending committee meeting leave meeting members committee attended meeting 2 given members attended committee meeting committee member leaves meeting finite time problem devise algorithm satisfying following three requirements synchronization professor attends committee meeting members committee eventually attend meeting well exclusion two committees meet simultaneously common member weak interaction fairness professors committee waiting eventually professor attend committee meeting shall also consider strong interaction fairness ie committee infinitely often enabled established infinitely often committee enabled every member committee waiting disabled otherwise overall behavior professor described state transition diagram figure 1 state corresponds thinking w corresponds waiting committee meeting e means professor actively engaged meeting note algorithm problem control transition professor state w state e two transitions transitions w autonomous professor moreover assume upper bound time meeting start meeting ready finish meeting figure 1 state transition diagram professor professor spend thinking otherwise algorithm problem could simply wait long enough professors become waiting schedule committee meeting choosing three requirements problem strong interaction fairness would easily satisfied 3 algorithm section present multi randomized algorithm committee coordination algorithm associate committee counter cm whose value ranges 0 delta delta jprofmj gamma1 prof set professors involved cm accessed professors prof testop instruction follows result testopcm zeroop nonzeroop effect instruction apply cm operation zeroop value zero operation nonzeroop otherwise assign variable result old value ie value operation cm operations used noop inc dec example returns 2 testopcm noop dec leaves cm unchanged returns 0 simplify presentation algorithm assume execution testop instruction atomic assumption removed section 44 concurrent implementation testop considered algorithm multi informally described follows initially shared counters set zero professor p decides attend committee meeting randomly chooses committee member attempts start meeting increasing value cm 1 increments decrements interpreted modulo jprofmj new value cm 0 ie increment professor p concludes members increased cm one waiting p convene goes state e start meeting new value cm zero least one professors profm yet ready waits period time hoping partners become ready reaccesses cm cm set 0 professors ready ready p attend meeting cm still zero professor still ready p withdraws attempt start decreasing value cm 1 tries another committee algorithm executed professor p presented figure 2 waiting line 1 boolean flag indicating whether p waiting committee meeting constant ffi line amount time professor waits reaccessing counter later require see section 4 ffi greater maximum amount time professor spend executing lines 2 3 1 note algorithm symmetric sense professors execute code make use process ids 4 analysis algorithm section prove multi satisfies synchronization exclusion requirements committee coordination problem probability 1 weak strong interaction fair also analyze expected time multi takes schedule committee meeting 41 definitions assume discrete global time axis external observer events system totally ordered internally however processors may execute instructions simultaneously time instance simultaneous access shared counter arbitrated implementation precisely jmax also include time takes execute line 1 simplify analysis assume boolean flag waiting serves indicate state executing professor explicit test flag needed moreover assume action executed instantaneously time instance time takes execute action difference time action executed time previous action professor executed 1 waiting f 2 randomly choose committee fm j 3 testopcm inc 4 committee meeting established 5 attend meeting 6 else f wait 7 testopcm noop 8 committee meeting established 9 attend meeting 10 else try another committee g 11 g figure 2 algorithm multi professor p testop instruction assume executed atomically since time axis discrete meaningless say infinitely many time instances finite time interval therefore throughout paper phrase infinitely many time instances refers interval 0 1 analysis purposes present figure 3 refinement state transition diagram figure 1 state w refined three substates actions taken professors substates randomly choose new committee execute instruction testopcm inc inc executing instruction testopcm noop dec say professor accesses counter cm executes testop instruction state w 1 reaccesses cm executes testop instruction state w 2 monitors committee state w 2 waiting reaccess cm according algorithm time professor p accesses counter cm testopcm inc inc state w 1 state w 2 e right 2 depending value cm 2 action transits professor p state s1 state s2 occurs time say p state s1 state s2 right ps state defined every time instance stipulate ps ready meeting reaccess cm 0 access cm draw finish meeting access cm reaccess cm 6 random figure 3 state transition diagram professor executing algorithm ffistart waitingrandom drawrandom drawrandom draw figure 4 timing constraints actions executed professor p enters state w 2 time monitor committee time reaccess cm testopcm noop dec depending value cm time professor either return state w 0 choose another committee enter state e attend meeting executing algorithm multi professor starts waiting committee meeting state w 0 repeatedly cycles states w 0 w 2 entering committee meeting via transition state w 1 w 2 actions performs along cycle subject timing constraints depicted figure 4 particular interval consecutive access reaccess actions must length ffi interval consecutive reaccess access actions must length greater j max shall sometimes refer former ffiinterval made explicit section 43 duration ffiinterval may vary iteration iteration algorithm require ffi greater lower bound determined j max number professors committee currently consideration figure 5 illustrates possible scenario four professors executing algo state time s2 p executes action time example p accesses cm time reaccesses cm time state w2 time instance ffi note interval open ffi say p state w2 time p must accessed cm time prof prof echoose 14choose 123choose 123t echoose 234choose 234choose 123t echoose 123choose 234choose 123t echoose 14choose 234choose 14 figure 5 partial computation four professors rithm p 1 p 4 involved committee 14 involved 123 p 2 involved 234 professor explicitly depict state yaxis global time instance xaxis example time 1 professor p 1 starts waiting committee meeting enters state w 0 state time 2 randomly chooses 14 accesses cm 14 time 3 since cm access p 1 enters state w 2 monitor 14 units reaccesses cm 14 time 6 since p 4 access cm 14 returns state w 0 try another committee later time 12 p 1 chooses committee 123 accesses cm 123 time 13 p 1 reaccesses cm 123 time 16 finds p 2 p 3 willing start meeting 123 p 1 enters state e attend meeting meeting 123 ends time 19 committee members return state time choosing shaded area time 17 19 represents synchronization interval three professors 42 properties algorithm hold certainty analyze correctness algorithm begin invariant value shared counter cm use proving multi satisfies synchronization condition committee coordination problem lemma 1 time k professors state w 2 monitoring committee professor since last entering state w 0 entered state e attend meeting value cm time k k jprof j however time professor entered state e attend meeting professors prof entered state e attend meeting proof prove lemma induction time th system event occurs lemma holds time 0 initially every professor prof state induction hypothesis assume following time prof set professors state w 2 monitoring committee professor since last entering state w 0 entered state e attend meeting consider nearest time j j professor p accesses reaccesses cm since professor accesses reaccesses cm induction hypothesis holds well interval suppose first p accesses cm instruction testopcm inc inc access cm jprof access less jprof p enters state w 2 time j jqj professors state w 2 monitoring committee conversely access access enters state e since j professors q monitoring time reaccessed cm testopcm noop dec moreover reaccess cm find cm 0 enter state e start see last statement true recall first two assumptions put forth defining committee coordination problem section 2 professor attending leave members entered state e attend consequently professor attending leave attempt another instance accessing cm desired result follows suppose p reaccesses cm instruction testopcm noop dec p 2 q since cm 6 0 right ps reaccess returns state w 0 right j professors state w 2 monitoring 2 theorem 1 synchronization professor prof enters state e time attend meeting within ffi time professors prof entered state e attend meeting proof theorem follows immediately lemma 1 2 theorem simultaneously common member proof result follows fact professor monitors one committee time 2 43 properties algorithm hold probability 1 move prove multi weak strong interaction fair analyze time complexity need following two assumptions a1 ffiinterval professor chooses wait committee satisfies condition maximum amount time professor spend executing lines 2 3 multi a2 professors transition thinking waiting see figure 1 depend random draws performed professors note a2 required strong interaction fairness also require definitions random draw professor performs state w 0 deciding meeting attempt recall say professor accesses counter cm executes instruction testopcm inc inc line 3 algorithm reaccesses cm executes testopcm noop dec line 7 suppose professor p accesses counter time interval one access choose recent one choice counter must result random draw performed access line 2 let tp denote random draw tp defined p access counter furthermore let tprof prof tp defined g example p state w 2 time p must accessed counter interval must defined shall see lemma 4 definition tp guarantees tp defined p 2 prof random draws yield outcome established henceforth shall use pm denote fixed nonzero probability professor p 2 prof chooses committee random draw thus p2prof probability set mutually independent random draws one professor prof yields outcome following three lemmas used fairness proofs first one says tprof must refer mutually disjoint sets random draws 0 least ffi apart proof directly definition tp 2 lemma 3 assume a1 committee continuously enabled interval enabled time instance exists time instance since continuously enabled every professor definition state throughout interval clearly either one following holds p state w 2 throughout p state w 0 w 1 throughout case let g tp defined every p 2 prof every given j max thus exists j lemma proven case ii suppose professor p 1 2 prof stays w 0 w 1 accesses counter 1 assumed lower bound 1 p defined p 2 prof done otherwise must exist another professor 2 lower bound still enabled time 1 p 2 wstate 1 cannot state w 2 otherwise 1 p 2 would defined p 2 state w 0 must access counter within j max time assume p 2 accesses counter argue 1 2 p 1 also defined see recall lower bound fact jprof j 2 still w state time instance counter 1 p 1 must entered state w 2 access stays w 2 throughout must defined fact note defined every professor prof done otherwise similar reasoning must exist third professor prof 1 2 p 3 defined using argument show exists 3 defined continuing fashion show exists k professors prof 1 2 k p l defined 1 l k given finite number professors prof eventually establish exists tp defined p 2 prof lemma proven 2 proof lemma 3 illustrated figure 6 committee size 4 smallest ffi allowed a1 consequence lemma 3 different professors choose different values ffi values need satisfy lower bound established a1 3 therefore clocks used professors implement timeouts need adjusted accuracy lemma 3 says assumption a1 committee continuously enabled sufficiently long exists interval length within every professor prof performs random draw following lemma ensures random draws yield outcome must establish lemma 4 jd tprof random draws tprof yield outcome 3 ffi referred definition tprof statement lemma 1 understood minimum maximum relevant ffi values respectively continuously enabled gammareadyaccessreaccess gammareaccessaccess gammareaccessaccess access figure illustration proof lemma 3 maximum possible interval throughout enabled jd tprofm j 6 jprofm j jprofm must defined note ffi min would equal would defined time professor must already entered state e start time professors prof enter state e start proof assume hypotheses described lemma let p 2 prof first professor performing random draw tprof accesses cm testopcm inc inc prof last professor let j time p p j respectively access cm cm time reaccess cm professors access cm remain state w 2 p j accesses cm lemma 1 access p j accesses cm j set cm zero enter state e start moreover time ffi every professor learn started reaccesses cm testopcm noop dec also enter state e start since ffi lemma thus established 2 note lemma 4 relies fact access involved definition tp occurs interval open closed relax definition closed interval correctness lemma 4 would depend accessreaccess conflict counter resolved implementation see suppose p 1 accesses counter counter new definition tp 1 tp 2 defined suppose random draws yield outcome involves access counter cm respectively assume algorithm p 1 wait ffi time reaccess cm causing conflict p 2 access time clearly established conflict resolved favor access ie p 2 gets go first theorem 3 weak interaction fairness assume a1 members committee waiting committee meetings probability 1 eventually meeting involving member started proof assume a1 suppose enabled let jprof j consider probability continuously enabled continuously enabled exists time instance 1 jd 1 prof j random draws 1 prof yield outcome lemma 4 must disabled 1 even random draws yield outcome professor may still establish another committee meeting 0 random draw outcome 0 time professors 0 also interested 0 probability random draws 1 prof cause committee involving member started greater probability continuously enabled similarly still enabled 1 lemmas 2 3 must exist another time instance 2 2 prof contains completely new set random draws size jprof j probability remains enabled random draws greater given random draws 1 prof cause member attend meeting probability continuously enabled time 2 greater still enabled 2 another new set random draws 3 prof size jprof j general probability remains continuously enabled mutually disjoint sets random draws 1 prof tends infinity tends zero probability zero remains enabled forever 2 intuitively a1 requires ffi parameter used algorithm large enough professor reaccess counter professors get chance access counter reaccess 6 access 6 reaccess 6 access 6 reaccess reaccess 6 access 6 reaccess 6 access 6 reaccess figure 7 two professors wait forever without establishing meeting due bad choice ffi assumption removed theorem 3 set professors could access reaccess counter forever without ever establishing committee meeting illustrate consider figure 7 professor reaccesses counter professor could access counter matter committees choose random draws time professor see result counter set professor strong interaction fairness property algorithm additionally requires assumption a2 lemma probabilistic behavior large number random draws lemma 5 assume a2 infinitely many ts jd tprof probability 1 random draws tprof produce outcome infinitely many ts infinite sequence increasing time instances jd prof jprof j wlog assume 8i 2 sets prof pairwise disjoint consider random draws set prof let em denote event random draws produce outcome a2 probability em occurrence independent time random draws made given define random variable 1 em occurs 0 otherwise law large numbers see example 6 ffl lim n tends infinity probability 1 n tends therefore probability 1 set fi j hence probability 1 infinitely many random draws prof produce outcome 2 theorem 4 strong interaction fairness assume a1 a2 committee enabled infinitely often probability 1 committee convened infinitely often proof since algorithm satisfies weak interaction fairness assume infinitely many becomes enabled time instance let either 1 infinitely many continuously enabled interval 2 starting point 0 onward whenever becomes enabled professor prof attends committee meeting interval consider case 1 lemma 3 a1 infinitely many interval contains time instance jd tprof j lemma 5 a2 probability 1 infinitely many ts random draws tprof produce outcome lemma 4 probability 1 convened infinitely often consider case 2 wlog assume interval contains time instance previous argument also show convened infinitely often probability 1 let q prof set professors accessed counter time waiting time attend committee meeting q 2 q let qs first access let 1 denote qs random draw performed right ps latest random draw performed time note since p w state 2 defined outcome must cause p attend committee meeting time let g a2 random draws 0 mutually independent nonzero probability yield outcome therefore law large numbers see proof lemma 5 probability 1 infinitely many random draws 0 yield outcome random draws 0 yield outcome either meeting established professor prof still waiting perform another random draw access new counter technique similar lemma 3 seen later case would able find time instance j assumption case conclude probability 1 convened infinitely often 2 note assumption a2 dropped theorem 4 conspiracy strong interaction fairness devised illustrate consider system two professors p 1 p 2 three committees involving involving p 2 12 involves p 1 p 2 suppose p 1 becomes waiting tosses coin choose either 1 12 malicious could remain thinking p 1 selected 1 p 2 becomes waiting random draw performed p 1 latest random draw yields outcome selects 1 12 started p 1 remains meeting p 2 waiting however 12 enabled soon p 2 becomes waiting similarly could also remain thinking p 2 selected 2 scenario repeated ad infinitum resulting computation would strong interaction fair time complexity algorithm analyzed following theorem assume worst case scenario professor spend j max time executing lines 2 3 multi theorem 5 time complexity assume professor spends j max time executing lines 2 3 multi assume a1 ie amount time ffi professor spends monitoring interaction greater 1 expected time takes member committee start meeting time becomes enabled greater proof suppose becomes enabled time consider first exists time instance assume first enabled conflicting committee enabled simultaneously two committee conflict share common member enabled professor prof attend meeting lemma 4 random draws jd 1 prof j yield outcome event occurs probability professor prof start meeting time 1 otherwise professor prof must perform another random draw access selected counter within j time reaccesses previous selected counter must exist another time instance 2 contains completely new set random draws one professor prof new random draws yield outcome professor start committee meeting probability disabled time 2 general let prof th set random draws performed professors ffi probability disabled time ffi expected time starting member enters state e start meeting greater assumed committee conflicting enabled enabled implies set random draws prof random draws must yield outcome members start meeting conflicting committee enabled simultaneously random draws prof may still lead committee meeting even yield outcome hence expected time starting member enters state e start meeting actually less j conflicting committee enabled simultaneously assume next exists time instance 1 must disabled disabledness must result professors random draw leading establishment committee meeting involving professor disabling time must also probabilistic event therefore case expected time starting member enters state e start meeting greater j given expected time greater therefore either case expected time starting member enters state e start meeting greater j intuitively theorem 5 states expected time member prof start committee meeting waiting greater amount time execute one round whileloop multi ie divided probability professors random draws choose committee ie note j max constant determined size number members largest committee call value max let j probability constant determined size maximum number committees professor member call value c p2prof finally ffi constant determined therefore time complexity algorithm bounded following constant worst case max could equal total number professors c max could equal total number committees system turn could dependent total number professors practice generally known parameters must kept small independent total number professors system 7 4 contrast deterministic algorithms committee coordination 15 12 10 time complexity c 0 constant n total number professors system 5 time complexity algorithms depends explicitly n use priority beak symmetry among professors lower priority professor may wait higher priority professor attempt establish conflicting committee higher priority professor turn may wait another higher priority professor recall section 1 symmetric deterministic distributed solution committee coordination c max max kept small independent n multi addition guaranteeing strong interaction fairness outperforms deterministic algorithms providing realtime response 44 nonatomic implementation testop promised section 3 present nonatomic hence concurrent implementation testop instruction recall execution statement testopcm zeroop nonzeroop actually involves two 6 actions read cm apply cm operation zeroop operation nonzeroop otherwise precisely actions read followed inc professor executes testopcm inc inc access counter read followed decnoop executes testopcm noop dec reaccess counter clearly apply mutual exclusion algorithm see 16 survey ensure access reaccess counter proceeds atomically however overkill example 4 scheme synchrony loosening therefore proposed 7 reducing size interaction practical applications 5 algorithms multi allow professors distributedly establish committee meeting deterministic algorithms 5 4 14 employ managers coordinate committee meetings time complexity algorithms depends number managers use 6 three count boolean test accesses counter executed concurrently 7 see consider three possible interleaved executions two testopcm inc incs read 1 read 2 inc 1 inc 2 read 1 read 2 inc 2 inc 1 read 1 inc 1 read 2 inc 2 observe first two executions effect cause executing professors enter state w 2 monitor value cm returned reads less value two accesses less jprof third execution two accesses proceed atomically also effect cm value two accesses jprof gamma 2j third execution professor executing first access enter w 2 monitor professor enter state e start meeting first professors ffiinterval expires learn meeting established reaccesses cm also enter state e start meeting situation similar first two executions professors enter state e start meeting reaccess counter three interleaved executions preserve synchronization property algorithm breaking atomicity testop clearly effect algorithms exclusion fairness properties note system performance may increased reverse order execution read inc actions implementation testopcm inc inc see consider case two professors attempt access cm simultaneously following two possible interleaved executions inc 1 inc 2 read 1 read 2 inc 1 inc 2 read 2 read 1 suppose cm value access jprof two increments professor upon reading value cm learns professors interested enter state e start meeting moreover new implementation 7 assume basic machinelevel instructions inc dec load store executed atomically thus two instructions executed concurrently result equivalent sequential execution unknown order 8 concurrent accesses counter allowed one professor may access cm simultaneously enter state w2 monitor cm jprof accesses likewise lemma 1 assumes access counter atomic needs slightly changed reflect possibility professors prof state w2 time inc still ensures multis synchronization property regardless actions overlapping testopcm inc inc instructions interleaved 9 similarly interleaving read decnoop different professors reaccesses counter cannot invalidate algorithms synchronization property simultaneous access reaccess counter may conflict illustrate suppose p 1 wishes access cm p 2 wishes reaccess suppose value cm attempt jprof access proceeds atomically p 2 reaccess professors enter state e start meeting however four constituent actions interleaved follows read 2 inc 1 read 1 dec 2 decrement cm one go state w 0 select new committee hand since p 2 decrement discover thus enter state e start hence synchronization requirement violated ensure access reaccess counter mutually exclusive time allowing concurrent accesses concurrent reaccesses implement testopcm inc inc testopcm noop dec using algorithm shown figures 8 9 algorithm based dekkers algorithm biprocess critical section problem 16 discussed returns new value cm cm access count counter recording number professors attempting access cm cm reaccess count records number professors attempting reaccess cm counters initialized zero furthermore variable cm turn initialized access used resolving conflicts accesses reaccesses seen professor enters critical section access cm cm access count professors attempting access cm may modify cm access count test cm reaccess count cm access count 0 follows professor p enters critical section access cm professor simultaneously enter critical section reaccess cm moreover professor enter critical section 9 new implementation adopted line 3 figure 2 needs changed testopcm inc inc 0 testopcm inc inc returns value cm access note however testopcm op dec must still return value cm access returns value cm access returned value zero executing professor p would able tell 1 p interested p decrease cm one return state w0 retry another committee 2 members prof interested p leave cm unchanged enter state e start meeting 1 inc cm access count 2 cm reaccess count 0 3 cm turn reaccess f 4 dec cm access count 5 cm turn reaccess noop 6 inc cm access count g 7 beginning critical section 8 incc 9 return readc 10 end critical section 11 dec cm access count 12 cm access count 0 cm turn reaccess figure 8 implementation testopcm inc inc 1 inc cm reaccess count 2 cm access count 0 3 cm turn access f 4 dec cm reaccess count 5 cm turn access noop 6 inc cm reaccess count g 7 beginning critical section 8 readc 9 else f return readc 10 end critical section 11 dec cm reaccess count 12 cm reaccess count figure 9 implementation testopcm noop dec reaccess cm p already critical section yet left critical section similarly professor critical section reaccess cm professor enter critical section access cm mutual exclusion property therefore holds note possible professor critical section say access cm professor already flipped cm turn reaccess line 12 figures 8 however premature flipping cm turn cannot invalidate algorithms mutual exclusion property entering critical section reaccess cm depend value cm turn rather value cm access count long professor critical section access cm cm access count remains greater 0 professor exit whileloop figures 9 lines 26 reaccess cm algorithm also deadlockfree see consider arbitrary time instance prof set professors wishing access cm r prof set professors wishing reaccess cm definition consider plight p 2 similar reasoning applies case reaccess obviously p succeed otherwise happens next depends value cm turn cm turn access professor r must undo increment cm reaccess count wait line 5 figure 9 cm turn flipped reaccess cm reaccess count reset zero p enter critical section conversely cm turn reaccess p professors must undo increments cm access count collectively resetting value variable zero wait line 5 figure 8 professors r enter critical section flip cm turn access moreover algorithm permits concurrent access concurrent reaccess meaning professor p 1 attempts access cm professor p 2 accessing counter may succeed even already third professor waiting reaccess cm critical section cm turn access professors waiting reaccess cm blocked line 5 figure 9 cm reaccess count 0 p 1 immediately enter critical section note allowing subsequent professors concurrently access counter cannot indefinitely delay professor waiting reaccess counter 1 number professors committee finite 2 professor ps access cm must followed reaccess counter unless ps access leads committee meeting case professor must enter state e wait members finish reaccesses start meeting assumption a1 time access reaccess ie ffiinterval must long enough professors finish accesses note permitting concurrent accesses highly desirable increases likelihood establishing committee meetings example suppose two sets professors waiting access reaccess cm respectively professor already accessing counter deferring reaccesses accesses proceeded help members reach consensus scheduling accesses reaccesses fair manner eg alternatively adds help establishment meeting conclusions presented multi new randomized algorithm scheduling multiparty interactions shown properly setting value ffi amount time process willing wait interaction established algorithm weak strong interaction fair probability 1 results hold even time takes access shared variable communication delay nonnegligible knowledge makes multi first algorithm strong interaction fairness appear literature strong interaction fairness proven impossible deterministic algorithm results therefore indicate randomization feasible efficient countermeasure impossibility phenomena furthermore since known fairness notions weaker strong interaction fairness implemented via randomization example strong process fairness 1 process infinitely often ready enabled interaction shall participate interaction infinitely often also realized randomized algorithm spite fact cannot implemented deterministic multiparty interaction scheduling 19 9 multi extension francez rodehs randomized algorithm csplike biparty inter actions francez rodeh able claim weak interaction fairness algorithm limiting assumption communication time negligible compared ffi case strong interaction fairness would possible even deterministic setting also analyzed time complexity algorithm like reif spirakiss realtime algorithm 17 expected time taken multi establish interaction constant depending total number processes system although multi presented sharedmemory model easily converted messagepassing algorithm letting processes maintain shared variables processes communicate message passing obtain values variables time readwrite shared variable accounts time takes deliver message ffi parameter assumption a1 properly adjusted reflect new communication delay weak strong interaction fairness notions still guaranteed probability 1 multi originally described section 3 uses operation testop processes access shared counter atomically operation rather complex generally available moreover unnecessarily eliminates potential concurrency section 44 proposed implementation testop uses basic atomic instructions inc dec load store implementing multi machine support atomic execution instructions could well case inc dec interesting open problem discussed section 44 implementation testop would much simpler generalpurpose mutual exclusion algorithm used instead however know mutual exclusion algorithm allows concurrent accesses critical section accesses conflict one another therefore design solution finally unlike deterministic algorithms randomized algorithms multi guarantee averagecase behavior worstcase bound would therefore interesting conduct simulation studies multi measure response time practical settings experiments size max c max see section 43 vary small constants large values approaching number professors system would especially insightful acknowledgments would like thank anonymous referees careful reading manuscript valuable comments r appraising fairness languages distributed program ming fairness abstraction design distributed systems fairness hyperfairness multiparty interactions process synchronization design performance evaluation distributed algo rithms foundation parallel program design course probability theory interacting processes multiparty approach coordinated distributed programming distributed abstract data type implemented probabilistic communication scheme characterizing fairness implementability multiparty interaction coordinating firstorder multiparty interactions comprehensive study complexity multiparty interaction implementation nparty synchronization using tokens advantage free choice symmetric fully distributed solution dining philosophers problem extended abstract distributed synchronization scheme fair multiprocess handshakes new efficient implementation multiprocess synchronization algorithms mutual exclusion real time synchronization interprocess communications distributed algorithms ensuring fair interprocess communications impossibility results interprocess synchronization tr ctr catuscia palamidessi oltea mihaela herescu randomized encoding calculus mixed choice theoretical computer science v335 n23 p373404 23 may 2005 rafael corchuelo jos prez antonio ruizcorts aspectoriented interaction multiorganisational webbased systems computer networks international journal computer telecommunications networking v41 n4 p385406 15 march