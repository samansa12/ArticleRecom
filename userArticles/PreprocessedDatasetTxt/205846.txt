model uncertainty discrete event systems earlier work concerning control discrete event systems usually assumed correct model system controlled available goal work provide algorithm determining correct model set models result algorithm finite language used test correct model notification remaining models cannot controllably distinguished use finite state machine model controllable uncontrollable events presented ramadge wonham b introduction discrete event system des one responds distinct events occurring asynchronous times 7 examples systems include computer networks manufacturing systems dynamic systems require high level coordinated control success recently developing theory control systems see 13 references therein work assumed accurate model system interest available motivation work desire control systems presence uncertainty model system environment system operates part work extension learning inference theory 6 2 16 domain discrete event systems work also related recent results concerning determination system model certain assumptions made model type experiments 14 15 learning theory system determination work assumption events controllable uncontrollability certain events figures prominently work approach taken paper similar approach used system identification 17 model falsified dropped consideration correct model many different types uncertainty might occur system model discuss uncertainties model representation must chosen work investigate uncertainty deterministic finite state machine example uncertainty uncertainty transitions system described state single event specified providing transitions least two different resulting states however one transitions actually present sys tem examples discussed section 3 uncertainty results multiple models system might potentially correct goal specify conditions algorithms enable identification correct model finite number transitions despite presence uncontrollable actions particular algorithm provides either notification models may controllably distinguished finite distinguishing language used remove incorrect model section 2 describes method used model plant relevant controllability results section 3 gives examples set potentially correct models system might arise section 4 describes concepts techniques used identify correct model given set models section 5 provides example applications results 2 description model use deterministic finite state machine model system havior follows main features finite state machine model related work covered condensed manner complete development related finite state machine model found 5 9 complete descriptions controllability related results found 13 3 11 21 finite state machines regular languages finite state machine represented either four five tuple specifi cally finite state machine fsm one writes finite set states finite set transition labels events transition function initial state q 0 2 q marked states qm q transition function ffi general partial function ffiq oe denotes transition event oe defined state q marked states signify subset state set used determine acceptance given string string accepted machine executing string stops marked state finite state machine also represented directed graph sets nodes arcs respectively states transitions instance 1 4 q set states machine q theta theta q set transitions one denotes transition three tuple used denote set finite sequences symbols alphabet language set strings elements alphabet denotes length u uj denotes j th element string set pru denotes set strings prefixes u ie u 2 notation u used denote prefix u note empty string length zero prefix strings concept prefix extended language following manner prefix closure language l defined use notation 2 ppru u signify proper prefix u ie u 6 u concept extended language following manner work restrict attention class regular languages strict subset class formal languages basic result relates regular languages finite state machines language regular generated finite state machine 9 language lm language marked recognized machine ffi extended usual manner language lm language generated machine product machine single machine used represent synchronous behavior two original machines machines event set product two machines denoted defined undefined otherwise languages generated marked product machine specific relation languages machines com posed 22 control discrete event systems event set partitioned two sets c u representing controllable uncontrollable events respectively language k controllable respect language l ka ab denotes concatenation often denoted ab supervisor plant modeled finite state machine p specifies set inputs enabled supervisor applied function string l events plant previously executed closed loop system consisting supervisor f plant p closed loop behavior denoted l f defined follows 2 woe 2 l f w 2 l f oe 2 fw woe 2 l supervisor f complete respect given plant p uncontrolled actions plant respected ie x 2 l f xoe u l f closed loop behavior discussed following result basic theorem relating concepts theorem 21 12 nonempty k l exists complete supervisor f l k prefix closed controllable region weak attraction discussed 3 11 directly related distinguishing different machines region weak attraction specified set states described informally set states system controlled enter set specified states finite number transitions region weak attractionomega g machine graph notation specified subset states g q determined algorithm 3 specific calculation region weak attraction given set states g transitions used construction denoted tomega g algorithm builds region weak attraction starting g iteration algorithm adds states region defined previous iteration state added region weak attraction event oe describes transition region defined previous iteration exist uncontrolled event state region defined previous iterations algorithm transition labeled oe added tomega g uncontrolled transitions state states inomega g well defined discussed 3 transitions chosen tomega g necessarily uniquely defined algorithm guaranteed terminate finite state description machine efficient algorithm 11 computes region weak attraction ojqj delta jaj time characteristics region weak attraction easily described certain conditions directed graph describes finite state machine let machine described graph g q region weak attraction satisfies three main criteria described following proposition proposition 21 3 graph connected f q every state exists path state f subgraph realizable realizable subgraph includes uncontrollable arcs defined state state set subgraph initial state q 0 machine region weak attraction ie q 0 2omega g also define machine based region weak attraction momega g momega g formally defined tuple arc defined construction region weak attraction ie q tomega g momega defined language recognized resulting machine denoted lmomega g mentioned 3 momega g hence lmomega g unique 3 model uncertainty uncertainties plant model provide set models potentially correct models plant model set obtained assuming uncertainty results specific lack knowledge structure plant example 31 consider automatic guided vehicle system guided wires floor manufacturing facility model guidance system may contain errors error produce uncertain model correct system instance two branch nodes wiring may combined single node model extra branch may model installed plant model may lacking branch installed plant errors generates uncertain model used define set potentially correct models example 32 model figure 1 gives example system uncertainty transitions transition uncertainty single state q 0 model b transitions defined k different states yet actual system one b transitions defined ab ab ab figure 1 model transition uncertainty model transition uncertainty b one possibly correct modelsexample 33 assume set events system accomplish known known upper bound size state space using two assumptions one construct possible models system unique models constructed technique required generate tests distinguish correct model4 distinguishing models present deterministic techniques provide easily checked condition algorithm correctly removing inconsistent models consideration identifying correct model certain concepts provide unified framework development follows following definitions assume models states event oe 2 definition 41 given 1 2 predicate differentz w holds predicate depends state product machine string chosen differentiate states make product state example 41 machines defined example 32 let j possible models b transition defined states q hold q i0 q j0 product initial statein following a4b denotes symmetric difference two sets b ie definition 42 string w distinguishing string languages l 1 w definition 43 string w minimally distinguishing string languages w minimally distinguishing string minimal sense prefix also distinguishing string definition 44 nonempty language l distinguishing language implies w minimally distinguishing string string distinguishing language one uses last event distinguish l 1 l 2 note general unique distinguishing language two machines 1 2 example 42 let l two languages describe behavior two possible models black box machine languages distinguishing language l satisfy pprl must l b observe machine executes final b l 2 correct language l 1 correct languagefor languages generated state machine following result proposition 41 let l 1 l 2 languages generated machines 1 2 exists distinguishing language l l 1 l 2 proof immediately differentz 0 w holds let w string satisfies differentz 0 w definition differentdelta delta v 2 voe 62 fvoeg clear l distinguishing language l 1 l 2 end proof proposition 41 example 43 machines example 41 differentq holds consequently distinguishing language distinguishing two models assume machine uncertainty causes set potentially correct models consist models 1 2 assume one models correct models specified following tuples languages generated models referenced lm 1 also refer standard synchronous product machine set states product machine used controllably distinguish two models defined following manner definition 45 g controllably distinguishing set states 1 event used distinguish two states called controllably distinguishing event hence event oe controllably distinguishing event z differentz oe holds uncontrolled event oe u defined product machine z example 44 machines given figure 2 let fbg controllably distinguishing state set qg example set controllably distinguishing states entire product space figure 2 machines controllably distinguishing state set calculation example 45 consider machines example 44 let fag instance set controllably distinguishing states controllably distinguish states product machine string must found leads state g note g superset states used distinguish states product machine reached initial state inclusion result defining g states product machine controllably distinguishing events defined without consideration reachability constraints proposition 42 states finite controllable method distinguishing two finite state machines initial state product machine region weak attraction set states used distinguish two machines proposition 42 two machines exists finite language l satisfies 1 l controllable respect lm 1 2 l distinguishing language z 0 g 1 z 2 g controllably distinguishing set states g region weak attraction g 1 km 2 1 2 proof demonstrate language l satisfies definition 44 respect lm 1 lm 2 controllable respect lm 1 g define machine momega g discussed section 22 let lm momega language marked machine g marked states define x 2 lm satisfy definition g ie ffi k z symbol defined every string lm momega definition g define l lm momega x toe 2 l 2 lm momega oe controllably distinguishing event z must show language finite satisfies definition controllability satisfies definition distinguishing language 1 l finite ofomega gg cycles gj finite 2 l controllable respect lm 1 let tomega g assume momega x definition lm momega g tomega fdefinition lm momega g hence l controllable respect lm 1 3 l nonempty z 0 fmomega gconnectedg fdefinition g xg momega x 4 pprl momega x fdefinition momega k g fproperty regular languages fsmg 5 fdefinition g lg fdefinition g xg differentz oe fdefinition gg last three items combine show l satisfies conditions distinguishing language let v denote graph representation product machine 1 km 2 consider subgraph obtained running strings l v define state product machine reached string closure l included v 0 transition traversed string closure l included 0 since l finite pprl defined simple algorithm generate subgraph consider states reached string la recall la denotes strings l last symbol removed following lemma follows easily definition distinguishing language controllability lemma 41 l assumed statement proposition z 0 g defined statement proposition 42 following lemma provides realizability v v u lemma 42 realizable respect v u proof facts must show z 1 notice construction v 0 w 2 pprl implies z controllable respect end proof lemma 42 lemma 41 realizable cycles v proposition 21 z 0 g desired cycles work required idea disable cycle show remaining subgraph still gconnected realizable finite graph finitely many cycles con sequently disabling cycles subgraph remaining gconnected realizable acyclic proposition 21 z 0 g desired must show cycles may removed retaining connectedness realizability subgraph start classifying transitions 0 transition included class c must included 0 controllability reasons ie subgraph would lose realizability characterization specific transition transition included c hence transition included class r must included 0 reachability reasons ie node would longer gconnected without presence specific transition transition included r hence exist w 2 path labeled w z 1 g subgraph assume cycle v transition z cycle cr clearly remove transition retain gconnectivity realizability fact follows facts transition z 1 oe z 2 c r controllable another path subgraph z 1 g use transition question hence remove cycles deleting transitions c r done assume cycle remaining transitions transition cycle construction subgraph string 2 pprl following lemma provides crucial result lemma 43 let l c r cycle transitions c r strings arbitrary length l proof let x 2 labels transitions cycle ie denote state immediately preceding label xi ie transition cycle note z controllability l respect fact every transition cycle c r clear pprl result holds ie implying sx pprl end proof lemma 43 last statement contradicts finiteness l consequently cycle consisting transitions c r result lemma 43 cycle subgraph removed retaining g connectivity realizability hence conditions proposition 21 satisfied get z 0 g end proof proposition 42 based proposition 42 define predicate true two machines distinguished described proposition definition 46 given machines 1 2 9oe two machines satisfy predicate machines languages said controllably distinguishable following corollary provides application proposition 42 resolving uncertainty gives two potentially correct models z 0 g supervisor corresponding machine represented graph created algorithm generates region weak attraction built constrain behavior unknown system incorrect model identified finite number transitions see 13 details machine representation supervisor used control plant corollary 41 let 1 2 two models one correctly models plant let controllably distinguishing set states 1 2 z 0 correct model chosen finite number transitions proof proposition 42 z 0 g exists finite nonempty controllable language l string language distinguish theorem 21 supervisor f constructed hence plant controlled execute strings l since one models correctly models plant pprl lm proper prefix string l executed plant since last symbol string either executed depending whether model defined language proposition 42 z 0 g construct string arbitrary length plant execute supervisor may disable events inconsistency observed end proof corollary 41 complexity approach governed necessity consider product machine 1 2 order determine distinguishing language operation requires ojq 1 jjq 2 operations paper dependency complexity size event set assumed constant factor hence included expression order complexity shown section 51 sharp bound complexity 42 distinguishing multiple models technique distinguishing multiple models reset capability available extension technique used distinguish two models strategy construct product machine two models set models results considering possible permutations uncertainties product machine calculate region weak attraction set controllably distinguishing states two models described corollary 41 using machine generated region weak attraction supervisor plant least one models removed set possibly correct models controlling plant enter state component one product states set controllably distinguishing states least one models eliminated possibly correct model reset plant start procedure another pair models note possible neither models chosen correct model system hence plant might generate string defined either models used generate supervisor case models removed procedure continues choosing another two models procedure continues uncertainties resolved pair models found satisfy conditions corollary 41 denote possible model initial number models correct model chosen denote initial set possible models using notation given model minimal canonical form 5 9 following algorithm specifies procedure given p denotes actual machine plant correctly modeled algorithm 41 input 0 given output additional uncertainties resolvedg algorithm js use determine model still possibly correct model model consistent plant determined inconsistent plant g reset plant end end algorithm worst case product every pair models would need calculated check pairs satisfy z 0 k models calculation products results algorithm slight modification proposed algorithm simulate models p strings result using plant using technique model cannot successfully simulate activity plant eliminated consideration need considered future pairing modified approach also worst case complexity ok 2 jqj 2 since guarantee one model eliminated iteration also actual complexity accomplish simulation results additional okjqj 2 term operation count counts result following reasoning calculation adds count k 2 pairs calculated hence ok 2 jq 2 j term count simulate test string remaining potential models okjq 2 j operations necessary hence term added count retaining overall complexity demonstrate correctness algorithm several points must addressed insuring bad models removed order choosing models test distingm affect output technique might produce smaller set potential models 421 bad models removed first point easily addressed model removed inconsistent plant inconsistency arises either plant executing transition model uncontrolled transition plant executing transition defined model state single controlled uncontrolled transition defined model executed plant hence bad models removed set used keep potentially correct models note consistent model removed set 422 order affect result second point subtle priori appears order testing models might significant ie might incorrect model combined another incorrect model b generates test string provides model b removed model b combined correct model test string cannot generated order matter follows following proposition proposition 43 states pair models j satisfy z 0 2 removed set possibly correct models correct model c satisfy z 0 model j used remove model c used instead statements following propositions language generated model usually denoted lm denoted l proof proposition 43 language l used link fact initial state region attraction product machines conditions l similar conditions distinguishing language j however fact neither j might correct model requires slightly different characteristics describe j used generate supervisor cause removed set possibly correct models following c denotes correct model z 0ij initial state km j z 0ic initial state km c g ij set controllably distinguishing states km j g ic set controllably distinguishing states km c proposition 43 z 0ij removed set possible machines z 0ic proof consider language l marked supervisor generated used remove assumptions proposition statement language generates tests used remove set potentially correct models first describe characteristics language satisfies lemma 44 l controllable respect l b c pprl l finite nonempty proof controllability l respect l l j follows construction fact l controllable respect l follows fact prefixes closed loop behavior necessarily constrained l c strings occur distinguishing language generated consist following types 1 strings occur plant j ie 2 strings occur plant j ie l c l j l c 3 strings occur j plant ie l c 4 strings occur plant j ie supervisor cause removed set possibly correct machines strings occur three must prefix strings cause removed hence pprl supervisor cause removed set possibly correct machines controllable fashion claim strings 2 3 4 occur strings language see shaded areas figure 3 string occur still allow removed set possibly correct machines string would allow removed observation gives part b finiteness l result fact l nonempty result fact removed ie least one event must used determine correct end proof lemma 44 use language demonstrate z 0ic demonstrate fact verifying l satisfies requirements proposition 42 c c figure 3 parts languages allow removal 1 l finite nonempty l finite nonempty hypothesis 2 l controllable wrt l c definition l 2 l toe toe controllable wrt 3 4 pprl l c since l satisfies requirements proposition 42 respect immediately z 0ic end proof proposition 43 proposition 43 provides order matter choosing pair models use generate next test combined first point bad models removed sufficient test bad models correct model never removed set potentially correct models 423 optimal complexity algorithm address question whether procedure might used generate smaller set potentially correct models proposition 44 algorithm 41 provides minimal set potentially correct models minimal sense exist another technique controllably remove models removed algorithm 41 set potentially correct models finite number transitions proof let set potentially correct models output algorithm 41 done ie g jsj 1 know since test distingm satisfied pair models consequently particular know z oic assume technique controllably removes c remove test must cause reach state inconsistency plant arises state component state g ic otherwise controllability constraints cannot removed test 1 know construct behavior never enters g hence contradiction cannot technique controllably generate smaller set potentially correct models end proof proposition 44 424 resolving uncertainty without reset resolve uncertainty without reset capability slight modification must made algorithms given previously modification consists updating models still consideration reflect actions actual plant taken update manifested modifying model descriptions initial state dependence events already occurred hence old model modified string executed point note initial state needs dependence components model need modified note modification models must updated determine new initial state test string executed region attraction set distinguishing states however actual region attraction need recalculated states attracted distinguishing states change test string initial state changes need simulate test strings increase complexity algorithm worst case algorithm could require ok 2 regions weak attraction calculated find enough test strings hence algorithm also ok 2 jqj 2 complexity 5 examples 51 optimality single transition uncertainty example demonstrates resolving single uncertainty complexity least great creating product machine two potentially correct models complexity arises fact product machine used generate set controllably distinguishing states hence minimally distinguishing language example z event uncertain arcs dg figure 4 illustrates two possible transition functions machine c c c c z z figure 4 set models product method optimal following procedure specified proposition 42 create product machine figure 5 calculate states g used distinguish q 11 q 21 region weak attraction g graph representation transition function product machine determine figure 5 observe state current g q 00 region weak attraction q 1m2n hence limit calculations new set g g iterations algorithm calculate region weak attraction given hence proposition 42 since z 0 two states q 11 q 21 controllably distinguishable uncertain arc resolved observe q 1m2n 2 g 0 string zc n ad n occur uncontrollably reaching q 1m2n hence resolve uncertainty every state reached product machine initial state might visited fact demonstrates resolving uncertain transition requires omn operations resolve uncertainty construct supervisor finite state machine representation shown figure 5 run unknown plant supervisor closed loop system see 13 detail proce dure distinguishing language example 52 finiteness languages proposition 42 example demonstrates requirement finiteness proposition 42 1m22 q 1m2n 01m 022 c c c c c c z figure 5 product machine system product method optimal languages two possible models 2 u v 2 u see figure 6 machine representation languages z zm figure system demonstrate requirement finiteness example l controllable respect required language used distinguish l 1 l 2 described proposition 42 however initial state product machine region weak attraction set controllable distinguishing states empty example 6 conclusions paper presented model uncertainty related transitions systems modeled finite state machines developed test determining whether uncertainty controllably solved test using region weak attraction calculation also provides algorithm constructing supervisor resolve uncer tainties example demonstrating optimality deterministic approach single uncertainty provided also example given demonstrates controllability finiteness requirements necessary proposition 42 approach choosing correct model applied situation set models correct one chosen several possibilities exist extensions work one possibility expand model used describe discrete event system one describe broader category systems petri net 8 algebraic 10 models another direction current interest influence different uncertainty models control stabilization systems modeled discrete event system formalisms influence incorporates effect limiting behavior system desired constraint language would correctly controlling system resolving uncertainty model extension consider addition unobserved events affects problem described work acknowledgements authors would like thank ratnesh kumar steve marcus alex tom linson reviewers critically reading assisting preparation paper r design analysis computer algorithms inductive inference theory meth ods stabilization discrete event pro cesses graph theory applications engineering computer sciences system scanning issue synthesis feedback control logic class controlled petri nets introduction automata theory algebras discrete event models language stability stabilizability discrete event systems supervisory control class discrete event processes control discrete event systems diversitybased inference finite automata inference finite automata using homing sequences theory learnable paradigms puzzles theory dynamical systems transition uncertainty discrete event systems tr ctr henrik jacobsson crystallizing substochastic sequential machine extractor cryssmex neural computation v18 n9 p22112255 september 2006