towards principled design software engineering diagrams diagrammatic specification modelling programming languages increasingly prevalent software engineering often claimed provide natural representations permit intuitive reasoning desirable goal software engineering rigorous justification reasoning yet many formal accounts diagrammatic languages confuse destroy natural reading diagrams hence cannot said intuitive answer feel examine seriously meaning accuracy terms natural intuitive context paper highlights illustrates means examples taken industrial practice ongoing research theme authors take deeper cognitively informed consideration diagrams leads us natural formal underpinning permits formal justification informal intuitive arguments without placing onus formality upon engineer constructing argument ii principled approach identification intuitive counterintuitive features diagrammatic languages b introduction diagrammatic representations attempts formalise area increasing attention modern software engineering visual specification modelling languages notably uml 21 domainspecific programming languages 15 24 typically strong diagrammatic flavour software architecture description languages adls diagrams 1 2 25 add claims natural intuitive ways thinking software sys tems many grand claims made diagrams naturally think systems yet even accept least partly true clearly debatable issue begs questions kinds diagrams intuitive natural way think systems importantly purposes paper formal accounts typically provided diagrammatic languages succeed accurately capturing whatever natural intuitive representations taking seriously assertion diagrams useful intuitive well matched meaning natural directly capture well matched mean ing formal underpinning diagrams software engineering truly useful must therefore reflect intuitive natural aspects diagrams paper demonstrate approach feasible well desirable commence next section review critical issues theory diagrammatic representa tion section 3 present typical diagrammatic software language taken industrial embedded control software motivate illustrate detailed exploration concepts natural intuitive section 4 presents simple formalisation language use formal methods often advised required provision evidence desirable system properties yet practice application methods undeniably dicult section 5 illustrate approach provides formal underpinning natural previously informal reasoning onus formality lies engineer constructing argument designer original tation section 6 illustrates general approach also naturally permits identification questionable counterintuitive features diagrams conclude summary major issues raised indication directions future research studies 5 30 33 indicated eective representations well matched represent context particular reasoning tasks purposes paper assert intuitive representation one well matched furthermore assert whether representation natural concerns achieves intuitive matching certain classes diagrammatic representations particularly good naturally matching intuitive interpretations clearly two assertions beg questions natural matching achieved intuitive meanings eective representation matches natural representation diagrams previous studies typically examined two dier ing dimensions diagrammatic representations naturally embody semantic information firstly logical analyses 3 12 26 27 28 examined inherent constraints diagrams topological geo metric spatial forth explicate computational benefits second dimension studied particularly hci perspective concerns features properties impact upon cognition user 4 7 16 19 29 recently careful examination 9 analogies dis analogies typical textbased languages diagrammatic languages sought unify two dimensions naturalness examination quite revealing similarities dierences textual diagrammatic cases one primary dierence diagrams may capture semantic information direct way say intrinsic features diagram spatial layout directly capture aspects meaning diagram understanding diagrams naturally capture aspects permits us next consider specific information captured diagram truly intuitive intuitive meaning diagrams decomposition 9 issues diagrams capture information permitted identification subsequent study 11 fundamental issues relating eectiveness visual diagrammatic representations communication reasoning tasks indicated eective representation one well matched represents tuitive well matched representation one clearly captures key features represented artifact furthermore simplifies various desired reasoning tasks demonstrated 7 20 22 pragmatic features diagrammatic representations termed sec ondary notations green 6 significantly influence interpretation particular concern exploration 11 importance accounting pragmatic aspects diagrams considering well matched wait move start brake halt true alarm checks chkfault fault levelfloorcall stopped ready fault figure 1 example sfc diagram lift controller ing concrete application work formalisation diagrammatic graphbased languages industrial embedded control software commonly occurring class systems spans many dierent domains eg automotive process control asic design mobile telephony common component critical systems formalised various sublanguages programmable logic controllers plcs 14 17 concentrate plc sublanguage sequential function charts sfcs present controlflow view embedded controller diagrammatic representation sfcs illustrated figure 1 consists elements two distinct kinds rectangular boxes called steps thick horizontal lines called transitions diagrams elements kind may linked directly step labelled identifier may associated action transition carries boolean condition sfc figure 1 simplified lift controller adapted teaching example good sfc design 17 sfcs exhibit rich controlflow behaviour given time step either active inactive set active steps defines current state system step remains active one successor 1 elevator controller american readers transition conditions evaluates true thereby passing control steps targeted links emanating transition double horizontal lines introduce conclude sections diagram execute concurrently diagrams direct representations term visual representation times taken synonymous diagram however consider textual representation example propositional logic sentence p q r precise also example visual representation symbols sentence expressed readers visual sense ink marks page senses touch hearing would case braille speech example however significant dierence certain visual symbols figure 1 propositional sentence dierence certain symbols figure 1 exhibit intrinsic properties properties directly correspond properties represented domain consider reader sfc diagram instantly distinguish step transition elements represented quite distinct visual tokens rectan gles lines respectively clearly belong different categories manner obviously matched textual tokens propositional logic sen tence furthermore sfc figure 1 follows convention common many graphbased notations laying sequences steps topdown fashion leaving aside issue loops moment thus reader also instantly see step brake preceded wait move steps steps appear diagram aspects sfc diagrams examples direct representation semantic information thus general certain diagrammatic notations relations may directly semantically interpreted directness may exploited semantics diagrams systematic way systematicity exclusively preserve diagrammatic representa tions potential direct interpretation diagrams head start sentential representations systematicity stakes however understand makes diagrams eective must consider interpretation humans generally studies shown describe next pragmatic aspects diagrams play significant role typical uses successful diagrammatic languages pragmatics diagrams linguistic theories human communication developed initially written text spoken dialogues theories pragmatics seek explain conventions patterns language use carry information literal truth value sentences example discourse 1 lone ranger jumped horse rode sunset b lone ranger rode sunset jumped horse 1as implicature jump happened first followed riding contrast 1bs implicature riding preceded jumping 1a 1b implicatures go beyond literal truth conditional meaning instance matters truth complex sentence form p q p q true order mention components irrelevant pragmatics thus helps bridge gap truth conditions real meaning concept applies equally well use diagrammatic languages practice indeed recent history work draws parallels pragmatic phenomena occur natural language established theories phenomena occurring diagrammatic languages 9 18 20 studies digital electronics engineers using cad systems designing layout computer circuits demonstrated significant dierence novices experts use layout capture domain information 23 circuit diagrams layout components specified semantically significant nevertheless experienced designers exploit layout carry important information grouping together components functionally related contrast certain diagrams produced novices considered poor either failed use layout particularly awful examples especially confusing misuse common layout conventions adopted experienced en gineers correct use conventions thus seen significant characteristic distinguishing expert novice users conventions termed secondary tations 23 shown 20 correspond directly graphical pragmatics 18 straightforward example use pragmatic features may readily observed sfc diagram figure 1 diagram simplified version sfc 17 nevertheless retained layout original sfc note carries important information concerning application represented main body sfc figure 1 conceptually partitioned three regions illustrated following outline f region n concerned normal operation alarmraising component f performs fault detection eg action checks monitors state lift raises boolean signal fault whenever fault occurs recent studies users various diagrammatic languages notably visual programming lan guages highlighted similar usage graphical pragmatics 22 major conclusion collection studies correct use pragmatic features layout graphbased notations significant contributory factor comprehensibility hence usability representations diagrammatic reasoning sfc example one major tasks sfc notations intend support inference system designers sequences states may system exhibit desirable sequences formulated terms system prop erties prominent among safety properties instance appropriate lift controller property safe expressed assuming faults lift always stops next call attended example 1 diagram figure 1 exhibits property safe 1 main loop entered assumption faultfreeness implies control retained within loop 2 loop forms single path step move includes condition stopped crucial part 2 argument observation paths diagram correspond semantically temporal orderings events single path exists current step step b condition appears along path next activation b must preceded occurrence desirable software engineering goal support formalisation informal arguments argue formalisation eective eective diagrammatic representation accurately structure aspects represented artifact pertinent required reasoning tasks example essential informal argument preceding example ability focus precisely part diagram responsible property safe focusing loop excluding alarmraising faultchecking parts dia gram formalisation readily permit similar structuring clearly less eective one consider numerous less direct ways capturing semantics sfcs common one enumerate possible states sfc transition system 31 example 2 transition system modelling behaviour lift controller states reachable sets steps transitions possible combinations ie sets conditions small part transition system given step names truncated initials ready floor fault zz floor fault wcf mc level fault level fault mcf b cf stopped oo b c fault resulting transition system typical formalisation obscures structure necessary informal argument example 1 paths transition system result interweaving events belonging several concurrent components sfc contrast informal argument example 1 arguing properties safe model example 2 generally hard exclude behaviour originating parts system otherwise unrelated property question could argued hardly problem small sfcs size transition system grows rapidly number concurrent components sfc supporting intuitive reasoning significant determiner makes particular representation eective simplify various reasoning tasks formalisation semantics representation must therefore ensure reasoning tasks equally easy one benefit certain diagrammatic representations oer support potential directly capture pertinent aspects represented artifact whether concrete artifact abstract concept seen directness typically intrinsic feature di agrams determining aspects represented artifact pertinent requires consider pragmatic well syntactic aspects representations example operation lift controller example conceptually partitioned three modes normal alarmraising fault checking behaviour layout sfc diagram figure 1 given step transition membership one modes represented membership identifiable region graph one regions n f thus conceptual aspect artifact membership behavioural mode directly captured representing relation diagram matching logical properties membership spatial region plane note case expert designers cad diagrams visual programs studied 23 22 pragmatic features diagram layout chosen suggest conceptual regions exploited carry information indeed original sfc diagram 17 example simplification regions strikingly well de lineated outline next formal description sfc diagrams reflects direct pragmatic features leading formal underpinning intuitive arguments one safe property illustrated let sets step identifiers transition conditions respectively one way describing structure layout sfc diagrams construct algebra diagram expressions expression denotes particular way decomposing diagram 10 begin let atomic diagrams denoted respectively also write respectively branching elements introducing operations algebra facilitative visualise diagram expression abstract diagram defined whenever number connections emanating bottom equals connections entering juxtaposes left two operations defined resulting resulting writing sfc expressions shall assume higher precedence least precedence main body example may expressed level brake fault alarm 1 denotes vertical line examining original sfc one see expressions n f correspond regions identified end section 3 finally expression entire controller algebraic methods diagram description one outlined may called analytic term originally due mccarthy emphasise decompositional view diagrams carefully designed descriptions generally simpler abstract synthetic ones eg based graph gram mars naturally lend analysis diagrams semantic logical standpoint almost every nontrivial diagram may decomposed variety ways thus allowing multiple semantic interpretations also multiple routes constructing reasoning arguments based diagram semantic logical analysis software diagrams therefore required ensure consistency interpretations also validate many commonly occurring reasoning arguments viewing formalisation means validation informal semiformal reasoning practices emphasises formal analysis tool notation designer imposition user provision rigorous evidence desirable properties software systems required highly costly activity many domains especially products subject regulation certification eg safetycritical systems use formal methods supplying evidence often recommended mandated eg semsplc guidelines 13 mod guidelines 32 practical application remains undeniably dicult largely formal methods rely intimate knowledge explicit manipulation underlying generic model typically less concerned useroriented representations thus given system expressed diagram property traditional approaches typically consist 1 obtaining behavioural model md function transition system etc 2 formalising p formula p suitable logic 3 verifying whether md p ie whether model satisfies formula contrast many informal semiformal arguments appeal directly domainspecific features systems representation gain remarkable simplicity neverthe less elevation arguments level admissible rigorous evidence requires formal underpinning justification logical means roughly speaking approach attempts substitute structural ie algebraic models diagrams behavioural models step 1 instance dd algebraic expression denoting actual sfc diagram formula p expresses property reasoning problem step 3 reformulated dd p terms example property safe main body lift controller liftbody safe 1 continuing illustration property safe may expressed temporal formula 31 let instance astopped interpreted always 1 b 2 1 implies important precise definitions b crude formalisation rather aim illustrate overall structure formula expresses assumption computation always fault expresses commitment system implicit inferential shortcuts informal argument example 1 may formalised thus justified means inference rules instance one rule views concurrency conjunction com ponents respective properties rule 1 another rule eliminates part diagram inaccessible given assumptions rule 2 starting goal 1 equivalently written applying rule 1 yields subgoals n safe f true second trivial rule 2 applied definitions safe discard alarmraising component concentrate part precisely responsible property n safe soundness rules must eventually established wrt behavioural model obligation however lies user andforall developers diagrammatic notation 6 disturbing diagram features benefit approach relates overall design diagrammatic languages rigorous examination concepts natural intu itive relate diagrams paves way principled identification specific features contravene concepts thus far concentrated core features sfc diagrams pursuit goal demonstrate formal analysis tool design software engineering diagrams shall briefly introduce extra feature subject semantic analysis examine insights resulting analysis semantic model associated sfcs labelled petri nets concept widely used well understood domain basic sfc notation highly suggestive association unfortunately definition sfcs 14 abounds extensions forcefully violate analogy one exten sion called action qualification permits certain actions set active step continue invoked following steps deactivation actions remain active either indefinitely explicitly reset step elsewhere diagram mechanism actionstep association visualised attaching oblong box step follows step q qualifier many qualifiers permit ted look n usually omitted standing normal r standing set set example sfc diagram making use feature given figure 2 describe sfc diagrams nets uniform way shall following 8 think collection objects relations among notation given relation r write x z r objects x z related via r view one abstraction sfc diagram fig 2 objects 1 5 b c responding steps actions transitions relations abstraction capture links action step associations relation l x l r p3 p6 figure 2 sfc diagram corresponding net directed link exists x diagram eg type r n qualifier binary relation q x q x step associated via q example us call abstraction captures regard essential diagram labellednet semantics example diagram given also diagrammatically fig 2 place net labelled zero actions abstraction p associated net objects places transitions labels relations f corresponding flow net ie x f single directed link exists object x object place p labelled action proceed evaluate degree correspondence abstractions modelling diagram semantics mapping abstraction w abstraction w maps objects w w also relations w relations w mapping called homomorphism every relation r holds objects x w corresponding relation mr w holds corresponding objects mx consider situation abstraction w adequately captures everything deemed relevant diagram whereas w captures relevant aspects artifact represented diagram existence homomorphism h w w signify part tells us every relation artifact regard important corresponding relation diagram moreover tells us every firstorder logical statement relations w translates statement w holds original w returning running example let us derive slightly higher abstraction objects relation l one additional relation abstraction call u provides partial information users interpretation sfc diagram particular g contains exactly actionstep associations explicitly guaranteed diagram thus hold semantic interpretations respect meaning qualifiers thus example 4 g association depends history computation leading 4 one observes homomorphism p u every candidate map p 4 p 5 4 p 5 g forced conclude important semantic lation actions invoked mode system systematically visualised introduces complications reasoning suggests introduction r qualifiers poorly integrates core notation using elementary semantic analysis thus shown questionably convenient features iec sfcs introduce seriously dangerous mismatch users intuitive interpretation graphical representation actual semantics presence features knowledge global structure sfc may required overall behaviour inferred behaviours currently active steps knowledge may extremely hard establish accurately large diagrams 7 conclusions future work paper presented overview ongoing research theme authors use diagrams diagrammatic languages become increasingly prevalent software engineering claims natural intuitiveness typical summarised primary findings deeper cognitively informed examination proclaimed benefits findings indicate considered approach common required formalisation diagrammatic languages successfully provide equally natural intuitive support practical use benefits considered approach illustrated examination industry standard language sfcs sequential function charts embedded controllers consideration features language natural intuitive guided design simple formalisation shown supports validation typical informal arguments concerning desirable system proper ties furthermore argued validation formal details best seen responsibility designer language rather user engineer constructs informal argument present exploring extending approach following areas development concrete framework exploring connection semantics diagrammatic languages form natural encoding semantic properties features language implications features carry intuitive semantic meaning broader application approach plc languages domain specific languages generally specification modelling languages exploration tool support specifically design diagrams specific languages sfcs generally design exploration novel diagrammatic languages benefit approach paves way towards principled exploration specific features diagrammatic languages permitting ready identification potentially dangerous misleading otherwise counterintuitive features diagrammatic languages become commonplace software engineering whether design modelling programming need sound basis design languages becomes ever pressing basis serve guide design diagrammatic languages benefit rigorous formality without sacrificing intrinsic intuitiveness appeal work reviewed paper provides foundation upon basis may developed r formalizing style understand descriptions software archi tecture formal basis architectural connection logic vpls novice program comprehen sion dierent languages compare 15th ieee symposium visual languages vl99 cognitive dimensions notations usability analysis visual programming environments cognitive di mensions framework isomorphism theories diagrammatic reasoning distinguishing component problems formalising pragmatic features graphbased notations towards model theory venn diagrams institute electrical engineers iec 11313 programmable controllers part3 programming languages diagram sometimes worth ten thousand words programming industrial control systems using iec 11313 avoiding unwanted conversational implicature text graphics visual language ory towards humancomputer interaction per spective grice graphics pragmatic implicature network diagrams omg ad990608 part looking isnt always seeing readership skills graphical programming requirements graphical notations professional users electronics cad systems case study formulations formalisms software architecture operational constraints diagrammatic reasoning derivative meaning graphical representations cognitive theory graphical linguistic reasoning logic im plementation image language human reasoning syllogistic illustration uk ministry defence representations distributed cognitive tasks tr cognitive dimensions notations modal temporal logics looking isnt always seeing formalizing style understand descriptions software architecture formal basis architectural connection operational constraints diagrammatic reasoning situationtheoretic account valid reasoning venn diagrams towards model theory venn diagrams visual language theory isomorphism lack representations diagrammatic reasoning theories diagrammatic reasoning derivative meaning graphical representations formalizing pragmatic features graphbased notations vpls novice program comprehension ctr helen c purchase ray welland matthew mcgill linda colpoys comprehension diagram syntax empirical study entity relationship notations international journal humancomputer studies v61 n2 p187203 august 2004 helen c purchase linda colpoys matthew mcgill david carrington carol britton uml class diagram syntax empirical study comprehension proceedings 2001 asiapacific symposium information visualisation p113120 december 01 2001 sydney australia