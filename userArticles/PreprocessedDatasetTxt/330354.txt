managing requirements inconsistency development goal monitors abstractmanaging development software requirements complex difficult task environment often chaotic analysts customers leave project replaced others drive development new directions result inconsistencies arise newer requirements introduce inconsistencies older requirements introduction requirements inconsistencies may violate stated goals development article techniques presented manage requirements document inconsistency managing inconsistencies arise requirement development goals requirements development enactment specialized development model called requirements dialog metamodel presented metamodel defines conceptual framework dialog goal definition monitoring case goal failure dialog goal reestablishment requirements dialog metamodel supported automated multiuser world wide web environment called dealscribe exploratory case study use reported research supports conclusions 1 automated tool supports dialog metamodel automate monitoring reestablishment formal development goals 2 development goal monitoring used determine statements development dialog fail satisfy development goals development goal monitoring used manage inconsistencies developing requirements document application dealscribe demonstrates dialog metamodel enable powerful environment managing development document inconsistencies b introduction requirements engineering characterized iterative process discovery analysis designed produce agreedupon set clear complete consistent system requirements process complex difficult manage involving surfacing stakeholder views developing shared understanding building consensus key challenge facing analyst management analysis dynamic set requirements evolves throughout pro cess although variety techniques developed support aspects process support requirements monitoring lacking article describe requirements dialog metamodel dealscribe tool developed address need key feature dealscribe ability monitor state requirements development alert analysts policy violations arise development process managing requirements dialog stakeholder dialog pillar requirements development process techniques developed facilitate dialog eg jad prototyping serial interviews document track requirements evolve eg case requirements dialog viewed series conversations among analysts customers stakeholders develop shared understanding agreement system requirements typically analyst converses customers needs turn analyst may raise questions requirements lead conversations within development team analysts also converse among questions arose analysis requirementssometimes result sophisticated analytic analysis times result simply reading two different paragraphs requirements document like many dialogs requirements development difficult manage empirical studies documented difficulties communication breakdowns frequently experienced project teams requirements determination group members acquire share integrate projectrelevant knowledge2155 requirements analyses forgotten different requirements concerning objects arise different times inconsistency ambiguity incompleteness often result research described article focuses specific critical issue tracking managing requirements dialog monitoring requirements development goals consistency using requirements dialog metamodel describe analysts benefit development goal failures alerts facilitate development requirements document free conflict article describe requirements dialog metamodel ii automated support dialog metamodel presented section iii next instantiations operations support analysis presented iv final sections present case study summaries v observa tions vi conclusions vii however begin remainder introduction motivates research places context inconsistency driver requirements dialog inconsistency central driver requirements dialog understanding monitoring inconsistency one support management requirements inconsistency develop ment two basic drivers requirements inconsistency 1 technical 2 socialpolitical technical drivers requirements inconsistency generally arise errors description include voluminous requirements shear size requirements document set lead inconsis tency varied used terminology especially true requirements modi fied one change request lead cascade change requests requirements reach consistent state complex requirements complexity domain software specification make difficult understand exactly specified components interact changing requirements requirements document developed new requirements added older ones updated result document typically transitory state many semantic conflict exists expected resolved simply bring current state implicitly understood analyst socialpolitical drivers requirements inconsistency arise differences goals held various system stakeholders include changing unidentified stakeholders analyst report initial stakeholder set defined project inception changes project progresses example analysts felt could understand system requirements interacting actual users however access often difficult come by24 moreover one department organization may claim customer however comes final purchase decision may another department24 organizational interactions lead drastic changes requirements changing requirements addition technical problem tracking changed require ments social problem informing stakeholders consequences changes well managing stakeholders requests expectations change changing analysts life project composition team members change consequently requirements concepts expressions vary time drivers similar factors found cause failures many information sys tems25 study concluded many information system failures could attributed poor analysis important stakeholders supported mis research2742 addi tionally industry marketoriented analysts recognized need address multiple often hidden stakeholders interacting requirements24 b need support analyst inconsistency management requirements analysts need tools assist reasoning requirements degree computer aided software engineering tools successful providing support modeling code generation52336 however less successful supporting requirements analysis23 fact downstream lifecycle successes tools may one reasons systems analysts spend greater percent time requirements analysis ever before17 thus analysts benefit techniques tools directly address requirements analysis significant part requirements analysis concerns identification resolution requirements faults faults include incorrect facts omissions inconsistencies ambiguities 33 many current research projects aimed identifying faults requirements include model checkers terminological consistency checkers knowledgebased scenario check ers additionally generic tools simulation visualization available requirements analysts part tools cousins similar tools applied programming languages check syntactic errors perform checks programs inputs path execu 4tion however requirements faults related back original stakeholders much support resolving faults yet still belief conflict identification resolution key systems development2542 empirical studies software development projects identified need issue tracking tools856 typical problems include 1 unresolved issues become obvious integration testing 2 tendency specific conflicts remain unresolved period time inadequate tools tracking issue status eg conflicting resolved identified great concern practicing system engineers c research addressing requirements management growing literature requirements inconsistency management fickas feather proposed requirements monitoring track achievement requirements system execution part architecture allow dynamic reconfiguration component software14 feather produced working system called flea allows one monitor interesting events defined requirements monitoring language12 finkelstein since illustrated technique may used monitor process compliance11 example organizational compliance iso 9000 ieee process descriptions28 work dialog monitoring derived work also include element dialog structuring two projects explicitly address requirements dialog structures first chen nunamaker proposed collaborative case environment tailoring groupsystems decision room software requirements development7 using ccase one track develop requirements consensus second potts et al defined inquiry cycle model development instill order requirements dialogs40 requirements developed response discussions consisting questions answers assumptions tracking types dialog elements refinements dialog maintained inconsistency ambiguity incompleteness kept check specific development operations requirements analysis eg scenario analysis workflow process modeling provide solutions management requirements development50 possible example generate work environment hierarchical multiagent process specification30 attempt incorporate process models case tools29 however tools generally aid process enactment constraint enforcement however leo osterweil notes experience studying actual processes attempting define convinced us much sequencing tasks processes consists reactions contingencies foreseen unexpected38 support reactionary approach dialog metamodel ecshews process enforcement supports expression monitoring process goals variety projects indirectly address management requirements inconsistency include 1 ontological approach conflict surfacing assisted providing set meaningful terms ontology one specify conflict relationships requirements64158 2 methodological approach application system development method surfaces conflictsfor example core31 ethics32 soft systems method4 viewpoints37 cora43 3 technological approach specific technique automation used surface requirements conflictsfor example conflict detection collaborative messaging environment31822 structurebased conflict detection51 scenariobased conflict surfacing22640 conflict classifica dialog metamodel 4 managing requirements inconsistency development goal monitors gsu working paper cis 974 tion1020 dialog metamodel virtue metamodel neutral approaches 1 use dialog model methodology conflict ontology automated techniques instantiated elements dialog model example inquiry cycle model defined instantiating information subtypes requirement question answer reason decision changerequest specified inquiry cycle model40 dialog metamodel provides framework instantiate elements implementation dealscribe provides automation definition execution monitoring dialog requirements development needs dialog metamodel design requirements dialog metamodel implementation dealscribe driven following requirements development needs need represent multiple stakeholders requirements even initially conflicting need identifying understanding requirements interactions need track report development issues need support dynamic dialogdriven requirements development need develop shared understanding consensus requirements analysis negotiation show needs supported requirements dialog metamodel implementation dealscribe ii dialog metamodel support experiments automated assistance dialogs defined dialog metamodel dmm depicted figure 1 three basic components metamodel statement model statements added dialog people agents involved dialog dialog choose term dialog metamodel rather common term process model due specific modeling dialog processes use metamodel define models 7lph ldorj6wdwhphqw0rgho ldorjrdo0rgho fig 1 illustration dialog metamodel dialog metamodel 5 managing requirements inconsistency development goal monitors gsu working paper cis 974 statement model two subtypes statement hierarchy information passive statement adds new information dialog reference copying external information source operation active statement adds new information derived computation based prior dialog statements statement history dialog statement history simply recorded set statements part particular dialog point time statements created said asserted statement history goal model dialog goal model declarative prescription dialog rules indicating things relative order statements well content examples dialog goal models include roberts rules order software development lifecycle enforcement dialog goal model may carried statement preconditions restrict addition statements dialog conversely statements may unrestricted operations analyze statement history determine degree compliance dialog goal model either case information operation statement subtype said support specific dialog goal precondition maintains goal b operation partially determines state goal dialog metamodel regards dialog stream statements fall passive information active operations correspondence dialog goal model kind metamodel proven quite useful example metamodel refined define typical process model distinction process product first consider information statement product second consider basic operation statements actions within process model third consider dialog goal model explicit definition process model fact dialog metamodel process model explicit representation process goals enactment history find dialog metamodel suitable modeling requirements development article use adaption cora metamodel supported within dialog metamodel aim conflictoriented requirements analysis cora metamodel provide representations operations useful analyzing resolving requirements inconsis tencies43 basic entities include requirement interaction transformation using entities subtypes one represent requirements inconsistencies interactions resolve application transformations address management requirements inconsistencies adapted coras original model include entities useful dialog style development include basic entity refine ments new subtypes requirement informalrequirement structuredrequirement addi tionally added information mark subtypes including note question request new statement types aid analysts dialog requirements well development requirements finally added new operation statements provide feedback current state requirements section iv presents operations application monitoring operations provide key capability managing requirements inconsistency iii tool support dialog metamodel developed tool called dealscribe supports digital interactions characterized using dialog metamodel 2 dealscribe created building upon two existing tools hypernews conceptbase hypernews provides discussion system similar usenet news world wide web interface forum user post typed text messages message may posted forum response particular message www view forum provide overview discussion messages laid tree format shows replies message indented see figure 3 hypernews provides various views forum user notification new responses email interface security administrative functions conceptbase deductive database provides concurrent multiuser access otelos objects19 classes meta classes instances attributes rules constraints queries 2 dealscribe member dealmaker suite tools aimed assisting collaboration negotiation requirements analysis47 electronic commerce45 fig 2 portion dealscribe www page shown left named radio button indicates statement type right portion conceptbase database shows corresponding statement types viewed conceptbases graphical browser due space limitations operationtype hierarchy expanded conceptbase pane uniformly represented objects conceptbase operates server clients conceptbases graphical browser communicate via internet protocols conceptbase shown powerful tool systems development partly ability simultaneously represent query instances classes metaclasses1634 building dealscribe used conceptbase define dialog metamodel refinements adaptation cora metamodel conceptbase also stores dialog history instances dmm actual interface dialog history managed adaptation hypernews generates statement input output forms definitions dmm stored conceptbase thus dealscribe statements simple text hypernews input forms typed attributes even result operation eg program conceptbase query figure shows screen portions dealscribe conceptbases graphical browser dealscribe add message button types defined corresponding conceptbase defi nitions statements added particular dialog asserted conceptbase instances statement types shown figure defining dialog goal model define rules dialog analyst specifies set logical conditions called dialog goals dialog statements dialog goal defines desired properties statements interconnections possibly time example consider goal requirements defined user priority could used support standard pss05 specifies incremental development requirements user defined priority28 following conceptbase definition specifies hasuserpriority goal definition specifies hasuserpriority dialoggoal goal defined query requirements ran query retrieve requirements userpriority attribute filled value type priority conceptbase query notation refers instance retrieved database constraint applied case requirement complex dialog goals created constraint language provided conceptbase example consider case requirements associated degree inconsistency called contention may want resolve interactions among contentious requirements queryclass hasuserpriority dialogmodel isa requirement dialoggoal constraint first specify goal follows dialog goal definition resolvehighestcontensionfirst makes use derived class mostcontentiousunresolvedrequirements class defined requirements 1 resolution generated 2 exist another requirement higher contention resolution generated mostconten tiousunresolvedrequirements defined specifying goal resolvehighestcontensionfirst easy simply requirements 1 mostcontentiousunresolvedrequirements 2 interact denoted requirements requirementinter action thus resolvehighestcontensionfirst make use statement history captured con ceptbase specify goal always selecting unresolved interactions among requirements highest contention b checking dialog goal model dialog goal model used automatically check statement history compliance dialog goal model consists set goals specified check compliance statements need compared constraints expressed goal two types goal modes checked 1 goal achieved 2 goal violated failures either type called goal failure first checked simply running goal query second checked finding statements statement history meet goals constraints shown definition resolvehighestcontensionfirst modes checking specified using checkmodes typically goal violations greater concern goal violation query automatically constructed negating goals constraint 3 query defined indicated given goal g shows one construct violation query 3 dealscribe violation queries automatically defined part initialization dialog model loaded however goal constraint null violation query defined resulting query would goal class mostcontentiousunresolvedrequirements isa structuredrequirement constraint exists gr1generateresolution gr1 requirements exists thisconinteger contention thiscon exists otherreqstructuredrequirement otherconinteger contention othercon othercon thiscon exists gr2generateresolution gr2 requirements otherreq queryclass resolvehighestcontentionfirst dialoggoal isa requirementinteraction checkmodes violation viloation constraint exists req1req2mostcontentiousunresolvedrequirements requirements r1 requirements r2 queryclass checkgoalviolationg isa classlist goalviolationcheck constraint g types specified goal g ie g isa requirement checkgoalviolationg isa requirement however constraint indicates query return instances meet constraints goal g violation checking queries define determines goal met statements fail constraint possible place goals constraints constraints statement definitions integrity constraints would ensure dialog goal model maintained times rejecting statements conform dealscribe allows ever statement assertion failed would possible determine multiple goals statement violatedwhen using database technology moreover deviations dialog goal model would allowed enable flexible administration dialog goal models dealscribe runs goal checking queries determine dialog compliance c defining statements checking statement history dialog compliance considered dialog opera tions fact defining dialog goal statement models also considered dialog opera tion currently dealscribe used define dialog goal statement model instead models defined outside dealscribe using text editor conceptbase tools information statements simply defined conceptbase objects example structured requirement perspective mode description could defined follows definition dealscribe generates input form user fills select values attributes object operation statements similarly defined example runanaly sis partially defined follows like information statements object attributes operation statements may serve input fields however may serve output operation statements associated perl subroutine called user fills input attributes statement assertion begins subroutine associated statement type executed carries operation typically conceptbase query fills output attributes object statement asserted runanalysis program executes selected queries places returned objects result attribute defining monitors monitor used continually check dialog compliance dialog goal model fact dealscribe operation statement used monitor statement history 1 user asserts operation statement 1 2 user asserts startmonitor statement response 1 original assertion 1 allows input parameters 1 filled class structuredrequirement isa requirement informationstatement attribute perspective description string class runanalysis isa operationstatement attribute query optionally operation 1 may execute assert results assertion startmonitor defines conditions operation 1 invoked dealscribe run opera tion according monitor parameters stopmonitor asserted 1 statement tory depicted dealscribe figure 3 indicates 1 initial assertion modelcheck 2 subsequent startmonitor 3 subsequent monitor results finally 4 stopmonitor state ment thus monitoring divided two parts 1 condition operation invoked 2 operation additionally operation may conditions must met results asserted definition monitor specifies conditions operation invoked com monly monitor specifies operation shall invoked every transaction case monitoring goal ensure goal violation immediately detected however operations may computationally expensive either checking applicability conditions asserting results cases monitor used selectively invoke operation monitors may run periodically example modulo statement history count chronological time may assert new statements every time activated results results new dealscribes use monitoring quite useful first basic operations automatically run selectively addition simply keeping analysis current include automated synthe sis example resolution procedure defined could activated assert resolution alternatives time inconsistency asserted second goal models monitored alert remedy compliance lapses finally goal model include use monitoring example specified requirement contention monitored fig 3 portion dealscribe www page showing statement headings number icon title author date initial checkmodel statement top followed startmonitor response subsequent monitored responses three types checkmodel rootrequirementsanalysis stopmonitor final stopmonitor response ends monitoring checkmodel responses shown indented newer statements toward top periodically illustrated definition transactionmonitorcontention indicates startmonitor operation check mode set achievement indicating lack application startmonitor fulfilling associated constraints result monitor invoked operation constraints indicate startmonitor statement asserted monitors rootrequirementsanalysis operation transaction period less 30and stopmonitor rootrequirementsanalysis asserted monitoring monitor goals accomplished like monitoring consider example monitoring transactionmonitorcontention first operation statement analyzes goals achievement violation goalcheck must asserted transactionmonitorcontention input next startmonitor response goalcheck must asserted whenever monitors condition holds goalcheck invoked transactionmonitorcontention achieved goalcheck statement indicating failure asserted thus monitoring monitored part dialog goal model iv managing inconsistency developed applied techniques aimed assisting management requirements inconsistencies techniques fall two approaches based basic objective inconsistency understanding 2 inconsistency removal aid inconsistency understanding developed root requirements analysis49 technique uncovers requirements inconsistencies analyzes inconsistencies group directs analysis key requirement conflicts addresses inconsistency sense requirements incompatibility requirements conflict conflicts resolved prior constructioneven resolution use interactive resolver part runtime system second basic approach called requirements restructuring generates resolutions requirement conflicts4347 keeping theme article section shows root requirements analysis incorporated dealscribe assist management requirements inconsistency root requirements analysis summarized dealscribe dialog goal model defined next briefly indicates related requirements analysis techniques requirements restructuring also applied within dealscribe b techniques illustrated following section v case studies root requirements analysis two objectives root requirements analysis 1 understanding relationships among requirements 2 ordering requirements degree conflicting relationships information used guide analyses requirements restructuring overall procedure root requirements analysis queryclass transactionmonitorcontention dialoggoal isa startmonitor checkmodes achievement achievement constraint exists thisoprootrequirementanalysis statement thisop exists tranperiodinteger transactioninterval tranperiod tranperiod 30 exists stopmonstopmonitor stopmon statement thisop root requirements cover requirements requirement document interactions among root requirements analyze root requirement interactions specifically 1 requirements manually generalized derive root requirements 2 root requirements manually pairwise compared derive root requirements interactions 3 requirements metrics automatically derived root requirements interactions technique important provides systematic method requirements conflicts surfaced systematically selected efficient resolution following subsections summarize step root requirements objective root requirement identification determine key requirements whose interaction analysis leads discovery significant requirements relationships one could exhaustively compare every requirement every practice analysis feasible nontrivial requirements documents instead seek identify root requirements represent key concepts requirements derived elaboration binary comparison root requirements uncover every requirement relationship narrow analysis key requirements analysis applied overall procedure identifying root requirements follows 1 group requirements sets concepts reference 2 order requirements generality 3 generate select general requirements concept 4 repeat steps 13 concept generalizations meaningful 4 resulting requirements root requirements desirable root requirements minimal set cover requirements set development relationships elaboration necessary application root requirement identification informal process aimed identifying key requirements key analyses derived root requirements interactions peter g neumann notes book computer related risks satisfaction single requirement difficult enough simultaneous continued satisfaction diverse possibly conflicting requirements typically much difficult peter g neumann35 objective identifying root requirements interactions surface conflicts lead failures development operation system example individually two requirements may achieved single processor simultaneously achieving lead processor thrashing achievement neither generally requirement may 1 deplete shared resource 2 remove precondition another requirement 3 remove achieved effect another requirement interfering actions refer negative interactions requirements requirements conflict root identify requirements interactions root requirement exhaustively compared every root requirement every binary comparison analyst subjectively specifies 1 relationship type 2 probability conflict occurrence system operation relationships subjective approximate provided good characterization requirements relationships general subjective relationships commonplace among 4 note requirement generalization selective process single requirement eg thing would result thus apply generalization subjectively deem conceptually meaningful informal requirement techniques2239 well formal techniques6 type consists five qualitative descriptors indicating two requirements related types conflicting conflicting neutral supporting support ing requirement interrelationships defined formally16 even automatically derived formal requirements944 currently root requirements analysis relies subjective determination conflict potential subjective assessment probability requirements conflict occur running system consider two requirements r 1 r 2 onethird system executions result achievement r 1 r 2 twothirds results system failure probability conflict occurrence twothirds analyzing root requirements interactions root requirements interactions identified used derive useful metrics three particularly helpful relationship count requirement contention average potential conflict relationship count simply count root requirements number interactions root requirement root requirements five types rela tionships completely independent root requirement n1 neutral relationships n root requirements typically root requirements mix conflicting neutral supporting relationships requirement contention percentage relationships requirement participates conflicting thus requirements contention 1 conflicts every requirement requirements document finally average potential conflict conflict potential requirement averaged across conflicting relationships metrics derived found relationship count requirement contention average potential conflict useful using simple computations requirements rank ordered guide efficient resolution example found resolving contentious requirement first directly resolves one conflict often indirectly resolves others49 thus resolving high contention requirements first one dialog goals root requirements analysis see resolvehighestcontensionfirst iia root requirements dialog goal model dialog goal model defined technique defined root requirements anal ysis goal model indicates desired characteristics processes products occur statement history constructed construed methodology prescription application technique however following root requirements analysis dialog goals part methodology yet partial models appropriate monitoring style compliance analysis following four dialog goals root requirements analysis deriveroots 20 requirements associated root requirement deriveinteractions 10 root requirements associated interaction derivecontention 3 new interactions associated requirements contention analysis contention analysis resolvehighestcontensionfirst resolve requirements inconsistencies highest contention first goals depends previous goal sequence last goal resolvehigh estcontensionfirst followup first three basic goals rra defined section iia first three goals actually simpler defined resolvehighestcontensionfirst ever due lack arithmetic conceptbase definition slightly baroque first goal simply states root analysis take place many 20 requirements defined definition would simply involve count requirementswithnoroot requirementswithnoroot indicates requirements analyzed however using dealscribe must introduce intermediate conceptbase counting goal appropriately interpreted dealscribe leads following definition definitions requirementswithnoroot finds requirements corresponding root requirement query countgoal special parameterized query whose results interpreted dealscribe goal deriveroots fills parameters countgoal net result requirements without associated roots counted count less 20 goal achieved otherwise violated monitored dealscribe assert check goal monitor message according parameters monitor goal become vio lated definition deriveinteractions quite similar definition derivecontetion takes similar form shown however one additional attribute part goal violationremedy attribute indicates operation statement invoked automatically violation observed part monitoring upon violation remedy operation passed dialog goal results violation checking query case rootrequirementsanalysis simply ignores input updates contention attribute requirements executes asserts rootrequirement sanalysis statement see figure 3 finally root requirements model defined consist four goals illus queryclass requirementswithnoroot isa requirement constraint exists rrootrequirement r requirements genericqueryclass countgoal isa dialoggoal parameter query dialoggoal deriveroots isa countgoalrequirementswithnorootquery 20count lessercompare checkmodes violation violation queryclass interactionwithnoanalysis isa interaction constraint exists reqrequirement requirementsr eq exists coninteger req contention con dialoggoal derivecontetion isa countgoalinteractionwithnoanalysisquery 3count lessercompare l checkmodes violation violation violationremedy rra rootrequirementsanalysis trated defined goal model may selected part input run modelcheck opera tion thus multiple goal models coexist monitored different times b requirements analyses operations illustrated section dialog metamodel supported dealscribe provides convenient means experimenting monitoring requirements development goals goals expressed logical formula assertion information operation statements statement history otelos logic understood relatively simple define new statements goals monitors example incorporate aspects pss05 standard working goal model following done28 userpriority attribute requirement information statement type limitemptypriorities dialog goal seeks limit percentage requirements without user priority less 20 percent definition similar deriveroots uses goal type computes percentages based small steps found relatively simple experiment different goal models monitoring facility dealscribe provides means incorporate active monitors monitors signal goal violated illustrated derivecontetion goal active monitors initiate operations example deriveresolution goal defined upon violation goal consistency invokes resolution generation operation asserts alternative resolutions inconsistency monitors judiciously asserting suggestions background may provide means automated development analyst opposed direct assistance v case studies case studies conducted assess utility dealscribe implementation dialog metamodel specifically root requirements analysis iva applied one case without b c use dealscribe thus case studies help assess utility dealscribe well dependence root requirements analysis particular tool set discussing case studies distributed meeting scheduler case summarized requirements distributed meeting scheduler assess requirements analysis techniques tool support repeatedly analyzed case distributed meeting scheduler requirements meeting scheduler case useful 1 complex requirements interactions depending addressed lead considerable variation resulting implementations 2 availability dialogmodel rragoalmodel goals resolvehighestcontentionfirst widely circulated compact yet rich requirements document53 3 publication prior analysis case4052including own434447 hence case allows us oth ers compare analyses13 general problem meeting scheduler summarized introduction purpose meeting scheduler support organization meetingsthat deter mine meeting request meeting date location intended participants effectively participate meeting date location thus convenient possible participants information meeting also made available early possible potential participants remaining requirements four page description refine roles meeting scheduler participants b root requirements analysis inquiry cycle documents assess utility root requirements analysis applied method established requirements engineering case distributed meeting scheduler objective casestudy assess two hypotheses 1 could root requirements analysis easily incorporated existing methodology 2 could root requirements analysis add value uncovering requirement relationships fortunately obtained access analysis documents generated potts et al application inquiry cycle distributed meeting scheduler problem40 applying root requirements analysis inquiry cycle discussion docu ments able assess hypotheses given inquiry cycle analysis considered two ways apply root requirements analy sis first original requirements could analyzed casestudy would result direct comparison inquiry cycle root requirements analysis second requirements discussion inquiry cycle could analyzed initial study choose second approach provided illustration root requirements analysis could augment another method49 however subsequent case study included analyses within dealscribe figure 4 illustrates result applying inquiry cycle model distributed meeting scheduler case produced 33 questions original requirements 40 answers ques tions 38 changes requirements reasons changes made root requirements analysis conducted using processor spreadsheet program illustrated figure 4 led discovery 23 conflicting 49 conflicting relationships basic relationships root requirement shown percentage relationships figure 5 root requirements analysis useful managing requirements interactions described section iva relationship count requirement contention average potential conflict used determine requirement conflict resolved first particular found beneficial resolve contentious requirement first thus figure 5 shows r 8 r 3 among contentious root requirements however directly interact see resolvehighestcontensionfirst iiia r 8 r 13 highest conten tion thus interaction considered first part conflict resolution c assisted root requirements analysis assess utility dealscribe applied root requirements analysis requirements objective second casestudy determine 1 dealscribe could automate basic metric analyses root requirements analysis 2 dialog goal monitoring would useful first objective readily affirmeddealscribe automate root requirements analysis second objective subjective require empirical studies however based use dealscribe found goal monitoring considerable assistance managing requirements development automation study duplicated manual study use dealscribe first monitoring root requirements analysis dialog goal model started iva second fig 4 results applying root requirements analysis inquiry cycle discussion inquiry cycle ovals indicate number unique instances type arcs indicate flow analysis within inquiry cycle root requirements graph relationship counts type created root requirements analysis r rr r rr r ra rrc rr rrd r rc f rrrfig 5 graph root requirements interactions percentage requirement participates requirements five relationship types conflicting conflicting neutral supporting sup porting presented additive stacked graph ordered increasingly negative interactions observations managing requirements inconsistency development goal monitors gsu working paper cis 974 previously identified text requirements inquiry cycle discussion root requirements interactions automatically parsed asserted dealscribe statement asserted dealscribe goal failures recognized new information remedies automatically asserted see figure 3 root requirements analysis results figure 4as expected however analyses automatically asserted response goal failures incrementally occurred input thus dealscribe maintained root requirements analysis metrics including causes goal failure another case study using dealscribe conducted rather analyze requirements derived inquiry cycle discussion done previously original meeting scheduler requirements analyzed turns documents common root require ments consequently dealscribe could quickly derive rather surprising results illustrated figure 6 surprising analyzing original 53 requirements uncovered nearly many conflicts analyzing inquiry cycle discussion priori hypothesized record stakeholder interaction inquiry cycle discussion would richer informationespecially conflicting requirements turned root requirements nearly evenly distributed across three sets 10 inquiry cycle discussion 11 original requirements 20 similarly conflicting interactions nearly evenly distributed across three sets inquiry cycle discussion 11 original requirements 55 additionally 8 derived interactions original inquiry cycle roots vi observations case studies observe root requirements analysis useful independent tool support however automated monitoring root requirements analysis development goals significantly clarify development status reduce effort analysts root requirements analysis root requirements analysis valuable managing development requirements technique applied requirements irrespective form refinement provides ordering conflicting interacting requirements requirements dependencies across whole system summary information easily understandable tables graphs information root requirements analysis provides insight requirements development effort applied example one seeks 1 reduce overall number ic discussion originalreqs icorignal ic discussion originalreqs requirement conflicts requirement roots fig 6 comparison applying root requirements analysis inquiry cycle ic discussion b original requirements showing relative number root requirements requirement conflicts requirements conflicts ie seek monotonically decreasing contention 2 reduce number prior resolutions must reconsidered ie seek minimize resolution backtracking one resolve contentious interacting requirements first root requirements analysis find requirements ordering conflict interactions degree requirements contention root requirements analysis provide high level understanding requirements interac tions root identification process generalization subsequent interaction identification higherlevel interaction patterns issues emerged example meeting scheduler became apparent many root requirements interactions concerning 1 accurate meeting planning data 2 need complete meeting scheduling process timely way issues level abstraction brought stakeholders discussion nego tiation providing analysts guidance relative priorities used conflict resolution process working issues higher level requires significantly less time reviewing individual conflict promotes consistent decisionmaking throughout conflict resolution process b dealscribes dialog modeling dealscribe valuable managing development requirements dealscribe provides modeling informational operational statements modeling dialog goals monitoring goal failures monitored analyses concurrent multiuser www interface dialog dealscribe manage dialogs asserted statements represented hierarchies informational operational statements applying dealscribe meeting scheduler case helped analysts gain clearer understand requirements state helped focus development root requirements dialog model defined root analyses metrics automatically derived dealscribe thus rederiving original analysis dealscribe took essentially effort original manual root requirements analysis analysts coordinate work refer common spreadsheet prevent duplication effort contrast dealscribes dialog view dialog model monitoring provided development overview facilitated multiuser coordination finally metamodeling supported dealscribe facilitated continual refinement root requirements dialog model example update model dealscribe derived new www dialog interface vii conclusions applying dialog metamodel implemented dealscribe demonstrated utility actively monitoring development goalsspecifically goals reducing requirements inconsis tency success dialog metamodel partly attributed simple www interface various dialog views provided dealscribe however goalbased monitoring dialog key feature activating dialog monitors analysts assured alerted process product goals fail moreover specified goal remedies automatically applied goal failures active assessment development goals helps overcome chaos emerges dynamic environment multistakeholder analysis volumi nous complex changing requirements acknowledgment gratefully acknowledge help cooperation drs colin potts annie antn providing documentation inquiry cycle analysis meeting scheduler also thank dr martin feather providing tutorial goal monitoring system flea greatly assisted construction dealscribe finally thank georgia state university college business funding portions research r viewing specification design planning problem proposed perspective shift systems thinking case reliability engineering information systems using nonfunctional requirements systematically support change architecture design collaborative environment systems definition field study software design process large systems qualitative modeling tool specification criticism domain modeling hierarchies alternative viewpoints standards compliant software development requirements specification exemplars requirements monitoring dynamic environments overview workflow management process modeling infrastructure automation formal requirements modeling languages rml revisited changing roles systems analyst improving communication decision making within quality function deployment supporting conflict resolution cooperative design systems communication breakdowns boundary spanning activities large programming projects sibyl tool managing group decision rationale productivity increases expect case environment results user survey review th state practice requirements modeling information systems failuresa survey classification emperical litera ture build process integration case environments webwork meteors webbased workflow management system computer systems work designthe ethics method formalism specifications technology manage multiple requirements perspectives computer related risks framework expressing relationship multiple views requirements specification using software technology define workflow processes recording reasons design decisions supporting systems development capturing deliberations requirements engi neering group process conflict systems development gsu cis working paper 9615 electronic brokering assisted contracting software applets interactive decision support requirements negotiation supporting negotiation lifecycle surfacing root requirements interactions inquiry cycle requirements documents workshop workflow similarity reasoning approach case tools collaborative support technologies inside software design team knowledge acquisition methodology studying software design teams investigation conflict behaviors requirements definition phase experience gibis model corporate setting systematic tradeoff analysis conflicting imprecise requirements tr ctr steve easterbrook marsha chechik 2nd international workshop living inconsistency proceedings 23rd international conference software engineering p749750 may 1219 2001 toronto ontario canada steve easterbrook marsha chechik 2nd international workshop living inconsistency iwlwi01 acm sigsoft software engineering notes v26 n6 november 2001 andrs silva requirements domain specifications viewpointbased approach requirements engineering proceedings 24th international conference software engineering may 1925 2002 orlando florida george spanoudakis hyoseob kim diagnosis significance inconsistencies objectoriented designs framework experimental evaluation journal systems software v64 n1 p322 15 october 2002 steve easterbrook marsha chechik framework multivalued reasoning inconsistent viewpoints proceedings 23rd international conference software engineering p411420 may 1219 2001 toronto ontario canada licia capra wolfgang emmerich cecilia mascolo microeconomic approach conflict resolution mobile computing proceedings 10th acm sigsoft symposium foundations software engineering november 1822 2002 charleston south carolina usa licia capra wolfgang emmerich cecilia mascolo microeconomic approach conflict resolution mobile computing acm sigsoft software engineering notes v27 n6 november 2002 johan f hoorn elly konijn hans van vliet gerrit van der veer requirements change fears dictate must haves desires wont haves journal systems software v80 n3 p328355 march 2007 javier andrade juan ares rafael garca juan pazos santiago rodrguez andrs silva methodological framework viewpointoriented conceptual modeling ieee transactions software engineering v30 n5 p282294 may 2004 n robinson suzanne pawlowski vecheslav volkov requirements interaction management acm computing surveys csur v35 n2 p132190 june