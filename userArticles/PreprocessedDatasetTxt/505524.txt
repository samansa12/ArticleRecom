delay fault testing ipbased designs via symbolic path modeling predesigned blocks called intellectual property ip cores increasingly used complex systemonachip soc designs implementation details ip cores often unknown unavailable delay testing designs difficult propose method test paths traversing ip cores userdefined blocks increasingly important littlestudied problem models representative paths ip circuits using efficient form binary decision diagram bdd generates test vectors bdd model also present partitioning technique reduces bdd size orders magnitude makes proposed method practical large designs experimental results presented show robustly tests selected paths without using extra logic time protects intellectual contents ip cores b introduction reusable predesigned circuits called intellectual property ip circuits cores becoming increasingly popular vlsi systemonachip soc designs 1 3 8 11 12 14 21 present difficult testing problems existing methodologies cannot adequately handle path delay verification ipbased designs among challenging problems implementation details ip circuits hidden particularly case paths traverse ip circuits userdefined circuits conventional delay fault testing methods using standard scan 6 22 boundary scan 3 8 21 enhanced scan methods 7 9 cannot test paths effectively previously proposed method called ststest 12 test complete paths ip ud circuits requires extra scan logic nikolos et al 16 suggest calculating delays complete paths measuring delays partial paths method appears suited delay evaluation prototype circuit impractical production testing highspeed circuits due difficulty accurately measuring analog delay values address problems propose delay testing method dubbed symbolic path modeling based testing spmtest directly test selected complete paths ip ud circuits without using extra logic employs ip modeling scheme abstracts information ip cir cuits paths using special style binary decision diagram bdd protects intellectual content ip circuits also present associated atpg algorithm generates robust delay tests paths using symbolic ip path models figure 1 shows example design ud circuit udb1 ip circuit ipb1 form single combinational block like many delay fault testing methods 7 9 13 17 18 assume sensitize target paths two test patterns applied via enhanced scan register r1 uses two flipflops scan cell hold pair test patterns complete singlecycle paths exist register r1 traverse udb1 ipb1 one marked thick solid line neither ip providers extra scan register boundary scan sts intellectual property ip circuit userdefined ud circuits fig testing circuit containing ip ud blocks boundary scan test partial paths selectively transparent scan test complete paths enhanced scan enhanced scan system designers generate tests complete paths using conventional atpg methods pathdelay faults udb1s implementation details unknown ip providers ipb1s implementation hidden system designers stuckat fault testing extra logic boundary scan registers 3 8 21 multiplexers often inserted udb1 ipb1 however precomputed tests applied ip circuit via extra logic cannot detect delay fault involving complete path r1 r2 example precomputed tests applied via boundary scan fig 1 sensitize partial path one indicated thick dashed line allow testing complete paths linking ud ip circuits ststest method 12 proposed previously employs new type scan register called selectively transparent scan sts regis ter sts register fig 1 replacing boundary scan complete path like highlighted one tested test mode part sts register path made transparent parts sts register hold values preselected satisfy conditions required path sensitization ip modeling technique ststest defined 12 test complete paths specified delay range protect implementation details ip circuits overhead sts registers limit use highperformance areacritical circuits overhead tends significant designs like fig 2a complete paths traverse one ip ud block sts registers need inserted every two blocks spmtest method proposed illustrated fig 2b test complete paths without needing extra scan registers ststest require ip providers supply ip models allow system designers generate test vectors complete paths unlike ststest specifies test cube b fig testing complete paths traverse multiple ip ud blocks using ststest requires extra sts registers every two blocks b spmtest requires extra logic test ip models based ip models bddbased control alu alu control register register register enhanced scan registers selected path ip models spmtest abstracts conditions required compute tests selected paths means efficient form bdd 2 symbolic ip modeling technique eliminates need sts registers handle large ip circuits propose circuit partitioning technique decomposes bdds leads ip models practical size also present atpg algorithm acts directly decomposed bdds thus protect ip circuits implementation details given symbolic ip models spmtest finds 2pattern robust tests complete paths specified delay range tests exist finally present cad tool implementing spmtest experimental results show spmtest costefficient solution delay testing problem ipbased designs remainder paper organized follows section 2 introduces bddbased ip modeling procedure sec 3 describes circuit partitioning technique large ip designs section 4 presents atpg procedure computes final test vectors using ip models section 5 describes experimental results obtained iscas benchmark circuits modeling order allow system designers generate test vectors ip model specify sensitization conditions selected paths ip circuit first show construct model using bdds selected paths describe path selection scheme yields complete paths whose delays exceed specified threshold symbolic path modeling basic idea symbolic path modeling approach inspired 1 conditional delay model proposed yalcin hayes 23 employs bdds find critical path 2 bddbased pathdelay fault testing method 2 conditional delay model demonstrates hierarchical representation path sensitization conditions efficiently identify many false paths spmtest also exploits hierarchical structures consisting ip ud blocks identify untestable paths generate test vectors bhattacharya et al 2 show bdds successfully used delayfault atpg report promising results many benchmark circuits represent paths sensitization conditions bdd test vector derived avoid difficulty representing rising falling transition values bdds represent 1 0 values explicitly assume offpath primary inputs stable 0 1 values assumption allows bdd represent conditions required sensitize path avoid static hazards path assumption cannot made ip modeling however since primary input ip circuits receive transition hazard signals blocks drive ip circuits inputs therefore employ encoding technique represents 4each signal 2bit values signal transitions hazard conditions represented bdds example fig 3 shows iscas85 benchmark circuit c17 regarded ip circuit suppose want model highlighted paths p ip1 p ip2 using robust test conditions proposed 13 test path robustly following conditions side input values gates along path need satisfied onpath input controlling final value side inputs must noncontrolling stable values onpath input noncontrolling final value side inputs must noncontrolling final values arbitrary initial values use 7valued logic represent signal values 5 11 13 logic defined fig 4 robust test condition robust test condition figure 4 also shows seven values encoded bdd representation similar encoding technique employed earlier delay fault testing method based cnf formulation satisfiability problem 5 v f represents signals final value v represents stability signal v signal stable let rp ipi denote robust test condition path p ipi robust test conditions p ip1 p ip2 encoded follows f r fig 3 iscas benchmark circuits c17 viewed small ip circuit r f f logic values bdd encoding final value v f stability v value interpretation f falling transition 0 r rising transition 1 f unknownto0 transition 0 x r unknownto1 transition 1 x unknown x x fig 4 7valued logic robust tests corresponding 2bit encoding used bdd representation rp ip1 rp ip2 note rp ipi constructed anding v f v nonx values order construct bdds representing rp ipi primitive logic operations modified apply signal values form v f v see fig 5 encoding scheme found 5 encoded output value z f z tables fig 5 obtained applying indicated logic operations x f x f example case z apply modified logic operations every gate ip circuit recursively starting primary inputs bdds representing encoded signal obtained selected path path model constructed anding bdds representing component rp ipi figure 6 shows symbolic path models constructed fig 3 way variables bdds listed left primary inputs form encoded value pairs possible reverseengineer symbolic path models recover circuits gatelevel structure modeling method protects intellectual content ip circuits symbolic path modeling also easily identify untestable ip paths priori exclude ip model follows fact p ipi untestable bdd rp ipi must denote zero function foregoing technique easily extended handle delay fault test conditions using different encoding schemes fig encoded logic operations bdd construction z f z defined defined x f x defined cad tool implementing spmtest also handle hazardfree robust test conditions 10 using 3 bit signal encoding scheme focus robust testing 2bit encoding paper atpg procedure discuss later computes tests justifying robust test conditions given symbolic path models ip block b via ip ud blocks drive b consequently ip blocks output functions needed test generation ip models also contain bdds representing functions jf js outputs j ip block output functions ip blocks often must provided system designers simulation verification entire system intellectual content many circuits arithmetic circuits whose functions well known finally selected ip path include ip model following path information 1 input output terminals path 2 transition direction r rising f falling path terminals 3 delay path figure 7 shows ip model constructed example fig 3 consists fig representing robust test conditions p ip1 b p ip2 fig 3 rp ip1 b branch high child branch low child branch low child complement fig 7 ip model c17 two ip paths selected selected ip path information path id io terminal io transition delay ns bdds four output functions two selected paths associated path information next describe path selection method constructing ip models ststest introduced path selection method ipbs derives complete paths certain delay range udb ipb block pairs method used spmtest however spmtest also applied combination ipbs udbs minor modifications path selection scheme first describe path selection udb ipb case generalize cases due enormous number paths large circuits test paths whose delays exceed specified threshold approach commonly employed delay fault testing methods 13 22 test complete paths udb ipb therefore consider ip paths potentially yield complete paths exceeding threshold combined certain ud paths figure 8 shows example udb ipb pair consisting smallest iscas8985 benchmark circuits cs27 c17 k denotes kth input port ipb compute path delays using synopsys cell library 20 treat path two separate paths rising falling transitions 13 17 18 ip models include paths meet certain pathlength threshold may yield required complete paths example suppose critical ip path p marked dashed line exceeds threshold delay included ip model critical complete path udb ipb indicated thick solid line cannot derived path p avoid problems select ip paths assuming ud paths maximum allowable delay slack limit delay margin ipb input k left subtracting clock period longest delay ip paths starting k figure 9a shows maximum allowable delays length thick arrows one clock period formed positioning ip paths align longest ip paths starting every k right end critical ip path fig 9a select ip paths extend beyond ip path threshold denoted dashed line example p 16 selected follows fig 9a complete paths exceeding completepath threshold fig 9b derived six selected 2 4 1 0 critical path p ipb f r r f fig consisting iscas benchmark circuits cs27 c17 critical complete path r f r f f r r f g10 r ip paths example fig 9b shows six complete paths guaranteed tested approach yields complete paths longer threshold delay determined clock period ip path threshold delay convenience represent ip path threshold ip critical ippath delay ip denotes threshold factor 0 ip 1 example ip provider chooses ipb fig 8 total paths included ip model form shown fig 7 next discuss path selection ipb udb combinations selection scheme udb ipb modified ipb udb pair reversing ip paths fig 9 since ipb drives udb ipb udb position ip paths align longest ip paths ending every output port ipb left end critical ip path select ip paths whose left ends extend beyond specified threshold path selection scheme udb ipb also easily extended case udb1 ipb udb2 ipb surrounded two udbs case assume paths within udbs maximum allowable delays position ip paths longest ip paths io terminals aligned right left end critical ip path select ip paths exceed specified threshold fig 9 ip path selection using method ststest 12 b complete paths corresponding ip paths also exceed complete path threshold delay 1 2 4 n1n10n22 n3n11n16n22 slack limits b complete path threshold delay clock period udb ipb ud paths 3 n6n11n16n22 critical ip path delay ip path threshold delay n3n11n16n22 1 2 clock period udb ipb complete path threshold delay 3 n6n11n16n22 ud paths ip paths n3n11n16n22 n6n11n16n22 3 circuit partitioning fact bdd size explode handling large circuits limits applications many bddbased methods 2 control circuits relatively small datapath circuits order enable spmtest handle broad range ip circuits use circuit partitioning reduce bdds manageable size functional decomposition techniques reduce bdd size previously proposed formal design verification 15 use structural bdd decomposition technique partitions ip circuit set blocks constructs bdds partitioned blocks approach advantage reducing number paths must included ip models since partitioned paths often cover large number paths also easily adapt existing structural atpg algorithms deal partitioned bdds symbolic models partitioned ip paths may identify untestable ip paths priori alleviate drawback propose algorithm dubbed spmpart maximizes chance untestable paths identified exploiting property untestable paths untestable path p contains fanout point f reconvergence point r j conflict robust test conditions p symbolic path modeling guaranteed identify p untestable every p paths linking f r j partition spmpart partitions ip circuit way maximizes number paths linking f r j contained partition limiting partition specified size describe spmpart let n ij number fanin lines r j path f let ij distance f r j terms number levels spmpart first computes every pair defined n ij ij combining large gf r j lead small partition due small ij contains large number paths linking f r j spmpart creates partition b k adding one time first selects f primary inputs ipb inserts f current partition b k spmpart selects r j maximizes sum gf r j f b k path r j inserts b k nonpartitioned gates transitive fanin region r j maximize number paths b k linking f r j current partition exceeds specified size b k1 set current partition way spmpart continues insert next r j b k r j remains complexity spmpart including gain factor computation 2 figure 10a shows 2bit adder viewed ipb partitioned two blocks spmpart figure 10b shows graph whose nodes represent f r j ipb whose edges represent figure 10c lists gain factors computed every limits partition terms io line numbers set 32 0 first f inserted b1 select p 0 r since p 0 yields largest gain factor ga 0 partition b1 indicated formed including p 0 transitive fanin node b 0 next 0 selected yields largest gain factor ga 0 0 gb 0 including 0 c b1 becomes partition indicated b fig 10b including c 1 b1 exceeds size limit next nodes added b2 figure 10a indicates dashed lines final two partitions created way observe fig 10a like ones marked x paths linking f r j contained partition example symbolic path modeling identify untestable paths ones highlighted figure 11a shows circuit partitioned arbitrarily without using spmpart case symbolic path modeling cannot identify untestable 0 c 1 c fig partition produced proposed algorithm b fanoutreconvergence graph partition steps c gain values computed every 0 c 1 c b c 0 c 0 0 c b fig arbitrary partition 2bit adder obtained without using algorithm b comparison partitions partition type paths ip model untestable paths identified bdd size ip model partitioning partition fig 10a partition fig 11a paths make paths untestable f r j different partitions figure 11b compares unpartitioned ipb partitions fig 10a 11a note partition fig 10a allows untestable paths identified test generation procedure needs run 74 testable paths hand partition fig 11a requires test generation procedure run 90 paths ipb although bdd size reduction looks minor small example significant reductions obtained larger circuits experiments show test generation assuming ip models ipbs constructed method described system designers generate test vectors using atpg procedure spmtest fig 12 extension podem algorithm handle bdds block framework spmtest takes symbolic models ipbs inputs creates symbolic models udbs example fig 13 shows udb ipb pair fig 8 block treated black box specified symbolic model let p bi denote partial path derived partitioned block b spmtest selects complete path p b1 p b2 p bn exceeds complete path threshold delay derived method describe sec 2 example fig 13 shows one complete path p ud1 p ip1 speed test generation spmtest simplifies bdds symbolic models setting v primary input v note enhanced scan assign stable values primary inputs example fig 13 shows values assigned case p ud1 p ip1 figures 14a b show ipbs bdds symbolic ip models create symbolic models select complete path p b1 p b2 p bn simplify bdds assigning initial input values bddbased podem algorithm select objective one input variable p bi backtrace target primary input assign value evaluate bdds using cofactorbased implication backtrack rp bi repeat 1n rp bi repeat target complete paths tested 2pattern test cubes fig test generation algorithm udbs ip providers substantially simplified assigned values compare original bdds figs 6a 7 respectively next bddbased podem algorithm attempts satisfy condition i1n rp bi represented conjunction bdds p bi symbolic path models rp bi first selects objective support variable rp bi maximal cube backtrace step finds primary input follows output function f corresponding select f support variable f maximal cube repeat step primary input example fig 13 first select n6 objective rp ip1 maximal cube n3 f n3 n6 f next select g0 cube stop backtracing since g0 f primary input next phase spmtest ternary implication step evaluates bdds variables assigned values 0 1 x note initial values bdd variables x implement ternary implication computing cofactors bdd respect nonx input values resulting cofactor constant 1 0 bdd evaluates 1 0 otherwise result x example given input values n3 f n3 n6 f 1x0x cofactor rp ip1 respect n3 f n6 shown fig 14c since cofactor constant rp ip1 found x steps repeated i1n rp bi test cube obtained example fig 13 test cube fig 13 udb ipb pair fig 8 represented black boxes f f simplified bdds output functions ipb b symbolic path model p ip1 fig 13 c cofactor b respect n3 f n6 cofactor c b complete path spmtest either computes robust test concludes path robustly untestable since acts structure consisting multiple partitioned blocks symbolic form spmtest handle combination ipbs udbs without needing extra scan registers 5 experimental results implemented spmtest method cad tool composed 17000 lines c code existing bdd package cubdd 19 applied number benchmark circuits including iscas85 iscas89 combinational versions datapath circuits artificially paired ud ip blocks figure 15 compares symbolic ip models constructed spmtest without circuit partitioning first column lists benchmark circuits regarded ipbs next three columns give circuit partitioning results specified limits number io lines partition number resulting partitioned blocks cpu time spent partitioning listed next results symbolic ip modeling using partitioned ip circuits listed specified ip path delay threshold factor ip untestable path identification ratio upi given circuits large number untestable paths upi defined number untestable ip paths identified ip models divided number untestable ip paths bdd size terms number fig modeling without circuit partitioning bench mark circuit circuit partitioning symbolic ip modeling symbolic ip modeling partitioning without partitioning io limits partitions cpu time untestable paths identification upi bdd size cpu cs1423 2015 14 143 08 708 10425 48 541812 2 hours hours exploded 12 hours c2670 2525 17 257 08 937 44425 2969 exploded 12 hours c3540 2525 26 1467 09 729 68502 6286 exploded 12 hours exploded 12 hours c7552 2525 38 2061 08 561 164055 1712 exploded 12 hours nodes cpu time spent ip modeling listed last two columns list results symbolic ip modeling without partitioning case upi 100 cases ip modeling partitioning finishes within reasonable cpu time relatively small bdds example modeling largest iscas85 circuit c7552 completed 171 seconds bdds containing total 164k nodes hand ip modeling large circuits without partitioning either takes several hours cannot finish due excessive bdd size well known bdds representing larger iscas85 benchmark circuits c2670 c7552 tend explode bddbased methods like 2 applied circuits furthermore ip modeling partitioning identify large number untestable paths circuits example cs9234s ip model identifies 999 untestable paths 20 partitioned blocks indicates proposed partition algorithm highly efficient low upi ratios circuits like cs1196 explained structural property separation fanoutreconvergence pairs large difficult contain pairs within partition figure gives results applying spmtest number udb ipb pairs whose ip models appear fig 15 although limit attention udb ipb pairs combinations ipbs udbs show similar results first two columns list udb ipb pairs tested next two columns circuit pair udb partition results udip pair test results udb ipb io limits partition partitions complete path threshold c complete paths tried test generation robustly tested 28 1922 cs1238 shift32 2015 23 0801 343 150 9192 shif32 cs1238 3030 8 0860 347 shift32 shift16 c5315 2525 2 0839 4118 558 14913 shift32 fig test generation results benchmark circuits configured udb ipb pairs show symbolic modeling results udbs next column lists complete path threshold delay factor c ipb udb pair given ip clock period clock c determined ip 1 ip clock ip ipbs critical path delay see fig 9 testable complete paths exceeding threshold delay c clock guaranteed tested cases indicated column c chosen values c smaller values calculated way either ipb udb pairs many complete paths ip 0 next column lists number complete paths tried test generation number complete paths robustly tested cases tried complete paths much fewer number complete paths meeting c many untestable paths eliminated priori ip modeling step speeds test generation fact complete paths robustly tested many cases surprising artificial functionally meaning less connections udbs ipbs tend make large number complete paths untestable time listed last column fig 16 reasonable cases except circuit pair containing c2670 large iscas85 benchmark circuit well known robustly testable paths due large amount reconvergent fanout path delay testing inherently difficult ststest 12 untestable complete paths robustly testable due sts registers whereas spmtest robustly testable complete paths considered testable counted fig 16 therefore results spmtest cannot directly compared ststest comparison methods also difficult since delay testing methods aimed ipbased designs case 16 experimental results provided 6 conclusions presented spmtest method path delay testing designs containing ip cores difficult problem addressed existing methods spmtest test complete paths linking ip userdefined blocks via symbolic modeling technique abstracts ip blocks paths compact form hence require extra scan logic advantage ststest atpg algorithm spmtest generates tests complete paths using symbolic models hence protects implementation details ip blocks experimental results show benchmark circuits chosen spmtest constructs compact symbolic ip models robustly tests testable complete paths specified delay range therefore spmtest appears ideal approach path delay testing ipbased designs spmtest limitation complex circuits multipliers require ip models excessive size address problem investigating alternative symbolic modeling approaches r scan chain design test time reduction corebased ics test generation path delay faults using binary decision diagrams hierarchical test access architecture embedded cores integrated circuit variable clock methods path delay testing sequential circuits satisfiabilitybased test generation path delay faults combinational circuits robust delayfault test generation synthesis testability standard scan design methodology partial enhancedscan approach robust delayfault test generation sequential circuits test methodology embedded cores protects intellectual property design testability using scanpath techniques pathdelay test measurement synthesis robust delayfaulttestable circuits theory highcoverage atpg datapath circuits unimplemented blocks delay fault testing designs embedded ip cores delay fault testing logic circuits testing ics getting core problem partitioned robddsa compact canonical efficiently manipulable representation boolean functions path delay fault testing ics embedded intellectual property blocks nest nonenumerative test generation method path delay faults combinational circuits advanced automatic test pattern generation techniques path delay faults cudd cu decision diagram package synopsys inc testing embedded cores using partial isolation rings pathdelay test generator standard scan designs hierarchical timing analysis using conditional delays tr robust delayfault test generation synthesis testability standard scan design methodology hierarchical timing analysis using conditional delays satisfiabilitybased test generator path delay faults combinational circuits partitioned robddsmyampersandmdasha compact canonical efficiently manipulable representation boolean functions path delay fault testing ics embedded intellectual property blocks logic synthesis verification algorithms testing ics test generation path delay faults using binary decision diagrams fastpath partial enhancedscan approach robust delayfault test generation sequential circuits design testability scan chain design test time reduction corebased ics testing embeddedcore based system chips highcoverage atpg datapath circuits unimplemented blocks testing embedded cores using partial isolation rings 11 test methodology embedded cores protects intellectual property delay fault testing designs embedded ip cores