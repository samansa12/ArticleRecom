assuring good style objectoriented programs languageindependent law demeter encodes ideas encapsulation modularity easytofollow form objectoriented programmers presented law developed design implementation demeter system provides highlevel interface classbased objectoriented systems two forms law class object forms described motivation ensure software modular possible principles covered law include coupling control information hiding information restriction information localization structured induction example given show law applied valid violations identified shown transform method satisfy law one b introduction paper describes objectoriented programming style rule called law demeter along gotorule programming style rules inherited procedural programming paradigm many still apply law part programming knowledge considered implementing objectoriented software partial response questions objectoriented program written good style formula rule one follow order write good objectoriented programs metrics apply objectoriented program determine good characteristics good objectoriented programs addition helps formalize existing ideas issues found literature kp86 sny87 two kinds style rules objectoriented programming rules constrain structure classes rules constrain implementation methods style rules influence structure classes published elsewhere lie88 focus paper style rule restricts methods written set class definitions particular law restricts messagesending statements method implementations informally law says object receiving message given method must one restricted set objects set preferred objects includes method arguments self pseudovariable immediate subparts self self object smalltalk flavors called c current eiffel law demeter named demeter system tm provides highlevel interface classbased objectoriented systems demeter research group northeastern university develops system group applied law development system formally fourteen thousand lines lispflavors ninety thousand lines c code implementation numerous applications developed system experience law promotes maintainability comprehensibility software result small method size predicable messagepassing patterns caused application law words following law concert rules minimizing code duplication minimizing number arguments minimizing number methods produces code characteristic manageable form also seen adherence law prevents programmers encoding details class hierarchy structure methods critical goal making code robust respect changes hierarchy structure changes occur frequently early stages development goal law demeter organize reduce behavioral dependencies classes informally one class behaviorally depends another class calls method message sent object defined class behavioral dependencies encoded methods objectoriented program determine complexity pro grams control flow level coupling classes paper examines relationships illustrated law impacts existence work describing law includes lhr88 presented proof states objectoriented program written bad style transformed systematically program obeying law demeter implication proof law demeter restrict programmer solve restricts solves also formulated interpretations law multiple programming languages lh89b third party commentary law includes boo91 sak88 bud91 gra91 thesis casais cas90 examines law depth assesses favorable impact problem providing automatic support rewriting code response changes class hierarchy slight dissenting voice raised wirfsbrock et al wbw89 prefer function centered approach objectoriented design rather data centered approach demeter examples paper written extended notation demeter system describes demeter notation sections follow define law demeter formally examples examining practical theoretical issues demeter key contribution demeter system improve programmer productivity several factors achieved number ways first demeter provides comprehensive standard library utilities second significant amount code generated programmers objectoriented design third demeter includes number tools automate common programming practices key ideas behind demeter system use expressive class notation existing objectoriented languages take advantage added information providing many custommade utilities utilities provided specific objectoriented language like c flavors greatly simplify programming task examples utilities demeter generates provides generically class definitions programming language application skeletons parsers pretty printers type checkers object edi tors recompilation minimizers pattern matchers unifiers demeter system helps programmer define classes structure functionality several support tools including consistency checker semantic rules type checking design level learning tool learns class definitions example object descriptions ll1 corrector applicationdevelopment plan generator lie88 lr88 explanations examples presented paper written extended demeter notation described one primary goals demeter system develop environment eases evolution class hierarchy environment must provide tools easy updating existing software methods operations defined class hierarchy striving produce environment let software grown continuous fashion believe continuousgrowth environment lead rapid prototypingsystemupdating development cycle primary input system collection class definitions collection called class dictionary classes described demeter using three kinds class definitions construction alternation repetition class dictionary shown figure 1 partially defines structure lending library 1 1 construction class definition used build class number classes form class c parts class c c defined made n parts called instance variable values part name called instance variable name followed type called instance variable type means instance member class c name refers member class sc example shown figure 1 describes library class consisting reference section loan section journal section use following naming convention instance variable names begin lower case letter class names begin upper case letter 2 alternation class definition allows us express union type class definition use two notations demeter system introductory paper uses extended notation concise notation based ebnf used later papers thesis abstract syntax concise abstract syntax extended notation identical syntactic sugar changed class library parts reference loan journal class library class bookidentifier either isbn libraryofcongress class bookidentifier class referencesec parts archive archive class referencesec class archive parts class archive class bookssec parts refbooks class bookssec class listofbooks list repeat fbookg listofbooks class catalog list repeat fcatalogentryg class book parts class book figure 1 library class dictionary class c either b class c states member c member class class b exclusively example definition bookidentifier figure 1 expresses notion somebody refers identifier book actually referring isbn code library congress code 3 repetition class definition simply variation construction class definition instance variables type programmer specify number instance variables involved class definition class c list repeat fag defines members c lists zero instances 3 forms law law demeter two basic forms object form class form object form primary form however possible statically check code respect object form two versions class form compiletime checkable approximations two versions class form called strict form minimization form strict version rigorously restricts dependencies classes however practice difficult completely adhere strict version potential lawbreaking situations discussed minimization version weakest expression law phrased guideline rather strict rule allows additional dependencies classes asks objectoriented programmer minimize document declaring special acquaintance classes 31 object form object version law based concept preferred supplier objects defined follows supplier object method object message sent preferred supplier objects method ffl immediate parts self ffl argument objects ffl objects either objects created directly objects global variables programmer determines granularity phrase immediate subparts self application hand example immediate parts list class elements list immediate parts regular class object objects stored instance variables theory every object potential supplier particular method supplier object sent message method flow control passes method method implemented message receiver however presence dynamic binding method overriding objectoriented programming languages make difficult statically determine control flows one method next restricting set supplier objects contain level difficulty per method object version law demeter every supplier object method must preferred supplier object form expresses spirit basic law serves conceptual guideline programmer approximate object version law expresses really wanted hard enforce compiletime lhr88 object version serves additional guide whenever strict class version law accepts program appears bad style strict class version law rejects program appears good style client method client method f attached class c inside message f sent object class c c f specialized one subclasses client f attached highest class hierarchy method client class c client method attached c supplier client class c c supplier informally supplier class method class whose methods called method acquaintance class class c1 acquaintance class method attached class c2 c1 supplier c1 ffl c2 ffl class used declaration argument ffl class used declaration instance variable c2 preferredacquaintance class preferredacquaintance class method either class objects created directly class used declaration global variable used preferredsupplier class class b called preferred supplier method attached class c b supplier one following conditions holds ffl b used declaration instance variable c ffl b used declaration argument including c super classes ffl b preferred acquaintance class table 1 32 class form class forms versions expressed terms classes supported compiletime lawenforcement tool paralleling object form strict version based notion preferred supplier defined table 1 figure shows five examples massages sent objects preferredsupplier classes send message f object use c notation f send message f figure 2 class b preferred supplier method preferred client b comment character starts comment line class c parts implements interface class c case 1 instance variable class class c parts none implements interface class c case 2 argument class class b parts none implements interface c self called class b case 3 argument class self class c parts none implements interface newobject new b instance fcalls newobject fg class c case 4 newly created object class class c parts none implements interface class c case 5 global class global type b case class b preferred supplier figure 2 examples preferred suppliers every class objectoriented program potential supplier method however best limit suppliers method small set preferred classes define preferred suppliers introduce concept acquaintance class method sak88 hb77 precise definition acquaintance relies class version supplier concept informally methods supplier class class whose methods called method definitions make distinction classes associated declaration method classes used body method former includes class method attached superclasses classes used declarations instance variables classes used declare arguments method sense automatic consequence method declaration easily derived code shown browser supplier classes method introduced body method determined careful reading implementation second set classes acquaintance classes show classes within code browser would require complete symbol table program set acquaintance classes partitioned preferred acquaintance subset complement methods preferred acquaintance class either class objects created directly method calling acquaintance classs constructor class used declare global variable used method given definitions strict version law demeters class form says law demeter every supplier class method must preferred supplier several benefits result applying strict version laws class form example interface class changes preferredclient methods class subclasses require modification provided changes required preferred client methods change interfaces classes classs interface change many ways example programmer might modify interface changing argument return type changing name method adding deleting method classs preferredclient methods usually small subset methods program reduces set methods need modified benefit clearly shows law demeter limits repercussions change using law also control complexity programming example programmer reading method needs aware functionality methods preferred supplier classes preferred suppliers usually small subset set classes application furthermore closely related class method attached relationship makes easier remember classes functionality second class version lenient strict form allows nonpreferred supplier classes practice makes sense allow acquaintance classes however suggest programmer clearly document violations order recover laws benefits acquaintance classes typically used three reasons ffl stability class stable andor interface kept upwardly compatible makes sense use acquaintance class methods programmer specifies global acquaintance classes separately included acquaintance classes methods ffl efficiency programmer might need directly access instance variables certain classes increase runtime efficiency c terminology classes method friend function ffl object construction permissive minimization version law demeter stated follows minimization form law demeter minimize number acquaintance classes method count number acquaintance classes methods assess level conformance program law class appears acquaintance class several methods counted many times appears statically typed language like c eiffel extended facility declare acquaintance classes compiler modified straightforward way check adherence minimization version following sense supplier acquaintance class must explicitly declared list methods acquaintance classes easily check law compile time even design time programmer must provide following documentation method 1 types arguments result 2 acquaintance classes documentation gives programmers reading method list types must know understand method compiler check completeness methods documentation examining messages sent method classes objects created directly method motivation behind law demeter ensure software modular possible law effectively reduces occurrences certain nested message sends function calls simplifies methods law demeter many implications widely known software engineering principles contribution condense many proven principles software design single statement easily followed objectoriented programmers easily checked compiletime principles covered law include coupling control wellknown principle software design minimal coupling abstractions like procedures modules methods ew88 coupling along several links important link methods uses link callreturn link established one method calls another method law demeter effectively reduces methods programmer call inside given method therefore limits coupling methods respect uses relation law therefore facilitates reusability methods raises softwares level abstraction information hiding law demeter enforces one kind information hiding structure hiding general law prevents method directly retrieving subpart object lies deep objects partof hierarchy instead programmer must use intermediate methods traverse partof hierarchy controlled small steps lg86 objectoriented systems programmer protect instance variables methods class outside access making private important feature complements law increase modularity orthogonal law promotes idea instance variables methods public used restricted way information restriction work related work parnas et al pcw85 pcw86 modular structure complex systems reduce cost software changes operational flight program a7e aircraft restricted use modules provide information subject change take point view seriously objectoriented programming assume class could change therefore restrict use message sends function calls law demeter information restriction complements information hiding instead hiding certain methods made public use restricted information restriction offer level protection information hiding however hiding feasible restriction offers level protection ffl localization information 2 many software engineering textbooks stress importance localizing information law demeter focuses localizing class information programmers study method aware types closely related class method attached effectively ignorant independent rest system saying goes ignorance bliss important aspect law helps reduce programming complexity addition law also controls visibility message names programmers use message names interfaces preferredsupplier classes given method ffl structural induction law demeter related fundamental thesis denotational semantics meaning phrase function meanings immediate constituents goes back freges work principle compositionality begriffsschrift hei67 main motivation behind compositionality principle facilitates structural induction proofs 5 example section shows apply law demeter program violates strict minimization versions laws class form example use classes defined class dictionary fragment library shown figure 3 methods example written c however text comprehensible users objectoriented programming languages c terminology method called function member instance variable called data member following c code types data members function member arguments pointer types classes fragment c program figure 4 searches reference section particular book keep example small use direct access instance variables instead using access methods searchbadstyle function attached referencesec passes message book bookssec microfiche microfichefiles document sections documents function breaks law demeter first message marked sends message archmicrofiche archive returns object type microfichefiles method next sends peter wegner pointed aspect law class library parts reference loan journal class library class bookidentifier either isbn libraryofcongress class bookidentifier class referencesec parts archive archive class referencesec class archive parts class archive class microfichefiles parts class microfichefiles class documents parts class documents class bookssec parts class bookssec figure 3 library revisited returned object search message however microfichefiles instance variable argument type class referencesec structure classes clearly defined class dictionary programmer might tempted accept method searchbadstyle figure 4 reasonable solution consider change class dictionary assume library installs new technology replaces microfiche document sections archive cdroms videodiscs class archive parts class archive class cdromfile parts class cdromfile programmer search methods including searchbadstyle method references archive microfiche files would easier limit modifications methods attached class archive accomplished rewriting methods good style resulting searchgoodstyle functions attached referencesec archive using good style also reduces coupling respect uses relation original class referencesec f public archive archive boolean searchbadstylebook book f return boolean searchgoodstylebook book f return archive class archive f public microfichefiles archmicrofiche documents archdocs boolean searchgoodstylebook book f return class microfichefiles f public boolean searchbook book fg class documents f public boolean searchbook book fg class book fg figure 4 c fragment search reference section version referencesec coupled bookssec archive microfichefiles documents coupled bookssec archive another way examine effects using law translate program good bad style dependency graph graphs nodes graph classes edge class class b integer label indicates many calls written text functions functions b label omitted edge means value 1 access instance variable interpreted call read instance variable figure 5a shows graph program violates law demeter figure 5b shows graph one follows law figure 5 dependency graph representation 6 valid violations law demeter intended act guideline absolute restriction minimization version laws class form gives programmers choice strongly want follow law nonpreferred acquaintance classes used weaker adherence strict version situations cost obeying strict version law may greater benefits however programmers willingly violate law take responsibility declaring required acquaintance classes critical documentation future maintenance software example cost applying law higher benefits consider following prototypical method bad style coded flavors c flavors defmethod c p c void cmd p p instance class f1 returns subpart p immediate composition changes method may change also f1 two situations reasonable leave ffl f1 intended serve black box programmer knows types arguments return type case maintainer f1 responsibility ensure updates f1 upwardly compatible programmers function penalized using ffl runtime efficiency important application use mechanisms c friend function feature may necessary friend functions used carefully since whenever private members class change friend functions class may also require change consider another example shows costs using law might outweigh benefits application solves differential equations class dictionary may following definitions class complexnumber parts class complexnumber flavors defmethod vector r c complexnumber send send c realpart project self c void vectorrcomplexnumber c method r form previous example bad style reason question whether important hide structure complex numbers rewrite method application concept complex number well defined well understood unnecessary rewrite method law obeyed general application concepts well defined classes implement concepts stable sense unlikely change violations acceptable experience writing programs follow law demeter decreases occurrences nested message sending decreases complexity methods increases number methods increase methods related problem outlined lg86 many operations type case abstraction may less comprehensible implementation maintenance difficult might also increase number arguments passed methods one way correcting problem organize methods associated particular functional algorithmic task modula2 like module structures outlined lr88 functional abstraction longer method module hide lowerlevel methods 7 conforming law given method satisfy law programmer transform conforms law lhr88 described algorithm transform objectoriented program equivalent program satisfies law words showed translate objectoriented program normal form satisfies laws strict version less automatic ways achieve goal may help derive readable intuitive code also may help minimize number arguments passed methods amount code duplication two techniques called lifting pushing explain techniques need preliminary definition say class b part class class b class one instance variables b partclass class one instance variables consider method flavors defmethod c send send self m1 m2 c void cm class object returned m1 preferred supplier class distinguish two cases 1 partclass c 2 c partclass lifting technique applicable first case partclass c idea make m1 return object instance variable argument class c adjust m2 accordingly method m2 lifted class hierarchy attached class attached instance variable class c example suppose program needed parse input using grammar grammar made list rules productions indexed rule name fragment parse application shown figure 6 program fragment uses one acquaintance class class body method parse grammar problem fragment method lookup grammar returns object class body instance variable class grammar transform first method good style must make lookup method return instance rule adjust parsedetails figure 7 shows modified version improved program fragment uses acquaintance class lifting approach always work consider figure 8 program fragment uses one acquaintance class class rule method parse grammar cannot transform first method good style lifting return type lookup method pushing technique applicable cases 1 2 ie part class c c part class respectively second case slightly complicated involves class grammar list repeat fruleg class rule parts class rule flavors defmethod grammar parse rulename type symbol send send self lookup rulename parsedetails defmethod grammar lookup rulename type symbol send send rule lookup rulename getbody defmethod body parsedetails c void grammarparsesymbol rulename f return rule void bodyparsedetails figure example code violates law demeter flavors defmethod grammar parse rulename type symbol send send self lookup rulename parsedetails defmethod grammar lookup rulename type symbol send rule lookup rulename defmethod rule parsedetails send self getbody c void grammarlookupsymbol rulename rule grammarlookupsymbol rulename f return rule lookuprulenameg void ruleparsedetails f getbody g figure 7 new parse implementation class grammar parts class grammar class rulelist list repeat fruleg rulelist class rule parts class rule flavors defmethod grammar parse rulename type symbol send sendself lookup rulename parsedetails defmethod grammar lookup rulename type symbol returns object type rule send rulelist lookup rulename defmethod rulelist lookup rulename type symbol defmethod rule parsedetails c void grammarparsesymbol rulename rule grammarlookupsymbol rulename f f g figure 8 law violation cannot fixed lifting technique traveling object hierarchy general technique first case pushing technique variation topdown programming technique pushing responsibility work lower level procedure lifting example problem arose grammar class task sending parsedetails message task really responsibility class rulelist knows rule details grammar figure 9 shows improved design use acquaintance classes also technique used figure 4 write searchgoodstyle flavors defmethod grammar parse rulename send self lookupparse rulename defmethod grammar lookupparse rulename send rulelist lookupparse rulename defmethod rulelist lookupparse rulename send sendself lookup rulename parsedetails c void grammarparsesymbol rulename void grammarlookupparsesymbol rulename figure 9 example transformed pushing technique redesign introduced additional method list classes viewed stable example case smalltalk need redesign justified keep acquaintance class 8 conclusion paper introduced simple rule followed results production structured maintainable objectoriented software rule called law demeter encodes ideas data hiding encapsulation easy follow form objectoriented programmer resulting code robust allowing individual classes redesigned leaving remaining software intact furthermore effectively reducing effects local changes software system adherence law reduce many headaches software maintenance following law exacts price greater level interface restriction refinement hiding greater penalties terms number methods execution speed number arguments methods sometimes code readability long term fatal penalties found packaging related methods definitions together helps significantly organizing increased number smaller methods lie92 facility along support interactive case environment erase penalties following law demeter system includes formalism code generation mechanism called propagation patterns lxsl91 lhslx92 removes programming burden following law utility generates major parts required code executionspeed problem countered using preprocessor compiler technologies like inline code expansion code optimization similar way tail recursion optimization done application law throughout development demeter system law never prevented us achieving algorithmic goals although methods needed rewritten task difficult results generally satisfying acknowledgements would like thank garlin lee feedback contributions development ideas paper thanks also jing na along garlin tested practicality using law production demeter system software mitch wand instrumental initiating investigation weak strong interpretations carl wolf suggested object version law one followed conceptually special thanks due arthur riel principal author earlier versions paper members clos community daniel bobrow richard gabriel jim kempf gregor kicza les alan snyder etc participated debate andor formulation clos version law would like thank markku sakkinen interesting paper sak88 helpful mail messages law demeter cindy brown mitch wand convinced us use readable notation ebnf helped us designing paul steckler ignacio silvalepe made several contributions extended demeter notation sectionbibliographic note earlier reports work described paper appeared lhr88 lh89b lh89a r introduction objectoriented programming managing class evolution objectoriented systems assessing quality abstract data types written ada laws communicating parallel processes frege godel taste smalltalk abstraction specification program de velopment assuring good style objectoriented pro grams formulations benefits law demeter experience graphbased propagation pattern programming tool component enhancement adaptive reusability mechanism groups collaborating classes demeter case study software growth parameterized classes propagation patterns graphbased specifications cooperative behavior modular structure complex systems enhancing reusability information hiding law demeter inheritance development encapsulated software systems tr abstraction specification program development inheritance development encapsulated software systems demeter case study software growth parameterized classes comments myampersandldquothe law demetermyampersandrdquo c objectoriented programming objective sense style ctr letha h etzkorn carl g davis automatically identifying reusable oo legacy code computer v30 n10 p6671 october 1997 fernando berzal juancarlos cubero nicolas marin mariaamparo vila lazy types automating dynamic strategy selection ieee software v22 n5 p98106 september 2005 edward b gamble jr reid simmons impact autonomy technology spacecraft software architecture case study ieee intelligent systems v13 n5 p6975 september 1998 k j lieberherr j riel contributions teaching objectoriented design programming acm sigplan notices v24 n10 p1122 oct 1989 chris houser manual compiler terse modular language dem acm sigplan notices v31 n12 p4151 dec 1996 yang liu salil pradhan demeter method efficient way build adaptive software acm sigice bulletin v22 n1 p719 july 1996 nadir yousfi measurementdriven restructuring object oriented applications acm sigplan oops messenger v4 n2 p175176 april 1993 norman wilde paul matthews ross huitt maintaining objectoriented software ieee software v10 n1 p7580 january 1993 karl j lieberherr ignacio silvalepe cun xiao adaptive objectoriented programming using graphbased customization communications acm v37 n5 p94101 may 1994 jonathan aldrich craig chambers david notkin archjava connecting software architecture implementation proceedings 24th international conference software engineering may 1925 2002 orlando florida karl lieberherr david h lorenz pengcheng wu case statically executable advice checking law demeter aspectj proceedings 2nd international conference aspectoriented software development p4049 march 1721 2003 boston massachusetts adaptive programming jasco proceedings 4th international conference aspectoriented software development p7586 march 1418 2005 chicago illinois clark b archer michael c stinson objectoriented software product metrics tutorial proceedings 1998 acm sigcpr conference computer personnel research p305306 march 2628 1998 boston massachusetts united states korson john mcgregor understanding objectoriented unifying paradigm communications acm v33 n9 p4060 sept 1990 jilles van gurp jan bosch design erosion problems causes journal systems software v61 n2 p105119 march 2002 steve freeman tim mackinnon nat pryce joe walnes mock roles objects companion 19th annual acm sigplan conference objectoriented programming systems languages applications october 2428 2004 vancouver bc canada norman wilde ross huitt maintenance support objectoriented programs ieee transactions software engineering v18 n12 p10381044 december 1992 mira mezini karl lieberherr adaptive plugandplay components evolutionary software development acm sigplan notices v33 n10 p97116 oct 1998 richard helm ian holland dipayan gangopadhyay contracts specifying behavioral compositions objectoriented systems acm sigplan notices v25 n10 p169180 oct 1990 shahram javey kinichi mitsui hiroaki nakamura tsuyoshi ohira kazu yasuda kazushi kuse tsutomu kamimura richard helm architecture xl c browser proceedings 1992 conference centre advanced studies collaborative research november 0912 1992 toronto ontario canada martin hitz behzad montazeri chidamber kemerers metrics suite measurement theory perspective ieee transactions software engineering v22 n4 p267271 april 1996 grel hedin attribute extension technique enforcing programming conventions nordic journal computing v4 n1 p93122 spring 1997 robert v binder design testability objectoriented systems communications acm v37 n9 p87101 sept 1994 simon gibbs eduardo casais oscar nierstrasz x pintado dennis tsichritzis class management software communities communications acm v33 n9 p90103 sept 1990 neville churcher warwick irwin ron kriz visualising class cohesion virtual worlds proceedings asiapacific symposium information visualisation p8997 january 01 2003 adelaide australia jens palsberg cun xiao karl lieberherr efficient implementation adaptive software acm transactions programming languages systems toplas v17 n2 p264292 march 1995 tomoyuki aotani hidehiko masuhara scope aspectj compiler supporting userdefined analysisbased pointcuts proceedings 6th international conference aspectoriented software development march 1216 2007 vancouver british columbia canada evaluating effect delegated versus centralized control style maintainability objectoriented software ieee transactions software engineering v30 n8 p521534 august 2004 k lieberherr c xiao formal foundations objectoriented data modeling ieee transactions knowledge data engineering v5 n3 p462478 june 1993 neville churcher warwick irwin informing design pipelinebased software visualisations proceedings 2005 asiapacific symposium information visualisation p5968 january 01 2005 sydney australia roger chin samuel chanson distributed objectbased programming systems acm computing surveys csur v23 n1 p91124 march 1991 k j lieberherr c xiao objectoriented software evolution ieee transactions software engineering v19 n4 p313343 april 1993 rebecca j wirfsbrock ralph e johnson surveying current research objectoriented design communications acm v33 n9 p104124 sept 1990 karl j lieberherr controlling complexity software designs proceedings 26th international conference software engineering p211 may 2328 2004 karl lieberherr boaz pattshamir doug orleans traversals object structures specification efficient implementation acm transactions programming languages systems toplas v26 n2 p370412 march 2004 doug lea christopher alexander introduction objectoriented designers acm sigsoft software engineering notes v19 n1 p3946 jan 1994 marwan abiantoun jonathan aldrich wesley coelho case study reengineering enforce architectural control flow data sharing journal systems software v80 n2 p240264 february 2007 antero taivalsaari notion inheritance acm computing surveys csur v28 n3 p438479 sept 1996 gary leavens introduction literature objectoriented design programming languages acm sigplan oops messenger v2 n4 p4053 oct 1991