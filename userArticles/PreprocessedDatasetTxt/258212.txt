power limitations strictness analysis strictness analysis important technique optimization lazy functional languages well known strictness analysis methods incomplete ie fail report strictness properties paper provide precise formal characterization loss information leads incompletenss specifically establish following characterization theorem mycrofts strictness analysis method generalization method called eeanalysis reasons exhaustive evaluation nonflat domains mycrofts method deduce strictness property program p iff property independent constant appearing evaluation p prove specify small set equations called eaxioms capture information loss mycrofts method develop new proof technique called erewriting erewriting extends standard notion rewriting permit use reductions using eaxioms interspersed standard reduction steps eaxioms syntactic characterization information loss erewriting provides algorithmindependent proof technique characterizing power analysis methods used answer questions completeness incompleteness mycrofts method certain natural classes programs finally techniques developed paper provide general principle establishing similar results analysis methods based abstract interpretation demonstration generality technique give characterization theorem another variation mycrofts method called ddanalysis b introduction mycroft 1980 pioneered concept strictness analysis technique optimizing lazy functional languages transforming callbyneed callbyvalue results major impact techniques compilation optimization parallel evaluation lazy functional languagesmycrofts work based abstract interpretation firstorder functions defined flat domains subsequently much research developing strictness analysis techniques higherorder functions burn et al 1985 hudak young 1986 kuo mishra 1989 work partially supported nsf grants ccr8706973 ccr 8805734 ccr9102159 preliminary version paper presented popl 91 authors addresses r sekar bellcore room 1j226r 445 south street morristown nj 07960 email sekarbellcorecom p mishra iv ramakrishnan department computer science suny stony brook ny 11794 email fmishraramgcssunysbedu nonflat domains hughes wadler 1987 hall wise 1987 sekar et al 1990 wadler 1987 wellknown strictness analysis method deduce strictness properties function example consider function p x always true values x observe f strict fact impossible detect uniformly therefore strictness analysis method must incomplete ie fail report strictness properties incompleteness may arise variety sources inability represent possible strictness properties inability accurately analyze function composition cursion etc inaccuracy leads information loss strictness analysis method despite decade research strictness analysis methods important problem discovering precise formal characterization loss information remained open results call characterization theorems important provide unequivocal basis comparing different strictness analysis methods also enable us pinpoint weaknesses existing methods improve aid us discovering new powerful methods 11 main results paper present first characterization theorems mycrofts method natural generalization nonflat domains called eeanalysis sekar et al 1990 main theorem mycrofts method deduce strictness property program p iff deduction independent constant appearing evaluation p instance function f deducing f strict based fact p x always evaluates constant true thus mycrofts method cannot deduce mycrofts method constants mapped single value abstract domain obviously must contribute loss information however several steps abstraction might also contribute information loss choice abstract representations primitive functions use composition fix point iteration analyze userdefined functions etc contribution show information loss mycrofts method due mapping constants single value abstraction steps lossless important consequence result method uniformly ignores constants cannot powerful mycrofts method 12 overview approach state characterization theorem formally prove needed devise new technical ideas proof techniques first specify small set equational axioms called eequations make constant terms interconvertible thereby capturing information loss incurred mapping constants value eequations induce equivalence relation e called eequivalence pro grams given p e q iff p obtained q changing constant parts based notion eequivalence programs main theorem power limitations strictness analysis delta 3 formally stated mycrofts eeanalysis method deduce strictness property program p iff strictness property shared every program illustration following two programs eequivalent since one obtained changing true false viceversa note f 1 strict x whereas f 2 strict however neither properties shared programs thus two properties inferred mycrofts method hand property x shared hence inferred mycrofts method part characterization theorem show p e q compute strictness properties p q establishing part need show strictness property p inferred mycrofts method exists q e p strictness property construction q quite complex cumbersome therefore develop new proof technique called erewriting precisely formalizes notion performing reductions q e p erewriting extends standard notion rewriting permit use equational steps interspersed standard reduction steps p thus constants interchanged point reduction sequence finally show loss information due composition recursion captured erewriting eequations syntactic characterization information loss erewriting provides algorithm independent proof technique characterizing power strictness analysis mean want know whether analysis procedure compute strictness property need know computation procedure need check strictness property preserved program modified permitted eaxioms eg changing constants crofts eeanalysis method used answer questions completeness methods respect classes programs contrast appears difficult deal questions using setup abstract interpretation section 5 describes detail completeness results based erewriting techniques developed paper provide general principle establishing similar characterization theorems many analysis methods demonstration generality technique able give characterization theorem another variation mycrofts method called ddanalysis ddanalysis enhancement mycrofts method reason head normal forms nonflat domains among applications ddanalysis shown valuable tool repairing violations strong sequentiality concept pioneered huet levy 1979 lazy evaluation equational programs since preliminary version paper appeared popl 91 much research taken place area completeness abstractinterpretationbased analyses section 6 provide detailed comparison approach approaches proposed works rest paper organized follows section 2 overview eeanalysis method technical details erewriting main theorem appear section 3 section 4 give characterization theorem ddanalysis implications significance results appear section 5 together remarks generality finally relationship research dicussed section 6 2 preliminaries language consider constructorbased term rewriting system trs system consists set oriented equations called rewrite rules form r lefthand side lhs l righthand side rhs r terms may contain variables lhs must linear ie variable occur furthermore nonvariable symbols partitioned two disjoint sets set function symbols f set constructor symbols c outermost symbol every lhs f rest c firstorder programs written functional languages well recursion equations studied mycroft follow discipline tx v refer term obtained substituting variable x term v u term n variables x shorthand ux 1 substitution fi maps variables terms instance tfi term obtained replacing x fix variable x redex term u occurrence instance lhs term normal form nf contains redexes u mean u obtained replacing redex lfi rfi r rewrite rule reflexive transitive closure denoted use notations nf nf denote respectively cannot reduced term nf term head normal form hnf redex 0 0 21 overview eeanalysis characterization theorem based eeanalysis strictness analysis method nonflat domains analysis tells us subterms term normalized order normalize entire term review method remark reduces mycrofts method programs flat domains therefore results eeanalysis directly apply mycrofts method well first define strictness property term follows definition eestrictness let term eestrictness property iff every reduction sequence normalizes instance tfi terms one sets ffix 11 fix 1r1 g ffix n1 fix nrn g normalized instance eestrictness means order normalize ift normalize either 1 2 1 3 use notation ee denote eestrictness term strictness arbitrary terms computed composing strictness constructors function symbols using following rule power limitations strictness analysis delta 5 definition rule substitution let term x xn variables fi substitution variables illustrate rule consider substitution fix 0 z rhs rule becomes f ee x 0 x x 00 g ee z suppose f ee ee z rhs would simplify yield strictness proceed equations compute x ee c ee f ee together rule substitution compute strictness arbitrary terms variable case substitution normalized hence x case cx 1 xn nf instance cs 1 n obtained normalizing hence c ee conjunction x note definition arity c zero c ee true discussion yields following two equations case root symbol function symbol f assume f defined rules observe instance fs rewritten one e 1 e k therefore f ee disjunction e ee k however f ee formula x 1 xn variables differ e j actually variables 1 hence need function g j projects demand variables 1 demand x 1 xn leads us following equation defining f ee equations define g j follows equations applied order given definition stand arbitrary boolean formulae disjunctive normal form dnf subscript stands conjunction contains variable 6 delta r sekar et al justification definition g j follows eq 4 simply pushes operations individual conjunctions eqs 5 7 note rewritten jth equation must case fi contains variables x i1 x ir edemanded normalize e j must normalized nonvariable symbols constructors nf fix i1 fix ir nf hence x appears g j e ee appears e ee hence 6 argument consists entirely constructors variables must normalized match hence x edemanded hence 5 otherwise cannot conclude edemand x thus appear f ee hence 7 equations directly compute f ee f nonrecursive case recursive functions use following fixpoint iteration procedure let f 1 fm denote functions program e ee l f eer l number rules defining f limit sequence f ee0 defined f ee illustrate eeanalysis using following program example 1 begin f definition 5 simplified x using 2 applications 6 easily seen e ee0 substituting get g 1 e ee1 observe e ee1 two applications 6 also note g 3 e ee1 reduced x applications 6 x following procedure arrive f thus f eestrict second argument derive mycrofts method eeanalysis observe function recursion equation notation defined using single rewrite rule therefore disjunction rule 3 unnecessary furthermore since equations constructors lhs pattern matching easily shown g j reduce identity function finally note primitive functions conditional used mycroft defined using pattern matching strictness properties derived analysis functions exactly assumed mycroft power limitations strictness analysis delta 7 3 characterization theorem eeanalysis 31 alternative definition strictness property start section alternative definition strictness property used proofs definition need relate substitutions truth assignments follows following use notations nf nf denote respectively cannot reduced term nf let truth assignment function assigning true false x 1 xn oe substitution function assigning terms x 1 xn say oe words assigns true variable whenever oe substitutes term possessing nf place similarly oe c means definition strictness property ii strictness property iff note definition compact version mycrofts original definition pp275 mycroft 1980 strictness property show two definitions strictness property equivalent proof equivalence strictness properties ii show definition 1 implies definition 3 proceed follows let false must assign false one literal conjunct dnf therefore every oe c must substitute term nf one literal every conjunct contrapositive definition 1 consequent toe nf definition 3 follows show definition 3 implies 1 assume antecedent contrapositive definition 1 holds ie 8j 9i note hence definition 3 tfi nf 32 maximal strictness property set strictness properties forms lattice hence every term maximal strictness property defined follows definition maximal strictness property strictness property said maximal either following equiv alent conditions hold 1 strictness property 2 8a 9oe c toe nf following example strictness properties f whereas x 2 maximal strictness property example 2 proof equivalence conditions definition 4 henceforth assume dnf show 2 implies contrapositive 1 pick arbitrary holds otherwise find true false oe c toe nf 2 note toe nf although hence strictness property show 2 1 ie 1 2 assuming 2 true 8oe c toe nf since true conjunct 1 1 disjunction remaining clauses 1 let show strictness property thus contradicting 1 consider also false since strictness property 8oe c otherwise ie must case means hence since already know 8oe c 0 toe nf established strictness property 33 eaxioms erewriting introduce following equations henceforth called eaxioms capture notion cannot distinguish constants eeanalysis note term cc consisting entirely constructors built c using equation 8 repeating process build constructor term containing c starting c terms equal since two zeroary constructors equal equation 9 two constructor terms made equal equations say obtained using two equations relation naturally lifted rewrite rules programs follows l programs p q p e q iff every rule l r p rule l q vice versa henceforth p q stand programs finally define ederivation obtained igamma1 applying one rewrite rules program one equations call reduction step p step denoted p i1 former case estep denoted e i1 latter case p estep denote note estep equation 8 applied either righttoleft denoted 8r lefttoright denoted 8l say term enormal form iff contains function symbols use notation senf denote possesses enf noted introduction erewriting formalizes notion constants interchanged point reduction sequence therefore achieve effect performing reductions wrt q e p formally theorem 1 power limitations strictness analysis delta 9 proof definition eequivalence programs qreduction step l 0 l equivalent p ereduction sequence l 0 oe therefore every qderivation viewed special type p ederivation hence proof direction proof direction need transform arbitrary p ederivation sequence one special type transformation requires rearranging order esteps p steps performed straightforward rearrange sequence consisting estep followed p step p step followed estep one consisting zero p steps followed zero esteps zero esteps followed zero p steps however simply repeating process may create arbitrarily many new e p steps process rearrangement may terminate therefore sophisticated analysis interaction e p steps necessary construct desired reduction sequence first present outline construction 1 let k k1 first application 8r sequence pe show either reduction one immediately preceding inter changed preceding equation uses program rule l r effect performing two reductions achieved performing one reduction using rule l r 0 r e r 0 2 repeat step 1 till reduction using 8r rule disappears moved ahead reductions 3 repeat step 2 next application 8r rule point reduction sequence partitioned two parts initial contains sequence reductions using 8r rules alone latter part contains reductions using 8l 9 rules form l r 0 l r rule p r e r 0 let 4 manner analogous steps push applications rules r rule p r e r 0 ahead applications 8l steps constructed reduction sequence note q consists rules l eequivalent rule l r p thus q e p fill details proof providing details four proof steps first reduction step uses 8l rule let r rule used reduction immediately preceding noting k1 must form uroe following cases depending upon whether 8l rule applied inside u case 1a inside oe case 1b inside r case 1c case 1a let term whose root reduction using 8l performed following diagram illustrates order reductions interchanged case 1b case 8l must applied inside subterm variable x r must rewritten 0 thus subterms substitutions x ie variable x occurs times r k1 interchange order reductions follows k1 reduced k2 n applications 8r rules reduce 0 back case 1c note case l r cannot 8l rule since first application 8l rule cannot 8r rule since case x cannot apply 8l rule within r rule following diagram otherwise program rule following diagram j completes proof step 1 first application program rule l r therefore three cases consider depending upon whether preceding reduction using 8r 9 performed within u case 4a within oe case 4b within l case 4c case 4a note case possible rule applied step power limitations strictness analysis delta 11 rule must 8r rule following diagram illustrates two reductions interchanged case 4b case 8r 9 rule must applied within subterm 1 must rewritten 0 1 substitution variable x l assume x occurs n times r let 0 denote substitutions occurrences k2 interchange order reductions follows apply rule 8r subterms case 4c following diagram shows get another program rule achieves effect reductions j 34 shared strictness property main theorem require notation denote strictness properties term wrt different programs denote strictness property wrt p p p may dropped irrelevant obvious context definition shared strictness property shared strictness property wrt p iff either following equivalent conditions hold 1 strictness property every term e wrt every program q e p 2 8aa 8oe c toe enf equivalence two conditions follow directly theorem 1 ready present main theorem theorem main theorem ee shared strictness property main part proof effort establishing part theorem proof part fairly easy based concept strictness properties two terms syntactically identical denoted two formulas identical even without expanding strictness property subterms consider example terms fx fcx f 2 f c 2 c note fcx ee j fx 1 lemma 3 8s e ee j ee b proof part show ee ee syntactically identical whenever obtained one application eaxiom induction number applications eaxioms required get part lemma follows eaxiom applied note ee j 0ee x loe ee ee j 0ee x roe ee observe eaxioms loe ee j roe ee ee j ee part b suffices show expressions obtained ee using rule substitution rules 1 2 3 section 21 syntactically identical programs p q since expression ee obtained f ee rule substitution ee p ee q identical whenever f ee p f ee q identical functions f let l rules defining f p q respectively definition f ee p 8j l 0 part theorem r ee also observe equations e change variables j identical furthermore note l l 0 hence disjunct expression f ee p also appears f ee q interchanging p q argument see converse also holds therefore f ee p thus established part main theorem proof part quite difficult first present outline approach part proof present detailed proof 35 approach proof main theorem proof strategy show eeanalysis infers maximal shared strictness property words ee p wish show cf definition 4 call strictness property satisfies 10 emaximal strictness property abbreviated emsp purposes proof choose show ee p satisfies stronger property note stronger property 11 implies 10 show 11 also implies part theorem 2 assume 11 shared strictness property 11 contrapositive power limitations strictness analysis delta 13 second condition definition 5 follows true hence ee proof 11 need concept depth reduction sequence label occurrences function symbols exclude function symbols within oe 0 let i1 obtained using rule l r root redex labelled say j label occurrences function symbols r rewrite root redex labelled proceed usual depth maximum among labels assigned function symbol 1 n use notation denote enormalized using reduction sequence depth k wrt analogously kt nf similarly defined recall fix point computational method used eeanalysis f ee specifies arguments must nf whenever fs remark f eek specifies arguments must nf whenever example 2 fs must nf fs one 2 3 must nf remark implies f eek maximal sense motivates following definition kmaximal property observe property 12 implies 11 show eek kmaximal prop erty soundness eeanalysis ee strictness property satisfies hence emsp 36 proof main theorem first show rule substitution preserves kmaximal properties lemma 4 let 1 arbitrary terms 1 n respective k maximal properties also let kmaximal property kmaximal property proof theorem proved showing three steps 1 given construct 2 given oe c construct fi reduced ederivation whose depth wrt show fi c 3 since kmaximal property every fi 0 c exists ederivation depth k wrt normalize select suitable fi 0 derivation another ederivation normalize depth k wrt ax j show conjuncts dnf note true iff 9 true iff definition 14 delta r sekar et al since j kmaximal property j exists e derivation depth k wrt j normalizes j oe whenever denote normal form reached derivation let fix concatenating ederivations normalize j oe true obtain e derivation delta reduces definition depth derivation depth k wrt fix j nf whenever true fi c fi 0 otherwise notice fi 0 c true therefore exists ederivation depth k respect dx observe gamma 0 subterms possess hnf must discarded therefore reductions performed within fi 0 irrelevant removed gamma 0 obtain new derivation gamma observe whenever ax discarded gamma without ever reducing redex inside fi 0 used normalize depth k wrt consider ederivation obtained concatenating delta step 2 gamma note function symbol j ax j true appears maximum label assigned function symbols observe labels function symbols j j ax j remain zero since redex function symbols ever reduced delta gamma furthermore since label zero since depth gamma wrt label never increases beyond k therefore depth show equation 3 section 21 computes k 1maximal property f given kmaximal properties e j lemma 5 let j respective kmaximal properties e j 1maximal property fx proof theorem proved three steps showing 1 given true select one rule construct e instance soe reduced instance e j fi 2 show fi c 0 0 0 3 finally construct ederivation normalize fx 1 xn depth k wrt based derivation sequence reduce fx 1 xn oe e j fi fact j kmaximal property e j given true j ag j j let conjunct dnf g j j made true equation 4 section 21 defining g j conjunct 0 dnf j stands term lacking head normal form power limitations strictness analysis delta 15 specified one following two cases case 1 x case 2 x let x variables equations 6 section 21 9x il 1 l r 0 otherwise x c constructor easily seen e x e observe ax true x since oe c oex normalized term u since u consists constructors reduced instance x im c every variable xim constructor c using ereductions thus ederivation reduces oe x im c also note x 62 instance therefore oe instance concatenating ederivations x obtain ederivation delta reduces soe instance reduced using rule defined 0 xim since 0 conjunct j 0 consider cases 1 2 step 1 show fi c 0 equivalently fix im appears 0 case 1 every xim 0 substitution every one c enf second case also substitution every variable xim appears 0 c therefore fix im enf cases step 3 since j kmaximal property e j 0 true since fi c 0 ederivation gamma 0 depth k wrt e j normalizes e j fi consider ederivation obtained concatenating delta reduction derivation normalizes fx 1 xn oe depth step ft label function symbols e j one labels increase k gamma 0 lemma 6 eek kmaximal property proof induction k basis note f false 12 holds vacuously using lemma 4 definition eek terms f eek establish simple induction structure ee0 0complete property induction step assume e eek j respective kcomplete properties e j lemma 5 see f eek1 k 1complete property f basis step using definition eek1 terms f eek1 lemma 4 show eek1 k 1complete property soundness eeanalysis corollary 7 ee emsp 4 characterization theorem ddanalysis illustrate generality technique briefly outline use proving similar characterization theorem ddanalysis mentioned earlier ddanalysis enhancement mycrofts method deal head normal forms nonflat domains particular ddstrictness property function f specifies arguments function head normalized order obtain head normal form application f among applications proven valuable repairing violations strong sequentiality concept pioneered huet levy 1979 functional programs equations compute dd follows see sekar et al 1990 details defined follows nonvariable variable 19 nonvariable 20 obtain characterization theorem first step specify eaxioms appropriate ddanalysis effect equation equate two terms head normal form remainder section specify necessary changes definitions theorems used proving characterization theorem eeanalysis obtain similar result ddanalysis definitions theorems lemmas replace nf hnf enf ehnf term without normal form term lacking head normal form prove theorem 1 respect eaxioms ddanalysis using essentially proof used eeanalysis lemma 3 part note dd righthand side precisely dd lefthand side equation 21 part b need argue g j functions equivalent programs remain unchanged need consider equations 16 19 20 observe rules depend whether j variable nonvariable property left unchanged eaxiom lemma 4 carries without changes arguments lemma 5 following observations necessary case 2 step 1 observe x 62 implies x i1 62 0 therefore cases identical x also observe whenever ax true x 2 oe c oex head normalized term u u hnf ereduced x i1 c remainder reasoning carries unchanged changes following result ddanalysis well power limitations strictness analysis delta 17 theorem 8 dd shared dd strictness property 5 significance implications strictness analysis methods mycroft often defined nonstandard semantics obtained reinterpreting programs simpler abstract domain definition useful computing strictness properties helpful answering questions dealing power method manner independent computational procedure used questions take form given class programs p method complete class information lost method power enhanced etc contrast give proof technique answer questions computation independent manner specifically eaxioms syntactic characterization information lost method erewriting provides powerful algorithmindependent tool answering questions mean want know whether analysis procedure compute strictness property need know computation procedure need check strictness property preserved program modified permitted eaxioms eg changing constants mycrofts eeanalysis method thus using approach draw following conclusions mycrofts method information loss eeanalysis method due mapping constants single value abstraction steps lossless method uniformly ignores constants powerful ee analysis method precisely method computes strictness properties lhs rhs eaxioms additional power therefore source improvement enrich analysis domain adding points show mycrofts methods complete nonerasing programs wherein variables lhs rule appears rhs many important functions nonerasing append reverse matrix multiplication etc observe p nonerasing q e p main theorem eeanalysis method deduces shared strictness properties complete class nonerasing programs note proof makes reference computational procedure used deducing strictness properties enhance class permitting use ifthenelse erasing function following way ifthenelse must used potentially throw away function arguments example x else z throws away one z whereas x yz else yz throw away arguments eeanalysis method also complete class programs well hand eeanalysis method incomplete even simple class nonrecursive programs linear rhs functions f 1 f 2 section 12 illustrate incompleteness finally technique developed paper provides general principle establishing similar characterization theorems strictness analysis methods discussed 51 generality approach order generalize approach deal methods strictness analysis well extensions eeanalysis mentioned first need discover equational axioms capture loss information analysis method discovering eaxioms capture loss information intuitive way also useful proving completeness results may require considerable inge nuity example leave open problem discovery eaxioms method proposed wadler 1987 reasons lists using four point domain eaxioms induce equivalence relation classes programs remains show inferred strictness properties related equivalence classes programs first step direction give formal statement characterization theorem direction useful develop notion erewriting establish result similar theorem 1 relates erewriting performing reductions wrt several programs result make statement characterization theorem proof cleaner lot less cum bersome however establishing theorem may nontrivial appears way presence eaxioms changes reduction sequences e axioms make nonredex redex convert redex one lhs redex another accomplished allowing application eaxioms around redexes suggesting result similar theorem 1 hold theorem fails hold characterization explicitly refers programs eequivalent given program given next step show strictness properties computed shared strictness properties established using analysis fairly straight forward manner eaxioms correctly set difficult part establishing characterization theorem show every shared strictness property equivalently maximal shared strictness property computed proof involves showing step analysis procedure composition function definition pattern match etc preserves maximal shared strictness properties part proof simplified avoid pattern matching instead restrict language recursion equations case need show maximal shared strictness properties base functions arithmetic operators composition step loses information given eaxioms thus proof needs extended lemma 4 6 related work since preliminary version paper appeared popl 91 much research taken place area completeness abstractinterpretationbased analyses use denotational approach prove results similar general problem abstract interpretation based analyses proofs based notion similarity semantics permits semantics values confused confusion permitted exactly captured abstract domain show abstract interpretation linearly ordered domains firstorder typed higherorder language complete upto notion power limitations strictness analysis delta 19 confusion reddy kamins proofs based denotational semantics particular completeness result stated terms similarity semantics derived directly structure abstract domain approach enables establish result much wider applicability however approach advantages mention first eaxioms provide characterization closely tied abstract domain moreover eaxioms provide syntactic localized characterization information loss whereas reddy kamins approach based replacing entire values expressions others similarity semantics believe syntactic characterization useful drawing implications completeness method classes programs instance readily follows result mycrofts eeanalysis complete nonerasing programs contrast unclear simple arguments used draw conclusion based similarity semantics approach second important difference results follows reddy kamins result based semanticsbased formulation abstract interpreta tion often methods based abstract intepretation make direct use semantics based formulation since lead inefficiencies practice efficient computational algorithms hence developed implementation purposes see instance clack jones 1985 one must address issue completeness algorithms operational approach easily deal completeness issues algorithmic implementation levels well addition addressing formulation level indeed eeanalysis specified sekar et al 1990 provide computational methods well completeness results thus apply actual implemtation eeanalysis additional burden makes proofs quite detailed final remark reddy kamins work note method extend nonlinearlyordered domains remark basic problem possible loss information computing least upper bounds interesting note generalization eeanalysis arbitrary demands reported produces results quite similar abstract interpretation suffer drawback dealing domains lossy lubs interesting open problem whether demand analysis possesses completeness properties finite domains results reddy kamin enable us characterize power abstract intepretation terms information obtained concrete interpretation characterization typically useful compare power different abstract interpretations may answer question relative power two abstract interpretations respect ability deduce specific properties instance reddy kamins result seems suggest power abstract interpretation determined simply structure abstract domain however gave example two abstract interpretations used different domains able identify strictness properties address problem easily comparing abstract interpreta tions mycroft proposed concept predicatebased abstract interpretation approach addition two components interpretation namely domain interpretation functions mycroft adds third component form predicates capture program properties interest another way view predicates define notion observability mycroft proceeds set framework one compare power two abstract interpretations respect notion observability acknowledgments authors would like thank referees comments suggestions resulted significantly improving content well presentation article r compiler lazy ml theory practice strictness analysis higher order functions strictness analysis practical approach abstract interpretation unified lattice model static analysis programs construction approximation fixpoints compiling strictness streams higher order strictness analysis untyped lambda calculus 12th annual acm symposium principles programming languages computations nonambiguous linear term rewriting systems projections strictness analysis fast parallel implementation functional languages equals experience strictness analysis type inference perspective theory practice transforming callbyneed callbyvalue symbolic constraintsolving framework analysis logic programs beyond strong sequentiality power limitation strictness analysis based abstract interpretation strictness analysis nonflat domains abstract interpretation finite domains tr strictness analysismyampersandmdasha practical approach theory strictness analysis higher order functions projections strictness analysis compiling strictness streams strictness analysis power limitation strictness analysis based abstract interpretation fast parallel implementation lazy languagesmyampersandmdashthe equals experience completeness predicatebased abstract interpretation programming equational logic symbolic constraint solving framework analysis logic programs fast strictness analysis based demand propagation higherorder strictness analysis untyped lambda calculus abstract interpretation theory practice transforming callbyneed callbyvalue compiler lazy ml ctr wan fokkink jasper kamperman pum walters lazy rewriting eager machinery acm transactions programming languages systems toplas v22 n1 p4586 jan 2000 roberto giacobazzi francesco ranzato francesca scozzari making abstract interpretations complete journal acm jacm v47 n2 p361416 march 2000