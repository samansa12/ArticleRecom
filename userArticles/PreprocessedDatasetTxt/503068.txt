timing verification dynamically reconfigurable logic xilinx virtex fpga series paper reports method extending existing vhdl design verification software available xilinx virtex series fpgas allows designer apply standard hardware design verification tools design dynamically reconfigurable logic drl technique involves conversion dynamic design multiple static designs suitable input standard synthesis apr tools timing functional verification apr sections design recombined single dynamic system technique automated extending existing drl design tool named dcstech part dynamic circuit switching dcs cad framework principles behind tools generic readily extensible architectures cad toolsets implementation dynamic system involves production partial configuration bitstreams load sections circuitry process creating bitstreams final stage design flow summarized b introduction dynamically reconfigurable logic drl circuit system adapted time presents additional design verification problems conventional hardware design 1 standard tools cannot cope directly reason drl design methods typically involve use mixture industry standard tools along custom tools handcrafting cover conventional tools inadequacies paper introduces extensions previously reported cad tool named dcstech 2 created automate process translating dynamic designs vhdl placed routed circuits original version tool supported xilinx xc6200 family fpgas concentrated timing verification aspects problem paper reports extensions made dcstech target xilinx virtex family enhance capabilities mainstream commercial fpga design tool capabilities available family exceed xc6200 allowing designer work productively higher level abstraction combining virtex platforms capabilities extended dcstech designer ability specify designs rtlbehavioural vhdl place route verify timing dcstechs backannotation support extended produce vital vhdl models suitable drl addition processing sdf timing information enables backannotated timing analysis regardless level abstraction original design produced original dcstech tool written extensible architectures work verifies validity extensibility hooks extensibility dcstech architectures relies architectures cad tools supporting select set capabilities modern cad tools meet majority requirements exception configuration bitstream access although weaknesses particularly control routing apparent therefore design techniques presented readily extensible dynamically reconfigurable fpgas paper begins reviewing existing work section 2 presenting challenges drl design section 3 section 4 provide overview principles behind dcstech section 5 describes applied virtex section 6 discusses enhanced back annotation capabilities necessary design rtl behavioral abstraction levels tools designed architecture independent possible section 7 describes tool may extended xilinx inc permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee fpga02 february 2426 2002 monterey california usa support dynamically reconfigurable fpgas section 8 describe partial configuration bitstreams may obtained placedandrouted subsections dynamic design area current research design flow illustrated example section 9 paper concludes remarks future research use modern cad techniques static timing analysis sta within drl design flow 2 existing work last six years researchers developed number tools techniques supporting different target drl systems target systems characterized component set set resources make system custom computing machines ccms example include processors fpgas memory component set tools ranging highlevel language compilers structurallevel hardwaresoftware codesign environments designed target systems ccm compilers include tools nimble 3 compilers garp chip 4 compile ansic addition standard c compilation ccm compilers partition application software executable set hardware modules loaded onto reconfigurable datapath fpga tools aimed achieving rapid design flow similar conventional computer programming usually achieve optimum results tools jhdl 56 structuralrt level hardwaresoftware codesign environment based java allow designer customize circuitry specify placement allows designers use expertise optimize layout composition circuits achieve better results eg faster circuits smaller reconfiguration bitstreams partial reconfiguration used well designing associated software one environment another design challenge found component set single fpga device dynamic reconfiguration applied within individual devices sort design throws many situations industry standard tools cannot handle verification partial bitstream generation automatic configuration controller production many solutions developed type design also apply ccm design 7 luk et al described cad framework drl design targeted xilinx xc6200 fpga library based design approach used encourage design reuse control circuit placement increases similarity successive configurations reduces size partial configuration files required however structural design approach limits portability tools since new libraries targeted device required vasilkos dynasty 8 cad framework uses designer driven temporal floorplanning approach designer visualise layout tasks fpga time acts drlaware replacement place route par tool operates synthesised gatelevel designs number advantages ease area estimation ability control routing component placement exactly designer therefore ability generate exactly required layouts however tools closely associated xc6200 architecture considerable effort would required port operate devices research also taken place use alternative languages useful properties expressing aspects drl design ruby 9 pebble 10 lava 11 allow designer specify component placement using convenient methods usual use attributes associated standard hdl designs pebble also includes reconfigureif statement builds support drl recent work lava seen used xilinx virtex fpga dcs cad framework provides simulation dcsim 1 technology mapping back annotation dcstech 2 configuration controller synthesis dcsconfig 12 although dynasty uses ideas dcstech dcstech partitions design higher level abstraction gives two advantages form portability circuit specialisation synthesis tool since design partitioned abstract level dcstech requires little device specific knowledge majority partitioning process platform independent resulting circuit description tool therefore easily ported support different architectures designs synthesised partitioning optimisations constant propagation performed synthesis tools design partitioned synthesis optimization stage may required obtain best results level abstraction area requirements circuit difficult estimate iteration may required obtain optimal layout researchers concentrated design lower levels abstraction allowing designer absolute control component placement routing tools include chaste 13 provides access xc6200 configuration file jbits sdk 1415 provides variety tools access modify verify virtex configurations addition allows designer produce new whole partial configurations approach could also valuable method performing final optimizations end higherlevel design flow 3 implementation challenges drl based manytoone temporal logic mapping means different logic functions occupy area logic array different points time tasks share physical resources cannot active time mutually exclusive tasks also mutually exclusive algorithmic reasons set mutually exclusive tasks called mutex set swappable tasks termed dynamic tasks tasks altered way time described static tasks designing dynamic system various tasks must placed way ensure task accidentally overwritten active consequences error range subtle errors operation damage fpga dynamic tasks added removed array loading partial configuration files alter logic routing designer guarantee necessary connections dynamic task surrounding environment made routing paths configured onto array dynamic task must meet routing coming surrounding array intended connect bitstreams must cause contention example configuring second driver onto bidirectional routing resource final problem designer faces standard cad tools intended design static circuits accept mapping one function particular logic resource similarly multiple drivers particular signal would treated error since mechanism exists indicate drivers scheduled operate different times 4 automating dynamic design processing dcstech 41 overview dcstech designed tool help designer overcome problems thought domain converter static dynamic domains fig 1 input dynamic system split series static designs conventional design tools synthesis apr used required implementation steps performed static subdesigns number files produced vital compliant vhdl files describe systems functionality created along sdf files specifying circuits timing configuration bitstreams files require processing useful verify designs functionality timing sdf vhdl files must converted back dynamic domain order simulate context overall system implement dynamic system configuration bitstreams must also converted valid partial reconfigurations original version dcstech supported domain conversion timing information designs specified netlist level therefore vital compliant simulation model could produced original design use higher design abstractions behavioural code combined synthesis means netlist exists synthesis current version therefore added netlist conversion original sdf conversion leaving bitstream conversion manual process progress far illustrated fig 2 42 design file flow dynamic design input dcstech consists vhdl files describing systems functionality dynamic task represented component instantiation hence toplevel design structural within component synthesisable level abstraction used designer assigns dynamic task mutex set mutex set assigned zone logic array dynamic tasks within set must reside within corresponding zone thus tasks within mutex set overwrite static logic tasks mutex sets unaffected correct system operation assured long appropriate reconfiguration schedule used possible configuration control mechanism used activate deactivate tasks could cause problems incorrectly designed clearly zone mutex set must large enough accommodate largest task dcstech bitstream original version version future work dcstech bitstream original version version future work dynamic intent system captured reconfiguration information format rif file file describes conditions tasks activate configured onto fpga deactivate removed stopped mutex set belong placement information rif file published 2 static domain one subdesigns deals static tasks design dynamic task placed figure 1 static dynamic domains figure 2 domain transforms performed different dcstech versions reconfiguration information conventional cad tools dcstech conventional cad tools timing model timing model timing model dcstech dynamic dynamic static designs static results dynamic timing results reconfiguration information reconfiguration information conventional cad tools dcstechdcstech conventional cad tools timing model timing model timing model timing model timing model timing model dcstechdcstech dynamic dynamic static designs static results dynamic timing results subdesign concept terminals used ensure correct routing connectivity dynamic tasks surrounding environment special components used lock end hanging signals particular location logic array locating hanging ends signal place connection easily produced one reserved area added static subdesign mutex set original design similarly dynamic task components surrounded boundingbox ensures placed within reserved area mutex set fig 3 subdesigns placed routed standard backend tools accurate estimates timing made estimates typically written sdf file allow evaluation performance system information must applied overall dynamic system dcstech capable mapping sdf information dynamic design simulation model dcsim creates allowing timing simulation apply sdf file dynamic domain cells must changed match hierarchy dynamic system simulation applied addition timing entries terminals removed relevant timing information mapped isolation switches simulation artefacts added dcsim mimic designs dynamic behavior conventional simulator although system hierarchy altered domain conversion process actual timing information unaltered providing accurate timing model details process found 2 5 changes made dcstech number changes required order retarget static design representations virtex synthesis apr tools summarized table 1 changes allow us replicate capabilities dcstech made available xc6200 virtex table 1 methods implementing dcstech requirements xc6200 virtex problem xc6200 solution virtex solution reserving areas array reserve constraint prohibit constraint locating dynamic tasks within zone bbox attribute assigns bounding box loc constraint allows ranges assigned preventing partial circuits removed use register terminal component hanging signals changes design representation software settings lock hanging signals fixed array locations terminal components rloc constraints terminal components loc constraints reserving areas logic array simple change attribute reserve constraint prevents xact6000 placing logic specified zone specifying prohibit constraint task xilinx cad tools added user constraints format ucf file dynamic task locations set using combination rloc bbox attribute xact6000 virtex tools allow location ranges specified loc attribute registers could read written configuration interface line connected registers considered valid connection even static tasks c mutually exclusive dynamic tasks floorplan dynamic design floorplan statictask design floorplan dynamic task b floorplan dynamic task c dcstech special terminals used lock ends cut signals fixed position statictask design relevant dynamic task designs dynamic static reserved static tasks c mutually exclusive dynamic tasks floorplan dynamic design floorplan statictask design floorplan dynamic task b floorplan dynamic task c dcstech special terminals used lock ends cut signals fixed position statictask design relevant dynamic task designs dynamic static reserved figure 3 floorplan drl circuit containing two dynamic tasks processing dcstech register incomplete connectivity output connection using registers terminate hanging nets therefore prevented partial circuits removed technique work virtex synthesis tools making two changes necessary way dynamic designs represented static domain firstly vhdl entity dynamic task must ports describe connectivity whereas terminal components required addition prevent large areas static design optimised away connectivity inputs outputs reserved area indicated instantiating blackbox mutex set component encapsulating inputs outputs dynamic tasks mutex set solves problem xilinx foundation tools support option remove unconnected logic suffices placement routing stage terminal component used terminate hanging nets changed wire buffer mapped lookuptable component replaces rpfds fdcs used xc6200 advantage contribute functionality accepting location constraints simplifies changes required final bitstream generation stage netlist conversion process changes described allow basic requirements outlined section 3 met standard virtex tools however one area weakness constraining placement routing constraints described apply logic placement therefore routing circuits exceed bounding boxes invade reserved zones although xilinx modular design tools 16 help alleviate problem factors designer must take account configuration bitstreams produced either rerouting offending lines including routes appropriate configurations effect dynamic task boundingbox increased size accommodate wayward routing 6 enhanced backannotated original statictodynamic domain conversion support sdf files enhanced new revision dcstech sdf information applied gatelevel vital compliant designs design produced abstract level sdf information cannot applied modern apr tools virtex tools capable writing vital vhdl netlist matches sdf files netlists typically flat seas gates hierarchy although many tools allow control hierarchy flattening files must included domain conversion process order allow timing analysis performed design abstractions structural level used dcstech handles domain conversion process instantiating dynamic tasks vhdl netlist static design resulting dynamic circuit effect gatelevel version original rtl design drl aware synthesis tool might produce dcsim used simulate circuit since hierarchy system often changes synthesis apr tools flatten design may match hierarchy entries original rif file therefore new rif file written part domain conversion process domain conversion therefore produces complete new dynamic design representation dcsim use build simulation model reported section 4 relevant timing information associated terminal components usually applied dcsims isolation switches references terminal components removed design however virtex terminal components functionality therefore interfere simulation system result components contribute timing data need removed static dynamic domain conversion hence need retarget timing data isolation switches although isolation switches still introduced needed simulate circuit simplifies conversion process thereby reducing runtime dcstech tool 7 extended dcstech tool dcstech provides multiarchitecture support interfaces several third party cad tools originally designed extensible much technique generic device independent possible obviously changes cad environment device architectures mean parts technique need changed either take advantage device features coexist supporting cad dcstech dependent functions rif vhdl dynamic design domain virtex dependent functions device dependent functions static design domain log file crf file options dcsims crf file dcstech dependent functions rif vhdl dynamic design domain virtex dependent functions device dependent functions static design domain log file crf file options dcsims crf file figure 4 file flow extended dcstech tool framework major changes came back annotation side support vhdl domain conversion added however something specific virtex device necessary step enable designers work higher levels abstraction therefore concepts behind tool remain generic architecture independent design methodology outlined section 4 remains unchanged revision facilitate extensibility device dependent functions stored dynamic link libraries new devices therefore supported addition dll file flow dcstech shown fig 4 shaded files represent nondesign files used part dcstechs operation crf files crossreference files used store information terminal component connectivity isolation switch locations dcsim log file contains reports user options file used alternative typing command line switches design philosophy described paper able provide drl design support fpga cad tool set provided complies following requirements fpga dynamically reconfigurable synthesis design translation vhdl available suitable component found lock ends hanging nets particular location logic array method available prevent unconnected circuits removed design components assigned boundingbox constraining location array areas array reserved prohibiting logic placed within area apr tools produce back annotated vital vhdl sdf files names elements instantiated design structural manner predictable within sdf vital vhdl models components generated synthesis tools generally unpredictable names structural components usually named instantiation label hierarchy original design dcstech able find terminal components added design dynamictostatic conversion part staticto dynamic conversion apr configuration file open modification via open file format apis jbits necessary dcstech would necessary modify bitstreams order actually implement system since modern cad packages fulfil requirements exception bitstream access support majority modern dynamically reconfigurable fpgas possible minor alterations addition described sections 5 6 8 bitstream generation conventional cad tools provide configuration bitstream partial circuits produced dcstechs dynamic tostatic conversion process shown fig 3 partial circuits consist one configuration representing static circuits configuration dynamic circuit static circuits connected terminal components lock ends floating connections dynamic circuits place similarly floating connections static circuits within dynamic task locked place identically located terminals overlying terminal components must converted connection two routes altering configuration bitstream unless tools capable producing partial configuration files output files represent configuration partial circuit otherwise unconfigured fpga files applied fpga would blank existing circuitry system operate correctly however circuitry shares resources partial circuit loaded disrupted activated partial circuit configurations need converted partial configurations reconfigure area occupied dynamic task within mutex set zone complication caused lack control routing placement noted section 5 possible routing dynamic task use line routing static task dynamic task configured onto array routing conflict cause errors operation possibly device damage designer must ensure routing resources used dynamic task shared static tasks dynamic tasks mutex sets target device configuration mechanism another factor strategy used produce partial configurations xc6200 allows individual parts logic array altered therefore parts array dynamic task boundingbox need considered virtex however reconfiguration takes place columns smallest unit configuration data applied frame configures subset resources column fortyeight frames required completely configure column 17 result logic routing column makes part dynamic task boundingbox must included partial reconfiguration bitstreams therefore static logic routing overlaps columns must included partial configuration bitstream dynamic task otherwise could overwritten devices contain bidirectional routing resources care must taken configure second driver onto line course partial reconfiguration otherwise device damage may occur one possible solution problem apply deactivate configuration blanks existing circuitry part array prior loading new dynamic task would increase reconfiguration interval prevent static circuit disruption deactivate configuration needs contain static logic within reconfiguration zone generation partial bitstreams virtex device therefore consists several steps firstly routing resources used partial circuit must evaluated jroute 18 part jbits sdk includes functions perform step routing checked conflicts circuits reside array concurrently physical boundingbox dynamic task includes logic routing determined area occupied mutex set circuitry reconfigured dynamic task therefore includes logic routing within columns occupied mutex set area virtex fpga terminal components converted connections simply connecting routes sides lut ie merging routing two overlapping terminals lut configured behave like wire processes completed partial bitstreams affected fpga areas generated possibly including deactivate configurations jbits includes support process via jrtr 15 9 example complex number multiplier simple example demonstrate operation dcstech dynamically reconfigurable constant complex number multiplier presented complex numbers consist two parts real part imaginary part coefficient j square root 1 product two complex numbers calculated follows imag imag real real real real imag imag real imag preal pimag real imaginary parts product p complex numbers b operation therefore requires four multipliers adder subtractor example complex product formed multiplying input complex number x constant complex coefficient constant coefficient values hardwired constant coefficient multipliers potentially saving area improving performance diagram system coefficient 10 j12 presented fig 5 constant complex coefficient dependent multiplication factors four multiplier circuits therefore support different coefficient four constant coefficient multipliers need changed preal pimag xreal ximag preal pimag xreal ximag figure 5 circuit multiply 10j12 multipliers reconfigured alter multiplication factor thus allow system support coefficients remaining circuitry require alteration way set four multipliers therefore forms dynamic task one dynamic task required coefficient supported different coefficients mutually exclusive dynamic tasks members mutex set assigned area logic array since registers adders surrounding dynamic multipliers altered reconfigurations constitute static circuitry based assignments dcstech partition dynamic design multiple static designs placed routed shown fig 1 figure 7 layout complex multipliers static circuitry consists registers adder subtractor fig 5 terminal components locking ends connections multipliers place complex multiplier two dynamic tasks allowing multiplication coefficients 10 created layout 10 task static circuitry apr xcv50 shown figs 6 7 fig 6 figure 6 postapr layout 10j12 dynamic task comprises four multipliers shown fig 5 surrounded terminal components areas highlighted gray indicate terminal components area highlighted white indicates dynamic task boundingbox shows evidence routing exceeding dynamic tasks boundingbox similarly fig 7 shows static circuits routing placed within boundingbox implemented partial configuration bitstreams include stray routing discussed section 8 apr circuits timing verified dcstech used reassemble static parts system vital compliant gatelevel model dynamic system create matching sdf file new rif file written part process match design hierarchy changes occurred synthesis apr model processed dcsim produce dynamic simulation model making use new rif file waveform timing simulation system shown fig 8 input number represented xreal ximag set ns nrst reset input deasserted allowing multiplier begin operation two status signals bottom fig 8 indicate configuration status two dynamic tasks initially task activates first multiplication therefore matching result displayed outputs preal pimag 200 ns 240 ns task activates simplicity time 50 ns assumed reconfiguration two clock edges occur reconfiguration interval exact configuration mutex set zone uncertain time simulation model therefore puts x dynamic task outputs period seen emerging pipeline 290 355 ns thereafter result multiplication 10 j12 42 j340 displayed p output 10 future work large systems use timing simulation verify timing slow process simulator require long run times also lot effort required generate testbench sufficient testvectors coverage static timing analysis sta timing verification approach evaluates timing path circuit without testvectors tools read variety file formats including vhdl sdf since new version dcstech produces files therefore may enable application sta dynamic design would take account time consumed reconfigurations would allow verification timing issues affect circuit performance maximum clock speed critical path setup hold times drl design flow presented paper designer faced problem partitioning design rt level rather lower level abstraction level exact area occupied block unknown although estimated approximately therefore iteration refinement may required obtain suitable partitioning design management tool could simplify process estimating area requirements task application presenting information graphically temporal floorplanners netlists already developed would similar idea higher level abstraction bitstream generation steps outlined section 8 currently carried manually apis jbits carry many complex functions associated virtex partial bitstream generation possible automate process focus future work 11 conclusions paper shows major similarities standard cad tools available different fpga architectures exploited implement easily portable cad framework drl design technique relies select set capabilities supported cad toolsets within underlying fpga platforms supporting tools automated support main stages drl design flow provided including design specification simulation synthesis apr timing extraction final stage design flow partial bitstream generation ideas behind partial bitstream generation common across different fpga families outlined however exact method used produce bitstreams depends capabilities standard cad tools fpgas configuration interface broad similarities figure 8 backannotated timing simulation waveform dynamically reconfigurable complex multiplier nrst xreal ximag pimag preal 10j12status 15j14status nrst xreal ximag pimag preal 10j12status 15j14status evident standard cad tool support platforms replicated level indeed vendors provide mechanism accessing configuration bitstreams since compromises design security result bitstream generation techniques port well families virtex however availability jbits sdk provides convenient access bitstream along number functions useful bitstream generation 12 r verification dynamically reconfigurable logic methods exploiting simulation technology simulating timing dynamically reconfigurable logic hardwaresoftware codesign embedded reconfigurable architectures garp architecture c compiler jhdlan hdl reconfigurable systems synthesizing rtl hardware java byte codes compilation tools runtime reconfigurable designs dynasty temporal floorplanning based cad framework dynamically reconfigurable logic systems new hdl research challenges posed dynamically reprogrammable hardware pebble language parameterised reconfigurable hardware design lava jbits hdl bitstreams seconds modelling synthesis configuration controllers dynamically reconfigurable logic systems using dcs cad framework chaste hardwaresoftware codesign testbed xilinx xc6200 jbits java based interface reconfigurable computing partial runtime reconfiguration using jrtr xilinx alliance 31i modular design virtex series configuration architecture user guide jroute runtime routing api fpga hardware tr hardwaresoftware codesign embedded reconfigurable architectures garp architecture c compiler jroute pebble modelling synthesis configuration controllers dynamically reconfigurable logic systems using dcs cad framework partial runtime reconfiguration using jrtr verification dynamically reconfigurable logic synthesizing rtl hardware java byte codes compilation tools runtime reconfigurable designs jhdl hdl reconfigurable systems ctr mahmoud meribout masato motomura new design methodology efficient prediction quality metrics logic level design towards dynamic reconfigurable logic journal systems architecture euromicro journal v48 n810 p285310 march mahmoud meribout masato motomura efficient metrics highlevel synthesis dynamically reconfigurable logic ieee transactions large scale integration vlsi systems v12 n6 p603621 june 2004 ian robertson james irvine design flow partially reconfigurable hardware acm transactions embedded computing systems tecs v3 n2 p257283 may 2004