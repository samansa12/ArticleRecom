empirical study fortran programs parallelizing compilers results reported empirical study program characteristics important parallelizing compiler writers especially area data dependence analysis program transformations state art data dependence analysis parallel execution techniques examined major findings included many subscripts contain symbolic terms unknown values methods determining values compile time evaluated array references coupled subscripts appear quite frequently subscripts must handled simultaneously dependence test rather handled separately current test algorithms nonzero coefficients loop indexes subscripts found simple either 1 1 allows exact realvalued test accurate exact integervalued test onedimensional twodimensional arrays dependencies uncertain distance found rather common one main reasons frequent appearance symbolic terms unknown values b introduction key success parallelizing compiler accurate data depen ence information statements program would like identify independent variable references statements program xecuted independently ie parallel several algorithms proposed used quite successfully many parallelizing compilers 1 2 3 4 28 11 onetheless ability still limited relatively simple subscripts paper identifies three factors could potentially weaken results current algorithms terms unknown values 2 coupled subscripts 3 nonzero non sunity coefficients loop indices discuss effects factors presen ome measured results real programs also report characteristics data dependences found real programs state art data dependence analysi nd various parallel execution techniques examined light informa tion information also help indicate direction improvement hose areas begin brief review basic concepts data dependence analysis effects parallel execution programs 2 data dependences three types data dependences 16 statement s1 uses resul f another statement s2 s1 flow dependent s2 s1 store result s2 fetches old data stored location s1 antidependent 2 s1 overwrites result s2 s1 output dependent s2 data dependences dictate execution precedence among statements following loop xampleexample 2 loop s1 flow dependent s2 reads result s2 l previous iteration due dependence execution s1 iteration must fol ow execution s2 iteration i1 s3 antidependent s1 execution s3 iteration must follow execution s1 iteration i1 s3 outpu ependent s2 execution s3 iteration must follow execution s2 f iteration i2 execution precedence may also affected control dependence example statement decides branch take hence statements branches cannot executed decision made control dependence ot studied paper order speed program execution parallel machine parallelizing compiler used discover independent statements executed arallel loops usually important source parallelism usually contain computation program depen ences among statements loop dependences restricted within iteration boundaries different iterations loop executed concurrently xample 22 example although s2 flow dependent s1 dependence restricted awithin iteration ie crossiteration dependences therefore iterations loop executed parallel example shows parallelizing compiler needs determine whether data dependence exists bu lso needs analyze whether dependence prohibits loop parallelization many l transformation techniques eg loop interchange 28 detection doacros oops 9 require even information dependences dependence distances dependence direction vectors data dependence occurs across several iterations loop distance called dependence distance respect loop data dependence example 21 constant distances instance output dependence e s3 distance 2 dependence occurs within iteration th ependence distance 0 note statements may nested number loops dependences may different distances respect different loops example 23 end example flow dependence s1 s2 distance 1 respect loop distance 1 respect j loop dat ependence distance may always constant consider following example example 24 end dependence s1 s2 variable distance use s1 e denote instance s1 iteration loop use s2ik denote th nstance s2 iteration loop iteration k k loop s11 executed s211 s221 s2n1 s12 execute efore s222 s232 s2n2 shall give examples variable dependence distances section 42 dependence direction vector 28 contains several elements corresponding one enclosing loops element dependence direction vector calle dependence direction simplify discussion take example nest two loops outer loop index variable inner loop index vari ble j suppose result data dependence statements s1 s2 r execution s1 must precede s2 dependence direction fo r j loop depending espectively dependence direction loop determined similarly note however since loop outmost loop dependence direction cannot example 23 flow dependence s1 s2 dependence direction vector example 24 flow dependence s1 s2 ependence direction vector dependence direction vector two vectors sometimes combined written obviously dependence direction vectors used describe general data dependences although precise latter many important loop arallelization transformation techniques dependence direction vectors usually provide nsufficient information nonetheless dependence distances important tech iques data synchronization 25 29 loop partitioning 21 22 24 processor fallocation 9 23 processor selfscheduling 12 26 matter act data synchronization loop partitioning schemes assume subscripts simple form ic loop index c constant dat ependences assumed constant distances dependences constant distances existing schemes either fail suffer loss runtime efficiency 2 experiment empirical study evaluates complexity array subscripts data dependences pin real programs measurements done dozen fortran numerica ackages table 1 total thousand routines hundred thousand lines code sampling mix library packages linpack ispack itpack msl fishpak working programs spice smpl etc library packages important routines called frequently users pro rams scientific engineering computing hand working programs may better reflect array reference behavior userwritten programs urther study may needed distinguish array referencing behavior library routines working programs code measurement embedded parafrase 13 restructuring compiler developed center supercomputing research development university illinois urbanachampaign study differs previous related works directly measure variable references data dependences whereas previous works eg 22 25 15 focused counting number statements executed parallel work preliminary attempt examine closely effects array subscript pat erns important techniques used compile time run time efficient parallel execution yet relate results previous results ostly higher levels eg statement level relationship different levels certainly important subject study analysis presented follows section 3 examine form array c subscripts cover three factors affect data dependence analysis linearity oupled subscripts coefficients loop indices section 4 show e effectiveness several wellknown data dependence test algorithms get som dea often pair array references detected independent e algorithms recorded number independent array reference pairs detected ach algorithm also report statistics data dependence distances finally make concluding remarks section 5 3 subscripts array references 31 linearity array subscripts consider mdimensional array reference loop nesting n loops 1 ndexed normally reference following form exp subscript expression 1 subscript expression following form r index variable 1 j n coefficient 1 j n b th emaining part subscript expression contain index variables note following convention mathematics b may called constant term owever nest loops possible b may contain unknown variables updated within loop convenience call b zeroth term subscript expression linear coefficients zeroth term integer constants otherwise nonlinear subscript expression ay behave like nonlinear function respect loop indices f subscript expressions reference linear say reference linear ome subscript expressions nonlinear reference partially linear finally none expressions linear reference nonlinear virtually current algorithms data dependence tests operate linear subscript pexpressions recently symbolic manipulation schemes proposed fo artially linear nonlinear cases 18 several restructuring techniques also e e used transform nonlinear subscripts linear ones notable ones ar xpression forward substitution induction variable substitution constant folding eg see 2 14 table 2 gives overview linearity array subscripts 12 numerical packages transformation techniques count references loops table 2 see 8 array references c two dimensions column 2 also 53 references linear olumn 3 13 partially linear column 4 34 nonlinear column 5 major reason subscript expression nonlinear contains nknown variable ie nonindex variable unknown value array ele ment two table 3 shows unknown variables major cause found quite number unknown variables dummy parameters subroutines related dummy parameters assume fixed alue run time value normally set user program run transferred main program subroutines variables usuall pecify size matrix number diagonals number vectors e transformed common practice include user assertions make th alue parameters known compiler 8 15 matter fact e value parameters usually affect outcome data dependenc est often providing value mainly helps data dependence test algorithms eliminate symbolic terms subscripts loop bounds unknow ymbolic terms may also eliminated interprocedural constant propagation 8 data dependence tests could extended allow symbolic terms fixing value would unnecessary example 1 presented suggestions handle symbolic terms use interprocedural constant propagation ecause analyzed procedures separately write driver programs call l subroutines packages examined effect user assertions inearity subscripts nonetheless since user assertions often provide f results interprocedural constant propagation result partly reflects effect nterprocedural constant propagation time consuming provide user assertions one thousand routines instead six packages chosen nalyzed user assertions packages linpack eispack nasa baro itpack old linpack eispack chosen user assertions avail ble previous experiment 15 rest packages chosen randomly table 4 shows details study without help user assertions 7 onedimensional array references 45 twodimensional array l references nonlinear using user assertions 28 onedimensiona rray references 15 twodimensional array references remained nonlinear l user assertions 27 twodimensional array references partially inear using user assertions 25 twodimensional array references partially linear table 4 also shows number unknown variables found including hose partially linear references remaining unknown symbolic terms examined causes one many nonlinear subscripts showed loops subroutine calls external func ion statements nonlinear subscripts cannot transformed linear subscripts using simple forward substitution techniques unless call effects tatements determined interprocedural analysis studied 35 realvalued subroutines linpack another 35 complexvalued subroutines linpack hich almost identical 10 using summary use mod information expose l call effects 6 results linpack given table 5 suggest non inear subscripts reduced considerably using interprocedural analysis note number unknown variables include partially linear references besides unknown symbolic terms next common reason nonlinear subscripts presence array index indirectly element array following example linpack ipvt integer vector pivot indices z various minor reasons nonlinear subscripts omitted due limited space 32 coupled subscripts section study phenomenon called coupled subscripts demonstrates weakness current data dependence tests test data dependence pair array references ideally array dimensions considered simultaneously however current algorithm est dimension separately singledimension test far easier tunately often suffices discovering data independence however cases data independence could proven testing dimension separately data dependence assumed main reason cases coupled sub cripts loop index appears one dimension following simple example eispack r example data dependence two references rm1 could detected dimensions considered simultaneously course measure often coupled subscripts actually hurt single dimension data dependence test requires testing dimensions simultaneously find enuine data dependences methods known time consuming recently 19 proposed new algorithm quite efficient using new test eispack routines data independence detection improved 10 using single dimension tests 7 discussed different approach called linearization dealing ith coupled subscripts measure often coupled subscripts occur programs shall discuss later coupled subscripts also common cause dependence ave nonconstant distance examined pairs multidimensional array references 12 packages need tested data dependence aliasing effects ere ignored reference pair one array find four fivedimensional array reference pairs coupled subscripts table 6 shows umber two three dimensional array reference pairs linear partially linear subscripts table 7 shows 9257 pairs twodimensional array eferences linear partially linear 4105 44 coupled subscripts 3 coefficients loop indices data dependence exists integer solutions satisfy loop r bounds constraints however time consuming obtain intege olutions general existing algorithms either check integer solutions without considering sloop bounds check realvalued solutions one dimension time e g ee 1 3 28 test efficient although less effective give brief account two tests represent two approaches gcd test gcd test integer test ignores loop bounds based wellknown fact diophantine equation solutions greatest common ivisor gcd coefficients must divide constant term example 31 f end data dependences exist s1 s2 due two references e e subscript referenced s1 values index variables b qual s2 values index variables hence derive following diophantine equation subscripts gcd coefficients variable terms 2 divide constant 101 therefore equation solutions data ependence s1 s2 due references banerjeewolfe test gcd test banerjeewolfe test first establishes diophantine equation equate subscripts two tested array references however test treat diophantine equation real valued equation whose domain convex set defined constant loop bounds dependence directions according well nown intermediate value theorem real analysis real valued equation solutions given domain minimum lefthand side reater zero maximum smaller zero example 32 end diophantine equation example follows e treated real function domain 1 30 lefthand side th quation maximum 110 therefore equation solutions data dependence s1 s2 due references banerjeewolfe test first presented 3 28 produced new version includes dependence directions functions domain 1 used another ver ion determines dependence levels instead dependence directions test based real values exact test general nonetheless 3 howed pair singledimensional arrays nonzero coefficients r loop indices either 1 1 data dependence exists eal solutions system derived subscript expressions obviously multidimensional array reference pairs coupled subscripts cf sec ion 32 dimension independent conclusion apply 19 showed conclusion could also apply twodimensional array references ith coupled subscripts array references two dimensions although conclusion longer applies general small coefficients make est integer solutions much easier reasons interested magnitude coefficients array references data table 8 array references 12 packages linear partially linear notice percentage shown dimension ydimension basis first column shows percentage references e constant subscripts second column shows percentage references hav onzero coefficients either 1 1 third column shows percentage references coefficients greater 1 percentage hird case small result suggests singledimensional references linear partially linear realvalued solutions suffice cases also checked coefficients array reference pairs coupled subscripts expected found among 4105 pairs twodimensional array references ith coupled subscripts 3997 pairs ie 97 coefficients 1 1 threedimensional array reference pairs coupled subscripts airs 100 coefficients 1 1 note single dimension cases r make examination subscript pairs hence could obtain direc esults often realvalued solutions suffice single dimension tests 4 data dependences data dependence test algorithms e also measurements frequency different data dependenc ests used parafrase number array reference pairs found independent method statistics dependence distances 1 usage frequency dependence test methods c mentioned earlier different test algorithms different complexity apability general powerful algorithms handle general cases r accuracy usually require execution time hence test algo ithms applied hierarchically parafrase parafrase includes existing singledimension test algorithms simpler faster tests applied first ca rove neither data independence data dependence tests applied conceivable chance test used affected arrangemen f test sequence testing task may accomplished test r e used unclear us test sequence would achieve best compile fficiency alter one chosen parafrase sequence described following facilitate understanding statistics first explain input output tests parafrase usually retests data e dependences pass needs dependence information result sam air references may tested different passes undergoing test sequence e described however different passes may require check different dependenc irection vectors input tests pair array references loop nesting e c encloses either references dependence direction vector relevant th urrent pass output answer whether data dependence exists constraint dependence direction vector answer uncertain data depen ence assumed test sequence subscripts reference pair constants constant test per formed simply compares two constants equal dependence otherwise dependence assumed dimension test proceeds next dimension 1 apply root test performed root test banerjeewolfe test disregarding constraint given dependence direction ector reports data independence test terminates otherwise proceeds either test 3 test 4 test 5 depending loop nesting test 2 prove data independence references e singly nested loop exact test 4 28 performed case th iophantine equation derived subscripts two unknowns hence determined exactly whether dependence exists dependence oes exist test terminates otherwise proceeds test 5 test 2 succeed test 3 apply subscript contain one loop index nonzero coefficient gcd test 4 per formed independence proven test terminates otherwise proceeds est 5 three remarks remark 1 test 3 exact test could extended determine exactly dependence directions possible however parafrase chooses disre ard dependence directions exact test instead uses theta test 5 examine given dependence directions remark 2 exact test could extended used test 4 e indices may measure result thi xtension remark 3 gcd test could applied subscript however two unknowns equation likely common ivisor coefficients would equal 1 useful test 1 divide number none 1 3 4 applies 3 prove independence theta test performed banerjeewolfe test uses given depen ence direction vector constraint thus accurate e root test 2 would either show given dependence directions ar mpossible case test terminates conclude directions bare possible latter case direction remaining possi le direction every loop equal test 6 performed otherwise test proceeds next dimension test enters 5 point remaining possible direction every loop corresponds dependence crosses loop teration equal test performed see direction vector contradicts ethe programs control flow possible execution paths refer nce r1 r2 need cross iteration loop dependence could exist r1 r2 equal direction words independence roven otherwise dependence assumed test proceeds next dimension following test steps measured usage frequency ndependence detection rate single dimension tests parafrase table 9 gives measured results data obtained running program arafrase detecting doall loops ie loops without crossiteration data depen dences independence detection rate rate particular test method detects ndependence reference pair constraints given dependence direction vectors method detects data independence others used uccess counted method even though methods used next could potentially detect independence well table 9 useful observations ca e made overall test sequence applied 119755 times sum using frequencies constant test real root test summing independences proven method together 50625 independences c total represents overall independence detection rate 44 one als ompute percentage independences detected test method l total independences get idea contribution method particu ar test sequence important note test sequence applied linear subscripts partially linear subscripts mentioned earlier pair references may tested repeatedly l different constraints dependence direction vectors different passes al ses test method counted cumulatively independence detection successes counted cumulatively uses required eac uccess contributes certain parallelization technique recall instance even data dependence exists two statements absence crossiteration ependence directions ie would allow parallel execution different loop iterations point equal test benefits theta test whenever latter reduces original dependence direction vector one equal directions equal test good example using information control flow within e loop body sharpen data dependence analysis would interesting measur ow often independences detected theta test equal test jointly either one alone result certainly refined study example capability test method evaluated precisely applying first tes equence 32 data dependence distance mentioned earlier many data synchronization schemes loop partitioning techniques assume constant dependence distance constant dependence distance als akes loop scheduling doacross loops effective complicated dependence e patterns difficult handle efficiently moreover dependence distances ar ifficult determine subscript patterns complicated matter fact many e parallelization techniques eg 22 24 27 require constant dependenc istances assumed following three conditions array subscripts loop nesting 1 reference subscripts form aic loop index c constants note one loop index appears subscript expres tsion dependence outer loop level likely varied distances 2 coupled subscripts cf section 32 3 nonzero coefficients dimension 1 explained following example example 41 end s1 s2 example dependence distance respect f c loop variable dependence distance respect j loop ourse remains fixed within outer loop iteration changes increments condition 2 explained another example xample 42 end s1 s2 example dependence distance respect loop variable dependence distance respect j loop 1 find ut dimensions need considered simultaneously example 24 section 2 explained condition 3 lthouth exceptions found three conditions tests looked simple forms real programs condition satisfied id pursue sophisticated algorithms determine whether distances e c constant leave distances uncertain instead exception w ould determine possible dependence direction loop case corresponding dependence distance zero first determine common nest loops array reference pair measure dependence distance common nest loop divide depen ence distances four classes zero dependence cross loop iterations occurs within u iteration nity dependence crosses one iteration either forward backward r constant dependence crosses constant number 1 iterations eithe forward backward uncertain dependence distance constant cannot decided experiment ur measurement shows 73 array references linear partially linear subscripts ic form however many dependence distances con tant results dependence distance measurement presented table 10 e note distance measured every loop common pair dependent refer nces definition usage main reasons uncertain distance r 1 loops common references 2 coupled subscripts 3 nonlinea ubscripts note also good symbolic dependence test could help reduce number nonlinear subscripts hence could reduce cases uncertain depen ence distance study pursued counting cases different reasons 5 conclusion l presented measurements critical data dependence analysis oop parallel execution found quite array references amenable current data dependence test methods although data show many failed tests really data dependences efficient accurate tests certainly desirable discovered lot subscripts become nonlinear unknown r terms user assertions interprocedural analysis used effectively educe unknown symbolic terms see tables 3 4 5 sophisticated yet efficient symbolic manipulation scheme could useful since significan umber nonlinear subscripts still remain table 5 also discovered significant number reference pairs coupled sub cripts table 7 could cause inaccuracy current dependence test algorithms efficient algorithms needed handle subscripts welcome result overwhelming majority nonzero coefficients e either 1 1 table 8 allows efficient realvalued tests accurat integervalued tests 5 19 also makes test array references higher dimensions much easier reported measurements usage frequencies independence detection urates several wellknown data dependence test methods table 9 meas rements followed testing sequence parafrase data dependence distance also f measured dependent reference pair table 10 large percentage ncertain dependence distances 86 suggests sophisticated algorithms needed distance calculation also calls effective schemes data ynchronization doloop scheduling however measurements separate numerical libraries user programs conceivable enerality library routines might unknown symbolic terms user programs study numerical packages user programs ence statistics might biased toward library routines toward user pro grams future studies would interesting see differences etween two groups programs acknowledgement thank referees careful reading insightful comments whic ave helped us improve paper significantly j r allen dependence analysis subscripted variables application e program transformations phd dissertation department mathematical sci nce rice university houston tx april 1983 r j r allen k kennedy automatic translation fortran programs vecto form dept computer science rice university houston tx rice comp tr849 july 1984 3 u banerjee data dependence ordinary programs department computersciences university illinois urbanachampaign rpt 76837 nov 976 4 u banerjee speedup ordinary programs phd dissertation university illinois urbanachampaign dcs rpt uiucdcsr79989 1979 5 u banerjee dependence analysis supercomputing kluwer academic publish ers norwell mass 1988 j banning method determining side effects procedure calls phd dissertation standford university aug 1978 7 burke r cytron interprocedural dependence analysis paralleliza tion proc acm sigplan86 symposium compiler construction cm sigplan vol 21 7 pp 162175 july 1986 8 callahan k cooper k kennedy l torczan interprocedural constan propagation proc acm sigplan 86 symp compiler construction acm sigplan vol 21 6 june 1986 9 r g cytron compiletime scheduling optimization multiprocessors u phd dissertation university illinois urbanachampaign dcs rep iucdcsr841177 1984 10 j dongarra j bunch c moler g w stewart linpack users guide siam philadelphia 1979 springverlag heidelberg 1976 j fisher j r ellis j c ruttenberg nicolau parallel processing smart compiler dumb machine proc acm sigplan 84 symp ompiler construction sigplan notices vol 19 6 june 1984 r 12 z fang p yew p tang c zhu dynamic processor selfscheduling fo general parallel nested loops proc 1987 intl conf parallel processing august 1987 pp 110 13d kuck r kuhn b leasure wolfe structure advanced vec ttorizer pipelined processors proceedings compsac 80 4th interna ional computer software applications conference october 1980 pp 709 715 14d kuck r kuhn padua b leasure wolfe dependence graphs f compiler organizations proceedings 8th acm symposium principles rogramming languages williamsburgh va january 1981 pp 207218 15 kuck sameh r cytron veidenbaum et al effects progra restructuring algorithm change architecture choice program performance proc 1984 intl conf parallel processing pp 129138 august 1984 16d kuck structure computers computations vol 1 john wiley sons new york 1978 17d j kuck muraoka sc chen number operations simultaneously executable fortranlike programs resulting speedup ieee rans compt vol c21 12 pp 12931310 dec 1972 18 lichnewsky f thomasset introducing symbolic problem solving tech niques dependence testing phases vectorizer proc 1988 intl conf supercomputing july 1988 19z li pc yew cq zhu efficient data dependence analysis parallelizing pcompilers ieee trans parallel distributed systems vol 1 1 p 2634 jan 1990 20 nicolau j fisher measuring parallelism available long instruction word architectures ieee trans comput vol c33 11 pp 968 76 nov 1984 21 padua multiprocessors discussions theoretical practical prob lems phd dissertation university illinois urbanachampaign dcs rep iucdcsr79990 nov 1979 22 jk peir program partitioning synchronization multiprocessor systems u phd dissertation university illinois urbanachampaign dcs rep iucdcsr861259 mar 1986 23 c polychronopoulos j kuck padua optimal processor allocation pof programs multiprocessor systems proc 1986 intl conf paralle rocessing aug 1986 24 w shang j b fortes independent partitioning algorithms uniform dependencies proc 1988 intl conf parallel processing aug 1988 pp 633 25 b j smith pipelined shared resource mimd computer proc 1978 intl conf parallel processing aug 1978 pp 68 26 p tang p yew c zhu impact selfscheduling order performance multiprocessor systems proc acm 1988 intl conf supercomputing july 27 p tang p yew c zhu algorithms generating datalevel synchronization sinstructions center supercomputing research development univer ity illinois urbanachampaign rpt 733 urbana january 1988 28 j wolfe optimizing supercompilers supercomputers phd dissertation university illinois urbanachampaign dcs rpt uiucdcsr821105 october 1982 29c q zhu p c yew scheme enforce data dependence large multiprocessor systems ieee trans software eng vol se13 pp 726739 june package description subroutines lines linpack linear system package ispack eigensystem package 70 11700itpack 68 559 sparse matrix algorithms iterative methods sl mathematic science library cdc 407 20473fishpak 159 2264 separable elliptic partial differential equations package cm random algorithms acm 25 2712b old checon chebyshev economization program 74 321 aro shallow water atmospheric model 8 1052s nasa program nasa 4 78 mpl flow analysis program 15 2072s weather weather forecasting program 64 391 pice circuit simulation program 120 17857 total 1074 102195 table 1 analyzed fortran packages dim r linear partially linear nonlinear table 2 array element table 3 dimensions undefined defined table 4 dimension undefined defined def total array references 623 623 623 references w nonlinear subscripts 305 dimensions undefined defined def total array references 250 250 250 references w nonlinear subscripts eferences w partially linear subscripts 67 27 table 5 total array reference pairs 18698 2867 table 6 pairs w linearpartially linear subscripts 9257 2798 pairs w coupled subscripts linear 2935 airs w coupled subscripts partially linear 1170 13 table 7 table 8 linear partially linear subscripts test method usage frequency indep table 9 detection rate various dependence test methods tr interprocedural constant propagation interprocedural dependence analysis parallelization program partitioning synchronization multiprocessor systems scheme enforce data dependence large multiprocessor systems introducing symbolic problem solving techniques dependence testing phases vectorizer impact selfscheduling order performance multiprocessor systems parallel processing dependence analysis supercomputing dependence graphs compiler optimizations structure computers computations efficient data dependence analysis parallelizing compilers method determining side effects procedure calls speedup ordinary programs multiprocessors dependence analysis subscripted variables application program transformations optimizing supercompilers supercomputers compiletime scheduling optimization asynchronous machines multiprocessor compiler parallel processing ctr wenglong chang chihping chu infinity lambda test proceedings 12th international conference supercomputing p196203 july 1998 melbourne australia reiner w hartenstein karin schmidt combining structural procedural programming parallelizing compilation proceedings 1995 acm symposium applied computing p130134 february 2628 1995 nashville tennessee united states zhiyuan li compiler algorithms event variable synchronization proceedings 5th international conference supercomputing p8595 june 1721 1991 cologne west germany dan grove linda torczon interprocedural constant propagation study jump function implementation acm sigplan notices v28 n6 p9099 june 1993 niclas andersson peter fritzson generating parallel code object oriented mathematical models acm sigplan notices v30 n8 p4857 aug 1995 venugopal william eventoff automatic transformation fortran loops reduce cache conflicts proceedings 5th international conference supercomputing p183193 june 1721 1991 cologne west germany leechung lu marina c chen subdomain dependence test massive parallelism proceedings 1990 conference supercomputing p962972 october 1990 new york new york united states leechung lu marina c chen subdomain dependence test massive parallelism proceedings 1990 acmieee conference supercomputing p962972 november 1216 1990 new york new york michael p gerlek eric stoltz michael wolfe beyond induction variables detecting classifying sequences using demanddriven ssa form acm transactions programming languages systems toplas v17 n1 p85122 jan 1995 effective execution nonuniform doacross loops ieee transactions parallel distributed systems v7 n5 p463476 may 1996 manish gupta prithviraj banerjee paradigm compiler automatic data distribution multicomputers proceedings 7th international conference supercomputing p8796 july 1923 1993 tokyo japan kueiping shih jangping sheu chihyung chang efficient address generation affine subscripts dataparallel programs journal supercomputing v17 n2 p205227 sept 2000 michael wolfe beyond induction variables acm sigplan notices v27 n7 p162174 july 1992 e christopher lewis calvin lin lawrence snyder implementation evaluation fusion contraction array languages acm sigplan notices v33 n5 p5059 may 1998 michael oboyle g hedayat transformational approach compiling sisal distributed memory architectures proceedings 6th international conference supercomputing p335346 july 1924 1992 washington c united states vivek sarkar guang r gao optimization array accesses collective loop transformations proceedings 5th international conference supercomputing p194205 june 1721 1991 cologne west germany wenglong chang chihping chu jiahwa wu polynomialtime dependence test determining integervalued solutions multidimensional arrays variable bounds journal supercomputing v31 n2 p111135 december 2004 c koelbel p mehrotra compiling global namespace parallel loops distributed execution ieee transactions parallel distributed systems v2 n4 p440451 october 1991 yunheung paek jay hoeflinger david padua simplification array access patterns compiler optimizations acm sigplan notices v33 n5 p6071 may 1998 guohua jin zhiyuan li fujie chen efficient solution cache thrashing problem caused true data sharing ieee transactions computers v47 n5 p527543 may 1998 yunheung paek jay hoeflinger david padua efficient precise array access analysis acm transactions programming languages systems toplas v24 n1 p65109 january 2002 junjie gu zhiyuan li gyungho lee symbolic array dataflow analysis array privatization program parallelization proceedings 1995 acmieee conference supercomputing cdrom p47es december 0408 1995 san diego california united states partitioning labeling loops unimodular transformations ieee transactions parallel distributed systems v3 n4 p465476 july 1992 gina goff ken kennedy chauwen tseng practical dependence testing acm sigplan notices v26 n6 p1529 june 1991 patricio buli veselko gutin extended ansi c processors multimedia extension international journal parallel programming v31 n2 p107136 april david f bacon susan l graham oliver j sharp compiler transformations highperformance computing acm computing surveys csur v26 n4 p345420 dec 1994