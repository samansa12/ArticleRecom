randomized algorithms multiprocessor page migration page migration problem manage globally addressed shared memory multiprocessor system physical page memory located given processor memory references page processors incur cost proportional network distance times page may migrate processors cost proportional distance times page size factor problem schedule movements online total cost memory references within constant factor c best offline schedule algorithm called ccompetitive black sleator gave 3competitive deterministic online algorithms uniform networks complete graphs unit edge lengths trees arbitrary edge lengths good deterministic algorithm known general networks arbitrary edge lengths randomized algorithms presented migration problem simple better 3competitive oblivious adversary algorithm uniform graphs given approximately 228competitive grows large second powerful algorithm works graphs arbitrary edge distances also given algorithm approximately 262competitive 1 plus golden ratio large algorithms use random bits initialization phase run deterministically competitiveness simple coinflipping algorithm also examined b introduction common design shared memory multiprocessor system network processors local memory 9 14 19 design programming abstraction single global memory address space supported virtual memory system distributes one copies physical page memory among processors local memories processor p wishes read write memory address located page b first looks see page b contained local memory memory access done immediately p determines processor q hold page b transmits memory request q network communication cost dependent interconnection distance p q processor q services request transmits back p updated value address given virtual page stored multiple processors reduces communication overhead memory reads introduces problem maintaining consistency among multiple copies writes multiprocessors provide mechanisms maintaining consistency 5 therefore various network designers studied page migration problem 4 5 17 arises writeable page restricted single copy suppose single copy page b initially located processor q page going accessed frequently processor p migrating page p q reduce communication overhead hand moving full page memory incurs large amount communication overhead proportional size page addition moving page p may increase cost satisfying future memory requests pattern department computer science yale university new ct 065208285 research partially supported nsf grant ccr9009753 preliminary version paper appeared proceedings dimacs workshop online algorithms american mathematical society february 1991 j westbrook accesses change problem design online algorithm schedule page migrations response dynamically changing access patterns formally instance migration problem consists edgeweighted undirected graph g realvalued constant smaller 1 graph g describes interconnection network node contains processor assume nodes numbered 1 n one node g denoted p contains page initially page resides node 1 constant corresponds size page request node r reference processor r memory address page sequence requests generated nodes g new request r satisfied immediately cost ffi pr shortest distance g p r satisfying request page moved p new node p 0 cost delta ffi pp 0 definition distance function ffi satisfies triangle inequality since g undirected ffi symmetric sequence requests optimum schedule page movements minimizes total cost requests migrations general online algorithm cannot compute optimum schedule since lacks knowledge future requests online algorithm called ccompetitive request sequence cost c times cost optimum offline cost sequence constant c recently much attention given competitive analysis online algorithms 6 13 15 18 black sleator 5 formalized studied page migration problem context competitive analysis considered two classes networks uniform networks ie complete graphs edge length 1 trees arbitrary edge lengths developed 3competitive deterministic algorithms two classes addition showed deterministic algorithm could better 3competitive even graph consists single edge little known deterministic algorithms complete graph arbitrary edge weights problem seems quite hard best previous deterministic bound general case either 2n gamma 1 bound metrical task systems 6 1 2d given simple algorithm moves page requesting node request paper use randomization beat deterministic lower bound give fast algorithm general case randomized algorithms known prior work randomized online algorithm ccompetitive oblivious adversary request sequence expected cost c times cost optimum offline cost sequence constant c also definitions randomized competitiveness stronger adaptive adversaries given section 2 uniform networks give simple algorithm uniform 238 competitive large values algorithm barely random sense uses small number random bits initialization phase runs deterministically barely random algorithm practical value since random bits expensive resource general problem includes trees develop basic algorithm variants constructed choosing different probability distributions consider two choices first uses random coin flips request gives algorithm 1 oecompetitive large oe golden ra tio approximately 162 show deterministic resetting strategy gives 1 technically metrical task bound hold slightly different model see randomized page migration 3 barely random algorithm competitive ratio also tends 1 always slightly larger competitive ratio first algorithm lastly examine competitiveness simple coinflipping algorithm show network 3competitive adaptive online adver sary coin flipping algorithm memoryless hence storage network overhead needs generate random number every request applying result bendavid et al 2 coinflipping algorithm 1 oecompetitive algorithm mentioned prove existence 33oecompetitive deterministic algorithm general networks page migration one several problems arise managing data distributed environment black sleator 5 studied related problem page replication one may make multiple copies readonly page karlin et al 11 studied snoopy caching memory management given busbased interconnection network memory management problems studied references 1 12 15 migration related 1server excursions problem defined manasse et al 13 migration 1server excursion also related kserver problems 3 7 13 practical issues applications page migration discussed fully 4 5 17 subsequent work presented chrobak et al found 212dcompetitive algorithm single edge tree topology 8 showed bound tight 2 competitive analysis lower bounds let oe sequence quests cost algorithm oe denoted aoe denote opt offline algorithm achieves optimum cost oe following 6 13 say deterministic algorithm ccompetitive constant b request sequences oe randomized algorithms competitiveness algorithm defined respect adversary following 215 consider three kinds adversaries randomized online algorithm ccompetitive oblivious weak adversary constant b graphs finite request sequences oe expectation random choices made online algorithm natural extension deterministic competitiveness models situation random choices algorithm affect choice requests typically use ccompetitive abbreviation ccompetitive oblivious adversary adaptive adversary intended state explicitly adaptive adversary generates request sequence online choosing requests based actual moves made online algorithm adaptive adversary function takes input sequence k gamma 1 requests corresponding actions online algorithm outputs k th request maximum number requests adversary value since output depends random choices online algorithm randomized online algorithm adaptive adversary together generate probability distribution request sequences oe two ways charge adversary request sequence adaptive offline adversary aoe simply optoe optimum offline cost 4 j westbrook oe adaptive online adversary cost incurred oe auxiliary online algorithm online algorithm ccompetitive adaptive adversary exists constant b adaptive adversaries model situation random choices algorithm may affect future request sequence adaptive online adversary entirely intuitive cost measure seems somewhat unnatural adversary useful proving theorems deterministic algorithms black sleator showed simple case two processors linked single edge length 1 deterministic algorithm better 3competitive addition chrobak et al 8 give example 4processor network every deterministic algorithm competitive ratio slightly larger 3 1 theorem 2 deterministic lower bounds also apply randomized algorithms facing adaptive offline adversary results paper demonstrate oblivious adversary randomized algorithms beat deterministic lower bound considering case single edge one show given page factor randomized algorithm better 2 1 competitive oblivious adversary 8 suspect however lower bound higher complicated graphs section 5 show randomized algorithm 3competitive adaptive online adversaries one apply technique 10 16 show algorithm better lower bound follows considering simple case two processors linked single edge length 1 adaptive adversarys strategy watch online algorithm always generate requests processor contain online algorithms page thus online algorithm request prior generating first request adaptive online adversary simulates online algorithm possible random choices using strategy generate probability distribution request sequences oe length simulation adversary computes expected number requests processors expected total cost page migrations b paid online algorithm b m2 adversary initially places page processor often requested never moves expected cost adversary expected cost online algorithm least 3m2 m2 adversary always moves keep page processor contain online algorithms page case adversary pays b online algorithm pays thus either case online algorithm cannot guarantee better 3competitive discussion shows migration problem oblivious adaptive online adaptive offline adversaries strictly differentiated power first natural online problems known true 3 uniform graphs section describe analyze randomized algorithm uniform designed uniform graphs uniform graph common important network topology 5 model ffi v v cost moving page node u node v 1 randomized page migration 5 describing algorithm remark graph single edge two nodes problem identical twoitem list update problem reingold et al 10 16 gave simple randomized algorithm listupdate problem uniform parallels processor node v graph given associated counter c v takes values 0 k gamma 1 optimum value k depends see later choose k let vector counter values n nodes graph k n vectors let c th vector let u denote deterministic algorithm begins initial counter vector request node r follows 1 page request satisfied cost 1 2 counter r c r incremented 3 c r value k page moved node r already c r reset 0 prior processing requests uniform algorithm chooses deterministic algorithm u uniformly random runs random choice made initializing node counter uniformly random using thetan log theorem 31 uniform c k competitive oblivious adversary k maximum counter value c k maximum 1 2d proof show e uniformoe c k delta optoe finite request sequence oe analyze expected cost uniform imagine ensemble different deterministic algorithms u run simultaneously request sequence expected cost uniform total cost ensemble divided use following observation time algorithm ensemble distinct counter vector follows easy induction number requests observation implies time number algorithms ensemble value c v exactly mk equivalently time running algorithm uniform pr c proof uses technique comparing simultaneous runs u opt request sequence oe actions u opt partitioned two kinds events together account costs algorithms first kind event servicing request u opt event may involve u moving page second kind event opt moving page th event let denote node u page opt denote node opt page define potential function phi ae event actual cost opt amortized cost u defined actual cost event u plus change potential function potential phi always nonnegative phi u begin page node implies standard amortized analysis arguments total actual cost u bounded sum amortized costs events prove theorem show event sum amortized costs algorithms ensemble less mc k times actual cost opt 6 j westbrook 1 event request two subcases request node opt case opt pays 0 must show amortized cost algorithm u also zero actual amortized cost u also 0 otherwise u pays 1 since c opt incremented potential decreases 1 counter reaches k page moves opt costs decreases potential thus amortized cost always 0 ii request node r 6 opt cost opt 1 algorithm u pays 1 request mk algorithms ensemble c r reaches k page moved r cost p 6 opt prior moving change potential worst case prior move potential increases algorithms however move opt c 1 therefore total cost event ensemble bounded summing dividing gives expected amortized cost uniform bounded c k times cost opt 2 event opt moves page new node r actual cost opt actual cost algorithm u 0 consider cost due changes potential potential decreases least r 6 p opt bounded k gamma c r worst case r initially exactly mk algorithms total cost ensemble event summing dividing gives expected cost uniform c k times cost opt completes proof theorem 31 given value choose k minimize maximum 1 table 1 shows best competitive ratio uniform values 10 values found setting solving k terms best integer approximation value taken tends infinity best competitive ratio decreases tends 228 note values better deterministic lower bound 3 possible slightly improve upon values small using random reset techniques employed 16 next theorem shows analysis tight theorem 32 uniform algorithm better c k competitive c k defined theorem 31 randomized page migration 7 best k comp ratio 9 23 233 table best competitive ratios uniform proof consider two processors labelled 1 2 connected single edge length 1 initially page located processor 1 two kinds bad request sequences oe page requests processors 1 2 respectively k denotes k consecutive requests processor sequence oe satisfied cost oe b satisfied cost 1 expected cost uniform oe simply expected time page migrates 2 determined expected value counter 2 plus cost migration uniform guaranteed move page eventually since k requests therefore oe b uniform moves page 2 first request probability 1k case remainder sequence looks identical oe hence adversary generate arbitrarily long request sequences repeating oe oe b uniform algorithm cannot better c k competitive 4 general graphs section consider migration problem undirected graphs arbitrary edge distances recall even arbitrary edge lengths shortest distance function ffi remains symmetric still satisfies triangle inequality one reason general case seems harder uniform case general graph may contain clusters processors close relatively far clusters situation models collection localarea networks tied together widearea network even though single processor cluster accessing page especially often cluster whole may generate many requests page may advantageous move page node cluster hand uniform case cluster processors access page equally often easy situation online algorithm handle since opt must pay 1 per request fig 1 markov chain transition matrix entry contains probability transition counter value counter value j following request 1 previous best known deterministic competitive ratio general graphs given general metrical task system algorithm 6 technically result holds different model lookahead1 model algorithm allowed move page seeing next request actually servicing lookahead0 model request must serviced immediately seen easily checked algorithm lookahead1 model used derive algorithm lookahead0 model competitive ratio 2 times worse original algorithm furthermore bounds converge grows large one also show strategy moving page last requesting node yields competitive ratio 2d 2 thus even graph single triangle best known deterministic algorithm large 5 competitive randomized algorithms general case simple enough practical beat deterministic lower bound general algorithm g maintains single counter value c 1 request page 1 counter decremented one regardless request 2 counter reaches 0 page moved location current request move counter reset according resetting distribution probability resetting counter value distribution fixed advance independent request sequence 0g interested distributions k exists ie infinite counter value forms markov chain state corresponds counter value 1 k state means page moved accesses state transition occurs every access transition matrix corresponding markov chain shown figure 1 note probability given state depends number requests processed nature requests ae denote steady state probability state given resetting distribution let cr denote expected value counter immediately following reset let cs denote expected value counter steady state definition abbreviate notation cr distribution clear steady state probabilities ae given eigenvector transition randomized page migration 9 matrix corresponding eigenvalue 1 one may verify steady state cr implies ff ja cr prior starting run algorithm counter initialized according steady state distribution ie counter initialized probability ae lemma 41 let gd general algorithm resetting distribution gd c competitive c maximum 2 cr cs proof partition actions costs two events request gd opt satisfy page movement opt given oe fixes sequence events determines ensemble deterministic online algorithms correspond possible random choices made throughout processing oe time fraction algorithms ensemble counter value given steady state probability ae average cost algorithms ensemble gives expected cost one run g oe calculate expected amortized cost per operation g directly let random variable x amortized cost th event total amortized cost linearity expectations expected total amortized cost prove theorem bound e x terms cost opt time event let opt node opt page g node g page let c value counter g c depend upon previous random choices opt fixed oe use potential function note pages node analyze expected amortized cost event 1 event request node r let see figure 2 cost opt 0 actual cost g 2 counter decremented hence amortized cost g triangle inequality therefore amortized cost g satisfy request 0 probability ae 1 counter value 1 prior request becomes 0 request satisfied g moves page node r cost 2 resets counter according potential change j westbrook r opt fig 2 diagram proof lemma 41 c 0 value counter reset expected change potential determined expected value counter reset cr hence expected amortized cost move applying triangle inequality bounded cr combining cost satisfy request expected move cost case total expected amortized cost g bounded cr c times cost opt 2 event opt moving page node opt new node opt 0 let actual cost opt 0 actual cost g 0 consider cost due changes potential let 1 ffi gopt 2 ffi gopt 0 actual potential change c actual counter value expected potential change determined steady state expected value counter cs since expected potential change bounded 0 cs c times cost opt lemma 42 general algorithm gd better c competitive c defined lemma 41 proof theorem 32 consider two processors connected edge length 1 two request sequences oe expected cost gd oe cs initial expected time page migrates 2 plus cost migration therefore cs oe b gd moves page 2 first request probability ae 1 case cost remainder oe b determined expected time return page 1 given moved initially expected time cr hence cr randomized page migration 11 adversary generate arbitrarily long request sequences repeating oe oe b next two subsections analyze two choices resetting distribution first give randomized resetting strategy competitive ratio tends golden ratio approximately 1618 discuss deterministic strategy resetting counter single value k move show competitive ratio deterministic strategy approaches random resetting distribution grows large deterministic resetting gives simple practical nearoptimal barely random algorithm 41 random resetting restrict attention distributions sat isfy cr cs 1 competitive ratio given choice resetting probabilities cr minimized cr maximized fixd value k following linear program computes optimum resetting distribution subject constraint 1 maximize subject constraints let x positive solution dxe least integer constant k 0 th term second constraint linear program greater 4d 2 lemma 43 feasible solution linear program ff k0 gamma1 ff k0 nonzero proof let first constraint linear program setting second constraint becomes replacing k 0 x ffl 0 using fact x constraint reduces implying j westbrook best k 0 comp ratio 3 9 2667 8 26 2636 128 414 2619 table best general competitive ratios resetting randomly ff observing 2x gamma 2d 0 0 easily verified 0 ff 1 hence constraint three satisfied theorem 44 competitive ratio algorithm given choosing k 0 ff 2 proof theorem follows straightforward substition formula cr table shows several competitive ratios given theorem 44 gets large best competitive ratio decreases tends 1 p2 one plus golden ratio approximately 262 42 deterministic resetting turn randomized resetting strategy previous section deterministic resetting strategy setting either ff k0 gamma1 ff k0 1 depending gives lowest maximum competitive ratio let depending whether choose ff k0 theorem 45 general algorithm deterministic resetting c competitive oblivious adversary c maximum 1 proof counter initialized setting value probability 1s time thereafter counter values uniformly distributed 1 calculating cr cs formulas given applying lemma 41 completes proof table 3 shows best competitive ratios achieved deterministic resetting strategy various values hence k 0 grows deterministic random resetting algorithms tend competitiveness deterministic resetting advantage greater simplicity since requires random bits initialization 5 coinflipping algorithm simple randomized strategy flip weighted coin request move requested node coin comes heads request page moved requesting node probability p 0 strategy used general graph arbitrary edge weights advantage memoryless state information remembered given location page furthermore achieves exactly competitive ratio 3 adaptive online adversaries oblivious adversaries hand poorer competitiveness randomized page migration 13 best k 0 comp ratio 3 9 2667 128 413 2620 table best general competitive ratios resetting k 0 probability 1 oblivious adversary algorithms uniform general problems presented sections 3 4 respectively requires random number call every access section analyze competitiveness coinflipping algorithm first give lower bound theorem 51 coinflipping algorithm better 3competitive oblivious adversary proof use standard scenario two processors two request sequences oe require j oe optimum cost oe b optimum cost 1 p expected cost coin flipping algorithm oe 12d least 31 gamma q j times optimal cost expected cost coin flipping algorithm oe b 1 12d least 3gamma2q j times optimal cost hence choice p sequence choice j competitive ratio coin flipping algorithm arbitrarily close 3 show coinflipping algorithm 3competitive adaptive online adversary perform analysis use requestanswer game framework 2 adversary initially commits request sequence length game proceeds sequence rounds round adversary first moves page chooses adversary generates request immediately services online algorithm services request possibly moves page end round adversary told location page online algorithm theorem 52 coinflipping algorithm 3competitive adaptive online adversary proof use following crucial observation round probability coinflipping algorithm moves page independent request location adversarys page request generated observation true algorithms sections 3 4 make moves based counter values adaptive adversary knows use generating requests observation also true coinflipping algorithm adaptive offline adversary offline case location adversarys 14 j westbrook page depends deterministically upon future requests turn depend upon outcomes future coinflips algorithm using observation show expected amortized cost event 3 times cost adversary event let f denote processor containing page coin flipping algorithm denote processor containing page denote distance f use following potential function two events consider round 1 request occurs node r let f denote nodes containing pages coin flipping algorithm adversary respectively prior request three distances interest 0 distance f 1 distance distance f r cost 1 expected cost coin flipping algorithm triangle inequality implies expected cost coin flipping algorithm 3 1 2 moves page 0 let 0 1 denote distance f f 0 respectively let 2 distance 0 cost move 2 cost coin flipping algorithm 3d triangle inequality corollary 53 coinflipping algorithm 3competitive oblivious adversary proof follows trivially fact oblivious adversary simply adaptive online adversary generates requests regardless random choices made online algorithm services requests optimally corollary 54 graph competitiveness coinflipping algorithm adaptive offline adversary tends 3 786 grows large proof theorem 22 2 states algorithm b ficompetitive adaptive online algorithm exists algorithm ffcompetitive oblivious adversary b ffficompetitive adaptive offline algorithm take general algorithm deterministic resetting section 42 b coinflipping algorithm various values competitive factor coinflipping algorithm adaptive offline adversary found multiplying 3 appropriate entries table 3 corollary 55 exists deterministic algorithm migration problem competitive ratio tends 3 large proof theorem 21 2 states randomized algorithm ff competitive adaptive offline algorithm also ffcompetitive deterministic algorithm theorem gives method constructing deterministic algorithm attempted 6 remarks paper presented randomized algorithms page migration shown algorithm uniform graphs tends toward 238competitive gets large randomized page migration 15 ii algorithm general graphs parameterized resetting distribu tion deterministic resetting gives variant tends toward 1oecompetitive gets large iii simple coinflipping algorithm 3competitive adaptive online adversaries also shown analysis tight algorithm coinflipping optimal adaptive online adversary several interesting open problems one improve upon randomized algorithms improve generalize lower bounds second find good deterministic algorithm migration general graphs another open problem extend results general problem 1server excursions recent work bartal et al 1 studied file allocation distributed systems situation multiple physical copies writeable pages data files sometimes allowed problem competitive ratio rises thetalog n n number processors 7 acknowledgements author thanks daniel sleator suggesting migration problem nick reingold helpful conversations r competitive algorithms distributed data manage ment power randomization online algorithms competitive threeserver algorithm competitive management distributed shared mem ory competitive algorithms replication migration prob lems optimal online algorithm metrical task systems new results server prob lems page migration algorithms using work functions performance measurements 128node butterfly parallel processor randomized algorithms list update problem competitive randomized algorithms nonuniform problems competitive algorithms online prob lems memory versus randomization online algorithms randomized algorithms list update problem dynamic page migration multiprocessors distributed global memory amortized efficiency list update paging rules hierarchical cachebus architecture shared memory multiprocessors tr ctr r burley sandy irani algorithm design metrical task systems proceedings sixth annual acmsiam symposium discrete algorithms p420429 january 2224 1995 san francisco california united states page migration relaxed task systems theoretical computer science v268 n1 p4366 10062001