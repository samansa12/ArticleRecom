efficient detection vacuity temporal model checking ability generate counterexample important feature model checking tools counterexample provides information user case formula checked found nonvalid paper turn attention providing similar feedback user case formula found valid valid formulas hide real problems model instance propositional logic formulas containing implications suffer antecedent failure formula trivially valid precondition implication satisfiable call vacuity extend definition cover kinds trivial validity nonvacuously valid formulas define interesting witness nontrivial example validity formula formalize notions vacuity interesting witness show detect vacuity generate interesting witnesses temporal model checking finally provide practical solution useful subset actl formulas b introduction ability generate counterexample important feature model checking tools counterexample provides information user case formula checked found nonvalid paper turn attention providing similar feedback user case formula found valid first glance goal may seem strange proving formulas valid supposed goal model checking however additional information regarding valid formulas indeed important valid formula may hide real problems model several years experience practical formal verification hardware ibm bb96 shown us first formal verification runs new hardware design typically 20 formulas found trivially valid trivial validity always points real problem either design specification environment formulas found nontrivially valid examination nontrivial example trace discovers problem approximately 10 formulas problem trivially valid formula first noted beatty bryant bb94 termed antecedent failure antecedent failure means formula trivially valid precondition antecedent formula satisfiable model validity formula trivial must indicated user usefulness formal verification compromised since trivially valid formula intentionally part specification therefore indicates problem design error specification instance consider following formula agrequest model request never made ie trivially valid antecedent failure intuitively easy concept grasp however fact depends use particular operator disturbing would like capture problem equivalent formula agrequest axack 2 concerned temporal logic would also like notion trivially valid formula include temporal aspect instance consider following p never occurs thus trivial antecedent failure however would also like notion trivially valid formula cover case q may occur thus never occurs next state p thus addition notion trivially valid formula capture potential problems illustrated following formula agrequest adata valid uwrite enable 4 previous examples formula 4 trivially valid model request never made however even modelm whichm possible validity formula 4 trivial agrequest write enable states required subformula data valid hold words nothing left model checker check model validity formula 4 trivial paper extend formalize notion trivial validity cases use term vacuity extended definition call formula suffers vacuity vacuously valid formula trivial validity usually indication problem model rather specification related problem formula nonvacuously valid express property intended user words would like provide way discover errors formula even formula nonvacuously valid confront problem formalizing notion interesting witness trace shows nontrivial example validity formula examining positive example provides confidence formal specification accurately reflects intent user one weak links practical application formal verification hardware design example consider formula 3 interesting witness formula 3 path p occurs state q occurs state i1 r occurs state i2 note simply negating original formula provide nontrivial example negate formula 3 get obviously since formula 5 negation formula 3 formula 5 false formula 3 true however formula 5 existential formula trace show false counterexample mechanisms hbk93 smv mcm93 cg95 generate trace negating single operand ag operator formula 3 follows also guarantee interesting witness instance valid counterexample formula 6 path state p occur trivial positive example truth original formula 3 motivation temporal model checking however notions vacuity interesting witness limited temporal logics therefore first define terms general discuss vacuity detection generation interesting witnesses temporal model checking finally show practical solution useful subset actl formulas temporal model checking remainder paper organized follows section 2 define important temporal logics section 3 formalize notion vacuity show efficiently detect vacuity using model checker section 4 formalize notion interesting witness show generate interesting witnesses using model checker section 5 provide practical solution useful subset actl section 6 compare work previous version theory related work section 7 conclude preliminaries logic following syntax 1 every atomic proposition formula 2 f g formulas f f g 3 f formula ef also formula 4 f g formulas fug xf also formulas additional operators viewed abbreviations follows semantics ctl formula defined respect kripke structure k kripke structure quadruple 0 r l finite set states 0 set initial states r theta transition relation l valuation function mapping state set atomic propositions true state require least one transition every state path kripke structure k infinite sequence states r true every given path denote path starting ith state formally semantics ctl follows atomic proposition starting 0 k 0 say k every path k 0 2 0 k ctl formula normal form operator modifies atomic propositions subset ctl path quantifier formula normal form ctl ce81 subset ctl temporal operator x must immediately preceded path quantifier e actl gl91 subset ctl path quantifier formula normal form ltl pnu81 subset ctl path quantifiers intuitive notion vacuity derives propositional antecedent failure propositionalantecedent failure means formula trivially valid precondition satisfiable precondition lefthandside implication another way think say righthandside implication affect validity formula gives intuitive extension vacuity operator vacuity occurs one operands affect validity formula use notation 0 denote formula obtained replacing subformula 0 definition 1 affect subformula formula affects model formula 0 truth values 0 different vacuous model subformula affect definitions capture intuitive notion vacuity manner independent particular logic however useful comes vacuity detection infinite number cases check remainder section show sufficient conditions logics finite small number cases required first show enough check subset subformulas define logics polarity enough check replacement subformula either true false 31 vacuity respect minimal set subformulas section show vacuity checked examining subset subformulas subformulas minimal respect subformula preorder denoted assume subformula unique consider two separate occurrences subformula different subformulas lemma 3 affect model affect proof assume affect affect formula 0 truth value 0 different since get truth value 0 different truth value thus truth value different truth value means affects value contradicting assumption ut sequel need following definitions definition 4 vacuity respect subformula let subformula denoted formula vacuous model affect respect set subformulas let set subformulas formula fj g formula svacuous model exists 2 vacuous definition 6 minimal subformulas let set subformulas define minimal subformulas theorem 7 svacuous iff minsvacuous proof svacuous 2 affect since finite preorder 0 2 mins 0 using lemma 3 since affect 0 affect either means minsvacuous minsvacuous 2 mins affect therefore svacuous ut follows immediately check vacuity enough check vacuity respect minimal subformulas show logics polarity enough check replacement subformula either true false 32 logics polarity section define logics polarity first need notation denote models formula valid use following use notation c denote complement define mean polarity operand define operators polarity finally define logics polarity definition 8 polarity operand oe nary operator logic say ith operand oe positivenegative polarity every fixing two formulas say operator polarity every one operands polarity positive negative definition 9 logic polarity logic polarity logic every operator polarity example standard boolean logic operators logic polarity since every two formulas immediately implies operands positive polarity single operand negative polarity example logic logic polarity standard boolean logic addition exclusiveor operator set true get set false get first case polarity second operand negative second positive means phi polarity logic polarity proof first note set models ctl formula satisfies subset fk j path structure kg already shown standard boolean operators polarity show single operand path quantifier e positive polarity given path 0 k starts state k 0 implies proceed prove operands u operator positive polarity 1 let us fix second operand u operator given 1 2 integer n st proves k 2 let us fix first operand u given 1 2 1 k integer n st proves k finally show single operand operator x positive polarity given assumption k 1 meaning k concludes proof ut 33 vacuity detection logics polarity section show logics polarity enough check replacement subformula either true false first define polarity subformula present main result section definition 11 polarity subformula given formula define polarity subformulas recursively positive polarity positivenegative polarity positive polarity ith operand oe positivenegative polarity negative polarity otherwise lemma 12 logic polarity witha positivenegative polarity 0 proof proof proceeds induction size formula base case atom positive polarity 0 therefore induction step base case otherwise know one two cases 1 ith operand oe positive polarity case polarity therefore according induction hypothesis since ith operand oe positive polarity definition 8 2 ith operand oe negative polarity case polarity opposite polarity therefore induction hypothesis since ith operand oe negative polarity ut bb97 defined subset actl set important subformulas proved order detect vacuity respect set enough show j false minimal subformula important subformulas see section 5 kv99 kupferman vardi expand result showing ctl formula vacuous iff minimal subformula satisfies true iff satisfies false prove similar result holds logics polarity proof practically one kv99 give sake completeness define semantics true false follows modelg theorem 13 let subformula formula logic polarity every model following equivalent 1 affect 2 positive polarity 6j negative polarity otherwise proof affect means every 0 specifically concludes part proof note every 0 two cases 1 positive polarity using lemma 12 get assumption containment implies every meaning affect assumption 6j true argument get every meaning affect 2 negative polarity using lemma 12 get assumption containment implies every meaning affect assumption 6j false containment implies every meaning affect ut section 31 showed enough check vacuity respect subset subformulas section showed logics polarity enough check replacement subformula either true false combine two results following corollary corollary 14 logic polarity formula set subformulas every model following equivalent svacuous 2 mins positivenegative polarity otherwise corollary gives us ability check vacuity formula logic polarity checking relatively small number formulas size greater precise svacuity need check 1 check 2 subformula 2 mins check new formula x value x either true false according whether valid polarity formula svacuous iff least one formulas truth value since ctl logic polarity shown result kv99 use ctl model checker check vacuity complexity ojj delta cm jj cm n complexity checking formula size n model interesting definition vacuity refines traditional distinction valid nonvalid formulas respect model classify formulas either nonvalid vacuously valid nonvacuously valid would like make refinement method use distinguish classes traditionally show formula valid means proof formula nonvalid means counterexample define interesting witness means use show formula nonvacuously valid section assume formula question valid model make definitions clear use model checking problem propositionallogic example logic standard propositional logic n boolean variables model nonempty subset set assignments n variables say true assignments example set assignments tautology 41 preorder counterexamples defining interesting witness first formalize notion counter example require two things counterexample formula 1 existence proves nonvalidity formula 2 small second requirement natural since smaller counterexample useful user approach define preorder set models nonvalidity smaller model always proves nonvalidity larger one require counterexample model minimal respect preorder definition 15 natural preorder logic given logic l define natural preorder logic oe l set models 0 oe l iff 2 l natural preorder propositional logic containment proof propositional formula valid assignments also valid assignments 0 least one assignment n variables 0 define following propositional formula true assignment equal ff false ff therefore 0 6j ut define counterexample definition 17 counterexample logic l model c counterexample model satisfies following conditions 1 c oe l 2 c 6j 3 c minimal wrt oe l among models satisfy properties 1 2 follows immediately definition exists counterexample return example propositional logic show counterexamples expected propositional logic c counterexample formula model c model one assignment proof c counterexample c 6j therefore assignment ff 2 c ff false fffg model c 6j since c minimal wrt get since model 0 0 required models nonempty ut 42 preorders counterexamples temporal logic previously shown case propositional logic definition 17 captures intuitive notion counterexample since motivation paper temporal logic would like examine closely properties counterexample important temporal logics ltl pnu85 pnueli proved natural preorder ltl according definition 15 computation path mg ltl 6j computation path fg 6j using arguments proof claim 19 show counterexample always model one computation path ctl ctl milner mil71 proved ctl ctl natural preorder means ctl ctl trivial counterexamples model indeed formula ef p cannot shown false model less behavior original since might removed states p true note even method specifying larger models counterexamples ctl would still problematic formula ef p agq cannot proved false using neither larger model smaller one using proof mil71 shown actl actl natural preorder logics difficult characterize counterexamples model always simulates computation path oe actl meaning computation paths may serve counterexamples instance counterexample formula agp path p holds state however formulas models path cannot serve counter example formula axpaxp cannot path counterexample since deterministic path evaluated true counterexample formula must complex buccafurri eiter gottlob leone addressed problem detail begl99 43 interesting witnesses case nonvalid formula standard model checker provides counterexample user formula valid using vacuity checking procedure prove nonvacuous would like provide interesting witness user analog counterexample proves nonvacuity counterexample proves nonvalidity interesting witness respect subformula logic l model w interesting witness satisfies following conditions 1 w oe l 2 w j vacuous w 3 w minimal wrt oe l among models satisfy properties 1 2 get analogous claim claim 18 exists interesting witness w iff vacuous proof vacuous w 0 w 6j 0 since w oe l 6j 0 means vacuous set models smaller vacuous nonempty since model therefore one minimal elements set interesting witness ut assumption valid interesting witness proves non vacuity one subformula would like proofs general nonvacuity sets subformulas particular set subformulas however single interesting witness always suffice consider formula model nonvacuous single example show nonvacuity order show pnonvacuity q must set 0 order show qnonvacuity p must set 0 since j cannot show example p q 0 simultaneously naive solution would generate one interesting witness every sub formula however interesting witness one subformula may also interesting witness different subformula shown following proposition proposition 22 assume interesting witness w also interesting witness proof since w interesting witness affects w according affects w meaning w interesting witness shall use proposition 22 get general result corollary 23 j svacuous set interesting witness every mins also interesting witness every 44 interesting witness generation logics polarity section 33 shown logic logic polarity checking vacuity much easier general case result holds interesting witness generation lemma 24 logic polarity l positivenegative polarity following equivalent vacuous c proof get c since c 6j x vacuous c get c vacuous c using theorem 13 get c 6j x ut theorem 25 logic polarity l j positivenegative polarity following equivalent c counterexample x c interesting witness proof follows directly lemma 24 proves two equivalent omits requirement minimality adding requirement obviously leaves equivalent theorem gives us ability easily generate interesting witnesses generate counterexamples formulas logic interesting witness really counterexample one specific formula obtained replacing true false depending polarity note formula valid vacuous assume logic polarity model checker logic generates counterexamples nonvalid formulas enhance model checker following properties enhanced modelchecker given formula model set subformulas 1 6j generate counterexample 2 j svacuous output subformulas mins affect 3 j svacuous generate jminsj interesting 2 least one interesting witness number formulas checked formula valid jminsj 1 since mins generate formula model checked valid svacuously valid otherwise model checker returns counterexample interesting witness since formulas generate smaller size get complexity enhanced model checker ojminsj delta cm jj cm n complexity model checking formula size n case svacuous enhanced model checker outputs minimal subformulas affect however user may interested knowing exactly subformulas vacuous achieve goal may need check many jsj formulas 5 practical vacuity detection interesting witness generation motivation work provide indication vacuity interesting witnesses users model checking however complexity results sections 33 44 allow reasonable time complexity determining vacuity generating interesting witnesses jj times complexity model checking formula size jj practical terms high typical may take hours cpu time verify would like method determining vacuity generating interesting witness formula expensive model checking order give efficient solution limit subset actl called wactl subset subformulas called important subformulas respect check vacuity show complexity checking vacuity important subformulas wactl exactly complexity model checking finally show examples 51 section define witnessactl wactl subset actl turn subset ctl informally wactl formulas actl formulas binary operators au av least one operands propositional formula divide actl operators propositionaloperators temporal operators ax ag af au av call formula propositional operators simple formula wactl set state formulas described following definition 26 wactl 1 every simple formula state formula 2 f simple formula state formula ffi binary operator state formulas 3 state formula ffi unary temporal operator actl ag af ax ffi state formula definition wactl may seem artificial first glance however experience case formulas written users wactl formulas capture nicely linear nature specifications 52 important subformulas order able efficiently check vacuity generate interesting witnesses w restrict subset subformulas vacuity detected rather drawback show distinguishing important nonimportant subformulas advantage reflection engineers use ctl specify designs first define set important subformulas formula respect vacuity checked basically important subformulas temporal nonsimple ones definition 27 important subformulas let wactl formula define imp recursively 1 simple fg 2 nonsimple f simple 3 simple 4 choice made item 3 may seem arbitrary reason f 1 important f 2 operand cause vacuity af 1 u f 2 cause vacuity f 1 always true immediately however f 1 cannot cause vacuity f 2 even f 1 always true forever au operator still requires something eventually occurs av operator f 2 cause vacuity f 1 always true forever nothing required f 1 however f 1 cannot cause vacuity f 2 always true immediately case av operator still requires something f 2 occurs time justify choice temporal subformula binary operator important subformula follows choice simply reflection engineers tend use ctl code specification well tend design hardware instance consider following specification agrequest expresses requirement request accepted happens one cycle appears two cycles later either read busy signal asserted write busy signal asserted logically equivalent formula agrequest axreq accepted axaxread busy write busy 8 vacuity formula 7 detects j agrequest would probably detect problem model otherwise signal called request mean ingless however vacuity detects j agaxreq accepted axaxread busy write busy quite often useless engineer highly likely designed logic intentionally prevents read busy write busy asserted spuriously asserting req accepted request previous cycle thus binary operators chosen nonsimple operand important subformula 53 vacuity interesting witnesses wactl formulas recall impvacuous vacuous respect subformula theorem 7 show minimp one subformula meaning impvacuity checking easy 28 every wactl size minimp one proof proof proceeds induction 1 simple done 2 every subformula imp subformula therefore means minimal imp using induction hypothesis 3 using argument minimp meaning second case using induction hypothesis conclude ut since dealing actl formulas negation applied atomic propositions way choose important subformula important subformula never operand get minimp always positive polarity define formula witness follows according corollary 14 theorem 25 enough check witness order detect impvacuity generate impinteresting witness given model checker generate counterexamples actl formulas design enhanced model checker wactl see section 44 following properties given wactl formula model 1 6j generate counter example 2 output formula passed vacuously 3 j 6j witness output one interesting witness w every important subformula 2 imp w interesting witness 54 detailed vacuity impvacuity detected enhanced model checker indication preconditions caused vacuity said solve checking jimpj1 formulas instead 2 however specific case actually check log formulas one easily prove using proof claim 28 subformulas imp linearly ordered also follows directly lemma 3 vacuous also vacuous combining observations get one minimal subformula 2 imp 2 imp vacuous iff means use binary search imp find implement need check log 55 semantic refinements careful reader noted definition important subformulas detect vacuity basic cases among propositional antecedent failure instance consider following formula agread request read enable vacuity detection witness generation formula generate formula 9 defined model fair paths thus detects vacuity case intuitively satisfying would like able detect propositional antecedent failure another problem shown following sugar 1 formula agrequest next eventgrantacknowledge 11 formula 11 expresses requirement first grant request must accompanied acknowledge actl normal form formula 11 agrequest agrantv grant acknowledge 12 thus vacuity detection formula formula 11 defined agrequest afalsev grant acknowledge 13 simplification formula gives agrequest aggrant acknowledge 14 1 sugar syntactic sugaring ctl ce81 formulas specification language used rulebase formal verification tool bb96 outlined basic features 14 detect vacuity case request never followed grant intuitively satisfying next event operator expresses kind temporal implication thus failure grant occur kind temporal antecedent failure would like detect therefore expand definition important subformulas follows 1 simple operator derived use operator user 2 simple 56 implementation details theory computation path infinite therefore every example infinite prac tice however algorithm cg95 sometimes give finite counterexamples finite counterexample enough show formula false every case one finite counterexample given cg95 interesting enough purposes exception au operator positive example au would like see trace occurs cg95 may give us counterexample afalseu ends occurred therefore use aaf falseu get infinite counterexample cg95 uses eg true get infinite example 57 examples show generation interesting witness formula use typical sugar formula example agrequest next eventdata4last data 15 formula 15 states last data asserted fourth data request since last data considered nonsimple second operand next event operator interesting witness formula agrequest next eventdata4false 16 convert formula 16 actl normal form agrequest adatav data axadatav data data axadatav data false 17 easy see formula 17 valid iff either request never occurs request ever followed four datas also clear formula 17 found nonvalid counterexample interesting witness formula 15 request followed four datas occur examine following formula expresses fact require q occur infinite number times interesting witness formula formula ag af false 19 formula cannot vacuously valid unless fair paths indeed formula 19 nonvalid nonempty models counterexample formula 19 computation path q appear infinitely many times formula 6 comparison previous related work section compare work previous version theory related work 61 comparison previous work previous version paper bb97 required interesting witness formula single path important subformulas affect validity requirement result practical motivation original work paper interesting witness defined per subformula interesting validity demonstrated multiple paths new definition natural showed section 44 allows us guarantee interesting witnesses whenever guarantee counterexamples thus solves problem raised kv99 following grequest consider model two paths one path never satisfies request second path always satisfies grant require interesting witness single path interesting witness formula 20 model despite fact exists counterexample formula 20 model formula 20 valid 62 comparison related work works including bb94 pp95 noted problem trivial validity shown avoid using handwritten checks original paper bb97 believe first attempt formalize notion trivial validity well first attempt detect automatically symbolic model checking philosophers also dealt problem trivial validity relevance logic also known relevant logic nonstandard logic designed prevent paradoxes material strict implication occur antecedent irrelevant consequent formula relevance logic deals problem defining new logic approach different formalize notion vacuity provide method detect leaving logic unchanged paper use term interesting witness mean computation path showing one nontrivial example validity valid formula first use term interesting witness first generate positive examples valid nonexistential formulas hbk93 hojati brayton kurshan describe counterexample generation model checking using ctl language containment using lautomata kur90 cg95 clarke grumberg mcmillan zhao describe counterexample witness generation algorithmof smv mcm93 neither hbk93 cg95 produce interesting witnesses valid nonexistential formulas kv99 kupferman vardi presented extension bb97 wactl ctl results vacuity presented require interesting witness ctl formula single path 7 conclusions future work formalized notion vacuity interesting witness logics polarity shown practical method detecting vacuity generating interesting witnesses wactl formulas discussed ability detect vacuity provide interesting witness extremely important practical application model checking industrial hardware designs although definition vacuity presented simple elegant still territory left uncovered pnueli pnu97 suggested following example model j agp formula agafp valid intuition tells us user somehow missing point possible approach solving problem refine definition vacuity instead checking whether subformula replaced subformula check whether replaced simpler formula term simpler vague notion immediate examples p simpler af p agp simpler af p perhaps even agp af q simpler apuq possible improvement could done efficiency vacuity checking instead using model checker black box devise efficient model checking algorithms specifically vacuity checking trivial enhancement would cache intermediate results model checker since vacuity checking formulas similar r logic relevanceand necessity formally verifying microprocessor using simulation methodology rulebase industryoriented formal verification tool efficient detection vacuity actl formulas characterizing finite kripke structures propositional temporal logic actl formulas deterministic counterexamples design synthesis synchronization skeletons using branching time temporal logic characterizing properties parallel programs fixedpoint efficient generation counterexamples witnesses symbolic mit press sometimes never revisited branching versus linear time temporal logic model checkingandmodular verification bddbased debugging designs using language containment fair ctl vacuity detection temporal analysis discrete event coordination relevance logic symbolic algebraic definition simulation programs formal verification commercial serial bus interface temporal logic concurrent programs linear branching structures semantics logics reactive systems fair synchronous transition systems liveness proofs question audience computeraided modular framework motivation solutions evaluation criteria tr myampersandldquosometimesmyampersandrdquo myampersandldquonot nevermyampersandrdquo revisited characterizing finite kripke structures propositional temporal logic model checking abstraction compositional verification formally verifying microprocessor using simulation methodology efficient generation counterexamples witnesses symbolic model checking rulebase model checking symbolic model checking characterizing correctness properties parallel programs using fixpoints linear branching structures semantics logics reactive systems vacuity detection temporal model checking model checking modular verification fair synchronous transition systems liveness proofs efficient detection vacuity actl formulaas design synthesis synchronization skeletons using branchingtime temporal logic analysis discrete event coordination bddbased debugging design using language containment fair ctl ctr mats p e heimdahl safety software intensive systems challenges old new 2007 future software engineering p137152 may 2325 2007 hana chockler orna kupferman moshe vardi coverage metrics temporal logic model checking formal methods system design v28 n3 p189212 may 2006 michael w whalen ajitha rajan mats pe heimdahl steven p miller coverage metrics requirementsbased testing proceedings 2006 international symposium software testing analysis july 1720 2006 portland maine usa pill semprini r cavada roveri r bloem cimatti formal analysis hardware requirements proceedings 43rd annual conference design automation july 2428 2006 san francisco ca usa marsha chechik arie gurfinkel benet devereux albert lai steve easterbrook data structures symbolic multivalued modelchecking formal methods system design v29 n3 p295344 november 2006 shoham bendavid cindy eisner daniel geist yaron wolfsthal model checking ibm formal methods system design v22 n2 p101108 march