auction algorithms shortest hyperpath problems auctionreduction algorithm strongly polynomial version auction method shortest path problem paper extend auctionreduction algorithm different types shortest hyperpath problems directed hypergraphs results preliminary computational experiences show auctionreduction method comparable known methods specific classes hypergraphs b introduction shortest hyperpath problem extension directed hypergraphs 11 classical shortest path problem spt directed graphs though pervasive spt shortest hyperpaths several relevant applications particular core traffic assignment algorithms transit networks 13 14 18 shortest hyperpath models constructed spt problem stochastic timedependent networks 17 production planning assembly lines 12 moreover shortest hyperpath algorithms used building blocks enumerative algorithms hard combinatorial problems 10 consequence growing interest efficient shortest hyperpath algorithms provides motivations investigating known methods 11 15 theoretical practical point view developing new ones auction algorithms first proposed bertsekas 1 2 assignment problem later extended general transportation problems 5 6 survey auction algorithms network optimization problems contained 4 chapter 4 auction algorithms shortest path problems graphs proposed 3 singleorigin singledestination case method viewed application auction method specifically constructed assignment problem finite termination procedure established furthermore algorithm dual coordinate ascent method strongly polynomial version auction method proposed pallottino scutella 16 define pruning procedure reduces graph shortest path tree improvements method given 7 pruning method strengthened structure reduced graph exploited obtain better time complexity variant auction algorithm pruning proposed 8 paper devise auction method shortest hyperpaths nonnegative hyperarc weights slightly modifying spt algorithm given 7 method tailored solve several types shortest hyperpath problems various cases provide worst case complexity bound finally report results preliminary computational experience section 2 give basic definitions hypergraphs shortest hyper paths proposed auction method shortest hyperpaths presented section 3 computational results conclusions presented sections 4 5 respectively shortest hyperpaths directed hypergraphs directed hypergraph h pair v e v set nodes e set directed hyperarcs hyperarc pair tail e 2 v n e head detailed introduction directed hypergraphs found 11 general definition hypergraphs introduced particular class hypergraphs considered paper called bgraphs 11 size jej hyperarc e number nodes contains tail head hyperarc e arc 2 proper hyperarc jej 2 denote h number arcs proper hyperarcs j size h sum cardinalities hyperarcs given node u forward star u fsu set hyperarcs e backward star u bsu set hyperarcs e path p st length q hypergraph e sequence st nodes origin destination path p st respectively say node connected node h path p st exists h 2 e 1 path p st cycle path cyclefree contain subpath cycle given hypergraph e two nodes 2 v hyperpath st minimal hypergraph respect deletion nodes hyperarcs h 2 3 connected h cyclefree path observe exists unique hyperarc e 2 e predecessor hyperarc u denoted e u say node hyperconnected h exists hyperpath h given hyperarc say hyperarc r contained reduction ha r note contained r strictly contained r given u 2 denote anu reduction obtained deleting u say hypergraph full contains possible reductions proper hyperarcs full hypergraph represented support hypergraph h obtained deleting strictly contained hyperarcs conversely given hypergraph h obtain corresponding full hypergraph h f adding strictly contained hyperarcs 21 shortest hyperpaths weighted hypergraph hyperarc e assigned nonnegative real weight weight hyperpath weighted hypergraph defined several ways known definitions lead intractable shortest hyperpath problems 9 restrict definitions known tractable 11 weighting function node function given hyperpath st assigns value w u nodes depending weights hyperarcs value w weight chosen weighting function additive weighting function satisfies properties w function predecessor e u formally additive weighting function defined means following recursive equations f e nondecreasing function weights nodes e clearly many different additive weighting functions defined see 11 consider first value function obtained defining f e 1 follows minimum value shortest hyperpath problem consists finding set minimum value hyperpaths origin node node u 6 hyperconnected denote v u minimum value hyperpath su h assume u hyperconnected distance function obtained 1 defining f e follows minimum distance problem asks minimum distance hyperpaths origin denote vector minimum distances u hyperconnected since arc weights nonnegative minimum value minimum distance problems solved efficiently procedure sbt 11 computational analysis several variants sbt found 15 211 minimum time problems transit hypergraphs problem finding passengers expected travel time core several urban transit networks models problem formulated terms hyper paths transit networks 13 fgraphs 11 14 introducing time weighting function transit hypergraphs define particular shortest hyperpath problem though using different slightly general terminology equivalent formulations found 13 14 transit hypergraph weighted support hypergraph e positive parameter oe u associated node u 2 v let h full hypergraph represented h consider e contained proper hyperarc 2 h time weighting function obtained 1 defining weight function f e follows oe u practice f e weighted average weights oe values w delta e inverse sum weights oe e arc corresponding arc 2 e function f e defined way gives f however case wa nonnegative value minimum time problem consists finding minimum time hyperpaths given origin full hypergraph h f note h f may considerably larger support h practice solving minimum time problem efficiently requires work directly h aim following observations denote e vector minimum times hyperconnected h f e 2 oe u consider proper hyperarc 2 e let ra set reductions denote ea reduction yielding minimum time te following relations hold 13 proposition 6 consider nodes increasing order e ie let reduction g follows 2 ea h practice working support hypergraph requires finding hyperarc ea without considering whole set reductions indeed according previous observations done processing nodes order u compute value ta technique used compute expected travel times efficiently 13 14 adopted auction algorithm minimum time problem 212 reductions shortest hyperpaths hyperarc reduction operation proper hyperarc consists replacing hyperarc r contained returning reduced hypergraph clearly hypergraph weighted nonnegative weight wa r must assigned r following propositions show suitably choosing weight r reduction operation modify optimal solution shortest hyperpath problem proofs rather straightforward omitted suppose given weighted hypergraph h corresponding vectors optimal solutions v value distance weighting functions given proper hyperarc u 2 consider replacing r n u proposition 21 wa r vector optimal values reduced hypergraph proposition 22 du vector optimal distances reduced hypergraph suppose given transit hypergraph h corresponding full hypergraph optimum times e let e proper hyperarc h f te eu u 2 e consider replacing e arc e proposition 23 r vector optimal times reduced full hypergraph auction algorithms shortest hyperpaths section propose auction method minimum value problem discuss adaptation weighting functions introducing ap proach briefly recall relevant features auction algorithms spt reader referred cited literature details auction algorithm shortest path problems graphs maintains path p candidate path starting origin set dual node prices p satisfying following complementary slackness cs conditions cost arc j algorithm consists three basic operations path extension path contraction dual price raise iteration candidate path p possibly extended adding new node end path without violating 3 extensions possible dual price terminal node p raised 6 path contracted deleting node singleorigin singledestination case algorithm terminates destination node reached several variants devised also multipledestination case consider case nonnegative costs dual prices initially set zero first scan node ie node becomes last node p first time optimal distance node determined indeed equal ps consequence since ps never decreased algorithm sequences first scan operations ranks nodes increasing order distance origin based property auctionreduction method 16 introduces following reduction operation first scan node delete arc entering except last arc p means reduction operations graph transformed shortest path tree strongly polynomial time complexity obtained reduction operations including deletion nodes proposed 7 improving complexity bound following observation core auction shortest hyperpath method observation 31 according definition value distance time weighting functions arc fug v f words weighting functions define standard spt problem hypergraph directed graph suggests following technique ffl apply auctionreduction spt algorithm arcs hypergraph ffl first scan node apply hyperarc reduction operations according properties 21 23 possibly generating new arcs note hypergraph modified algorithm step applied current hypergraph returned previous reduction operations practice execution proper hyperarcs lay yet explored part hypergraph considered replaced arcs result successive reductions auction algorithm minimum value problem described procedure minvalue remark procedure minvalue applied graph becomes auction algorithm graph reduction described 7 node predecessor predi gives last arc best si path determined far notational convenience consider predi set initially label li minimum si hyperpath value determined far becomes optimum si hyperpath value v first scan node denote fsa fsh arcs proper hyperarcs fsi respectively thus replacing hyperarc reduction ani denoted note may arc last node p denoted lastp execution algorithm contained graph directed graph defined nodes arcs current hypergraph proposition 31 step algorithm node 2 va gives shortest si path length current contained graph ha proof property follows correctness auction algorithm spt observing new arc j created first scan node theorem 31 vector v determined algorithm gives minimum hy perpath values original hypergraph proof theorem proved induction considering nodes order first scan increasing order value v delta claim clearly true beginning node assigned v assume previously assigned v correct first scan node follows proposition 31 li lower bound length path ha node node j therefore current hypergraph value hyperpath containing proper hyperarc cannot less li implies correct consequence step 1c change optimal solution proposition 21 31 weighting functions auction algorithm minimum value easily adapted minimum distance problem aim suffices skip weight update wa wa v step 1c follows property 22 since replaced node j 2 n end algorithm vector optimal distances proof correctness distance function similar one theorem 31 procedure minvalueh u 2 v predu pu 0 v u lu 1 steps first scan set value v li b delete c reduce hyperarcs 2 fsh n wa wa update labels delete arcs otherwise deletion contraction expansion fsa ig go step 4 aij2fsa go step 1 step 4 expansion expand p node j aij2fsa go step 1 situation slightly complex travel times recall goal work support transit hypergraph thus must deal corresponding full hypergraph implicitly aim replace hyperarc reductions arc insertion operations described consider proper hyperarc support know suffices consider k reductions see section 211 first scan node u compute value ta ta generate arc according proposition 23 otherwise ie igamma1 reduction ea yielding minimum time delete necessary removed first scan node u k conclusion proper hyperarc jt aj arcs generated order compute ta efficiently proper hyperarc support hypergraph keep two values initially set 0 u2t u2t first scan u ta also keep counter ka visited nodes rewrite step 1c follows step 1c reduce hyperarcs 2 fsh oea ka observe new arc added used improve label ha case current predecessor predha deleted step 1d therefore one arc generated belongs contained graph end step 1 lemma 31 values v delta assigned first scan node correct value v assigned first scan node correct proof let set nodes current hypergraph whose first scan occurred first scan node know gives spt distance contained graph moreover v lower bound spt distance node u 62 consider proper hyperarc current support hyper graph reductions containing nodes already considered algorithm possibly adding new arcs moreover 2 v lower bound tea therefore v lower bound minimum time node u 62 current hypergraph thesis follows using lemma 31 proof correctness auction algorithm minimum times induction theorem 31 32 computational complexity auctionreduction algorithm presented 7 solves spt problem graph e ojv j minfjej jv j log jv jg time easy see maximum number arcs generated execution minvalue value distance weighting functions osizeh time function moreover total time spent first scans step 1 osizeh therefore state following proposition proposition 32 running time auction shortest hyperpaths algorithm log ng value distance time function osizeh two techniques improving running time auctionreduction method presented 7 path scanning ant multipath restructuring resulting complexity ojv fact total computation time two successive first scan operations ojv j clearly jv j first scans techniques easily applied within shortest hyperpath algorithm next proposition follows proposition 33 auction shortest hyperpath algorithm path scanning multipath restructuring takes osizehn 2 time value distance time functions computational results section present preliminary computational results auction methods shortest hyperpath problems main goal compare variants basic method complete experimental evaluation auction shortest hyperpath methods would require much larger effort basic shortest hyperpath algorithm denoted har implementation procedure minvalue used last data structure 7 variant algorithm denoted har2 makes use second best device 4 chapter 4 implemented third version denoted harn second best device used node contraction operation introduced node contraction deletes node k indegree outdegree equal one arcs incident node k say replaced arc j contraction operations simplify current graph may help keeping current path shorter compared auction algorithms implementation procedure sbt heap 11 denoted sbth algorithms coded c language run ibm risc6000 p43 workstation 64m ram using aix operating system general devising reasonable experimental setup shortest hyperpaths trivial task since hypergraphs show many degrees freedom graphs see eg 15 restricted one weighting function namely distance considered two different hypergraph topologies random grid random hypergraphs show special structures except origin distinguished node fss contains arcs size proper hyperarcs chosen randomly interval min max experiments set jf defined five classes random hypergraphs different values proper hyperarcs arcs exiting root weights generated randomly interval 0 1 remaining arcs weights belong 1 choice motivated attempt increase relevance hyperarcs results random hypergraphs shown table 1 class value ffi expected size fsu u 6 execution times given milliseconds entry rounded average 20 instances 2n 25n 2n 25n 50n harn 176 123 135 150 277 table 1 random hypergraphs grid hypergraph nodes arranged b theta h grid node identified cohordinates nodes x cohordinate form level pair x x 0 h two vertical arcs hyperarcs connect nodes successive levels x exists hyperarc h h addition origin node arcs 1 1 h generated three classes grid hypergraphs square h long b ae h high h ae b parameters b h choosen order number nodes three classes hyperarc weights lay interval vertical arcs weights lay 1 2 weights arcs leaving lay 0 1 execution times reported table 2 entry rounded average 5 instances times given seconds high square long har 44 88 86 172 370 785 harn 44 85 86 176 370 783 sbt 222 385 118 206 65 115 table 2 grid hypergraphs though clearly incomplete results allow us draw conclu sions concerns random hypergraphs auction algorithms comparable standard labelsetting methods efficient class hypergraphs15 auction methods become competitive density increases one case har2 gives best results hand auction methods seem suitable large grid hypergraphs result matches computational results auction methods long grid graphs surprising since auction algorithm must maintain long current path p order connect nodes last layers second best data structure gives best results random hypergraphs high grids suitable square long grids result surprising since grid hypergraph exist two hyperarcs plus two vertical arcs leaving node conceivable good results high grids due savings obtained scanning origin node contrary node contraction operation almost useless also grid hypergraphs result rather disappointing since preliminary experiments operation proved effective classes grid graphs possible explanation may following node highest distance tail hyperarc likely highest distance also tail hyperarc belongs case hyperarc reduction may create two arcs leaving node node contraction cannot applied observation may suggest guidelines improving algorithms conclusions paper proposed auction method shortest hyperpath problems adapted several types weighting functions method derived minor changes auctionreduction spt algorithm indeed appealing feature approach several techniques originally developed graphs could easily exported hypergraphs practical point view auction shortest hyperpath methods comparable known methods least favourable cases one would expect behaviour dramatically affected structure underlying hy pergraph however seems resemble closely happens graphs conclude auction shortest hyperpath methods deserve inves tigation theoretical practical side possible direction could adapting variants proposed literature price raise technique devised 8 forwardreverse approach singleorigin singledestination case 4 chapter 4 r distributed algorithm assignment problem auction algorithm distributed relaxation method assignment problems auction algorithm shortest paths linear network optimization algorithms codes auction algorithm minimum cost network flow problem auction algorithm transportation problems polynomial auction algorithms shortest paths modified auction algorithm shortest path problem dynamic maintenance directed hypergraphs max horn sat minimum cut problem directed hypergraphs directed hypergraphs applications hypergraph models algorithms assembly problem equilibrium traffic assignment large scale transit networks implicit enumeration hyperpaths logit models transit networks computational study shortest hyperpath algo rithms strongly polynomial auction algorithms shortest paths hypergraph model stochastic time dependent shortest paths simplicial decomposition method transit equilibrium assignment problem tr