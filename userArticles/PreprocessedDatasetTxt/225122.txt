iterative improvement algorithm low power data path synthesis address problem minimizing power consumption behavioral synthesis datadominated circuits complex nature power cost function implies effects several behavioral synthesis tasks like module selection clock selection scheduling resource sharing supply voltage switched capacitance need considered simultaneously fully derive benefits design space exploration behavior level recent work established importance behavioral synthesis low power vlsi design however algorithms proposed separate tasks perform sequentially hence able explore tradeoffs possible due interaction present efficient algorithm performing scheduling clock selection module selection resource allocation assignment simultaneously aim reducing power consumption synthesized data path algorithm based iterative improvement strategy capable escaping local minima search low power solution algorithm considers diverse module libraries complex scheduling constructs multicycling chaining structural pipelining describe supply voltage clock pruning strategies significantly improve efficiency algorithm cutting computational effort involved exploring candidate supply voltages clock periods unlikely lead best solution experimental results reported demonstrate effectiveness algorithm techniques combined known methods behavioral power optimization like data path replication transformations result complete data path synthesis system low power applications b introduction low power consumption established important metric vlsi design recent work 1 2 3 shown savings power consumption often obtained higher levels design hierarchy paper concentrate behavioral synthesis processthat takes input behavioral description design produces registertransfer level rtl circuit implements specified behavior behavioral synthesis subdivided several tasks including module selection clock selection scheduling allocation assignment important note tasks interact solving one separately likely compromise quality design pioneering work architectural power optimization presented 1 used data path replication pipelining enable supply voltage scaling power reduction methodology used variety architectural transformations reduce power consumption presented 2 module selection 4 allocation assignment 5 6 methods also proposed reduce power consumption methods perform subset behavioral synthesis tasks reduce power consumption reducing supply voltage reducing switched capacitance explore tradeoffs involved considering interaction various tasks acknowledgments work supported nsf grant mip 9319269 55ns figure 1 cdfg dot product scheduleassignment paper present iterative improvement algorithm low power data path synthesis performs scheduling clock selection module selection resource allocation assignment objective minimizing power consumption key feature algorithm performs tasks simultaneously making possible explore tradeoffs result interdependence tasks 2 background consider behavioral descriptions compiled controldata flow graph cdfg directed graph whose vertices consist arithmetic logical comparison op erations delay operators special branch merge loop entry loop exit vertices represent control flow constructs cdfg contains data control flow edges represent data con trol dependenciesbetween operations example cdfg shown figure 1 represents computation dot product two vectors work consider datadominated behavioral descrip tions common digital signal image processing appli cations two important characteristics descriptions consist mainly arithmetic operations like addition multi plication delay operators etc ii constraint input sampling period ie inputs arrive fixed rate necessary able process input sample next one arrives however pay process input samples faster required rate 1 average switching power accounts dominant part power consumption cmos technology gate given 1 cl gate output capacitance vdd supply voltage n number transitions gate output period operation equation power consumption implies supply voltage vdd strong effect power consumption due quadratic contribution unfortunate sideeffect decreasingvdd however delay circuit increases delay cmos gate shown k cl v dd vth device threshold voltage k constant dependson technologyand size transistors gate 7 hence vdd scaling performed delay degradation cause delay exceed specified constraint means used combat delay degradation product physical capacitance cl transition activity n called switched capacitance effect switched capacitance term though drastic supply voltage term also used reducepower consumption 21 scheduling process scheduling determines cyclebycycle behavior cdfg ie assigns operation cdfg one cycles control steps figure 1 shows schedule information example cdfg horizontal dotted lines labeled numbers indicate clock edges ie boundaries control steps note 4 scheduled executed control step clock period 55ns large enough permit us technique called chaining theterm multicycling refers complementary situation single operation requires multiple control steps execute structural pipelining refers use pipelined execution units data path clearly choice clock period affects assignment control steps operations delay operation cdfg values determined clock selection module selection tasks respectively creating interdependenceamong scheduling module selection clock selection operations variables active control step must assigned different functional units regis ters example operations 1 6 must performed separate functional units since scheduling affects rate input samples processed also affects possibilities reducing vdd hand scheduling affects switched capacitance imposes constraints possibilities resource sharing slack sample period constraint time taken implementation processing input samples commonly exploited reduce power consumption using vdd scaling illustrated suppose given sample period constraint example cdfg shown figure 1 200ns clock period schedule shown figure 1 55ns since schedule three control steps processing input sample requires 165ns suppose clock period chosen based delay numbers multiplications cdfg figure 1 assumed performed functional unit instances tem plate array multiplier whereas additions assumedto performed functional unit instances type ripple carry adder dotted lines used group operations performed functional unit since given schedule processes input samples faster required surplus performance exploited reduce vdd time required one iteration cdfg becomes200ns ie sample period constraint met determined using curve equation models vdddelay relationship 2 7 case possible reduce vdd 40v still meet 200ns constraint extent slack available depends constraints imposed environment illustrated next example us consider image 288 theta 360 pixels per cif standard 8 consider task performing discrete cosine transform dct luminance information pixel commonly used approach divide image blocks say 8 theta 8 pixels perform dct block separately 8 theta 8 block thus obtained requires twodimensional dct broken onedimensional 8point dct operations number onedimensional 8point dcts required process one frame thus calculated 25920 thus order process would need perform dct 1286ns define term laxity factor data path implements given cdfg ratio given sample period constraint 3 4 5 6 out13530ns figure 2 dot product alternate scheduleassignment actual execution time data path one iteration example assume implementation 8point onedimensional dct takes 500ns process set inputs laxity factor available 257 higher laxity factor permits us perform vdd scaling hence results greater power savings possible use various methods speed execution cdfg make use slack thus obtained scale vdd till sample period constraint met consequence speedup techniques switched capacitance per execution cdfg typically increases may due use faster functional units contribute higher switched capacitance per operation due constraints imposed tighter schedule possibilities resource sharing thus exists vdd vs switched capacitancetradeoff illustrated example example 3 cdfg figure 1 different sched ule clock selection module selection resource assignment shown figure 2 multiplications performed 2 stage pipelined multipliers schedule elongated order reduce number required multipliers two multiplication operations shaded differently indicate multiplier assigned two functional units type ripple carry adder used perform additions clock period changed 30ns order match cycle time pipelined multiplier since schedule extended order use fewer functional units processing input sample requires 180ns result vdd scaled 45v terms vdd architecture implied figure 1 better order compare actual power dissipation however switched capacitance two architectures also measured explained layouts first generated two candidate architectures netlists annotated resistances capacitances extracted layouts switchlevel simulator used simulate two netlists input sequence details experimental methodology given section 4 switched capacitance per sample period obtained implementations figures 1 2 29129pf 21006pf respectively switched capacitance vdd numbers energy per sample period calculated 23303pj respectively power dissipation obtained dividing numbers sample period 200ns fore architecture derived figure 2 lower power consumption one derived figure 1 thus important consider effects different behavioral synthesis tasks vdd switched capacitance order truly minimize power consumption 22 module selection module selection refers process selecting operation cdfg type functional unit perform order fully explore design space necessary diverse library functional unit templates multiple templates exist capable performing operation eg ripple carry adder carry lookahead adder carry select adder addition array multiplier wallace tree multiplier pipelined multiplier multiplication etc possible perform area delay power tradeoffs using module selection faster modules perform operation typically expensive terms area switched ca pacitance however using faster modules result faster execution time cdfg thus enabling vdd scaling 4 module selection interacts clock selection scheduling resource sharing example figure 1 clock period 55ns chosen based delay multiplication operations assigned library template array multiplier figure 2 since module selection changed clock period also changed 30ns based cycle time tem plate two stage pipelined multiplier operations assigned different functional unit templates module selection cannot share resource situation referred type conflict algorithm considers effect interactions synthesizing data path 23 clock selection clock selection refers process choosing suitable clock period controllerdata path circuit given clock period tclk divide execution time cdfg equal input sample period tsample number control steps equal clk bxc denotes largest integer smaller equal x choice clock period known significant effect area performance 9 however impact power consumptionwas pointed recently 3 clock period chosen calculate delay functional unit template library terms control steps since calculation involves upward rounding fraction slack introduced time functional unit finishes executing clock edge output actually used example cdfg figure 2 clock period 30ns assuming addition operation requires 25ns including estimates register multiplexer interconnect delays slack 5ns introduced every addition operation slack introduced due clock granularity result lessthancomplete utilization functional units could also result increase time required execution cdfg context minimizing power dissipation slacks cause two undesirable effects first may possible meet sample period constraint cdfg values vdd second slacks result data path higher switched capacitance happen either faster functional units used order meet sample period resource sharing inhibited due increased life times operations cdfg thus reducing slacks beneficialeven power consumption point view might first appear since slacks caused granularity clock period small clock period would minimize slack hence advantageous however small clock period tends significantly increase switched capacitance data path registers since clocked greater number times per execution period clock distribution network since needs switched greater number times controller since number states controller increases number control steps due complicating factors methods solely target slack minimization directly applicable minimizing power consumption objective reducing power consumption slacks need minimized without choosing small clock period 24 resource sharing resource sharing refers use hardware resource functional unit register perform different operations store one variable behavioral synthesis tasks perform resource sharing hardware allocation assign ment processes decide many resources type use operations variables assign unit spectively resource sharing significantly affects physical capacitance switching activity data path heavy resource sharing tends reduce physical capacitance increase average switching activity data path sparsely shared architectures lower average switching activity higher physical capacitance detailed analysis effect resource sharing switched capacitance taking signal statistics account described 6 use similar model briefly describe sake completeness functional units library assumed model switched capacitance given pair input vec tors capacitance switched functional unit application given input vector pair calculated model abstracted procedure sw cap implemented using either stochastic power analysis model 10 instead could invoke gate switchlevel simulator appropriate netlist one available given module return exact capacitance switched functional simulation cdfg per formed input sequencethat either provided user generated based known input characteristics functional simulation performed data structure called switched capacitance matrix updated using values taken variables cdfg procedure sw cap switched capacitance matrices associate switched capacitance cost pair operations could mapped resource separate switched capacitance matrix created functional unit template exists library example consider functional unit template ripple carry adder addition operations share ripple carry adder way adder performs immediately followed operands effectively form input vector pair adder input vector pair used update switched capacitance matrix entry end data collection process switched capacitance matrix functional unit template entries indicate pair operations cost terms switched capacitance operations mapped instance template similarly switched capacitance matrices also used estimate switched capacitance registers interconnection units different candidate architectures evaluated respect switched capacitance 6 using entries switched capacitance matrices 3 algorithm discussionsin previous sections shown schedul ing clock selection module selection resource sharing interact complex way determine power consumption data path since computational complexity power minimization problem forbids exact optimal solution developed efficient heuristic method performing tasks minimizing power consumption method targets vdd scaling switched capacitance reduction pseudocode figure 3 gives overview method called scalp first procedure estimate min voltage called estimate minimum voltage vmin given cdfg implemented voltage interval vmin vmax 5v discretized steps suitable increment dv could specified user parameter techniques explained section 31 used prune vdd space signifi cantly supply voltages cannot pruned move examine various values number control steps csteps equivalently various values system clock period turns several candidate clock periods easily pruned using method explained section 32 combinations vdd csteps cannot pruned initial implementation generated satisfies sample period constraint improved calling procedure iterative improvement since attempting data path synthesis fixed value vdd csteps objective synthesize data path vmin estimate min voltageg ts l cur dp f vdd pruneg cur dp vdd continue move next vdd csteps max csteps csteps min csteps csteps clk pruneg l csteps f continue move next clock minimum switched capacitance data path current vdd csteps cur dp initial solutiong l vdd csteps iterative improvementg l cur dp power estcur dp figure 3 overview low power synthesis method satisfies sample period constraint current vdd clock period minimal switched capacitance time best solution best dp seen thus far stored candidate supply voltages clock periods either pruned explored best dp contains final solution 31 supply voltage pruning purpose vdd pruning identify candidate supply voltages lead data path lowest power vdd pruning method based obtaining lower bound switched capacitance current vdd module selection performed mapping operation cdfg functional unit template lowest switched capacitance determined using switched capacitance matrices 6 even though implementation may violate sample period constraint ignore fact since need pessimistic estimate parallel architecture sharing functional units registers chosen implement data path parallel architecture typically close lowest switched capacitance architecture due high temporal correlations signals characteristic digital signal image processing domains 6 switched capacitance implementation multiplied pessimism factor 0 1 used lower bound power consumed data path current vdd experiments used based experience 6 bound thus calculated greater best solution seen current vdd pruned 32 clock period pruning use following observation prune clock period space given desired sampling period ts sufficient consider clock periods clk satisfy clk integer clock period would result part ts unused practical lower bound clock period coupled observation restricts set candidate clock periods limited set set pruned follows consider two candidate clock periods clk1 clk2 clk1 clk2 functional unit template data path library let rrdelay represent registertoregister transfer delay l rrdelay l rrdelay procedure iterative improvementcdfg g library l f append gain gain list find subsequence gain 1 gaink gain list gain maximized accept moves 1 k figure 4 procedure iterative improvement holds sufficient consider clk1 searching minimum switched capacitance data path current vdd data path synthesized operate clk2 also operate tclk1 whereas tclk1 could allow us synthesize data paths would satisfy sample period constraint clk2 operation chaining employed maximum chaining factor k ie k operations chained together clock cycle condition equation 1 checked functional unit templates library also chained combinations upto k functional unit templates note delay chained configurations significantly less sum delays chained components measured separately various chained configurations possible 33 iterative improvement algorithm iterative improvement procedure based general search strategy optimization problems called variable depth search 11 given initial solution attempt find sequence incremental moves rather single move case local search maximizes cumulative improvement solution also called gain process iterated suchsequencecanbe found sincewe consider sequencesthat cumulative positive gain even though individual moves may negative gain class algorithms capable hillclimbing escapefrom local minima point next movewe make chosen based steepest descent heuristic 11 figure 4 shows pseudocode procedure iterative improvement cost function use switched capacitance data path estimated using switched capacitancematrices 6 define moves explore scheduling module selection allocation assignment choices available 34 moves used iterative improvement procedure following key observation allows us restrict number distinct types moves need consider moves affect schedule alone called rescheduling moves without causing change module selection resource sharing cannot affect switched capacitance data path ever moves cannot completely eliminated since enable application moves change module selection resource sharing hence integrate enabling rescheduling moves moves enable thus composite move consists change module selection resource shar ing preceded enabling rescheduling move necessary moves class module selection rescheduling moves class transform data path replacing functional unit fu 1 instance library template 1 another functional unit fu 2 instance different library template 2 eg adder instance carry lookahead adder may replaced instance ripple carry adder note 40ns b figure 5 move class rescheduling might needed delay fu 2 terms number control steps could general greater rescheduling performed follows process operations performed fu 1 order original schedule op first increment death time op reflect delay fu 2 breadthfirst traversal cdfg performed starting op update scheduling information operations transitive fanout op process performed opn operations cdfg complete sample period done otherwise sample period constraint violated move considered easy extend method allow sample period constraint violated intermediate solutions provided final solution iterative improvement phase meets consider cdfg shown figure 5a multiplications performed instances library template wallace tree multiplier whereas additions performed instances ripple carry adder move class applied result modified data path indicated figure 5b modified data path multiplication operation 3 performed array multiplier requires two control steps since 3 mobility one control step total number control steps schedule remains moves class directly help lower switched capacitance faster functional units typically cause large amount switched capacitance replaced slower functional units lower switched capacitance moves class also help indirectly lower switched capacitance used enable moves including perform resource sharing moves class b resource sharingsplitting scheduling purpose moves class b explore resource sharing choices available move class b perform resource sharing merging two functional units fu 1 fu 2 single functional unit fu fu performs operations performed fu 1 well fu 2 move valid fu 1 must instances library template moreover operation performed fu 1 overlapping lifetime operation performed fu 2 second condition met attempt find rescheduling using method similar method described moves class consider cdfg shown figure 6a multiplication operation performed separate multiplier two addition operations mapped one functional unit variable stored separate register one possible move class b applied result new data path indicated figure 6b operation 3 rescheduled first control step second control step order enable resource sharing important note move causes two additional multiplexers beadded inputs multiplier performs operations 2 3 since select different sources first second control steps hence switched capacitance estimates multiplexers must taken account calculating gain move 40ns b figure move class b performs resource sharing also provide moves class b perform resource splitting ie replace single functional unit fu two functional units fu1 fu2 moves class b perform splitting require rescheduling transformations apart potentially reducing switched capacitance moves also open avenues applying moves class resource sharing moves class b previously possible 4 experimental results methods described paper implemented programming language program called scalp scalp evaluated using synthesize several benchmarksfrom digital signal image processing domains input scalp cdfg desired sample period output scalp data path controller together implement behavior specified cdfg logiclevel netlist obtained combined controllerdata path mapped msu standard cell library using logic synthesis tool sis following standard cell layout routing tools octtools suite used obtain layout combined controllerdata path switchlevel simulator irsimcap records switched capacitance simulation run used perform simulation switchlevel netlist extracted layout annotated resistances capacitances using magic since obtain complete layout several factors difficult estimate higher levels like interconnect power clock network power controller power glitching power etc taken account power measurements input sequences used measuring power consumption using irsimcap generated first creating sequence corresponding zeromean unitvariance gaussian distribution passing autoregressive filter introduce temporal correlation 6 autocorrelation factor used experiments 02 synthesized benchmark corresponding various possible values laxity factor ranging 10 corresponds scenario laxity ie sample period constraint satisfied fastest design 5v 35 benchmark laxity factor synthesized poweroptimized architectures generated scalp ii areaoptimized architectures vdd scaling area optimization performed using method similar scalp area used cost function metric evaluating moves supply voltage areaoptimized architecture scaled much possible subject sample period constraint figures 7a 7h provide plots power consumed controllerdata path circuits produced scalp see curves marked spower areaoptimized architectures vdd scaling see curve marked apower ii area obtained layout controllerdata path circuits synthesized scalp see curves marked sarea numbers normalized respect areaoptimized architecture supply voltage 5v refer numbers base case variable xaxis laxity factor dct examples perform discrete cosine transform using different algorithms named inventors wdf power area ratios spower apower sarea power area ratios spower apower sarea power area ratios spower apower sarea chemical b dct lee c dct wang power area ratios sarea spower apower power area ratios sarea apower spower power area ratios sarea apower spower dist e elliptic f iirfilter power area ratios sarea apower spower power area ratios sarea apower spower g paulin h wdf figure 7 experimental results power area ratios normalized areaoptimized base various laxity factors fir wave digital filter elliptic fifth order elliptic wave filter dist chemical iirfilter different iir filters used industry cdfg paulin borrowed literature area curves plotted dotted lines power curves plotted solid lines curves show circuits synthesized scalp require upto 7 times less power corresponding areaoptimized circuits operate 5v ii scalp circuits consume upto 23 times less power areaoptimized circuits use vdd scaling synthesis iii area overhead scalp synthesized circuits less 41 cases note comparisons circuits synthesized meet sample period constraints average scalp circuits required 114 199 295 380 475 587 times lower power base case laxity factors 10 15 20 25 30 35 respectively requiring corresponding area overheads 16 24 27 24 27 27 respectively cpu times taken scalp less 20 minutes cases sparcstation 20 128mb memory power reduction achieved incorporating suite architectural transformations 2 data path duplication 1 iterative improvement framework well 5 conclusions presented efficient iterativeimprovement based algorithm perform scheduling module selection clock selection hardware allocation assignment datadominated behavioral descriptions order minimize power consumption unlike previous work also consider interaction among tasks order better explore design space implemented algorithm presented experimental results demonstrate effectiveness since possible easily incorporate techniques like transformations data path replication framework current future work includes incorporating complete data path synthesis tool low power applications r lowpower cmos digital design optimizingpowerusing transformations behavioral level power estimation exploration microarchitectural synthesis performanceconstrained lowpower vlsi designs behavioral synthesis low power ilp formulation low power based minimizingswitched capacitance datapath allocation lowpower digital design overview px64 kbits video coding standard exact solution methodology scheduling 3d design space architectural power analysis dual bit type method algorithms complexity tr combinatorial optimization algorithms complexity overview pmyampersandtimes64 kbits video coding standard architectural power analysis exact methodology scheduling 3d design space behavioral synthesis low power microarchitectural synthesis performanceconstrained lowpower vlsi designs ctr k khouri g lakshminarayana n k jha impact highlevel synthesis system low power controlflow intensive circuits proceedings conference design automation test europe p848854 february 2326 1998 le palais des congrs de paris france j e crenshaw sarrafzadeh accurate high level datapath power estimation proceedings 1997 european conference design test p590 march 1720 1997 hsuehchih yang lanrong dung multiplevoltage highlevel synthesis using algorithmic transformations proceedings 2005 conference asia south pacific design automation january 1821 2005 shanghai china stammermann helms schulte schulz w nebel binding allocation floorplanning low power highlevel synthesis proceedings ieeeacm international conference computeraided design p544 november 0913 daehong kim kiyoung choi powerconscious high level synthesis using loop folding proceedings 34th annual conference design automation p441445 june 0913 1997 anaheim california united states ganesh lakshminarayana niraj k jha synthesis poweroptimized areaoptimized circuits hierarchical behavioral descriptions proceedings 35th annual conference design automation p439444 june 1519 1998 san francisco california united states indradeep ghosh anand raghunathan niraj k jha design testability technique rtl circuits using controldata flow extraction proceedings 1996 ieeeacm international conference computeraided design p329336 november 1014 1996 san jose california united states yannrue lin chengtsung hwang allen ch wu scheduling techniques variable voltage low power designs acm transactions design automation electronic systems todaes v2 n2 p8197 april 1997 mark c johnson kaushik roy datapath scheduling multiple supply voltages level converters acm transactions design automation electronic systems todaes v2 n3 p227248 july 1997 eren kursun ankur srivastava seda ogrenci memik majid sarrafzadeh early evaluation techniques low power binding proceedings 2002 international symposium low power electronics design august 1214 2002 monterey california usa ganesh lakshminarayana anand raghunathan niraj k jha behavioral synthesis fault secure controllerdatapaths based aliasing probability analysis ieee transactions computers v49 n9 p865885 september 2000 chihong hwang allen ch wu predictive system shutdown method energy saving eventdriven computation acm transactions design automation electronic systems todaes v5 n2 p226241 april 2000 ahmed f shalash keshab k parhi power efficient folding pipelined lms adaptive filters applications wireline digital communications journal vlsi signal processing systems v25 n3 p199213 july 2000 massoud pedram power minimization ic design principles applications acm transactions design automation electronic systems todaes v1 n1 p356 jan 1996