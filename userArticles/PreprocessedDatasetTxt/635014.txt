abstracting soft constraints soft constraints flexible expressive however also complex handle reason may reasonable several cases pass abstract version given soft constraint problem bring useful information abstract problem concrete one hopefully make search solution optimal solution concrete problem fasterin paper propose abstraction scheme soft constraint problems study main properties show processing abstracted version soft constraint problem help us finding good approximations optimal solutions also obtaining information make subsequent search best solution easierwe also show abstraction scheme used devise new hybrid algorithms solving soft constraint problems also import constraint propagation algorithms abstract scenario concrete one may useful dont efficient propagation algorithm concrete setting b introduction classical constraint satisfaction problems csps 18 convenient expressive formalism many reallife problems like scheduling resource al location vehicle routing timetabling many others 23 however many problems often faithfully represented soft constraint satisfaction problems scsps like classical csps except assignment values variables constraints associated element taken partially ordered set elements interpreted levels preference costs levels certainty many criteria many formalizations soft constraint problems paper consider one based semirings 4 3 semiring species partially ordered set appropriate operation use combine constraints together although obvious scsps much expressive classical csps also dicult process solve therefore sometimes may costly nd even one optimal solution also although classical propagation techniques like arcconsistency 17 extended scsps 4 even techniques costly used depending size structure partial order associated scsp reasons may reasonable work simplied version given problem trying however loose much information propose dene simplied version means notion abstraction takes scsp returns new one simpler solve many works abstraction 16 15 simpler may mean many things like fact certain solution algorithm nds solution optimal solution fewer number steps also abstracted problem processed machinery available concrete context many formal proposals describe process abstracting notion formula problem 16 even classical 11 soft csp 21 among chose use one based galois insertions 5 mainly refer wellknow theory many results properties useful purposes made approach compatible general theory abstraction 16 adapted work soft constraints given scsp concrete one get abstract scsp changing associated semiring relating two structures concrete abstract one via galois insertion note way abstracting constraint problems change structure problem set variables remains well set constraints semiring values associated tuples values variables constraint get abstracted version given problem propose 1 process abstracted version may mean either solving completely also applying incomplete solver may derive useful information abstract problem 2 bring back original problem possibly information derived abstract context 3 continue solution process transformed problem concrete problem equivalent given one process main aim nding optimal solution approximation original scsp within resource bounds hope following three steps get nal goal faster solving original problem deep study relationship concrete scsp corresponding abstract one allows us prove results help deriving useful information abstract problem take derived information back concrete problem particular prove following abstraction satises certain property optimal solutions concrete scsp also optimal corresponding abstract scsp see theorem 4 thus order nd optimal solution concrete prob lem could nd optimal solutions abstract problem check optimality concrete scsp given optimal solution abstract problem nd upper lower bounds optimal solution concrete problem see theorem 5 satised bounds could take optimal solution abstract problem reasonable approximation optimal solution concrete problem apply constraint propagation technique abstract problem say p obtaining new abstract problem say p information inserted p obtaining new concrete problem closer solution thus easier solve see theorem 6 8 however done semiring operation describes combine constraints concrete side idempotent see theorem 6 instead operation idempotent still bring back information abstract side particular bring back inconsistencies tuples associated worst element semiring since sure tuples inconsistent also concrete scsp see theorem 8 last two cases new concrete problem easier solve sense example branchandbound algorithm would explore smaller equal search tree nding optimal solution paper organized follows first section 2 give necessary notions soft csps abstraction section 3 dene notion abstraction section 4 prove properties abstraction scheme discuss consequences finally section 7 summarize work give hints future directions background section recall main notions soft constraints 4 abstract interpretation 5 useful developments results paper 21 soft constraints literature many formalizations concept soft constraints 21 8 13 10 refer one described 4 3 however shown generalize express many others 4 2 words soft constraint classical constraint instantiation variables associated value partially ordered set combining constraints take account additional values thus formalism also provide suitable operations combination comparison tuples values constraints formalization based concept semiring set plus two operations denition 1 semirings csemirings semiring tuple ha set 0 1 2 commutative associative 0 unit element associative distributes 1 unit element 0 absorbing element csemiring semiring idempotent 1 absorbing element commutative let us consider relation b possible prove see 4 partial monotone 0 minimum 1 maximum lattice b 2 moreover idempotent ha complete distributive lattice glb informally relation gives us way compare tuples values constraints fact b say b better denition 2 constraints given csemiring set domain variables ordered set variables v constraint pair hdef coni con v therefore constraint species set variables ones con assigns tuple values variables element semiring set element interpreted several ways level preference cost probability etc correct way interpret elements depends choice semiring operations constraints compared looking semiring values associated tuples consider two constraints c relation vs partial order following also use obvious extension relation sets constraints also problems seen sets con straints therefore given two scsps p 1 p 2 graph topology write p 1 vs p 2 constraint c 1 p corresponding constraint c 2 p 2 c 1 vs c 2 denition 3 soft constraint problem soft constraint satisfaction problem scsp pair hc coni con v c set constraints note classical csp scsp chosen csemiring fuzzy csps 8 19 20 instead modeled scsp framework choosing csemiring figure 1 shows fuzzy csp variables inside circles constraints represented undirected arcs semiring values written right corresponding tuples assume domain variables contains elements b 09 b 05 09 b 01 aa 08 ab 02 ba 0 bb 0 fig 1 fuzzy csp denition 4 combination given two constraints c combination cc 2 constraint hdef coni dened combina tion operator straightforward extended also sets constraints applied set constraints c write words combining two constraints means building new constraint involving variables original ones associates tuple domain values variables semiring element obtained multiplying elements associated original constraints appropriate subtuples using properties easy prove associative commutative monotone vs idempotent idempotent well denition 5 projection given constraint c hdef coni subset v projection c written c constraint tt con icon 0 deft informally projecting means eliminating variables done associating tuple remaining variables semiring element sum elements associated original constraint extensions tuple eliminated variables denition 6 solution solution scsp problem constraint obtain solution scsp combine constraints project variables con way get constraint con induced entire scsp example solution fuzzy csp figure 1 consists pair domain values domain value two variables associated semiring element assume con contains variables mean projection tuple dened set variables x set variables x element obtained looking smallest value subtuples many constraints forming pair example tuple ha ai compute minimum 09 value value value hence resulting value tuple 08 denition 7 optimal solution given scsp problem p consider solp hdef coni optimal solution p pair ht vi 0 v deft 0 therefore optimal solutions solutions best semiring element among associated solutions set optimal solutions scsp p written optp denition 8 problem ordering equivalence consider two problems solution thus say equivalent relation vp preorder moreover equivalence relation scsp problems solved extending adapting technique usually used classical csps example nd best solution could employ branchandbound search algorithm instead classical backtrack ing also successfully used propagation techniques like arcconsistency 17 generalized used scsps detailed formal denition propagation algorithms sometimes called also local consistency algorithms scsps found 4 purpose paper important say generalization classical csps concerns fact instead deleting values tuples obtaining local consistency scsps means changing semiring values associated tuples domain elements change always brings values towards worst value semiring 0 thus obvious given scsp problem p problem p 0 obtained applying local consistency algorithm p must another important property algorithms solp local consistency algorithms change set solutions 22 abstraction abstract interpretation 1 5 6 theory developed reason relation two dierent semantics concrete abstract semantics idea approximating program properties evaluating program simpler domain descriptions concrete program states goes back early 70s inspiration approximating properties exact concrete semantics approximate abstract semantics explicitly exhibits structure eg ordering somehow present richer concrete structure associated program execution guiding idea relate concrete abstract interpretation calculus pair functions abstraction function concretization function form galois connection let c v concrete domain domain concrete semantics abstract domain domain abstract semantics partial order relations ect approximation relation since approximation theory partial order species precision degree element poset obvious assume mapping associating abstract object concrete element c v following holds x also correct although less precise abstract approximation x argument holds x v also correct approximation x although x provides accurate information gives rise following formal denition denition 9 galois insertion let c v two posets concrete abstract domain galois connection h pair maps c 1 monotonic 2 x 2 c x v 3 2 moreover galois insertion c h connection property 2 called extensivity map called lower upper adjoint abstraction concretization context abstract interpretation following basic properties satised galois insertion 1 injective surjective 2 upper closure operator c v 3 additive coadditive 4 upper lower adjoints uniquely determine namely fy 2 j x 5 isomorphism c inverse example galois insertion seen figure 2 concrete lattice h0 1 abstract one hf0 1g function maps real numbers 0 05 0 integers 05 1 1 function maps 0 05 1 1 one property useful later relates precise relationship ordering concrete lattice abstract one abstract lattice concrete lattice1 fig 2 galois insertion theorem 1 total ordering consider galois insertion c v total order also proof easy follows monotonicity x v implies x surjectivity element image element c via 2 usually concrete abstract lattice operators used dene corresponding semantics times useful required abstract operators show certain relationship corresponding concrete ones relationship called local correctness denition c operator concrete lattice assume f abstract counterpart f locally correct wrt f 8x abstracting soft csps given notions soft constraints abstraction recalled previous sections want show abstract soft constraint problems main idea simple want pass via abstraction scsp p certain semiring another scsp p semiring lattices associated related galois insertion shown denition 11 abstracting scsps consider concrete scsp problem semiring dene abstract scsp problem c coni semiring c n g lattice associated lattice associated galois insertion h locally correct respect notice kind abstraction consider paper change structure scsp problem c c number constraints c involve variables thing changed abstracting scsp semiring thus p p graph topology variables constraints dierent constraint denitions since certain tuple domain values constraint p semiring value tuple constraint p semiring value notice also dened several dierent ways satisfy properties galois insertion derives among others example 1 example consider scsp semiring optimiza tion costs represented negative reals suppose want abstract onto semiring fuzzy reasoning words instead computing maximum sum costs want compute maximum minimum costs want normalize costs 01 notice abstract problem fcsp class idempotent operator min means abstract framework perform local consistency problem order nd inconsistencies noted mapping dened dierent ways example one decide map reals xed real x onto 0 map reals x 0 reals 0 1 using normalization function example x example 2 another example abstraction fuzzy semiring classical one function maps element 0 1 either 0 1 example one could map elements 0 x onto 0 x 1 onto 1 xed x figure 2 represents example dened galois insertions two lattices hl h semiring values however convenience following often use galois insertions lattices problems hpl vs h contains problems concrete semiring pl abstract semiring change meaning abstraction upgrading galois insertion semiring values problems thus say mean p obtained p via application semiring values appearing p important property notion abstraction composition two abstractions still abstraction allows build complex abstraction dening several simpler abstractions composed theorem 2 abstraction composition consider abstraction lattice corresponding semiring 1 corresponding semiring 2 denoted pair h 1 1 consider another abstraction lattice corresponding semiring 2 corresponding semiring 3 denoted pair h 2 abstraction well proof rst prove h four properties galois insertion since composition monotone functions monotone function monotone functions given value x rst abstraction x v 1 moreover element v 2 holds also thus monotonicity 1 x v 1 similar proof used third property composition two identities still identity prove 3 locally correct wrt 1 enough consider local correctness 2 wrt 1 3 wrt 2 monotonicity 4 properties advantages abstraction section dene prove several properties hold abstractions soft constraint problems main goal point advantages one passing abstracted version soft constraint problem instead solving directly concrete version 41 relating soft constraint problem abstract version let us consider scheme depicted figure 3 following pictures left box contains lattice concrete problems right one lattice abstract problems partial order lattices shown via dashed lines connections two lattices via abstraction concretization functions shown via directed arrows following call concrete semiring 1i abstract one thus always consider galois insertion h abstract problems concrete problems fig 3 concrete abstract problem figure 3 p starting scsp problem mapping get abstraction p applying mapping get problem us rst notice two problems p p related precise property stated following theorem theorem 3 given scsp problem p p vs proof immediately follows properties galois insertion particular fact x x concrete lattice fact p means tuple constraint p semiring value associated tuple p smaller wrt corresponding value associated tuple notice implies tuple p semiring value 0 must value 0 also p holds also solutions whose semiring value obtained combining semiring values several tuples corollary 1 given scsp problem p solp vs proof recall solp constraint obtained thus statement corollary comes monotonicity therefore passing p p new inconsistencies intro duced solution p value 0 true also p however possible inconsistencies forgotten appear consistent abstraction process abstraction preserves semiring ordering applying abstraction function combining gives elements ordering elements obtained combining also interesting relationship set optimal solutions p p fact certain tuple optimal p tuple also optimal us rst investigate meaning orderpreserving property denition 12 orderpreserving abstraction consider two sets 1 2 concrete elements abstraction said orderpreserving x products refer multiplicative operations concrete abstract semirings words notion orderpreservation means rst abstract combine combine get ordering dierent semirings among resulting elements example 3 abstraction orderpreserving seen figure 4 concrete abstract sets well additive operations two semirings seen picture multiplicative operations assume coincide glb two semirings case concrete ordering partial abstract ordering total functions depicted gure arrows going concrete semiring abstract one vice versa assume concrete problem solution value 1 solutions value b optimal suppose solution value b obtained computing 1a abstract counterparts values 1 0 1 therefore solution value optimal concrete problem optimal anymore abstract problema b1g fig 4 abstraction orderpreserving example 4 abstraction figure 2 orderpreserving fact consider two abstract values ordered 0 0 1 x must greater 05 thus concrete combination min say v always greater 05 hand 0 obtained combining either two 0s therefore images two elements smaller equal 05 whose minimum smaller 05 thus smaller v combining 0 1 images value greater 05 one smaller 05 also case combination min smaller 05 thus smaller v thus orderpreserving property holds example 5 another abstraction orderpreserving one passes semiring hn f1g min sum 0 1i minimize sum values naturals semiring hn f1g min max 0 1i minimize maximum values naturals words abstraction maintains domain semiring additive operation min changes multiplicative operation passes sum max notice semiring orderings opposite usually used naturals smaller j j thus best element 0 worst 1 abstraction function identity also concretization function case consider abstract semiring two values way obtained combining two values abstract semiring example 9 abstract ordering 8 higher 9 let us see images combined values values since identity relate sum7 15 lower 10 concrete ordering thus orderpreserving property hold notice reduce sets 1 2 singletons say x orderpreserving property says x implies x means two abstract objects ordered concrete counterparts ordered well way course could never ordered opposite sense otherwise would monotonic could incomparable therefore choose abstraction incomparable objects mapped onto ordered objects dont orderpreserving property consequence abstract semiring totally ordered want orderpreserving abstraction concrete semiring must totally ordered well hand two abstract objects ordered corresponding concrete objects ordered sense also comparable notice restriction orderpreserving property singleton sets always holds concrete ordering total fact case two abstract elements ordered certain way impossible corresponding concrete elements ordered opposite way said monotonicity function theorem 4 consider abstraction orderpreserving given scsp problem p optp optp proof let us take tuple optimal concrete semiring value v v obtained multiplying values subtuples suppose without loss generality number subtuples two two us take value tuple abstract problem abstract combination abstractions v 1 show v optimal also v 0 optimal suppose v 0 optimal exists another tuple 00 value v 00 v 0 0 v 00 assume v 2 let us see value tuple 00 p set v 00 value us compare v v since v 0 get v v means v optimal initial assumption therefore v 0 optimal 2 therefore case orderpreservation set optimal solutions abstract problem contains optimal solutions concrete problem words allowed optimal solution concrete domain becomes nonoptimal abstract domain however nonoptimal solutions could become optimal becoming incomparable optimal solutions thus want nd optimal solution concrete problem could nd optimal solutions abstract problem use concrete side nd optimal solution concrete problem assuming working abstract side easier concrete side method could help us nd optimal solution concrete problem looking subset tuples concrete problem another important property holds abstraction concerns computing bounds approximate optimal solution concrete problem optimal solution say abstract problem say value v used obtain upper lower bound optimum p fact prove optimal solution p value v value p thus think approximating optimal value value within two bounds satisfactory take approximation optimal solution p theorem 5 given scsp problem p consider optimal solution p say semiring value v p v p exists optimal solution p say value v v v proof local correctness multiplicative operation abstract semir ing v v since v value p either optimal p another tuple value better v say v show v cannot greater v fact assume absurd local correctness multiplicative operation abstract semiring v smaller value p also monotonicity v therefore transitivity obtain v smaller value p possible assumed v optimal therefore must optimal value v v 2 thus given tuple optimal value v abstract problem instead spending time compute exact optimum p following compute v thus obtaining upper bound optimum p compute value p lower bound optimum think bounds close enough take reasonable approximation precise lower bound optimum p notice theorem need orderpreserving property abstraction thus abstraction exploit result 42 working abstract problem consider abstract problem p one possibility apply abstract function f example local consistency algorithm also solution algorithm following consider functions f always intensive bring given problem closer bottom lattice fact goal solve scsp thus going higher lattice help task since solving means combining constraints thus getting lower lattice also functions f always locally correct respect function f sol solves concrete problem call property solutioncorrectness precisely given problem p constraint set c f sol p new problem p 0 topology p whose tuples semiring values possibly lower let us call c 0 set constraints p 0 constraint c words f sol combines constraints p projects resulting global constraint original constraints denition 13 given scsp problem p consider function f f solutioncorrect given f sol solves p f locally correct wrt f sol also need notion safeness function means maintains solutions denition 14 given scsp problem p function f pl pl f safe solp easy see local consistency algorithm dened 4 seen safe intensive solutioncorrect function fp applying concretization function get therefore concrete semiring p following property says certain conditions p fp equivalent figure 5 describes situation gure see several partial order lines drawn abstract side function f takes element closer bottom intensiveness concrete side fp smaller p properties fp smaller monotonicity fp higher f sol p solutioncorrectness f sol p smaller p way f sol p constructed idempotent coincides glb thus fp higher f sol p denition glb higher among lower bounds p x x idempotent concrete problems abstract problems fig 5 general abstraction scheme idempotent theorem 6 given scsp problem p consider function f p safe solutioncorrect intensive idempotent solp proof take tuple value v p obtained combining values subtuples say two us consider abstract versions v 1 f changes values lowering thus get 1 since f safe v 0 f solutioncorrect thus v v 0 monotonicity v 0 2 implies v 0 v 0 2 since idempotent assumption thus coincides glb thus v v 0 v 0 prove p fp give value tuple prove v 0 v 0 commutativity write v 1 v 0 v 0 shown v v 0 v 0 v 0 v 0 theorem say anything power f could make many modications p could also modify anything last case figure 6 means gained anything abstracting p however always use relationship p p see theorem 4 5 nd approximation optimal solutions inconsistencies p f p abstract problems concrete problems fig 6 scheme f modify anything instead f modies semiring elements p order concrete semiring total figure 7 thus work fp nd solutions p fp lower p thus closer solution theorem 7 given scsp problem p consider function f p safe solutioncorrect intensive idempotent f mod ies every semiring element p order concrete semiring total p ws proof consider tuple constraint p let us call v semiring value p v sol value f sol p obviously v sol v take v v monotonicity cannot v v 0 also solutioncorrectness f cannot v 0 v sol thus must proves statement theorem 2 notice need idempotence operator theorem 6 7 instead idempotent prove something weaker figure 8 shows situation respect figure 5 see possible nonidempotence changes partial order relationship concrete side particular dont problem fp problem f sol p since problems would solutions p l r e r abstract problems concrete problems fig 7 scheme concrete semiring total order thus interesting us instead new problem p 0 constructed way insert inconsistencies obviously lower p concrete partial order since p exception 0s important point solutions p x idempotent concrete problems abstract problems fig 8 scheme idempotent theorem 8 given scsp problem p consider function f p safe solutioncorrect intensive idempotent consider p 0 scsp p except tuples semiring value 0 tuples given value 0 also p 0 solp proof take tuple value v p obtained combining values subtuples say two us consider abstract versions v 1 f changes values lowering thus get 1 since f safe v 0 f solutioncorrect thus v v 0 monotonicity v 0 2 thus v v 0 2 suppose v 0 implies also therefore set combination v 1 v 2 result v 0 2 summarizing theorems give us several hints use abstraction scheme make solution p easier idempotent replace p fp get solutions theorem 6 instead idempotent replace p p 0 theorem 8 case point passing p new problem easier solve p since semiring values tuples explicit closer values tuples completely solved problem precisely consider branchandbound algorithm nd optimal solution p solution found value used cut away branches semiring value worse value solution already found values tuples worse new problem p branch worse value thus might cut away branches example consider fuzzy semiring want maximize minimum values subtuples solution already found value 06 partial solution p value smaller equal 06 discarded together corresponding subtree search tree partial solutions value greater 06 must considered instead work new problem partial solution value greater 06 may smaller value possibly also smaller 06 thus disregarded therefore search tree new problem smaller p another point notice using greedy algorithm nd initial solution use later lower bound initial phase new problem lead better estimate since values tuples worse new problem thus close optimum extreme case change p new problem brings semiring values tuples coincide value combination possible see initial solution already optimal one notice also idempotent tuple p 0 either value p 0 thus initial estimate p 0 p since initial solution must solution search tree p 0 smaller p since may partial solutions p value dierent 0 p 0 value 0 thus global inconsistency may recognized earlier reasoning used theorem 4 p also applied fp fact since f safe solutions values p thus also optimal solution sets coincide therefore opt contains optimal solutions p abstraction orderpreserving means order nd optimal solution p nd optimal solutions use set prune search optimal solution p theorem 9 given scsp problem p consider function f p safe solutioncorrect intensive let us assume abstraction orderpreserving optp opt proof easy follows theorem 4 safeness f 2 theorem 5 adapted thus allowing us use optimal solution fp nd lower upper bound optimal solution p 5 abstraction mappings section list semirings several abstractions order provide reader scenario possible abstractions heshe use starting one semirings considered semirings andor abstractions already described previous sections paper however redene make section self contained course many semirings could dened focus ones either dened easy imagine system constraint solving semirings consider following ones classical one describes classical csps via use logical logical fuzzy semiring goal maximize minimum values 0 1 extension fuzzy semiring naturals goal maximize minimum values naturals extension fuzzy semiring positive reals optimization semiring naturals want maximize sum costs negative integers optimization semiring negative reals probabilistic semiring want maximize certain probability obtained multiplying several individual probabilities idea tuple constraint associated probability allowed real problems modeling dierent tuples dierent constraints independent probabilities combined probability multiplication individual probabilities 10 semiring subset semiring elements subsets certain set operations set intersection set union smallest element empty set largest element whole given set dene several abstractions pairs semirings result drawn figure 9 dashed lines denote abstractions dened obtained abstraction composition reality line gure represents whole family abstractions since h pair makes specic choice identies member family moreover dening one families abstractions want say exist abstractions two semirings easy see abstractions focus domain passing given domain smaller one others change semiring operations others change 1 fuzzy classical csps abstraction changes domain operations abstraction function dened choosing threshold within interval 0 1 say x mapping elements 0 x f elements x 1 consequently concretization function maps 1 f x see figure 2 example abstraction recall abstractions family orderpreserving theorem 4 used 2 fuzzy positive reals fuzzy csps abstraction changes domain mapping whole set positive reals 0 1 interval means abstraction function set threshold say x map reals x 1 real say r r x concretization function map 1 1 element 0 1 say x easy prove members family abstractions orderpreserving 3 probabilistic fuzzy csps abstraction changes multiplicative operation semiring way constraints combined fact instead multiplying set semiring elements abstracted version choose minimum value among since domain remains abstraction concretization functions identity otherwise would properties required galois insertion like monotonicity thus family abstractions contains one member easy see abstraction orderpreserving fact consider example elements 06 05 obtained abstract domain combinations concrete domain would 07 resulting two elements opposite order respect 05 06 4 optimizationn fuzzyn csps domain remains negative integers multiplicative operation modied instead summing values want take minimum noted previous example abstractions orderpreserving 5 optimizationr fuzzyr csps similar previous one negative reals 6 optimizationr optimizationn csps map negative reals negative integers operations remain possible example abstraction one orderpreserving 7 fuzzyr fuzzyn csps map positive reals naturals maintaining operations abstraction could case orderpreserving use min instead sum 8 fuzzyn classical csps similar abstraction fuzzy csps classical ones abstraction function set threshold say x map natural 0 x f natural x concretization function maps 1 f x abstractions orderpreserving 9 subset csps semirings want abstract semiring domain start semiring domain pa abstraction mapping takes set elements choose one using given function example min max concretization function map element union corresponding sets pa reason similar used example 3 abstractions family may orderpreserving sprob sfuzzy scsp fig 9 several semiring abstractions 6 related work compare work abstraction proposals less related concepts constraints abstracting valued csps abstraction scheme soft constraint problems aware one 7 valued csps 21 abstracted order produce good lower bounds optimal solutions concept valued csps similar notion scsps fact valued csps goal minimize value associated complete assignment valued csps constraint one associated element one tuple domain values variables however notion soft csps valued csps dierent formalizations idea since one pass one formalization one without changing solutions provided partial order total 2 however abstraction scheme dierent one 7 fact interested nding good lower bounds optimum also nding exact optimal solutions shorter time moreover dont dene ad hoc abstraction functions follow classical abstraction scheme devised 5 galois insertions relate concrete abstract domain locally correct functions abstract side think important allows inherit many properties already proven classical case also worth noticing notion orderpreserving abstraction related concept aggregation compatibility although generalized deal partial orders abstracting classical csps work related abstracting constraint problems proposed abstraction domains 11 12 22 graph topology example model subgraph single variable constraint 9 focus kinds abstractions scsps paper believe could embedded abstraction framework need dene abstraction function way change semiring also feature concrete problem dierence cannot dene concrete abstract lattices problems simply extending lattices two semirings general theory abstraction general theory abstraction proposed 16 purpose work dene notion abstraction applied many domains planning problem solving theorem proving decision procedures several properties notion considered studied abstraction notion proposed consists two formal systems 1 2 languages l 1 l 2 eective total function much emphasis posed 16 onto study properties preserved passing concrete abstract system particular one property appears desirable present abstraction frameworks theorem concrete domain remains theorem abstract domain called ti property theorem increasing easy see denition abstraction instance general notion see whether concept abstraction property rst must say theorem context natural simple notion theorem could scsp least one solution semiring value dierent 0 semiring however general say theorem us scsp solution value greater equal k k 0 prove version ti property theorem 10 ti property given scsp p solution value v k scsp p solution value v 0 k proof take tuple p value v k assume abstracting solution correctness 0 v v 0 monotonicity v 0 v monotonicity thus transitivity notice consider boolean semiring solution either value true false statement reduces saying solution concrete problem also solution abstract problem exactly ti property says 16 thus notion abstraction dened previous sections one side cast within general theory proposed 16 side generalizes concrete abstract domains complex boolean semiring predictable 16 formulas either true thus theorems false may level satisfaction described given semiring notice also denition abstraction scsp chosen galois insertion two lattices corresponds concrete semiring h corresponds abstract semiring means ordering two lattices coincide semirings could chosen dierently example ordeing lattices abstraction opposite semirings case would property ti however would dual property called td 16 states abstract theorems remain theorems concrete domain shown property useful application domains databases 7 conclusions future work proposed abstraction scheme abstracting soft constraint prob lems goal nding optimal solution good approximation shorter time main idea work abstract version problem bring back useful information concrete problem make easier solve paper rst step towards use abstraction helping nd solution soft constraint problem shorter time properties probably investigated proved also experimental phase necessary check real practical value proposal plan perform phase within clpfds system developed inria 14 already solve soft constraints classical way branchandbound plus propagation via partial arcconsistency another line future research concerns generalization approach include also domain topological abstractions already considered classical csps acknowledgments work partially supported italian murst project tosca r constraint solving semirings abstract interpretation uni systematic design program analyis calculus fuzzy restrictions basis exible constraint satisfaction synthesis abstraction hierarchies constraint satisfaction clustering approximately equivalent objects uncertainty constraint satisfaction problems probabilistic approach eliminating interchangeable values constraint satisfaction sub problems interchangeability supports abstraction reformulation constraint satisfaction partial constraint satisfaction compiling semiringbased constraints clpfd theory abstraction consistency networks relations constraint satisfaction fuzzy constraint satisfaction possibilistic constraint satisfaction problems valued constraint satisfaction problems hard easy problems evaluation domain reduction abstraction unstructured csps practical applications constraint programming tr partial constraint satisfaction possibilistic constraint satisfaction problems myampersandldquohow handle soft constraintsmyampersandrdquo theory abstraction semiringbased constraint satisfaction optimization theories abstraction abstract interpretation systematic design program analysis frameworks csp abstraction framework abstraction framework soft constraints relationship constraint propagation uncertainty constraint satisfaction problems abstracting soft constraints compiling semiringbased constraints clp fd abscon semiringbased csps valued csps ctr thomas ellman fausto giunchiglia introduction special volume reformulation artificial intelligence v162 n12 p35 february 2005 didier dubois henri prade editorial fuzzy set possibility theorybased methods artificial intelligence artificial intelligence v148 n12 p19 august salem benferhat didier dubois souhila kaci henri prade bipolar possibility theory preference modeling representation fusion optimal solutions information fusion v7 n1 p135150 march 2006 stefano bistarelli francesco bonchi soft constraint based pattern mining data knowledge engineering v62 n1 p118137 july 2007 giampaolo bella stefano bistarelli soft constraint programming analysing security protocols theory practice logic programming v4 n56 p545572 september 2004