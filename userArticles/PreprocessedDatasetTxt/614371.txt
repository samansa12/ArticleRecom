speeding isosurface extraction using interval trees abstractthe interval tree optimally efficient search structure proposed edelsbrunner 5 retrieve intervals real line contain given query value propose application data structure fast location cells intersected isosurface volume dataset resulting search method applied structured unstructured volume datasets applied incrementally exploit coherence isosurfaces also address issues storage requirements operations location cells whose impact relevant whole isosurface extraction taskin case unstructured grids overhead due search structure compatible storage cost dataset local coherence computation isosurface patches exploited hash table case structured dataset new conceptual organization adopted called chessboard approach exploits regular structure dataset reduce memory usage exploit local coherence cases efficiency computation surface normals isosurface obtained precomputation gradients vertices meshexperiments different kinds input show practical performance method reflects theoretical optimality b introduction scalar volume dataset pair v w ng finite set points spanning ng corresponding set values scalar field fx z sampled points v ie w mesh sigma subdividingomega polyhedral cells vertices points v also given computed v dataset scattered sigma made hexahedra tetrahedra hybrid ie made tetrahedra hexahedra triangular prisms pyramids given isovalue q 2 set called isosurface field f value q purpose data visualization isosurface sq approximated triangular mesh defined piecewise cells sigma cell oe j 2 sigma vertices called active q min w active cell contributes approximated isosurface patch made triangles patches obtained joining points active cells edges intersect isosurface active edges assuming march 7 1997 linear interpolation field along edge mesh intersection points called isosurface vertices order use smooth shading render isosurface surface normal surface vertex must also estimated therefore isosurface extraction problem consists four main subproblems 1 cell selection finding active cells mesh sigma 2 cell classification active cell determining active edges corresponding isosurface vertices must connected form triangles 3 vertex computation active edge computing 3d coordinates surface vertex linear interpolation 4 surface normal computation vertex isosurface computing corresponding surface normal terms computation costs impact cell selection may relevant whole isosurface extraction process spite simplicity operations involved cell involves searching whole set cells sigma cell classification negligible cost performed active cells involves comparisons values although also vertex normal computations performed active cells relevant impact involve floating point operations besides operations also redundant dataset processed percell basis active edge shared different cells order speedup tasks worth using search structures techniques permit traverse less nonactive cells possible cell selection avoid redundant vertex normal computations speedup techniques classified according following criteria ffl search modality adopted selecting active cells three main approaches spacebased methods domain spanned dataset searched portions intersected isosurface rangebased methods cell identified interval spans range scalar field range space searched intervals containing isovalue surfacebased methods facets isosurface detected first isosurface traversed starting faces moving facecell adjacencies ffl local coherence coherence cells refers ability method avoid redundancy geometric computations reusing results obtained active face edge incident cells since additional data structures may involve nonnegligible storage requirements important look methods structures warrant good tradeoff time efficiency memory requirements overhead due auxiliary structures must compared cost storing minimal amount information necessary support isosurface extraction disregarding computational complexity highly variable depending whether dataset considered structured unstructured ie connectivity implicitly given must stored explicitly respectively 17 therefore evaluation criteria speedup method must take account range applicabil ity ie types dataset structured unstructured method suitable efficiency ie speedup achieves respect nonoptimized reference method overhead ie storage cost due auxiliary structures basis preliminary work unstructured data 3 paper address application speedup techniques various phases isosurface extraction structured unstructured datasets highly efficient technique cell selection based interval tree 5 adopted unstructured case technique associated use hash table order exploit local coherence avoid redundant vertex computations structured case new conceptual organization dataset called chessboard approach adopted order reduce memory requirements interval tree exploit local coherence intrinsic implicit structure dataset cases adopt precomputation field gradients data points order speedup computation surface normals moreover describe interval tree efficiently used develop incremental technique exploits coherence isosurfaces time space analyses isosurface extraction technique given compared methods theoretical results borne experimental results show performance method different test datasets ii related work simplest speedup methods cell selection based space partitions suitable structured data wilhelms van gelder 19 use branch onneed octree purge subvolumes fitting isosurfaces based range interval spanned subvolume method achieves worst case time efficiency ok k lognk n total number cells k number active cells 11 small overhead octree increases storage occupancy 16 alternative approach structured data also proposed criscione et al 4 based pyramid data structure approach similar efficiency overhead easier implement previous one spacebased techniques cannot generalized easily unstructured data spatial indexes rely regular structure underlying dataset rangebased techniques apply structured unstructured datasets generally suitable unstructured datasets cannot exploit implicit spatial information contained structured datasets higher memory requirements unstructured case implicit spatial information exploit higher storage cost input mesh hughly reduces overhead factor auxiliary structures gallagher 6 proposes method based subdivision range domain buckets classification intervals based buckets intersect tradeoff efficiency memory requirements highly dependent resolution bucketing structure giles haimes 7 report approach two sorted lists intervals constructed preprocessing phase sorting cells according minimum maximum values respectively method addressing specific problem global coherence coherence isosurfaces aimed exploit part information derived extraction given isosurface speedup selection active cells another isosurface corresponding near isovalue feature useful applications change isovalue continuously smoothly gives small improvement nonoptimized method generic extraction isosurfaces arbitrary isovalues recent paper shen johnson 16 try march 7 1997 fig 1 span space interval b represented point coordinates b detect intervals contain query value q find points lye left line line overcome limitations 6 7 adopting similar auxiliary structures address global coherence however worst case computational complexity estimated three methods outlined 11 livnat et al 11 introduce span space see figure 1 twodimensional space point corresponds interval range domain span space useful geometrically understand rangebased methods therefore refer representation also next sections kdtree used locate active intervals space achieving worst case possibility exploiting global coherence also outlined recent paper shen et al 15 propose use uniform grid locate active intervals span space approach suitable parallel implementation data structure adopt paper ie interval tree proposed edelsbrunner 5 support queries set intervals optimally efficient ie warrants worst case time complexity k log n memory overhead comparable rangebased methods worth mentioning although proposal first application data structure speedup isosurface extraction authors used address related problems laszlo 10 considers extraction wireframes grid generic polyhedra using interval tree interval corresponds edge input grid van kreveld 18 extracts isolines triangulated terrain data associating triangle interval altitudes spans surfacebased approaches rely essentially two requirements ability find active cell seed connected component isosurface ability propagate surface traversing mesh cell cell adjacencies 17 adjacencies implicit structured datasets need stored explicitly unstructured datasets storing adjacencies explicitly roughly doubles memory requirement dataset hence making overhead surfacebased methods unstructured case either comparable even higher overhead rangebased methods moreover auxiliary structures needed order find seeds itoh et al 9 8 base search seeds graph whose nodes cells holding local minima maxima data values therefore arc graph spans interval range domain arc supports list cells connecting two end nodes given isovalue graph searched active arc cells connected arc sequentially scanned seed found propagation method activated seed since isosurface made many connected components seed search must repeated active arcs visited take time worst case 11 efficient method find active seeds proposed bajaj et al 1 minimally sufficient seed set found preprocessing phase connected component arbitrary isosurface guaranteed traverse least one cell seed set seed set encoded rangebased search structure order efficiently locate active seeds given isovalue optimal time efficiency achieved using interval tree seed set small average hence causing small overhead big worst case eg underlying field sinusoidal shape algorithm finding seed set complicated time complexity high local coherence exploited reviewed methods spatial indexes adopted spacebased methods destroy locality computation supports local coherence original marching cubes 12 reason following wyvill et march 7 1997 al 20 wilhelms van gelder 19 adopt hashbased caching strategy save reuse local computations tradeoff efficiency overhead depends also size hash table wilhelms van gelder empirically define statically size eight times square root size dataset surfacebased methods partially exploit local coherence propagation phase since new cell accessed adjacent cell common face intersected isosurface easy reuse vertices related common face without computing implies overhead respect structure supports dataset encoding traversal however fact alone cannot warrant redundant computations performed unless explicit links cells edges input mesh list extracted cells maintained relevant overhead iii selecting cells interval trees technique propose active cell selection class rangebased methods therefore used structured unstructured datasets let sigma input mesh cell oe j 2 sigma associated interval j whose extremes j b j minimum maximum field values vertices oe j respectively since oe j active isovalue q corresponding interval j contains q following general query problem resolved given set fi intervals form real line query value q report intervals contain q problem effectively visualized using span space introduced livnat et al 11 see figure 1 interval represented point 2d cartesian space using extremes b x coordinates point respectively geometrical point view problem reporting intervals contain query value q reduces collecting points span space lying intersection two halfspaces min q max q optimally efficient solution query problem obtained organizing intervals interval tree data structure originally proposed edelsbrunner 5 see also 14 reviewed following let us consider sorted sequence values corresponding distinct march 7 1997 extremes intervals ie extreme b equal x j interval tree consists balanced binary search tree whose nodes correspond values x plus structure lists intervals appended nonleaf nodes interval tree defined recursively follows root discriminant partitioned three subsets follows g intervals ffi r arranged two sorted lists al dr follows ffl al contains elements ffi r sorted ascending order according left extremes ffl dr contains elements ffi r sorted descending order according right extremes b left right subtrees defined recursively considering interval sets l r extreme sets respectively interval tree constructed om log time direct implementation recursive definition resulting structure binary balanced tree h nodes height dlog plus collection lists type al dr attached node tree total 2m list elements example simple interval tree built intervals shown figure 2 representation structure span space given subdivision figure 3 solid lines noteworthy construction last level tree generally empty intervals level exist null intervals case intervals fact associated cells values vertices given query value q tree visited recursively starting root list al scanned interval found q scanned intervals reported left subtree visited recursively list dr scanned interval found b q scanned intervals reported right subtree visited recursively whole list al reported fig 2 example interval tree built simple dataset 13 cells white dots represent nodes empty al dr lists fig 3 graphical representation interval tree figure 1 span space definition intervals lying subdivision lines belong upper level tree tree search value q sectors intersected horizontal line visited topdown sectors intersected vertical line visited left right fig 4 implementation interval tree data structure generic node contains discriminat value ffi r length al dr lists l starting position big al big dr arrays example values stored leftmost empty node interval tree previous figure 2 reported geometric interpretation search span space also given figure 3 regions containing active intervals left dotted lines q sector space node tree contains horizontal dotted line ie visited topdown scanning al list line reached sector containing vertical dotted line visited left right scanning dr list line reached therefore dlog nodes tree visited node intervals reported output plus one visited hence k output size computational complexity search ok log h since log h minimum number bits needed discriminate two different extreme values query technique could computational complexity smaller omegagammaan h hence computational complexity querying interval tree outputsensitive optimal interesting note time complexity independent total number intervals ie input size indeed depends output size number distinct extremes general data structure general data structure interval tree devised assuming set input intervals stored independently search structure interval set accessed pointer therefore element al dr lists store pointer related interval lists packed two arrays one lists type al one lists type dr called big al big dr arrays respectively lists packed consistent order eg following depthfirst visit tree way al dr lists attached given node tree start location two big arrays respectively node r tree see figure 4 store discriminant value ffi r index referring starting element lists two arrays described length lists recall lists length since tree binary balanced also stored implicitly using array nodes therefore assume cost word integers pointers floating point values bare tree requires 3h words lists require 2m words total 3h2m shoud taken account cost encoding bare tree expected small least application indeed although general h 2m practice intervals extremes predefined relatively small set values instance data values encoded 16 bits h 65536 several millions rangebased methods storage cost interval tree crucial issue section iv address separately application unstructured structured datasets respectively discuss storage cost optimized exploiting special characteristics two kinds datasets respectively b exploiting global coherence interval tree used effective structure also address coherence isosurfaces active cells given isovalue q 0 sufficiently close another isovalue q extracted efficiently exploiting partial information set cells active isovalue q following livnat et al 11 problem visualized span space march 7 1997 figure 5a assuming active cells isovalue q known list active cells isovalues q 0 obtained eliminating points lying right rectangular strip dashed adding points lying bottom rectangular strip gridded order perform task active cells q must stored active list updated next obtain corresponding active list isovalue q 0 using interval tree active list maintained compressed form path tree namely path traversed extracting active cells isovalue q query algorithm described section iii path starts root node length log h node path need maintain one flag 1 bit discriminate whether al dr list used one index addressing first interval active list one flag 1 bit denote whether next node left right child current node example figure 3 path encoded follows assuming list locations addressed starting 0 dr4rightal4leftdr0right al1null evident real dataset length path average extremely smaller actual number active cells algorithm computing active cells isovalue q 0 scans tree path updates either adjusting index associated node recomputing node completely traversal algorithm described detail pseudocode figure 6 main principle algorithm following long q q 0 lie side discriminant current node list used child sufficient adjust interval index moving either backward forward depending whether q q 0 q q 0 whether al dr list used example figure 5b happens nodes 1 2 path case intervals gridded part horizontal stripe included simply advancing index first triple 4 8 intervals dashed part vertical stripe included simply backtracking index second triple 4 1 soon branching node found ie node discriminant lies q q 0 search continued independently rest active path q indeed case list current node must used rest path march 7 1997 fig 5 active intervals q 0 obtained taking active intervals q subtracting dashed strip adding gridded strip active list update node 1 updated moving index forward order include points gridded strip node 2 updated moving index backward order remove points dashed strip tree traversal repeated nodes 3 4 b certainly active q 0 happens node 3 example compare figure 3 dr list traversed q al list must traversed note visiting nodethe opposite branch tree example new node 4 must visited conclusion update small overhead encoding list active intervals involves traversing intervals make difference q q 0 plus intervals appended branching node example node 3 worst case ie q q 0 lie opposite sides discriminant root node algorithm totally equivalent performing query scratch interval tree average case analysis depends distribution intervals involves evaluating probability branching node less deep path probability less intervals inside node due complexity analysis omitted begin q q 0 side ffi r intervals active q 0 found move backward else intervals active q 0 found move forward else intervals active q 0 found move forward else intervals active q 0 found move backward r empty set flag l list set flag c child traverse list l set value discard rest path traverse starting childrc fig 6 pseudocode algorithm active list update iv extraction isosurfaces structured unstructured grids stated section isosurface extraction problem limited selection active cells important aspects cell classification vertex normal computa tion must taken account order ensure efficiency whole extraction process moreover memory overhead auxiliary data structure used cell selection considered order get good tradeoff time efficiency memory requirements referring general method described previous section stress aspects next subsections distinguishing unstructured 6datasets whose cells tetrahedra hexahedra prisms pyramids whose connectivity must encoded explicitly structured datasets ie cartesian regular rectilinear curvilinear block structured grids connectivity among hexahedral cells implicit 17 case unstructured grids case unstructured datasets input mesh encoded array vertices vertex maintain three coordinates field value list cells cell maintain connectivity list made four five six eight indices addressing vertices vertex array depending whether cell tetrahedron pyramid prism hexahedron respectively indices connectiviy list cell sorted ascending order according field value corresponding vertices way minimum maximum interval spanned cell given field values first last vertex connectivity list respectively hybrid dataset list cells encoded using four different arrays one type cells however list addressed single array assuming conventional order eg tetrahedra come first next pyramids next prisms last hexahedra using length list offset given dataset composed n points tetrahedra p pyramids prisms k hexa hedra storage cost 4n whole dataset recall total number cells 3h 2m cost interval tree h n therefore memory overhead interval tree variable 25 50 depending number cells different types 25 obtained dataset made hexahedra 50 dataset made tetrahedra extreme values significative however since first case dataset would probably structured one second case optimization adopted discussed next input mesh tetrahedralization cost storing input mesh 4n since cells type sort whole array tetrahedra according order corresponding intervals big al array described section march 7 1997 iiia case avoid storing big al array explicitly since comes free list tetrahedra case need maintain big dr array total cost 3h hence less 25 overhead active cells extracted cell classification consists testing values cells vertices respect userselected threshold order devise topology isosurface patch inside active cell cell classification generally critical task isosurface extraction process however case tetrahedral meshes step slightly improved exploiting fact indices vertices connectivity list cell stored ascending value field 16 implies cell classification performed two tests using bisection critical task computation vertices normals due computational cost task important exploit local coherence order avoid redundant computations case unstructured datasets adopt dynamic hash indexing technique isosurface extraction hash table built used store retrieve efficiently isosurface vertices normals implementation extracted surfaces represented adopting indexed representation array isosurface vertices maintained storing coordinates normal vectors vertex array isosurface faces storing connectivity list three indices vertex array isosurface vertex identified active edge cell lies using two data points indexes v 1 v 2 build hash key n prim sufficiently large prime number computational overhead due computation hash indexes therefore small processing edge vertex computation hash table inquired know whether computation done retrieve index interpolated vertex normal corresponding array isosurface vertices normals computed explicitly stored hash search fails way interpolation done exactly common problem use hashing definition suitable size hash table case vertex normal computations performed cell selection completed hence hash table sized dynamically using number k march 7 1997 active cells approaches based hashing define statically hash table size 19 using hash table much larger current number active cells may result degradation efficiency due frequent chache miss number intersected cells gives us good estimate number vertices resulting surface therefore number entries hash table given k active cells number vertices produced lower 3k case hexahedral cells redundancy factor 4 3 k tetrahedral cells redundancy factor less 3 effective redundancy measured experiments tetrahedral meshes ratio number access hash table number vertices interpolated approximately equal 5 implementation obtained low rate hash collisions setting hash table size equal prime slightly larger 25k detected collision approximately every 100 accesses maximum number subsequent collisions detected different extractions range 37 collisions managed adopting linear scan strategy order speedup computation surface normals isosurface extraction compute preprocessing step field gradients mesh vertices therefore surface normal isosurface vertex v simply obtained linear interpolation normalized gradients endpoints cell edge v lies case tetrahedral meshes gradient scalar field within cell oe mesh assumed constant ie gradient linear function interpolating field four vertices oe similar interpolating functions adopted order estimate gradient within single cell types gradient mesh vertex v computed weighted average normalized gradients cells incident v weight contribution cell oe given solid angle oe v note optimization surface normal computation involves 3n storage cost due need maintaining gradients data points corresponding overhead highly dependent ratio number points n number cells tetrahedral mesh average 6n therefore overhead would less 125 fig 7 chessboard arrangement case regular grids data structure used speedup isosurface extraction need store minmax intervals cells volume internal edge belongs four cells intervals corresponding black cells 3d chessboard maintained b case structured grids case structured datasets ie grids based hexahedral decomposition connectivity information implicit propose use new conceptual organization dataset reduces number interval stored interval tree permits devise dataset traversal strategy efficiently exploit local coherence resulting technique practice compromise spacebased approach rangebased approach tries exploit advantages though proposal applies every structured dataset refer regular ones discussion sake semplicity number intervals stored reduced basis simple effective observation marching cubeslike algorithm vertices triangular patches form extracted isosurface lie edges cells regular dataset internal edge shared four cells therefore order sure every isosurface parcel detected need store intervals minimal subset cells hold edges dataset subset devised easily think volume dataset 3d chess fig 8 isosurface extraction propagated active black cell adjacent white cells share one active edges board black cells figure 7 interested words black cell adjacent black cells share single vertex ci j k conceptual arrangement presents advantages ffl given regular theta j theta k dataset ie volume black cells easily indexed follows terms possible compute indices even odd layers cells ffl number black cells dataset 14 total number cells hence number intervals stored interval tree data structure 14 total implies lower memory occupancy also shorter construction traversal times auxiliary data structure black cell edgeconnected white cells active black cell adjacent white cells also active isosurface intersections occurring edges black cell determined easily basis configuration current black cell figure 8 conversely white cell active must exist least black cell adjacent also active special cases white cells lying boundary dataset discussed later therefore active black cells march 7 1997 located efficiently interval tree active white cells located searching constant time neighbourhood active black cell chessboard reduces number intervals stored help local coherence managed maintaining compact easyto access data structure information already computed vertices normals isosurface auxiliary structure would require relevant memory overhead unless maintain sort locality computations simple observation gives key compromise spacebased rangebased approach need visit black cells basis intervals arrangement also taking account topology grid order achieve objective build interval tree layer cells ie cells formed two adjacent slices data rather building single interval tree whole dataset interval tree layer stores minmax intervals black cells layer tree labelled tmintmax interval tmin max represents minimum maximum min max values corresponding layer therefore forest interval trees tree know constant time whether tree contains active cells interval trees forest visited according sequence layers dataset traversal kth tree need maintain compact auxiliary data structure called vertexnormal data structure active cells three layers indexed 1 vertexnormal data structure stores information vertices normals visited cells etc computed active cell avoids redundant geometrical computations advancing interval tree simply implies circular shift indices layers vertexnormal data structure extraction strategy exploitation local coherence ie runtime part method summarized follows ffl interval tree selection given isovalue q trees forest tested sequence order individuate active trees ie trees tmin q tmax active interval tree say kth visited using algorithm presented section iii ffl black cell processing active black cell marching cubes 12 algorithm applied basis configuration cell determined respect q access marching cubes lookup table find active edges current cell exploiting vertexnormal data structure compute save vertices normals already computed processing adjacent white cell basis configuration cell also select adjacent active white cells isosurface extraction must propagated example vertex isosurface found edge e black cell ci j k example figure 8 edgeconnected white cells ci examined ffl active white cells processing black cell processed algorithm examines connected active white cells processed yet marching cubes algorithm applied previous case white cells already examined individuated means simple flags vertexnormal data structures note propagation list white cells necessary individuate active white cells starting one adjacent black cells ffl advancing algorithm iterates next k 1th interval tree active simple circular shift layers vertexnormal data structure information k gamma 1th layer longer necessary therefore rewritten information k remark necessary white cells lie boundary dataset shown figure 7 boundary edges dataset captured black cells eg external edges cell labeled figure however sizes dataset even information needed edges easy see isosurface cuts one edges white cell belong black cell isosurface must also cut edge cell internal volume hence shared black cell case one sizes j k dataset odd numbers march 7 1997 fig 9 cells dataset two odd sizes covered chessboard small parts two isosurfaces could lost part edges 2i ie cells forming six twelve corners volume captured even indirectly black cells chessboard see figure 9 shown figure situations small isosurface subsections lost solve problem add following step algorithm ffl unreachable cells test active tree visited corresponding active cells processed algorithm examines still processed white cells current layer whose edges captured black cells alternative solution previous step could insertion corresponding interval tree black edges unreachable white cells however small number cells tested separately justify effort chessboard approach total asymptotic time query worst case 3 output size assuming dataset 3 layers ie k note using forest rather single interval tree adds extra factor 3 n optimal query time therefore case trade optimal asymptotic time space however noted 3 log n factor usually negligible practice advantage derives exploiting local coherence dataset interval tree grid nodes intervals nodes creation name type n depth fighter unstr 13832 70125 15 12538 150 bluntfin unstr 40960 224874 cthead data interval trees test datasets times cpu seconds structured datasets column nodes indicates sum nodes 2d interval trees column depth indicates depth deepest tree relevant stated case unstructured datasets complexity space interval tree data structures expressed terms 3h 2m h number distinct interval endpoints number intervals stored regular dataset data values store intervals corresponding black cells ie intervals since real applications usually h n requirement n2 storage locations close one half dataset size ratio interval tree memory requirements dataset occupancy becomes obviously propitious case nonregular structured datasets eg curvilinear ones therefore chessboard approach helps solving problem memory occupancy interval tree data structure together problem local coherence v experimental results proposals based interval tree data structure tested number different datasets report results two unstructured datasets fighter unstructured dataset built langley fighter reporting wind tunnel model simulation performed nasa langley research center dataset march 7 1997 threshold facets nasa fighter 70125 tetrahedral cells 26534 386 3 142 24420 1754 13 154 22007 5545 41 185 20221 9735 78 220 bluntfin 224874 tetrahedral cells 48722 444 3 255 21305 10384 72 304 ii isosurface extraction times tetrahedrized datasets milliseconds represented adopting 3d delaunay triangulation bluntfin originally defined curvilinear dataset represented adopting tetrahedral decomposition bluntfin represents air flow flat plate blunt fin rising plate courtesy nasa ames research center two structured ones bucky 128 theta 128 theta 128 regular dataset representing electron density map c fullerene molecule courtesy avs international centre cthead 256 theta 256 theta 113 cat scan head courtesy university north carolina chapel hill results refer ffl use interval tree data structure hash indexing technique precomputation gradients field vertices cells case unstructured datasets compared standard marching tetrahedra im plementation see table ii threshold facets 965 200148 1110 3090 cthead 1820728 cells iii isosurface extraction times structured regular datasets milliseconds ffl use forest interval trees chessboard approach case structured ones compared standard marching cubes implementation see table iii results obtained sgi indigo2 200mhz r4400 cpu 16k instruction 16k data caches 1mb secondary cache 32mb ram irix 53 table reports numeric values datasets used associated interval trees type grid unstr unstructured str structured number intervals equal number tetrahedral cells unstructured datasets number black cells structured ones interval tree depth represents depth deepest tree case structured datasets number h nodes interval trees case structured grids field represents sum nodes trees time seconds required build interval tree data structures figures refer unstructured grids show isosurface fitting times function number triangular facets extracted reference algorithm marching tetrahedra use hash indexing technique precomputation gradients field vertices grid see subsection iva similarly figures 12 13 refer regular grids case reference algorithm marching cubes use chessboard approach see subsection ivb figure 14 shows speedup obtained use interval tree ratio times obtained without use interval tree data structures function fraction volume data contains isosurface ratio number fitted facets number cells obviously greatest speedups obtained isosurfaces small size ie traversal phase dominates whole extraction process space complexity simply calculated unstructured datasets using space complexity previously defined 3h words space required store interval tree data structures results therefore 174k memory words fighter dataset 522k memory words bluntfin structured datasets bucky cthead required 1080k 3628k memory words respectively vi conclusions presented tested speedup method isosurface extraction based use interval tree data structure method considerably improves performance traversal phase respect standard marching tetrahedra marching cubes algorithms optimal outputsensitive time complexity extracting active cells achieved memory overhead according general interval tree representation pro posed 3h h number distinct extremes intervals number cells reference alternative proposals literature noted rangebased methods comparable higher overheads worst computational efficiency hand methods based interval modality present either memory costs wich comparable cost interval tree 7 lower expected march 7 1997 performance 11 surfaceoriented methods give general compact representation list seeds intervals case unstructured datasets require encoding adjacency information involves 100 overhead minimal volume datasets representation reduce space occupancy becomes critical factor case high resolution datasets proposed two different strategies oriented two different data classes optimized interval tree representation unstructured datasets tetrahedrabased presented allows reduce space occupancy 3hm therefore enabling less 25 overhead partial representation cell intervals based chessboard approach devised reduce number intervals stored interval trees case structured datasets active cells represented directly detected propagation although reduced number intervals encoded speedups obtained similar obtained naive interval tree implementation encodes intervals demonstrated empirically graph figure 14 noteworthy chessboard approach could also efficiently used together alternative spacebased speedup approaches based octrees pyramids exploit implicit addressing regular datasets phases surface fitting process cell classification non redundant interpolation vertices normals also tackled particular local coherence control supported case unstructured datasets use dynamicallysized hash tables case structured datasets representing intervals forest interval trees using slicebased order processing data allows definition compact auxiliary data structure maintaining interpolated vertices normals moreover general approach addressing global coherence proposed updates active interval list produced previous isosurface extraction results totally equivalent performing search scratch worst case acknowledgements work partially financed progetto coordinato modelli multirisoluzione per la visualizzazione di campi scalari multidimensionali italian national research march 7 1997 isosurface facets nasa fighter fig 10 timing fighter dataset0103050 5000 10000 15000 20000 25000 30000 35000 isosurface facets bluntfin fig 11 timing bluntfin dataset05152535450 50000 100000 150000 200000 250000 300000 isosurface facets fig 12 timing bucky dataset march 7 1997 isosurface facets ct head fig 13 timing cthead dataset261014 volume fraction fighter bluntfin ct head fig 14 speedup vs volume fraction triangles cells council cnr r fast isocontouring improved interactivity multiresolution modeling visualization volume data optimal isosurface extraction irregular volume data discmc interactive system fast fitting isosurfaces volume data dynamic data structures orthogonal intersection queries span filter optimization scheme volume visualization large finite element models advanced interactive visualization cfd volume thinning automatic isosurface propagation automatic isosurface propagation using extrema graph sorted boundary cell lists fast generation display isosurfaces wireframe near optimal isosurface extraction algorithm structured unstructured grids marching cubes high resolution 3d surface construction algorithm discretized marching cubes computational geometry introduction isosurfacing span space utmost efficiency issue sweeping simplices fast isosurface extraction algorithm unstructured grids volume probes interactive data exploration arbitrary grids efficient methods isoline extraction digital elevation model based triangulated irregular networks octrees faster isosurface generation data structures soft objects tr ctr michael burns janek klawe szymon rusinkiewicz adam finkelstein doug decarlo line drawings volume data acm transactions graphics tog v24 n3 july 2005 jinzhu gao hanwei shen parallel viewdependent isosurface extraction using multipass occlusion culling proceedings ieee 2001 symposium parallel largedata visualization graphics october 2223 2001 san diego california caleb lyness edwin blake real time isosurface browsing proceedings 1st international conference computer graphics virtual reality visualisation november 0507 2001 camps bay cape town south africa bruno lvy guillaume caumon stphane conreaux xavier cavin circular incident edge lists data structure rendering complex unstructured grids proceedings conference visualization 01 october 2126 2001 san diego california benjamin vrolijk charl p botha frits h post fast timedependent isosurface extraction rendering proceedings 20th spring conference computer graphics april 2224 2004 budmerice slovakia stefan rttger martin kraus thomas ertl hardwareaccelerated volume isosurface rendering based cellprojection proceedings conference visualization 00 p109116 october 2000 salt lake city utah united states laurent balmelli christopher j morris gabriel taubin fausto bernardini volume warping adaptive isosurface extraction proceedings conference visualization 02 october 27november 01 2002 boston massachusetts klaus engel rdiger westermann thomas ertl isosurface extraction techniques webbased volume visualization proceedings conference visualization 99 celebrating ten years p139146 october 1999 san francisco california united states reinhard charles hansen steve parker interactive ray tracing time varying data proceedings fourth eurographics workshop parallel graphics visualization september 0910 2002 blaubeuren germany philip sutton charles hansen isosurface extraction timevarying fields using temporal branchonneed tree tbon proceedings conference visualization 99 celebrating ten years p147153 october 1999 san francisco california united states chandrajit l bajaj valerio pascucci daniel r schikore contour spectrum proceedings 8th conference visualization 97 p167ff october 1824 1997 phoenix arizona united states udeepta bordoloi hanwei shen space efficient fast isosurface extraction large datasets proceedings 14th ieee visualization 2003 vis03 p27 october 2224 bongsoo sohn chandrajit bajaj vinay siddavanahalli volumetric video compression interactive playback computer vision image understanding v96 n3 p435452 december 2004 bongsoo sohn chandrajit bajaj vinay siddavanahalli feature based volumetric video compression interactive playback proceedings 2002 ieee symposium volume visualization graphics october 2829 2002 boston massachusetts c l bajaj v pascucci thompson x zhang parallel accelerated isocontouring outofcore visualization proceedings 1999 ieee symposium parallel visualization graphics p97104 october 2526 1999 san francisco california united states steve bryson david kenwright michael cox david ellsworth robert haimes visually exploring gigabyte data sets real time communications acm v42 n8 p8290 aug 1999 bartosz von rymonlipinski nils hanssen thomas jansen lutz ritter erwin keeve efficient pointbased isosurface exploration using spantriangle proceedings conference visualization 04 p441448 october 1015 2004 paolo cignoni claudio montani enrico puppo roberto scopigno multiresolution representation visualization volume data ieee transactions visualization computer graphics v3 n4 p352369 october 1997 jim cox b karron nazma ferdous topological zone organization scalar volume data journal mathematical imaging vision v18 n2 p95117 march hanwei shen isosurface extraction timevarying fields using temporal hierarchical index tree proceedings conference visualization 98 p159166 october 1823 1998 research triangle park north carolina united states yijen chiang outofcore isosurface extraction timevarying fields irregular grids proceedings 14th ieee visualization 2003 vis03 p29 october 2224 naveen kumar polapally raghu machiraju dhabhaleshwar panda feature estimation efficient streaming proceedings 2002 ieee symposium volume visualization graphics october 2829 2002 boston massachusetts yijen chiang ricardo farias cludio silva bin wei unified infrastructure parallel outofcore isosurface extraction volume rendering unstructured grids proceedings ieee 2001 symposium parallel largedata visualization graphics october 2223 2001 san diego california kai li han chen yuqun chen douglas w clark perry cook stefanos damianakis georg essl adam finkelstein thomas funkhouser timothy housel allison klein zhiyan liu emil praun rudrajit samanta ben shedd jaswinder pal singh george tzanetakis jiannan zheng building using scalable display wall system ieee computer graphics applications v20 n4 p2937 july 2000 takayuki itoh yasushi yamaguchi koji koyamada fast isosurface generation using volume thinning algorithm ieee transactions visualization computer graphics v7 n1 p3246 january 2001 adriano lopes ken brodlie improving robustness accuracy marching cubes algorithm isosurfacing ieee transactions visualization computer graphics v9 n1 p1629 january philip sutton charles hansen accelerated isosurface extraction timevarying fields ieee transactions visualization computer graphics v6 n2 p98107 april 2000 lutz kettner jarek rossignac jack snoeyink safari interface visualizing timedependent volume data using isosurfaces contour spectra computational geometry theory applications v25 n12 p97116 may ingo wald heiko friedrich gerd marmitt philipp slusallek hanspeter seidel faster isosurface ray tracing using implicit kdtrees ieee transactions visualization computer graphics v11 n5 p562572 september 2005 george j grevera jayaram k udupa dewey odhner order magnitude faster isosurface rendering software pc using dedicated general purpose rendering hardware ieee transactions visualization computer graphics v6 n4 p335345 october 2000