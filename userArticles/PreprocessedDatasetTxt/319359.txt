efficient compression nonmanifold polygonal meshes present method compressing nonmanifold polygonal meshes ie polygonal meshes singularities occur frequently realworld efficient polygonal compression methods currently available restricted manifold mesh require conversion process fail retrieve original model connectivity decompression present method works converting original model manifold model encoding manifold model using existing mesh compression technique clustering stitching together decompression process vertices duplicated earlier faithfully recover original connectivity paper focuses efficiently encoding decoding stitching information separating connectivity geometry properties method avoids encoding vertices properties bound vertices multiple times thus reduction size bitstream 10 obtained compared encoding model manifold b table encode information necessary cluster vertices recover polygonvertices incidence relationship original model one simple approach using explain comparison would transmit table one row per cluster table relates example figs 13 number vertices cluster vertex references3259fig 4 overall compressed syntax nonmanifold mesh another approach consists devising special codes indicate vertices copies previously transmitted vertices specifying vertex clustered method avoids duplicate transmission vertex coordinates properties incurs cost log n bits vertex previously transmitted refined version approach would transmit table one row per cluster table 1 denote number clusters nonmanifold vertex must replicated non manifoldtomanifold mesh conversion process discussed section 3 number nonmanifold vertices original mesh instance 3 fig 2 entry table would indicate number vertices cluster references shown table 1 example using total number vertex replications r r 9infig2andthe maximum number vertices one cluster c total cost approach mlogc c r log n paper improve considerably upon second method incur worstcase cost log bits vertex previously transmitted number clusters typically much smaller n moreover worstcase cost show section 5 many vertices clustering information implicit requires zero bits encode achieved using concept stitches defined fully described section 5 12 representation compression mesh compressed indicated fig 4 manifold connected component connectivity encoded followed optional stitches geometry 6 properties stitches used recover vertex clustering within current component vertices current 6 vertex coordinates component previous components way cluster geometry properties encoded decoded vertex cluster encountered first decoder order traversal 13 overview section 2 review related work review section 3 algorithm producing manifold meshes starting nonmanifold mesh section 4 describes method compressing manifold meshes sections 58 develop methods representing vertex clustering using stitches section 9 give details encoding process describe proposed bitstream syntax stitches section 10 study decoding process algorithms analyzed section 11 section 12 provide compression results variety nonmanifold meshes 2 related work 21 nonmanifold mesh compression connectivitypreserving nonmanifold mesh compression algorithms proposed popovic hoppe 13 bajaj et al 1 hoppes progressive meshes 10 use base mesh series vertex insertions specifically inverted edge contractions represent manifold mesh main functionality progressive transmission encoding fairly compact using 3050 bits per vertex coding 10 method extended 13 represent arbitrary simplicial complexes manifold using 50 bits per vertex asymptotically cost method onlogn bits n number vertices method 13 works devising special codes encode possible manifold nonmanifold attachments new vertex sustaining edges triangles existing mesh code must supplied vertex encoded present method improves upon 13 achieving significantly smaller bitrates 10 bits per vertex reducing encoding time admittedly offline process four orders magnitude without levelsofdetail bajaj et als dag rings mesh compression approach 1 partitions meshes vertex triangle layers represent nonmanifold mesh vertex layer set vertices topological distance origin vertex vertex layer graph may contain nonmanifold vertices correspond branching points encoding various branches requires indices local vertex layer paper encode information indexing among subset nonmanifold vertices present stack variablelength method described section 7 obtain additional savings exploiting adjacency nonmanifold vertices another advantage approach define compressed syntax used cluster vertices syntax used encoding changes topology aggregating components addition representing singularities abadjev et al 23 use technique related 1013 introduce hierarchical block structure file format parallel streaming texture geometry 22 manifoldmesh compression completeness discuss previous work compressing manifold meshes related approach section 4 deering 5 introduced geometry compression methods originally alleviate 3d graphics rendering limitations due bottleneck transmission information graphics hardware bus method uses vertex normal quantization exploits mesh buffer reuse number vertices recently visited avoid resending deerings work fostered research 3d mesh compression applications chow 3 extended 5 efficient generalizedtrianglestrip building strategies topological surgery singleresolution mesh compression method taubin rossignac et al 19 20 represents connected component manifold mesh tree polygons temporarily decomposed triangles encoding recovered decoding tree decomposed runs whose connectivity encoded low cost recover connectivity topology tree completed vertex tree providing information merge triangle edges method 19 also encodes vertex coordinates geometry property bindings defined touma gotsman 22 traverse triangular polygonal mesh remove one triangle time recording vertex valences 7 go recording triangles boundary split two separate case gumhold strasser 9 rossignac 14 concentrate encoding mesh connectivity use mesh traversal techniques similar 22 instead recording vertex valences consider cases depending whether triangles adjacent triangle removed already visited another relevant work connectivity compression denny sohler 6 li kuos 12 dual graph approach traverses polygons mesh breadthfirst fashion uses special codes merge nearby topologically close polygons serving purpose vertex graph approach 19 special commands merge topologically distant polygons represent general connectivitynot disk 3 cutting nonmanifold mesh produce manifold meshes briefly recall method guziec et al 8 using edge polygonal mesh determine whether edge singular three incident faces regular two incident faces edges incident faces inconsistently oriented also considered singular purpose process converting nonmanifold manifold singular vertex polygonal mesh number connected fans polygons incident determined 8 connected fan polygons copy singular vertex created thereby duplicating singular vertices resulting mesh manifold mesh correspondences new set vertices comprising new vertex copies old set vertices comprising singular vertices recorded vertex clustering array process illustrated fig 2 method admits number variations moderately alter original mesh connectivity without recovering decoding order achieve decreased size bitstream polygonal faces repeated indices may removed repeated faces albeit potentially different properties attached may removed finally number singular edges may reduced first attempting 7 number incident polygons 8 fan polygons vertex set polygons incident vertex connected regular edges singular vertex simply vertex one incident fans invert orientation faces order reduce number edges whose two incident faces inconsistently oriented interesting alternative converting nonmanifold mesh manifold mesh vertex replication recently introduced rossignac cardoze 16 rossignac cardoze minimize number vertex replications converting nonmanifold solids manifold solid representations rossignac cardoze method edge cannot uniquely identified pair vertices instance two edges four faces share two endpoints method section 4 however used assumption edge could uniquely identified using two vertices allows simple representation encoding vertex graph require output list edges decoding compressed representation mesh edges implicitly represented polygonvertices incidence relation 4 compressing manifold meshes method described section extends topological surgery method 19 explained detail 11 19 connectivity mesh represented tree spanning set vertices simple polygon optionally set jump edges derive data structures vertex spanning tree first constructed graph mesh mesh cut edges tree mesh simple topology result simple polygon however mesh boundaries higher genus additional cuts along jump edges needed obtain simple polygon simple polygon represented triangle spanning tree marching pattern indicates neighboring triangles connected connectivity encoded vertex tree simple polygon jump edges paper approach slightly different first triangle spanning tree constructed set edges cut triangle tree gathered graph graph called vertex graph spans set vertices may cycles cycles caused boundaries handles higher genus models vertex graph triangle tree marching pattern sufficient represent connectivity mesh 19 geometry properties coded differentially respect prediction prediction obtained linear combination ancestors vertex tree weighting coefficients chosen globally minimize residues ie difference prediction actual values paper principle linear combination preserved triangle tree used instead vertex tree determining ancestors note parallelogram prediction 22 9 special case scheme achieved appropriate selection weighting coefficients coding efficiency improved use efficient adaptive arithmetic coder 18 arithmetic coding applied data namely connectivity geometry properties finally data ordered permit efficient decoding onthefly rendering vertex graph triangle tree put first bit stream remaining data ie marching pattern geometry properties referred triangle data put next bit stream organized pertriangle basis following depthfirst traversal triangle tree therefore new triangle 9 extends current triangle form parallelogram new parallelogram vertex used predictor may rendered every time bits corresponding data attached triangle received 5 representing vertex clustering using stitches 51 decoding order fatherchild relationship vfather methods developed present paper rely availability two main elements 1 decoding order mesh vertices 2 variablelength method described section 7 fatherchild relationship vertices allowing define paths vertices next suppose vfather fatherchild relationship recorded array called vfather representing function f1ng f1ngwheren number vertices manifold mesh compression methods reviewed section 2 provide two elements makes methods paper widely applicable order vertices decoded always available fatherchild relationship default realized vertex pointing vertex decoded father first vertex father assumption information consigned vfather implicit provided free manifold mesh compression method requires specific encoding following assume without loss generality vertices enumerated decoder order traversal case perform permutation vertices preferably vfather array contain additional information exploited algorithms instance fig 5 shows vfather example fig 2 obtained using topological surgery method 11 particular case topological surgery vfather represents digraph whose nodes mesh vertices edges mesh edges node outdegree one vfather forest also admits selfloops fig 5 vfather fatherchild relationship example fig 2 generated topological surgery method since concerned topology figure following figures representing mesh fig 2 wireframe mode dashed lines represent edges shared two backfacing triangles b particular case topological surgery vfather forest also admits selfloops following omit draw selfloops 52 stitches stitch operation clusters given number vertices along two specified directed paths vertices wherein path vertices defined following fatherchild relationship ambiguity following path corresponds going towards root tree stitch defined also called forward stitch stitch specified providing pair vertices length vertex clustering accomplished performing series stitches may sometimes want go fatherchild tree opposed tree towards root priori ambiguous following definition removes ambiguity reverse stitch works starting two vertices following path defined fatherchild relationship second vertex storing vertices along path temporary structure clustering vertices along path associated first vertex together stored vertices visited reverse order introduce two methods called stackbased variablelength representing decompos ing vertex clustering series stitches two alternate methods encoder choose latter method presents challenges allows much compact encoding reported section 12 define bitstream syntax supports possibilities required encoder use advanced feature 53 vertex clustering array vcluster stackbased variablelength methods take input vertex clustering array vcluster convenience denote vcluster f1ng f 1ng access vertices vcluster propose convention vcluster always indicate vertex lowest decoder order supposing vertices 1 256 belong different components cluster vertex better write vclustert1udvclustert256ud1thanvclustert1ud vclustert256ud256 encoder decoder build components gradually point vertex 1 physical vertex existing component vertex 256 yettobeencoded component accessing vertex 1 vertex 256 would increase code complexity stackbased variablelength methods developed following sections variablelength method exploits information vfather forest stackbased method stackbased method explained implemented without requiring notion stitches stitches used stackbased method zero length associate vertex higher decoder order vertex lower decoder order however stitches core variablelength method efficient useful combine two methods single framework using single compressed syntax 6 stackbased method wish encode efficiently clusters affect r replicated vertices rest n r vertices affected also say cluster size 1 main idea behind method provided keep stack cluster representatives log bits necessary r vertices indicate cluster belong compress information even fig 6 stackbased method applied example fig 1 represent stitches pictorially using lassos wiggles portion cluster representatives present stack given time using many indices elements present stack purpose use stackbuffer similarly deering 5 manifold mesh compression modules see 11 stack would support push pop operations denote stack buffer data structure supports get operation well direct indexing stack get pop operations push get pop stackbuffer vertices cluster together connected components computed vertex clustering two vertices belong component cluster vertex decoding order associate stitching command vertex size vertexs component one command none one n r unaffected vertices otherwise command either push getv popv depending decoding order vertices given component v index local stackbuffer vertex decoded first associated push subsequently decoded vertices associated getv except vertex decoded last associated popv whereby v removed stackbuffer example fig 1 illustrate association commands vertices fig 6 vertex labeled using decoder order corresponding command displayed vicinity vertex order achieve local indexing set clusters thus avoid incurring logn cost encoding vertex repetitions need provide code stitching command vertex none push get pop discussed section 9 none command uses one bit may compressed using arithmetic coding 18 considering sequence commands alternative onebitpervertex cost would provide list cluster representatives requiring log n index encode selected approach addition providing lower bit rates another advantage approach command associated vertex may used decide whether encode coordinates properties geometry properties may encoded none push vertices thus easily interleave connectivity geometry bitstream allowing incremental decoding rendering see section 4 done without overhead encoding table clusters one drawback stackbased method requires send one stitching command different none either push get pop r vertices repeated cluster singular vertex next section explain variablelength method exploits situation cluster members adjacent vfather forest order replace many push get pop commands possible none command requires one bit 7 variablelength method 71 principle method take closer look fig 5 realize clusters 25 13 1 father 2 3 father 5 example situation add length stitch defined section 5 stitch vertex 5 vertex 2 stitch length 1 pictorial representation stitch provided fig 7a thus push 2 stack vertex 5 associated get2 command stitch length 1 effect fetching fathers 2 5 1 3 clustering length 2 would fetch fathers 1 3 cluster well advantage vertex 1 vertex 3 require specific push get pop command associate none command requires significantly fewer bits suitable vfather fatherchild relationship expect situation occur frequently particular topological surgery edges mesh boundary except one belong vfathersincewe expect lot stitching occur along boundaries paths defined vfather valuable fig 7 three stitches variable length direction encode vertex clustering fig 3 length 1 b length 0 c length 2 reverse direction using example fig 3 illustrate fig 7 variable length stitches used represent complete vertex clustering three stitches applied represent vcluster one forward stitch length 1 discussed one stitch length zero 6 0 one reverse stitch length 2 10 6 according definition provided section 5 reverse stitch performed follows retrieve father 6 5 father 5 3 cluster 10 3 father 10 9 5 finally father 9 7 6 remainder section explain discover stitches knowledge vcluster vfather arrays 72 discovering variablelength stitches good working hypothesis states longer stitches fewer commands smaller bitstream size propose greedy method operates follows generate longest stitch starting vertex perform stitches order decreasing length justification assuming stitches direction redundant encodings avoided illustrated fig 8 stitch extended full possible length stitch 1 another stitch stitch could encode redundant information unless broken smaller stitches however stitches always extended full possible length subsequent stitches may simply shortened necessary avoid redundancy instead broken thus safely apply forward stitches one order decreasing stitch simply recompute length appropriately instance stitch 2 fig 8 length 1 3 reverse stitches introduced however situation complex illustrated fig 12 discussed section 8 method first computes vertex clusters singular vertex longest possible forward stitch starting vertex length one several candidate vertices stitched determined illustrated fig 9a starting vertex v0 v0 2f1ng vertices cluster identified vfather followed vertices vertices thus obtained method retains belonging cluster vfathertv0u process iterated b c fig 8 justification longeststitchfirst strategy supposing stitch 2 performed stitch 1 stitching information light gray b encoded twice c strategy cannot happen since stitch 1 prolonged stitch length 4 stitch 2 shortened length 1 fig 9 computing longest possible stitch starting vertex v0 ovals indicate clusters forward stitch length 3 v1 b backward stitch length 4 v2 cluster contains single vertex ancestors vertices remaining previous iteration vf successor v0 ending stitch fig 9a candidates stitching v1 fig 9a special care must taken selfloops vfather order process finish stitch length meaningful also implementation assumed vfather loops except selfloops case vfather loops make sure process finishes starting vf method attempts find reverse stitch would potentially longer illustrated fig 9b examining vertices cluster vfathertvfusuchasv2 stitch extended way several times however since nothing prevents vertex v vfathertvu belonging cluster must avoid stitching v0 potential stitches inserted priority queue indexed length stitch method empties priority queue applies stitches order decreasing length vertex clustering completely represented stitches next section discusses details variablelength method important successful implementation details necessary however understand rest paper starting section 9 8 details variablelength method 81 decoder order connected components representation method must respect use decoder order connected components manifold mesh mentioned section 1 independently number vertices cluster given vertex geometry properties vertex encoded specifically first vertex cluster decoded connectivity stitches geometry properties encoded decoded fig 10 potential problems variablelength stitches clustering components 1 2 decoded component 3 b successfully encode two stitches must substitute vertices 12 7 first one c possible recombination using endpoints 3 7 12 possible componentpercomponent basis allow progressive decoding visualization see fig 4c implies decoding stitches corresponding given component say component complete clustering information relevant portion vcluster component well component previously decoded components 1m 1 available mismatch geometry properties encoded decoder trying decode potentially adverse consequences stackbased method generates one command per vertex cluster trivial cardinal larger one problem requirement however applying variablelength search longest stitches components together optimum found method could fig 10a three components may stitched together two stitches one involving components 1 3 second involving components 2 3 assuming total number manifold components c solution iterate mthe component number decoder order 2 c perform search longest stitches components 12m 82 decoder order vertices longest stitch cannot always performed incompatibilities decoder order vertices vertex stitched one vertex lower decoder order example fig 10b illustrates 123 127 stitches cannot encoded however 123 stitch may substituted 73 equally long stitch therefore listed priority queue case fig 10c requires work possible recombination possible using endpoints 3 7 12 since problems involve vertices start stitch possible split stitch two stitches one one unit shorter length zero stitches entered priority queue fig 11 vertices marked x may stitched together since corresponds longest possible stitches however complete fig 12 reverse stitch vertices marked clustering four vertices circled black x may interrupted curve completely represented fashion previous forward stitch vice versa stitches length zero incompatibility decoder order vertices always resolved fig 10b stitching 3 vertices consider three stitching pairs one rejected since stitches length zero direction stitch matter stitching pairs valid 83 generating enough stitches method generates longest stitch starting vertex possible may provide enough stitches encode clusters illustrated fig 11 case method finish encoding clusters using zerolength stitches similarly stackbased method 84 competing forward reverse stitches finally forward reverse stitches compete situation illustrated fig 12 may occur isolated pair vertices along forward stitch may clustered operation reverse stitch performed earlier avoid redundancy pair vertices already clustered subsequent stitch incorporate method detect situation split stitch performed last two shorter stitches working combination stitches found last step translate stitching commands object next section also specifies bitstream syntax 9 stitches encoding encode stitching commands bitstream propose following syntax accommodates commands generated stackbased variablelength methods specify whether stitches given component boolean flag hasstitches used addition push get pop commands vertex may associated none command discussed general majority vertices expected nonsingular commands none three bits called stitchingcommand poporget pop used coding commands none push get pop shown fig 13 stitchlength unsigned integer associated push command stackindex unsigned integer associated get pop commands addition get pop following parameters differentiallength signed integer representing potential increment decrement respect length recorded previous push command updated previous get pop using differentiallength pushbit bit indicating whether current vertex pushed stack 10 reversebit indicates whether stitch performed reverse fashion explain encode translate stitches obtained previous sections compliance syntax defined encoder decoder maintain anchorstack across manifold connected component referring vertices potentially belonging previous components stackbased method process straightforward addition commands none push get pop encoded using three bits stitchingcommand poporget pop push associated stitchlength 0 get pop associated stackindex easily computed anchorstack variablelength method process better understood examining fig 14 fig 14a show pictorial representation stitch vertex shown attached string edges representing stitch length stitchto arrow pointing anchor vertex anchor represented relation decoder order traversal vertices stitchto relationship defines partition vertices associated stitching commands fig 14b isolate component partition component method visits vertices decoder order v0v1v2v3 fig 14b first vertex command push subsequent vertices associated get pop depending remaining stitchto relationships vertices also anchors pushbit set incremental lengths reversebits also computed fig 14c shows commands associated fig 14b example fig 1 used throughout paper final five commands different none gathered table 2 commands form encoder operates manner completely symmetric decoder described detail section 10 except encoder actually perform stitches decoder fig 15 lists pseudocode encoder associated pushbit fewer push pop commands although seems counterintuitive tried exchanging variable length codes push pop observe smaller bitstreams practice attributed arithmetic coder fig 13 syntax stitches xs indicate variables associated command fig 14 translating stitches bitstream syntax table five commands different none encoding complete clustering fig 3 stackbased encoding shown fig 6 requires nine stitch stack differential push reverse vertex command length index length bit bit encodedanchorstack ifhasstitchestrue encode hasstitches inv0 nv1 nv0 first vertex current component nv1 1 last vertex encode stitchingcommand ifstitchingcommand encode poporget poporget encode pop encode stackindex retrieve stitchinganchor anchorstack pop remove stitchinganchor anchorstack encode incrementallength ifincrementallength0 encode incrementallengthsign push back anchorstack retrieve stitchlength stichinganchor iftotallength encode reversebit save totallength stitchinganchor encode stitchlength push back anchorstack end fig 15 pseudocode stitches encoder 10 stitches decoding decoder reconstructs vcluster information applied vertices reconstruct polygonal mesh following pseudocode shown fig 16 summarizes operation stitches decoder boolean hasstitches current connected component true vertex current component decoder order stitching command decoded boolean value stitchingcommand true boolean value poporget decoded boolean value poporget false unsigned integer decoded associated current vertex anchor stitch current vertex pushed back anchorstackifpoporget true boolean value pop decoded followed unsigned integer value stackindex decodestitchesforaconnectedcomponent anchorstack hasstitches true first vertex current component nv1 1 last vertex ifstitchingcommand ifpoporget retrieve anchor anchorstack ifpop remove stitchinganchor anchorstack incrementallength0 push back anchorstack retrieve stitchlength anchor iftotallength stitch anchor length totallength reverse reversebit push back anchorstack save stitchlength anchor end fig 16 pseudocode stitches decoder using stackindexananchor retrieved anchorstackthisistheanchor current vertex stitched pop boolean variable true anchor removed anchorstack integer differentiallength decoded unsigned integer different zero sign boolean differentiallengthsign decoded used update sign differentiallengthapushbit boolean value decoded pushbit true current vertex pushed back anchorstack integer stitchlength associated anchor retrieved totallength computed adding stitchlength differentiallengthiftotallength greater zero reversebit boolean value decoded vcluster array updated stitching current vertex stitching anchor length equal totallength potentially using reverse stitch decoder uses vfather array perform operation stitch current vertex stitching anchor length equal totallength starting anchor time follow vertex paths starting anchor looking vfather entries totallength times corresponding entries ianchor vfatherivfatheranchor vfathervfatheri vfathervfatheranchor record vcluster array entry largest decoder order entry lowest decoder order instance j kthen vclusterj kelsevclusterk j vcluster defines graph forest time entry vcluster changed perform path compression forest updating vcluster element refers directly root forest tree belongs stitch reverse stitch first follow vfather entries starting anchor length equal totallength vertices 6 3 fig 7 recording intermediate vertices temporary array follow vfather entries starting vertex corresponding entry stored temporary array last entry first entry update vcluster explained 11 analysis 111 correctness wish determine stackbased variablelength methods used combination manifold mesh encoding technique encode nonmanifold mesh first observe nonmanifold mesh always converted set manifold meshes cutting singular vertices edges including edges incident faces inconsistent orientation cut performed duplication vertices inverse operation aggregate cluster vertices duplicated may thus determine whether clustering vertices mesh represented either stackbased variablelength method stackbased method may clearly represent clustering virtue construction section 6 recall briefly clustering vertices partition set vertices vertices may globally enumerated inside component partition may enumerate vertices according global order first vertex associated push last vertex pop intermediate vertices get variablelength method may also represent clustering simple reason variablelength method generalization stackbased method stitches length zero 112 computational complexity focus computational complexity associated encoding decoding stitches studying computational complexity manifold mesh encoding decoding belongs relevant publications 19121422 summarize current analysis authors referenced publication report computational complexity linear number mesh vertices triangles methods methods nonlinear storage cost pointed 17 concentrate first computational complexity encoding stitches followed computational complexity decoding complexity determined use stackbuffer subset vertices among n vertices mesh replicated total r replications r vertices pushed popped inside stackbuffer assume given time k vertices stored stack buffer necessarily k 6 need determine complexity maintaining stackbuffer allowing index elements indices 0 k 1 vertices added stackbuffer use depth stack index vertices however vertices removed stack need reassign unused indices without perturbing indices vertices still present stack need accessed directly using original index queue may used track unused indices reassign order cost inserting removing element queue constant however guarantee always assign smallest index possible could negative effects size encoding area open investigation thus established stackbuffer operations may performed constant time however indices 0 k 1 must inserted bitstream since cannot assume particular coherence indices worstcase cost encoding indices olog k thus cost processing r vertices subjected clustering bounded log kand thus log worst case case variablelength method process determining longest stitch starting vertices worstcase complexity om2 process sorting stitches nonlinear contribution sorting integers done linear time using bucket sort 4 summary encoding performed cmlogm time stackbased method worst case variablelength method bounded c m2 terms decoding except caveat formulated difference worstcase complexity two methods c mlog n number vertices mesh number vertices amongst n subjected clustering case variablelength method note bad encoder could provoke situations depicted fig 8b clustering vertices redundantly encoded assumed complexity estimate encoder would however bitstream syntax provide guarantees behavior 113 storage cost worstcase storage cost associated stitching follows encoding stackbased method worstcase storage cost maximum depth stack variablelength method worstcase storage cost omcwherec maximum number vertices cluster defined section 1 cost corresponds storage set candidate stitches decoding methods worstcase storage cost 12 experimental results 121 test meshes report detailed data set 14 meshes time general statistics set 303 meshes used validation experiments mpeg4 standardization process 11 14 meshes illustrated fig 17 range vertices 5 65000 meshes range nonmanifold vertices 2 5056 004 significant fig 17 test meshes proportion nonmanifold vertices 88 sierpinskiwrl model one mesh manifold rest meshes nonmanifold manifold mesh easily identified reader table 3 one model gennmwrl colors normals per vertex made nonmanifold adding triangles engine model originally manifold made nonmanifold applying clustering operation described 15 synthesized models planet0wrl saturnwrl sierpinskiwrl tetra2nmwrl models obtained various sources originally nonmanifolds 122 test conditions following quantization parameters used geometry vertex coordinates quantized bits per coordinate colors 6 bits per color normals 10 bits per normal coordinate prediction done using parallelogram prediction 22 color prediction done along triangle tree normal prediction using 10 bits per coordinate noticeable differences original decoded models cases case engine model however quantization artifacts visible using 10 bits per coordinate disappear using bits per coordinate illustrate two larger test models compression decompression figs 123 test results table 3 provides compressed bitstream sizes 14 meshes compares bitstream sizes meshes encoded nonmanifolds manifolds ie without stitching information redundent coordinates vertices repeated initial cost mesh order 40 bytes independently number triangles vertices case smooth meshes connectivity coding prediction arithmetic coding seem divide three size quantized vertices instance starting 10 bits per vertex quantization typical bitstream size would order 10 bits per vertex 5 bits per triangle assuming fig 18 symmetricbrain model compression b starting bits quantization per vertex coordinate complete compressed bitstream uses 172 bits per vertex fig 19 engine model compression b decompression starting 10 bits quantization per vertex coordinate artifacts may seen level quantization c decompression 16 bits visible artifacts remain manifold mesh without many boundaries case highly nonmanifold nonsmooth meshes starting bits per vertex quantization typical bitstream size would order 20 bits per vertex 10 bits per triangle smooth meshes seem compress roughly twice much previous estimates apply manifold nonmanifold compression table 3 indicates compressing nonmanifold nonmanifold ie recovering connectivity using stitches total bitstream size reduced 20 21 tetra 2nm wrl model encoding stitches vertices stitched together encoded vertices duplicated nonmanifold manifold conversion process applies pervertex properties table compression results bpv stands bits per vertex bpt bits per triangle model uncompressed number number compressed compressed nonmanifold size vertices triangles nonmanifold manifold versus manifold bytes bytes bpv bpt bytes ratio savings bartwrl briggsowrl 130297 1584 3160 4080 2061 1032 4129 098 2 enginewrl 4851671 63528 132807 139632 1758 841 167379 083 17 enterprisewrl 859388 12580 12609 28224 1795 1791 29553 095 5 gennmwrl 49360 410 820 2566 5006 2503 2625 097 3 lampwrl 254043 2810 5054 3726 1061 590 3954 094 6 mazewrl 87391 1412 1504 4235 240 2253 4855 087 13 optcowwrl 204420 3078 5804 7006 1802 966 7006 1 0 saturnwrl 61155 770 1536 1998 2075 1040 2197 091 9 symmetricbrainwrl 3092371 34416 66688 73789 1715 885 73640 1002 02 main results gathered table 4 table 4 first report relative part stitching information connectivity observe stitches huge impact bitstream 125 size connectivity thus worthwhile concentrate efficient encoding stitches compare relative efficiencies naive method described section 11 encode table repetitions table 1 stackbased method variablelength method order fair comparison measure number bits per replicated vertex used encode stitches naive method use formula r log nwherer number repeatedvertices n total number vertices note formula underestimates true formula mlog c c r log n also model overhead inserting data functional bitstream decoded incrementally etc formula thus reflects theoretical bestcase prediction stackbased variablelength methods report data obtained producing bitstreams without stitching data expected variablelength method outperforms stackbased method outperforms naive method several cases variablelength method allows orderofmagnitude improvement theoretical performance naive method also report paper statistics set 303 models used validation experiments mpeg4 standardization process among 303 meshes 162 found non manifold measured average ratio vertex replications rn among 303 models found equal 039 average 39 vertices repeated seems quite high note table relative importance stitches comparison encoders report relative part stitches rest connectivity observe stitches represent important part also compare number bits per replicated vertex naive method using formula r log2 n stackbased encoder variablelength encoder note formula underestimates cost naive method disregards overhead associated putting data bitstream connectivity connectivity stitches naive stack variable stiches connectivity length model name nr bytes bitsr bart 5058 4 294 303 3 13 22 briggso 1631 90 448 509 14 11 72 542 engine 83583 23173 17068 38432 125 17 1047 738 lamp 3070 388 315 429 36 12 602 235 maze 2028 1232 615 1121 82 11 356 329 superfemur 14558 863 3699 4609 25 14 850 844 brain 34708 548 7582 8154 8 r general significantly larger number nonmanifold vertices instance model fig 2 3 r 9andrn 082 average kept high models consisting majority nonmanifold vertices median computed 162 nonmanifold meshes rn 0147 15 vertices repeated fig 20 compare efficiency variablelength method naive method representing stitching information 162 mentioned nonmanifold meshes fig 20 shows scatter plot number bits per replicated vertex function ratio rn naive method used formula r log n discussed represent theoretical bestcase estimatefor variablelength method plotted data obtained producing bitstreams without stitching information data indicates variablelength method outperforms significantly theoretical behavior naive method table 5 gathers overall encoding decoding timings 11 observe decoding speed 10000 13000 vertices per second commonly available 233 mhz pentium ii laptop computer many meshes reported number triangles twice number vertices perhaps relevant 1119 present methods representing one module fig 20 efficiency variablelength method versus naive method encoding vertex replications scatter plot obtained 162 nonmanifold models among 303 test models yaxis represents number encoded bits per replicated vertex xaxis represents ratio vertex replications logscale naive method used formula r log2 n theoretical bestcase performance variablelength method plotted measured data based data variablelength method outperforms significantly naive method exact torus approximate many large meshes relatively simple topology case observe decoding speed 2000025000 triangles per second considering nonmanifold meshes assumption number triangles twice number vertices necessarily hold depending number singular boundary vertices edges model instance consider enterprisewrl model nonmanifold meshes meshes significant number boundary vertices measuring computational complexity number vertices probably better measure shape complexity number triangles speed reported observed meshes including meshes one several properties gennmwrl exception meshes fewer 50 vertices would significant measuring pertriangle pervertex decompression speeds various overheads results appear first order magnitude slower reported 9 note gumhold strasser decode connectivity one functionality small portion compressed data observe timings different computer 175 mhz sgi02 also decoder optimized far section 13 timings reported independent whether mesh manifold mesh thus measured penalty decoding time incurred stitches table encoding decoding times seconds measured ibm thinkpad 600 computer stackbased method used encoding times include nonmanifold manifold conversion nonmanifold encoding decoding vertices triangles model cpu time seconds decodedsecond bartwrl 064 038 13300 23700 briggsowrl 024 014 11300 22600 enginewrl 1235 788 8100 16900 enterprisewrl 129 112 11200 11300 gennmwrl 010 004 10300 20500 mazewrl cowwrl 043 023 13400 25200 planet0wrl saturnwrl 014 008 9600 19200 superfemurwrl 212 136 10300 20700 symmetricbrainwrl 734 320 10800 20800 13 summary future work described method compressing nonmanifold polygonal meshes combines existing method compressing manifold mesh new methods encoding decoding stitches latter methods comply new bitstream syntax stitches defined work uses extension topological surgery method manifold compression 11 major obstacles preventing use methods 19121422 131 main results demonstrated paper compressing nonmanifolds preserving nonmanifold connectivity highly desirable costly nonmanifold models frequent half models database according experiments nonmanifold compression noticeable effect decoding complexity furthermore compared encoding nonmanifold manifold method permits savings compressed bitstream size 20 average 84 avoids duplication vertex coordinates properties addition achieving functionality compressing nonmanifold without perturbing connectivity also demonstrated paper encoding stitching information efficiently important results indicate size stitching information may comparable size connectivity naive method discussed section 11 adequate encoding stitching information methods guarantee worst case cost olog bits per vertex replication mbeing number nonmanifold vertices many replications cost actually logll bits l length stitch amortized cost encoding length stitch presented two different encoders simple encoder complex encoder uses full potential syntax results reported indicate additional complexity variablelength encoder justified encoders may designed compliance syntax one particularly interesting open question provably good optimization strategy minimize number bits encoding stitches perhaps importantly methods hides completely issues mesh singularities users technology arguably complex issues creators users 3d content may necessarily want learn order understand models would freed singularities thus altered order properly transmitted stored compressed form bitstream syntax decoder described paper part mpeg4 standard 3d mesh coding using technology alteration connectivity whether nonmanifold manifold 132 future work stitches allow connectivitypreserving nonmanifold compression merging components performing topological transformations corresponding vertex clustering possible exploit topological transformations using stitching syntax syntaxes another open area software used report results paper means optimized optimization must thus done harmony functionalities compression eg streamed hierarchical subject future work decoder may optimized following ways optimizations possible well 1 limiting modularity function calls modules functionalities syntax frozen 2 optimizing arithmetic coding bottleneck decoding process every single cycle arithmetic coder matters 3 performing detailed analysis memory requirements imposing restrictions size mesh connected components limiting number cache misses way acknowledgements anonymous reviewers provided excellent suggestions improving original draft also thank g zhuang v pascucci c bajaj providing brain model kalvin providing femur model fig 21 regular boundary singular nonmanifold vertices polygonal mesh appendix manifold nonmanifold polygonal meshes purposes threedimensional polygonal mesh comprises set vertices fvig set faces ffj g vertex coordinates r3 face specified tuple least three vertex indices face said incident vertices edge pair vertices listed consecutively least one face call connectivity mesh set ordered subsets indices provided set faces ffj g modulo circular permutation use word geometry mean set vertex coordinates fvig call subset faces ffj g share vertex v star v noted vthelink vertex graph consisting edges star v incident v see fig 21 regular vertex simply connected link otherwise vertex singular vertex nonmanifold vertex call edge incident one single face boundary edge edge incident exactly two faces regular edgeand edge incident three faces singular edge regular vertex incident boundary edge called boundary vertex cases illustrated fig 21 mesh manifold vertex regular vertex otherwise nonmanifold additional definitions notably orientability provided instance 8 r single resolution compression arbitrary triangular meshes properties boeing research staff optimized geometry compression realtime rendering introduction algorithms efficient implementation progressive meshes isoiec 144962 mpeg4 visual committee working draft version progressive coding 3d graphics models siggraph97 conference edgebreaker connectivity compression triangle meshes matchmaker manifold breps nonmanifold rsets wrapzip decompression connectivity triangle meshes compressed edgebreaker geometry coding vrml geometry compression topological surgery virtual reality modeling language specification tr ctr lexing ying denis zorin nonmanifold subdivision proceedings conference visualization 01 october 2126 2001 san diego california martin isenburg jack snoeyink compressing property mapping polygon meshes graphical models v64 n2 p114127 march 2002 martin isenburg jack snoeyink coding polygon meshes compressable ascii proceeding seventh international conference 3d web technology p110 february 2428 2002 tempe arizona usa jeffrey ho kuang chih lee david kriegman compressing large polygonal models proceedings conference visualization 01 october 2126 2001 san diego california christian sohler fast reconstruction delaunay triangulations computational geometry theory applications v31 n3 p166178 june 2005 dmitry brodsky jan baekgaard pedersen parallel framework simplification massive meshes proceedings ieee symposium parallel largedata visualization graphics p4 october 2021 renato pajarola jarek rossignac compressed progressive meshes ieee transactions visualization computer graphics v6 n1 p7993 january 2000 jatin chhugani subodh kumar geometry engine optimization cache friendly compressed representation geometry proceedings 2007 symposium interactive 3d graphics games april 30may 02 2007 seattle washington martin isenburg stefan gumhold outofcore compression gigantic polygon meshes acm transactions graphics tog v22 n3 july leila de floriani mostefa mesmoudi franco morando enrico puppo decomposing nonmanifold objects arbitrary dimensions graphical models v65 n13 p222 january dinesh shikhare venkata babji p mudur compression techniques distributed use 3d data emerging media type internet proceedings 15th international conference computer communication p676696 august 1214 2002 mumbai maharashtra india renato pajarola christopher decoro efficient implementation realtime viewdependent multiresolution meshing ieee transactions visualization computer graphics v10 n3 p353368 may 2004