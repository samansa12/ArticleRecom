computational complexity problems involving congruences algebras prove several problems concerning congruences algebras complete nondeterministic logspace problems determining congruence given algebra generated set pairs determining whether given algebra simple subdirectly irreducible also consider problem determining smallest fully invariant congruence given algebra containing given set pairs prove problem complete nondeterministic polynomial time b lies subuniverse generated easy nd reduction gencon gensubalg see example 3 theorem 55 thus gencon harder gensubalg however 14 jones laaser proved gensubalg complete p class problems solvable polynomial time known nl contained class problems solvable polynomial time generally believed inclusion proper thus gensubalg apparently strictly harder gencon since lies nl algorithm gencon runs polynomial time algorithm 1 course nondeterministic even converted deterministic algorithm natural way ie exhaustive search successful computation path would particularly ecient running time proportional square perhaps even cube size input algorithm repeatedly recomputes numerous quantities rather saving since space required save information exceeds olog bits contrast recent note 7 r freese exhibited algorithm gencon runs linear time however freeses algorithm uses linear rather logarithmic space 1980s demel demlova koubek 4 5 presented lineartime algorithms many problems discussed paper 1 background material provide barest summary notions need universal algebra complexity theory details universal al gebra reader consult 3 9 19 computational complexity 11 20 22 also rst two sections paper 2 contain extensive discussion topics nonnegative integer n nary operation set function integer n called rank f algebra pair fi nonempty set f set operations set called universe f set basic operations algebra f nite algebra said nite similarity type subuniverse subset closed basic operations denition 11 let fi algebra congruence set equivalence relation rank f n set congruences denoted cona smallest element set identity relation largest relation a2 easy see cona closed arbitrary nonempty intersections given set dene called congruence generated nontrivial algebra called simple called subdirectly irreducible all2 cona fag congruence called monolith formal denitions complexity theory usually given terms languages ie sets nite strings xed alphabet associated language l decision problem given string x decide whether l amount time space required turing machine perform computation generally depends length input string x language l said computable polynomial time polynomial p deterministic turing machine decide whether input string x length lies l time ps set languages computable polynomial time denoted p set nl consists languages computable nondeterministic turing machine whose space requirements olog input length say problem computable nondeterministic logspace similarly np denotes set languages computable nondeterministic polynomial time course practice prefer couch discussion terms real problems rather languages always tacitly assume reasonable encoding instances problem nite strings way identify mathematical problems formal lan guages describe problems certain subsets set appropriate instances given two problems b say logspace reducible b log b function f computable deterministic logspace every instance x x 2 fx 2 b b said hard nl every member nl logspace reducible b b complete nl hard nl member nl hard see log reexive transitive thus b known nlcomplete b log 2 nl nlcomplete well hard show nl p np generally believed although still unproved inclusions proper follows belief proof problem b complete one classes strong evidence b belong preceding classes list inclusions make following assumptions regarding format input instance problems gencon simp si algebras nite nite similarity type underlying set algebra assumed f0 positive integer n fact set represented input cardinality requires log n bits storage operation algebra represented table values thus kary operation represented kdimensional array indices entries coming n1g array occupies nk log n bits input stream fi algebra cardinality n suppose maximum rank member f r input instance either simp si size least maxnr nq similarly let denote size typical instance gencon bounded maxnr jj nq certainly conclude log maxr log n log q 2 membership nl order prove gencon lies nl need slight variation classical theorem due maltsev 18 describing congruence algebra generated set pairs dierence formulation found texts replace monoid unary polynomial operations smaller manageable subset describe proofs lemma 21 theorem 22 identical theorems 418 419 19 treatment similar found section 212 24 let set f nary operation n 1 dene thus fa set unary operations obtained substituting elements one variables f members fa called elementary translations write ca set unary constant operations finally f set operations let lemma 21 let set let f set operations algorithm 1 z n jaj 3 choose z0 2 choose u v 2 choose od reject od reject set unary operations let denote submonoid monoid selfmaps generated particular identity map element theorem 22 let fi nite algebra b 2 elements pairs 2 notice theorem assume jaj indices j k case sequence along associated sequence ci di fi serve witnesses b 2 cga simple matter turn characterization theorem 22 procedure computing gencon theorem 23 gencon 2 nl proof consider nondeterministic algorithm labeled algorithm 1 essentially procedure takes guess sequences z0 theorem 22 nds sequences algorithm accepts input trip main loop starting statement 2 z contains value zi nondeterministically choose values z0 zi1 u v ci di steps 59 choose operation f 2 fa test whether fz fdig equality holds set step 12 zi1 value z0 continue equality fails reject instance computation operation f accomplished nondeterministically choosing series operations g 2 fa whose composite f dont keep track gs rather follow images ci di maps recording variables u v length composition needed obtain f bounded n2 since many pairs u v possible need encounter also necessary construct entire set fa line 7 set part input constant operation value choose g pick integers k ar data hk sucient determine operation total auxiliary memory required algorithm 1 space storing variables z z0 ar holds integer range 0 n hence requires log n bits storage except k require logqn log r bits respectively thus total space requirement order r7 log nlogqnlog r 2 olog size instance inequality 1 theorem 23 also obtained immermans theorem 12 immerman showed every language denable fotc rstorder logic transitive closure operator lies nl follows theorem 22 gencon dened similar remarks apply following theorem theorem 24 simp si lie nl proof observe nontrivial algebra simple b c truth b 2 cgac determined single call gencon computation required verify formula 3 accomplished four nested loops important observe space required call gencon reused trip loop thus addition space required one call gencon need allocate space four loop counters run 0 jaj 1 thus simp 2 nl similarly subdirectly irreducible using argument similar used simplicity see si 2 nl conclude section discussion problem rst considered belohlavek chajda 1 let us dene algebra c congruence class congruence congruence algebra congruence class set form xed element belohlavek chajda show restricted algebras generate congruenceregular variety problem congclass lies p however using techniques developed section able show congruenceregularity assumption dropped congclass actually lies nl presumably proper subclass p theorem 25 congclass 2 nl proof let algebra c since empty set never congruence class assume c nonempty easy see c class congruence c class congruence fix element c 2 c denition clearly c c thus need check reverse inclusion words wish check condition condition checked simple loop strictly speaking call gencon subroutine since would require enough space hold structure ha c2 x ci instead code algorithm 1 must inserted directly loop references replaced c thus congclass lies nl unlike primary problems gencon si simp unable determine whether congclass complete nl leave open problem problem congclass complete nl 3 nlhardness problems turn problem determining lower bound problems specically wish show three problems discussed theorems 23 24 nlhard use facts complexity theory nite graphs directed graph digraph structure hg g nonempty nite set vertices g g edges hg digraph b 2 g path b length n sequence vertices every 0 n every vertex agree path length 0 dene path b one bestknown problems complexity theory graph accessibility words gap problem determining whether path b given digraph problem shown complete nl 13 although result also implicit 21 used motivating problem nondeterministic logspace 20 called reachability digraph g called strongly connected every 2 g g words every b directed path b vertex b called attractor every vertex b 2 ra associated notions introduce two problems strongly connected g attractor strcon proved nlcomplete laaser see 13 far know problem attract new theorem 31 problems gap strcon attract complete nl proof mentioned gap strcon complete nl let g digraph observe manner similar used si proof theorem 24 algorithm attract also strcon based two nested loops call gap inside innermost loop space used gap computation reused thus attract lies nl show attract nlhard shall give logspace reduction gap attract let hg bi instance gap cg let claim hg bi 2 gap h 2 attract c attractor see suppose rst path p b g vertex v g sequence v p c path h v c thus c attractor conversely c attractor h path h c path must include b since exit c last vertex path equal c thus path g b hg bi 2 gap reduction clearly computable logspace since auxiliary storage needed several counters thus attract nl complete gw figure 1 part algebra ag reader surely noticed structural similarity conditions 5 equivalences 3 4 shall exhibit reductions graph problems theorem 31 algebra problems discussed theorem 24 use following construction hg digraph fix element 2 g let gfg dene new graph thus isolated point g closed neighborhood v let choose function way words edge v w note also v 2 g dene operation gv g w otherwise finally dene algebra construction ag illustrated schematically figure 1 let us make two observations algebra ag first element g subuniverse generated rafg second ag unary algebra basic operations rank 1 useful fact unary algebras following lemma proof easy verication lemma 32 let b unary algebra subuniverse b binary relation congruence b note congruence exactly one nontrivial congruence class namely next two lemmas omit superscript ag notation cgx lemma 33 1 let b vertices g b 2 cga b 2 ra 2 c distinct elements g cgc cgc proof let subalgebra ag generated follows lemma 32 cga thus raconversely b 2 ra sequence indices xed fi obtain second claim inclusion trivial suppose working modulo cgc smallest congruence identifying c get cgc cgc relationship algebraic problems graph problems given following lemma lemma 34 digraph g b 2 g hg proof rst equivalence follows immediately lemma 331 suppose g strongly connected show ag simple pick pair c distinct elements g wish show cgc universal congruence without loss generality assume c bylemma 332 c 2 cgc assumption lemma 331 congruence class c modulo cgc contains g thus cgc hence also cgc universal conversely suppose ag simple pick vertices b g since cga universal congruence apply lemma 331 obtain address third equivalence suppose b attractor g wish show cgb smallest nontrivial congruence monolith ag choose pair c distinct elements assume using lemma 33 cgb cgc cgc converse suppose cgc monolith ag identity congruence hence minimality cgc get 2 g cgc cga hence lemma 331 c 2 ra words c attractor g finally combine lemma 34 theorem 31 obtain main theorem theorem 35 problems gencon simp si complete nl remarks 1 lemma 34 see gencon remains complete nl restrict instances ha bi unary algebra 2 natural wonder complexity recognizing congruences algebra words given algebra binary relation determine whether congruence hard see done deterministic logspace first one verify equivalence relation using three nested loops running elements example b two loop counters test symmetry verifying whenever b b test second condition denition 11 use two sets variables ar denotes maximum rank basic operations basic operation f traverse entire set ar whenever ai bi 2 k verify requires 2r counters using log n bits note input instance problem almost identical gencon conclude inequality 1 space requirements bounded logarithm size input 3 construction ag sequence hgviv2g unary operations replaced single binary operation given otherwise result spacesaving operations given via tables might ecient operations allowed presented means boolean circuits 4 gap problem directed graphs analogous prob lem called ugap undirected graphs follows however open question whether ugap complete nl complexity class sl symmetric logspace dened way ugap complete sl see lewis papadimitriou16 details completeness ugap nl equivalent assertion set viewed algebra set basic operations empty case subset a2 cga nothing smallest equivalence relation containing easy see b 2 cga b lie connected component undirected graph ha g words ugap coincides special case gencon algebra constrained basic operations experience special case lesser complexity general case suggests one ought try prove gencon 2 sl thereby settling question whether sl nl distinct recall problem congclass mentioned end section 2 proved theorem 25 congclass lies nl since unable prove problem complete nl led wonder whether congclass might lie interesting proper subclass sl seems natural candidate companion problem 2 ask congclass lie sl 4 fully invariant congruences endomorphism algebra fi homomorphism words function f 2 f collection endomorphisms denoted enda congruence called fully invariant x 2 h 2 enda hx hy 2 denote cona set fully invariant congruences immediate denition equation several consequences first a2 fully invariant congruences second a2 smallest fully invariant congruence containing shall write cga congruence finally theorem 22 applied compute cga f replaced f enda parallel problem gencon dene minor modications algorithm 1 used compute genconfi light equation 6 algorithm 1 used compute genconfi step 7 g must chosen rather fa note thus provide modied algorithm algorithm 2 step replaced sequence 7a7e idea behind sequence steps follows rst toss coin coin comes heads choose g 2 fa however tails guess arbitrary function g check see g endomorphism proceed step 8 reject instance algorithm 1 z n jaj 3 choose z0 2 choose u v 2 7a toss coin 7b heads choose g 2 fa 7c else 7d choose 7e g 2 enda reject od od reject od reject unlike original algorithm modied version executed logspace require enough space hold entire function g whenever coin comes tails since function list n integers range 1g space requirement g n log n general bounded logarithm size input see inequality 1 however modied algorithm run nondeterministic polynomial time verication function g endomorphism requires one pass tables basic operations algebra since algorithm reaches step 7 n3 times total running time bounded polynomial size input alternative one prove genconfi 2 np observing light theorem 22 genconfi dened secondorder existential sentence fagins theorem 6 follows language dened way lies np wish prove genconfi hard np reducing wellknown problem clique genconfi positive integer n let kn denote digraph vertex set f1 ng di rected edges f x g g digraph clique g asubgraph isomorphic kn call g loopless edges form x x dene loopless digraph n 1 g clique size n problem clique known npcomplete see 8 p 194 digraphs homomorphism h g function h g x 2 implies tx ty 2 note loopless graph g clique size n homomorphism kn g 10 hedrln pultr described elegant transformation digraphs unary algebras used several times 2 15 reduce problems involving graphs similar problems involving algebraic struc tures given digraph hg shall dene algebra gb follows universe gb set points appearing either g unary operations dened furthermore let h g digraph homomorphism dene function hb gb given theorem 41 hedrln pultr 10 mappings g gb constitute full faithful functor category digraphs algebras two unary operations words pair h g digraphs digraph homomorphism function hb gb homomorphism furthermore mapping bijectionbetween homomorphisms h g homomorphisms hb gb follows homomorphism hb gb must preserve u v map vertices vertices edges edges lemma 42 clique log genconfi proof let hg ni instance clique fix new vertex dene edge vertex g well edge opposite direction let denote disjoint union graphs g0 k dene g00 g0 k set gc00 see theorem 41 pick two distinct vertices b k let e edge b finally complete proof lemma shall show hg g clique size n 2 suppose rst g clique size n g0 clique size n1 includes vertex therefore graph homomorphism t0 k g0 symmetry k assume map t0 extended graph homomorphism g00 g00 mapping vertex g0 theorem 41 yields algebra homomorphism note denition using fact fully invariant congruence compute conversely suppose 2 since unary algebra kb subalgebra lemma 32 since 2 certainly hand fully invariant otherwise cg follows endomorphism must fail map kb theorem 41 endomorphism form g00 g00 must case map k since k complete disjoint g0 must actually map k g0 therefore g0 contains clique size n 1 one vertices clique equal conclude g nclique theorem 43 genconfi npcomplete proof modied version algorithm 1 shows genconfi 2 np since clique npcomplete follows lemma 42 genconfi npcomplete well notion full invariance extended objects congruences algebras example let hg digraph g let us call fully invariant every h 2 endg hs furthermore dene fully invariant subset generated set denoted sggs smallest fully invariant subset g containing notice g dene two problems digraph fully invariant subset g digraph 2 sgg using ideas theorem 43 prove following theorem 44 fisubset complete conp gensubsetfi complete np proof suppose hg si instance fisubset let p denote complement fisubset show fully invariant guess function verify h endomorphism hs gives nondeterministic algorithm p runs polynomial time reduce clique p let g loopless graph n positive integer let kn easy see kn fails fully invariant h graph homomorphism kn g turn equivalent existence nclique g thus p npcomplete therefore fisubset complete conp second problem condition hg checked guessing function g checking h endomorphism g 2 hs prove clique log gensubsetfi follow construction given lemma 42 produce graph g00 one easily sees g nclique 2 sgg 00 k thus gensubsetfi npcomplete r computing congruences eciently full embeddings categories algebras introduction automata theory languages capture complexity classes complete problems deterministic polynomial time computational complexity problems universal algebra symmetric spacebounded computation categories working mathematician general theory algebraic systems computational complexity relationships nondeterministic deterministic tape com plexities introduction theory computation remarks fully invariant congruences universal algebra computer scientists department mathematics department computer science tr fast algorithms constructing minimal subalgebras congruences ideals finite algebra languages capture complexity classes introduction theory computation introduction automata theory languages computation computers intractability complexity problems concerning varieties quasivarieties algebras