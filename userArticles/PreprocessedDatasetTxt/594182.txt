design cade13 atp system competition running competition automated theorem proving atp systems difficult arguable venture however potential benefits event far outweigh controversial aspects motivations running cade13 atp system competition contribute evaluation atp systems stimulate atp research system development expose atp systems researchers within outside atp community article identifies discusses issues determine nature competition choices motivated decisions cade13 competition respect issues given b introduction running competition automated theorem proving atp systems 1 difficult arguable venture reasons existing atp systems based different logics designed different types reasoning require different amounts user interaction different input formats may run specialized hardware moreover clear work profile respect atp systems evaluated however competition make significant contribution following important needs ffl evaluate relative capabilities atp systems ffl stimulate atp research general ffl stimulate atp research towards autonomous systems ffl provide motivation implementing fixing systems ffl provide inspiring environment personal interaction atp researchers ffl expose atp systems researchers within outside atp community disciplines competitions regularly used stimulate research development annual acm computer chess championship new94 well known attracts much interest participants chess championship clearly motivated improve pro grams programming competitions also popular crrp90 akk93 dem96 encourage programmers improve skills competitions machine learning mmps94 algorithm implementation cij 94 disciplines stimulated effort respective fields atp already competitions propositional bkb92 1st order ove93 levels encouraged researchers improve atp systems example otters autonomous mode mcc94 resulted part competition described ove93 well interest right atp system competition least examination issues involved competition provide insight general notion atp system evaluation long time testing evaluation atp systems ad hoc results published seldom provide accurate reflection intrinsic power atp system considered inadequate evaluation potential damage field research bad ideas may appear good thus adopted perpetuated 2 good ideas may appear bad hence discarded first step towards improving atp system evaluation release tptp problem library ssy94 ss96 common library problems necessary sufficient tool meaningful system evaluation also issues need careful consideration examination issues surrounding atp system competition goes fair way towards capturing requirements meaningful atp system evaluation noted using benchmarks test beds tptp problem library system evaluation requires special care see also hpc93 order benefit fully competition thoroughly organized event unambiguous motivated rules necessary one approach atp system competitions taken use term atp system refer functional unity represented implementation reasoning calculus control ie implementation proof procedure geoff thinks paramodulation example atp competition cade11 ove93 run specialized competitions specifically selected problems allows detailed analysis comparison proofs obtained atp systems provide realistic comparison atp systems terms general usefulness ove93 overbeek notes atp community never able formulate acceptable mechanism comparing different systems order comparison different atp systems make sense necessary systems attempting capture common notion truth described realist viewpoint pel91 given commonality across systems believe possible set rules competition determine winner relative clearly specified constraints issues relevant atp competition inevitable constraints emerge issues several choices decision made competition arising issues choices decisions described paper although paper focuses issues relevant experimental comparison atp systems important acknowledge contribution analytic approaches eg let93 dun94 pla94 approaches investigate metrics search space duplication search tree size herbrand multiplicity number variables bind connectivity propositional level analysis reasonably accurate thus important limited situation 1st order level analysis significantly difficult results obtained far insufficient complete analysis search guidance 1st order level course impossible otherwise 1st order logic would decidable reasons focused experimental comparison atp systems way meaningful judgements made competition issues four types issues resultant choices decisions relevant design atp system competition 1 issues based fundamental nature atp 2 issues associated common practice atp research 3 issues arising application atp systems 4 issues directly related competition overview issues discussed following sections given table 1 table also shows two types particular issue belongs according four types presented type issue atp system properties 23 degree automatization much user interaction allowed 23 soundness completeness soundness completeness affect evaluation 23 proofs satisfiability checking systems expected find proofs models 23 proof objects explicit proof objects required 12 monolithic compositional systems system structure matter problem presentation 12 scope logic logics eg classical modal allowed 12 builtin theories builtin theories eg equality allowed 23 input language input language eg cnf fof used 3 clause type information usage information acceptible clause literal orderings bias avoided problem selection 24 problem source problems come 4 problem difficulty difficult problems 24 problem axiomatization biases problem axiomatizations 4 number problems many problems used resource limits runtime limit apply per problem problems altogether runtime limit imposed 4 hardware software resources hardware software available competition system evaluation distinguished winner determined 23 performance metrics metrics used evaluation 34 ranking scheme performance metrics combined ranking table 1 relevant issues atp system competition design 3 atp system properties 31 degree automation users viewpoint atp systems two types fully automatic systems 3 interactive systems currently presumably future important application fully automatic atp systems embedded systems complex reasoning environments serve core inference engines setting shown figure 1 environment may call fully automatic atp system solve subtasks within operation overall system subtasks thus generated environment examples fully au 3 astrachan loveland al94 define three types fully automated deduction fad systems pure fad systems problem entered strong fad systems parameters set weak fad system many experiments parameters permitted adjustment requires restart beginning problem purposes discussion automatic atp systems pure strong fad systems weak fad systems considered interactive tomatic systems otter mcc94 setheo lsbb92 satchmo sgar clin series lp92 cp94 ale95 spass wgrar problem solution language transformers interface user management data system control fully automatic atp system atomic proof requests proofs models figure 1 embedding atp system reasoning environment interactive systems find application hardware software verification research bm90 hrs90 ors92 wg92 formalization informal mathematical proofs fgt90 pau90 teaching logic por94 tools mathematical metamathematical research 86 examples interactive systems nqthm bm90 nuprl cab systems typically embed form fully automatic atp system subsystem 4 example reasoning environments mentioned point user interactive system may ask subproblem submitted fully automatic component fully automatic interactive theorem proving systems important clear however two types system different terms competition would make sense compare fully automatic systems interactive systems qualities required two types largely distinct particular interactive system must judged largely ability assist user organization tracking complex proof objects ps94 fully automatic systems system runtime dominating issue may case atp system evaluation criteria independent whether systems automatic interactive however stage criteria clear thus atp competition compare either fully automatic systems interactive systems two types cannot compared many assessment criteria competition interactive theorem proving systems would subjective individual user abilities tastes would necessarily factor comparison criteria eg userfriendliness appear objective measure contrast criteria comparing fully automatic atp systems mostly objective described paper also recalling interactive systems typically embed fully automatic atp system subsystem comparison fully automatic subsystems interactive systems part comparison interactive systems 5 decision atp competition fully automatic atp systems 4 current stage interactive systems contain quite rudimentary simple theorem proving part justifiably effort spent development adequate logics proof tactics interfaces 5 today direct comparison fully automatic subsystems would difficult due human interaction allowed rest paper attention limited fully automatic atp systems referred simply atp systems note decision focus fully automatic systems exclude possibility competition semiautomated interactive systems indeed competition would interest difficulties involved adequately resolved consequence limitation fully automatic systems competition appreciate system properties relate human computer interaction therefore necessarily determine best human assistant rather competition assess pure reasoning capabilities nothing else 6 intention foster automation particular competition aims identify powerful general purpose deduction procedures encourage automatic problem analysis system configuration development deduction procedures focus atp research since inception certainly mature enough area evaluate hand automatic problem analysis system configuration underdeveloped various research groups much knowledge analyze problems configure groups atp system knowledge exploited atp system evaluated knowledgeable person manually configure system problem due common practice manual configuration effort capture implement problem analysis configuration techniques rarely taken implemented systems often feature strong reasoning components poor automatic control makes difficult users systems get best possible performance systems makes systems unsuitable use embedded systems hopefully atp competition encourage researchers formalize capture analysis configuration skills atp systems 32 system soundness completeness traditionally atp systems designed deductively sound complete every answer returned deductively correct solution exists eventually deduced however atp systems usually complex formally verify either property thus systems tested experimentally detect violations properties soundness assumed extensively tested systems least large number produced solutions verified completeness difficult assess reason inability find solution necessarily sign incompleteness problem could simply hard system fact due finite amount resources allocated particular atp system run every search solution limited completeness independent systems theoretical completeness special case incompleteness bugged atp system crashes problems question arises unsound andor incomplete andor bugged systems treated atp competition users point view little difference finding solution due system incompleteness finding solution due resource limit reached finding solution due system crash cases user learns nothing solution problem also positive aspects form failure resource limit reached user optimistically increase resources available although futile simplicity modular system design used isolated test easily possible 6 note success atp systems automated reasoning assistants depend usability nonexperts high usability dependence user interaction terms low level guidance needs minimized argues even interactive systems less low level interaction better resource limit reached due incompleteness supply resources typically cannot deal exponential growth demand system terminates quickly due incompleteness bug time saved hope system repaired practice bugged incomplete system may solve problems within time limit bug free complete system therefore may useful decision atp competition systems must sound may incomplete may bugged soundness competing systems assessed competition specific test problems systems found unsound excluded competition property associated soundness completeness stability atp system finds solution problem system must able find solution required atp systems simply get lucky little use repeatability testing also standard requirement scientific method decision every solution found atp competition solution process must reproducible running system randomness plays role reproducibility must still ensured eg using pseudorandom numbers recording seeds 33 proofs satisfiability checking two distinct classes problems may presented atp systems firstly problems require proof theorem secondly problems require satisfiability established via generation model types problem interest however mixing proof performance satisfiability assessment would blur interpretation competition results one reason blurring atp systems designed one purpose exceptions example ramcec algorithm bcp94 hyperlinking lp92 result comparison specialized systems different types arguable future dual purpose systems may developed case may necessary divide work profile competition case thus work profile competition require theorem proving model generation historically emphasis placed ability find proofs therefore considered important issue albeit case applications atp competition focus theorem proving performance order implement decision theorems used see section 51 34 proof objects depending generality purpose various responses atp system may make given problem proof model may returned assurance proof model exists may given atp systems eg completion based systems conserve resources building proof object search systems merely retain enough information build proof object later required atp systems eg model generation systems able build proof object give assurance proof exists evidence usage atp system embedded system typically either requires require delivery proof objects models desirable make atp competition accessible many atp systems possible decision atp competition require atp systems return proof objects soundness testing see section 32 ensure competing systems make invalid claims found proof decision evidently gives bias towards systems build proof object bias considered slight justified terms extending scope competition however added functionality atp systems produce proof objects acknowledged decision presentation atp competition results noted systems produce complete proof objects 35 monolithic compositional systems today large number different calculi inference rules proof procedures exist ideally atp system would known techniques available would particular solution search switch back forth suitable techniques first steps direction atp systems formed collection different proof procedures analyze given problem order decide procedure inference rules use well known example type system otter autonomous mode mcc94 enables disables inference rules according check whether problem propositional whether horn whether contains equality andor equality axioms atp system components chosen alternatives others based given problems characteristics called monolithic atp system atp system runs one several possible distinct monolithic systems determined given problems characteristics called compositional system combining several monolithic systems parallel manner also results compositional system definition limit monolithic systems single calculus rule inference requires switching back forth different calculi andor rules done integrated way occurs continuously proof process 7 compositional systems provide valuable approach building versatile systems compositional systems expected outperform monolithic systems conversely monolithic systems improved integrating specialized components altogether construction compositional systems monolithic systems valuable research compositional systems improve knowledge approach best problems research monolithic systems push performance uniform approaches form core compositional systems limit 8 results may one day lead type monolithic system integrates available techniques altogether competition put either approaches disadvantage decision atp competition two categories open includes types systems monolithic includes monolithic systems controversy category system belongs resolved competition panel see section 71 4 problem presentation 41 scope logic many hot logics atp research higher order logics modal logics temporal logics interesting sufficient research done support comparison atp 7 rigid definitions monolithic compositional systems seem hardly possible formal definition made seems atp system violates intuitive notion contrived 8 issue also viewed evaluation viewpoint goal evaluating system simply see well performs also learn achieves observed performance difficult compositional systems therefore desirable obtain evaluations individual components well phi phi phi phi phi phi 1st order phi phi phi phi phi phi propositional nonpropositional noequality pureequality mixed unit nonunit figure 2 classification 1st order logic problems systems within many logics well common classical logics however comparison atp systems across logics would unlikely make sense several reasons types output expected performance vary logic logic different logics may different semantics specific logics may particularly designed specific applications making fair problem selection difficult thus problems competition include problems one one logic widespread use 1st order logic atp suggests starting point specialized competitions logics still occur future furthermore transformation techniques eg ker91 ohl91 allow use 1st order logic atp systems solving problems logics decision atp competition restricted theorems expressed classical 1st order logic classical 1st order logic subdivided shown figure 2 leaves figure 2 correspond syntactically identifiable problem classes trivial determine class given problem belongs would possible use problems classes together different competition categories classes problem classes specialist atp systems employ appropriate tech niques exist specialist systems expected perform better problems class systems specialized class best overall atp system built easily choosing best system problem class using trivial switch invoke appropriate system trivial switch systems high interest users provide better overall performance components competition however little interest evaluating actual switches within systems due simplicity thus overall performance evaluation systems desirable instead better evaluate component systems separately conclude overall performance achievable combination decision specific problem classes 1st order logic according classification specialist atp systems exist treated separate categories atp competition ideally atp competition would separate categories problem classes however merging omitting classes may still appropriate development specialized atp systems propositional logic largely separated atp nonpropositional logic separate specialized competitions evaluating propositional systems 9 need duplicate competitions decision category propositional problems atp competition original competition announcement noequality mixed problem classes merged following reasons firstly systems include specialized equality treatment 9 next event international competition symposium satisfiability testing held beijing china typically competitive noequality problems therefore evaluated problems secondly natural formulation many interesting problems involves equality therefore stateoftheart atp systems include specialized equality treatment motivations indicate acceptable keep two classes merged desirable competition maintain announced format decision noequality mixed problem categories combined atp competition pure equality problems known atp community written clause normal form see section 43 unit equality problems specialized unit equality atp systems cannot handle format problem necessary separate category systems decision separate category unit equality problems atp competition nonunit pure equality systems able handle noequality mixed problems translating problems pure equality able compete noequality mixed systems even disadvantage extent currently unknown small number commonly known nonunit pure equality problems seems insufficient separate category decision noequality mixed nonunit pure equality problem categories combined atp competition 10 42 builtin theories theory built atp system rather expressing set axioms eg equality theory approach chosen order provide specialized hopefully efficient treatment theory systems capable specialized action put disadvantage including axioms unnecessary decision atp competition theory axioms built atp system removed input atp system using automatic tool 43 input language problems submitted atp system may expressed full first order form possibly constrained subset 1st order logic clause normal form cnf therefore atp system must general able deal fof examination current atp systems reveals three possible approaches see figure 3 ffl nonspecialized clausifier used convert submitted problems cnf atp system uses cnf versions problems cnf systems ffl specialized clausifier prepended cnf atp system combined system deals submitted problems directly clausifying systems ffl atp system processing fof thus deals submitted problems directly systems comparison cnf systems fof systems sensible cnf systems disadvantaged fof problems used fof systems disadvantaged cnf problems used comparison fof systems clausifying systems possible using fof problems comparison cnf systems clausifying systems possible using cnf problems comparison cnf systems clausifying systems would constitute comparison clausifiers well comparison atp systems basic theorem proving capabilities future atp competitions categories separate nonspecialized clausifier atomic proof requests fof system cnf proofs models clauses atomic proof requests fof system cnf specialized clausifier proofs models proofs models atomic proof requests fof fof system figure 3 alternative system designs regarding input language would blur interpretation results also current atp research dominated cnf systems applications generate cnf problems directly eg test pattern generation electronic circuits factors indicate cnf competition particularly viable decision atp competition use theorems expressed clause normal form constraint exclude two types atp systems competition however systems able take advantage abilities deal fof problems 11 cnf problems either horn nonhorn particular techniques designed solving type way different classes problems shown figure 2 treated separately ideally horn nonhorn problems treated separately clear techniques best type problem atp systems nonhorn problems perform well horn problems nonhorn problems handled well systems designed horn problems corpus atp systems specialized either type problem switch systems classifying problems horn nonhorn easy selecting superior specialists either type decision horn nonhorn problems used together atp competition 44 clause type information clause cnf problem may classified depending whether part conjecture part assumptions made part underlying theory clause type information may useful atp system application atp systems information typically available therefore used decision systems may use clause type information atp competition 11 competition using fof problems planned future established quality cnf atp systems competition developers able spend time building specialized clausifying programs ready subsequent fof competition 45 clause literal orderings possible source bias competition particular ordering clauses within problem literals within clauses system evaluation necessary ensure pretuning possibly accidental particular clause literal order benefit decision atp competition random clause literal orderings used clause literal ordering used systems 5 problem selection 51 problem source several possible sources unsatisfiable sets clauses used atp competition competition could use problems supplied entrants could use problems selected commonly used atp community could use new problems designed especially competition options entrants supply problems would almost inevitably supply pathological cases atp system particularly effective difficult com petitors problems would reflect real work profile atp systems ability entrant make selections would influence results designing new problems competition would acceptable requires additional effort could still unintention ally biased towards particular system using problems atp community extent reflect common usage atp systems tptp problem library ssy94 ss96 contains broad selection cnf theorems required decision unsatisfiable sets clauses used atp competition selected tptp problem library 12 tptp2x utility distributed tptp problem library used remove unnecessary equality axioms see section 42 reorder problem clauses literals see section 45 tptp2x utility used produce pure equality representation problems nonunit pure equality systems see section 41 tptp problems provide clause type information see section 44 use clause type information possible either directly reading tptp problem indirectly using tptp2x formatting option takes clause type information account see ss96 details principle knowing problem source allows problemspecific information precomputed accessed competition extreme proof lookup activity contrary purpose competition disallowed global optimization atp system tptp acceptable optimization seems likely work well general technique due size scope tptp 52 problem difficulty tptp problem library contains broad selection problems cnf unsatisfiable sets clauses required suitably difficult problems must selected 12 sense entrants influence problem selection submission problems tptp however due selection process constitutes weak influence competition tptp rating system categorizes problems follows solvable stateoftheart atp systems difficult solvable stateoftheart atp systems unsolved solvable stateoftheart atp systems 4 open theoremhood unknown stateoftheart atp systems means specialist atp systems class problem according extended version classification given section 41 using easy problems would differentiate sufficiently systems performances hand theorem must provable least systems decision atp competition use tptp problems difficulty rating 2 53 problem axiomatization many problems tptp problem library taken publications existing problem libraries theorems contain axioms necessary particular proof contain lemmas assist proof also axioms often selected suit particular atp system therefore biased towards system problem using nonstandard axiomatization tptp provides version problem using standard axiomatization containing axioms lemmas use standard axiomatization desirable reflects typical initial situation formulating new problem also avoids bias towards particular system decision standard versions tptp problems used atp competition 54 number problems ideally atp system would evaluated using eligible tptp problems however limited time hardware resources available determine maximal number problems 13 time minimal number problems necessary meaningful system evaluation number problems used needs determined minimal number problems determined ensure sufficient confidence say 85 competition results would obtained using eligible problems evaluation based number problems solved essentially case ranking schemes used atp competition see section 73 assuming worst case proportion problems solved 50 computed first computing n 0 minimal number assuming infinite number eligible problems adjusting actual number eligible problems follows wad90 decision minimal number problems used atp competition 13 complete evaluation pursued larger time frame interesting project available tptp result data various systems collected ss95 results however difficult compare obtained differing constraints differing hardware platforms min number problems 2304 theta number eligible problems number eligible problems rating tptp problems currently completed number eligible problems hence minimal number problems determined maximal number problems determined resources available competition number workstations total time number atp systems competing minimal time limit imposed proof attempt see section 61 maximal number problems used atp competition number problems number workstations theta time competition number atp systems theta minimal time limit 6 resource limits 61 time resource problems may presented atp system oneatatime batches cases atp system deliver results within time limit also time available competition limited thus necessary impose time limit competition either individual proof attempts total time proof attempts problems presented batch overall time limit used allow atp systems examine problems perform onceonly tuning starting proof attempts terms competition overall time limit would simplify winner assessment system proves theorems within time limit winner one system proves number theorems total time taken prove theorems compared ranking scheme adapted ranking scheme section 73 applications atp systems problems likely presented oneatatime problems generated even atp system presented batch problems likely treated individually requiring individual time limits decide unsuccessful attempt find solution abandoned 14 also evaluation based individual time limits still provides relevant performance information batch case vice versa decision atp competition time limit imposed individual proof attempts minimal time limit necessary atp systems spend say 95 time proof search ensures deductive capabilities compared rather initialization termination efficiencies nonproof time atp system estimated measuring time takes prove trivial theorem eg p geometric average systems nonproof times taken determine non proof time ensure systems spend 95 time searching proof minimal time limit non proof time theta 20 time limit imposed proof attempt depends resources available competition number atp systems number problems turn determined minimal time limit see section 54 decision time limit imposed proof attempt atp competition 14 processing problems single processor via multiprogramming would require imdividual time limits realistically allows many proving processes fit memory number workstations theta time competition number atp systems theta number problems way number problems determined section 54 ensures time limit minimal time limit section 72 explained granularity timing one second thus minimal non proof time one second time limit seconds important note imposition time limit means competition results viewed modulo time limit different time limit may produce different ranking systems results could computed range time limits time limit used may give insight relative abilities systems ranking remains stable reasonable range time limits provides empirical evidence ranking reflects time limit independent ranking atp systems decision atp competition results plotted function time limit 62 hardware software resources atp systems developed using wide range hardware software resources commonly used computers atp research unix based workstations many current atp systems made run workstations hardware used includes pcs lisp machines parallel computers distributed networks computers atp competition could limit common workstation environment could allow use hardware running atp systems hardware allows direct comparison systems thus preferred environment atp competition host institution competition able provide homogeneous set unix workstations thus making option available however atp systems specially designed particular computer cannot easily ported host institution unable supply range specialized hardware atp systems could use although direct comparison atp systems running widely disparate hardware meaningful performance data systems allow comparison overall performance users perspective since would interest atp community see performance systems atp systems run specialized hardware need catered atp competition decision atp competition categories divided two subcategories general hardware special hardware atp systems general hardware subcategories executed type unix workstation supplied host institution atp systems special hardware subcategories allowed use hardware brought competition accessible via internet common languages used implement atp systems c prolog lisp languages also used atp competition major difference implementation languages whether code interpreted often case prolog lisp compiled machine code c atp systems run interpreted environment disadvantaged time taken start interpreter relative slowness interpreters compared compiled code would possible provide separate categories two types implementation implementation environments fall clearly one two types many vendors prolog lisp interpreters also provide compilers thus alleviating problems least extent also important acknowledge effort taken code atp system language c benefit derived competition concerned languages used implement atp systems 7 system evaluation 71 winner assessment arguable overall winner assessed reason potential entrants may frightened fact system may believed perform better atp competition could avoid problem simply reporting performance data atp systems allowing observers draw conclusions determining winner would leave much spice competition would remove much motivation improving capabilities current systems 15 must remembered assessment done competition respect decisions made paper ie winner may best atp system general sense rather ranking simply provide feedback potential users system currently adequate particular use useful byproduct competition charting performance data may reveal interesting properties systems win decision atp competition determine specific ranking atp systems present listing performance data two possible ways determining ranking quantitative ranking scheme judging panel quantitative ranking scheme implemented mechanically computer program robojudge described akk93 checked bias little flexibility judging panel flexible take account aspects impose intuitive judgment results benefits approaches desirable decision ranking atp systems atp competition done quantitatively evaluating system performance evaluation vetted panel atp researchers 72 performance metrics many criteria atp systems evaluated issues completeness soundness correctness proof performance direct interest atp researchers soundness correctness required insofar falsely stating theoremhood non theorem renders system untrustworthy therefore useless completeness plays role insofar systems capable proving theorems ranked higher systems proving less incomplete systems systems fail find proof due resource constraints crash bugged must compared see section 32 proof performance measured many ways including runtime number inference steps proof size proof tree depth proofs represented trees broader context computing science issues software quality portability modularity user friendliness execution environment etc may also interest necessary decide criteria used evaluate atp systems atp competition would train hard olympics could stand pedestal panel consist peter andrews alan bundy jeff pelletier broader issues computer science lesser interest atp community factoring evaluation would blur focus atp also generally accepted metrics exist broad issues evaluation would become matter taste decision atp competition evaluate atp systems terms issues directly relevant atp community quantitative ranking scheme needs observe performance metrics atp systems combine values produce ranking systems quantitative performance metrics available evaluation ffl calculusrelative measures number inferences performed ideally split according inference rules used number unifications performed ideally split failed succeeded unifications proof size eg length depth ffl absolute measures number problems solved runtime possibly split startup time search time memory usage purposes atp competition measures used must independent atp systems values meaningfully compared measures number inference steps proof length suitable units measure vary calculus calculus implementation implementation system independent measures readily obtained number problems solved runtime memory usage number problems solved runtime direct indicators quality atp system memory usage important far affect runtime atp system requires less available memory effect runtime negligible atp system requires available memory either system cannot handle problem swapping increases wallclock time computation therefore effect memory usage subsumed proper definition runtime decision number problems solved runtime used winner assessment atp competition memory usage also recorded presented two reasonable ways measuring runtime cpu time taken wallclock time taken advantage cpu time easy measure independent system influences external load daemon processes memory size disc performance however cpu time seems inappropriate swapping occurs reflect users perception runtime wallclock time takes swapping account dependent system influences therefore difficult measure reproducible manner developers viewpoint cpu time interesting users viewpoint wallclock time relevant decision runtime cpu time wallclock time measured reported atp competition general hardware category choice time measurement used winner assessment depend computing environment swapping occurs decision general hardware category cpu time used winner assessment swapping occur wallclock time measurements stable representative time required computation essentially cpu time plus time required swapping decision time used winner assessment otherwise decision cpu time plus estimate swapping time used winner assessment special hardware category cpu timings typically incomparable contrast wallclock times compared context hardware used decision special hardware category wallclock time used winner assessment precision time measurement computer system limited order reduce effect emphasize significant rather marginal differences competition timing discrete decision atp competition timing done units one second particular minimal time system take find proof one second 73 ranking schemes atp competition must ranking scheme combines performance metrics produce ranking atp systems ranking scheme must certain properties monotonicity requirements ffl ranking improves number problems solved increases ffl ranking improves time taken solve problems decreases required invariants ffl systems solve number problems one takes least time solve obtains better ranking ffl systems take amount time one solves problems obtains better ranking ffl systems solve number problems total amount time obtain ranking issue combine performance metrics obtain ranking scheme contentious one two different quantitative schemes determining system ranking representing different emphases number problems solved time taken developed schemes higher scores better schemes use total time takenas parameter value sum time taken problems including proof found case time limit used ranking scheme ranking scheme focusses ability find many solutions possible idea rank systems according number problems solved differentiate considering number erroneous claims proof exists number system errors runtime since erroneous claims system errors full time limit used system runtime considering runtime accounts latter issues thus system given score number problems solved gamma total time taken gamma best total time taken best total time taken least total time taken system solves number problems number problems theta time limit achievable scores range 0 number theorems ranking scheme b scheme measures solutions per unit time system given score number problems solved total time taken achievable scores range 0 1 schemes place different emphasis two performance metrics scheme puts emphasis number problems solved scheme b balances emphasis difference lead different rankings atp systems scheme system solves problems win scheme b necessarily ranking scheme suits specific user requirements thus neither ignored decision atp competition competition category winner according scheme winner according scheme b determined well scheme specific rankings overall assessment desirable however attempt combine scores schemes requires tradeoff two metrics number problems solved time taken particular tradeoff unlikely acceptable everyone however particular atp system winner schemes superior terms performance metrics atp competition iff single system winner category according schemes b overall winner category note one atp system registered particular category winner announced category results system still presented example example table 2 gives system runtime values denotes unsolved problem example designed illustrate differences schemes extent scheme produces different ranking systems also shows scores rankings produced different schemes assuming time limit 20 system runtime problem scores scheme ranking scheme 2 1 2 table 2 example showing runtimes three different systems five different problems unscaled scores rankings produced ranking schemes 8 conclusion numerous issues need resolved organizing useful competition impossibility making indisputable decision several cases becomes clear alternative competition designs possible however believe rationally planned competition provide benefits hoped section 1 see clear potential improved future competitions extending scope additional coverage fof systems instead cnf systems model generation instead theorem proving important issues however seems preferable start core design competition add extensions experience gained 30 years research automated theorem proving abounds techniques developed ideas proposed future requires techniques ideas evaluated determine viable integrate systems far flexible simple monolithic compositional systems available today important challenge ahead theorem proving research provide adequate control subject still infancy since difficult approach theoretically goals system evaluation crucial research tool competitions one provide stimulus insight lay basis development future atp systems acknowledgments indebted many researchers discussed commented ideas especially alan bundy bertram fronhofer reinhold letz bill mccune david plaisted christoph weidenbach r internet programming contest report philosophy measuring performance automated theorem provers proving firstorder equality theorems hyperlinking method building models automati cally theorem prover computational logic implementing mathematics nuprl proof development system 4th dimacs interantional algorithm implementation challenge semantically guided firstorder theorem proving using hyperlinking acm scholastic programming contest year1977year year1990year 2nd annual prolog programming contest search space proof complexity theorem proving strategies imps interactive mathematical proof system introduction hol controlled experimentation design agent architectures tactical theorem proving program verification prove higher order theorems first order logic polynomial transparency resolution eliminating duplication hyperlinking strat egy otter 30 reference manual guide 3 inductive learning com petitions 24th acm international computer chess championship based translation methods modal logics pvs prototype verification system cade11 competitions personal view next 700 theorem provers philosophy automated theorem proving search efficiency theorem proving strategies automated advice fitchstyle proof construction theorem proving interactive verification systems efficient model generation compilation atp system results tptp problem library upto tptp v1 tptp problem library tptp v1 tptp problem library handbook statistical methods engineers scientists rvf automated formal verification system automated reasoning contributes mathematics logic tr ctr geoff sutcliffe christian suttner procedures cade13 atp system competition journal automated reasoning v18 n2 p163169 april 1997 geoff sutcliffe christian suttner results cade13 atp system competition journal automated reasoning v18 n2 p271286 april 1997 francis jeffry pelletier geoff sutcliffe christian suttner conclusions cade13 atp system competition journal automated reasoning v18 n2 p287296 april 1997 g sutcliffe c b suttner cade15 atp system competition journal automated reasoning v23 n1 p123 july 1999 francis jeffry pelletier geoff sutcliffe christian suttner development casc ai communications v15 n2 p7990 september 2002 francis jeffry pelletier geoff sutcliffe christian suttner development casc ai communications v15 n23 p7990 august 2002 g sutcliffe cade17 atp system competition journal automated reasoning v27 n3 p227250 october 2001 geoff sutcliffe cade16 atp system competition journal automated reasoning v24 n3 p371396 april 2000 christian suttner geoff sutcliffe cade14 atp system competition journal automated reasoning v21 n1 p99134 august 1998