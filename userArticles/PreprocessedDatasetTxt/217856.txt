production playback human figure motion visual simulation describe system offline production realtime playback motion articulated human figures 3d virtual environments key notion 1 logical storage fullbody motion posture graphs provides simple motion access method playback 2 mapping motions high dof figures lower dof figures using slaving provide human models several levels detail geometry articulation later playback present system context simple problem animating human figures distributed simulation using dis protocols communicating human state information also discuss several related techniques realtime animation articulated figures visual simulation b introduction ability render realistic motion essential part many virtual environment visual simulation applications nowhere true virtual worlds containing simulated humans whether human figures represent users virtual personae avatars computercontrolled characters peoples innate sensitivity looks natural respect human motion demands least moving characters updated new frame image generator produces first discuss topical problem visual simulation requires realtime rendering realistic human motion describe system authoring motion offline playing back motion real time also address issues realtime image generation highlyarticulated figures well look several methods used realtime animation human motion dis problem interested generating displaying motion human figures particular soldiers distributed virtual environment parts general problem need representing simulated soldiers referred dismounted infantry dis covered 21 5 although primarily driven military requirements today general technologies projecting real humans representing simulated humans within virtual environ ments widely applicable industry entertainment commerce near future distributed interactive simulation dis 9 protocol used defining communicating human state information distributed virtual environment typical distributed simulation contains many simulation hosts concerned simulating portion subset objects entities involved simulation entity refer human figure vehicle part environment processes involved simulation dis defines protocol heterogeneous simulation applications inter operate typically realtime simulation battlefield operations defines packets information referred protocol data units pdus set rules exchanging packets simulation applications goal achieving shared correlated synthetic environment applications good example software structure inside simulation application environment reader referred 13 simple example configuration distributed simulation shown fig 1 simulator runs simulation soldier entity moving across terrain particularly interested done paper example system would safdi system 17 soldier moves simulator image generator motion network pdus simulator simulator figure 1 simple distributed simulation essential state information propagated time simulator b via stream entity state pdus simulator b monitors stream updates internal state information concerning soldier simulator b also image generator component visually display simulated environment entities paper interested part system simulator b used create animations soldier figure image generator according stream pdus coming simulator note simulator b may simulating set soldiers whose state information would propagated back simulator via mechanisms techniques used paper animating human figure disbased distributed simulation introduce several issues relating latency coherence soldiers state information simulator b interested reader referred 16 dis protocol least part relating human entities early stages development fairly limited specify human figure 16 good baseline start information representing human entity currently defined several discrete enumerations appearance field entity state protocol data unit pdu dis protocol 10 relevant information interested entity state pdu shown fig 2 human always one four postures along weapon state heading defines forward direction although enumerations walking crawling use combinations posturestandingvelocity0 equivalent walking running although protocol allows three weapons different types soldier modeled one rifle human n possible postures potentially n 2 transitions postures rather create n 2 posture transitions encode postures transitions posture graph 1 graph defines motion path traverse move human figure one posture field value units posture standing kneeling prone dead na weapon deployed firing na position meters heading theta degrees figure 2 essential human state information dis entity state pdu another graphs directed may include cycles also provides logical structure runtime motion database posture graph using shown fig 3 partitioned two subgraphs facilitating discussion dotted lines around standing deployed prone deployed nodes merely represent duplicate nodes diagram similarly labeled nodes solid lines attached via dotted line velocity human zero possible transitions fixed postures encoded righthand posture graph fig 3 use term fixed descriptive graph used typically soldier figure transitions one fixed postures represented node stays fixed posture time actual fixed postures shown fig 4 velocity figure nonzero possible transitions locomotion postures shown lefthand posture graph fig 3 graph nodes static postures figure would never posture one frame posture graph nodes represent postures directed arcs represent animated fullbody transitions movements posture posture arc stores intermediate postures motion associated time traversal time associated transition arc used find shortest path time one path exists starting posture goal posture human figure always posture defined node one intermediate postures defined along arcs useful analogy visualizing graph shown fig 5 three strips film pasted together representing three arcs graph converging node shared frame middle left sequence stick figure raising left arm looking upper sequence raising backwards walking backwards right foot forward forward walking forwards walking forwards dead walking locomotion subgraph standing deployed right foot forward running running forward forward forward right foot standing kneeling deployed deployed deployed standing firing kneeling firing crawling firing prone prone crawling prone deployed implicit arc every node fixed subgraph figure 3 posture graph dotted lines represent duplicated nodes discussion dashed line partitions graph left sub graph refered locomotion graph right subgraph referred fixed posture graph figure 4 postures soldier take dis right foot right sequence waving left arm motion individual arcs graph similar notion animation tracks described 6 putting many tracks together common starting ending frames form posture graph system built consists two distinct parts 1 offline motion data generator 2 online realtime playback mechanism running highperformance iris performerbased 18 image generator application 3 offline motion production motion production involves three steps 1 creating postures motion node arc posture graph one human model 2 mapping resulting motion onto human models lower degreesoffreedom dof lower resolution geometry finally recording results storing format easy retrieval playback 31 authoring motion first step producing motion realtime playback create postures representing nodes posture graphs well corresponding motions represented directed arcs graphs used arc node figure 5 nodes arcs posture graph seen strips film slightly modified version jack human modeling animation system 2 purpose jack provides nice constraintbased goaldriven system relying heavily inversekinematics primitive behavioral controls animating human figures well facilities organizing motions general posture interpolation 1 important note posture graphs presented paper differ posture transition graphs presented 1 latter posture transition graphs used organize motion primitives general posture interpolation collision avoidance former application paper posture graphs logical mechanism organizing database prerecorded motion determining motion sequences paths nodes graph underlying assumption posture graphs articulated human figures motion continuous therefore organized connected graph directed transition fixed posture graph typically produced 10 15 motion primitives eg move arm bend torso etc many directed motions posture node posture node b simply run reverse get corresponding motion posture b posture several cases reverse motion scripted explicitly natural results human figure also move either forwards backwards depending difference heading direction velocity vector either locomoting posture standing crawling posture prone locomotion posture graph transitions fig 3 generated hyeongseok kos walking system 11 six strides type walking transition humanhigh humanmed humanlow polygons 2400 500 120 rigid segments 69 19 12 joints 73 17 11 dofs 134 50 21 motion 60hz 30hz 15hz figure different levels detail human models generated forward walking backward walking running left right starting steps left right ending steps left right cyclic steps crawling animation generated manually based two animations one goes prone posture cyclic state one complete cyclic motion note straight line locomotion fixed stride modeled currently working extending system handle variable stride length curved path locomotion possible system 11 32 slaving second step production process concerned preparing motion realtime playback system wish tens potentially hundreds simulated humans virtual environment necessitates multiple levelofdetail lod models higher resolution models rendered close viewpoint lower resolution models used farther away see section 41 reasoning reduce level detail geometry articulation creating lowerresolution geometry articulation human figures characteristics listed table fig 5 motions postures first step authored relatively high resolution human body model includes fully articulated hands spine model referred humanhigh table manually created two lowerresolution models humanmed human low difference internal joint structure humanhigh lower lod models motions cannot controlled available human control routines jack make assumptions structure human figure assume structure similar humanhigh instead controlling motion directly use motion scripts generated first step control motion humanhigh map motion onto lower resolution humanmed humanlow call process slaving high resolution figure acts master low resolution figure acts slave figure 7 humanhigh humanmed models slaving humanhigh master upper window skeletal articulation models offset illustrative purposes even though different lod human models different internal joint structures segment shapes gross dimensions eg length arms torso etc similar slaving process consists interpolating motions full human figure generating inbetween frames simultaneously lower lod human model humanmed humanlow slaved saving inbetween frames soldier describe process used slaving humanhigh humanmed case humanlow similar frame animation first compute position joint angles humanhigh approximation joint angles human med computed straightforward certain joints elbow example one dof human models others approximated linear combinations example 35 dofs spine humanhigh summed mapped directly onto 7 dof torso humanmed gives good first approximation posture mapping provides initial configuration final mapping resulting motion humanmed look correct need certain landmark sites two bodies match exactly hands must rifle final mapping step involves solving set constraints pointtopoint orientation bring key landmark sites alignment constraints solved using iterative inverse kinematics routine 23 move body parts alignment differences geometry master slave general cannot expect landmark sites match exactly problem domain paper animating soldier figure stream dis entity state pdus hands always holding rifle matching hand positions accurately master important otherwise slaves hands may penetrate rifle using priority scheme evaluating constraints assign higher priority handmatching constraints others account fact slaving procedure cannot fit master slave within certain tolerance generate warning animator 33 recording final step motion production process record resulting motions human figures recorded motion one transition referred channel set joint figure position referred channel channel indexed time channel set analogous animation track 6 lod human figure homogeneous transform recorded representing figure position relative fixed point joint joint angles recorded one angle per dof also joints composite joint transform precomputed stored 4x4 matrix plugged directly parenting hierarchy visual database runtime system channel set associated transition time channels humanhigh interpolated stored 60hz humanmed 30hz humanlow 15hz rates correspond motion sampling playback see 4 realtime motion playback realtime playback functions packaged single linkable library intended embedded host iris performerbased visual simulation ap plication library loads posture graphs shown fig 4 well associated channel set motion files one set motions loaded shared amongst number soldier figures managed library articulated soldier figures loaded performer runtime vi visual database process process process motion network motion database process edits dis pdus pdu motion frames figure 8 overview multiprocessing framework runtime system circles processes roundedsquares data structures arrows data flows sual database library runs separate process motion process serving motion data app process app cull draw process defined performer multiprocessing framework form software rendering pipeline increases rendering throughput also latency see fig 8 schematic overview runtime system app process main controlling process would simulation processing would occur good description goes app process typical disbased simulation application reader referred 13 update function app process provided maps joint angle values joint transforms soldier figures performer visual database app process receives pdus containing state information remotely simulated soldier figures extracts essential information shown fig 2 sends requests motion process motion process translates requests playbacks channel sets traversal arcs posture graphs continuously sends joint angle packets back app process app process performs necessary edits articulation matrices visual database initiates frame rendered cull draw processes form software rendering pipeline cull culls visual database viewing frustum passes modified database draw process efficiently feeds head hardware graphics rendering pipeline renders final image frame buffer case fixed posture change motion two nodes fixed posture graph figure 3 system find shortest path defined traversal time current goal postures graph execute sequence transitions example posture graph currently standing deployed prone firing requested transition stand deployed crawl prone deployed finally prone firing dead posture node fig 3 special implicit arc every node graph node motion along implicit arcs recorded stored along arcs generated fly via simple joint interpolations posture change made node fixed graph destination upon receipt dis entity state pdu indicating agent posture absence information agent remains posture conversely posture change made node locomotion graph destination something occur pdu indicates agent nonzero speed agent remain posture reached absence information case means agents speed still nonzero hence agent must take another step crawl another meter forwards whatever appropriate current mode locomotion continued motion requires another posture change made immediately simple finitestate controller manages posture transitions within locomotion graph instance transition standing deployed walking forwards left foot forward taken whenever agents speed becomes nonzero agents heading vector agrees velocity vector hand vectors pointing approximately direction transition instead made one walking backwards states agents speed remains nonzero assumed absence pdu updates controller continually makes transitions back forth example walking forwards left foot forward walking forwards right foot forward nodes cycle transitions creates smooth walking motion concatenating successive left right steps note since currently cycles two nodes finding shortest path postures cycle trivial matter crawling handled similarly though simpler case need separate left foot forward right foot forward states system samples prerecorded motion using elapsed time guaranteed always play back real time 2 second posture transition recorded 60fps current frame rate image generator 20fps playback system would play frames 0 3 6 120 recomputes elapsed transition time every frame case frame rate image generator uniform motion frame update packets sent motion process back app process packaged include joint angles changed last update one way minimize joint angle updates take advantage frametoframe coherence stored motions 2 full update joint angles figure positions 400 bytes 41 motion levelofdetail recognized maintaining constant frame rate essential believability simulation even means accepting update speed bounded complex scene rendered automatic geometric levelofdetail selection supported iris performer toolkit wellknown technique dynamically responding graphics load selecting version model appropriate current viewing context 4 7 20 lod selection within visual database seeks minimize polygon flow rendering pipeline software cull draw components software pipeline well transformation engines within hardware pipeline given representation enforces separation geometry motion possible expand level detail selection temporal main motion levelofdetail selection addition reducing polygon flow via selecting lower lod geometric models also selecting lower lod articulation models fewer articulation matrices well sampling motion lower frequencies reduces flow motion updates joint angles matrices articulation matrices visual database models using listed fig 32 example motion sequence lasting 1 second rendered humanhigh would generate jointupdates humanlow motion sequence generates 11 joints1 second15 jointupdates techniques employ data represented various resolutions sometimes referred multiresolution multiscale techniques analyses working images resolution scale factor usually two ie image would represented 256x256 128x128 64x64 etc working successive levelsofdetail geometry scale factor orderofmagnitude ie geometric model 1000 triangles 100 triangles 10 triangles chose scale factor 2 60hz 30hz 15hz recorded motions wasnt tremendous amount deep thought behind choice seem work well current application rigorous selection initial implementation playback library run independent process another machine host image generator joint angle packets sent tcpip stream sockets hence desire minimize net traffic frequencies taking account rules sampling done future playback system simultaneously transition different geometric representation simpler articulation structure switch stored motions articulation model gain performance image genera tor consuming runtime storage space motions metric lod selection simply distance virtual camera appears work satisfactorily current application domain evaluation technique well sophisticated selection metrics eg metrics described 7 4 need explored 5 example implementations uses realtime playback system used two disbased applications create motion simulated soldiers virtual environments team tactical engagement simulator 21 projects one soldiers virtual environment may engage hostile forces practice coordinated team activities see fig 9 sample view training environment soldier stands front large projection screen view environment sensor head one weapon locomotes environment stepping resistive pad controls direction movement field gaze turning head soldier may also move movement pad view frustum updated accordingly based eye position headcoupled display allows soldier example crouch see parked vehicle peek around corner building still affording protection building ttes also creates necessary dis entity state pdus represent real soldier mapping sensor values small set postures entity state pdu sends net ttes stations participating exercise currently ttes uses extension system described paper initially used authored motions posture graphs currently use motioncapture data work done boston dynamics inc 15 joint angle motion real soldiers moving postures captured via attached magnetic optical sensors cleaned postprocessing filters playback system also used version npsnetiv 5 system generating motion simnet discontrolled soldier entities well motions battlefield medics motion levelofdetail selection particular relevance example projects described situation hostile agent enters field view soldier one real human participants brings weapon deployed position hostiles actions probably noted participants peripheral vision wellknown humans figure 9 view battle town several soldiers different postures detect presence motion peripheral vision easily resolution detail low headtracking data available headmounted display use possible designate areas viewing frustum peripheral reduce geometric motion detail accordingly based linear distance camera angular offsets also ttes environment focus attention information obtained aim real soldiers rifle raised position real soldier almost certainly sighting situation system also integrated behavioral simulation navigate pedestrian agent simple urban environment respecting sidewalks crosswalks streetlights pedestrians behavioral simulation decoupled motion generation simply schedules steps pedestrian motion system described creates smoothly locomoting human figure 8 6 comparison productionplayback methods one obvious criteria evaluating given motion representation clear progression methods used animate humans whose geometric representation varies time based amount space required store given motion look three methods first method requiring storage involves generating rendering movements characters offline fashion framebyframe sequence twodimensional snapshots captured saved later play back image generator displays bitmapped frames sequence possibly texture maps simple rectangular polygons hardware support texture mapping alpha blending transparent background areas texture bitmaps make attractive fast playback scheme fur thermore mipmapping takes care levelofdetail management must programmed explicitly representations since stored images two dimensional frequently case artists draw frame hand fact precisely approach utilized video games many years clear little computation required runtime altering motions incurs high cost cannot done real time fact modifying almost parameter except playback speed must done offline even playback speed adjustments limited recording frequency however one real problem using twodimensional recording playback threedimensional scene nonsymmetric characters require generation several many sets frames one possible viewing angle increasing storage requirements still authors popular game doom 19 record eight views animated character frame digitizing pictures movable models run time appropriate frames current viewing angle approximately pasted onto polygon eight views give limited number realistic viewing angles impossible instance view doom creature directly interestingly enough article plans followup doom reveals authors intend switch one two remaining representations describe unlike previous games graphic representation characters polygon models coarse texture mapping make hard emulate natural locomotion theyll stay away creating many biped characters22 making move second method involves relatively slight conceptual change namely taking 3dimensional snapshots instead 2dimensional snapshots means storing frame figures motion full threedimensional model obviates need multiple data sets corresponding multiple viewing positions shifts slightly computational burden image generator instead drawing pixels polygon runtime system sends threedimensional polygonal information graphics subsystem still inflexible approach figures stored solid lumps geometry albeit textured extremely difficult impossible extract articulated parts original model comprised modifications must still effected offline although rendering done real time essentially approach used simnet image generators display soldiers simulated battlefield 3 final method one implemented system described paper record results motions motions store single articulated threedimensional model agent frame frame record joint angles articulated segments modern rendering toolkits iris performer system used project increasingly allow support storing coordinate transformations within visual database relatively little cost associated updating transformation matrices real time result adopting approach storage space reduced far easier accurately perform interpolation key frames articulation information lost motion recording also allows virtual agents motions replayed strictly asis motions may modified generated entirely real time instance slight changes shoulder elbow joint orientation required alter aim weapon held virtual soldier could generated demand believe smallest representation presented list third method actually retains useful information affords flex ibility placing acceptable amount additional computational burden runtime display system extensions future work currently exploring several extensions techniques described add expressive power tool bag realtime animator keyframing interpolation use prerecorded motions posture graphs trades time space compute joint angles fly merely sample stored motions motions become complex becomes timeconsuming produce motions offline phase produce key frames transition every 5 10 frames use simple interpolations generate inbetweens realtime playback technique cant extended much beyond fullbody human motion interpolate well beyond many frames also reduces amount stored motions factor proportional spacing key frames increases computation time playback frame lands two key frames also replacing recorded motion transition arcs purely procedural motion generators reduce storage example subgraph posture graph contains joints moving lefthanded wave easily replaced simple function time returns correct shoulder elbow wrist angles different phases transition partitioning fullbody motion posture graphs described previously motion transition included joint angles whole body technique reduce motion storage increasing playback flexibility partition body several regions record motion independently region example lower body treated separately locomotion upper body variety different animations played also support mapping motion partially sensed real humans ie sensors hands onto animated human figures want animate lower body torso separately place hands arms using fast inverse kinematics solution articulation levelofdetail various lod models used human figures built manually techniques synthesizing lower lod geometric models known dont apply building lower articulation lod models techniques automatically synthesizing lower articulation skeletal models given high resolution skeleton set motions render would useful dynamic properties limitation currently imposed fact segments articulated figures must rigid however implementation detail conceptual problem since sufficient computational power runtime system realtime segment deformation become possible general seems likely limiting factor visual simulation systems continue speed graphics subsystem actually render geometry adoption coarsegrained multiprocessing techniques 18 allow operations rigid elastic body deformations carried parallel another part rendering pipeline bottom line greater realism vr environments obtained pouring offline cpu time runtime space rendering recording characters exacting detail visual effect even perfectly animated figure significantly reduced viewer recognizes movements exactly every time something seek capitalize intrinsically dynamic nature interacting virtual world recording less information allowing motions modified fly match context replayed beginning efforts direction may found 14 realtime animation viewed one many enabling technologies simulations animation visual simulation activities processes occuring simulation multiplies effectiveness communicative ability simulation making results intuitively understood nonexpert viewers participants unfortunately coupling realtime 3d animation simulation one requires presence expensive rendering hardware simulation computer generating visuals one also needs highperformance general purpose processor used executing simulation application feeding rendering hardware advances inverse kinematics dynamics table lookup method paper forward kinematics interpolation schemes runtime generality time compute 1 frame motion figure intuitive relation compute time runtime generality motion generation techniques rendering hardware well general availability lowcost pc platforms near future may ameliorate problem fast 2 12 animation techniques mentioned previously discussing doom also found way types consumer interactive visual simulation applications aka video games heightened expectations quality animation inexpensive platforms users systems general availability mature simulation toolkits libraries eg sim script stella simpack variety platforms greatly increased use simulation however lack widely available used toolkits realtime animation however appearance toolkits iris performer opengl open 3d graphics rendering api available many platforms become less burdensome future add 3d animation ones simulations conclusions described system offline production online playback human figure motion 3d visual simulation techniques employed straightforward build upon several well known software systems ca pabilities number possible states simulated human increases posture graphs need replaced procedural approach changing posture applications built today current workstations current technique balance performance realism figure shows coarse albeit intuitive plot relation runtime generality computation time several motion generation techniques runtime generality mean notion general types motion generated algorithms example tablelookup fast runtime general generate motion recorded tables course many things recorded placed tables difficult modify gen eralize runtime hand dynamics physical simulation proper collision detection response generate realistic motion many different runtime conditions deem general full physical simulation expensive timeconsuming com pute best animation purposes still least orderof magnitude slower realtime relatively simple environments 12 realistic agent animation virtual environments research community trying push curve left making powerful techniques run faster curve drifting left recent years mainly progress made rendering hardware overall workstation compute performance interestingly authors motion generator compute 1 frame motion less 130th second author usually claim realtime motion generator course colleagues realtime community start coughing loudly better state fast motion generator leave notions realtime usually connote presence scheduler sort course action event failure execute specified deadline chose humans animating interested techniques described paper could applied complex articulated figures whose states characterized postures whose motions postures organized posture graphs r posture interpolation collision avoidance simulating humans computer graphics results published system dismounted infantry motion simnet image generator metric computing adaptive detail animated scenes using objectoriented programming insertion articulated human networked virtual environment simulation model design execution adaptive display algorithm interactive frame rates visualization complex virtual en behavioral control realtime simulated human agents institute simulation training institute simulation training kinematic dynamic techniques analyzing danse interactif human animation biomechanics extending dis individual combatants soldier agents virtual urban battlefield iris performer high performance multiprocessing toolkit realtime 3d graphics doom phenomenon team target engagement simulator advanced technology demonstration dooms day afternoon inverse kinematics positioning using nonlinear programming highly articulated figures tr retiling polygonal surfaces simulating humans adaptive display algorithm interactive frame rates visualization complex virtual environments iris performer inverse kinematics positioning using nonlinear programming highly articulated figures behavioral control realtime simulated human agents impulsebased simulation rigid bodies kinematic dynamic techniques analyzing predicting animating human locomotion simulation model design execution ctr thomas di giacomo stphane capo franois faure interactive forest proceedings eurographic workshop computer animation simulation p6574 september 0203 2001 manchester uk thomas di giacomo stphane capo franois faure realtime animation trees graphics programming methods charles river media inc rockland ren gregory shakhnarovich jessica k hodgins hanspeter pfister paul viola learning silhouette features control human motion acm transactions graphics tog v24 n4 p13031331 october 2005