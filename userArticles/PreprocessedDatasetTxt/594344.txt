satbased decision procedures classical modal logics present set satbased decision procedures various classical modal logics sat based mean built top sat solver show satbased approach allows modular implementation logics logics deal aware implementation others define testing methodology generalizes 3cnfik methodology giunchiglia sebastiani experimental evaluation shows decision procedures perform better well stateoftheart decision procedures b introduction propositional reasoning fundamental problem many areas computer science many researchers put still put years eort design implementation new powerful sat solvers importantly source code many implementations freely available used basis development decision procedures expressive logics see eg giunchiglia sebastiani 1996a cadoli et al 1998 paper present set satbased decision procedures various classical modal logics montague 1968 segerberg 1971 satbased mean built top sat solver show satbased approach allows modular implementation logics logics deal aware implementation others dene testing methodology generalizes 3cnfk methodology giunchiglia 1996a experimental evaluation shows deci 1999 kluwer academic publishers printed netherlands tacchella sion procedures perform better well stateoftheart decision procedures approach rst suggested giunchiglia sebastiani 1998 consists two steps 1 take shelf one fastest sat procedures available 2 use basis modal decider approach diers previous works decision procedures modal logics either tableaubased ie based smullyans tableau propositional logic smullyan 1968 see eg fitting 1983 massacci 1994 baader et al 1994 translationbased ie based reduction rst order logic see eg van benthem 1984 ohlbach 1988 hustadt schmidt 1997a dierences advantages satbased approach respect tableau based translation based approaches already pointed giunchiglia sebastiani 1996b giunchiglia et al 1998 show satbased approach provides simple natural schema development decision procedures modal logics approach diers also approaches horrocks 1998 patelschneider 1998 authors developed sat checker used basis modal decider approach allows better integration among dierent modules system ner tuning reasoning strategies hand exploit great amount ongoing work sat deciders year new faster sat engines proposed standard modications source code inherit modal setting benets stateoftheart propositional checkers 1 finally system called sat improves also previous works sebastiani 1996a 1996b 1998 particular sat built top sat decider sato zhang 1997 sat inherits many sato congurable options allows options including early pruning caching two forms backjumping choice various splitting heuristics sat able deal 8 modal logics namely e em en emn ec emc r ecn emcn k see chellas 1980 en emn ec ecn know similar point made kautz selman 1998 explanation better performances satplan respect specialized engines planning problems satbased decision procedures classical modal logics 3 implemented decision procedure reduction formalism decision procedure available paper structured follows section 2 review basic denitions classical modal logics section 3 present idea satbased approach modal reasoning discuss detail algorithms 8 logics consider section 4 devoted sat discusses motivations underlying construction features experimental analysis comparing sat stateoftheart decision procedures done section 5 analysis restricted k several systems available e exists reduction bimodal k end section 6 conclusions future work 2 classical modal logics following chellas 1980 modal logic set formulas called theorems closed tautological consequence modal logics closed rule certain values n logic said monotone logic said regular n 0 logic said normal smallest monotone regular normal modal logics called r k respectively see eg chellas 1980 classical modal logics montague 1968 segerberg 1971 weaker normal modal logics fact requirement set theorems closed rule consequence schemas 2 symbols 0ary connectives representing truth falsity respectively 4 e giunchiglia f giunchiglia tacchella theorems k necessarily hold classical modal logics three principles n c enforce closure conditions set provable formulas always desirable especially 2 operator epistemic knowledge belief reading interpret 2 certain agent believes n enforces believes logical truths beliefs closed logical consequence c beliefs closed conjunction three closure properties dierent forms omniscience appropriate modeling beliefs real agent see eg giunchiglia giunchiglia 1997 fagin et al chapter 9 easily imagine situations involving beliefs arbitrary subset properties holds eight possible ways add three schemas c n smallest classical modal logic e resulting modal logics called e em equivalent logic en emn ec emc equivalent r ecn emcn equivalent k ex denotes logic obtained adding schemas x e 3 satbased procedures classical modal logics say conjunction propositional literals formulas form 2 2 assignment pair 0 conjuncts case assignment satises formula entails propositional reasoning formula consistent logic l lconsistent theorem l ie 62 l consider formula let set assignments satisfying let l modal logic noticed sebastiani giunchiglia 1997 following two facts hold least one assignment lconsistent lconsistent assignment lconsistent lconsistent long set complete ie long disjunction assignments propositionally equivalent facts follows problem determining whether lconsistent decomposed two steps generate assignment satisfying test whether lconsistent logics consider testing consistency assignment amounts determining consistency formulas whose satbased decision procedures classical modal logics 5 depth ie maximum number nested 2 operators strictly minor depth implies check consistency formulas recursively applying methodology time ensuring termination overall process methodology implemented two mutually recursive procedures lsat generation assignments satisfying lconsist testing lconsistency generated assignment order simplify presentation rst present lconsist lsat 31 lconsist whether assignment consistent depends particular logic considered furthermore depending logic l considered consistency problem l ie determining whether formula consistent l belongs dierent complexity classes particular consistency problem e em en emn npcomplete ec ecn emc emcn pspacecomplete see vardi 1989 fagin et al 1995 save space divide eight logics two groups present algorithms checking lconsistency assignment rst case l one e em en emn case l one others 311 logics e em en emn following proposition easy consequence results presented vardi 1989 proposition 1 let assignment propositional formula let l one logics e em en emn consistent l conjunct 2 j one following conditions satised lconsistent conjunct 2 le lconsistent conjunct 2 lem lconsistent conjunct 2 len lconsistent conjunct 2 lemn 6 e giunchiglia f giunchiglia tacchella function lconsist foreach conjunct 2 j foreach conjunct 2 j j false return false j j false return false return true figure 1 lconsist e em en emn implementing conditions care must taken order avoid repetitions consistency checks fact exponential number assignments satisfying input formula generated lsat n 2 checks possible l n number 2 input formula given upper bound new consistency check cache result future possible reutilization ensures n 2 consistency checks performed detail given enumeration boxed subformulas input formula mij 6 j stores result consistency check j mii stores result consistency check initially element matrix value undef meaning corresponding test done yet result procedure lconsist figure 1 consider figure 1 assume le len given pair conjuncts 2 2 j split consistency test two simpler subtests rst test whether test gives false test whether satbased decision procedures classical modal logics 7 notice also case len lemn know eg consistent store result mjj proposition 2 let assignment propositional formula let l one logics e em en emn assume formula whose depth less depth lsat returns true lconsistent false otherwise returns true lconsistent false otherwise proof proposition easy consequence hypotheses proposition 1 312 logics ec ecn emc emcn following proposition easy consequence results presented vardi 1989 proposition 3 let assignment propositional formula let set formulas 2 conjunct let l one logics ec ecn emc emcn consistent l conjunct 2 j one following conditions satised lconsistent non empty subset 0 lec lconsistent subset 0 empty assume lec lecn straightforward implementation corresponding condition may lead exponential number checks cardinality jj carefully conjunct perform jj 1 formula rst check whether consistent l let 0 set formulas test fails 8 e giunchiglia f giunchiglia tacchella function lconsist conjunct g foreach conjunct 2 j foreach conjunct 2 j j lsat return true figure 2 lconsist ec ecn emc r emcn k 2 case lecn 0 6 perform last test checking whether consistent l furthermore result consistency checks performed rst step cached matrix analogous one used previous subsection lec lecn procedure lconsist figure 2 implements ideas otherwise straightforward implementation conditions proposition 3 proposition 4 let assignment propositional formula let l one logics ec ecn emc emcn assume formula whose depth less depth lsat returns true lconsistent false otherwise returns true lconsistent false otherwise proof proposition easy consequence hypotheses proposition 3 satbased decision procedures classical modal logics 9 function lsat return lsatdp cnf function lsatdp f unit clause l occurs g return lsat dp assignl l chooseliteral return lsat dp assignl l base backtrack unit split figure 3 lsat lsat dp 32 lsat consider formula let l modal logic generation assignments satisfying independent particular logic l considered furthermore based procedure sat sat decider complete generate nite complete set assignments follows step 0 ask assignment satisfying step assignment satisfying negation assignments generated previous steps checking lconsistency assignment obtain correct complete decider l sat decider correct incomplete cannot generate complete set assignments still build correct incomplete decider l checking generated assignment course whether incomplete eective procedure sat turned eective incomplete procedure modal logic l still open point method generating complete set assignments advantage sat decider used blackbox tacchella obvious disadvantage size input formula checked sat solver may become exponentially bigger original one better solution invoke test lconsistency inside procedure whenever assignment satisfying input formula found case davisputnam dp procedure davis putnam 1960 get procedure lsat represented figure 3 gure cnf set clauses possibly newly introduced propositional variables assignment extended language following two properties satised 3 1 satises cnf restriction language 2 satises exists assignment language cnf extends ii satises cnf examples conversions classical conversion given formula negative normal form recursively distribute conjunctions disjunctions conversions based naming described tseitin 1970 plaisted greenbaum 1986 de la tour 1990 chooseliteral returns literal occurring chosen according heuristic criterion l literal l stands l l literal l formula assignl formula obtained deleting clauses l occurs disjunct ii eliminating l others observed procedure lsat dp figure 3 dp procedure modulo call lconsist nds assignment satisfying input formula notice procedure pure literal rule used dp implementations implemented fact main interest correct complete modal deciders pure literal rule set assignments checked lconsist assuming call returns false ensured complete 4 3 let assignment language l let l 0 l language restriction l 0 assignment obtained deleting conjuncts l 0 let 0 assignment 0 extends conjunct also conjunct 0 4 according authors see eg freeman 1995 pure literal rule helps classes sat problems furthermore rule help result substantial reduction search tree size satbased decision procedures classical modal logics 11 following formula assignment possibly extended language cnf restriction language analogously set assignments g proposition 5 let modal formula assume assignment lconsist prints returns false let set assignments printed result invoking lsat disjunction assignments propositionally equivalent proof hypotheses proposition need prove first clear cnf 2 thesis righttoleft implication easy consequence rst two properties cnf assume lefttoright implication false means exists assignment language 1 propositional atom either conjunct 2 formula 2 language either 2 2 conjunct 3 satises satisfy given 3 second properties cnf must exist assignment 0 language cnf extends thus also means 0 entails 2 propositional reasoning thus must exist assignment 00 given 1 2 5 conjunct 00 also conjunct 0 thus implies entails 00 since 00 contradicting 4 state prove soundness completeness results procedures theorem soundness completeness let l one logics e em en emn ec ecn emc emcn lsat sound 12 e giunchiglia f giunchiglia tacchella complete l ie modal formula lsat returns true lconsistent false otherwise proof first observe lsat returns true exists call lconsist returns true false call lconsist returns false proof induction depth 0 theorem trivial assume 1 induction hypothesis formula whose depth less lsat returns true l consistent false otherwise following use following two facts 1 two assignments 0 diering propositional conjuncts lconsistent 0 lconsistent trivial consequence proposition 1 proposition 3 2 let assignment lconsist invoked execution lsat lconsist returns true l consistent false otherwise given depth less equal consequence induction hypothesis proposition 2 proposition 4 two cases 1 lconsistent proposition 5 follows exists call lconsist assignment satises cnf ii lconsistent since possibly extends may assign newly introduced propositional variables 1 follows lconsistent 2 follows lconsist thus also lsat returns true 2 lconsistent proposition 5 follows call lconsist assignment lconsistent 1 follows lconsistent 2 follows lconsist returns false 4 sat sat built top sato ver 32 zhang 1997 choice adopting sato basis system driven following motivations satbased decision procedures classical modal logics 13 sato fast performed aware uptodate extensive comparison among dierent sat solvers publicly available 5 however according experiments done results presented zhang 1997 sato seems behave better currently available sat solvers sato many options including various splitting heuristics backjumping inherited options available experimentation sato written using software engineering conventions made make much easier tune goals besides options inherited sato system allows possibilities developed implementing system goals paper describe sat structure optimizations congurable options detailed presentation see tacchella 1999 manual distributed sat goals suces say core sat c implementation procedures lsat lconsist figures 1 2 3 particular reference figure 3 sat cnf set clauses obtained applying conversion based renaming described tseitin 1970 plaisted greenbaum 1986 chooseliteral returns literal according moms heuristic maximum occurrences clauses minimum size freeman 1995 assignl highly optimized procedure takes time linear number occurrences l sat also implements two important optimizations used tests presented next section earlypruning splitting step lsat lconsistency assignment generated far checked call lconsist ksatc care taken avoid repetition lconsistency checks branch propositional search tree 6 early list publicly available sat solvers 6 obtained pointer assignment stack keeps track portion current assignment already veried lconsistent 14 e giunchiglia f giunchiglia tacchella pruning proved eective least tests presented next section see giunchiglia et al 1998 caching k case logic k sat uses additional data structure allows associate formula result lsat invoking lsat formula lconsist checks whether kconsistency already determined caching introduces additional costs may produce dramatic speedups see horrocks patelschneider 1999b yet conducted exhaustive experimental analysis see class formulas combination sat options leads best results see horrocks patelschneider 1999b similar study dlp options tests next section used sat options seemed reasonable us particular set sat use early pruning tests caching k depth input formula greater 1 5 comparative analysis availability decision procedures logics consider varies signicantly emcn recall equivalent k many implemented decision procedures available see eg et al 1998 de swart 1998 e em emc gasquet herzig 1996 provide reduction normal modal logics implementing reduction indirectly obtain decision procedures logics fitting 1983 calls u logic em denes tableau system recently governatori luppi 1999 dene tableaulike proof system classical monotonic regular modal logics aware implementation tableau sys tems en ec emn ecn aware implemented decision procedure reduction formalism decision procedure available comparative analysis restricted k e fact decision procedures e em gasquet herzigs reductions e em similar expect experimental analysis em would lead results similar ones e satbased decision procedures classical modal logics 15 emc gasquet herzigs reduction normal modal logic system available 7 51 modal k said several systems able solve consistency problem k comparative experimental analysis consider four systems sat ksatc giunchiglia et al 1998 dlp patel schneider 1998 among fastest solvers k remember ta given modal rst determines corresponding rst order formula performs conventional rstorder theorem proving tests hustadt schmidt 1997a uses flotter convert set clauses cl theorem prover spass solve cl brief description flotter spass see weidenbach et al 1996 8 test systems three problem sets randomly generated formulas 3cnfk formula conjunction 3cnfk clauses three disjuncts disjunct 3cnfk clause either propositional literal formula form 2c 2c c 3cnfk clause see giunchiglia sebastiani 1996a detailed presentation remark formula exist 3cnfk formula kconsistent kconsistent sets 3cnfk formulas randomly generated according following parameters modal depth ii number l clauses depth 7 reduction maps consistency problem formula emc consistency problem formula 0 smallest normal modal logic two modal operators 21 22 augmented schema see gasquet herzig 1996 details 8 experimental results obtained dlp ver 31 ver 14 spassflotter ver 055 ksatc ver 10 sat ver 12 compile systems used smlnj 11003 sicstus prolog 3 acl 50 gcc 2723 tests run several intel pcs whose conguration varies p200mhz 64mbram pii350mhz 256 mbram platforms running linux 5x redhat dlp available httpwwwdbresearchbelllabscomuserpfps httpwwwdocmmuacukstaffuhustadtmdp ksatc available ftpftpmrgdistunigeit pubmrgsystems sat available web page httpwwwmrgdistunigeittacstarsathtml tacchella iii number n propositional variables iv probability p disjunct occurring clause depth purely propositional care taken order avoid multiple occurrences formula clause time ensuring modal vs propositional structure generated formula depends p detail clause generated randomly generating disjuncts generating disjunct rst decide whether propositional literal disjunct proper type repeatedly generated long occur clause generated far tests consider problem set characterized n p xed 1 l varied way empirically cover 100 satisable 100 unsatisable transition pair problem set 100 3cnfk formulas randomly generated resulting formulas given input procedure test run consider time systems take main processing formula thus excluding negligible time systems take read somehow normalize input formula particular means take account time needed spass solve formula generated end translation process practical reasons timeout mechanism stops execution system formula 1000 seconds cpu time even pair n p execution sat ksatc stopped system exceeds timeout 51 100 samples corresponding xed n p dlp instead stops execution 100 samples corresponding pair n p supermajority rst n tests timeout 9 happens assumed dlp exceeds timeout 50 tests rst three problem sets consider xed 0 according hustadt schmidt 1997b xing corresponds particularly dicult tests call problem sets pkn4p0 pkn5p0 pkn6p0 respectively pkn4p0 pkn6p0 called ps12 ps13 respectively hustadt schmidt 1997b order better highlight behavior sat ksatc also run systems problem set called pkn7p0 figure 4 satisability percentages median cpu times four systems plotted number 9 detail dlp stops execution least 5 tests far 90 timeout least 10 tests far 75 timeout least 20 tests far 55 timeout patelschneider 1999 satbased decision procedures classical modal logics 17 systems comparison n4 d1 p0 cpu ksatc systems comparison n5 d1 p0 cpu ksatc systems comparison n6 d1 p0 cpu ksatc systems comparison n7 d1 p0 cpu ksatc figure 4 logic k sat ksatc dlp 7 samplespoint background satisability percentage clauses l notice logarithmic scale vertical axis causes values equal 000 get plotted consider figure 4 rst observation sat ksatc fastest two systems perform roughly way sat performing better 5 7 two systems similar performances one system performing better values l worse values l comes surprise two systems underlying structure use early pruning moms heuristic select splitting literal two systems identical behavior use dierent datastructures implement slightly dierent moms strategies considering systems pkn4p0 gap satksatc dlp resp ta one order magnitude crossover point 50 satisable formulas goes almost resp 4 orders magnitude right end side horizontal axis pkn5p0 pkn6p0 values exceed timeout respectively corresponding values tacchella sat resp ksatc 122 resp 183 332 resp 564 seconds keeps exceeding timeout successive values gap satksatc dlp pkn5p0 one order magnitude crossover points 50 satisable formula goes almost 3 orders right plot dlp median values exceed timeout terminate gracefully 10 comparing sat dlp pkn4p0 pkn5p0 see gap sat dlp seems increase l pkn4p0 pkn5p0 dierence logarithmic scale sat dlp almost always monotonically increasing crossover point 50 satisable formulas gap sat dlp resp ta roughly 1s resp 60s pkn4p0 220s resp 1000s pkn5p0 good performances sat ksatc due early pruning revealed eective problem sets example disable early pruning sat rerun pkn5p0 system keeps exceeding time limit better behavior sat ksatc dlp ta conrmed qpercentile graphs figure 5 corresponding 4 formally qpercentile set values value v q values smaller equal median value set thus corresponds 50 percentile set figure 5 reports 50 60 70 80 90 100 percentile values cputimes sat top left ksatc top right dlp bottom left bottom right run pkn4p0 percentile plots pkn5p0 pkn6p0 look similar plots figure 5 means systems perform roughly way 50 dicult samples 100 tests corresponding xed n l also run four systems problems p xed 50 call problem sets pkn4p50 pkn5p50 pkn6p50 pkn7p50 figure 6 satisability percentages median cpu times four systems plotted number clauses l roughly way fastest dierently tests 0 transition point 50 satisable formulas gap satksatc dlp seems diminish number variables increases horrocks patelschneider 1999a ver 32 able successfully handle formulas satbased decision procedures classical modal logics 19206010050709010 2 percentiles cpu ksatc cpu time n4 d1 p0 percentiles cpu percentiles cpu percentiles cpu figure 5 logic k 50100 percentile cpu times sat ksatc dlp ta samplespoint show values l bigger 7 dlp performances superior ksatc dlp performs better ksatc p high worse p low yet done broad comparison using sat instead ksatc however believe horrocks patel schneiders conclusions extend also sat sat used parameter settings currently used ie make sat similar ksatc course big role played sat already available congurable options issue future research case sat ksatc perform better systems large values l formulas trivially unsatisable due fact large values l formulas become propositionally unsatisable thus sat ksatc mostly take advantage satbased nature eg optimized data structures handling large formulas percentile plots timings systems pkn7p50 show big dierences respect plots 20 e giunchiglia f giunchiglia tacchella systems comparison n4 d1 p50 cpu ksatc systems comparison n5 d1 p50 cpu ksatc systems comparison n6 d1 p50 cpu ksatc systems comparison n7 d1 p50 cpu ksatc figure 6 logic k sat ksatc dlp 7 samplespoint background satisability percentage medians considering dlp sat 100 percentile plots interesting observe dlp lower maximum sat hand sat values decrease rapidly dlp finally see problem sets consider systems seem easyhardeasy pattern whose peak roughly correspond 50 satisable formulas phenomenon best evident sat ksatc also consider benchmarks formulas k used comparison theorem provers modal logics tableaux98 see de swart 1998 consist nine provable parameterized formulas ending p nine unprovable parameterized formulas ending n parameterized formula test consists determining greatest natural number n 21 satisfying following two conditions 1 prover returns correct result formulas a1 less 100 seconds satbased decision procedures classical modal logics 21 percentiles cpu ksatc cpu time n7 d1 p50 percentiles cpu percentiles cpu percentiles cpu figure 7 logic k 50100 percentile cpu times sat ksatc dlp ta samplespoint 2 prover cannot formula 1 less 100 seconds even though proved tests easily solved current solvers still interesting 3cnfk formulas tests solved yet results sat dlp reported table ksatc tested since ksatc able deal 3cnfk formulas also show cpu time requested system solve last instance notice sat run caching enabled since depth formulas table greater 1 ta take account time needed compute rst corresponding negligible take account time requested flotter convert n 22 e giunchiglia f giunchiglia tacchella table logic k sat dlp performances tableaux98 benchmarks sat dlp test size time size time size spass flotter branch p 21 021 lin n 21 4780 21 070 21 1607 6394 lin path n 21 096 path p 21 072 ph n 12 060 9 4016 9 4521 992 ph p 8 4854 6 1134 6 4219 097 poly n 21 225 poly p 21 173 set cla n clauses reported flotter column time requested spass determine consistency inconsistency reported spass column furthermore stopped n 21 either flotter terminate gracefully computing flotter exceed 100 seconds time limit table three cases correspond rows value nspassflotter respectively underlined observed table three systems able solve instances formula four cases sat dlp able solve instances except k branch n k branch p k ph n ph p except rst four parameterized formulas sat able solve instances dlp k branch n sat dlp able solve 12th instance dlp taking less time sat solve satbased decision procedures classical modal logics 23 52 modal e gasquet herzig 1996 provide translation maps formula formula gh k 2 ie smallest normal modal logic two modal translation satisable e gh satisable k 2 translation dened following way propositional variable homomorphic cases propositional connectives consider formula compare sat performances respect sat dlp performances gh could run ksatc gh since ksatc accepts 3cnfk formulas one modality make evident system run using gasquet herzigs translation append string gh name system therefore following systems sat satgh dlpgh tagh e 3cnfk test methodology suited indeed longer case modal formula exists 3cnfk formula esatisable esatisable furthermore checking consistency assignment e amounts determine consistency pair conjuncts 2 2 tests case 3cnfk clauses trivially therefore consider sets 3cnfe formulas 3cnfe formula conjunction 3cnfe clauses three disjuncts disjunct 3cnfe clause either propositional literal formula form 2c 2c c 3cnfe formula example l 1 8 propositional literal 3cnfe formula formula exist 3cnfe formula logically equivalent e sets 3cnfe formulas randomly generated according parameters used generate 3cnfk formulas new parameter c representing number clauses depth 0 3cnfk thus 3cnfe formula c 1 previous subsection problem set characterized n p c xed 1 l respectively l given increasing values way empirically cover 100 satisable 100 unsatisable transition also tacchella systems comparison n4 d1 p0 cpu tagh systems comparison n5 d1 p0 cpu systems comparison n6 d1 p0 cpu systems comparison n7 d1 p0 cpu tagh figure 8 logic e sat satgh dlpgh tagh median cpu time samplespoint background satisability percentage check sample multiple occurrences formula clause ensuring propositional vs modal structure formula depends p notice increasing l also c increased consequence pair assignment satisfying 3cnfe formula recursive econsistency check phase transition 100 satisable 100 unsatisable increasing l overall low resp high values l expect satisfying assignment trivially determined econsistent resp econsistent value n problem set 100 3cnfe formulas randomly generated resulting formulas given input procedure test timeout stops execution system formula 1000 seconds cpu time consider following problems sets satbased decision procedures classical modal logics 25 percentiles cpu percentiles cpu percentiles cpu percentiles figure 9 logic e 50100 percentile cpu times sat satgh dlpgh tagh samplespoint pen4p0 pen5p0 pen6p0 pen7p0 respectively pen4p50 pen5p50 pen6p50 pen7p50 given huge amount time flotter takes prepare formula spass run tagh problems sets pen4p0 pen4p50 pen7p0 pen7p50 run tagh initial points preceding subsection take account time systems take main processing formula particular system take account time needed perform gasquet herzigs conversion tagh take account time taken spass median percentile plots systems pen4p0 pen5p0 pen6p0 pen7p0 shown figure 8 figure 9 respectively consider figure 8 observed sat fastest gap systems one order magnitude 26 e giunchiglia f giunchiglia tacchella systems comparison n4 d1 p50 cpu tagh systems comparison n5 d1 p50 cpu systems comparison n6 d1 p50 cpu systems comparison n7 d1 p50 cpu figure 10 logic e sat satgh dlpgh tagh median cpu time samplespoint background satisability percentage certain values l however satgh dlpgh perform quite well better one could imagined given consistency problem e k 2 belongs two dierent complexity classes however closer look gasquet herzigs reduction reveals considering 3cnfe formula assignment usual assume propositional formula language 1 satises gh satises gh 2 checking econsistency sat performs 2mn consistency checks involving formulas 3 checking k 2 consistency gh satgh dlpgh perform 2mn consistency checks involving formulas satbased decision procedures classical modal logics 27 percentiles cpu percentiles cpu percentiles cpu percentiles cpu figure 11 logic e 50100 percentile cpu times sat satgh dlpgh tagh samplespoint rst two points obvious understand last suces notice gh propositionally equivalent given satgh dlpgh use caching procedures perform quadratic number checks number subformulas gh case tagh since spass caching mechanism explains good behavior satgh dlpgh bad behavior tagh interesting compare satgh dlpgh performances observed dlpgh performs better satgh low values l worse high values l behavior ects dierent mechanisms used satgh dlpgh prune search space checking kconsistency assignment said section 4 tests set satgh 28 e giunchiglia f giunchiglia tacchella use early pruning strategy dlpgh instead implements backjumping schema spirit baker 1995 assignment discovered kconsistent backtracking point lead contradiction enforced implementing early pruning introduce overheads case backjumping dependency set derived clause maintained see patelschneider 1998 details despite additional costs introduced backjumping clearly wins compared early pruning logic k low values l case almost assignment kconsistent early pruning may cause additional ie performed backjumping strategy checks hand high values l formula test kconsistent still assignments satisfying satgh able greatly cut search checking inconsistency assignment generated far dlpgh instead checks consistency assignment satises current formula dlpgh may therefore generate many assignments even though satisfy input formula kconsistent l high input formulas become propositionally unsatisable satgh may still perform additional kconsistency checks get compensated satgh satbased nature ii costs dlpgh back jumping considering figure 9 see dlpgh better behavior systems hardest instances evidently tests backjumping leads uniform behavior early pruning horrocks patelschneider 1999a show randomly generate 3cnfk formulas early pruning leads uniform behavior backjumping tagh median percentile times plotted figure 10 figure respectively observed situation similar case 0 dierence satgh performs better dlpgh lower value l reasonable since l number consistency checks performed satgh early pruning diminishes p increases finally notice easyhardeasy pattern sat better appreciate figure 12 shows number calls lsat done lconsist pen4p0pen7p0 left pen4p50pen7p50 right ratio l n observed sat performs number lsat calls whose maximum roughly correspond 50 satisable formulas transition happens l n close 5 6 behavior ects stated intuition satbased decision procedures classical modal logics 29 checks d1 p0 checks 7 variables 6 variables 5 variables 4 variables consistency checks d1 p50 checks 7 variables 6 variables 5 variables 4 variables figure 12 logic e sat median number calls lsat 7 samplespoint background satisability percentages according low resp high values l formulas easily determined econsistent resp econsistent 6 conclusions future work presented set satbased decision procedures eight classical modal logics shown satbased approach allows ecient modular implementations logics presented sat sat system able deal en ec ecn emn case logic e dened testing methodology generalizes 3cnfk methodology giunchiglia sebastiani 1996a suitable testing systems nonnormal modal logics experimental evaluation shows sat performances superior comparable performances stateoftheart systems future plan conduct extensive experimental analysis similar presented horrocks patelschneider 1998 horrocks patelschneider 1999b understand class formulas combination sat options leads best results also plan extend sat order handle expressive decidable logics also consider logics like s4 sophisticated methods described section 4 employed order ensure termination decision procedure tacchella acknowledgments grateful hullrich hustadt peter f patelschneider hantao zhang assistance provided systems special thanks roberto sebastiani many useful discussions related subject paper thanks also anonymous reviewers helpful comments suggestions rst last authors partially supported italian spatial agency r intelligent backtracking hardest constraint problems algorithm evaluate quanti modal logic introduction computing procedure quanti swart editor automated reasoning analytic tableaux related methods international conference tableaux98 reasoning knowledge proof methods modal intuitionistic logics improvements propositional satis phd thesis classical normal modal logics ideal real belief belief building decision procedures modal logics propositional decision procedures case study modal 5th international conference principles knowledge representation reasoning kr96 evaluation decision procedures modal logics labelled tableaux nonnormal modal logics comparing subsumption optimizations advances propositional modal optimising description logic subsumption journal logic computation using expressive description logic fact evaluating decision procedures modal logic evaluating decision procedures modal logic blackbox new approach application theorem proving problem solving strongly analytic tableaux normal modal logics translation methods nonclassical logics overview dlp system description personal communication structurepreserving clause form translation journal symbolic computation tableaubased satbased procedures preliminary report essay classical modal logic complexity proofs propositional logics correspondence theory complexity epistemic reasoning tr ctr andrei voronkov optimize proofsearch modal logics new methods proving redundancy criteria sequent calculi acm transactions computational logic tocl v2 n2 p182215 april 2001 enrico giunchiglia armando tacchella subsetmatching sizebounded cache testing satisfiability modal logics annals mathematics artificial intelligence v33 n1 p3967 september 2001 satbased planning complex domains concurrency constraints nondeterminism artificial intelligence v147 n12 p85117 july enrico giunchiglia yuliya lierler marco maratea answer set programming based propositional satisfiability journal automated reasoning v36 n4 p345377 april 2006 alessandro armando claudio castellini enrico giunchiglia marco maratea satbased approach separation logic journal automated reasoning v35 n13 p237263 october 2005 franz baader diego calvanese deborah l mcguinness daniele nardi peter f patelschneider bibliography description logic handbook theory implementation applications cambridge university press new york ny