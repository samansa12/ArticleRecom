interaction engine rich hypertexts semantically rich hypertexts attractive enable presentation network nodes link different levels abstraction also important user interact hypertext using command repertoire reflects chosen abstraction level based characterization rich hypertext introduce concept interaction engine governs separation internal hypertext representation external screen presentation separation key principle hyperpro system hyperpro interaction engine based simple rules presentation interpretation events menu set much power interaction engine framework comes organization rules relative type hierarchy nodes links relative hierarchy socalled interaction schemes primary application domain discussed paper program development program documentation b introduction topic paper development interaction techniques hypertexts represent information regular structured domains primary interest hypertexts represent source programs program documentation similar information captured program development maintenance however interaction techniques developed interest developers much broader set hypertexts call rich hyper texts rich hypertexts nodes types type node may reflect role hypertext eg syntactic department mathematics computer science fredrik bajers vej 7e 9220 aalborg denmark internet kasperiesdaucdk markiesdaucdk research supported part danish natural science research council 110061 category nodes rich hypertexts connected typed links many application domains may addition important ensure rich hypertext obeys set topological constraints structure may imposed contents nodes well thus richness stems typing nodes links degree structuring microscopic level 1 inside nodes links well macroscopic level among nodes links rich hypertexts may appear variety different application domains one domain engineering discussed malcolm et al 14 illustrated systems dynamic design 1 ishys 8 present paper another domain structured argumentation represented gibis 4 authors argumentation assistant 22 aquanet 15 16 nanard nanard use term rich hypertext structure model cover essentially notion hypertext systems satisfactory show one node one window work however emphasize creation coherent textual views several nodes links views typically consist aggregation text several interlinked nodes strive independence 1 internal node link representation 2 presentation hypertext screen hereby views adapted customized without altering underlying node link representation order enhance readability also find important control textual decoration fonts colors indentation constituent view order gain practical experience ideas built experimental system called hyperpro hyper pro system provides extensible data model powerful means tailoring interaction userdefined nodes links organize node link types hierarchy inher itance top hierarchy entitytype node link subtypes entitytype specifies attributevalue pairs attached entities links one 1 microscopic level corresponds within component level dexter model hypertext 11 macroscopic level corresponds storage level model program const declarations procedure toprogram tosubsection tolocaldeclaration tofragment name hello parameters l language begin case english name world parameters l language begin case l english name helloworld parameters inputoutput begin end procedure hello world procedures really simple get parameter indicating language use procedure writes string accordingly hello procedure must remember space end seperate next word written world procedure uses writeln know last word written documentation name hello world procedures main program simple call two procedures hello world must remember pass language parameter documentation name main program order provide language independence create enumeration type languages support order determine actual language use declare constant perhaps variable initialized argument switch constant documentation name language types statements name mainprogram name types constants program hello world program pascal depending value constant write hello world english goddag verden danish overall structure program examine part documentation name hello world program types indicated top nodes boxes attributes shown line contents shown line figure 1 rich hypertext documentation program fragments toone directed anchored source node 2 nodes entities contents name types may specify required attributes attributes system guarantee associated instances type required attributes inherited supertypes data model discussed 24 paper propose framework called interaction engine makes possible define control interaction rich hypertexts interaction engine controlled set interaction rules associated entity types new kind abstraction call interaction scheme throughout main section paper section 2 illustrate work hypertexts represent programs software development process begin example explains literate programming 13 supported interacting rich hypertext following describe discuss interaction engine concept finally summarize relevant similar work section 3 2 interaction engine interaction engine component hypertext sys tem mediates interaction user yet implemented anchoring links destination nodes hypertext via directives specified dedicated interaction specification language hyperpro interaction engine controlled set interaction rules formulated simple specialpurpose interaction specification language describing design hyperpro interaction engine details highlight functionality examples following proceed description underlying concepts mechanisms interaction engine 21 using interaction engine section illustrate capabilities hy perpro interaction engine giving number examples used area program development examples drawn hypertext interrelates pascal program accompanying documentation spirit literate programming main purpose interaction engine enable multitude interactions presentation event interpreta tion single underlying hypertext figure 1 show sample rich hypertext four documentation nodes five program nodes program nodes four different types program procedure statements declarations number different relationships nine nodes figure represented using different linktypes example simple hello world figure 2 four different presentations program program 3 twist write message english danish depending situation may interested presenting program fragments hypertext figure 1 different levels abstraction different perspec tives highest abstraction level might interested procedural outline program showing procedures defined scope level example outline view shown figure 2 lower right concrete level certainly need fulldetail presentation given pascal compiler compilation view program shown figure 2 left side possible define useful presentations figure 2 top right shows presentation call standard view main program standard view shows one node full detail immediate outgoing link context less detail presentations figure 2 generated application hyperpro interaction rules essence applied rules decide detail anchored links node presented using compilation interaction scheme destination node anchors shown inlined full detail implies local procedures hello world would shown well able control indentation presenting inlined node procedure shown window indented chose control amount indentation aspect presentation link 3 reason chose hello world example simple enough fit limited space paper like good enough demonstrate interaction approach rich hypertexts leading procedure standard interaction scheme gives standard view mentioned specify signature procedure nodes presented structurally presentation similar produced compilation scheme compilation view create presentations destination nodes four outgoing links program put anchor points outgoing links standard view presentations destination nodes contain less informa tion noted organized textual contents node number attributes allows easy access important constituents procedure names parameter lists see figure 1 direct access attributes useful create tiny presentations nodes standard views also note presentation rules contribute text constants keyword procedure lexical items 17 give full account issues related internal structuring using attributes anchoring following idea literate programming 13 also present program together documentation figure 2 center begin root documentation node node upper left corner figure 1 specify links type toprogram presented standard view destination node also specified program text shown slightly indented relative surrounding documentation links subsections documentation shown subdocumentation subsectiontitle bottom literate view done presenting three links type tosub figure 3 popupmenu standard view programs section figure 1 label interaction scheme turn presents destination nodes using name attributes specified short texts shown boldface purple color cannot seen figure besides able present underlying hypertext different ways interaction engine also able control facilitate commands user bare hypertext system typically sufficient support relatively small set generic commands command creates new node links current focus point node systems rich hypertexts desirable support broader set commands depend node link types issued pascal program documentation example given would instance fairly natural command creates new local procedure links program notice command builtin knowledge types node link involved frees user prompted information network extended interaction engine provides facilities defining menus binding menu entries keystroke sequences underlying operations manipulate structure hypertext menus available depend context meaningful menu entries appear figure 3 shows menu associated standard view programs menu appear literate view figure 2 menubutton activated program text part text constitutes standard view program user hesitates selecting entry help text next menu appears final important aspect presentations nodes links edited however might want limit editability instance programs editable literate view order support discipline documentation program written together editor keeps track parts text belong underlying hypertext able store text back internal representation screen presentation presentation information input events interaction engine node link descriptions type interaction schemes node link storage figure 4 architecture interaction engine based system 22 description interaction engine hyperpro system designed tailorability two levels 1 data model level specialize predefined node link types 2 user interface level specify interaction presen tation event interpretation rich hypertext paper explores second issue examine inner workings interaction engine overall architecture system shown figure 4 seen figure engine controlled actual nodes links types interaction schemes interaction engine able locate effectuate interaction rules locating interaction rules amounts lookup process based information entity operate interaction scheme used effectu ation amounts execution action underlying hypertext typically generation presentation structural change hypertext rule consists enabling condition consequence enabling condition states circumstances rule take effect consequence specifies action carry value return rule selected execution say rule applicable entity e enabling condition holds evaluated e fundamentaltextscheme empty standard label pascalroot pascaloutline pascalstandard pascallabel entity pascalnode fragment routine procedure function program declarations fragments node link pascallink rule1 rule6 rule2 rule5 rule4 rule3 figure 5 entity type interaction scheme hierarchies together interaction rules interaction rule associated entity type similar association operations types objectoriented programming languages interaction rule associated entity type et implicitly also associated subtypes et inheritance hierarchy entity types system based rich hypertext expect many interaction rules explicitly implicitly associated therefore categorize interaction rules two orthogonal dimensions 1 according kind rule whether rule governs presentation event interpre tation menu set 2 according role rule dialogue user whether instance rule concerned outline views standard views compilation views discussed section 21 hyperpro role captured notion interaction schemes define interaction scheme named set interaction rules may involve rules associated different entity types rules different kinds observed interaction rules different schemes unlikely disjoint typically interaction rules put several interaction schemes order avoid duplication rules also organize interaction schemes inheritance hierarchy possibility multiple inheritance putting things together end overall picture illustrated figure 5 show number interaction rules associated hierarchies relevant example section 21 see interaction rule associated entity type interaction scheme two hierarchies since one rule may attached pair type scheme rules pair ordered hyperpro interaction engine implements inheritance entity type interaction scheme hierarchies dynamic rule lookupprocess result lookupprocess totally ordered list applicable interaction rules first considered specific last general want present otherwise manipulate entity type program interaction scheme pascalstandard first look rules entity program rule5 rule6 rule6 specific rule5 rule6 associated specialized scheme rule5 next look rules routine rule4 rule3 reasons rule4 specific rule3 provided rules applicable relevant kind end following ordering rules rule6 rule5 rule4 rule3 rule2 rule1 rules ordered lexicographically based topological sorts pascalstandard super schemes 4 program supertypes inspiration ordering strategy comes objectoriented programming language clos 2 seen give first priority entity types second priority interaction schemes thus finding mutual order two rules r1 r2 take association interaction schemes account rules associated entity type following discuss presentation rules event rules menu rules describe interaction engine effectuates rules three kinds 221 presentation rules presentation rules nodes links give us following basic presentation possibilities 1 textual aggregation text constants attributes entity 2 recursive activation presentation framework neighbor entities 3 control graphical appearance font size inden tation foreground color background color piece text 4 control readwrite protection attribute take look literate view figure 2 examine rules necessary produce interaction scheme used called literateinteraction presentation specified rule attached documentation node type literateinteraction scheme rule looks follows nodepresentationrule true toprogram use literateinteraction tosubsection use documentationlabel crossreference use documentationlabel others use inherited enabling condition rule true rule states implicitly main textual contents node presented listed interaction schemes used present links anchored text seen links type toprogram presented using literateinteraction scheme links type subsection crossreference presented using 4 direct super schemes ordered definition interaction scheme example pascalstandard inherits standard pascalroot ordering scheme standard comes pascalroot hereby topological sorting scheme pascalstandard direct indirect super schemes pascalstandard standard pascalroot fundamentaltextscheme scheme named documentationlabel label schemes typically used connection interaction schemes prevent entire hypertext shown convention schemes named label produce short presentations order words rulelookup specific applicable rule applied generate textual presentation however rule use clause others use inherited others part refers links type toprogram tosubsection crossreference inherited specifies apply less specific rules relative ordering rules described presentation anchored links types rule associated link type toprogram literateinteraction scheme following linkpresentationrule true n destination node pascalstandard indent 3 n presentation rule describes three pieces text must aggregated first dashed line drawn newline end destination node link shown interaction scheme pascalstandard text indented 3 units finally one dashed line drawn notice advantage indentation dashed lines link rule opposed destination node rule presentation program node depends link type reached examples shown specify 1 presentation main contents node anchored links 2 usage text constants dashed lines 3 text generated destination node link besides include values attributes nodes links show incoming outgoing links node independent anchoring particularly useful producing outlines want present actual contents nodes merely appropriate labels node 222 event rules menu rules mentioned pascal example attractive able tailor semantics commands issued via menus via keyboard hyperpro interaction engine allows us specify event handling define menu entries event generated presentation approach locate applicable event rule defines action underlying network entities order make work must entity type interaction scheme rulelookup entity type interaction scheme used creation presentation determined state editor turn makes possible ensure meaningful entries appear menus events interpreted adequately menu rule specifies single menu entry order assemble full menu specific part presentation rulelookup assemble menu entries applicable menu rules shown figure 3 pascal example created menu entries addition new local procedures etc selecting menu entry highlevel event generated event resolved additional rulelookup looking specific eventrules consequence event call predefined interaction primitive interaction engine interaction engine number predefined primitives central ffl makenodeandlink creates new node links current focus node anchor point maintained editor operation takes either none three arguments three arguments type new node type new link name interaction scheme used presenting new link arguments given user prompted information ffl makelink creates new link current focus existing node operation takes none two arguments analogous case represent presents current focus another window another interaction scheme routine takes none one argument interaction scheme new presentation argument given user prompted scheme name ffl redirect target link ffl delete entity worth noticing routine following link hyperpro following link amounts representation link destination node link another interaction scheme typically shows de tails many hypertext systems following command issued link markers system link markers instead brief presentations entities usually generated using label schemes define new label scheme good practice provide menu item event rule defines follow 3 similar work work hdm 9 similar work several ways authors hdm focusing attention hypertext systems authoringinthelarge characterizes hypertext systems used produce call rich hypertexts 9 necessity hypertext modeling system also strongly argued main focus hdm develop modeling capabilities hypertext storage level hyperpro attempted extend modeling capabilities interaction aspect system interaction rules schemes closest thing interaction schemes hdm perspectives perspectives used control parts entity shown perspectives subsumed notion interaction schemes hdm notion binding anchor types link types show entity different perspectives corresponds somewhat showing using different interaction schemes able specify attached links shown given interaction scheme achieving binding anchor types link types hdm one also indicate links given type shown binding anchor type unwanted link type hyperpro done specifying unwanted link type presented interaction scheme produces empty text string hyperpro discussed terms dexter architectural vocabulary 11 dexter model instantiation nodes links depends presentation specification considered primitive model see notion interaction schemes concrete proposal elaborate develop dexter presentation specifications rich hypertext obtain tailorability user interface addition interaction engine approach addresses interpret events hypertext presentation issue dexter model seven issues paper 12 frank halasz et al discusses problem document compiler notecards document compiler extracts information hypertext combines linear text intended printing problem linearized document becomes new entity system corrections made linearized document reflected back hypertext another problem notecards lack mechanisms allowing user view document multiple levels abstraction interaction schemes seem solve prob lems define interaction schemes extract information combine document compiler combined text shown text editor exported external tool however text still edited changes saved appropriate nodes also able produce several levels outlines different interaction schemes macweb 16 powerful mechanism synthesizing doc uments document synthesis specified dedicated language webtalk used purposes well seems powerful simple rule language however seems like system two properties macweb system lacking first changes synthesized node reflected back original nodes rather synthesized node becomes node right synthesized node corresponds presentation hyperpro changes presentations reflected internal rep resentation second clear extent macweb allows tailoring command repertoire grif structured document editor described 19 hypertext system seems resemble hyperpro grif logical structure document described document type definition dtd describes attributes hierarchical structure basic entities separated logical structure possible create presentation models similar hyperpro interaction schemes describe different attributes subcomponents presented screen including aspects font color system also allows several simultaneous views logical structure instance showing outline level detailed level time editing done one view reflected views well underlying structure manipulated hyperpro update views immediately would like future grif solves two problems mentioned halasz way hyperpro however also notable differences grif hyperpro first grif distinguishes hierarchical structure links links come two main varieties crossreference links inclusion links inclusion links treated hierarchical structures destination node shown inlined anchor point grif presentation make full use inheritance scheme grif presentation model hyperpro interaction schemes treat links inclusion links hyperpro inclusions short second prominent difference however grif uses presentation models control appearance hyperpro interaction schemes control appearance input events main inspiration notion interaction schemes comes area structureoriented programming environments 5 many environments gandalf 10 socalled presentation schemes also known unparsing schemes used specify syntax trees pretty printed screen work generalized schemes interaction schemes adopted hypertext framework hyperpro separation internal representation external views also important structureoriented programming environments similarly question structureediting versus textediting plays important role environ ments hyperpro settled text editing entity level structureediting overall level hyperpro may seen basis structure oriented environment based internal graph representation relevant compare ipsen 6 programming environment based graph grammars ipsen based fine grained graph representation whereas hyperpro rely coarse grained nodes finally relevant point work border hypertext programming environ ments hyperweb 7 framework supports creation hypertextbased software development environ ments dogma 21 18 hypertext tool documentation maintenance c programs similarly hypersoft 20 program comprehension enhanced hypertext browsing tools paper characterized kind hypertexts call rich hypertexts summary rich hypertexts welltyped high degree structuring internally hypertext entities among nodes links demonstrated rich hypertexts possible define user interfaces elaborate user interfaces existing hypertext systems approach user interface defined controlled number simple rules organized respect types links nodes respect interaction schemes summary rulebase interaction engine framework hyperpro makes possible aggregate decorate textual pieces neighbor entities rich hypertext present result window graphical screen addition possible control user interaction presentations means exactly rulelookuptech nique applied generation views possible make detailed well abstract presentations rich hypertexts abstract presentations clearly interesting used convey kind overview nontrivial subset hypertext single window screen one kind abstract presentation outlines known many existing text editors word processors identified another kind abstract presentation call aggregated pre sentations aggregated presentation information two nodes typically necessarily different types presented together kept apart underlying hypertext aggregated presentations also recommended work macweb 16 literate view see figure example aggregated presentation 25 extended version present paper shown interaction engine used emulate much interaction gibis 4 hyperpro experimental system prototype use get practical experience ideas summer 94 significant part hyperpro interaction engine described paper storage level hyperpro realized fenris hyperbase 3 locally developed hyperbase part ongoing line hyperbase research briefly described 23 hyperpro kernel including interaction engine implemented smalltalk textual hyperpro interfaces running smalltalk epoch emacs derivate hyperbase epochbased hypertext editor connected smalltalk kernel via simple network protocols developed part project r manipulating sorce code dynamic design common lisp object system specification x3j13 document 88002r manual og dokumentation til fenris version 20 gibis hypertext tool exploratory policy discussion software development environ ments building integrated software development environments part tool specification hyperweb framework hypermediabased environments software development environments dexter hypertext reference model reflections notecards seven issues next generation hypermedia systems literate programming industrial strength hypermedia requirements large engineering enterprise janssen jr using structured types incorporate knowledge hypertext kurt nrmark kasper dogma tool documentation maintenance software systems vincent quint ir hypertext system literal c programming authors argumentation assistant aaa hypertextbased authoring tool argumentative texts research lab news hyperbase reserach aalborg university tr literate programming gandalf software development environments software development environments reflections notecards seven issues next generation hypermedia systems common lisp object system specification x3j13 document 88002r gibis hypertext tool exploratory policy discussion industrial strength hypermedia aquanet using structured types incorporate knowledge hypertext building integrated software development environments part italicauthors argumentation assistantitalic aaa hypertext system literate c programming hyperweb hdmmyampersandmdasha modelbased approach hypertext application design combining hypertext structured documents grif structural cognitive problems providing version control hypertext dexter hypertext reference model manipulating source code dynamicdesign ishys ctr paola carrara david musella gaetano zonno computational hypermedia sergisai project proceedings tenth acm conference hypertext hypermedia returning diverse roots returning diverse roots p7374 february 2125 1999 darmstadt germany jakob nielsen future hypermedia interactions v2 n2 p6678 april 1995 kasper sterbye literate smalltalk programming using hypertext ieee transactions software engineering v21 n2 p138145 february 1995 tien nguyen satish chandra gupta ethan v munson versioned hypermedia improve software document management proceedings thirteenth acm conference hypertext hypermedia june 1115 2002 college park maryland usa tien n nguyen ethan v munson john boyland configuration management hypermediabased software development environment proceedings fourteenth acm conference hypertext hypermedia august 2630 2003 nottingham uk thomas vestdam documentation threads presentation fragmented documentation nordic journal computing v7 n2 p106125 summer 2000 kurt nrmark max andersen claus christensen vathanan kumar sren staunpedersen kristian srensen elucidative programming java proceedings ieee professional communication society international professional communication conference proceedings 18th annual acm international conference computer documentation technology teamwork september 2427 2000 cambridge massachusetts david e millard nicholas gibbins danius michaelides mark j weal mind semantic gap proceedings sixteenth acm conference hypertext hypermedia september 0609 2005 salzburg austria kurt nrmark elucidative programming nordic journal computing v7 n2 p87105 summer 2000 tien n nguyen ethan v munson software concordance new software document management environment proceedings 21st annual international conference documentation october 1215 2003 san francisco ca usa david l hicks john j leggett peter j nrnberg john l schnase hypermedia version control framework acm transactions information systems tois v16 n2 p127160 april 1998 uffe kock wiil john j leggett workspaces hyperdisco approach internet distribution proceedings eighth acm conference hypertext p1323 april 0611 1997 southampton united kingdom