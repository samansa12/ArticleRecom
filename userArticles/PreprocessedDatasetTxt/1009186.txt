solving equations relational algebra enumerating solutions relational algebra equation natural powerful operation added query language primitive nested relational algebra yields query language nested relational databases equivalent wellknown powerset algebra study sparse equations equations polynomially many solutions look complexity compare expressive power similar notions powerset algebra b introduction suppose allowed see view database b computed relational algebra expression e still want find b might try invert e assum ing know expression work also know finite domain b specifically enumerate databases test x whether satisfies equation eb one solutions b course set solutions big might provide us useful information start detective work simple scenario database security led us wonder said general solution equations relational algebra generally e 1 e 2 two algebra expressions database schema augmented relation variables x 1 consider equation e solution equation given database b finite domain tuple x relations e 1 e 2 evaluate relation augmented database asking whether exists solution relational algebra equation database almost exactly thing asking whether existential secondorder logic sentence true database hence fagins theorem fag74 ef95 problems formulated finding solution relational algebra equation nothing problems np however present paper start observation set solutions equation set tuples relations nested relation one therefore consider enumeration solutions equation query language primitive added nested relational algebra introduce study extension nested relational algebra call equation al gebra equation algebra extremely pow erful equivalent wellknown powerset algebra nested relations particular interest however expressed equation algebra using equations solution set polynomial size database call equations sparse interest sparse equations stem time efficiency considerations deed obvious knowing equation sparse would help actually finding even one solution quickly neither obvious however would help example consider problem checking given database whether fixed sparse relational algebra equation solution using extension fagins theorem nested relational databases show problem nphard every problem np already decided polynomialtime nondeterministic turing machine polynomially many accepting computations input latter one many unresolved questions computational complexity theory all86 nevertheless sparse equations still interesting space efficiency standpoint deed natural evaluation strategy equation algebra expressions run polynomial space necessary equations occurring expression sparse interest fragments powerful query languages natural evaluation strategy polynomialspace new database theory research example abiteboul vianu av91 showed parity query expressible polynomialspace fragment various computationally complete query languages closer topic work suciu paredaens sp97 showed queries transitive closure parity expressible polynomialspace fragment powerset algebra nested relations 1 fragment consists powerset algebra expressions intermediate results polynomial size database also mention grumbach vianu gv95 also studied sparsity notion connection queries nested relational databases although considered sparsity property databases rather query language expressions suciu paredaens conjectured general polynomialspace fragment powerset algebra power nested relational algebra without powerset conjecture confirmed monadic database schemas vdb first sight operator add nested relational algebra enumerate solutions equa tion seem different powerset operator operators perform kind potentially exponential enumeration yet point analogue suciuparedaens conjecture hold sparse fragment equation alge bra specifically using sparse equations express transitive closure fact express fixpoint query complements result abiteboul hillebrand ah95 showed transitive closure becomes fragment make sense expressions always produce result logarithmic size applying exponential powerset operator expressions produces result polynomial size expressible powerset algebra polynomial space provided use clever pipelined evaluation strategy actually every fixpoint query already expressible using equations sparse even unambiguous unique solution database unambiguous equations relational algebra known implicit definitions firstorder logic studied context finite model theory kolaitis kol90 kolaitis already showed every fixpoint query implicitly defined offer straightforward direct proof another example given wellknown nesting operator nested relational alge bra operator becomes redundant extend algebra solution operator powerset operator ever original nesting operator never blows exponentially show without using nesting operator nesting expressible equation algebra using sparse equations possible polynomialspace powerset algebra expression however also similarities two fragments specifically prove analogue suciuparedaens result effect parity query expressible sparse fragment equation algebra either main technical contri bution proof involves elegant argu ment style liebeck lie83 invoking bocherts theorem order primitive permutation groups paper organized follows section 2 recalls nested relational data model section 3 introduces relational algebra equa tions section 4 introduces equation al gebra section 5 introduces sparse equations well natural evaluation strategy equation algebra expressions section 6 studies time complexity sparse equations fi nally section 7 presents comparison polynomialspace powerset algebra appendix additional details complements main body paper preliminaries quickly recall nested relational data model algebra tf86 ahv95 relation types defined follows types set atomic values relations type inductively defined follows relation type 0 element serves merely base case duction relation type set ktuples relation type database schema finite set relation names relation name associated type different 0 database b consists nonempty finite domain atomic values together relation name r relation r b type type r operators nested relational algebra standard relational algebra union difference gamma relations type cartesian product theta projection selection oe equality plus operators nesting unnesting defined follows let r relation type kg nesting r equals relation ni x type let r let 6 0 form unnesting r equals relation type expressions nested relational algebra schema built using operators relation names symbol stands finite domain input database relation expression e evaluates database b denoted eb one extend nested relational algebra powerset algebra adding powerset operator defined follows let r relation type powerset pir equals relation fs j rg type equations let x disjoint database schemas actual database schema x thought set additional relation variables let e 1 e 2 two expressions expanded define definition 31 given database b solution equation e database x finite domain b e 1 b b denotes expansion b ie database x finite domain b equals b equals x example 32 simple example let type r x equa tion given database b database fxg solution x r b another example let x relation variable type 0 0 one write relational algebra expression e database fxg finite domain ea empty x onetoone projections disjoint union equals equation solution database b finite domain cardinality even technically equation symbol expression easily take stand arbitrary expression always evaluates empty relation remark 33 example used equation special form e actually form special equation brought form stands alternatively one might wonder use disequations form e 6 nothing equations disguise also written 1 theta conversely equation e also written disequation theta e 1 delta 4 equation algebra ready extend nested relational algebra solution operator equa tions refer resulting algebra equation algebra allow elegant definition fix schema advance rather assume sufficiently large supply relation names possible types relation name occur expression like logic formu las occur free others occur bound relation names bound solution equation serve variables equation within equation however still free denote set relation names occur free equation algebra expression e freee constructs nested relational al gebra straightforward relation name r freer frg expressions e form e 1 freee freee 1 freee 2 expressions e form oee 0 freee freee 0 expression freed definition new solution operator following definition 41 let e 1 e 2 expressions let sequence distinct relation names also expression define free set g say note recursive definition sense e 1 e 2 contain solution operators turn avoid clutter disallow equation algebra expressions free relation name time becomes bound subexpression x theta fx expression e equation algebra evaluated databases b schema contains freee already know evaluation defined constructs nested relational algebra define definition 42 solution expression e form fx database b evaluation eb equals lation database fx solution relation type type x example 43 recall simple example equation 32 turn equation following equation algebra expression e frg database b frg relation eb equals pir b recall powerset operator pi section 2 words equation algebra expression e equivalent powerset algebra expression pir equation algebra allows equations used inside equations example want compute powerset powerset r write third example let r relation names binary type one write relational algebra expression e tc database c fr tg e tc empty r c c c transitively closed one also write nested relational algebra expression e min selects set binary relations minimal ones wrt set inclusion following equation algebra expression computes transitive closure relation r example saw powerset operator expressible equation alge bra conversely solution operator easily expressed powerset algebra hence proposition 44 equation algebra equivalent powerset algebra 5 sparse equations far equation algebra merely another syntax powerset algebra want higherorder logic however consider natural evaluation strategy equation algebra expressions start notice differences natural strategy evaluate solution expression form fx mean following enumerate databases fx g finite domain given input database one one reusing space test whether solution recursively evaluating e 1 e 2 include result constructs nested relational al gebra natural evaluation strategy clear evaluate expression form create two intermediate results recursively evaluating e 1 apply theta two intermediate results similarly evaluate expression form e 2 f oe g create intermediate result recursively evaluating e apply intermediate result view natural evaluation strategy define definition 51 equation called sparse relation variables flat type ie type form number solutions given database polynomial size database example 52 two equations example 32 sparse probably simplest example nontrivial sparse equation following let x relation name type 0 one write relational algebra expression e fxg database fxg ea empty x singleton equation taken relation variable solved sparse indeed given database b finite domain solutions precisely singleton subsets clearly linear thus polynomial number possible solutions remark 53 one may wonder whether notion sparsity would change definition 51 would look databases schema consisting relation names actually occur free equation answer easily seen negative sparse equations connected natural evaluation strategy following way proposition 54 natural strategy evaluate equation algebra expression e runs polynomial space equations occurring e sparse count space occupied intermediate results stored eval uation also size final result ifdirection proposition clear onlyif direction proven appendix 6 time complexity equation nonemptiness time complexity solving sparse equations closely linked open question computational complexity theory unlike previous section section talking natural evaluation strategy whose time complexity clearly least exponential soon equations solved instead looking time complexity nonemptiness problems equa tions nonemptiness problem equation schema relation variables x problem deciding given database whether equation solution database present section consider equations contain equations inside let us begin considering equations necessarily sparse still flat variables nonemptiness problem flatvariable equation clearly np suppose moreover database schema also flat sx expansion relation variables equation entirely flat schema course equation still general nested relational algebra ie e 1 e 2 contain operators result paredaens however implies nested relational algebra condition e also expressed form e 6 e flat relational algebra expression nonemptiness problem equation thus amounts asking whether fx given database b equivalently ask whether existential secondorder logic sentence true b e firstorder logic sentence expressing e 6 moreover equivalence relational algebra firstorder logic 9so property obtained way fa gins theorem fag74 ef95 states 9so captures exactly np properties flat relational databases hence class nonemptiness problems flatvariable equations flat database schemas exactly class np properties flat relational databases necessarily flat next show still get exactly np essence extension fagins theorem nested relational databases proposition 61 every property nested relational databases fixed schema np closed isomorphism corresponds nonemptiness problem flatvariable equation crux proof proposition given appendix representation nested relational databases pseudoflat ones also used gyssens suciu van gucht gsvg95 ready turn sparse equations nonemptiness problem actually complexity class fewp all86 consisting problems decided polynomialtime nondeterministic turing machine polynomially many accepting computations input clearly strictness inclusions remains open obvious question ask whether proposition 61 remains true focus sparse equations replace np fewp answer easy yes must restrict attention ordered databases databases include total order finite domain one relations deed usual proof fagins theorem yields fewp version theorem restricted ordered databases free flat databases general nested relational databases use representation technique proof proposition 61 corollary get corollary 62 exists sparse equation whose nonemptiness problem npcomplete 7 sparse equations versus sparse powerset expressions naturally call equation algebra expression sparse equations occurring sparse cf proposition 54 inspired proposition also define sparsity condition powerset algebra expressions call powerset algebra expression sparse natural evaluation strategy defined obvious way runs polynomial space remark 71 using standard techniques one show sparsity undecidable equation algebra expressions wel powerset algebra expressions related questions also typically undecidable example testing whether given expression equivalent sparse one suciu paredaens sp97 showed transitive closure flat binary relation expressible sparse powerset expression example 43 gave obvious equation algebra expression transitive closure expression sparse better proposition 72 transitive closure flat relation expressible sparse equation algebra expression proof given binary relation r natural number n 1 define relation r n classical composition operator binary relations ffi define r n r jrj equals transitive closure r n jrj r n consider following 6ary relation run run r theta r i1 theta r i1 appendix show equation whose solution given r run proves proposition unnest solution set project middle two columns get transitive closure exception run empty case transitive closure r r also easily tested nested relational algebra remark 73 equation constructed proof sparse unam biguous unique solution input database moreover proof works generally fixpoint query ahv95 flat databases difficulty fixpoint queries start empty relation proof proposition 72 start r easily dealt already explained introduction thus basically rediscovered earlier result kolaitis effect every fixpoint query implicitly definable firstorder logic kol90 note directness proof straightforwardly specifying run fixpoint computation unambiguous way original proof also presented ebbinghaus flum ef95 bit roundabout specifying stage comparison relation instead another perhaps bit frivolous example query expressible using sparse equations using sparse powerset expressions nesting operator easy express powerset algebra using powerset operator operators self primitive powerset al gebra consequence proposition 44 primitive equation algebra either next observe restrict sparse expressions nesting remains imprimitive equation algebra becomes primitive powerset algebra proposition 74 nesting expressible sparse powerset expression without using operator proof proposition given appendix standard argument finite model theory involving quantifier elimination monadic structures proposition 75 nesting expressible sparse equation expression without using operator proof let r relation name type 0 0 let x relation variables type 0 write relational algebra expression e database c fr xy g ec empty x singleton fxg x rg hence expression sparse equation expression equivalent construction general nesting operations analogous final main technical contribution concerns parity query suciu paredaens showed parity cardinality finite set expressible sparse powerset expression show analogue equation algebra proposition 76 parity query expressible sparse equation expression proof suppose contrary sparse equation expression express parity cardinality finite domain may assume input schema empty ie input database consists nothing else consider innermost equation occurring expression section 6 written form fx e flat relational algebra expression flat schema fx g let solution given input size n every permutation f fa also solution number different precisely njautaj auta group automorphisms since equation supposed sparse number n fixed equivalently putting sufficiently large n thus need know large permutation groups following crucial lemma proved appendix give us information need group permutations finite set denoted symd alternating subgroup even permutations altd g subgroup symd fixed set g subset delta every maps delta delta action g fixed set delta subgroup symdelta denoted g delta lemma 77 let k fixed natural number let g subgroup symd sufficiently large jgj n gamma k implies existence fixed set delta g delta contains altdelta invoking lemma get fixed set delta size n gamma k even permutation delta extended automorphism let x one relation variables equation arity say r consider rtuple whose components either gamma delta let r 0 number components symbol let equality type r 0 tuples denote neighbors set r 0 tuples delta equality type replace components components r 0 tuple left right get tuple x following claim proven appendix 78 neighbors either empty consists r 0 tuples delta equality type call rary pattern neighbors nonempty thus full say pattern instantiated x note also extreme cases consists exclusively stars star also allowed make sense thus see solution generated following nondeterministic procedure 1 initialize relations empty 2 choose k different elements playing role elements outside delta 3 every relation variable x arity r say run rary patterns nondeterministically instantiate x fixed number possible patterns also fixed hence write expression nested relational algebra given constructs set possible outputs nondeterministic procedure set superset solution set equation selecting solutions using nested relational algebra also easy matter hence get rid innermost equa tion repeating process get rid equations end left standard nested relational algebra expression parity query well known impossible ahv95 acknowledgment indebted laszlo babai pointed us liebecks paper r space usage functional query lan guages foundations databases complexity sparse sets p generic computation complexity finite model theory generalized firstorder spectra polynomialtime recognizable sets restricted bounded fixpoint closures nested relational algebra equivalent tractable query languages complex object databases implicit definability finite structures unambiguous computations graphs whose full automorphism group alternating group finite classical group converting nested algebra expressions flat algebra expressions complexity evaluation complex algebra expressions nested relational structures finite permutation groups tr