establishing relevancy bookkeeping libraries functional testing computer implementations abstractin paper address issues related definition faults errors failures separability attribution different development processes computing systems particular deal historical databases presumably contain certain data ie test failure data describe methodology used analyze database obtain pertinent information validation method may particular importance especially information database needs extrapolated purpose one database developed methodology used evaluate historical data collected development ibm 4381 9370 family computers extrapolate faults found function testing b introduction functional testing defined process evaluating functions computer systems software products assure meet prespecified requirements constitutes integral important process development computer systems software products functional testing processes involved computing systems number diverse aspects major contribution diverse aspects functional testing commonly referred bug may discovered corrected attributed different processes development system example bug observed execution program attributed software hardware logic design technology manufacturing etc depending process involved different aspects testing may uncovered due plurality processes involved functional testing cases researchers consider issues related processes exclude others instance researcher may consider issues concerning functional testing processes involving logic design microcode development exclude processes involving technology power supply packaging cooling software manufacturing etc exception studies past five years concentrated general topic error prediction models see example 1 relation bugs also referred commonly errors defects faults etc experienced development team design implementation computer system particular concerned two development teams namely logic design microcode development teams one important issue often neglected discussed literature choice validation data used research functional testing paper discuss procedure used choose validate error data studies become obvious presentation follow choice extrapolation validation data even though necessary involved originally anticipated providing partial justification researchers accept data case hope experience provides general guidelines procedures maintaining using error data precise definitions allow least uniform treatment error data future proceeded investigation different aspects functional testing development computing systems considered extreme importance provide answer following questions constitutes error ffl error attributed different development processes ffl errors separated different development processes ffl historical data sources contained information pertinent aspects interest regarding functional testing ffl errors attributed functional testing source historical data established ffl error data extrapolated historical source accurate representative aspects process consideration answers previous questions application found sections follow organization discussion follows first describe considered error fault failure discuss separability errors consequently discuss issues regarding historical data sources data accuracy finally describe database denoted library subsystem considered appropriate research extraction error data using fuzzy logic question answering system 2 finally establish confidence level accuracy error data 2 errors separability errors paper adopt predominantly accepted definition failure fault error proposed avizienis j laprie 3 indicates system failure occurs delivered service deviates specified service service specified agreed description expected service failure occurred system erroneous error part system state liable lead failure causein phenomenological sense error fault error thus manifestation fault system failure effect error service development computer system deviation expected service failure detected state system error causing failure determined attempt made correct causecauses faults leading unwanted system state given number processes associated development computer system determining process responsible fault constitutes difficulty need overcome order resolve failure eg architectural deviation computer system implementation may result fault introduced manufacturing logic design circuit design etc resolution failure requires establishing responsible development process able attribute faults different development processes required able categorize different kinds faults separate attribute faults different processes avizienis j laprie 3 categorized logic circuitry faults subject general interest 1 physical faults due external influences eg power supply fluctuations electromagnetic interference radiation common weaknesses manufacturing process 2 design faults introduced human mistakes faulty design tools well ambiguities errors initial specifications clearly categorization faults alone enough serve purpose collecting data development model separation attribution faults important clarified following scenario assume interested logic design process thus able separate faults associated physical faults part design faults furthermore able distinguish logic design faults faults associated tools reasons words able distinguish faults introduced logic design team separation faults achieved considering following ffl group people participating development effort system subdivided teams ffl team responsible particular process ffl teams communicate predefined specifications ffl underlined assumption among teams predefined specifications met ffl failure resulting detection erroneous state ie error discovered team responsible process presented failure correct faultfaults essence previous statements errorfault associated particular team requires intervention team resolution suggestion responsibilities team key contributor separating attributing errorsfaults intervention particular team resolve errorfault used separate count errorsfaults clearly errors require intervention multiple teams could opinion considered manifestation multiple faults 21 dilemma error data order develop error prediction model computer implementations often required conduct research based historical data needed derive validate model two sources databases containing historical data denoted error tracking libraries bookkeeping libraries used past researchers development error prediction models software microcode processes see example 4 5 6 first source denoted error tracking libraries usually established integration system report defects track resolution second source refer bookkeeping libraries usually created beginning development cycle manage revision code maintain information regarding development processes dilemma regarding library use much library representative development process considered representative number researchers rather two libraries contains accurate data dilemma seldom discussed literature either researchers available one libraries assumed accuracy problems error tracking libraries usually established integration system report defects track resolution library entries established follows deviation prespecified behavior established entry created entry usually corresponds report observed deviation ie entry represents description failure description number cases partial description machine state leads failure ie description error bookkeeping libraries usually created maintain information regarding development processes initiated beginning development cycle library entries established addition reasons unrelated functional testing correction faults form changes eg adding newly developed code updating comments code developed updating code containing code etc consequently faults accounted examining number changes clearly two databases different may face different types accuracy representation problems discussing accuracy data begin considering common accuracy problem error part system state liable lead failure suggesting experiencing failures imply absence errors thus absence faults introduces first inaccuracy developing models based historical data data reflect discovered errors approximation total number errors faults existing product second libraries available today may take account severity errorsfaults important parameter scheduling development attribute weight library entries regarding error tracking libraries multiple failures may correspond single fault logged multiple times librariesthe opposite also holds true also error keeping begins usually long initial design entry components implying inapplicability entire development process additionally instances becomes means communication among groups rather mean future studies understand development process formal process may reluctance different groups report errors rather rely private communications implications libraries partially reflect development system instances may contain misleading data furthermore occasions individuals primarily due misunderstanding may report nonexisting errors example case individuals misinterpret output test cases confuse tool errors design errors additionally reporting error unit appears belong responsibilities certain group may true thus concatenation error entries may occur faulty unit established resulting multiple entries error may always trackable depending set library resulting multiple counting error previously discussed problems encountered bookkeeping libraries advantages problems type libraries rely upon following bookkeeping libraries developed contain information necessary development eg provide security structure process building hardware design microcode controlling access data files maintaining current copies data files ffl entries always correspond faults correction faults require changes changes reported entries counted faults clearly implies one change one fault necessarily true conclusion libraries account severity faults ffl bookkeeping libraries begin early development process thus considered representative entire development cycle ffl difficult entirely impossible confuse design errors observed changes part used design system ffl multiple logging failures faults ffl given failure may consequence multiple faults representative bugs encountered development product discussed far concluded bookkeeping libraries offer better approximation history regarding testing computer systems however major drawback bookkeeping libraries designed keep track corrections faults system thus may difficult extract entries libraries reporting changes design major challenge type library exception libraries disposition able answer following question number changes extrapolated acceptable approximation proceeding answer question discuss library subsystems existence question answer entirely dependent library set 3 collection microcode hardware library data three databases considered study created microcode hardware development ibm 4381 9370 computer systems 1 microcode development bookkeeping library ibm 4381 computer systems 2 hardware development bookkeeping library ibm 4381 computer systems 3 microcode development bookkeeping library ibm 9370 computer systems microcode libraries ibm 4381 9370 computer systems similar structure accessed set commands allow user add data file library put command retrieve existing file get command perform type maintenance library compile release code sequence getput commands usually used retrieve modify store file back library libraries described allow commands well maintain additional information pertinent discussion transactions library automatically recorded system comment field 40 characters accompanying get put command used allow user describe reason issuing command comments filled developers document reasons accessing data file library placing back field considered key factor assessing relevancy library access functional changes since means explicitly stating whether entry pertains functional changes addition information library record contains state field indicating state readiness data file respect four test phases namely component test unit test subsystem test system test analysis microcode bookkeeping libraries record classified one three categories namely irrelevant definitechange possiblechange records irrelevant category include routine entries get promotes history etc records definite change category include put entries promoted component test system test phase three days less assumption based notion new code submitted library expedient manner mean fix patch outstanding problem found system test phase category also includes puts identified patches ie modifications library total total put possible definite possible records records definite changes changes changes 4381 hardware 17811 7874 7874 228 7646 4381 microcode 136016 29955 27473 3632 23841 total records total number records library totalputs put records library ibm 4381 hardware library number includes development puts possible definite changes changes changes put records promoted component test system test phase three days less puts identified patches possible changes put records included irrelevant records definite change categories table 1 breakdown ibm 4381 ibm 9370 libraries object load files records possiblechange category include put entries included definitechange irrelevant categories based assumption put possibly signifies change design applied resubmit existing data file back library retrieved get table 1 shows breakdown ibm 4381 microcode hardware ibm 9370 microcode puts possible definite changes 4 analysis bookkeeping libraries question answering system table 1 indicates majority database records belong possiblechange category given database written humans order determine possible changes indeed functional changes routine accesses developed database question answering system based fuzzy logic described 2 question answering system analyzes comments written spoken language determines whether comments related particular subject interest system depicted fig 1 fig 1 unique word generator generates alphabetically sorted list unique words contained comments puts possible change category ibm 4381 microcode hardware libraries word processor requires manual processing words automatic examination database manual process list unique words generated database word processor modified fuzzy evaluator confidence vector database confidence vector analyzer relevant table generator confidence value assignment fev processor unique word list generator figure 1 question answering system unique word generator analyzed order extract place potential relevant words functional testing table referred replace table considered relevant words words likely used describing functional change error fix bug change etc replace table contains two columns first contains words appear database second contains synonyms corresponding words appeared first column words database match first column replace table replaced words second column words deleted result analysis new comment records generated second database established database referred modified database contains words present replace table using unique word generator operating modified database list unique words modified database generated referred relevant word table subsequently word relevant word table assigned confidence value value zero one represents degree likelihood relevant word used describe action associated functional testing assigning confidence value word may achieved many ways including surveys participants creation database case investigation several hardware microcode developers asked attribute confidence value word word table reflected hisher perception usage word used comment describing functional error bug change thus given word multiplicity values collected corresponding opinion people construct membership grades word relevant word table responses survey participants algorithm needed determine expected value scaled values achieved establishing fuzzy expected value word relevant word table fev processor 7 considered number algorithms including fev 8 wfev 9 developed new algorithm denoted clustering fuzzy expected value cfev shown superior performance type application 10 using clustering algorithm elements fuzzy set grouped separate clusters population sizes mean determined individual cluster mean entire fuzzy set evaluated adjusted based population sizes mean formed clusters form cfev value word relevant word list detailed description cfev found 10 cfev algorithm computes fuzzy expected value equation 1 wa mean responses particular word n number responses number clusters produced data word n number responses cluster w ai mean cluster based cfev value word relevant word lists confidence comments libraries computed based 2 follows fuzzy evaluator operates analyzing comment within modified database conjunction list words relevant word table degree confidence associated word 1 comment relevant words confidence zero assigned entire record 2 comment one relevant word cfev value word assigned entire record 3 comment two relevant words confidence value entire record based following function w ce gammakw equation 2 w membership function attributing degree confidence regards functional testing comment w w j confidence values associated two individual words j appearing comment k constant greater 0 l constant 00 10 indicating words r confidence value w r l considered favorably describe subject interest words w r l considered adversely describe subject interest words w considered neutral parameter c defined 2 ie average confidence two words j 4 comment two relevant words confidence value entire record may computed operator phi given applies equation 2 possible inclusion inputs equation 2 confidence values attributed words i1 output value phi 1 including n1 set confidence values consequently confidence value attributed comment applying following algorithm 1 exists least one element set produced phi exceeds given threshold value ae 0 average pairs l confidence value comment assumed max confidence value present set ffl step 2 step 1 hold true exists least one element set produced phi less given threshold value ae 1 average pairs l confidence value comment assumed min confidence value present set ffl step 3 neither step 1 step 2 holds true confidence value comment assumed equal average confidences detailed explanation algorithm found 2 5 establishing accuracy data question answering system 2 invoked threshold values ae 033 k l constants 05 clustering parameters 020 comments relevant functional testing extracted bookkeeping library outcome analysis bookkeeping libraries shown table 2 library tool changes tool ibm 4381 hardware 38 40 ibm 4381 microcode 48 55 ibm 9370 microcode 25 31 tool changes percentage records assessed related functional changes based number possible changes percentage tool definite changes based changes number possible definite changes table 2 analysis ibm 4381 ibm 9370 libraries number relevant ibm 4381 hardware possible ibm 4381 microcode possible ibm 9370 microcode possible words comment puts 7646 records puts 23841 records puts 60498 records relevant words relevant words relevant words 3 434 940 417 6 0 004 003 table 3 frequencies relevant words three validations made regarding accuracy number changes considered presentation faults namely 1 accuracy tool 2 accuracy tools library entries considered report possible changes 3 overall accuracy data answer questions interest operate representative data measure accuracy measuring tools responses expert human assessments human assessments subjective absence better library systems potential inability creating objective entries future libraries library entries always reflect opinion person determining meaning constitutes entry library entry established represent best approximation attempting answer questions without resorting manual evaluation entire databases upper bound comments evaluated manually human expert field established manpower time disposition decided evaluate 10000 comments determining experimental databases proceeded follows first extracted profiles terms number words databases library application tool immediately observed application tool comments zero relevant words low 1945 high 3999 see table 3 discovery provided complication composition experimental databases given percentages indicate much 40 entries considered routine accesses ie zero relevant words tool imperative guarantee tool highly successful excluding comments imposing consideration comments containing zero relevant words initially anticipated previous discussion incorporated three databases db1 db2 db3 composition described table 4 three databases db1 db2 db3 extrapolated ibm 4381 hardware microcode ibm 9370 microcode possible changes respectively selected database zero relevant one relevant two relevant two relevant total possible words word words words changes table 4 number relevant words experimental databases database zero one two two possible relevant words relevant word relevant words relevant words changes db3 3885 4308 1384 423 215 table 5 percentages relevant words experimental databases entries randomly made sure entries appeared characteristics databases described table 5 number things noted characteristics databases namely ffl considered almost half comments 4512 ibm 4381 hardware ffl considered one fifth comments 2202 ibm 4381 microcode ffl considered 215 ibm 9370 microcode ffl clearly experimental database extrapolated ibm 9370 microcode indicated earlier argued nonrepresentative ffl even though composition databases reflect actual characteristics evaluated almost half comments ibm 4381 hardware one five ibm 4381 microcode suggesting tool close human evaluation confidence associated success tool high ffl composition db1 db2 especially db1 reported table 6 suggest evaluated satisfactory comments zero relevant words considered 7172 db1 4809 db2 comments relevant words entire ibm 4381 hardware microcode databases furthermore least db1 operated substantial overall percentages comments table 6 db1 considered examination 3382 overall comments left entire ibm 4381 hardware database examination containing one relevant word 3910 containing two relevant words 4412 containing three relevant words database zero one two two possible relevant words relevant word relevant words relevant words changes db1 7172 3382 3910 4412 4512 db3 209 232 197 181 215 table frequencies relevant words based possible changes tool accuracy 9609 9570 9586 9779 9937 9941 tool changes 3151 3545 2330 0 0 0 manual changes 3055 3551 2182 221 063 059 table 7 tool versus manual evaluation previous discussion suggest high degree accuracies db1 tool suggest high degree confidence final outcome least ibm 4381 hardware database potentially extension high degree confidence libraries shown similar accuracy tool conducting discussion experimental databases noted interested overall accuracy regarding closeness evaluation human evaluation words wanted evaluate percentage records correspond functional changes versus percentage records evaluate closeness percentages tool manual evaluation evaluate tool accuracy necessary first evaluate tool error consequently use error represent disagreement manual evaluation tool produce agreement two evaluations constitutes tool accuracy tool accuracy found first row table 7 compiled include following tool errors ffl tool error includes comments considered functional changes manual evaluation ffl tool error excludes comments considered manual evaluation functional changes findings indicate agreement tool manual evaluation low 9570 high 9609 three experimental databases db1 db2 db3 indicates tool accurate decisions separate database entries relevant irrelevant functional testing regions finally interest identify database pertinent functional testing establishing percentage pertinent comments functional testing second third row table 7 report percentages three experimental databases db1 db2 db3 functional changes computed tool second row manual evaluation third row fourth row reports absolute value deviation tool manual evaluation findings indicate tool manual evaluation close among others indicating tool used establish relevance database functional testing given excluded comments concern table 7columns db10 db20 db30 also report result evaluation comments containing zero relevant words given lowest percentage 9779 suggested tool considers entries routine accesses database high degree certainty indeed routine accesses conclusion experimentation strongly suggests tool operate satisfactory note performed additional experimentations regarding actual database composition overall validation results accordance reported interested reader refer 11 6 conclusion paper first identified number issues related functional testing particular addressed issues related definition faults errors failures separability various development processes dilemma research data choice database provides confidence reflection entire development cycle consequently discussed assessment ibm 4381 microcode hardware ibm 9370 history libraries two databases containing half million records established relevancy study functional changes applying fuzzy reasoning database question answering system 2 result assessment concluded libraries pertinent functional testing based percentages relevant records ibm 4381 microcode hardware 9370 microcode bookkeeping libraries error data used example 1 extracted confidence associated tool overall data could considered high caution reader consider final results analysis approximation error data final note indicate absence better databases precise common methodology approximations done today arena error data hope investigation reported paper help discussion future improvements related maintaining databases provide grounds discussion achieve common methodology maintaining commonly acceptable good error data extensive complicated extrapolations validations approximately good error data avoided r prediction computer implementation faults fuzzy reasoning database question answering system dependable computing concepts design diversity software errors complexity empirical investigation analysis several software defect models experiments computer software complexity reliability derivation memberships fuzzy sets expert systems fuzzy mathematical techniques applications use weighted fuzzy expected value wfev fuzzy expert systems method computing typical fuzzy expected value establishing relevancy bookkeeping libraries functional testing computer implementations tr