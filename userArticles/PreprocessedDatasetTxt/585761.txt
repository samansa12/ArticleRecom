minimal hierarchical collision detection present novel bounding volume hierarchy allows extremely small data structure sizes still performing collision detection fast classical hierarchical algorithms cases hierarchical data structure variation axisaligned bounding box trees addition memory efficient constructed efficiently fastwe also propose criterion used construction bv hierarchies formally established previous heuristics idea argument general applied bounding volume hierarchies well furthermore describe general optimization technique applied hierarchical collision detection algorithmsfinally describe several box overlap tests exploit special features new bv hierarchy compared experimentally among dop tree using benchmark suite realworld cad data b introduction fast exact collision detection polygonal objects undergoing rigid motions core many simulation algorithms computer graphics particular virtual reality applications virtual prototyping need exact collision detection interactive speed complex arbitrary permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee vrst02 november 1113 2002 hong kong polygon soups fundamental problem dynamic simulation rigid bodies simulation natural interaction objects haptic rendering important vr system able simulations interactive frame rates otherwise feeling immersion usability vr system impaired requirements collision detection algorithm virtual prototyping realtime sit uations make assumption put convexity topology manifoldedness cad data usually wellbehaved make assumptions estimations position moving objects future finally polygon numbers high usually range 10000 100000 polygons per object performance collision detection based hierarchical bounding volumes depends two factors 1 tightness bounding volumes bvs influence number bounding volume tests 2 simplicity bounding volumes determines eciency overlap test pair bvs 11 algorithm sacrifice tightness fast overlap test hierarchical data structure tree boxes axisaligned object space leaf encloses exactly one polygon object unlike classical aabb trees however two children box cannot positioned arbitrarily hence call data structure restricted box tree boxtree allows fast overlap tests simultaneous traversal tumbled boxtrees 1 restriction place relation child parent box node tree needs little memory thus build store hierarchies large models little memory important number polygons rendered interactive frame rates seems increase currently even faster moores law would predict also propose ecient algorithm constructing good boxtrees important virtual prototyping manufacturing industries want applications compute auxiliary derived data startup time need stored product data management system algorithm boxtrees constructed loadtime geometry even high complexities extended version paper found http webcsunibonndezachindexhtmlpublications order guide topdown construction bounding volume hierarchies criterion needed determine good split set polygons associated node paper present formal argument previous heuristics derive criterion yields good hierarchies respect collision detection idea argument generally applicable hierarchical collision detection data structures techniques presented paper applied axisaligned bounding volumes dops well would probably yield similar savings memory computational costs since motivation techniques valid bounding volume hierarchy constructed certain natural way also propose general optimization technique applied hierarchical collision detection algorithms new bv hierarchy also used speed ray tracing occlusion culling within aabbs rest paper organized follows section 2 gives overview previous work new data structure algorithms introduced section 3 section 4 describes ecient computation box trees results presented section 5 2 related work bounding volume trees seem ecient data structure tackle problem collision detection rigid bodies hierarchical spatial decomposition bounding volume data structures known computational geome try geometrical data bases ray tracing long time kd trees octrees 18 rtrees 4 obb trees 2 collision detection sphere trees explored 12 17 11 proposed algorithm fast overlap tests oriented ie nonaxisparallel bounding boxes obbs also showed obb tree converges rapidly shape object aabb tree downside much expensive boxbox intersection test addition heuristic construction obb trees presented 11 splits across median longest side obb trees applied collision detection 14 21 aabb trees studied 20 19 15 data structures work quite eciently practice memory usage considerably higher needed hierarchy even sphere trees recently hierarchical convex hulls proposed collision detection proximity queries showing excellent performance memory footprint data structure even larger previously cited ones even increased optimization techniques authors propose collision detection algorithm nonhierarchical approaches try subdivide object space instance voxel grid 16 delaunay triangulation 9 particular nonhierarchical approaches seem promising collision detection deformable objects 1 13 8 regarding name data structure would like point 3 presented theoretical results class bounding volume hierarchies called boxtree however data structure substantially dierent provide runtime results bounding volume hierarchies also used areas nearestneighbor search ray tracing point kd trees 5 shown longestside cut produces optimal trees context nearestneighbor searches however seems rule apply collision detection 3 datastructureandalgorithms given two hierarchical bv data structures two objects following general algorithm scheme quickly discard sets pairs polygons cannot intersect b overlap return b leaves return intersection primitives enclosed b else children ai bj traverseaibj end almost hierarchical collision detection algorithms implement traversal scheme way allows quickly zoom pairs close polygons characteristics dierent hierarchical collision detection algorithms lie type bv used overlap test pair nodes algorithm construction bv trees following first introduce type bv present several algorithms check overlap 31 restricted boxtrees bv hierarchy node bv associated completely contains bvs children usually parent bv made tight possible binary aabb trees means parent box touches child box 3 sides average tried quantify observation aabb tree three representative objects measured empty space nodes parent nodes 2 experiments show half nodes volume empty space bounding box parents bounding box 10 consequently would waste memory computations collision detection stored full box node therefore hierarchy never stores box explicitly instead node stores one plane perpendicular one three axes almost least possible amount data needed represent box suciently dierent parent box store plane using one float representing distance one sides parent box see figure 1 reason become clear 3 addition axis must stored 2 bits need distinguish two 2 nodes one side excluded calculation side construction performed split 3 one could picture resulting hierarchy cross kd trees aabb trees splitting planes lower child c l cu upper child figure 1 child nodes obtained parent node splitting one side drawing shows case parent lower upper child coplanar splitting planes cases whether nodes box lies lower side upper side plane upper lower defined local coordinate axes object box hierarchy restricted sides call restricted boxtree obviously restriction makes nodes boxtree hierarchy slightly less tight regular aabb tree see hurt collision detection performance observation made aabb trees probably also true hierarchies utilizing kind axisaligned bv dops section 4 describe detail algorithm construct restricted boxtree 32 box overlap tests following describe several variations algorithm test overlap two restricted boxes exploiting special properties restricted boxtree algorithms assume given two boxes b b 1 b 2 b 3 coordinate frame box b respect object space 321 axis alignment since axisaligned boxes oer probably fastest overlap test idea first overlap test enclose b axisaligned box l h r 3 test axisaligned already following show done minimal computational effort restricted boxtrees already know parent boxes b must overlap according test proposed notice need compute 3 values l h one along axis 3 reused bs parent box notice need perform one operation derive box parent box assume b derived parent box splitting plane perpendicular axis b b 1 b 2 b 3 distance c away corresponding upper side parent box ie b lower child already computed parents axisaligned box denote l computed see figure 2 l l 0 l 0 similarly l x hx computed b upper child analogously new value along 2 axes addition saving lot computations also save half comparisons overlap tests aligned boxes notice need compare 3 pairs coordinates instead 6 status 3 changed example comparison along x axis done overlap hx l l x h l x xcoordinates box note decision bx 7 0 made already computing hx l x method needs 12 floating point operations 3 checking overlap pair nodes restricted boxtree 322 lookup tables since b fixed complete traversal two boxtrees cs range known beginning traversal would seem computations could possibly sped use lookup table beginning traversal compute 3x3 lookup tables 1000 entries one table component traversal term form x replaced c integer splitting axis see results discussion 323 separating axis test separating axis test sat dierent way look linear separability two convex polytopes two convex bodies disjoint find separating plane equivalent finding axis two bodies projected onto axis yielding two line inter vals disjoint hence separating axis boxes 11 shown suces consider 15 axes apply test nodes restricted box tree 4 previously need compute line intervals scratch instead modify ends 15 line intervals dierent ones parent let one candidate separating axes assume b lower box see figure 2 lower box compute l analogously upper box course precompute 3x15 possible products b advantage test precise ie false positives one disadvantage test fact test axis alignment considered variant separating axis test special subset axes considered instead full set c c figure 2 one value per axis needs recomputed overlap test figure 3 reduced version separating axis test seems good compromise number false positives computational eort 9 axes perpendicular b edgeedge cross products total method needs 82 flops worst case much higher method still less 200 flops worst case obbs 5 324 sat lite seen section 9 candidate axes obtained possible cross products edge orientations lend nice optimizations therefore natural choice subset 15 axes would set 6 axes consisting three coordinate axes b resp see figure 3 proposed 19 called sat lite apply idea restricted boxtrees show even computational eort saved variant also viewed first variant executed two times first using bs coordinate frame total operation count 24 33 optimizations section describe several techniques improve speed restricted boxtrees hierarchical collision detection general first optimization technique general one applied algorithms hierarchical collision detection overlap test pair nodes involves nodespecific computations performed independently node opposed pairspecific computa tions idea shift nodespecific computations one level traversal assume costs node pair overlap test consist nodespecific part c1 overlaptestspecific part c2 costs pair b ca ab found overlap 4 pairs children need checked however compute node specific computations already still visiting ab pass children pairs reduces costs ca nodespecific computations applied one two hierarchies nodespecific costs hierarchy neglectible dierence even larger ie 9c1 5 worst case actually happens exactly half node pairs visited simultaneous traversal depending actual proportions c1 c2 result dramatic savings case restricted boxtrees first overlap test axis alignment technique reduces number floating point operations 15 multiplications 2 additions 5 comparisons technique might already implemented collision detection code identified general optimization technique hierarchical collision detection usual keep one pointer parent first children save considerable memory restricted boxtrees nodes small memory footprint 4 construction boxtrees performance hierarchical collision detection depends traversal algorithm also crucially quality hierarchy ie construction algorithm algorithm pursues topdown approach usually produces good hierarchies allows efficient construction researchers pursued bottomup approach 3 insertion method 10 4 41 general criterion topdown construction bv hierarchies consists two steps given set polygons first computes bv chosen type covering set polygons splits set number subsets usually two describing construction algorithm derive general criterion guide splitting process hierarchy produced good sense fast collision detection let cab expected costs node pair b condition already determined collision detection need traverse hierarchies assuming binary trees unit costs overlap test expressed children b resp p probability pair must visited condition pair b visited possible locus anchor points figure 4 estimating volume minkowski sum two bvs derive estimate cost split set polygons associated node optimal construction algorithm would need expand 1 leaves 2 find minimum since interested finding local criterion approximate cost function discarding terms corresponding lower levels hierarchy gives derive estimate probability p a1 b1 sake simplicity assume following aabbs used bvs however similar arguments hold kinds convex bvs event box intersecting box b equivalent condition bs anchor point contained minkowski sum b situation depicted figure 4because b1 child b know anchor point b1 must lie somewhere minkowski sum abd inside b1 inside b know a1b1 abd arbitrary convex bvs probability overlap case aabbs safe assume aspect ratio bvs bounded consequently bound volume minkowski sum estimate volume minkowski sum two boxes yielding since vola volb already committed earlier step recursive construction equation 3 minimized minimizing criterion constructing restricted boxtrees 42 algorithm according criterion derived recursion step try split set polygons cost function 3 minimized done trying find good splitting three coordinate axes selecting best one along axis consider three cases subsets form lower boxes respect parent upper boxes one upper one lower box case first try find good seed polygon two subsets close possible outer border perpendicular splitting axis second pass consider polygon turn assign subset whose volume increased least good splitting candidates obtained three axes pick one least total volume subsets algorithm criterion propose could also applied construct hierarchies utilizing kinds bvs obbs dops even convex hulls suspect volume aabbs would work fairly well estimate volume respective bvs also tried variant algorithm considers one axis three cases along axis always axis corresponding longest side current box experiment motivated recent result kd trees 5 result see section 5 current implementation splitting planes children coplanar yet explored full potential allowing perpendicular splitting planes algorithm proven geometrically robust since error propagation therefore simple epsilon guard comparisons suces 43 complexity certain assumptions complexity constructing boxtree n number polygons supported experiments see section 5 algorithm takes constant number passes polygons associated node order split set polygons f pass linear number polygons bv hierarchy bytes flops restr boxtree 321 9 12 restr boxtree 324 9 24 restr boxtree 323 9 82 sphere trees aabb tree 28 90 obb tree 64 243 tree 100 168 table 1 table summarizes amount memory per node needed various bv hierarchies number floating point operations per node pair worst case collision detection number bytes also includes one pointer children optimization technique section 33 applied flops counts reduced factor 2 boxtrees sphere car lock headlight pgons 1000 time figure 5 plot shows build time restricted boxtrees various objects every split produce two subsets f2 let us assume f1 f2 n 1 depth boxtree let n time needed build boxtree n polygons 5 results memory requirements dierent hierarchical data structures compared calculating memory footprint one node since binary tree n leaves always summarizes number bytes per node dierent bv hierarchies table also compares number floating point operations needed one nodenode overlap test methods described three fast hierarchical collision detection algorithms obb dop sphere tree following results obtained pentiumiii 1 ghz 512 mb algorithms implemented c top scene graph opensg compiler gcc 304 timing performance algorithms used set cad objects varying complexities see figure 6 plus synthetic objects like sphere torus benchmarking performed following scenario two identical objects positioned certain distance start distance computed centers bounding boxes two objects objects scaled uniformly fit cube size 2 3 one performs full tumbling turn z xaxis fixed large number small steps 5000 step collision query done average collision detection time complete revolution distance computed decreased new average collision detection time com puted comparing dierent algorithms summarize times average time taken range dis full lite axis alignm pgons 1000 time millisec604020016120804 figure 7 comparison dierent overlap tests pairs boxtree nodes shows sat lite test seems oer best performance tances usually occur practical applications physicallybased simulation figure 7 compares performance various box overlap tests presented section 32 one cad objects similar results obtained objects suite although full separating axis test determine overlap boxes without false positives seems computational eort worth least axisaligned boxes 19 arrived similar conclusion general aabb trees experiments seems sat lite oers best performance among three variants runtime comparison boxtree algorithm dop trees various objects found figure 8 seems boxtrees oer indeed good performance needing much less memory result puts restricted boxtrees league dop trees 21 obb trees 11 sake brevity omitted experiments assessing performance lookup table approach turned lookup tables oer speedup 8 even slower nonlookup table version lower polygon complexities setup time tables reason might floating point figure objects test suite left right body car car headlight lock car door torus data courtesy vw bmw integer arithmetic operations take almost number cycles current cpus shown section 4 boxtrees built figure 5 reveals constant small boxtrees constructed startup time application 6 conclusion proposed new hierarchical bv data structure restricted boxtree needs arguably least possible amount memory among bv trees performing fast dop trees uses axisaligned boxes nodes tree store explicitly instead stores update information node uses instance factor 7 less memory obb trees order construct restricted boxtrees developed new algorithm runs n number polygons process 20000 polygons per second 1 ghz pentiumiii also propose better theoretical foundation criterion guides construction algorithms splitting procedure basic idea applied bv hierarchies number algorithms developed fast collision detection utilizing restricted boxtrees gain eciency special features bv hierarchy benchmarking shown one seems perform consistently better others several optimization techniques presented increases performance new collision detection algorithm important one also applied hierarchical collision detection algorithms significantly improve performance finally using suite cad objects comparison trees suggested performance restricted box trees fast cases 61 future work bv trees work excellently rigid objects still open issue extend data structures accommodate deforming objects new bv hierarchy could also used queries ray tracing occlusion culling would interesting evaluate application domains stated bv trees binary trees however 6 observed arities might yield better per formance parameter optimized constructing boxtrees far approximated cost equation first order rather first level approximating higher order one could possibly arrive kind look ahead criterion construction algorithm could result better hierarchies 7 r tiling kinetic collision detection survey ray tracing acceleration techniques boxtree hierarchical representation surfaces 3d accurate fast proximity queries polyhedra using convex surface de composition fast penetration depth estimation elastic bodies using deformed distance fields automatic creation object hierarchies ray tracing hierarchical structure rapid interference detection approximating polyhedra spheres timecritical collision detection collision resolutions cloth simulation six degreesoffreedom haptic rendering using voxel sam pling collision detection animation using spheretrees computational ge ometry introduction rapid collision detection dynamically aligned doptrees tr computational geometry introduction automatic creation object hierarchies ray tracing survey ray tracing acceleration techniques rtree efficient robust access method points rectangles obbtree six degreeoffreedom haptic rendering using voxel sampling efficient collision detection using bounding volume hierarchies kdops kd trees better cut longest side efficient collision detection complex deformable models using aabb trees realtime collision detection response complex environments rapid collision detection dynamically aligned doptrees ctr jan klein gabriel zachmann timecritical collision detection using averagecase approach proceedings acm symposium virtual reality software technology october 0103 2003 osaka japan kavan carol osullivan ji ra efficient collision detection spherical blend skinning proceedings 4th international conference computer graphics interactive techniques australasia southeast asia november 29december 02 2006 kuala lumpur malaysia esther arkin gill barequet joseph b mitchell algorithms twobox covering proceedings twentysecond annual symposium computational geometry june 0507 2006 sedona arizona usa