offline parsability wellfoundedness subsumption typed feature structures used extensively specification linguistic information many formalisms subsumption relation orders tfss information content prove subsumption acyclic tfss well founded whereas presence cycles general tfs subsumption well founded show application result parsing wellfoundedness subsumption used guarantee termination grammars offline parsable define new version offline parsability less strict existing one thus termination guaranteed parsing larger set grammars b introduction feature structures serve means specification linguistic information current linguistic formalisms lfg kaplan bresnan 1982 hpsg pollard sag 1994 versions categorial grammar haddock klein morill 1987 paper focuses typed feature structures tfss generalization untyped counterparts tfss related subsumption see carpenter 1992b according journal logic language information accepted publication information content show subsumption relation wellfounded acyclic tfss cyclic ones use result prove parsing terminating grammars offline parsable proposition cited proved shieber 1992 also suggest less strict definition offline parsability guarantees termination case acyclic tfss work originated interest theoretical aspects parsing grammars based tfss see wintner francez 1995b results presented basically theoretical implemented system efficient processing grammars based abstract machine techniques work presented wintner francez 1995a rest paper organized follows section 2 outlines theory tfss carpenter 1992b section 3 discuss wellfoundedness tfs subsumption sketch theory parsing section 4 discuss offline parsability tfsbased grammars section 5 2 theory feature structures section summarizes preliminary notions along lines carpenter 1992b use terminology typed feature structures results valid untyped structures special case tfss carpenter 1992b defines welltyped totally welltyped feature structures subsets set tfss generality assume nothing welltypedness tfss however larger context work done setup features assigned types appropriateness specification hence retain term typed feature structures rather sorted ones following discussion fix nonempty finite disjoint sets types feats types features respectively infinite set nodes nodes disjoint types feats member assigned type types fixed typing function nodes types set nodes rich sense every 2 types set metavariable ranges subsets types types f features q nodes partial function f f x means f defined value x whenever result application partial function used operand meant function defined arguments denotes set natural numbers partial order v types type hierarchy bounded complete ie every upbounded subset types unique least upper bound tt v 0 said general 0 specific 0 subtype general ttypes specific inconsistent type occurrences identified feature structure parameters nodes types feats directed connected labeled graph consisting finite nonempty set nodes q nodes root q partial function specifying arcs every node accessible q b without subscripts range feature structures q subscripts constituents 1 let tfss set typed feature structures fixed parameters nodes types feats path finite sequence features set feats collection paths ffl empty path ff without subscripts range paths definition ffi extended paths natural way ffiq paths feature structure g note every tfs pia 6 oe since ffl 2 pia every feature structure q ffi cyclic exist nonempty path ff 2 paths node q 2 q ffiq q acyclic otherwise let atfss set acyclic tfss fixed parameters feature structure q ffi reentrant iff exist two different paths definition 21 subsumption exists total function subsumption morphism ffl every q 2 ffl every q 2 q 1 every f untyped feature structures modeled tfss consider particular type hierarchy set types set atoms plus types complex subsumes every type rest types incomparable features appropriate type complex appropriate value atomic nodes labeled atom nonatomic nodes complex variables symbol v overloaded denote subsumption addition subtype relation morphism h associates every node q 1 node q 2 least specific moreover arc labeled f connects q q 0 1 arc connects hq hq 0 2 two properties follow directly definition v b every path defined defined b two paths reentrant reentrant b two feature structures subsume exactly structure thing distinguishes identity nodes information usually irrelevant thus isomorphism defined tfss follows b alphabetic variants denoted b iff v b b v strictly subsumes b strictly subsumes b one following cases must hold either b contains paths doesnt path b ends node type greater counterpart b contains reentrancies paths lead node b lead different nodes lemma 22 b subsumption morphism h least one following conditions holds 1 exists path 2 pib n pia 2 exists node q 2 qa q hq 3 exist paths wellfoundedness section discuss wellfoundedness tfs subsumption partial order set wellfounded iff exist infinite decreasing sequence 0 1 elements prove subsumption acyclic tfss wellfounded show example general cyclic tfss subsumption wellfounded results surprising fact might deduced works eg moshier rounds 1987 shieber 1992 best knowledge spelled explicitly lemma 31 tfs acyclic iff pia finite proof cyclic exists node q 2 q nonempty path ff ffiq since q accessible let path root q ffi q infinite set paths contained pia acyclic every nonempty path ff 2 paths every q 2 q ffiq ff 6 q q finite feats outdegree every node finite therefore number different paths leaving q bounded hence pia finite 2 definition 32 rank let r types total function rt rt 0 acyclic tfs let defined deltaa lemma 31 rank well defined acyclic tfss deltaa thought number reentrancies every node q 2 qa contributes deltaa every acyclic tfs deltaa 0 clearly lemma 33 b acyclic proof since v b pia pib consider two possible cases ffl definitions theta subsumption definition subsumption since every reentrancy reentrancy b lemma 22 either case 2 holds deltaa deltab case 3 holds hence ffl pia ae pib might case jqa j jqb j every node q 2 qb image node qa exists path hence theorem 34 subsumption acyclic tfss wellfounded proof every acyclic tfs rankb infinite decreasing sequence acyclic tfss existed rank would mapped infinite decreasing sequence contradiction hence subsumption wellfounded acyclic tfss 2 theorem 35 subsumption tfss wellfounded proof consider infinite sequence tfss depicted graphically figure 1 every 0 see consider morphism h maps q i1 ie first nodes i1 mapped first nodes additional node i1 mapped last node clearly every 0 h subsumption morphism hence every 0 w i1 show strictness assume subsumption morphism third requirement subsumption h commuting ffi first nodes mapped h 0 first nodes i1 however q 1th node ffi q leads back q ffi i1 leads last node i1 cyclic node hence h 0 commute ffi contradiction hence thus exists strictly decreasing infinite sequence cyclic tfss therefore subsumption wellfounded 2 conclude section note specification inverse relation subsump tion wellfounded even cyclic feature structures ruled fact easily seen considering sequence feature structures f f f f f f f f f a3 figure 1 infinite decreasing sequence tfss nodes first labeled last farc leads every node successor clearly sequence infinite true whether appropriateness constraints imposed feature structures involved general case given feature structure might possible construct starting infinite decreasing sequence tfss expanding cycles infinite increasing sequence adding paths parsing parsing process determining whether given string belongs language defined given grammar assigning structure permissible strings large variety parsing algorithms exists various classes grammars detailed treatment theory parsing grammars based feature structures refer shieber 1992 sikkel 1993 wintner francez 1995b define simple algorithm grammars based tfss must emphasized results presented paper independent particular algorithm hold wide range different algorithms able represent complex linguistic information phrase structure notion feature structures usually extended two different approaches representing phrase structure feature structures adding special designated features fss defining extended notion fss first approach employed hpsg special features dtrs daughters encode trees tfss lists makes impossible directly access particular daughter shieber 1992 uses variant approach denumerable set special features namely 0 added encode order daughters tree typed system method would necessitate addition special types well general bound placed number features types necessary state rules see carpenter 1992b p 194 adopt approach new notion multirooted feature structures suggested sikkel 1993 wintner francez 1995b used definition 41 multirooted structures multirooted feature structure mrs pair h finite directed labeled graph consisting set nodes nodes partial function specifying arcs q ordered repetitionfree set distinguished nodes q called roots g necessarily connected union nodes reachable roots q required yield exactly q length mrs number roots j qj denotes empty mrs cyclic conditions tfs mrs reentrant contains node reached either two different roots two different paths metavariables oe ae range mrss ffi q constituents q gi mrs q root naturally induces feature structure set nodes reachable thus oe viewed ordered sequence ha necessarily disjoint feature structures use two views mrss interchangeably nodes shared one element sequence paths start one root reach different root particular cycles involve one root still possible define substructures mrss considering subgraph accessible subsequence roots definition 42 substructure substructure induced pair hi ji denoted oe ij ha use oe oe ii definition 43 subsumption multirooted structures mrs q gi subsumes mrs oe denoted oe v oe 0 exists total ffl every root ffl every q 2 q q v hq ffl every q 2 q f 2 feats ffiq f hffiq many properties tfss easily adaptable mrss let q ith root g easy show oe v ae every reentrancy oe reentrancy ae moreover oe ae strictly least one three conditions listed lemma 22 holds wellfoundedness result previous section easily extended mrss well rank function tfss used show wellfoundedness acyclic mrss reverse direction immediate presence cycles duplicate example previous section k times infinite decreasing sequence mrss length k obtained k 0 detailed discussion properties mrss refer wintner francez 1995b rules grammars defined additional parameter fixed finite set words words addition parameters nodes feats types lexicon associates every word w feature structure catw category 2 categories assumed disjoint input parser therefore sequence disjoint tfss rather string words definition 44 preterminals let defined iff case mrs hcatw j catw j1 ptw j 2 sake simplicity assume lexical entries ambiguous case ambiguity catw set tfss definitions become cumbersome results still obtain single word occurs input w category copied remaned nodes pt definition 45 grammars rule mrs length greater equal 1 designated first element head rule rest elements form rules body may empty grammar g r finite set rules r start tfs figure 2 depicts example grammar use avm notation rule tags 1 denote reentrancy type hierarchy grammar based omitted initial phrase lexicon john loves6 6 6 6 6 6 6 4 word theta agr 4 agr theta 3rd theta sg sem theta john word theta acc agr 4 agr theta 3rd theta sg sem theta word theta agr 4 agr theta 3rd theta sg sem theta love phrase theta sem sign theta nom sem sign theta phrase theta sem gamma6 6 4 sign theta sign theta acc sem figure 2 example grammar follows define notion derivation rewriting respect tfsbased grammars informally relation denoted defined mrss oe ae iff ae obtained oe successive application grammar rules reader referred eg sikkel 1993 shieber schabes pereira 1994 wintner francez 1995b detailed formulation concept variety formalisms define derivations first define immediate derivation informally two mrss related immediate derivation exists grammar rule ae licenses derivation ae license derivation mrs r subsumes head r must identified element body r must identified substructure b starting parts prior following remain intact b note r might carry reentrancies b path 2 leaving ith element reentrant path 1 leaving ath element 2 starting head r reentrant 3 element b r 1 3 reentrant b starting elements b correspond b respectively definition 46 mrs immediately derives mrs denoted b iff exist rule ae 2 r length n mrs r w ae ffl rs head identified element r ffl rs body identified substructure b r ffl first identical ffl last k gamma elements b identical reflexive transitive closure denoted defined follows exists 0 0 0 00 definition 47 mrs derives mrs denoted b iff exist mrss v 0 immediate derivation based traditional notion substituting symbol constitutes head rule body rule leaving context intact however rules based tfss context symbol substituted might affected substitution end require identity unifiability contexts mrss related derivations viewed specific needed ie containing information added rule licenses derivation also reason weaker conditions relation allows mrs derive mrs b sequence immediate derivations starts sepcification ends specification b figure 3 depicts derivation string john loves respect example grammar scope reentrancy tags limited one mrs use tags across different mrss emphasize flow information derivation6 6 6 6 6 6 6 6 6 6 6 6 4 phrase theta agr theta 3rd theta sg sem theta love theta john theta 1 sign theta nom agr theta 3rd theta sg sem theta john sign theta sem theta love 2 word theta nom agr theta 3rd theta sg sem theta john word theta agr theta 3rd theta sg sem theta love word theta acc agr 4 agr theta 3rd theta sg sem theta john loves figure 3 leftmost derivation definition 48 language language grammar g ng derivation example figure 3 shows sentence john loves language example grammar since derivation starts tfs specific initial symbol ends specification lexical entries sentences words parsing computational process triggered input string words length n 0 following discussion fix particular grammar particular input string w length n state computation consists set items definition 49 items item tuple oe j k oe mrs joej item active k joej otherwise complete items collection items oe j k item oe 1k said span input position position j parsing invariant motivates term oe k seen representation dotted rule edge parsing generated items oe possibly specific grammar rule k position oe indicating location dot part oe prior dot already seen part following dot still expected entire body oe seen edge becomes complete computation amounts successively generating items assume item generation done finite set deterministic operations create item basis previously generated zero items also item generated basis existing items items used operation assumption realized important class parsing algorithms known chart parsers computation terminating new items generated computation successful upon termination complete item spans entire input contains initial symbol generated final state computation contain item 0 oe n 1 n inputs length different algorithms assign different meanings items generate various orders see eg shieber schabes pereira 1994 sikkel 1993 general possible assume following invariant holds parsing invariant computation triggered w item oe j k generated one immediate consequence invariant items oe j k generated parsing parsing algorithm required correct correctness computation triggered w successful iff w 2 lg although shieber 1992 uses different notation wintner francez 1995b property proven 5 termination parsing wellknown see eg pereira warren 1983 johnson 1988 unificationbased grammar formalisms turingequivalent therefore parsing problem undecidable general case however grammars satisfy certain restriction termination computation guaranteed make use wellfoundedness subsumption section prove parsing terminating offline parsable grammars assure efficient computation avoid maintenance redundant items many parsing algorithms employ mechanism called subsumption check see eg shieber 1992 sikkel 1993 filter certain generated items define partial order items subsumption filter realized preserving item x item x 0 x 0 x generated previously thus items span substring general one maintained shieber 1992 wintner francez 1995b prove admitting subsumption check correctness computation preserved offline parsability introduced kaplan bresnan 1982 adopted pereira warren 1983 according grammar offline parsable contextfree skeleton infinitely ambiguous johnson 1988 points restriction defines slightly different terms ensures number constituent structures given string yield bounded computable function length string problem definition demonstrated haas 1989 every natural unification grammar contextfree backbone contextfree backbone inherent lfg due separation cstructure fstructure explicit demand cstructure contextfree however notion welldefined hpsg phrase structure encoded within feature structures indeed hpsg welldefined formal language sense backbone certainly missing categorial grammar might infinitely many categories shieber 1992 generalizes concept offline parsability doesnt prove parsing offline parsable grammars terminating use adaptation definition provide proof definition 51 finiterange decreasing functions total function f partiallyordered set finiterange decreasing frd iff range f finite every 2 df definition 52 strong offline parsability grammar strongly offline parsable iff exists frdfunction f mrss mrss partially ordered subsumption every string w different mrss oe ae oe ae oe ptw strong offline parsability guarantees particular substring input spanned finite number mrss grammar strongly offline parsable exist infinite set mrss set existed f would mapped elements set ff set infinite since infinite f doesnt map two different items image thus finite range assumption f contradicted shieber 1992 points nonofflineparsable grammars termination holds use general notion restriction require f produce different output oe ae incomparable respect subsump tion thereby extend class grammars parsing guaranteed terminate although still remain decidable grammars even weaker restriction doesnt hold definition 53 weak offline parsability grammar g weakly offline parsable iff exists frdfunction f mrss mrss partially ordered subsumption every string w different mrss oe ae oe ae oe ptw ae ae 6v oe f oe 6 f ae clearly strong offline parsability implies weak offline parsability however show inverse implication hold prove weakly offline parsable grammars guarantee termination parsing presence acyclic mrss prove conditions hold finite number different items generated computation main idea following infinite number different items generated infinite number different items must span substring input since input fixed finite parsing invariant would mean infinite number mrss derive substring input turn contradicts weak offline parsability constraint theorem 54 g weakly offline parsable mrss acyclic every computation terminates proof fix computation triggered w length n consequence parsing invariant indices determine span items limited 0 n dot positions 0 k joej remains show every selection j k finite number mrss generated let generated item suppose another item generated mrs different x x 0 preserved subsumption test ae v oe x replaced x 0 finite number replacements since subsumption wellfounded acyclic mrss suppose oe 6v ae ae 6v oe parsing invariant oe 1k ptw i1 ae 1k ptw range f finite finitely many items equal span pairwise incomparable since finite number items generated computation uses finite number operations every computation ends within finite number stepsthe proof relies wellfoundedness subsumption indeed termination parsing guaranteed weak offline parsability grammars based cyclic tfss obviously cycles occur unification even unificands acyclic however possible albeit costly practical point view spot parsing indeed many implementations logic programming languages well unificationbased grammars eg ale carpenter 1992a check cycles cyclic tfss allowed strict notion strong offline parsability needed strong condition proof applicable case nonwellfounded subsumption well exemplify difference strong weak offline parsability consider grammar g contains following single rule6 4 single lexical entry w 1 whose category lexical entry derived infinite number tfss easy see frdfunction distinguish pairs among tfss hence grammar strongly offline parsable grammar however weakly offline parsable since tfss derive lexical entry form subsumption chain antecedent implication definition weak offline parsability never holds even trivial functions function returns empty tfs every input appropriate frdfunctions thus parsing guaranteed terminate grammar might claimed example rule part grammar natural language unclear whether distinction weak strong offline parsability relevant natural grammars concerned still important formal mathematical computational properties grammars concerned believe better understanding formal properties leads better understanding natural grammars well furthermore might seem unnatural today common practice future acknowledgments work supported grant israeli ministry science programming languages induced computational linguistics work second author also partially supported fund promotion research technion wish thank anonymous referees enlightening comments r logic typed feature structures parsing algorithm unification grammar categorial grammar lexical functional grammar formal system grammatical representation logic partially specified data struc tures parsing deduction parsing schemata abstract machine typed feature struc tures parsing typed feature structures tr ctr efrat jaeger nissim francez shuly wintner unification grammars offline parsability journal logic language information v14 n2 p199234 march 2005 shuly wintner compositional semantics linguistic formalisms proceedings 37th annual meeting association computational linguistics computational linguistics p96103 june 2026 1999 college park maryland