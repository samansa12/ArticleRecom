multiple dispatch dispatch tuples many popular objectoriented programming languages c smalltalk80 java eiffel support multiple dispatch yet without multiple dispatch programmers find difficult express binary methods design patterns visitor pattern describe new simple orthogonal way add multimethods singledispatch objectoriented languages without affecting existing code new mechanism also clarifies many differences single multiple dispatch b introduction single dispatch found c stroustrup 97 java arnold gosling 98 gosling et al 96 smalltalk80 goldberg robson 83 eiffel meyer 92 meyer 97 selects method using dynamic class one object messages receiver multiple dispatch found clos chapter 28 steele 90 paepcke 93 dylan shalit 97 feinberg et al 97 cecil chambers 92 chambers 95 generalizes idea selecting method based dynamic class subset messages arguments multiple dispatch many ways expressive flexible single dispatch objectoriented oo programming bobrow et al 86 chambers 92 castagna 97 moon 86 paper propose new simple orthogonal way adding multiple dispatch existing languages single dispatch idea add tuples primitive expressions allow messages sent tuples selecting method based dynamic classes elements tuple gives multiple dispatch illustrate idea designed simple classbased oo language called tuple perhaps elegant language built directly multiple dispatch claim following advantages mechanism 1 added existing single dispatch languages c java without affecting either semantics b typing existing programs written languages 2 retains encapsulation mechanisms single dispatch languages 3 simple enough easily understood remembered believe programmers familiar standard single dispatch 4 uniform previous approaches incorporating multiple dispatch within single dispatching framework argue first two claims present semantics language two layers first layer small classbased singledispatching language sdcore interest second layer tuple proper includes sdcore adds multiple dispatch allowing messages sent tuples support third claim simplicity mechanism even think idea sending messages tuples clearly equivalent multiple dispatch agree support fourth claim argue mechanism advantages others solve problem incorporating multiple dispatch existing singledispatching languages rest paper organized follows section 2 describe singledispatching core tuple needed show mechanism added language section 3 describe additions single dispatching core make mechanism support first three claims section 4 supports fourth claim comparison related work section 5 offer appears oopsla 98 conference proceedings conference objectoriented programming systems applications vancouver british columbia canada october 18 22 1998 pp 374387 apologies bruce et al whose toople language bruce et al 93 pronounced way conclusions appendix give concrete syntax tuple appendix b give languages formal typing rules section introduce syntax semantics sdcore example 21 syntax semantics singledispatching core tuple classbased language similar spirit conventional oo languages like c java integer boolean values along standard operations values built language figure 1 illustrates sdcore wellknown pointcolorpoint example point class contains two fields representing x coordinate respectively point instance contains values fields supplied instance created example expression new point34 returns fresh point instance xval yval set 3 4 respectively point class also contains methods retrieving values two fields calculating distance point line assume line class defined elsewhere ease presentation sdcores encapsulation model extremely simple instances fields accessible methods instance receiver argument instance may contain inherited fields rule allows accessed directly similar protected notion c java colorpoint class simple subclass point class augmenting definition colorval field method retrieve color assume class color defined elsewhere colorpoint class inherits point classs fields methods create instance subclass one gives initial values inherited fields first fields declared subclass example one would write new colorpoint35red usual subclasses also override inherited methods simplify language sdcore single inheritance however multiple inheritance causes problems respect new ideas advocating use standard syntax message sends example p1 instance point subclass expression p1distancefromln2 invokes instances distancefrom method argument ln2 within method body keyword self refers receiver message case p1 dynamic dispatching used determine method invoke particular receivers class first checked method implementation right name number arguments method exists classs immediate superclass checked inheritance hierarchy valid implementation found none found messagenotunderstood error occurs simplicity ease theoretical analysis included assignment mutation sdcore could easily added 22 type checking sdcore overview static type system sdcore included completeness details see appendix b intended completely standard ease presentation sdcores type system simpler found realistic languages peripheral contributions four kinds type attributes types int bool types builtin integer boolean values respectively function type 1 n n1 type functions accept input n argument values types respectively return result type n1 class type cn cn class name type instances class cn types related simple subtyping relation types int bool subtypes ordinary contravariant subtyping rule used function types cardelli 88 class type cn 1 subtype another class type cn 2 class cn 1 subclass class cn 2 ensure safety rule type system checks every method name class cn 2 ms type cn 2 supertype ms type cn 1 classes meet check flagged errors thus every subclass passes type checker implements subtype superclass statically check message send expressionof form check static type e 0 subtype class type cn whose associated class contains method type 1 n n1 types expressions subtypes 1 n class point fields xvalint yvalint method xint xval method yint yval method distancefromllineint class colorpoint inherits point fields colorvalcolor method colorcolor colorval figure 1 classes point colorpoint unlike c java sdcore allow static overloading method names however since add multiple dispatch sdcore separate mechanism since dynamic dispatch seen dynamic overloading little reason respectively case e example p1distancefromln2 type int assuming p1 type point ln2 type line 23 problems single dispatching single dispatching easily support programming idioms bestknown problem sort binary method problem bruce et al 95 example consider adding equality test point colorpoint classes follows simplicity sdcore included super would allow colorpoints equal method call points equal method class point method equalppointbool class colorpoint inherits point method equalpcolorpointbool type error sdcore wellknown makes impossible colorpoint considered subtype point cook et al 90 words colorpoint instances cannot safely used wherever point expected polymorphism point hierarchy lost reason example illtyped sdcore problem semantic fault sdcore type system stems asymmetry treatment two point instances tested equality particular one instance message receiver thereby dynamically dispatched upon ordinary argument message plays role method selection castagna 95 multiple dispatch avoids asymmetry dynamically dispatching based runtime class arguments general problem visitor design pattern pages 331344 gamma et al 95 pattern consists hierarchy classes typically representing elements structure order define new operations elements without modifying element classes separate hierarchy visitors created one per operation code invoke visit occurs dependent visitor element used multimethods easily express required semantics section 7 baumgartner et al 96 singlydispatched implementation must rely unwieldy simulations multiple dispatching sdcore tuple extends sdcore tuple expressions tuple classes tuple types ability declare send messages tuples gives multiple dispatch nothing semantics typing sdcore changed extension 31 syntax semantics tuple expression creates tuple size n components v 1 v n v value corresponding figure shows one would solve pointcolorpoint problem tuple rather defining equal methods within point colorpoint classes create two new tuple classes methods first tuple class tuple two point instances receiver names p1 p2 used within methods tuple class refer tuple components however tuple classes client code privileged access fields components second tuple class similar defining equality tuple two colorpoint instances assume tuple class tuple color color equal method one tuple class given tuple classes since changes made point colorpoint classes adding equal methods tuple classes subtype relationship colorpoint point unchanged adding equal method tuple class instead original classes figure 1 colorpoint remains safe subtype point syntax sending message tuple analogous sending message instance example p1p2equal sends message equal tuple p1p2 invoke one two ml milner et al 90 allow tuples length one prevents ambiguity syntax semantics example expression xgy interpreted message sent instance tuple tuples either zero two elements allow builtin types int boolean appear components tuple class well conceptually one think corresponding builtin classes int boolean nontrivial subclasses superclasses tuple class p1point p2point method equalbool tuple class cp1colorpoint method equalbool cp1color figure 2 two tuple classes holding methods testing equality points equal methods method lookup sdcore relies dynamic class receiver method lookup tuple relies dynamic classes tuple components therefore appropriate equal method selected either point point colorpoint tuple class based dynamic classes p1 p2 particular method colorpoint colorpoint tuple class invoked arguments colorpoint instances runtime use dynamic classes distinguishes multiple dispatch static overloading found example ada 83 ada 83 semantics sending messages tuples multiple dispatch similar cecil chambers 95 consider expression value v c di minimal dynamic class v method tuple class c 1 c n applicable expression method named 1in dynamic class c di subclass c method takes mn additional arguments classes additional arguments involved determining applicability number matter among applicable methods various tuple classes unique mostspecific method chosen method 1 tuple class c 11 c 1n specific method 2 tuple class c 21 c 2n 1in c 1i subclass c 2i arguments methods involved determining specificity applicable methods exist messagenotunderstood error occurs applicable methods specific one messageambiguous error occurs algorithms efficiently implementing multiple dispatch exist see eg kiczales rodriguez 93 semantics immediately justifies part 1a claim orthogonality multiple dispatch mechanism sdcore expression cannot send message tuple furthermore semantics message sends two cases one sending messages instances one sending messages tuples hence meaning expression sdcore unaffected presence multiple dispatch semantics tuple classes also justifies second claim since tuple classes special privileges access fields component instances encapsulation properties classes unaffected however property tuple like multimethod languages solve privileged access aspect binary methods problem bruce et al 95 may mechanism c friendship grants would solve practice avoided giving methods tuple classes default privileged access fields instances tuple would violate information hiding particular client could access fields instances class c simply creating tuple class c component 32 multiple dispatch binary methods multimethods useful many common situations binary methods chambers 92 baumgarter et al 96 particular time piece code invoke depends one argument message multimethod easily provides desired semantics example suppose one wants print points output devices consider class output three subclasses terminal ordinary printer colorprinter assume colorprinter subclass printer printing point terminal requires different code printing point either kind printer addition color printing requires different code blackandwhite printing figure 3 shows situation programmed tuple example binary method problem particular addition print methods point colorpoint classes upset fact colorpoint subtype point problem need invoke appropriate method based whether first argument point colorpoint whether second argument terminal printer colorprinter singlydispatched language unnatural workaround ingallss double dispatching technique ingalls 86 bruce et al 95 required encode desired behavior 33 tuples vs classes ability express multiple dispatching via dispatching tuples easy simulate singledispatching language wellknown bruce et al 95 ingalls doubledispatching technique mentioned faithful simulation often requires exponentially size methods multimethodbased solution second attempt simulate multiple dispatch single dispatching languages based product classes section tuple class ppoint outterminal method print prints points terminal tuple class ppoint outprinter method print prints points printer tuple class cpcolorpoint outcolorprinter method print print colorpoints printer color figure 3 multimethods tuple classes printing unit tuple type like cs void type 32 bruce et al 95 simulation faithful loses dynamic dispatch however instructive look simulation fails since reveals essential capability tuple adds sdcore consider following classes sdcore adapted bruce et al paper class twopoints fieldsp1point p2point method class twocolorpoints fieldscp1colorpoint cp2colorpoint method new twocolors cp1color classes one could create instances simulate tuples via new expression sdcore example instance simulates tuple containing two point instances created expression new twopointsmyp1myp2 however loses dynamic dispatching problem new expression requires name associated class given statically particular following message send expression executed new twopointsmyp1myp2equal method class twopoints always invoked even myp1 myp2 denote colorpoint instances runtime contrast tuple expression statically determine tuple classes applicable messages sent tuples use dynamic classes values tuple instead static classes expressions used construct tuple example even static classes myp1 myp2 point myp1 myp2 denote colorpoint instances message send expression myp1myp2equal invoke method tuple class colorpoint colorpoint given figure 2 hence sending messages tuples static overloading dynamic overloading precisely multiple dispatch course one also simulate multiple dispatch using variant typecase statement determine dynamic types arguments dispatching appropriately example java one use getclass method provided class object however writing code hand errorprone automatic dispatch language dispatch code also need duplicated method requires multiple dispatch causing code maintenance problems every time new class enters system dispatch code need appropriately rewritten places tuple existing code need modified problems arise intent dispatch code dispatch clear maintenance programmers contrast writing tuple classes clear multiple dispatch desired semantics tuple ensures dispatch handled consistently static type system ensures dispatching complete unambiguous 34 type checking tuple add type attributes sdcore product types types tuples containing elements types 1 n product type 1 n subtype 1 n subtype multiple dispatching involved type checking messages sent tuples bit complex checking messages sent instances see appendix b formal typing rules divide additions sdcores type system clientside implementationside rules chambers leavens 95 clientside rules check messages sent tuples implementationside rules check tuple class declarations methods aim rules ensure statically runtime type mismatches occur messagenotunderstood messageambiguous error occur execution messages sent tuples clientside rule analog method application rule ordinary classes described particular given application tuple class product type 1 n static type tuple class must contain method implementation named mn additional arguments static types e subtypes methods additional argument types rule explicitly checks existence appropriate method implementation eliminates possibility message notunderstood errors however generalization multiple dispatching easily cause methodlookup ambiguities example consider pointcolorpoint example section 2 suppose rather defining equality tuple classes pointpoint colorpointcolorpoint defined equality instead tuple classes pointcolorpoint colorpointpoint according clientside rule equal message sent two colorpoint expressions legal since exists tuple class right type contains appropriate method implementation problem exist two tuple classes neither specific therefore runtime method invocation cause methodambiguous error occur solution based prior work type checking multimethods castagna et al 92 castagna 95 pair tuple classes method named accepts k additional arguments check two conditions first check ensures monotonicity castagna et al 92 castagna 95 goguen meseguer 87 reynolds 80 let u types methods named tuple classes respectively suppose 1 n subtype must subtype u contravariant rule function types means j j must subtype j u must subtype u second check ensures two methods ambiguous define two types related either subtypes vice versa case minst denotes one subtypes must case 1 n 1 n tuple j j j related must tuple class mint 1 1 mint n n method named k additional arguments existence method necessary sufficient disambiguate two methods checked type rules tuple classes message sends tuples validate part b first claim tuples extensions sdcore type system orthogonal typing rules tuple superset typing rules sdcore hence sdcore program expression type also type tuple tuple chose byname typing discipline whereby onetoone correspondence classes types unification classes types subclasses subtypes allows simple static type system also reflects common practice popular objectoriented languages indeed approach variant used c java javas interfaces allow form separation types classes although type system simplistic addition multimethods language greatly increases expressiveness allowing safe covariant overriding preserving equivalence subclassing subtyping several ways could design type system example purely structural subtyping paradigm could used classes assigned record types based types methods another possibility would maintain byname typing keep typing associated subtyping relation completely orthogonal class inheritance mechanisms approach taken cecil chambers 95 ruled designs sake clarity simplicity another design choice whether dispatch classes types tuple choice arise strong correlation classes types particular tuple dispatching semantics viewed equivalently dispatching classes types however two alternate designs presented dispatching semantics could designed either way although options feasible conceptually simpler dispatch classes nicely generalizes singledispatching semantics keeps dynamic semantics language completely independent static type system names tuple formals tuple class sense generalization self tuple also allow simple form pattern matching found functional languages ml milner et al 90 tuple formals bound elements tuple allows tuple like ml include tuple values without needing build language primitive operations extract components tuple interesting speculate advantages might obtained adding algebraic datatypes extensive patternmatching features objectoriented languages see also bourdoncle merz 97 ernst et al 98 section discuss two kinds related work first concerns genericfunction languages solve problem address paper using language way obtain multiple dispatch second closelyrelated work addresses problem add support multiple dispatch languages single dispatch inspirational idea work technique avoiding binary methods using product classes described bruce et al section 32 bruce et al 95 discussed detail section 33 another source inspiration work castagnas paper covariance contravariance castagna 95 makes clear key idea covariance used arguments involved method lookup contravariance arguments involved lookup tuple two sets arguments cleanly separated since tuple class arguments tuple used method lookup additional arguments used method lookup covariance contravariance conditions reflected type rules tuple monotonicity condition 41 genericfunction languages approach provides subset expressiveness clos dylan cecil multimethods based generic functions methods tuple classes allow generic functions methods dynamically dispatch different subsets arguments tuple arguments may dynamically dispatched upon must decided advance since distinction made client code sending messages tuples clos dylan cecil information visible clients hand tuple programmer hide information always including arguments part tuple tuple class suggests useful syntactic sugar tuple might use fe 1 e n sugar least 2 second generic function languages uniform since one dispatching mechanism treat single dispatching degenerate case multiple dispatching rather differentiating although believe advantages make closstyle multimethods better design new language approach illustrated tuple key advantages adapting existing singlydispatched languages multimethods first design used languages like c java simply adding tuple expressions tuple types tuple classes ability send messages tuples shown existing code need modified execute type check contrast generic function model causes major shift way programs structured second model maintains classbased encapsulation keeping semantics objects selfinterpreting records generic function model gives must base encapsulation scoping constructs packages chapter 11 steele 90 local declarations chambers leavens 97 42 encapsulated parasitic multimethods encapsulated multimethods section 422 bruce et al 95 section 3111 castagna 97 similar spirit work attempt integrate multimethods existing singlydispatched languages following example uses technique program equality tests points extension sdcore class point method equalppointbool class colorpoint inherits point method equalppointbool method equalpcolorpointbool encapsulated multimethods message send results two dispatches general first usual dispatch class receiving instance messages cannot sent tuples dispatch followed second multimethod dispatch select multimethod within class found first dispatch example message p1equalp2 first finds dynamic class object denoted p1 p1 denotes colorpoint second multimethod dispatch used select two multimethods equal class colorpoint essence first dispatch selects generic function formed multimethods class receiver second dispatch usual generic function dispatch remaining arguments message one seeming advantage encapsulated multimethods access private data receiver object whereas tuple method tuple class privileged access elements tuple languages like c java private data instances class accessible method class privileged access useful binary methods however advantage illusory multimethods general special access granted private data classes receiver means access must provided clients form accessor methods mechanism c friendship grants must provide access arguments private data two problems encapsulated multimethods arise multimethod dispatch preceded standard dispatch class first problem common need duplicate methods use stub methods simply forward message appropriate method example since colorpoint overrides equal generic function point must duplicate equal method declared within point class observed bruce et al paper akin ingalls technique multiple polymorphism ingalls 86 parasitic multimethods boyland castagna 97 variant encapsulated multimethods remove disadvantage allowing parasitic methods inherited second problem caused two dispatches existing classes sometimes need modified new added system example order program special behavior equality method accepting one point one colorpoint order necessary modify point class adding new encapsulated multimethod kind change existing code needed tuple programmer simply creates new tuple class indeed tuple even allows one tuple class tuple component classes allowing new multimethods dispatch tuple existing multimethods enter system without requiring modification existing code encapsulated parasitic multimethods advantage terms modularity genericfunction languages tuple modularity problem genericfunction languages noted cook cook 90 independentlydeveloped program modules free possibility messageambiguous errors may cause messageambiguous errors runtime example consider defining method equal three modules module defines tuple class point point module b tuple class point colorpoint module c tuple class colorpoint point cause possibility message ambiguous errors program uses either b c type check however program includes three modules may messageambiguous errors since message sent tuple two colorpoint instances able find unique mostspecific method therefore linktime check necessary ensure type safety research underway resolve problem generic function languages chambers leavens 95 would also resolve tuple however date completely satisfactory solution emerged design choices encapsulated parasitic multimethods largely motivated goal avoiding loss modularity encapsulated multimethods suffer problem essentially define generic functions within classes class must override generic function whole however causes duplication described parasitic multimethods problem use textual ordering within class resolve ambiguities inheritance ordering however ordering hard understand reason particular single mostspecific parasite function call control call gets passed among applicable parasites manner dependent specificity textual ordering parasites determining parasite pingponging control terminates difficult boyland castagna also say compared textual ordering methods specificity tuple intuitive clear page 73 boyland castagna 97 finally note textual ordering causes small runtime penalty dispatching since dispatch takes linear instead logarithmic time average key contribution work describes simple orthogonal way add multiple dispatch existing singledispatch languages showed introduction tuples tuple types tuple classes declaration multimethods ability send messages tuples orthogonal base language true execution typing tuple classes allow programmer group several multimethods together send tuple message using multimethod dispatching rules since existing code singledispatching languages cannot send messages tuples execution unaffected new capability hence mechanism provides extra layer superimposed top singlydispatched core design decisions core affect role functionality tuples tuple classes tuple also compares well related attempts add multiple dispatch singlydispatched languages shown tuples uniform dispatching semantics avoids several problems approaches notably need plan ahead multimethods forced modify existing code new classes enter system hand uniformity also causes tuple suffer modularity problem genericfunction languages currently precludes important software engineering benefits separate type checking tuple language simply vehicle illustrating idea multiple dispatching via dispatching tuples although would complicate theoretical analysis mechanism c java could used singly dispatched core language acknowledgments thanks john boyland discussion clarification parasitic multimethods thanks anonymous referees helpful comments thanks olga antropova john boyland giuseppe castagna sevtap karakoy clyde ruby r c sekar comments earlier draft thanks craig chambers many discussions multimethods thanks olga antropova syntactic sugar idea mentioned section 41 thanks vassily litvinov pointing us baumgartner et al 96 craig kaplan idea example leavenss work supported part nsf grants ccr 9593168 ccr9803843 r american national standards institute subtyping recursive types java programming language interaction objectoriented design patterns programming languages merging lisp objectoriented programming type checking higherorder polymorphic multi methods parasitic methods implementation multimethods java safe decidable type checking objectoriented language hopkins object group semantics multiple inheritance calculus overloaded functions subtyping covariance contravariance conflict without cause cecil language specification rationale version 20 typechecking modules multimethods bececil core objectoriented language block structure multimethods semantics typing inheritance subtyping predicate dispatching unified theory dispatch dylan programming book design patterns elements reusable objectoriented software steeleauthor authorguy lauthor steele java language specification simple technique handling multiple polymorphism rodriguez jr language definition standard ml using category theory design implicit conversions generic operators structure typed programming languages dylan reference manual definitive guide new objectoriented dynamic language steele jr tr smalltalk80 language implementation objectoriented programming flavors commonloops merging lisp objectoriented programming simple technique handling multiple polymorphism semantics multiple inheritance definition standard ml common lisp language 2nd ed inheritance subtyping c programming language 2nd ed eiffel language calculus overloaded functions subtyping subtyping recursive types safe decidable type checking objectoriented language objectoriented programming efficient method dispatch pcl structure typed programming languages design patterns covariance contravariance typechecking modules multimethods binary methods dylan reference manual objectoriented programming objectoriented software construction 2nd ed parasitic methods type checking higherorder polymorphic multimethods java programming language 2nd ed java language specification objectoriented multimethods cecil dispatching using category theory design implicit conversions generic operators objectoriented programming versus abstract data types ctr rajeev kumar vikram agrawal multiple dispatch reflective runtime environment computer languages systems structures v33 n2 p6078 july 2007 timmy douglas making generic functions useable smalltalk proceedings 45th annual southeast regional conference march 2324 2007 winstonsalem north carolina ran rinat typesafe convariant specialization generalized matching information computation v177 n1 p90120 25 august 2002 curtis clifton gary leavens craig chambers todd millstein multijava modular open classes symmetric multiple dispatch java acm sigplan notices v35 n10 p130145 oct 2000 todd millstein mark reay craig chambers relaxed multijava balancing extensibility modular typechecking acm sigplan notices v38 n11 november antonio cunei jan vitek polyd flexible dispatching framework acm sigplan notices v40 n10 october 2005 paolo ferragina muthukrishnan mark de berg multimethod dispatching geometric approach applications string matching problems proceedings thirtyfirst annual acm symposium theory computing p483491 may 0104 1999 atlanta georgia united states curtis clifton todd millstein gary leavens craig chambers multijava design rationale compiler implementation applications acm transactions programming languages systems toplas v28 n3 p517575 may 2006 yuri leontiev tamer zsu duane szafron type systems objectoriented database programming languages acm computing surveys csur v34 n4 p409449 december 2002