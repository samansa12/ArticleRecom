towards intelligent semantic caching web sources intelligent semantic caching scheme suitable web sources presented since web sources typically weaker querying capabilities conventional databases existing semantic caching schemes cannot directly applied proposal takes care difference query capabilities end user system web sources addition analysis match types users input query cached queries presented based analysis present algorithm finds best matched query different circumstances furthermore method use semantic knowledge acquired data avoid unnecessary access web sources transforming cache miss cache hit presented verify effectiveness proposed semantic caching scheme first show generate synthetic queries exhibiting different levels semantic localities using test sets show proposed query matching technique efficient effective way semantic caching web databases b introduction web databases allow users pose queries distributed heterogeneous web sources systems usually consist three components adali et al 1996 garciamolina et al 1995 1 mediators provide distributed heterogeneous data integration 2 wrappers provide local translation extraction web sources containing raw data queried extracted virtual approach et al 1998 queries posed uniform interface submitted multiple sources runtime querying costly due runtime costs effective way reduce costs environment cache results prior queries reuse alonso et al 1990 franklin et al 1993 let us first consider motivating example semantic caching example 1 two queries q1 q2 asked relation empnameagetitlegender using datalog notation zaniolo et al 1997 saved cache follows q1 malename empnamem q2 50smngrname research supported part darpa contract n6600197c8601 sbir f3060299c0106 c publishers printed netherlands empnameagemanager 50age60 new query q3 asking male managers name fifties given evaluated either emp relation stored queries q1 q2 cache follows empnameagemanagerm 50age60 e2 50smalemanagername malename 50smngrname evaluations yield identical results however emp relation stored remotely temporarily unavailable due network partition using evaluation e2 stored queries much efficient 2 caching dar et al 1996 keller basu 1996 larson yang 1985 ren dunham 1998 sellis 1988 exploits semantic locality queries caching set semantically associated results instead tuples pages used conventional caching semantic caching particularly effective improving performance series semantically associated queries asked results may likely overlap contain one another ap plications cooperative database system chu et al 1994 geographical information system examples far semantic caching schemes clientserver architectures based assumption participating components fullfledged database systems client sends query cache contains answers b client send modified query b server retrieve remaining answers web databases however web sources plain web pages formbased systems limited querying capabilities cannot easily support complicated eg negation queries proposed semantic caching scheme based upon following three key ideas 1 since querying capabilities web sources weaker queries end users query translation capability mapping necessary semantic caching 2 efficient method locate best matched query set candidates semantic caching web sources significantly improve system performance 3 semantic knowledge used transform cache miss conventional caching cache hit intelligent semantic caching 3 rest paper organized follows section 2 introduce background information related work semantic caching section 3 describe proposed intelligent semantic caching detail section 4 query matching technique presented experimental results follow section 5 finally concluding remarks discussed section 6 2 background 21 preliminaries caching scheme implemented web database testbed called coweb cooperative web database ucla architecture consists network mediator wrapper components adali et al 1996 garciamolina et al 1995 focus system use knowledge providing cooperative capabilities conceptual approximate web query answering knowledgebased semantic caching web triggering fuzzy threshold conditions input query expressed sql 1 language based mediator schema mediator decomposes input sql subqueries wrappers converting clause disjunctive normal form dnf logical logical clauses disjoining conjunctive predicates coweb handles selection join predicates following operators f g semantic caching approach closely related query satisfiability query containment problems guo et al 1996 ullman 1988 given database query q applying q denoted qd hqdi hqi short nary relation obtained evaluating query q given two nary queries q 1 q 2 database query q 1 contained query q 2 q two queries contain equivalent q solutions query satisfiability containment problems vary depending exact form predicate conjunctive query selection predicates five operators f g query satisfiability problem solved ojqj time query q guo et al 1996 hand conjunctive query containment problem shown np complete chandra merlin 1977 although common case predicate appears current coweb implementation supports spj selectprojectjoin type sql twice appears lineartime algorithm saraiya 1991 ullman 1997 22 related work past research areas related semantic caching include conventional caching alonso et al 1990 franklin et al 1993 query satisfiability containment problems guo et al 1996 ullman 1988 view materialization levy et al 1995 larson yang 1985 query folding qian 1996 semantic query optimization chu et al 1994 recently semantic caching clientserver multidatabase architecture received attention ashish et al 1998 dar et al 1996 godfrey gryz 1999 keller basu 1996 ren dun ham 1998 chidlovskii borghoff 2000 deciding whether query answerable closely related problem finding complete rewritings query using views levy et al 1995 qian 1996 main difference semantic caching techniques evaluate given query semantic views query rewriting techniques rewrite given query based views cluet et al 1999 proposed technique also suitable web databases querying capability sources compatible clients settings generally impossible get snapshot given views materialize since query interfaces simply allow semantic caching corresponding indexing techniques require cached results exactly matched input query presented sellis 1988 approach cached results exactly matched input query order compute answers chen roussopoulos 1994 approaches semantic caching query planning optimization point view dar et al maintains cache space coalescing splitting semantic regions maintain cache space reference counters allow overlapping semantic regions provide techniques find best matched query different circumstances via extended knowledgebased matching keller basu 1996 predicate descriptions derived previous queries used match input query emphasis updates clientserver environment chidlovskii borghoff 2000 semantic caching scheme conjunctive keywordbased web queries introduced quickly process comparison input query semantic views binary signature method used issues probe vs remainder query region coalescing originally dealt dar et al explored real life experiments intelligent semantic caching 5 ashish et al 1998 selectively chosen subqueries stored cache treated information sources domain model minimize expensive cost containment checking number semantic regions reduced merging whenever possible ren dunham 1998 defines semantic caching formally addresses query processing techniques derived larson yang 1985 comprehensive formal framework semantic caching introduced godfrey gryz 1999 illustrating issues answers cache answers cache recovered etc adali et al 1996 discusses semantic caching mediator environment knowledge called invariants although invariants powerful tools due support arbitrary userdefined functions con ditions mainly used substituting domain call contrary propose simpler easier way ie find express fragment containment relationship relations acquired semiautomatically 3 semantic caching technique 31 semantic caching model semantic cache essentially hash table entry consists key value pair key semantic description based previous queries value set answers satisfy key semantic description made prior query denoted semantic view v entry semantic cache denoted v hvi using notation hvi section 2 represent submitted sql query cache need 1 relation names attributes used clause projected attributes conditions clause larson yang 1985 ren dunham 1998 semantic caching coweb use condi tions clause following reasons settings since one wrapper covering one web source thus 1to1 mapping wrapper web source relation names needed addition majority web sources fixed output page format wrapper ie extractor extracts specified data whether input sql query wants project attributes output web page wrapper receives always contains set predefined attribute values since retrieval cost dominating factor web databases coweb chooses store attribute values contained output web page cache thus attributes used conditions projected attributes need stored 6 lee chu furthermore storing attribute values cache coweb completely avoid unrecoverability problem occur query results cannot recovered cache even found cache due lack certain logical information godfrey gryz 1999 result queries stored semantic cache coweb form select web source condition condition conjunctive pred icate hereafter user queries represented conditions clause 32 query naturalization different web sources use different ontology due security performance concerns et al 1998 web sources often provide different query processing capabilities therefore wrappers need perform following preprocessing input query submitting web source 1 translation provide 1to1 mapping wrapper web source wrapper needs schematically translate input query 2 generalization filtration 1to1 mapping wrapper web source wrapper generalize input query return results requested filter extra data instance predicate nametom generalized predicate name like tom additional filter nametom 3 specialization 1to1 mapping wrapper web source wrapper specialize input query multiple subqueries merge results instance predicate 1998year2001 specialized disjunctive predicate year integer type original query mediator called input query generated query preprocessing input query called native query supported web source native manner chang et al 1996 preprocessing called query naturalization query used filter irrelevant data native query results called filter query chang et al 1996 translation applicable due lack 1to1 mapping coweb applies generalization specialization based knowledge regarding querying capability web source information predetermined domain expert wrapper developer coweb carries capability cache web source wrapper mediator cache manager native query native wrapper naturalization filtration input query native query filter native figure 1 control flow among mediator wrapper web source input query mediator naturalized wrapper converted native query filter query generated needed cache manager checks native query semantic views stored cache find match match found filter query generated query results retrieved cache returned mediator filter query generated results need filtered remove extra data match found native query submitted web source obtaining native results web source wrapper performs postprocessing returns final results mediator finally proper form native query eg disjunctive predicates broken conjunctive ones saved cache future use description vector cdv 5tuple vector describe querying capability web source attribute web source associated 5tuple vector carries 1 describes whether web source must given binding attribute two values man mandatory opt optional 2 describes whether attribute shown results values contains operators supported attribute contains string value used wild card domain represents complete domain values attribute currently three types list interval set supported expressive power cdv less vassalos papakonstantinou 1997 equivalent levy et al 1996 unlike levy et al 1996 query capabilities described whole web source attribute coweb carries description figure 1 illustrates control flow among mediator wrapper web source detail example 2 imagine web source supports queries relation employeenameagetitle operator input query q20age22 titlemanager needs naturalized ie specialized native query vage20 titlemanager since semantic views use conjunctive predicates native query v partitioned three conjunctive parts x c q2 x1 y1 q3 y1 c q2 x1 y1 q3 y1 t1 q1 evicted c q2 x1 y1 q3 y1 q4 x2 t2 q4 inserted z t0 initial time semantic view semantic index physical storage rc x rc x rc figure 2 cache replacement example q1 evicted time t1 corresponding reference counters decremented tuple b deleted since reference counter 0 tuple c remain physical storage q4 inserted time t2 new tuple tuple inserted physical storage reference counter tuple c increased titlemanager thus three entries inserted semantic views cache 2 33 semantic view overlapping semantic view creates spatial object 2 ndimensional hyper space creates overlapping instance two queries 10age20 create overlapping excessive overlapping semantic views may waste cache space duplicate answers overlapped portions coalesced new semantic views remaining semantic views modified appropriately completely separate semantic views details refer lee chu 1999 coweb unlike approaches overlapping semantic views allowed retain original form semantic views using reference counter keep track references answer tuples implementing cache problem storing redundant answers cache avoided keller basu 1996 34 cache replacement policy according predetermined evaluation functions eg lru semantic distance corresponding replacement values eg access order dis 2 called semantic region dar et al 1996 semantic segment ren dunham 1998 intelligent semantic caching 9 table query match types properties v semantic view q user query answers match types properties cache web source exact match containing match v 6 contained match overlapping match v 6 disjoint match tance value computed added semantic view individual tuples stored physical storage contain reference counter keep track number references semantic view replacement decided tuples belonging semantic view found via semantic index reference counters decremented 1 tuples counter value 0 removed physical storage corresponding semantic view semantic index removed cache entries example illustrated figure 34 note objects semantic index overlapped physical storage also coalease among overlapping containing semantic indices 35 match types query compared semantic view five different match types consider semantic view v cache user query q v equivalent q v exact match q contains q v containing match q contrast v contained q v contained match q v contain intersects q v overlapping match q finally intersection q v v disjoint match q exact match containing match complete matches since answers cache overlapping contained match partial matches since answers need retrieved web sources detailed properties match type shown table note contained overlapping matches computing answers requires union partial answers cache web source matchtypeqv algorithm derived table straightforward manner using algorithms developed solving exact matching extended matching knowledgebased matching query answer query matching figure 3 flow query matching technique satisfiability containment problems saraiya 1991 guo et al 1996 ullman 1997 matchtype algorithm implemented limited containment case predicate appears twice 4 query matching technique let us discuss process finding best matched query semantic views called query matching consists three steps exact extended knowledgebased matching depicted figure 3 41 exact matching traditional caching considers exact matches input queries semantic views semantic view identical input query cache hit otherwise cache miss 42 extended matching extended matching extends exact matching cases input query exactly matched semantic view exact matching containing match next best case since contains extra answers contained overlapping matches contained match slightly better contained match contain extra answers cache although partial answers see table note input query many containing contained matches following subsections present find best match among different candidates cache 421 bestcontainingmatch bestcontainedmatch algorithms intuitively want find specific semantic view would incur least overhead cost answer users query ie smallest superset input query without loss generality intelligent semantic caching 11 z like c x2 y1 zc wd input query minimallycontaining match containing match semantic views figure 4 example query containment lattice given input query seven containing matches among two minimallycontaining matches two semantic views smallest superset given input query discuss case containing match contained match case defined similarly first define query containment lattice definition 3 query containment lattice suppose q query set uq corresponds set containingcontained matches q found cache query containment lattice defined partially ordered set hq ordering forms lattice set uq fg containing match case greatest lower bound glb lattice special symbol least upper bound lub lattice query q contained match case least upper bound lub lattice special symbol greatest lower bound glb lattice query q definition 4 minimality maximality containing match q called minimallycontaining match q denoted mcq min containing match q b b q qs query containment lattice symmetrically contained match q called maximallycontained match q denoted contained match q b b q qs query containment lattice example query containment lattice shown figure 4 note given query q several minimallycontaining matches found cache illustrated figure 4 cases best minimallycontaining match selected based heuristics number answers associated semantic view containing match bucket containing bucket containing containing one heuristically bucket containing return figure 5 bestcontainingmatch algorithm number predicate literals query etc bestcontainingmatch algorithm shown figure 5 first finds minimallycontaining matches using containment lattice several minimally containing matches pick one heuristically length longest containing match k number containing matches running time bestcontainingmatch algorithm becomes ok 2 jv max indexing semantic views observe bestcontainingmatch algorithm justified finding best containing match better selecting arbitrary containing match followed fil tering occurs often web databases large number heterogeneous web sources multimedia databases expensive operations image processing bestcontainedmatch algorithm similar case bestcontainingmatch algorithm 422 bestoverlappingmatch algorithm overlapping matches cannot construct query containment lattice thus choosing best overlapping match use simple heuristic choose overlapping match overlaps given query many ways determine meaning overlapping one technique compute overlapped region two queries ndimensional spaces compare number associated answers select one maximum answers 43 knowledgebased matching according experiments section 5 partial matches ie overlapping contained matches constitute 40 match types given test sets see table iv interestingly partial match complete match certain cases instance employee relation semantic view vgenderm overlapping match query qnamejohn know john fact male employee v containing match q since q v since complete matches ie exact containing matches eliminate need access web source transforming partial match complete match improve performance significantly obtaining semantic knowledge web source maintaining properly important issues general knowledge obtained human experts application domain addi tion database constraints inclusion dependencies used knowledge discovery data mining techniques useful obtaining knowledge semiautomatically instance association rules tell antecedent rule satisfied consequent rule likely satisfied certain confidence support manage obtained knowledge addition deletion implications also important issue since focus paper show utilize knowledge semantic caching knowledge acquisition management issues beyond scope paper assume semantic knowledge need already acquired available cache manager use generic notation derived chu et al 1994 denote containment relationship two fragments relations fragment inclusion dependency find says values columns one fragment must also appear values columns frag ment formally a1 g p q valid select conditions r valid rela tions b attributes compatible often lhs rhs used denote left right hand side find set find denoted delta assumed closed consequences ie definition 6 query 4containment given two nary queries q 1 q 2 hq 1 di ae hq2 di arbitrary relation obeying fragment inclusion dependencies query q 1 4contained query q 2 denoted q 1 4 two queries 4contain 4equivalent denoted q using find framework easily denote various semantic knowledges instance lets consider classical inclusion dependency inclusion dependency formal statement form relation names x ordered list 14 lee chu attributes r ordered list attributes length x johnson klug 1984 instance inclusion dependency every manager also employee denoted find oe means selecting every tuples relation addition find easily capture association rules found via data mining techniques 431 transforming partial matches complete matches goal transform many partial matches ie overlapping contained matches complete matches ie exact containing matches possible given find set delta overlapping match transformed four match types contained match transformed exact match 1 overlapping match given query q overlapping match v dependency set delta exact match q containing match q contained match q unsatisfiable disjoint match q proof show proof second case overlapping match transformation others follow similarly well overlapping match table q q condition part satisfied q lhs rhs v thus since transitive operator overwrites original property q 6 v result end property q vv 6 q property containing match qed 2 contained match given query q contained match v delta flhs j rhsg 2 delta q lhsv rhs v exact match q example 7 suppose query qsalary100k semantic view vtitlemanager given delta foe 80ksalary120k becomes containing match q since q intelligent semantic caching 15 432 deltamatchtype algorithm let us first define augmented matchtype algorithm presence dependency set delta deltamatchtype algorithm implemented modifying matchtype algorithm section 35 adding additional input delta changing j j delta computational complexity contains single let jl max j jr max j denote length longest lhs rhs delta let jdeltaj denote number find delta total computational complexity deltamatchtype algorithm ojdeltajjqj worst case semantic views cache either overlapping contained matches since gain transforming partial matches complete matches iobounded typical length conjunctive query relatively short good performance tradeoff pay overhead cost cpubounded deltamatchtype algorithm many applications 44 querymatching algorithm putting together querymatching algorithm shown figure 6 finds best semantic view cache given input query order exact match containing match contained match overlapping match semantic views turn disjoint matches returns null answer takes account exact containment relationship also extended knowledgebased containment relationships let denote length longest semantic views loop takes okjdeltajjqj assuming general jv max j longer others complexity simplified okjdeltajjv max j addition bestcontainingmatch bestcontainedmatch takes ok 2 jv max j therefore total computational complexity querymatching algorithm okjdeltajjv 5 performance evaluation via experiments experiments performed sun ultra 2 machine 256 mb ram test run scheduled cron job executed midnight 6am minimize effect load web site testbed coweb implemented java using jdk117 switch deltamatchtypeq v delta case exact case containing case contained case overlapping otherwise skip cnting cnting else b cnted return figure 6 querymatching algorithm used following schema available usair site 3 among 7 attributes org dst mandatory attributes thus always bounded query usairorg dst airline stp aircraft flt meal 51 generating synthetic test queries caching inevidently behaves sensitively according semantic locality ie similarity among queries test queries difficulties obtain reallife test queries web sources synthetic test sets different semantic localities generated evaluate semantic caching scheme two factors query generator manipulated using distribution dfn 0 p 0 number attributes used condition p percentage p th item 1 number attributes used condition test query large number attribute conditions eg age20 40ksal50k titlemanager specific small number attribute conditions eg age20 therefore test set many specific queries likely perform badly semantic caching since many exact containing 3 flight schedule site httpwwwusaircom time writing noticed web site slightly changed web interface schema since intelligent semantic caching 17 matches let us denote number attributes used condition n ie n 3 means 3 attributes used condition instance following input distribution dfn 0 30 read generate queries short conditions ones long conditions probability distributions 30 20 15 13 12 2 name attributes used condition test set containing many queries asking common attributes semantically skewed likely perform well respect semantic caching therefore different semantic localities generated manipulating name attributes used condition instance following input distribution dforg143 dst143 airline143 stp143 aircraft143 flt143 meal143g read 7 attributes equally likely used test set another example fact flight number information frequently asked meal information represented assigning higher percentage value flt attribute meal attribute 52 query space effect another important aspect generating synthetic test queries query space sum possible test queries instance input distribution num factor dfn 0 0 n 1 0 6 6 6 6 g effects applying distribution 100 query space 1 million query space different occurrence partial full match case 100 query space much higher occurrence case 1 million query space take account effect need adjust percentage distribution formally given n attribute list fa 1 ja m1 n g among 1 mandatory attributes rest optional attributes domain value list respectively possible number query combinations query space satisfies 1a cardinality values domain j according calculation using equation 1a instance total 32400 different sql queries ie query space generated table ii breakdown number select conditions query space number attributes num query space size query space percentage 6 12672 392 total 32400 100 given usair schema breakdown query space shown table ii using query space size percentage adjust percentage distribution input query generator instance make uniform distribution terms number attributes give following input distribution generator 6 6 6 6 g 53 test sets four test sets uniuni unisem semuni semsem generated assigning different values two input parameters num name adjusting query space effect shown table iii uni sem stand uniform semantic distribution respectively total query space set 32400 test set 1000 queries randomly picked based two inputs sem values input num set mimic zipf distribution zipf 1949 shown humans tend ask short simple questions often long complex ones sem values input name set arbitrarily assuming airline stopover information would frequently asked others figure 7 shows different access patterns uniform semantic distribution terms chosen attribute names following example typical test query generated select org dst airline stp aircraft flt meal intelligent semantic caching 19 dst airline stp aircraft flt meal test query number dst airline stp aircraft flt meal test query number uniform distribution b semantic distribution figure 7 attribute name access patterns shaded area means attribute used test query since org dst attributes mandatory chosen always thus completely shaded since case b semantics access pattern skewed ie flt attribute seldom accessed b frequently accessed attributes also case b shows airline attribute favored test query row mostly shaded aircraft attribute table iii uniform semantic distribution values used generating four test sets scheme number attributes used num uni 0 0 167 167 167 167 167 167 sem 0 0 40 25 15 10 5 5 scheme name attributes used name org dst airline stp aircraft flt meal uni 100 100 20 20 20 20 20 sem 100 100 40 25 10 5 20 usair 6flt 1stp2 mealsupper aircraftboeing 757200 54 performance metrics 1 average response time queries n eliminate initial noise experiment first starts use k queries sliding window instead n queries query set 2 cache coverage ratio r c since traditional cache hit ratio measure effect partial matching semantic caching propose use cache coverage ratio performance metric given query set consisting n queries number answers found cache query q let total number answers query q instance query coverage ratio r q exact match containing match 1 since answers must come cache similarly r q disjoint match 0 since answers must retrieved web source 55 experimental results figure 8 compared performance difference three caching cases 1 caching nc 2 conventional caching using exact matching cc caching using extended matching sc cache sizes set 200kb regardless types test set nc shows difference performance since number exact matches small test sets cc shows little improvement performance compared nc case due randomness test sets large number containing matches experiments sc exhibits significantly better performance cc semantics test set thus similar queries found cache less time takes determine answers next studied behavior semantic caching respect cache size set replacement algorithm lru ran four test sets cache sizes equal 50kb 100kb 150kb unlimited number answers returned usair web site average small cache size set small test set contained 1000 synthetic queries figure 9a figure 9b show r c semantic caching selected cache sizes graphs show decreases r c increases proportionally cache size increases due fact fewer cache 4 experiments c set 05 overlapping contained match intelligent semantic caching 21001100000000000000000000000000011111111111111111111111111111100000000000000000011111111111111111100000000000000000000111111111111111111110000000000000000000000000000001111111111111111111111111111110011000000000000000000000000000111111111111111111111111111111000000000000000011111111111111111100000000000000001111111111111111110000000000000000000000001111111111111111111111111115001500250035004500average response time millisec test uniuni unisem semuni semsem figure 8 performance comparison semantic caching conventional caching001100000000000000000000000000000011111111111111111111111111111111100000000000000001111111111111111110000000000000000001111111111111111110000000000000000000000001111111111111111111111111110001110000000000000000000011111111111111111111000000000000000111111111111111000000000000111111111111111000000001111111111110000000000000000000000000001111111111111111111111110000000000001111111111110000001111000000111111 111500150025003500average response time millisec test uniuni unisem semuni semsem size 50kb size 100kb size 150kb size unlimited00011100111100000000000000111111111111110000000000000011111111111111000000000000001111111111111100001111000000000000111111111111000000000000111111111111111000000000000000000001111111111111111111111110000000000000001111111111111111110000000000001111111111000000000000000000000000000000111111111111111111111111111111000000000000000000000011111111111111111111000000000000000000000000000000000111111111111111111111111111111020406081 cache coverage test uniuni unisem semuni semsem size 50kb size 100kb size 150kb size unlimited average response time b cache coverage ratio r c figure 9 performance comparison four test sets selected cache sizes replacements degree semantic locality test set plays important role semantics test set better performs due cache replacements slight difference unlimited cache size r c graph behavior occurs r c graph cache size 150kb semuni semsem test sets next compared performance difference lru least recently used mru recently used replacement al gorithms due limited space show uniuni semsem test set results comparison 10000 synthetic queries generated test set cache size fixed 150kb figure 10a shows two replacement algorithms test sets lru outperformed mru difference lru mru increased semantic locality increased higher semantic locality likely also higher temporal locality figure 10b shows r c two replacement algorithms similar case lru 22 lee chu5001500250035002000 4000 6000 8000 10000 average response time millisec number queries lrusemsem mrusemsem 2000 4000 6000 8000 10000 cache coverage number queries lrusemsem mrusemsem average response time b cache coverage ratio r c figure 10 performance comparison four test sets lru mru replacement algorithms table iv distribution match types four test sets test sets exact containing contained overlapping disjoint unisem 05 277 128 368 222 semuni 51 446 120 251 132 semsem 61 520 151 180 136 average 3025 3435 11925 280 238 outperformed mru r c case well note semsem case r c graph lru slightly increased number test queries increased stayed fairly flat uniuni case higher degree semantic locality test set semsem case replacement algorithm lose querying pattern ie semantic locality number exact containing matches high ie 581 combined table iv answers found cache opposed web source hand semsem case r c graph mru decreased number test queries increased true due fact mru loses querying pattern swapping recently used item cache table iv shows average percentages five match types based 1000 queries four test sets fact partial matches contained overlapping matches constitute 40 shows potential usage knowledgebased matching technique intelligent semantic caching 2302061 knowledgebased matching knowledge size unisem semuni semsem figure 11 performance comparison knowledgebased matching figure 11 shows example knowledgebased matching using semantic knowledge used set induced rules acquired techniques developed chu et al 1994 semantic knowledge figure 11 shows knowledgebased matching ratios knowledgebased matches selected semantic knowledge sizes semantic knowledge size represented percentage number semantic views instance size 100 means number induced rules used semantic knowledge equals number semantic views cache despite large number partial matches uniuni unisem sets shown table iv interesting observe knowledgebased matching ratios almost identical test sets due fact many partially matched semantic views uniuni unisem sets long conditions thus fail match rules predictably effectiveness knowledgebased matching depends size semantic knowledge 6 conclusions caching via query matching techniques web sources presented scheme utilizes query naturalization cope schematic semantic querying capability differences wrapper web source developed semantic knowledgebased algorithm find best matched query cache even conventional caching scheme yields cache miss scheme potentially derive cache hit via semantic knowledge algorithm guaranteed find best matched query among many candidates based algebraic comparison queries semantic context applications prove validity proposed scheme set experiments different test queries different degrees semantic locality performed experimental results confirm effectiveness scheme different cache sizes cache replacement algorithms semantic localities test queries performance improves cache size increases cache replacement algorithm retains querying patterns degree semantic locality increases test queries finally additional 15 20 improvement performance obtained using knowledgebased matching therefore study reveals semantic caching technique significantly improve performance semantic caching web databases semantic caching mediatorlevel requires communication multiple wrappers creates horizontal vertical partitions well joining input queries godfrey gryz 1999 result complicated cache matching research area needed cache issues covered paper selective materializing consistency maintainence indexing also need investigated instance due autonomous passive nature web sources wrappers semantic caches aware web source changes techniques need developed incorporate web source changes cache design web databases r query caching optimization distributed mediator systems data caching issues information retrieval system intelligent caching information mediators kr based approach semantic caching web queries optimal implementation conjunctive queries relational databases boolean query mapping across heterogeneous information sources using ldap directory caches scalable extensible cooperative information system semantic data caching replacement caching clientserver database systems database techniques worldwide web survery integrating accessing heterogeneous information sources tsimmis query caching heterogeneous databases answering queries semantic caches query folding inclusion dependencies solving satisfiability implication problems database systems testing containment conjunctive queries functional inclusion dependencies predicatebased caching scheme clientserver database architectures caching via query matching web sources answering queries using views querying heterogeneous information sources using source descriptions query folding semantic caching query processing subtree elimination algorithms deductive databases intelligent caching indexing techniques relational database systems principles database knowledgebase systems information integration using logical views describing using query capabilities heterogeneous sources advanced database systems human behaviour principle least effort tr intelligent caching indexing techniques relational database systems data caching issues information retrieval system subtreeelimination algorithms deductive databases query answering via cooperative data inference implementation performance evaluation adms query optimizer answering queries using views extended abstract solving satisfiability implication problems database systems query caching optimization distributed mediator systems cobase scalable extensible cooperative information system advanced database systems database techniques worldwide web using ldap directory caches caching via query matching web sources principles database knowledgebase systems testing containment conjunctive queries functional inclusion dependencies boolean query mapping across heterogeneous information sources query folding inclusion dependencies query folding information integration using logical views caching clientserver database systems semantic data caching replacement querying heterogeneous information sources using source descriptions describing using query capabilities heterogeneous sources answering queries semantic caches semantic caching web queries predicatebased caching scheme clientserver database architectures optimal implementation conjunctive queries relational data bases ctr kaiuwe sattler ingolf geist eike schallehn conceptbased querying mediator systems vldb journal international journal large data bases v14 n1 p97111 march 2005 bjrn r jnsson mara arinbjarnar bjarnsteinn rsson michael j franklin divesh srivastava performance overhead semantic cache management acm transactions internet technology toit v6 n3 p302331 august 2006