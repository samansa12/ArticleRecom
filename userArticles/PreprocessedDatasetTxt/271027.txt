interaction coherence protocols memory consistency models dsm systems coherence protocols memory consistency models two improtant issues hardware coherent shared memory multiprocessors softare distributed shared memorydsm systems years many researchers made extensive study two issues repectively however interaction studied literature paper study coherence protocols memory consistency models used hardware software dsm systems detail based analysis draw general definition memory consistency model ie memory consistency model logical sum ordering events processor coherence protocol also point hardware dsm system emphasis memory consistency model relaxing restriction event ordering software dsm system memory consistency model focuses mainly relaxing coherence protocol taking lazy release consistencylrc example analyze relationship coherence protocols memory consistency models software dsm systems find whether advantages lrc exploited depends greatly corresponding protocol draw conclusion relaxed consistency model relaxed coherence protocol needed support conclusion useful design new consistency model furthermore make improvements traditional multiple writer protocol far aware describe complex state transition multiple writer protocol first time end list main research directions memory consistency models hardware software dsm systems b introduction distributed shared memorydsm systems gained popular acceptance combining scalability low cost distributed system ease use single address space generally two methods implement dsm systems hardware vs software cachecoherent non uniformmemoryaccess multiprocessorsccnuma dominant direction hardware dsm work paper supported climbing program president foundation chinese academy sciences systems date many commercial research systems stanford dash34 stanford flash31 mit alewife5 starttvoyager10 sgi origin series software dsm alternatives general method supplying highlevel shared memory abstraction top underlying messaging passing based system multicomputers lanconnected example rice munin13 rice treadmarks19 princeton ivy33 cmu midwary12 utah quarks28 marland cvm26 diku carlos29 current commercial research software dsm systems world cache coherences memory consistency models two important issues ccnuma ar chitecture cache coherence mainly used keep multiple copies one cache block consistent processors role memory consistency models specifying memory behaviors respect read write operations multiple processors two issues gained extensive study past 20 years several cache coherence protocols memory consistency models proposed literature coherence protocols include writeinvalidate writeupdate delayupdate memory consistency models include sequential consistency32 processor consistency22 21 weak ordering3 release consistency21 et al coherent problem remains software dsm systems difference hardware software implementation granularity coherence unit software dsm systems coherence unit page hardware dsm systems coherence unit cache block line since role page software dsm systems similar cache hardware dsm systems simplicity use cache coherence cases rest paper coherence protocols widely adopted software dsm systems include multiple writer protocol ie writeshared protocol13 single writer protocol268 memory consistency models mainly used reduce frequency communication message traffic27 examples relaxed consistency models adopted software dsm systems include eager release consistency13 lazy release consistency27 entry consistency12 automatic update release consistency23 scope consistency24 homebased lazy release consistency43 singerwriter lazy release consistency 26 messagedriven release consistency29 affinity entry consistency6 fact cache coherence protocols memory consistency models describe behaviours dsm systems interdependent relationship complex know research problem paper first describe clear understanding coherence memory consistency model propose general definition memory consistency model also point hardware dsm system emphasis memory consistency model relaxing restriction event ordering software dsm system memory consistency model focuses mainly relaxing coherence protocol taking lazy release consistencylrc example analyze relationship coherence protocols memory consistency models software dsm systems draw conclusion relaxed consistency model relaxed coherence protocol needed support conclusion useful design new consistency model furthermore make improvements traditional multiple writer protocol adding new state far aware describe complex state transition multiple writer protocol first time end list main research directions memory consistency models hardware software dsm systems remainder paper organized follows section 2 briefly overview development coherence protocols memory consistency models propose general definition memory consistency model taking lrc example relationship coherence protocols memory consistency models deduced section 3 furthermore state transition graph new improved multiple writer protocol shown section 3 related works conclusions remarks listed section 4 section 5 respectively general definition memory consistency model censier feautrier defined coherent memory scheme follows14 definition 21 memory scheme coherent value returned load instruction always value given latest store instruction address definition intuitively appealing vague simplistic reality much complex computer system store buffered store buffer clear whether last store refer execution store processor update memory fact definition contains two different aspects memory system behaviours critical writing correct shared memory programs first aspect called coherence defines values returned read operation second aspect called event ordering processor determines written value returned read operation coherence ensures multiple processors see coherent view location event ordering processor describes processor sees value updated processor 38 hennessy patterson presented sufficient conditions coherence follows 1 read processor p location x follows write p x writes x another processor occurring write read p always returns value written p 2 read processor location x follows write another processor x returns written value read write sufficiently separated writes x occur two accesses 3 writes location serialized two writes location two processors seen order processors example values 1 written location processors never read value location 2 later read 1 three conditions guarantee processors coherent view position x however since dont tell us event ordering processor cant determine written value seen processors order capture behaviors memory system accurately need restrict coherence event ordering role memory consistency model use strictest memory consistency model sequential consistency example explain following scheurish dubois39 described sufficient condition sequential consistency follows 1 processors issue memory accesses program order 2 processor issues store processor may issue another memory access value written become accessible processors 3 processor issues load processor may issue another memory access value read bound load operation become accessible processors two sufficient conditions coherence consistency see coherence consistency related tightly conditions coherence subset conditions memory consistency model former considers different events different processors location consistency model considers different events location also imposes constraints ordering event within processor execution order processor combination cache coherence event ordering determine behaviour whole memory system based understanding propose general definition memory consistency model reveal relationship memory consistency model coherence protocol event ordering processor researchers use event ordering memory consistency model interchangely however believe new understanding describe memory system behaviours accurately new definition role coherence ensure coherent view given memory location multiple processors ordering events describes happen sequence memory events issued processor use memory events represent read store operation memory17 memory consistency model logical sum coherence protocol event ordering processor example sequential consistency defined lamport 197932 viewed two conditions2 1 memory access appear execute automatically total order 2 memory accesses processor appear execute order specified programmer first condition atomicity ensured coherence protocol two base kinds cache coherence protocols write invalidate write update41 write update protocol ensures processors keep copies see new value simultaneously modified processor invalidate protocol reaches coherent view invalidate copies second condition program order determined executing order events restrict events one processor issued performed program order condition satisfied however constraint strict improve performance especially many hardware compiler optimizations write buffer lookup free nonbinding reading register allocation dynamic scheduling multiple issues cant utilized memory consistency model two conditions sequential consistency model show two directions us relax strictest consistency model hardware dsm systems years several consistency models proposed exploit hardware complier optimization techniques processor consistency weakly order weak orderingnew definition release consistency drf1 plpc model20 almost hardware compiler optimization techniques exploited plpc memory consistency model relaxed consistency models however event ordering processor relaxed wr ww rr rw operations successive synchronization operation atomicity demand changes little example rc operations two synchronization operations completed order data dependence violated however atomicity maintained write invalidate protocol similar sequential consistency model software dsm systems communication overhead expensive cost maintaining atomicity expensive hardware dsm systems therefore reducing frequency communication message traffic important software dsm systems hardware dsm systems furthermore since coherence unit software dsm system page larger page9 false sharing problem serious hardware dsm sys tems eliminate false sharing problem effectively also important issue software dsm systems discussing solution false sharing first give clear description false sharing false sharing occurs two processors access logically unrelated data happen fall page least one writes data causing coherence mechanisms pingpong page processors includes two categories writewrite false sharing writeread false sharing false sharing entail many useless communication among processors25 order reduce communication overhead software dsm systems several new memory consistency models proposed past represented consistency models software dsm systems include eager release consistencyerc munin13 lazy release consis treadmarks 27 entry consistencyec midway12 automatic update release consistencyaurc shrimp23 scope consistencyscc24 homebased lazy release consistencyhlrc43 singer writer lazy release consistencyswlrc26 messagedriven release consistencymdrc carlos 29 affinity entry consistency6 ncp2 among consistency models ordering events processor similar one another words main difference models method maintain coherence includes two aspects 1 coherence protocol used2 protocol imple mented coherence protocols adopted software dsm systems relaxed strict single writer protocol used hardware dsm systems relaxed coherence protocols include writeshared protocolmultiplewriter13 relaxed singlewriter protocolor delay invalidate26 1 example treadmarks munin systems use multiple writer protocol cvm adopts relaxed single writer protocol among described memory consistency models main difference lies updated value made one processor available processors example lrc processors execute acquire operation see updated value modified happenbefore1 partial order however ec scc shared data associate synchronization object available one processor acquires synchronization object based analysis hardware software dsm systems section see coherence protocol event ordering processor two important parts memory consistency model particular software dsm system difference among different consistency models depends greatly corresponding coherence protocols analyze relationship detail following sectionin order differentiate improved single writer protocol strict single writer protocol use relaxed singlewriter represent next section operation procedure relaxed single writer protocol shown 3 interaction coherence consistency lrc section take lazy release consistency example analyze relationship coherence protocol consistency model detail 31 lazy release consistency lrc27 allsoftware pagebased writeinvalidated based multiple writer memory consistency model implemented treadmarks system19 since objective section analyzing interaction coherence protocol consistency model describe key idea lazy release consistency subsection multiple writer protocol described following subsection lrc lazy implementation rc21 erc13 delays propagation modifications processor processor executes acquire operation main idea consistency model use timestamps intervals establish happen before1 ordering causalrelated events local intervals delimited synchronization events locks barriers lrc uses happen before1 partial order maintain ordering events happenbefore1 partial order union total processor order memory accesses individual processor partial order releaseacquire pairs vector timestamps used represent partial order processor executes acquire sends current vector timestamp acquire message last releaser piggybacks response set write notices write notices include processor id vector timestamp interval page modified modified page number faulting processor uses write notices locate apply modifications required update copy page writeinvalidate writeupdate protocols used implement algorithms following discussion assume write invalidate protocol used 32 multiple writer protocol multiple writermw protocol developed address writewrite false sharing problem mw protocol two processors modify local copies shared page simultaneously modifications merged next synchronization operation therefore effect false sharing reduced two key issues implement mw protocol write trapping write collection write trapping method detect shared memory location changed twinning software dirty bit12 two general methods used software dsm systems write collection refers mechanism used determining modified data needs propagated acquirer timestamp diffing two methods used midway treadmarks respectively details please refer 8 treadmarks twining diffing mechanisms adopted although multiple writer protocol first introduced carter munin protocol new idea derived idea delay update 11 11 bennett et al pointed order avoid unnecessary synchronization required pro grams semantics thread modifies shared object delay sending update remote copies object remote threads could otherwise indirectly detect object modified original description delay update protocol vague understanding example indirectly means whether two processors modify unit si multaneously assign different understanding idea obtain different coherence protocols example two processor 2 allowed modify page simultane ously delay update protocol evolve multiple writer protocol time one writer allowed exist multiple reader coexisted single writer delay update protocol evolves relaxed single writer protocol protocol proved useful applications 26 implementation protocol shown next subsection multiple writer protocol several benefits follows multiple nodes update page simultaneously protocol greatly reduce protocol overhead due false sharing ffl protocol reduce communication traffic due data transfer instead transfering whole page time transfers diffs ffl protocol relaxed ordering events interval since without ownership required write operation 33 interaction lrc corresponding protocol according description lrc multiplewriter protocol find lrc multiple writer protocol closely related analyze relationship step step strict single writer protocol relaxed multiple writer protocol lrc uses strict singerwriter singlereader protocol adopted release consistency ie one processor writes cache block must obtain ownership first processors receive invalidate message must invalidate local pages immediately therefore release operation write notices needed record processors already known modification executed processor release lock processor executes acquire operation following write notices needed since pages invalidated lazy release consistency invalidated already lazy property exploited case write notices vector timestamps used help faulting processors locate valided page like role home ccnuma machine furthermore writewrite writeread false sharing cannot resolved case performance lrc similar rc relaxed single writer protocol ie singerwriter multiplereader protocol used 26 adopted one processor receives invalidate messages doesnt invalidate pages immedi ately contrary keeps copies appear valid next acquire operation 2 paper assume processor one thread therefore use thread process processor interchangely case writeread false sharing eliminated partially writewrite false sharing remains order depict protocol accurately must introduce new state stale used represent state page interval receiving invalidate message page next acquire operation messages received acquire operation coherence protocol include 3 categories 1necessary messages 2 unnecessary messages entailed false sharing 3 unrelated messages pages used requiring processor example fig 1 p1 p2 two processors variable x0x1x2x3x4 5 shared data x0 x2 allocated page 0 x1 x3 allocated page 1 x4 allocated page 2 solely lock l0 l2 2 locks used users create critical sections protect use shared data relaxed single writer protocol p1 wants write x1 must obtain ownership write operation procedure invalidating copies overlapped operations following write operation p2 receives invalidate message doesnt invalidate page 1 immediately keeps appear valid next lock acquiring operation therefore time p2 read x3 doesnt cause page fault error readwrite false sharing case eliminated however p2 wants read x3 acquire operation cause page fault error therefore readwrite false sharing problem eliminated completely relaxed single writer protocol hand p2 writes x2 must cause write fault since one writer allowed write page given time writewrite false sharing problem remains fig 1 message 1 2 belong first category second category message 3 unrelated message message 4 5 unnecessary messages entailed false sharing example strict singlewriter protocol used page 0 p2 invalidated immediately first read x3 cause false sharing find relaxed single writer protocol better strict single writer protocol hand relaxed single writer protocol page fault occurs whole page transfered results great message traffic order solve false sharing problem completely reduce large communication traffic multiple writer protocol proposed widely used software dsm systems traditional mw protocol however acquiring processor receives write notices invalidate corresponding pages immediately results writeread false sharing entailed strict single writer protocol therefore improve multiple writer protocol combining traditional mw protocol relaxed single writer protocol improved multiple writer coherence protocol adopted advantages lrc exploited completely almost false sharing effects eliminated furthermore improved mw protocol write operations within one interval forward without waiting ownership case messages received acquire operation include1necessary messagesuch write notices 2 unrelated messages pages used requiring processor invalidate message page 2 fig 1 unrelated messages solved entry consistency new nlls consistency model40 beyond scope paper multiple writer protocol since two writers modify page simultaneously state page complex two protocols example two writers write page whch one owner third processor want write page inform diffing twinning mechanism tell us implementation method certain protocol however dont tell us maintain state transition multiple writer protocol describe state transition next subsection analysis draw following conclusions shown table 1 completeness page 0 page 1 page 2 x3 invalidate page 1 invalidate page 2 invalidate page 0 release l0 acquire l224ask ownership send ownership page fault cccur page fault occur page fault occur figure 1 example writeinvalidatebased relaxed single writer protocol list strictest sequential consistency base comparison memory consistency model corresponding coherence protocol sequential consistency 1require memory operations atomically 2send receive invalidate messages immediately and3stop acknowledgement received release consistency 1the atomicity demand relaxed ownership must obtain write 2send receive invalidate message immediately 3the receiving acknowledgement delayed following release synchronization operation lrcsingle writer 1the atomicity demand relaxed ownership must obtain immediately write 2send invalidate message receiver delay accept invalidate message next acquire synchronization operation 3the receiving acknowledgement delayed following release synchronization operation lrcmultiple writer 1the atomicity demand relaxed ownership needed writeif processor already copy page 2both send receive invalidate messages delayed and3the receiving acknowledgement delayed following release synchronization operation table 1 relationship memory consistency model coherence protocol according performance comparisons presented researchers83626 analysis shown table 1 find advantages consistency models depend closely corresponding coherence protocols relaxed consistency model relaxed coherence protocol needed support conclusion useful design new consistency model example support mw protocol scope consistency 24 relaxed lrc combines advantages ec lrc distinguishes different locks ie acquiring processor obtains modified data releasers use lock therefore many useless messages three protocols reduced greatly 3 34 state transition invalidatebased multiple writer protocol described order depict coherence transition relaxed single writer protocol improved multiple writer protocol must add new state named stale means coherence unit modified processors however appears valid processor fig 2 shows state transition graph writeinvalidatedbased multiple writer protocol lrc far aware first time whole state transition graph multiple writer protocol shown exclusive shared invalid stale ri wj rj rirjw ri read local processor wi write local processor rj read remote processor acquirelacquire lock release l release lock l wj write remote processor create diffi create diffi send exclusive node wicreate twin keep write notices figure 2 state transition graph writeinvalidatedbased multiple writer protocol lrc 3 although 24 authors didnt tell us multiple writer protocol adopted examples shown paper deduce scope consistency uses multiple writer protocol 4 related works dubios etal 17 analyzed relationship synchronization coherence event order ing although separated concepts coherence event ordering didnt present relationship equalized event ordering memory consistency model different viewpoint defined strong ordering weak ordering paper presented strong ordering sequential consistency fact viewpoint wrong cache coherence protocol considered adve hill gave example 4 demonstrate wrong case per stenstrom 1990 presented excellent survey cache coherence protocols41 adve gharachorloo discuss extensive survey memory consistency models2 however considered case hardware dsm systems paper consider hardware software dsm systems together study relationship coherence protocol memory consistency model recently zhou etal discussed relationship relaxed consistency model coherence granularity dsm systems44 consider granularity coherence protocol never consider coherence protocol dubios etal 18 proposed delay consistency model release consistent system invalidation buffered receiving processor subsequent acquire executed processor delay consistency model coherence protocol includes two categoriesdelay receive delaysend delay receive delay receive relaxed single writer protocol delay send delay receive similar multiple writer protocol presented state transition hardware shared memory detail paper describe state transition software dsm systems first time 5 conclusion future work paper starting classical coherent memory scheme point memory coherent includes two issuescoherency event ordering processor based clear description two concepts define general definition memory consistency model logical sum coherence protocol event ordering processor second analyze consistency models used hardware dsm systems software dsm systems new definition point hardware dsm systems relaxed consistency model devoted relax ordering events wr ww rr rw operations utilize hardware complier optimization techniques coherence protocol make much progress past years software dsm systems main obstacle performance high communication overhead useless coherencerelated messages entailed large coherence granularity therefore main purpose consistency model software dsm system reduce number message message traffic event ordering processor new consistency models similar release consistency third taking lrc example analyze relationship coherence protocol consistency model software dsm systems conclude two issues closed related relaxed consistency model relaxed coherence protocol needed support conclusion useful design new consistency model fourth make improvements traditional multiple writer protocol adding new state describe state transition graph invalidatebased multiple writer protocol first time finally based analysis paper propose main directions memory consistency model research future following hardware dsm systems ffl relaxing coherence protocol allowing multiple writers hardware coherent dsm system possible much progress semiconductor technology37 ffl considering hybrid hierarchical dsm mpp system node uses hardware implement dsm shared memory abstraction among nodes supported software dsm software dsm systems ffl relaxing coherence protocol ffl using hybrid coherence protocols different shared data shared data protected locks shared data protected barriers ffl intergrating memory consistency model together support different applications ffl considering interaction latency tolerate techniques multithreading prefetching r comparison entry consistency lazy release consistency implementations shared memory consistency models tutorial weak orderinga new definition implementing sequential consistency cache based systems mit alewife machine architecture performance affinity entry consistency protocol treadmarks shared memory computing networks workstations software dsm protocols adapt single writer multiple writer tradeoffs false sharing aggregation software distributed shared memory larry rudolph arvind munin distributed shared memory based typespecific memory coherence midway distributed shared memory system implementation performance munin new solution coherence problems multicache systems parallel computer architecture alpha version memory access buffering multiprocessors jin chin wang treadmarks distributed shared memory standard workstations operating systems programming different memory models memory consistency event ordering scalable shared memory multiprocessors cache consistency sequential consistency improving releaseconsistent shared virtual memory using automatic update understanding application performance shared virtual memory systems relative importance concurrent writes weak consistency mod els lazy release consistency software distributed shared memory portable distributed shared memory unix lazy release consistency hardwarecoherent multiprocessor stanford flash multiprocessor make multiprocessors computer correctly executes multiprocessor programs ivya shared virtual memory system parallel computing standard dash multiprocessor adsm hybrid dsm protocol efficiently adapts sharing patterns evaluation memory consistency models shared memory systems ilp processors intelligent ram iram chips remember compute revised computer architecture quantitative approach correct memory operation cachebased mul tiprocessors memory consistency models distributed shared memory systems survey cache coherence schemes multiprocessors splash2 programs characterization methodological considerations performance evaluation two homebased lazy release consistency protocols shared virtual memory systems tr ctr optimization integration dsm acm sigops operating systems review v34 n3 p2939 july 2000