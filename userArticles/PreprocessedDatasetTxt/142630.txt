tools building asynchronous servers support speech audio applications distributed clientserver models becoming increasingly prevalent multimedia systems advanced user interface design multimedia application example may play record audio use speech recognition input use window system graphical io software architecture system simplified application communicates multiple servers eg audio servers recognition servers manage different types input output paper describes tools rapidly prototyping distributed asynchronous servers applications emphasis supporting highly interactive user interfaces temporal media multimodal io socket manager handles lowlevel connection management device io supporting callback mechanism connection initiation shutdown reading incoming data byte stream manager consists rpc compiler runtime library supports synchronous asynchronous calls programmatic interface telnet interface allows server act command interpreter paper details tools developed building asynchronous servers several audio speech servers built using tools applications exploit features provided servers b introduction software tools described paper draw predecessor systems emphasize features found important building user interfaces highly interactive applications involving speech audio goal work provide environment rapid prototyping distributed asynchronous servers applications emphasis supporting multiple media multimodal io working existing user interface software within current software engineering paradigms distributed clientserver models use decadeand becoming increasingly prevalent multimedia systemsand advanced user interface design many current graphical user interfaces using x window system client applications communicate window system server manages screen output mousekeyboard input 17 advantageous use similar software design methodology developing new user interfaces use forms io suchas speechrecognition synthesis incorporate temporal media recorded speech distributed design allows multiple applications share limited io resources eg display microphone loudspeaker etc without knowledge applications software tools described paper assist creation servers client applications address issues prototyping debugging distributed environment 11 application environment multimedia application may play record audio use speech recognition input speech synthesis output access remote information services use window system graphical io architecture system simplified application communicates multiple servers eg audio servers recognition servers synthesis servers manage different types input output environment desirable 1 build many servers standardized maintainable lowlevel architecture rather handcrafting server 2 develop tools address specific needs managing timevarying media audio several audio servers based x window system model client applications communicating server manages speech audio io workstation 1 2 4 client applications make requests server perform audio functions playing sound file requests ideally asynchronous avoid roundtrip network delays permit server send user input events clients user interface servers handle temporal media audio video must also concerned types events example application places request start playing sound application ideally receive asynchronous notification play action completed application also request events server regular intervals example sound recorded energy information sent server visually displayed client application types events significantly different associated window systems yet essential using temporal media 7 12 overview socket managerhandles lowlevel connection management device io supports callback mechanism connection initi ation shutdown reading incoming data byte stream manager higher level tool consisting runtime library remote procedure call rpc stub generator specifications used rpc compiler identical syntax used calling called programs synchronous asynchronous calls supported servers built rpc library simultaneously supports programmatic interface ascii telnet inter face ascii interface simple yet powerful tool rapid prototyping debugging servers applications paper first describes asynchronous server building tools details audio recognition servers well several applications built using tools paper concludes review related work socket managersm library simplifies handling asynchronous input communications setup distributed programs sm hides underlying interprocess communication code deals socket binding listening accepting replicated building network based applications sm currently runs unix using internet domain sockets reliable tcpip communications 10 client opens connection server specifying service name optional host name new service created callback procedure registered sm procedure asynchronously executed incoming service request received callback also registered reading data available communications socket device application byte stream manager responsible actual reading data addition handling information sockets additional file descriptors registered sm allows physical devices digital sound equipment speech recognizers used within framework smbased server sm library usedby servers clients initialized server application processes block 1 data read device socket 2 request setting tearing connection 3 application defined timer expires portion sm executes callbacks data available overlaps functionality x toolkit xt allow maximum flexibility sm library built two forms one standalone client server processeswithout graphical interfaces compatibility library uses sm functions built top xt routines single server support multiple clients well multiple services see also section 41 example server provides speech processing capabilities support two related services one service provide raw signal processing capability clients service provide current status information server number clients memory usage etc service provided separate communication port 21 clients servers peers terminology client server confusing particularly dealing asynchronous messages sent directions communicating parties framework described paper client communicates server synchronous remote procedure call asynchronous message server server code rpc stubs operating system event callback dispatch application code rpc stubs operating system client server figure 1 server client architecture typically sends asynchronousmessages rpc replies back client client server processes thus act sender receiver messages symmetrical peer relationship application server byte stream manager socket manager exploit duality clients servers thus simplifying design implementation software single mechanism used communicating client server communicating server client byte stream manager bsm works top socket manager format manage asynchronous messages remote procedure calls bsm consists rpc compiler stub gen erator runtime library tuned writing xlike servers clients overall architecture typical server client shown figure 1 bsm simultaneously supports three communication modes selectable perconnection basis 1 c programming interface efficient nonhuman read able data encoding 2 c programming interface human readable data encod ing mode used debugging clientserver communications 3 ascii telnet interface interactively communicating server mode server acts interpreter useful testing debugging purposes 31 asynchronous rpc library generator functions supported server defined procedure call specification file format specifications based function prototypes ansi c complex data types arrays structures deliberately supported since inclusion would complicate ascii telnet interface server specification function arguments implicitly define whether call synchronous asynchronous function returns value modify arguments 1 function handled blocking rpc call function return value cannot change arguments 2 function handled asynchronous message remote procedure call implemented one asynchronous message client server corresponding reply server back client procedures declared either returning int void return value one argument required connectionspecific 1 ie least one argument call reference 2 ie arguments call value file descriptor identifies entity end peer connection number serverspecific arguments specified following data types currently supported data type description int double double floating point number char single character string null terminated c string bytes structure containing arbitrary data length sending audio data pointer data type call reference designated preceding argument bemodifiedbyaremote procedure syntax rpc declaration summarized intvoid funcname int fd datatype name typical specifications look like 3 1 void sstartint fd int timems 2 void srecordint fd string name 3 int sgetlengthint fd string name 4 void sgetdirint fd string dirname examples 1 2 sent asynchronousmessages example 3 synchronousrpc since function returns value example 4 also synchronous since string dirname passed reference filled server rpc started bsm buffers incoming messages response received matches original rpc request rpc complete application code finished executing buffered messages dispatched firstin firstout manner message contains sequence number time stamp sequence number used consistency checking synchronizing rpc return values time stamp available timedependent applications user interfaces symmetrical relation applications ser vices usually two specification files associated service one file specifies synchronous asynchronous calls client server specifies asynchronous events sent server client 4 compiling rpc specification file 5 produces three code files c header file h two code files represent rpc stubs server client respectively third code file typically linked application providing improved programmatic interface application registered callbacks rather enforcing predefined callback names application application registers interest particular events turn call local clientdefined functions mechanism allows runtime rather compiletime binding functions server generated events 32 telnet interface telnet 10 16 used interactively communicate server allowing act command interpreter allows access server machine without code running remote machine figure 2 illustrates sample telnet session audio server described section 41 ascii string interface also allows clients written environments 3 note number arguments used 4 server typically make rpcs client 5 rpc stub generator built using lex yacc standard compiler building tools coriented rpc generator cannot easily used eg lisp machine server functions called names shortened names arguments defined specification file function names arguments entered strings example function call form sstartfd 8000 would entered telnet interface sstart 8000 simply start 8000 6 asynchronous events server return value arguments synchronous rpc calls similarly sent displayed ascii strings telnet interface also supports crude form help generated bsm compiler list functions supported server arguments printed sent server style interface server found extremely useful debugging servers applications commands server easily typed pasted window telnet connection server allows commands scripts interactively tested without compiling code addition telnet interface bsm library run mode data packets sent peers printed feature useful often difficult task debugging distributed programs section details several audio recognition servers built using sm bsm addition several systems implemented including server finding users located 13 video snapshot server 41 sparcstationbased audio server existing highlevel library interface audio capabilities sun sparcstation 20 converted run asynchronous server replacements old synchronous procedure calls fell three categories 1 calls obtain status information server eg much current sound file hasbeen played converted synchronous rpcs 2 calls set parameters eg setting playback gain perform simple operations eg copy sound file start playing sound replaced asynchronous messages 3 asynchronous events sent application server completes timebased operation originally application would poll using library routine determine playing recording finished termination condition eg maximum length reached silence detected timebased operations passed application registered callback function example audio recording ended asynchronous record done event message sent audio server indicating activity completed figure 2 shows sample interactive telnet session audio server addition variety new asynchronous calls created awkward implement conventional librarybased procedure call environment example callback registered asynchronously receive energy values recording intervals specified application mechanism also created asynchronously playing recording buffers managed application play buffers client sends message server including first buffer audio data internal buffer server needs data asynchronous message 6 since one connection possible telnet file descriptor first argument used function names form soundstart shortened start user input font server output font comments list server functions arguments void halt halt current play record action int length stringfilename get length sound file void pause detect inttrueorfalse enable pause detection recording void get dir string dirname get current sound directory etc length greetingsnd length sound file greetingsnd reply returnvalue3457 length 3457 milliseconds 3457s get dir current sound directory reply dirnamesoundbarons directory name returned pause detect 1 stop recording user pauses record testsnd record sound file record begin ev data0 handle0 record started event record done ev data0 termination5 handle0 length3604 recording terminated 3604s play testsnd play sound file play begin ev data0 handle0 play started play done ev data0 termination6 handle0 position3604 play ended normally play testsnd play sound file play begin ev data0 handle0 play started halt user interrupts playing play done ev data0 termination1 handle0 position926 play interrupted 0926s figure 2 sample output interactive telnet session sent client executing clientdefined callback callback new data buffer typically sent back server asyn chronously sequence operations similar spirit rpc server obtain data client however scheme neither client server ever blocked waiting reply synchronous remote procedure call sounds played recorded server either files buffers playing files easiest application server internally handles file manipulation io using buffers provides flexibility application permitting example sounds synthesized onthefly played realtime using buffers however greater burden placed client manage file io send data server requested multiclient support incorporated audio server current model sharing audio resources falls areas client priorities locking data interest events general x window system philosophy followedprovide flexible mechanisms server rather policies server used however management resources necessary sharing policy incorporated server allows multiple applications use server simultaneously without write separate audio manager equivalent window manager priorities applications classified three priority levels urgent normal background priorities assigned per application basis rather per command basisfor types audio applications envisioned coarse priority structure appears sufficient 7 higher priority application preempt lower priority applica 7 although possible application change priority dynamically tion example normal priority application playing sound request arrives high priority application play sound b sound halted sound b played sound b finished playing sound resumed 8 server sends events lower priority client indicating preemption resumption play activity receiving preemption event client cancel pending play request automatically resumed requests equal lower priority arrive clients queued firstin firstout manner executed audio play record resources become available recording priorities handled similar manner except record actions terminated preemption automatically restarted behavior chosen applications provide appropriate prompting feedback user restarting recording locking applications desirable lock resources server exclusive use client ability needed application must ensure uninterrupted sequence play record actions example one application could request play sound file sound file b starts playinga separate application priority request play file c however fifo queue play requests sounds may played cb order instead desired abc order similar intermixing playing recording also possible server capable playing recording simultaneously client request lock servers resources exclusive use 9 example needed workstationbased telephone answering machine answering machine application 8 sound restarted point several seconds interruption 9 vox audio server controlled larger array speech audio devices allowed locking subsets devices rather entire server 4 must lock server telephone line taken offhook since applications able play record phone call completed application writers discouraged locking server unless absolutely necessary release server lock soon possible audio activity blocked client server locked server locked client complete control servera higher priority client cannot interrupt preempt data interest events allow flexibility types applications 10 written clients register interest receive events variety server activities client example request event whenever server begins playing recording client multiple clients may need simultaneously receive sound data recording however one process audio server read audio data recording hardware example one client recording telephone message another client may want receive copy recorded data detect presence dtmf tones 11 present visual display record level eg vu meter enable clients work together server allows record data distributed number interested clients clients register circumstances wish receive record data well intended use data example client specify going perform speech recognition whenever another client recording scheme flexible allowing clients get record data variety conditions 1 process recording 2 another process performing particular operation record data dtmf detection 3 times regardless audio server activity data interests considered background tasks multiple data interests handled simultaneously priorities used primary tasks server playing recording files recorded data distributed interested clients asynchronous events data broadcast multicast clients may started recording different times may requested receive different length data packets process captures background speech section 51 example may want receive large packets audio infrequent intervals dtmf detection client may want small packets reduce latency interactive applications queuing requests server requests halting sound playing executed received server however requests server queued cannot handled immediately example playing sound file subsequent play requests client queued previous requests complete applications desirable explicitly queue commands would normally handled immediately audio server allows speed sound changed playback con stant pitch timecompression example graphical slider used interactively adjust playback speed however application may want play sound play sound b eventually audio managers touchtones different speed sequentially sending three requests server 1 play 2 set speed 3 play b would desired effect speed sound would change soon second message arrived client could wait receiving done event first play request sending mes sages however would entail roundtrip server client possibly causing discontinuity played sounds overcome limitation possible explicitly turn command queuing server example application send commands server 1 play 2 turn queuing 3 set playback speed 4 play b technique requests change speed play b queued play action completed similar approach command queuing taken vox dec audio servers 1 4 simple mechanism sufficient many applications inadequate others applications may want perform sophisticated branching logic server based termination conditions user input rather relying simple queuing mechanism audio server ideally support interpreted programming language tcl 15 client defined procedures executed within server programming extension capability provided network extensible window system news 24 status service addition primary play record service provided audio server secondary status service provided debugging logging purposes internal state server number clients current playrecord status error information etc sent clients status service facility powerful simply logging information file several reasons first realtime operation server easily monitored simultaneously variety locations second status connection established current internal state server sent client summary formsuch information may difficult visually extract log file 42 pcbased speech recognition server existing library interface pcbased speech recognizer converted asynchronous server adding several sm calls defining rpc specification file library communicates external speakerdependent isolated word speech recognizer serial interface 12 initialization server file descriptor recognition hardware registered sm server functions accessed application asynchronousmessages application requested server load file speech templates started recognition server asynchronously sends events application word recognized events provided recognition server closely related keyboard mouse input related temporal media provided audio server 43 softwarebased speech recognition server second speech recognition server software interface built using softwarebased recognizer 9 runs entirely sparcstation speakerdependent isolated word recognizer runs realtime sparc processor recognition server gets speech data audio server via data interest events applies recognition algorithm sends recognition events interested clients typical application using recognition server requires distributed software architecture clients often communicate audio server recognition server window server window server audio server recognition server client figure 3 client uses audio recognition window servers recognition server turn gets recorded audio data audio server configuration shown figure 3 refining application programming interface api support recognizers varying performance characteristics would like support different classes recognizers speaker inde pendent continuous etc well able handle recognizer specific attributes differing training protocols variety applications implemented speech research group use audio recognition servers addition two applications detailed section several applications built take advantage multiple audio servers execute parallel separate machines process migrating speech audio applications use sparcstationbased audio server environment lead highly distributed configuration allowing variety sound processing servers layered top audio server see figure 4 addition several applications lowlevel servers two midlevel servers obtain data audio server shown 51 capturing background speech application built using audio server continually records backgroundaudio inmemory buffers later playback graphical speechonly interface built access recorded audio information graphical interface uses audio server x window server graphical output mouse input 11 speechonly interface uses recognition server controlling playback captured audio 23 describes similar system running macintosh environment 52 voice mail message collection voice mail speech research group gathered client application running sun sparcstation application communicates phoneserverprocessthat monitors isdn telephone activity call answered messagesare played recorded using audio server recording controlled using realtime silence detection functionality provided audio server information calling called parties supplied phoneserver allows messages delivered electronically recorded messages heard remotely telephone locally workstation using interactive graphical interface 22 application audio server important part software infrastructure speech research groupthe voice mail application runs continuously answers dozens telephone calls per day 6 related work 61 handbuilt servers several handcrafted servers used speechresearch group provide information services interactive applications eg 13 26 since research environment contains diverse machine architectures least common denominator approach network communications usually taken ascii string protocol used predefined communication port servers written support either synchronous asynchronous calls arrangement several drawbacks first communications portions servers clients evolved ad hoc unmain tainable manner second access server procedural interface required translating commands properly formatted strings parsing output strings sent serverthe serialization deserialization data stream coded hand ascii telnet interface found powerful enough required servers designed speechresearch group tools described paper support ascii interface procedural interface server provide highlevel abstractions establishing connections clients servers 62 remote procedure calls message passing remote procedure call systems built date operate synchronous manner 8 14 one process sends call message process blocks reply receivedin model one process active given time masterslave relationship sufficient many kinds distributed environments ideal constructing interactive applications multimodal user interfaces anrpc system often used instead asynchronousmessagepass ing procedure calls primary control structure data transfer mechanism programming languages message passing better suited rpcs dialog systems multiple conversing parties reside different hosts mail ing systems information sent regardless processed right away 21 rpc stub generator compiler helps reduce development time simplifying coding debugging lowlevel routines 25 rpc generators automate process serializing deserializing data passed remote procedure call often converting data machine independent format dispatching incoming calls appropriate routines tools described paper allow use rpc message passing within procedure call framework provide several data serialization formats 63 x window system x toolkit version 11 xwindow system uses asynchronousmessage passing protocol however requests library acts like rpc systemand waits expectedreply xwindowsystem intended completely independent operating systems network transport programming languages thus instead using rpc generator protocol defined performance portability reasons x toolkit provides comprehensive event selection dispatching mechanism client applications 6 xt also allows applications register additional devices application specific timers handled main event loop unfortunately extensive capture voice notes vu meter phone server audio server answering machine window server dtmf server recognition server figure 4 multiple server environment facilities available applications use toolkit window system user interfaces require graphical displays micesome speech research groups current work deals handheld speechonly interfaces keyboard display used 3 23 early work remote procedure call systems suggest procedure call well understood programmers thus easy adopt rpc paradigm prevalence xt mechanism callbackbased programming allows similar mechanisms used range multimedia user interface applications xt supports communication windowrelated data betweenclients provide general communication mechanism clients types servers tools described paper provide many lowlevel communication event dispatching mechanisms provided x xt without requiring presence window system 64 previous audio servers early serialcontrolled audio server developed speech research group 18 relied handbuilt client side library supported single client remote procedure call compiler used vox audio server 5 supported synchronousrpcs asynchronousmessages however necessary explicitly declare data sent synchronously asynchronously vox supported complex clientdefined constructs server represented audio routing configurations needed client vox however allow data exchanged server client dec audio server 1 modeled closely x window system server hence uses protocol rather rpc gener ator server design also based vox audio server complex serverside constructs however means sharing resources dec server mixes multiple soundswhen played simultaneously tools described paper use rpc generator rapid development rather handcrafting code support protocol rpc specifications implicitly define whether calls synchronous asynchronous sparcbased server directly supports files also allows data buffers exchangedbetween server clients 7 conclusions new user interface software engineering paradigms emerging ubiquity networkbased services tools described paper provide flexible rapid prototyping environment creating networked servers applications tools allow servers built easily retaining power familiarity remote procedure calls callbackstyle programming using asynchronousmessages simple specification file generates code synchronous rpcs asynchronous messages procedure call generator though currently limited simple data types supports several communication modes including telnet interface allows direct interactive use server future directions software include adding interpreter server reduce traffic client server eliminate queuing mechanism also consideration porting system use apple events macintosh operating system recently suggested 19 rpc evolving mainstream mode communication clientserver models key component distributed applications distributed operating systems tools described paper provide different perspective considered designing future rpc systems particular usefulness asynchronous messaging multimedia applications systems manage temporal media 27 simple powerful tools allow applications easily incorporate new media new interaction styles facilities promote development new applications user interface techniques especially involving temporal media speech audio video acknowledgments chris schmandt participated early design discussions sm bsm architecture ralph swick provided information x xt internals chris schmandt lisa stifelman wayne yamamoto reviewed earlier drafts paper jordan slott assisting development audio server work sponsored sun microsystems apple computer r integrating audio telephony distributed workstation environment design audio servers toolkits supporting speech user interface navigating speechonly hyperme dia voice audio server multimedia workstations vox audio server workstation audio windowbased graphics similarities dif ferences implementing remote procedure calls personal communication internetworking tcpip ubiquitous audio capturing spontaneous collaboration speech interface workstation window manager activity server run cant hide remote control embeddable command language telnet protocol specification x window system speech research group software communication mechanisms procedure calls versus messages another voice mail system voicenotes application voice controlled handheld computer sun microsystems inc sun microsystems inc personal communications symmetric asynchronous protocols supporting workstation integrated teleservices tr x window system hyperspeech internetworking tcpip 2nd ed vol clientserver computing ubiquitous audio implementing remote procedure calls ctr scott flinn coordinating heterogeneous timebased media independent applications proceedings third acm international conference multimedia p435444 november 0509 1995 san francisco california united states barry arons speechskimmer system interactively skimming recorded speech acm transactions computerhuman interaction tochi v4 n1 p338 march 1997 debby hindus chris schmandt chris horner capturing structuring representing ubiquitous audio acm transactions information systems tois v11 n4 p376400 oct 1993 barry arons speechskimmer interactively skimming recorded speech proceedings 6th annual acm symposium user interface software technology p187196 december 1993 atlanta georgia united states