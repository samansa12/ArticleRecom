increasing internet capacity using local search open shortest path first ospf one commonly used intradomain internet routing protocol traffic flow routed along shortest paths splitting flow evenly nodes several outgoing links shortest paths destination weights links thereby shortest path routes changed network operator weights could set proportional physical lengths links often main goal avoid congestion ie overloading links standard heuristic recommended cisco major router vendor make weight link inversely proportional capacitywe study problem optimizing ospf weights given set projected demands avoid congestion show problem nphard even approximation propose local search heuristic solve also provide worstcase results performance ospf routing vs optimal multicommodity flow routing numerical experiments compare results obtained local search heuristic optimal multicommodity flow routing well simple commonly used heuristics setting weights experiments done proposed nextgeneration att worldnet backbone well synthetic internetworks b introduction provisioning internet service provider isp backbone network intradomain ip traffic big challenge particularly due rapid growth network user demands times network topology capacity may seem insufficient meet current demands time mounting pressure isps provide quality service qos terms service level agreements slas customers loose guarantees delay loss throughput issues point importance traffic engineering making efficient use existing network resources tailoring routes prevailing traffic 11 general routing problem optimizing use existing network resources seen general routing problem defined follows given capacitated directed graph whose nodes arcs represent routers capacitated links demand matrix pair nodes tells us much traffic flow need send refer source destination demand many entries may zero particular ds zero path g arc 2 associate cost function phi load depending close load capacity ca precisely 2 phi continuous function phi derivative 3 13 xca 23 5000 1110 1 function phi illustrated figure 1 viewed modeling retransmission delays caused packet losses generally cheap send flow arc small utilization aca cost increases progressively utilization approaches 100 explodes go 110 formal objective distribute demanded flow minimize sum a2a phi resulting costs arcs explosive increase cost loads exceeds capacities objective typically implies keep maxutilization max a2a aca 1 least 11 possible exact definition objective function important techniques long piecewise linear increasing convex function general routing cost load figure 1 arc cost phi function load arc capacity ca 1 problem limitations distribute flow paths problem therefore formulated solved polynomial time fractional multicommodity flow problem show section 2 definition general routing problem except exact choice objective function equivalent one used eg awduche et al 1999 controversial feature assumption estimate demand matrix demand matrix could case proposed att worldnet backbone based concrete measures flow sourcedestination pairs feldmann et al 2000 demand matrix could also based concrete set customer subscriptions virtual leased line services demand matrix assumption accommodate unpredicted bursts traffic however deal predictable periodic changes say morning evening simply thinking two independent routing problems one morning one evening 12 ospf versus mpls routing protocols unfortunately intradomain internet routing protocols today support free distribution flow source destination defined general routing problem common protocol today open shortest path first ospf moy 1999 protocol network operator assigns weight link shortest paths router destination computed using weights lengths links router next link shortest paths possible destinations stored table flow arriving router sent destination splitting flow links shortest paths destination definition ospf protocol specifies splitting approximately even simplicity assume splitting exactly even atts worldnet simplification leads reasonable estimates quality ospf routing depends highly choice weights nevertheless recommended cisco major router vendor 1997 often set inversely proportional capacities links without taking knowledge demand account widely believed ospf protocol flexible enough provide good load balancing given demand matrix awduche et al 1999 x23 one reasons introducing flexible multiprotocol label switching mpls technologies mpls one principle decide path individual packet hence simulate solution general routing problem distributing packets paths sourcedestination pair using distribution used flow mpls technology disadvantages first mpls yet widely deployed let alone tested second ospf routing simpler sense routing completely determined one weight arc need make individual routing decisions sourcedestination pair also link fails weights remaining links immediately determine new routing 13 results general question studied paper sufficiently clever weight setting make ospf routing perform nearly well optimal generalmpls routing first answer negative arbitrary n construct instance routing problem n 3 nodes ospf routing average flow arcs utiliza tion n times higher maxutilization optimal general solution concrete objective function demonstrates gap factor approaching 5000 cost optimal general routing cost optimal ospf routing worst possible gap 5000 achieved setting weights 1 next natural question well ospf routing perform real networks particular wanted answer question proposed att worldnet backbone addition studied synthetic internetworks generated suggested calvert et al 1997 zegura et al 1996 finding perfect answer hard sense nphard find even approximately optimal setting ospf weights arbitrary network instead resorted local search heuristic guaranteed find optimal solutions surprisingly turned proposed att worldnet backbone well synthetic networks heuristic found weight settings making ospf routing perform within percent optimal general routing thus proposed att worldnet backbone projected demands concrete objective function would substantial traffic engineering gain switching existing welltested understood robust ospf technology new mpls alternative also compared local search heuristic standard heuristics weights inversely proportional capacities proportional physical distances found network capacities could support 50115 increase demands respect concrete cost function simultaneously respect keeping maxutilization 100 14 technical contributions local search heuristic original use hash tables avoid cycling search diversification using hashing tables avoid cycling local search already proposed woodruff zemel 1993 approach differs sense eliminate completely solutions already encountered need concept solution attributes precisely approach closely related strict tabu search battiti tecchiolli 1994 solution mapped hash value seen unique solution attribute allow value twice complete search using mechanism obtain diversification knowledge new idea tested local search heuristic also original use advanced dynamic graph algorithms computing ospf routing resulting given set weights turned computational bottleneck many different solutions evaluated neighborhood exploration however neighborhood structure allows local changes weights therefore developed efficient algorithms update routing recompute cost solution weights changed speedups critical local search reach good solution within reasonable time bounds typically reduce computing time factor 15 related work best knowledge previous work dealing even splitting ospf routing previous work optimizing ospf weights rodrigues ramakrishnan 1992 lin wang 1993 bley grotchel wessaly 1998 either chosen weights avoid multiple shortest paths source destination applied protocol breaking ties thus selecting unique shortest path sourcedestination pair besides difference model deal even splitting approach also technically different first deal much larger networks detail rodrigues ramakrishnan 1992 presents local search like using single descent contrast consider nonimproving moves hence deal problem avoiding cycles largest network considered rodrigues ramakrishnan 1992 16 nodes links also bley grotchel wessaly 1998 uses single descent local search largest network consider 13 links mentioned simultaneously deal problem designing network whereas try optimize weights given network finally lin wang 1993 presents completely different approach based lagrangian relaxation consider networks 26 nodes experiments proposed att worldnet backbone 90 nodes 274 links synthetic networks 100 nodes 503 links scale experiments makes speed issue motivating innovative use dynamic graph algorithms local search section 2 formalize general routing model multicommodity flow problem ferent sizes topologies networks section 4 family networks constructed demonstrating large gap ospf multicommodity flow routing section 5 show problem optimizing ospf weights nphard section 6 present local search algorithm guiding search hash tables section 7 show speedup calculations using dynamic graph algorithms section 8 report numerical experiments conclude section 9 comments results obtained mathematical formulations 21 optimal routing given directed network capacity ca 2 demand matrix pair 2 n theta n tells demand ds traffic flow sometimes refer nonzero entries demands pair arc associate variable f st telling much traffic flow goes variable represents total load arc ie sum flows going phi used model piecewise linear cost function arc notation general routing problem formulated following linear program fact uncapacitated multicommodity flow problem increasing piecewise linear costs a2a phi subject uuv2a uvu2a gammadst vs 2 3 phi 2 4 3 ca 2 5 3 ca 2 6 phi 70a gamma 178 3 ca 2 7 phi 500a gamma 1468 3 ca 2 8 phi 5000a gamma 19468ca 2 constraints 2 flow conservation constraints ensure desired traffic flow routed constraints 3 define load arc constraints 4 define cost arc program complete linear programming formulation general routing problem hence solved optimally polynomial time khachiyan 1979 experiments solved problems calling cplex version 65 via ampl denote phi opt optimal solution general routing problem 22 ospf routing ospf routing choose positive integer weight w arc length path sum arc weights extra condition flow leaving node aimed given destination evenly spread first arcs shortest paths destination precisely sourcedestination pair 2 n theta n node u f st shortest path shortest paths note routing demands completely determined shortest paths turn determined weights assign arcs denote phi optospf optimal cost ospf routing 3 normalizing cost introduce normalizing scaling factor cost function allows us compare costs across different sizes topologies networks define measure introduce ds dist 1 delta distance measured unit weights hop count also let phi unitospf denote cost ospf routing unit weights present several nice properties phi uncap phi unitospf ii inspired name uncapacitated phi uncap total load traffic flow goes along unit weight shortest paths unlimited capacity iii phi uncap minimal total load network iv phi uncap phi opt 5000 maximal value phi 0 proof follows directly definition ii follows since ratio cost load arc 1 capacity 3 times load iii follows sending flow along longer paths increases load iii get iv since 1 smallest possible ratio cost load finally get v ii since decreasing capacity arc given load increases arc cost strictly less factor 5000 capacity stays positive 2 scaled cost defined lemma 1 iv v immediately get note get phi means routing along unit weight shortest paths loads staying 13 capacity ideal situation mathematical model point increasing capacities network packet cost utilization figure 2 arc packet cost function utilization packet level view perhaps instructive way understanding cost functions packet level interpret demand ds measuring many packets identical sizes expect send within certain time frame packet follow single path pays cost arc uses original cost function phi per packet cost using arc phi aa per packet cost closely related probability packet lost phi obtained summing path cost packet per packet arc cost phi aa function oe utilization aca function oe depicted figure 2 first oe 1 utilization 13 oe increases 70 2for full arc grows rapidly towards 5000 cost factor packet ratio current cost cost would paid could follow unitweight shortest path without hitting utilization 13 hence paying minimal cost 1 arc traversed latter ideal situation measured phi uncap therefore phi measures weighted average packet cost factor packet weighted proportionally unitweight distance end points packet follows shortest path arcs exactly full cost factor exactly 3 cost factor course obtained arcs going capacity others going packet following longer detour using less congested arcs nevertheless natural say routing congests network 13 follows maximal gap optimal general routing optimal ospf routing less factor 5000 lemma 2 show gap fact approach 5000 proof based construction ospf leads bad congestion natural definition congestion fact construction provides negative example type routing flow node given destination splits splits evenly outgoing links uses precisely arbitrary n construct instance routing problem n 3 nodes one demand paths source destination shortest respect unit weights hop count instance ospf routing average flow arcs n times higher maxutilization optimal general solution concrete objective function demonstrates gap factor approaching 5000 cost optimal general routing cost optimal ospf routing family networks g n optimal general routing approaches 5000 times better optimal ospf routing n 1 proof graph defined node set ng arc set v capacities arcs ae 3 otherwise finally single demand size n source destination graph g n 3 nodes arcs illustrated figure 3 high capacity arcs represented thick lines construction exactly n paths n 2 links paths optimal solution general routing model obviously given sending one unit flow along path meaning arc gets flow third capacity therefore unit flow follow path length n 2 optimal cost phi n opt equal n 3 ospf model freely decide paths use even splitting first path used gets half flow ie n2 units second gets n4 units asymptotically means almost flow goes along arcs load factor n capacity since paths use least n capacity optimal ospf cost phi n optospf satisfies figure 3 g n conclude ratio ospf cost optimal cost optospf opt 5 complexity section formally present hardness results stating nphard find even approximately optimal setting ospf weights proofs deferred appendix hardness presented concrete cost function phi defined section 1 much general classes cost functions also prove hardness approximation respect maxutilization another natural measure quality routing cases inapproximability factors much worse results later obtain experimentally cost function section 1 theorem 3 nphard optimize ospf weight setting respect cost function defined 1 within factor 31 optimality theorem 3 derived following hardness result large class cost functions theorem 4 let ff fi fixed constants suppose total routing cost a2a psi psi l ffl l ca psi l ffca fi 52ff nphard optimize ospf weight setting respect a2a psi la within factor 072 optimality proof theorem 4 deferred appendix verify theorem 4 generalize theorem 3 claimed proof theorem 4 implies theorem 3 order get hypothesis theorem 4 sufficient see equivalent problem obtained defining new capacities using modified cost functions defined phi new cost function satisfies hypothesis theorem 4 leading inapproximability factor greater 31 2 finally state hardness maxutilization theorem 5 nphard optimize maxutilization ospf routing within factor 32 6 ospf weight setting using local search ospf routing arc 2 choose weight w weights uniquely determine shortest paths routing traffic flow loads arcs finally value cost function phi rest section present local search heuristic determine weights w 2 order minimize phi suppose want minimize function f set x feasible solutions local search techniques iterative procedures iteration define neighborhood current solution x 2 x choose next solution x 0 neighborhood often want neighbor x 0 2 n x improve f sense differences local search heuristics arise essentially definition neighborhood way explored choice next solution neigh borhood descent methods consider entire neighborhood select improving neighbor stop local minimum found metaheuristics tabu search simulated annealing allow nonimproving moves applying restrictions neighborhood avoid cycling extensive survey local search application found aarts lenstra 1997 remainder section first describe neighborhood structure apply solve weight setting problem second using hashing tables address problem avoiding cycling hashing tables also used avoid repetitions neighborhood exploration neighborhood search aims intensifying search promising region often great practical importance search new region neighborhood search fails improve best solution techniques called search diversification addressed end section first step choose maximal weight w restrict attention weights idea behind using small weights increase chance even splitting due multiple shortest paths node destination 61 neighborhood structure solution weight setting problem completely characterized vector w a2a weights define neighbor w 0 2 n w w one two following operations applied w single weight change simple modification consists changing single weight define neighbor w 0 w arc 2 possible weight setting w evenly balancing flows assuming cost function phi arc 2 increasing convex meaning want avoid highly congested arcs want split flow evenly possible different arcs precisely consider demand node demand going goes given node u intuitively would like ospf routing split flow going u evenly along arcs leaving u case arcs leaving u belong shortest path u precisely nodes adjacent u p one shortest paths u illustrated figure 4 want set w 0 denotes sum weights arcs belonging p simple way achieving goal set w otherwise w drawback approach arc belong one shortest paths u may already congested modifications weights propose send flow congested arc obviously undesirable feature therefore decided choose random threshold ratio 025 1 modify weights arcs maximal subset b arcs leaving u l w u l w denotes load resulting weight vector w way flow leaving u towards change arcs b choosing random allows diversify search figure 4 second type move tries make paths form u equal length another drawback approach ensure weights remain w max done adding condition max i2b wp choosing b detailed rest section explore full neighborhood neighbors explored next solution best according cost function 62 guiding search hashing tables simplest local search heuristic descent method iteration selects best element neighborhood stops element improve objective function approach leads local minimum often far optimal solution problem heuristics allowing nonimproving moves considered unfortunately nonimproving moves lead cycling one must provide mechanisms avoid tabu search algorithms glover 1986 1989 1990 glover laguna 1997 example make use tabu list records attributes solutions encountered recent iterations forbids solution attributes neighborhood structure weight setting problem quite complex efficiently designing tabu attributes search parameters length tabu list would required lot work instead developed search strategy completely avoids cycling without need store complex solution attributes approach called strict tabu search studied battiti tecchiolli 1994 tested different techniques implementing namely reverse elimination method glover 1990 hashing woodruff zemel 1993 digital trees knuth 1973 turns reverse elimination method much expensive memory computing requirements furthermore digital trees best suited binary variables would expensive memorywise encoding solutions jaj dimensional 16bit integer vectors therefore resorted hashing hash functions w 0 1001 p 0100101101110110 1101 w 00010 lz h w z figure 5 example hash function single weight w w 42797 compress solutions single integer values sending different solutions integer small probability implement strict tabu search use boolean table record value produced hash function encountered beginning algorithm entries set false w solution produced given iteration set hw true searching neighborhood reject solution w 0 hw 0 true checking solution encountered therefore performed constant time pointed carlton barnes 1996 risk collisions whenever w 0 6 w show collisions arise high probability iterations case roughly 10 solutions eliminated collisions however eliminated solutions essentially random since approach already highly randomized critical moreover weight setting problem many different solutions ie weight vectors lead arc loads total cost therefore even good solution killed collision high chance solution leading routing survive hash functions use based developments carter wegman 1979 dietzfelbinger 1996 thorup 2000 property probability two different weight settings get hash value functions truly random case functions used woodruff zemel 1993 suppose weights represented mbit integers log 2 w max want map lbit integers case arc 2 associate random l gamma 1bit integer p define hash function h w single weight w considering p w 2m l gamma 1 bit integer taking lbit integer obtained dropping highest bits lowest bits p w illustrated figure 5 hashing value w defined a2a h w phi denotes bitwise xor operation big advantage using xor operation allows fast update hashing value single weight changed precisely w 0 equal w except given w 0 6 w hw 0 computed w phi h w 0 local search performed 5000 iterations recorded 5000 solutions thus using fraction 50002 potential hash values 63 speeding neighborhood evaluation due complex neighborhood structure evenly balancing flows turned several moves often lead weight setting simple example node w single incoming arc v w node u 6 v w exactly balancing destination v destination w efficiency would like avoid evaluation equivalent moves hashing tables useful tool achieve goal inside neighborhood exploration define secondary hashing table used store encountered weight settings evaluate moves leading hashing value already met neighborhood structure use also drawback number neighbors given solution large exploring neighborhood completely may time consuming avoid drawback evaluate randomly selected set neighbors start evaluating 20 neighborhood time current solution improved divide size sampling 3 multiply 2 time current solution improved moreover enforce sampling least 1 neighborhood 64 diversification another important ingredient local search efficiency diversification aim diversification escape regions explored without improvement search regions yet unexplored particular case many weight settings lead routing therefore observed local minimum reached many neighbors cost leading long series iterations cost value escape long valleys search space secondary hashing table used table generally reset end iteration since want avoid repetitions inside single iteration however neighborhood exploration lead solution better current one reset table happens several iterations collisions occur potentially good solutions excluded forcing algorithm escape region currently explored collisions appear reasonable rate size secondary hashing table must small compared primary one experiments size 20 times number cost iteration figure evolution local search iterations att worldnet backbone arcs network att worldnets proposed backbone 274 links gives secondary size 5 480 whereas primary size 2 approach diversification useful avoid regions lot local minima cost sufficient completely escape one region go possibly attractive one therefore time best solution found improved 300 iterations randomly perturb current solution order explore new region search space perturbation consists adding randomly selected perturbation uniformly chosen 2 2 10 weights present figure 6 evolution cost iteration search one run instance att worldnet backbone impact diversification scheme high variation cost observed figure algorithm allows diversifying moves observe quick descent good region bad move 7 cost evaluation section first show evaluate cost function static case network specified weight setting computing cost function scratch unfortunately time consuming local search afterwards show reuse computations exploiting fact weight changes current solution solution neighborhood 71 static case given directed graph capacities fc g a2a demand matrix weights fw g a2a instances considered graph sparse moreover weighted graph maximal distance two nodes ojn j want compute cost function phi basic problem compute loads resulting weight setting consider one destination time compute total flow sources 2 n gives rise certain partial load l arc done computation destination compute load l arc compute flow first step use dijkstras algorithm compute distances normally dijkstras algorithm computes distances away source apply implementation dijkstras algorithm graph obtained reversing orientation arcs g computed distance node u compute set arcs shortest paths node u let ffi u denote degree ie observation 6 v w 2 l proof even flow splitting outgoing shortest path arcs gives following straightforward calculation l vw using observation 6 compute loads l vw follows nodes v 2 n visited order decreasing distance v visiting node v first set second set l l v w 2 see algorithm works correctly assume inductively dealt correctly nodes visited v since every arc u v entering v stems node u strictly know u visited previously hence induction load l uv correct since incoming arcs loads correct v visited outgoing arc loads computed correctly observation 6 using bucketing priority queue dijkstras algorithm computation destination takes time hence total time bound ojn j 2 72 dynamic case local search want evaluate cost many different weight settings evaluations bottleneck computation save time try exploit fact evaluate consecutive weight settings typically arc weights change thus makes sense try lazy recompute everything scratch reuse much possible respect shortest paths idea already well studied ramalingam reps 1996 apply algorithm directly basic result recomputation spend time proportional number arcs incident nodes u whose distance u changes experiments typically changes gain substantial order factor 15 100 node graph similar positive experiences laziness reported frigioni et al 1998 set changed distances immediately gives us set update arcs added deleted present lazy method finding changes loads operate set critical nodes initially consists nodes incoming outgoing update arc repeat following empty first take node v 2 maximizes updated distance v remove v finally v w updated v w new l 6 l vw set l l add w see suffices first note nodes visited considered order decreasing distances follows always take node maximal distance add new node w closer currently visited node v consequently dynamic algorithm behaves exactly static algorithm except treat nodes however nodes whose incoming outgoing arc set changes whose incoming arc loads change put node skipped know loads around would exactly previous evaluation order measure impact dynamic update cost performance algorithm performed 500 iterations various networks different demand sets results presented table 1 table see dynamic updates make algorithm 5 25 times faster average 15 times faster improvement critical us typically ran local search bit 1 hour order get good solutions 8 numerical experiments present results obtained proposed att worldnet backbone well synthetic internetworks besides comparing local search heuristic heurospf general optimum opt compared ospf routing oblivious weight settings based properties arc alone ignoring rest network oblivious heuristics 90 274 3814 90 90 274 19068 53 712 134 90 90 274 34323 52 443 85 90 average 144 2198 152 table 1 computing times 500 iterations local search seconds ffl invcapospf setting weight arc inversely proportional capacity recommended cisco 1997 experiments capacities divided maximal capacity get integer weights link found weight dividing maximal capacity capacity link ffl unitospf setting arc weights 1 ffl l2ospf setting weight proportional physical euclidean distance l 2 norm ffl randomospf choosing weights randomly local search heuristic starts randomly generated weights performs 5000 erations largest graphs took approximately one hour random starting point weights chosen randomospf initial cost local search randomospf results att worldnet backbone different scalings projected demand matrix presented table 2 scaling demand matrix mean multiply entries common number algorithm run independently scaling hence opt randomospf heurospf use different routings different scalings whereas unitospf invcapospf always use routing entry normalized cost phi introduced section 3 normalized cost followed maxutilization parenthesis bold line table corresponds original nonscaled demand ospf schemes normalized cost maxutilization calculated weight setting routing however opt optimal normalized cost optimal maxutilization computed independently different routing expect general routing able get optimal normalized cost max utilization simultaneously results also depicted graphically figure 7 first graph shows normalized cost horizontal line shows threshold 3 regarding network congested second graph shows maxutilization also generated three flavors synthetic graphs 2level hierarchical graphs graphs produced using generator gtitm zegura 1996 based model calvert et al 1997 zegura et al 1996 arcs divided two classes local access arcs long distance arcs arc capacities equal 200 local access arcs 1000 long distance arcs purely random graphs probability arc two nodes given constant parameter used control density graph arc capacities set 1000 90 274 3709 100 010 100 015 101 015 113 023 112 035 100 017 90 274 7417 100 019 100 031 101 030 115 046 191 105 100 030 90 274 11126 101 029 103 046 105 045 121 070 136 066 101 034 90 274 14835 104 039 113 062 115 060 142 093 1276 115 105 047 90 90 90 90 90 90 90 90 table 2 results proposed att worldnet backbone waxman graphs nodes uniformly distributed points unit square probability arc two nodes u v given ff fi parameters used control density graph ffiu v euclidean distance u v delta maximum distance two nodes waxman 1988 arc capacities set 1000 2level hierarchical graphs realistic known models internetworks random graphs waxman graphs cleaner mathematical perspective demands generated follows node u pick two random numbers pair u v nodes pick random number c uv 2 0 1 demand u v ffo u v c uv e gammaffiuv ff parameter delta largest euclidean distance pair nodes u v reflect fact different nodes less active senders receivers thus modeling hot spots net multiplying three random variables quite large variation demands factor e gammaffiuv2delta implies relatively demand close pairs nodes results synthetic networks presented figures 1219 note random waxman graphs capacities equal invcapospf represented via unitospf 9 discussion presented paper local search heuristic optimizing ospf weights used intradomain internet routing heuristic tested substantial set instances cost demand invcapospf unitospf heurospf opt0206114 maxutilization demand invcapospf unitospf heurospf opt figure 7 atts proposed backbone 90 nodes 274 arcs scaled projected cost demand invcapospf unitospf heurospf opt0206114 maxutilization demand invcapospf unitospf heurospf opt figure 8 2level graph 50 nodes 148 arcs2610140 1000 2000 3000 4000 5000 6000 cost demand invcapospf unitospf heurospf opt0206114 maxutilization demand invcapospf unitospf heurospf opt figure 9 2level graph 50 nodes 212 arcs invcapospf unitospf heurospf opt0206114 maxutilization demand invcapospf unitospf heurospf opt figure 10 2level graph 100 nodes 280 arcs2610140 2000 4000 6000 8000 10000 12000 14000 16000 18000 cost demand invcapospf unitospf heurospf opt0206114 maxutilization demand invcapospf unitospf heurospf opt figure 11 2level graph 100 nodes 360 arcs unitospf heurospf opt0206114 maxutilization demand unitospf heurospf opt figure 13 random graph 50 nodes 245 arcs261014 cost demand unitospf heurospf opt0206114 maxutilization demand unitospf heurospf opt figure 14 random graph 100 nodes 403 arcs cost demand unitospf heurospf opt0206114 maxutilization demand unitospf heurospf opt figure 17 waxman graph 50 nodes 230 arcs261014 cost demand unitospf heurospf opt0206114 maxutilization demand unitospf heurospf opt figure 18 waxman graph 100 nodes 391 arcs including proposed att worldnet backbone projected demands would nice run real world data data typically company secrets consider results att worldnet backbone projected nonscaled demands ie bold line table 7 observe heuristic heurospf within 18 optimality contrast oblivious methods least 15 considering general picture normalized costs figures 719 see l2ospf randomospf typically worst comes invcapospf unitospf closely together invcapospf generally slightly better random waxman graphs figures 1219 invcapospf coincides unitospf since links capacity recall invcapospf ciscos recommendation comforting see best oblivious heuristics clear winner ospf schemes heurospf fact much closer general optimum oblivious ospf schemes quantify difference different schemes note curves randomospf start pretty flat quite suddenly start increasing rapidly pattern somewhat similar figure 1 surprising since figure 1 shows curve network consisting single arc reason randomospf follow pattern weight settings generated randomly entry jumps curve randomospf figure 10 nicely illustrate luck impact weight setting one could course run randomospf several times used best solution figures clear even erratic badly randomospf performs never best purpose including randomospf able compare weight settings random choices interestingly particular demand value randomospf value initial solution local search heuristic however jumps randomospf transferred heurospf hence seems oblivious quality initial solution interesting comparison different schemes amount demand cope network gets congested section 3 defined 2as threshold congestion exact threshold inconsequential considering proposed att worldnet backbone figure 7 2level graphs figures 811 see heurospf allows us cope 50115 demand ciscos recommended invcapospf average around 70 maximum 115 achieved figure 9 particular figure l2ospf actually quite well generally invcapospf better oblivious heuristics hence challenging one compete moreover figure 9 heurospf less 2 able cope demands optimal general routing opt figure 9 heurospf 20 opt recall theorem 3 nphard approximate optimal cost ospf solution within factor 3 idea whether exist ospf solutions closer opt ones found heuristic picture generally repeated random graphs figures 1215 except heurospf tends little away opt though still less 10 waxman graphs figures 1619 significant difference relative models unitinvcapospf tends get closer opt opt allowing average 30 increase demands thus leaving less scope improvement hand waxman graphs heurospf nearly coincides opt random waxman graphs considered much less realistic 2level graphs see supporting evidence conjecturing typical internetworks heur ospf able supply large parts gain opt may invcapospf oblivious heuristics turn attention maxutilization get ordering schemes invcapospf winner among oblivious schemes heurospf overall best ospf scheme advantage using heurospf maxutilization interesting local search use maxutilization objective steplike pattern heurospf show impact changes phi 0 example figure 7 see heurospf fights keep max utilization 1 order avoid high penalty getting load capacity following pattern analysis normalized cost ask much demand deal getting maxutilization 1 see heurospf beats oblivious schemes least 50 proposed att worldnet backbone 2level graphs fact heurospf provides weight settings routings simultaneously good best effort type average cost function performance guarantee type measure maxutilization indicates weights obtained univer sally good tuned particular cost function recall values opt routings may general routing getting simultaneously closer optimal cost optimal maxutilization heurospf anyhow heurospf generally close opt little scope improvement presented worstcase examples showing cases even best ospf weight setting leads bad routing compared best general routing also shown nphard find even approximately optimal ospf weight setting negative findings contrasted positive findings experimental work weight setting heuristic produces ospf routings quite close performance best possible general routings indicates negative examples ospf routing contrived dominate practice proposed att worldnet backbone 2level graphs suggested zegura calvert bhattacharjee 1996 calvert doar zegura 1997 ospf weight setting heuristic distinguished producing weight settings allowing 50115 increase demands achieved standard weight setting heuristics using inverse capacity recommended cisco 1997 thus shown context known demands clever weight setting algorithm ospf routing powerful tool increasing networks ability honor increasing demands ospf clever weight setting provide large parts potential gains traffic engineering supporting demands even compared possibilities much flexible mpls schemes future work study robustness issues link failures appearance hotspots internet nphardness proofs appendix prove nphardness results claimed section 5 proofs done partly collaboration david johnson christos papadimitriou first prove hardness minimizing maxutilization second prove hardness respect summationbased cost functions like phi proof maxutilization much easier helps presenting basic ideas needed summation based cost functions recall section 5 theorem 5 nphard optimize maxutilization ospf routing within proof theorem 5 prove result reducing 3sat problem optimizing ospf weight setting respect maxutilization precisely let instance 3sat variable set x clause set c clause 3 literals cook 1971 construct instance ospf weight setting problem ffl exists satisfiable assignment 3sat instance max utilization ospf instance equal 1 ffl satisfiable assignment 3sat instance maxutilization weight setting least 32 fx vx tx sx figure 20 reduction 3sat ospf maxutilization construction graph g corresponding 3sat instance illustrated figure 20 clause c 2 c associate node c 2 n nodes connected arc capacity 2 global node w variable x 2 x let jxj denote least power 2 bounding number negative number positive occurrences x x 2 x associate source x destination x demand 2jxj furthermore x three nodes v x f x x arcs x arcs v x balanced binary trees jxj leaves rooted f x x positive negative occurrence x clause c arc leaf f x x node c leaf used one occurrence x clauses leaf connected clause connected global node u turn connected w arcs inside binary trees capacity jxj arcs leaves clauses u capacity 1 arc u w capacity x2x jxj x arc w x capacity jxj canonical flow network defined flow corresponding assignment values variables x precisely canonical flow jxj units flow going v x x jxj units going either x f x depending whether x true false flow comes x spreads evenly get 1 unit leaving leaf going either clause node c u jxj units flow sent x w assignment flows clause c 1 unit flow c w negative literal c thus clause c satisfied 2 negative literals load stays within capacity c w otherwise load c w 3 utilization c w goes 32 loads canonical flow stay within capacities suppose given noncanonical flow satisfying ospf routing condition flow destination splits splits evenly show maxutilization noncanonical flow least 32 easy see noncanonical flow satisfies least one following conditions x one v used exactly one used however least one internal node one binary trees flow split children case arc used gets flow 2jxj leading maxutilization 2 case ii v x x used get flow x w x leading maxutilization 2 case iii v used even splitting implies 12 flow goes x x 14 goes v x v x f x result must get 34 delta leading maxutilization 32 case iv jxj units flow arriving x f x consider node binary tree x f x flow split closest possible x f x flow splits evenly receives exactly one unit flow leaf descending however flow sent one child half many descending leaves one leaves must receive 2 units flow twice capacity outgoing arc shown evenly splitting flow leads maxutilization equal 1 flow canonical corresponds satisfiable assignment evenly splitting flow leads maxutilization greater equal 32 remains show satisfiable canonical flow achieved suitable set weights ospf routing done follows paths x x going x use 4 log 2 jxj arcs going f x use 5 log 2 jxj arcs direct path arcs canonical flow leads true value x flow splits equally x split v x achieved paths going x direct path weight paths going f x larger weight giving weight equal 3 weight equal 1 arcs leads weight setting canonical flow leads false value x flow split x splits equally v x achieved paths going f x direct path weight paths going x larger weight giving weight equal 4 v x x weight equal 3 weight equal 1 arcs leads weight setting conclusion exists satisfiable assignment exists ospf weight setting leading maxutilization 1 conversely shown evenly splitting flow correspond satisfying truth assignment maxutilization greater equal 32 hence approximating maxutilization within factor implies solution 3sat 2 prove result section 5 stating inapproximability ospf weight setting problem respect large class cost functions including cost function phi theorem 4 let ff fi fixed constants suppose total routing cost a2a psi psi l ffl l ca psi l ffca fi 52ff nphard optimize ospf weight setting respect a2a psi la within factor 072 optimality recall section 5 theorem 4 implies inapproximability factor 31 cost function phi proof follows pattern used maxutilization complex dealing sum rather maximum based following deep inapproximability result implicit hastad 1997 hastad personal lemma 7 hastad given satisfiable instance maxsat clause 3 literals variable number positive negative occurrences nphard satisfy fraction 701800 clauses proof theorem 4 prove result reducing satisfiable instance maxsat clause 3 literals variable number positive negative occurrences ospf weight setting problem use lemma 7 reduction similar maxutilization illustrated figure 21 main differences relative construction maxutilization subdivided arcs paths give higher weight cost function contracted binary trees rooted x f x formally let c satisfiable instance maxsat variable set x clause set c clause 3 literals variable number positive negative occurrences let jxj denote number occurrences clause x c maxutilization node c associated clause c 2 c connected node w path p c instead single arc p c jp c capacity 2 variable x 2 x associate source x destination x demand 2jxj x outgoing arcs two nodes v x x arc v x node f x instead arc v x x path sx fx pc rx fx qx tx vx figure 21 reduction 3sat ospf cost function q x v x x arcs jq x arcs capacity jxj x path p c c clause c x occurs negatively similarly f x path p c fx c clause c x occurs positively path p c fx jp c jp c arcs capacity 1 finally x 2 x path r x w x 3 arcs capacity jxj theorem 5 define canonical flow network flow corresponding assignment values variables x canonical flow jxj units flow going q x jxj units going either x f x depending whether x true false flow comes x spreads evenly p c gets 1 unit flow going c similarly flow sent f x p c fx gets 1 unit flow going c flow arriving clause c sent w via p c finally x via r x assignment flows every clause c 1 unit flow p c negative literal c thus clause c satisfied 2 negative literals load stays within capacity p c otherwise load p c one unit capacity flows outside clause paths p c stay within capacities hardness result based showing hard get flow cost close canonical flow corresponding satisfying truth assignment since satisfying flow loads within capacity make approximation easier reduce costs loads capacity hence proving hardness may assume remainder proof organized follows first show transform polynomial time noncanonical even splitting flow canonical flow smaller cost next show canonical flow achieved suitable weight setting finally apply lemma 7 show canonical flows low cost hard find lemma 8 noncanonical even splitting flow transformed polynomial time canonical flow smaller cost proof suppose noncanonical flow show always find flow lower cost easy see noncanonical flow satisfies least one following conditions x one q ii q x used used iv flow f x p c fx paths used b flow x p c paths used case q x included one receives 2jxj units flow ie jxj units capacity move extra flow splitting equally v x f x send one unit p c fx decrease cost q x fijq x jjxj none fx r x get capacity used unit flow transferred paths cost ff per arc p c could get increase jxj units capacity total increase cost due new routing bounded jjxj net decrease cost thus fi 52ff similarly x x v x f x used moving half flow q x empty leads decrease cost least count gain moving flow clause paths p c point paths may load strictly capacity lower bound cost case ii suppose used otherwise come back previous case r x jxj units flow capacity moving jxj units flow going f x empty jq x j leads decrease cost least case iii even splitting implies get jxj2 units flow q x f x get jxj units flow x move flow f x q x reduce flow trough r x 3jxj2 jxj place flow hence cost increases q x jxj2 jxj however flow q x remains within capacity total cost path bounded ffjq x jjxj leading decrease cost thus assume q x exactly one f x x used iv deal case iva remains show f x included beneficial include paths p c fx suppose q included include afterwards path p c fx exactly 1 unit flow corresponding capacity means q units flow moved empty paths previously capacity however q units flow sent differently p c cost fijp c j leading cost decrease least case ivb cost decrease becomes canonical flow achieved suitable ospf weight setting proof paths form x x going x f x use 207 arcs path x uses 104 arcs canonical flow leads true value x flow splits equally x split v x achieved paths going x path x weight paths going f x larger weight giving weight equal 2 arcs q x v x f x weight equal 1 arcs leads weight setting case false value assigned x similar arguments lead weight equal 2 arcs q x x x weight equal 1 arcs 2 ready finishing proof theorem 4 lemma 8 know canonical flows interest lemma 9 ensures flows obtained using ospf routing canonical flow corresponding satisfiable assignment values variables x loads remain within capacities moreover variable x jxj units flow sent x f x paths using 207 arcs jxj units flow sent q x paths using 104 arcs leading total cost 311ff x2x jxj hand consider canonical flow corresponding assignment satisfying 701800 clauses routing q x p c p c fx r x costs ff per unit flow per arcs since used paths exactly loaded capacity moreover unsatisfied clause c p c load 3 capacity 2 thus contributing 2ff total cost total number clauses total cost least ignore load may capacity p c lemma 7 nphard get assignment satisfying fraction 701800 clauses conclude nphard approximate optimal ospf weight setting within factor concludes proof theorem 4 2 acknowledgment would like thank david johnson jennifer rexford useful comments first author sponsored att research prize 1997 r local search combinatorial optimization discrete mathematics optimization reactive tabu search design broadband virtual private networks model heuristics bwin note hashing functions tabu search algo rithms universal classes hash functions complexity theorem proving procedures universal hashing kwise independent random variables via integer arithmetic without primes netscope traffic engineering ip networks experimental analysis dynamic algorithms singlesource shortest path problem future paths integer programming links artificial intelli gence tabu searchpart tabu searchpart ii optimal inapproximability results theory computing stoc polynomial time algorithm linear programming art computer programming iii sorting searching minimax open shortest path first routing algorithms networks supporing smds services ospf anatomy internet routing protocal incremental algorithm generalization shortestpath problem optimal routing data networks routing multipoint connections hashing vectors tabu search httpwww model internet work tr future paths integer programming links artificial intelligence hashing vectors tabu search incremental algorithm generalization shortestpath problem art computer programming volume 3 experimental analysis dynamic algorithms single even strongly universal hashing pretty fast detection combined occurrences optimal inapproximability results ospf local search combinatorial optimization tabu search universal hashing kwise independent random variables via integer arithmetic without primes complexity theoremproving procedures ctr hakan mit column generation approach igp weight setting problem proceedings 2005 acm conference emerging network experiment technology october 2427 2005 toulouse france makarem bamatraf mohamed othman improved balancing heuristics optimizing shortest path routing computer communications v30 n7 p15131526 may 2007 renata teixeira timothy g griffin mauricio g c resende jennifer rexford tie breaking tunable interdomain egress selection ieeeacm transactions networking ton v15 n4 p761774 august 2007