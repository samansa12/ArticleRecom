unsymmetricpattern multifrontal method sparse lu factorization sparse matrix factorization algorithms general problems typically characterized irregular memory access patterns limit performance parallelvector supercomputers symmetric problems methods multifrontal method avoid indirect addressing innermost loops using dense matrix kernels however efficient lu factorization algorithm based primarily dense matrix kernels exists matrices whose pattern unsymmetric address deficiency present new unsymmetricpattern multifrontal method based dense matrix kernels classical multifrontal method advantage taken repetitive structure matrix factorizing one pivot frontal matrix thus enabling use level 2 level 3 blas performance compared classical multifrontal method unsymmetric solvers cray c98 b introduction conventional sparse matrix factorization algorithms general problems rely heavily indirect addressing gives irregular memory access pattern limits performance typical parallelvector supercomputers cachebased risc architectures contrast multifrontal method duff reid 9 10 14 15 designed regular memory access innermost loops modified amestoy duff use standard kernels 1 multifrontal method assumes structural symmetry bases factorization assembly tree generated original matrix ordering minimumdegree computational kernel executed node tree one steps lu factorization within square dense frontal matrix defined nonzero pattern pivot row column steps lu factorization compute contribution block schur complement later assembled added frontal matrix parent assembly tree henceforth call approach classical multifrontal method although structural asymmetry accommodated classical multifrontal method holding pattern aa storing explicit zeros poor performance matrices whose patterns unsymmetric assume outset matrix may structurally asymmetric situation becomes complicated example frontal matrices rectangular instead square contribution blocks must assembled one subsequent frontal matrix consequence longer possible represent factorization computer information sciences department university florida gainesville florida usa phone 904 3921481 email daviscisufledu support project provided national science foundation asc9111263 dms9223088 cray research inc florida state university allocation supercomputer resources portions work supported postdoctoral grant cerfacs rutherford appleton laboratory chilton didcot oxon 0x11 0qx england european center research advanced training scientific computation cerfacs toulouse france davis duff assembly tree general structure assembly dag directed acyclic 5 similar gilbert liu 22 eisenstat liu 17 18 required current work explicitly use structure developed new unsymmetricpattern multifrontal approach 4 5 symmetric multifrontal case advantage taken repetitive structure matrix factorizing one pivot frontal matrix thus algorithm use higher level dense matrix kernels innermost loops level 3 blas 6 refer unsymmetricpattern multifrontal method described paper umfpack version 10 4 available netlib 7 parallel factorize version umfpack based assembly dag discussed hadfields dissertation 24 26 27 25 multifrontal method symmetric positive definite matrices reviewed 29 section 2 presents overview basic approach brief outline algorithm introduce data structures context small sparse matrix section 3 describe factorization first frontal matrix section 4 develop algorithm discussing subsequent frontal matrices factorized split discussion algorithm two sections define important terms earlier section considering less complicated situation section 5 presents full outline algorithm using notation introduced previous sections section 6 compare performance algorithm two algorithms based classical multifrontal method mups 1 2 ssgetrf 3 two algorithms based conventional compressed sparse vector data structures gilbert peierls partialpivoting code gplu 23 ma48 16 successor ma28 13 gplu use dense matrix kernels ma48 uses dense matrix kernels switching dense factorization code towards end factorization active submatrix fairly dense 2 basic approach goal umfpack algorithm achieve high performance general unsymmetric sparse factorization code using level 3 blas accomplish developing multifrontal technique uses rectangular frontal matrices chooses several pivots within frontal matrix high performance also achieved approximate degree update algorithm much faster asymptotically practice computing true degrees general sparse code must select pivots based numerical symbolic fillreducing criteria therefore combine analysis phase pivot selection symbolic factorization numerical factorization construct rectangular frontal matrices dynamically since know structure prior factorization although based assembly dag constructed analyzefactorize phase use although hadfield davis 24 26 27 25 develop use factorizeonly algorithm particular stage frontal matrix initialized choosing pivot active matrix called global pivot search using zlatevstyle pivot search 32 except keep track upper bounds degrees rows columns active submatrix rather true degrees degree row column simply number entries row column call first pivot seed pivot storage frontal matrix allocated contain entries pivot row column plus room expansion determined input parameter define current frontal matrix f submatrix comprising rows columns already pivotal c calling c contribution block subsequent pivots within frontal matrix found within contribution unsymmetricpattern multifrontal method 3 fig 21 rectangular frontal matrix within larger working array empty u l u block c shown figure 21 frontal matrix grows pivots chosen denoted arrows figure assemble contribution blocks earlier frontal matrices frontal matrix needed selection pivots within frontal matrix stops next choice pivot would cause frontal matrix become larger allocated working array complete factorization frontal matrix using level 3 blas store lu factors place contribution block c onto heap contribution block deallocated assembled subsequent frontal matrix continue factorization choosing another seed pivot generating factorizing new frontal matrix expensive compute actual degrees rows columns active submatrix would require least much work numerical factorization would defeat performance gained using dense matrix kernels instead compute upper bounds degrees much lower complexity true degrees since obtained frontal matrix data structures instead conventional sparse vectors avoid forming union sparse rows columns would needed compute filled patterns rows columns active submatrix performance achieve umfpack algorithm thus depends equally two crucial factors approximate degree update algorithm numerical factorization within dense rectangular frontal matrices outline umfpack algorithm shown algorithm 1 permuted block upper triangular form 12 algorithm applied block diagonal use matrix 21 22 23 0 31 52 53 0 55 56 0 71 72 0 0 illustrate algorithm sections 3 4 algorithm 1 consists initializations followed three steps follows algorithm 1 outline unsymmetricpattern multifrontal algorithm 0 initializations factorizing 1 global pivot search seed pivot 4 davis duff form frontal matrix f pivots found within frontal matrix 2 assemble prior contribution blocks original rows f compute degrees rows columns c contribution block f numerically update part c level 2 level 3 blas local pivot search within c endwhile 3 complete factorization f using level 3 blas endwhile initialization phase algorithm step 0 converts original matrix two compressed sparse vector forms roworiented columnoriented 10 numerical values symbolic pattern rows columns used deleted factorization assembled frontal matrices given step k say use k k refer entries original matrix yet deleted entry defined value matrix actually stored thus nonzeros entries entries may value zero use denote absolute value scalar signify number entries set sequence matrix meaning always quite clear context true degrees r c j number entries row column j active submatrix 0 respectively store cost updating would prohibitive instead use upper bounds r r r c j c j c j however true degree computed initialization phase search seed pivot corresponding upper bound set equal true degree 3 first frontal matrix label frontal matrix generated stage e index e describe factorization first frontal matrix 1 discussion however also applicable subsequent frontal matrices discussed full section 4 differences case detailed 31 step 1 perform global pivot search form frontal matrix algorithm performs pivoting maintain numerical stability reduce fillin first pivot frontal matrix chosen using global zlatevstyle search 32 candidate columns lowest upper bound degrees searched number searched controlled input parameter denote nsrch whose default value four among nsrch columns select pivot entry 0 rc smallest approximate markowitz cost 30 r r gamma 1d c c gamma 1 0 rc also satisfies threshold partial pivoting condition 10 ic note true column degree since column entries generated explicitly enable threshold test equation 31 pivot chosen row column structure define frontal matrix denotes row indices entries column column indices entries row define l u r row column indices respectively current jljbyju j frontal matrix f partition sets l u pivotal unsymmetricpattern multifrontal method 5 row column indices l 0 u 0 nonpivotal row column indices l 00 u 00 assemble pivot row r column lambdac original matrix f delete k also deletes k since k defined try find pivot rows columns identical pattern frontal matrix process called amalgamation relaxed amalgamation pivots similar nonidentical pattern permit relaxed amalgamation f placed upper left corner larger newly allocated byt work array relaxed amalgamation controlled choosing values input parameter g 1 default value parameter umfpack 2 use example 21 illustrate discussion permutations would needlessly obscure example assume pivots example matrix diagonal order note assumption would true performed global pivot search step 1 since example pivots lowest possible markowitz cost first pivot 0 11 5g let g 125 5by3 frontal matrix would stored 6by3 array 32 step 2 choose pivots perform assemblies partial factorization continue pivot search within contribution block c current frontal matrix f repeat long sufficient space working array use term assembly addition contribution terms original entries via extendadd l operator 29 operator aligns row column index sets two matrix vector operands adds together values referenced indices implicit assembly one mathematically represented data structures computationally postponed explicit assembly one actually computed entry active submatrix 0 explicitly assembled contribution terms added usually done entries normally held implicitly pivotal rows columns always explicitly assembled scan k lambdaj column j u 00 scan k lambdaj stopped soon row 2 l found scan completes without row found row indices k lambdaj also l delete k lambdaj assemble f assembly done true degree column j c j scan stops early compute upper bound degree column j size 0 worst case fillin oe k current step gaussian elimination ff j number entries scanned k lambdaj stopping row l 00 scan k analogous manner example k lambda4 assembled c entry 44 deleted uncomputed true degrees degree bounds shown table 31 values ff j used constructing upper bounds obtained assumption k stored ascending order row column 6 davis duff table true degrees degree bounds example matrix 0 r lambdac c 0 14 0a 0 0 0 0 71 divide pivot column 0 lambdac pivot 0 rc obtain kth column l nbyn lower triangular factor pivot row kth row u nbyn upper triangular factor step k gaussian elimination complete except updates kth pivot counter k incremented next step gaussian elimination frontal matrix f partitioned four submatrices according partition l u l l l 41 44 0 l 71 updates c ju 0 j pivots f applied one time instead delayed updates pending b pivots allow efficient use level 3 blas 6 cray ymp good value parameter b 16 l b u denote portions l 00 u 00 respectively whose updates yet fully applied c ju pending updates applied u b 16 updates would applied example since search next pivot within current frontal matrix search columns u 00 find candidate pivot column c minimumd c c among columns u 00 apply pending updates candidate column u lambdac compute candidate column 0 lambdac pattern true degree c c select candidate pivot row r l 00 lowest r r 0 rc also satisfies threshold pivoting criterion equation 31 compute pattern r candidate pivot row true degree r r c c current work array small accommodate candidate pivot stop pivot search also candidate column entries outside current frontal matrix threshold pivoting criterion might prevent us finding acceptable candidate pivot l 00 case also stop factorization current frontal matrix f candidate pivot unsymmetricpattern multifrontal method 7 0 rc acceptable let r repartition l u pivotal row column indices l 0 u 0 nonpivotal row column indices l 00 u 00 apply pending updates pivot row u example candidate column column fit 6by3 work array c 44 meet threshold criterion row 7 selected candidate row candidate row however rejected true degree computed work array small accommodate row 7 since r 33 step 3 complete factorization f last pivot selected within current frontal matrix f apply pending updates contribution block u pivot rows columns f placed storage allocated lu factors contribution block c pattern l 00 u 00 form call element element contribution block factorized frontal matrix yet assembled subsequent frontal matrices numerical values symbolic pattern particular let c e denote contribution block element e let pattern c e l e u e note l initially row column indices l e u e unmarked row column c e assembled subsequent frontal matrix corresponding index marked l e u e element e consists terms c e l e refer unmarked portions element e deleted entries assembled subsequent frontal matrices example c 44 c 45 associate row column active submatrix element list list elements hold pending updates row column respectively denote list elements containing row r list elements containing column j c j element lists contain local index identifies row column element matrix equivalent row column active matrix facilitates numerical assembly individual rows columns row l e place elementlocalindex pair e element list r row mth entry l e similarly column u e place e element list c j column j mth entry u e let denote summation using l operator n active submatrix 0 represented implicit assembly k elements set e l set elements remain step elimination l operations equation 32 explicitly performed postponed unless stated otherwise defined earlier notation k refers 8 davis duff original entries nonpivotal rows columns original matrix yet assembled frontal matrices element lists allow equation 32 evaluated one row column time needed column j 0 pattern similarly row 0 pattern interesting correspondence data structures george lius quotient graph representation factorization symmetric positive definite matrix 19 suppose factorize symmetric positive definite matrix using algorithm restrict pivots diagonal k u e adj gk uneliminated node quotient graph g k uneliminated node x corresponds row column 0 sets r k eliminated supernodes uneliminated nodes respectively adjacent uneliminated node x terminology eliminated supernode x e corresponds element e set l e contains uneliminated nodes adjacent eliminated supernode x e adj gk first frontal matrix example 21 c 44 c 45 l 22 23 52 53 55 56 0 72 0 note column four deleted k refer section 32 also longer appears k element lists given table 32 applying equations 35 36 obtain row 2 example obtain l 22 23 25 unsymmetricpattern multifrontal method 9 table element lists example matrix first frontal matrix 4 subsequent frontal matrices describe later steps differ element lists empty continuing example second frontal matrix 41 step 1 perform global pivot search form frontal matrix compute nsrch candidate pivot columns using equations 33 34 example next pivot 0 22 5g 4by4 frontal matrix stored 5by5 array 42 step 2 choose pivots perform assemblies partial factorization example second pivot 0 found second frontal matrix repeat step twice discussed earlier computing true degree c lambdaj j equation 34 would time consuming loose upper bound c j derived assume overlap l l e viz c j min compute bound rows columns c would take time scan k time scan r c single column j total time thetaff j jc j j oja k since ff j ja k lambdaj j similarly time compute loose degree bound row however much tighter bound obtained asymptotic time set l e split two disjoint subsets external subset l e n l internal subset n standard set difference operator define jl e n lj external column degree element e respect f similarly define ju e n u j external row degree element e davis duff respect f use bound tighter since jl e n j equation r analogous efficient way computing external row column degrees given algorithm 2 cost amortized subsequent degree updates current front use term amortized time define much total work ascribed computation single degree bound c j r note computing amortized time estimates actually include cost computing external row degrees within estimate column degree bounds although actually external column degrees used computing bound amortize time way compute external row column degrees row column degree bounds rows columns current frontal matrix relating approximate degree algorithm george lius quotient graph algorithm takes amortized time oja k compute c j correspondence holds symmetric pivots selected diagonal much less time take compute true degree true degree c degree node x j implicitly represented elimination graph g k 19 indistinguishable uneliminated nodes present quotient graph used 28 example time complexity bounds reduced computing true degree still takes much time computing approximate degree describe compute degree bound c j amortized time oja k compute external column degrees scanning e r new row l shown algorithm 2 row column new appear l u prior current pivot since e 2 r implies must internal algorithm 2 computation external column degrees assume new row 2 l element e element list r row end end algorithm 2 scans element e term initialized jl e j decremented internal row case end algorithm 2 three equivalent conditions hold 1 e appears lists r rows l 2 internal subset l e l empty 3 algorithm 2 scan element e r three following equivalent conditions hold unsymmetricpattern multifrontal method 11 1 e appear r row l 2 internal subset l e l empty 3 combining two cases obtain ae 0 oe compute external row degrees elements scan element list c j new column j u analogous manner separate work array total time compute external column degrees algorithm 2 external row degrees theta compute c j assemble elements scanning element list c j evaluating c j using equations 41 42 external row column degrees element e zero delete e c j assemble c e f element e longer exists identical assembly child element e parent current frontal matrix f assembly tree classical multifrontal method also referred element absorption 14 costly point delete references deleted element reference deleted element found later discarded external column degree element e zero external row degree zero e deleted c j column j assembled c e f column j deleted element e finally scan original entries lambdaj column j discussed section 32 remaining entries assembled current frontal matrix perform assembly delete column j k thus amortized time compute c j oja k include time perform numerical assembly scan rows 2 l 00 analogous amortized time compute r oja k pivot 0 22 example one previous element element 1 element lists shown table 32 external column degree element 1 one since appears element lists three rows l external row degree element 1 zero since ju 1 appears element lists two columns u 5g rows 2 3 7 assembled c 1 f deleted row 2 columns 2 3 k also assembled f columns assembled c 1 f column scan since external column degree element 1 zero c 44 c 45 55 56 0 0 66 67 12 davis duff 0 r lambdac c 0 22 0 0 52 53 0 0 0 marked already assembled parts element c 1 gamma would possible recover space computation chosen interest avoiding expense updating associated element lists note lists refer positions within original element assembly deletion row element affect external column degree element new rows scanned algorithm 2 similarly assembly deletion column element affect external row degree element local pivot search within f evaluates candidate column c row r using equations 33 34 36 example second pivot 0 33 found local pivot search set l remains unchanged set u augmented new column 7 rows 3 7 assembled k f subsequent execution step 2 pivot assembly c 1 made step 2 substantially reduced new rows columns f assemblies k c e done since possible assemblies would done previous pivot necessary decrement c j j 2 l 00 r 2 u 00 43 step 3 complete factorization f work array w must reset next frontal matrix rather rescanning elements resetting counters use following modification algorithm 2 counter w 0 counters equal zero 1 respectively start factorization algorithm 2 modified computation external column degrees assume new row 2 l element e element list r row end end external column degrees ae oe enable reuse w degree computation next pivot step increment would overflow reinitialize w 0 w zero 1 respectively unsymmetricpattern multifrontal method 13 example final factorized frontal matrix l l 52 l 53 c 54 c 55 c 57 l 72 l 73 c 74 c 75 c 777 7 5 note u due relaxed amalgamation two pivot rows nonidentical patterns relaxed amalgamation result higher performance since level 3 blas used small example active submatrix represented implicit assembly c 44 c 45 l l 4 45 46 0 55 56 0 0 66 675 0 44 0 0 54 0 56 00 0 0 74 00 element lists shown table 41 table element lists example matrix second frontal matrix 5 algorithm algorithm 3 full outline umfpack version 10 algorithm 6 performance results section compare performance umfpack version 10 mups 1 ma48 16 gplu 23 ssgetrf 3 single processor cray ymp although mups ssgetrf parallel codes method set input parameters control behavior used recommended defaults exceptions indicate methods factorize general unsymmetric matrices ma48 16 supersedes ma28 code 13 first performs ordering phase also computes factors discards performs 14 davis duff algorithm 3 unsymmetricpattern multifrontal algorithm 0 initializations global search kth pivot 0 rc r form rectangular frontal matrix f sbyt work array pivots found 2 assemble kth pivot row column f scan element lists compute external degrees assemble k contribution blocks f compute degree bounds compute entries l u ju 00 find candidate column c 2 u 00 u lambdac c c 6 jl 00 assemble column c compute c c find candidate row r 2 l 00 r found goto step 3 row r compute r r r u endwhile 3 save l 0 l 00 l u 0 u 00 u u delete f add e element lists endwhile numerical factorization compute entire lu factors matrix becomes dense enough near end factorization default 50 dense ma48 switches dense factorization code ma48 preorder matrix block upper triangular form always preceded finding maximum transversal 8 factorize block diagonal 12 offdiagonal blocks suffer fillin ma48 restrict unsymmetricpattern multifrontal method 15 table input parameters method method option umfpack ma48 mups ssgetrf gplu scaling yesno yesno yesno yesno yesno block upper triangular form yesno yesno yesno maximum transversal yesno yes preserve symmetry yesno yesno yes yes total number tests per matrix 8 8 4 2 4 pivot search diagonal thus preserving symmetry exists mups performs minimum degree ordering symbolic factorization nonzero pattern constructs assembly tree numerical factorization phase 1 numerical factorization candidate pivot entries must pass threshold partial pivoting test similar equation 31 except test rows instead columns since methods comparing perform test columns factorize mups use factors solve original system optionally preorders matrix maximize modulus smallest entry diagonal using maximum transversal algorithm 8 mups always attempts preserve symmetry permute matrix block upper triangular form ssgetrf classical multifrontal method cray research inc library version 11 installed cray ymp uses lius multiple minimum degree mmd algorithm 28 pattern includes threshold partial pivoting test specified documentation results conclude ssgetrf always uses maximum transversal algorithm base conclusion observation mups ssgetrf obtain similar fillin highly unsymmetric matrices matrices mups performs poorly maximum transversal algorithm used like mups always preserves symmetry permute matrix block upper triangular form gplu code gilbert peierls 23 include preordering phase factorizes using threshold partial pivoting row interchanges first explicitly form find fillreducing ordering via lius multiple minimum degree algorithm 20 28 use permutation column order suggested 21 time report includes analysis phase also tested gplu block upper triangular form found ma48 applying gplu preordering block diagonal gplu option preserving symmetry umfpack similar input parameters ma48 explicitly include switch dense factorization code frontal matrix dense however umfpack symmetrypreserving option similar ma48 except input parameter sets preference diagonal pivots preference strict tested methods scaled unscaled matrices scale factors computed harwell subroutine library routine mc19a row matrix scaled mc19a subsequently divided maximum absolute value row column selected threshold partial pivoting factor u 01 five methods table 61 summarizes different options used method indicates number runs performed experiments number case determined number options available particular code methods tested single processor cray ymp c98512mw davis duff table test matrices name n jaj sym discipline comments bcsstk08 1074 12960 1000 structural eng bcsstk28 4410 219024 1000 solid element model bcsstk16 4884 290378 1000 corps eng dam plat1919 1919 32399 1000 oceanography atlantic indian oceans eng 21x21x5 irregular grid sherman4 1104 3786 1000 16x23x3 grid fully implicit pores 2 1224 9613 0612 full grid shale sherman3 5005 20033 1000 16x23x3 grid lns 3937 3937 25407 0850 fluid flow linearized navierstokes shyy41 4720 20042 0723 viscous fullycoupled navierstokes ex11mat 16614 1096948 1000 3d cylinder plate heat exch shyy161 76480 329762 0726 viscous fullycoupled navierstokes mcfe 765 24382 0699 astrophysics radiative transfer pollution eris1176 1176 18552 1000 electric power linear programming basis migration mahindas 1258 7682 0017 economics victoria australia finan512 74752 596992 1000 portfolio optimization radfr1 1048 13299 0054 chemical eng nonreactive separation light hydrocarbon recovery section reactive distillation extr1 2837 11407 0004 dynamic simulation reactive distillation lhr04 4101 82682 0015 light hydrocarbon recovery reactive distillation hydr1 5308 23752 0004 dynamic simulation light hydrocarbon recovery gre 1107 1107 5664 0000 discrete simul computer system 8 512 megawords memory 8byte words version 60322 fortran compiler cft77 used method given 95mw memory factorize 34 test matrices listed table 62 table lists name order number entries jaj symmetry discipline matrix came additional comments symmetry number matched offdiagonal entries total number offdiagonal entries entry ij j 6 matched ji also entry table subdivided discipline disciplines order decreasing average symmetry matrices discipline matrices within discipline ordered size n matrices available via anonymous ftp include matrices harwellboeing collection 11 orioncerfacsfr numericalccrlacuk saads sparskit2 collection ftpcsumnedu test matrices table available ftpcisufledupubumfpackmatrices petroleum engineering problems listed oil reservoir simulations best time runs listed table 61 method shown table 63 best set options tends dependent discipline rather particular matrix optimal parameters preservation symmetry scaling permutation block triangular form usually determined priori time unsymmetricpattern multifrontal method 17 table run time seconds single processor cray ymp c98512mw8 method matrix discipline umfpack ma48 mups ssgetrf gplu bcsstk08 structural eng 0342 0416 0708 0588 21044 bcsstk28 1564 6771 1204 2896 312059 plat1919 oceanography 0595 1816 0415 failed 21716 eng 0196 0317 0209 0193 5297 sherman4 pores 2 0252 0284 0316 0297 4652 sherman3 0741 1732 1043 1084 36087 lns 3937 fluid flow 1869 5437 1899 1746 38213 ex11mat 91571 413496 17781 21072 failed shyy161 14541 140211 failed 8843 failed mcfe astrophysics 0343 0426 0324 0399 7065 eris1176 electric power 0121 0134 0140 0264 6356 failed mahindas economics 0164 0085 0663 0892 1793 finan512 30787 184727 46691 146275 failed chemical eng 0206 0254 0214 0316 3480 lhr04 2595 4118 9812 10541 86020 failed 174761 failed gre 1107 discrete simul 0307 0329 0378 0380 7161 seconds includes analysis factorization times include time compute scale factors since used scaling algorithm methods fastest time matrix shown bold mups failed lhr71 shyy161 matrices insufficient memory illconditioned problems cause mups unable numerical grounds choose pivots selected analysis leads increase fillin subsequent failure ssgetrf failed plat1919 unable determine numerically acceptable pivot order ssgetrf erroneously declared plat1919 matrix singular gplu exceeded time limit one hour five matrices umfpack faster four methods 16 34 matrices usually twice slow fastest method exception ex11mat matrix large matrix symmetric nonzero pattern however umfpack normally requires storage four methods shown table 64 table lists memory used runs whose times listed table 63 smallest memory usage shown bold umfpack uses 10 36 times memory required method needing davis duff table memory usage megawords single processor cray ymp c98512mw8 method matrix discipline umfpack ma48 mups ssgetrf gplu bcsstk08 structural eng 0229 0295 0187 0170 0524 bcsstk28 2162 3043 1674 1236 2023 plat1919 oceanography 0669 0890 0363 failed 0371 sherman4 pores 2 0163 0179 0236 0164 0115 sherman3 0764 0938 0567 0430 0867 lns 3937 fluid flow 1044 1908 1121 1193 0738 ex11mat 56743 53552 22941 15981 failed shyy161 12162 25692 failed 7570 failed eris1176 electric power 0135 0161 0102 0085 0136 failed mahindas economics 0085 0074 0208 0143 0073 finan512 22938 54545 31524 21951 failed chemical eng 0136 0142 0108 0096 0107 lhr04 1166 1259 2160 1655 0614 failed 35268 failed gre 1107 0228 0205 0352 0280 0252 least memory usually gplu unsymmetric matrices ssgetrf symmetric matrices median two values 151 significant high enough limit usefulness umfpack larger matrices shyy161 psmigr 1 finan512 lhr71 matrices example part reason umfpack uses much memory stores original matrix pattern numerical values row column form double storage matrix slightly facilitates scanning assembly entries see section 32 plan remove double storage reals next release umfpack level 3 blas matrixmatrix multiply sgemm routine attains performance 9015 mflops 1024by1024 matrix multiply stored 1025by 1025 array one processor cray ymp c98512mw8 reaches peak performance quite quickly 8105 mflops 64by64 matrices 8877 mflops 128by128 matrices umfpack achieved peak 6656 mflops ex11mat matrix mups ssgetrf obtained 4415 3270 mflops respectively matrix performed much less work umfpack highest performance obtained umfpack matrix fastest unsymmetricpattern multifrontal method 19 finan512 matrix 3590 mflops peak performance ma48 3751 mflops psmigr 1 matrix peak performance gplu 19 mflops bcsstk08 primarily innermost loops readily vectorize even appropriate compiler directives fundamental limitation gplu however ng 31 reports gplu attains much higher relative performance ibm rs6000 example gplu faster umfpack rs6000 lns 3937 matrix although fastest blas used comparisons scaling matrix little effect factorization time solution quality measured relative residual half matrices test set scaling improved results bcsstk08 psmigr 1 matrices hydr1 radfr1 rdist matrices codes except mups ssgetrf permuting matrix block upper triangular form btf usually reduces execution time fillin btf nontrivial gplu always improved however trivial btf symmetry usually worth preserving pattern symmetric moderately one class matrices zeros diagonal note none methods use 2by2 pivots 10 unable preserve symmetry zeros diagonal filled earlier pivot steps ma48 unable find stable diagonal pivots diagonal pivoting option requested immediately switches full code early switch may cause large increase storage required prevented us performing diagonal pivoting ma48 lns 3937 matrix matrix umfpack selects offdiagonal pivot entries symmetrypreserving option enabled performance statistics include analysis numerical factorization times five codes listed factorizeonly options usually much faster combined analysisfactorization phases indeed design criterion codes example ma48 minimize factorize time even caused increase initial analyse time factorizeonly option version 10 fast could since librarycode development effort gone towards combined analysisfactorize phase parallel factorizeonly code 24 26 27 included umfpack version 10 results show unsymmetricpattern multifrontal method competitive algorithm compared classical multifrontal approach mups ssgetrf algorithms based conventional sparse matrix data structures ma48 gplu acknowledgments thank patrick amestoy mario arioli michel dayde theodore johnson steve zitney many helpful discussions joseph liu providing us copy mmd ordering code john gilbert providing us copy gplu factorization code many researchers provided us large unsymmetric matrices class matrices weak release 1 harwellboeing collection matrices available via anonymous ftp ftpcisufledu pubumfpackmatrices directory r vectorization multiprocessor multifrontal code mups parallel package solving sparse unsymmetric sets linear equations cray research users guide unsymmetricpattern multifrontal package umfpack distribution mathematical software via electronic mail algorithms obtaining maximum transversal direct methods sparse matrices users guide harwellboeing sparse matrix collection release 1 implementation tarjans algorithm block triangularization matrix exploiting structural symmetry unsymmetric sparse symbolic factorization computer solution large sparse positive definite systems implementation gaussian elimination partial pivoting sparse systems elimination structures unsymmetric sparse lu factors sparse partial pivoting time proportional arithmetic operations lu factorization sequences identically structured sparse matrices within distributed memory environment lost pivot recovery unsymmetricpattern multifrontal method modification minimumdegree algorithm multiple elimination elimination form inverse application linear programming comparison direct methods solving sparse nonsymmetric linear systems pivotal strategies gaussian elimination sparse technique tr ctr cong fu xiangmin jiao tao yang efficient sparse lu factorization partial pivoting distributed memory architectures ieee transactions parallel distributed systems v9 n2 p109125 february 1998 olaf schenk klaus grtner twolevel dynamic scheduling pardiso improved scalability shared memory multiprocessing systems parallel computing v28 n2 p187197 february 2002 olaf schenk klaus grtner solving unsymmetric sparse systems linear equations pardiso future generation computer systems v20 n3 p475487 april 2004 timothy davis john r gilbert stefan larimore esmond g ng column approximate minimum degree ordering algorithm acm transactions mathematical software toms v30 n3 p353376 september 2004 timothy davis iain duff combined unifrontalmultifrontal method unsymmetric sparse matrices acm transactions mathematical software toms v25 n1 p120 march 1999 anshul gupta recent advances direct methods solving unsymmetric sparse systems linear equations acm transactions mathematical software toms v28 n3 p301324 september 2002 timothy davis column preordering strategy unsymmetricpattern multifrontal method acm transactions mathematical software toms v30 n2 p165195 june 2004 xiang zhiqing l fast algorithm based partial basic solution vectors domain decomposition method scattering analysis electrically large cylinders journal computational physics v219 n2 p930942 december 2006