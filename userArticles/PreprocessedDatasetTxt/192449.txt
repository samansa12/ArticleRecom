architecture extensible 3d interface toolkit paper presents architecture extensible toolkit used construction rapid prototyping three dimensional interfaces interactive illustrations three dimensional widgets toolkit provides methods direct manipulation 3d primitives linked together visual programming language create complex constrained behavior features toolkit include ability visually build encapsulate parameterize complex models impose limits models toolkits constraint resolution technique based dynamic object model similar prototype delegation object systems toolkit used rapidly prototype tools mechanical modelling scientific visualization construct 3d widgets build mathematical illustrations b introduction many advances 2d user interface toolkits 8101112 allow developers rapidly prototype 2d interfaces recent attempts made advance user interfaces 3d 34571315 natural develop toolkit aids rapid prototyping construction 3d interfaces visual toolkits added benefit nonprogrammers also interface developers due difficulty specifying complex behavior 3 dimensions task specifying interfaces 3d difficult time consuming visual 3d toolkit provides means make interface construction 3d feasible programmers nonprogrammers paper present architecture toolkit used constructing three dimensional widgets interactive illustrations three dimensional interfaces 5 toolkit provides direct manipulation 3d primitives visual language primitives used construct widgets interface objects application objects whose geometry affinely constrained constraints apply geometry also nongeometric attributes color visibility transparency toolkit improved prototype described 18 enhancing visual language support parametrized procedures encapsulation inequality relationships limits constraints nongeometric attributes also enhanced interface specifying relationships primitives three ways first provided options linking behaviors second included mechanisms breaking constraint relations finally added visual feedback displaying constraint relations paper presents underlying architecture toolkit information ui see 22 visual programming paradigm toolkit significant advantages methods used toolkits libraries 1215 graphical networks 1810 traditional approach designing user interface toolkits use libraries software objects created using standard programming languages makes task visualizing complex relationships objects difficult also rules possibility nonprogrammers using interface prototyping second paradigm based graphical manipulation function networks paradigm developer wires together 2d boxes direct relation application objects represent toolkits direct manipulation paradigm advantage direct manipulation application objects visual language allows nonprogrammers use toolkit interface protoyping used toolkit creating mathematical illustrations decastelljau algorithm figure 7 used teaching tools constructing many 3d interface widgets figure 7 b presented 5914 building tools scientific visualization figure 7 c collaborative project brown university university utah building interactive tools mechanical modeling operations warps blends sweeps figure 7 section 20 explain toolkit architecture fundamentals section 30 discuss visual language section 40 present conclusion work section 50 discuss future work b c figure example uses toolkit mathematical illustrations decastelljau algorithm b3d widgets rack c interfaces scientific visualization rake tools interactive mechanical modelling warp tool 20 toolkit architecture fundamentals toolkit designed two main goals mind enable programmers nonprogrammers rapidly prototype 3d interfaces provide design extended easily add new primitives behaviors primitives allow rapid prototyping nonprogrammers base toolkit direct manipulation visual primitives primitive set characteristic traits uniquely defines primitive example vector primitive defined position direction allow interface designers create objects complex interactive behavior need ability relate characteristic traits one visual primitive another think complex objects many simple objects constrained 18 constraint relationships bidirectional related objects affect limit relationships become extremely complex contain cycles call relating traits linking links established toolkits visual interface toolkit also allows modification traits traits modified link established primitive manipulated user primitives therefore know input devices modify response user interaction modifications must made without violating previously established relationships create toolkit easily extended chose object oriented design underlying toolkit structure since primitive changes behavior dynamically based primitives dynamic objects similar prototype delegation based object systems 1920 dynamic objects instanced class represents primitive class contains data fields called slots represent characteristic traits primitive conventional languages provide support linking operations described must therefore provide mechanisms specify constraint relations slots related maintain constraints ensuring consistency slots user interaction constrained relationships could maintained variety techniques associated problems numerical solvers 21 problems performance numerical error forward propagation solvers 23 problems priorities invertability cycles simplicity ease extension speed chose simple resolution scheme slot primitive class designer supplies inquiry assignment constraint methods get set value slot make scheme manageable exploiting dynamic inheritance mechanisms class design constraints added primitives slot inquiry assignment methods updated maintain new constraint behavior see section 321 although solution technique lacks expressive power techniques mentioned found wide variety interfaces 514918 represented small number reusable constraint methods technique unpredictability solution numerical solvers problems invertability priorities forward propagation solvers additional benefit toolkit interactive even complex models though chosen particular solution technique solving constraints preclude possibility solution techniques plugged back end toolkit future 30 visual language introduce visual language constructing 3d interfaces language provides framework visual construction constraint relationships toolkit primitives language consists classes represented 3d toolkit primitives classes contain typed variables called slots slots classes linked establish constraint relationships primitives create new classes encapsulating complex collections constrained primitives encapsulations add new primitive classes toolkit optionally parametrized called like subroutine recreate complex constructions 31 class abstraction geometry behavior toolkit primitive geometric object associated class provide visual representation class behavior defined slots class classs interaction technique define constraint relationship two class instances linking slots classes 32 slots slots typed variables visual language represent constrainable quantities class primitive geometric representation one slots define behavior slots used establish constraints primitive primitive initially unconstrained linking operation effected interface selection destination primitive slot source primitive followed explicit user confirmation link sets bidirectional data flow slot destination primitive source primitive interaction techniques specify modify slot user interaction maintaining constraint relationships slots example points position constrained line point manipulated constraint resolved either moving point along line moving line point interaction technique chosen one combination solutions link established new interaction technique associated primitive reflect new constraint toolkit supports translational rotational interaction techniques could selected fixed interaction technique type link would prevent user selecting interaction technique best suited particular problem therefore provide options leave choice user 321 slot inquiry assignment inquiry method computes value constrained slot example vectors position slot linked point vector resolved see section 322 vector positions inquiry method invoked point passed parameter figure 2 simple constraint vectors position slot inquiry method simply gets value points position slot figure 3 alternatively vectors position modified must assign new position back point assignment method determines constrained slot maps back primitive constrained figure 2 data flow vector primitive point primitive linking position slot vector point figure 3 result inquiry vectors position slot point destination source position direction length vector primitive point primitive inquiry destination source position direction length vector primitive point primitive position assignment methods give constraint bidirectional behavior inquiry assignment methods complex may apply function one slots primitive slot constrained determine value constrained slot inquiryassignment solution could burdensome might require specification methods possible combinations data types toolkit bases constraint methods type slot class primitive constrained scheme allows reuse constraint methods thus decreasing number methods class designer needs write 322 constraint resolution provide detailed example illustrate linking process constraints resolved example link vector primitives position slot point primitive first select vector primitive destination primitive point primitive source primitive toolkit ui arrow drawn two primitives indicate pending link figure 4 select slot interest case pos slot destination primitive motif window figure 5 presented list possible options establishing constraint b figure linking primitives link pending vectors position slot point primitive b link established figure 5 vector primitives slots linking options linking point primitive options combine inquiry assignment methods interaction technique methods establishing constraint case choose default behavior basing vector point alternative behavior could positioning base vector relative distance point finally confirm link clicking glue bottle link established position slot vector primitive point primitive link created internally storing pointer source primitive linked slot destination primitive storing pointer destination primitive list source primitive constraint establishment accomplished establish method establish methods exists particular type link work setting initially satisfying constraint link established user translates point toolkit intercepts mouse interaction passes mouse information point primitives interaction technique since constraints placed pos slot point primitive interaction technique sets value position slot new mouse location interaction technique calls points resolution method resolution method method defined primitive resolves slots primitive updates graphical representation primitive finally calls resolution methods primitives linked slot linked slot resolved inquiring value primitive linked continuing example point primitives interaction technique wrote new value points pos slot called points resolution method since pos slot point linked resolve method effect pos slot point redrawn new position next points resolution method calls vector primitives resolution method vector primitives resolution method resolves pos slot updates slot inquiring value point primitive return value inquiry value pos slot point primitive since vectors dir len slots linked changed vector redrawn base position point primitive summary flow control depicted figure 6 user translates point base vector follows point similarly user attempts translate vector interaction technique vector allows vector freely translate assigns figure 6 flow control summary constraint resolution vectors pos slot constrained point mouse interaction point points interaction technique points resolution method vectors resolution method resolution vectors pos slot new value position back point turn updates vector 323 dynamic slot creation link may necessarily constrain degrees freedom slot degrees freedom slot ways constrained slot free vary remaining degrees freedom represented dynamically created new slot primitive example constrain point primitives position slot vector point gets projected onto vector points new interaction technique allows move along line defined vector new slot therefore created point primitive called slot represents parametric position point along vector slot constrainable used restrict points location along line complex constraint resolution example points pos slot constrained lie vector resolution method point resolves pos slot first resolving slot passes value slot vector inquiry method points pos slot returns position along vector dynamically created slots defined primitives casebycase basis 33 description toolkits core primitives section describe core set primitives defined toolkit fundamental difference toolkits primitives prototype widget construction toolkit 18 difference stems definition primitive original toolkit primitives consisting multiple pieces geometry constraints pieces geometry ways name primitive misnomer toolkit primitives exactly one piece geometry represent slots start unconstrained designed primitives simple powerful enough build complex primitives prototype toolkit approach reduces unnecessary confusing clutter complex primitives philosophy toolkit based idea complex entities created simpler primitives using encapsulation methods described section 34 prototype toolkit base basic primitives euclidean coordinate system metaphor ie points vectors planes volumes previous experience shown allows expression wide variety constructions noted primitive set although fair amount expressive power means adequate conceivable constructions toolkit designed allow easy addition new primitives extensions existing primitives need new behaviors arise toolkit contains four basic primitives point primitive vector primitive plane primitive graphical object primitive primitive associated class abstraction geometry behavior including interaction methods primitive figure 7 shows 4 basic primitives point primitive represented small sphere one constrainable slot pos slot type position pos slot abstraction three space position default interaction technique primitive translation point 3space b c figure 7 toolkit primitives point primitive bvector primitive c plane primitive geometric object primitive vector primitive represented small arrow three slots dir slot type direction pos slot type position len slot type length dir slot represents direction vector pos slot represents base vector 3space len slot represents length vector default interaction technique vector primitive rotation vector sets value dir slot default vectors pos slot located origin len slot set 10 plane primitive represented graphically flat sheet five slots normal slot type direction center slot type position two size slots length width sheet type length slot type direction normal slot represents normal sheet size slots represent scale length width sheet slot represents orientation sheet similar phigs vup final primitive graphical object primitive encompasses 3d modeled objects eg cubes spheres csgs available uga browns modeling animation system 16 primitive similar plane primitive slots represent local 3d coordinate system modeled object ie normal center size three dimensions extend slots include nongeometric attributes modeled object example added red blue green slots type real represent objects color 34 encapsulation encapsulation process networks linked primitives stored recreated toolkit toolkit supports two types encapsulation structural encapsulation class encapsulation optionally parametrized using technique called parametrized encapsulation 341 structural encapsulation structural encapsulation aids user reproducing network linked primitives example might link vector two points vector spans two points figure 8 b figure 8 vector primitive spanning two point primitives linking b linking construction use repeatedly encapsulate name encapsulation line encapsulation process creates new line menu item figure 9 user clicks line menu item gets vector two points links original network encapsulated new networks behavior identical original structural encapsulation implemented traversing constraint network construction creating copies primitives links network copies stored toolkit drawn screen structurally encapsulated object requested copies primitives links associated network created new primitives drawn b figure 9 primitives menu line creation b line creation 342 class encapsulation class encapsulation similar structural encapsulation constraint network traversed copies primitives links network created differs associate new class collection primitives encapsulated construction think creating new primitive toolkit lets change line example use class encapsulation encapsulate vector points construction also specify class encapsulated construction case class line point vector primitives classes changed class line class modification changes linking behavior primitives link structurally encapsulated construction link directly simple primitive user clicks example link primitive vector primitive structurally encapsulated line actually linking vector primitive class vector class encapsulation link vector primitive within line actually link line primitive allows new constraint behavior defined class encapsulated primitive new class encapsulated primitive behaves identically interaction primitive created structural encapsulation behavior overridden described new classes implemented creating new primitive slots primitive encapsulated network slots optionally named user object encapsulated line example line primitive created slots two points vector called respectively startpoint endpoint centerspan see figure 10 assigning new classes networks primitives provides mechanism changing interactive behavior associated network primitives example try rotate endpoint structurally encapsulated line nothing happens point primitive rotational interaction technique use class encapsulation click point primitive actually referring line primitive class encapsulation default get interactive behavior structurally encapsulated line perhaps want line primitive rotate around center rotate endpoint since line primitive knows components associate rotational interaction technique line primitive rotates line center maintaining constraints associated construction user tries rotate endpoint line gets desired behavior figure 10 slots line primitive created class encapsulation line primitive startpoint endpoint point primitive point primitive vector primitive centerspan 343 parametrized encapsulations ability encapsulate recreate constructions thought invoking subroutine create complex primitive introduce ability parameterize subroutines call parametrized encapsulation often encapsulate new class primitives network would like keep parameters visual programming language primitives parameters subroutines example create line primitive illustrated might want create way create line two existing points effect create line subroutine takes two endpoints parameters line subroutine endpoints two points primitives following restriction parameter passed must slot slot type original primitive encapsulation example parameters must pos slot create parametrized encapsulation specify primitives parameters name class created named primitives marked parameters users create new primitive parametrized class first prompted primitives parameters parameters specified new primitive created duplicate primitive encapsulation originally created used one could say original parameters act defaults parameters encapsulated object ability parametrize encapsulations greatly increases usability widgets like interactive shadow widget 9 interactive shadow widget creates shadow object creating scaled copy object projecting onto shadow plane shadows used interactively position objects previous prototype way creating shadow widget different objects without respecifying linking operations toolkit might use structurally encapsulated class would create fixed primitives shadowed object shadow plane limited usefulness using parameterization specify object shadowed shadow plane parameters encapsulation 35 limits many problems equality constraints insufficient example consider color picker made three lines points constrained lines three points slide respective lines representing points distance start line fraction total line length fraction represents percentage red blue green color object standard rgb color model color values restricted interval zero one toolkit allows point slide freely line produces values greater one less zero results color functions receiving invalid parameters support comparison operators slot variables greater less limits limits impose additional restrictions data flows slots toolkit limits imposed associating limiting functions slots primitives resolve method called turn calls methods resolve slot primitive slots resolved slots limited limiting methods checks slot value insure falls within given range value adjusted within desired range continue color picker example limit point lie line endpoints shown figure 11 accomplished limiting function limits value slot point values zero length vector line segment unit length color routines receive valid values additional benefit limits point move past ends line providing user visual feedback valid point positions ability limit values enhance representation color picker making rgb cube limiting point lie within cube making hsv cone point limited lie within cone greatly extends flexibility interactive widget design 40 conclusions toolkit provides framework construction wide variety interactive 3d models used modeling animation scientific visualization visual language provides environment nonprogrammers programmers conceive rapidly prototype 3d models encapsulation limiting mechanisms allow interface designers build complex models possible past although b figure 11 limiting point point primitive without limits b point primitive limits imposed dynamic object model limitation types relationships specified numerical inaccuracy efficiency problems numerical solvers 50 future work currently user requests encapsulation entire network encapsulated user may wish encapsulate subcomponent complex network interface specifying encapsulation sub component network needs developed point method visualizing constrained primitive interacted example point constrained lie line visual feedback indicate point translate direction line point cannot rotate possibilities visualization arrows indicating direction primitive may move altering geometric shape primitive constrained eg changing points sphere flat disk point constrained lie plane date slots primitive linked single primitive would useful able constrain slot one primitive slot another primitive slot primitive one primitive would allow wider variety constructions built current primitive set toolkit constraints solved procedurally although advantages scalability elimination problems related numerical error predictability numerical solvers suffer main disadvantage leads combinatorial explosion number constraint methods add primitives types toolkit numerical solvers become robust consider using one constraint solver toolkit primitives constrain physical attributes objects primitives represent abstract nonphysical quantities could useful example temporal primitives might useful specifying primitives change time allowing us build animations visually slots primitives presented user via motif window slots visual quantities primitive perhaps depicted little socket user could wire slots together directly instead going auxiliary window 60 acknowledgments work supported part nsfarpa science technology center computer graphics scientific visualization onr contract n0001491j4052 arpa order 8225 also gratefully acknowledge sponsorship ibm ncr sun microsystems hewlett packard digital equipment corporation nasa thank cindy grimm nate huang kenneth herndon andries van dam members brown university graphics group help support also acknowledge university utah surfaces provided mechanical modelling examples use alpha 1 modeler 70 r global local deformations solid primitives information visualizer computer graphics principles practice visual programming language interactive graphics interactive shadows garnet comprehensive support graphical osfmotif reference guide graphics interaction techniques constraint based geometric modeling using deformations explore 3d widget design objectoriented 3d graphics toolkit objectoriented framework integration interactive animation techniques aldus inc power simplicity sharing graphical objects using delegation graphics toolkit based differential constraints toolkit construction three dimensional interfaces tr self power simplicity computer graphics principles practice 2nd ed snapdragging three dimensions garnet information visualizer information workspace objectoriented framework integration interactive animation techniques condor constraintbased dataflow throughthelens camera control objectoriented 3d graphics toolkit using deformations explore 3d widget design interactive shadows threedimensional widgets interactive 3d toolkit constructing 3d widgets graphics toolkit based differential constraints global local deformations solid primitives ctr jurriaan mulder jarke j van wijk 3d computational steering parametrized geometric objects proceedings 6th conference visualization 95 p304 october 29november 03 1995 mark green joe lo grappl 3d interaction technique library proceedings acm symposium virtual reality software technology november 1012 2004 hong kong cindy grimm david pugmire visual interfaces solids modeling proceedings 8th annual acm symposium user interface software technology p5160 november 1517 1995 pittsburgh pennsylvania united states c chuah f roth j mattis j kolojejchick sdm malleable information graphics proceedings 1995 ieee symposium information visualization p36 october 3031 1995 atlanta georgia wai leng lee mark green automatic layout 3d user interfaces construction proceedings 2006 acm international conference virtual reality continuum applications june 14april 17 2006 hong kong china mei c chuah steven f roth joe mattis john kolojejchick sdm selective dynamic manipulation visualizations proceedings 8th annual acm symposium user interface software technology p6170 november 1517 1995 pittsburgh pennsylvania united states leonidas deligiannidis robert j jacob improving performance virtual reality applications parallel processing journal supercomputing v33 n3 p155173 september 2005 robert j k jacob leonidas deligiannidis stephen morrison software model specification language nonwimp user interfaces acm transactions computerhuman interaction tochi v6 n1 p146 march 1999