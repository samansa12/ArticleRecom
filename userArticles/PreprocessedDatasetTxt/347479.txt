speed powerful clairvoyance introduce resource augmentation method analyzing online scheduling problems resource augmentation analysis online scheduler given resources say faster processors processors adversary apply analysis two wellknown online scheduling problems classic uniprocessor cpu scheduling problem 1 ri pmtnsgr fi besteffort firm realtime scheduling problem 1ri pmtn sgr wi 1 ui known constant competitive nonclairvoyant online algorithms problems show simple online scheduling algorithms problems constant competitive online scheduler equipped slightly faster processor adversary thus moderate increase processor speed effectively gives online scheduler power clairvoyance furthermore online scheduler constant competitive inputs closely correlated processor speed also show performance online scheduler besteffort real time scheduling significantly improved system designed way laxity every job proportional length b introduction consider several well known nonclairvoyant scheduling problems including problem minimizing average response time 13 15 besteffort firm realtime scheduling 1 2 3 4 8 11 12 18 postpone formally defining problems next section nonclairvoyant scheduling relevant information eg jobs arrive future available scheduling algorithm standard way measure adverse effect lack knowledge competitive ratio opti ai denotes cost schedule produced online algorithm input opti denotes cost optimal schedule competi supported part nsf grant ccr9202158 kalyancspittedu httpwwwcspittedukalyan supported part nsf grant ccr9209283 tive ratio problem min opti min online algorithms standard way interpret competitive ratio payoff game played online algorithm allpowerful malevolent adversary specifies input one primary goals analysis identify works well practice competitive analysis criticized often yields ratios unrealistically high normal inputs result fail identify class online algorithms work well scheduling problems consider good examples phenomenon competitive ratios unbounded simple nonclairvoyant algorithms perform reasonably well practice explain phenomenon adopting call weak adversary model assumes speed processor used nonclairvoyant scheduler 1 speed processor used clairvoyant ad versary ffl 0 define fflweak competitive ratio problem min subscripts denote speed processor used corresponding algorithm original motivation standard competitive ratio use divergence online al gorithms output optimal measure adverse effect nonclairvoyance fflweak competitive ratio give us another measure also suggests practical way combat adverse effect nonclairvoyance problem small ffl competitive ratio moderate ffl means moderate increase processor speed effectively buy power clairvoyance therefore weak adversary model gives system designer practical way increasing speed processor improve performance system normal inputs one would intuitively expect offline performance system would degrade drastically speed processor increased slightly algorithm bounded ffl competitive ratio bounded competitive ratio inputs opt 1 iopt1ffl bounded thus algorithm bounded fflweak competitive ratio bounded competitive ratio inputs fall formulation normal give algorithms scheduling problems fflweak competitive ratios solely function ffl input furthermore ffl increases fflweak competitive ratios quickly approach one previous current results generic scheduling problem consists collection jng independent jobs run single processor results extend multiprocessor setting restrict attention single processor simplicity job j release time r length x j run time r time required complete j x divided speed processor assume onlinenonclairvoyant scheduler aware j consider preemptive scheduling job always restarted point last execution assume context switches require time problem minimizing average response time jobs well known widely studied problem operating system scheduling see example 7 14 assume nonclairvoyant scheduler learn x time r gen erally deduce x run j com pletion completion time c job j time j allocated enough time finish execution similarly response time w idle time speed processor w problem minimizing average response deterministic competitive ratio omegagamma n 13 randomized competitive ratio n 15 easily shown algorithm doesnt unnecessarily idle processors competitive ratio surprisingly best known upper bound competitive ra tio even allowing randomization competitive ratio commonly used round robin algorithm section 3 first consider queue size function time define qa set jobs released time finished algorithm time assuming using speed processor show every non clairvoyant scheduling algorithm input time jqa 1jjq opt set cardinality give online algorithm balance b short guarantees times jqb 1 ffl jqopt 1j implies balance fflweak competitive ratio 1 ffl problem minimizing average response time contrast show fflweak competitive ratio round robin omegagamma n 1gammaffl 1 assume nonclairvoy ant scheduler equipped unit speed processor ffl speed processor instead 1ffl speed pro cessor assuming ffl 1 case give nonclairvoyant scheduling algorithm balance2 average response time 1 1 ffl times average response time adversary means nonclairvoyant scheduler supercomputer old 386 pc constant competitive clairvoyant scheduler supercomputer fi nally demonstrate balance fair every job sees proving maximum idle time balance quite comparable offline besteffort firm realtime scheduling job j deadline benefit b addition release time execution time also useful define value density job j laxity j speed processor maximum amount j delayed completed since realtime systems embedded systems scheduler generally aware advance jobs may ceive thus standard assumption time r scheduler learns x b j finished time algorithm receives benefit b otherwise benefit gained job goal scheduler maximize total benefit jobs completes since maximization problem competitive ratio definitions introduction modified inverting ratios example competitive ratio problem min opti deterministic competitive ratio problem thetaphi 3 4 11 18 randomized competitive ratio thetaminlog phi log delta 8 12 importance ratio phi ratio maximum value density job minimum value density job delta ratio length longest job length shortest job competitive ratio unbounded even special case section 4 first assume nonclair voyant scheduler adversary unit speed processors laxity job j least fflx upper bound standard competitive ratio laxity assumption also upper bound fflweak competitive ratio since job j doesnt laxity least fflx 1 speed processor cant finished unit speed pro cessor formulation also added advantage showing effect laxity laxity sumptions give algorithm slacker competitive ratio function ffl approaches three ffl increases results show realtime system designed every job laxity reasonable fraction execution time job resulting competitive ratio reasonably small effect laxity competitive ratio special case 1 6 show fflweak competitive ratio slacker approaches one ffl increases weak adversary model comparing online algorithm less powerful knowledgeable adversary considered queryresponse problems kserver problem special cases eg 17 19 online weighted matching 9 case adversary handicapped fewer servers one argue weak competitive ratio essentially called comparative ratio 10 however results 10 really different flavor primarily concerned effect partial clairvoy ance methods suggested address limitations competitive analysis methods include restricting input distribution satisfy special properties eg 10 16 comparing cost solution produced online algorithm input worstcase optimal cost input size 5 3 average response time following well known lemma explains first consider queue size lemma 31 scheduling algorithm speed processor total response time lemma 32 every nonclairvoyant scheduling algorithm input time proof jobs arrive time 0 one job arrives time 1 adversary sets jobs lengths online hasnt finished jobs time one show adversary always runs shorter job always two active jobs key point note time sum remaining unfinished lengths two jobs adversary queue satisfies give online algorithm balance guarantees queue size much optimal weak adversary scenario algorithm balance job j time define amount time balance executed j time times balance splits processing time equally among jobs j minimum analysis balance based following lemma lemma 33 let b algorithm balance point time jqb 1 ffl jqopt 1j proof lemma follows ensuing chain reasoning let ub set jobs unfinished balance ua set jobs unfinished adversary time mentioned lemma 33 intuitively adversary use time balance spent jobs ua finish jobs ub gammau need show weak adversary assumption means order borrow enough time finish jobs ub gamma ua must case ua reasonably large say job j immediately borrow another job j j denoted balance ran j j time 0 satisfying time 0 adversary could executing balance executing j j borrow relation denoted j transitive closure immediately borrow relation define g intuitively adversary transfers time j j 2 ua j lemma 34 let j job balance saw complete time job j proof suppose job j many jobs j j select one reached j shortest path p directed unweighted graph induced relation immediately borrow let j k job p immediately j j j k j j definition p x last time j j run time notice must case c k x j k would j j predecessor p hence definition balance j k j j k hence deduce reach contradiction since pg since adversary completes jobs ub gammau total time spent balance jobs ua must least partition time balance spent jobs cumulative time ith class least ffl note could collection time intervals call partition good job x 2 ua portion time spent balance x included kxk kj k lemma 35 always exists good partition proof earliest release time job bx let ub gamma indexing j definition relation immediately borrow must case job executed balance time interval tj must member bj also observe range 1 must run finish jobs bj interval tj therefore 1 p must case cumulative amount time spent balance jobs bj must least observe consequently induction time spent jobs ua balance distributed jobs ub gamma ua job j gets ffl units time jobs bj u result follows since lemma 34 kxk kj k proof lemma 35 intuitively suggests adversary going finish job needs raise ffl k j k units times jobs j 34 know suggests analyze following problem get lower bound number jobs ub politician problem n politicians trying raise money contributors ith politician must raise ffls dollars j contributor c j dollars contribute election rule says jth contributor contribute ith politician c j politician raise money many contributors contributor give money several politicians lemma 36 solution politicians problem ffln proof contribution j contributor politician since fraction ffls ith politician got j contributor since every politician successful case election rule fraction c j j contributor gave ith politician proof applying lemma 35 know job j must find ffl units times jobs j lemma 34 applying lemma 36 case get jua j following theorem follows lemma 31 theorem 31 fflweak competitive ratio balance respect average response time ffl show commonly used algorithm round robin 7 14 constant fflweak competitive ratio small ffl round robin splits processing time evenly among unfinished jobs lemma 37 problem minimizing average response time fflweak competitive ratio round robin proof divide time stages let ith stage start time let ffl two jobs length 1 ffl released time 0 one job released time length si exactly length round robin left previous jobs guarantee adversary finish job released time time get recurrence expanding get total response time adversary theta theta1 total response time round robin theta following theorem shows balance overly delay job improve performance average response time theorem 32 fflweak competitive ratio balance respect maximum idle time 1 ffl proof time balance completed job j idle time maxi mum shortening unfinished jobs let us assume balance completed jobs time let idle time experienced using balance lemma 34 amount time spent balance job r due difference speed must case adversary finished job j j time 1 fflt balance run j j hand balance ran j j r therefore gamma notice j j must arrived tgamma therefore idle time incurred adversary j j must least assume nonclairvoyant scheduler equipped unit speed processor ffl speed processor almost competitive equipped 1 speed processor assuming ffl 1 assume simplicity 1ffl integer algorithm balance2 run job j run least unit speed processor run job j run least ffl speed processor analysis balance2 follows line analysis balance modify definition immediately borrow following way job j immediately borrow time another job j j running j j either balance2 running running j processor slower processor j j run define ua ub borrow bj define initial length j executed time balance2 lemma 38 let j job balance saw complete time job j modified politicians problem n politicians original contributors let 1 must refund least ffls i1 dollars contributors jth contributor requires c j dollars refunds election rule says ith politician refund money jth contributor c j lemma 39 solution modified politicians problem ffln gamma 1 proof assume without loss generality assume 1 refunds c j1 refunds c j2 situation swap transitivity refund c j2 2 refund c j1 easy see assume without loss generality solution modified politician problem without swaps let us multiply refund politician factor 1ffl simultaneously also increase pool potential contributors factor 1ffl replacing original contributor 1ffl identical contributors repeating previous assignment 1ffl times politicians still successful refunding money prove induction 1 least contributors among mffl contributors get refunds politicians 1 contributors get refunds politicians assume gets refunds first politician swapping assumption otherwise c 1 cannot accept refunds politicians assuming hypothesis holds show hypothesis also holds induction hypothesis contributors 1 get refund ith politician let c ffi highest contributor got refund ith politician c ffi i1 c ffi cannot get refund politicians hand c ffi i1 contributor gets refund politician swapping assumption lemma 310 let b algorithm balance2 point time jqb 1 ffl jqopt 1j proof going reduce modified politicians problem members ua contributors members ub gamma ua politicians let ub gamma j jobs ordered increasing order release times since least two jobs unfinished time interval r must case balance2 running processors throughout period assume balance2 running two jobs j j b time 0 time r ffi claim j g neither j j b j ffigamma1 bj ffigamma1 definition otherwise say j executed round robin fashion claim follows notice assume length job j ffi exactly best case adver sary balance2 adversary executed length job ub gamma ua hence extra fflt gamma r ff2 work refunds done balance2 must go jobs ua consider might distributed must case extra work must period r must distributed jobs think j ffigamma1 giving refund jobs bj ffigamma1 election rule satisfied lemma 38 apply modified politicians lemma rest argument theorem 33 average response time bal ance2 unit speed processor ffl 1 speed processor 1 ffl times average response time adversary given unit speed processor proof theorem follows applying lemma 310 noting adversary must running jobs duration ffl even balance completed jobs time 4 realtime scheduling describing algorithm slacker need introduce definitions notation recall first assume nonclairvoyant scheduler clairvoyant adversary unit speed processors laxity job j least fflx notational convenience let job j viable time scheduling algorithm finish j run j least x units time define slack job j time job fresh time otherwise say job stale time let c constant define later define density class job j blog c v c assuming normalize smallest value density one density classes range 0 blog c phic x set jobs let kxk denote total benefit jobs x let opt set jobs finished adversary algorithm slacker time r slacker switches j j higher density class job j j slacker currently running happens j j saved representative job density class blog c v j c slacker finishes job j time let ff largest integer currently fresh job density class ff viable representative job class ff viable representative job j density class ff slacker resumes execution j otherwise slacker starts executing arbitrary fresh job density class ff let set jobs completed slacker r set jobs run slacker may proper subset r since slacker may finish every job started lemma 41 let j arbitrary representative job density class ff slacker com plete period least units time r slacker running job density class ff lemma 42 assuming density job integral power c proof imagine job j 2 r account associated account job initially starts b points accounts start zero points redistribute points accounts jobs accounts jobs r gamma argument reverse induction density classes first note slacker finishes every job density class blog c phic begins assume considering jobs density class ff let j job representative job density class ff time 1 2 slacker ran job j j density class fi ff units time transferred j j account j account lemma 41 j borrowed total time least ffi x hence borrowed least c ff x points thus account contains least b points need examine much account job j density class ff depleted jobs lower density classes representative jobs density class ff take c fi x ffi points account j hence number points remaining account j least lemma 43 assuming density job integral power c koptk 13ffi proof assume adversary ran job density c ff units time credit adversary points regardless whether finished job define job dense density c ff greater show total amount time adversary spent running dense jobs times time slacker running dense jobs divide time following way let oe 0 first point time slacker starts running dense job let 0 first point time oe slacker running dense job let oe 1 first point time igamma1 slacker begins running dense job note dense job arrive oe i1 consider longest dense job j j arrived oe slacker run j stale time hence means time adversary running dense jobs slacker didnt run 12ffi times time slacker running dense jobs must add one ratio jobs adversary slacker ran lemma follows reverse induction ff theorem 41 assumption every job j laxity least fflx competitive ratio slacker proof applying lemma 42 lemma 43 removing condition density job integral power c one verify letting get bounded competitive ratio ffi 0 competitive ratio goes three ffi increases go back assuming slacker 1 speed processor show fflweak competitive ratio approaches one modifying lemma 43 follows proof similar proof lemma 43 lemma 44 assuming density job integral power c slacker 1 speed processor 5 conclusion believe weak adversary model useful identifying online algorithms work well practice types problems important weakening adversary done way corresponding strengthening online algorithm achieved practice worth mentioning problems considered paper increasing speed online processor way weaken adver sary example case realtime scheduling suffices design realtime system way laxity condition satisfied finally would like mention weak adversary model used recently show natural greedy algorithm works reasonably well practice almost optimal online weighted matching 9 traditional competitive analysis shows bound theta2 whereas weak adversary analysis yields bound thetalog size graph acknowledgements second author would like thank daniel mosse rege colwell richard su choza dimitri zorine many helpful discussions realtime scheduling r improved performance guarantees use slack times online scheduling maximize task completions competitiveness online realtime task scheduling online scheduling presence overload new measure study online algorithms online realtime scheduling laxities operating system concepts fault tolerant realtime scheduling online transportation problem beyond competitive analysis optimal online scheduling algorithm overloaded realtime systems moca multiprocessor online competitive algorithm realtime system scheduling operating systems concepts designs non clairvoyant scheduling statistical adversary online algorithms amortized efficiency list update paging rules online scheduling jobs fixed start end time kserver dual loose competitiveness paging tr amortized efficiency list update paging rules operating system concepts 3rd ed online scheduling presence overload operating systems concepts design competitiveness online realtime task scheduling moca online scheduling jobs fixed start end times nonclairvoyant scheduling approximation algorithms scheduling optimal timecritical scheduling via resource augmentation extended abstract art computer programming volume 1 3rd ed scheduling overload realtime systems online computation competitive analysis scheduling dark page replacement general caching problems tradeoffs speed processor harddeadline scheduling scheduling algorithms speed powerful claivoyance competitive analysis round robin algorithm online scheduling online transportation problem faulttolerant realtime scheduling maximizing job completions online minimizing flow time nonclairvoyantly jitter control qos networks ctr mohamed eid hussein uwe schwiegelshohn utilization nonclairvoyant online schedules theoretical computer science v362 n1 p238247 11 october 2006 jaehoon kim kyungyong chwa online deadline scheduling faster machines information processing letters v85 n1 p3137 january leah epstein rob van stee optimal online flow time resource augmentation discrete applied mathematics v154 n4 p611621 15 march 2006 marek chrobak leah epstein john noga ji sgall rob van stee tom tich nodari vakhania preemptive scheduling overloaded systems journal computer system sciences v67 n1 p183197 august thomas erlebach alexander hall nphardness broadcast scheduling inapproximability singlesource unsplittable mincost flow proceedings thirteenth annual acmsiam symposium discrete algorithms p194202 january 0608 2002 san francisco california thomas erlebach alexander hall nphardness broadcast scheduling inapproximability singlesource unsplittable mincost flow journal scheduling v7 n3 p223241 mayjune 2004 holeung chan takwah lam karkeung nonmigratory online deadline scheduling multiprocessors proceedings fifteenth annual acmsiam symposium discrete algorithms january 1114 2004 new orleans louisiana luca becchetti stefano leonardi alberto marchettispaccamela kirk pruhs semiclairvoyant scheduling theoretical computer science v324 n23 p325335 20 september 2004 francis l chin stanley p fung improved competitive algorithms online scheduling partial job values theoretical computer science v325 n3 p467478 6 october 2004 jaehoon kim kyungyong chwa nonclairvoyant scheduling weighted flow time information processing letters v87 n1 p3137 july guido schfer naveen sivadasan topology matters smoothed competitiveness metrical task systems theoretical computer science v341 n1 p216246 5 september 2005 jason mccullough eric torng srpt optimally utilizes faster machines minimize flow time proceedings fifteenth annual acmsiam symposium discrete algorithms january 1114 2004 new orleans louisiana bala kalyanasundaram kirk r pruhs maximizing job completions online journal algorithms v49 n1 p6385 1 october jeff edmonds kirk pruhs broadcast scheduling fairness fine proceedings thirteenth annual acmsiam symposium discrete algorithms p421430 january 0608 2002 san francisco california n bansal k dhamdhere minimizing weighted flow time proceedings fourteenth annual acmsiam symposium discrete algorithms january 1214 2003 baltimore maryland bala kalyanasundaram kirk r pruhs minimizing flow time nonclairvoyantly journal acm jacm v50 n4 p551567 july chiuyuen koo takwah lam tsuenwan ngan kunihiko sadakane karkeung online scheduling tight deadlines theoretical computer science v295 n13 p251261 24 february anupam gupta bruce maggs florian oprea michael k reiter quorum placement networks minimize access delays proceedings twentyfourth annual acm symposium principles distributed computing july 1720 2005 las vegas nv usa chiuyuen koo takwah lam tsuenwan ngan karkeung competitive deadline scheduling via additional faster processors journal scheduling v6 n2 p213223 marchapril takwah lam tsuenwan johnny ngan karkeung performance guarantee edf overload journal algorithms v52 n2 p193206 august 2004 chiuyuen koo takwah lam tsuenwan ngan karkeung extra processors versus future information optimal deadline scheduling proceedings fourteenth annual acm symposium parallel algorithms architectures august 1013 2002 winnipeg manitoba canada jeff edmonds kirk pruhs maiden analysis longest wait first proceedings fifteenth annual acmsiam symposium discrete algorithms january 1114 2004 new orleans louisiana michael h goldwasser patience virtue effect slack competitiveness admission control journal scheduling v6 n2 p183211 marchapril c greg plaxton yu sun mitul tiwari harrick vin reconfigurable resource scheduling proceedings eighteenth annual acm symposium parallelism algorithms architectures july 30august 02 2006 cambridge massachusetts usa ryan porter mechanism design online realtime scheduling proceedings 5th acm conference electronic commerce may 1720 2004 new york ny usa jeff edmonds suprakash datta patrick dymond tcp competitive limited adversary proceedings fifteenth annual acm symposium parallel algorithms architectures june 0709 2003 san diego california usa jeff edmonds kirk pruhs maiden analysis longest wait first acm transactions algorithms talg v1 n1 p1432 july 2005 kirk pruhs competitive online scheduling server systems acm sigmetrics performance evaluation review v34 n4 march 2007 wuntat chan takwah lam kinshing liu prudence w h wong new resource augmentation analysis total stretch srpt sjf multiprocessor scheduling theoretical computer science v359 n1 p430439 14 august 2006 chandra chekuri ashish goel sanjeev khanna amit kumar multiprocessor scheduling minimize flow time resource augmentation proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa holeung chan takwah lam kinshing liu extra unitspeed machines almost powerful speedy machines competitive flow time scheduling proceedings seventeenth annual acmsiam symposium discrete algorithm p334343 january 2226 2006 miami florida joan boyar lene favrholdt kim larsen relative worst order ratio applied paging proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia nikhil bansal kirk pruhs server scheduling lp norm rising tide lifts boat proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa joan boyar lene favrholdt kim larsen relative worstorder ratio applied paging journal computer system sciences v73 n5 p818843 august 2007 sandy irani kirk r pruhs algorithmic problems power management acm sigact news v36 n2 june 2005 roughgarden va tardos bad selfish routing journal acm jacm v49 n2 p236259 march 2002