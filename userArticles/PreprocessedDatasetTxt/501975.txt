complexity exponential output size problem topdown bottomup tree transducers exponential output size problem determine whether size output trees tree transducer grows exponentially size input trees paper complexity problem studied shown nlcomplete total topdown tree transducers dexptimecomplete general topdown tree transducers pcomplete bottomup tree tranducers copyright 2001 academic press b introduction topdown bottomup tree transducers introduced late sixties rounds thatcher 13 16 17 18 generalisation finitestate transducers strings main motivation provide simple formal model syntaxdirected transformational grammars mathematical linguistics syntaxdirected translation compiler construction latter see recent book fulop vogler 8 since time turned tree transducers useful tool many areas properties extensions studied variety authors references see eg 9 8 part paper topdown tree transducers studied mentioned seen generalisation finitestate string transducers also called generalised sequential machines trees 1 like topdown tree transducers oneway devices process input one direction using finite number states however string transducers usually process input left right topdown tree transducers transform input trees output trees root towards leaves course reason calling topdown tree transducers roughly speaking partially supported ec tmr network getgrats general theory graph transformation systems esprit working group appligraph university bremen short version paper presented fct99 3 1 context tree labelled ordered tree whose labels taken ranked alphabet signature ie term string case obtained considering monadic input output trees viewed vertical strings although generalisation quite direct one fact trees instead strings considered makes rather crucial difference certain respects concerns example closure properties hold string case carry topdown tree transducers instance infinite hierarchy obtained considering compositions topdown tree transducers see 5 another important difference intuitively computations topdown tree transducers usually ramifying topmost node input tree processed computation proceeds subtrees parallel fact subtrees also deleted copied one distinct consequences fact contrast string case size output trees topdown tree transducer necessarily linearly bounded size input trees example consider two rules fla considered term rewrite rules usual way fl special symbol rank 1 called state f g symbols rank 2 1 0 respectively without going details clear rules transform monadic tree height n complete binary tree height thus output size exponential size input trees follows directly definition topdown tree transducers exponential size output trees maximum growth achieve however well possible build topdown tree transducer whose maximum output size given polynomial degree k given n simple example consider rules using states fl fl 0 taking fl initial state input tree size n 1 turned output tree f tree words size output trees quadratic size input trees paper complexity corresponding decision problem studied given topdown tree transducer td output size os td n exponential size n input trees turns problem efficiently solvable namely nlcomplete 2 total topdown tree transducers hard namely dexptimecomplete general using known results nl respectively dexptimehardness two variants relatively easy es tablish effort necessary order prove resources indeed sufficient apart interesting right results useful tree transducers considered model syntaxdirected translation 8 practical reasons exponential behaviour translation often acceptable example translation expressions highlevel programming language primitive instructions little practical use 2 throughout paper completeness means logspace completeness output code exponential size closely related use tree transducers order generate trees interpreted expressions domain see eg 4 2 order estimate evaluation costs generated expressions costs computing tree transduction necessary estimate size output trees ie solve exponential output size problem fact topdown tree transducers used two areas often total natural reasons therefore result exponential output size problem nl class tree transducers may particular interest notion generalised syntaxdirected translations closely related total deterministic topdown tree transducers aho ullman investigated output size already 1 showed output size generalised syntaxdirected translation either polynomial exponential 1 theorem 52 result proved topdown tree transducers general section 4 paper corollary 47 aho ullman also proved exponential output size problem generalised syntaxdirected translations decidable 1 theorem 43 however complexity issues addressed paper proposed algorithm highly inefficient results paper yield nlalgorithm formulated generalised syntaxdirected translations due close relationship total deterministic topdown tree transducers bottomup tree transducers somewhat less interesting computations structurally simpler polynomialtime reduction one exploit results total topdown tree transducers order show exponential output size problem bottomup tree transducers p fact using known results turns problem pcomplete interestingly case assumption totality make differencethe problem remains pcomplete even total deterministic bottomup tree transducers paper structured follows next section basic notions recalled sections 35 concerned topdown tree transducers section 3 definition recalled auxiliary notions introduced shown exponential output size problem reduced case total deterministic topdown tree transducers monadic input signatures section 4 combinatorial result trees shown used obtain characterisation exponential output size latter turned decision algorithms section 5 main result paper presented section 6 deals complexity exponential output size problem bottomup tree transducers finally section 7 short conclusion given preliminaries set natural numbers including 0 denoted n n denotes n nf0g n 2 n n denotes set ng set finite sequences set denoted empty sequence denoted length sequence jsj concatenation sequences juxtaposition like length sequence cardinality set denoted jaj canonical extensions function f b powerset denoted f hence 2 reflexive transitive closure binary relation r theta b denoted r domain r ie set fa 2 j b 2 r b 2 bg denoted domr assumed reader familiar basic notions complexity theory least basic experience concerning estimation resources needed algorithm especially respect polynomial exponential time logarithmic space function f n n said polynomially bounded polynomial p fn pn n constants c 2 r c 1 n 0 2 n fn c n said exponential thus latter lower bound whereas former upper one finite ordered unlabelled tree finite prefixclosed subset n elements called nodes rank node v number distinct rank maximum rank nodes leaf node rank 0 node u descendant node v v proper prefix u conversely u ancestor v proper prefix v subtree rooted v tree fv 0 j vv 0 2 tg direct subtree subtree rooted v size jt j height ie number nodes longest path root leaf width denoted wdt number leaves labelled tree mapping unlabelled tree l set labels underlying unlabelled tree also denoted n case notions notations introduced unlabelled trees carry labelled trees obvious way following attributes labelled unlabelled mostly dropped speaking trees general rule unlabelled trees denoted capital letters usually whereas labelled trees denoted lowercase letters usually trees denotes tree usually denoted f actually means identify singlenode tree label node symbol pair f n consisting label f number n 2 n called rank symbol symbol also denoted f n simply f n minor importance signature finite set sigma symbols sigma monadic signature sigma 0 whose symbols rank 1 arbitrary set mons denotes monadic signature ff 1 g tree called monadic form f 1 note monadic tree identified string f 1 signature sigma set trees sigmas denotes set trees set trees sigma subtrees smallest set trees notation sigma used abbreviation sigma rest paper let us fix indexed set pairwise distinct symbols rank 0 called variables every n 2 n g order avoid confusion set x assumed disjoint signatures consideration variable x 1 also denoted x trees denotes substitution x 2 n precisely rewriting works usual except leftlinear rules considered thus context paper rewrite rule pair ae l r trees called left righthand side respectively l contains every variable every variable r occurs l rewrite rule usually denoted l r derivation relation determined ae binary relation ae trees exactly r set rewrite rules r denotes union ae ae 2 r 3 topdown tree transducers topdown tree transducers transform input trees output trees topdown manner using restricted type term rewrite rules special symbols rank 1 used states every step consume input symbol beneath replace tree consisting output symbols states processing copies direct subtrees consumed symbol 31 definition topdown tree transducer topdown tree transducer tuple ffl sigma sigma 0 signatures called input signature output signature respectively signature states rank 1 disjoint sigma sigma 0 finite set rewrite rules initial state sigma monadic signature td topdown stringtotree transducer topdown tree transduction computed td denoted td well set pairs td td denotes rewrite relation r pi following every topdown tree transducer every state fl 2 gamma topdown tree transducer sigma sigma 0 gamma r fl denoted td fl convention assumed variables lefthand side rule read left right always x n thus every rule topdown tree transducer form fl denoting rule way always meant imply chosen way contain every variable x l exactly carries denotation derivation steps flf every assumed correspond one particular occurrence subtree notice may distinct course rule topdown tree transducer called flf rule form thus flf rule rule processes input symbol f state fl topdown tree transducer contains least one flf rule every contains one rule every total domtd sigma deterministic computes partial function latter case one may therefore use functional notation writing 32 definition output size output size topdown tree transducer td given function os td n n n 2 n ng usual exponential output size problem problem determine arbitrary topdown tree transducer td whether os td exponential pi note technically convenient fact os td monotonic function clearly one always find c os td n c n n 2 n follows fact rank output trees bounded 2 td implies maximum height righthand sides rules td remainder section consists three lemmas proofs purpose lemmas show topdown tree transducer simplified certain way without affecting output size much particular modifications preserve polynomial boundedness well exponentiality first lemma shows suffices consider topdown tree transducers whose righthand sides contain exactly one output symbol let theta denote set topdown tree transducers sigma h gamma r fl 0 every righthand side rule r element h gammax 2 n thus standard output symbols h n used n may vary label always h overloading h essential helps reduce notational complexity proofs clearly standardisation harmless since size output trees independent node labels 33 lemma every topdown tree transducer td one construct topdown tree transducer td 0 2 theta constant 2 n n 2 n construction preserves determinism well totality carried logarithmic space proof let lows every rule flf x r let r 0 contain rule flf x let h consist symbols h l appear sodefined righthand sides clearly construction carried logarithmic space preserves determinism totality remains estimate difference os td os td 0 let maximum number nodes righthand sides rules r labelled symbols sigma 0 obvious onetoone correspondence derivations td td 0 fact every application rule r 0 adds exactly one output symbol corresponding rule r adds consequently n n 2 n conversely every 0 2 td wdt 0 wdt notice necessarily hold respect size rules r may righthand sides gammax using inequality fact htt 0 words os td 0 n n delta os td n n 2 n next two lemmas quite useful order check exponential output size allow restrict ones attention case deterministic total stringtotree transducers considerably easier deal general topdown tree transducers particular constructions used following see eg proof lemma 35 rely assumption every state given topdown tree transducer determines partial function trees trees therefore shall first show logarithmic space sufficient order transform topdown tree transducer deterministic one thereby affecting output size modestly simplify proof topdown tree transducers theta considered lemma 33 fact logarithmic space reductions closed composition restriction make difference let us first informally discuss idea underlying construction get rid nondeterminism preserving output size modified input signature used intuitively nodes input tree augmented additional information determines rules applied proceeding f f f e e figure 1 sample derivation nondeterministic topdown tree transducer way potential output trees may get lost since new transducer forced use rules whenever processes two copies subtree state fortunately matter respect output size affect maximal size output trees example let consists rules ae duplicates ith subtree tree applied deletes one sample derivation applying rules parallel shown figure 1 note second step different rules chosen process copies tree f f e e e left one processed ae 2 right one ae 1 obtain output tree maximal size ae 1 would chosen copies order convert td deterministic topdown tree transducer td 0 one may use two versions f say f 1 f 2 accounts fact choose two possible flf rules rules thus turned one flerule kept note cannot provide input tree figure 1 appropriate indices order make td 0 simulate shown derivation contradictory choice rules second step ever possible find indices lead output tree maximal size namely dashes indicate irrelevant indices generalising construction every symbol original input signature sigma would provided many indices states td choice rules copies processed different states must course independent unfortunately would result exponential number states could handled logarithmic space therefore instead indices shall use additional input symbols hfl ii rank 1 fl state td index rule intuitively occurrence hfl ii input tree may read fl current state use ith flf rule td order process next input symbol f 2 sigma encountered order remember states form fl used 34 lemma every topdown tree transducer td 2 theta one construct deterministic topdown tree transducer td 0 2 theta constant 2 n n 2 n construction preserves totality carried logarithmic space proof let define largest natural number distinct flf rules r contains rule fl hfl fflg rule order define r 1 consider r contains least one flf rule let arbitrary order set flf rules r r 1 contains rules rules righthand side one needed order preserve totality choice superscript 1 states righthand sides arbitrary could replaced clear td 0 constructed logarithmic space since requires mainly manipulation fixed number counters ranging furthermore td 0 deterministic construction preserves totality moreover every 2 td 0 removing symbols form hfl ii yields tree 0 proves os td 0 n os td n n 2 n order see inequality holds well one cope difficulty discussed namely possible derivations td counterpart td 0 since latter always apply rules copies subtree processed state proof proceeds explicitly turning arbitrary input tree td one td 0 yields output tree maximal size every tree 2 sigma every choose arbitrary fixed derivation td 0 0 2 th js 0 j maximal let first rule applied derivation jth flf rule r respect order used define r 1 root symbol derivation chosen arbitrarily recall informal discussion preceding lemma fl index rule must applied fls order obtain output tree maximum size suppose define every tree clearly therefore defining established required inequality os td na os td 0 n following claim proved claim let fls td derivation prove claim proceed induction structure suppose due definition fl assume without loss generality rule applied first step derivation fls td flth flf rule td thus given derivation form applying induction hypothesis subderivations trees 0 l 2 th es k l es l td l j 2 l proves claim taking l thus finishes proof lemma intuitively derivation topdown tree transducer produces large output tree must path input tree whose nodes copied exponential number times thus turn topdown tree transducer td string totree transducer st interprets input path input tree td simulates corresponding part derivation output size st differ output size td much following lemma proves indeed case lemma every deterministic topdown tree transducer td 2 theta one construct total deterministic stringtotree transducer st 2 theta constant 2 n st n max1 os td delta n n 2 n construction carried logarithmic space td total exponential time otherwise proof let indicated main idea construct st way input tree st corresponds path input tree td computation st path produces output tree consists nodes td produces processing symbols path technical reasons leaf f 0 end path taken account treated ffl order cope possible nontotality td states enriched second component set states used order keep track states copies remaining input processed make precise auxiliary definitions turn useful every f k 2 sigma denote lstatesf set states flf rule r exists furthermore rstates denote set states righthand side flf rule fl 2 delta intuitively delta set states processing copies tree f simultaneous derivation step rstates delta f set states processing copies finally every set states delta gamma let dom st constructed follows consider hfl deltai suppose domrstates case flf x flf rule r r 0 contains rule note h original flf rule rank l whereas new one rank p otherwise ie case 1 2 hold r 0 contains rule hfl deltaif furthermore rule hfl deltaiffl h r 0 every state hfl deltai construction st total deterministic order show stated inequalities hold two claims proved first claim concerns inequality os st n max1 os td delta n claim 1 constant 2 n following holds every state hfl deltai every derivation hfl deltais st tree depending delta js 0 j delta jsj fls 0 prove maximum rank symbols sigma 0 smallest positive natural number every nonempty 3 recall symbols f 0 2 sigma treated ffl st therefore f f rank need appear set dom contains tree size 0 notice 0 exists powerset gamma finite let us proceed induction length derivations claim certainly holds considered derivation form hfl deltais st h choosing 0 smallest tree dom delta assume derivation hfl deltais st reads st hhfl st rule applied first step one constructed rule r described definition r 0 k tree whose subtrees 0 defined fol lows j smallest tree domrstates delta f j construction r 0 nonempty set furthermore 0 tree provided induction hypothesis size delta js j derivations p 0 notice induction hypothesis yields input tree 0 p derivations 0 depends delta follows td td tree containing particular subtrees 0 p means finishes proof claim 1 claim yields os st n os td delta n every tree 2 mons means os st formulate second claim convenient formalise notion paths tree 2 sigma define pathss 2 mons follows 2 let hfl deltai dom delta every tree 2 th td holds proof induction length derivations derivations length 1 assertion trivially holds assume given derivation form td td l 1 first notice 2 dom assumption 2 dom delta definition delta set states occurs 0 fl 0 2 delta 0 unique tree one state would mean exist derivation 0 thus violating assumption 2 domtd fl fact 2 dom implies 2 definition r 0 1 obviously satisfied well consequently derivation step st exists induction hypothesis j 2 summing get st claimed choosing path 0 2 pathss wdsts 0 wdtwds due fact proves inequality os td nn 2 os st n n 2 n since much time take construct st clearly time consuming part determine set necessary order construct rules done standard algorithm follows define set exists input symbol f k 2 sigma delta lstatesf rstates delta f time sufficient order determine i1 since enumerate 2 jgammaj sets test whether satisfies requirement follows straightforward inductions i2n furthermore definition i1 smallest index 0 shows computable exponential time completes proof general case remains consider special case td total totality td means dom therefore construction rules conditions 1 2 always satisfied regardless delta consequence second component state gamma 0 useless one simplify construction set rules flf figure 2 tree branching depth 2 branching index 3 proof claim 2 rules computed logarithmic space completes proof lemma reader notice inequalities three lemmas guarantee polynomial boundedness exponentiality preserved respect polynomial boundedness clear upper bounds obviously polynomials os td one exponentiality preserved well os td na constant clear c os td npn p polynomial choose order get c n exponential second factor larger 1 sufficiently large n since 1 4 branching index output trees section shown intuitively tree whose size exponential height must necessarily contain subtree many ramifications every path order formalise branching depth branching index trees introduced 41 definition branching depth branching index let tree branching depth smallest natural number b leaf exactly b distinct ancestors rank 2 branching index maximum branching depth trees 0 pi example shown figure 2 branching depth tree 2 branching depth subtree indicated hollow edges 3 latter turns branching index tree whole subtree larger branching depth reader notice every tree contains tree 0 rank 2 branching depth b therefore tree 0 definition 41 assumed rank 2 without loss generality may furthermore instructive note one could remove nodes b pairwise distinct ancestors rank 2 yielding tree leaves exactly b ancestors rank 2 intuitively turns tree full binary tree height b nodes rank 1 disregarded hence branching index one less height largest full binary tree embedded following lemma yields equivalent recursive description branching index straightforward inductive proof omitted 42 lemma let tree direct subtrees branching index 0 branching index branching index distinct b indices exist pi lemma states size trees polynomially bounded height place upper bound branching index provided rank bounded 43 lemma let set trees rank r branching index b n polynomial p b degree b1 jt j p b htt trees 2 proof proceed induction b tree branching index 0 rank 1 implies jt let tree branching index b k r direct subtrees branching index one greater b distinct branching index j b branching index would least b therefore one direct subtrees 1 say branching index b remaining ones strictly smaller branching index according induction hypothesis polynomial p bgamma1 degree b since coefficients p bgamma1 assumed positive therefore jt repeating argument 1 tree size 1 reached yields polynomial htt degree b one degree b corollary branching index cannot bounded size trees set grows exponentially height 44 corollary let set trees bounded rank let size ng n 2 n size polynomially bounded upper bound branching index trees pi let us say tree contains bifurcation node v 0 2 nt two distinct descendants v 0 v next lemma states every set labelled trees finitely many labels unbounded branching index tree containing bifurcation used proof theorem 46 order create kind pumping situation characterises stringtotree transducers exponential output size lemma let set trees labels finite set l branching index trees unbounded exist tree 2 containing bifurcation proof denote set labels path g mainly prove following claim done induction n claim let 2 n 2 n let nt tree branching depth contain distinct nodes v 0 v v 0 v 0 satisfy node w 2 trivial taking w node therefore let n 1 assume claim holds trees 0 nt branching depth bn gamma 1 pointed definition 41 may assumed without loss generality rank 2 consider tree 0 consists nodes bn gamma 1 ancestors rank 2 thus branching depth 0 1 induction hypothesis implies node v 0 2 0 nothing show choose leaf v 0 u 2 juj minimal since v 0 ancestors rank 2 whereas v 0 u least bn since branching depth least n ancestors v 0 u 1 v 0 u whose rank 2 minimality assumption juj means set jujg least n1 elements assumption label twice among labels nodes n implies existence node v 0 v 2 n tv 0 v 62 tv 0 thus completes proof claim since means order prove lemma choose tree 2 branching index least bjlj tree nt branching depth bjlj however since cannot node w 2 tw jlj follows claim contains bifurcation decision algorithm developed next section based theorem proved next characterises class total deterministic stringto tree transducers st 2 theta exponential output size fact theorem could generalised arbitrary topdown tree transducers would technically difficult needed prove results paper order formulate theorem use well notion computation trees needed intuitively computation tree derivation tree states copies subtrees input tree processed need definition stringtotree transducers theta therefore let st sigma h gamma r computation tree derivation fls st tree labels gamma defined follows derivation st h computation tree tree fl otherwise derivation must form flf 0 st st case computation tree flt 0 computation tree ith subderivation st k set computation trees derivations st 2 sigma 2 th denoted ctst 46 theorem output size total deterministic stringtotree transducer st 2 theta exponential tree ctst containing bifurcation proof let st sigma h gamma r fl 0 proof notice computation tree ct derivation fls st structure ie thus makes difference whether consider size output trees size computation trees due remark fact computation tree ct derivation fls st size ctst n os st n n 2 n size ctst defined corollary 44 corollary 44 means branching index trees ctst unbounded thus implication follows lemma 45 consider derivation st whose computation tree ct contains nodes required type one decompose ct computation tree unique derivation st induction follows jct trivial 0 since ctv 0 derivation fls st tree containing least two subtrees form fls consequence computation tree ct derivation fls st st contains ct twice subtree proves jct fact ctv 0 implies existence derivation st tree containing subtree fls quently computation tree derivation st st 0 contains ct subtree means size least 2 st exponential 2 gammam 0 constant factor 2 1m1 1 note 1m 1 defined byproduct results section result similar theorem 52 1 obtained output size topdown tree transducer exponential polynomially bounded fact result 1 slightly stronger states case output size satisfies c 1 c 1 words cannot element 47 corollary output size topdown tree transducer either polynomially bounded exponential proof let td topdown tree transducer lemmas 33 34 35 total deterministic stringtotree transducer st 2 theta os st polynomially bounded exponential td polynomially bounded respectively exponential os st polynomially bounded onlyif direction proof theorem 46 remains valid shows computation tree ctst containing bifurcation using direction theorem follows os st exponential means os td exponential 5 main result section main result paper proved exponential output size problem nlcomplete total topdown tree transducers dexp timecomplete general case first shown decision algorithms obey resource bounds starting total case 51 lemma total deterministic stringtotree transducers theta exponential output size problem nl proof theorem 46 suffices prove following total deterministic stringtotree transducer st 2 theta decided nondeterministic turing machine logarithmic space whether computation tree ctst containing bifurcation sketch turing machine could work let st every state fl 2 gamma every input symbol f 1 2 sigma let nextfl f denote set states occur righthand side unique flf rule r computation consists two phases first phase starting repeatedly makes nondeterministic choices guess next symbol f 1 arbitrary input string state fl i1 2 nextfl initial state st thus fl 0 sequence labels path unique computation tree determined guessed input string phase computation nondeterministically selects one encountered states say stores tape step j 0 0 next phase initiated guessing two states need distinct must correspond two distinct nodes righthand side respective rule formally righthand side fl j0 f j0 rule fl j0 distinct nodes v intuitively place two paths bifurcation separate two sequences constructed parallel always choosing f 1 states accepts st encounters j 0 since st total every derivation finally yields tree th therefore accepts input step computation tree ct derivation input exists obviously acceptance condition means ct contains bifurcation conversely exists input tree leading computation tree contains bifurcation clear one possible runs make suitable nondeterministic choices order detect fact moreover requires logarithmic space since things must keep track current symbols f completes proof 52 theorem exponential output size problem nlcomplete total topdown tree transducers dexptimecomplete general ones parts statement remain true deterministic topdown tree transducers considered proof let td topdown tree transducer lemmas 3335 one construct total deterministic stringtotree transducer st 2 theta os st exponential os td exponential furthermore construction performed logarithmic space td total exponential time otherwise using lemma 51 tested logarithmic space size st whether os st exponential thus exponential output size problem nl total topdown tree transducers dexptime general remains prove nlhardness dexptimehardness respectively order establish total case shown nlcomplete problem reachability see eg 12 also known graph accessibility problem reduced exponential output size problem total topdown tree transducers given directed graph g two nodes v v 0 reachability problem determine whether exists vv 0 path g ie directed path leading v v 0 v set nodes input graph g reachability let st g r defined follows 1 u u contains rule fl u u 0 x edge u u 0 g edge r contains rule 2 nodes contains rule fl u ffl ffl 3 addition r contains rule clearly work tape logarithmic size sufficient turing machine construct st furthermore g contain vv 0 path rule 3 never applied conversely vv 0 path given sequence e 1 target node e j rules 1 3 derivation st st means st contains pairs full binary tree height consequently os st k 1 delta proving os st exponential since k constant finally consider general case going make use dexptime completeness result seidl deterministic topdown finite tree automaton deterministic topdown tree transducer ta sigma sigma gamma r every flf rule r form flf x ously computed relation ta partial identity seidl 14 showed dexptimehard decide whether domta 1 tree automata ta ta n given input let ta assume without loss generality sets states pairwise disjoint let given following components symbols f states supposed new ones r 0 contains rules clearly td deterministic domta 1 implies computed tree transduction empty otherwise choose arbitrary tree tree 1 derivation complete binary tree height 1 f ffl thus output size td exponential completes proof theorem corollary 47 set topdown tree transducers whose output size polynomially bounded complement whose output size expo nential famous result immerman szelepscenyi 10 15 stating nl closed complement fact holds deterministic classes like dexptime anyway polynomial output size problem ie determine whether os td polynomially bounded turns thus nl respectively dexptime 53 corollary polynomial output size problem nl total topdown tree transducers dexptime general ones pi 6 bottomup tree transducers section output size bottomup tree transducers considered mistake claimed conclusion 3 results section 5 true also bottomup tree transducers fact holds neither total general case assuming nl 6 p 6 dexptime bottomup tree transducers cannot copy subtrees process individually different states copying takes place copied subtree processed results considerably easier emptiness problem makes possible apply construction similar one proof lemma 35 using polynomial instead exponential time hand result bottomup tree transduction may depend deleted subtrees like copying deletion takes place processing subtree means intuitively deletion large subtrees simulate effect nontotality output size consequence exponential output size problem bottomup tree transducers become easier restricted total bottomup tree transducers main result section states problem pcomplete cases let us first recall definition bottomup tree transducers 61 definition bottomup tree transducer bottomup tree transducer tuple definition topdown tree transducers finite set rewrite rules set final states bottomup tree transduction computed bu denoted bu well set pairs bu flt bu denotes rewrite relation r pi topdown case assumed without loss generality variables lefthand side rule read left right always x appropriate k 2 n thus every rule bottomup tree transducer form f fl 1 x 1 states tree sigma 0 l l 2 n containing every variable x l exactly x bottomup tree transducer definition deterministic r contains one rule whose righthand side f fl 1 x 1 gamma similarly bu total least one rule whose righthand side f fl 1 x 1 output size bu given function os bu defined exactly case topdown tree transducers similarly definition exponential output size problem carries bottomup case obvious way call state fl bottomup tree transducer trees 2 sigma 2 sigma 0 bu flt following problem called usefulness used instance bottomup tree transducer state fl 2 gamma question fl useful stated following lemma state usefulness pcomplete rather obvious reformulation fact emptiness problem contextfree string languages pcomplete 11 corollary 11 using wellknown relationship contextfree grammars finite tree automata one hand finite tree automata bottomup tree transducers cf definition finite tree automata proof theorem 52 sake completeness explicit proof nevertheless added 62 lemma state usefulness pcomplete holds problem restricted total deterministic bottomup tree transducers whose output signature fffl 0 g proof proof similar proof 11 corollary 11 let bu gamma order decide whether trees 2 sigma bu flt apply following standard technique compute 0 obviously done polynomial time follows straightforward induction fl useful remains prove phardness restricted variant 11 corollary 9 following problem pcomplete finite set binary operation delta given multiplication table subset 0 element 2 decide whether closure 0 delta ie whether element smallest superset 0 0 b delta c obvious way every tree 2 sigma seen expression delta constants 0 construction derivation bu fl b ffl b value expression particular fl useful 2 0 required furthermore bu computed logarithmic space easy convert multiplication table delta r completes proof similar topdown case convenient simplify given bottomup tree transducer way righthand side contains exactly one output symbol let theta 0 set bottomup tree transducers every righthand side rule r element gammah x 63 lemma every bottomup tree transducer bu one construct bottomup tree transducer bu 0 2 theta 0 constant 2 n os bu na os bu 0 n 2 n construction carried logarithmic space proof simply replace every rule f fl 1 x 1 r arguments proof lemma 33 satisfies claimed inequalities furthermore obviously done logarithmic space show turn bottomup tree transducer total top stringtotree transducer using construction similar one proof lemma 35 64 lemma every bottomup tree transducer bu 2 theta 0 one construct total stringtotree transducer st 2 theta constant 2 n os bu nn 2 os st n max1 os bu delta n n 2 n construction carried polynomial time proof let 62 set useful states determined polynomial time obviously remaining states rules appear deleted without affecting computed transduction therefore following assume without loss generality gamma contains useful states based assumption let st mon sigma new state r defined follows 1 every rule f fl 1 x 1 r every 2 k contains rule flf number times x occurs among x contain rule form f fl 1 x 1 r 1 contains rule flf x h order account totality 2 every rule flf contains rule fl 0 f rule fl 0 f gg remainder proof simplified variant reasoning proof lemma 35 claim 1 constant 2 n following holds every state every derivation fls st 2 th tree bu proof let 0 smallest natural number every tree size 0 bu flt tree 2 th define maximum rank symbols sigma proceed induction length derivations fls st h claim holds inductive step let derivation st st jt jg induction hypothesis exists tree 0 bu tree th satisfies jt 0 jg construction r contains rule f fl 1 x 1 times among x define j 2 k n fig computation similar corresponding one proof lemma 35 verifies inequality js 0 j delta jsj furthermore derivation bu bu occurs p times among 0 thus get claimed second claim let every tree 2 sigma pathss mon sigma defined follows g furthermore every state every tree arbitrary fixed tree 0 2 th maximum width fls 0 st 0 notice tree exists st total 2 every derivation bu flt holds proof induction length derivations derivations length 1 assertion trivial case consider derivation bu bu assuming tion occurs p times among contains rule flf consequently wd fl f 0 0 particular yields claimed claims 1 2 prove inequalities lemma seen follows rules r 2 st yields st state using claim 1 latter implies existence pair bu jtj thus os st st n os bu delta n proves os st n max1 os bu delta n inequality proof lemma 35 implies existence pair st shows os bu nn 2 os st n n 2 n easy prove main result section 65 theorem exponential output size problem bottomup tree transducers pcomplete holds total deterministic bottomup tree transducers proof lemma 63 lemma 64 theorem 52 exponential output size problem bottomup tree transducers p remains prove p hardness total deterministic case done reducing problem state usefulness exponential output size problem class tree transducers lemma 62 suffices consider total deterministic bottomup tree transducer gamma state fl 2 gamma show construct logarithmic space total deterministic bottomup tree transducer bu 0 os bu 0 exponential fl useful state bu let bu clearly bu 0 total deterministic construction performed logarithmic space order verify required equivalence let bu flffl 2 sigma define f derivation f bu 0 bu 0 flt every 2 n full binary tree g ffl height 1 thus output size bu 0 exponential conversely fl useful bu clear rule f never applied derivation bu 0 therefore derivations holds output symbol occurs remaining rules thus os bu 0 exponential finishes proof using lemmas 63 64 corollary 47 extends bottomup tree transducers thus since p closed complement corollary similar corollary 53 obtained 66 corollary polynomial output size problem bottomup tree transducers p pi 7 conclusion shown paper exponential output size problem nl complete total topdown tree transducers dexptimecomplete general ones pcomplete bottomup tree transducers intuitively reason huge complexity gap two topdown variants general case solving problem requires solve emptiness problem topdown tree transductions several directions future research could interesting complexity exponential output size problem compositions topdown bottomup tree transductions general classes tree transducers like eg macro tree transducers 7 seems interesting open problem another point mentioned introduction every k 2 n one construct topdown tree transductions whose output size bounded polynomial degree k polynomial degree k gamma 1 fact corollary 47 output size topdown tree transducer either bounded polynomial exponential macro tree transducers engelfriet maneth 6 showed decidable whether output size linearly bounded thus may interesting search efficient algorithms determine given topdown even macro tree transducer smallest natural number k os 2 k provided k exists finally natural classes nontotal topdown tree transducers exponential output size problem least solvable polynomial space acknowledgement thank joost engelfriet told find completeness results 11 pointed related work 1 well helmut seidl anonymous referee careful reading manuscript helpful lists suggested improvements r translations context free complexity exponential output size problem topdown tree transducers open questions recent results tree transducers tree languages three hierarchies transducers characterizing deciding mso definability macro tree transductions macro tree transducers zoltan fulop tree languages nondeterministic space closed complement complete problems deterministic polynomial time computational complexity mathematical systems theory haskell overloading dexptimecomplete method forced enumeration nondeterministic automata generalized 2 sequential machine maps theres lot finite automata theory would thought tree automata informal survey tr method forced enumeration nondeterministic automata nondeterministic space closed complementation haskell overloading dexptimecomplete tree languages syntaxdirected semantics characterizing deciding msodefinability macro tree transductions exponential output size topdown tree transducers ctr frank drewes joost engelfriet branching synchronization grammars nested tables journal computer system sciences v68 n3 p611656 may 2004