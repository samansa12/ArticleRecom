eventconditionaction language xml xml repositories widespread means storing exchanging information web repositories become increasingly used dynamic applications ecommerce rapidly growing need mechanism incorporate reactive functionality xml setting eventconditionaction eca rules technology active databases natural method supporting suchfunctionality eca rules used activities automatically enforcing document constraints maintaining repository statistics facilitating publishsubscribe applications important question associated use eca rules statically predict runtime behaviour paper define language eca rules xml repositories investigate methods analysing behaviour set eca rules task added complexity xml setting compared conventional active databases b introduction xml becoming dominant standard storing exchanging information increasing use areas data warehousing ecommerce 13 14 18 22 28 rapidly growing need rulebased technology support reactive functionality xml repositories eventcondition action eca rules natural candidate support functionality contrast implementing reactive functionality directly within programming language java eca rules high level declarative syntax thus easily analysed furthermore many commercial research systems based eca rules successfully built deployed thus implementation within system architectures wellunderstood eca rules automatically perform actions response events provided stated conditions hold used conventional data warehouses incremental maintenance materialised views validation cleansing input data streams maintaining audit trails data analogy eca rules also used integrating technology providing kind reactive functionality xml repositories also used checking key constraints xml documents performing automatic repairs violations detected push type environment mechanism automatically broadcasting information subscribers contents relevant documents change also employed flexible means maintaining statistics document web site usage behaviour paper present language eca rules xml defined eca rules used many settings including active databases 26 29 workflow manage ment network management personalisation publishsubscribe technology 3 13 14 17 27 specifying implementing business processes 2 16 22 however one key recurring themes regarding successful deployment eca rules need techniques tools analysing behaviour 15 23 multiple eca rules defined within system interactions difficult analyse since execution one rule may cause event triggers another rule set rules rules may turn trigger rules indeed potential infinite cascade rule firings occur thus second part paper explores techniques analysing behaviour set eca rules defined language eca rule languages xml proposed 13 14 22 none focus analysing behaviour eca rules proposed 13 analysis techniques developed conventional active databases applied xml setting details given recent paper 12 also defines active rule language xml concerned rule analysis rule syntax describes similar one define rule format based definition triggers sql3 rule execution semantics rather different model adopt however generally speaking insertions deletions xml data socalled bulk statements may involve document fragments unbounded size 12 describes semantics whereby toplevel update decomposed sequence smaller updates depend contents fragment inserteddeleted trigger execution interleaved execution smaller updates contrast treat toplevel update atomic trigger execution invoked completion toplevel update general semantics may produce different results toplevel update question future research determine respective suitability different applications earlier paper 7 described initial proposals analysis also optimisation xml eca rules language discussed less expressive language propose allow disjunction negation rule conditions moreover examine deeply triggering activation relationships rules derive precise tests determining relationships tests described 7 2 eca rule language xml database consists set xml documents eventconditionaction eca rules xml databases take following form event condition actions rather introducing yet another query language xml use xpath 32 xquery 33 languages specify events conditions actions within eca rules xpath used number w3c recommendations xpointer xslt xquery selecting matching parts xml documents wellsuited requirements eca rules xquery used eca rules need able construct new fragments xml define components eca rule language give example rules describe rule execution semantics 21 rule events event part eca rule expression form e simple xpath expression defined section 24 evaluates set nodes rule said triggered set nodes includes node new subdocument case insertion deleted subdocument case deletion systemdefined variable delta available use within condition actions parts rule see set instantiations set new deleted nodes returned e 22 rule conditions condition part eca rule either constant true one simple xpath expressions connected boolean connectives condition part eca rule evaluated xml document database changed event form specified rules event part condition references systemdefined evaluated instantiation delta document otherwise condition evaluated document 23 rule actions actions part eca rule sequence one actions action actions executed xml document changed event form specified rules event part rules condition query evaluates true call set documents rules set candidate documents eca rule said fire set candidate documents nonempty action expression form insert r e beforejafter q r simple xquery expression e simple xpath expression q either constant true xpath qualifier see sections 24 25 definitions italicised terms insert action expression e specifies set nodes n immediately new subdocuments inserted subdocuments specified expression r 1 e r references delta variable one subdocument constructed instantiation delta rules condition query evaluates true neither e r references delta single subdocument constructed 2 q optional xpath qualifier evaluated child node n 2 n insertions form q new subdocuments inserted last sibling q true insertions form q new subdocuments inserted first sibling q true order new subdocuments inserted nondeterministic delete action expression e specifies set nodes deleted together subdocuments e may reference delta variable example 1 consider xml database consisting two documents sxml pxml document contains information stores including products sold store store ids1 product idp1 product idp2 observe using phrase e indicate update happen significant without placement new subdocuments would restricted occurring root node documents thus documentlevel instancelevel triggering supported eca rule language occurrence delta variable rule action action executed document time rule fires documentlevel triggering occurrence delta action part action executed possible instantiation delta document instancelevel triggering document pxml holds information product including stores sell product product idp1 store ids1 store ids2 following eca rule updates pxml document whenever one products added existing store sxml insert documentsxmlstoresstoreproduct notdocumentpxmlproducts productiddeltaidstoreiddeltaid insert store iddeltaid documentpxmlproducts productiddeltaid true systemdefined delta variable bound newly inserted product nodes detected event part rule rules condition checks store parent inserted products sxml already child products pxml action adds store child products pxml symmetrical way following eca rule updates sxml document whenever one stores added existing product pxml insert documentpxmlproductsproductstore notdocumentsxmlstores storeiddeltaidproductiddeltaid insert product iddeltaid documentsxmlstores storeiddeltaid true two rules ensure information two documents kept mutually consistent example 2 example taken 1 discusses view updates semistructured data xml database consists two documents gxml mxml gxml contains restaurant guide information restaurants including entrees serve ingredients entree namebaghdad cafename ratingfour starsrating namecheeseburger clubname document mxml view derived gxml contains list entrees baghdad cafe one ingredients mushroom suppose ingredient element value mushroom added second unnamed entree baghdad cafe gxml following eca rule performs view maintenance mxml insert documentgxmlguiderestaurant entreeingredient deltamushroom deltanamebaghdad cafe insert delta documentmxmlentrees true resulting mxml document note inserting delta results complete entree inserted true causes inserted last child entrees 24 simple xpath expressions xpath xquery expressions appearing eca rules restrictions full xpath 32 xquery 33 languages term simple xpath xquery expressions represent useful reasonably expressive fragments advantage also amenable analysis xpath fragment use disallows number features full xpath language notably use axis child parent self descendantorself axes use functions document thus syntax simple xpath expression e given following grammar denotes string n denotes element attribute name expressions enclosed xpath expression called qualifiers simple xpath expression starts establishing context either call document function followed path expression p reference variable delta variable allowed followed optional qualifiers q optional path expression p note qualifier q comprise simple xpath expression e delete qualifiers along enclosing brackets xpath expression left path nodes call path distinguished path expression node end distinguished path distinguished leaf expression result xpath expression e set nodes namely matched distinguished leaf expression simple result type e denoted typee one string element name n denotes element name result type determined follows let p distinguished path e leaf p n typee string leaf p n typee n respectively leaf typee determined leaf modified distinguished path 3 defined modified distinguished path constructed distinguished path p expression e replacing occurrence left right p follows p starts delta substitute delta distinguished path xpath expression occurs event part rule step preceded must either element name replace separator preceding occurrence replace step step separator precedes delete step preceding separator example 3 consider condition eca rule example 2 namely deltamushroom deltanamebaghdad cafe result type first conjunct ingredient event part rule insert documentgxmlguiderestaurant entreeingredient result type second conjunct restaurant determined follows distinguished path substituting delta documentgxmlguiderestaurantentree ingredient replace ingredient delete replace entree finally delete leaving modified distinguished path documentgxmlguiderestaurant 3 modified distinguished path simply used determine result type may equivalent original path p type inference part xquery formal semantics defined 34 allows implementation xquery infer query compile time output type query documents conforming given input type dtd schema since xpath expressions part xquery result types also inferred thus presence dtd xml schema possible infer accurate result types xpath expressions using techniques described 34 4 25 simple xquery expressions xquery fragment use disallows use full socalled flwr expressions involving keywords let return essentially permitting return part expression 33 syntax simple xquery expression r given following grammar r c n j tlambda n n thus xquery expression r either simple xpath expression e defined section 24 element constructor c element constructor either empty element element sequence element contents case element list attributes attribute list empty name equated attribute value followed attribute list attribute value either string enclosed expression e 0 element contents one string element constructor enclosed expression enclosed expression e 0 xpath expression e enclosed braces braces indicate e evaluated result inserted position e element constructor attribute value result type xquery expression r denoted typer tree whose nodes type element name n n attribute name n n string types suffix indicate corresponding node root arbitrary subtree necessary capture fact results xpath expressions embedded r return sets nodes may roots subdocuments tree typer determined follows r xpath expression e typer comprises single node whose type typee typee 0 n string string r element constructor c form document tree c usual way except nodes labelled enclosed expressions enclosed expression e 0 determine result type typee 0 way single xpath expression replace e 0 typee 0 typer given modified tree result type xquery expression r denotes set trees every tree returned r converse necessarily hold type results enclosed expressions tightly possible call tree instance typer given xpath expression e tree satisfies e et 6 say may satisfy e instance typer satisfies e given xpath expression e xquery expression r straightforward test whether may satisfy e test essentially involves checking whether evaluation e tree typer empty however since typer denotes set trees rather single tree evaluation needs modified indicated following informal description node type string typer may satisfy string e node type typer may satisfy element name e node type n respectively typer may satisfy expression e tests attributes descendants element name n respectively element name example 4 let r xquery expression action first rule example 1 namely store iddeltaid result type deltaid string typer storeidstring another example let r xquery expression 4 although parent function 34 corresponds step always returns type anyelement assume result type delta typer ab c 26 eca rule execution section describe informally eca rule execution semantics giving sufficient details purposes paper refer interested reader 7 fuller discussion input eca rule execution xml database schedule schedule list updates executed database update pair component ij action actions part rule r component docsanddeltas set pairs deltas di identifier document upon ij applied deltas di set instantiations delta variable generated event condition part rule r respect document rule execution begins removing update head schedule applying database rule r determine set candidate documents generated update together set deltas di candidate document rules r fired ie whose set candidate documents nonempty place list actions head schedule placing actions higherpriority rules ahead actions lowerpriority rules 5 action ij paired set docsanddeltas consisting set candidate documents rule r set instantiations deltas di document execution proceeds fashion schedule becomes empty nontermination rule execution possibility thus rule analysis techniques important developing sets well behaved rules analysing eca rule behaviour analysis eca rules active databases wellstudied topic number analysis techniques proposed eg 4 5 6 8 9 10 11 16 mostly context relational databases analysis important since within set eca rules unpredictable unstructured behaviour may occur rules may mutually trigger one another leading unexpected possibly infinite sequences rule executions two important analysis techniques derive triggering 4 activation 10 relationships pairs rules information used analyse properties termination confluence set eca rules reachability individual rules triggering activation relationships pairs rules defined follows rule r may trigger rule r j execution action r may generate event triggers r j rule r may activate another rule r j r j condition may changed false true execution r action rule r may activate condition may true execution action thus two key analysis questions regarding eca rules 1 possible rule r may trigger rule r j 2 possible rule r may activate rule r j triggering activation relationships derived one construct graphs useful analysing rule behaviour 5 common sql3 standard database triggers 24 assume two rules priority together use restricted sublanguages xpathxquery ensures rule execution deterministic language order new subdocuments inserted common parent triggering graph 4 represents rule vertex directed arc vertex r vertex r j r may trigger r j acyclicity triggering graph implies definite termination rule execution triggering graphs also used deriving rule reachability information examination arcs graph activation graph 10 represents rules vertices directed vertex r vertex r j r may activate r j acyclicity graph also implies definite termination rule execution determination triggering activation relationships eca rules complex xml setting relational databases determining effects rule actions simply matter matching names updated relations potential events bodies rule conditions instead associations implicit semantic comparisons sets path expressions required develop techniques 31 triggering relationships xml eca rules order determine triggering relationships xml eca rules need able determine whether action rule may trigger event part rule clearly insert actions trigger insert events delete actions trigger delete events 311 insertions insertion action form insert r e 1 beforejafter q rule r insertion event ev form rule r j need know whether ev independent e 2 never return nodes inserted simple xquery r defines nodes inserted simple xpath expression e 1 defines nodes inserted informally speaking possible initial part specify path document e 1 remainder e 2 matches r ev independent formalise notions based tests containment xpath expressions 19 20 30 prefix simple xpath expression e expression e 0 call e 00 suffix e e 0 recall section 25 xquery r typer denotes result type r test whether typer may satisfy xpath expression e given xpath expressions e 1 e 2 say e 2 independent possible xml documents e 1 let us return action event ev defined event ev independent action prefixes e 0of e 2 either e 0are independent 00equivalently say rule r containing action may trigger rule r j containing event ev prefix e 0of e 2 e 0are independent typer may satisfy e 00from arbitrary simple xpath expressions e 1 e 2 construct xpath expression e documents e 1 done converting distinguished paths e 1 e 2 regular expressions finding intersection using standard techniques 21 converting intersection back xpath expression qualifiers e 1 e 2 correctly associated merged steps intersection resulting expression may use union path expressions denoted top level permitted xpath 32 test whether e unsatisfiable hence whether e 1 e 2 independent checking whether e contained unsatisfiable expression using containment test developed 19 allows unions path expressions example 5 recall two rules example 1 let us call rule 1 rule 2 form rule insert e insert r f true store iddeltaid documentpxmlproducts productiddeltaid documentpxmlproductsproductstore product iddeltaid documentsxmlstores storeiddeltaid let e documentsxmlstoresstore e 00is product e 0is documentpxmlproductsproduct e 00is store f 2 e 0are independent furthermore typer 2 productidstring may satisfy e 00 conclude rule 2 may trigger rule 1 similar argument shows rule 1 may trigger rule 2 hand event e 1 modified documentsxmlstoresstoreproductname inserted product name child f 2 e 0are still independent however 00since product node typer 2 contain name child case would detect rule 2 could trigger modified rule 1 312 deletions similarly insertions deletion action form belonging rule r deletion event ev form belonging rule r j r may trigger r j ev independent test independence action event case deletions simpler insertion case let e xpath expression e 1 event ev independent action expressions e e 2 independent determined section 311 32 activation relationships xml eca rules order determine activation relationships eca rules need able determine whether action rule r may change value condition part rule r j false true case r may activate r j b whether actions rule r definitely leave condition part r false r may activate without loss generality assume rule conditions disjunctive normal form ie form l 11 l 12 l 21 l 22 l m1 l l ij either simple xpath expression c negation simple xpath expression c 321 simple xpath expressions following table illustrates transitions truthvalue condition consisting simple xpath expression undergo first column shows conditions truth value update subsequent columns truth value nonindependent insertion ni nonindependent deletion ni nd rue rue rue f alse alse rue f alse f alse case ie r r j distinct rules clear table r activate r j one actions r insertion nonindependent condition r j let condition r j simple xpath expression c c true require returns nonempty result thus sense distinguished path c plays role xpath qualifier interested existence path document matching distinguished path addition insertion element whose name occurs qualifier c turn c false true example insertion element ab turn condition abde false true thus need consider qualifiers distinguished path c similar way test case moreover use condition analogous introducing qualifier need rewrite conditions accordingly example condition abd equivalent abd condition turned false true either element added element b element child b element added element element child procedure determining nonindependence insertion condition c involves constructing c set c conditions xpath expression without qualifiers ie distinguished path objective condition c change false true result insertion least one conditions c change false true result insertion start set proceed decompose c number conditions without qualifiers adding one c single step decomposition follows 1 u w v element name n ffl condition c form uvw replace c c uvw form uvw replace c c uvw uv 2 delete c steps form well replacing occurrences thereby ensuring occur end c preceded 3 c 2 c form uvw u v w nonempty replace c c uv uw 4 c 2 c form uv u v nonempty delete c c add c conditions specified one cases depending structure qualifier v nonterminal p grammar simple xpath expressions add uv ffl v matches nonterminal e add e c ffl v matches x x must qualifiers add ux uy c ffl v matches x x must qualifiers add ux uy c x match nonterminal p add ux uy respectively c x match nonterminal e add x respectively c decomposition process continues conditions c qualifierfree let one actions rule r insert r e 1 beforejafter q section 311 determine typer consider prefixes suffixes condition c set c conditions independent c 2 c prefix c 0 c either c 0 independent action cannot change truth value condition c rule r j false true equivalently say rule r may activate rule r j prefix c 0 c c 0 independent typer may satisfy c 00 example 6 conjunction conditions eca rule example 2 rewritten single condition c deltamushroomnamebaghdad cafe initially comprises condition c substituting delta dropping documentgxml simplicity decomposed conditions guiderestaurantentreeingredient condition c 2 decomposed guiderestaurantentreeingredient conditions c 3 c 5 interpreted stating way insertion change condition c false true ingredient inserted child entree entree inserted child restaurant name inserted child restaurant test described detect possibilities correctly infer possible activation relationships case b rule r activates may leave condition true table see analysis used far case rules obtain precision need develop notion selfdisactivating rules analogy property eca rules relational database setting 9 selfdisactivating rule one execution action makes condition false condition part r simple xpath expression c rule selfdisactivating actions deletions subsume c deletion action thus need test simple xpath expressions eca rules constrained paper provided additionally operator appearing qualifiers known containment decidable 19 thus possible devise test determining whether rules selfdisactivating decidability containment larger fragments xpath language open problem 19 however even fragment xpath used property undecidable may still possible develop conservative approximations area research 322 negations simple xpath expressions following table illustrates transitions truthvalue condition form c c simple xpath expression undergo first column shows truth value condition update subsequent columns truth value nonindependent insertion ni nonindependent deletion nd ni nd rue rue f alse rue f alse f alse rue f alse case rules r r j distinct clear table r activate r j one actions r deletion nonindependent condition r j let condition r j c construct set conditions c c section 321 let action rule r let e query e 1 use intersection test section 311 order check whether e independent conditions c e cannot change truth value c false true otherwise e deemed nonindependent c r may activate r j case b rule r activates may leave condition true need notion selfdisactivating rule condition part r c rule selfdisactivating actions insertions guarantee c true insertion let insertion action rule r insert r e 1 beforejafter q let condition c comprise prefix c 0 suffix c 00 action guarantees c true insertion trees set trees denoted r satisfies c 00 result need stronger concept fact typer may satisfy expression c 00 recall construction tree typer section 25 modify construction typer leave enclosed expressions type string typer instead replacing string need define means node typer satisfy rather may satisfy part xpath expression e node type n n typer satisfies element name n attribute name n expression respectively e node type n respectively typer satisfies element name n respectively expression node labelled enclosed expression e 0 typer satisfies e 0 e example 7 recall first rule example 1 prefix negated condition identical xpath expression documentpxmlproductsproductiddeltaid clearly contains corresponding suffix negated condition namely storeiddeltaid satisfied trees denoted xquery expression store iddeltaid since value id attribute defined expression used suffix hence rule selfdisactivating second rule example 2 similarly selfdisactivating 323 conjunctions case condition rule r j form l i1 l use tests described previous two sections conditions simple xpath expressions negations simple xpath expressions determine rule r may turn l ij false true r may turn r j condition false true may thus activate r j case b suppose condition rule r form l i1 l three possible cases l ij simple xpath expressions case r selfdisactivating actions deletion subsumes one l ij ii l ij negations simple xpath expressions case r selfdisactivating actions insertion falsifies one l ij iii l ij mixture simple xpath expressions negations thereof case r may may selfdisactivating 324 disjunctions case condition rule r j form l 11 l l 21 l l m1 l use test described section 323 determine rule r may turn disjuncts l i1 l false true r may turn r j condition false true may thus activate r j case b suppose condition rule r form l 11 l 12 l 21 l 22 l m1 l r selfdisactivating leaves false disjuncts condition l ij simple xpath expressions r disactivates disjuncts condition case section 323 ii l ij negations simple xpath expressions r disactivates disjuncts condition case ii section 323 cases r may may selfdisactivating conclusions paper proposed new language defining eca rules xml thus providing reactive functionality xml repositories developed new techniques analysing triggering activation dependencies rules defined language language based reasonably expressive fragments xpath xquery standards analysis information obtain particularly useful understanding behaviour applications multiple eca rules defined determining information nontrivial since possible associations rule actions rule eventsconditions syntactically derivable instead deeper semantic analysis required one could imagine using xslt transform source documents materialise kinds view documents used examples paper however xslt would process entire source document update order produce new document whereas invisage detecting updates much finer granularity also using eca rules allows one update document directly wheareas xslt requires new result tree generated applying transformations source document simplicity eca rules another important factor suitability managing xml data eca rules simple syntax automatically invoked response events specification events indeed part document object model dom recommendation w3c also argued 13 simple execution model eca rules make promising means rapid prototyping wide range eservices analysis techniques developed useful context beyond eca rules methods computing rule triggering activation relationships essentially focus determining effects updates upon queries query independent update problem 25 therefore use techniques analysing effects ie necessarily ruleinitiated updates made xml database eg determine whether integrity constraints violated whether userdefined views need recalculated query optimisation strategies also possible eg given set predefined queries one may wish retain memory documents relevant computing queries updates database made documents may need brought memory documents determined analysing effects updates made collection predefined queries future work two main directions explore firstly wish understand fully expressiveness complexity eca language defined example wish look types xml schema constraints enforced repaired using rules language secondly wish develop gauge effectiveness analysis methods techniques incorporating additional information document type definitions may help obtain precise information triggering activation dependencies 31 also wish investigate use dependencies carrying optimisation eca rules r incremental maintenance materialized views semistructured data relational transducers electronic com merce push technology personalization event correlation static analysis techniques predicting behavior active database rules abstract interpretation framework termination analysis active rules dynamic approach termination analysis active database rules analysis optimisation event conditionaction rules xml improved rule analysis means triggering activation graphs algebraic approach rule analysis expert database systems algebraic approach static analysis active database rules active xquery active rules xml new paradigm eservices pushing reactive services xml repositories using active rules practical applications triggers constraints success lingering issues designing database applications objects rules idea methodology views large scale xml repository containment integrity constraints xpath fragments query containment conjunctive queries regular expressions introduction automata theory active webbased distributed database system ecommerce active database systems expectations active database features sql3 queries independent updates active rules database systems efficient matching webbased publishsubscribe systems updating xml active database systems equivalence xml patterns minimising simple xpath expressions world wide web consortium world wide web consortium world wide web consortium tr static analysis techniques predicting behavior active database rules query containment conjunctive queries regular expressions relational transducers electronic commerce algebraic approach static analysis active database rules pushing reactive services xml repositories using active rules updating xml introduction automata theory languages computation compiletime runtime analysis active behaviors incremental maintenance materialized views semistructured data onetoone web site generation dataintensive applications push technology personalization event correlation practical applications triggers constraints views large scale xml repository queries independent updates algebraic approach rule analysis expert database systems improving rule analysis means triggering activation graphs efficient matching webbased publishsubscribe systems dynamic approach termination analysis active database rules equivalence xml patterns abstract interpretation framework termination analysis active rules active rules xml new paradigm eservices ctr swamynathan kannan v geetha composite event monitoring xml repositories using generic rule framework providing reactive eservices decision support systems v42 n1 p7988 october 2006 martin bernauer gerti kappel gerhard kramler composite events xml proceedings 13th international conference world wide web may 1720 2004 new york ny usa ce dong james bailey static analysis xslt programs proceedings fifteenth australasian database conference p151160 january 01 2004 dunedin new zealand george papamarkos alexandra poulovassilis peter wood eventconditionaction rules rdf metadata p2p environments computer networks international journal computer telecommunications networking v50 n10 p15131532 14 july 2006 james bailey transformation reaction rules data web proceedings sixteenth australasian database conference p1723 january 01 2005 newcastle australia shuichi kurabayashi yasushi kiyoki adaptive active rule system automatic service discovery cooperation proceedings 24th iasted international conference database applications p115122 february 1315 2006 innsbruck austria using composite act frame technique model rules origin knowledge representations egovernment services electronic commerce research applications v6 n2 p128138 summer 2007