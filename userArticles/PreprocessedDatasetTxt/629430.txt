scheduling dataflow graphs via retiming unfolding abstractloop scheduling important problem parallel processing retiming technique reorganizes iteration unfolding technique schedules several iterations together combine two techniques obtain static schedule reduced average computation time per iteration first prove order retiming unfolding immaterial scheduling dataflow graph dfg nice property present polynomialtime algorithm original dfg unfolding find minimumrate static schedule given unfolding factor case unittime dfg efficient checking retiming algorithms presented b introduction ow efficiently optimally schedule iterative recursive algorithms important problem vlsi high level synthesis compilers parallel machines like vliw dataflow machines example given signal flow graph filter may many cycles would like know obtain schedule resultant synthesized hardware achieve highest pipeline rate combine two techniques retiming unfolding maximize execution rate static sched ules combination technique turns simple efficient great potential generalized applications paper study fundamental theorems combination provide efficient algorithms input algorithm described dataflow graph dfg widely used many fields example circuitry 1 program descriptions 2 3 4 etc dfg nodes represent operations edges represent precedence relationships graph g fig 2a example dfg number attaches node computation time dfg called unittime dfg computation time every node one unit certain delay count associated edge represent interiteration precedences although results quite general many applications use model dfgs paper specifically consider problem multiprocessor scheduling recursive iterative algorithm studied 5 4 particularly useful dsp applications dfgs usually called signalflow graphs dsp fig 1 shows innermost body loop program dfg fig 2a corresponding dfg schedule 1 g shown fig 2b takes three time units equals cycle period g complete iteration since use schedule repeatedly iteration call schedule static schedule n fig 1 loop program retiming technique effectively used improve static schedules rearranging delays 1 6 retimed dfg denoted g r fig 3a corresponds faster static schedule fig 3b static schedules improved using common unfolding tech nique unfolding technique studied 4 6 generalized handle switches 7 original dfg unfolded f times unfolded graph denoted g f consists f copies node set edge set instance static schedule contains f iterations computation time called cycle period therefore iteration period average computation time per iteration cycle periodf reduced f called unfolding factor static schedule obtained unfolded graph executed repeatedly every f iterations amount memory needed store static schedule proportional unfolding factor general dfgs parhi messerschmitt 4 show unfolding factor least common multiple loop delay counts dfg rateoptimal schedule achieved iterative algorithm designed 6 find minimum unfolding factor achieve given iteration period 1 assumption enough resources available node scheduled early possible lf chao dept electrical computer engineering iowa state university ames ia 50011 email lfciastateedu e hm sha department computer science engineer ing university notre dame notre dame 46556 email hmscsendedu manuscript received 14 oct 1992 revised 17 oct 1994 information obtaining reprints article please send email tpdscomputerorg reference ieeecs log number 100505 ieee transactions parallel distributed systems vol 8 12 december 1997 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 2 9 like previous works 4 6 assume scheduler operate integral grids ie operation starts integral instant time rateoptimal scheduling unfolding factors fractionaltime scheduler start operation fractional time instant discussed 8 size program code control unit proportional unfolding factor synthesis system provide many alternatives pairs unfolding factors corresponding minimum iteration periods retimings designer choose suitable pair among given maximum unfolding factor f design requirement present efficient algorithms find pairs original dfg one obvious way unfold original dfg first retiming find minimum iteration period instead show perform retiming directly original dfg obtain minimum iteration period without working large unfolded dfg nice counterintuitive property shown section 3 proving order retiming unfolding matter obtaining minimum iteration period results unittime dfgs obtained section 4 simple inequality derived necessary sufficient condition existence retiming produce schedule unfolding factor f cycle period c minimum iteration period given unfolding factor evaluated inequality efficient algorithm runs time ov e finding retiming v node set e edge set generaltime dfg necessary sufficient condition characterized simple formula unittime dfgs getting pair unfolding factor f corresponding minimum iteration period present retiming algorithm section 5 runs time preprocessing algo rithm runs time want obtain pairs unfolding factors less f corresponding minimum iteration periods nice thing preprocessing algorithm needs performed maximum unfolding factor f instead f times note algorithms paper easily implemented since mainly variations general shortest path algorithms first describe definitions properties retiming unfolding prove order retiming unfolding immaterial section 3 algorithms results unittime dfg presented section 4 generaltime dfg section 5 finally make concluding remarks last section since detailed proofs sketched omitted due space limitations interested readers referred 9 10 definition 1 dataflow graph dfg nodeweighted edgeweighted directed graph v set nodes v set edges function e nonnegative integers function v positive integers b fig 2 corresponding dataflow graph g dfg g b static schedule b fig 3 retimed dfg retimed dfg g r b static schedule chao sha scheduling dataflow graphs via retiming unfolding 3 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 3 9 interiteration data dependencies represented weighted edges edge e u v delay count de means computation node v iteration j depends computation node u iteration j de set edges without delay composes directed acyclic graph represents data dependencies within iteration 2 define one iteration execution node exactly computation time longest path without delay called cycle period example cycle period dfg fig 2a three longest path node b c edge e u v delay count de means computation node v iteration j depends computation node u iteration j de sake convenience use following notation notation u v e means e edge node u node v notation u v means p path node u v delay count path p v v v v 1 total computation time path p 21 retiming technique retimed graphs retiming technique 1 moves delays around following way delay drawn incoming edges v delay pushed outgoing edges v vice versa retiming r dfg g function v integers value rv number delays drawn incoming edges node v pushed outgoing edges 3 see fig 3 dfg retimed retiming r g edge u v e r similar property applies path retiming legal retimed delay count r nonnegative every edge e legal retiming preserves data dependencies original dfg although prologue needed set initial assignments compare fig 2 fig 3 technique retiming regroups operations loop new iterations operation executed operation v original iteration shifted new iteration rv general rv 0 rv instances node v appear prologue rv 0 rv instances appear epilogue edges without delay g r give precedence relations new loop body although prologue epilogue introduced retiming size prologue epilogue controlled adding simple constraints proposed retiming algorithms 9 definition retiming 1 distinction recursive cyclic nonrecursive acyclic parts dfg inputoutput behavior needs preserved host introduced dfg edge host every input node edge every output node host transformation 2 graph meaningful dataflow graph delay count loop nonzero 3 note rv positive delays pushed along direction edges algorithms applied dfg without special considerations nonrecursive part 22 unfolding technique unfolded graphs let f positive integer unfolded graph unfolding factor f denoted g f consists f copies node set v represents precedence relations g delay counts edges say unfolded dfg g dfg obtained unfolding g f times set v f union let u node u v computation tu example dfg fig 4a unfolded graph factor two dfg g r fig 3a unfolded graph gives global view data dependencies manageable graph size use subscript f represent correspondences g g node v resp edge e g v f resp e represents copy v resp e g f path p f g f unique path p g corresponding p f let z set integers 0 f set integers 0 1 2 f 1 b z notation f b means exists n z f operation f produces congruent integer within 0 f one cycle g f consists computation nodes v f period computations cycle executed called cycle period cycle period g g every path p f g f cycle period g f f iterations g executed thus iteration period g f equal g f f words average computation time iteration g original dfg g iteration period equal g algorithm find g dfg time oe 1 properties unfolded graph studied 4 procedure proposed generate unfolded graph however relationship de f e f clear characterize properties unfolded graph following used proofs paper though property 1d b fig 4 unfolded retimed dfg g rf globallystatic schedule g rf 2 4 ieee transactions parallel distributed systems vol 8 12 december 1997 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 4 9 pointed 4 restate notation properties simpler procedure constructing unfolded graph shown fig 5 property 1 let u v nodes g u v e 0 f 0 j f edge u v e f g f b f copies edge e g f set edges c total number delays f copies edge e de ie e e f f 0these properties easily extended paths substituting e path g exactly f copies g definition g leiserson saxe 1 derived following characterization cycle period lemma 21 1 let g dfg c cycle period g c every path p g prove similar property unfolded graphs following lemma value g f obtained original dfg g show cycle period unfolded graph g maximum total computation time among paths total delay count less f original graph g lemma 22 let g dfg c cycle period f unfolding factor g f equal max tp dp f every path p g every path p g p c dp f 23 combination dfg g let g rf dfg obtained unfolding g r factor f g f r dfg obtained retiming g f function r f retiming v f z define minimum cycle period denoted mcpf unfolding factor f min g minimum cycle period achieved unfolding g factor f next section show mcp f g g f approach retiming first unfolding achieve minimum cycle period say order retiming unfolding immaterial approach one need compute retiming functions large unfolded graph hence computationally efficient although retimed graph fig 3 achieves minimum cycle period unfolding factor 1 mcp1 graph g rf cycle period 4 mcp2 paper retiming algorithms designed find retiming achieving mcpf without unfolding dfg first example algorithm find another retiming r shown fig 6 optimal unfolding factors 1 2 cycle period g r equals mcp1 lemma 22 know cycle period g r f three minimum section relationship g f r g r f fixed unfolding factor explored intuitively seems provides finer retimings unfolded node set gives better flexibility retiming however show order retiming unfolding essential precisely prove mcp f g g therefore next two sections focus finding retiming r achieve mcpf given unfolding factor f every edge begin add edge e u v f g add edge e u v f g fig 5 procedure constructing e f b fig 6 dfg retimed another retiming r dfg g r retimed r b iteration period 2 chao sha scheduling dataflow graphs via retiming unfolding 5 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 5 9 following lemma says cycle period obtained retiming unfolded graph g f achieved retiming original graph g directly lemma 33 proves converse lemma 31 let g dfg c cycle period f unfolding factor legal retiming r f unfolded graph g f g c exists legal retiming r original graph g g rf c proof assume r f legal retiming v f z g c f r let r retiming v z choose r u r u f f 1 every u v u ith copy node u v f show r legal retiming g r c since r f legal retiming easy show r also legal retiming prove g r f g c lemma 21 know every u v f v know f v path f p f c u v g corresponding path p since f p ith copy know r f v idpf every 0 f summing f inequalities r v r u p f p f f f 1 fore know every path p g tp c rv ru dp f thus lemma 22 r legal retiming g g r f c following lemma proves g f g rf struc turely isomorphic means onetoone correspondence among edges nodes two graphs mapping circularly shift every copy node v v amount rv actually lemma gives way constructing dfg g rf directly g given r f instead constructing g r first unfolding consider g f g rf node set denoted v f different edge sets denoted e f e rf respectively different delay functions denoted f rf respectively lemma 32 let dfg r retiming g f unfolding factor unfolded graph unfolded retimed graph g following relation edge u v j g f iff edge u r u v j r v f g rf proof consider edge e rf u r u f v j r v f g rf property 1 edge corresponds edge e g r iff r rv modular equation equivalent de f j means edge u v j thus lemma proved lemma also holds corresponding paths g f g rf structurally equivalent graphs g f r g rf show certain correspondence two retimings r r lemma 33 legal retiming r original graph g g rf c exists legal retiming r f unfolded graph g f g c f r proof let r retiming v z g rf c lemma 32 know g f g rf struc turely equivalent edge u v j g iff edge u r u f v j r v f g rf want prove exists retiming r f g f r f equivalent g rf pair corresponding edges delay count let e f e rf pair corresponding edges u v e e want find retiming r satisfy equations e e g f since e e r u r v derive r thus following linear system integer solution retiming r f found every u v e g f u v e g rf unknown variables constants show linear system consistent integer solution r f equivalent g rf retiming r f certainly legal retiming lemma proved following theorem derived lemma 31 lemma 33 theorem 1 let g dfg f fixed unfolding factor legal retiming r original graph g g rf c legal retiming r unfolded graph g g c f r seems retiming unfolded graph tends better iteration period finer retiming functions found however theorem tells us fixed unfolding factor minimum iteration period found matter unfolding retiming performed first obviously retiming original graph saves time space focus rest paper 6 ieee transactions parallel distributed systems vol 8 12 december 1997 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 6 9 well known dfg involves loops feedbacks recursions lower bound iteration period 11 iteration bound g dfg g given g l loop g tl sum computation time loop l dl sum delay counts loop l unittime dfg takes ove compute bound g loop gives iteration bound called critical loop l cr example fig 2a 43 schedule rateoptimal iteration period schedule equals iteration bound section show cf g necessary sufficient condition existence retiming produce schedule unfolding factor f cycle period c minimum cycle period given unfolding factor derived efficient ovetime algorithm design find retiming graph modified every edge e e note g x may nonintegral even negative delay counts x integer next lemma shows relation g fc lower bound g lemma 41 let g unittime dfg f c positive inte gers graph g fc contains loops negative delay counts cf g proof assume g fc contains loops negative delay counts let dl delay count loop l g fc since number edges loop l equals tl unittime dfg know fc tl 0 therefore cf tldl every loop l g part proved similarly similar characterization cycle period unittime dfgs retiming 1 give characterization cycle period retiming unfolding lemma 42 let e unittime dfg c positive teger f unfolding factor legal retiming r g f g rf c g fc contains loops negative delay counts proof part easily proved contradic tion loop negative delay lemma 41 know cf smaller lower bound g thus retiming r exists part assume loop negative delay count construct retiming dfg follows first add new node v 0 graph g fc v 0 connected nodes delay 0 compute shortest paths v 0 nodes let shv length shortest path v v 0 choose retiming r node v equals ceiling shv every v v easy prove r legal retiming similar proof 1 lemma retiming algorithm find retiming r g rf c shown fig 7 adopt singlesource shortest path algorithm introduced 12 find shortest paths shv nodes v negative loop algorithm report return retiming function rv ceiling shv time complexity retiming algorithm ov e static schedule cycle period c easily obtained unfolding retimed graph g r time e following theorem provides us simple existence criterion cf g check whether given cycle period c achieved theorem 2 let g unittime dfg f c positive inte gers following statements equivalent contain cycle negative delay count exists legal retiming r g g retimed r unfolded f cycle period proof lemma 41 first second statements equivalent equivalence second third statement proved lemma 42 pair given integers f c exists legal retiming r g rf c say pair feasible theorem 2 designer needs check inequality cf g order decide feasibility pair f c unfolding factor f minimum feasible c inequality mcp f f g thus pairs f mcpf easily generated designer may choose suitable pair according requirement legal retiming r chosen pair found merely time ov e corresponding schedule generated graph g rf maximum difference iteration period chosen pair iteration bound g less 1f retiming algorithm input dfg g unfolding factor f cycle period c output retiming r g rf begin pass used prevent algorithm trapped negative loops every node v v begin q end pass 0 last last element q q empty pass v begin pop v q every edge w q push w q end last begin last last element q pass q empty every v v r v sh v else negative loop graph g fc fig 7 retiming algorithm unittime dfgs chao sha scheduling dataflow graphs via retiming unfolding 7 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 7 9 consequence theorem 2 minimum rateoptimal unfolding factor produces rateoptimal schedule derived dl cr gcdtl cr dl cr corresponding rateoptimal schedule easily derived algorithm first design algorithm find retiming r possible given unfolding factor f given cycle period c preprocessing algorithm performed first order find set critical paths presented second subsection first subsection properties critical paths derived order represent problem simple linear programming lp form solved time ov 3 general shortest path algorithm binary search ofv 2 possible cycle periods find legal retiming r achieves minimum cycle period dfg g rf given unfolding factor f time 51 retiming algorithm since delay count every path u v changed amount ru rv dfg retimed r quantities defined specify set critical paths paths u v need look quantities order decide whether g f c definition 2 let u v nodes g integer define u mindpfor every path u v v g g integer value u v minimum delay count paths u v value 7 maximum computation time among paths u v delay counts equal u v paths v 7 called critical paths preprocessing algorithm described subsection 52 computes u v 7 u v v every 0 f theorem 3 let dfg c cycle period f unfolding factor g f c nodes u v v proof prove part contradiction assume exist u v v 0 f u v p critical path u v v 7 thus exists path p g dp f tp c lemma 22 know gf c contradiction prove part assume u v v assumption claim every path p g dp f tp c implies v path g p critical path claim true otherwise want show dp f tp c case dp u v f know dp f since u v 0 otherwise critical path p u v 7 assumption know either dp f tp c therefore claim proved next theorem gives us necessary sufficient conditions retiming r g rf c terms theorem able construct simple lp form retiming unfolding theorem 4 let dfg c cycle period f unfolding factor following two statements equivalent r retiming g g rf c b nodes u v v proof similarly defined g r first prove effect retiming functions u v 7 similar functions ie r u r theorem easily derived theorem 3 retimed graph g r theorem 5 let dfg c cycle period f unfolding factor r legal retiming g g rf c e g proof function r legal retiming r e 0 every e g since r r legal retiming rv ru de every e second inequality comes theorem 4 particular cycle period c unfolding factor f theorem gives simple lp form find legal retiming r exists g rf c lp form easily solved singlesource shortest path algorithms assume preprocessing computing 7 given unfolding factor f done number values time v 2 generate lp form given cycle period c scanning values inequalities lefthand side covered one 8 ieee transactions parallel distributed systems vol 8 12 december 1997 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 8 9 smallest value righthand side obtain lp form v 2 inequalities thus legal retiming found time ov 3 bellmanford algorithm shortestpath problems easy observe cycle period g rf value v sort set values every u v g 0 f perform binary search set values order find minimum cycle period g rf retiming r fore legal retiming g rf minimum found time ofv definitions functions 7 independent unfolding factor let f maximum value unfolding factors resource consideration perform preprocessing step maximum unfolding factor f time v values mcpf f f f found using retiming algorithm without preprocessing f although minimum cycle period mcpf increasing function behavior minimum iteration period mipf mcpff hard characterize order find minimum iteration period mipf every f f need compute minimum cycle period mcpf every f find one mcpff minimized thus minimum minimum iteration period mipf f f f found time 52 preprocessing algorithm function easily computed allpair shortest path algorithms time ov 3 first compute following two functions f f defined unfolded graph g show compute function 7 f definition 3 let unfolded graph u nodes g integer 0 f function function v f v nonnegative integers f function v f v f positive integers define f every path u v g f f every path u v g f f p f path u v undefined length measure f p f path functions f computed time ov 3 f 3 floydwarshall algorithm allpairs shortest path problems 13 following lemma shows relation functions f lemma 51 let u v two nodes v f unfolding factor integer 0 f exists path v f proof first show following property detailed proof appears 9 10 assume exists path v 1b know corresponding path u v f g f delay p f thus f property f thus lemma proved following theorem shows us generate u v f u v u v theorem 6 consider two nodes u v g every f f otherwise rewrite definition 7 terms paths unfolded graph g p u v f theorem follows detailed proof appears 9 10 function easily computed allpair shortest path algorithms time ov 3 time ov 2 f construct 7 every u v f using theorem 6 concluding remarks paper study fundamental theorems combination two useful techniques retiming unfolding understanding gives us insight many problems retiming unfolding applied multiprocessor scheduling datapath design vlsi computeraided design believe results also applied applications chao sha scheduling dataflow graphs via retiming unfolding 9 flibrarytransproductiontpds2inprod1005051005051doc regularpaper97dot ab 19968 102297 937 9 9 one interesting result shows unfolding retiming retiming effect iteration period therefore need unfold dfg first obtain sults instead operations directly original dfg present efficient algorithm finding minimum iteration period unfolding factor f runs time ofv retiming consider unittime dfg applicable risc multiprocessors software pipelining unittime parallel pipelines etc surprising results obtained pair cycle period c unfolding factor f long cf less iteration bound g exists sched ule ie exists retiming r derive schedule retiming algorithm runs time ove result theorem 2 generalized 8 obtain rateoptimal schedules generaltime dfgs various models understood fundamental properties paper successfully applied results scheduling problem resource constraints 14 one important open question measure minimum iteration period resource constraints unfolding factor results without resource constraints fundamental properties best schedules used derive approximation algorithms acknowledgments work supported part us national science foundation grant mip8912100 us army research ficedurham grant daal0389k0074 darpaonr contract n0001488k0459 r retiming synchronous circuitry retiming unfolding dataflow graphs data flow program graphs static rateoptimal scheduling iterative dataflow programs via optimum unfolding unfolding retiming dataflow dsp programs risc multiprocessor scheduling unfolding retiming highlevel dsp synthesis systematic approach design digitalserial signal processing architectures static scheduling synthesis dsp algorithms various models scheduling dataflow graphs via retiming unfolding scheduling behavioral transformations parallel systems maximum sampling rate digital filters hardware speed constraints data structures network algorithms networks matroids rotation scheduling loop pipelining algorithm tr ctr timothy w oneil edwin hm sha combining extended retiming unfolding rateoptimal graph transformation journal vlsi signal processing systems v39 n3 p273293 march 2005 timothy w oneil edwin hm sha combining extended retiming unfolding rateoptimal graph transformation journal vlsi signal processing systems v39 n3 p273293 march 2005 qingfeng zhuge bin xiao zili shao edwin hm sha chantana chantrapornchai optimal code size reduction softwarepipelined unfolded loops proceedings 15th international symposium system synthesis october 0204 2002 kyoto japan jacome g de veciana c akturan resource constrained dataflow retiming heuristics vliw asips proceedings seventh international workshop hardwaresoftware codesign p1216 march 1999 rome italy qingfeng zhuge zili shao bin xiao edwin hm sha design space minimization timing code size optimization embedded dsp proceedings 1st ieeeacmifip international conference hardwaresoftware codesign system synthesis october 0103 2003 newport beach ca usa qingfeng zhuge bin xiao edwin hm sha code size reduction technique implementation softwarepipelined dsp applications acm transactions embedded computing systems tecs v2 n4 p590613 november hansaem yun jihong kim poweraware modulo scheduling highperformance vliw processors proceedings 2001 international symposium low power electronics design p4045 august 2001 huntington beach california united states meikang qiu zhiping jia chun xue zili shao edwin hm sha voltage assignment guaranteed probability satisfying timing constraint realtime multiproceesor dsp journal vlsi signal processing systems v46 n1 p5573 january 2007 dongming peng mi lu exploring interiteration parallelism within ratebalanced multirate multidimensional dsp algorithms ieee transactions large scale integration vlsi systems v13 n1 p106125 january 2005 michael gordon william thies saman amarasinghe exploiting coarsegrained task data pipeline parallelism stream programs acm sigops operating systems review v40 n5 december 2006 hansaem yun jihong kim soomook moon time optimal software pipelining loops control flows international journal parallel programming v31 n5 p339391 october chiang lanrong dung verification method dataflow algorithms highlevel synthesis journal systems software v80 n8 p12561270 august 2007 karam chatha ranga vemuri hardwaresoftware partitioning pipelined scheduling transformative applications ieee transactions large scale integration vlsi systems v10 n3 p193208 june 2002