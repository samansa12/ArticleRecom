test wrapper test access mechanism cooptimization systemonchip test access mechanisms tams test wrappers integral parts systemonchip soc test architecture prior research concentrated one aspect tamwrapper design problem time ie either optimizing tams set predesigned wrappers optimizing wrapper given tam width paper address general problem carrying tam design wrapper optimization conjunction present efficient algorithm construct wrappers reduce testing time cores wrapper design algorithm improves earlier approaches also reducing tam width required achieve lower testing times present new mathematical models tam optimization use core testing time values calculated wrapper design algorithm present new enumerative method tam optimization reduces execution time significantly number tams designed small experimental results presented academic soc well industrial soc b introduction systemonchip soc integrated circuits composed proces sors memories peripheral interface devices form embedded cores commonplace nevertheless remain several roadblocks rapid efficient system integration test development seen major bottleneck soc design test challenges major contributor widening gap design manufacturing capability 23 1999 international technology roadmap semiconductors 12 clearly identifies test access soc cores one challenges near future test access mechanisms tams test wrappers proposed important components soc test access architecture 23 tams deliver precomputed test sequences cores soc test wrappers translate test sequences patterns applied directly cores test wrapper tam design critical importance soc system integration since directly impacts vector memory depth required ate well testing time thereby affects test cost tam wrapper design minimizes idle time spent tams wrappers test directly reduces number dontcare bits vectors stored tester thereby reducing vector memory depth design efficient test access architectures become important focus research core test integration 1 3 4 5 6 14 17 19 especially timely relevant research supported part national science foundation grant number ccr9875324 since proposed ieee p1500 standard provides lot freedom optimizing standardized scalable wrapper leaves tam optimization entirely system integrator 10 18 general problem soc test integration includes design tam architectures optimization core wrappers test scheduling goal minimize testing time area costs power consumption testing wrappertam cooptimization problem address paper follows given test set parameters cores soc well total tam width determine optimal number tams soc optimal partition total tam width among tams optimal assignment cores tam optimal wrapper design core overall system testing time minimized order solve problem examine progression three incremental problems structured order increasing com plexity serve steppingstones general problem wrappertam design first problem pw related test wrapper design next two problems paw ppaw related wrappertam cooptimization wrapper given core core testing time minimized b tam width required core minimized 2 paw determine assignment cores tams given widths ii wrapper design core soc testing time minimized item ii equals pw 3 partition total tam width among given number tams ii assignment cores tams iii wrapper design core soc testing time minimized items ii iii together equal paw three problems lead pnpaw general problem wrappertam cooptimization described follows number tams soc ii partition total tam width among tams iii assignment cores tams iv wrapper design core testing time minimized items ii iii iv together equal remainder paper formally define analyze problems propose solutions paper assume test bus model tams assume tams soc operate independently however cores single tam tested sequentially implemented either multiplexing cores assigned tam ii testing one cores tam cores tam bypassed furthermore paper addressing problem core test hence discuss issues related test wrapper bypass interconnect test organization paper follows section 2 discuss prior work area tam test wrapper design section 3 present two socs use running examples throughout paper section 4 address problem pw section 5 develop improved integer linear programming ilp models optimizing core assignment tams problem paw section 6 present new ilp models tam width partitioning problem ppaw section 7 present enumerative method often reduce execution time required solve ppaw number tams small finally section 8 examine pnpaw general problem wrappertam cooptimization section 9 concludes paper prior work test wrappers provide variety operation modes including normal operation core test interconnect test optional bypass 16 addition test wrappers need able perform test width adaptation width tam equal number core terminals ieee p1500 standard addresses design flexible scalable wrapper allow modular testing 10 18 wrapper flexible optimized suit type tam test requirements core test collar proposed 21 used test wrapper cores however test width adaptation interconnect test addressed issue efficient deserialization test data use balanced wrapper scan chains discussed 6 balanced wrapper scan chains consisting chains core ios internal scan chains desirable minimize time required scan test patterns tam however mention made method used arrive balanced assignment core ios internal scan chains tam lines testshell proposed 16 provisions ieee p1500 required modes operation furthermore heuristics designing balanced wrapper scan chains based approximation algorithms wellknown bin design problem 7 presented 17 however issue reducing tam width required wrapper addressed number tam designs proposed literature include multiplexed access 11 partial isolation rings 20 core transparency 8 dedicated test bus 21 reuse existing system bus 9 scalable busbased architecture called rail 16 busbased tams flexible scalable appear promising however design largely ad hoc previous methods seldom addressed problem minimizing testing time tam width constraints 1 presents several novel tam architectures ie multiplexing daisy chaining distribution directly address problem optimal sizing tams soc particular internal scan chains considered 1 wrappers functional ios ignored moreover lengths internal scan chains considered fixed therefore 1 directly address problem designing test architectures hard cores recently integrated tam design test scheduling attempted 14 19 however 14 19 problem optimizing test bus widths arbitrating contention among cores test width addressed 19 cost estimation tams based number bridges multiplexers used number tam wires taken consideration fur thermore 14 impact tam widths testing time included cost function relationship testing time tam widths using ilp examined 3 5 tam width optimization power routing constraints studied 4 however problem effective test width adaptation wrapper addressed led overestimation testing time tam width improved wrapper designs new ilp models tam design therefore necessary paper present new wrappertam cooptimization methodology overcomes limitations previous tam design approaches addressed tam optimization wrapper design independent problems new wrapper design algorithm present improves upon previous approaches minimizing core testing time well reducing tam width required core propose approach based ilp solve problems determining optimal partition total tam width determining optimal core assignment tams also address new problem determining optimal number tams soc problem gains importance increasing soc size paper best knowledge first wrappertam cooptimization methodology applied industrial soc 3 example socs order illustrate proposed wrappertam cooptimization methods presented paper demonstrate effective ness use two representative socs running examples throughout paper first one academic soc named d695 de scribed system s2 5 second one industrial soc philips named p93791 number eg 93791 soc name measure test complexity number calculated considering numbers functional inputs n functional outputs chains sc internal scan chain lengths l i1 l test patterns p core well total number cores n soc contribute complexity wrappertam cooptimization prob lem calculate soc test complexity number using formula l ir letters p d695 p93791 refer duke university philips respectively soc d695 consists two combinational iscas85 eight sequential benchmark circuits table 1 presents test data core d695 assume iscas89 circuits contain wellbalanced internal scan chains proposed wrappertam cooptimization methodology also applicable socs containing nonscanned sequential cores since cores treated combinational zerolength internal scan chains purpose testing time calculation soc p93791 contains cores memory cores embedded within hierarchical logic cores table 2 presents data 14 logic cores embedded memories soc p93791 describe core p93791 individually due insufficient space test data individual core p93791 presented 13 experimental results presented paper obtained using sun ultra 80 450 mhz processor 4096 mb memory number scan chain circuit test functional scan lengths patterns ios chains min max table 1 test data cores d695 5 number range scan chain circuit test functional scan lengths patterns ios chains min max logic cores 116127 109813 1146 1 521 memory cores 423085 21396 table 2 ranges test data 32 cores p93791 4 test wrapper design standardized scalable test wrapper integral part ieee p1500 working group proposal 10 test wrapper layer dft logic connects tam core purpose test 23 test wrappers four main modes operation normal operation ii intest coreinternal testing iii extest coreexternal testing ie interconnect test iv bypass mode wrappers may need perform test width adaptation tam width equal number core terminals often required practice since large cores typically hundreds core terminals total tam width limited number soc pins paper address problem tam design intest therefore discuss issues related bypass extest problem designing effective width adaptation mechanism intest broken three problems 17 partitioning set wrapper scan chain elements internal scan chains wrapper cells several wrapper scan chains equal number number tam lines ii ordering scan elements wrapper chain iii providing optional bypass paths across core problems ordering scan elements wrapper scan chains providing bypass paths shown simple 17 partitioning wrapper scan chain elements shown nphard therefore sec tion address problem effectively partitioning wrapper scan chain elements wrapper scan chains recent research wrapper design stressed need balanced wrapper scan chains 6 17 balanced wrapper scan chains equal length possible balanced wrapper scan chains important number clock cycles scan test pattern core function length longest wrapper scanin scanout chain length longest wrapper scanin scanout chain core time required apply entire test set core given p number test patterns time decreases reduced ie wrapper scanin scan chains become equal length figure 1 illustrates difference balanced unbalanced wrapper scan chains bypass extest mechanisms shown figure 1a wrapper scan chain 1 consists two input cells two output cells wrapper scan chain 2 consists three internal scan chains contain 14 flipflops total results unbalanced wrapper scaninout chains scanin scanout time per test pattern 14 clock cycles hand elements tam width wrapper scan chains figure 1b balanced scanin scanout time per test pattern 8 clock cycles wrapper scan chain 1 wrapper scan chain 2 wrapper scan chain 2 wrapper wrapper scan chain 1 wrapper b figure 1 wrapper chains unbalanced b balanced problem partitioning wrapper scan chain elements balanced wrapper scan chains shown equivalent wellknown multiprocessor scheduling bin design problems 17 paper authors presented two heuristic algorithms bin design problem solve wrapper scan chain element partitioning problem given k tam lines sc internal scan chains authors assigned scan elements wrapper scan chains maxfs sog minimized approach effective goal minimize maxfs sog however addressing wrapper design problem part general problem wrappertam cooptimization therefore would also like minimize number wrapper chains created explained follows consider core four internal scan chains lengths 32 8 8 8 respectively 4 functional inputs 2 functional outputs let number tam lines provided 4 algorithms 17 partition scan elements among four wrapper scan chains shown figure 2a giving however scan elements may also assigned 2 wrapper scan chains shown figure 2b also gives maxfs 32 second assignment however clearly efficient terms tam width utilization therefore would useful wrappertam cooptimization strategy consider core 6 largest logic core p93791 core 6 417 functional inputs 324 functional outputs 72 bidirectional ios 46 internal scan chains lengths 7 scan chains 500 bits scan chains 520 bits 9 scan chains 521 bits spectively combine algorithm 17 used create wrapper configurations core 6 values k 1 64 bits since functional inputs core 6 outnumber functional puts value obtained value k illustrated figure 3 graph observe increases decreases series distinct steps scan chain scan chain 8 ff scan chain 8 ff scan chain 8 ff scan chain scan chain 8 ff scan chain 8 ff scan chain 8 ff b figure 2 wrapper design example using four wrapper scan chains b two wrapper scan chains cause k increases core internal scan chains redistributed among larger number wrapper scanin chains thus decreases increase k sufficient remove internal scan chain longest wrapper scanin chain example internal scan chains core 6 distributed among 24 wrapper scanin chains long value remains 1040 k reaches 39 drops 1020 hence 24 k 38 24 wrapper scanin chains need designed wrapper design strategy therefore minimize testing time minimizing identify maximum number k 0 wrapper scan chains actually need created minimize testing time k tam lines provided wrapper set values corresponding values 1 k 1 known set paretooptimal points graph tam width bits 28 longest wrapper scanin chain figure 3 decrease increasing k core 6 pw twopriority wrapper optimization problem section addresses formally stated follows given core n functional inputs functional puts sc internal scan chains lengths l 1 tively tam width k assign n sc wrapper scan chain elements k 0 k wrapper scan chains length longest wrapper scanin scanout chain ii k 0 minimum subject priority priority ii pw based earlier observation minimized even number wrapper scan chains designed less k reduces width tam required connect wrapper problem pw therefore analogous problem bin design minimizing size bins secondary priority bin packing minimiz ing number bins value kmax problem pw always fixed k problem pw reduces partitioning scan chains psc problem 17 therefore clearly nphard since problem psc shown nphard 17 developed approximation algorithm based best fit decreasing bfd heuristic 7 solve pw efficiently algorithm three main parts similar 17 partition internal scan chains among minimal number wrapper scan chains minimize longest wrapper scan chain length ii assign functional inputs wrapper scan chains created part iii assign functional outputs wrapper scan chains created part solve part internal scan chains sorted descending order internal scan chain successively assigned wrapper scan chain whose length assignment closest exceeding length current longest wrapper scan chain intuitively internal scan chain assigned wrapper scan chain achieves best fit wrapper scan chain available internal scan chain assigned current shortest wrapper scan chain next process repeated part ii part iii considering functional inputs outputs internal scan chains length 1 pseudocode algorithm design wrapper illustrated figure 4 procedure design wrapper part 1 sort internal scan chains descending order length 2 internal scan chain l 3 find wrapper scan chain smax current maximum length 4 find wrapper scan chain smin current minimum length 5 assign l wrapper scan chain 6 wrapper scan chain 7 assign l smin part ii 8 add functional inputs wrapper chains created part part iii 9 add functional outputs wrapper chains created part figure 4 algorithm wrapper design minimizes testing time number wrapper scan chains base algorithm bfd heuristic mainly bfd utilizes sophisticated partitioning rule first fit decreasing since scan element assigned wrapper scan chain achieves best fit 7 ffd used subroutine wrapper design algorithm 17 algorithm new wrapper scan chain created possible fit internal scan chain one existing wrapper scan chains without exceeding length current longest wrapper scan chain thus algorithms presented 17 always use k wrapper scan chains design wrapper uses wrapper scan chains possible without compromising test application time worstcase complexity design wrapper algorithm osc log sc sc k sc number internal scan chains k limit number wrapper scan chains figure 3 observe k increased beyond 47 decrease testing time since longest internal scan chain core assigned dedicated wrapper scan chain wrapper scan chain longer longest internal scan chain next derive expression maximum value tam width kmax required minimize testing time core theorem 1 core n functional inputs functional outputs sc internal scan chains lengths l 1 respectively upper bound kmax tam width required minimize testing time given proof test application time core given length longest wrapper scanin scanout chain p number test patterns test set lower bound tam width k therefore given 1 sogg lowest value maxfs sog attain given length cores longest internal scan chain g therefore g let upper bound k minftg reached denoted kmax value k number flipflops assigned wrapper scan chain either scanin scanout whichever flipflops max g therefore kmax smallest integer kmax least sum flipflops wrapper scan chains l thus kmax smallest integer kmax maxfnmg therefore l 2 value kmax core used determine upper bound tam width tam soc section 6 show kmax used bound tam widths obtaining optimal partition total test width among tams soc table 3 presents results savings tam width obtained using design wrapper core 6 larger values k number tam lines actually used far less number available tam lines thus respect tam width utilization design wrapper considerably efficient wrapper design algorithms proposed 17 available tam longest tam width wrapper width utilized scan chain 9 9 3081 available tam longest tam width wrapper width utilized scan chain 22 22 1521 4345 43 1000 table 3 design wrapper results core 6 next section address paw second problem tamwrapper cooptimization frameworkdetermining assignment cores tams given widths optimizing wrapper design core 5 optimal core assignment tams paper assume test bus model tam design assume b tams soc independent however cores tam tested sequential order implemented either multiplexing cores assigned tam figure 5a ii testing one cores tam cores tam bypass mode figure 5b furthermore core bypass may either internal bypass within wrapper external bypass paper directly address design hierarchical tams soc hierarchy flattened purpose tam design hierarchical cores considered level test mode multiplexed cores core core internal bypass external bypass b figure 5 test bus model tam design multiplexed cores b cores bypass test bus problem examine section minimizing system testing time assigning cores tams tam widths known stated follows given n cores b tams test widths determine assignment cores tams wrapper design core testing time minimized problem shown nphard using techniques presented 5 however realistic socs sizes problem instances found small could solved exactly using ilp formulation execution times less second model problem consider soc consisting n cores b tams widths w1 assigned tam j let time taken test core given w j clock cycles testing time w j calculated w number test patterns core length longest wrapper scanin scanout chain obtained design wrapper introduce binary variables x ij 1 n 1 j b used determine assignment cores tams soc let x ij 01 variable defined follows assigned tam j time needed test cores tam j given since tams used simultaneously testing system testing time equals mathematical programming model problem formulated follows objective min subject every core connected exactly one tam describe solution paw obtained briefly describe ilp present ilp formulation based mathematical programming model solve paw goal ilp minimize linear objective function set integer variables satisfying set linear constraints 22 typical ilp model described follows minimize ax subject bx c x 0 objective vector b constraint matrix c column vector constants x vector integer variables efficient ilp solvers readily available commercially public domain 2 minmax objective function mathematical programming model paw easily linearized obtain following ilp model objective minimize subject 1 maximum testing time tam 2 every core assigned exactly one tam solved simple ilp model determine optimal assignments cores tams socs introduced section 3 number variables constraints model measure complexity problem given nb n respectively user time less second cases optimal assignments cores tams given widths soc d695 shown table 4 note testing times shown optimal given tam widths lower testing times achieved optimal tam width partition chosen example table 5 section 6 shows testing time lower 29451 cycles achieved using two tams optimal tam width partition cho sen sections 6 7 address problem determining optimal width partitions tam tam testing time widths assignment clock cycles table 4 core assignment tams soc d695 lower bounds system testing time soc n cores b tams widths w1 respectively lower bound total testing time given g testing time core depends width test bus assigned clearly testing time core least min j ft w j g since overall system testing time constrained core largest test time therefore g intuitively value time needed test core largest testing time assigned widest tam soc d695 two tams bits 16 bits respectively lower bound testing time 6215 cycles corresponds testing time needed core 5 assigned tam 1 lower bound system testing time depend given tam widths determined bound related length longest internal scan chain core lower bound becomes tighter increase number tams theorem 1 know core core sc internal scan chains lengths l i1 l respectively test set core p test patterns lower bound testing time given 1maxrfl ir g p maxrfl ir g therefore soc n cores lower bound system testing time given gg intuitively means system testing time lower bounded time required test core largest testing time 6 optimal partitioning tam width section address ppaw problem determining optimal widths tams ii optimal assignments cores tams conjunction wrapper design generalization core assignment problem paw describe testing times computed using design wrapper algorithm section 4 used design tam architecture assume total system tam width w theorem 1 section 4 know width tam need exceed maximum value upper bound kmax core soc denote upper bound width individual tam wmax tams wider wmax decrease testing time problem ppaw minimizing testing time optimal allocation width among tams stated follows given soc n cores b tams total width w determine partition w among b tams assignment cores tams wrapper design core total testing time minimized problem shown nphard using techniques presented 5 however many realistic socs including p93791 problem instance size reasonable solved exactly using ilp formulation also complexity solutions related number cores soc numbers io ports scan chains number transistors nets chip mathematical programming model ppaw shown objective min subject 1 every core connected exactly one tam 2 ie sum tam widths 3 w j wmax 1 j b ie tam wmax bits wide objective function constraints mathematical programming model must linearized order express form ilp model solved ilp solver first express w j sum w adding new binary indicator variables jk 1 j b 1 mathematical programming model 1 tam j k bits wide 0 otherwise addition following constraints included model 1 tam values width 1 wmax 2 tam one width intuitively every tam j exactly one value k therefore new indicator variables determine width w j tam objective function becomes g testing time k various values tam width k efficiently calculated using design wrapper algorithm shown section 4 stored form lookup table reference ilp solver finally nonlinear term jk x ij objective function linearized replacing variable ijk following two constraints 2 explained follows consider first case x constraints 1 2 ijk 1 jk 2y ijk jk since jk 1 therefore ijk must equal new variables constraints yield following ilp formulation objective minimize subject 2 3 4 5 6 number variables constraints ilp models given b 3n respectively solved ilp model ppaw several values w b table 5 figure 6 present values testing time soc d695 obtained two tams total tam width partition among two tams shown also compare testing times obtained testing times obtained 5 testing time using new wrapper design least order magnitude less time required 5 cases expected since inefficient deserialization model used 5 reductions testing time diminish increasing w pragmatic choice w system might therefore point system testing time begins level figure 6 occurs total results 5 current wrappertam cooptimizaion tam partition testing partition testing execution 28 36 432 2174501 1620 22246 110 44 1232 2123437 1034 20094 130 48 reported 5 table 5 testing time d695 2 total tam width bits 28 6420406080100120140160testing time 1000 clock cycles figure 6 testing time d695 2 table 6 presents values testing time obtained three tams testing times lower values obtained general however w 14 testing time included table 6 small values w larger number tams makes widths individual tams small testing time begins level time hence good choice trading tam width testing time total tam width execution tam partition core testing time 28 4816 2121323113 24021 523 36 41616 2221232123 19573 850 44 41822 1111232123 16975 48 41826 1111232123 16975 lpsolve halted 180 minutes table 6 testing time d695 obtained 3 table 7 presents system testing times soc p93791 obtained using two tams halted ilp solver 1 hour value w tabulated best results obtained done determine whether efficient partition tam width corresponding testing time obtained using ilp model within reasonable execution time next section present optimal testing times obtained p93791 using new enumerative methodology show testing times obtained table 6 table 7 using ilp model ppaw indeed either optimal close optimal testing 28 919 1119160 36 927 924909 testing 44 935 873276 48 939 835526 52 943 807909 table 7 testing time p93791 obtained 2 7 enumerative tam sizing section 6 showed tam optimization carried using ilp model ppaw problem however ilp nphard problem execution times get high large socs faster algorithm tam optimization produces optimal results short execution times clearly needed section 5 observed execution time model problem paw less 1 second cases next demonstrate short execution time ilp model exploited construct series paw models solved address ppaw problem pseudocode enumerative algorithm ppaw explicitly enumerates unique partitions w among individual tams presented figure 7 procedure ppaw enumerate 1 let 2 number tams 3 unique partitions w enumerated 4 tam 5 tam width w j 1 6 create ilp model pa tam widths using design wrapper 7 determine core assignment testing time 8 record tam design minimum testing time figure 7 algorithm enumerative tam design ilp models generated value w line 6 ppaw enumerate solved tam width partition core assignment delivering best testing time recorded solution obtained using ppaw enumerate always optimal generate unique tam width partitions choose solution lowest cost since lines 6 7 take less second execute execution time ppaw enumerate 2 pb w seconds pb w number partitions w among b tams enumerated line 3 problem determining number partitions pb w given choice b tams addressed using partition theory combinatorial mathematics 15 15 pb w shown approximately bb 1 w 7 1 w since w unique ways dividing integer w two smaller integers w1 w2 thus ppaw enumerate obtains optimal solution ppaw problem 64 seconds 3 number partitions work p3w w 3i1 formula value c found 341 fore execution time ppaw enumerate bounded 682 seconds 116 minutes execution time clearly reasonable even large w experiments used sun ultra 80 solved pa models well second execution time time taken ppaw enumerate therefore significantly lower upper bound 2 pb w seconds even large values w used ppaw enumerate obtain optimal tam width assignment minimal testing time d695 p93791 results soc d695 presented table 8 testing time 3 always less testing time difference widens larger w explained follows smaller values w individual tam testing time individual tam increases sharply observed earlier figure 3 exec exec time 28 44 1034 20094 2 41822 16975 48 table 8 results soc d695 using ppaw enumerate table 9 presents optimal results enumerative tam optimization p93791 soc comparing results presented table 7 note results table 7 indeed close optimal example testing time presented table 7 5 higher optimal note socs execution time paw 1 second hence similar execution times ppaw enumerate obtained socs d695 p93791 execution times significantly lower tables 5 6 exec exec time 28 523 1031200 1 2323 1030920 13 44 2123 711256 2 51623 659856 33 48 2325 634488 2 91623 602613 42 table 9 results soc p93791 using ppaw enumerate compared optimal testing times presented tables 8 9 testing times obtained using equal partition w among b tams testing time using optimal partition w significantly lower obtained using equal partition values w example partition w1 testing time clock cycles increase 286 testing time 475598 clock cycles obtained using optimal partition execution time ppaw enumerate smaller ilp model section 6 number enumerations two three tams reasonable however tam optimization carried larger number tams larger number partitions w ilp model ppaw likely efficient terms execution time addition ilp model presented section 6 likely efficient constraints arising placeandroute power issues included tam optimization 4 8 general problem wrappertam co optimization previous sections presented series problems test wrapper tam design generalized version problem preceding section present pnpaw general problem wrappertam optimization problems preceding sections lead also show solutions previous problems used formulate solution general problem general problem stated follows given soc n cores total tam width w determine number tams partition w among tams assignment cores tams wrapper design core total testing time minimized use method restriction prove pnpaw np hard first define new problem pnpaw 1 consists instances pnpaw cores soc single internal scan chain functional terminals hence core testing time 1bit tam 2bit tam optimal solution pnpaw 1 therefore always result two tams width one bit problem reduces partitioning set c cores soc two subsets c1 c c1 subset assigned separate 1bit tam difference sum testing times cores first 1bit tam sum testing times cores 2nd 1bit tam minimized formally optimization cost function pnpaw 1 written objective minimize testing time core c 1bit tam next consider partition problem 7 whose optimization variant stated follows partition given finite set size sa 2 z element 2 determine partition two subsets a1 a1 sa sa minimized problem pnpaw 1 equivalent partition established following four mappings c ii c1 a1 sa since partition known nphard 7 pnpaw 1 pnpaw must also nphard solve pnpaw enumerate solutions ppaw several values b value w optimal number tams tam width partition core assignment wrapper designs cores obtained solutions ppaw d695 values b ranging 2 8 illustrated figures 8 8 b w values 12 16 bits respectively figure observe b increased 2 testing time decreases minimum value reached particular value b testing time stops decreasing starts increasing b increased larger b width per tam small testing time tam increases significantly number tams testing time 1000 clock cycles number tams 8425475525575testing time 1000 clock cycles figure 8 testing time d695 obtained increasing values b next present conjecture formalizes observation made figures 8a 8b conjecture 1 let wb denote optimal testing time total tam width w conjecture execution pnpaw enumerate certain value b testing time greater equal testing time previous value b total tam width w enumeration procedure halted optimal value b recorded therefore conjecture 1 used prune search space optimal wrappertam design since execution time pnpaw enumerate particularly high large values b achieve significant speedups tam optimization halting enumeration soon minimum value reached based conjecture 1 executed pnpaw enumerate several values w table 10 present best testing times obtained d695 values w value w number tams width partition testing time core assignment providing minimum testing time shown tam optimum optimal optimal optimum width number width core testing w tams partition asignment time 28 5 12889 4242354154 24197 table results obtained d695 several values w 9 conclusion investigated problem test wrappertam cooptimization socs based test bus model tam design particular formally defined problem determining number tams partition total tam width among tams assignment cores tams wrapper design core soc testing time minimized address problem formulated three incremental problems test wrapper tam optimization serve steppingstones general problem stated proposed efficient heuristic algorithm based bfd wrapper design problem pw minimizes testing time tam width paw problem determining core assignments wrapper designs formulated ilp model results optimal solutions short execution times formulated ilp model solve ppaw problem tam width partioning paw leads ilp model solved obtain optimal tam designs reasonablysized problem instances also presented new enumerative approach ppaw offers significant reductions execution time finally defined new wrap pertam design problem pnpaw number tams designed must determined pnpaw final step progression incremental wrappertam design problems includes pw paw ppaw enumerative algorithm solve pnpaw proposed search space pruned significantly improvement testing time would result applied tam optimization models realistic example soc well industrial soc experimental results demonstrate feasibility proposed techniques best knowledge first reported attempt integrated wrappertam cooptimization applied industrial soc future work intend extend tam optimization models include several tam configurations including daisychained cores tams 1 forked merged tams 5 intend extend models multiple wrappers tam active test data transfer mode time allow us address problems testing hierarchical cores well extest ilp useful optimization tool reasonablysized problem instances execution times increase significantly complex socs large values b also true enumerative approach problems ppaw pnpaw process designing heuristic algorithms problems formulated paper efficiently address wrappertam cooptimization large tam widths well large numbers tams furthermore plan add constraints related power dissipation routing complexity layout area tam optimization models acknowledgements authors thank harry van herten erwin waterlander help providing data philips soc p93791 henk hollmann wil schilders help partition theory jan korst help nphardness proof pnpaw also thank sandeep koranne harald vranken constructive review comments earlier versions paper r scan chain design test time reduction corebased ics lpsolve 30 design systemonachip test access architectures using integer linear programming design systemonachip test access architectures placeandroute power constraints optimal test access architectures systemona chip computers intractability guide theory npcompleteness fast low cost testing technique corebased systemonchip testing reusable ip case study ieee p1500 standard embedded core test direct access test scheme design block core cells embedded asics test wrapper test access mechanism cooptimization systemonchip integrated systemonchip test framework course combinatorics structured scalable mechanism test access embedded reusable cores wrapper design embedded core test using ieee p1500 sect test plugnplay ilp formulation optimize test access mechanism systemonchip testing using partial isolation rings test corebased designs structured test reuse methodology corebased system chips model building mathematical programming testing embeddedcorebased system chips tr ctr feng jianhua long jieyi xu wenhua ye hongfei improved test access mechanism structure optimization technique systemonchip proceedings 2005 conference asia south pacific design automation january 1821 2005 shanghai china qiang xu nicola nicolici krishnendu chakrabarty multifrequency wrapper design optimization embedded cores average power constraints proceedings 42nd annual conference design automation june 1317 2005 san diego california usa tomokazu yoneda kimihiko masuda hideo fujiwara powerconstrained test scheduling multiclock domain socs proceedings conference design automation test europe proceedings march 0610 2006 munich germany tomokazu yoneda masahiro imanishi hideo fujiwara interactive presentation soc test scheduling algorithm using reconfigurable union wrappers proceedings conference design automation test europe april 1620 2007 nice france test scheduling reconfigurable core wrappers ieee transactions large scale integration vlsi systems v14 n3 p305309 march 2006 julien pouget erik larsson zebo peng multipleconstraint driven systemonchip test time optimization journal electronic testing theory applications v21 n6 p599611 december 2005 anuja sehgal sandeep kumar goel erik jan marinissen krishnendu chakrabarty hierarchyaware areaefficient test infrastructure design corebased system chips proceedings conference design automation test europe proceedings march 0610 2006 munich germany sudarshan bahukudumbi krishnendu chakrabarty waferlevel modular testing corebased socs ieee transactions large scale integration vlsi systems v15 n10 p11441154 october 2007 anuja sehgal krishnendu chakrabarty efficient modular testing socs using dualspeed tam architectures proceedings conference design automation test europe p10422 february 1620 2004 anuja sehgal vikram iyengar mark krasniewski krishnendu chakrabarty test cost reduction socs using virtual tams lagrange multipliers proceedings 40th conference design automation june 0206 2003 anaheim ca usa zhanglei wang krishnendu chakrabarty seongmoon wang soc testing using lfsr reseeding scanslicebased tam optimization test scheduling proceedings conference design automation test europe april 1620 2007 nice france sandeep kumar goel erik jan marinissen layoutdriven soc test architecture design test time wire length minimization proceedings conference design automation test europe p10738 march 0307 sandeep kumar goel kuoshu chiu erik jan marinissen toan nguyen steven oostdijk test infrastructure design nexperia home platform pnx8550 system chip proceedings conference design automation test europe p30108 february 1620 2004 jan marinissen rohit kapur maurice lousberg teresa mclaurin mike ricchetti yervant zorian ieee p1500s standard embedded core test journal electronic testing theory applications v18 n45 p365383 augustoctober 2002 anuja sehgal sule ozev krishnendu chakrabarty tam optimization mixedsignal socs using analog test wrappers proceedings ieeeacm international conference computeraided design p95 november 0913 sandeep kumar goel erik jan marinissen test time reduction algorithm test architecture design corebased system chips journal electronic testing theory applications v19 n4 p425435 august qiang xu nicola nicolici delay fault testing corebased systemsonachip proceedings conference design automation test europe p10744 march 0307 sandeep kumar goel erik jan marinissen onchip test infrastructure design optimal multisite testing system chips proceedings conference design automation test europe p4449 march 0711 2005 vikram iyengar krishnendu chakrabarty erik jan marinissen wrappertam cooptimization constraintdriven test scheduling tester data volume reduction socs proceedings 39th conference design automation june 1014 2002 new orleans louisiana usa sehgal k chakrabarty test planning effective utilization portscalable testers heterogeneous corebased socs proceedings 2005 ieeeacm international conference computeraided design p8893 november 0610 2005 san jose ca qiang xu nicola nicolici modular rapid testing socs unwrapped logic blocks ieee transactions large scale integration vlsi systems v13 n11 p12751285 november 2005 vikram iyengar krishnendu chakrabarty erik jan marinissen test access mechanism optimization test scheduling tester data volume reduction systemonchip ieee transactions computers v52 n12 p16191632 december sandeep kumar goel erik jan marinissen soc test architecture design efficient utilization test bandwidth acm transactions design automation electronic systems todaes v8 n4 p399429 october anuja sehgal fang liu sule ozev krishnendu chakrabarty test planning mixedsignal socs wrapped analog cores proceedings conference design automation test europe p5055 march 0711 2005 matthew w heath wayne p burleson ian g harris synchrotokens eliminating nondeterminism enable chiplevel test globallyasynchronous locallysynchronous socs proceedings conference design automation test europe p10410 february 1620 2004 zahra ebadi alireza n avanaki resve saleh andre ivanov design implementation reconfigurable flexible test access mechanism systemonchip integration vlsi journal v40 n2 p149160 february 2007 jan marinissen role test protocols automated test generation embeddedcorebased system ics journal electronic testing theory applications v18 n45 p435454 augustoctober 2002 anuja sehgal sule ozev krishnendu chakrabarty test infrastructure design mixedsignal socs wrapped analog cores ieee transactions large scale integration vlsi systems v14 n3 p292304 march 2006