group theory computational linguistics currently much interest bringing together tradition categorial grammar especially lambek calculus recent paradigm linear logic strong ties one active research area designing noncommutative versions linear logic abrusci 1995 retor 1993 sensitive word order retaining hypothetical reasoning capabilities standard commutative linear logic dalrymple et al 1995 connections lambek calculus computations groups long known van benthem 1986 serious attempt made base theory linguistic processing solely group structure paper presents model demonstrates connection linguistic processing classical algebraic notions noncommutative free group conjugacy group presentations grammar model ggrammar collection lexical expressions products logical forms phonological forms inverses phrasal descriptions obtained forming products lexical expressions cancelling contiguous elements inverses ggrammar provides symmetrical specification relation logical form phonological string neutral parsing generation modes show ggrammar oriented modes reformulating lexical expressions rewriting rules adapted parsing generation strong decidability properties inherent reversibility give examples showing value conjugacy handling longdistance movement quantifier scoping parsing generation paper argues moving free monoid vocabulary v standard formal language theory free group v deep affinities linguistic phenomena classical algebra come surface consequences tapping mathematical connections thus established considerable b introduction currently much interest bringing together tradition categorial grammar especially lambek calculus 10 recent paradigm linear logic 8 strong ties one active research area concerns design noncommutative versions linear logic 1 14 sensitive word order retaining hypothetical reasoning capabilities standard commutative linear logic make welladapted handling phenomena quantifier scoping 4 connections lambek calculus group structure long known 16 linear logic aspects strongly reminiscent groups producerconsumer duality formula linear negation serious attempt made far base theory linguistic description solely group structure paper presents model ggrammars group grammars argues ffl standard grouptheoretic notion conjugacy central g grammars wellsuited uniform description commutative noncommutative aspects language ffl use conjugacy provides elegant approach longdistance dependency scoping phenomena parsing generation ffl ggrammars give symmetrical account semanticsphonology rela tion possible extract via simple group calculations rewriting systems strong decidability properties computing relation parsing generation modes paper organized follows section 2 introduce group com putation model using standard algebraic tools free groups conjugacy normal subsets main deviation traditional mathematical practice focus given notions compatible preorder normal submonoid whereas compatible equivalence relation normal subgroup usual algebra section 3 applies model linguistic description presents ggrammar fragment english involving quantification relative pronouns sections 4 5 concerned generation parsing correspond two ways exploiting relation preorder associated ggrammar one generation logical forms iteratively rewritten combinations logical forms phonological forms phonological forms left parsing phonological forms rewritten combinations logical forms inverses cancellation adjacent inverses exactly one logical form left section 6 introduces concept diagrams provide intuitive powerful geometrical representation ggrammars diagrams originate work van kampen 17 found applications combinatorial group theory studies decidable subclasses word problem groups 11 also used produce complete term rewriting specifications certain classes groups 2 section 7 discusses detail conditions ggrammars associated rewriting systems lead equivalent definitions semanticsphonology relation results used comparing ggrammars contextfree grammars dcgs categorial grammars section also provides short discussion advantages ggrammars describing uniform way commutative noncommutative aspects language section 8 applies certain group morphisms show strong computability properties ggrammars parsing generation computation monoid set together product theta written ab ffl product associative ffl element 1 2 neutral element group monoid every element inverse gamma1 preorder set reflexive transitive relation set relation also symmetrical rx ry x preorder called equivalence relation antisymmetrical called partial order preorder r group g said compatible group product iff whenever rx rx 21 normal submonoids group consider compatible preorder notated x group g following properties x 2 g immediate g two elements group g said conjugate exists 2 g x fourth property says set elements g x 1 set contains along element conjugates normal subset g clearly submonoid g called normal submonoid g conversely easy show normal submonoid g one associate preorder compatible g indeed lets define x xy relation clearly reflexive transitive hence preorder also compatible g x hence x gamma1 implying x 1 preorder compatible remark general subgroup g iff x implies x compatible preorder equivalence relation therefore congruence g case normal subgroup g notion plays pivotal role classical algebra generalization submonoids g basic algebraic theory computation presented subset g intersection normal submonoids g containing resp subgroups g containing normal submonoid g resp normal subgroup g called normal submonoid closure nms g resp normal subgroup closure ngs g 22 free group v consider arbitrary set v called vocabulary form socalled set atoms v notated obtained taking elements v v formal inverses v gamma1 elements consider set f v consisting empty string notated 1 strings form x 1 x 2 x n x atom v assumed string reduced never contains two consecutive atoms inverse substring vv gamma1 v gamma1 v allowed appear reduced string ff fi two reduced strings concatenation fffi reduced eliminating substrings form vv gamma1 v gamma1 v proven reduced string fl obtained way independent order eliminations way product f v defined easily shown f v becomes noncommutative group called free group 23 group computation say ordered pair group computation structure 1 v set called vocabulary set generators 2 r subset f v called lexicon set relators 1 1 readers familiar group theory terminology evoke classical notion group presentation generators relators main difference definition classical case set relators taken symmetrical contain contains r additional assumption made preorder becomes equivalence relation submonoid closure nmr r f v called result monoid group computation structure gcs elements nmr called computation results simply results r relator ff arbitrary element f v ffrff gamma1 called quasirelator group computation structure easily seen set rn quasirelators equal normal subset closure r f v nmrn equal nmr computation relative gcs finite sequence quasirelators product r 1 evidently result called result computation c shown result monoid entirely covered way result result computation computation thus seen witness proof fact given element f v result computation structure 2 specific computation tasks one focusses results certain sort instance results express relationship inputoutput input output assumed belong certain object types example computational linguistics one often interested results express relationship fixed semantic input possible textual output generation mode conversely results express relationship fixed textual input possible semantic output parsing mode group computation structure given subset f v call pair gcsa gcsa group computation structure acceptors say set acceptors public interface gcsa result gcs belongs public interface called public result gcsa ggrammars show formal concepts introduced applied problems grammatical description computation start introducing grammar call ggrammar group grammar fragment english see fig 1 ggrammar group computation structure acceptors vocabulary log v phon consisting set logical forms v log disjoint set phonological elements example words v phon examples phonological elements john saw every examples logical forms j sjl logical forms glossed respectively john john saw louise every man x woman x saw grammar lexicon set relators r given list lexical schemes example given fig 1 line lexical scheme represents set relators f v first line ground scheme corresponds single relator j john gamma1 next four lines sixth line nonground scheme corresponds infinite set relators 2 analogy view constructive logics clear call result called formula type call computation called proof l louise man figure 1 ggrammar fragment english obtained instanciating term metavariable notated uppercase logical form remaining lines use greek letters expression metavariables ff replaced arbitrary expression f v thus whereas term metavariables b range logical forms expression metavariables ff fi range products logical forms phonological elements inverses f v 3 notation px employed express fact logical form containing argument identifier x equal application abstraction p x identifier metavariable x px ranges identifiers x z notated lowercase italics always ground metavariable p ranges logical form abstractions missing one argument instance zsjz matching metavariables logical forms allow limited use higherorder unification instance one match px sjx taking vocabulary set relators specified define group computation structure describe set acceptors computation structure take set elements f v products following form logical form stands semantics w phonological element w stands word expression way encoding ordered pair consisting logical form phonological string w 1 inverse product wn public result swn group computation structure 3 expression metavariables employed grammar forming set conjugates ff exp ff gamma1 certain expressions exp example exp evnxpx px gamma1 conjugacy allows enclosed material exp move block expressions f v see sections 4 5 l louise man w woman ran tn n ttnxpx n ff figure 2 generationoriented rules acceptors v r ggrammar interpreted meaning logical form expressed phonological string w 1 let us give example public result relative grammar fig 1 consider relators instanciations relator schemes quasirelators means sjl louise result computation result obviously public one means logical form sjl verbalized phonological string john saw louise generation applying directly done definition group computation structure order obtain public results somewhat unintuitive often easier use preorder b c 2 f v abc relator abc 1 therefore b taking remark account possible write relators ggrammar rewriting rules fig 2 use notation instead distinguish rules parsing rules introduced next section rules fig 2 systematic structure lefthand side rule consists single logical form taken corresponding relator ggrammar righthand side obtained moving remaining elements relator right arrow rules fig 2 privilege rewriting logical form expression f v called generationoriented rules associated ggrammar using rules fact preorder compatible product f v fact sjl louise obtained simpler way previously l louise seventh first second rules properly instanciated therefore transitivity compatibility preorder john saw l john saw louise proves sjl john saw louise equivalent saying sjl louise result generation examples given fig 3 first example straightforward works similarly one seen logical form isjlp one derive phonological string john saw louise paris 41 longdistance movement quantifiers second third examples parallel show derivation string every man saw woman two different logical forms penultimate last steps example interesting penultimate step second example fi instanciated saw effect moving whole expression woman gamma1 position therefore allow cancellation gamma1 net effect thus replace identifier string woman last step ff instanciated neutral element 1 effect replacing x every man penultimate step third example ff instanciated neutral element effect replacing x every man fi instanciated saw man effect replacing woman remark cases expression similar ff arbitrary vocabulary elements easily seen giving sjl p john saw l p john saw louise p john saw louise paris woman taking every man saw woman taking ff gamma1 every man x man saw taking every man saw woman taking man tttmxslx ran ttmxslx ran ff man ff man ff man ff man louise saw ran taking figure 3 generation examples ff appropriate value f v move arbitrarily left right together solidarity also freely permute cycli cally giving appropriate value ff expression ff ff take value k permutations general possible values given ff fi etc examples paper understood intuitively terms two properties see mechanism concerted movement quantified noun phrases move whatever place assigned expansion scope predicate place unpredictable time expansion quantified logical form identifiers act target markers quantified noun phrase way get rid identifier x moving x gamma1 therefore corresponding quantified noun phrase place cancel x fourth example exploits similar mechanism handling relative clauses time relative pronoun produced identifier inverse x gamma1 also produced capability moving whatever position finally assigned relative verbs argument x 42 word movement group morphisms derivations fig 3 show possible rewritings four given logical forms phonological strings natural ask whether rewritings ones possible fact case confine showing expression rewritten phonological string every man saw woman whatever values one may choose expression metavariables ff fi 4 start considering variant original vocabulary v namely vocabulary new letters appearing consider application oe reduced expression g f v expression f v 0 obtained replacing x gamma1 every man resp man gamma1 every gamma1 similarly replacing resp gamma1 g b gamma1 woman resp woman application oe clearly group morphism f v f v 0 fact isomorphism oe gamma1 maps resp b every man x woman consider vocabulary v application obtained mapping reduced expressions f v 0 4 course certain values ff fi first expression rewrite phonological string oe oe figure 4 group morphisms free groups different vocabularies group f v isomorphic f v 0 turns projects onto f v 00 phonological subgroup f v phon kept invariant three morphisms resp 1 clearly group morphism consider composition morphisms fig 4 morphism oe following properties ffl maps phonological strings ffl maps x resp every man resp woman ffl maps every man saw b woman every man saw woman phonological strings kept invariant mapping oe whenever one gives values ff fi fl phonological string values seen values ff fi one man saw woman establishes initial claim simple proof illustrates clearly power group operations changing presentation group f v isomorphic one x reexpressed terms b phonological elements one obtains effects interpreted constituent movements furthermore mandatory output constrained string containing phonological elements parsing compatible preorder f v corresponds reverse compatible preorder defined equivalently normal submonoid 0 f v associated inverse monoid normal submonoid associated 0 contains iff contains clear one present relations etc equivalent way ran etc louise man woman ran every figure 5 parsingoriented rules suppose move right arrow elements appearing left single phonological element relator obtain rules fig 5 call parsingoriented rules associated ggrammar reasoning generation case easy show derivation using rules leading relation ps lf ps phonological string lf logical form corresponds public result ggrammar parsing examples given fig 6 converses generation examples given earlier first example first rewrite phonological elements expression appearing righthand side rules metavariables renamed standard way avoid name clashes rewriting taken place parallel course permitted could obtained result rewriting words one one perform certain unifications unified j c p b unified l finally 5 another possibility point would unify l e rather b would lead construction logical form ilp unification e john saw louise paris every man saw woman either man louise saw ran figure parsing examples e unified sjl obtain logical form isjlp last step might seem feasible unify e iep instead fact forbidden would mean logical form iep finite tree require condition prevents selfcancellation logical form logical form strictly contains 51 quantifier scoping second example start unifying n w next sab taking move next sab taking unified b leads expression choice either unify sxy qy px first case continue unifying px smwysxy leading output evmxsmwysxy second case continue unifying qy evmxsxy leading output smwyevmxsxy two possible quantifier scopings input string thus obtained corresponding certain order performing unifications last example interesting step one third step ff instanciated slb gamma1 effect moving x close missing argument b louise saw cancel unification b consequently fill second argument position logical form headed step px ready unified slx finally leading expected logical form output sentence 6 diagrams 61 definition definition diagram vocabulary v finite graph 1 planar embedded plane way edges cross 2 connected 3 directed edges carry orientation 4 labelled edge carries label taken v diagram separates plane n1 connected open sets exterior set points connected point infinity without crossing edge logical form would conduct output sjilp one wants prevent output several approaches possible first one consists typing logical form syntactic categories second one notion logicalform wellformedness perhaps interpretability disallowing logical forms ilp louise paris itwp woman paris although might allow form tiwp woman paris 6 assumed metavariables corresponding identifiers p q instanciated arbitrary different values x leave discussion point future paper n open internal regions consisting points connected without crossing edge separated exterior internal region called cell example diagram vocabulary fa b cg given fig 7000000001111111111 c c c c c figure 7 diagram boundary cell set edges constitute topological boundary boundary diagram set edges points connected exterior one choses arbitrary vertex figure boundary diagram one moves boundary conventional clockwise fashion orientation adopt throughout sequel one collects list edges either directed way movement contrary producing sequence atoms positive first case negative second one one construct word f v word said boundary word diagram 62 reduced diagrams say diagram reduced exist pair edges common vertex label oriented oppositely relative edges point towards point least one two angles formed two edges free contain another diagram edge see fig 8 63 cyclically reduced words word w v v gamma1 said cyclically reduced iff every cyclic permutation reduced easy see 1 reduced word cyclically reduced iff form aw 0 gamma1 atom positive negative 2 conjugate class word contains cyclically reduced words cyclic permutations c c c figure 8 reduced diagram diagram previous figure reduced two c edges outgoing vertex 64 relator cells consider group computation structure loss gener ality assumed relators r cyclically reduced result monoid invariant one considers new set relators consisting conjugates original ones unless especially stated otherwise assumption made relators considered take cyclically reduced relator construct labelled cell following way take circle divide n arcs label clockwiseith arc x orient clockwise e anticlockwise otherwise labelled cell thus obtained call relator cell associated r rather presenting gcs set relator words done possible present set relator cells one gives set standard presentation gcs derived taking arbitrary origin cell reading relator word clockwise origin origin chosen matter origin leads conjugate relator affect notion result 65 fundamental theorem combinatorial group theory able state j rotman calls fundamental theorem combinatorial group theory 15 give theorem slightly extended form adapted case normal submonoid closure standard case normal subgroup closure follows immediately taking set relators containing along r theorem 1 let group computation structure relators r 2 r cyclically reduced w cyclically reduced word f v w 2 nmr exists reduced diagram boundary word w whose regions relator cells associated elements r figure 9 star diagram proof provided easily recovered property demonstrated 11 chapter 5 section 1 proof involves following remark one considers product arbitrary elements f v product read boundary word star diagram represented fig 9 starting progressing clockwise star diagram general reduced form reduced stepwise process equating edges respect definition reduced diagram example lets consider gcs vocabulary set cyclically reduced relators cyclically reduced word c element nmr obtained forming product form star diagram product obtain first diagram shown fig 10 diagram reduced instance two straight edges labelled c offending reduction condition one stitches two edges together one obtains second diagram figure stitching corresponds onestep reduction boundary word first diagram boundary word second continuing way one obtains fifth diagram figure reduced whose boundary wanted 66 linguistic examples previous considerations applied linguistic examples given body article consider examples involve c c c c c c c c c c c c c c c c c c c c c c figure 10 transformation diagram reduced form adapted 11 longdistance dependencies complex examples treated introduced multirelators 76 l p saw paris louise john 1 figure 11 cells associated grammar relators saw john louise paris l figure 12 diagram establishing relationship logical form phonological string lets consider relator schemes fig 1 l louise fig 11 cells numbered 1 5 associated instanciations schemes shown fig 12 construct reduced diagram whose cells relator cells fig 11 boundary word diagram expression isjlp paris john gamma1 proves ggrammar logical form isjlp associated phonological string john saw louise paris note 1 analogy reading diagram top bottom resp bottom top generation resp parsing process 7 7 ggrammars rewriting discussion parsing generation saw derivation according rewriting rules figs 2 5 always sound respect group computation structure consider opposite question namely whether complete respect public result relative gcs obtained rewritings answer question given theorems demonstrated theorems 4 7 roughly state rewriting system complete relative gcs system contain ground cycles situations ground term derive condition true rewriting systems figs 2 5 instance generation case checked ground logical form appears righthand side rule fig 2 strictly smaller ground logical form lefthand side therefore precluding ground cycles condition related decidability generation parsing prove 8 ggrammar finitely enumerable parsing generation terminology 6 inherently reversible property difficult guarantee formalisms relying empty categories longdistance dependencies problem avoided use group structure purpose 71 oriented relators rewriting rules suppose relator relator said oriented index number 1 n chosen qcf rule qcf stands quasicontextfree f v pair notated 7 ff group computation structure r relator r r f v rule 7 said rule associated relator r oriented index 7 also analogy bottomup reading chart parsing approach case example complex examples instance multiword expression parsing better analogy would colmerauers qsystems 3 however analogies break considering examples involving longdistance dependencies element set relators r orientation chosen one says orientation given gcs associating qcf rule relator one obtains qcf system associated orientation derivation relative qcf system finite sequence elements strings formed elements v inverses exists ff fi 1 7 b rule rewriting system replace ment step 2 two strings v one find derivation identical say derives write 7 using notation rewrite rules context make clear case intended following proposition stating rewriting implies preorder straightforward theorem 2 7 derivation relation associated oriented gcs 2 proof immediate consequence fact r relator therefore ut 72 anteriority lets consider qcf system associated oriented gcs b elements exists rule system form 7 ffbfi say immediately anterior b relative system equivalently relative oriented gcs exists finite sequence b c immediately anterior c i1 say anterior b noted b say anteriority relation acyclic iff never case say noetherian iff descending chain 1 noetherian fortiori acyclic rule qcf system lefthand side called mother rule equivalently oriented relator corresponding rule set rule mothers subset set atoms called set potential mothers associated qcf system note gamma1 set atoms inverses potential mothers 73 rewriting theorem basic case ready state theorem provides conditions reciprocal theorem 2 holds sketch proofs first need lemma lemma 3 suppose delta diagram relative oriented acyclic gcs also set potential mothers simultaneously contain element inverse relator cell diagram mother boundary diagram proof take cell gamma diagram consider mother cell boundary diagram done otherwise edge separating gamma another cell gamma 0 therefore gamma1 boundary gamma 0 consequence clockwise orientations cells condition potential mothers gamma1 cannot mother gamma 0 therefore mother 0 gamma 0 anterior 0 diagram boundary done otherwise repeat operation anteriority relation acyclic iteration must stop point proves lemma ut state theorem theorem 4 7 derivation relation associated oriented gcs anteriority acyclic 2 set potential mothers contain simultaneously element inverse 2 2 v proof suppose exists diagram delta k cells whose boundary st gamma1 prove result induction k base case result immediate diagram 0 cells boundary st one necessarily lets address case k 0 lemma cell gamma diagram whose mother lies boundary delta condition cannot lie portion boundary must lie portion see fig 13 boundary gamma written form mw gamma1 word w 2 therefore expressed form 2 subparts see fig 14 one definition rewriting relation furthermore word boundary diagram cells obtained delta removing explain detail means remove cell justify formally remaining construct still diagram way operation works may understood basis example see fig 15 induction hypothesis one therefore ut g figure 13 diagram delta k cells whose boundary st gamma1 word read clockwise vertex vertex word counterclockwise exists cell gamma whose mother lies portion boundary 74 ggrammars compared cfgs dcgs categorial grammars rather starting ggrammar associating rewriting systems one start conventional grammar represented rewriting system figure 14 removing cell gamma rewriting w associate ggrammar obvious question whether inputoutput relationship defined two models agree lets instance consider contextfree grammar presented fig 16 rewriting system qcf system associated orientation ggrammar given vocabulary u set nonterminals fs np vpg w set terminals john walked often theorem 2 derive string words wn wn relative ggrammar however system acyclic anteriority fourth rule translation rule relator vp vp often gamma1 equal often gamma1 means often often turn compatibility preorder implies whenever one one ff often fi ff fi 2 f v particular one string cannot derived grammar generally shown relative gcs word often added freely string generated one way making grammar acyclic upgrade definite clause grammar 13 b nonterminal associated term representing syntactic structure string spanned nontermi nal crucial point structure mother nonterminal instance vpoftenvp strictly contains structures daughter nonterminals instance vpvp easy show system acyclic theorem 4 holds notions derivations relative b b coincide example relator vpoften vpvpvp collapse often gamma1 anymore vpoften vp never cancel theorem 4 see b b equivalent another way obtain acyclic grammar shown c infinite set rules indexed integers corresponding string length length mother nonterminal strictly larger length daughter saw john louise paris l saw john louise paris l figure 15 cellremoval step one assumes sjl p 7 john saw louise paris one isjlp 7 sjl p 7 john saw louise paris ensures acyclicity 741 ggrammars categorial grammars contextfree grammar associated ggrammar used illustrate crucial difference ggrammars categorial grammars whereas categorial grammar expression vpvp expects vp right nothing else returns vp working groups expression vp vp gamma1 formally undistinguishable 1 crucial property permits ggrammars profit many standard mathematical tools 7 np vp vp vp 7 walked vp walked gamma1 vp 7 often vp vp vp b vpwalked 7 walked vpwalked walked gamma1 c sxy 7 npx vpy c sxy vpx walked walked figure ggrammars 75 mixing commutative noncommutative phenom ena logic programs already seen examples commutative noncommutative aspects present lexical entry thus presence ff ff gamma1 entry every fig 2 allows expression every n x move block position argument x verb eventually found movement however impossible every n exchange relative positions shown input logical forms fig 3 four phonological strings listed obtained let us briefly indicate commutativenoncommutative partnership could used error correction purposes suppose relator report added grammar error erroneous input instance could word principle improperly used situation principal needed repair input example word principal report report tells us error corrected expression error gamma1 repair move block spot error occurs replacing erroneous word correction allowing normal processing continue report used warning evaluation purposes fully commutative structures logic programs suppose one wants group computation structure completely commutative one elements move freely relative property could stipulated introducing notion commutative group compu tation using free commutative group fcv rather f v another possibility illustrates flexibility group computation approach add relator scheme fffiff r ff fi expression metavariables expression called commutator ff fi multiplied fiff yields fffi single relator scheme permits permute elements expression effect using fcv example commutative structures useful case logic programs shown one encodes clause logic program commutative structure defines public results consist single ground predicate p public results group computation structure coincide consequences program 8 76 multirelators theorem 4 already gives interesting equivalence several types gcss ones associated acyclic dcgs ggrammar make use expression metavariables ggrammar obtained eliminating entries every ggrammar fig 1 however sufficient longdependency situations expression metavariables appear cases conditions theorem 4 met giving wellchosen value expression metavariable condition anteriority easily violated need stronger version theorem able take account situation expression metavariables appear pairs ff ff gamma1 order state extended version theorem 4 need introduce terminology consider finite list wn elements v wn set following lemma straightforward lemma 5 set mcw wn following properties ffl normal subset f v selfconjugate ffl invariant arbitrary permutations list ffl invariant cyclic permutations words w set wn set conjugates elements b f v 8 result contrast corresponding result concerning dcgs see depend condition acyclicity difference related fact case logic programs succesful sequence rewritings results empty string whereas case dcgs results string words acyclicity condition dcgs ensures string words contains words could produced using gcs logic programs property irrelevant l louise man ran figure 17 multirelator version example ggrammar made use transformations permitted lemma 5 second properties set mcw wn defined soon multiset unordered list hw wn call multi relator given call mcw wn set multiconjugates multirelator hw wn given finite infinite collection mr multirelators consider group computation structure obtained taking set r relators set call gcs thus obtained group computation structure multirelators presenting group computation structure multirelators sometimes use notation wn listing multirelators notation presentation example ggrammar fig 1 becomes presentation shown fig 17 presentation grammar using multirelators symmetrical fig 1 remark expression metavariables used anymore 761 multirelators diagrams state theorem extension fundamental theorem combinatorial group theory case gcss multirelators first need notion multicell associated multirelator first remark always assume multirelator wn w cyclically reduced taking cyclically reduced conjugate w change notion multiconjugate assume always case sequel wn multirelator gamma cell associated w manner 64 call multiset cells ng multicell associated multirelator consider finite multiset multirelators take multiset obtained forming multiset u k theta k multicells associated multirelators diagram whose cells exactly taking account cell counts multisetomega said diagram relative gcs multirelators consideration theorem 6 let group computation structure multirelators w cyclically reduced word f v w result monoid gcsmr iff exists reduced diagram relative gcsmr boundary w proof theorem straightforward extension proof theorem 1 provided 762 linguistic examples results applied diagrammatic proof fact example ggrammar one see 41 every man saw woman fig 18 show multicells corresponding ggrammar entries relevant example see fig 17 fig 19 diagrammatic proof example multicells lettered 1 5 easy comparison figures 763 multirelators qcf systems one extend notion orientation 7 multirelators following way say multirelator hw wn oriented index one words w chosen writing w index j 1 j also chosen qcf rule scheme associated oriented multirelator rewriting scheme ij 7 ij gamma1 ff k expression metavariables therefore take arbitrary values f v one extend notion anteriority oriented multirelators simply define atom ij anterior atoms kl gamma1 appearing man 1 saw x every woman 2 w figure 18 multicells multirelators grammar dotted lines indicate two cells part multicell appear together diagram righthand side rewriting rule say inverses atoms appearing w k apart course ij gamma1 considering atoms appearing ff k ff k gamma1 follows anteriority relation defined atoms inverses atoms appear hw wn notion acyclic noetherian qcf system defined basis anteriority relation following theorem straightforward extension theorem 2 theorem 7 7 derivation relation associated oriented multi relator gcs 2 saw every x man woman 1 2 figure 19 diagram using multicells establishing relationship sentence every man saw woman logical form evmxsmwysxy 764 rewriting theorem multirelator case state theorem extends theorem 4 case multirelators gcss proof broadly outlined theorem 8 7 derivation relation associated oriented multi relator gcs anteriority acyclic 2 set potential mothers contain simultaneously element inverse 2 proof rough sketch proof similar theorem 4 difference must perform multicell removal rather simple cellremoval may involve complex topological surgery example may serve illustrate general method lets consider gcs defined three multirelators hfd multirelators oriented distinguishing f first sec ond third corresponding rewriting system rules expression metavariable anteriority clearly acyclic let us consider diagram delta topleft fig 20 diagram contains three multicells corresponding three grammar multirelators one gamma formed two cells corresponds third multirelator mother multicell underlined reading boundary diagram see hm want show multicell removal used obtain 7 hm first reasoning similar proof lemma 3 know mother must appear boundary example want remove corresponding multicell gamma diagram without destroying topological property diagram particular without destroying simpleconnectivity order find subdiagram topological constructs diagram delta 0 delta consisting cells appearing multicell consideration simple reasoning shows always possible example subdiagram constituted two cells labelled gamma linked edge labelled surgery consists forming tube wherever thin edge edge surface subdiagram cell edge example deleting diagram subdiagram cells tubes thus formed remains wellformed diagram may well thin edges removed tubes leave behind couple parallel edges carrying label second diagram figure consisting two cells multicell removal corresponds rewriting multicell mother righthand side expression multivariables given proper values example ff takes value c gamma1 allowing construction subdiagram operation repeated multicells deleted way previous proof example given illustration first multicell mother diagram boundary removed one obtains second diagram point rewritten using rewriting rule 7 bc c c new diagram contains two multicells consisting single cell exists mother diagram bound ary time f corresponding cell removed point rewritten using rewriting rule f bdeg last cell mother finally removed leaving last diagram edges cell point finally rewritten using rewriting rule application ggrammars ggrammar presented multi relator gcs fig 17 oriented privileging lefthand side largest logicalform atom associated qcf system becomes system fig 2 checked generation system acyclic even noetherian theorems 7 8 say generation using rewriting system equivalent generation using ggrammar similar result shown parsingoriented rewriting system fig 5 f c e f c e g g e figure 20 multicell removal rewriting computability attempt systematic treatment computability properties ggrammars limit prove certain strong decidability properties example ggrammar although general synthesis proposed methods show clearly power group morphisms study computability group computation structures consider grammar specification recursively enumerable list l pairs sem phon using terminology 6 say generation resp parsing finitely enumerable subset l consisting pairs sem phon sem known resp phon known finite computable finite time parsing generation finitely enumer able grammar said inherently reversible sketch proof fact ggrammar fig 17 inherently reversible 9 9 6 several types computability generation resp parsing defined shown unless certain specific conditions met whatever type computability considered computability parsing computability generation bear general relation 81 bounding diagram complexity function input lets first consider group morphism f f v additive group reals r thus f realvalued function f v fafb remark f takes value commutative group f invariant permutations therefore define value f multirelator value multiconjugates fr 1 result obtained taking product multiconjugates multi relators computed simply taking sum multirelator components r ij mr lets suppose exists strictly positive real multirelator mr group computation structure one case say f relatorlowerbounded rlb morphism similarly say f relatorupperbounded rub morphism iff exists strictly positive real multirelator mr group computation structure one following property immediate lemma 9 f rlb morphism f v r result gcs 1 fs 0 2 computation involves k multirelators k fs similary f rub morphism computation involves k multirelators fs k f rlb expression f v value f known see order test whether result need test diagrams priori bounded number multicells consider following two realvalued functions f v ffl e 2 f v e reduced fe defined difference number phonological elements appear e negative polarity number elements appear positive polarity instance value f john gamma1 sj park ffl suppose size term defined recursively following equations 1 argument identifier x arity 0 arity n form sum sizes terms positive polarity minus sum sizes terms negative polarity instance value g expression immediate f g morphisms also simple observation multirelator mr fig 17 value f g mr uniformly lowerbounded g uniformly equal 1 example instance e expression form 1 also clear f g uniformly upperbounded lets consider parsing case looking results form sem phon gamma1 phon known therefore f known length phonological string therefore consider diagrams fewer lengthphon multicells boundary form sem phon gamma1 instead consider generation looking results form sem phon gamma1 sem known therefore g known therefore consider diagrams fewer sizesem multicells boundary form sem phon gamma1 82 restriction set multicells consider close results finite enumerability parsing genera tion know bound total number cells relevant diagram still could conceivable repertory relevant cells finite show cannot case lets introduce notion subharmonic function gcs 10 let h function v v gamma1 r say h subharmonic relative gcs diagram delta relative cgs h reach maximum boundary delta therefore internal edge diagram lets define h function takes phonological element whatever polarity 0 takes logical form well inverse gamma1 discussion acyclicity ggrammar lemma 3 see h subharmonic ggrammar means multicell appearing diagram proof sem phon gamma1 semantics whatever polarity bounded size sem easy check finitely many multicells according ggrammar largest semantic element bounded size 11 10 terminology borrowed analysis subharmonic functions functions property reaching maximum boundary disks 11 finessing case identifier metavariable x whose domain instanciation described precisely assume domain instanciation constituted finite fixed set identifiers x assumed generation parsing basis simple argument satisfying treatment left future research generation mode know sem fixed finite repertory multicells consider diagrams pretending status proofs result form sem phon gamma1 fact noted cells appear conjointly finite number times proven finite enumerability generation parsing know phon immediate fact f rlb g rub sem bounded fact phon known conclude finite repertory cells considered diagrams pretending status proof results form sem phon gamma1 reasoning previously proves finite enumerability parsing acknowledgements thanks sylvain pogodalla christian retore anonymous reviewers remarks comments r les systemesq ou un formalisme pour analyser et synthetiser des phrases sur ordinateur transformations de grammaires logiques et reversibilite en traduction automatique presentations groups combinatorial group theory lambek grammars context free reseaux et sequents ordonnes introduction theory groups essays logical semantics tr