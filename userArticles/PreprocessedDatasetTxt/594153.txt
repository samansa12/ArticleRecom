fast subsumption checks using antilinks concept antilink defined antilink consists two occurrences literal formula useful equivalencepreserving operations based antilinks introduced operations eliminate potentially large number subsumed paths negation normal form formula antilinks directly indicate presence subsumed paths characterized operations linear time complexity size part formula containing antilinkthe problem removing subsumed paths nnf formula shown nphard even though formulas may small relative size path sets general problem determining whether exists pair subsumed paths associated arbitrary antilink shown npcomplete additional techniques generalize concept pure literals introduced also shown eliminate redundant subsumption checks effectiveness techniques examined respect benchmark examples literature b introduction logical consequences ground formula expressed minimal implied clau ses useful certain approaches nonmonotonic reasoning kean tsi knis 1992 przymusinski 1989 reiter de kleer 1987 consequences formula set eg support set proposed commonsense conclusion required minimal conjunctions imply formula useful situations satisfying models desired error analysis hardware verification minimal implied clauses formulas prime implicates minimal conjunctions imply prime implicants many algorithms proposed compute prime implicates propositional boolean formulas algorithms de kleer 1992 jackson pais 1990 jackson 1992 kean tsiknis 1990 slagle et al 1970 assume input either conjunctive normal form cnf disjunctive normal form dnf algorithm ngair 1993 requires input conjuncti research supported part national science foundation grant ccr9101208 ramesh murray deutsche forschungsgemeinschaft within schwerpunktpro deduktion beckert hahnle results paper appear condensed form proceedings 5 th international conference logic programming automated reasoning kiev ukraine july 1621 1994 proceedings national conference artificial intelligence seattle wa july 31august 4 1994 dnf formulas ramesh murray 1993 propose set techniques finding prime implicates formulas negation normal form nnf techniques based dissolution inference rule introduced murray rosenthal 1987b algorithm called pi discovered classes formulas techniques polynomial cnfdnf based technique must exponential size input ngair also introduced similar examples however method general ngairs based order theory ngair 1993 coudert madre 1992 also developed algorithm computing prime implicates implicants formulas binary decision diagrams bdds employed although use prime implicateimplicant generation example demonstrate utility antilink operations antilink operations employed application requires eliminating subsumed paths nnf formula successfully used antilink operations diagnosis system ramesh murray 1995 ramesh murray 1993 describe pi algorithm pi used enumerate prime implicates full dissolvent nnf formula conjunctive links defined later pi repeatedly subsumption checks keep intermediate results small possible however checks expensive many result failure done sets exponentially large time required operations reduced using compact representation intermediate results de kleer 1992 avoiding many checks possible focus paper show full dissolvent restructured applying pi many nonprime implicates removed without subsumption checks define disjunctive conjunctive antilinks 1 nnf formulas identify operations remove antilinks associated subsumed paths leaves fewer subsumption checks pi algorithm next section describe path semantics viewpoint graphical representation formulas classical logic section 3 introduce antilinks develop useful equivalencepreserving operations based section 4 complexity issues discussed npcompleteness results proven section 5 introduces techniques based strictly pure subformulas effectiveness techniques certain benchmark formulas described ngair 1993 explored section 6 introduce strictly pure full blocks use develop method reduces number subsumption tests required 1 antilinks associated operators first proposed beckert hahnle personal communication first motivation studying antilinks arose connection regular clausal tableau calculi letz et al 1992 antilink rule defined later viewed implementation regularity condition letz et al 1992 propositional nonclausal case letz et al considered firstorder clausal case refinements general inference rules considered whereas antilink rule allows implementation preprocessing step fast subsumption checks using antilinks 3 foundations facts formulas negation normal form assume reader familiar notions atom literal formula classical logic consider formulas negation normal form nnf connectives used conjunction disjunction negations atomic level restriction reasonable since formulas contain negations operators level converted nnf polynomial time section introduce number technical terms definitions treated detail murray rosenthal 1993 required development antilink operations defined section 3 make paper selfcontained even readers familiar dissolution 21 semantic graphs semantic graphs graphical representation nnf formulas definition 1 semantic graph consists either 1 one constants true false 2 literal 3 carc conjunction two semantic graphs 4 darc disjunction two semantic graphs use notation x c carc x similarly use x darc subscript may omitted confusion possible semantic graph used construction semantic graph g called explicit subgraph g subgraph g x carc otherwise fundamental subgraphs x fundamental subgraphs g similarly fundamental subgraph g x darc otherwise fundamental subgraphs x fundamental subgraphs g set nodes semantic graph g consists literal occurrences used construction holds set carcs g set darcs g ie sets include nodes carcs dcarc respectively occurring explicit subgraphs g following identify semantic graph g formula represents 2 essentially difference semantic graph formula point view use either term depending upon desired emphasis detailed exposition see murray rosenthal 1993 true false positive literals represent negative literal represents 4 anavai ramesh et al addition identify semantic graph triple consisting set nodes set carcs set darcs exception latter identification possible would ambiguous semantic graphs true false correspond note however semantic graph contains occurrences true false obvious truthfunctional reductions apply unless otherwise stated assume semantic graphs automatically reduced pictorial representations carcs darcs indicated usual symbols conjunction disjunction arguments carc placed vertically arguments darc horizontally besides example 1 formula e b c 1 displayed semantic 2 boxes 2 show explicit subgraphs used construction semantic graph since carcs darcs associative commutative show explicit subgraphs subsequent pictorial representations definition 2 b nodes graph x ff arc x b say arc connecting b b ffconnected example 2 2 c cconnected b c e connected definition 3 let g semantic graph partial cpath g set nodes two cconnected cpath g partial cpath properly contained partial cpath partial dpaths defined accordingly using darcs instead carcs p denotes set literals path p fast subsumption checks using antilinks 5 example 3 semantic graph 2 shown lines indicating c paths left dpaths right cpaths fc ag fc b cg fd ag fd b cg fe ag fe b cg dpaths fc eg fa eg fa bg fa cg following lemma obvious lemma 1 let g semantic graph interpretation satisfies falsi fies g iff satisfies falsifies every literal cpath dpath g 211 subgraphs frequently find useful consider subgraphs semantic graph explicit definition 4 given semantic graph g nonempty subset n nodes g subgraph g corresponds n part g consists nodes n logical structure part preserved denotes subgraph g corresponding set nodes g n two subgraphs h h 0 g meet nodes common nonempty subset n nodes corresponds unambiguously one subgraph g empty set corresponds true false true false subgraphs semantic graphs precise definition subgraphs see murray rosenthal 1993 example 4 subgraph 2 shown corresponds node set g 6 anavai ramesh et al 212 blocks important subgraphs blocks definition 5 cblock h subgraph semantic graph g property cpath p includes least one node h passes h p passes h iff subset p consisting nodes h cpath h dblocks accordingly defined using dpaths example 5 2 subgraph corresponding node set fa ea cg cblock however dblock since dpath fa bg restricted subgraph fag proper subpath fa cg subgraph definition 6 full block subgraph cblock dblock one way envision full block consider conjunction disjunction nary connectives full block subset arguments one connective ie one explicit subformula full blocks may treated essentially explicit subgraphs order arguments isomorphism theorem murray rosenthal 1987a assures us structures may treated example 6 2 subgraph corresponding fc eg full block written fc ag e ie regard upper part graph fc eg fundamental subgraphs upper disjunction literals e definition 7 let h full block h conjunction disjunction fundamental subgraphs explicit subgraph final arc conjunction define cextension h dextension h h situation reversed final arc darc use notation ceh deh c dextensions respecti vely h example 7 2 paper compute c dextensions single nodes single nodes always full blocks testing property unnecessary assume formulas represented nary trees computing extensions done constant time merely determine whether given nodes parent conjunction disjunction appropriate extension either node parent fast subsumption checks using antilinks 7 22 path dissolution path dissolution murray rosenthal 1993 inferencing mechanism classical logic several interesting properties efficient generalization method analytic tableaux strongly complete propositional case produce list satisfying interpretations formula latter feature particularly valuable setting one wishes make use satisfying interpretations rather merely determine whether exist path dissolution works selecting link restructuring formula paths link eliminated nature restructuring one cannot rely cnf conjunctive normal starts cnf single dissolution step produces unnormalized formula one consequence eliminating paths link strong completeness sequence dissolution steps eventually create linkless formula paths remain may interpreted models satisfying interpretations formula definition 8 clink complementary pair cconnected nodes dconnec ted complementary nodes form dlink unless stated otherwise use term link refer clink path dissolution general applicable collections links restrict attention single links example 8 consider link fa ag 2 entire graph smallest full block containing link definition 9 let x semantic graph h arbitrary subgraph 3 cpath complement h respect x written cchx subgraph x consisting literals x lie cpaths contain nodes h literal exists cchx false cpath extension h respect x written cpehx subgraph x containing literals lie cpaths pass h literal exists development antilink operations use operations duals cc cpe use dc dpath complement dpe dpath extension operators definitions straightforward duality consider single link dissolution first arguments cc cpe literals operators used construction dissolvents examples however case section 3 hence definitions operators full generality usually subgraph x 4 note cpe two arguments whereas ce def 7 one intuitively ce implicit second argument always entire graph explicit argument occurs 8 anavai ramesh et al example 9 2 e definitions operators cc cpe adequate definition dissolution however equivalent constructive definitions given section 3 required proving correctness antilink operations introduced reader referred murray rosenthal 1993 proofs lemmas lemma 2 let h arbitrary subgraph g cpaths cpehg precisely cpaths g pass h corollary 1 cpehg exactly subgraph g relative set nodes lie cpaths pass h lemma 3 let h arbitrary subgraph g cpaths cchg precisely cpaths g pass h corollary 2 cchg exactly subgraph g relative set nodes lie cpaths pass h lemma 4 h cblock cchg cpehg g cpaths lemmas corollaries cc cpe hold dual form dc dpe suppose literal occurrences residing conjoined subgraphs x respectively intuitively clear cpaths x contain link fa ag cpeaxcca plus cca x ag link let smallest full block containing h dv h dissolvent h defined follows h single cblock dv h otherwise ie h consists two cblocks fast subsumption checks using antilinks 9 way h single cblock h full block trivially dblock case must commutations reassociations arguments conjunction following proposition follows corollaries lemma 4 proposition 1 either two compact graphs shown cpaths dv h may thus used instead semantic graphs proposition identical dv h graphs identical cpaths original full block except cpeax cpea ie except link example 10 dissolve link fa ag 2 using compact form 4 dissolution proposition 1 graph results theorem 1 let h link semantic graph g let smallest full block containing h dv h logically equivalent proof theorem 1 general form found murray rosenthal 1993 may therefore select arbitrary link h g replace smallest full block containing h dissolvent producing ground case equivalent graph call resulting graph dissolvent g respect h since paths new graph appeared g except contained link graph strictly fewer cpaths old one result finitely many dissolutions bounded number cpaths original graph yield linkless equivalent graph proves theorem 2 ground level path dissolution strongly complete rule means result applying dissolution repeatedly unsatisfiable semantic graph results graph false independently choice link dissolved step 23 prime implicatesimplicants briefly summarize basic definitions regarding implicates treatment implicants completely dual indicated appropriate dual expressions parentheses definition 11 disjunction conjunction subsumes another disjunction 0 conjunction true false subsumed disjunctions conjunctions disjunction called true iff equivalent true conjunction called false iff equivalent false lemma 5 disjunction conjunction 0 true false subsumes true disjunction false conjunction subsumes another true disjunction false conjunction definition 12 disjunction conjunction p literals implicate impli cant formula g iff g disjunction conjunction prime implicate prime implicant formula g iff 1 true false 2 implicate implicant g 3 literals gj note set prime implicates implicants formual g treated cnf dnf formula equivalent g definition 13 let set prime implicates formula g prime implicate g essential n fdg equivalent g otherwise inessential 24 fully dissolved formulas dissolve semantic graph g linkless call resulting graph full dissolvent g denote fdg observe fdg dependent order links activated however set cpaths fdg unique exactly set satisfiable cpaths g fdg linkfree consequences ie implicates g represented dpaths fdg dual manner may define dissolution disjunctive links case fdg disjunctive links implicants g represented cpaths fdg relationships made precise theorem 3 fast subsumption checks using antilinks 11 discussion follows often refer subsumption c paths rather disjuncts conjuncts paths defined sets literal occurrences regard subsumption consider literal set p path p way change standard definitions necessary theorem proved ramesh murray 1993 theorem 3 nonempty formula cpath dpath contains link every implicate implicant formula subsumed dpath c path formula corollary 3 every prime implicate implicant reduced dnf cnf mula ie one false conjuncts true disjuncts subsumed dpath cpath formula follows directly theorem dnf cnf formula cpaths dpaths links ramesh murray 1993 prime implicates g computed first obtaining fdg knowing implicates present dpaths fdg pi algorithm computes fdg dpath f p true dpaths q used way pi extracts unsubsumed nontautological dpaths nnf formula without clinks general pi computes f arbitrary 3 subsumed paths antilinks much material section detailed description results sketched ramesh et al 1994 goal first identify many subsumed paths possible efficient manner eliminate presence anti links disjunctive conjunctive graph may indicate subsumed dpaths present graph define antilinks discuss ways identify remove subsumed paths due antilinks definition 14 darc semantic graph g ax nodes occurrences literal x respectively call disjunctive antilink carc g call fax g conjunctive antilink note smallest full block containing antilink following theorem relates subsumed paths antilinks theorem immediate cnf formulas obvious dual theorem regarding subsumed cpaths immediate dnf formulas 12 anavai ramesh et al theorem 4 let g semantic graph dpath p subsumed distinct nontautological dpath p 0 g g contains either disjunctive antilink conjunctive antilink proof two distinct possibilities either suppose must literal two different occurrences two occurrences must either cconnected thereby constitute either disjunctive conjunctive antilink suppose p oe p 0 proof induction structure g basis g literal result vacuously true since cannot two distinct dpaths g induction step suppose explicit subgraph x different explicit subgraphs lie explicit subgraph result follows directly induction hypothesis different subgraphs every literal p 0 occurs least x least two occurrences literal p 0 constitute conjunctive antilink b suppose restriction p x respectively let p 0 restriction p 0 x respectively since p p 0 distinct either p x p 0 x must distinct p p 0 must distinct assume without loss generality p x p 0 distinct either p x subsumes p 0 x vice versa induction hypothesis must antilink g hand p x x subsume must literal say l p 0 p x since p 0 subsumes p must occurrence l p two occurrences l one p 0 x p constitute disjunctive antilink unfortunately presence antilinks imply presence subsumed paths hence converse theorem true 31 redundant antilinks identify disjunctive antilinks imply presence subsumed paths definition 15 disjunctive antilink fax g respect graph g redundant either ceax 6 fast subsumption checks using antilinks 13 definition 16 let fax g disjunctive antilink graph g smallest full block containing antilink set dpaths pass ax example 11 consider following graph two occurrences form disjunctive antilink contains dpath indicated line since ceax paths member dp fax g g anti link redundant p subsumed p literal set fa cg notice g embedded larger graph g 0 every dpath q containing p g 0 would subsumed corresponding dpath q 0 differs q q 0 contains p 0 instead p general one literals redundant antilink fax g argument conjunction dp fax example two occurrences c arguments disjunctions thus comprise nonredundant antilink dp fcx c although redundant disjunctive antilinks contribute directly subsumed dpaths nonredundant antilinks prohibit existence subsumed paths however nonredundant antilinks provide evidence paths fact present theorem 5 let fax g redundant disjunctive antilink semantic graph g dpath dp fax g g properly subsumed path g contains antilink proof recall dpath cpath graph g said pass subgraph x g path restricted set nodes x forms dpath cpath x let p 2 dp fax g g assume without loss generality p passes ceax note ceax nonempty largest full block containing antilink may write ceax p restricted x respectively p p restricted nodes outside x construction ax 62 p x thus p x passes c restricted c hence dpath p 0 14 anavai ramesh et al 32 antilink operator identification redundant disjunctive antilinks done easily checking see either ceax 6 ax identifying redundant antilink possible remove using disjunctive antilink dissolvent dadv operator defined process dpaths dp fax eliminated two occurrences antilink literal collapsed one definition 17 let fax g disjunctive antilink let smallest full block containing antilink example 12 consider semantic graph 5 example 11 c upper conjunct dadv e middle conjunct conjunct b finally lower conjunct dpeax false reduces c result point although dadv produces cnf formula simple example general particular graph simplified consequence easily recognizable conditions resulting graph cnf details see case 1 section 35 33 extension path complement operators number primitive operators used definition dadv described murray rosenthal 1993 defined section 2 present equivalent constructive descriptions order prove lemma 6 next subsection verify dadv desired properties fast subsumption checks using antilinks 15 proposition 2 let g semantic graph h arbitrary subgraph false h meet g final arc g darc final arc g carc true h meet g final arc g carc final arc g darc g h meet g false final arc g darc final arc g carc g h meet g true final arc g carc final arc g darc fundamental subgraphs g meet h f lemma 6 g graph literal occurrence g ccag logically equivalent proof prove lemma showing formula left formula right possess exactly set dpaths result follows lemma 1 proof done via induction syntactic structure g lemma trivially holds true 1 g literal set dpaths ccag set dpaths empty note 2 loss generality assume belongs x hence induction hypothesis paths ccax dpeax gamma fagdcceax ccag dpaths dpeax gamma fagdcceaxy consider right hand side equation since x therefore disjoint thus therefore write right hand side equation dpeax gamma factoring subgraph get equivalent subgraph dpaths semantic graph shown dpaths left hand side 3 finally suppose assume x two subcases consider false thus dpaths x connected subgraph x hence x form ac 1 result dcceag dpaths b ccag 6 false thus ccax 6 false therefore induction hypothesis ccag dpaths focusing right hand side equation dpeax definition cextension include nodes x otherwise contrary subcase b condi tion therefore therefore right hand side equation dpaths dpeax gamma fag dcceaxy result obtained left hand side subcase 34 correctness dadv theorem 6 show dadv fax g g logically equivalent g contain dpaths dp fax g g theorem 6 let smallest full block containing fax g disjunctive antilink semantic graph g dadv fax g equivalent differs dpaths follows dpaths dp fax present dpath containing antilink replaced path literal set one occurrence antilink literal fast subsumption checks using antilinks 17 proof note ax literal occurrences hence dblocks x respectively dual lemmas 4 x equivalent dcax x x distributive law equivalent similarly equivalent expand upper occurrence distribute thus equivalent duals lemmas 2 3 rewritten equivalently dpaths preserved continue rewrite goal eventually put equivalent form dpaths dp fax omitted consider dpaths dcax x dpaths x miss ax either miss ceax cextension ax pass ceax g hence dcax x dpaths replacing lower occurrence dcax x previous graph get following graph 0 equivalent dpaths every dpath subgraph dpeceax theorem 5 paths subsumed paths therefore remove subgraph dpeceax preserving equivalence get graph 00 shown using arguments dual one given earlier x identical dpaths replacing 00 find every dpath subgraph dpeax x theorem 5 paths also subsumed dpaths therefore remove subgraph preserve equivalence 000 results dpaths 000 excluding dpaths dp fax consider dpaths dpeax exactly 000 contain antilink contain two occurrences literal hence remove node fast subsumption checks using antilinks 19 apply lemma 6 get 0000 applying lemma 6 0000 get dadv fax constructing dadv fax g mwe removed subsumed dpaths altered dpaths contain antilink collapsing double occurrence antilink literal hence dadv fax g equivalent contain antilink contain dpath dp fax theorem 6 gives us method remove disjunctive antilinks subsumed dpaths simply identify redundant antilink smallest full block containing replace dadv h cost operation proportional size graph replacing linear also cconnected literals become dconnected truly new disjunctive antilinks introduced howe ver parts graph may duplicated may give rise additional copies antilinks yet removed nevertheless persistent removal redundant disjunctive antilinks case dp fax g 6 terminating process number dpaths strictly reduced step proves theorem 7 finitely many applications dadv operation redundant antilinks result graph without redundant disjunctive antilinks termination process independent choice antilink step although remove redundant disjunctive antilinks graph process introduce new conjunctive antilinks antilinks may indicate presence subsumed dpaths situation favorable disjunctive antilinks see section 37 simplifications obviously dadv fax g syntactically larger certain conditions may use simplified alternative definitions dadv definitions result formulas syntactically smaller result general definition following list possible simplifications 20 anavai ramesh et al 1 dcceax therefore possibly non atomic factoring dcax x observing dpaths dadv fax g becomes turns rule applies 2 example 1 since ceax simplified rule case results following graph 2 dcceax hence 3 case 1 case 2 apply ceax formula simplifies note versions dadv roles x interchanged fast subsumption checks using antilinks 21 36 disjunctive antilinks factoring interesting note dadv operation contains factoring ie ordinary application distributive law pair conjunctions containing common argument special case condition case 2 except ceax graph obtained disjunctive factoring murray rosenthal 1993 dadv operator also captures absorption law merging ax arguments disjunction note however technically antilink redundant case 37 conjunctive antilinks conjunctive antilinks always indicate presence dpaths subsumed others easy detect however conditions met much restrictive redundant disjunctive anti links consider conjunctive antilink fax g smallest full block containing antilink ax every dpath passes subsumed dpath consisting single literal ax hence replace kind dual case 3 simplified versions dadv discussed earlier antilink fax g disjunctive simplified dadv operation replaces note conjunctive antilink operation removes subsumed dpaths whereas case 3 disjunctive antilink operation either remove paths merely remove second occurrence antilink literal paths contain antilink operations involve dpaths strictly dual operations would affect cpaths instead 4 complexity considerations problem eliminating subsumed paths graph efficient manner seem feasible following definition makes precise notion minimality respect subsumed dpaths show nphard achieve property definition 18 let g semantic graph say graph g 0 dminimal equivalent g satisfies following conditions 22 anavai ramesh et al 1 g logically equivalent g 0 2 p 0 q 0 two distinct dpaths g 0 p 0 subsume q 0 vice versa 3 p 0 dpath g 0 dpath p g 4 p minimal dpath g dpath p 0 g 0 cminimal equivalent graph defined obvious dual way note property 1 implied properties 3 4 g 0 needs unique however dpaths g 0 always include essential possibly inessential prime implicates g computing dminimal equivalent graphs efficiently would helpful finding prime implicates dminimal equivalent graph full dissolvent subsumption checks completely eliminated property 2 hence find prime implicates g find dminimal equivalent g 0 full dissolvent fdg simply enumerate dpaths g 0 dminimal equivalent given graph g trivially obtained first enumerating dpaths given graph g eliminating subsumed dpaths algorithm exponential size g g 0 constructed cnf however nnf dminimal equivalent g 0 g may small compared cnf dminimal equivalent even problem nphard proof follows hence likely efficient algorithm theorem 8 following problem elimination subsumed paths nphard given graph g find dminimal equivalent graph g 0 proof show nphardness reduce satisfiability cnf formulas let c instance cnf satisfiability problem fx set variables c let x 0 n distinct variables occurring g let semantic graph obtained replacing x x 0 denote nnf negation c construct following semantic graph g fast subsumption checks using antilinks 23 size graph g constant factor size c therefore constructed linear time easy see dpath includes literal must pass vice versa let g 0 graph dminimal equivalent g show c satisfiable iff literal occurs g 0 suppose c satisfiable c falsifiable dpaths fact clauses since c dnf c contain disjunctive link g dpaths contain fx least one say p subsumed another dpath dpath pa cannot subsumed dpath g hence path g 0 literal set pa hence literal must occur g 0 c satisfiable c valid therefore every dpath p hence every dpath 1 n pair literals fx p every pair literals forms dpath g hence every dpath containing subsumed another dpath g furthermore subsuming path contain literal definition dminimal equivalent construction g 0 dpath g 0 contain literal thus literal cannot occur g 0 solve elimination subsumed paths problem polynomial time following algorithm solve satisfiability cnf polynomial time given instance c cnf satisfiability problem construct polynomial time graph g shown earlier find graph g 0 using algorithm elimination subsumed paths size g 0 polynomial size g since computing required polynomial time c satisfiable iff literal occurs g 0 check done polynomial time completely dual construction obtain following corollary corollary 4 given graph g finding cminimal equivalent g nphard seen general problem computing cminimal graphs nphard nevertheless redundant disjunctive antilinks easily recognized eliminating corresponding subsumed dpaths done without direct subsumption checks hand recognizable subsumed dpaths due conjunctive antilinks likely plentiful due strong restriction defining useful antilinks also difficult find arbitrary conjunctive antilink results subsumed dpaths fact problem npcomplete theorem 9 following problem npcomplete given conjunctive anti link graph g determine whether two dpaths p x p g p x passes ax p passes either p x subsumes p vice versa proof easy see problem np show nphardness reduce satisfiability cnf formulas let c instance cnf satisfiability problem fx set variables c let n distinct variables occurring fx g let semantic graph obtained replacing x x 0 construct following semantic graph g subgraph dnf formula 1 2 two different occurrences literal two literal occurrences form conjunctive antilink g every dpath 2 contains literal b dpaths containing 1 possibly subsume dpaths 2 size graph g constant factor size c therefore constructed linear time must show c satisfiable iff dpath 1 subsumes another dpath 2 suppose first c satisfiable c falsifiable least one dpath c contain disjunctive link g therefore dpath p contain literal pairs fx recall p defined literal set path p easy see since p contain literal pair corresponding dlink c dpath p 0 chosen passes n rightmost disjuncts lower part g p 0 subsumed 1 p show ifpart suppose dpath say p 1 subsumes another dpath say p 0 2 p cannot contain literal pair occurs dpath lower part g therefore p restricted literal pair c dpath without dlink hence c satisfiable corollary 5 problem dual one described theorem 9 involving disjunctive antilinks cpaths npcomplete 5 benchmark examples ngair 1993 investigated examples prove difficult many proposed prime implicateimplicant algorithms section show pi links effective examples examples ngair 1993 applying antilink techniques appears produce significant impro vement develop additional technique based strictly pure full blocks results dramatic improvement latter examples fast subsumption checks using antilinks ngair 1993 class formulas proposed reliance intermediate cnf form result exponential increase size hence would intractable cnfbased algorithms dissolution poorly examples although full dissolvent computed quickly large number subsumption checks must performed pi turns however case subsumed implicates correspond easily recognizable antilinks disjunctive conjunctive kind show antilinks removed dissolution performed dissolution pi find implicates polynomial time ngairs formulas abbreviated f n n 1 defined 2i left part figure 1 show graph f n fixed n 3 4 2n 2n 3 4 2n 2n 3 4 fig 1 semantic graph ngairs formulas dissolution f n 4n literals 2n gamma 2 clinks dissolution remove links performing 2n dissolution steps full dissolvent results depicted right part figure 1 structure full dissolvent depends order links selected application dissolution dissolvent one obtained current version propositional dissolution prover dissolver 26 anavai ramesh et al compact version 3 proposition 1 dissolvent used x chosen smallest two cblocks factor occurrences 1 2 upper right hand part graph two occurrences 1 lower left corner resulting graph shown figure 2 since dissolver nnfbased factoring feasible fact implemented routinely employed produce final output 3 4 2n 2n 3 4 fig 2 ngairs formulas dissolution factoring two occurrences 2 bottom left part graph form redundant disjunctive antilink removed using special case covered rule 1 disjunctive antilinks two occurrences 1 left hand side graph form conjunctive antilink removed using conjunctive antilink rule produces 2n 3 4 factoring 1 removing conjunctive antilink comprised two occurrences 2 factoring 1 2 graph reduces fast subsumption checks using antilinks 27 prime implicates fa 1 g fa 2 g get graph factoring 3 antilink operations required obviously polynomial time hence dissolution removal antilinks pi handle class problems polynomial time perhaps important point subsumption checks whatsoever required 6 generalized purity principle 61 strictly pure full blocks recall full block essentially explicit subgraph subset arguments conjunction disjunction via commutations reassociations fact made explicit definition 19 subgraph graph g pure iff clinks dlinks meet totally within 6 addition conjunctive disjunctive antilinks meet totally within say strictly pure 7 full block g speak strictly pure full block factored examples ngair 1993 contain surprisingly many strictly pure full blocks note factoring recognizing strictly pure full blocks polynomial operations intuitively full blocks replaced single new variables implicates resulting graph bear strong relationship original course full block question must satisfiable since new variable certainly first may appear heavy penalty however prime implicates full block must computed anyway satisfiability determined byproduct following theorems characterize properties strictly pure full blocks respect prime implicates employ following notation let explicit subgraph graph g let x variable occurring g g x denote graph obtained substitution x g similarly disjunction literal occurrences g denote dm disjunction literals occur dggammam disjunction literals obviously holds finally set ae dggammam otherwise theorem 10 let satisfiable strictly pure full block satisfiable semantic graph g let nontautological disjunction literals g dm 6 false following statements equivalent 6 obvious generalization concept pure literal used literature cnfbased automated deduction 7 simply put shares variables rest g 28 anavai ramesh et al 1 prime implicate g 2 x prime implicate g x dm prime implicate theorem turns special case theorem 11 proved following subsection graph g contains several strictly pure full blocks repeated application theorem 10 provides potentially significant speedup computing prime implicates g replace strictly pure full block new variable x n compute prime implicates resulting graph g x substitutions prime implicates x prime implicates g x result prime implicates g speedup potentially dramatic subsumption test performed within would otherwise performed every dpath g x extended form dpath g observe prime implicates g x containing none variables simply prime implicates g contain literals blocks several distinct strictly pure full blocks handled repeated application theorem 10 explained however multiple occurrences single full block g require extended analysis problem multiple occurrences preclude single strictly pure even shares variables rest g intuitively would expect replacing occurrences g single new variable x prime implicates resulting graph g x would also bear strong relationship g made precise next section 62 multipure full blocks definition 20 suppose occurrences full blocks g syntactically identical associativity commutativity disjuncts conjuncts subgraph formed taking nodes blocks necessarily full block 8 let strictly pure call multipure full blocks addition suppose occurrences nm full blocks syntactically identical associativity commutativity disjuncts conjuncts nnf complement 1 n call complementary multipure full blocks note complementary multipure full block strictly pure since antilinks possibly links equivalent complementary full blocks g observe complementary nonatomic formulas must recognized example could b b fact could 8 blocks could single literals occuring arbitrary positions hardly surprising fast subsumption checks using antilinks 29 input oe b nnf formulas stored appropriate canonical way complementarity easily polynomial time detectable situation also straightforward complementary formulas form prior conversion nnf case detailed treatment issue beyond scope paper note absence complements multipure full blocks recognizable polynomial time via canonical nnf representation modification algorithm finding common subtrees see grossi 1993 one algorithm used recognizing multipure full blocks turns results theorem 10 extended case formula contains complementary multipure full blocks use notation theorem 10 understanding denotes occurrence treated negated occurrences thus g x replaces complementary occurrences j well defined subgraph g relative defined relative additionally define x obvious way intuitively use x literals dm correspond unnegated occurrences use x literals dm correspond negated occurrences theorem 11 let nm complementary multipure full blocks satisfiable semantic graph g blocks j satisfiable allow nontautological disjunction literals g following statements equivalent 1 prime implicate g 2 false prime implicate gx dm 6 false x prime implicate g x dm prime implicate dm 6 false x prime implicate g x dm prime implicate proof let g 0 x graph without clinks equivalent g x instance could full dissolvent g x similarly let 0 clinkless equivalent 0 clinkless equivalent let g 0 graph obtained g replacing x 0 x 0 easy see g 0 equivalent g clinks theorem 3 every prime implicate g present dpath g 0 every prime implicate g x present dpath g 0 x prove onlyifpart let prime implicate g must unsubsumed dpath p g 0 complementary p never meet thus pass j j suppose first p pass occurrences case p must also dpath g 0 x technically p isomorphic path g 0 x prove p subsumed another dpath g 0 x assume otherwise namely path p 0 g 0 x subsumes p p 0 cannot contain x x hence would also dpath g 0 subsumes p contradiction thus prime implicate g 0 x hence g x suppose p passes full blocks restriction p j 0 notice 1 j k q p wise dpath obtained replacing p j p k p would subsume p similarly cannot subsumed another dpath j 0 since p j unsubsumed path j 0 linkless equivalent let p x dpath obtained replacing p j x p x dpath g x furthermore p x cannot subsumed another dpath g x subsuming path would induce path g 0 subsumes p therefore x prime implicate g x finally case p passes full blocks argument similar previous paragraph prove ifpart first suppose dm false prime implicate g x unsubsumed dpath say p g 0 x contains neither x x thus p unsubsumed dpath g 0 prime implicate g suppose x prime implicate g x dm prime implicate unsubsumed dpaths p x g 0 x p 0 respectively p x p respectively present subcase definition x contains x cannot contain x let p 0 result replacing occurrences x p x p p 0 dpath g 0 since p p x unsubsumed g x respectively since 0 share variables rest g 0 p 0 also unsubsumed g 0 hence theorem 3 prime implicate g similarly x prime implicate g x dm prime implicate prime implicate g straightforward see case theorem 11 collapses theorem 10 one hand expect substitute new variables multipure full blocks achieve savings computation prime implicates comparable provided theorem 10 note complementary occurrences may cconnected means occurrences play role whatever inference process employed prior computation implicates fast subsumption checks using antilinks 31 particular may treat literals dissolve indeed set individual links full blocks would satisfy requirements multiple link dissolution chain defined murray rosenthal 1993 dissolving two complementary full blocks accomplishes exactly dissolving corresponding singlelinks would clear cpaths full blocks eliminated graph former operation much efficient latter therefore recognizing complementary full blocks performing inference directly rather constituent literals desirable note also inference phase prime implicate computation complementary full blocks multipure full blocks condition necessary extraction implicates using theorem 11 implicates known present finally remarks apply also identical full blocks form appropriate nonatomic antilinks discussed section 3 63 examples kean tsiknis 1990 provide class examples referred following knm mn1 input cnf clauses m1 n mn prime implicates set clauses factored obtain compact representation nnf shown figure 3 snm fig 3 semantic graph kean tsikniss formulas since number prime implicates exponential number subsumption checks required number subsumption checks ipia de kleer 1992 genpi ngair 1993 algorithms shown table examples ipia genpi pi k33 5166 972 164 k44 506472 11600 887 k54 1730120 29074 887 number subsumption checks needed kmn ipia genpi pi literals full block literals strictly pure let k 0 mn graph obtained replacing full block new variable x corollary theorem 10 get prime implicates kmn prime implicates k 0 mn since subgraphs clinks prime implicates present dpaths theorem 3 since also antilinks contrapositive theorem 4 neither subsumption checks required find prime implicates thus number subsumption checks done exactly required computing prime implicates k 0 mn significantly less needed kmn note number prime implicates k 0 mn n problems table applied technique combination antilink operations mn full dissolvent depends n defined recursively full dissolvent k 0 m2 basis general case k 0 shown figure 4 number subsumption checks required also shown table cle arly techniques produce significant reduction number subsumption checks required note problem kmn number subsumption checks depends n reduced applying antilink operations full dissolvent techniques limited nnf formulas sometimes used algorithms like ipia genpi based nnf formulas example k 0 mn turns cnf hence ipia genpi handle formulas thereby reducing number subsumption checks nee ded however normal forms like cnf provide little scope applying techniques directly example literals unfactored form kmn form full block hence one cannot apply theorem 10 form full block factoring provides stronger evidence avoiding less general normal forms like cnfdnf one improve performance prime fast subsumption checks using antilinks 33 n fig 4 full dissolvent km2 left kmn n 2 right implicate algorithms also note implemented antilink operations presented diagnosis system introduced ramesh murray 1995 result greatly increased size problems solvable system antilink operations used special cases increase size 7 comparison bdds bdds bryant 1986 commonly used verification boolean circuits coudert madre coudert madre 1992 describe algorithm produces prime implicatesimplicants propositional formula represented bdd algorithm including uses bdds must perform large amounts subsumption testing given formula nnf bdd based method would first construct bdd extract prime implicatesimplicants contrast system would first compute full dissolvent either approaches next stage extracting prime implicatesimplicants requires extensive testing subsumption size bdd depends critically ordering variables chosen classes nnf formulas breitbart et al 1990 bdd exponentially large formula size formulas clinks dissolution phase method change formula hence input pi would small formula whereas bdd based method would handle exponentially larger intermediate representation however formulas many prime implicates prime implicants subsumption checking bottleneck methods 34 anavai ramesh et al likelyhood relative performance two methods determined experimental evaluation formulas exist one method superior vice versa 8 conclusions future work introduced antilinks defined useful equivalencepreserving operations operations employed strictly reduce number dpaths nnf formula unlike path dissolution removes unsatisfiable tautological dual case paths antilink operations remove subsumed paths without direct checks subsumption significant prime implicate computations since computations tend dominated subsumption checks although prime implicateimplicant problems intractable general techniques perform exponentially better others certain examples addi tion able improve performance greatly inherently exponential examples ngair 1993 experimental results dissolution pibased system computing prime implicates reported ramesh murray 1993 system currently extended antilink operations already implemented shown improve performance operations based strictly pure full blocks development effectiveness practice tested r hunt iii implicit incremental computation primes essential implicant primes boolean functions improved incremental algorithm computing prime implicants finding common subtrees computing prime implicants computing prime implicants incrementally incremental method generating prime implicantsim plicates assumption based reasoning clause management systems inference path resolution semantic graphs path dissolution strongly complete rule inference dissolution making paths vanish new algorithm incremental prime implicate generation algorithm compute circumscription application non clausal deduction diagnosis antilinks foundations assumptionbased truth maintenance systems preliminary report new algorithm generating prime implicants tr ctr k shiny arun k pujari efficient algorithm generate prime implicants journal automated reasoning v22 n2 p149170 february 1999