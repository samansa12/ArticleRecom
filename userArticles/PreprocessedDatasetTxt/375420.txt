slicing concurrent java programs program slicing important approach testing understanding maintaining programs paper presents slicing algorithm concurrent java programs execution process concurrent programs unpredictable many problems solved slicing slice concurrent java programs present concurrent control flow graphs concurrent program dependence graphs representconcurrent java programs based models design efficient static slicing algorithm concurrent java programs algorithm may get precise slices previous approaches know b introduction java new objectoriented programming language achieved widespread acceptance emphasizes portability java multithreading capabilities concurrent programming provide synchronization asynchronously running threads java language runtime system uses monitors nondeterministic behaviors concurrent java programs predicting understanding debugging concurrent java program difficult sequential objectoriented program concurrent java applications going accumulated development techniques tools support understanding debugging testing maintenance concurrent java software become important issue program slicing originally introduced weiser 19 decomposition technique extracts elements program related particular computation program slice consists parts program may directly indirectly affect values computed program point interest referred slicing criterion task compute program slices called program slicing understand basic idea program slicing consider simple example figure 1 shows program fragment b slice respect slice criterion total14 slice statements program might affect value variable total line 14 lines represented small rectangles statements sliced away program slicing studied primarily context procedural programming languages detailed survey see 17 languages slicing typically performed using control flow graph dependence graph 6 11 8 15 program slicing many 3 total 00 6 sum 7 else 9 readz 14 end 3 total 005 x 1 then7 else program fragment b slice criterion total14 figure 1 program fragment slice criterion total14 applications software engineering activities program understanding 7 debugging 1 testing 10 maintenance 9 reverse engineering 2 objectoriented software becomes popular cently researchers applied program slicing objectoriented programs handle various objectoriented features classes objects class heritance polymorphism dynamic binding 4 5 12 13 14 18 concurrency 20 however existing slicing algorithms objectoriented programs applied concurrent java programs straightforwardly obtain correct slices due specific features java concurrency model order slice concurrent java programs correctly must extend slicing techniques adapting concurrent java programs paper present multithreaded dependence graph concurrent java programs ce1 class producer extends thread private cubbyhole cubbyhole 3 private int e4 public producercubbyhole c int number te8 public void run s9 int i0 i10 thisnumber class consumer extends thread 19 private cubbyhole cubbyhole private int s27 int i0 s28 i10 thisnumber 34 ce36 class cubbyhole 37 private int seq private boolean available false synchronized int get available false return seq me47 public synchronized int putint value s48 available true 50 54 ce56 class producerconsumertest me57 public static void mainstring args new cubbyhole new producerc 1 new consumerc 1 figure 2 concurrent java program static slices programs computed efficiently multithreaded dependence graph concurrent java program composed collection thread dependence graphs representing single thread program special kinds dependence arcs represent thread interactions different threads concurrent java program represented multithreaded dependence graph slices program computed solving vertex reachability problem graph rest paper organized follows section briefly introduces concurrency model java section 3 discusses related work section 4 presents multithreaded dependence graph concurrent java programs section 5 shows compute static slices based graph concluding remarks given section 7 concurrency model java java supports concurrent programming threads language runtime system thread single sequential flow control within program similar sequential programs sense thread also beginning execution sequence end given time runtime thread single point ex ecution however thread program run rather runs within pro gram programs multiple synchronous threads called multithreaded programs topically java provides thread class library defines set operations one thread like start stop join suspend resume java uses shared memory support communication among threads objects shared two threads called condition variables access must synchronized java language runtime system support thread synchronization use monitors general monitor associated specific data item condition variable functions lock data thread holds monitor data item threads locked cannot inspect modify data code segments within program access data within separate concurrent threads known critical sections java language may mark critical sections program synchronized keyword java provides methods object class like wait notify notifyall support synchronization among different threads using operations different mechanism threads cooperate complete valid method sequence shared object figure 2 shows simple concurrent java program implements producerconsumer problem program creates two threads producer consumer producer generates integer 0 9 stores cubbyhole object consumer consumes integers cubbyhole quickly become available threads producer consumer example share data common cubbyhole object however execute program correctly following condition must satis fied producer put new integer cubbyhole unless previously put integer extracted consumer consumer must wait producer put new integer cubbyhole empty order satisfy condition activities producer consumer must synchronized two ways first two threads must simultaneously access cubbyhole java thread handle use monitor lock object described previously second two threads must simple cooperation producer must way inform consumer value ready consumer must way inform producer value extracted done using collection methods wait helping threads wait condition notify notifyall notifying threads condition changes 3 program slicing objectoriented programs section review related work program slicing directly indirectly influence work slicing concurrent java programs explain slicing algorithms applied concurrent java programs straightforwardly larsen harrold 13 proposed static slicing algorithm sequential objectoriented programs extended system dependence graph sdg 11 first proposed handle interprocedural slicing sequential procedural programs case sequential objectoriented programs sdg used represent many objectoriented features classes objects polymorphism dynamic binding since sdg compute sequential objectoriented programs belong class sdgs defined 11 use twopass slicing algorithm 11 compute slices sequential objectoriented programs chan yang 4 adopted similar way extend sdg sequential procedural programs 11 sequential objectoriented programs use extended sdg computing static slices sequential objectoriented programs hand krishnaswamy 12 proposed another approach slicing sequential objectoriented programs uses dependencebased representation called objectoriented program dependency graph represent sequential objectoriented programs compute polymorphic slices sequential objectoriented programs based graph chen et al 5 also extended program dependence graph objectoriented dependency graph modeling sequential objectoriented programs although representations used represent many features sequential objectoriented programs lack ability represent concurrency fore slicing algorithms based representations compute static slices concurrent java program correctly slicing objectoriented programs concurrency issues also considered zhao et al 20 presented dependencebased representation called system dependence net represent concurrent objectoriented programs especially compositional c cc programs 3 cc synchronization different threads realized using singleassignment vari able threads share access singleassignment variable use variable synchronization ele ment system dependence net straightforward extension sdg larsen harrold 13 therefore used represent many objectoriented features cc program handle concurrency issues cc used approach proposed cheng 6 originally used representing concurrent procedural programs single procedures however approach applied concurrent java programs problems due following reason concurrency models cc java essentially different java supports monitors lowlevel thread synchronization primi tives cc uses singleassignment variable mechanism realize thread synchronization difference leads different sets concurrency constructs languages therefore requires different techniques handle 4 dependence model concurrent java programs generally concurrent java program number threads control flow data flow information flows independent interthread synchronizations among multiple control flows interthread communications among multiple data flows may exist program represent concurrent java programs present dependencebased representation called multithreaded dependence graph multithreaded dependence graph concurrent java program composed collection thread dependence graphs representing single thread program special kinds dependence arcs represent thread interactions different threads section show construct thread dependence graph single thread multithreaded dependence graph complete concurrent java program 41 thread dependence graphs single threads thread dependence graph tdg used represent single thread concurrent java program similar sdg presented larsen harrold 13 modeling sequential objectoriented pro gram since execution behavior thread concurrent java program similar sequential objectoriented program use technique presented larsen harrold constructing sdg sequential objectoriented programs construct thread dependence graph detailed information building sdg sequential objectoriented program found 13 following briefly describe construction method tdg thread arcclassified digraph consists number method dependence graphs representing method contributes implementation thread special kinds dependence arcs represent direct dependencies call called method transitive interprocedural data dependencies thread tdg unique vertex called thread entry vertex represent entry thread method dependence graph method arc classified digraph whose vertices represent statements control predicates conditional branch statements method arcs represent two types depen dencies control dependence data dependence control dependence represents control conditions execution statement expression depends method data dependence represents data flow statements method method dependence graph unique vertex called method entry vertex represent entry method example me39 me47 figure 3 method entry vertices methods get put f1in cubbyholecubbyholein f1out cubbyholeoutcubbyhole f2in thisnumberthisnumberin f2out thisnumberoutthisnumber f3in ccin f5in seqseqin f6in availableavailablein f2in a1in f2in s26 f6out control dependence arc data dependence arc f6in f5in f6out f7in f6in f5in parameter dependence arc call dependence arc thread producer thread comsumer f6out availableoutavailable f7in valuevaluein a1in valueini a2in cinc a3in a4out cubbyholecubbyholeout a5in thisnumberinthisnumber a5out thisnumberthisnumberout figure 3 tdgs threads producer consumer order model parameter passing methods thread method dependence graph also includes formal parameter vertices actual parameter vertices method entry formalin vertex formal parameter method formalout vertex formal parameter may modified method call site method call vertex created connecting called method actualin vertex actual parameter actualout vertex actual parameter may modified called method formal parameter vertex controldependent method entry vertex actual parameter vertex controldependent call vertex special kinds dependence arcs created combining method dependence graphs methods thread form whole tdg thread ffl call dependence arc represents call relationships call method called method created call site method entry vertex called method ffl parameterin dependence arc represents parameter passing actual parameters formal input parameter formal parameter used called method ffl parameterout dependence arc represents parameter passing formal output parameters actual parameters formal parameter defined called method addition methods parameterout dependence arcs also represent data flow return value method exit call site figure 3 shows two tdgs threads producer consumer tdg entry vertex corresponds first statement run method example figure 3 entry vertex tdg thread producer te8 entry vertex tdg thread consumer te25 42 multithreaded dependence graphs concurrent java programs multithreaded dependence graph mdg concurrent java program arcclassified digraph consists collection tdgs representing single thread special kinds dependence arcs model thread interactions different threads program entry vertex mdg representing start entry program method dependence graph constructed main method capture synchronization thread synchronization statements communication shared objects different threads define special kinds dependence arcs mdg 421 synchronization dependencies use synchronization dependence capture dependence relationships different threads due interthread synchronization ffl informally statement u one thread ce56 f1in cubbyholecubbyholein f1out cubbyholeoutcubbyhole f2in thisnumberthisnumberin thisnumber f3in ccin f5in seqseqin f6in availableavailablein f3in f4in f1out f2out a2in a3in a4out a5out s22 s23 f3in f4in f1out f2out a2in a3in a4out a5out control dependence arc data dependence arc synchronization dependence arc parameter dependence arc call dependence arc communication dependence arc f2in a1in f2in s26 f6out f6in f5in f6out f7in f6in f5in thread producer thread comsumer f6out availableoutavailable f7in valuevaluein a1in valueini a2in cinc a3in a4out cubbyholecubbyholeout a5in thisnumberinthisnumber a5out thisnumberthisnumberout slicing criterion s45 seq figure 4 mdg concurrent java program figure 2 synchronizationdependent statement v another thread start termination execution u directly determinates start termination execution v interthread synchronization java synchronization dependencies among different threads may caused several ways show create synchronization dependence arc 1 waitnotify relationships synchronization realized using wait notifynotifyall method calls different threads case synchronization dependence arc created vertex u vertex v u denoted notify notifyall call thread t1 v denotes wait call thread t2 thread object threads t1 t2 different special case one threads waiting notification thread case create synchronization dependence arcs vertex denoted notify call vertex denoted wait call threads respectively example program figure 2 methods put get use java objects notify wait methods cooperate activities means exists synchronization dependencies wait method call producer notify method call comsumer notify method call producer wait method call consumer create synchronization dependence arcs s53 s41 s44 s49 showed figure 4 2 stopjoin relationships another case may cause interthread synchronization stopjoin relationship thread calling join method another thread may proceed target thread terminates case synchronization dependence arc created vertex u vertex v u denotes last statement thread t1 v denotes join call thread t2 threads t1 t2 different 422 communication dependencies use communication dependence capture dependence relationships different threads due interthread communication ffl informally statement u one thread directly communicationdependent statement v another thread value variable computed u direct influence value variable computed v interthread communication java uses shared memory support communication among threads communications may occur two parallel executed threads exchange data via shared variables case communication dependence arc created vertex u vertex v u denotes statement 1 thread t1 v denotes statement 2 thread t2 thread object 1 2 shares common variable t1 t2 different special case one thread waiting notification thread attribute shared threads communication element case create communication dependence arcs statement containing variable threads statement containing variable thread respectively example program figure 2 methods put get use java objects notify wait methods cooperate activities way seq placed cubbyhole producer extracted consumer analyzing source code know exist interthread communication statement s51 thread producer statement s45 comsumer share variable seq similarly interthread communications may also occur statements s52 s40 s43 s48 due shared variable available result communication dependence arcs created s52 s40 s51 s45 s43 s48 showed figure 4 423 constructing mdg java program begins execution main method thread execution main method thread running program started execution threads started calling start methods begins execution corresponding run methods construction mdg complete concurrent java program done combining tdgs threads program synchronization communication points adding synchronization communication dependence arcs points purpose create entry vertex mdg represents entry program construct method dependence graph main method moreover start arc created start method call main method corresponding thread entry ver tex finally synchronization communication dependence arcs created statements related thread interaction different threads note paper since focus concurrency issues java many sequential objectoriented features may also exist concurrent java program discussed however represent features sequential objectoriented programs using dependence graphs already discussed researchers 4 5 12 13 techniques directly integrated mdg concurrent java programs figure 4 shows mdg program figure 2 consists two tdgs threads producer consumer additional synchronization communication dependence arc model synchronization communication producer consumer 5 slicing concurrent java programs section show compute static slices concurrent java program focus two types slicing problems slicing single thread based tdg slicing whole program based mdg 51 slicing single thread addition slicing complete concurrent java pro gram sometimes need slice single thread program analyzing single thread independently thread interactions ignored slice computed based tdg define slicing notions single thread follows static slicing criterion thread concurrent java program tuple v statement thread v variable used method call called static slice thread given static slicing criterion v consists statements thread possibly affect value variable v value returned method call v mentioned previously tdg thread similar sdg sequential objectoriented program 13 therefore use twopass slicing algorithm 11 compute static slices thread based tdg first phase algorithm traverses backward along arcs except parameterout arcs set marks vertices reached tdg second phase algorithm traverses backward vertices marks first phase along arcs except call parameterin arcs sets marks reached vertices tdg slice union vertices tdg marked first second phases similarly also apply forward slicing algorithm 11 tdg compute forward slices thread 52 slicing complete program slicing complete concurrent java program may also use twopass slicing algorithm proposed 11 mdg used base compute static slices program mdg concurrent java program also regarded extension sdg sequential objectoriented program 13 whereas slicing single thread involve thread interactions slicing complete concurrent java program may definitely involve thread interactions due synchronization communication dependencies different threads following first define notions static slicing concurrent java program give slicing algorithm based 11 static slicing criterion concurrent java program tuple v statement program v variable used method call called static slice concurrent java program given static slicing criterion v consists statements program possibly affect value variable v value returned method call v twopass slicing algorithm based mdg described follows first step algorithm traverses backward along arcs except parameterout arcs set marks vertices reached mdg second step algorithm traverses backward vertices marks first step along arcs except call parameterin arcs sets marks reached vertices mdg slice union vertices mdg marks first second steps figure 4 shows backward slice represented shaded vertices computed respect slicing criterion s45 seq similarly also apply forward slicing algorithm 11 mdg compute forward slices concurrent java programs addition computing static slices mdg also useful computing dynamic slices concurrent java program example use slicing algorithm similar 1 6 compute dynamic slices concurrent java program based corresponding static slices execution history information program program slicing useful program understanding example attempt understand behavior concurrent java program usually want know statements might affect statement interest statements might affected execution statement interest program requirements satisfied slicing program using mdgbased slicing forwardslicing algorithms introduced paper 6 cost constructing mdg size mdg critical applying practical development environment concurrent java programs section try predicate size mdg based work larsen harrold 13 give estimate size sdg sequential objectoriented program since tdg mdg similar sdg sequential objectoriented program apply approximation estimate size tdg single thread concurrent java program whole cost mdg program got combining sizes tdgs program table 1 lists variables contribute size tdg give bound number parameters method paramverticesm use bound compute upper bound size method sizem based sizem number methods methods single thread compute upper bound sizetdg number vertices tdg including classes contribute size thread 2paramvertices2paramvertices based result single thread compute upper bound number vertices sizemdg mdg complete concurrent java program including threads note sizetdg sizemdg give rough upper bound number vertices tdg mdg practice believe tdg mdg may considerably space efficient 7 concluding remarks paper presented multithreaded dependence graph mdg static slices concurrent java programs computed efficiently mdg concurrent java program consists collection thread dependence graphs representing single thread program special kinds dependence arcs represent thread interactions concurrent java program represented mdg slices program computed solving vertex reachability problem graph although presented approach term java believe many aspects approach widely applicable could applied slicing programs monitorlike synchronization primitive ie ada95s protected types moreover order develop practical slicing algorithm concurrent java programs specific features java interfaces packages must considered 22 presented technique constructing dependence graph represent interfaces packages sequential java program technique integrated directly mdg representing interfaces packages concurrent java programs slicing technique introduced paper handle problem statement slicing largescale software systems developed java statement slicing may efficient system usually contains numerous components case new slicing technique called architectural slicing 21 used perform slicing architectural level system contrast statement slicing architectural slicing provide knowledge highlevel structure software system 21 considering integrate architectural slicing statement slicing framework support slicing largescale software systems developed java statement level also architectural level believe approach helpful understanding table 1 parameters contribute size tdg vertices large number statements single method arcs large number arcs single method params largest number formal parameters method classvar largest number class variables class objectvar largest number instance variables class callsites largest number call sites method treedepth depth inheritance tree determining number possible indirect call destinations method number methods largescale software systems developed java implementing slicing tool using javacc 16 java parser generator developed sun mi crosystes computing static slices concurrent java program based mdg acknowledgements author would like thank anonymous referees valuable suggestions comments earlier drafts paper r debugging dynamic slicing backtracking program interface slicing reverse engineering compositional c language definition program slicing system objectoriented programs slic ing objectoriented programs slicing concurrent programs graphtheoretical approach un derstanding function behaviors program slic ing program dependence graph use optimization using program slicing software maintenance program slicingbased regression testing techniques interprocedural slicing using dependence graphs program slicing application objectoriented program dependency graphs slicing objectoriented software debugging objectoriented software program dependence graph software development envi ronment httpwww survey program slicing techniques slic ing class hierarchies c program slicing static slicing concurrent objectoriented programs applying slicing technique software ar chitectures applying program dependence analysis java software tr ctr jens krinke contextsensitive slicing concurrent programs acm sigsoft software engineering notes v28 n5 september zhenqiang chen baowen xu jianjun zhao overview methods dependence analysis concurrent programs acm sigplan notices v37 n8 august 2002 zhenqiang chen baowen xu huiming yu detecting concurrently executed pairs statements using adapted mhp algorithm acm sigada ada letters vxxi n4 december 2001 durga p mohapatra rajeev kumar rajib mall kumar mayank bhasin distributed dynamic slicing java programs journal systems software v79 n12 p16611678 december 2006 mangala gowri nanda ramesh interprocedural slicing multithreaded programs applications java acm transactions programming languages systems toplas v28 n6 p10881144 november 2006 baowen xu zhenqiang chen dependence analysis recursive java programs acm sigplan notices v36 n12 december 2001 baowen xu ju qian xiaofang zhang zhongqiang wu lin chen brief survey program slicing acm sigsoft software engineering notes v30 n2 march 2005