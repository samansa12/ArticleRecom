frameworkbased approach development networkaware applications abstractmodern networks provide qos quality service model go beyond besteffort services current qos models oriented towards lowlevel network parameters eg bandwidth latency jitter application developers hand interested quality models meaningful enduser therefore struggle bridge gap network application qos models examples application quality models response time predictability budget transmission costs applications deal changes network environment called networkaware networkaware application attempts adjust resource demands response network performance variations paper presents frameworkbased approach construction networkaware programs core framework feedback loop controls adjustment application network properties framework provides skeleton address two fundamental challenges construction networkaware applications 1 find dynamic changes network service quality 2 map applicationcentric quality measures eg predictability networkcentric quality measures eg qos models focus bandwidth latency preliminary experience prototype networkaware image retrieval system demonstrates feasibility approach prototype illustrates networkawareness taking network resources protocols account raises questions need addressed software engineering point view make general approach networkaware applications useful b introduction applications use networks provide access remote services resources however todays net works users experience large variations performance eg bandwidth latency may change several orders magnitude session dramatic changes observed mobile environments user moves one location another well stationary environments network users cause con gestion variations network performance problem applications since result unpredictable application havior unpredictability annoyingeg user looks online catalogue certain bandwidth must continuously available system wants display images j bolliger department computer science swiss federal institute technology eth zurich switzerland email bolligerinfethzch effort sponsored part eth polyprojekt 4126415 gross department computer science eth zurich switzer land school computer science carnegie mellon university pittsburgh pa 15213 email thomasgrosscscmuedu effort sponsored part advancedresearch projects agencyandrome laboratory air force materiel command usaf agreement number f306029610287 us government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon views conclusions contained herein authors interpreted necessarily representing official policies en dorsements either expressed implied advanced research projects agency rome laboratory us government speed expected user congestion frustrates user point software becomes unusable bridge gap network reality application expectation ie cope performance variations provide certain predictability application behav ior number researchers proposed development networkaware applications basic idea allow application adapt network environment eg trading volume quality data transferred time needed transfer application responds drop bandwidth reducing demands networks increases demands additional resources develop meaningful approach adaptation must understand realities todays network architectures dynamics services provided many reasons variation network performance reasons inherent eg mobile wireless communication others caused tremendous demand always seems outgrow capacity improvement response sit uation modern networks beginning move away besteffort service model qos models allow definition quality metrics based variety parameters un fortunately current qos models oriented towards lowlevel network parameters eg bandwidth latency jitter application developers hand interested quality models meaningful enduser response time thus network awareness includes mapping applicationcentric quality measures eg predictability networkcentric quality measures vice versa another motivation network awareness avoid distinction different application modes example image retrieval systems distinguish preview browse mode thumbnails provided mode higher quality image delivery avoiding concept mode simplifies implementation application components allows system dynamically take advantage available resources user highbandwidth local area network live thumbnailsized view statically defined optimized users accessing image server across slow widearea network time limit parameter controls long client willing wait provides enough flexibility toggle implicitly browsing highquality mode applications may need adapt either startup time dynamically course session exist number networkaware applications particular realm multimedia 22 2 however solutions problem network variability adopted class applications often tailored specific needs ieee transactions software engineering vol 24 5 may 1998 376390 individual application specific programming model 41 exists general approach develop networkaware applications application domains network awareness continues important aspect application develop ment need arises identify provide general approach build networkaware systems propose use frameworks approach encapsulates integrates solutions problems adapting applications behavior availability network resources framework provides basic solution class problems clients framework employ basic structure exten sion ie provide concrete methods framework relies abstract methods 39 build networkaware applications extending framework must develop overall structure foundation framework well specific extensions result real system done application domains frameworks proven useful paper organized follows section ii discusses issues related problem networkawareness section iii introduces basic structure framework service model supported sections iv v provide detailed description methods employed obtained information network resource availability strategies used adapt changes service quality respectively presenting performance measurements section vi summarize related work present conclusions ii network systemawareness networks one many resources employed application model networkaware application emphasizes crucial role network connection many cases network critical path performance problems network cause degradation application per formance however cases system bottlenecked components eg transfers across local bus disks amount computation experimental systems support qos model internal transfers 15 10 9 application performance limited parts network application networkaware systemaware ie able adjust behavior response aspects system response time disk io latency bus bandwidth etc context paper focus concept networkawareness implying ap plications behavior primarily controlled availability network resources point application must go beyond network issues systemawareness especially important application wants trade communication computation ie application may adjust network changes computing eg compression cases important make sure computation overhead worse network overload discussion network service quality awareness concentrate unicast requestresponse type communication clients servers traffic least one direction described bulktransfer type network traffic traffic pattern makes large fraction application traffic patterns observable todays networks 5 29 reservation vs adaptation another approach couple service qualityaware application network allow application reserve network services advance 40 discuss relative benefits either approach since practice coexist continue long time network architectures implementations may support reservations may support limited degree either choice due implementation faults although future versions popular protocol suites may support reservations sites run recent software furthermore network providers attempt develop usagebased charging schemes financial incentives restrain applications uncontrolled use network resources todays networks really two aspects make adaptivity unattractive almost usagebased charging worse aggressive applications often rewarded largest share bandwidth pie 12 reservationbased approach application must address two issues find much reserve eg given limit costs ii adjust meet confirmed reservation may less application asked software engineering point view however techniques require software technology application must able adjust resource demands either meet limit imposed reservation meet constraints imposed network either case application must adaptive b quality objective networkawareness allow application sensitive changes network environment goal maximizing userperceived quality context quality means conformance standard specification focus systemawareness means interested totality features characteristics product service bears ability satisfy given needs 17 application developer knows quality build infrastructure applications interested qualitytime tradeoff ie applications willing sacrifice degree quality return faster response time willing wait little longer get better results central issue must find software structure allows application developer specify quality means context specific application iii framework networkaware applications discuss specific framework first want lay roadmap kind interaction possible profitable application network framework provides class applications way structure interaction network extending framework start principles applicationnetwork principles stem experience various application projects reflect study rework involved factoring possible framework structures illustrate bolliger gross frameworkbased approach development networkaware applications 3 general principles examples specific project chariot swiss analysis retrieval image objects project 1 described detail section va objective chariot project allow networked clients search remote image database chariot system contains adaptive image server serves proofofconcept general ideas presented remainder paper service model many networked applications using requestresponse type communication include user client requests set objects images texts videos byte code etc remote site server responsible retrieving requested objects secondary storage delivering client response usually larger volume request dominates transmission costs following sometimes refer servers clients sender receiver bulktransfer respectively server accepts acts upon request messages containing list objects retrieved computed qos restrictions qosrestrictions characterize minimum quality tolerable objects delivered maximum quality beneficial user limit time allowed processing request transmitting response bounds quality may implicitly imposed questers processing display capabilities application decides kind objects requested quality property requestable object must also defined application example chariot requestable objects images image sequences quality image defined resolution color depth image format eg jpeg gif formatspecific parameter jpegs compression factor 18 userdefined weighting image characteristics servers task deliver requested objects client within time attempting maximize overall quality objects transmitted respecting qosrestrictions range dynamic adaptation bandwidth availability bounded minimal maximal quality specified client quantify task server quality metric must defined application eg weighted sum individual object qualities delivered weights quality metric may include relative importance object comparison objects request list example chariot weight image image request list determined value similarity image respect query image networkaware server need dynamically adapt due network service degradation eg drop bandwidth also try opportunistically exploit extra bandwidth deliver many high quality objects possible within time networkaware applications adhering service model must address following questions find dynamic changes network service quality path sender receiver ii adapt delivery process dynamic changes objectives service model met turn question detail sections iv v present general structure type networkaware application consideration b application structure software feedback control loop useful structure networkaware applications using requestresponse type communication software feedback control loop time left responseinitially set constitutes command variable closedloop con trol feedback driving sender adaptation comprises information currently available bandwidth obtained mechanisms described section iv focus closedloop control systems position deal bursty applications applications eg deal continuous media streams may use different control structure 2 22 model senderinitiated adaptation closedloop control system three phases monitor react p mr prepare p prep transmit p trans depicted fig 1 three phases work independently share list l requested yet transmitted objects p mr responsible obtaining information feedback available bandwidth determining whether amount data transmit must reduced whether may increased case adaptation needed p mr phase must decide objects adapt transformations apply must set quality state objects according decisions term transformation refers activity including transfers conversions computation final decision quality object delivered made p prep must transform object quality assigned p mr p trans delivers completely prepared objects client note p mr invoke transformations directly defers execution forthcoming phases p prep allow lastminute adaptation furthermore note p mr may need change quality state several objects time p prep makes one object ready transmission time uniprocessor iv feedback network central issue determines effectiveness control loop frameworks built loop obtains information state network networkaware application want know aim provide predictable service ie response delivery within specified amount time application ideally wants know network service quality particular bandwidth available time besteffort network service model ips atm abrs 7 way getting information advance thus gather much qosinformation past behavior possible useful extrapolate future network behavior observed qosvalues distinguish two different applicationrelevant characteristics far bandwidth feedback concerned bottleneck bandwidth available bandwidth 30 former gives upper bound fast much application may possibly transmit latter gives estimate fast connection transmit preserve network stability issue primary concern congestion control mechanisms 4 ieee transactions software engineering vol 24 5 may 1998 376390 mon reac mon torpo bandw dth nu l object quality reduction expansion deliver object client prepare transform available version object desired object quality reques recep connection handling request processing ng list requested objects feedback network ob ject de l across network app l ca ayer adap aye r con r owe r aye r fig 1 controlloop consisting three phases monitor react p mr prepare p prep transmit p trans knowledge bottleneck bandwidth useful bounding approximations bandwidth estimates used networkaware sender information dynamics available bandwidth endtoend network path indispensable enable timely adaptation volume data transmitted b three approaches obtaining feedback section discusses three approaches obtain feedback characteristics dynamic behavior end toend network path distinction based layering isoosiprotocol stacks higher layer providing feedback less cooperation required network protocols one side less accurate frequent feedback information side feedback network service quality may provided applicationlevel qos monitoring monitor assesses dynamics network service quality measuring sender receiver network quality parameters eg packet interarrival times bandwidth etc repeatedly exchanges qosstate peers similar model proposed rtp 35 timeliness accuracy information depends averaging interval used computation qosvalues frequency qosstate exchange monitoring approach provides black box view network transport ser vices therefore sender difficulties distinguishing service degradation caused network degradation caused application endsystem eg temporarily slow receiver may lead sender wrongly assume network service degradation endtoend transportlevel congestion control goal congestion control algorithm operate connections fair share bandwidth must deploy mechanisms find bottleneck bandwidth detect incipient congestion network underutilization implicit feedback drives adaptation sending rate may include fraction packets lost measurements delay variations interarrival times packetpairs etc several benefits gained making transportlevel feedback information transparent networkaware appli cation feedbackloop shortened queuing unnecessary data transmission avoided times con gestion information may help bringing appli cations behavior line protocols behavior since application view network resources protocol furthermore congestion control algorithm make transparent conclusions available bandwidth even tighter coupling application network achieved networklevel traffic management routers suited fairly allocate resources among competing connections routers authority capable identifying isolating misbehaving senders furthermore routers able provide explicit feedback congestion state endsystems router endtoend path may generate feedback messages either binary form 31 explicit rate information 7 feedback must processed endsystems find available bandwidth used control sending rate important note different layers may different perceptions current network status since employ different mechanisms deal exceptions loss events however far estimation available resources concerned strive view accurate possible helps avoid exception situations therefore layer may provide information needed networkaware appli cation however lower layer timely accurate information bolliger gross frameworkbased approach development networkaware applications 5 ca mon ne wo r k adapta app l ca mon ne wo r k adap response bulk data stream reques response qosstate exchange error ow con ro exchange rate contro exchange send ge bw r ecv fig 2 layered architecture networkaware applications adaptation layer implementing closedloop control fig 1 c unified api although three layers employ different feedback mecha nisms aim finding available network service quality control applications sending rate therefore devise unified api network service quality feedback general bandwidth feedback particular provides networkaware application required information application interested obtaining predictions bandwidth expected qosvalue estimation reliability prediction extend common transport protocol api socket api 37 function get bw returns bwt predicting bandwidth prob bw estimate stability prediction 1 note ease framework development provide qos interface layer fig 2 note also monitor adaptationlayer logically part application provision dynamic network qosinformation main topic paper restrict discussion exemplifying endtoend congestion control information made transparent application api described implementation tcpbased userlevel transport protocol 4 distinguishes three highlevel sender congestion states startup slow start congestion avoidance congestion recovery 19 three stateclasses see state pattern 14 provides function get bw slowstart phase uses packetpair probing estimate bottleneck bandwidth 2 bw max returns function rtt cwnd denotes current congestion window rtt stands mea sured roundtrip time phase bwt reflects slow starts doubling bandwidth occupied every roundtrip time represented ratio cwnd rtt exponential increase continues network paths bottleneck capacity bw max ii protocol congestion avoidance state ie operating bandwidth effectively available deploy tcp vegasstyle networkpath adaptation 3 therefore approximate bwt cwnd rtt changes cwnd supposed happen fairly large timescale multiples roundtrip time iii congestion recovery state effects rate 1 sake brevity discuss bandwidthrelated functions similar apiextensions exist qosparameters delay loss process known initial slowstart threshold ssthresh estimation 3 16 note standard tcp uses statically defined ssthresh 64 kbytes halving bwt modeled according 21 congestion controls useitorloseit property 11 requires sender almost constantly sending otherwise feedback may useful moreover issue dynamically assessing stability endtoend networkpath characteristics open research question refrain discussing compute prob bw refer offline studies topic 30 v feedback loop adaptation stated previous sections goal networkaware sender meet userspecified bound delivery time adapting quality objects delivered mea suredavailable network capacity adaptation process objective must utilize available resources efficiently possible therefore maximize userperceived quality within bounds time bandwidth boundary conditions quality given following sections discuss detail mechanisms deployed prototype networkaware system elaborate applicationspecific information canmust factored software control system described provide reusable framework however turn framework structure interaction appli cation briefly introduce chariot system example type application based upon framework chariot sample framework instantiation objective chariot project allow networked clients search remote image database chariot system uses querybyexample let user formulate query similar images 1 lowlevel content eg color texture image repository extracted define feature vectors organized database index search engine core system depicted fig client handle user access image library search engine identify matching images one networkaware servers deliver images best possible quality considering network performance server load clientspecified delivery time physical separation image library index search engine image repository server facilitates distribution mirroring library core components connected coordination layer isolates details network access adaptation gives component maximum flexibility take advantage future developments 6 ieee transactions software engineering vol 24 5 may 1998 376390 gui client server search engine request delivery query reply coordinator connection handling coordinator connection handling message convertion image retrieval delivery coordination layer feature vector extraction indexing coordinator connection handling fig 3 chariot architecture subsystem comprising client adaptive image repository relevant discussion network awareness serves proofofconcept ideas presented paper b monitor reactphase table summarizes terms abbreviations introduced next sections discussion applicationspecific information factored control loop framework must provided application developer always refers omtstyle 33 class hierarchy depicted fig 4 name abstract classes part frame work abstract methods shown italics concrete classes provided application instantiates framework chariot exampleare shaded text use func tional notation eg fooob j barclass indicate method foo invoked object ob j ob j foo c im plementation method bar invoked class class class bar respectively monitor reactphase p mr key phase framework responsible repeatedly obtaining feedback lower protocol layers deciding whether adaptation required software control loop part application may layered top network monitor see fig 2 extracts feedback information available network service quality eg bandwidth p mr primarily interested feedback relevant changes service quality either must deploy polling policy obtain feedback available bandwidth assess significance qos change register monitor layer asynchronous notification qos change events whether change network service quality relevant applicationspecific depends granularity adaptation possible cost incurred adaptation mechanisms well bandwidth processing power available section vc cases p mr executed repeatedly establish whether adaptation eg data reduction required account network service degradation whether adaptation beneficial prevent network underutilization applicationlevel quality must mapped networklevel quality parameters bandwidth required amount data remaining shipped left left together feedback available bandwidth used compute time needed needed transfer corrective action must taken needed time left left differ significantly signifi cance depends also size objects well network application properties b1 applicationtonetwork qosmapping kind qosmapping enables comparison needed left requires application provide function dataquality computes amount data necessary given object quality see member function quality data fig 4 left determined sum dataqualityob j objects ob j yet delivered given left get bw estimates bandwidth available time future compute needed integrating ie summing piecewise continuous parts function bwt time area ie data vol ume covered exceeds left thus needed represents time needed transfer left given bandwidth bwt fairly general statement must qualified avoid misinterpretations besteffort network service model bwt hardly predicted roundtrip times reasonably high probability transport level section iv therefore approximates available bandwidth first roundtrip times simple constant linear functions based past measurements approximation simplifies computation needed knowledge bottleneck bandwidth used bound approximation note time needed prepare transmit next object p mr needs estimate future network behavior able satisfy users request within time limit reason control loop gets opportunity take corrective action next iteration p mr required case estimates conditions cannot met eg dealing large objects transmission takes longer system reliably predict bwt situation complicated either control loop gets chance take corrective action time limit expire data cannot sent allot bolliger gross frameworkbased approach development networkaware applications 7 abbreviations used paper reactphase prep prepare phase trans transmit phase user specified time limit response delivery left time left deliver response initialized c prep cpu resources used prepare objects transmission prep time needed prepare objects given c prep loadt trans time needed transmit objects given bwt needed time needed deliver response given trans prep error variable control loop needed gamma left left data remaining transmitted reduction reduction potential object bwt bandwidth estimationprediction loadt system load estimationprediction chariot class object quality data algorithm preparecosts request original current transforms requestedobjects imageobject imagequality data imagescaling qualityobj p preparecosts prepare algorithmiter imagecompr preparecosts return w h depth comprratio weight timelimit h depth comprratio new imagequality p objorigw p objorigh objorigdepth objorigcomprratio curtrans cjpeg quality param objorig curtranstransformthis param framework class abstractmethod fig 4 applicationspecific part class hierarchy omtnotation 33 ted time latter case application must able deal breakdown service model section b2 networktoapplication qosmapping goal p mr bring needed line left either reducing increasing overall quality objects remaining delivered actions thereby reduce increase left following questions must considered sender tries compensate difference dif needed adapting quality data awaiting delivery objects chosen adaptation victim choice ii amount quality adaptation distributed among chosen objects importantly sender find amount quality adaptation needed given volume data adaptation required dif f quality distribution iii algorithms used accomplish desired adaptation algorithm selection certain extent questions applicationspecific therefore cannot answered gen eral thus framework networkaware applications must provide flexibility replacing refining extending strategies described following paragraphs victim choice one strategy chose objects adaptation ie victims proceeds along following idea quality reduction required choose objects lowest weight quality product influence overall quality least case expansion needed objects highest weightquality product chosen analogous reasons note metric used victim choice depends application eg image retrieval system may better decide according weights based similarity measures reflect images user really interested ii quality distribution given set victims reduced expanded ideally individual objects reduced quality inversely proportional weightquality product weight respectively however problem arises 8 ieee transactions software engineering vol 24 5 may 1998 376390 system must satisfy two objectives two different levels one hand aims balance applicationlevel quality reduction according relative importance objects ie weight hand needs achieve data reduction certain amount dif f network level problem mapping network application quality measures generally ambiguous contrast applicationtonetwork mapping example chariot effect image size reduction factor n server may either scale image n reduce color depth factor n find jpeg quality factor achieves compression ratio use combination image transformation algorithms mentioned although find transformations achieve certain data reduction direct effect quality reduction known since applicationlevel quality depends userspecified weighting individual quality attributes eg resolution color depth ambiguity makes hard guarantee balanced quality reduction find required quality reduction efficiently general straightforward inefficient solution simply computes compares data quality reduction algorithms unless application provides additional hints continuity dataquality function much chance improve upon approach finding efficient generally applicable approaches aspect applicationcontrolled qosmapping still area ongoing research prototype system make simplification dataquality linear function quality assumption implies system must find fair distribution dif f respects weights individual objects see section vd2 problem networktoapplication qosmapping complicated since adaptation potential object limited boundary conditions minmax quality must taken account b transformations applied objects consume host resources time therefore transformations indirectly impact needed address issues related b section vc iii algorithm selection choice transformation algorithm accomplish given quality adaptation closely related issue much quality adaptation required victim usually applicationdependent choice indicated example prototype framework require application specify list transformation algorithms class objects part request algorithm must provide list parameter values appli cable addition application must provide functions help adaptation process estimate data quality reduction potential algorithm perobject basis c systemawareness quality adaptations eg means transformations compression cost cpuresources take nonnegligible amount time completed one hand reduction object quality may result desired reduction transmission time hand transformations necessarily imply higher cpucosts simply retrieving object image disk obviously want avoid situations reduction object quality attempt reduce error variable incurs prepare costs prep higher gain transmission time ie prep dif f therefore resource model also includes prep time needed phases p prep adaptation process still driven network resource availability additionally controlled host resource consumption availability transformation algorithm registered requested objects must provide function prepare costsob j paramcpu returning estimate costs c prep transform ob j original quality state one currently assigned given cpu c prep denotes costs terms resources used eg given system user cpu time unix systems c prep used compute estimate effective prep needed transformation using operating system dependent function prepare timec prep load load denotes average length process runqueue example unix systems time needed given task using c prep cpu time system load load approximated c prep delta load certain maximum loadlevel effectiveness adaptation process reliability server meet qosconstraints depend accuracy models estimates introduced last sec tions bwt dataquality prepare costsob j paramcpu prepare timecost load etc accurate estimates used decisionmaking higher probability sender able meet time constraints example chariot server computes c prep function image size param used transformation algorithm contrast approaches typically found realtime systems rely worstcase predictions c prep server bases estimates statistical data gained past measurements request processing derived regression models al gorithms cost reduction potential regression models regularly updated new measurements c1 practical considerations communication latency hiding simple implementation software control loop phases framework execute sequentially adaptation produces stable results prep trans adapted object smaller trans original object however sequential operation wastes bandwidth host busy preparing next object transmission wastes cpu resources transmitting objects slow endtoend path slow connection sender almost constantly congestion controlled ample cpu cycles improved control loop tries keep p trans constantly sending uses threaded prepare transmit phases hide latency object de livery communication latency hiding calls different cost model needed longer computed prep trans approximated denotes fraction prep available latency hiding 38 although intrinsics various resource models outside scope paper discussion emphasizes need suitable abstractions allow future refinements extensions encapsulate computation communication model deployed function overall timet prep trans used compute needed bolliger gross frameworkbased approach development networkaware applications 9 using framework implement adaptive system fig 5 summarizes steps involved computing error variable dif f drives adaptation process function compute dif f takes request ie list objects yet transmitted functions bwt loadt argu ments addition uses global variables left cpu compute dif f used function adapt sketched fig 6 invoked repeatedly p mr obtaining new bandwidth feedback bwt dif f exceeds applicationspecific threshold e limiting oscillation remaining objects request subject adaptation process described next sections accomplish adaptation sender must find objects transform given list objects must transmitted several possible approaches identify victims distribute quality reduction select transformation algo rithms discuss two approaches d1 general exhaustive search avoid congestion network underutilization adaptation process aim find combination objects adapt transformations apply j dif f j minimized overall quality metric maximized unfortunately exhaustive search global minimum j dif f j whole solution space attractive illustrate next paragraphs given request consisting n objects given transformation algorithms taking different parameter values average n possible transformations applicable objects assume possible combinations fulfill qosrestrictions approximately possibilities adapt request currently available bandwidth iteration p mr sender must compute dif f n n points solution space eg find combination smallest j dif f j alter native sender try find combinations jt dif f choose one maximal weight delta quality long additional information functions used compute dif f eg gradients long quality boundaries restrictive size solution space cannot reduced hence complexity high make approach feasible general case fore cannot include generic method perform exhaustive search framework since expect methods framework provide solution possible extensions however provide application several strategies 14 adaptation process one exhaustive search example leave application developer decide appropriate strategy use context application d2 practical approximative search n n large sender must either employ approximations introduce simplifications adaptation process reduce complexity adaptation process otherwise search expensive resource consumption p mr must included cost models sake simplicity restrict discussion former case idea forms basis currently implemented adaptation process approximate search minimal iteratively trying apply possible transformation algorithms respective parameters objective find local minimum within tolerance one algorithm achieve desired result next algorithm chosen 24 adaptation phase ie reduce function fig 6 proceeds along following steps see section v victims chosen first n objects request list ordered increasing weights reduction ob represents amount data reduction required compensate dif f reduction ob j denotes reduction potential current quality state object ob j bounded minimal quality tolerated user set n objects exists necessary data reduction achieved exception thrown caught handled adapt fig 6 ii simplifying assumption data quality dif f distributed among victims assigning reduction needed object fraction dif f inversely proportional objects relative weight request list unless reduction poses limit reduction attainable case distribution step repeated long objects whose reduction limited reduction long dif f fully compensated iii transformation algorithm selection done iterating algorithms objects parameters step dif f computed iteration terminates note adaptation process outlined makes heavy use iterators shown fig 4 use iterators facilitates experimentation different priorities transformation algorithms used based experience chariot found able cleverly apply applicationknowledge set priorities essential effectiveness approximative search e problems feedback control paper describes overall structure framework networkaware applications several practical issues mentioned discussed detail startup behavior special care must applied find optimal operating point control loop soon possible avoiding overshooting excessively conservative ie slow startup networkaware sender requirement means server ought start delivering objects soon possible get early feedback furthermore sender refrain sending large object start case bandwidth turns unexpectedly low requirements impact application design follows application either allow list requested objects reordered objects ob j small dataob j need cannot adapted sent first ii able cope interrupted object delivery may restarted lower ob j2request dataqualityob j ob j2request prepare costsob j algorithmob j paramob jcpu prepare timec prep loadt fig 5 function compute dif f requestbwt loadt returning dif f try f prevent congestion else prevent underutilization catch noadaptationpossible exception f handle exception application specific handler fig 6 function adaptrequestbwt loadt quality iii support hierarchical encoding progressive delivery objects transmission stopped time bandwidth probing lower layers communication system allows estimate expected bandwidth rtts eg packetpair probing 20 30 also help alleviate problems startup behavior communication idle time gaps sequence object transmissions avoided transmission opportunities lost application level also many congestion control mechanisms exhibit useitorloseit property 11 communication idle time results loss fair share bottleneck bandwidth previously held connection consequently results repeated startup behavior latency prepare transmit activities model dynamic adaptation network service quality networkaware sender must rely either good bandwidth estimates expectation network service degrade prep trans next object data reduction potential inherent remaining objects request list due nature besteffort network service assumptions may fulfilled situation results breakdown service model illspecified boundary conditions another cause failure requires applicationspecific reaction application set require high minimal quality even sending minimal quality exceeds time limit however appropriate settings boundary conditions cannot always anticipated therefore application must able deal situations possible reactions include delivery objects minimal quality de sirable image retrieval system userapplication dialogue renegotiate boundary parameters termination transfers altogether last option attractive allows overloaded server catch applicationprovided exception handler fig 6 deals situations vi evaluation section presents results chariot system extension framework presented concentrate assessing ability adaptive server respond bandwidth fluctuations ie networkawareness note examples presented serve purposes validating approach well pointing areas research restricted nature selected examples means replace extensive evaluation quantification adaptation potential practice however study beyond scope paper evaluation methodology approach evaluate systems networkawareness proceeds two steps first subject system synthetic reference bandwidth waveforms example presented stepdown waveform shown fig 7a characterize ability adapt general accordance well established principles measuring dynamic response field control systems 32 second field tests internet high bandwidth dynamics enable us assess bolliger gross frameworkbased approach development networkaware applications 11 systems agility respect realworld network traffic since ensuring reliable reproducible experiments real networks extremely difficult follow approach researchers resort technique called trace modulation 28 trace modulation performs applicationtransparent emulation slower target network faster wired lan applications network traffic delayed according delay bandwidth parameters read socalled replay trace gathered monitored transfers b experimental setup experiments chariot server runs 150 mhz mips r4400 sgi challenge 128 mb memory 134 mhz mips r4600 sgi indy 64mb memory serves platform client experiments shown client requests transmission 90 jpeg images stored server resolution 380 theta 250 pixels jpeg quality factor 9597 90 images total 52 mb data transmitted images assumed equally relevant means equal weights assigned 90 images userimposed time limit request processing arbitrarily chosen 60 seconds tolerance interval 2 2 seconds bandwidth replay traces used two experiments conducted depicted fig 7 stepdown waveform fig 7a idealization real network scenarios approximates possible situations overlay network instance mobile client may seamlessly switch different network interfaces fig 7b shows monitor layers perception available bandwidth transfer eth zurich switzerland university linz austria bandwidth curve smoothed using two second averaging interval hence system test deal problems startup behavior chariot server operates using approximative search adaptation process described section vd2 chariots reduction algorithms registered framework image scaling factors 12 14 image compression quality factors 75 50 25 18 server performs communication latency hiding means separate thread p prep consequence p trans image sequentially processed request list operates concurrently p prep image 1 c experimental results c1 stepdown waveform fig 8a data vs time plot introduced 19shows chariot able adapt amount data transmitted curve named actual amount data transmittable possible deliver 90 images within 60second time limit stepdown waveform available bandwidth fig 7a represents derivative curve named possible sharp drop bandwidth seconds absorbed almost without loss transmission possibilities loss transmission possibilities characterized vertical difference curve showing data theoretically transmittable possible data actually transmitted ac tual caused prepare control loop overhead curve depicting control loops estimate total amount data transmittable within time limit estimated shows adaptation place swiftly within small fraction second estimate based amount data already transmitted monitors estimate available bandwidth bwt left fig 9 plots control loops error variable dif f drives chariots adaptation two horizontal lines dif tolerance interval specified time difference plot shows fact three different major adaptation events occurred adaptation necessary j dif f j 2 first around adaptation steps necessary reduce 52 mb 47 mb estimated transferable second due sharp bandwidth drop needed hence dif f increase approx 33 seconds drop compensated subsequent reduction steps third dif f exceeds 2 secondtolerance twice 33 although change bandwidth could observed fact may attributed inaccuracies estimates c prep reduction potential images although provision inaccurate estimates application detrimental impact overall performance ie quality deliverable example shows control loop mechanism flexible enough even cope situations c2 internet traffic fig 10 shows chariot even capable dealing frequent oscillations available bandwidth present days widearea network paths note however penalty terms transmission possibilities lost higher previous case curve depicting data volume transmittable possible relates bandwidth waveform shown fig 7b careful examination curve plotting data effectively transmitted reveals two cases 3 20 transmission lulls accepted reason cases p trans image finished concurrently executed phase p prep image 1 thus wait starting transmission image 1 causes behavior twofold either c prep img case adaptation process could try reorder images request list avoid communication idle time servers load high prep img trans img latter problem calls host resource reservation operating system researchers suggested 25 26 keep mind although examples presented show adaptation meet given time limit works whole process adaptation quite sensitive choice boundary conditions time limit since adaptation potential limited reduction potential objectsimages transmitted cost incurred transformation unrealistic expectations user may simply result breakdown service model vii related work divide approaches provide predictability service quality applicationuser two categories bandwidth time sec bandwidth stepdown waveform01030507090 bandwidth time sec bandwidth b bandwidth internet image transfer fig 7 bandwidth replay traces used ddddddddddd dd dd dd ddd dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd ddd dddddddddddddddddddd dd dd dd data time sec possible actual estimated fig 8 data volume transmitted stepdown scenario tdiff time sec tdiff lower bound upper bound fig 9 time difference dif plot stepdown example bolliger gross frameworkbased approach development networkaware applications 13 ddddddddddddddddd ddddddd dd ddddddddd dddddddddddd ddddddddddddddddddddddddddddddddddddd ddddddddd dddddddddddddddddddddddddd dddddddd dddddddddddddddd dddddd ddddddddddddddddddddddd dd ddddddddddddd ddddddddddddddddddddddddddd dddddd dddddd ddddddd ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd ddddd ddddddddddddddddddddddddddddd ddddddddddd ddddd dddddd dddddddddd ddddddddddddddddddddddddddddddddddddddddd dddddddddddd dd ddddd dd dd dd dd dd data time sec possible actual estimated fig 10 data volume transmitted zurich linz based reservations based adaptation see section iia reservation exists long tradition research reservation network resources trend towards integrating multiple service models single cell packetswitched network 8 40 recognized support endtoend qos guarantees network aspects must considered endsystem osresources must also taken account 26 requirement holds especially continuous media applications stringent resource requirements 36 34 step advances resource guarantee provision fields researchers identified need resource orchestration developed methods allow meeting users qos requirements endtoend basis 25 6 methods involve qosnegotiation procedures mainly based applicationtonetwork qosmapping b adaptation adaptation effective way enhancing users perception service quality environments resource reservation possible situations impossible application specify resource requirements advance recent adaptive systems rlm 22 23 ivs 2 shown even continuous media applications benefit adaptation environments lacking reservation capabili ties feedbackdriven adaptation scales back quality hence resource consumption application performance poor attempt discover additional resources optimistically scaling usage time time ivs employs senderbased bandwidth adaptation rlm pioneered receiverbased adaptation multicast environment also systems continuously adapt playout point account variations transmission latency contrast systems odysee 27 seeks provide general approach construction resourceaware applications modifying interface applications operating system measurementbased approach employs receiverdriven adaptation concentrates orchestrating multiple concurrent resourceaware applications client rather server contrast framework uses senderbased adaptation identifies wide range methods customized user fox et al 13 propose proxybased architecture employing socalled distillation services adapt quality service client variations network resource availabil ity systemin addition networkawarealso accounts variability client software hardware sophistication viii concluding remarks paper presents simple framework construction networkaware applications given framework application developer must specify functions determine relationships quality size well provide estimates effectiveness various transformations reduce size fig 5 summarizes functions required undoubtedly work required find elaborate solutions problems discussed paper however abstractions identified adaptation process allow experimentation various methods information collection methods providing better estimates tradeoffs found accuracy achieved efforts involved providing estimates effect bandwidth adap tation always possible provide good estimates network behavior applications resource demands important systems designed adaptivity systems observe actions involved decision take corrective action necessary framework provides context experimentation application developers frees developer need acquire detailed understanding monitoring system network protocols network interface router capabilities experience development adaptive image server demonstrated practicability benefits approach development networkaware application requires considerable effort amount adaptation accomplish impossiblesatisfy unrealistic expectations application user however adaptation applications push envelope acceptable network performance expect increased use adaptation techniques stationary 14 ieee transactions software engineering vol 24 5 may 1998 376390 mobile network applications framework outlined provides approach shelters application developers many details adaptivity thus helps reduce effort involved development networkaware applications acknowledgements thank blott p brandt dimai r karrer naf stricker p walther r weber contributions design implementation chariot system appreciate feedback referees improved paper considerably finally acknowledge discussions workshop networkaware mobile applications held conjunction esecfse 97 zurich r architecture networked image search retrieval system scalable feedback control multicast video distribution internet vegas new techniques congestion detection avoidance adaptives transportprotokoll german characteristics widearea tcpip conversations continuous media transport orchestration service available bit rate service data atm networks supporting realtime applications integrated services packet network architecture mechansim workstation interconnect supporting timedependent data transmission qos communication architecture workstation clusters evolution controls available bit rate service router mechanisms support endtoend congestion control adapting network client variability via ondemand dynamic distillation design patterns deskarea network improving startup behavior congestion control scheme tcp independent jpeg group congestion avoidance control controltheoretic approach flow control forward acknowledgement refining tcp congestion control vic flexible framework packet video ein adaptives bildtransferprotokoll fuer chariot german qos broker resource management networked multimedia systems agile applicationaware adaptation mobility measurements analysis endtoend internet dynamics design automatic control systems operating system issues continuous media rfc year1889year rtp transport protocol realtime applications analyzing multimedia operating system unix network programming network machine rsvp new resource reservation protocol architectural support quality service corba objects tr ctr ewa kusmierek david h c du streaming video delivery internet adaptive endtoend qos journal systems software v75 n3 p237252 march 2005 bruce lowekamp david ohallaron thomas gross direct queries discovering network resource properties distributed environment cluster computing v3 n4 p281291 2000 jennifer schopf francine berman stochastic scheduling proceedings 1999 acmieee conference supercomputing cdrom p48es november 1419 1999 portland oregon united states irene cheng anup basu qos based video delivery foveation bandwidth monitoring pattern recognition letters v24 n15 p26752686 november arjan peddemors hans zandbelt mortaza bargh mechanism host mobility management supporting application awareness proceedings 2nd international conference mobile systems applications services june 0609 2004 boston usa jaspal subhlok peter lieu bruce lowekamp automatic node selection high performance applications networks acm sigplan notices v34 n8 p163172 aug 1999 bruce lowekamp nancy miller thomas gross peter steenkiste jaspal subhlok dean sutherland resource query interface networkaware applications cluster computing v2 n2 p139151 1999 vincenzo grassi raffaela mirandola derivation markov models effectiveness analysis adaptable software architectures mobile computing ieee transactions mobile computing v2 n2 p114131 january r weber j bollinger gross hj schek architecture networked image search retrieval system proceedings eighth international conference information knowledge management p430441 november 0206 1999 kansas city missouri united states k smith r paranjape l benedicenti agent behavior agent models unregulated markets acm sigapp applied computing review v9 n3 p212 fall 2001 paolo bellavista antonio corradi andrea tomasi mobile agent technology support access museum information proceedings 2000 acm symposium applied computing p10061013 march 2000 como italy liang cheng ivan marsic piecewise network awareness service wirelessmobile pervasive computing mobile networks applications v7 n4 p269278 august 2002 athanasios g malamos theodora varvarigou elias n malamas chihsiang yeh meqa3 multiend qos application adaptation architecture information processing technology nova science publishers inc commack ny 2001 vikram adve vinh vi lam brian ensink language compiler support adaptive distributed applications acm sigplan notices v36 n8 p238246 aug 2001 paolo bellavista antonio corradi cesare stefanelli mobile agent infrastructure mobility support proceedings 2000 acm symposium applied computing p539545 march 2000 como italy vincenzo grassi raffaela mirandola antonino sabetta uml based modeling performance analysis mobile systems proceedings 7th acm international symposium modeling analysis simulation wireless mobile systems october 0406 2004 venice italy manish mahajan manish parashar managing qos multimedia applications differentiated services environment journal network systems management v11 n4 p469498 december paolo bellavista antonio corradi cesare stefanelli mobile agent middleware mobile computing computer v34 n3 p7381 march 2001