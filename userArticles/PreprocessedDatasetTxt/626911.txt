assignment task modules hypercube multicomputers component failures communication efficiency problem assigning task modules within hypercube multicomputer possible link failures investigated concept indirect optimization introduced function called communication traffic proposed objective optimization assignments obtained optimizing function shown significantly improve actual communication performance measure called communication turnaround time random assignments b introduction abundance nodes hypercube multicomputer allows executing tasks require large number nodes internode communication still major bottleneck achieving overall speedup achieve communication efficiency considerable efforts made improve routing algorithms switching mechanisms basically concerned systemlevel implementations communication efficiency must also improved pertask basis exploiting communication locality among task modules assign task modules optimal performance runtime behavior modules must known priori extent however stated halting problem computing theory way predict exact runtime behavior program actually executed case distributed computation also difficult predict timing communication events set task modules actually executed graphmapping approach eg 3 timing aspects module communication ignored simple objective function proposed optimization generally work reported paper supported part office naval research grants n00014 85k0122 n0001491j1115 opinions findings recommendations paper authors reflect views onr difficult relate objective wellknown performance measures task execution time contrast complicated approach eg 5 requires substantial amount knowledge runtime behavior task modules may available unless task tested thoroughly beforehand primary goal paper optimize communication performance use relatively simple objective function verify simulations optimizing function actually leads better communication performance especially assigning communication bound tasks focusing communication performance differentiates work others related generic aspects task assignment taking communicationoriented approach task assignment problem hardly limitation since internode communication utmost importance performance faulttolerance distributed system paper organized follows section 2 present basic system model assumptions used problem also formally stated section 3 nphardness minimizing communication traffic stated first order justify use heuristic algorithms several heuristic algorithms used find good suboptimal solutions algorithms tested extensively various inputs assess quality assignments obtained simulate algorithms verify actual quality assignments found minimizing communication traffic effects inaccuracy describing task behavior also discussed section 4 deals case alternative faulttolerant routing scheme used paper concludes section 5 preliminaries communication volume pair modules expressed number packets exchanged message may composed number packets intermodule communications assumed accomplished via message passing message routed source destination via faultfree shortest path circuit message switching since existing hypercubes support pernode multiprogramming environ ment assumed one module assigned node ie mapping nodes modules onetoone task modules 2 integer n one add dummy modules make task 2 n modules henceforth assume dimension subcube allocated host execute task thus mapping modules subcube nodes onetoone onto network nodes define communication event modules cebm instance module needs send message another module defining communication event nodes cebn instance node needing send message node circuit switching two indistinguishable message switching however single cebm become several cebns example pair modules reside two different nodes 2 hops apart circuit switching cebm one module cebn one node node message switching however cebm becomes two cebns one source intermediate node intermediate node destination said outstanding cebn message sent node outstanding cebn said processed sent source node neighboring destination node outstanding cebn may processed immediately due limited link resources available cebn said blocked processed immediately goodness task assignment hypercubes measured communication turnaround time ctt time span first cebn becoming outstanding cebns processed illustrative example fig 1 simple network 4 nodes 3 cebms status link execution circuit message switching shown figure note computation time needed invariant among different assignments since one module assigned node therefore ctt main source difference completion time task ctt cannot easily described mathematical function exact value ctt depends largely timing communication events thus making impractical use direct optimization ctt however shall see communicationbound tasks minimizing certain simple function usually minimize ctt communication cost executing set task modules defined sum time units links kept busy messages among modules words measure total communication resources used instance task execution measured time units suppose ch number time units links kept busy packet sent path h hops sum time units links kept busy related purposes packet transmission establishing connection assumed negligible messageswitched hypercubes relation may accurate circuitswitched hypercubes however call request signal hunt free path occupies link short time expression would good approximation even circuitswitched hypercubes defining c1 unit communication traffic ie link usage one packet traversing one link communication traffic resulting executing task assignment becomes 1in number packets traversing links one easily see cost com ka type switching communication traffic proportional total link occupation time two communicating modules placed far apart require communication resources higher possibility instances communication blocked andor delayed turn leads increase ctt therefore reduction communication traffic crucial ctt associated communicationbound tasks introducing notion communication cost communication traffic deliberately avoided lowlevel timing details consider total number packets sentreceived pair task modules whole mission time thus allowing simple objective function translated simple combinatorial optimization problem following notation used throughout paper dimension subcube available executing task consideration theta communication volume matrix u ij communication volume j expressed number packets number task modules mentioned earlier assume specified otherwise note since module send messages vector denoting assignment ith component represents fact assigned node whose address distance ie length shortest path node n dependent upon routing algorithm used assume case dn different dn discussed section 4 making module assignment dn calculated subcube assigned task consideration shortestpath routing algorithm note distance pair nodes may greater hamming distance depends number faulty links routing scheme used optimization algorithms performance evaluation although objective function proposed simple nature optimizing still difficult problem formally stated following theorem theorem 1 given theta task communication volume matrix u nphard find optimal mapping mmodule task onto ndimensional faultfree hypercube theorem proved restricting faultfree hypercube embedding problem discussed 4 proof presented 6 repeated thus known polynomialtime algorithm find optimal mappingassignment note minimizing ctt rather communication traffic ultimate goal shall see good heuristic algorithms suffice situations optimal solution minimizes communication traffic usually computationally expensive may improve slightly fast algorithms terms minimizing ctt actual objective one simple greedy heuristic tested work well faultfree cases 6 given consider task weighted graph vertices representing modules edge weights representing communication volumes two nodes x shortestpath routing dx therefore sufficient use undirected graph weight edge connecting j want find hamiltonian cycle task graph high total edgeweight possible embed cycle hamiltonian cycle hypercube hamiltonian cycle faultfree hypercube easily found graycode enumeration injured hypercube faulty links however may hamiltonian cycle available embedding define weighted relaxed wr hamiltonian cycle injured hypercube disconnected node relaxed version hamiltonian cycle two nodes x linked cycle via virtual edge may path x intermediate nodes weight virtual edge cycle number physical edges greedy algorithm embeds hamiltonian cycle task graph maximum weight found greedy approach minimumweight wr hamiltonian cycle injured hypercube also found via greedy approach two complex heuristic algorithms also implemented tested bottomup approach algorithm similar one proposed 3 topdown approach proposed 2 algorithms modified handle cases broken links third nondeterministic approach using simulated annealing method also implemented tested 2opting used perturb function compare quality assignments found algorithms respect communication traffic simulated algorithms using input tasks randomly generated communication volumes among modules algorithm executed 1000 randomlygenerated tasks u ij characterized normallydistributed random variable mean variance oe 2 changing value found little effect relative performance assignments found different algorithms long ratio oe remains constant also found oe approaches zero difference communication traffic random assignments assignments found three algorithms gets smaller difference gets larger oe increases consistent fact u ij identical assignments lead identical communication traffic assignment algorithms perform identically input tasks used obtain plots fig 2 u ij characterized horizontal axis depicts number faulty links vertical axis represents communication traffic figure a1 represents greedy algorithm a2 represents communication traffic achieved either topdown bottomup algorithms whichever yields smaller communication traffic enhance readability plots since performance topdown bottomup algorithms turns close seen result greedy approach performs surprisingly well complex ie topdown bottomup approaches outperform simple greedy approach small margin furthermore number faulty links increases gap two curves gets narrower explained fact topdown bottomup approaches best suited faultfree thus regular hypercubes hypercubes faulty links interconnection structure longer symmetric regular case partitioning mechanism topdown approach combining mechanism bottomup approach must use less accurate heuristic decisions hence degrading performance simulated annealing approach a3 hand shown consistent performances advantages algorithms become pronounced cube size number link failures increase therefore conclude approach adaptable irregular structures table 1 show relative timings various algorithms used algorithms tested dec 5000 workstation running ultrix operating system though shown performance data problem size 16 relative performances different algorithms found consistent least problem size demonstrate minimizing communication traffic effective also need compare ctts assignments found different algorithms simulation model purpose described timing time unit selected time required send packet single communication link routing algorithm mechanism ffl link failures detected task assignment execution message routed faultfree shortest path determined prior execution task assume additional link failures execution task ffl message switching routing mechanism intermediate node path take certain amount time forward message one link next assume time relatively small absorbed length corresponding message ffl propagation delay communication path assumed negligible task communication behavior ffl given task denotes time span arrival time first last cebms arrival times cebms uniformly distributed hence given task assignment larger represents task computationbound smaller represents task communication bound ffl l msg denotes maximum message length measured number packets communication volume pair modules randomly grouped messages lengths within 1 l msg message scheduling queueing link busy used transmitting incoming message message stored fifo queue source end link one message requests use link time one randomly chosen use link selection procedure repeated requests honored goal simulation comparatively evaluate goodness different assignments execution environment compare performance different system implementations simulation results used determine relative performance different switching methods routing algorithms assignments found fed eventdriven simulator evaluate performance close realworld environment results plotted fig 3 message switching systems input tasks used used fig 2 set circuitswitched hypercubes found similar situations thus presented effects changing assignment given task shown table 2 message switching without link failures results found similar circuit switching cases range 10 300 significant impact relative performance assignments found different algorithms assignments found algorithms shown substantial improvements random assignments 8 2 10 300 network gets saturated messages case network becomes less congested 160 differences ctts among different assignment algorithms start diminish conclude minimizing communication traffic yields peak improvement task assigned communicationbound communication network may become highly congested execution task value results small performance differences approximately 750 2 250 however relatively small network near saturation difference message queue length made smaller using assignments obtained minimization communication traffic depending system implementation performance node may also influenced length message queue maintain effects changing l msg subtle changing generally shorter message lengths result better performances circuitswitched hypercubes messageswitched hypercubes changing message length affect system performance notably overall communication traffic fixed simulation results indicated different switching techniques matter much system performance communicationbound tasks circuit switching shown slightly better performance message switching task signments however mentioned earlier actual performance depend system implementation thus simulation results used compare effectiveness two switching methods number faulty links grows within preset range ie less one third links ctt also increases smaller hypercubes introducing even one faulty link make significant difference ctt effect gets pronounced number link failures becomes larger one see fig 3 cube size increases faultfree links hence making lesser impacts single link failure system performance though proposed assignment scheme requires minimal information runtime task behaviors still need communication matrix assign task obvious unless task fully tested message length exactly calculated entries communication matrix cannot absolutely accurate study effects inaccurate communication matrix repeated simulation evaluating ctt introducing uncertainties communication matrix fig 4 input tasks essentially fig 3 maximum 20 error instance actual task execution number packets exchanged fig 4 one see inaccuracies u ij affect communication performance especially cube size number link failures large however number link failures less one sixth links overall performances various assignment algorithms still quite close case exact u ij 4 alternative routing algorithm thus far assumed hypercube implemented routing scheme routes messages source destination via fixed shortest paths determined execution task however several practical problems assumption instance faulty links must known making task assignment may always possible also additional link failures occur assignment execution task may become unsuccessful overcome problems must use routing algorithm adaptive system changes instance dfs routing scheme proposed 1 adaptive faulttolerant routing algorithm uses limited amount global link status infor mation algorithm system require priori link status information communications completed even unexpected link failures occur task execution long nodes involved remain connected however due adaptive nature dfs routing algorithm difficult predict length path used routing message task execution especially presence link failures cannot accurately estimated thus making difficult minimize overall communication traffic furthermore routing scheme like dfs routing due lack global link status information length path chosen communication node x node may one chosen x exam ple suppose 3cube three broken links 00 0 0 lambda01 length path chosen dfs routing 000 111 3 path chosen route messages 111 000 111 110 001 101 001 110 010 011 001 000 length 9 routing schemes nature said asymmet ric cases routing scheme becomes asymmetric presence faulty components based observations one may jump conclusion way minimize communication traffic assignment hence impossible improve communication efficiency appropriately placing task modules however simulation results show use proposed objective function even assigning task modules nodes faulty links still significantly improve communication performance random assignments number faulty links within certain range three assignment strategies compared simulation first usual random assignment second apply greedy algorithm hypercube without knowing links faulty third assumes perfect knowledge link failures message routed execution strategy unrealistic ideal case gives upper bound performance improvement communication traffic whereas second strategy provides lower bound real applications depending knowledge available task assignment phase performance lie somewhere two extremes fig 5 shows communication traffic assignments dfs routing set input tasks fig 2 s1 represents assignments found knowledge faulty links s2 represents found complete knowledge faulty links routing paths messages easily seen dfs routing overall communication traffic higher routing algorithm used nevertheless assignments s1 still generate smaller communication traffic random assignments though improvement becomes insignificant number faulty links increases set input tasks used fig 3 employed eventdriven sim ulations except dfs routing used since dfs routing designed based operating principles message switching simulate hypercubes implemented switching method measured ctts assignments plotted fig 6 found without knowledge faulty links assignments s1 still improves random assignments margin least 10 number faulty links one eighth total links margin increases number faulty links increases starts level percentage faulty links approaches 33 assignments s2 show even larger improvements improve random assignments steadily increasing margin number link failures increases comparing fig 6 fig 3 one see though dfs routing results overall higher communication traffic results smaller ctts number faulty links relatively small due fact dfs routing chooses communication paths spread fashion causes less congestion shortest fixed path scheme used advantage diminishes number faulty links grows beyond one fifth links percentage faulty links reaches 25 dfs routing begins yield larger ctts shortest path routing paths available nodes becoming fewer messages cannot spread paths dfs routing also greater communication traffic overhead dfs routing starts dominant effects note however implementation details crucial actual applications simulation results used judge relative merits different routing algorithms concluding remarks using simple objective function formulated solved problem mapping task composed multiple interacting modules hypercube possible faulty links goal optimize communication performance measured communication turnaround time due difficulties optimizing objective directly function called communication traffic proposed minimizing function could find assignments optimal communication performance using heuristic combinatorial techniques several algorithms find assignments minimizing communication traffic implemented comparatively evaluated assignments found algorithms also evaluated simulations shown communication bound tasks significant improvements random assignments respect actual communication performance measure ie communication turnaround time also analyzed case alternative routing algorithm like dfs routing used task assignment criterion shown work well case although focused attention hypercube multicomputers objective function developed generalized distributed systems different interconnection topologies fact consider hypercubes faulty links actually longer hypercubes subgraphs hypercubes systems interconnection topologies long adopt message switching circuit switching length path chosen routing scheme pair nodes known task assignment assignment criterion applied architectures r depthfirst search approach faulttolerant routing hypercube multicomputers task allocation onto hypercube recursive mincut bipartitioning task mapping method hypercube combining subcubes hypercube embedding npcomplete temporal communication graphs new graph theoretic model mapping scheduling distributed memory systems communicationoriented assignment task modules hypercube multicomputers tr task allocation onto hypercube recursive mincut bipartitioning depthfirst search approach faulttolerant routing hypercube multicomputers ctr tarek f abdelzaher ella atkins kang g shin qos negotiation realtime systems application automated flight control ieee transactions computers v49 n11 p11701183 november 2000 dartzen peng kang g shin tarek f abdelzaher assignment scheduling communicating periodic tasks distributed realtime systems ieee transactions software engineering v23 n12 p745758 december 1997