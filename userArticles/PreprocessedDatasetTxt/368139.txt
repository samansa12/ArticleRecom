flexible message passing mechanism objective vhdl defining objectoriented extension vhdl necessary message passing one complex issues large impact whole language paper identifies requirements message passing suited model hardware classifies different approaches allow abstract communication reuse protocols system level new flexible message passing mechanism proposed objective vhdl introduced b introduction hardware system described objectoriented fashion set interacting communicating concurrent objects consequence encapsulation objects tend relatively autonomous loosely coupled environment 13 object contain elements needs perform functionality property provides high potential reuse objects environments original one hand specialization structural decomposition 1 work funded part omiesprit project request contract 20616 objects requires communication among objects communication enables objects use services ob jects inform objects something concurrent domain synchronize communication mechanism called message passing objectoriented domain basic idea objects able send receive messages provide get information course desirable message passing mechanism preserves much possible loose coupling object environment order obtain universally reusable objects generally communication concurrent havioursprocesses two mechanisms used 6 first communication using shared memory second message passing via channels communication pathways communication concurrent objects latter choice seems appropriate passing messages one basic concepts objectoriented paradigm figure 1 shows abstract picture message passing object x role client needs service object role server invoke corresponding method x sends message via communication pathway message exchange controlled protocol received message correct method invoked functionality provided dispatcher indicated figure consider dispatching part message passing mechanism execution method return valuesif anyare replied figure 1 message passing send message invoke method return values protocol communication pathways object attributes methods object x attributes methodscopyright 1998 edaa published proceedings date 98 february 2325 1997 paris france personal use material permitted however permission reprintrepublish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component work works must obtained edaa sequential domain often terms message passing method call used synonyms concurrent domain terms different semantics method call invoked method needs computational thread caller execute method invocation method via message passing need computational thread caller target object use 3 aspects message passing chapter several aspects message passing considered separately consideration shows one hand design space message passing hand large impact whole language 31 consistency language message passing integral part objectoriented language relationship message passing parts language bilateral indispensable message passing consistent objectoriented concepts concepts used specification message passing example language embodies different encapsulation concepts classes objects message passing take accountat least implementation class concept based abstract data types needs another realization message passing compared class concepts represents structural hardwarecomponents message passing mechanism proposed objective vhdl paper give example objectoriented concepts like classification inheritance polymorphism used implement another desired feature message passing con sitency techniques objectoriented modelling means consistency terms refinement extensi bility model extended components need refined different way communication message passing mechanism must adaptable objectoriented means consistency means abstraction level message passing fits abstraction levels whole language intended programming interface abstract easy use example appropriate encapsulation transmission messages sendre ceive methods abstraction encapsulation however shouldnt considered isolation large impact aspects message passing eg flexibility simula tionsynthesis 32 communication pathways passing message one object another performing communication protocol requires communication pathway interconnects objects communication restricted 11 relation 2 target object identified directly communication path way abstraction definition communication pathways differs significantly literature case method call semantics procedure function call procedurefunction call mechanism name target objectmethod abstractly considered communication pathway communicating objects represent hardware com ponents vhdl termsentities another representation communication pathways necessary 14 kind identifier entity object called handle exchanged among entities proposed object handle another object handle used address object pass message handle considered communication pathway solution abstract communication pathways direct physical representation flexible allows establish communication pathways runt ime generally allows send messages objects dynamically generated runtime dynamic generation objects however might powerful feature system design really far away hardware another solution proposed 12911 use vhdl mechanism exchange data components ie interconnect components signals send ers point view target object addressed port connects objects course approach isnt flexible handle solution address compo nentobjects close hardware although signals used communication still gap abstraction provided vhdl signals communication objectoriented sense 33 protocol software sending message object semantics procedure function call 3 results given back assignments 12 hardware message passing among concurrent componentsobjects needs specialized protocols course necessity protocols results much tighter relation objects desired objectoriented paradigm cf chapter 2 sending message needs knowledge ability perform target objects communication protocol 2 11 relation necessarily means point point communication object consist concurrent processes 3 without consideration distributed programs figure 2 encapsulation object protocol communication point view protocol seen encapsulation object figure 2 following subchapters several aspects protocol message passing illuminated 331 abstraction since objectoriented paradigm addresses modelling higher abstraction levels details communication protocol encapsulated specialization protocol correspond ab straction protocol applied abstract interface 332 flexibility universal message passing mechanism hardware design needs possibility integrate different protocols message exchange abstract model mmu system level may need another protocol simple register rt level perspective top design methodology possible refine protocol towards detail according description level need occurs cosimulation abstract models together already synthesized models desired flexibility however choose refine new protocol expense encapsulation protocol even interface use protocol encapsulated possible hide protocol language completely 333 synchronization concurrent objectoriented domain objects need synchronize describe behaviour dependent state objects would like differ three synchronization modes synchronous asynchronous datadriven synchronous communication sender object needs wait receiver object ready receive message synchronous communication mechanisms 7 sender objectprocess blocked moment sending message request service intended invoked message finished results given back asynchronous communication sender wait readiness server object receive message order avoid loss messages mode requires queuing messages within communication pathway receiver additional advantage queues potential flexibility dequeue messages another order fifo hand message queues large impact simulation synthesis aspects generally asynchronous communication nonblocking 3 sender object continue computations directly sending return results requires send explicitly message server client datadriven synchronization 5 allows sender object run computations results previously sent message request needed case sender wait results provided server object literature initial sending message request described asynchronously 3 however synchronous nonblocking sending message request also conceivable summary datadriven synchronization allows flexibility standard synchronousasynchronous communication 334 concurrency consistent objective vhdl message passing mechanism must preserve support concurrency provided objective vhdl relation communication concurrency ambivalent one hand concurrent objectsprocess es reason necessity message passing hand message passing mechanism restrict concurrency object contains one process dispatcher process receives requests dispatches requests sequentialized concurrent objectoriented languages expected objects activity run paral lel besides concurrency parallel running objects concurrency inside objects contain concurrent processes intraobject concurrency may allow object execute requests services parallel example dualported ram allows concurrent read write operations modelled concurrent dispatching processes however allowing parallel method execution raises potential problem nondeterministic behaviour object due concurrent access attributes vhdl already provides mechanisms solve concurrent access signals variables dispatching dispatching dispatching methods protocol protocol protocol protocol object communication pathways concurrent write access signals handled resolution functions variables proposed protected types used 15 least atomic access variables ensured problem nondeterminism still unsolved value shared variable depends activation order accessing processes possibility avoid nondeterminsim ensure concurrent methods access exclusive tributes implemented grouping methods access attributes group gets dispatching process maybe queue methods without access conflicts executed parallel 34 simulationsynthesis efficiency simulation efficiency synthesizability general aspects quality objectoriented extensions hdl influenced implementation decisions message passingprotocol communication frequency objects complex protocol enriched lot detailed timing informations unlimited message buffers avoid loss messages may decrease simulation speed significantly moreover without limitation maximal buffer size protocol translatable hardware 4 classification scheme chapters aspects message passing mechanism objectoriented hdl deal proposed discussed used define classification scheme different message passing mechanisms first criterion classification flexibility message passing mechanism following cases distinguished flexible different protocols possible refined fixed protocol modifiable semiflexible one protocol potential refinement different notrefinable protocols second criterion ability object accept perform several requests concurrently distinguished yes possible possible third criterion synchronization message passing blocking sender always blocked return values received nonblocking sender continues execution sending request maybe certain point execution wait results depending kind message kind method invocation method call vs message pass ing cf introduction blocking non blocking communication possible last criterion whether queues buffer messages receiver busy distinguished queues provided one one queue per object many one queues per object 5 oovhdl approaches last years several proposals objectoriented extension vhdl made 1241214 proposals need define message passing objectoriented proposals considered two typical completely different proposals selected describe message passing mechanisms cannot done isolated necessary introduce core concepts proposals certain degree outside scope paper draw complete picture special proposals vista approach 14 introduces new design unit called entity object eo based vhdl entity architecture addition entity eo may contain method specifications called operation speci fications operations similar procedures visible outside eo contrast procedures operations priority specified minimal execution time invocation operations eos interconnected explicit communication pathways signals address eo eo accompanying handle new predefined type stored signals variables part composite types handles exchanged make corresponding eo addressable objects special handle address object self predefined parent class addressed new keyword super message send request performed send statement includes handle target eo name operation parameter values eo one queue buffer incoming messages messages queue dequeued priority messages priority dequeued fifo one queue per eo means concurrent requests se flexibility parallel methods per object synchronization queues per object flexible fixed semiflexible yes blocking nonblocking one many table 1 classification scheme quentialized eo needs invoke operation send self request queued treated like procedure call immediately executed mechanism avoids deadlocks recursive method calls messages blocking default nonblocking mode immediate immediate messages restricted inparameters blocking mode cannot changed inheritance eo synchronization rendezvous concept pro vided accept select statements similar ada used establish rendezvous finally remarked proposed message passing mechanism neither sythesizable intended abstract concepts dynamic communication pathways represented handle concept unlimited message buffers counterpart hardware another approach developed oldenburg university 12 based vhdl type concept records used represent objects allow record expandable inheritance marked tagged record corresponding methods simple procedures must defined design unit package methods cannot formally encapsulated object belongs parameter list method contains parameter objects type assigns method object tagged record corresponding classwide type exists union types derived tagged record attribute class classwide type referenced polymorphism based classwide types method called actual classwide type mode inout actual type determined runtime correct method invoked interprocess communication modelled consistently vhdl signals abstraction expandability supported use polymorphic signals classwide type sending message another object semantics procedurefunction call terminology method call requested method executed sender blocked end request several methods object performed concurrently requested different processes case concurrent assignment signal instantiation tagged record resolution functions necessary even 12 special protocol mechanism proposed protocols integrated protocol built language classification refers proposed masterslave protocol 6 objective vhdl objective vhdl objectoriented extension vhdl developed ecproject request 4 810 objective vhdl combines structural object approach 14 type object approach 12 language extensions shown suitability hardware design structural objects usual vhdl entities attributes methods entity class declared within declarative part entity correspond vhdl object declarations signals sharedvariables constants procedure function declarations respec tively implementation methods follows corresponding architecture single inheritance entities architectures provided polymorphism entity objects type class consists declaration definition likewise class types declared like usual types declaration attributes methods assembled new class end class constructs implementation declared methods private methods declared interface follows corresponding class body well entity classes single inheritance provided type classes class type associated classwide type marked new attribute class classwide type union type derived subclasses similar 12 approach classwide types used realize polymorphism type classes variable signal classwide type tclass hold instantiation class derived calling method directly visible instantiation class type semantics simple procedurefunction call blocking calling method entity object type object instantiated another entity difficult method entity cannot called directly entity encapsulates proceduresmethods completely interface outer world ports generics entity breaking encapsulation would 4 objective vhdl defined 9 objective vhdl language reference manual intended extension vhdl lrm although current status objective vhdl within request project stable minor changes language possible future flexibility parallel methods per object synchronization queues per object fixed one table 2 classification 14 flexibility parallel methods per object synchronization queues per object flexible yes blocking table 3 classification 12 change vhdl solution problem chosen 14 introduce new design unitthe entity object methods operations eo visible outside eo due additional implementation costs new design unit solution discarded objective vhdl 61 message passing mechanism provide flexibility use appropriate communication message exchange message passing fixed language definition nevertheless way implement flexible message passing shown usage objectoriented features main ideas described detail basically message passing mechanism consists three parts communication structure defines connection objects communication pathways fig ure 3 protocol messages exchange figure 4 dispatcher figure 3 611 communication structure enable communication objects represented entities type objects inside different proc esses communication pathways objects implemented vhdl signals beside signal carries message additional signals protocol may necessary avoid resolution functions signals unidirectional consequently requires two opposite communication pathways message request produces return values physical connection depicted figure 3 figure 3 communication structure target object communication addressed port connects sender ceiver communication pathway restricted connect two objects however vhdl signals provide abstraction expected objectoriented message passing enable connecting signals provide required abstraction implemented polymorphic type classes signal gets ability hold different messages encapsulate communication protocol messages communication protocol modelled structure shown figure 4 following main emphasis given modelling messages 612 messages protocol messages protocol implemented encapsulated abstract type class message class abstract intended instantiated serve base class classes representing real messages furthermore class provides interface allows apply message passing among ob jects interface inherited derived classes declares methods like send message receive mes sage dispatch etc figure 4 modelling messages enable communication pathway hold messages target object type class message refined inheritance target classes differ methods instantiations receive kind target receiver method m1 method m2 dispatching signal messagetoreceiverclass signal messagetoreceiverclass unidirectional communication pathway message protocol sender entity object entity object class receiver method m1 x inout method m2 z inout message execmethod send dispatch returnresults receive messagetoreceiver execmethod general functionality address special classes address methods parameters z execmethod object abstract subclass derived figure 4 2ndstage class implements additional functionality purpose distinguish different kinds objects different objects instantiations class represented one time finally message must correspond one method invoked message must contain parameters method invocation allow class second stage figure 4 refined subclasses representing methods target object figure 4 3rd stage subclasses named methods method parameters represented attributes signal instantiation class hold message corresponding special method provides communication protocol one defined superclasses communication pathway however able hold messages sent object instantiation communication pathway signal classwide type belonging representation kind object figure 4 2nd stage ability given signal finally classes representing method fig ure 4 third stage implements method execmethod invokes corresponding method target ob ject mentioned methods entity object cannot invoked directly entity encapsulates methods completely nevertheless allow method invocation new construct entity end intro duced semantics construct make declarations entity class visible inside type class order allow invocation implementation method must available wherever execmethod invoked instance message class results produced method execution sent back mechanism 613 dispatching entity object contains one dispatching processes processes sensitive ports carry incoming messages must specified user dispatch incoming messages functionality provided class message used implemented method dispatch basically within dispatcher process method execmethod received message invoked calls desired method entity object type received message decided runtime execmethod called number dispatching processes chosen user determines number concurrently executable methods concurrent methods allowed user take care conflicting concurrent access attributes ensure atomic access attributes shared variables protect mechanism cf chapter 33415 used 614 synchronization synchronization flexible synchronous asynchronous data driven sychronization cf chapter 333 modelled proposed mechanism require object blocked sending message concurrent ob ject wait least ensured protocol target object accepts request course additional synchronization necessary results request needed asynchon communication message queues integrated message passing mechanism 62 summary message passing provided message passing mechanism provides easy means send messages sender identifies target object ports connected needs call send method class message port names message pa rameters send method perform protocol assign message interconnecting signal receiver ready accept sending sender sure message received continue execution potential results request needed case sender blocked results available receiving object possesses dispatching process sensitive connecting port signal new message arrives dispatching process performs ceivers part communication protocol invokes desired method course functionality encapsulated receive dispatch method class message potential results send back implicit immediately computation explicit new communication finally important note modelling messages cf chapter 612 really straight forward effort use communication mechanism reduced significantly tool produces messages automatically 63 classification according proposed classification scheme message passing classified shown table 4 different protocols defined stored library required refined concurrency method execution depends number dispatching processes user defines proposed communication mechanism method call blocking passing message blocking well blocking queues buffer messages allow asynchronous communication modelled principle integrated communication important note special implementation message passing mechanism may result slightly classification 7 future work precompiler translates objective vhdl vhdl implemented availability tool desired benefits objective vhdl especially message passing mechanism evaluated proposed mechanism message passing potential improvements better protocol reuse stronger separation protocol messages useful modelling effort caused restriction unidirectional communication pathways reduced resolution functions connecting signals defined 8 conclusion analyzing discussing several aspects abstract communication design space message passing shown classification scheme message passing mechanisms developed scheme applied message passing mechanisms two currently discussed proposals objectoriented extensions vhdl finally new idea message passing mechanism developed objective vhdl introduced classi fied new approach targets especially flexibility pro tocols reuse protocols consistency vhdl concurrency 9 r suave painless extensions objectoriented vh dl object oriented extensions vhdl lami proposal objectoriented model extensible concurrent systems compositionfilters approach concurrency reusability sequential parallel specification design embedded systems communicating sequential processes language architecture document objective vhdl inheritance concept signals object oriented extensions vhdl shared variable language tr communicating sequential processes concurrency reusability sequential parallel realtime objectoriented modeling specification design embedded systems inheritance concept signals objectoriented extensions vhdl object oriented extensions vhdl lami proposal ctr cristina barna wolfgang rosenstiel objectoriented reuse methodology vhdl proceedings conference design automation test europe p133es january 1999 munich germany annette bunker ganesh gopalakrishnan sally mckee formal hardware specification languages protocol compliance verification acm transactions design automation electronic systems todaes v9 n1 p132 january 2004