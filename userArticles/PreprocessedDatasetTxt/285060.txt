property testing connection learning approximation paper consider question determining whether function f property p egrfar function property p property testing algorithm given sample value f instances drawn according distribution cases also allowed query f instances choice study question different properties establish connections problems learning theory approximationin particular focus attention testing graph properties given access graph g form able query whether edge exists pair vertices devise algorithms test whether underlying graph properties bipartite kcolorable pclique clique density p respect vertex set graph property testing algorithms probabilistic make assertions correct high probability making number queries independent size graph moreover property testing algorithms used efficiently ie time linear number vertices construct partitions graph correspond property tested holds input graph b introduction interested following general question property let p fixed property functions f unknown function goal determine possibly f property p far function property p distance functions measured respect distribution domain f towards end given examples form x fx x distributed according may also allowed query f instances choice problem testing properties emerges naturally context program checking probabilistically checkable proofs applied multilinear functions lowdegree polynomials 14 7 6 19 21 36 5 4 10 11 8 9 property testing per se considered 36 35 definition property testing inspired pac learning model 37 allows consideration arbitrary distributions rather uniform ones testers utilize randomly chosen instances rather able query instances choice full version available httptheorylcsmiteduoded dept computer science applied math weizmann institute science israel email odedwisdomweizmannacil sabbatical leave lcs mit z laboratory computer science mit 545 technology sq cambridge 02139 email shafitheorylcsmitedu x laboratory computer science mit 545 technology sq cambridge 02139 email danartheorylcsmitedu supported nsf postdoctoral fellowship believe property testing natural notion whose relevance applications goes beyond program checking whose scope goes beyond realm testing algebraic prop erties firstly cases one may merely interested whether given function modeling environment resp given program possesses certain property rather interested learning function resp checking program computes specific function correctly cases learning function resp checking program means ensuring satisfies property may overkill secondly learning algorithms work postulation function representing environment belongs particular class may efficient test postulation first trying learn function possibly failing postulation wrong similarly context program checking one may choose test program satisfies certain properties checking computes specified function paradigm followed theory program checking 14 36 practice often programmers first test programs verifying programs satisfy properties known satisfied function compute thirdly show apply property testing domain graphs considering several classical graph properties turn offers new perspective approximation problems discussed relevant parameters let f class functions satisfy property p testing property p corresponds testing membership class f two parameters relevant property testing permitted distance ffl desired confidence ffi require tester accept function f reject every function ffl away function f allow tester probabilistic make incorrect positive negative assertions probability ffi complexity measures focus sample complexity number examples functions values tester requires query complexity number function queries made running time tester 11 property testing learning theory noted formulation testing mimics standard frameworks learning theory cases one given access unknown target function either form random instances accompanied function values form oracle access function semantic difference sake uniformity even case functions boolean refer functions rather con cepts however two important differences property testing learning firstly goal learning algorithm find good approximation target function testing algorithm determine whether target function f far away makes task testing seem easier learning hand learning algorithm perform well target function belongs f whereas testing algorithm must perform well also functions far away f furthermore nonproper learning algorithms may output approximation f target f 2 f f 62 f show relation learning testing nontrivial one hand proper representation dependent learning implies testing hand function classes testing harder nonproper learning nonetheless also function classes testing much easier learning details given subsection 22 addition graph properties discussed provide case testing queries much easier learning also queries 12 testing graph properties main technical part paper focus attention testing graph properties view graphs boolean functions pairs vertices value function representing existence edge mainly consider testing algorithms use queries work uniform dis tribution testing algorithm graph property p makes queries form edge vertices u v unknown graph g decide whether g property p fflaway graph property p allowed err probability 13 distance two n vertex graphs defined fraction vertexpairs adjacent one graph present algorithms poly1ffl querycomplexity runningtime 1 exp testing following graph properties kcolorability fixed k 2 query complexity polykffl runningtime aeclique ae 0 n vertex graph clique size aen aecut ae 0 n vertex graph cut size least aen 2 generalization kway cuts works within querycomplexity polylog kffl aebisection ae 0 n vertex graph bisection size aen 2 1 throughout paper consider ram model trivial manipulation vertices eg readingwriting vertex name ordering vertices done constant time furthermore ffl properties case graph desired property testing algorithm outputs auxiliary information allows construct poly1ffl delta n time partition approximately obeys property example aecut construct partition least ae gamma ffln 2 crossing edges ffl except bipartite 2colorability testing runningtime poly1ffl unlikely imply np bpp ffl none properties tested without queries using examples ffl kcolorability tester onesided error always accepts kcolorable graphs furthermore rejecting graph tester always supplies poly1fflsize subgraph kcolorable algorithms twosided error unavoidable within query complexity ffl algorithms kcolorability aeclique aecut easily extended provide testers respect product distributions distributions form piu distribution vertices contrast possible test graph properties discussed distributionfree manner general graph partition properties special cases general graph kpartition property parameterized set lower upper bounds parameterized property holds exists partition vertices k disjoint subsets number vertices subset well number edges pair subsets within specified lower upper bounds present testing algorithm general property algorithm uses queries runs time exponential querycomplexity makes twosided error approximating partitions exist efficiently constructed general case well note specialized algorithms perform better general algorithm appropriate parameters graph properties going beyond general graph partition problem remark graph properties easy test eg connectivity hamiltonicity planarity hand graph properties np extremely hard test namely testing algorithm must inspect vertex pairs view believe providing characterization graph properties according complexity testing may easy techniques algorithms share underlying ideas first uniform selection small sample search suitable partition sample case kcolorability certain kcolorings subgraph induced sample found bykcoloring slightly augmented graph algorithms exhaustively try possible partitions reminiscent exhaustive sampling arora et al 3 except partitions considered us always directly related combinatorial structure problem show possible partition sample induces partition entire graph following holds tested graph property question high probability choice sample exists partition sample induces partition entire graph latter partition approximately satisfies requirements established property ques tion example case graph aecut exists 2waypartition sample inducing partition entire graph ae gamma ffln 2 crossing edges hand graph rejected test definition partition entire graph particular none induced partitions approximately obeys requirements next idea use additional sample approximate quality induced partition graph discover least one partitions approximately obeys requirements property question important point since first sample small ie size poly1ffl total number partitions induces exp poly1ffl thus additional sample must approximate many partitions rather possible partitions entire graph suffices sample size poly1ffl difference various algorithms way partitions sample induce partitions entire graph simplest case testing bipartiteness partition sample vertices graph neighbor 1 placed one side rest vertices placed side algorithms induced partition less straightforward example case aeclique partition 1 sample induces candidate clique roughly follows consider set graph vertices neighboring candidate clique consists aen vertices highest degree subgraph induced ae cut aebisection general partition testing algorithms use auxiliary guesses implemented exhaustive search 13 testing graph properties approximation relation testing graph properties approximation best illustrated case maxcut tester class aecut working time ffl n yields algorithm approximating maximum cut n vertex graph additive error ffln 2 time 1 ffl deltat ffl n thus constant ffl 0 approximate size maxcut within ffln 2 constant time yields constant time approximation scheme ie within constant relative error dense graphs improving arora et al 3 de la vega 17 solved problem polynomialtime 1ffl 2 time exp works problem solved actually constructing approximate maxcuts finding approximate maxcut seem follow mere existence tester aecut yet mentioned tester used find cut time linear n ie one turn question around ask whether approximation algorithms dense instances transformed corresponding testers defined several cases possible example using ideas work maxcut algorithm 17 transformed tester complexity comparable know whether true respect algorithms 3 results testing graph properties derived also work alon et al 1 paper proves constructive version regularity lemma szemeredi obtains polynomialtime algorithm given n vertex graph finds subgraph size fffl k kcolorable omits ffln 2 edges kcolors rest noga alon observed analysis modified yield almost subgraphs size fffl k kcolorable turn implies tester kcolorability comparison kcolorability tester takes sample ok 2 log kffl 3 vertices kcolorability tester derived 1 takes much bigger sample size equaling tower kffl 20 exponents ie log fffl different notion approximation maxclique notion aeclique testing differs traditional notion maxclique approximation talk testing aecliqueness task distinguish case n vertex graph clique size aen case fflfar class n vertex graphs clique size aen hand traditionally one talks approximating size maxclique task distinguish case maxclique size least aen say case maxclique size aen2 whereas latter problem nphard ae 164 see 9 sec 39 weve shown former problem solved expo1ffl 2 time ae ffl 0 furthermore arora et al 3 showed densesubgraph problem generalization aecliqueness polynomialtime approximation scheme ptas dense instances testing kcolorability vs approximating k colorability petrank shown nphard distinguish 3colorable graphs graphs every 3partition vertex set violates least constant fraction edges 30 contrast kcolorability tester implies solving promise problem easy dense graphs dense graphs mean n vertex graphs edges case since every ffl 0 tester distinguish expk 2 ffl 3 time k colorable n vertex graphs n vertex graphs remain nonkcolorable even one omits ffln 2 edges 2 note deciding kcolorability even n vertex graphs minimum degree least kgamma3 kgamma2 delta n npcomplete cf edwards 18 hand edwards also gave polynomialtime algorithm kcoloring kcolorable n vertex graphs minimum degree least ffn constant kgamma2 14 related work property testing context pcp property testing plays central role construction pcp systems specif ically property tested codeword respect specific code paradigm explicitly introduced 6 shifted testing codes defined lowdegree polynomials 6 19 5 4 testing hadamard codes 4 10 11 8 recently testing long code 9 property testing contextof program checking immediate analogy program selftesting 14 propertytesting queries difference selftesting function f represented program tested close fully specified function g whereas propertytesting test whether f close function function class g interestingly many selftesters 14 36 work first testing program satisfies properties function supposed compute satisfies checking program satisfies certain constraints specific function rubinfeld sudan 36 defined property testing uniform distribution using queries related notion robust char acterization rubinfeld 35 focuses property testing applied properties take form functional equations various types property testing context learning theory departing work statistics regarding classification distributions eg 24 16 41 bendavid 12 kulkarni zeitouni 28 considered problem classifying unknown function one two classes functions given labeled examples bendavid studied classification problem limit number examples kulkarni zeitouni studied pac inspired model fixed ffl problem testing class f distance parameter ffl casted classification problem f set functions fflaway f two classes different variant problem considered yamanishi 39 testing graph properties notion testing graph property p relaxation notion deciding graph noted noga alon similar results alas much worse dependence ffl obtained using results alon et al 1 property p received much attention last two decades 29 classical problem margins error one required accept graphs property p reject graphs lack 1975 rivest vuillemin 33 resolved aanderaarosenberg conjecture 34 showing deterministic procedure deciding nontrivial monotone n vertex graph property must ex entries adjacency matrix representing graph query complexity randomized decision procedures conjectured yao omegagamma n 2 progress towards goal wasmade yao 40 king 27 hajnal 23 culminating omegagamma n 43 lower bound results nontrivial monotone graph properties tested examining constant number random locations matrix stand striking contrast approximation dense graphs stated previously arora et al 3 de la vega 17 presented ptas dense instances maxcut approach arora et al uses linear programming randomized rounding applies problems casted smooth integer programs 3 methods de la vega 17 purely combinatorial apply also similar graph partition prob lems following approach alon et al 1 using modification regularity lemma thus obtaining much improved running times frieze kannan 20 devise ptas several graph partition problems maxcut bisection note compared sults respective graph partitioning algorithms better runningtimes like de la vega methods use elementary combinatorial arguments related problem hand still methods suffice dealing general graph partition problem important note extended abstract present two results testing graph properties kcolorability aeclique testers definition theorem regarding general graph partition property appears subsection 33 results well proofs details found report 22 2 general definitions observations 21 definitions ffng parameterized class functions functions 4 fn defined f0 1g n let corresponding class distributions ie dn distribution f0 1g n say function f defined f0 1g n fflclose fn respect dn exists function g 2 fn 3 2 approach 3 extended problems graph isomorphism using new rounding procedure assignment problem 4 range functions may vary many results discussions suffices consider boolean function otherwise f fflfar fn respect dn shall consider several variants testing algorithms basic one defined follows definition 21 property testing let algorithm receives input size parameter n distance parameter confidence fixing arbitrary function f distribution dn f0 1g n algorithm also given access sequence flabeled examples x independently drawn distribution dn say property testing algorithm simply testing algorithm class functions f every n ffl ffi every function f distribution dn f0 1g n following holds probability least 1 gamma ffi examples drawn dn possible coins tosses accepts f ie outputs 1 ffl f fflfar fn respect dn probability least rejects f ie outputs 0 sample complexity function n ffl ffi bounding number labeled examples examined input though stated explicitly definition shall also interested bounding running time property testing algorithm function parameters n ffi ffl case complexity measure class f consider following variants definition 1 dn may specific distribution known algorithm particular shall interested testing respect uniform distribution 2 dn may restricted known class distributions eg product distributions 3 algorithm may given access oracle function f queried x 2 f0 1g n returns fx case refer number queries made function n ffl ffi query complexity 22 property testing pac learning probably approximately correct pac learning algorithm 37 works framework described definition 21 except following crucial differences 1 given promise unknown function f referred target function belongs f 2 required output probability least h fflclose f closeness defined equation 1 ffl usually referred approximation parameter note differences pointed effect tasks opposite directions namely absence promise makes testing potentially harder learning whereas deciding whether function belongs class rather finding function may make testing easier learning literature distinction made proper representation dependent learning nonproper learning 31 former model hypothesis output learning algorithm required belong function class target function f ie h 2 f latter model restriction made stress proper learning algorithm f may either halt without output output function f may output functions f 5 numerous variants pac learning including learning respect specific distributions learning access oracle target function f unless stated otherwise whenever refer section pac learning mean distributionfree noquery model described true references property testing addition apart one example shall restrict attention classes boolean functions testing harder proper learning proposition 21 function class f proper learning algorithm f property testing algorithm 0 0 n ffl furthermore relation holds running times two algorithm proof proposition well propositions section found report 22 proposition implies every n fn polynomial n vcdimension 38 15 f tester whose sample complexity polynffl delta log1ffi reason classes polynomial vcdimension properly learned sample size 15 however running time proper learning algorithm hence resulting testing algorithm might exponential n corollary 22 every class learnable polynffl sample testable polynffl sample exponential time testing may harder learning contrast proposition 21 corollary 22 show classes efficiently learnable though proper learning algorithm efficiently testable proven observing many hardness results proper learning cf 31 13 32 actually establish hardness testing classes furthermore believe natural view hardness results referring testing thus separation efficient learning efficient proper learning translates separation efficient learning efficient testing 5 remark case function f easy recognize representation one easily guarantee algorithm never outputs function f standard classes considered works proper learning typically feature proposition 23 np 6ae bpp exist function classes polynffltime testable polynffltime nonproperly learnable stress proposition 21 generalizes learning testing specific distributions learning testing queries proof proposition 23 uses premise testing proper learning algorithm works distribution make queries testing may easier learning proposition 24 exist function classes f f property testing algorithm whose sample complexity running time olog1ffiffl yet learning algorithm f must sample complexity exponential n impossibility learning function class proposition 24 due exponential vcdimension ie pure information theoretic consideration turn function classes exponential rather double exponential size classes always learnable polynomial sample question whether learnable polynomialtime present function class easy test cannot learned polynomialtime even uniform distri bution provided trapdoor oneway permutations exist eg factoring intractable proposition 25 exist trapdoor oneway permutations exists family functions tested polynffltime learned polynffltime even respect uniform distribution furthermore functions computed polynsize circuits class presented proposition 25 consists multivalued functions leave open problem whether similar result holds class boolean functions learning testing queries uniform distribution invoking known results linearity testing 14 7 19 10 11 8 conclude class 2 n functions tested within query complexity olog1ffiffl yet learning requires least n queries similarly using results lowdegree testing 7 6 21 36 class tested within query complexity log1ffi ffl delta n yet learning requires expn many queries agnosticlearning testing variant pac learn ing called agnostic pac learning 26 promise concerning target function f instead learner required output hypothesis h certain hypothesis class h h fflclose function h closest f absence promise makes agnostic learning closer spirit property testing basic pac learning particular agnostic learning respect hypothesis class h implies proper learning class h thus property testing h learning testing distributions context learning cf 25 testing distributions offers dramatic demonstration importance promise ie fact learning algorithm required work target belongs class whereas testing algorithm needs work targets either class far away proposition 26 exist distribution classes efficiently learnable senses mentioned cannot tested subexponential sample regardless runningtime 3 testing graph properties concentrate testing graph properties using queries respect uniform distribution consider undirected simple graphs multiple edges selfloops simple graph g denote vg vertex set assume without loss generality jvgjg graph g represented symmetric boolean function gu edge u v g brings us associated undirected graphs directed graphs edge undirected graph associated pair antiparallel edges specifically graph g denote eg set ordered pairs correspond edges g ie u v 2 eg iff edge u v g distance two n vertex graphs g 1 g 2 defined number entries symmetric difference eg 1 eg 2 denote notation extended naturally set c n vertex graphs distg c g 31 testing kcolorability subsection present algorithm testing kcolorability property given k namely interested determining vertices graph g colored k colors two adjacent vertices colored color kpartition graph least ffln 2 violating edges ie edges pairs vertices belong side partition test straightforward uniformly select sample denoted x vertices graph query pairs vertices x find edges g check induced subgraph kcolorable lack efficient algorithms kcolorability k 3 use obvious exponentialtime algorithm induced subgraph resulting algorithm called kcolorability testing algorithm towards analyzing define violating edges good kpartitions 6 definition 311 violating edges good kpartitions say edge u v 2 eg violating edge respect kpartition say kpartition fflgood ffln 2 violating edges otherwise fflbad partition perfect violating edges theorem 31 kcolorability testing algorithm property testing algorithm class kcolorable graphs whose query complexity polyk log1ffiffl whose running time exponential query complexity tested graph g kcolorable accepted probability 1 probability least 1 gamma ffi choice sampled vertices possible construct fflgood kpartition vg time polyk log1ffiffl delta jvgj proof g kcolorable every subgraph g k colorable hence g always accepted crux proof show every g fflfar class kcolorable graphs denoted g k rejected probability least establish claim proving counterpositive namely every g accepted probability greater ffi must fflgood kpartition thus fflclose g k done giving construc tive proof existence fflgood kpartition vg hence case g 2 g k also get efficient probabilistic procedure finding fflgood kpartition vg note test rejects g certificate form small subgraph induced x kcolorable view set sampled vertices x union two disjoint sets u u union disjoint sets size size well 4kffl set u rather kpartition u used define kpartition vg set ensures high probability kpartition u induced perfect kpartition defines fflgood partition vg order define kpartition vg given kpartition u first introduce notion clustering vertices vg respect partition u precisely define clustering based kpartition subset u partition denoted u 0 k one induced kpartition u clustering defined vertices cluster neighbors 6 kpartitions associated mappings vertex set canonical kelement set k partition associated shall use mapping notation explicit partition notation sides partition u 0 every k cluster denoted ca contains vertices vg neighbors u 0 every 2 neighbors u 0 clusters impose restrictions possible extensions partition u 0 partitions vg violating edges incident vertices u 0 namely vertices ca placed v 2 special case c set vertices neighbors u 0 hence put side partition extreme c k set vertices extension partition u 0 cause violations vertices c knfig forced put v thus easy handle difficult deal clusters ca jaj definition 312 clusters let u 0 set vertices let 0 perfect kpartition u 0 define u 0 ig subset k define acluster respect 0 follows relevance clusters becomes clear given following definitions extending consistent partitions definition 313 consistent extensions let u 0 0 say kpartition vg extends kpartition 0 u 0 extended partition consistent 0 v 6 0 u every kcluster thus vertex v cluster ca wrt 0 defined forced satisfy v 2 every kpartition extends 0 consistent manner restrictions regarding vertices c vertices c k latter guaranteed artificially definition consequences treated separately consistency condition forces focus main problem analysis given kpartition u good way define kpartition vg main idea claim high probability set u contains subset u 0 clusters respect induced kpartition u 0 determine whatever needs determined clusters allow place vertex certain side partition introduce many violating edges first step implementing idea notion restricting vertex definition 314 restricting vertex pair v said restricting respect kpartition 0 u 0 v least ffl neighbors 7 bipartite case easy since c likely contain vertices high degree bi 2b cb otherwise v nonrestricting vertex restricting respect 0 every pair v restricting otherwise v nonrestricting always clusters respect 0 thus vertex v 2 ca restricting every adding v u 0 thus u 0 cause may neighbors move cluster corresponding bigger subset vs neighbors bcluster wrt u 0 move b figcluster wrt u 0 given prefect kpartition u construct u 0 steps starting empty set step j add u 0 vertex restricting vertex respect kpartition current set u 0 vertex exists procedure terminates procedure terminates shall see must terminate steps able define based kpartition final u 0 fflgood kpartition vg procedure defined viewed point mental experiment namely provided order show high probability exists subset u 0 u certain desired properties later exploit restriction procedure construction u 0 input perfect kpartition 1 u 0 2 following consider current set u 0 partition 0 induced perfect kpartition u ffl less ffl8n restricting vertices respect 0 halt output u 0 ffl least ffl8n restricting vertices restricting vertex u j halt output error ffl otherwise restricting vertex u j add first fixed order restricting vertex u 0 315 every u perfect kpartition u iterations restriction procedure halts outputs either u 0 error proof claim well missing proofs found report 22 show u 0 used define kpartition vg need ensure high probability restriction procedure fact outputs set u 0 error end first define notion covering set definition 316 covering sets kcoloring say u covering set vg every perfect kpartition u restriction procedure given partition input halts output u 0 ae u rather error message words u every perfect kpartition u iterations procedure exist least ffl8n restricting vertices respect current partition u 0 u j include least one restricting vertex lemma 317 probability least 1 gamma ffi uniformly chosen set size delta covering set definition 318 closed partitions let u 0 set 0 kpartition call u closed less ffl8n restricting vertices respect 0 clearly restriction procedure outputs set u 0 set together induced partition closed u closed vertices vg nonrestricting recall nonrestricting vertex v belonging cluster k following property exists least one index v nonrestricting follows definition 314 every consistent extension 0 satisfies ffln violating edges incident v 8 however even v nonrestricting might indices v restricting hence may exist consistent extensions 0 ffl violating edges incident v therefore need define vertex set forbidden indices allow restricting pair v definition 319 forbidden sets let u closed consider clusters respect 0 v 2 vg n u 0 define forbidden set v denoted f v smallest set satisfying ffl every v least ffl4n neighbors clusters cb 2 b f v lemma 3110 let u arbitrary closed pair definition 319 8 n 2 let kpartition vg number edges v v 0 ffl2n 2 first note definition consistent extension vertex cluster cb 2 b value thus violated edges incident v incident vertices clusters cb b since pair v nonrestricting ffln edges lemma thought saying kpartition respects forbidden sets good ie many violating edges however partition applies vertices forbidden set k first item tells us cannot many vertices belong cluster c k next show high probability choice kpartition 0 u 0 induced kpartition us c k small implies vertices c k left partition previous lemma placed side without contributing many violating edges incident definition 3111 useful kpartitions say pair 8 n otherwise fflunuseful next claim directly follows choice definition 3112 let u 0 fixed set size 0 fixed kpartition u 0 u uniformly chosen set size probability least ffik gamma exists perfect kpartition u 0 extends 0 following corollary claim fact number possible closed pairs u possible kpartitions u k corollary 3113 closed pairs u determined possible kpartitions u unuseful probability least choice perfect kpartition wrap proof theorem 31 g accepted probability greater ffi lemma 317 probability accepted u covering set greater ffi 2 particular must exist least one covering set u u chosen g accepted probability greater ffi 2 respect choice probability greater ffi 2 exists perfect partition u case applying corollary 3113 must useful closed pair u u 0 ae u partition vg described lemma 3110 vertices forbidden set k placed arbitrarily two items lemma 3110 usefulness u ffln 2 violating edges respect partition completes main part proof theorem 31 32 testing maxclique let g denote size largest clique graph g c ae jvgjg set graphs cliques density least ae main result subsection theorem 32 let exists property testing algorithm class c ae whose edgequery complexity 2 ae 2 ffl 6 whose running time expaeffl 2 particular uniformly selects 2 ae 2 ffl 4 vertices g queries oracle existence edges vertices case g 2 c ae one also retrieve time set ae delta jvgj vertices g almost clique sense lacks ffl delta jvgj 2 edges clique theorem 32 proven presenting seemingly unnatural algorithmtester see however corollary observe natural algorithm uniformly selects polylog1ffiffl many vertices accepts iff induce subgraph clique density ae gamma ffl 2 valid c ae tester well corollary 33 let r uniformly selected set vertices v g let gr subgraph g induced r 2in rest subsection provide motivating discussion algorithm asserted theorem 32 recall jvgj denotes number vertices g first idea select random small sample u vg consider subsets u 0 size aedelta juj u poly1ffl u 0 let tu 0 set vertices neighbor every vertex u 0 ie gammau subgraph induced tu 0 consider set yu 0 aen vertices highest degree induced subgraph clearly g fflfar c ae least ffln 2 edges clique every choice u u 0 hand show g clique c size aen high probability choice u exists subset u 0 ae u yu 0 misses ffl3n 2 clique particular u assume fixed u 0 could sample vertices yu 0 perform edge queries pairs vertices sample sample otffl 2 vertices suffices approximating edge density yu 0 within ffl3 fraction probability particular sample distinguish set yu 0 far clique set yu 0 almost clique point need consider possible sets polynomial 1ffl problem remains sample certainly sample sampling vg testing membership decide vertex among highest degree first idea estimate degrees vertices using additional sample denoted w thus instead considering aen vertices highest degree consider aen vertices neighbors w second idea sample order vertices sample according number neighbors w take ae fraction neighbors 33 general partition problem following general graph partition property generalizes properties considered previous subsections particular captured graph property requires existence partitions satisfying certain fixed density constraints constraints may refer number vertices side partition number edges pair sides ae lb set nonnegative parameters ae lb gp phi class graphs kway partition denotes set edges one endpoint v j one v j 0 eq 3 places lower upper bounds relative sizes various parts whereas eq 4 imposes lower upper bounds density edges among various pairs parts example kcolorability expressed setting ub setting ae lb ae ub similarly setting xx j 0 6 j theorem 34 exists algorithm every given set parameters phi algorithm property testing algorithm class gp phi query complexity logkfflffi running time exp recall better complexities maxcut bisection well kcolorability aeclique obtained custommade algorithms acknowledgments wish thank noga alon ravi kannan david karger madhu sudan useful discussions r algorithmic aspects regularity lemma new rounding procedure assignment problem applications dense graph arrangement problems polynomial time approximation schemes dense instances nphard problems proof verification intractability approximation problems probabilistic checkable proofs new characterization np checking computations polylogarithmic time linearity testing characteristic two free bits efficient probabilistically checkable proofs applications approximation improved nonapproximability results finite samples detect singularities realvalued functions 24th stoc training 3node neural network npcomplete learnability vapnikchervonenkis dimension determining rationality mean random variable complexity colouring problems dense graphs approximating clique almost npcomplete regularity lemma approximation schemes dense problems property testing connection learning approximation distinguishability sets distributions learnability discrete distributions toward efficient agnostic learning probably correct classification concepts lecture notes evasiveness graph properties hardness approximations gap location computational limitations learning examples minimum consistent dfa problem cannot approximated within polynomial recognizing graph properties adjacency matrices time required recognize properties graphs problem robust functional equations applications program testing robust characterization polynomials applications program testing theory learnable uniform convergence relative frequencies events probabilities probably almost discriminative learning lower bounds randomized algorithms graph properties general classification rule probability mea sures tr theory learnable using dual approximation algorithms scheduling problems theoretical practical results complexity colouring problems dense graphs polynomial approximation scheme scheduling uniform processors using dual approximation approach computational limitations learning examples learnability vapnikchervonenkis dimension training 3node neural network npcomplete checking computations polylogarithmic time selftestingcorrecting polynomials approximate functions approximating clique almost npcomplete preliminary version finite samples detect singularities realvalued functions toward efficient agnostic learning minimum consistent dfa problem cannot approximated within polynomial smallbias probability spaces efficient probabilistically checkable proofs applications approximations probably correct classification concepts selftestingcorrecting applications numerical problems algorithmic aspects regularity lemma improved nonapproximability results learnability discrete distributions hardness approximation probably almost discriminative learning polynomial time approximation schemes dense instances italicnpitalichard problems maxcut randomized approximation scheme dense graphs testing long code hardness clique adaptively secure multiparty computation optimal inapproximability results property testing bounded degree graphs spotcheckers sublinear bipartiteness tester bounded degree graphs recycling queries pcps linearity tests extended abstract testing problems sublearning sample complexity fast probabilistic algorithms verification polynomial identities robust characterizations polynomials withapplications program testing linearity testing characteristic two free bits pcps nonapproximabilitytowards tight results clique hard approximate within n1 new rounding procedure assignment problem applications dense graph arrangement problems regularity lemma approximation schemes dense problems probabilistically checkable proofs testing hadamardlike codes ctr michal parnas dana ron ronitt rubinfeld testing membership parenthesis languages random structures algorithms v22 n1 p98138 january oren benzwi oded lachish ilan newman lower bounds testing euclidean minimum spanning trees information processing letters v102 n6 p219225 june 2007 michal parnas dana ron testing diameter graphs random structures algorithms v20 n2 p165183 march 2002 hana chockler dan gutfreund lower bound testing juntas information processing letters v90 n6 p301305 uriel feige gideon schechtman integrality ratio semidefinite relaxations max cut proceedings thirtythird annual acm symposium theory computing p433442 july 2001 hersonissos greece j feigenbaum kannan strauss viswanathan testing spotchecking data streams extended abstract proceedings eleventh annual acmsiam symposium discrete algorithms p165174 january 0911 2000 san francisco california united states eldar fischer testing graphs colorable properties proceedings twelfth annual acmsiam symposium discrete algorithms p873882 january 0709 2001 washington dc united states eldar fischer difficulty testing isomorphism graph given advance proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa oded goldreich luca trevisan three theorems regarding testing graph properties random structures algorithms v23 n1 p2357 august nir ailon bernard chazelle information theory property testing monotonicity testing higher dimension information computation v204 n11 p17041717 november 2006 gunnar andersson lars engebretsen property testers dense constraint satisfaction programs finite domains random structures algorithms v21 n1 p1432 august 2002 beate bollig ingo wegener functions readonce branching programs quadratic size necessarily testable information processing letters v87 n1 p2529 july uriel feige gideon schechtman optimality random hyperplane rounding technique max cut random structures algorithms v20 n3 p403440 may 2002 kenji obata approximate maxintegralflowminmulticut theorems proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa nir ailon bernard chazelle seshadhri comandur ding liu estimating distance monotone function random structures algorithms v31 n3 p371383 october 2007 eli bensasson prahladh harsha sofya raskhodnikova 3cnf properties hard test proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa alon w fernandez de la vega ravi kannan marek karpinski random sampling approximation maxcsp problems proceedings thiryfourth annual acm symposium theory computing may 1921 2002 montreal quebec canada eldar fischer strength comparisons property testing information computation v189 n1 p107116 25 february 2004 alon asaf shapira testing satisfiability proceedings thirteenth annual acmsiam symposium discrete algorithms p645654 january 0608 2002 san francisco california alon testing subgraphs large graphs random structures algorithms v21 n34 p359370 october 2002 eldar fischer ilan newman testing versus estimation graph properties proceedings thirtyseventh annual acm symposium theory computing may 2224 2005 baltimore md usa hana chockler orna kupferman regular languages testable constant number queries theoretical computer science v329 n13 p7192 13 december 2004 eldar fischer arie matsliah testing graph isomorphism proceedings seventeenth annual acmsiam symposium discrete algorithm p299308 january 2226 2006 miami florida artur czumaj christian sohler estimating weight metric minimum spanning trees sublineartime proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa eldar fischer ilan newman testing matrix properties proceedings thirtythird annual acm symposium theory computing p286295 july 2001 hersonissos greece alon asaf shapira testing satisfiability journal algorithms v47 n2 p87103 july ioannis giotis venkatesan guruswami correlation clustering fixed number clusters proceedings seventeenth annual acmsiam symposium discrete algorithm p11671176 january 2226 2006 miami florida michal parnas dana ron testing metric properties information computation v187 n2 p155195 15 december christian borgs jennifer chayes lszl lovsz vera ss balzs szegedy katalin vesztergombi graph limits parameter testing proceedings thirtyeighth annual acm symposium theory computing may 2123 2006 seattle wa usa ccile germainrenaud dephine monnierragaigne grid result checking proceedings 2nd conference computing frontiers may 0406 2005 ischia italy robert krauthgamer ori sasson property testing data dimensionality proceedings fourteenth annual acmsiam symposium discrete algorithms january 1214 2003 baltimore maryland eldar fischer guy kindler dana ron shmuel safra alex samorodnitsky testing juntas journal computer system sciences v68 n4 p753787 june 2004 beate bollig large lower bound query complexity simple boolean function information processing letters v95 n4 p423428 31 august 2005 alon asaf shapira linear equations arithmetic progressions hypergraph property testing proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia michal parnas dana ron testing metric properties proceedings thirtythird annual acm symposium theory computing p276285 july 2001 hersonissos greece kohayakawa v rdl l thoma optimal algorithm checking regularity extended abstract proceedings thirteenth annual acmsiam symposium discrete algorithms p277286 january 0608 2002 san francisco california artur czumaj christian sohler soft kinetic data structures proceedings twelfth annual acmsiam symposium discrete algorithms p865872 january 0709 2001 washington dc united states eli bensasson oded goldreich prahladh harsha madhu sudan salil vadhan robust pcps proximity shorter pcps applications coding proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa cristina bazgan w fernandez de la vega marek karpinski polynomial time approximation schemes dense instances minimum constraint satisfaction random structures algorithms v23 n1 p7391 august eldar fischer eric lehman ilan newman sofya raskhodnikova ronitt rubinfeld alex samorodnitsky monotonicity testing general poset domains proceedings thiryfourth annual acm symposium theory computing may 1921 2002 montreal quebec canada eldar fischer ilan newman ji sgall functions readtwice constant width branching programs necessarily testable random structures algorithms v24 n2 p175193 march 2004 p drineas frieze r kannan vempala v vinay clustering large graphs via singular value decomposition machine learning v56 n13 p933 harry buhrman lance fortnow ilan newman hein rhrig quantum property testing proceedings fourteenth annual acmsiam symposium discrete algorithms january 1214 2003 baltimore maryland eli bensasson madhu sudan salil vadhan avi wigderson randomnessefficient low degree tests short pcps via epsilonbiased sets proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa nikhil bansal avrim blum shuchi chawla correlation clustering machine learning v56 n13 p89113 gereon frahling christian sohler coresets dynamic geometric data streams proceedings thirtyseventh annual acm symposium theory computing may 2224 2005 baltimore md usa abraham flaxman alan frieze diameter randomly perturbed digraphs applications random structures algorithms v30 n4 p484504 july 2007 ravi kumar ronitt rubinfeld algorithms column sublinear time algorithms acm sigact news v34 n4 december w fernandez de la vega marek karpinski claire kenyon yuval rabani approximation schemes clustering problems proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa v rdl schacht property testing hypergraphs removal lemma proceedings thirtyninth annual acm symposium theory computing june 1113 2007 san diego california usa viraj kumar mahesh viswanathan conformance testing presence multiple faults proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia michael bender dana ron testing properties directed graphs acyclicity connectivity random structures algorithms v20 n2 p184205 march 2002 alon asaf shapira every monotone graph property testable proceedings thirtyseventh annual acm symposium theory computing may 2224 2005 baltimore md usa michal parnas dana ron ronitt rubinfeld tolerant property testing distance approximation journal computer system sciences v72 n6 p10121042 september 2006 artur czumaj funda ergn lance fortnow avner magen ilan newman ronitt rubinfeld christian sohler sublineartime approximation euclidean minimum spanning tree proceedings fourteenth annual acmsiam symposium discrete algorithms january 1214 2003 baltimore maryland ccile germainrenaud nathalie playez result checking global computing systems proceedings 17th annual international conference supercomputing june 2326 2003 san francisco ca usa alon asaf shapira testing subgraphs directed graphs proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa oded goldreich madhu sudan locally testable codes pcps almostlinear length journal acm jacm v53 n4 p558655 july 2006 oded goldreich property testing massive graphs handbook massive data sets kluwer academic publishers norwell 2002 fast approximate probabilistically checkable proofs information computation v189 n2 p135159 march 15 2004 fast approximate pcps proceedings thirtyfirst annual acm symposium theory computing p4150 may 0104 1999 atlanta georgia united states kiwi algebraic testing weight distributions codes theoretical computer science v299 n13 p81106 artur czumaj christian sohler testing hypergraph colorability theoretical computer science v331 n1 p3752 15 february 2005 asaf shapira combinatorial characterization testable graph properties regularity proceedings thirtyeighth annual acm symposium theory computing may 2123 2006 seattle wa usa nina mishra dana ron ram swaminathan new conceptual clustering framework machine learning v56 n13 p115151