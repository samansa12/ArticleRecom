removing node overlapping graph layout using constrained optimization although graph drawing extensively studied little attention paid problem node overlapping problem arises almost existing graph layout algorithms assume nodes points practice however nodes may labelled labels may overlap investigate node overlapping removed subsequent layout adjustment phase propose four different approaches removing node overlapping based constrained optimization techniques first simplest performs minimal linear scaling remove nodeoverlapping second approach relies formulating node overlapping problem convex quadratic programming problem solved quadratic solver disadvantage since constraints must linear node overlapping constraints cannot expressed directly must strengthened obtain linear constraint strong enough ensure node overlapping third fourth approaches based local search methods third adaptation egenet solver originally designed solving general constraint satisfaction problems fourth approach form lagrangian multiplier method wellknown optimization technique used operations research third fourth method able handle node overlapping constraints directly thus may potentially find better solutions disadvantage efficient global optimization methods available problems hence must accept local minimum illustrate methods series layout adjustment problems b introduction graph drawing extensively studied last fteen years however almost research dealt graph layout nodes treated points layout graphs unfortunately treating nodes points inadequate many applications example textual label frequently added node explain important information many illustrative diagrams engineering designs human body geography even satisfactory layout pointbased graph may lead node overlapping labels considered reason interested layout adjustment takes initial graph layout sizes nodes inputs modies original graph layout node overlapping removed primarily address problem layout adjustment dynamic context useful interactive applications graph display subgraphs enlarged shrunk node labels changed aim take existing graph layout remove node overlapping preserving users mental map graph following misue et al 17 order minimize change mental map preserve graphs orthogonal ordering say relative ordering nodes x direction attempt place nodes closely possible original positions also consider layout adjustment context static graph case wish minimize area graph new layout however since assume sophisticated graph layout algorithm used give initial layout graph like dynamic case still try preserve initial layout removing node overlapping paper study four dierent proposals performing graph layout adjust ment approaches model problem constrained optimization problem advantage viewing layout adjustment constrained optimization problem also add constraints capture semantics diagram simple graph example add constraints specify certain nodes must boundary graph specify relative placement nodes rst approach layout adjustment simplest performs minimum linear scaling x directions remove nodeoverlapping give simple ecient algorithm based dynamic programming nding minimum disadvantage uniform scaling means nodes often moved unnecessarily far approach may lead good layout second approach based formulating node overlapping problem convex quadratic programming problem solved using quadratic solver approach attractive algorithms convex quadratic optimization well understood global optimization possible polynomial time main disadvantage arises need model node overlapping constraints using linear constraints unfortunately nodelabel overlap constraint nodes u v inherently disjunctive ie u suciently left v u suciently v u suciently right v u suciently v cannot expressed directly must strengthened obtain linear constraint strong enough ensure node overlapping optimal layout respect stronger linear constraint may supoptimal respect original nodelabel overlap constraints contrast third fourth approaches allow disjunctive node overlapping constraint expressed directly approaches use local search methods 1 2 7 6 27 local search method starts current value variable examining local neighbourhood tries move point closer optimum constraints handled penalties optimization function search proceeds local minimum found local minimum represents solution constraints satised algorithm terminates otherwise may penalize local minimum avoid visiting continue search nds solution layout adjustment problems starting position close global optimum namely initial layout many cases local search eciently nd optimum third approach modication egenet 11 solver extension genet model 27 perform layout adjustment modications required handle constraint optimization problem opposed constraint satisfaction egenet designed b handle real oating point variables rather variables discrete domain work represents rst attempt know investigate egenet solver used solve constrained optimization problems involving real numbers 1 fourth approach adaptation lagrangian multiplier methods lmms 13 20 26 classical optimization technique used operations research lagrangian multiplier methods general approach constrained optimization applied many dicult problems successfully develop specic lagrangian algorithm variables treated pairs corresponding node positions nonconvexity constraints repeatedly optimize using results previous optimization give new possibly better starting position search little work layout adjustment mental map preservation closely related papers eades et al 9 mental map proposed rst time orthogonal ordering proximity relations topology given three criteria misue et al 17 provides forcedirected algorithm called force scan algorithm perform dynamic graph layout adjustment demonstrate methods apart uniform scaling approach give better layout force scan algorithm although slower related work includes lyons 15 tries improve distribution nodes new layout according measures distribution cluster busting simultaneously trying minimize dierence two layouts according measures dierence anchored graph drawing eades et al 8 try preserve mental map animated graph drawing using modied spring algorithm provide smooth user transitions related work includes 19 4 14 18 21 preliminary version second proposal including proof appeared 10 comprehensive survey graph drawing methods see 3 22 finally mention previous work 24 25 adapting genet model solve constraint optimization problems 23 guided local search gls 25 iteratively calls local search procedure based genet variable updating scheme modify minimize augmented cost function predened stopping condition reached gls successful solving radio link frequency assignment problems paper organized follows section 2 describe view layout adjustment problem constrained optimization problem introduce static dynamic version problem section 3 describe simplest approach solving layout adjustment problem linear scaling section 4 show replace disjunctive nonode overlapping constraints layout problem linear approximations allows us transform layout adjustment problem quadratic programming problem handled quadratic solver section 5 introduce original egenet model discuss modify egenet model handle static dynamic layout problems continuous constrained optimization problems section 6 brie describe basic concepts multiplier methods discuss adapt concepts derive lagrangianbased search procedure specialized layout adjustment problems provide empirical evaluation four proposals using set arbitrary graph layout problems investigating eciency eectiveness section 7 also compare approaches forcescan algorithm misue et al finally summarize conclude work section 8 2 layout adjustment constrained optimization algorithms layout adjustment based translating problem constrained quadratic optimization problem form minimize respect c quadratic expression c possibly nonlinear collection constraints terms variables representing position node assume given possibly directed graph ng set nodes graph e v v set edges graph say edge node u node v node labelling g consists two vectors wn node v width w v height h v label respectively initial layout graph g consists two vectors x n map node v x position respectively say node v placed intuitively shown figure 1 node rectangular bounding box display area origin lower left corner x axis rightwards upwards variables layout adjustment problem x coordinates nodes shall represent using two vectors x constraints problem layout adjustment must ensure node overlapping resulting solution constraints c expressed u figure 1 notation v right u right v equivalently fact usually want nodes separated minimum distance directly abutt simply handled modifying height width node adding distance treating problem overlap new larger nodes indicated introduction primarily concerned layout adjustment context dynamic graph layout useful interactive applications graph display subgraphs enlarged shrunk node labels changed aim take existing graph layout remove node overlapping preserving users mental map graph one heuristic ensure aesthetic criteria remain satised new layout similar initial layout preserve orthogonal ordering original layout 17 idea preserve relative ordering nodes x directions context linear constraints c oo ensure preservation orthogonal ordering u v x u x v x 0 v x similarly ydirection shall use heuristic rst two approachesuniform scaling quadratic programmingbut local search based methods dynamic layout adjustment problem nd new layout g x constraints c satised position node close possible original position encode dynamic layout adjustment problem constrained optimization problem setting objective function dyn wish minimize dyn subject c 1 choose constraints problem c either c c c oo new layout given optimal solution problem apart layout adjustment dynamic context might also consider layout adjustment static context case underlying assumption initial layout generated using sophisticated graph layout algorithm captures aesthetic criteria want redo work layout adjustment phase hence static layout adjustment remove nodelabel overlapping still preserve presumably aesthetically pleasing node placement initial layout also interested minimizing overall area graph preserving initial layout similar preserving users mental model use techniques constraints preserve orthogonal ordering term objective function move nodes little possible main dierence dynamic layout adjustment problem extra term objective function stat allows area new layout minimized precisely static layout adjustment problem nd new layout g x solving constrained optimization problem subject c 2 c either c c c oo k 0 weighting factor towards layout supposed shrunk arithmetical average nodes x coordinates median nodes x coordinates one also take position centroid graph even predened point c minimization attempt place nodes close possible predened position reducing overall area new layout despite dierent motivation formulation static layout adjustment problem similar static thus following sections focus techniques solving dynamic case since also used little modication solve static case 3 using uniform scaling rst consider simple approach layout adjustment uniformly scale graph remove overlapping nd c x x c move node v x x 0 linear transformation preserves graphs orthogonal ordering indeed original graphs structure scaling factors x chosen node overlapping removed disadvantage uniform scaling may cause nodes move unnecessarily rst examine compute c x c given scaling factors x follows equation 1 must minimize scale minimized x means x 0 v 0 respectively follows x 2 variances x 0 v 0 respectively consider compute scaling factors consider node dimensions w dimensions w similarly ij construction mx ij minimum amount scaling x direction remove overlap two nodes similarly mx ij minimum amount scaling direction remove overlap hence solve layout adjustment problem using scaling nding scale factors sx sy solve constrained optimization problem minimize scale subject 81 inspection equation 4 reveals choose minimal scaling factors removes overlapping means x mx ij overlapping nodes j similarly observation leads algorithm shown figure 2 computes c x remove overlapping possible minimize layoutscale compute mean mu x variance 2 x x 0 compute mean mu variance 2 0 lexicographically array a1m let ak form mx compute possible pairs scaling factors bmxk bmyk endfor determine pair least cost bestcost cost cost bestcost bestcost cost best k endif endfor solution else x bmxbest figure 2 scaling method layout adjustment scale subtlety notice scaling factors bmxi bmyi remove overlapping since scaling bmxi xdimension removes overlapping corresponding a1 ai scaling bmyi ydimension removes overlapping corresponding ai main part algorithm complexity om log number overlapping nodes since number overlapping nodes ojv j 2 overall complexity ojv j 2 log jv j 4 using quadratic programming quadratic programming used nd global optimum convex quadratic objective function constraints conjunction linear arithmetic equalities 9and inequalities quadratic programming widely studied operations research interior point methods provide polynomial time algorithms solving problems section 2 saw encode layout adjustment problem constrained optimization problem objective function convex quadratic mula unfortunately constraints cannot expressed conjunctions linear arithmetic constraints since overlap constraints involve disjunction use quadratic programming based approach need replace disjunctive constraints linear approximations guarantee overlap constraints hold since individual disjunct linear constraint straightforward way choose disjunctive possibility must hold order construct linear approximation nooverlap constraints c respect x direction c x dene right horizontal neighbours nodes constrain node overlap right neighbours sense hardwire constraints direction nodes must move remove overlapping node v right horizontal neighbour nodes set rightv set containing nodes u initial position 1 u 6 v 2 u right v v 3 u v could overlap moved x direction either x 0 x 0 rightv immediate right horizontal neighbour node node v exist node u rightv similarly dene upper vertical neighbour nodes set upperv immediate upper vertical neighbour node u v straightforward dene constraints c x node v 2 v compute immediate right horizontal neighbours r v say add constraint c x similarly dene c generation orthogonal ordering constraints c oo x c oo x directions respectively conceptually straightforward eciency important eliminate many redundant constraints possible precise algorithm given 10 treat layout adjustment problem two separate optimization problems one x dimension one dimension breaking optimization function two parts constraint two parts constraints direction c x given c x together c oo constraints x variables x similarly dene c dynamic layout adjustment problem follows denition dyn optimization problems subject c x 6 quadraticopt compute c x x minimize x subject c x compute c minimize subject c figure 3 quadratic programming approach layout adjustment xdirection subject c 7 ydirection new layout given x x solution solution 7 advantage separating problem way twofold first improves eciency since roughly halves number constraints considered problem second solve xdirection rst allows us delay computation c take account node overlapping removed optimization xdirection actual layout adjustment algorithm used given figure 3 first problem x dimension solved x 0 reset x x positions discovered optimization may reduce number upper vertical neighbours reduce size c also allow exibility node placement ydirection previously observed polynomial time algorithms solving quadratic programming problems exist however medium sized problems several hundred one thousand constraints preferred method solution active set method used incremental implementation active set method provided c qoca constraint solver 5 key idea behind active set method solve sequence constrained optimization problems 0 problem minimizes f respect set equality constraints called active set active set consists original equality constraints plus inequality constraints tight words inequalities currently required satised equalities inequalities ignored moment 5 using egenet solver section investigate egenet solver used solve layout adjustment problem order use quadratic programming needed linearize nooverlap constraints implicitly xed choices whether remove overlap vertical horizontal direction means potentially better solutions layout adjustment problem never considered egenet handle disjunctive nooverlap constraints directly hence attractive method solving constrained optimization problems associated layout adjustment formulation nonconvex local optimum found remainder section rst review original egenet model solving discrete constrained satisfaction problems examine modify original egenet handle continuous constrained satisfaction problems without optimization lastly discuss modied egenet used solve layout adjustment problem continuous constrained optimization problem knowledge work represents rst attempt investigate egenet solver used solve continuous constrained optimization problems 51 original egenet solver constraint satisfaction problem csp 16 tuple u dc u nite set variables denes nite set z called domain z z 2 u c nite set constraints restricting combination values variables take solution assignment values domains respective variables constraints satised simultaneously csps wellknown nphard general genet 27 articial neural network based mincon ict heuristic mch solving arbitrary csps binary constraints mch assign value causing minimum number constraint con icts variable quickly nd local minima search space lee et al 12 extended genet egenet generic representation scheme handling binary nonbinary constraints egenet successfully applied solve nonbinary csps carsequencing problems cryptarithmetic problems ecient manner 12 constraints egenet represented functions values variables nonnegative numbers example constraint z 1 z 2 represented function alternatively represent constraint using boolean valued function general csp formulated discrete unconstrained optimization problem follows min z2d zn cartesian product nite domains n variables total number constraints g z denotes penalty function constraint c csp represents weight given constraint penalty g z equals 0 variable assignment z returns positive integer weights associated constraints initially 1 may modied egenet procedure formulation goal minimize output cost function fz whose value depends number unsatised constraints weights associated constraints solution z original csp fz satises constraints egenet uses simple local search rule minimize cost function fz heuristic learning rule change weights constraints nds solution z initially complete random variable assignment z 0 generated network executes convergence procedure follows variable asynchronously updated convergence cycle update simply nds value variable gives lowest total cost without modifying vari ables change value assigned variables network trapped local minima local minimum represents solution heuristic learning rule used update weight violated constraint c csp help network escape local minima network convergence procedure iterates solution found predetermined resource limit exceeded 52 modied egenet solver original egenet solver supports constraints nite domains fore solve layout adjustment problems egenet approach consider modify original egenet solver handle problems continuous domains handle continuous constrained problem decide represent realnumber domain variable egenet network domain variable csp nite usually represented nite set contiguous integers continuous constrained problems inappropriate since even consider real variables take oating point values many possibilities instead represent range possible values variable z simply lower upper bound l u problems natural lower upper bounds variables need generate tighter bounds used ecient search since examines smaller area giving initial bounds tight may lead solution found even one exist since original egenet variable updating function assumes nite number possible values domain variable update continuous variable modied egenet network need treat domain continuous variable represented range l set nite number elements bounded values l u words sample domain continuous variable trying nite number possible values range updating value within egenet computation number elements try update called domain sampling size larger domain sampling size closer true local optimum solution likely get computation required step use domain sampling size 10 throughout experiments although could changed even within computation order overcome coarseness search using small domain sampling size without increasing computational overhead greatly whenever solution found revise bounds variables inwards towards solution found eect focusing search around solution found approach used algorithm extra exibility makes algorithm substantially dierent case domain sizes variables remain xed throughout computation used discrete constrained optimization satisfaction problems handle continuous constrained optimization problem simply add optimization component function minimized augmented cost function shall see next section closely related lagrange multiplier methods pseudocode general optimization algorithm egenetopt given figure 4 algorithm takes domain sampling size dsz number n variables z cost function cost input returns tuple consisting best solution found z b cost best basic idea similar gls 25 first initialize egenet variables using initialize vars usually random use var order function produce permutation perm determines order variables z updated core method updating loop sample values variable z v tried turn value gives minimum cost retained new value represents simple local search best value variable z v cost function includes penalties violated constraints drive search towards solutions loop continues local minima found variable updated local minimum represents solution egenetopt invokes function revise bounds try revise bounds domains egenet variables computes solution cost according cost function updates best solution x b best cost current solution smaller best modify augmented cost function egenetopt invokes penalize ctrz basically original egenet heuristic learning mechanism penalize violated constraint respect current variable assignment similarly egenetopt invokes penalize optz modify form optimization function occurs augmented cost function algorithm iterates function stopping criterion detects predened stopping criterion fullled therefore returns true initialize varsz z b z best costz b repeat repeat perm var ordern mincost costz minval z v costz mincost mincost costz minval z v endif endfor z v minval endfor update v 2 z z represents solution revise boundsz costz best z b z best costz b endif endif penalize ctrz penalize optz stopping criterion return hz b besti figure 4 general egenetbased optimization algorithm clearly eciency using egenetopt solve continuous constrained optimization problem quality 2 best solution found egenet opt depends largely dene augmented cost function appropriately modify cost function penalize ctr penalize opt function 53 handling layout adjustment variables layout adjustment problem x x coordinates node given exible representation scheme general constraint egenet model straightforward dene nooverlap constraint disjunctive constraint egenet network ensures overlapping labels j follows figure 5 shows constraint represented modied egenet net work denes function g ij measures amount overlap x directions returning 0 overlap nooverlap constraint applied pair j nodes 1 j n demonstrates one advantage using egenet approach solve layout adjustment problems general simple represent constraints involved problems related graph layout problems egenet network indeed arbitrary additional constraints added problem straightforwardly fx fy fy figure 5 egenet network nooverlap constraint need determine suitable ranges variables problem order make use modied egenet algorithm would like ensure variables initial ranges contains solution problem exists conservative approach nd solution using uniform scaling approach use minimal range containing position original value instance x u v position computed uniform scaling approach node v position node v original graph initial range x v set x otherwise similarly v clearly range guaranteed include least one solution problem scaling factors tend large range also large practice making assumptions density nodes start smaller ranges thus reduce search dene max x maximum overlap x direction pair nodes dene max similarly use initial ranges x 0 v means solution guaranteed true graph dense overlapping initial layout practice rare layout adjustment problems initial value variables x returned initialize vars given initial layout x 0 0 one reasons investigating local search methods initial layout usually quite close global optimum hence local search around initial layout likely nd good solution variable ordering strategy var order used simply updates variables one dimension x random order updating variables dimension eective since relationship x variables weak disjunctive constraints evaluating dimension turn get faster convergence local minima strategies course possible revise bounds function dened follows solution found x x x x 0 reset upper bound current value x lower bound reset x 0 reset lower bound current value x upper bound reset x 0 bounds unchanged similarly encodes strategy since found solution one side starting point look side look away looking farther away tend reduce optimality solution graph layout problem stopping criterion returns true predetermined number iterations tried cost current solution worse equal previous solution total resource limit initially set 1000 time better solution found resource limit reset double amount resource used nd previous solution less 100 otherwise resource limit reset minimum 1000 120 resource used nding previous solution remains determine penalize ctr penalize opt functions relative weights objective function constraint penalties impor tant example graph layout adjustment problem augmented cost function biased towards penalty constraint violation node lapping egenetopt may take longer time even fail return good solution 3 hand augmented cost function biased towards solution cost egenetopt may fail nd solution satisfying nooverlap constraints recall objective function dyn layout adjustment quantity usually order 100 1000 always much larger penalty value constraints boolean constraint violations need normalize quantity avoid bias towards solution cost range x v l v u v maximum value term l v c x denote omax v normalized optimization function x v simply norm x clearly value returned norm x real number range similarly dene normalized optimization function norm variables accordingly dene augmented cost function costx sum penalty constraint violations sum normalized optimization function follows norm x denotes total number constraints problem local minimum found penalty function penalize opt changes normalized optimization functions take account new smaller ranges variables penalize ctr function simply increases weight violated constraint 1 original egenet model note egenet approach ignored orthogonal ordering constraints simply concentrated overlap constraints since practice found minimimizing dyn preserves structure original graph tends preserve orthogonality even though explicit constraints 6 using pseudolagrangian method egenet local search method described previous section modica tion discrete constrained satisfaction algorithm solve continuous constrained optimization problems end looks similar lagrange multiplier method inspired us directly solve problem using approach 61 lagrangian multiplier methods lagrange multiplier methods general approach continuous constrained optimization tackle nonlinear objective functions nonlinear constraints general continuous equalityconstrained objective function formulated follows minimize fz subject fz objective function gz vector functions representing constraint penalties lagrangian function associated problem weighted sum objective function constraints dened vector lagrange multipliers lagrangian function related local extrema problem 8 following theorem see eg 13 theorem 1 let z local extremum fz subject gz assume z regular point 4 exists vector r z fz figure 6 overlap calculation based theorem number method solving constrained optimization problems widely used rstorder method represented iterative process z k stepsize parameter intuitively equations represent counteracting forces achieve good solution optimization problem constraint violated 11 increases weight constraint forcing search towards solution contrast 10 performs descent optimization direction lagrange multipliers xed 62 layout adjustment lagrange multipliers lagrangian approach layout adjustment performs iterative process like dened rather synchronous update variables node v treated turn two coordinate variables x v v updated together allows nonoverlap constraints handled meaningful way two nodes j overlap illustrated figure 6 overlap j eect creates force direction shown node moves either distance dx ij x direction dy ij direction overlap disappear choose minimum magnitude dx ij dy ij resulting constraint violation eect treat constraint function g ij follows 0 overlap given denition r x otherwise similarly r two constraint functions g ij g ji symmetric represent single underlying overlap constraint hence pair lagrange multiplier ij representing current weight constraint basic local search simply lagrangian optimization using rstorder stepping since optimization nds local minima one optimization may nd good solution local minima reached pseudolagrangian method reduces stepsize half also moves nodes closer positions initial layout since decrease objective function albeit risk introducing overlapping lets search potentially nd better solu tions eventually number reoptimizations method nishes returning best solution found experiments initial stepsize 0125 factor limit 255 function initialize multiplier simply initialized lagrange multipliers 1 resource limit never exceeded algorithm figure 7 take account orthogonal ordering constraints could added using standard lagrangian approach adding new constraint functions namely unfortunately simple addition lead divergent behaviour one simple approach handle equality constraints orthogonal ordering instead simply force compliance let set coordinates must equal eg fx g set compute average x2s xjsj set value within average value eg x 1 approach seemingly adhoc quite principled justication replaced set variables single variable eect using equation constraints substitutions change variable would determined sum changes variables set average simply function sum changes variables however approach handle inequality constraints orthogonal ordering egenet approach empirical evaluation langrangian approach included constraints preserve original orthogonal dering since practice found minimimizing dyn preserves structure original graph tends preserve orthogonality initialize multiplier best 1 stepsize initial step size repeat 6 endif endfor endfor gx x best best x else stepsize stepsize2 initialize multiplier endif endif factor limit resource limit exceeded return figure 7 pseudolagrangian method layout adjustment 7 empirical evaluation section compare performance scaling algorithm scale presented section 3 force scan algorithm fsa misue et al 17 quadratic solver approach quad presented section 4 modied egenet solver described section 5 psuedolagrangian method plm discussed section 6 set nine dynamic graph layout adjustment problems quad implemented borland c windows version 45 solvers implemented c compiled gcc compiler version 273 linux tests performed pentium pc running 155mhz table 1 cpu time taken scale fsa quad egenet plm layout adjustment example problems graph nodes scale fsa quad egenet plm table 2 value dyn adjusted layout using scale fsa quad egenet plm layout adjustment example problems graph nodes scale fsa quad egenet plm 9 17 38880 127008 77760 5535 3688 quantitative comparison dierent methods sample problems provided table 1 2 table rst column gives identifying number graph second column gives number nodes sample graph table 1 details cpu time seconds taken nd adjusted layout method table 2 details value dyn adjusted layout given method local search methods egenet plm averages cpu time cost 10 successful runs reported case cases tested egenet plm successfully nd suboptimal nal layout without node overlapping noted egenet plm solvers halt current solution found worse previous one egenet solver also halt possibly reset resource limit exceeded broadly speaking nd ranking methods respect cpu time taken nd adjusted layout fastest slowest scale fsa quad plm egenet scale fsa considerably faster methods quad somewhat faster plm modied egenet solver takes much longer solvers probably modied egenet solver consider nite number points domains variable updating slowly revise domains learning values dyn reported table 2 provide simple numerical measure quality adjusted layout however also important look actual aesthetic quality adjusted layout reason look example graphs show resulting layout adjustment method note used asterisk indicate method giving subjectively best layout example table 2 graph 1 general b graph 1 box nodes c layout scale layout fsa layout quad f layout egenet g layout plm figure 8 initial layout adjustment graph 1 figure 8a 8b respectively show initial layout graph 1 idealized graph circles nodes labelled graph figure 8c 8d 8e 8f 8g give resulting layout adjustment using scale fsa quad mod ied egenet plm respectively methods provide reasonable layout ad justment although note egenet introduces edgenode label overlap plm gives best adjustment note gures scaled graph maximum height width one inch thus adjusted layouts may scale smaller usually better layouts may identied relatively larger node labels graph 2 layout scale c layout fsa layout quad e layout egenet f layout plm figure 9 initial resulting layouts graph 2 surprisingly graph 2 shown figure 9 simplest method scale nds best layout methods nd local minimum methods give reasonable layout adjustment quad giving worst layout figure shows initial resulting layouts graph 3 chosen example kind explanation diagram widely used biology engineering textbooks arguably quad gives best adjusted layout since best preserves original graphs structure scale increases size much egenet lesser extent plm change orthogonal ordering graph remove symmetry graph 4 shown figure 11a example rooted tree labelled graphs commonly used display data structures organization structures many reallife applications methods give reasonable layout worst scale since unnecessarily increases size layout found quad slightly better found plm egenet graph 5 another example rooted tree layout time plm gives best layout although changed orthogonal ordering closely followed fsa preserves orthogonal ordering quad egenet introduce edgelabel crossing graph 6 carefully designed show layout adjustment may introduce edge crossings even though layout adjustment method preserves graphs orthogonal ordering fsa quad produce worst layouts since introduce edge crossing scale introduce edge crossing nal graph 3 b layout scale c layout fsa layout quad e layout egenet f layout plm figure 10 initial resulting layouts graph 3 graph 4 b layout scale c layout fsa layout quad e layout egenet f layout plm figure 11 graph 4 tree layout adjustment 1 layout since initial layout contain edge crossing resulting layout usual unnecessarily wide modied egenet plm methods produce similar good layouts produced egenet slightly better produced plm shown figure 14a graph 7 rather pathological graph edges lots node overlapping occurred dierent horizontal levels scale clearly gives worst layout adjustment modied egenet gives best layout neatly packed fairly close initial layout hand plm gives stacklike layout looks quite dierent original graph graph 5 b layout scale c layout fsa layout quad e layout egenet f layout plm figure 12 graph 5 tree layout adjustment 2 graph 8 shown figure 15a simplied version graph 7 nodes removed thus less node overlapping graph 8 algorithms produce result closer original graph case plm gives aesthetically pleasing layout graph 9 xshaped graph symmetry x yaxis layouts reasonable layouts scale fsa quad retain symmetry produced modied egenet plm quad produces best layout see method produces uniformly better layout adjustment even scale produces best layout one example however general scale fsa produce worst layout general plm closely followed quad produce best layout however egenet plm lose original structure graph preserve structure would need add extra constraints modied egenet plm solvers generally quad fsa preserve structure part preserve orthogonal ordering may still introduce edge overlapping found original graph scale guaranteed preserve original structure since performs simple uniform scaling graph 6 without node labels b graph 6 node labels c layout scale layout fsa e layout quad f layout egenet g layout plm figure 13 initial resulting layouts graph 6 71 resourcebounded layout adjustment although plm solver produces best layout table 1 suggests substantially slower scale fsa solvers natural question ask given small xed amount time method give best layout question makes sense plm solver employs local search techniques point time current best solution thus stop plm solver time interval look quality solution compare scale fsa solvers make sense perform experiment quad since concept current best solution graph figure 17 shows cost best solution found far multiple best found eventually versus time graphs 1 7 9 execution plm algorithm rst nonoverlapping solution found graph within 002 seconds except graph 9 value dyn solution smaller solution eventually found scale fsa graph 7 b layout scale c layout fsa layout quad e layout egenet f layout plm figure 14 initial resulting layouts graph 7 graph 8 b graph 8 scale c graph 8 fsa graph 8 quad e graph 8 egenet f graph 8 plm figure 15 initial resulting layouts graph 8 graph 9 b layout scale c layout fsa layout quad e layout egenet f layout plm figure 16 initial resulting layouts graph 9 quad graph 9 rst solution cost 8108 graphs plm nds solution whose value dyn within 20 eventual best less half time required nd best examples could safely stop plm 015 seconds obtain solution within 20 best found better solution found algorithms 8 conclusion studied problem layout adjustment graphs wish remove node overlapping preserving graphs original structure hence users mental map graph given four algorithms solve problem rely viewing constrained optimization problem empirical evaluation algorithms shown reasonable fast give nice layout better comparable algorithm fsa misue et al generally speaking approach based lagrangian methods gives best layout reasonable time however may preserve orthogonal layout original graph quadratic programming approach also produces good layout reasonable time preserve graphs orthogonal ordering uniform scaling gives fastest simplest approach layout adjustment may lead unnecessary enlargement graph guaranteed preserve original structure graph results interesting layout adjustment graphs also suggest techniques laying nonoverlapping windows labels maps graph 9 graph 7 graph 1 figure 17 cost best solution found far time graphs 1 7 9 9 acknowledgement would like thank peter eades comments work yi xiao quadratic solver notes 1 note unless number pixels used real numbers usually used denote positions sizes nodes graph layout since allows greater exibility 2 even though global optimality resulting solution cannot guaranteed egenet approach local search method experimental results related gls approach reported 25 show set reallife military frequency assignment problems gls always found better solutions found conventional search methods 3 mean solution cost close enough globally optimal cost optimization problem 4 regular point constraints g one rg 1 linearly independent r boltzmann machines traveling salesman problems discrete stochastic neural network algorithm constraint satisfaction problems algorithms drawing graphs annotated bibliography solving linear arithmetic constraints user interface applications genet connectionist architecture solving constraint satisfaction problems iterative improvement solving small large scale constraint satisfaction problems using heuristicbased microgenetic algorithm online animated graph drawing using modi preserving mental map diagram removing node overlapping using constrained optimization extending genet nonbinary csps towards ecient stochastic constraint solver busting anchored graph drawing consistency networks relations layout adjustment mental map experimental theoretical results interactive orthogonal graph drawing edge extendible graph automatic graph drawing readablity diagrams foundations constraint satisfaction tunneling algorithm partial csps combinatorial optimization problems partial constraint satisfaction problems guided local search methods optimization solving satisfaction problems using neuralnetworks tr ctr huang wei lai forcetransfer new approach removing overlapping nodes graph layout proceedings twentysixth australasian conference computer science research practice information technology p349358 february 01 2003 adelaide australia wanchun li peter eades nikola nikolov using spring algorithms remove node overlapping proceedings 2005 asiapacific symposium information visualisation p131140 january 01 2005 sydney australia huang wei lai sajeev junbin gao new algorithm removing node overlapping graph visualization information sciences international journal v177 n14 p28212844 july 2007 huang peter eades wei lai framework filtering clustering dynamic layout graphs visualization proceedings twentyeighth australasian conference computer science p8796 january 01 2005 newcastle australia