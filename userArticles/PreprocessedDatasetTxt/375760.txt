causality representation cancellation mechanism time warp simulations time warp synchronization protocol allows causality errors recovers assistance cancellation mechanism cancellation cause rollback several simulation objects may trigger cascading rollback situation rollback cycles back original simulation object cycles rollback cause simulation enter unstable thrashing state little real forward simulation progress achieved address problem knowledge causal relations events used cancellation avoid cascading rollbacks initiate early recovery operations causality errors paper describe logical time representation time warp simulations used disseminate causality information new timestamp representation called total clocks two components virtual time component ii vector event counters similar vector clocks virtual time component provides one dimensional global simulation time vector event counters records event processing rates simulation objects time representation allows us disseminate causality information event execution used allow early recovery cancellation propose cancellation mechanism using total clocks avoids cascading rollbacks time warp simulations fifo communication channels b introduction rollback inherent operation time warp mechanism rollback restores state lp causally consistent state normal event processing continue cancellation rollbacks occurring one lp propagate lps cancel causally incorrect event computations conventionally rollbacks informed antimessages timestamps specifying rollback time lps rollbacks occur frequently may cascaded interrelated contemporary time warp simulators time representations generally maintain local simulation time usually carry information causal relations rollbacks associated events however logical time representations designed carry causal information exploited rollback accelerate cancellation process logical time used order events distributed processes 11 ordering events among arbitrary processes dependent size number bits logical time representation several representations scalar clocks vector clocks matrix clocks used represent logical time distributed systems 16 paper present total clocks maintenance time time warp synchronized parallel simulations total clocks used determine causal relationships events among arbitrary processes two events concurrent causally dependent precise knowledge relation enables optimizations various time warp algorithms particular causal information useful canceling events rollback paper present prove properties total clocks present cancellation mechanisms avoid cascading rollbacks using total clocks representation remainder paper organized follows section 2 presents background work logical time representations cancellation mechanisms time warp section presents scenarios time warp simulations causal information useful perform intelligent decisions section 4 presents total clocks representation time warp simulations captures causality information events section 5 presents new cancellation mechanism exploiting causal information disseminated total clocks section 6 discusses implementation considerations concluding remarks figure 1 cascading event dependency background related work logical time representation critical importance distributed systems several logical time representations scalar clocks 11 vector clocks 5 13 matrix clocks 16 proposed model time distributed systems scalar clock representation scalar quantity integer used represent logical time process increments value local clock executing event piggybacks value time sending message vector clock representation nelement array nonnegative integers process maintains nelement array element index represents logical time progress p indices specify latest known time value processes 16511913 vector clocks provide mechanism represent causality information vector clock representation readily usable optimistic protocols due forward backward motion time matrix clock representation process maintains n n matrix nonnegative integers 1821 process maintains matrix clock value representation properties vector clocks addition process p knows time value process p k known every process p j allows processes discard obsolete information received processes 16 matrix clocks also used assist calculation gvt 4 time warp synchronized discrete event simulation virtual time used model passage time simulation 7 simulation executed via several processes called logical processes lps lp associated event queue maintains local virtual time clock causality error arises lp receives message timestamp earlier lvt value straggler message canceling events input queue lps performed cancellation strategies aggressive lazy dynamic cancellation 8 15 17 however cancellation strategies nothing prevent cascading rollbacks several strategies suggested stop incorrect computations 3 12 20 deelman et al propose breadth first rollback mechanism stop propagation erroneous computations adjacent figure 2 interrelated event dependencies simulation objects processor 3 however handle propagation erroneous computation across processors conventional cancellation mechanisms employed madisetti 12 proposes use wolf calls cancellation information sent highpriority broadcast multicast halt erroneous computations however reactive strategies avoid cascading interrelated rollbacks motivation time warp simulations rollbacks recover lps causality errors rollbacks cascaded inter related simulation useful computation performed inversely proportional number events rolledback hence frequent rollbacks reduce efficiency degrade performance optimizations time warp concentrate reducing number rollbacks reducing effect rollbacks improve performance 8 17 15 time warp antimessages sent lps could result new antimessages lp sent initial antimessages cascaded rollbacks degrade efficiency runtime performance simulation addition cascading rollbacks positive straggler event causally preceding lp rollback another lp several times rollbacks due lp sending events several parallel paths computation another lp cause cascading interrelated rollbacks due fact events causally dependent events rolledback identified time causality error causal information specify information save huge amount computation communication time ignoring events rolledback eventually figure 1 shows typical scenario occurrence cascading rollbacks event e1 causes generation event en rolling back event e1 could trigger rolling back events e2 e3 result rolling back event en figure 2 shows event e1 causing several events parallel paths lp pn rolling back event e1 could r c u r figure 3 total clock representation result several rollbacks lp pn event lps knowing causal dependency events avoid cascading interrelated rollbacks explained scenarios frequent motivates us logical time representation captures causality information exploit information rollbacks 4 total clocks seen previous sections time warp mechanism implementing virtual time paradigm allows forward backward motion simulation time con trast vector clock representation allows tracking causal relationship events distributed system time warp simulations logical time representation implements virtual time paradigm tracks causal relation events useful lps make intelligent decisions detecting causality errors paper present total clocks logical time representation time warp simulations attempt towards goal total clocks two components namely virtual time component vector counter component virtual time component global one dimensional temporal coordinate system ticks virtual time 10 virtual time component scalar value denotes progress simulation time lp second component total clocks vector event counters number elements vector equal total number lps simula tion lp maintains counter called event counter incremented based specific update rules sim ulation addition lp maintains local copy event counter values lps set event counters called vector countervc sending event lp sends virtual time vector counter timestamp two component representation timestamp consisting virtual time vector counter called total clocks due fact representation provide total ordering events ordering rules imposed value denoted tcp e execute event e update save state send events lps end figure 4 total clock value update processing event e simulation object p virtual time component vector counter com ponent figure 3 shows total clock components virtual time component total clock referred vt vector counter vc logical time representa tion v ci refers ith element vector counter containing event counter value lp tcp refers total clock value lp p tce refers total clock value event e tcp v refers virtual time component tcp v c refers vector counter component total clock lp maintains total clock lp processes events order virtual time component events total clock sending event lp assigns time event processed vt component timestamp vector counter lp assigned vc component times tamp thus elements vector timestamp denotes last known event counter values sending lp lp learns latest value event counter another lp j event j object learnt lp j therefore vector counter lp specifies latest event counter values lps however could exist lps events causally independent lps events respectively causal relation causal independence states lps events determined easily using total clocks operators k sup succ vector counter component total clocks definition vector clocks 13 5 lps executing event must follow specific rules update virtual time component event counter values processing event virtual time component updated virtual time component specified event e vector counter clock value updated using sup operator performs element wise maximum operation 5 13 figure 4 shows steps updating total clock value maintained lp event process ing primitive execute event consists updating state sending events lps saving state execute event process may perform different functions depending optimizations algorithms enabled simulation time event processed send message e end figure 5 total clock value propagation sending event e lp rollback rollbacke cancele end figure 6 lp receiving event e communication layer kernel 14 value clock sup operation event counter increment denoted tcp e value lps clock value immediately processing event e denoted tcp e figure 5 shows operations performed sending event virtual time component event set simulation time event processed vector counter values set lp primitive send message sends event physical communication layer figure 6 shows steps performed receiving event communication layer lp checks rollback rollsback time simulation time event addition lp cancels events undone due rollback cancellation mechanisms aggressive cancellation lazy cancellation usually performed cancel messages 17 following section present new cancellation mechanism takes advantage information present total clocks cancel events upon receiving straggler event seen clock update propagation rules certain properties could inferred total clocks value event counter lp increases monotonically irrespective progress simulation time property disambiguates two simulation times vt component value rollback feature total clocks used optimizations algorithms clearly needs disambiguate scenarios events considered following theorems events processed lp rolledback cancellation message relations theorems may hold good events consists one processed rolledback ad dition following theorems may applicable lp canceling events sent time state restoration due straggler event following theorems stated without proof easily verified procedure process figure 4 theorem 41 vector counter component total clock lp increases monotonically event processing theorem 42 denotes causally precedes relation e 1 theorem 43 e i1 e i2 events scheduled lp p e i1 e i2 g theorem 44 e i1 event scheduled lp p arbitrary lp j determine states set events input queue causally related event e i1 corollary 41 e i1 e i2 two events scheduled arbitrary lp p j determine states set events input queue causally related events set 5 total clocks event cancellation previous section see total clocks representation capture causal dependencies events states property exploited cancellation strategies total clocks disseminate causality information new cancellation mechanism designed exploit information cancellation messages designed instead antimessages specify events rolledback lp addition events causally related events rolledback identi fied events rolledback along events specified cancellation message due fact assuming aggressive cancellation strategy events causally dependent rolledback event eventually rolledback proactive cancellation completely prevent cascading rollbacks addition early recovery operations restoring state ignoring events rolledback performed rollbacks interrelated thus knowing causal relation rolledback events events performing cancellation save huge amount computational communication time spending resources events eventually undone conventional time warp antimessages used initiate singleton cancel information antimessages restore state lp state etcvt restore input queue events moved processed queue unprocessed queue whose events etcvt end figure 7 lp rolling back due event e communication layer similar positive events distributed control messages antimessages cancellation mechanism presented deviates paradigm particular cancellation mechanism introduces new set messages simulation called cancel message inform lps causality errors preceding lps virtual time update rules time processing events similar conventional time warp however virtual time update rules cancellation messages different performed lp performed recovery operations due causality error informed cancellation message cancel message consists vt component vc component similar event addition cancel message field called signature time creating new cancellation message vc component lp along id used signature addition cancel message contains minimum maximum event counter values called event counter range range along lp id signature specifies events removed due rollbacks new cancellation mechanism uses event counter ranges keep track events rolledback events causally dependent rolledback events generated lp lie within event counter range corollary 41 cancellation mechanism propagates event counter range cancellation messages virtual time component specified along event counter range cancellation message specify rollback time lp cancellation message could rollback lp hence generate new cancellation messages signature field used set cancellation messages helps identify related cancellation messages hence interrelated rollbacks cascading rollbacks figure 7 shows steps performed rollback due event e lp p upon rollback lp must cancel messages undo events sent lps performed procedure cancele fig ure 8 lp maintains data structure called cancel range list data structure contains list ranges lp id index list used ignore messages whose vc component value index timestamp lies within specified range event counter values cancel range list built maintained lp based specific rules procedure add cancel range list figure performs necessary rules add range information cancel messagecancellation message cancellation message signature different cancellation messages cancellation message added cancel range list new cancellation message signature cancel message received previously vc component concurrent vc component new cancellation message new cancellation message range added cancel range list implies cancellation message due antimessage generation different path computation compared cancellation messages received signature cancellation message received signature previously received cancellation messages vc component less cancellation messages signature new event counter range added cancel range list addition event counter ranges greater vc component signature received removed rule avoid rollbacks lp due cascading rollbacks since recovery operations initial rollback remove causally dependent events procedure check rollback figure 10 performs check see lp must rollback cancellation message lp removes causally dependent events upon receiving positive straggler cancellation message hence lp checks see cancellation message informs different causality error one learnt lp rules check rollback similar rules add cancel range list addition checks vt component less current simulation time procedure cancel local event figure 11 cancels events causally dependent rolledback events performed checking events input queue lie within event counter range specified cancellation information cancel range list events within rollback range specified cancel message index vc component timestamp either rolledback causally dependent events rolledback cancel local event checks events input queue condition removes procedure performs recovery operation current cancellation message proactive recovery operations cancellation messages received due cancellation message therefore avoids cascading rollbacks e cancel message add cancel range liste cancelefer j er rolled backg rolled back eg find rollback time rollbacktime objects cancel er 2 canceler e cancel message signatureemin emax tcp add cancel range listcancelmessage end figure 8 canceling events due event e add cancel range liste begin e cancel message add e cancel range list 9 cm cm 2 cancel range list remove cm add e cancel range list add e cancel range list end figure 9 lp p checking cancel message add cancel range list e cancel message rollback true rollback true end figure checking rollback due event e event eevent countermin event eevent countermax remove events input queue whose timestamp within range event counterminevent countermax index j vector counter end figure 11 lp p canceling events input queue due cancel message e e cancel message add cancel range liste insert input queue end figure 12 lp p inserting event e procedure cancel cancels events local input queue sends cancellation messages lps inform causality errors cancellation message new signature created lp rolledback due positive straggler event hand signature received cancel message used message sends new cancellation messages lps identify cancellation messages generated due interrelated cascading rollbacks seeing signature lp ignore cancellation message recovery operations already performed lp determines cancele contains set events rolledback due event e set cancel contains lp ids send cancellation message minimum event counter value eventcountermin maximum event counter value eventcountermax determined cancele rollback time rollbacktime k lp k determined cancele event counter valuet cp v ci lp incremented initially procedure vc components value updated suptcp v c tcev c sending cancel message procedures add cancel range list cancel local events called procedure cancel update data structure cancellation range information cancel events input queue inserting event figure 12 event checked ranges specified cancel range list events ignored lie within one ranges handle events transit time canceling events local input queue theorem 5156 prove properties new cancellation mechanism cancelede introduced following theorems defines set events rolledback due receiving event e lp theorem 51 given cancel message cm 1 theorem 52 given cancel message cm theorem 53 given cancel message cm 9 theorem 54 procedure cancel local events removes events input queue lp cancel message event stragglers received theorem 55 procedure insert inserts events causally dependent events canceled theorem 56 procedure cancel lp p generates cancellation messages cancel events causally dependent events canceled call cancele see cancellation mechanism efficient removing events input queue undone either directly indirectly due rollback causally preceding lp figure 13 shows update total clock value processes cancellation mechanism space time diagram timestamp consist vt component followed 3element vector counter three object simulation upon receiving straggler process p2 process p0 sends cancellation message p1 discards events objects causally dependent rolledback events saves huge amount computational resources would spent processing events addition constant vigil events inserted input queue removes extra overhead incurred messages rolledback eventually lps critical path frequently rolledback exposed cascading figure 13 space time diagram explaining total clock update cancellation rollbacks huge amount time spent uncommitted computations avoided employing cancellation mechanism total clocks 6 conclusion total clock representation suitable models spend time recovering rollbacks total clocks representation also useful taking decisions among lps critical path simulation exposed frequent rollbacks total clocks inherit pros cons vector clocks addition applicability field time warp simulation several researchers found efficient practical implementations vector clocks 19 6 9 studies performed chetlur et al 2 found overhead communication caused size message significant compared frequency calls communication subsystem overhead communication messages within range message sizes remains optimizations propagate changes values vector counters message sizes kept within range messages without total clocks representation cancel range list maintained lp ig noreaccept incoming events may grow larger pruned frequently simulation time attached cancel message specifies time event counter range check per formed time maximum vt component rolledback events cancel range information could removed cancel range list gvt sweeps past vt value paper shown representation causal information using total clocks utility representation cancellation mechanism presented cancellation mechanism exploits total clocks repre sentation cancellation mechanism described reduces sending message output channels rollback predecessors cancel events received predecessors could also rolled back cancellation mechanism avoids cascading interrelated rollbacks exploration done exploit total clocks representation time warp algorithms state savings synchronization mechanisms r concerning size logical clocks distributed systems optimizing communication timewarp simula tors system knowledge acquisition parallel discrete event simulation logical time distributed systems causal distributed breakpoints parallel discrete event simulation rollback mechanisms optimistic distributed simulation systems dependency tracking filtering distributed computations virtual time rollback algorithm optimistic distributed simulation sys tems virtual time global states distributed sys tems comparative analysis various time warp algorithms implemented warped simulation kernel dynamic cancellation selecting time warp cancellation strategies runtime logical time capturing causality distributed systems cancellation strategies optimistic execution systems discarding obsolete information replicated database system efficient implementation vector clocks efficient solutions replicated log dictionary problems tr virtual time discarding obsolete information replicated database system parallel discrete event simulation logical time distributed computing systems concerning size logical clocks distributed systems efficient implementation vector clocks logical time breadthfirst rollback spatially explicit simulations optimizing communication timewarp simulators wolf time clocks ordering events distributed system efficient solutions replicated log dictionary problems comparative analysis various time warp algorithms implemented warped simulation kernel ctr yi zeng wentong cai stephen j turner batch based cancellation rollback optimal cancellation scheme time warp simulations proceedings eighteenth workshop parallel distributed simulation may 1619 2004 kufstein austria nasser kalantery time warp connection oriented proceedings eighteenth workshop parallel distributed simulation may 1619 2004 kufstein austria malolan chetlur philip wilsey causality information fossil collection timewarp simulations proceedings 37th conference winter simulation december 0306 2006 monterey california hussam soliman ramadan throttled lazy cancellation time warp simulation proceedings 18th conference proceedings 18th iasted international conference modelling simulation p166171 may 30june 01 2007 montreal canada yi zeng wentong cai stephen j turner parallel distributed simulation modeling methods causal order based time warp tradeoff optimism proceedings 35th conference winter simulation driving innovation december 0710 2003 new orleans louisiana