framework expressing relationships multiple views requirements specification composite systems generally comprised heterogeneous components whose specifications developed many development participants requirements systems invariably elicited multiple perspectives overlap complement contradict furthermore requirements generally developed specified using multiple methods notations respectively therefore necessary express check relationships resultant specification fragments deploy multiple viewpoints hold partial requirements specifications described developed using different representation schemes development strategies discuss notion interviewpoint communication context viewpoints framework propose general model viewpoint interaction integration elaborate requirements expressing enacting interviewpoint relationshipsthe vehicles consistency checking inconsistency management finally though use simple fragments requirements specification method core illustrate various components work also outline number larger case studies used validate framework computerbased viewpoints support environment viewer also briefly described b introduction 11 motivation heterogeneity inevitable composite systems significant size single development process representation ieee transactions software engineering october 1994 sufficient development particularly true requirements engineering phase software development lifecycle requirements engineering encompasses activities ranging requirements analysis elicitation specification conflict resolution validation even single activity requirements elicitation likely involve multiple development participants hold multiple perspectives single domain heterogeneity representations processes poses challenging research problems integration 1 integration methods used specify system requirements 2 integration tools support methods 3 integration multiple specification fragments produced applying methods tools explicitly deploying views encapsulate partial specifications together development techniques produced framework place within problems integration outlined may addressed however difficulties expressing invoking applying relationships multiple views need resolved integration setting may achieved 12 views requirements engineering views vehicles separation concerns allow development participants address concerns criteria interest ignoring others unrelated earlier work 23 used term multiple perspectives problem describe class problems surrounding development composite systems 18 many development participants deploy sundry representation schemes use variety development strategies hold diverse domain knowledge also proposed objectbased framework deploying viewpoints within problems may tackled viewpoints framework serve separate concerns different developers different development techniques notations participants employ term viewpoint defined deployed variety settings software engineering particularly domain requirements engineering example structured analysis 50 viewpoint expresses interest aspect system core represents information processing entity kotonya sommerville 31 treat viewpoints service recipients whereas ainsworth et al 2 regard formal partial specifications leite makes distinction viewpoints proposes technique early validation viewpointbased requirements termed viewpoint resolution 36 viewpoints framework described paper generalises notion viewpoint manipulation composite system development viewpoints framework draw together notion actor knowledge source role agent notion view perspective held former framework organisational facilitating separation concerns structuring software development knowledge 13 scope paper michael jackson accurately points divided conquer must reunite rule 29 words decomposed system different components viewpoints necessary achieve level integration components specification viewpoints overlaps must identified complementary participants made interact cooperate contradictions resolved paper address notion interviewpoint communication vehicle viewpoint integration viewpoint interaction model present straddles method construction stage interviewpoint relationships expressed method application stage relationships enacted invoked checked illustrate model constructing part requirements specification method core 43 applying specify simple problem argue successful interviewpoint communication guided model development process holds key achieving integration heterogeneous possibly distributed setting thus need express relationships viewpoints enact relationships eg check consistency transfer information resolve conflicts necessary although examine application viewpoints requirements specification argue requirements engineering multiple perspectives multiparadigm specification 63 multiparadigm programming 40 62 facets generic multiple perspectives problem begin presenting overview ng organisational nature decentralised architecture next section describes method engineering process within viewpoint framework followed account requirements methods used develop requirements specifications context model viewpoint interaction presented illustrated using simple examples introduced preceding two sections review experiences using framework associated interaction model described includes account case studies automated tool support developed used respectively validate approach finally overlapping related research work presented conclusions drawn agenda research outlined uses term viewpoint part terminology substitute term agent place avoid clash nomenclature specification partial system description development history area concern development actions strategy process notation representation knowledge development process knowledge specification knowledge fig 1 five slots viewpoint 2 viewpoints define viewpoints loosely coupled l oca l l managed encapsulating partial representation knowledge development process knowledge specification knowledge system domain knowledge assigned five viewpoint slots fig 1 style slot representation scheme used viewpoint described work plan slot development actions process strategy viewpoint described domain slot identifies area concern viewpoint respect overall system development ie partial identifier label viewpoint pec slot describes specifies viewpoint domain notation described style slot developed using strategy described work plan slot work record slot development state history viewpoint specification maintained terms work plan actions performed vehicle traceability requirements may achieved form development rationale may recorded viewpoint template viewpoint type style work plan slots elaborated viewpoint template instantiated yields viewpoint elaborated produce specification particular domain viewpoint template therefore reusable description development technique notation process may instantiated many times produce many viewpoints software engineering method context configuration structured collection viewpoint templates relationships together constitute development techniques deployed method viewpoint owner responsible enacting process model viewpoint described work plan viewpoint owners normally always human development participants nonhuman viewpoint owner may example form intelligent tool expert system 3 method engineering like many methods requirements specification method core comprises number development stages deploy number different representation schemes stages used incrementally iteratively produce system requirements specification viewpoints terminology core method may described using number viewpoint templates since stage core deploys single simple representation scheme one way describe core would describe stage single viewpoint template figs 2 3 sample informal viewpoint template descriptions agent structuring tabular collection tc stages core respectively stages support respectively problem decomposition agent hierarchy agent agent attributes types values name icon string integer bitmap relation partofagent agent attributes types values icon bitmap assembly actions addagent removeagent connectagent agent partof disconnectagent agent partof inviewpoint check actions allagentsconnected nonameclashes interviewpoint check actions agent agent hierarchy must one viewpoint instantiated tc template viewpoint trigger actions leaf agent create new viewpoint instantiated tc template fig 2 informal description cores agent structuring viewpoint template elaboration tabular collection form see figs 5 6 next section examples viewpoints instantiated template 31 style slot simplicity convenience style slot template described terms objects relations attributes types values bnf description may appropriate textbased notations use dot separate left right relations objects attributes values thus term identifies value attribute1 object1 example process data flow diagram name attribute identify value attribute one would write processname similarly term identifies value attribute1 object1 object source attributes types values name icon string bitmap relation connectedtoobject object attributes types values icon bitmap object input destination action assembly actions addsource removesource connectedto disconnectsource input connectedto inviewpoint check actions allsources connectedtoinputs allinputsconnectedtoactions noactionsnameclashes interviewpoint check actions every source destination tabular collection diagram corresponding agent name agent hierarchy output produced one agent tabular collection diagram must consumed input tabular collection diagram another agent viewpoint trigger actions create viewpoint instantiated template one already exist attributes types values name icon string bitmap attributes types values name icon string bitmap attributes types values name icon string bitmap attributes types values name icon string bitmap fig 3 informal description cores tabular collection tc viewpoint template two viewpoints may independent nonoverlapping unrelated except method created requires viewpoints exist example method may require development viewpoint describing functional decomposition software system another viewpoint documenting financial resources available project two viewpoints may non overlapping existential relationship existence one depends way existence example z method requires z schema viewpoint associated textual description viewpoint two viewpoints may partially overlapping partial specification one related partial specification example core requires source agent tabular collection diagram named agent agent hierarchy two viewpoints may totally overlapping describe domain representation scheme may 1 require conflicts discrepancies inconsistencies eventually resolved two viewpoints made say thing 2 accept two viewpoints represent two different views domain eg different solutions problem require evaluation choice made fig 4 interviewpoint relationships shaded areas represent overlaps viewpoints relationship may also attribute eg label transition arrow state transition diagram identifies value r bu e1 object1 object2 particular values specification c f constants may also represented concatenating expressions enclosing single quotes example statetransition diagram switch state may identified transitionon offnamebuttonpress identifies transition buttonpress states 32 work plan slot describing work plan slot identify four generic categories development actions assembly actions basic actions required assemble construct specification representation scheme defined style slot thought collection basic editing actions one would expect case tool supporting viewpoint provide inviewpoint check actions actions required check viewpoint specification locally syntactically consistent syntactic checks partially define semantics viewpoints representation therefore define method designer decides well formed specification representation interviewpoint check actions actions required check consistency overlapping interacting specifications residing different viewpoints relationships viewpoints described interviewpoint rules make distinction intra template rules describe relationships viewpoints instantiated template intertemplate rules describe relationships viewpoints instantiated different templates however useful method engineering point view note different relationships may exist viewpoints general fig 4 since may impact upon way methods used example viewpoints use informal representations therefore relationships viewpoints difficult express concisely others much formal makes expressing relationships easier providing relationships exist identified method designer say two viewpoints deploy formal representations easier relate relating z 55 csp 28 example non trivial relating natural language text data flow diagrams key expressing relationships multiple viewpoints therefore based understanding representation schemes deployed identification areas overlap association particularly challenging describe interviewpoint relationships generic manner two viewpoint specifications related use representation styles different underlying data models schemas interviewpoint check actions however also use interviewpoint rules rans f orm information viewpoint specifications paper concentrates relationships express static semantics example apply semiformal representation schemes functional specifications contextsensitive aspects wellformedness viewpoints framework general may also used organise describe formal techniques dynamic semantics behaviour analysis example finally viewpoint trigger actions must performed order create new viewpoints ie instantiate viewpoint templates often thefly actions normally always performed consequence one development actions eg adding agent agent hierarchy trigger creation new viewpoint agent instantiated tabular collection template viewpoint trigger action may also regarded kind interviewpoint check action since scope beyond viewpoint performed see section 5 example work plans figs 2 3 show process models process descriptions may used guide viewpoint owners building viewpoint specifications using actions particular approach based decentralisation software development knowledge requires local viewpoint process models coordinate control development setting 16 46 precondition may used describe process models eg assembly actions spec assembly actions spec spec inviewpoint check actions interviewpoint check actions clearly however simple process model says construct partial specification means assembly actions perform checks time time interviewpoint consistency reached provide richer process models exploring ways deriving viewpoint specification state viewpoint work record specifying finergrain actions may performed viewpoint one identified states also constructed prototype implementation illustrates multiple decentralised process models interact coordinate consistency checking viewpoint specifications 37 course viewpoint work plan may deploy particular process modelling process programming 48 language elaborate individual specification development process greatly complicates viewpoint interaction currently addressed work thus variety process modelling languages may used visual software process language proposed 53 many others 22 definition multiple viewpoints process models way also allows individual viewpoint development processes modelled different levels granularity provide appropriate level method guidance different developers 46 process integration 41 however setting means integration multiple process models produce overall coherent development process remains problematic research area one technique integration proposed barghouti 5 based concurrency control mechanism developed cooperative software development environment believe viewpoint development process library world library borrowers administrator librarian v22 catalogue assembly actions inviewpoint check actions interviewpoint check actions viewpoint trigger actions process model agent structuring notation definition specification addlibrary world addlibrary add staff connectlibrary world library partof addborrower connectlibrary staff partof connectlibrary world borrower partof library world fig 5 sample viewpoint instantiated agent structuring viewpoint template describes domain library world terms agent hierarchy models partly described inconsistency handling rules specify act presence inconsistency 21 rules used drive development process within individual viewpoints therefore vehicles process integration generally method engineering viewpoints framework discussed length 47 4 method use requirements specification requirements method designed constructed may deployed specify system requirements problemspecific domainspecific viewpoints may created instantiating appropriate viewpoint templates viewpoint specifications developed following individual viewpoint work plans result development process configuration structured collection viewpoints together form total system requirements specification point development different viewpoint specifications may overlapping andor inconsistent tolerating inconsistency 4 fundamental viewpoints approach consistency checking conflict resolution necessarily performed matter course consistency checking may appropriate specific stages development lifecycle detection inconsistency may require immediate resolution left later action even resolved nature software development general requirements engineering particular contradictory requirements alternative design solutions commonplace approach consistency management echoed gabbay hunter 24 argue making inconsistency respectable develop logicbased framework inconsistency implies action fact outlined last section examined applicability inconsistency handling approach context viewpoint framework 21 see section 54 summary example first graphical stage core agent structuring identifies information processing entities agents problem domain arranges hierarchy relation child parent hierarchy child node partof parent node specifying computerbased library cataloguing system example root agent hierarchy might library world decomposed constituent agents may decomposed thus may develop viewpoint instantiated template domain library world specification shown fig 5 work record lists primitive work plan actions performed produce current specification actions may meaningfully annotated provide development rationale specification one may however wish record higher level specifier actions decompose backtrack implemented terms primitive operations souquires lvy 54 propose framework expressing incremental construction specification development rationale construction process point development inviewpoint actions may performed check specification viewpoint fig 5 conforms syntactic rules imposed representation style interviewpoint actions may also performed viewpoints created example yet performing viewpoint trigger actions hand causes instantiation tabular collection tc template one leaf agents agent hierarchy specified viewpoint trigger actions part work plan template fig 2 thus agent hierarchy fig 5 five viewpoints one leaf agent hierarchy containing blank specifications tables created may developed separately viewpoint owner enacts viewpoints individual work plan one tabular collection viewpoint borrower agent assembly actions performed shown fig 6 possible point perform viewpoints work plan actions one interviewpoint actions example checks every source destination tabular collection specification named agent shown agent hierarchy viewpoint check specified textually interviewpoint check actions part work plan tc template fig 3 check fails form conflict resolution strategy must employed order check succeed conflict resolution check particular implies either new agent must added agent hierarchy specification viewpoint inconsistent source destination must renamed removed specification tc viewpoint approaches conflict resolution distinguished inconsistency handling viewpoints context examined models conflict resolution proposed 15 17 treatment assembly actions inviewpoint check actions interviewpoint check actions viewpoint trigger actions process model specification addlibrary addborrower addpublication connectlibrary publication connectedto connectpublication borrow connectedto addborrow addreturn source input action output destination library publication borrow return library specification publication borrower tabular collection notation definition fig sample viewpoint instantiated tabular collection viewpoint template partially describes activities borrower terms tabular collection diagram however beyond scope paper although possible principle perform generic work plan actions anytime specification development viewpoint process model prescribe circumstances appropriate example would unreasonable cases perform interviewpoint checks two viewpoints inviewpoint consistency least one two viewpoints checked established 5 viewpoint integration heterogeneity notations processes specifications inevitably poses problems integration within viewpoints framework relationships viewpoints need expressed may used check consistency transfer transform information viewpoint specifications thus need define interviewpoint rules describe relationships specify may invoked applied activities straddle processes viewpointoriented method construction viewpointoriented requirements specification generic prescribe interviewpoint rules represented mechanisms used invoking applying shown schematically fig 7 interviewpoint rule definition interviewpoint rule invocation interviewpoint rule application viewpoint trigger action interviewpoint relationship holds destination viewpoint success fail inconsistency handling eg conflict resolution method engineering method use fig 7 model viewpoint integration activities labelled arrow indicates precondition next step performed 51 step 1 interviewpoint rule definition interviewpoint rules defined viewpoint plans thus describe relationships viewpoints instances yet created words describe relationships viewpoint templates types general vp vp vp source viewpoint rule reside vp destination viewpoint instantiated particular template relationship holds vp vp vp universally quantified indicate rule applies every viewpoint derived template rule defined vp instantiated template quantifier dropped since source viewpoints instantiated template contain rule broken lines fig 8a illustrate status interviewpoint rules definition stage model rules relate hypothetical viewpoints vp vp hypothetical relationship rules stage model refer viewpoint types templates rather actual instances viewpoints words express method designer decides relationships viewpoints instantiated particular viewpoint templates thus method designer expressing relationships two viewpoints fact stating viewpoints vp vp exist relationship holds inclusion interviewpoint rules individual templates maintains loose coupling local management viewpoint turn facilitates deployment viewpoints distributed environment step 2 invocation step 3 application rule holds fig 8 interpretation viewpoint integration various stages model broken line indicates viewpoint relation exist hold necessarily established yet consider existential quantifier general form interviewpoint rule say example wish write interviewpoint rule tabular collection stage core asserts every source tabular collection diagram must named agent agent hierarchy rule makes statement every source tabular collection diagram therefore defined viewpoint template describing tabular collection tc furthermore requires information defined agent structuring viewpoint template therefore require information outside boundaries viewpoint defined order get information thus required means identifying viewpoint information obtained means fy ng vp since prior knowledge viewpoints created specification one way identify viewpoint specifying template instantiated perhaps domain concerned thus viewpoint identified rule definition time tuple specifies template viewpoint instantiated specifies domain label given p denotes particular named domain denotes domain known template construction time denotes domain source viewpoint denotes different domain current viewpoint therefore general form interviewpoint rule may rewritten pa r l spec 1 describes partial specification viewpoint vp created template rule defined therefore require viewpoint identifier partia l spec2 describes partial specification viewpoint vp domain instantiated template denoted predicate vpt rule form asserts every partialspec1 exist least one partialspec2 relationship holds paper partialspec1 partialspec actually denote individual partial specification components rather partial specifications per se returning core rule wish define may written tc viewpoint template work plan follows rule states every name attribute source objects vp instantiated template rule resides equal value name attribute agent object vp instantiated template relating domain different source viewpoint domain similar rule may written assert every destination tabular collection diagram must named agent agent hierarchy rules expressing relationships viewpoints instantiated template may also written way take rule core asserts every output tabular collection diagram must input another tabular collection diagram another agent destination agent original input rule rule 1 fig may written connectedtod inputinputname destinationname denotes value particular named domain p many cases converse rule must also included destination viewpoint template rule may invoked applied either viewpoint converse rule case also applies rule 2 fig 9 every input source tabular collection diagram must produced output tabular collection diagram source agent connectedtosource connectedtooutput outputname ce name denotes value particular named domain p every rule core however valid converse eg every agent agent hierarchy necessarily named source destination tabular collection diagram core however require viewpoint template contain rule asserts every agent agent hierarchy must tabular viewpoint viewpoint domain x source input action output destination source input action output destination rule 2 rule 1 fig 9 example relationships two different tabular collection diagrams two different viewpoints b viewpoint contains rule 1 viewpoint b contains converse rule 2 rules described text collection diagram associated may written agent vptc agentname rule simply states every agent object new viewpoint instantiated tabular collection template concerned domain p whose value given agentname fact variation general form interviewpoint rules rule expresses existence relationship opposed agreement relationship rules demonstrate feasibility expressing relationships multiple viewpoints relationships identified interested reader referred 16 detailed account examples variety interviewpoint rules different methods particular use logical connectives express example patterns form may exist fact core also socalled indirect agents receive information therefore tabular collection diagrams associated ignore simplicity 52 step 2 interviewpoint rule invocation interviewpoint rules invoked owner viewpoint reside invocation time fig 8b interviewpoint rule asserts viewpoint vp exists rule invoked least one viewpoint vp exist viewpoint trigger action create must performed rule application step 3 may performed interviewpoint rule invocation step required ensuring two viewpoints consistency needs checked information transferred identified viewpoint process model defines interviewpoint rules invoked eg condition x holds vp check vps vp 46 discuss three approaches rule invocation constrained rules constantly invoked pragmatic rule invocation may turned user processoriented process model guides rules invocation 53 step 3 interviewpoint rule application interviewpoint rules defined step 1 express relationships partial specifications residing different viewpoints interviewpoint rule application process checking consistency two viewpoints whose consistency relationships expressed rules consistency checking two viewpoints requires interacting viewpoints engage communication protocol information either viewpoints exchanged compared distributed setting includes physical transfer information one viewpoint another typically transformation information form understood viewpoint mechanism interaction therefore also needs specified nature communication protocol however depends requirements goals interaction thus example communication protocol nodes wide area network differs cooperative intelligent agents interviewpoint rules traditional software engineering methods deploy require form pattern matching check values certain types objects related simple binary relations eg example frequently necessary check string values various named objects preserved integer values within certain numerical limits rules complex relationships partial specifications simply comparison typed values instead rules express correspondence different types objects different specifications avoid define rules scratch method definition also possible define relationships separately form computerbased tool example ideally method designer would provided predefined library relationships hisher disposal adapted customised course method engineer designing software development method also choose many simple viewpoint templates deploy simple representation schemes thereby simplifying relationships need defined different templates viewpoint integration model interviewpoint rule application takes method users two general stages application interviewpoint rule two viewpoints vp vp exist yet known whether relationship holds fig 8c successful application rule directly conflict resolution say results valid relationship holds two specific viewpoints fig 8d confirmation rule holds two viewpoints incremental step towards achieving greater viewpoint integration pass stages viewpoints need exchange information vp needs obtain partial specification vp necessary transform form understand manipulate pattern matching example performed relationship fails hold vp needs made aware failure ie another transfer form conflict resolution needs performed typical software engineering time constraints transfers may insignificant viewpoints deployed realtime distributed environment following clientserver model example traditional problems communication load overhead high rate change fetched server information may become much significant 52 need considered design interviewpoint communication protocol identify two modes application interviewpoint rule check mode question asked relation hold vp consequently either holds inconsistency handling may performed make eventually hold transfer mode function f vp applied transfer transform information vp vp relation hold function f maps objects relations one viewpoint corresponding objects relations another key observation expresses onetoone relationship viewpoints information translated one viewpoint another directly without need intermediary global representation invoked interviewpoint rule normally applied check mode transfer mode may used initially later rule fails information transfers viewpoint specifications may therefore used vehicles conflict resolution although effectiveness resolution depend granularity transferred information nature conflict inconsistency discuss notions conflicts inconsistencies detail 16 observe inconsistency result breaking rule whereas conflict denotes interference one partys goals actions another conflicts course may manifest inconsistencies clearly infrastructure viewpoints needs extended handle various transfers transformations occur typical interviewpoint communication one modification might addition viewpoint interfaces provide information hiding transformation services interfaces may also provide mailboxes information viewpoints may posted rather forcibly transferred destination viewpoint specifications left discretion individual viewpoint owners incorporate information andor guidance residing viewpoint mailboxes local viewpoint specifications 54 inconsistency handling worth reiterating approach consistency management viewpoints framework based philosophy inconsistency management believe maintaining consistency multiperspective software development always possible fact argue times even desirable since unnecessarily constrain development process lead loss important information indeed real world domain requirements engineers forces us work inconsistencies therefore find ways formalise usually informal ways responding eradicating inconsistencies inconsistency handling rules specify act presence inconsistency explicitly specified approach inconsistency handling setting discussed length 21 fig 10 summarises experimental inconsistency handling approach partial specification knowledge viewpoint translated first order classical logical inconsistencies identified temporal logic metalevel rules combined inconsistencies identified specify inconsistency handling actions viewpoint 1 knowledge viewpoint 2 knowledge translation check consistency logical representation viewpoints interviewpoint specification information inconsistent data meta level inconsistency handling inconsistency fig 10 inconsistency handling viewpoints framework selected knowledge interacting viewpoints translated logical formulae used detect identify inconsistencies metalevel rules used act upon inconsistencies course claiming classical logic universal formalism two representations may translated rather argue two partial specifications common representation may found used detect identify inconsistencies 55 structural consequences interviewpoint rule definition invocation application may used provide interesting structural information methods processes specifications respectively viewpoints framework viewpoint templates interviewpoint rules defined within step 1 structure method may observed fig 11 template 3 template 4 fig 11 method structure method configuration viewpoint templates related interviewpoint rules connecting arrows denote interviewpoint rules snapshot project step 2 hand shows viewpoints already created project far indicates viewpoints may created particular configuration viewpoints snapshot therefore provides methodspecific structural view development p r oce fig 12 viewpoint 2 viewpoint 3 viewpoint 4 viewpoint 5 viewpoint 1 fig 12 viewpointoriented development process point systems development number viewpoints development viewpoints need created point broken lines denote viewpoints yet created directly reachable source viewpoint finally end step 3 configuration viewpoints created relationships checked established configuration viewpoints stage therefore structural view system specification particular point time fig 13 fig 13 also illustrates potential practical problems scalingup viewpoints framework cope large numbers viewpoints kramer finkelstein 32 propose use structured configurations cope inevitable complexity thus envisage use configuration management viewpoints act organisational tools grouping together closely related viewpoints 16 viewpoint 1 viewpoint 2 viewpoint 3 viewpoint 5 system specification viewpoint 4 viewpoint 6 specification configuration structure arrows denote interviewpoint relationships hold two connected viewpoints broken arrows denote relationships yet hold 6 experiences validate demonstrate approach number case studies computerbased tools developed outline description follows related issues including conflict resolution 17 negotiation dialogue 20 configuration programming 32 also examined setting 61 tool support generic computerbased prototype environment called viewer 45 built objectworkssmalltalk support viewpoints framework viewer fig 14 runs variety platforms eg apple macintosh pcmswindows unixxwindows provides tools method construction deployment outlined sections 3 4 paper number simple graphical diagramming techniques hierarchical structuring tabular data flow forms described viewpoint templates supported case tools tools partially generated viewpoint template descriptions using viewers metacase capabilities development actions automatically added viewpoint work records may annotated individually provide additional rationale explanation development actions annotations consistency checking results annotated work record automatically fig 14 startup window viewer method designer button invokes template browser supports method engineering activities described section 3 method use button invokes tools creating developing managing multiple viewpoints viewer also extended variety ways explore viewpoint interaction integration outlined section 5 particular various protocols interviewpoint consistency checking inconsistency handling implemented 35 57 although interviewpoint rules cases hardcoded viewer implementations interviewpoint consistency checking based experiences number related projects butcher 7 implemented model interviewpoint communication dialogue smalltalkbased tool called icdc also constructed simple toolset called coredemo support part core method investigated several types consistency checks information transfers cores different stages 43 graubmann 26 27 constructed tightly integrated toolset support viewpoint templates describing variant petri nets 25 viewpoints developed toolset managed hypertextbased environment called hyperview 26 continued work variety communication models implementations providing us valuable experience expression enactment consistency checks information transfers many partial specifications thus example able derive general form rules described section 51 reverseengineering hardcoded checks designed yet implement extension v ewer fully support model viewpoint integration described paper particular use vehicle experimenting variety interviewpoint communication protocols however academic industrial experiences using viewer encouraging least demonstrated proofofconcept viewpointsbased approach 62 case studies also used organisational structuring principles viewpoints framework number case studies various sizes 35 entire core method described using viewpoint templates viewer 57 constructive design approach cda 33 development distributed systems also developed supported extension viewer cda case study particularly illuminating already specialpurpose tool 34 supported cda method maintained consistency views times approach tolerating inconsistency using viewer support cda proved comparably effective collaborative case study hewlettpackard research labs uk 3 tested feasibility approach hps newly developed objectoriented method fusion 10 case study provided us feedback viewpoints framework hp feedback documentation structuring capabilities method siemens munich germany also used viewpoints framework develop petri netsbased method developed special purpose petri nets editor simulator based framework hyperview tool mentioned section 61 finally developed method called vscs 8 adapted object modelling technique omt 51 objective producing formal specifications modal action logic 11 method used partly specify automatic teller machine demonstrated feasibility approach 8 related work work number software engineering fields made mark viewpoints framework analogies viewpoints may found multidatabases 6 including work interoperable heterogeneous multidatabase systems 1 38 multidatabases deploy many heterogeneous possibly distributed databases based one data model schema many problems checking consistency databases therefore identical problems checking integrating multiple viewpoint representation styles specifications developed styles research areas method tool integration integrated project support environments also tackles many issues surrounding integration viewpoints setting eg 9 30 39 59 issues include process modelling integrated case tool support integration models however rely controlled transfer information number databases 56 objects related via interdatabase relationships 13 furthermore system specification multiple perspectives investigated various guises number authors doerry et al 14 propose model composite system design based multiple cooperatinginteracting agents individual behaviours goals dardenne et al 12 describe goaldirected approach composite system development feather 19 suggests using many parallel evolutionary transformations may merged replaying sequentially work program transformation 60 61 provides additional vehicle tackling consistency checks information transfers different viewpoints robinson 49 proposes multiple perspectives integration architecture part model specification design meyers reiss 40 study interperspective cf interviewpoint communication propose development single canonical representation software specification finally niskier et al 44 propose pluralistic know l edgebased approach specification style favour using multiple overlapping views elaborated using multiple representation schemes however implementation prisma tightly couples fixed views uses common centralised bottlenecked data structure express consistency checks 9 conclusions work viewpoints facilitate partitioning prob l em doma n oose l ycoup l ed distributable objects encapsulate partial specifications described different notations locally developed managed according different work plans although representation development specification knowledge bundled object facilitate local management distribution separated within single viewpoint slots facilitate individual manipulation enhance tailorability reusability tolerating coexistence multiple heterogeneous viewpoints specify system requirements brings fore problems integration include integration specification fragments described using different notations integration methods tools used develop descriptions paper explored use interviewpoint rules express relationships different viewpoints rules defined method construction invoked applied specification development frequently define regions overlap pairs viewpoints thus identify redundant perhaps desirable information moreover rules describe syntactic relations partial specifications different viewpoints may also view rules definitions semantic relations partial specifications work still needed however describe domainspecific knowledge rules eg conceptual ontological relationships 58 one avenue investigation may develop role viewpoint owners providing domain knowledge general interviewpoint rules play number important roles viewpointoriented requirements engineering first describe relationships different development techniques form methods context vehicle method integration second describe relationships different tools support constituent development techniques form methods context vehicle tool integration third describe relationships various specification fragments found different viewpoint specifications context may used check consistency partial specifications transfer transform information one viewpoint specification another finally viewpoints may also used represent development participants therefore interviewpoint rules describe protocols interaction behaviour participants context provide infrastructure computersupported cooperative work cscw paper concentrated problem expressing interviewpoint rules purposes interviewpoint consistency checking tried describe rules independent mechanisms communication protocols deployed invoke apply fact also said little notation describing actual relations viewpoints need explored looking complex relations demonstrated examples namely agreement entailment nevertheless believe typical many software engineering methods believe rules may alternative mode application consistency checking namely transfer mode analogous prolog rules example may succeed fail generate solutions satisfy rule mechanisms using modes application viewpoints setting currently investigated believe transfer mode interviewpoint rule application deals issue language translation framework work needed finally yet tested framework large industrial setting feedback case studies performed viewer prototype encouraging purely organisational point view viewpoints framework proved useful understanding way methods constructed used viewpoints also served vehicles reducing complexity software development heterogeneous composite systems simple application separation concerns principle thus number software engineering problems remain explored believe framework least clarified research agenda particular allowed us envisage consequences radical decentralisation software engineering knowledge use many simple distributed pairwise rules viewpoints whose invocation application coordinated viewpoint process models conventional proved useful practicable acknowledgements would like gratefully acknowledge extensive constructive comments axel van lamsweerde earlier version paper thanks also due steve easterbrook anonymous reviewers feedback michael goedicke contributions viewpoints framework work partly funded uk department trade industry dti part esf project earlier version paper appeared proceedings 15th international conference software engineering ieee cs press r pegasus heterogeneous multidatabase system viewpoint specification z using viewpoints support fusion objectoriented method tolerating inconsistency supporting cooperation marvel processcentered environment proceedings acm sigsoft symposium software development environments taxonomy current issues multidatabase systems implementation dialogue smalltalk80 vscs object oriented method requirements elicitation formalisation mechanism environment integration formal requirements specification forest project goaldirected requirements acquisition damolkles database system design applications past present future model composite system design domain modelling hierarchies alternative viewpoints coordinating distributed viewpoints anatomy consistency check elicitation requirements multiple perspectives language support specification development composite systems constructing specifications combining parallel elaborations multiparty specification inconsistency handling multiperspective specifications software process modelling technology viewpoints framework integrating multiple perspectives system development making inconsistency respectable logical framework inconsistency reasoning part 1 position paper definition spec nets hyperview tool standard methods petri net method viewpoints hyperview tool communicating sequential processes complexities computerbased systems implications system development strategies integrating case environments viewpoints requirements definition configurable framework method tool integration constructive approach design distributed systems system architects assistant design construction distributed systems core viewer requirements validation viewpoint resolution process modelling viewer interoperability multiple autonomous databases difficulties integrating multiview development systems system multiparadigm development software systems process integration case environments core method controlled requirements expression acquisition environment pluralistic knowledgebased approach software specification viewpoints vehicle method tool integration finegrain process modelling method engineering multiperspective software development software processes software integrating multiple specifications using domain goals structured analysis sa language communicating agenda research largescale distributed data repositories description specification developments z notation reference manual typing object management system oms constructive viewer ontological model information system tool integration software engineering environments local formalisms widening spectrum widespectrum languages integrating syntaxes associated semantics compositional approach multiparadigm programming conjunction composition tr communicating sequential processes language support specification development composite systems local formalisms widening spectrum widespectrum languages software processes software constructing specifications combining parallel elaborations z notation reference manual multiparty specification integrating multiple specifications using domain goals mechanism environment integration ontological model information system interoperability multiple autonomous databases damokles database system design applications past present future tool integration software engineering environments typing object management system oms configurable framework method tool integration pegasus heterogeneous multidatabase system requirements validation viewpoint resolution visual software process language objectoriented modeling design taxonomy current issues multidatabase systems supporting cooperation marvel processcentered sde goaldirected requirements acquisition conjunction composition viewpoints requirements definition objectoriented development software process modelling technology tolerating inconsistency compositional approach multiparadigm programming difficulties integrating multiview development systems process integration case environments strategies integrating case environments inconsistency handling multiperspective specifications making inconsistency respectable pluralistic knowledgebased approach software specification agenda research largescale distributed data repositories acquisitionenvironment core method controlled requirement specification finegrain process modelling system multiparadigm development software systems model composite system design ctr bashar nuseibeh steve easterbrook alessandra russo leveraging inconsistency software development computer v33 n4 p2429 april 2000 bashar nuseibeh crosscutting requirements proceedings 3rd international conference aspectoriented software development p34 march 2224 2004 lancaster uk peri tarr william harrison harold ossher anthony finkelstein bashar nuseibeh dewayne perry workshop multidimensional separation concerns software engineering workshop session proceedings 22nd international conference software engineering p809810 june 0411 2000 limerick ireland denis avrilionis pierreyves cunin christer fernstrm opsis view mechanism software processes supports evolution reuse proceedings 18th international conference software engineering p3847 march 2529 1996 berlin germany boumediene belkhouche cuauhtmoc lemus olalde multiple view analysis designs joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p159161 october 1618 1996 san francisco california united states ana beln barragns martnez jos j pazos arias khgrsctlmus formal methodology evolve multiperspective software requirements specifications proceedings 26th international conference software engineering p7274 may 2328 2004 michael huth mathematics exploration requirements acm sigcse bulletin v36 n2 june 2004 lee proxy viewpoints modelbased requirements engineering proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain bashar nuseibeh towards framework managing inconsistency multiple views joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p184186 october 1618 1996 san francisco california united states harold ossher peri tarr using multidimensional separation concerns reshape evolving software communications acm v44 n10 p4350 oct 2001 harry delugach approach conceptual feedback multiple viewed software requirements modeling joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p242246 october 1618 1996 san francisco california united states andrs silva requirements domain specifications viewpointbased approach requirements engineering proceedings 24th international conference software engineering may 1925 2002 orlando florida christian piwetz michael goedicke module concept viewpoints joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p247251 october 1618 1996 san francisco california united states jaelson f b castro christian j gautreau marco toranzo tool support requirements formalisation joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p202206 october 1618 1996 san francisco california united states lee david c rine missing requirements relationship discovery proxy viewpoints model proceedings 2004 acm symposium applied computing march 1417 2004 nicosia cyprus n maiden reuseoriented requirements engineering nature acm sigsoft software engineering notes v20 n3 p9093 july 1995 n maiden g sutcliffe computational mechanism parallel problem decomposition requirements engineering proceedings 8th international workshop software specification design p159 march 2223 1996 n robinson automated assistance conflict resolution multiple perspective systems analysis operation joint proceedings second international software architecture workshop isaw2 international workshop multiple perspectives software development viewpoints 96 sigsoft 96 workshops p197201 october 1618 1996 san francisco california united states aditya k ghose formal tools managing inconsistency change proceedings 10th international workshop software specification design p171 november 0507 2000 juha savolainen juha kuusela violatility analysis framework product lines acm sigsoft software engineering notes v26 n3 p133141 may 2001 peri tarr harold ossher william harrison stanley sutton jr peri tarr william harrison harold ossher anthony finkelstein bashar nuseibeh dewayne perry workshop multidimensional separation concerns software engineering acm sigsoft software engineering notes v26 n1 january 2001 marco lormans arie van deursen reconstructing requirements coverage views design test using traceability recovery via lsi proceedings 3rd international workshop traceability emerging forms software engineering november 0808 2005 long beach california shiva nejati marsha chechik lets agree disagree proceedings 20th ieeeacm international conference automated software engineering november 0711 2005 long beach ca usa jing liu jin song dong jing sun trmcs tcoz proceedings 10th international workshop software specification design p63 november 0507 2000 sudha ram vijay khatri comprehensive framework modeling setbased business rules conceptual database design information systems v30 n2 p89118 april 2005 annie antn colin potts use goals surface requirements evolving systems proceedings 20th international conference software engineering p157166 april 1925 1998 kyoto japan pradipta k sarkar jacob l cybulski analysis cultural conflict development webenabled information systems ecommerce cultural values idea group publishing hershey pa n robinson slav volkov metamodel restructuring stakeholder requirements proceedings 19th international conference software engineering p140149 may 1723 1997 boston massachusetts united states bashar nuseibeh managing inconsistency software development proceedings 8th international workshop software specification design p164 march 2223 1996 ulf leonhardt jeff kramer bashar nuseibeh decentralised process enactment multiperspective development environment proceedings 17th international conference software engineering p255264 april 2428 1995 seattle washington united states george spanoudakis anthony finkelstein reconciling requirements method managing interference inconsistency conflict annals software engineering 3 p433457 1997 ian sommerville pete sawyer viewpoints principles problems practical approach requirements engineering annals software engineering 3 p101130 1997 pamela zave classification research efforts requirements engineering acm computing surveys csur v29 n4 p315321 dec 1997 randall janka linda wills lewis b baumstark jr virtual benchmarking model continuity prototyping embedded multiprocessor signal processing systems ieee transactions software engineering v28 n9 p832846 september 2002 peri tarr lori clarke consistency management complex applications proceedings 20th international conference software engineering p230239 april 1925 1998 kyoto japan jeff gray ted bapty sandeep neema douglas c schmidt aniruddha gokhale balachandran natarajan approach supporting aspectoriented domain modeling proceedings second international conference generative programming component engineering p151168 september 2225 2003 erfurt germany luciano baresi alessandro orso mauro pezz introducing formal specification methods industrial practice proceedings 19th international conference software engineering p5666 may 1723 1997 boston massachusetts united states jan hendrik hausmann reiko heckel gabi taentzer detection conflicting functional requirements use casedriven approach static analysis technique based graph transformation proceedings 24th international conference software engineering may 1925 2002 orlando florida shiva nejati formal support merging negotiation proceedings 20th ieeeacm international conference automated software engineering november 0711 2005 long beach ca usa morten hertzum smallscale classification schemes field study requirements engineering computer supported cooperative work v13 n1 p3561 2004 peter haumer klaus pohl klaus weidenhaupt requirements elicitation validation real world scenes ieee transactions software engineering v24 n12 p10361054 december 1998 nenad medvidovic paul grnbacher alexander egyed barry w boehm bridging models across software lifecycle journal systems software v68 n3 p199215 15 december jonathan lee jongyih kuo new approach requirements tradeoff analysis complex systems ieee transactions knowledge data engineering v10 n4 p551562 july 1998 javier andrade juan ares rafael garca juan pazos santiago rodrguez andrs silva methodological framework viewpointoriented conceptual modeling ieee transactions software engineering v30 n5 p282294 may 2004 stephan herrmann mira mezini pirol case study multidimensional separation concerns software engineering environments acm sigplan notices v35 n10 p188207 oct 2000 daniela rosca sol greenspan chris wild enterprise modeling decisionsupport automating business rules lifecycle automated software engineering v9 n4 p361404 october 2002 bashar nuseibeh jeff kramer anthony finkelstein viewpoints meaningful relationships difficult proceedings 25th international conference software engineering may 0310 2003 portland oregon c francalanci fuggetta integrating information requirements along processes survey research directions acm sigsoft software engineering notes v22 n1 p6874 jan 1997 ian sommerville pete sawyer stephen viller managing process inconsistency using viewpoints ieee transactions software engineering v25 n6 p784799 november 1999 harold ossher william harrison peri tarr software engineering tools environments roadmap proceedings conference future software engineering p261277 june 0411 2000 limerick ireland axel van lamsweerde emmanual letier robert darimont managing conflicts goaldriven requirements engineering ieee transactions software engineering v24 n11 p908926 november 1998 michael r huth radha jagadeesan david schmidt domain equation refinement partial systems mathematical structures computer science v14 n4 p469505 august 2004 anthony hunter bashar nuseibeh managing inconsistent specifications reasoning analysis action acm transactions software engineering methodology tosem v7 n4 p335367 oct 1998 hong zhu lingzi jin dan diaper ganghong bai software requirements validation via task analysis journal systems software v61 n2 p145169 march 2002 n robinson suzanne pawlowski managing requirements inconsistency development goal monitors ieee transactions software engineering v25 n6 p816835 november 1999 axel van lamsweerde laurent willemet inferring declarative requirements specifications operational scenarios ieee transactions software engineering v24 n12 p10891114 december 1998 bashar nuseibeh steve easterbrook requirements engineering roadmap proceedings conference future software engineering p3546 june 0411 2000 limerick ireland axel van lamsweerde requirements engineering year 00 research perspective proceedings 22nd international conference software engineering p519 june 0411 2000 limerick ireland axel van lamsweerde formal specification roadmap proceedings conference future software engineering p147159 june 0411 2000 limerick ireland n robinson suzanne pawlowski vecheslav volkov requirements interaction management acm computing surveys csur v35 n2 p132190 june