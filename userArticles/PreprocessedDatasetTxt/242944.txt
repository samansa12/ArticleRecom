approximate minimum degree ordering algorithm approximate minimum degree amd ordering algorithm preordering symmetric sparse matrix prior numerical factorization presented use techniques based quotient graph matrix factorization allow us obtain computationally cheap bounds minimum degree show bounds often equal actual degree resulting algorithm typically much faster previous minimum degree ordering algorithms produces results comparable quality best orderings minimum degree algorithms b introduction solving large sparse symmetric linear systems common precede numerical factorization symmetric reordering reordering chosen pivoting diagonal order resulting permuted matrix pap produces much less fillin work computing factors pivoting diagonal original order reordering computed using information matrix structure without taking account numerical values may stable general matrices however matrix positivedefinite 21 cholesky factorization safely used technique preceding numerical factorization symbolic analysis also extended unsymmetric systems although numerical factorization phase must allow subsequent numerical pivoting 1 2 16 goal preordering find permutation matrix p subsequent factorization least fillin unfortunately problem npcomplete 31 heuristics used minimum degree ordering algorithm one widely used heuristics since produces factors relatively low fillin wide range matrices algorithm received much attention past three decades algorithm symmetric analogue markowitz method 26 first proposed tinney walker 30 algorithm s2 rose 27 28 developed graph theoretical model tinney walkers algorithm renamed minimum degree algorithm since performs pivot selection selecting graph node minimum degree later implementations dramatically improved time memory requirements tinney walkers method maintaining basic idea selecting node set nodes minimum degree improvements reduced memory complexity algorithm operate within storage original matrix reduced amount work needed keep track degrees nodes graph computationally intensive part computer information sciences department university florida gainesville florida usa phone 904 3921481 email daviscisufledu support project provided national science foundation asc9111263 dms9223088 portions work supported postdoctoral grant cerfacs enseeihtirit toulouse france email amestoyenseeihtfr z rutherford appleton laboratory chilton didcot oxon 0x11 0qx england european center research advanced training scientific computation cerfacs toulouse france email isdletterboxrlacuk p amestoy davis duff algorithm work includes duff reid 10 13 14 15 george mcintyre 23 eisenstat gursky schultz sherman 17 18 george liu 19 20 21 22 liu 25 recently several researchers relaxed heuristic computing upper bounds degrees rather exact degrees selecting node minimum upper bound degree work includes gilbert moler schreiber 24 davis duff 7 8 davis duff use degree bounds unsymmetricpattern multifrontal method umfpack unsymmetric markowitzstyle algorithm paper describe approximate minimum degree ordering algorithm based symmetric analogue degree bounds used umfpack section 2 presents original minimum degree algorithm tinney walker context graph model rose section 3 discusses quotient graph element graph model use model reduce time taken algorithm context present notation quotient graph present small example matrix graphs use notation describe approximate degree bounds section 4 approximate minimum degree amd algorithm time complexity presented section 5 section 6 first analyse performance accuracy approximate degree bounds set test matrices wide range disciplines amd algorithm compared established codes compute minimum degree orderings 2 elimination graphs nonzero pattern symmetric nbyn matrix represented graph g ng ij 6 0 since symmetric g 0 undirected elimination graph g describes nonzero pattern submatrix still factorized first k pivots chosen undirected since matrix remains symmetric factorized step k graph g k depends g kgamma1 selection kth pivot find g k kth pivot node p selected v kgamma1 edges added e kgamma1 make nodes adjacent p g kgamma1 clique fully connected subgraph addition edges fillin means cannot know storage requirements advance edges added correspond fillin caused kth step factorization fillin nonzero entry l ij zero pivot node p incident edges removed graph g kgamma1 yield graph g k let adj g ki denote set nodes adjacent graph g k throughout paper use superscript k denote graph set structure obtained first k pivots chosen simplicity drop superscript context clear minimum degree algorithm selects node p kth pivot degree p p j jadj g kgamma1 pj minimized jj denotes size set number nonzeros matrix minimum degree algorithm nonoptimal greedy heuristic reducing number new edges fillins introduced factorization already noted optimal solution npcomplete 31 minimizing degree algorithm minimizes upper bound fillin caused kth pivot selecting p pivot creates 2 new edges g 3 quotient graphs contrast elimination graph quotient graph models factorization using amount storage never exceeds storage original graph g 0 21 quotient graph also referred generalized element model 13 14 15 29 important component quotient graph clique particularly economic structure since clique represented list members rather list edges clique following generalized element model refer nodes removed elimination graph elements george liu refer eliminated nodes use term variable refer uneliminated nodes quotient graph g implicitly represents elimination graph g k g clarity drop superscript k following nodes g consist variables set v elements set v edges divided two sets edges variables e v theta v variables elements edges elements since removed element absorption sets v 0 e 0 empty use following set notation e l describe quotient graph model approximate degree bounds let set variables adjacent variable g let e set elements adjacent variable g refer e element list variable v set refers subset nonzero entries row original matrix thus notation 0 let l e denote set variables adjacent element e g e element v define edges e e quotient graph represented explicitly sets variable g sets l e element g use l denote three sets containing respectively variables elements e george liu 21 show quotient graph takes storage original graph ja quotient graph g elimination graph g closely related variable g also variable g n standard set subtraction operator variable p selected kth pivot element p formed variable p removed v added v set l using equation 31 set l p represents permuted nonzero pattern kth column l thus notation l 2 l p p kth pivot variable become mth pivot k entry lmk nonzero equation 31 implies l e n fpg l p elements e adjacent variable p means variables adjacent element e adjacent element p elements 4 p amestoy davis duff fig 31 elimination graph quotient graph matrix first three steps45810758104581013692136921369273692357108357108357108357108458102 g 1g elimination graph b quotient graph c factors active submatrix longer needed absorbed new element p deleted 15 reference replaced reference new element p new element p added element lists e variables adjacent element p absorbed removed element lists sets p e p l e e e p deleted finally entry j j l p redundant deleted set thus disjoint set l e words k pattern entries row modified steps 1 k cholesky factorization pap net result new graph g takes less storage kth pivot selected 31 quotientgraph example illustrate sequence elimination graphs quotient graphs 10by10 sparse matrix figures 31 32 example ordered minimum degree algorithm recommends pivoting diagonal natural order permutation matrix identity figures 31 32 variables elements shown thinlined heavylined circles respectively matrices figures diagonal entries numbered unmodified original nonzero entries entries shown solid squares solid squares row form set variables current unabsorbed elements sets indicated solid circles columns l corresponding unabsorbed fig 32 elimination graph quotient graph matrix steps 4 736925810 g 6 elimination graph c factors active submatrix b quotient graph elements solid circles row form set e entries correspond edges quotient graph shown theta figure 31 shows elimination graph quotient graph matrix prior elimination left column first three steps left right figure 32 continues example next four steps consider transformation graph g 2 graph g 3 variable 3 selected pivot simple case equation 31 new element 3 represents pairwise adjacency variables 5 6 7 explicit edge 57 redundant deleted 5 7 also consider transformation graph g 4 graph g 5 variable 5 selected pivot set 5 empty 3g following equation 31 pattern column 5 l excluding diagonal since new element 5 implies variables 6 7 9 pairwise adjacent elements 2 3 add information graph removed absorbed element 5 additionally edge 7 redundant removed 7 6 p amestoy davis duff 9 g 4 transformations g 5 new element g 5 32 indistinguishable variables external degree two variables indistinguishable g adj g degree one selected pivot selected j selected next without causing additional fillin selecting j together called mass elimination 23 variables j replaced g supervariable containing j labeled principal variable say 13 14 15 variables supervariables called simple variables practice new supervariables constructed step k j l p p pivot selected step k addition rather checking graph g indistinguishability use quotient graph g two variables j found indistinguishable adj g comparison faster determining two variables indistinguishable g may miss identifications although indistinguishability g implies indistinguishability g reverse true denote set simple variables supervariable principal variable define simple variable p selected pivot kth step variables p eliminated use supervariables greatly reduces number degree computations performed costly part algorithm nonprincipal variables incident edges removed quotient graph data structure detected set notation l refers either set supervariables variables represented supervariables depending context degree computations used representing elimination graphs sets refer variables otherwise refer supervariables figure 32 detected supervariables circled dashed lines nonprincipal variables left inside dashed supervariables however removed quotient graph last quotient graph figure 32 represents selection pivots 7 8 9 thus right column figure depicts g 7 g 9 matrix ninth pivot step external degree principal variable since set disjoint set l e fillins occur variables selected pivots refer true degree variable selecting pivot minimum external degree tends produce better ordering selecting pivot minimum true degree 25 also see section 62 algorithm 1 minimum degree algorithm based quotient graph n end k n mass elimination select variable minimizes p 2 l p remove redundant entries element absorption compute external degree end supervariable detection pairs found via hash function pair j 2 l p j indistinguishable remove supervariable j end convert variable p element p 33 quotientgraphbased minimum degree algorithm minimum degree algorithm based quotient graph shown algorithm 1 includes element absorption mass elimination supervariables external degrees super variable detection simplified computing hash function variable pairs variables need compared 3 algorithm 1 include two 8 p amestoy davis duff important features lius multiple minimum degree algorithm mmd incomplete update 17 18 multiple elimination 25 multiple elimination independent set pivots minimum degree selected degrees updated variable adjacent two pivot elements degree computed variable j outmatched adj g adj g j incomplete degree update degree update outmatched variable j avoided variable selected pivot two features reduce amount work needed degree computation mmd discuss relationship amd algorithm next section time taken compute using equation 32 quotientgraphbased minimum degree algorithm omegagamma jadj g kij variables simple 1 degree computation costly part minimum degree algorithm supervariables present time taken best case proportional degree variable compressed elimination graph nonprincipal variables incident edges removed 4 approximate degree discussed data structures standard minimum degree implementations consider approximation minimum degree indicate lower complexity assume p kth pivot compute bounds supervariables computing exact external degree approximate minimum degree algorithm amd computes upper bound 7 8 first two terms n gamma k size active submatrix worst case fillin usually tight third term equation 41 algorithm 2 computes jl e n l p j elements e entire quotient graph set l e splits two disjoint subsets external subset l e n l p internal subset scans element e term initialized jl e j decremented variable internal subset l e l p end algorithm 2 scan element e term less zero combining two cases obtain ae 0 oe 1 asymptotic complexity notation defined 6 write exist positive constants c 1 c 2 n 0 similarly exist positive constants c n 0 0 cgn fn n exist positive constants c n 0 0 fn cgn algorithm 2 computation jl e n assume supervariable 2 l p element e end end algorithm 2 followed second loop compute upper bound degree supervariable 2 l p using equations 41 42 total time algorithm 2 second loop compute upper bound degrees takes time thus equal total asymptotic time multiple elimination 25 improves minimumdegree algorithm updating degree variable set independent pivots incomplete degree update 17 18 skips degree update outmatched variables cannot take full advantage incomplete degree update since avoids degree update supervariables adjacent pivot element technique algorithm 2 must scan element lists supervariables l p degree update one supervariables skipped element list must still scanned external subset terms computed degree update supervariables l p advantage multiple elimination incomplete degree update would skip second loop computes upper bound degrees outmatched variables supervariables degree already computed total time equation 43 amortized across computation supervariables time taken compute thetajadj g kij variables simple computing bound takes time proportional degree variable quotient graph g much faster time taken compute exact external degree see equation 33 41 accuracy approximate degrees gilbert moler schreiber 24 also use approximate external degrees compute time degree bound notation bound b p amestoy davis duff since many pivotal variables adjacent two fewer elements selected ashcraft eisenstat 4 suggested combination b e ae je computing e takes time b except je 2 case takes oja time compute e whereas computing b takes thetaja yale sparse matrix package 17 jl e n l p j term case computed scanning l e used compute 2 l p pg technique also used compute e thus time compute e oja theorem 1 relationship external degree three approximate degree bounds equality inequality 2 finally inequality 2 proof bound b equal exact degree variable adjacent one element je 1 accuracy bound unaffected size since entries removed fall within pattern l element thus one element current element p say bound b tight je j two current element p prior element e say bound b counts entries set l e overestimate possible even likely case variable j exists adjacent e p combined definition e 2 bound exact reason b exact je j two entry element l since redundant entries removed entry l p appear external subset l e n l p thus entry counted twice 2 finally consider b 2 since degree bounds used computing degree supervariable 2 combining three inequalities theorem 1 inequality e holds values je j note variable adjacent two elements less bound equal exact external degree important since variables minimum degree adjacent two elements less additionally degree bounds take advantage element absorption since bound depends je j elements absorbed 42 degree computation example illustrate computation approximate external degree bound figures 31 32 variable 6 adjacent three elements g 3 g 4 variables adjacent two less elements g 3 bound 6 tight since two sets jl 1 n l 3 j jl 2 n l 3 j disjoint graph g 4 current pivot element compute 5 exact external degree variable 6 4 seen elimination graph g 4 left figure 32a bound one exact external degree since variable 5 appears l 2 n l 4 l 3 n l 4 one less bound b equal 6 case bound degree variable 6 tight next pivot step since elements 2 3 absorbed element 5 5 approximate minimum degree algorithm approximate minimum degree algorithm identical algorithm 1 except external degree replaced throughout bound external degree computed using algorithm 2 equations 41 42 addition absorbing elements element empty external subset jl e n l absorbed element p even e adjacent p aggressive element absorption improves degree bounds reducing je j many minimum degree algorithms use linked lists assist search variable minimum degree list holds supervariables degree bound maintaining data structure takes time proportional total number degree computations ojlj computing pattern pivot element l p takes total ojlj time overall since element used computation one element total sizes elements constructed ojlj amd algorithm based quotient graph data structure used ma27 minimum degree algorithm 13 14 15 initially sets stored followed small amount elbow room set l p formed placed elbow room place p je collection occurs elbow room exhausted garbage collection space taken e reduced exactly ja supervariable less equal ja 0 extra space reclaimed space e e e elements fully reclaimed space l e absorbed elements e garbage collection p amestoy davis duff takes time proportional size workspace normally thetajaj practice elbow room size n sufficient computation degree bounds compute following hash function supervariable detection 3 increases degree computation time small constant factor place supervariable hash bucket according hashi taking time ojlj overall two supervariables placed hash bucket pair supervariables j hash bucket tested indistinguishability hash function results collisions total time taken comparison ojaj ashcraft 3 uses hash function preprocessing step entire matrix without modn gamma 1 term ojv j log jv instead jv j hash buckets contrast use function ordering hash variables adjacent current pivot element example variables 7 8 9 indistinguishable g 5 figure 32a amd algorithm would consider variable 8 step 5 since adjacent pivot element 5 refer quotient graph g 5 figure 32b amd would construct 9g step 5 since 7 9 distinguishable g 5 would construct 9g step 6 however total number times approximate degree variable computed elimination number nonzero entries row k l variable kth pivot time taken compute oja 0 j equivalently number nonzero entries row k permuted matrix total time taken entire amd algorithm thus bounded degree computation bound assumes supervariable hash collisions constant number garbage collections practice assumptions seem hold asymptotic time would higher many problem domains number nonzeros per row constant independent n matrices domains amd algorithm takes time ojlj assumptions 6 performance results section present results experiments amd wide range test matrices first compare degree computations discussed e b well upper bound true degree j compare amd algorithm established minimum degree codes mmd ma27 61 test matrices tested degree bounds codes matrices harwellboeing collection type pua rua psa rsa 11 12 orioncerfacsfr numericalccrlacuk nonsingular matrices saads collection ftpcsumnedu matrices university florida collection available ftpcisufledu directory pubumfpackmatrices table selected matrices test set matrix n nz percentage description raefsky3 21200 733784 000 134 fluidstructure interaction turbulence venkat01 62424 827684 071 157 unstructured 2d euler solver bcsstk32 44609 985046 020 273 structural eng automobile chassis developing pipe flow turbulent ct20stif 52329 1323067 077 332 structural eng ct20 engine block nasasrb 54870 1311227 006 350 shuttle rocket booster olaf 16146 499505 041 352 nasa test problem raefsky1 3242 145517 000 389 incompressible flow pressuredriven pipe crystk03 24696 863241 000 409 structural eng crystal vibration raefsky4 19779 654416 000 414 buckling problem container model structural eng crystal vibration steering mech structural eng automobile component ex11 16614 540167 004 433 cfd 3d cylinder flat plate heat exch finan512 74752 261120 132 466 economics portfolio optimization rim 22560 862411 234 632 chemical eng fluid mechanics problem bbmat 38744 1274141 581 644 cfd 2d airfoil turbulence swell problem square die chemical eng light hydrocarbon recovery chemical eng light hydrocarbon recovery orani678 2529 85426 668 869 australian economic model migration appu 14000 1789392 1564 944 nasa test problem random matrix several matrices nasa boeing 378 matrices present results matrices requiring 500 million floatingpoint operations cholesky factorization well orani678 matrix harwellboeing collection ex19 saads collection total 26 matrices latter two bestcase worstcase examples set smaller matrices unsymmetric matrices test set first used maximum transversal algorithm mc21 harwell subroutine library 9 reorder matrix permuted matrix zerofree diagonal formed symmetric pattern permuted matrix plus transpose minimum degree ordering algorithm used mups 1 2 matrices table 61 lists statistics symmetrized pattern table 61 lists matrix name order number nonzeros lower triangular part two statistics obtained exact minimum degree ordering using description column 4 report percentage pivots p 2 column 4 shows small percentage pivots selected using exact minimum degree ordering two elements adjacency list therefore expect good quality ordering algorithm based approximate degree bound column 5 indicate often degree computed je percentage total number degree updates table 61 sorted according degree update percentage column 5 thus reports percentage costly degree updates performed minimum degree algorithm based exact degree matrices relatively large values 14 p amestoy davis duff column 5 significant time reductions expected approximate degree based algorithm since minimum degree algorithm sensitive tiebreaking issues randomly permuted matrices adjacency lists 21 times except random appu matrix ran methods given set 21 randomized matrices also ran method original matrix trices original matrix gives better ordering time fillin results methods best result obtained randomized matrices overall comparisons however dependent whether original randomized matrices used thus report median ordering time fillin obtained randomized matrices appu matrix random matrix used nasa benchmark thus representative sparse matrices real problems include test set pathological case demonstrates well amd handles irregular problem factors 90 dense practical run appu matrix 21 times exact degree update algorithms took much time 62 comparing exact approximate degrees make valid comparison degree update methods modified code amd algorithm could compute exact external degree bound ashcraft eisenstats bound e gilbert moler schreibers bound b exact true degree upper bound true degree six codes based e columns 3 8 table 2 differ compute degree since aggressive absorption difficult using bounds others switched aggressive absorption six codes actual amd code column 2 table 2 uses aggressive absorption table 62 lists median number nonzeros diagonal l thou sands method results 20 higher lowest median jlj table higher underlined upper bound true degree exact true degree give nearly identical results expected using minimum degree algorithms based external degree noticeably improves quality ordering compare columns 3 7 columns 4 8 inequality e would expect similar ranking quality ordering produced methods table 62 confirms bound exact external degree produce nearly identical results comparing amd results column aggressive absorption tends result slightly lower fillin since reduces je j thus improves accuracy bound e bound often accurate enough produce good sults fail catastrophically matrices high percentage approximate pivots see column 4 table 61 less accurate b bound produces notably worse results many matrices comparing 378 matrices median jlj using never 9 higher median fillin obtained using exact external degree exception finan512 matrix fillin results identical nearly half 378 matrices approximate degree bound thus gives reliable estimation degree context minimum degree algorithm finan512 matrix highly sensitive tiebreaking variations graph consists two types nodes constraint nodes linking nodes 5 constraint nodes form independent sparse subgraphs connected together via tree linking nodes matrix pathological worstcase matrix minimumdegree table median fillin results degree update methods matrix number nonzeros diagonal l thousands amd e olaf 2860 2858 2860 2860 3271 3089 3090 raefsky4 7685 7685 7685 7685 9294 8196 8196 bbmat 19673 19880 19673 21422 37820 21197 21445 appu 87648 87613 87648 87566 87562 87605 87631 method constraint nodes ordered first linking nodes low degree tend selected first causes high fillin using tree dissection algorithm berger mulvey rothberg vanderbei 5 obtain ordering 183 million nonzeros l table 63 lists median ordering time seconds sun sparcstation method ordering time twice minimum median ordering time listed table higher underlined computing b bound often fastest since requires single pass element lists instead two passes required bound however sometimes slower generate fillin increases ordering time see equation 51 ordering time two exact degree updates increases dramatically percentage costly degree updates increases je garbage collection little effect ordering time obtained runs gave method elbow room size n usually single garbage collection occurred two garbage collections occurred amd three methods aggressive absorption reduces memory requirements 63 comparing algorithms section compare amd two established minimum degree codes lius multiple minimum degree mmd code 25 duff reids ma27 code 15 mmd stores element patterns l fragmented manner requires elbow room 20 21 uses exact external degree mmd creates supervariables two variables j p amestoy davis duff table median ordering time degree update methods matrix ordering time seconds amd e ct20stif 662 866 654 707 631 863 645 olaf 183 256 190 216 183 233 178 raefsky4 232 290 218 245 208 312 207 ex11 270 406 277 300 260 423 289 rim 574 1038 569 612 572 1001 558 appu 4175 297054 3983 4320 4064 307444 3893 adjacent variables exactly two adjacent elements current pivot element hash function required mmd takes advantage multiple elimination incomplete update ma27 uses true degree data structures amd detects supervariables whenever two variables adjacent current pivot element structure quotient graph amd ma27 uses true degree hash function supervariable detection aggressive absorp tion neither amd ma27 take advantage multiple elimination incomplete update structural engineering matrices tend many rows identical nonzero pat tern ashcraft found total ordering time mmd significantly improved detecting initial supervariables starting elimination 3 implemented ashcrafts precompression algorithm modified mmd allow initial supervariables call resulting code cmmd compressed mmd precompression little effect amd since finds supervariables degrees first updated amd algorithm compressed matrices together cost precompression never faster amd table 64 lists median number nonzeros diagonal l thou sands code results 20 higher lowest median jlj table higher underlined amd mmd cmmd find orderings quality ma27 slightly worse uses true degree instead external degree table median fillin results four codes matrix number nonzeros diagonal l thousands amd mmd cmmd ma27 olaf 2860 2876 2872 3063 bbmat 19673 19876 19876 21139 appu 87648 87647 87647 87605 considering entire set 378 matrices amd produces better median fillin mmd cmmd ma27 62 61 81 matrices respectively amd never generates 7 7 4 nonzeros l mmd cmmd ma27 respectively shown empirically amd produces ordering least good three methods large test set apparent slight difference ordering quality amd mmd statistically significant conjecture earlier supervariable detection affects external degree differences external degree upper bound table 65 lists median ordering time seconds sun sparcstation 10 method ordering time cmmd includes time taken pre compression algorithm ordering time twice minimum median ordering time listed table higher underlined certain classes matrices typically structural analysis applications cmmd significantly faster mmd amd fastest method ex19 matrix 352 matrices full test set differences ordering time various methods typically less compare ordering time amd methods matrices test set requiring least tenth second ordering time amd slower mmd cmmd ma27 6 15 8 matrices respectively full set matrices amd never 30 slower methods best worst cases relative runtime p amestoy davis duff table median ordering time four codes matrix ordering time seconds amd mmd cmmd ma27 ct20stif 662 2600 959 981 olaf 183 567 441 264 raefsky4 232 524 236 291 rim 574 909 811 1013 appu 4175 542323 533924 268327 amd smaller matrices included table 65 ex19 orani678 matrices 7 summary described new upper bound degree nodes elimination graph easily computed context minimum degree algorithm demonstrated upperbound degree accurate previously used degree approximations experimentally shown replace exact degree update approximate degree update obtain almost identical fillin approximate minimum degree amd based external degree approximation described shown amd algorithm highly competitive ordering algorithms typically faster minimum degree algorithms produces comparable results mmd also based external degree terms fillin amd typically produces better results terms fillin computing time ma27 minimum degree algorithm based true degrees 8 acknowledgments would like thank john gilbert outlining portion proof theorem 1 joseph liu providing copy mmd algorithm cleve ashcraft stan eisenstat comments draft paper r factorization large sparse matrices based multifrontal approach multiprocessor environment use level 3 blas solution full high performance computing symposium high performance computing compressed graphs minimum degree algorithm personal communication tic programs using tree dissection operations research introduction algorithms journal matrix analysis applications march algorithms obtaining maximum transversal direct methods sparse matrices sparse matrix test problems comparison sparsity orderings obtaining pivotal sequence gaussian elimination report aere r10533 yale sparse matrix symmetric codes algorithms data structures sparse symmetric gaussian elimination fast implementation minimum degree algorithm using acm transactions mathematical software application minimum degree algorithm finite element systems sparse matrices matlab design modification minimumdegree algorithm multiple elimination symmetric elimination sparse positive definite systems potential phd thesis graph theory computing generalized element method direct solutions sparse network equations optimally ordered triangular factorization computing minimum fillin npcomplete note university florida technical reports list references available postscript form via anonymous ftp ftp tr ctr dany mezher bernard philippe parallel computation pseudospectra large sparse matrices parallel computing v28 n2 p199221 february 2002 frank dellaert michael kaess square root sam simultaneous localization mapping via square root information smoothing international journal robotics research v25 n12 p11811203 december 2006 csaba mszros detecting dense columns interior point methods linear programs computational optimization applications v36 n23 p309320 april 2007 abdou guermouche jeanyves lexcellent constructing memoryminimizing schedules multifrontal methods acm transactions mathematical software toms v32 n1 p1732 march 2006 timothy davis algorithm 849 concise sparse cholesky factorization package acm transactions mathematical software toms v31 n4 p587591 december 2005 vladimir rotkin sivan toledo design implementation new outofcore sparse cholesky factorization method acm transactions mathematical software toms v30 n1 p1946 march 2004 timothy davis column preordering strategy unsymmetricpattern multifrontal method acm transactions mathematical software toms v30 n2 p165195 june 2004 timothy davis john r gilbert stefan larimore esmond g ng column approximate minimum degree ordering algorithm acm transactions mathematical software toms v30 n3 p353376 september 2004 patrick r amestoy enseeihtirit timothy davis iain duff algorithm 837 amd approximate minimum degree ordering algorithm acm transactions mathematical software toms v30 n3 p381388 september 2004 timothy davis john r gilbert stefan larimore esmond g ng algorithm 836 colamd column approximate minimum degree ordering algorithm acm transactions mathematical software toms v30 n3 p377380 september 2004 iain duff ma57a code solution sparse symmetric definite indefinite systems acm transactions mathematical software toms v30 n2 p118144 june 2004 anshul gupta recent advances direct methods solving unsymmetric sparse systems linear equations acm transactions mathematical software toms v28 n3 p301324 september 2002 patrick r amestoy iain duff jeanyves lexcellent xiaoye li analysis comparison two general sparse solvers distributed memory computers acm transactions mathematical software toms v27 n4 p388421 december 2001 p hnon p ramet j roman pastix highperformance parallel direct solver sparse symmetric positive definite systems parallel computing v28 n2 p301321 february 2002 abdou guermouche jeanyves lexcellent gil utard impact reordering memory multifrontal solver parallel computing v29 n9 p11911218 september nicholas gould jennifer scott numerical evaluation hsl packages direct solution large sparse symmetric linear systems equations acm transactions mathematical software toms v30 n3 p300325 september 2004 xiaoye li overview superlu algorithms implementation user interface acm transactions mathematical software toms v31 n3 p302325 september 2005 haifeng qian sapatnekar hybrid linear equation solver application quadratic placement proceedings 2005 ieeeacm international conference computeraided design p905909 november 0610 2005 san jose ca claudson f bornstein bruce maggs gary l miller tradeoffs parallelism fill nested dissection proceedings eleventh annual acm symposium parallel algorithms architectures p191200 june 2730 1999 saint malo france xiaoye li james w demmel superludist scalable distributedmemory sparse direct solver unsymmetric linear systems acm transactions mathematical software toms v29 n2 p110140 june ove edlund software package sparse orthogonal factorization updating acm transactions mathematical software toms v28 n4 p448482 december 2002 timothy davis iain duff combined unifrontalmultifrontal method unsymmetric sparse matrices acm transactions mathematical software toms v25 n1 p120 march 1999 nicholas gould jennifer scott yifan hu numerical evaluation sparse direct solvers solution large sparse symmetric linear systems equations acm transactions mathematical software toms v33 n2 p10es june 2007 olaf schenk klaus grtner solving unsymmetric sparse systems linear equations pardiso future generation computer systems v20 n3 p475487 april 2004 patrick r amestoy iain duff stphane pralet christof vmel adapting parallel sparse direct solver architectures clusters smps parallel computing v29 n1112 p16451668 novemberdecember michele benzi preconditioning techniques large linear systems survey journal computational physics v182 n2 p418477 november 2002