power optimization technologydependent circuits based symbolic computation logic implications paper presents novel approach problem optimizing combinational circuits low power method inspired fact power analysis performed technology mapped network gives realistic estimates would technologyindependent level nodes switching activity circuit determined highpower nodes eliminated redundancy addition removal nodes sorted according switching activity considered one time learning used identify direct indirect logic implications inside network logic implications exploited add gates connections circuit may help eliminating highpower dissipating nodes thus reducing total switching activity power dissipation entire circuit process iterative iteration starts different target node end result circuit decreased switching power besides general optimization algorithm propose new bddbased method computing satisfiability observability implications logic network futhermore present heuristic techniques add remove redundancy technologydependent level restructure logic selected places without destroying topology mapped circuit experimental results show effectiveness proposed technique average power reduced 34 64 reduction power possible negligible increase circuit delay b introduction excessive power dissipation electronic circuits reduces reliability battery life severity problem increases level transistor integra tion therefore much work done power optimization techniques stages design process highlevel design power dissipation reduced algorithmic transformations chandrakasan et al 1995 architectural choices chandrakasan brodersen 1995 proper selection highlevel synthesis tools macii et al 1997 logic levelthe focus paperthe main objective lowpower synthesis algorithms reduction switching activity logic weighted capacitive load logic optimization may occur technologyindependent technologydependent stages synthesis flow technologyindependent stage combinational circuits optimized twolevel minimization bahar somenzi 1995 iman pedram 1995b dont care based minimization shen et al 1992 iman pedram 1994 logic extraction roy prasad 1992 iman pedram 1995a selective collapsing shen et al 1992 technologydependent stage technology decomposition tsui et al 1993 technology mapping tsui et al 1993 tiwari et al 1993 lin de man 1993 methods proposed finally implementation circuit available power still reduced applying technology remapping vuillod et al 1997 gate resizing bahar et al 1994 coudert et al 1996 difficult measure power dissipation technologyindependent circuits dependable level accuracy therefore propose method applied technology mapped circuits based idea reducing total switching activity network redundancy addition removal previous work subject includes methods proposed cheng entrena 1993 entrena cheng 1993 chang mareksadowska 1994 set mandatory assignments generated given target wire set candidate connections identified candidate connection added circuit causes target fault become untestable therefore faulty connection become redundant however since additional connection may change circuits behavior redundancy check needed verify new connection redundant may added circuit another atpgbased approach proposed rohfleish et al 1996 technique uses analysis tool introduced rohfleish et al 1995 identify permissible transformations network may reduce power dissipation method finding permissible transformations simulationbased implications classified c1 c2 c3clauses bitparallel fault simulation performed eliminate clauses invalid remaining potentially valid clauses combined create different clause combinations checked validity using atpg complex clauses included number combinations consider increase dramatically work area redundancy addition removal uses recursive learning guide process instance work proposed kunz menon 1994 introduces atpgbased method identifying indirect implications may indicate useful transformations circuit implication identified power optimization based symbolic computation logic implications delta 3 may used add redundant connection guaranteed change behavior circuit additional redundancy elimination step required identify redundant connections created adding new connection method start circuit already implemented gates technology library perform power analysis identify high lowpower dissipating nodes use sophisticated learning mechanism related trevillyan et al 1986 kunz pradhan 1992 kunz 1993 jain et al 1995 find satisfiability observability implications circuit neighborhood target nodes implications used identify network transformations add remove connections circuit done kunz menon 1994 objective eliminating highpower nodes connections method innovative two main aspects first uses powerful learning procedure based symbolic calculations rather atpgbased methods approach allows identification general forms logic implications second operates technologydependent level allows accurate power estimates drive overall resynthesis process experimental results obtained sample mcnc91 benchmarks yang 1991 show viability effectiveness proposed approach rest manuscript organized follows section 2 gives definitions subsequent usage section 3 propose symbolic procedure compute logic implications using learning section 4 describes power optimization procedure based redundancy addition removal section 5 dedicated experimental results finally section 6 gives conclusions directions future work 2 background section provide definitions terms introduce concepts used rest paper first define characteristic functions relations next discuss concept untestable faults show faults may eliminated redundancy removal finally show logic implications may used create new untestable faults circuit may subsequently removed create overall better optimized circuit 21 characteristic functions relations given set points boolean space possible define function called characteristic function evaluates 1 exactly points b n belong formally definition extended arbitrary finite sets provided objects set properly encoded binary symbols since characteristic functions boolean functions represented manipulated efficiently binary decision diagrams bdds bryant 1986 consequence usually possible handle much larger sets bdds characteristic functions used instead explicit enumeration elements sets paper restrict attention relations sets subsets cartesian product let q two sets let r theta q binary relation ie elements r pairs elements q using different sets variables elements q represent relation characteristic example consider sets greeng grey red orangeg relation lower caseqg let us encode elements using variables similarly elements q encoded using variables relation r r redg obviously definition binary relation given easily extended case nary relations relations subsets cartesian products order n 22 circuits faults combinational circuit c acyclic network combinational logic gates output gate g connected input gate g j g fanin j gate g j fanout gate g combinational circuit may failure due wire shorted power source ground failure may observed stuckat fault failure circuit behaves wire permanently stuckat1 stuckat0 assume single stuckat faults used model failures circuit let c combinational circuit let c f circuit fault f present fault f untestable output behaviors c c f identical input vector applied c c f 23 redundancy addition removal automatic test pattern generation program may used detect untestable faults eg sentovich et al 1992 computed information may used simplify network propagating constant values zero one due untestable stuckat connections throughout circuit redundancy removal one successful approaches logic optimization eg cho et al 1993 however effectiveness greatly depends number redundancies circuits 100 testable redundancy removal help reason techniques based redundancy addition removal proposed concept redundancy addition removal best explained example figure 1a stuckat faults testable therefore simplification power optimization based symbolic computation logic implications delta 5 redundancy removal possible network gate g10 transformed 2input gate additional input connected inverted output gate g6 see shaded logic figure 1b behavior circuit primary outputs remain unaltered however three previously testable faults shown xs figure 1b become untestable redundancy removal gate simplification inverter chain collapsing demorgan transformations circuit simplified shown figure 1e c e g6 g4 g8 g9 g10 x c e g6 g4 g8 g9 g10 x c e g6 x g6 c e g6 g4 x b c c e x fig 1 example redundancy addition removal adding redundant gates connections circuit may increase area delay power consumption amount may recoverable subsequent step redundancy removal furthermore redundancies network necessarily due suboptimal design automatic synthesis technology mapping tools sometimes resort redundant gates insertion increase speed digital design keutzer et al 1991 consequence redundancy addition removal delicate operations performed within constraints objective function minimized 6 delta r bahar e lampe e macii 24 logic implications general may large variety choices available selecting new connections logic gates may added original circuit introduce redundancies kunz menon proposed effective solution selecting connections method derived recursive learning kunz menon 1994 recursive learning process determining value assignments necessary detection single stuckat fault combinational circuit process equivalent finding direct indirect implications circuit finding value assignments necessary given signal take specific value satisfiability implications make given signal observable observability implications 241 direct implications value assignment determined simple propagation signal values circuit known direct satisfiability implication example consider circuit figure 2 signal assignment made assignment directly implies value assignments assignments g7 g8 justify output gate g9 value 1 c e g6 g4 g8 g9 g10 x fig 2 example circuit satisfiability implications similarly value assignment given node observable determined simple propagation signal values circuit known direct observability implication example consider circuit figure 3 g2 observable assignments g1 g6 make gate g2 observable observability g2 directly implies c e g3 g4 g6 fig 3 example circuit observability implications power optimization based symbolic computation logic implications delta 7 242 indirect implications shown kunz menon 1994 resorting direct implications perform redundancy addition removal may provide enough options achieve significant improvements circuit optimized thus interested look another type implications namely indirect implications illustrate concept indirect implication consider circuit figure 2 suppose signal assignment made may optionally assign either justify assignment however neither assignment essential therefore conclude essential direct implications make assignment however upon closer spection determine value assignment indirectly implies value assignment 1 temporarily assign essential satisfy g7 1 likewise temporarily assigning find essential assignments either case essential assignment conclude essential assignment indirectly implied indirect implication shown previous example falls category satisfiability implications example indirect observability implication consider circuit figure 3 g3 observable must true vice versa therefore observability g3 indirectly implies satisfiability implications bidirectional property apply observability implications example circuit shown figure 2 shown satisfiability implication reversed complemented general property satisfiability implications however property hold observability implications referring previous example figure 3 although observability g2 observability g1 imply imply cannot assumed g1 g2 always observable conditions lack bidirectionality makes adding redundant logic circuit constrained observability rather satisfiability implications used reason implications two types must handled separately applying optimizations based redundancy addition removal kunz menon 1994 kunz menon observed presence indirect implications good indication suboptimality circuit especially true satisfiability implications taken inspiration approach implement power optimization algorithm propose paper however certain implications eliminated consideration simply found direct propagation logic values fact observability implications found directly since determined primarily forward propagation implications next section discuss direct well indirect implications computed symbolically using bddbased data structures section 4 outline overall optimization procedure 8 delta r bahar e lampe e macii 3 computing implications symbolically section introduce symbolic procedure compute logic implications recursive learning follows literal either variable complement cube product literals start set relations universe n boolean variables j thought characteristic function gate j describing functional behavior example j nand gate inputs j gate boolean variables assigned way j evaluates 0 variable assignments violate required behavior gate invalid way entire network may described within set ft j g may also used express observability relation gate instance consider gate g4 figure 2 signal output gate g4 observable either primary output x sat ce g4ce 0 given initial assignment ie assertion ay may compute implications applying ay set ft j g furthermore may wish extract necessary essential literals implication iy example assertion applied characteristic function 3 resulting implication becomes 3 1 2 however order satisfy characteristic function given assertion strictly necessary therefore implication stored separately cy way given initial assertion ay cy list essential gate assignments entire network implemented using bdds cy represented single cube shown later essential literals require simple redundant logic added network therefore may beneficial store separately 31 direct satisfiability implications given set characteristic functions g initial assertion compute direct satisfiability implications using procedure impsatdirect shown figure 4 recall direct implication one found propagating immediate effects logic assertion forward backward specified set relations without case analysis essential implications returned separately cube imp implementation sat imp represented bdds direct implications computed follows first initialize list implications cubefree essential part next consider possible direct implications one time gates set q line 2 power optimization based symbolic computation logic implications delta 9 procedure impsatdirectat sat 1 2 k fanout x 3 q 6 4 select remove oneq 5 sat sat 6 sat 7 8 j one continue 9 fanout x returnimpt sat fig 4 procedure impsatdirect set q contains fanouts variables support cube imp plus variables imp first step loop selects one gate q removes set inside loop lines 4 10 procedure essential called according equation 4 discover new essential implication exit loop return line k reduces zero implying assertion logically inconsistent one relations set subrelations ft sat g literal function line 7 represents newly discovered essential implications pass loop new implications added global implications cube imp line 9 thereby accumulating implications original assertion implication variables found also appended set q line 10 order evaluate effect rest network addition cube imp procedure impsatdirect also returns sat become reduced set relations comprised cofactor original relation respect essential implications imp sat j imp notice sat j imp set implications albeit nonessential ones general implications may also useful optimizing network though straightforward apply network discussed detail later paper 32 direct observability implications observability implications also used evaluation direct im plications procedure impsatdirect may expanded relation obs j evaluated along sat whenever signal j observability frontier procedure renamed impdirect shown figure 5 lines 1 10 almost identical procedure impsatdirect observability implications computed beginning line 12 gate k frontier find new implications way impsatdirect time using observability characteristic functions obs makes procedure impdirectat sat obs 1 2 3 fkjxk frontier fanout x j 2 impg 4 q 6 5 select remove oneq sat 7 sat 8 9 j one continue 11 fanout x fkjxk frontier fanout x begin observability calculations 12 k frontier f 13 obs 14 obs 15 17 else f 19 21 obs frontier pushed forward 22 foreach 2 observable f 26 27 returnimpt sat obs fig 5 procedure impdirect power optimization based symbolic computation logic implications delta 11 code complicated updating frontier reduced observability relation obs k evaluates 1 fault observable least one fanout k frontier pushed forward include fanout gates line 24 furthermore fanouts gate k implied k removed frontier line 27 finally frontier ever becomes 0 ie empty assertion observable never case checked line 16 33 indirect recursively learned implications using symbolic direct implications procedure previous section find indirect recursively learned implications setting temporary orthogonal constraints initial assertion finding implications based constraints extracting common implication full set implications define orthogonal constraints set functions ff although may use orthogonal set functions simplify recursive implication procedure use orthogonal constraints fy f 0 say extract function fy network add original assertion ay apply assertion 1 0 separately network using equation 3 get two different sets implications 1 0 respectively variable j combine implications obtain new set implications direct indirect retain implications common 1 0 addition may choose save essential implications separately applying equation 4 new set implications notice may recursively apply new orthogonal constraints set transition relations potentially find even implications handled easily within bdd environment shown pseudocode figure 6 procedure indirectimps takes inputs assertion relation sets sat obs addition takes input level representing recursion level recursive call initially set 0 level exceeds specified limit maxlevel search implications abandoned procedure indirectimps returns cube impcube representing set variables direct indirect implied constant values noted indirect implication discovered propagating implications backwards often found direct implication propagating implications forward example indirect satisfiability implication found figure 2 found direct implication 1 procedure indirectimpsat sat obs level f 1 directimpst sat obs 2 8it sat 3 level maxlevel returndirectimps 4 5 7 8 fig 6 procedure indirectimps implication law contrapositum previously mentioned make distinction indirect direct implications often good way sorting promising implications indeed may want eliminate implication simply indirectly obtained implications found backward propagation may reasonable filter use however interested observabilitybased implications well found forward direction using filter may good solution point discussed section 5 using bdds compute store indirect implications may seem inefficient compared simple analysis topology circuit may fact true interested singlevariable implications derived satisfiability assignments singleliteral assertions example b b 2 f0 1g however computing implications symbolically better suited finding general implications procedure store manipulate compute general ie complex expressions similar complexity expressions restricted simple cubes fact separating essential implications nonessential ones available 4 power optimization procedure describe implicationbased optimization procedure reducing power dissipation procedure consists four main steps described detail following sections 41 44 41 selecting assertion function finding implications computing indirect implications large network shown section 3 computationally expensive therefore important prune search implications limiting recursion level carefully selecting assertion function ay upon implications found reduce cost even farther bahar et al 1996 proposed extract subnetwork find implications within confines subnetwork note although implications found within boundaries subnetwork implications must hold context entire network indirect implications often present specifically circuits containing recon power optimization based symbolic computation logic implications delta 13 vergent fanout reconvergent fanout presence two distinct paths common input gate fanout stem leading common output gate gate common gate paths reconnect called reconvergence gate example subnetwork reconvergent fanout shown figure 7 two distinct paths inputs c reconverge gate g9 experiments bahar et al 1996 suggested order invest time finding implications useful search indirect implications limited subnetworks containing reconvergent fanout reconvergence gate used initial assertion ay way implications may found predominantly backward propagation signal values toward primary inputs c e g6 g4 g8 g9 g10 x reconvergence gate fig 7 network gates extracted subnetwork shown grey approach may work well one concerned satisfiability implications may limiting observability implications also exploited furthermore mentioned section 33 distinguishing indirect direct implications becomes less useful filter sorting promising implications since many observability ones found direct forward propagation signal values instead asserting reconvergent gate new strategy selects gate relatively low power dissipation due either low switching activity low capacitive load suitable implication found lowpower assertion gate included added redundant logic using lowpower assertion gate minimal impact potentially increasing power dissipation switching activity capacitive load already low addition using signal input gates may dampening effect switching activity gates example gate high switching activity connecting signal tends toward 0 value time switches infrequently may prevent output gate switching frequently moreover additions may allow removal highpower connections gates therefore although assertion gates power increased net result overall decrease power consumption assertion gate selected output value alternately set 0 1 implication procedure finds relation exists given one assertions since assertion gate may exist anywhere within network 14 delta r bahar e lampe e macii subnetwork values propagated backward forward logic 42 finding right addition found implications given assertions selected gate use information add gates andor connections circuit retaining behavior original one primary outputs use method similar data flow analysis trevillyan et al 1986 determine modifications given assertion implication implication gate transitive fanin assertion gate x consider first case implication also expressed x 0 given function f implication expressed dont care condition f x dc f x x may transform f f adding dont care term output f without changing behavior primary outputs circuit words original circuit modified oring dont care term ie implicant gate output gate x similarly case instead using dont care expression use analogous expression x transform f f words circuit modified anding implicant gate output gate x example method applied refer back circuit figures 1a b show additional connection added due implication 1 according implication modify function output gate g9 without changing behavior circuit inserting circuit notice gate added network absorbed inverter g11 becomes 2input gate note essential assertion gate transitive fanin implication since replacing function f x f x would create cyclic network 43 finding removing redundancies redundant circuitry added use automatic test pattern generation procedure implemented sis sentovich et al 1992 find new redundancies created network whether implications found using entire network within boundaries subnetwork finding removing redundancies done entire network generate list possibly redundant connections since newly added gates redundant need make sure included list result redundancy removal order dependent removing redundant power optimization based symbolic computation logic implications delta 15 connection network may create new redundancies andor make existing ones longer redundant since primary objective reducing power dissipation sort redundant connections order decreasing power dissipation remove starting top list atpg identified redundant faults removed ultimate goal eliminating fanout connections targeted high power dissipating node redundancy removal procedures one implemented sis cannot used purpose two main reasons first optimization occurs restructuring boolean network consequence even redundancy removal operates technology mapped design end result optimization technology independent description requires remapping onto target gate library may lead significant changes structure original network undesirable context lowpower resynthesis since network transformations made resynthesis based original circuit implementation second redundancy removal usually targets area minimization may obviously affect circuit performance implemented redundancy removal algorithm resembles sweep procedure implemented sis operates gates circuit rather nodes boolean network addition performs limited number transformations namely procedure simplifies gates whose inputs constant b collapses inverter chains original circuit structure performance preserved gate simplification three simplifications applicable given gate g one inputs constant 1 constant value controlling value g g replaced connection either v dd ground depending function gate 2 constant value noncontrolling value g g two inputs g replaced gate g taken library implementing logic function g one less input 3 constant value noncontrolling value g g twoinput gate g replaced inverter buffer usually cell libraries contain several gates implementing function differing sizes therefore delays loads driving capabilities select replacement gate g gate approximately driving strength original gate g inverter chain collapsing inverter chains commonly encountered cir cuits especially cases speed critical collapsing inverters belonging speedup chains though advantageous point view area possibly power may detrimental effect performance cir cuit hand simplification gates due redundancy removal may produce inverter chains may easily eliminated without slowing network eliminate inverter chains cases transformation increase critical delay original circuit inverter g obtained simplification complex gate first check g belongs chain eliminated certain constraints satisfied g companion inverter chain ie inverter feeding g inverter fed removed particular order safely remove inverter chain 1 first inverter cannot multiple fanouts 2 load output inverter chain must greater load currently seen gate preceding inverter chain first restriction may unnecessarily conservative however removing implies sometimes extra inverters need inserted fanout branches first inverter thereby possibly introducing area power delay degradation 44 choosing best network adding redundant gates connections circuit may increase area delay power consumption amount may recoverable subsequent step redundancy removal given assertion network created literal implication cube elected save running implication procedure may choose eliminate implication list possible candidates create cyclic network may add connections already highdissipating node new network obtained adding appropriate redundant logic according chosen implication section 42 finding removing newly created redundancies section 43 power delay estimations run new network best network selected used replace existing network criteria used carry network selection based combination delay power consumption discussed detail section 5 5 experimental results section present results obtained applying optimization procedure combinational circuits mcnc91 benchmark suite experiments run within sis environment sun ultrasparc 170 workstation 300 mb memory circuits initially optimized using sis script scriptrugged mapped either area using map delay using map n 1 afg library used map circuits contains nand inverter gates allows 4 inputs 5 drive options general gates larger drive strength larger cell area however two values increase rate mapping method bahar et al 1994 used resize gates smaller gates circuit delay penalty incurred ensures gain made experiment result optimization procedure improperly sized gate statistics circuits reported table 1 particular number gates area 2 delay nsec power consumption w shown power dissipation estimated using simulation method ghosh et al 1992 set experiments optimization procedure iteratively applied circuits find implications used redundancy addition removal step gates circuit resized without increasing critical delay power optimization based symbolic computation logic implications delta 17 table 1 circuit statistics optimization circuit initial statistics mapping area initial statistics mapping speed gates area delay power gates area delay power 9sym 159 236176 1779 629 276 404840 1095 1743 clip 104 146624 1743 427 167 249632 1229 1205 inc misex1 50 66352 1379 192 76 111244 994 525 alu4 169 234784 1993 628 247 344056 1406 1391 cordic 67 90944 1164 280 85 123192 953 474 cps 897 1286208 4009 1932 1272 1694412 1368 2772 51 setting delay power constraints first set experiments run determine choose new network among choice several choose best implication apply network done bahar et al 1996 network choices may based solely one lowest power dissipation constraint delay new network increased fixed percentage usually 5 robust approach may use combination delay power select best network may temporarily allow power increase powerful implications may subsequently applied thus greater impact reducing power dissipation experiments discussed following sections 511 power threshold one optimization already mentioned section 44 addition power threshold basis power threshold observation difference power two networks small better results obtained choosing network smaller delay fall back delays two networks equal difference power matter small used make determination heuristic takes advantage fact final network resized based delay original network large improvement delay gives resizing algorithm ability make significant additional power gains layout transistors also allows transformations may accepted previously increased delay much set experiments done determine value optimal threshold value tests done values 10 275w intervals 025w tested circuits area mapping run also done threshold 0 run based power alone figure 8 shows optimal threshold value 2w result reasonable discussed earlier paper final power affected two variables power delay also allowing power increase slightly may create new implications lead even greater decreases power dissipation total power vs threshold673067706810000 100 125 150 175 200 225 250 275 threshold total power fig 8 power dissipation given threshold value 512 delay tolerance another parameter varied delay tol erance defined allowable percent increase delay final circuit original circuit interesting observation raising delay tolerance always result slower final network often many transformation choices made final network obtained transformations increase delay often offset transformations decrease yet increase delay tolerance increases number networks choose words like power threshold increasing delay tolerance increases probability power saving implication found several observations made data first increasing delay tolerance average effect increasing delay ever depending circuit allowing flexibility delay per iteration allow one obtain final circuit lower power faster original circuit second greater success found testing delaymapped circuits compared areamapped circuits reasonable since delay mapped circuits definition designed achieve minimum delay extreme small sacrifice delay produces relatively large power savings area mapped circuits results experiments shown figures 9 10 seen increase delay tolerance average delay go also certain delay tolerance level seen decreases power small insignificant graphs delay tolerance 200 interpreted infinite power optimization based symbolic computation logic implications delta 19 delay tolerance effects630065006700690071007300 delay tolerance power normalized delay total power normalized delay fig 9 powerdelay tradeoff curves varying delay tolerance circuits mapped area total power vs delay tolerance105001150012500135001450015500100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195 200 delay tolerance total power normalized delay total power normalized delay fig 10 powerdelay tradeoff curves varying delay tolerance circuits mapped speed table 2 statistics redundancy addition removal circuits mapped area gates area delay power imps obs deltap deltad deltaa 9sym 178 241744 1834 483 98 48 077 103 102 clip 88 117392 1548 274 43 14 064 089 080 inc 97 127136 2206 259 67 24 073 092 108 alu4 126 163792 1938 354 74 28 056 097 070 cordic average 072 096 093 table 3 statistics resizing gates table 2 changes power delay area given relative shown table 1 columns 25 area delay power deltap deltad deltaa 9sym 241744 1806 470 075 102 102 clip 117392 1544 255 060 089 080 inc 127136 2232 236 066 093 108 rd53 40832 1093 111 074 104 093 cordic 79344 1212 197 070 104 087 average 068 096 093 52 individual experiments results obtained first set experiments show individual power delay area characteristics circuit redundancy addition removal resizing complete experiments recursion level finding implications limited 1 ie maxlevel 1 figure 6 implications applied using power threshold 2w delay tolerance 5 original circuit delay redundancy addition removal gates circuit resized without increasing critical delay critical delay final circuits never greater 5 reported table 1 tables give final statistics circuits tables 2 4 report results applying redundancy addition removal table 2 starts power optimization based symbolic computation logic implications delta 21 table 4 statistics redundancy addition removal circuits mapped speed gates area delay power imps obs deltap deltad deltaa clip 134 195692 1250 828 71 24 069 102 078 inc 115 158224 1609 450 71 misex1 68 94656 1038 370 43 19 070 104 085 cordic average 073 103 083 table 5 statistics resizing gates table 4 changes power delay area given relative shown table 1 columns 69 area delay power deltap deltad deltaa 9sym 354844 1148 1351 078 105 088 clip 170752 1221 496 041 099 068 inc 146160 1637 295 046 100 082 misex1 92336 1027 331 063 103 083 alu4 228288 1399 690 050 100 066 cordic 109040 989 420 089 104 089 average 064 102 080 circuits mapped area table 4 starts circuits mapped speed number accepted implications shown column labeled imps shows many observability implications relative changes power delay area shown columns labeled deltap deltad eg 075 deltap column indicates 25 reduction power compared given table 1 results final step gate resizing shown tables 3 5 respectively changes power delay area given relative shown table 1 notice circuits shown tables 2 3 change area remains gate resizing since circuits originally mapped area optimization gates already near minimum size 22 delta r bahar e lampe e macii therefore even resizing additional saving area possible however slight improvement power delay still possible resizing since library cell area gates different drive strengths effectiveness method shown presented results example case mapping area 49 power reduction obtained circuit rd84 hand case circuits mapped speed 64 power savings obtained benchmark bw average power savings 34 obtained area speed mapped circuits combined interesting point relationship power reduction circuit delay area circuits averaged 36 reduction power delay increased 2 speed mapped circuits decreased 4 area mapped circuits however examples delay decreased significantly instance table 3 circuit bw mapped area showed 31 decrease power along 22 decrease delay results help emphasizing low power need always come expense reduced performance addition always case smaller devices must used obtain lowerpower dissipation example circuit c432 table 3 area increased 1 power dissipation decreased 37 result emphasizes need consider switching activity optimizing power 6 conclusions future work successful power optimization needs driven power analysis performing power analysis directly technologymapped circuit selectively target search implications areas ie assertion functions indicate promise reducing power dissipation starting appropriate assertion gate lowpower minimization achieved network transformations based implications obtained using symbolic bddbased computation method shown obtain 64 decrease power dissipation average 34 power reduction circuits although circuits presented results small moderate size method expanded larger circuits well larger sized circuits however execution time may increase significantly execution bottleneck bddbased algorithm find implications rather atpg algorithm within sis used identify redundant connections redundancy identification removal techniques presented iyer abramovici 1994 may used alleviate bottleneck future work would like take advantage general implications mentioned symbolic algorithm enhancement allow us reduce power dissipation addition working identifying powerful transformations simple inverter chain collapsing may applied circuit order reduce area power delay cost transformations may include application demorgans law expanding types gates included library instance may advantageous collapse say nand inverter nandinverter clusters complex gates finally working refining method selecting assertion gate finding suitable subnetwork search implications power optimization based symbolic computation logic implications delta 23 acknowledgments would like thank fabio somenzi gary hachtel many helpful comments suggestions made first draft r symbolic computation logic implications technologydependent lowpower synthesis ieee international symposium low power electronics design august symbolic method reduce power consumption circuits containing false paths boolean techniques lowpower driven resynthesis ieeeacm international conference computer aided design november minimizing power consumption digital cmos circuits optimizing power using transformations perturb simplify multilevel boolean network optimizer redundancy identificationremoval test generation sequential circuits using implicit state enumeration new algorithms gate sizing comparative study sequential logic optimization redundancy addition removal estimation average switching activity combinational sequential circuits logic extraction factorization low power advanced verification techniques based learning redundancy necessary reduce hannibal efficient tool logic verification based recursive learning ieeeacm international conference computer aided design november ieeeacm international conference computer aided design november recursive learning attractive alternative decision tree test generation digital circuits reducing power dissipation technology mapping structural transformations logic clause analysis delay opti mization syclop synthesis cmos logic low power ap plications sequential circuits design using synthesis optimization average power dissipation random pattern testability cmos combinational logic networks technology mapping low power global flow analysis automatic logic design technology decomposition mapping targeting low power dissipation logic synthesis optimization benchmarks user guide version 30 tr graphbased algorithms boolean function manipulation redundancy necessary reduce delay estimation average switching activity combinational sequential circuits technology decomposition mapping targeting low power dissipation technology mapping lower power perturb simplify multilevel logic optimization implication analysis symbolic method reduce power consumption circuits containing false paths multilevel network optimization low power logic extraction factorization low power advanced verification techniques based learning logic clause analysis delay optimization boolean techniques low power driven resynthesis twolevel logic minimization low power new algorithms gate sizing reducing power dissipation technology mapping structural transformations symbolic computation logic implications technologydependent lowpower synthesis sequential logic optimization redundancy addition removal remapping low power tight timing constraints highlevel power modeling estimation optimization average power dissipation random pattern testability cmos combinational logic networks sequential circuit design using synthesis optimization recursive learning ctr luca benini giovanni de micheli logic synthesis low power logic synthesis verification kluwer academic publishers norwell 2001 l e brackenbury w shao lowering power experimental risc processor microprocessors microsystems v31 n5 p360368 august 2007