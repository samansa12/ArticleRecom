replicated process allocation load distribution faulttolerant multicomputers abstractin paper consider loadbalancing process allocation method faulttolerant multicomputer systems balances load well faults start degrade performance system order able tolerate single fault process primary process duplicated ie backup process backup process executes different processor primary checkpointing primary process recovering process primary process fails paper formalize problem loadbalancing process allocation propose new process allocation method analyze performance proposed method simulations used compare proposed method process allocation method take account different load characteristics primary backup processes methods perform well occurrence fault proposed method maintains balanced load occurrence fault b introduction process allocation faulttolerant multicomputer systems studied several researchers 1 2 3 nieuwenhuis 1 studied transformation rules transform allocation nonduplicated processes allocation duplicated processes transformed allocation proven optimal terms reliabil ity shatz wang 2 proposed process allocation algorithm maximizes reliability nonhomogeneous systems bannister trivedi 3 proposed process allocation algorithm evenly distributes load system nodes common assumption research works duplicated process complete replica original process also execution load original kind faulttolerant process called active process replica 4 faulttolerant computing process model considered paper primarybackup process model commonly used distributed experimental commercial systems delta4 tandem 5 6 7 model backup copy process system however one process pair running actively one time active process called primary process nonactive process called backup secondary process active process regularly checkpoints running state backup process normal operation nonactive backup process either waiting checkpointing message saving received checkpointing mes sage node primary process running becomes faulty backup process takes role primary process thus order able tolerate faults primary backup processes executed node kind faulttolerant process called passive process replica 6 difference computing model considered models considered research role backup processes previous research assumed backup processes exact copies primary process hence load backup process exactly primary process whereas load backup process model much less primary process ie percent load primary process paper study problem static loadbalancing process allocation faulttolerant multicomputer systems process allocation called static processes allocated beginning system dynamic process allocation assumes processes allocated soon arrive general computing environment occurrence load duration processes cannot predicted advance dynamic process allocation suitable static process allocation since dynamic process allocation allocates processes arrive taking consideration current load processor static process allocation hand used effectively systems computational requirement process known beforehand examples systems include online transaction processing realtime systems processes running continuously repeating periodic manner works stressed dynamic process allocation problem passive replica computing environment load bal ancing distributed system paralex 8 supports faulttolerance passive replication loads balanced dynamically late binding primary processes kind dynamic allocation convenient system previous information arriving processes load information previous static process allocation algorithms 1 3 proposed active replica computing environment exhibit poor performance passive replica computing environment since designed either maximum reliability run assumption load backup process exactly primary achieve loadbalancing given computing model consider distribution primary backup processes load increment added nonfaulty node event fault paper organized follows next section presents mathematical formulations allocation problem shows nphard section 3 basic primitives allocating processes addressed heuristic process allocation algorithm given solve problem defined section 2 section 4 analyzes expected performance proposed allocation algorithm compares performance algorithm another allocation method finally section 5 summarize discuss significance results 21 system model faulttolerant multicomputer system considered paper consists n nodes processors tolerate fault process replicated executed pair referred primarybackup process pair paper shall consider possibility single node failure however using backup proc esses model extended allow one fault 9 primary processes allocated node however one restriction placement backup process primary backup processes cannot allocated node assumed primary processes running j kim h lee department computer science engineer ing pohang university science technology san 31 hyoja dong pohang 790784 korea email jkimheejopostechackr lee department electrical engineering pohang university science technology san 31 hyoja dong pohang 790784 korea manuscript received 31 aug 1995 revised information obtaining reprints article please send email transcomcomputerorg reference ieeecs log number c96308 system cpu loads primary backup processes known advance assumption load requirement unrealistic since many online transaction systems run processes continuously 5 fig 1 shows faulttolerant multicomputer system processes running system fig 1 primarybackup processes running faulttolerant multicomputer system primarybackup process model considered paper actually used experimental commercial systems 5 6 7 tandem nonstop system 5 nonstop system every process identical backup process allocated different node backup process executed concurrently primary process inactive mode prepared assume function primary process event primary process failure guarantee backup process information necessary execute required function primary process sends periodic checkpoint messages backup process faultfree situation cpu load backup processes much less respective primaries actual load backup process determined interval number checkpoint messages sent primary process backup process different percentage primary processs cpu load fault occurs backup processes primary processes running faulty node take role primary proc esses backup process executed continuously starting last point received valid checkpointing message primary process therefore cpu load backup process becomes primary loadbalancing required utilize system resources evenly thereby enhancing performance system reported approximation algorithm proposed bannister trivedi 3 nearoptimal loadbalancing result backup processes cpu load primaries however situation cpu load backup process different occurrence fault system maintain balanced load fault cpu loads newly activated backup processes increase loadbalancing process allocation problem considered find static process allocation algorithm balances cpu load every node faultfree situation also balances cpu load fault system algorithm consider cpu load increment node event fault general impossible nodes exactly cpu load thus quality loadbalancing measured either deviation average proces sors loads load difference node highest load node lightest load parameters approach zero system approaches balanced load consider process allocation optimal respect loadbalancing change placement processes leads higher loadbalancing measure 22 notation following notation used formulate allocation problem n number nodes number primary processes backup processes also exist load primary process load backup process primary process allocated node j 0 otherwise process allocated node j 0 otherwise node j failed 1 otherwise load increment added node j fault occurs kth group backup processes primary processes assigned node j sum load differences backup group b jk total load node j set processors loads node j failed set processors loads faulty nodes set processors loads one faulty node standard deviation load set p difference maximum minimum load load set p objective cost function used 23 formal problem description loadbalancing process allocation problem represented constrained optimization problem let us assume n nodes processes system primary process backup process total number primary backup processes 2m one prominent constraint allocation primarybackup process pairs able tolerate single fault node primary process backup allocated node thus 21 point let us define set n element 0 n processor status vector form 1 2 n oe 0 1 1 allone vector nodes faultfree k vector node k faulty load increment added node j event fault node k represented hthus total load increment node j load node j denoted pj sum load fault occurrence load increment incurred upon occurrence fault 23 commonly used metric evaluating loadbalance nodes standard deviation processor load 3 standard deviation load node k faulty represented follows f represents number faulty nodes second term bracket represents average pj number backup processes becomes less occurs therefore first second expressions 21 longer valid fault occurs 24 average load live nodes computed dividing total load number live nodes n f since consider possibility single fault f either 1 0 another metric used loadbalancing process allocation problem load difference node heaviest load node lightest load load difference denoted f given set process loads p represented follows set process loads failure represented p non set process loads node failure represented p faulty paper load difference used objective cost function two reasons first load difference reflects goal loadbalancing closely standard devia tion illustrated following two scenarios first scenario one node exceptionally large load others slightly less loaded average nodes second scenario nodes somewhat loaded average nodes somewhat less loaded average suppose standard deviations scenarios load difference different case latter scenario preferable former since exists one heavily overloaded node former scenario measurement f indicate latter scenario better second reason standard deviation requires computation load difference loadbalancing process allocation problem problem finding values x ij ij possible j minimize multiple cost functions fp non fp faulty constraint given 21 two main approaches solving optimization problem involves multiple objective functions 10 one approach solve problem number times objective turn solving problem using one objective functions objective functions considered constraints approach build suitable linear combination objective functions optimize combination function case necessary attach weight objective function depending relative importance pa per second approach used formulate loadbalancing process allocation problem define new objective function relative weights importance fault occurrence respectively assume weights value ie w objective function optimal allocation assignment processes minimizes objective cost function 24 complexity optimal allocation let us consider following two set assignment problems defined kgrouping problem restricted grouping problem kgrouping problem given sets k positively weighted elements set exist assignment elements k groups two elements set assigned group group weight sum restricted grouping problem rgp given n sets ii assigned group g exist assignment elements n groups g ng n 1n two elements set assigned group group weight sum theorem 1 kgp npcomplete theorem 2 rgp npcomplete paper proofs theorems lemmas omitted due lack space interested reader obtain proofs 11 kgp problem reduced faulttolerant loadbalancing process allocation problem sets contains one primary process k 1 backup processes weight element load process let us change kgp problem adding n sets changing grouping requirement n groups formed recall n number nodes new n sets weight first element equal average k sets sum previous mk element weights divided k weights remaining assigned 0 solution modified kgp problem solution original kgp problem thus since modified kgp problem shown np modified kgp problem npcomplete modified kgp problem equivalent load balancing problem processes thus follows problem minimizing fp non also nphardwhich turn implies problem minizing nphard hence propose heuristic approximation algorithm costeffective results well balanced processor load occurrence fault section first present basic primitives process allocation form core algorithm heuristic algorithm presented example complexity proposed algorithm analyzed 31 basic primitives process allocation section assumed processes allocated one one allocated processes reallocated nodes allocate processes one one three questions consider first better assign process lightly loaded node rather heavily loaded node minimize f second better assign process less load prior process load minimize f third two ordered sets n elements two sets combined one set adding one element set two sets combined minimize f following lemmas address questions one one lemma 1 0 1 n lemma 1 implies process allocated node minimum load first minimize f function allocp x represents allocation x lightly loaded node p1 p ordered set n ele ments ie allocp lemma 2 given ordered set p n elements x 0 implies processes load allocated prior processes less load minimize f lemma 3 given two ordered sets n elements p 1 p 2 f maximally reduced two sets merged adding element largest weight one set element smallest weight set ie merged unordered set p lemma implies merging two ordered sets proposed lemma increase f two ordered sets 32 twostage allocation proposed heuristic algorithm satisfies allocation primitives discussed works two stages first stage primary processes allocated using standard load balancing algorithm used greedy method allocates process highest load node lowest load shown lemmas 1 2 method minimizes f second stage backup processes allocated considering load increment added node event fault let us assume algorithm currently working node j backup processes whose primary processes assigned node j divided approximately equal incremental load event fault node j n 1 groups backup processes finally allocated n 1 nodes excluding node j based actual backup loads occurrence fault allocation balances total actual load node faultfree situation grouping backup processes according load increment case fault balances load fault occur algorithm formally described twostage algorithm stagel allocate primary processes primary processes descending order cpu load allocate primary process node minimum load highest load lowest allocate backup processes following steps node compute load difference primary process backup process primary processes assigned node sort descending order backup processes using load difference divide backup processes n 1 groups approximately equal incremental load assigning backup process group smallest load order sorted list previous step computer actual backup process load group following nn 1 backup groups generated steps groups using actual loads descending order sort n nodes using current loads ascending order allocate backup group node minimum load however backup group corresponding primary processes node one backup groups already allocated node comes node backup group allocated choose node nexttotheminimum load allocation backup processes important part algorithm node backup processes first divided n 1 groups using load difference primary process backup load difference amount load increment incurred upon occurrence fault next algorithm computes actual load group using actual load backup processes total number backup groups nn 1 group assigned nodes depending actual load allocate backup group check whether preallocated backup group comes node tobe allocated backup group case select node nexttotheminimum load purpose dividing backup processes n 1 groups node guarantee node approximately equal amount load increment hence system balanced load fault occurs purpose computing actual load group assigning groups based actual loads guarantee processors load balanced occurrence fault therefore balance processor load well occurrence fault allocation nn 1 backup process groups loadbalancing shown fig 2 figure b jk denotes one groups backup processes primary processes assigned node j hence allocated node except node j tolerate fault node j problem allocating grouped backup processes rgp problem discussed section 24 detailed example running twostage algorithm found 12 fig 2 backup groups allocation problem 33 algorithm complexity time complexity stage algorithm analyzed follows primary allocation use general sorting algorithm whose running time om log sort primary processes allocating primary processes n nodes requires om log n time process updating highest value times priority queue backup allocation let us consider allocation worst execution time primary processes assigned one node sorting backup processes takes om log time dividing backup processes n 1 groups equal incremental load computing actual loads takes om log n time grouping repeated n times requires onm log sorting nn 1 backup groups requires 2 log n time sorting n nodes finding proper node allocate one nn 1 groups requires log n time thus allocating nn1 groups requires onn 1 n log n time time complexity stage thus hence total time complexity two stage allocation algorithm onm log nm assuming number processes much larger number nodes n 2 execution time bounded onm log nm reasonable execution time process allocation time complexity obtained based worst case scenario primary processes allocated one node assume primary processes evenly distributed time complexity becomes om log section performance twostage algorithm estimated analysis compared related work using simulation 41 expected performance proposed allocation algorithm consists three parts load balancing first primary processes allocated nodes second backup processes node grouped basis primarybackup load differences third backup process groups allocated node using actual loads following lemmas theorems estimate performance proposed algorithm lemma 4 given primary processes decreasing loads load difference node heaviest load node lightest load allocation primary processes proposed algorithm load nth smallest primary process p mn1 lemma 5 load difference node heaviest load node lightest load allocation backup processes bounded r f r maximum ratio backup process load primary theorem 3 expected performance proposed algorithm occurrence fault non f f r r theorem 4 objective cost function proposed algorithm f f c h r r next subsection show comparison simulation bound serve quick approximation actual value 42 performance comparison subsection analyze performance twostage algorithm using simulations note previous research loadbalancing passive replicas closest research kind bannister trivedis work loadbalancing active replicas 3 thus algorithm compared bannister trivedis process allocation bt algorithm bt algorithm active replica model works follows allocating n processes r replication sort n processes descending order allocate r replicas task r least loaded nodes process allocation bt algorithm proven nearoptimal assumption backup processes exactly load primaries 3 bt algorithm applied problem loadbalancing passive replicas follows first primary backup processes sorted descending order cpu load starting highest load process process allocated node minimum load node minimum load allocating backup process node primary process already allocated backup process allocated node next smallest load environment parameters used simulation fol lows keep total load node 100 load primary processes chosen randomly range 02 2 times 100 n 1m based uniform distribution load backup processes also chosen randomly 5 10 load primaries also based uniform distribution fig 3 shows nodes load processes allocated using bt algorithm assumed number nodes n eight horizontal dotted line figure represents average load faulty system solid line represents average load faultfree system figure also shows load difference maximum minimum load number primary processes varies 50 300 fig 4 shows simulation results using twostage allocation algorithm parameters number primary processes 150 load difference maximum minimum load approximately 2 3 fig 4 contrast fig 3 shows load difference maximum minimum load almost 25 total load bt algorithm used reason bt algorithm shows poor performance allocation backup processes done without considering load variation occurrence fault load differences f minimum maximum load occurrence fault shown fig 5 algorithm results obtained nodes upper two lines show fp faulty two algorithms fault occurred one node system lower two lines show occurrence fault seen occurrence fault fp non using twostage allocation algorithm similar bt algorithm however occurrence fault fp faulty using twostage allocation algorithm significantly less using bt algorithm next experimented effect number nodes system simulation conducted varying number nodes keeping number processes fixed simulation results shown fig 6 following figures simulation results fault occurrence combined represented shown 26 upper two lines show simulation results number processes 200 lower two lines show simulation results number processes 400 increases number nodes increases result expected since number processes allocated node decreases number nodes increases number processes fixed figure shows twostage allocation algorithm significantly better bt algorithm fig 7 shows simulation results number processes varied 50 300 number nodes fixed eight upper line shows bt algorithm used simulation middle line upper bound algorithm based theorem 4 lower line shows simulated result twostage algorithm number processes increases decreases since number processes per node increases figure confirm easier balance load system many processes small loads rather processes large loads previous figures assumed backup processes 5 10 load primary processes next compare performance two algorithms varying load backup processes 10 100 primaries backup process load ratio r fig 8 load backup processes chosen randomly 50r 100r primary process load order provide variance backup process load tested 200 processes eight nodes 400 processes nodes twostage allocation algorithm shows better performance fig 8 however load backup processes approaches 100 primary process load algorithms similar performance simulation 100 means backup process 50 100 primary process fig 3 minimum maximum load using bt algorithm fig 4 minimum maximum load using algorithm fig 5 f fault occurrence fig 6 affected number nodes fig 7 affected number processes fig 8 affected varying load ratio r backup processes result implies bt algorithm better performance backup process load primary process conclusion loadbalancing static process allocation algorithm faulttolerant multicomputer systems proposed analyzed faulttolerant process model considered paper passive process replica model passive replica process inactive normal operation becomes active main active process becomes faulty node active process running becomes faulty load passive replica varies occurrence fault loadbalancing problem passive replicas formalized constrained optimization problem since optimal process allocation nphard problem heuristic approximation algorithm proposed proposed algorithm compared loadbalancing algorithm active replicas proposed bannister trivedi 3 using simulations simulation results show proposed algorithm significantly better performance passive replica model also shown system better load balance divide big load process many small load processes main contribution paper presentation analysis new static loadbalancing algorithm passive replica faulttolerant process model proposed static process allocation algorithm applicable online transaction processing realtime systems currently working extending algorithm handle dynamic situation also plan study problem finding allocation algorithm guarantees optimal performance reliability time acknowledgments research supported part kosef grant 941 09000552 etri contract 94231 preliminary version paper presented 25th ftcs r static allocation process replicas faulttolerant computing systems task allocation maximizing reliability distributed computer systems task allocation faulttolerant distributed systems active replication delta4 reliable system design theory practice using passive replicates delta4 provide dependable distributed computing transactionbased faulttolerant computing distributed systems parallel computing networks workstations paralex faulttolerant process allocation load balancing model building mathematical programming load balancing process allocation faulttolerant multicomputers process allocation load distribution faulttolerant multicomputers tr ctr j ray optimization distributed objectoriented systems addendum 2000 proceedings conference objectoriented programming systems languages applications addendum p153154 january 2000 minneapolis minnesota united states j ray luqi valdis berzins optimizing systems work schedules stochastic approach proceedings 3rd international workshop software performance july 2426 2002 rome italy sunggu lee realtime wormhole channels journal parallel distributed computing v63 n3 p299311 march