tacoma retrospective seven years tacoma project investigated design implementation software support mobile agents series prototypes developed experiences distributed applications driving effort paper describes evolution tacoma prototypes primitives supports primitives used building distributed applications b introduction tacoma project primary mode investigation build prototypes use construct applications reflect experience move none systems built productionquality department computer science university troms norwaytacoma work supported nsf norges forskningsrad norway dits grant 112578431 126107431 department computer science cornell university ithaca new york 14853 supported part arparadc grant f306029610317 afosr grant f496200010198 defense advanced research projects agency darpa air force research laboratory air force material command usaf agreement number f306029910533 national science foundation grant 9703470 grant intel corporation views conclusions contained herein authors interpreted necessarily representing ocial policies endorsements either expressed implied organizations us government intended dramatic collapse namesake 1 tacoma narrows bridgeplayed important role evolution suspensionbridge design pet92 teaching importance certain forms dynamic analysis spirit set tacoma project build artifacts stress learn collapse version tacoma provided framework support execution programs called agents migrate host host computer network giving agent explicit control executes attractive variety technical reasons agentbased applications make ecient use available communication bandwidth agent move processor data stored scanning otherwise digesting data locally move carrying relevant subset read moving computation datarather moving data computationsignificant bandwidth savings may result agents invoke operations servers locally hence cheaply becomes sensible servers provide lowlevel riscstyle apis agent synthesize api operations specifically tailored task contrast traditional clientserver distributed computing communications cost must amortized server operation invocation servers provide generalpurpose highlevel apis agents execute autonomously require continuous connectivity servers execute makes agent abstraction ideal settings network connections intermittent wireless forms ad hoc networks agentbased systems also provide attractive architecture upgrading functionality fielded software systems software producers rightly consider extensibility crucial preserving market share unusual web browser support downloading helper applications enable new types data presented much pc software installed upgraded downloading files internet logical next step system architecture performing upgrade require overt action user agents support architecture 1 name tacoma acronym troms cornell moving agents version innovation tacoma v10 basic agent support tacoma v12 multiple language support remote creation tacoma v20 rich synchronization running agents tacoma v21 agent wrappers lite small footprint pdas tos factoring mobility data transformation table 1 important versions tacoma platform engineering marketing justifications aside agents raise intriguing scientific questions agent instance process identity processor execution occurs made explicit might first seem change process abstraction largely cosmetic processor identities explicit certain communication becomes implicit rather sending messages access change information another site agent visit site execute behalf computational model altered fundamental scientifically interesting ways example coordinating replicas agentsprocesses move site sitein order implement faulttolerance requires solving problems arise stationary processes replicated new challenges arise sharing interaction agents enable mobile code admits attacks hosts well hosts order understand scientific engineering research questions raised new programming model experimented series tacoma prototypes prototype provided means agents migrate provided primitives agents interact one another important versions tacoma listed table 1 version 10 provided basic support agents written tcl language version 12 added support multiple languages agent creation remote hosts version 20 new synchronization mechanisms added agent wrappers innovation version 21 facilitated modular construction agents enable support agents small pda devices built tacoma lite small footprint tos recent version tacoma allows mobility data transformation aspects agents cleanly separated recurring theme work consider tacoma form glue composing programs rather providing fullfledged computing environment writing programs scratch almost start tacoma avoided designing prescribing language programming agents languageindependence allows agent written language best suits task hand also allows applications constructed multiple interacting agents written dierent language clear goal languageindependent support program migration broad consequences abstractions tacoma supports rest paper organized follows section 2 describes primitives experimented various tacoma versions novel approach structuring agentsbased wrappersis subject section 3 section 4 explores need agent integrity solution describes approaches section 5 presents experiences connection building mobile agent application agent support pdas cell phones discussed section 6 section 7 describes recent developments tacoma section 8 contains conclusions 21 abstractions storing state moving one host next agent whose future actions depend past execution must accompanied state strong mobility state capture automatic completenot unlike done operating systems support process migration zay87 tlc85 pm83 system extracts state process moves another processor starts process running determining state components extract given process proved tricky expensive process migration presence runtime stacks caches various stateful libraries reincarnating state process machine architecture diers one process running also known dicult problem nevertheless strong mobility supported telescript whi94 agenttcl gra95 ara ps97 convenience application programmers strong attraction weak mobility programmer agent must identify write code collect whatever state migrated java provides object serialization facility extracting state java object translating representation suitable transmission one host surprising weak mobility many javabased agent systems aglets lo98 mole bhrs98 voyager objectspace adoptespecially since capturing execution state java thread without modifying jvm impossible shown sumatra ars97 note however javas object serialization mechanism incorporates entire object tree rooted single object unless agent programmer careful design data structures avoid certain links high costs associated strong mobility incurred tacoma supports weak mobility decision derives goals runtime costs programmer control providing languageindependent support agents agent programmer understands information actually needed agents future execution presumably agent programmer also understands information stored tacoma agents programmer responsible building routines collect package state needed agent migrates folders briefcases file cabinets state tacoma agent represented migrated briefcase agent associated access one briefcase briefcase comprises set folders named ascii strings unique briefcase turn folders structured ordered lists byte strings called folder elements various functions provided tacoma manipulate data structures operations create folders delete folders well add remove elements folders transport storage tacoma archive unarchive operations serialize restore briefcase folder ordered list treated either stack queue queue find folders particularly useful implementing fifo lists tasks stack useful saving state backtrack trajectory return agents source must state accompany agent migrates may equally important state remain behind unnecessary perhaps even costly migrate data used given site visited secure data best moved untrusted sites data may saved temporarily intermedicate locations sitelocal state allows agents visit site communicate even never coresident site tacoma therefore provides file cabinet abstraction store collections folders specific site site may maintain multiple file cabinets agents create new file cabinets needed site visit every file cabinet site named unique ascii string choosing large random name agent create secret file cabinet guessing name hard therefore agents told name file cabinet able access contents file cabinets descriptive wellpublicized names well suited sharing information agents whereas briefcase accessed single agent file cabinets accessed multiple agents support concurrent access agent specifies opening file cabinet whether updates applied immediately updates applied atomically file cabinet closed note tacomas file cabinet briefcase abstractions preclude using tacoma support agent programming language providing strong mobility runtime language would employ one folders storing programs state experience far however programmers language diculty working directly folders briefcases file cabinets storage abstractionit necessary hide structures behind abstractions javas object serialization used tacoma agents written java pythons associative arrays used tacoma agents written python language access contents briefcases folders historical reasons tacoma folders store named ascii strings xml kqml ffmm94 widespread use project started would probably selected one representation approaches fact machine languageindependent data representation format suces 22 primitives agent communication tacoma agents communicate using briefcases tacoma meet primitive supports interagent communication allowing one agent pass briefcase another operational semantics evolved gained experience writing agent applications functionality added clear need demonstrated meet tacoma v12 initially similar local cross address space procedure call execution agent caused another agent started site copy briefcase bc provided shared blocked executed finish terminate execution arguments passed briefcase folders results returned briefcase first version meet soon extended allow communication agents dierent sites addition means provided invoking agent continue executing parallel agent invoked execution host bc block agent caused execution suspend another agent executes completion site host copy briefcase bc block keyword omitted execution would proceed parallel tacoma v20 nonblocking variation meet replaced two new primitives activate await execution await agent blocks agent names meet activate agent name could specified await cause block executes corresponding meet activate execution agent meet activate first checks see agent blocked await activated restarts isnt new instance created executes concurrently meet await activate primitives used agent programmers implement broad range synchronization functionality including adastyle rendezvous operation eschewed building direct support rendezvous highlevel constructs often one hand expensive hand crude approximation really needed specific application lowerlevel primitives like activate await composed suer diculties equivalent coroutines adequately powerful one foray direction highlevel synchronization constructs waiting room abstraction enabled agents store state briefcases suspend execution application programmers found mechanism costly cumbersome use service agents implementation details tacoma runtime site makes various services available agents executing site form service agents much way ara ps97 agenttcl gra95 agent obtains service executing meet names appropriate service agent tacoma v10 example site provided taxi agent migrate agent site named wellknown folder briefcase extended functionality meet tacoma v12 obsoleted taxi agents goal supporting multiple languages led us augment set service agents new class virtual machine service agents host ran virtual machine service agent programming language could executed host virtual machine service agent would execute code found xcode folder example agent would migrate site host execute java program p storing p javacode folder executing meet naming virtual machine service agent java jvmhost vm bin virtual machine service agent executes native binary exe cutables allow heterogeneity machine architectures associating dierent briefcase folder dierent type machine vm bin identifies folder corresponds current machine extracts binary runs result obvious security reasons virtual machine service agents must guarantee agents execute interact underlying operating system remainder sites environment tacoma primitives provide service agents however broader access environmentthey form trusted processes addition tacoma allows agents accompanied digital certificates stored xcodesig folder certificates interpreted service agents define accesses permitted signed code current version system gives agent accompanied certificate wrapper vmtcl ag ag ag vmjava vmbin firewall operating system library library library library figure 1 architecture tacoma v21 complete unrestricted access environment signed code serious realization would associate types access particular signers would also allow signer specify certificate additional restrictions access figure 1 illustrates overall architecture recent ie post v21 tacoma systems host runs collection virtual machine service agents responsible executing agents contain library routines agent synchronization communication well briefcase file cabinet folder manipulation also firewall process used coordinate local meetings send messages firewalls sites order migrate agent one site another thus meet activate operations forwarded local firewall handling 3 wrappers structuring agents tacoma wrapper intercepts operations performed agent either redirects performs pre andor postprocessing eect similar stackable protocol layers seen example ensemble vrbh wrapper tacoma agent redirection performed tacoma runtimespecifically firewall virtual machine service agents responsible interpreting agent code create wrapper appropriate virtual machine service agent contacted using meet briefcase whose folders detail operations ie meet executions intercept give code run operations intercepted wrapped agent wrapper must executed host may use dierent virtual machine service agents therefore may written dierent programming languages wrapped agent wrapped creating onionlike structure outside onion appears move execute monolithic unit tacomas perspective wrapper separate agent dierent wrappers thus could execute security domains corollary wrapper could serve trusted process accessing functionality agent wraps cannot date experimented three wrappers remote debugger wrapper tacoma remote debugger intercepts operations going coming agent wraps operating passive mode notification sent using activate remote monitor passing operation unmodified operating active mode remote debugger performs meet specified controller change briefcase passing operation experience remote debugger quite positive became operational need explicit remotedebugging support tacoma runtime system disappeared reference monitor wrapper wr codeauth wrapper form reference monitor wrapped around untrusted service agents imposes authorization checks preserve integrity tacoma runtime environment implementing security functionality using wrapper avoided modify service agents individually also wr codeauth checks digital signatures rejects operations allowed accompanying certificates legacy migration wrapper tacoma webbot wrapper developed change legacy web crawler mobile agent see section 5 wrapper moves crawler code site site wrappers currently development include one provide faulttolerance using nap protocols see section 4 one implement multicast communication wrappers added tacoma v21 sj00 found agents applications becoming large unwieldy code support functionality might well included tacoma runtime hadnt adding code runtime would worked experimental setup clearly would scaleup large deployments control whether upgrades would applied tacoma runtime wrappers conceived means provide extensibility base system implementation wrappers wrapped agent helpful distinguish core inner wrappers outer ones core inner wrappers move host host outer wrappers move added host means enforce policies make sitespecific functionality available typically outer wrappers trusted thus enhanced privileges wrapped agent moves site site meet issued one agents comprising core inner wrappers meet intercepted surrounding wrapper archives briefcase intercepted meet stores folder briefcase reissues meet interception wrapper one layer definition meet issued innermost outer wrappers intercepted another wrapper meet thus handled tacomas runtime system eect agent migrates specified host reactivated actually outermost inner wrappers wrapper however extract briefcase folder reinstantiate agent wrapped process continues recursively inner wrappers core restarted agent integrity benefits easily implemented computations span multiple hosts must tempered realization computations must protected faulty malicious hosts agent integrity problem hosts must protected faulty malicious agents host integrity problem concentrated tacoma agent integrity problem expertise within project problem area neglected researchers comparison host integrity problem attracted considerable interest research community replication approaches open distributed system agents comprising application must survive malicious failures hosts visit must also resilient potentially hostile actions hosts turn attention faulttolerance protocols setting replication voting enable application survive failures hosts visits hosts visited agents application however masquerade confound replicamanagement scheme clearly correctness agent computation must remain unaected hosts visited computation one example studied extensively computation involving agent starts source host visits succession hosts called stages ultimately delivering results sink host may source assumed stages priori determined say dynamic loadleveling used match processors tasksonly execution stage stage determined diculties making pipeline computation faulttolerant illustrative associated complex agentcomputations pipeline computation described faulttolerant every stage depends previous stage single malicious failure could prevent progress could cause incorrect data propagated therefore first step towards achieving faulttolerance triplicate host stage 2 three replicas stage takes input majority inputs receives nodes comprising stage 1 sends output three nodes determines comprise stage 1 even replication system tolerate one faulty host anywhere network two faulty hostsin pipeline elsewhere could claim last stage foist bogus majority value sink problems avoided sink detect ignore assume execution stage deterministic assumption relaxed somewhat without fundamentally aecting solution masquerading agents might consider passing privilege source sink one way encode privilege using secret known source sink however source cannot simply send copy secret hosts comprising first stage pipeline one faulty could steal secret masquerade last stage avoid problem series protocol based n threshold schemes sha79 developed details discussed sch97 primary backup approaches redundant processing expensive approach faulttolerance previous subsection may always applicable furthermore preserving necessary consistency replicas done eciently within localarea network replication voting approaches also unable tolerate program bugs thus faulttolerance method based failure detection recovery often better choice agentbased computations must operate beyond local area network must employ potentially buggy software developed faulttolerance method presented jms method roots well known primarybackup approach whereby one backups maintained backup promoted primary whenever failure primary detected method backup processors implemented mobile agents called rear guards rear guard performs recovery action continues computation failure detected call protocol nap 3 key dierences nap primarybackup approach unlike backup response failure continues executing program running recovering rear guard executes recovery code recovery code identical code executing failure occurred need rear guards executed single fixed set backups stead rear guards hosted recently visited sites much novel nap stems need orchestrate rear guards computation moves site site 3 nap stands norwegian army protocol protocol motivated strategy employed first authors army troop moving hostile territory nap provides faulttolerance low cost replication needed faulttolerance obtained leaving code hosts mobile agent visited recently additional processors required recovery mobile agent performs response crash something specified programmer able demonstrate concurrent failures possible latency nap subsumed cost moving another host common method terminating action tacoma agent however nap cannot implemented system experience partitions failuredetector implemented system 5 web crawler application web crawlers follow links web servers retrieve data found processing server implemented wide variety languages 4 perl c dominant building hyperlink validation agent existing freely availablebut stationaryweb crawler application program hoped evaluate whether moving tacoma agent data leads better performance reducing communication costs whether tacoma used form glue building agent applications existing components presumed tacoma would available sites visited crawler agent made assumptions language used implement original web crawler web crawler worked chose webbot 5 w3c organization basis validation agent available binary executable dierent common machine architectures webbot never intended serve part agent agent realization used tacomas vm bin virtual machine service agent execute webbot binaries various dierent kinds hosts ahoythehomepagefinderhtml 5 httpwwww3corgrobot since vm bin unsafe configured run binaries accompanied certificate signed trusted principalthe wr codeauth wrapper finally designed wrapper called webbot extend functionality w3c stationary webbot application execution agent wrapper moves webbot binary specified set web servers one time restricts webbot checking local links storing folder remote links encountered checking remote site later visited relative ease crawler agent built confirms tacomas primitives facilitate easy construction agents existing components evaluate performance crawler agent used web server university troms 3600 pages totaling 381 mbytes data webbot first crawled server remotely cornell university dispatched crawler agent cornell crawl web locally troms unix program traceroute reported 12 hops webbot web server remote case 2 hops local case found crawling took 1941 seconds webbot run remotely took 474 seconds webbotbased crawler agent run detailed experimental data found sj00 6 tacoma support thin clients runtime footprint tacoma renders system unsuitable execution small portable devices thin clients pdas cellular phones also tacoma provide adequate support disconnected hosts since many claimed agents would ideal structuring applications run devices whi94 hck95 gckr00 built tacoma lite version tacoma devices hosting palmos hoped gain experience structuring distributed applications involving thin clients mobile agents tacoma lite programming model diers tacoma handling disconnected hosts tacoma execution meet names gateway sms agent email agent email agent notification server sensor sensor sensor figure 2 sms messages mobile agents disconnected host simply fails tacoma lite supports hostels agents trying migrate disconnected site agents hostel queued destination host connects forwarded manner similar docking system dagents system kg99 kgn runtime footprint problem solved tacoma lite using existing functionality portable deviceemail http supportso full tacoma functionality located larger server elsewhere system jrs96 transport mechanism used sending agents receiving results cellular phones gsm short message service sms storeandforward service like smtp rgt gsm base stations buer messages delivery target phone disconnected bridge gsm ip networks deployed sms ip gateway available telenor sms messages cellular phones received gateway processor converted email messages sent ip network delivery tacoma converted briefcase meet issued service agent designated original sms message agent communicate cellular phone meet service agent service agent sends briefcase gateway processor generates suitable message display cellular phone figure 2 summarizes infrastructure handling communication cellular phones tacoma sms messages cannot exceed 160 characters means agents constructed cellular phone users must terse precludes use generalpurpose programming language applicationspecific languages appear viable solution time beingat least capacity small devices grows first application built cellular phone weather alarm system jj99 system one would write ws request notification ever windspeed ws greater gt 20 meters per second temperature less lt degrees whenever predicate specified agent evaluates true short notification sent back cellular phone obviously use applicationspecific languages limits class agents written user cellular phone 7 factored agents beyond wrappers course tacoma project become clear developing agent single monolithic object bad idea forces agent programmer deal unnecessarily complexity adopting wrappers agents start developing infrastructure allow better agent structuring recently exploring new approach leverages characteristics intrinsic agents separates three concerns function deals data transformation mobility deals determining sites agent visit mechanisms involved transferring data control management deals glue controls agents function mobility new structuring approach embodied latest tacoma prototype tos defines language programming carriers management parts agents 6 design tos outgrowth work developing set applications distributed management generic software management 6 name carrier chosen reflect intended usage carrier information software platform distributed resumedatabase search engine joh98 peerto peer network computing platform distributed intrusiondetection system ljm01 became clear application much common lacked structuring tools make commonality apparent agents code developing library carriers constructing classes agent applications largest eorts opengrid platform based toshence open diverse function mobility management regimesfor running highly parallel computations fk98 highly parallel computations often structured according controllerworker paradigm tos different carriers invoked opengrid facilitate computations variety network topology computer configurations carriers tos standard library used install configure legacy software grids computers carriers written specifically opengrid provide communication infrastructure used controllers workers well providing dierent levels faulttolerance programmers parallel applications opengrid often required write carriers need implement algorithms workers necessary controller conclusions methods structuring distributed computations seem fall fashion clientserver distributed computing middleware groupware mobile agents peertopeer computing one proved solution distributed application structuring problems expect find magic bullet hides details expense others computation could written using diers one ease computation expressed understood details brought fore details hidden easy say hard say one size never going fit expectations contrary naive much research mobile agents focused issues concerning mechanisms abstractions tacoma project took strong stand issues agnostic others religiously avoided designing language oering languagebased guarantees wanted agents serve glue building distributed applications choosing language class languages particular representation data would artificially limited applicability experimental proto types generality folder meet mechanisms decouples tacoma choice language used writing individual agents program language stored folder moved host host language given host supports used program portion agent executed host generality particularly useful using agents system integration existing applications rewritten cots components accommodated similarly took view agents responsible packaging transferring state site siteadopting became known weak mobility awkward might seem problem automatically performing state capture understood quite complex choice mechanisms managed avoid confronting problem however higherlevel programming models state invisible programmer automatic state capture becomes necessity cost moving agent one processor cannot predicted designing applications meet performance goals becomes dicult work performed auspices tacoma project concerned new mechanisms abstractions work faulttolerance later security systems agents examples test applied new approaches developed ask mobile agents enables solution answer often surprising work faulttolerance learned replicas move votes must authenticateda problem ignored traditional tmr triple modular redundancy replication pointtopoint communication channels provide hardwareimplemented authentication work security led new enforcement mechanism called inlined reference monitors finegrained access control quickly realized mechanism real dependence unique mobile agents investigation changed course concentrated implementing principle least privilege broader settings agentbased security work discussed paperin sense outgrown world mobile agents lack benchmark applications clearly hampered research area mobile agents existence applications would allow researchers evaluate choices make might settle de bates applications would also give insight problems important solve taken dearth benchmarks symptom mobile agents solution search problem one interpretation interpretations also plausible could mobile code aords expressive power used exploiting new generation applications emerge become comfortable expressive power also could applications simultaneously exploit flexibility mobile agents rare applications take advantage dimensions rare never considered paradigmatic acknowledgements authors would like express gratitude keith marzullo dmitrii zagorodnov university san diego yaron minsky cornell university many students involved tacoma project university troms years anonymous reviewers provided many detailed helpful suggestions earlier version paper r language resourceaware mobile programs kqml agent communication language mobile agents motivations state art agent tcl transportable agent system mobile agents good idea mobile software mobile hardware experiences tacoma pdas ubiquitous devices united enabling distributed computing mobile code nap practical faulttolerance itinerant com putations mobile agent applicability supporting broad internet access tacoma mobile code future inter net agent tcl targeting needs mobile computers tos kernel support distributed systems management programming deploying java mobile agents aglets engineer human role failure successful design process migration demosmp architecture ara platform mobile agents gsm 0705 short message service sms cell broadcasting service cbs towards faulttolerant secure agentry share secret adding mobility nonmobile web robots preemtable remote execution facilities vsystem building adaptive systems using ensemble telescript technology foundation electronic marketplace attacking process migration bottleneck tr attacking process migration bottleneck kqml agent communication language building adaptive systems using ensemble grid ubiquitous devices united mobile agents future internet preemptable remote execution facilities vsystem share secret tos supporting broad internet access tacoma programming deploying java mobile agents aglets mole myampersandndash concepts mobile agent system agent tcl towards faulttolerant secure agentry architecture ara platform mobile agents mobile agent applicability sumatra process migration demosmp mobile agents motivations stateoftheart systems ctr j ogrady g p ohare mobile devices intelligent agents towards new generation applications services information sciencesinformatics computer science international journal v171 n4 p335353 12 may 2005 michael luck peter mcburney chris preist manifesto agent technology towards next generation computing autonomous agents multiagent systems v9 n3 p203252 november 2004