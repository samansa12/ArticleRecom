integrating computer algebra proof planning mechanized reasoning systems computer algebra systems different objectives integration highly desirable since formal proofs often involve two different tasks proving calculating even important proof computation often interwoven easily separablein article advocate integration computer algebra mechanized reasoning systems proof plan level approach allows us view computer algebra algorithms methods declarative representations problemsolving knowledge specific certain mathematical domain automation achieved many cases searching hierarchic proof plan method level using suitable domainspecific control knowledge mathematical algorithms words uniform framework proof planning allows us solve large class problems automatically solvable separate systemsour approach also gives answer correctness problems inherent integration advocate approach computer algebra system produces highlevel protocol information processed interface derive proof plans proof plan turn expanded proofs different levels abstraction approach well suited producing highlevel verbalized explication well lowlevel machinecheckable calculuslevel proofwe present implementation ideas exemplify using automatically solved examplechanges criterion rigor proof engender major revolutions mathematics h poincar 1905 b introduction computer development highlevel programming languages made possible mechanisation logic well realisa kerber kohlhase v sorge tion mechanical symbolic calculations could witness last forty years lead two rather disjoint academic fields mechanised reasoning computer algebra meth ods interests traditions even though share common roots none two fields imaginable without underlying foundation mathematical logic mathematical study symbolic calculations leading algorithms methods determination gcd gauian elimination last decade seen move towards integration fields driven insight realworld formal problems often involve mixture computation reasoning hence integration mechanised reasoning systems computer algebra systems highly desirable cf buc85 case particular since deduction systems weak comes computation mathematical objects computer algebra systems manipulate highly optimised representations objects yield formally checkable proof information give explanation remainder introduction briefly summarise key points mechanised reasoning systems well computer algebra systems give short preview integration approach advocated paper nature short description abstract many details simplify considerably 11 mechanised reasoning systems mechanised reasoning systems short mrs following built various purposes mind one goal construction autonomous theorem prover whose strength achieves even surpasses ability human mathematicians another build system user derives proof system guaranteeing cor rectness third purpose consists modelling human problemsolving behaviour machine cognitive aspects focus advanced theorem proving systems often try combine different goals since complement ideal way let us roughly divide existing theoremproving systems three categories machineoriented theorem provers proof checkers humanoriented planbased theorem provers normally systems exist pure form anymore systems like ownomega mega system bcf 97 explicitly tried combine reasoning power automated theorem provers logic engines specialised problem solving knowledge proof planning mechanism interactive support tacticbased proof development environments think combination kekosotex 24061998 1449 v integrating computer algebra proof planning 3 complementary approaches inherits advantages drawbacks tasks domainspecific well domainindependent problemsolving knowhow required difficult tasks often explicit userinteraction provided approach seems general enough cope kinds logiclevel proofs neglects fact many mathematical fields everyday work mathematicians partially consists proving verifying theorems calculation plays equally important role cases tasks proving theorems calculating simplifications certain terms separated often tasks interwoven inseparable cases interactive theorem proving environment provide rather poor support user although theoretically computation reduced theorem proving practical nontrivial cases since search spaces intractable many tasks however search necessary since numerical algebraic algorithms used think kowalskis equation purpose procedures cannot provide control concrete computation 12 computer algebra systems early computer algebra systems cas short developed collections algorithms data structures manipulation algebraic expressions like multiplication polynomials derivation integration functions hea95 abstractly spoken main objective cas viewed simplification algebraic expression determination normal form today broad range systems ranging generally applicable systems multitude systems designed specific applications unlike mrs cas used many mathematicians tool everyday work even widely applied sciences engineering economics high academic practical standard reflects fact study symbolic calculation long established fruitful subfield mathematics developed mathematical theory tools modern systems wol96 cgg common algebraic algorithms integrated comfortable graphical user interface includes formula editing visualisation mathematical objects even interface programming languages case mrs representation languages cas differ system system complicates integration systems well cooperation deficiency attacked 4 kerber kohlhase v sorge openmath initiative avls96 strives standard cas communication protocol currently main emphasis laid standardising syntax computational behaviour mathematical objects properties semantics considered means explicit representation format theorems lemmata proofs specific systems allow specify mathematical domains theories instance systems like mupad fuc96 axiom js92 computational behaviour specified attaching types axiomatisations mathematical objects also falls short comprehensive representation relevant mathemat ics furthermore almost cas fail give explanation proof solution problem hand even though mathematical theories like grobner bases successfully applied theorem proving elementary geometry cho88 kap88 cgz94 wu94 13 contributions paper fact mutual simulation tasks mrs cas quite inefficient daily work mathematicians proving calculating points integration systems since mathematicians want support main activities indeed two independent systems hardly cover needs since many cases tasks proving calculating hardly separable pointed buchberger buc96a integration problem still unsolved expected successful combination systems lead drastic improvement intelligence level support systems paper addresses two immediate questions occurring integration automated reasoning computation systems algorithms integrated underlying mathematical knowledge mutually respected synergy effect achieved correctness problem inherent combination addressed particular results cas integrated proof without completely trust advocate integration computer algebra mechanised reasoning systems using proof planning paradigm approach allows encapsulate computer algebra algorithms meth ods declarative representations problem solving knowledge specific certain mathematical domain proof planning paradigm enables user guide proof fully hand con integrating computer algebra proof planning 5 trol planner turn use computer algebra systems specifications corresponding algorithms met use hierarchic proof plans methodlevel gives suitable granularity integration since allows directly use existing human control knowledge interplay computation reasoning proper integration proof planning approach answers question correctness automatically since corresponding questions solved proof planning area proof plan either rejected tactics executable hence plan cannot used build proof executed later results either planning phase fill possible gaps accepted machinecheckable proof hence proper integration requires computer algebra system produces highlevel protocol information processed interface derive proof plans seamlessly integrated overall proof plan generated problem solving attempt since expanded explicit checkable proof order obtain correctness guarantee combined solution also given principled answer correctness problem feasibility approach advocated sequel verified integrating simple cas theomega mega proof planning system therefore organise paper around experiment describe relevant features system perspective approach requires mode cas generates information possible generate proof plan reason integration standard cas makes major adaptations unavoidable particular necessary change source code systems approach committed particular systems involved particular work reported understood rather proof principle development stateoftheart integrated system moreover make details approach concrete explaining means example cannot easily solved either mechanised reasoning system computer algebra system alone needs combined efforts systems kind 2 related work give short description experiments combine mrs cas roughly categorise three classes respect treatment proofs adopted respect correctness issue describe detail approaches integrating cas mrs essentially mrs master kekosotex 24061998 1449 v 6 kerber kohlhase v sorge cas slave since approach also kind right one course follow converse direction namely approach integration point cas indeed approaches also successfully undertaken see eg cz92 buc96 question granularity integration treated uniformly experiments application cas treated another derived rule inference level tactic calcu lus granularity integration depends granularity calculus tactics involved first category attempts see eg ht93b bhc95 one essentially trusts cas properly work hence results directly incorporated proof experiments least partly motivated achieving broader applicability range formal methods objective definitively achieved since range mathematical theorems formally proved system combinations much greater provable mrs alone however cas complex programs therefore trustworthy limited extent correctness proofs hybrid system questioned minor technical problem remain unsolved foreseeable future since complexity code complexity also mathematical complexity cas permit verification program currently available program verification methods conceptually main contribution integration solution softwareengineering problem pass control programs translating results forth back important subproblem seem cover full complexity interaction reasoning computation found mathematical theorem proving alternative approach formally respects correctness essentially trusts cas additional assumption standing cas introduced essentially formulae derived proved modulo correctness computer algebra system hand see eg ht93b second category ht93a paradigmatic conscious role proofs uses cas oracle receiving result whose correctness checked deductively certainly solves correctness problem approach limited coverage since even checking correctness calculation may scope mrs dont additional information indeed point applicability results cas help cases verification result simpler discovery prime factorisations solving equations symbolic integration calculations symbolic addition multiplication polynomials differentiation verification complex calculation employing cas kekosotex 24061998 1449 v integrating computer algebra proof planning 7 speed proof construction process typically longer calculations types subcalculations contained third approach integrating computer algebra systems particular kind mechanised reasoning system consists metatheoretic extension reasoning system proposed instance bm81 how88 realised nuprl con86 approach constructive mechanised reasoning system basically used metasystem constructive features exploited synthesise correct computer algebra system due bridge rules ground metasystem possible integrate sobuilt cas directly used component theoretical properties metatheoretic extension guarantee original system correct extended system correct method appealing one viewpoint correctness although assumption original also rather complex system must correct hardly expected selfevident nontrivial system disadvantage compared two approaches possible employ existing cas necessary reimplement one strictly formal system given basic mrs course subject limitations posed mathematical software engineering complexities mentioned main problem integrating cas mrs without violating correctness requirements cas generally highly optimised towards maximal speed computation towards generating explanations computations involved cases dealt metatheoretic considerations algorithms adequate lack explanation makes impossible average user understand convince correctness com putation leaves mrs essentially without information two terms equal problematic since computational errors reported even welltested wellestablished cas reported categories approaches last one seriously addresses problem 3omega mega open system integrating computation omega mega proof development system based proof planning paradigm section describe architecture components show supports integration computer algebra sys tems since goal paper present system description ofomega mega document integration computer algebra try concise possible introduce relevant parts kekosotex 24061998 1449 v 8 kerber kohlhase v sorge general architecture proof planner integration possibilities external reasoners 31 proof development environmentomegagammamen entire process theorem proving inomega mega viewed interleaving process proof planning execution verification centred around hierarchical proof plan data structure several integrated tools support user interacting system also available proof planner theory database since methods control knowledge used proof planning ly domainspecificomega mega organises mathematical knowledge hierarchy theories theories represent signature extensions axioms definitions methods make typical established mathematical domains theorem home theory therefore access theorys signature extensions axioms definitions lemmata without explicitly introducing simple inheritance mechanism allows incrementally build larger theories smaller parts give overview part ofomega megas theory database necessary solving extended example figure 1 proof explanation proof presentation one important feature mathematical assistant neglected traditional deduction systemsomega mega employs extension proverb system hf96 developed group allows presenting proofs proof plans natural lan guage order produce coherent texts resemble found mathematical textbooks proverb employs stateoftheart techniques natural language processing due possibly hierarchical nature ofomega mega proofs verbalised one level abstraction selected user summarise view proofs every theorem explicit proof constructed one hand checked proof checker hand system provides support represent proof highlevel form easily readable humans hf96 neither process generating proofs checking fully replaced machine supported human mathematician wants see proof heshe appropriate level abstraction integrating computer algebra proof planning 9 32 proof planning central data structure overall process proof plan data structure pds hierarchical data structure represents partial proof different levels abstraction called proof plans represented directed acyclic graph nodes justified lcfstyle tactic applications conceptually justification represents proof plan expansion justification lower level abstraction computed tactic executed 1 omega mega explicitly keep original proof plan expansion hier archy thus pds makes hierarchical structure proof plans explicit retains applications proof explanation analogical transfer plans proof plan completed justifications successively expanded verify wellformedness corresponding pds verification phase necessary since correctness different components particular external ones like automated theorem provers computer algebra systems cannot guaranteed expansion process carried underlying ndcalculus natural deduction soundness overall system relies solely correctness verifier nd also provides basis controlled integration external reasoning components reasoners results demand transformed subpds level proofs expanded depends sophistication proof checker pointed barendregt bar96 complex proofchecker accepts proofs expressive formalism may drastically reduce length communicated proofs highlevel justifications expanded accepted approach reduces one computer algebra system fully trusted short hierarchical nature pds supports full spectrum user preferences total trust cas partial trust certain levels full expansion proofs detailed calculus level description machine checkable pds constructed automated mixedinitiative plan ning pure user interaction make use integrated tools particular new pieces pds added directly calling tac tics inserting facts database calling external reasoner cf section 33 automated theorem prover computer algebra system automated proof planning adequate 1 proof plan recursively expanded reached proof plan fact fully explicit proof since nodes justified inference rules higherorder variant gentzens calculus natural deduction nd kerber kohlhase v sorge problem classes methods control knowledge already established goal proof planning fill gaps given pds forward backward reasoning hkkr94 proof plans first introduced bundy see bun88 bsvh 93 thus abstract point view planning process process exploring search space planning states generated plan operators order find complete plan given initial state terminal state omega megas proof planner extension wellknown strips algorithm evoked construct proof plan node goal node set supporting nodes initial state using set ops proof planning operators called methods method partial specification tactic metalevel language inomega mega planning combined hierarchical expansion methods precondition abstraction plans found procedure directly incorporated pds separate level abstraction model actual reasoning competence planner user builds upon availability appropriate methods together metalevel control knowledge guides planning momentomega mega provides userdefined method ratings means control use analogy control strategy planner two examples methods displayed section extended exam ple section 34 33 integration computer algebra systems external reasoners according different modes ofomega mega different levels external reasoning system rsys integrated interactive calls rsys represented command callrsys invokes reasoner particular subproblem returns result proof planning rsys represented method whose specification contains knowledge problem solving behaviour option settings rsys justifications rsys serve justification declaratively given subgoal left proved rsys case proof found rsys must eventually transformed pds since prooftheoretic basis ofomega mega automated theorem provers like otter mcc94 described integration hkk 94 necessary proof transformation pds hf96 pursue matter integration kekosotex 24061998 1449 v integrating computer algebra proof planning 11 cas follows paradigm main topic paper develop paradigm case external computations inomega mega see examples three different levels integrations cas intoomega mega example next section go leaves us question transformation cas results pds take idea generating explicit pds seriously also computations neither take existing systems follow approach metatheoretic extensions sinceomega mega classical proof system use constructive logic hand cannot using even cases verification calculation much easier calculation eg integration functions computation needed verifying alone many cases still much complicated automatically checked without guidance instance even proof binomial formula problem computer algebra system needs 70 single steps natural deduction calculus 2 thus using theorem provers rewriting systems find proofs produce unnecessarily large search spaces thus absorb valuable resources hand proofs show remarkable resemblance algebraic calculations suggest use cas instantly compute result given problem also guide proof way exploiting implicit knowledge algorithms propose extraction information trying reconstruct computation mrs result generated seen even case trivial example cas may turn hard task mrs rather extend cas algorithm produces logically usable output alongside actual computation surely cases user would like see proofs level binomial formula explained although novice might want means hierarchical approach proof generation appropriate abstraction level proof presentation chosen user approach use mathematical knowledge implicit cas extract proof plans correspond mathematical computation cas essentially output cas transferable sequence tactics presents highlevel description proof correctness computation cas performed note prove general correctness algorithms involved instead gives proof particular instance computation highlevel description used 2 proofs length among hardest ever found totally automatic theorem provers without domainspecific knowledge kerber kohlhase v sorge produce readable explanation expanded level automatically checked proof checkers level abstraction checking take place depends level sophistication proof checker naive proof checker proof must expanded explicit calculus level decision extract proof plans rather concrete proofs cas essential goal verbose without transmitting much detail purpose need different modes use cas normally proof search interested result computation since assumption computation correct normally justified established cas want understand computation particular successful proof need mode cas gives enough information generate highlevel description computation terms mathematics involved described next section detail describe integrated system automatically solves extended example economics examination 34 extended example concrete task hand minimise costs running machine producing certain product problem output machine range certain interval interval 1 7 cost product prod determined costs water electricity producing prod given functions prod ffl r prod prices water electricity kwh determine output machine total costs minimal example serves purposes several reasons firstly allows us show interaction proof planning symbolic computation extraction proof plans calculations secondly mathematics involved simple enough fully explained simple polynomial manipulations necessary thirdly example created problem slightly varied version kekosotex 24061998 1449 v integrating computer algebra proof planning 13 minimisation problem masters examination economics universitt des saarlandes saarbrucken wiw89 order solve problems like integrated simple cas intoomega mega called cas 3 cassystem simple moment perform basic polynomial manipulations differentiation suffices automatically solving example hand clearly practical system mathematical reasoning much developed system like maple cgg 92 reduce hea95 axiom js92 mathematica wol96 integrated technicalities integration described section 4 formalisation example use theory mecha nism ofomega mega create theory economy see figure 1 contains domainspecific knowledge factual method knowledge needed problem solution obviously need background theory costs economics handles numerical parts denomination cost functions one minimisation real functions therefore theory inherits material theories costs calculus calculus theory provided byomega mega contains relevant parts knowledge elementary calculus textbook instance real numbers introduced complete dense archimedian field based elementary algebraic notions groups rings defined respective theories set real numbers showing existence complete dense archimedian field constructed quotient field ring sequences rational numbers ideal nullsequences rational numbers turn constructed signed fractions natural numbers defined peano axioms theory natural mathematical theories based theories function set relation specify naive simply typed set theory properties functions relations sets finally whole hierarchy builds theory base declares underlying logic providing logical connectives quantifiers basic nd inference rules theory economy provides type ae units covers different units denominations example work prod product dm price formalise prices triples consisting one real number two units cost functions real function together two units read inputoutput units note real world addition phi 3 cas system part standard distribution ofomega mega obtained httpwwwagsunisbdesoftwarededuktionomega example accessible wiwiexam theory economy 14 kerber kohlhase v sorge base set relation struct ordered topology orderedring orderedfield metricspace natural rational sequences integer semigroup group ring field monoid real calculus economy costs figure 1 theory hierarchy inomega megas knowledge base multiplication omega comparison costs cost functions defined real parts respect denominations calculations axioms cf1 cf2 two denominations differ relate prices purpose use axiom pr integrating computer algebra proof planning 15 optimisation economy formalised predicate opt cost function cff dm prod interval true whenever f total minimum 4 optcff dm prod 9x totminx f thus state problem following formula 5 h set hypotheses needed complete proof instance price axioms planner solves problem generating highlevel proof plan consisting methods domain specific method base economics exam questions 6 going outline process describing major steps particular demonstrate proof planner ofomega mega cassystem interact make explicit entries mathematical database interaction depends planner finds following simple proof plan 4 predicate totmin problem solving knowledge related inherited theory calculus 5 actually formalisation problem fully correct since examiner interested proof exists x heshe wants know value x well proof value fits requirements obviously answer cannot obtained formula proof constructive variable x extract witness term problem cas mrs based constructive logic traditional mrs based classical logic proof construction process refined guarantee constructivity x note arguments witness x meets requirements still classical nonconstructive means proof planner may use methods proof plan constructive get wanted answer presented nonconstructive abstract argument finally note phenomenon another argument favour manipulating explicit proofs without one may find oneself position one convinced metatheoretic arguments existence constructive proof fact without one extract term witness answer exam question 6 questions certain standard exams good example restricted mathematical domain since proofs calculations involved highly stan dardised therefore finding proof plan example big problem omega mega kerber kohlhase v sorge multbyprice 3 addbydenom 5 totminrolle first three methods compute actual cost function adjusting denominations adding method 4 uses axiom optimisation example contains polynomials degree two planner selects method totminrolle cf figure 3 finding total minima makes implicit use rolles theorem calculus theory let f polynomial degree two f total minimum minimum x fa fx fb formally get following equivalence totmin totminx f b x 2 note rolles theorem accessible current theory ensure correctness database contain formal proof let us take closer look methods order get feeling initial proof plan expanded figures 2 3 given slightly simplified presentations multbyprice totminrolle method 7 declaration slot method simply defines metavariables used body method premises conclusions constraint describe applicability method example multbyprice instance line l 4 present open subgoal l 1 l 3 lines used order given already whereas l 3 generated application method indicated phi since method intended prove l 4 application method line deleted current planning state indicate psi constraint slot applicability criteria described cannot formulated terms proof line schemata declarations premises constraints conclusions form specification part method order able mechanically adapt methods tactic part subdivided declarative content procedural content however particular feature important purpose paper examples procedural content 7 especially adjusted syntax constraint way comprehensive reader integrating computer algebra proof planning 17 declarations f premises constraint conclusions psil 4 declarative content subst l 3 procedural content schema gamma interpreter figure 2 multbyprice method theory cost consists schemainterpreter essentially inserts declarative content using bindings made planning phase correct place current partial proof tree concrete example lines l 1 l 4 inserted note adopted linearised version nd proofs introduced and80 order understand piece actual proof methods evaluate examine declarative content bindings performed particular constraint constraint multbypricemethod states rather simple computation cost function given open line denomination dm multiplied appropriate price multiplication real parts carried cas corresponding cost function constructed point crucial understanding working scheme method view bindings constraint step step applied current plan method matched open goals planning state first pass planner yields l 4 matched theorem thm thus formula optcfd 05d bound metavariable oe examined find occurrence cost function subterm exists arguments bound g v w matching line l 1 receive numerical part price f appropriate price provided application method would fail afterwards new cost function com kerber kohlhase v sorge puted according axiom pr 0 finally oe 0 contains result replacing old cost function oe 0 hence first plan step optimisation formula stored oe 0 contains cost function cfd prod subterm metavariables instantiated subproof contributed multbypricemethod consists lines l 2 l 3 declarative content observe l 2 results applying priceaxiom pr fetched database line l 1 furthermore note l 3 call cas justifying method line means point proof planning procedure cas called order compute product price original cost function line resulting calculation used new open subgoal planning state summarising effects method multbyprice observed two steps first goal line thm justified method yielding following subproof method justification line thm abbreviated due lack space could expanded thereby inserting intermediate steps described instantiating macro steps method note following expanded subproof detailed level abstraction pds particular justification thm different level cfd proof thm method multbyprice applied twice order normalise summands preserve space present next two methods proof plan extensively multbypricemethod addbydenom similar multbyprice applies axiom cf1 inside optimisation function opt compute final cost function course cas called perform polynomial addition optimisemethod simply introduces definition opt function axiom integrating computer algebra proof planning 19 declarations premises constraint degreeoe compute casminimum oe conclusions psil 12 declarative content procedural content schema gamma interpreter figure 3 totminrolle method theory calculus far interesting two methods totminrolle method contains different example use cas omega mega presentation method figure 3 simplified totminrolle method applied stage proof actual minimum cost function introduced task fulfilled within constraint method compute cas statement actually calls cas quiet mode compute minimum function oe store metavariable stage cas used oracle ht93a example minimum cost function ndline form transformed eliminating existentially quantified variable kerber kohlhase v sorge rest proof plan devoted proving result actually total minimum done using definition totmin database furthermore using definitions minimum interval correspond line l 1 l 2 method totminrolle definitions introduced lines l 9 l 11 applying correct assertions given lines l 3 l 8 expressed justifications corresponding lines instance justification line l 10 states infer 2 ff fi lines l 5 l 6 definition interval line l 2 closer look justifications lines l 3 l 8 reveals contain methods lines l 3 l 4 depend calculations cas computes first second derivative cost function justifications simplify correspond method performing basic arithmetic simplifications comparisons consisting 5 methods proof plan gives impression small proof abstract level indeed experienced mathematician might want see expanding plan partially grounded nd proof gives length 90 lines containing lines justified cas proof level may roughly correspond proof novice would like see would form reasonable solution exam problem presented natural language proverb system rerunning cas proof plan generating mode casjustifications extracting proof plans proof expanded detailed proof plan containing account mathematics behind calculations proof plan already contains 135 plan steps user feel comfortable level detail yet expanded calculuslevel nd proof length 354 note even proof standalone proof minimisation theorem depends proofs number lemmata database furthermore proofs simplification ground arithmetic expressions expanded instance representation involving zero successor function either would necessary obtain detailed logiclevel proof 4 integrating computations explicit proofs section describe sapper system algorithmic proof plan extraction reasoning generates proof plans cas output mentioned section 33 intended integration kekosotex 24061998 1449 v integrating computer algebra proof planning 21 necessary augment cas mathematical information proof plan generating mode order achieve proposed integration level proofs cas system developed demonstrate feasibility approach rather simple demonstrate enriching state art cas mode producing necessary additional protocol information would course require considerable amount work 41 architecture sapper system seen generic interface connecting omega mega another proof planbased mechanised reasoning system one several computer algebra systems see figure 4 incorporated cas treated slave toomega mega means latter call first one vice versa software engineering point viewomega mega cas two independent processes interface process providing bridge com munication role automate broadcasting messages transforming output one system data processed 8 unlike approaches see hc95 gpt96 example want change logic inside mrs line want change computational behaviour computer algebra algorithms order achieve goal trace output algorithm kept short possible fact computations constructing proof plan left interface proof plans directly imported intoomega mega makes integration independent particular systems indeed results independent cas employed make general assumptions mrs proof planbased moreover interface approach helps us keep cas free logical computation system intended anyway finally interface minimises required changes existing cas maintaining possibility using cas standalone requirement make integrating particular cas produce enough protocol information proof plan generated information proof plan turn expanded mrs proof verifying concrete computation interface roughly divided two parts translation part plan generator first performs syntax translation betweenomega mega cas directions latter 8 adaptation general approach combining systems cmp91 22 kerber kohlhase v sorge hypotheses theorems methods tactics tactics methods theorems hypotheses interface structured database theory 1 theory 11 theory 12 theory 2 result access access plan tactics knowledge call result plan generator translator function mappings call args abstract cas figure 4 interface betweenomega mega computer algebra systems transforms verbose output cas toomega mega proof plans clearly translation part depends particular cas invoked translations collection data structures called abstract cas 9 provided one referring particular connected cas parts one main purpose structures specify function mappings relating particular function ofomega mega corresponding casfunction type arguments furthermore provides functionality convert given arguments mapped omega mega function cas input fashion transforms results algebraic computations back data processed byomega mega functionality part interface offers us possibility connecting cas black box system first approach described section 2 instance may want use efficient system without mode generating proof plans 9 reimplementation sapper would probably use openmath protocol avls96 lingua franca cas side integrating computer algebra proof planning 23 proof search black box system another less efficient system mode actual proof construction clear proof look like corresponds recent techniques used knowledge based systems explanation component trace rules applied search explanation reconstructed independent component plan generator solely provides machinery main goal proof plan extraction equipped supplementary information proof byomega mega records output produced particular algebraic algorithm converts proof plan requirements keeping cas side free logical considerations hand keeping interface generic seem conflicting first glance however conflict solved giving sides interface access database mathematical facts formalising mathematics behind particular cas algorithms conceptually database together mappings governing access provides semantics integration ofomega mega particular cas thus expanding plan generator simply done expanding theory database adding new tactics whileomega mega access complete database sappers plan generator interface able use tactics lookup hypotheses theory cf figure 4 cas interact database know references logical objects methods tactics theorems definitions proof plan generating mode thus knowledge database compiled priori algebraic algorithms order document calculations 42 proof plan extraction let us take closer look implementation proof plan generation cas expansion process output demonstrate proofs extracted computer algebra calculation provide intuition requirements approach poses cas side example consider polynomial addition example normally experienced mathematician would like see proof highschool student would like seen example main purpose addbydemonmethod compute final cost function prod done cas adding two polynomials 3 remainder subsection expand addition several steps thereby obtain calculus level proof computation kerber kohlhase v sorge examining example detail let us consider general scheme proof plan generation inside polynomial addition algorithm cas first take look different representations polynomial p variables x r logical language ofomega mega variant simply typed calculus indeed use stronger type system want keep things simple possible polynomials represented polynomial functions expression formal parameters abstracted mathematically p function r argu notation use prefix notation symbols denote binary functions addition multiplication exponentiation reals representation use fireduction evaluation polynomials cas use variable dense expanded representation internal data structure polynomials described zip93 instance thus every monomial represented list containing coefficient together exponents variable hence get following representation p let us turn actual cas algorithm polynomial addition simple algorithm adds polynomials p q case analysis exponents 10 recursive calls let r r presented algorithm jth component p kth component q lisplike pseudocode figure 5 intuitively algorithm proceeds ordering monomials advancing leading monomial either first second arguments case equal exponents coefficients monomials added obviously expansions original algorithm needed proof plan generation additional tactic statements 11 assume lexicographic monomial order employ ordering exponents thus make use operators intuitive sense furthermore define rank monomial vector given exponents rank polynomial maximum rank monomials respect lexicographic monomial order 11 observe case called tactics need additional argu ments since plan generator interface keeps track position kekosotex 24061998 1449 v integrating computer algebra proof planning 25 polyadd p q tactic monoadd conspoly er j r polyadd r r tactic popfirst conspoly ff j x er j r polyadd r r tactic popsecond conspoly r polyadd r r figure 5 polynomial addition cas produce additional output returning keywords tactic names plan generator side effects particular computational behaviour algorithm changed apply algorithm two polynomials obtain following proof plan monoadd popsecond monoadd first two quadratic monomials p q added linear term q second argument raised since appears one argument finally remaining monomials added case polynomial addition methods proof plan operators directly corresponds tactic name list three methods directly represents concrete proof plan polynomial addition concrete polynomials p proof thus knows monomials algorithm works returning tactic way need concerned form monomial actually course algorithm 26 kerber kohlhase v sorge q following representation omitted context polynomials embedded actual proofs four lines correspond stepbystep version basic high school algorithm far expansion callcasmethod exclusively done cas proof plan generation mode stage cas cannot provide us details computation subsequent expansion next hierarchic level achieved without use cas let us instance take look popsecond tactic understand logical content tactic describes reordering sum looks general case follows current example view c arbitrary polynomials b monomial rank greater polynomial obvious behaviour popsecond determined pattern sum applied equation 1 polynomial c exist popsecond equivalent single application law commutativity otherwise like example tactic performs series commutativity associativity steps popsecond step thus expanded plan reflects single step applications laws commutativity associativity assuming expanded two monoadd tactics well constructed representation proof level needs axioms polynomial ring finally expand fully explicit calculus level proof expand three justifications lines leads sequence eliminations universally quantified variables corresponding hypothesis axioms commutativity associativity example commutativity axiom would transformed following fashion integrating computer algebra proof planning 27 justification thm first proof line indicates commutativity imported theory real inomega megas mathematical database established theorem remaining lines natural deduction inferences universal eliminations instantiate number 6 b term gamma12x altogether single application popsecondtactic equivalent calculuslevel proof 11 inference steps length subproof trivial polynomial addition 43 single steps example shows possible mechanically construct proof verifying correctness particular cas computation without verifying cas algorithm implementation general case however calculus level proofs computations long rather boring therefore hardly human user might actually want see much less read therefore proverb proof explanation system inomega mega provides realistic alternative since gives user access representations parts proof various levels abstractions making use hierarchical structure underlying pds instance possible present computations intermediate steps customary textbooks example could include three steps high school algorithm mentioned illustrate polynomial addi tion decision steps included omitted depends course expertise readers particular proof presentation intended despite abstractions developing presenting proof still use proof checker ndcalculus verify steps including computations furthermore assume sophisticated proof checker example one works modulo axioms polynomial rings also possible check proof abstract level already mentioned sophisticated proof checker concise communicated proofs tested proof plan extraction simple recursive iterative cas algorithms works quite well since algorithms closely correspond mathematical definitions corresponding concepts however complicated schemes like divideandconquer algorithms instance polynomial multiplication karatsuba ofman ko63 cannot adapted approach easily without extending mathematical knowledge base corresponding lemmata 28 kerber kohlhase v sorge example polynomial addition surely trivial one chosen solely presentation reasons particular likely correct realworld implementation since well tested depend sophisticated mathematical theorems fuzzy boundary cases must considered sake argument let us assume error implementation instance second case polynomial addition algorithm figure 5 conspoly statement forgotten algorithm following incorrect form tactic popfirst polyadd r computation x 2 discussed second case never used computation would correct although program change order addition polynomials p q get following incorrect result changed algorithm inserting proof plan generated faulty algorithm yields checking proof checker would see popfirst step justified since expansion corresponds application law associativity would yield thus would applicable expansion thus proof plan consequently calculation would rejected byomega mega note large system literally millions possible cases correctness calculation like depends tiny subset whole program strength approach calculations necessary given proof would checked advantage errors different levels detected particular levels algorithms compilers processors course long computations checking pretty expensive moreover highly elaborated efficient algorithms state art cas might hard augment proof plan kekosotex 24061998 1449 v integrating computer algebra proof planning 29 generation modes seen example mathematical knowledge database reflect mathematical knowledge algorithm order easily decorate algorithms proof plan generation mode however extend prove corresponding lemmata trivial task sophisticated algorithms particular approach would go much direction program verification even proves practically impossible extract information valuable conceptual mathematical level always possible reserve elaborated techniques quiet mode used proof discovery use basic algorithms mathematics easier easily decorated proof plan generation mode proof extraction phase systems like axiom js92 mupad fuc96 seem come closest among standard cas needs proof plan generation since one already attach axiomatisations algorithms 5 conclusion work reported experiment integrating computer algebra system interactive proof development environ mentomega mega system level also level proofs motivation integration need support human user hisher proofs contain nontrivial computations shown proof planning paradigm general omega mega system particular provide open environment extended integration supports different integration levels approach possible use standard cas integration since system provides answers directly usable justifications proof plans extracted however turned essential environment built construct communicable checkable proofs order achieve solution compatible strong requirement adopted generic approach requirement cas proof plan generation mode generation communicable checkable proofs since want achieve two goals simultaneously namely highlevel descriptions calculations cas communicating human users well lowlevel ones mechanical checking represent protocol information form highlevel hierarchical proof plans expanded desired detail fully expanded proof plans correspond natural deduction proofs mechani kerber kohlhase v sorge cally checked simple proof checker case cas made mistake proof checker detect general idea fundamentals integration cas mrs independent concrete proof development environmentomega mega concrete computer algebra system cas realised planbased theorem prover proof extraction even realised tacticbased system cas protocol calculations form tactics axiom js92 mupad fuc96 seem best suited corresponding extension since one already attach axiomatisations algorithms addition algorithms could enriched way produce protocol information every computation step state attached axioms used particular instantiations system would probably fit approach pretty well useful extension approach would consist usage various algorithms computation instance one fast efficient algorithm suitable knowledge extraction searching proof afterwards actually documenting whole proof less efficient algorithm optimised find short proofs provide complete proof plan although correctness issue achieved tacticbased approach well need specifications used proof planning full strength integration considerable automated support provided cannot achieved level since possible perform mechanical reasoning tactics automation however achieved proof planning approach proof planner automatically call cas pro cedure conditions corresponding method met usefulness integration level already seen case simple cas integration able prove optimisation problems reach without support hand system able give explanations involved computations various levels abstraction feature missing todays cas experiments expect successful integration powerful computer algebra systems would considerably enhance reasoning power mechanised reasoning system acknowledgements work presented paper supported deutsche forschungsgemeinschaft sfb 378 project omega benefited lot discussions calculemus interest group integrating computer algebra proof planning 31 authors would like thank lassaad cheikhrouhou help withomega megas proof planner coding methods examples furthermore would like thank deepak kapur anonymous referees carefully reading earlier versions paper detailed comments helped us improve presentation considerably r transforming matings natural deduction proofs objectives openmath technical report 12 computations formal proofs type theory theorems algorithms interface isabelle maple rippling heuristic guiding inductive proofs symbolic computation editorial using mathematica simple mathematical proofs intelligenzniveaus use explicit plans guide inductive proofs machine proofs geome try automated production readable proofs geometry theorems mechanical geometry theorem proving integrated software compo nents paradigm control integration implementing mathematics nuprl proof development system reasoning theories towards architecture open mechanized reasoning systems open environment mathe matics reduce users manual version 36 computational metatheory nuprl adapting methods novel tasks proof planning presenting machinefound proofs extending hol theorem prover computer algebra system reason reals reasoning reals marriage hol maple axiom scientific computation system refutational approach theorem proving geometry otter 30 reference manual guide mathematica book version 30 mechanical theorem proving geometries basic principles texts monographs symbolic computation effective polynomial computation address correspondence manfred kerber school computer science university birmingham birmingham b15 2tt tr ctr andreas meier martin pollet volker sorge comparing approaches exploration domain residue classes journal symbolic computation v34 n4 p287306 october 2002 paul cairns jeremy gow integrating searching authoring mizar journal automated reasoning v39 n2 p141160 august 2007 micheal kohlhase andreas franke mbase representing knowledge context intergration mathematical software systems journal symbolic computation v32 n4 p365402 october 2001