csp partial automata coalgebras paper presents first reconstruction hoares theory csp terms partial automata related coalgebras show concepts processes hoare communicating sequential processes prenticehall englewood cliffs nj 1985 strongly related concepts states special namely final partial automata moreover show deterministic nondeterministic operations hoare 1985 interpreted compatible way constructions semantical level automata based able interpret finite process expressions representing finite partial automata designated initial states way provide new method solving recursive process equations based concept final automata coalgebraic reconstruction csp allows us use coinduction new proof principle make evident usefulness principle prove example laws hoare 1985 b introduction people usually working model theory semantics formal specifications becomes often hard approach area process calculi process algebras processes without physical basis difference concepts machine process agent state system syntax without semantics difference processes process expressions paper devoted make steps overcome difficulties contrast area process calculi insist clear intuition essential difference concepts system machine agent state process respectively system different states processes devoted describe observable behavior systems two states observed different indeed fact different processes start states paper published electronic notes theoretical computer science volume 19 url wwwelseviernllocateentcs r aim paper make evident csp interpreted theory processes special deterministic nondeterministic partial automata theory allows bring csp automata common perspective theory coalgebras 6 show coincidence concepts processes 4 concepts states final automata coalgebras moreover analyse far constructions operations 4 level processes related justified corresponding compatible constructions level arbitrary automata analysis put many informal arguments intuitions hoare formal semantical level insist also clear distinction concept process concept process expression traditionally process expressions used finite syntactical representation processes algebraic laws 4 tell process expressions denote process process expressions however also seen compatible way syntactical representations finite automata initial states compatibility means process starting corresponding initial state coincides process represented process expression observation offers new method solve recursive process equations recursive process equation describes finite automaton initial state image state respect unique homomorphism final automaton processes states solution recursive equation draw attention fact need impose cpo structure processes describe solution recursive equations means fixed point constructions cpos within coalgebraic approach fixed point construction seen shifted external level made namely describe final automaton coalgebra result category theoretic fixed point construction hope integrated view csp automata coalgebras developed paper step achieving unifications theories computing science advocated hoare 5 integrated view however also value becomes easier explain teach process calculi relating operations level processes constructions level automata possible adequate scope applications csp becomes clear users finally believe satisfactory formal treatment phenomenon computing requires consider different viewpoints understand well transitions different viewpoints since paper tries bridge two apart areas written mainly two kinds readers reader familiar coalgebraic reasoning presented eg 6 read paper introduction explanation basic concepts ideas csp technically nothing really new concerning theory coalgebras reader familiar csp process calculi also able read paper convince kind r reader practical relevance category theoretic coalgebraic reasoning analyse category theoretic fixed point construction final partial automata detail besides paper selfcontained way anybody interested theory processes read benefit paper organized follows section 2 introduce concept deterministic process according 4 try make apparent strong relationship concept deterministic partial automaton thereby turns processes related curried version partial automata studied 10 thus coalgebraic treatment processes appears quite natural section 3 explores insight 10 partial automata curried version considered special coalgebras show general category theoretic fixedpoint construction final coalgebras applies deterministic partial automata general construction provides reasonable model deterministic processes turns isomorphic mathematical model presented 4 section 4 makes evident hoare defines interaction processes coalgebraic manner moreover show interaction processes corresponds semantical level synchronization automata ie processes arbitrary synchronized automaton desribed interaction processes single components section 5 discuss hoares treatment branching internal nondeterminism based idea acceptance refusal sets show concept nondeterministic processes csp corresponds concept deterministic filter automata section 6 provides semantical interpretation nondeterministic operations 4 level automata describes elimination internal actions automata finally hoares treatment divergence analysed section 8 show treatment based mixture coalgebraic algebraic techniques close paper conclusions remarks work deterministic processes automata fortunately contrast presentations processes 4 owns mathematically rigour allows start immediately semantically oriented analysis proposed concept process firstly hoare assumes process p fixed set events actions process may engage called alphabet p also denoted ffp process alphabet never actually engages events called secondly hoare provides clean notation processes process first engages event 2 ffp behaves exactly r process p denoted omitting brackets allowed convention right associative way simple vending machine v succesfully serves two customers chocolate breaking described following process expression ffv chocg process initially engages either distinct events one alternative first events occured behaves exactly process p denoted assume ffp define also alphabet note process denoted process expression long deterministic since events required distinct machine v mb serves either chocolate toffee breaking described process expression ffv tofg thirdly hoare states every deterministic process p alphabet may regarded function f domain b defining set events process p initially prepared engage b deterministic process f defines future behavior process p first event means every deterministic process p 2 dpa uniquely described partial function f p dpa domain stands set deterministic processes alphabet globally considered hoare assumes way existence bijective mapping nexta p dpa denotes set partial functions dpa stopa eg process uniquely determined condition domnexta ie deterministic process times engage event described uniquely conditions domnexta runa taking account idea automaton see immediately set deterministic processes alphabet seen set states infinite deterministic partial automaton without output traditionally 1 deterministic partial automaton without output defined triple set input symbols set states theta p r partial state transition function wellknown however partial function equivalent curried version ie total function domds way automaton described equivalently using curried version tripel pointed 10 hoares concept deterministic process really reflected partial automaton dpa nexta justified considering mathematical model deterministic processes 4 deterministic process alphabet defined prefix closed subset p ie nonempty subset p 2 satisfies two conditions hi 2 p denotes empty trace finite sequence st catenation traces process stopa modeled way set fhig runa given domain nexta p denoted 4 p 0 defined domnexta p pg nexta p 2 p denoted 4 p defined nexta p pg let dpa set prefix closed subsets partial automaton called hoaremodel deterministic processes alphabet note nexta bijective indeed since assign partial function f p dpa prefix closed set next gamma1 ag make clear distinction processes process expressions use identifiers instead name process stopa building process expressions realizing deterministic processes csp constitute special partial automata promising take consideration arbitrary partial automata first observation process expressions eg interpreted two different ways firstly suggested 4 interpreted userfriendly syntactic notation prefix closed set v traces ie representing element v mb dpa secondly however take vmb syntactic presentation finite partial automaton given 3 partial automaton depicted follows coin 2 choctof make translation process expression exp partial automaton exp unambiguous could use subexpressions exp denote states exp eg coin instead 3 note approach forces us identify codomains two arrows starting contrast tree oriented pictorial presentation processes section 12 4 note approach brings us close labelled transition systems used 7 reason processes next section see hoaremodel hma deterministic processes characterized final object category deterministic partial automata alphabet set input symbols means exists deterministic partial automaton mapping 2 2 left hand side equation defined right hand side defined p dpa next p dpa note condition equivalent traditional condition uncurried version automata morphisms example fhig interpretations process expression compatible translation process expression exp deterministic partial automaton exp points implicitly initial state exp namely state corresponds whole expression exp state maped mexp process p exp obtained process interpretation expression example eg mvmb using prefixing choice build process expressions representing finite deterministic processes able describe syntactically infinite processes hoare introduces recursion let x identifier process vari able f x process expression build x prefixing choice using events fixed set idea 4 f x defines map dpa recursive process equation taken syntactic description deterministic process exactly one fixed point f hoare proves case long f x guarded ie long least one occurrence f x unique fixed point denoted 4 process expression machine vmc alphabet fcoin choc tofg either serves chocolate toffee loop described using process expression vmb recursive equation corresponding unique fixed point v mc 2 dpa given traces coin odd r position either choc tof even position fortunately translation process expressions finite partial automata initial state extended recursion thus obtain new method solving recursive process equations let f finite partial automaton according f x initial state 0 2 x 2 state corresponds free variable x ie state especially domtsx obtain x initial state 0 glueing together 0 define 2 0 2 domt 0 image 0 wrt unique automata morphism taken deterministic process described recursive equation example arises glueing together states 1 3 mvmb ee choc yy tof mxavmb mc consider example process expression run obtain onestate partial automaton mx arun mxarun runa state 0 mx arun next section become hopefully evident method provides process expressions build identifiers prefixing choice recursion results fixed point construction 4 remark 21 method extends nicely mutual recursion obvious fixed point construction 4 method works guarded expressions onestate automaton mx ie thus construction mx ax states analogously 4 treat meaning xax discuss nondeterministic operators section 6 final coalgebras coalgebra pair consisting set carrier coalgebra mapping consists mapping f commutes operations r f apply definition deterministic partial automata check assignment 7 p extends functor set assign mapping f mapping easy check defines fact functor concepts deterministic partial automata alphabet aand coalgebra turn obviously equivalent category coalgebras ahomomorphisms denoted therefore daa functor set set op continuous 9 ie preserves limits op chains fortunately use category theoretic version least fixed point construction 11 construct final coalgebra limit l op chain set described canonically infinite sequences 2 f mapping projects ith component thus 2 n 3 carrier nfa intended final coalgebra given according 911 limit nfa following 3 obtained applying successively functor unique mapping singleton set final object category set see nfa strongly related set dpa prefix closed subsets firstly consider elements n 1 refered nested functions depth less equal n four functions elements using mapsto notation get g r pictorial representation could look follows coin choc coin upsilonupsilon choc wich depicted coin coin choc coin coin choc choc coin upsilonupsilon choc note make difference fully undefined function type 2 fully undefined function type note nested functions different synchronization trees 713 node pictures represents graph node contrast synchronization trees node represents path root tree node function thus maps g 2 p p 1 general n 1 cuts possibly empty 1th layer nested function information cutting taken place announced writing corresponding node depth n moreover nodes n1gammai depth n changed ngammai necessary new sharings introduced example following transformation nested functions coin coin coin choc coin upsilonupsilon choc coin upsilonupsilon choc remark 31 elements nfa construction infinite sequences nested functions elements n 1 correspond directly r elements dpa represent finite approximations processes prefix closed set p ng bounded traces corresponds uniquely nested function n 1 depth n corresponding nested function indicates know exists trace pnp n extends corresponding trace length n p n general bijection dpa nfa since prefix closedness ensures p 2 dpa represented uniquely sequence 1n 0 n sequences corresponds uniquely sequence equation p corresponds requirement represented sequence hfhig fhig prefix closed sets thus sequence h limit op chain 3 4 since one mapping nfa trivially 0 thus obtain limit diagram yy 3 4 limit properties diagrams ensure existence unique mapping 1 moreover ensured mapping bijective ie isomorphism set i2 intended coalgebraic model deterministic processes provided coalgebra remark 32 note category theoretic fixed point construction provides kind external approximation processes process p r identified sequence h finite approximations g processes please bear mind open branch g indicated means processes finite approximations kept apart need force cpo structure set processes able speak finite approximations infinite processes convince reader coalgebraic model hoaremodel isomorphic analyse mapping ua works let given sequence nfa image p wrt ua partial function ua thus firstly determine domain ua p bear mind partial functions g domain total mapping 2 n domain ua p equals common domain components g i1 p forced equation 1 implies 2 n 2 thus domua p secondly define 2 domua p sequence ua p ensures g thus obtain assumption p g h g indeed element nfa done since nexta p prefix closed set 2 domnexta p become evident bijection dpa nfa outlined remark 31 compatible nexta ua stated theorem 33 hoaremodel coalgebraic model isomorphic coalgebras ie exists bijective mapping appra dpa nfa following diagram commutes dpa next appr coalgebraic model final category coalgebras construction 911 since hma isomorphic cma corollary 34 final coalgebras ie final objects category daa r justify claim section 2 new method solving recursive equations based finality hma cma spectively strongly related fixed point construction 4 look close proof finality cma arbitrary coalgebra interested determine process starts state 2 analyse stepbystep states reached transitions unfolding state transition function gives following sequence commutative diagrams 3 3 leftmost rectangle commutative since one mapping 1 rectangles stepwise images first one state 2 states reached one step transition arbitrary sequences transitions length ie sequences taking account restrictions made continued according next step starting state 2 obtain way infinite sequence 2 n ie represents sequences transitions length atmost starting moreover tells states reached sequences length exactly states visited forgotten following automaton alphabet 2a ff xx oo state 1 could depict eg first four elements unfoldm 1 r follows b finally consider abstraction unfoldm process mapping states thus forgets information states reached sequences length keeps infomation sequences length may continued obtain 2 infinite sequence proc first four elements proc 1 eg upsilonupsilon upsilonupsilon commutativity diagrams definition respectively entail 2 n thus proc becomes indeed process ie element nfa means constructed proc process starting state 2 globally provides mapping proc mapping constitutes ahomomorphism proc cma homomorphism unique proved straightfowardly according limit construction nfa op continuity functor set 4 interaction concurrency firstly hoare describes interaction processes p q alphabet defines process p k q ffp k behaves like system composed p q interacting lockstep synchronization ie occurence events requires simultaneous participation processes involved model kind interaction define mapping k nfa theta nfa nfa last section seen final coalgebra ie final partial automaton alphabet offers canonical way define mappings arbitrary set nfa 6 construct coalgebra finality cma exists unique ahomomorphism proc cma substantial problem design way underlying mapping proc becomes intended one following coalgebraic heuristics becomes immediately obvious synchronize cma obtain appropriate coalgebra let coalgebra pair processes domsyna 2 domsyna final ahomomorphism proc syn syn cma due section 3 makes following diagram commutative nfa theta nfa syn proc syn pair p q 2 nfa theta nfa equation ua proc syn required event z 2 domsyna p q means ua proc syn using notation 4 last condition turns equation p k thus becomes apparent coalgebraic definition proc syn equivalent requirements stated law 4 page 67 4 interaction operator since proc syn uniquely defined conditions sure proc syn indeed intended interaction operator k secondly hoare describes concurrent interaction processes p r q different alphabets ffp 6 ffq events alpha bets ie intersection ffp ffq required synchronize however events alphabet p alphabet q may occur independently q whenever p engages similarly q may engage alone events alphabet q p way alphabet process p k q union ffp ffq alphabets component processes note use overstrokes 7 provides another technique fix events different sets events synchronize let given two alphabets b coalgebraic definition intended mapping k nfa theta nfb nfab extracted law 7 page 71 4 synchronization cma cmb provides partial automaton alphabet ab follows pair processes define domsyn ab c 2 domsyn ab p q set syn ab final provides intended concurrent interaction operator nfab note obviously syn coalgebraic definition concurrent interaction operator suggests straightforward generalization synchronization arbitrary partial automata definition 41 partial automata define corresponding synchronized automaton follows c 2 domsynm 1 r example synchronize vending machine vmc section 2 alphabet fcoin choc tofg customer cu alphabet fcoin tof bisg described recursive equation paying coin customer decides toffee biscuit instead corresponding partial automata depicted coin 2 ee choc yy tof oeaeaeoe coin b ee bis yy tof synchronization syn vmccu automata given coin 2 choc oo bis oo bis tof choc customer able pay coin may decide toffee machine deliver toffee time decides biscuit machine serve later chocolate even worth machine may decide give chocolate interpret decision biscuit second chance get toffee note simply extending alphabet customer fcoin tof bis chocg would obtain synchronized automaton dead lock coin 2 oo bis oo bis tof turns concurrent interaction processes exactly describes processes synchronized automaton synm 1 2 reconstructed processes single automata 1 2 synchronization automata compatible interaction processes stated theorem 42 partial automata pair states given final ab homomorphism proc syn ab suffices show r mapping proc 1 constitutes homomorphism proc 1 nfa theta nfb syn ab required equality proc syn 1 2 ensured uniqueness final homomorphisms show pair equality theta proc 2 holds since proc cma ahomomorphism since proc cmb bhomomorphism 2 according equations 4 5 totality mappings proc 1 proc 2 definition synm 1 2 syn ab respectively firstly show domain functions equation 3 equal domsyn ab proc 1 theta proc 2 theta proc 2 secondly show equality 3 c 2 domt 1 b according definition syn ab equality 4 definition synm 1 2 obtain theta proc 2 c cases proved analogously 2 according theorem 42 extend compatible way interpretation rof process expressions representations finite automata interac tion two process expressions exp 1 exp 2 define take due theorem 42 initial state exp 1 initial state exp 2 remark 43 essential problem relate states exp 1 variables process expression seems free variable x idea however take axkbx state corresponding x work well especially respect recursion ie respect idea substitute x successively whole expression general model substitutivity simple way level automata since x b different automata paper fix problem following decision since interaction essential parallel operator symbol k builds border exp 1 impermeable names consider x equivalent x please note hoare considers examples problem arise ie examples 5 nondeterminism csp first glance nondeterministic processes csp nothing nondeterministic transition systems usually considered coalgebraic literature 6 neither related power set construction finite power set construction p f nondeterministic system sense csp certain state engage event state reached next step uniquely determined event nondeterminism restricted possibility decide locally state events accepted alternatively refused next step even case engage event may carry event decided accept event next step second glance however possible relate kind systems real nondeterministic systems namely image finite nondeterministic automata 9 crucial observation systems csp motivated along two ideas firstly old idea formal language theory abstract nondeterminism constructing nondeterministic automaton n set states deterministic automaton p f n set p f states secondly idea maintain p f n differences original states n long difference expressed language r events consider following image finite nondeterministic automaton 6 starting state 1 reach event either state 3 state 5 difference state 3 state 5 observed locally states expressed language difference bg construct corresponding power automaton p f n fix difference assigning state f3 5g p f n set ffb cg fa bgg way obtain two different states 3 5 n single state f3 5g p f n two different local states fb cg fa bg following idea reachable part p f example would look follows ffagg fflffi flfi r r r r r r r r r r r r r r r r r r c l l l l l l l l l l l l l l l l l l fg fg fflffi flfi note states 2 4 distinguishable since operationally considered decide state f3 5g accept next step either events fa bg fb cg decide fa bg event c occur next step event however bring us singleton state f6g event b bring us compound state f2 4g since go n b 3 2 5 4 general obtain variant power construction systems kind nondeterministic local filters remark 51 hoare uses families sets refused events instead families sets accepted events model kind nondeterminism decided acceptance sets 3 eases argumentations operational terms contrast hoare argues mainly observational terms moreover introduce internal nondeterminism transform later deterministic automata filter automata checked however descriptions operations means acceptance sets presented next sections fully equivalent definitions hoare 4 model concept nondeterministic processes used csp consider partial automata following structure r called deterministic filter automata state 2 denote first component ts accts second component abuse notation also ts means dealt f coalgebras functor f p set f mapping refers category f coalgebras f homomorphisms functor f also op continuous 9 thus construct analogously case deterministic automata alphabet final f elements fpa infinite sequences h components g nested functions additional acceptance set ie subset pa node refer elements fpa deterministic filter processes chaosa 2 fpa eg nondeterministic process times engage event time refuse event described uniquely conditions chaosa 2 remark 52 set fpa includes nondeterministic processes defined 4 also something model coalgebraically saturation conditions 4 3 acceptance refusal sets guess hoare needs conditions identifies divergence chaos tries treat divergence algebraic manner compare section 7 difference point research obviously assign deterministic partial automaton corresponding deterministic filter automaton 2 ahomomorphisms underlying mapping provides also f doma totality f means embedding functor alphabet note corresponding embedding according 4 would take instead singleton family acceptance sets fdomtsg family refusal sets resulting filter automaton would proper internal nondeterminism however never observed outside note obviously besides problem branching nondeterminism discussed hoare tries treat within framework also problem internal non determinism ie problem system may carry internal actions r observed outside treat problem uses concept acceptance refusal sets consider following simple deterministic filter automaton f fg fg ffbgg ffag fa gg ffa bg fbgg 6 fg assumed internal action hoare insists intuition want actions occur automatically instantaneously soon 4 p 111 decide internally state 1 accept fa g action occur instantaneously go state 3 new decision acceptance case decide fag allowed stay state 1 take chance reach state 2 via action decision fa g 1 equivalent 3 making decision eliminate action identifying states 1 3 taking decions 3 instead decision fa g 1 way describe observable behavior f following nondeterministic filter automaton fg fg ffbgg ffag fa bg fbgg 6 fg long divergence f ie infinite loop internal actions elimination internal actions outlined fully compatible hoares treatment case divergence however hoare firstly identifies divergent states chaosa proceeds elimination see section 7 6 nondeterministic operators realization program interpret operations 4 constructions level automata thus interpret every finite process expression representing finite automata initial state process starting state equals process represented expression according 4 becomes little bit complicated take account nondeterministic operators assign deterministic filter processes states deterministic filter automata constructions general choice interleaving jjj elimination internal actions however introduce branching nondeterminism thus obliged firstly take consideration nondeterministic filter automata define constructions kind automata secondly r describe transformation nondeterministic filter automata deterministic filter automata get deterministic filter processes hoare interested note identification actions considered 4 would also introduce branching nondeterminism could treated naturally within approach side internal actions arise concealment actions also constructions nondeterministic u recursion assign observable deterministic processes automata internal actions two possibilities firstly eliminate internal actions level automata transform resulting nondeterministic automata deterministic one case divergence get way deterministic filter processes intended hoare secondly carry transformation deterministic automata first use mixed coalgebraic algebraic procedure according hoare eliminate internal actions deterministic filter processes sequel present semantical interpretations nondeterministic operators 4 level filter automata space prove formally correctness interpretations done interaction theorem 42 hope however reader convinced definitions informal argumentations examples 61 nondeterministic filter automata image finite nondeterministic filter automata automata structure coalgebras functor set anf mapping f given p f category anf coalgebras anf homomorphisms denoted nfaa obviously embedding allows assign deterministic filter automaton theta p nondeterministic filter automaton n note definition works smoothly since keep f n situations assignment compatible f homomorphisms thus obtain embedding alphabet side define basis finite power set functor nondeterministic filter automaton deterministic filter automatn r follows 2 p f define domt 2 domt p set easily checked construction compatible anf homo morphisms ie finite power set functor functor alphabet examples finite power set construction refer next subsections 62 general choice interleaving interaction general choice operator corresponds semantical level glueing states automata thereby decision acceptance glued state given glueing decisions single states definition 61 let given nondeterministic filter automaton different states 1 6 2 glueing states 1 2 provides automaton follows set 2 domt note case 2 domts 1 domts 2 branching nondeterminisms construction extends straightforwardly equivalence states basis construction extend translation process expressions automata initial state operator consider two process expressions exp 1 exp 2 fx set expressions common let state f exp corresponding variable x j please bear mind state correspond free variable always domain acceptance fg introduce sequence r glueings 1 abbreviation denotes disjoint union automata expression exp 1 exp 2 interpreted finite nondeterministic filter automaton initial state 1 initial state f exp 2 example consider expressions exp ie following deterministic automata f exp 2 c c ffa cgg ffbgg fg ffb cgg fg nondeterministic automaton f exp 1 exp 2 initial state 1 4 3 5 state corresponding free variable x expression exp 1 exp 2 looks follows c c fg outlined introduction section firstly go power automaton p f initial state fs 1 secondly apply final f order obtain deterministic filter process represented expression exp 1 exp 2 according 4 example obtain following reachable part automaton p f b c ffbgg fflffi flfi fg known formal language theory trace 2 actions also trace actions p f vive versa interesting point automata also equivalent respect acceptance traces f exp 1 exp 2 carry sequence r 2 acceptance decisions actions p f draw attention point trace hci 1 4 3 5 continued f exp 1 exp 2 since 3 5 final state model breaking condition traces consider p f acceptance r traces thus decide state f2 3 5g acceptance break run general acceptance trace filter automaton f continued state domts acc intuition behind interleaving operator jjj combine two systems without synchronization systems could engage action choice nondeterministic definition 62 nondeterministic filter automata f define corresponding interleaved automaton follows 2 domints adapt example x1 p 121 4 consider following determin istic filter automata f 1 f 2 initial states 1 ffbgg interleaving f 1 f 2 provides int f 1 f 2 initial state 1 1 oo oo ffbgg power construction delivers following part p f int f 1 f 2 ffagg f fag fbg fa bgg ffbgg process expressions exp 1 exp 2 define r initial state 1 initial state f exp 2 discussion remark 43 concerning free variables applies also interleaving ie decide free variables exp 1 jjjexp 2 interaction operator k introduce contrast general choice interleaving new branching nondeterminism definition 41 provides way deterministic filter automata f corresponding synchronized filter automaton define additionally definition synchronization nondeterministic filter automata straightforward 63 recursion nondeterministic concealment actions forces us give full treatment internal actions anyway thus problematic model recursion nondeterministic u introduction special internal actions hoare insists intuition process expression xax represents infinite loop internal actions ie divergence cover intuition model operator introduction new internal action automaton glueing states done section 2 context deterministic partial automata finite nondeterministic filter automaton according f x alphabet initial state 0 2 x 2 state corresponds free variable x ie state especially domtsx fg obtain initial state 0 adding new internal action alphabet introducing new internal action x 0 g since state fx time corresponds x initial fx obtain fxax following onestate automaton back ffbackgg remark 63 correct distinguish automaton f alphabet interface ie set obs observable ractions sense may back already internal hidden action f f x ie back 2 int n obs already application recursion f x moreover observe stands set observable actions intuition behind nondeterministic u provide outside system nondeterministic alternative two possible behaviors model intuition introducing additional decision point two possible internal local decisions definition 64 let given nondeterministic filter automaton states introduction alternative 1 provides automaton us follows set rightg process expressions exp 1 exp 2 define analogously general choice operator nondeterministic filter automaton us 2 initial state 1 u 2 initial state f exp 2 example nondeterministic recursion consider expression x subsection 62 according definitions obtain fxexp 1 uexp 2 c right yy c oo back ffbackgg ffleftg frightgg initial state 1 u 4 internal actions left right back 64 elimination internal actions describe formally stepwise elimination internal actions automata outlined introduction section consider finite nondeterministic filter automaton fixed set obs observable actions state 2 construct new finite nondeterministic filter automaton r eliminating internal actions starting follows denote set states f reachable internal action set 2 domt 0 0 set note case domts n delete accts acceptances include internal actions apply stepwise elimination internal actions finite nondeterministic filter automaton f set obs observable actions get finally due finitarity f finite nondeterministic filter automaton thus consider f 0 automaton alphabet obs example subsection 63 get two steps order automaton f 0 c c ff ffbgg initial state arises merging states 1 4 1 u 4 3 5 fxexp 1 uexp 2 power construction provides following part p f initial state fmg c xx c ffbgg fflffi flfi oo even finite automata divergence ie loops internal ac tions procedure provides reasonable result crucial point abstract divergence merging states loop one state collecting fully observable acceptances loop way would obtain fxax two steps automaton fg ie automaton representing process stopa indeed r intuition hoare wishes interpret xax representing chaotic behavior 7 concealment last section describe within framework hoares treatment internal actions thus divergence problem assign states nondeterministic filter automaton f alphabet set obs observable actions deterministic filter processes alphabet obs firstly use power construction transform nondeterministic filter automaton f deterministic filter automaton p f f singleton states p f f correspond states f secondly assign state p f f deterministic filter process alphabet using unique final f final f coalgebra fma since set fpa deterministic filter processes carrier fma finally need mapping hide transform deterministic filter processes deterministic filter processes obs ie processes observable actions definition subject section going technical details draw attention following crucial observations since state transition function va final f coalgebra fma bijective well f carrier fpa 612 ii definition hide fpa fpa obs thus concept nonde terministic processes 4 based complex mixture coalgebraic algebraic techniques see remark 52 difference fully coalgebraic concept deterministic processes 4 mixed coalgebraic algebraic concept nondeterministic processes shows also difference fixed point constructions 4 deterministic processes construction starts completely undefined process stopa proceeds extending definedness contrast construction nondeterministic processes starts completely defined accepted process chaosa proceeds reducing definedness acceptance iii mapping hide provide neither coalgebraic algebraic sense kind homomorphism going define hide start considering two f subcoalgebras fma obviously set fpa obs observable processes constitutes f subcoalgebra fma fma obs r seen f subcoalgebra fma moreover characterize fma obs equation fma accv p fma obs greatest f subcoalgebra fma contained set loca obs locally observable processes see 9 way obtain set diva obs fpa divergent pro cesses ie processes infinite traces internal actions carrier f greatest f subcoalgebra fma contained set loca int processes local internal actions turn next algebraic viewpoint observe f generated set fpa obs diva obs ie means fm gamma1 smallest f algebra fm gamma1 containing fpa obs diva obs way use common algebraic induction two basic cases fpa obs diva obs define things fpa definition hide need auxiliary mapping merges finite set observable filter processes single observable filter process using embedding power construction obtain final thus final homomorphism p f nfma obs fma obs provides intended mapping merge let given set actions designated set obs observable actions define mapping consider first two basic cases observable processes take obviously identity divergent processes identified according hoare chaotic behavior induction step based f consider process p 2 fpa n fpa obs result applying operation v gamma1 argument accv p va p induction assumption hidev pa 2 fpa obs already defined 2 domva p define assumption hidep 2 fpa obs enough assign accv p va p 2 ppa theta p fpa pair r since use obs obs define obs notethat according definition bijectivity va obs analogously elimination internal actions described section 64 define acc follows denote set processes fpa reachable p internal action set note get indeed acc p according equations acc hideq induction assumption 2 domg p set case 2 domva case 2 domva case 2 example consider deterministic filter automaton fxexp 1 uexp 2 section 63 alphabet fa b c lef right backg set observable actions second third component process proc f xexp 1 uexp 2 1 starting state depicted right oeoe right upsilonupsilon c c upsilonupsilon second third component corresponding observable process r c oeoe c ffbgg fi upsilonupsilon c ii upsilonupsilon c since divergence fxexp 1 uexp 2 process coincides process starting state fmg automaton p f section 64 arises fxexp 1 uexp 2 firstly eliminating internal actions secondly abstracting nondeterminism using power construction 8 conclusion work shown concepts processes 4 strongly related semantical level concepts deterministic partial automata deterministic filter automata nondeterministic filter automata able give compatible semantical interpretation operations 4 level automata algebraic laws 4 turn statements concerning compatibility constructions different levels next step prove laws done statement theorem 42 concerning compatibility synchronization automata interaction processes based results categorical concepts paper able develop general theory combining structuring automata would include eg straightforward interpretation changes symbols means functors categories automata analogously 13 would also interesting necessary relate constructions results paper similar constructions results area behavioral 8 hidden 2 algebraic specifications also convenient consider weaker concepts homomorphisms based obvious partial ordering sets p p p f ppa respectively would allow eg consider synchronized automaton synm 1 2 relative subautomaton product automaton moreover able way extend considerations 14 concerning traces runs deterministic partial automata filter automata finally seems worth extend analysis section 7 process calculi find extend coalgebraic algebraic techniques mixed far may separated combined structured way r r universal theory automata hidden agenda algebraic theory processes communicating sequential processes unification theories challenge computing science tutorial coalgebras coinduction communication concurrency initial computability universal coalgebra theory systems automata coinduction exersice coalgebra category theoretic solution recursive domain equations functorial operational semantics denotational dual models concurrency coalgebraic introduction csp tr communicating sequential processes initial computability algebraic specifications partial algebras algebraic theory processes communication concurrency models concurrency unification theories automata coinduction exercise coalgebra universal coalgebra theory systems ctr michele boreale fabio gadducci processes formal power series coinductive approach denotational semantics theoretical computer science v360 n1 p440458 21 august 2006