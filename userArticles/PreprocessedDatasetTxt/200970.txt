developing reflective model collaborative systems recent years seen shift perception nature hci interactive systems interface work increasingly become focus attention social sciences expanded appreciation importance issues work practice adaptation evolution interactive systems reorientation view interactive systems accompanied call new model design centered around user needs participation article argues new process design enough new view necessitates similar reorientation structure systems build outlines requirements systems support deeper conception interaction argues traditional system design techniques suited creating systems finally using examples ongoing work design open toolkit collaborative applications illustrates principles computational reflection metaobject protocols lead us toward new model based open abstraction holds great promise addressing issues b introduction last ten years seen remarkable shift perspectives design evaluation use interactive systems field hci moved relatively minor component software engineering focus attention researchers variety disciplines including psychology social science studies investigations perspectives led gradual evolution conception interface computerbased work general result hci increasingly come concern mechanism interface range related issues concerning context interactive systems used 11 studies work interface ground discussion new view interactive systems development discuss three areas research informed customisation interactive systems embedding within social organisation coadaptation systems work practices 111 customisation customisation adaptation computer systems studied variety contexts trigg et al 1987 studied adaptation notecards hypertext system described four aspects adaptability could allow tool used different application areas users different working styles flexibility providing generic reusable objects behaviours parameterisability offering range alternative behaviours users could select integrability linking applications environment tailorability allowing users make changes system work showed adaptable system could applied widely essentially serving infrastructure within variety information management applications could generated maclean et al 1990 also concerned customisation buttons systems buttons graphical onscreen objects encapsulate behaviour incorporated online documents sent electronic mail buttons support multiple levels customisation simplest level name placement graphical appearance customised advanced users change explicit parameters customise particular needs radical changes behaviour made modifying lisp code contain buttons designed around levels tailorability flatten learning curve interactive systems establishing tailoring culture customisations encouraged shared also crucial investigation sharing customisations customisation activity focus attention researchers mackay 1990b 1991 studied patterns sharing customisations form configuration files either whole part technical organisations found remarkable amount customisation performed shared groups rather private activityeven software customised singleuser nardi miller 1991 showed similar collaborative activity goes notionally singleuser activity programming debugging spreadsheets customisation clearly widespread important phenomenon studies highlight importance designing systems understanding flexibility harnessed exploited 112 social aspects system use ethnographic studies work practice technology pointed strong social elements present apparently individual use technology heath luff 1991 studying activities control room londons underground transport system observed range complex practices employed control lers particular showed controllers would peripherally monitor others activities order coordinate actions colleagues heath luff observed individuals would quietly offer commentaries activities specifically might used colleagues work others uses peripheral monitoring anticipation similar settings observed filippi theureau 1993 suchman 1992 harper et al 1991 studied different settingin case control rooms air traffic control cen tres observed apparently individualistic activity frequently designed facilitate coordination individuals investigations pointed role physical artefacts play process flight stripsused air traffic controllers record details flights currently managed air spaceare notionally designed record information individual however practices emerge around artefacts become focus coordination activity suchman 1987 discussed issues generally concentrating particular situatedness technology use technology technological interactions embedded within social organisational situations influence must taken account attempting analyse predict aspects system interaction studies call question extent interactions activity predicted external viewpoint yet predictions basis traditional system development approach 113 coadaptation systems practices third aspect drawing together elements previous two concerns longerterm mutual evolution systems work practices mackay 1990a presented variety case studies illustrating pattern discussed perhaps interest one study information lens malone et al 1988 mackay 1989 lens system designed filter sort electronic mail investigations use revealed users adaptedor even subvertedfeatures information lens match working styles turn led change development strategy incorporated developed mechanisms users created spiralling process based mutual interaction system development patterns usein mackays terms coadaptive phenomenon echoes unanticipated interaction technology working practice found sproull kieslers 1991 work organisational impacts electronic communication technologies often construed electronic office memos subject rules procedures however experience typically aspects electronic mailin particular rapid turnaround emergence selforganising interest groupsresults different pattern use often much surprise organisation patterns become better established affect development technology coadaptive spiral continues 12 revised view interactive systems set general issues underlying particular concerns raised studies together form part wider reappraisal nature computerbased work encourage us look beyond widget design understanding interactive systems instance focussing development notion user interface grudin 1993 shown extends beyond computer incorporating wider social organisation issues arising use computer systems elsewhere grudin 1990 placed developments within historical framework changing concerns interface design microlevel sentiments echoed bowers rodden 1993 found factors work specific settingthe installation large network cscw systems particular observation studies customisation social nature computerbased work coevolution systems work practices address issues organisation computerbased work practices highlight strong relationship practices social organisation work generally computerbased work highly socially organised result studies place emphasis variability use point complexity relationship general pattern use details particular activities surprising studies result reorientation view fundamental nature interactive systems reorientation takes account expanded understanding computer usage indeed reorientation taking place moves away view systems fixed blackbox artifacts could objectively studied assessed towards new view systemsinuse acknowledges influence elements new view systems situated within particular organisations practices dynamic placing greater importance study patterns use cycle software adoption evolve specific working practices behaviours emerging around interactive system time system tailored particular working styles words systems must able support variability exposed investigations like discussed shift perspectives largely addressed interactive systems appear user particular settings indeed part general trend towards participative usercentred approaches system building however raises important issues particularly designers implementors interactive systems issues reach interface paper want concentrate structure systems create believe implications reconception hci forces us reconsider notions systembuilding means changes process design alsocriticallyto artefacts design particular show fundamental mechanisms use constructing software systems support design interactive systems change evolve drawing work done areas systems develop ment show principles computational reflection lead open model systems de velopment revisability key element using examples ongoing work design open cscw toolkit illustrate approach tackles number existing flexibility problems starting point investigation questionwhat shift view interactive systems imply nature systems design implications interactive systems design increasing appreciation issues discussed accompanied call form design sensitive thema form design oriented specifically around user needs user involvement see example norman draper 1986 ehn 1988bdker grnbk 1991 following grudin 1991 highlighted conflicts usercentred approach design traditional systems development process taking starting point want explore construct systems support sorts practices outlined principally involves looking technical implications new approach interactive systems working towards architectural model addresses aspects systemsinuse perspective identify two sets consequences design concerned cycle design creating evolving systems 21 cycle design first reconsideration cycle design traditional waterfall model software engineering royce 1970 design system happens fixed pointafter specification implementation recent models boehm 1988 booch 1991 adopt iterative prototypebased approach design distributed evenly development process concentrated one place despite differences least one point fundamental agreement among models state point product delivered user community point revision software design process assumption must reconsider light systemsinuse model take perspective forced ask questions design happen de sign stop look interactive system evolving artifact use follows process design end delivery system community users instead continues use adapt system leads second focussed set concerns system developers looking systems structured constructed delivered 22 creating evolving systems developer interactive system must concerned traditional issues system de sign also issues providing system amenable evolution adaptation focus three particular aspects problem 1 open infrastructures perspective systemsinuse begin see delivered systems closed static rather infrastructures specialisation refinement enduser design provide framework within users change adapt basic system patterns usage system developer concerned appropriate openness within system ensuring lends adaptations nature appropriateness considered depth later moment consider appropriate lending appropri ation addition extending model customisation must consider ways system lend customisation function semantics manipulating information interactive system well presentation surfacelevel issues views interaction 2 dynamic reactive systems think user behaviour changing time must consider interactive system support respond changes point view systems need designed dynamically react patterns use activity systems response must situated sense users activity users needs highly dependent many contextual factors patterns activity changes configuration similarly system behaviour react contexts use 3 adaptive evolving systems addition immediate view system reactivity developer must also concerned longerterm view evolution system research customisation coadaptivity shows evolution roots social aspects work enabled part sharing customisations implies important address issues nature customisation mechanisms means distributed shared evolve timesupport maclean et als tailoring culture tailoring context imply ability make changes also crucial changes adaptations separated core functionality principled way maintaining reach tailorability core separation crucial tailorings adaptations transport able person person also across software releases software product cycles shrink essential users rely without separation user unlikely make investment time effort tailoring involves since effects lost next software release issue system designers develop set techniques constructing software systems enable distribution design phase throughout whole lifecycle system support software adaptation evolution significant departure traditional focus software design focus developing fixed algorithms manipulate models application domain instead focuses way models might constructed manipulateda metalevel problem one step removed application domain 3 reflection open abstraction view developed ongoing work design systems computersupported cooperative work cscw cscw systems nature strong requirements flexibility openness customisation may performed users groups whole even single group might employ wide variety working styles course work factors bring system developer facetoface issues reactivity adaptability problems magnified developers generic toolkits used generate variety cscw applications may embody different models collaboration result major goal work also provide application developer sufficient flexibility create range application styles reflecting shift design focus outlined emphasis framework mechanisms interactional styles created rather traditional approach providing selection mechanisms particular components selected systems approach developing based principles computational reflection smith 1982 maes 1987 particular metaobject protocol kiczales et al 1991 approach crucial steppingstone towards goals flexible design outlined provides way incorporating flexibility need design process artefacts design fundamentally systems open explicit change adaptation worth taking time look mechanics reflection way establishes link generic models system action performance action rest section outline reflective approach show developed metaobject protocol illustrate protocol used particular case representation programming language show generalised notion open implemen tation return look design issues interactive systems 31 computational reflection metaobject protocols computational reflection principle computational system embody within model behaviour selfrepresentation causally connected behaviour causal connection implies representation describes also controls behaviour system first results systems examine behaviour examination model system reason activity second systems make changes model hence change behaviour essentially addition traditional baselevel computation concerns systems application domain reflection enables metalevel computation concerns systems manipulation execution baselevel concepts principle originally demonstrated part execution model 3lisp reflective dialect lisp programming language 3lisps reflective facilities realised giving language explicit access interpreter program controlling behaviour des rivires smith 1984 looking interpreter structures 3lisp programs could examine execution states stance program could look function call sequence recorded interpreters data structures ask questions like function arrived making changes struc tures programs could alter future behaviour instance modifications processing binding structures would allow programs change ways values associated variables since interpreter structures represent programs execution providing access gave 3lisp programs facilities reason control behaviour recently principles embodied 3lisps reflective model combined techniques objectoriented programming yield metaobject protocol metaobject protocol embodies reflective selfrepresentation structures objectoriented programming selfrepresentation metaobject protocolbased system less explicit 3lisp much representation encoded objectoriented structure access representation manipulation provided object system using standard techniques objectoriented programming subclassing specialisa tion overloading etc example illustrate mechanics modifying system behaviour metaobject protocol provided first full metaobject protocol mop developed within definition common lisp object system clos bobrow et al 1988 bobrow et al 1993 1 clos mop creates reflective object system using object mechanisms create objectoriented representation behaviour 2 reflective model changed standard objectoriented techniques like objectoriented definition allows application programmers adapt object system semantics particular needs perhaps efficiency particular platforms compatibility systems specialised behaviours enable development specialised applications 32 using clos mop explain clos mop little concretely present example application programmer revise design decisions implemented language particular example focuses issue instance representation implementation illustrative general approach objectoriented programming language clos implementor must design representation instances objects 3 record properties identity instance values slots simple obvious mechanism might allocate enough memory instance slots define size instance particular class compile slot references programs appropriatelyvalued offsets instance body shown figure 1a positions slots x wellknown references always compiled references address object plus size slot x representation efficient many applications might built programming language lets compiler generate fast code slot access however application programs well served representation instance consider knowledgebased application application programmer might wish define class referring people class might many slots many hundreds referring various properties individuals might however given instance class would perhaps define use case simple representation outlined abovewhich allocates memory slots whether hold valueswould inappropriate instead application programmer would prefer mechanism allocates space slot assigned valueperhaps one based lookup table instance figure 1b illustrates alternative representation instance maintains pointers slots actually values traditional languages implementations choice representation scheme hidden fixed since hidden programmer becomes aware indirectlyeg effect perfor 1 since metaobject protocols incorporated related languages eulisp bretthauer et al 1992 dylan shalit 1992 2 words clos reflective also metacircular defined 3 throughout paper use clos terminology objectoriented concepts individual objects instances classes instance contains number defined variables called slots classspecific behaviours defined methods grouped together generic functions define patterns interaction mance particular cases since fixed programmer cannot use highlevel information pro grams behaviour inform implementation decisions instead write code suits decisions already made implementorwhat kiczales 1992 refers coding lines mopbased language however application programmer revise decisions language implementorin case changing representation model used done traditional objectoriented techniques fact programming clos mop performed clos example mechanism would roughly follows 1 class called standardclass normal userdefined classes instances stan dardclass known metaclass classesa metaclass class class 2 metaobject protocol defines generic functions classes including functions implementing instance allocation slot lookup methods operations specialise standardclass hence applied instances normal classes 3 new metaclass embodying new instance representation sparse tabledriven approach defined subclass standardclass call sparseclass 4 since sparseclass subclass standardclass inherits methods instance allocation slot lookup standardclass however define new specific methods override existing ones apply instances sparseclass 5 applications programmer define new methods allocateinstance generic function creating instance representations slotvalueusingclass looking slot figure 1a packed representation data value held within object fixed wellknown position figure 1b sparse representation object contains table associates assigned slots pointers data contain x x x age weight height values specifically instances sparseclass implement new sparse slot representation 6 programmer create classes like person sparseclass meta class classes inherit classlike behaviour sparseclass hence use sparse tabledriven instance representation scheme example programmer used knowledge requirements specific application revise implementation decisions revision performed using systems reflective model behaviour new specialised behaviours associated subclass one systems internal classes since mop guarantees use generic functions implement internal behaviours approach used redirect object systems behaviour since exploits polymorphism objectoriented programming techniques new behaviour applies objects specify whose metaclass sparseclass without facility would necessary write ap plications code convoluted way live inefficient performance abandon particular object system altogether benefits application developerwho tailor system needs particular applicationand language implementorwho design language much wider applicability traditional ones defining closs behaviour terms metaobject protocol developers language means make language open adaptable avoided traditional problem within language toolkit designa premature commitment forced upon system designers making implementation decisions limit choices open later users system instead system specifies default behaviours baselevel behaviours object system whatever also provides mechanism behaviours revised make appropriate particular circumstances result course designers mopbased system much less specific idea system used default behaviours specify particular system generally useful generic behaviours metaobject protocol define framework within users create customised systems complex twolevel design task 33 extending mop approach examples reflective systems given concentrated programming languages 3lisp clos indeed primary use reflective techniques date provide flexible semantics programming languages however seen essence reflective approach closely related problems openness adaptability discussed interactive systems design possible could adapt reflective techniques use areas examples show one starting point would silica rao 1991 reflective window system forms basis common lisp interface manager clim silica provides basic window system infrastructure generating graphical windowing applications however also provides set metalevel abstractions used application developers reach windowing infrastructure tailor needs specific applications much saw clos silica metalevel interface defined terms metaobjects windows window components contracts contracts manage relationships system components deal issues geometry management window stacking refreshing forth metalevel interface used avoid sorts problems motivated clos metaobject protocolthat situations implementation decisions window system infrastructure limit applicability particular situations silica represents new departure discussion reflective systems unlike 3lisp clos generalpurpose programming languages silica cannot defined termsa window system provide language used construct window systems clos 3lisp metacir cular whereas silica raos notion implementational reflection embodied silica shows apply reflective techniques much wider range application areas seen far recent work arising metaobject protocol experiences opened notions general means providing systems clients control abstractions use kiczales 1992 presents metaobject protocols one technique used realise open imple mentationssystem implementations augment traditional abstraction barriers modification terfaces allowing higherlevel users reach make appropriate changes approach applied wide range problems arising areas infrastructures must support wide range applications kiczales also introduces complementary notion open behaviour se mantics rather implementation open change higher levels example clos domain pclos paepcke 1988 pclos exploits metalevel hooks mechanisms objects created accessed destroyed creates persistent version language maps objects onto longterm storage database behaviour system extended rather implementation particular applications platforms notions general originate work programming language design point application reflective techniques much wider range software application areasin cluding domain interactive systems 4 reflective toolkit cscw design approach system architecture presented results current work design prospero flexible toolkit cscw systems individual cscw applications need flexible along various dimensions first must statically flexible terms customisation particular individual group practices working styles explored detail greenberg 1991 second must dynamically flexible response changes group behaviour course specific collaborations even specific collaborative sessions third must implementationally flexible infrastructural interoperative requirements change time toolkit needs provide developers sufficient flexibility generate applications wide range groups applications usage settings programming languages fix implementations languages abstractions existing cscw toolkits groupkit roseman greenberg 1992 mmconf crowley et al 1990 forced structure impose fixed models abstractions distributed data man agement follows directly traditional structuring techniques software development hide implementation details behind abstraction barriers reach applications developer clearly value approach particular isolates applications developer toolkit concerns focussing attention areas specific application cost range applications developed within toolkit greatly restricted since implementation decisions within toolkit constrain kinds interactions supported applications isolation toolkits provide prevents developer using highlevel information application inform lowerlevel decisions appropriate current work uses reflective techniques address problems structuring cscw toolkit around metaobject protocol allows us tackle two issues first well providing default behaviours specify natural behaviour system gives programmers opportunity specialise refine generic framework toolkit means toolkit used provide customised support particular situations applications second selfrepresentation present applications runtime allows appropriatelywritten programs respond dynamically adaptively used section outlines way reflective approach applied cscw domain taking highlevel description generic application behaviour shows areas concern cscw application developers variety strategies supported within single metalevel framework 41 using reflection cscw design apply reflection design cscw toolkit must open implementation involves specifying generic behaviours underlie systems operation generic entities behaviours act providing explicit access generic behaviours allows toolkit user ie programmer specialise particular situations generic behaviours broken subprotocols specific areas responsibility clearly huge number potential areas responsibility within toolkit one major issues mop design identification particular set concerns design address order create system flexible manageable looking particular experiences developers building applications toolkits cooperative systems see number issues embedded design infrastructure yet strong implications kinds applications supported areas candidates approach currently work concentrates three main areas management user data distributed across time space mechanisms managing conflict user interactions control linkage components multiple users interfaces area approach fundamentally involves specifying generic behaviour defined terms generic function invocations metaob jects explicit representations systems behaviour generic behaviours specialised application developers incremental modifications representations actions looking use reflective techniques areas necessary lay highlevel structure relates full description approach used prospero beyond scope paper simplified account presented interested reader referred treatments eg dourish 1994 consider system operates terms generic edit operations applied shared objects general layer functionality provided function editobject object user editop statemarker object local reference globally shared object collaborative workspace user representation user performing operation editop encoding operation performed generic function editobject applies edit operation object returns statemarker describes new state implemented terms number lowerlevel generic functions findobject object shobject lockobject shobject user editop lockid applyedit shobject user editop changemarker propagate changemarker lockid statemarker functions perform component operations editobject mapping local objects pre 1 functions given format used lisp programming language first term function name subsequent terms name arguments function sented within interface object components shared workspace obtaining access objects applying changes propagating changes widely releasing lock use change markers statemarkers encapsulations state system various points changemarkers record edits made yet committed statemarkers checkpoint global status model presented protocol uses synchronisation presents view edit changes performed locally however long true generic model implementations may behave differently set general framework investigate system variability areas data distribution conflict management interface linkage managed 411 data distribution issue data distribution bone contention within cscw implementation community time term data distribution covers mechanisms system manages user data storage manipulation data may replicated distributed across multiple computers system must present view single coherent data store systems mmconf crowley et al 1990 take fully replicated approach participant conference private copy data others rapport ahuja et al 1990 use centralised architectures concentrate data single point network greenberg et al 1992 argued favour hybrid systems combine approaches solutionsreplicated centralised hybridmakes tradeoff efficiency complexity approach taken particular toolkit seems clear solution appropriate every case occasions centralised replicated hybrid approaches appropriate times might need others instance consider disconnected systems interfaces involved collaboration permanently connected others situations network latency high intragroup interaction low might useful adopt migratory mechanisms allow data objects move one node another network migration isnt separate strategy combined three basic techniques approaches posited particularly appropriate situations need able express variability toolkit perhaps importantly data distribution approach adopted toolkit application important consequences appearance functionality usability application use centralised data store instance negatively affect response time system use replicated approach implications maintenance data consistency odds traditional view factors data distribution sufficiently lowlevel safely encapsulated hidden behind abstraction barrier 1 rather make decisions upfront take reflective approach within toolkit provide default mechanism managing data within multiuser system also give access mechanism data distribution accomplished allows programmers may find default behaviour inappropriate case eg network topology using reach toolkit provide new mechanisms used applications sample subprotocol outlined manages data distribution largely findobject propagate mechanisms isolate location distribution details details actually making changes objects using findobject encode new mechanisms mapping interface objects underlying shared data instance centralised system findob 1 interaction distributed data management issue synchrony interaction also critical merits longer investigation presented ject always return pointer central object store propagate return locally changed object server hand fully replicated system shared object reference always local complicated methods propagate allow changes synchronised ap propriately important note though approach merely provide switch two modes instead provides framework new solutions devised generality findobject propagate allows many alternatives including hybrid migratory systems created since representations available runtime rather simply system defined opportunities present amend data distribution mechanism using dynamic model would allow distribution strategies changed course ongoing collaborative session allows application adapt needs group arise instance consider two users sharing scrawlstyle whiteboard application connected ethernet segment since connection fairly low roundtrip packet times high data integrity system requirements data management fairly minimal centralised approach probably entirely adequate however things change third user joins conference distance connected via much slower dialup line situation centralised approach longer appropriate since bandwidth link third user sufficient support network interaction data server action interface system must switch runtime one algorithm anotherfrom centralised replicated data represen tation reflective approach provides potential multiple behaviours within generic frame work thus supporting form dynamic adaptation distribution associated object mixin 1 class changing class object result dynamic switch different behaviour reflective approach provides framework within new mechanisms defined means attach use mechanisms selectively different parts system gives three principal benefits would available traditional solutions first application developer longer constrained decisions within toolkit free adapt toolkit mechanisms needs application second toolkit developer longer needs second guess specific needs de veloper restrict applicability toolkit subset potential applications third using reflective model runtime allows applications respond dynamically environments requirements particular situations within single coherent framework see pattern benefits repeat areas apply computational reflection toolkit design 412 conflict management important area concern collaborative applications management avoidance conflicts within shared workspace conflict might occur instance two users apply change object various techniques employed deal sort situation including floor control exclusion locking systems shredit mcguffin olson 1992 lock regions shared workspace preventing simultaneous updates since one user hold lock region given time others grove ellis gibbs 1989 use algorithm fixes conflicts afterwards effect imposing posthoc serialisation changes users make essence conflict management strategies system able provide guarantees us ers changes data lead loss synchronisation data integrity prospero exploits explicit representations guarantees approach explored detail dourish 1994 ac 1 mixin class one added classes order bring new behaviour orthogonal defined base classes count however focus solely systems providing rapid access single thread control even choose simple approach locking consider impact particular locking mechanisms defined within toolkit might higherlevel usage issues instance collaborative system supporting freeform sketching brainstorming emphasis probably unencumbered access shared work surface user explicitly request explicitly relinquish locks data control floor overhead would high progress work would severely disrupted looser form control would needed hand looser control would inappropriate systems data integrity must rigorously maintained controlled collaborative software engineering application multiuser cad system generates control instructions milling machine data errors due unchecked conflicts could potentially disastrous much stronger explicit form locking would required neither approach satisfies needs generic toolkit addressing problems reflective toolkit attempt provide metalevel interface defines generic operations involved requesting obtaining releasing locks simple protocol outlined start section 4 focus call lockobject implicit releaselock called propagate protocol embody locking policy instead deals procedure locks obtained facility creating installing new mechanisms generic function specifies well object locked function arguments include user requesting lock type operation performed system take information account selecting locking mechanism different locking strategies may apply different users activities different sorts objects within system implementor rely object systems generic dispatch mechanism dynamically select appropriate locking implementa tion programmer tailor locking strategies particular applications also build systems locking mechanisms used rely specific details user object involved basic mechanism sufficiently open wide range locking strategies defined allow implementation standard strong weak locks also multiway locks held multiple people tickle locks idle may implicitly reassigned users perform operation indeed reproduce schemes groves dopt algo rithm explicit locks used making lockobject construct appropriate state vector distributed call propagate nodes use information resolve ambiguities arising conflicting misordered operations case regard dopt state vector implicit lock sense object allow conflict resolution words basic mechanism used encode form conflict management hardly lockbased 413 interface linkage one obvious differences cscw systems level link interface fea tures linkage determines level control users way interfaces appear without affecting users collaborative application grossest level linkage screenrep lication used example timbuktu faralon 1987 screen linkage means users see exactly thing screens shared x systems garfinkel et al 1989 link interfaces level win dows users share contents window screens may show independent applications window placement vary person person many explicit multiuser tools shredit much looser replicate data 1 users may different views data may provided individual edit cursors within class systems differences user see others interfaces many systems separate users isolate interfaces research groups interacting synchronously shared systems shown lowlevel cues used collaborators create awareness activity progress group whole dourish bellotti 1992 recent work dewan choudhary 1991 haake wilson 1992 looked provision switchable linkage states users choose much interfaces mirror others similar twomode switching facility available ribis rein ellis 1991 see requirements flexibility within applications toolkits flexibility dynamic component nondynamic aspect nowfamiliar toolkitlevel problem different applications require different linkage strategies generic toolkit must able support range linkage options dewans work suite haake wilsons sepia tackle problem well addressing dynamic problem switching different linkage modes collaborative session however systems provide flexible linking specific modes predefine linkage strategies addresses part problem different users groups require different linkage strategies situation calls strategy predefined options remaining within frameworks clearly goal provide flexibility flexibility within constraints set needs anticipated toolkit de signer mechanisms parameterised open approach taken prospero make aspects interface components shared objects exactly like workspace data objects illustrated figure 2 way components menus button states cursor positions subject mechanisms outlined earlier dynamic distribution algo rithms mechanisms maintain consistency workspace objects used synchronise interfaces result flexibility applied distributed data management also applies 1 note concern replication interface features rather underlying data representations discussed earlier systems data guaranteed consistently replicated interfaces figure 2 data objects also interface components part shared workspace interface management interface components explicitly shared causing aspect interfaces linked separated broadcast allowing individual control able see others states private case users cannot see addition another property common shared data objects moved shared workspace course collaboration means linked aspects users interfaces dynamically controlled adjusted collaboration continues 5 reflection adaptive computation paper mainly concerned use computational reflection related techniques ways opening implementations providing flexibility techniques discussed developed primarily domain programming language design recently similar issues come prominence number areas various radical solutions adopted go beyond traditional separation mechanism policy often address issues similar discussed within context cscw design communication protocols data networks traditionally based layered approach form design exemplified sevenlayer iso protocol stack zimmerman 1980 endtoend communication requirements broken different areas responsibility data representation conversion direct hosttohost communication internetwork communication component encapsulated layer given machine layer interacts layers directly recently however need handle interactive multimedia traffic issues arising design protocols gigabit networks resulted breakdown model place flatter approach emerging traffic management controlled directly application rather hidden network software omalley peterson 1992 described model application compose kernelinternal microprotocols larger units optimised particular requirements clark tennenhouse 1990 propose concept integrated layer processing mechanism avoid interlayer inefficiencies emerge infrastructure examined point view particular endtoend systems area operating systems much functionality usually domain system opened external control one obvious examples machs external pager rashid et al 1987 allows user programs involve aspects virtual memory systems operation similarly anderson et al 1992 describe scheduler activations means avoid tradeoffs implementation threads traditionally completely opaque abstraction implementation based either operating system kernel user library scheduler activations provide finer grain control explicitly designed allow applicationspecific customisation trend repeated many areas interprocessor communication felten 1992 even microprocessor design athanas silverman 1993 principle work examples based understanding traditional closed abstractions always appropriate highlevel systems design general particular design infrastructural compo nents various solutions oriented around downward flow information higher levels applications lower levels toolkits infrastructures order support better interaction two downward flowfrom application requirements details system supportmirrors problems prospero addresses reflective techniques reflection achieves opening underlying implementation allowing applications programmer explore alternative implementations behaviours within metalevel framework corresponds kay 1993 characterised latebinding systemsthose design implementation decisions affect observable behaviour delayed resolved much context possible techniques discussed derived work programming language design latebinding useful important interactive systems especially cscw systems contextual factors play large part interaction prospero toolkit cscw applications development based principles concentrates primarily issues data distribution conflict management interface linkage examples paper drawn work progress system provides default behaviours used construct applications usual way appropriate importantly though also provides metalevel framework used revise implementation decisions extend structure cover new areas make toolkit appropriate range applications 6 summary primary focus paper models implementing interactive systems argued recent years seen fundamental reorientation view interactive systems use turn forces reorientation view system design structure particular appreciation need use customisation facilities role work practice situation system use coadaptive nature system use user behaviour lead us model systems design emphasises openness dynamic behavior evolution systems practices move away static systems leads us reconsider architectures underlie interactive systems enough simply change process design instead need change nature artefacts drawing principles techniques computational reflection derived originally research programming language semantics outlined model interactive system design oriented specifically towards new goals flexibility adaptation particular model currently used implementational basis toolkit cscw design outlined toolkit tackles number current problems cscw toolkits must used wide range different circumstances situations work currently ongoing hoped reflective toolkit cscw provide insights general application notions open implementation behaviour range current problems interactive system design acknowledgments ideas expressed paper would never seen light day without contributions encouragement many people would particularly like thank hal abelson bob anderson victoria bel lotti danny bobrow jon crowcroft gregor kiczales wendy mackay fruitful enlightening dis cussions grateful annette adler jon crowcroft laura dekker marge eldridge lorna goul den jonathan grudin gillian ritchie lisa tweedie anonymous reviewers careful readings valuable comments earlier drafts paper r comparison application sharing mechanisms realtime desktop conferencing systems scheduler activations effective kernel support userlevel management parallelism processor reconfiguration instructionset metamorphosis common lisp object system specification clos context shape design space cooperative prototyping users designers mutual activity spiral model software development enhancement object oriented design exploding interface experiences cscw network balancing eulisp metaobject protocol architectural considerations new generation protocols mmconf infrastructure building shared multimedia applications flexible user interface coupling collaborative system divergencebased model synchrony distribution collaborative systems awareness coordination shared workspaces workoriented design computer artifacts concurrency control groupware systems timbuktu next best thing case applicationspecific communication protocols sharedx multiuser interface users guide version 20 personalisable groupware accommodating individual roles group differences human technical factors distributed group drawing tools computer reaches historical continuity interface design obstacles user involvement software product development implications cscw interface evolving concept supporting collaborative writing hyperdocuments harmonious working cscw computer technology air traffic control collaborative activity technological design task coordination london underground control rooms early history smalltalk art metaobject protocol towards new model abstraction software enginering users customisable software coadaptive phenomenon patterns sharing customisable software triggers barriers customising software shredit shared electronic workspace usertailorable systems pressing issues buttons computational reflection semistructured messages surprisingly useful computersupported coordination twinkling lights nested loops distributed problem solving spreadsheet development usercentered systems design pclos flexible implementaton clos persistance rendezvous architecture synchronous multiuser applications implementational reflection silica machineindependent virtual memory management paged uniprocessor multiprocessor architectures ribis realtime group hypertext system implementation procedurally reflective languages groupkit groupware toolkit building realtime conferencing applica tions managing development large software systems dylan objectoriented dynamic language reflection semantics procedural language connections new ways working networked organisation plans situated actions technologies accountability lizards aeroplanes adaptability tailorability notecards osi reference modelthe iso model architecture open systems interconnection tr semistructured messages surprisingly useful computersupported coordination machineindependent virtual memory management paged uniprocessor multiprocessor architectures spiral model software development enhancement pclos flexible implementation clos persistence concurrency control groupware systems experienced information lens users use rules object oriented design applications comparison application sharing mechanisms realtime desktop conferencing systems usertailorable systems pressing issues buttons patterns sharing customizable software mmconf infrastructure building shared multimedia applications architectural considerations new generation protocols ribis obstacles user involvement software product development implications cscw cooperative prototyping flexible user interface coupling collaborative system triggers barriers customizing software art metaobject protocol connections harmonious working cscw twinkling lights nested loops dynamic network architecture groupkit awareness coordination shared workspaces supporting collaborative writing hyperdocuments sepia scheduler activations interface evolving concept early history smalltalk clos context exploding interface human technical factors distributed group drawing tools processor reconfiguration instructionset metamorphosis implementational reflection silica ctr carljohan orre christopher paul middup spheres collaboration people space technology colocated meetings proceedings 4th nordic conference humancomputer interaction changing roles p389392 october 1418 2006 oslo norway robert w hall amit mathur farnam jahanian atul prakash craig rassmussen corona communication service scalable reliable group collaboration systems proceedings 1996 acm conference computer supported cooperative work p140149 november 1620 1996 boston massachusetts united states weigang wang jrg haake tailoring groupware cooperative hypermediaapproach computer supported cooperative work v9 n1 p123146 2000 jakob hummes bernard merialdo design extensible componentbased groupware computer supported cooperative work v9 n1 p5374 2000 kai lin david chen chengzheng sun geoff dromey maintaining constraints collaborative graphic systems cogse approach proceedings ninth conference european conference computer supported cooperative work p185204 september 1822 2005 paris france paul dourish consistency guarantees exploiting application semantics consistency management collaboration toolkit proceedings 1996 acm conference computer supported cooperative work p268277 november 1620 1996 boston massachusetts united states paul dourish parting ways divergence data management collaborative work proceedings fourth conference european conference computersupported cooperative work p215230 september 1014 1995 stockholm sweden richard bentley paul dourish medium versus mechanism supporting collaboration customisation proceedings fourth conference european conference computersupported cooperative work p133148 september 1014 1995 stockholm sweden demonstrational customization shared whiteboard support userdefined semantic relationships among objects proceedings 2001 international acm siggroup conference supporting group work september 30october 03 2001 boulder colorado usa matthew chalmers hermeneutics information representation european journal information systems v13 n3 p210220 september 2004 matthew chalmers areti galani seamful interweaving heterogeneity theory design interactive systems proceedings 2004 conference designing interactive systems processes practices methods techniques august 0104 2004 cambridge usa paul dourish w keith edwards tale two toolkits relating infrastructure anduse flexible cscw toolkits computer supported cooperative work v9 n1 p3351 2000 peter j kammer gregory alan bolcer richard n taylor arthur hitomi mark bergman techniques supporting dynamic adaptive workflow computer supported cooperative work v9 n34 p269292 aug 2000 richard bentley flexible architectures cscw system support acm sigois bulletin v15 n3 p57 april 1995 panagiotis louridas pericles loucopoulos generic model reflective design acm transactions software engineering methodology tosem v9 n2 p199237 april 2000 lesley seebeck richard kim simon kaplan emergent temporal behaviour collaborative work proceedings ninth conference european conference computer supported cooperative work p123142 september 1822 2005 paris france matthew chalmers historical view context computer supported cooperative work v13 n34 p223247 august 2004 paul dourish using metalevel techniques flexible toolkit cscw applications acm transactions computerhuman interaction tochi v5 n2 p109155 june 1998 prasun dewan integrated approach designing evaluating collaborativeapplications infrastructures computer supported cooperative work v10 n1 p75111 jan 2001