theory interactive generalized semimarkov processes paper introduce calculus interactive generalized semimarkov processes igsmps stochastic process algebra express probabilistic timed delays general distributions synchronizable actions zero duration choices may probabilistic nondeterministic prioritized igsmp equipped structural operational semantics generates semantic models form generalized semimarkov processes gsmps ie probabilistic systems generally distributed time extended action transitions representing interaction among system components obtained expressing concurrent execution delays variant st semantics based dynamic names fact names delays generated dynamically semantics makes possible define notion observational congruence igsmp abstracts internal actions zero duration simply combination standard observational congruence probabilistic bisimulation also present complete axiomatization observational congruence igsmp finally show derive gsmp given igsmp specification order evaluate system performance present case study b introduction stochastically timed process algebras see eg 2012161016285111722 formal specication languages describe concurrent systems viewpoint interaction viewpoint performance extend expressiveness classical process algebras introducing notion time form delays probabilistic duration advantages integrating description interaction description performance preprint submitted elsevier preprint 26 june 2000 several first specify analyze systems combined behavioral performance properties eg via notion integrated equivalence relates terms behavioral performance characteristics take advantage feature compositionality oered process algebras describe concurrent system term behavior composing processes secondly analyze behavioral performance properties system separately two projected semantic models standard transition system labeled actions stochastic process kind markov property automatically derived initial integrated specication advantage models guaranteed consistent since formally derived initial integrated specication lot work previously done eld markovian process algebras see eg 20617 references therein stochastically timed process algebras probabilistic distribution delay assumed exponential causes passage time memoryless consequence system behavior described via interleaving operational semantics expressing execution time delay atomic transition without explicitly representing durations delays moreover limitation exponential distributions allows straightforward transformation semantic model system continuous time markov chain ctmc limitation imposed durations strong modeling viewpoint eg even deterministic xed durations expressed capability expressing general probabilistic distributions would give possibility producing much realistic spec ications systems even system activities uncertain duration could represented probabilistically adequate distributions exponential ones eg gaussian distributions experimentally determined distributions previous eorts done order try extend expressiveness markovian process algebras probabilistic time general distribution 12110162851122 main point understand dene semantic models semantic reasoning eg denition adequate notion bisimulation based equivalence probability theory systems capable executing parallel activities generally distributed durations represented generalized semimarkov processes gsmps 24 previously 5 studied develop adequate operational semantics process algebra general distributions generates semantic models form gsmps 5 shown problem representing time delays semantic models basically describing behavior system via st semantics 13497 according st seman tics evolution delay represented semantic models similarly gsmps combination two events delay start delay ter mination termination delay uniquely related start eg identifying delay unique name see approach natural expressing time delays especially duration expressed general probability distributions moreover use st semantics leads notion choice among delays based preselection policy choice among alternative delays resolved rst performing probabilistic choice among possible delays executing selected delay therefore choice delay naturally represented semantic models probabilistic choice among transitions representing delay starts also show 5 method solving choices compared race policy used markovian process algebras adequate simple dealing generally distributed durations hand adheres fact ctmc probabilistic choices implicitly expressed race exponential distributions gsmps explicitly expressed via probabilistic selection mechanism semantic model system derived way easy derive performance model form gsmp gsmp analyzed well established mathematical simulative techniques order obtain performance measures system see eg 14 paper consider variant algebra 5 allows us dene notion observational congruence abstracts internal computations visible external observer actions desirable may lead tremendous state space reduction semantic models technically obtained restricting possible durations synchronizable actions zero durations precisely following approach quite usual realtime process algebras see eg 27 imported stochastic process algebra community 1917 distinguish actions f representing delay whose duration given probability distribution f standard actions ccscsp 2521 including internal actions zero duration analogy 17 call resulting algebra calculus interactive generalized semimarkov processes name ects separated orthogonal treatment delays standard actions following ideas 5 dene operational semantics delay f igsmp st semantics hence delay represented semantic models combination event start delay f event termination delay f moreover assign names consisting indexes delays execution delay represented two events f confusion arises connection delay starts delay terminations multiple delays distribution f concurrently executed paper employ new technique expressing st semantics introduced 7 based dynamic names opposed technique employed 5 based static names technique use allows us establish equivalence systems via standard notion bisimulation existing results tools exploited nevertheless preserving possibility obtaining nite st semantic models even case recursive systems exploiting fact technique also compositional dene st semantics structural operational semantics sos produce complete axiomatization st bisimulation nite state processes 5 resolve choices among several delays means preselection policy associate delay weight w choice delay selected probability proportional weight instance f w0gw 0 0 represents system performs delay distribution f probability delay distribution g probability w expressed semantic models associating weights transitions f representing start delay semantics standard actions including internal actions igsmp standard interleaving semantics ects fact actions zero duration considered executed atomically 1917 choice among standard actions nondeterministic express external choices eg b based behavior system components also nondeterministic internal choices eg cannot resolved interaction seen expressive feature since allows underspecication system performance drawback makes sometimes impossible derive purely probabilistic model system see sect 4 assume socalled maximal progress 27 actions priority delays thus expressing system cannot wait something internal ie present formal procedure transforming semantic model obtained suitable specication system see sect 4 gsmp procedure turns delay system dierent element gsmp system weighted choices probabilistic choices gsmp finally example modular igsmp specication consider queueing systems gg1q ie queuing systems one server fifo queue q1 seats interarrival time service time generally dis tributed moreover show derive performance model queuing systems gsmp applying formal procedure summing contribution work weak semantics language expressing generally distributed durations probabilistic choices preselection policy nondeterminism priority use technique 7 expressing st bisimulation allows us dene observational congruence igsmp simply combination standard notion observational congruence probabilistic bisimulation 23 produce complete axiomatization equivalence moreover show automatically derive gsmps igsmp specications present example queueing systems gg1q paper structured follows sect 2 present calculus interactive gsmps operational semantics sect 3 present notion observational congruence complete axiomatization sect 4 present formal procedure deriving gsmp complete system specication sect 5 present example queueing systems gg1q finally sect 6 report concluding remarks including comparison related work directions future research 2 calculus interactive gsmps 21 syntax terms informal semantics operators calculus interactive gsmps extension standard process algebra operators ccscsp 2521 allows us express priority probabilistic choices probabilistic delays arbitrary distributions done including calculus addition standard actions special kind actions representing delays delays represented f w characterized weight w duration distribution f weight w determines probability choosing delay choice among several delays set weights r ranged w w duration distribution f denotes probability distribution function delay duration set duration probability distribution functions ie set probability distribution functions f ranged f g h possibility expressing priority derives interrelation delays standard actions particular make maximal progress assumption system cannot wait something internal therefore assume choice actions priority delays behaves p let act set action types containing distinguished type representing internal computation act ranged b set delays 1 let var set 1 following consider f shorthand f 1 clear process variables ranged x z let arfun act fgg set action relabeling functions ranged denition 21 dene language igsmp set terms generated following syntax fg igsmp process closed term igsmp denote igsmp g set strongly guarded terms igsmp 2 0 denotes process cannot move operators ccs prex choice choice among delays carried preselection policy giving probability proportional weight note alternative delays executed concurrently rst one chosen probabilistically selected delay executed moreover actions priority delays choice l hiding operator turns actions l relabeling operator relabels visible actions according k csp parallel operator synchronization actions required finally recx denotes recursion usual way 22 operational semantics formally see sect 43 generalized semimarkov process gsmp represents behavior system employing set elements similar clocks timed automata 3 element associated duration distribution element lifetime execution gsmp characterized two events start element born termination element dies since igsmps extend gsmps capability interacting via standard actions semantic model igsmp process labeled transition sys tem transition represents basic event execution standard action start delay termination delay similarly gsmps execution delay represented semantic models two events delay start delay termination enough information provided delays given unique element names order ensure event delay termination uniquely related corresponding event delay start corresponds representing execution context 2 consider delay f w guard denition strong guardedness delays st semantics 13497 also show 5 semantics need representing durational actions duration expressed general probability distributions hand employing realization st semantics based identication delays names eect applying st semantics igsmp process generate names elements underlying gsmp 5 st semantics expressed assigning static names delays according syntactical position system employ new technique generating st semantic models introduced 7 based dynamic names ie names computed dynamically system evolves advantage technique allows us establish st bisimulation systems via standard notion observational congruence 25 preserve niteness st semantic models even presence recursion contrary technique establishing st bisimulation two processes based static names must employ complex denition bisimulation associates names delays one process names corresponding delays used one 45 igsmp technique 7 employed giving semantics delays type delay simply duration distribution observe system ability performing delays certain types f 2 pdf problem preserving relationship starts terminations delays arises like st semantics standard process algebras several delays type f executed parallel delay f terminates event f need information establishing event delay start f refers technique introduced 7 based idea dynamically assigning evolution system new name delay starts execution basis names assigned delays already started names consist indexes distinguish delays duration distribution particular event delay start f w represented semantic models transition labeled f minimum index already used delays distribution f started yet terminated rule computing indexes guarantees names reused nite models obtained also presence recursion termination delay simply represented transition labeled f identier uniquely determines delay f terminating since method compute index starting delay xed turns delays processes perform execution traces delays get names consequence contrary 45 st bisimilarity simply checked applying standard bisimilarity semantic models processes moreover technique introduced 7 allows us dynamically assign names delays according rule formerly described via sos semantics hence compositional way idea levelwise renaming order obtain structural compositionality necessary determine eg case parallel composition operator computations p k q computations p q done parameterizing state terms parallel operator mapping every delay f started records association name f generated according xed rule identifying f level p k sm q name f j general dierent f generated according rule identifying delay f inside p q way afterwards delay f terminates p q name f j remapped correct name f level p k sm q exploiting information included delay f p k sm q gets index uniquely identied expressing unique name j gets p q location process executes left p right q association represented inside triple f indices location loc 2 stands left r right following use f loc j stand f weight w associated start delay determines already explained probability delay chosen spite delays therefore probability delay starts natural context stochastic process algebra assume delay starts urgent therefore system state perform delay start let time pass possible delays execution cannot terminate state causes another form priority language priority delay starts delay terminations ie f summing two forms priority semantic models priority actions delays starts terminations priority delay starts delay terminations opposed 17 similar notion priority captured denition equivalence among systems prefer express priority cutting transitions cannot performed directly semantic models solution also hinted 18 allows us smaller semantic models dene notion equivalence simply without discard transitions establishing bisimulation order dene operational semantics processes igsmp need richer syntax represent states let tact set delay starts f ap p p 2 l p p 2s q p pfrecxpxg recxp fig 1 standard rules represents beginning delay f w identied 3 besides let set delay terminations represents termination delay duration distribution f identied ranges act tact tact denote index association whose elements associations loc j iassoc ranges set iassoc partial bijections n loc n finally mapping relation pdf n set including independent index association dierent duration distribution set igsmp state terms igsmp generated following syntax denote igsmp sg set strongly guarded terms igsmp consider operators k occurring igsmp term p k p regarded state semantics state terms produces transition system labeled act 3 following consider f shorthand f clear context 4 given relation b denote set fb mg w fig 2 rules start moves w pfrecxpxg recxp fig 3 rules termination moves tact tact ranged transition relation dened standard operational rules fig 1 two operational rules rst part fig 2 fig 3 rule fig 2 denes transitions representing start delay taking account priority actions delays employing function sm sm p evaluates multiset start moves leaving state represented pairs f derivatives moves use multisets take account several occurrences weight w sm p dened structural induction least element mu fin tact satisfying rules second part fig 2 meaning rule p k sm q following p performs new index nm f determined identifying delay f level k sm new association added function computes new index used identifying delay f starting execution choosing minimum index used delays f already execution domiassocg symmetric mechanism takes place move f q function melt mu fin tact dened third part fig 2 merges start moves label derivative state summing weights rule fig 3 denes transitions representing termination delay taking account priority actions delays priority delay starts delay terminations employing auxiliary transition transition relation labeled tact dened second part fig 3 meaning operational rules p k sm q following p performs f delay f index j associated l terminates level parallel operator symmetric mechanism takes place move f q note even two rules rst part fig 2 fig 3 include negative premises operational semantics nevertheless correct 15 negative premises rules induce term structure toplevel rules moreover denition delay start transitions fig 2 based denition standard action transitions fig 1 denition delay termination transitions fig 3 based denition standard action transitions fig 1 delay start transitions fig 2 position dene integrated representing interaction performance semantic model process 5 denote mu fin set nite multiset use fj jg multiset parentheses use denote multiset union f recxfx f f recxfx recxfx recxfx f2l fig 4 example recursive system denition 22 integrated semantic model ip labeled transition system lts dened least subset igsmp sg tact set labels restriction p l p example 23 fig 4 depict integrated semantic model following theorem consider pl p p k p static operators 25 show nite semantic models obtained wide class recursive systems theorem 24 let p igsmp g process subterm recxq p x occur free q context static operator p nite state process proof proof theorem derives fact number states semantics p dier contents mappings parameterizing parallel operators always nite maximum index delay may assume bounded maximum number processes may run parallel state note class processes considered corollary includes strictly class nets automata ie terms static operator occurs scope recursion 3 observational congruence igsmp notion observational congruence igsmp dened similarly 1917 combination classical notion observational congruence 25 notion probabilistic bisimulation 23 context express cumulative probabilities aggregating weights denition 31 function computes aggregated weight state p 2 igsmp sg reaches set states c 2 pigsmp sg starting delay duration distribution dened w position dene notion strong bisimilarity terms igsmp sg let npact tact set nonprobabilistic actions ranged denition 32 equivalence relation closed terms igsmp sg strong bisimulation p q implies every 2 npact every f 2 pdf equivalence class c two closed terms strongly bisimilar written p q included strong bisimulation consider dened also open terms igsmp sg extending strong bisimilarity standard approach 25 denition weak bisimilarity adaptation presented 1917 context let sequence transitions including single transition number transitions moreover dene possibly empty sequence 6 summation empty multiset assumed yield 0 since method computing new index delay f starts state p xed several transitions f leaving p index transitions moreover let c denote set processes may silently evolve element c ie c qg denition 33 equivalence relation closed terms igsmp sg every 2 npact equivalence class c two closed terms weakly bisimilar written p q included weak bisimulation dierently 1917 need express conditions stability bisimilar processes consider strongly guarded processes consequence process igsmp sg forced loop recognize situation justication fact consider processes weakly guarded recursion following one process forced loop seen zeno process ie processes performs innite computations without going beyond certain point time discarding weakly guarded processes allows us avoid technical complications deriving treatment zenoness see 8 hand seems restrictive similarly 1917 possible reformulate weak bisimilarity following way simpler less intuitive lemma 34 equivalence relation closed terms igsmp sg every 2 npact equivalence class c proof reformulation correct derives given 17 simply substituting rates exponential distributions weights denition observational congruence discard requirement stability following one denition 35 two closed terms observational congru f fig 5 minimal semantic model every 2 npact every 2 npact every f 2 pdf equivalence class c consider dened also open terms igsmp sg extending observational congruence standard approach 25 theorem 36 congruence wrt operators igsmp including recursion proof proof theorem follows lines similar proof 25 adapted setting relevant case parallel composition operator suces show fp 1 k sm q weak bisimulation example 37 fig 5 depict minimum semantic model recursive system fig 4 obtained merging bisimilar states weight 2 initial transition derives aggregation weights two initial transitions model fig 4 however since initial state alternative transition weight relevant actual behavior isolation system 31 axiomatization section present axiom system complete nite state igsmp sg terms axiom system igsmp igsmp sg terms formed axioms presented fig 6 gure bb j denote respectively left merge synchronization merge operators see eg 2 moreover ranges recall sect 22 axioms p ri1 p ri2 express two kinds priorities igsmp respectively priority actions semidelays priority delay starts delay terminations axiom par standard one except position processes p q exchanged must invert left right inside inverse mapping dened mg axioms lm4 lm5 ect operational rules parallel operator delay move lefthand process axioms rec1 strongly guarded recursion standard way 26 consider obvious operational rules bb sm j sm derive presented parallel operator 7 axioms igsmp sound sequential state dened one includes 0 x operators recx leading following theorem theorem 38 igsmp sg process p nite state 9p proof let states operational semantics p n p easily seen exist j ij k ij 0 1 n following 9j 2 applying rec3 replace subterm occurring equations equivalent term equation n p replaced n 1 done sequential states axioms igsmp involved standard axioms 26 axioms priority probabilistic choice theorem 38 resorting arguments similar presented 26 17 derive completeness igsmp theorem 39 igsmp complete nite state igsmp sg processes proof proof theorem follows lines proof 26 particular weights treated rates exponential distributions proof 17 7 denition operational rule j sm must allow actions skipped 2 ected axiom sm4 free recxp strongly guarded p fig 6 axiomatization igsmp example 310 let us consider system recxfx k recxfx previous example following show process turned sequential process applying procedure presented proof theorem 38 following stand f abbreviate igsmp initially note applying rec2 tact start procedure proof theorem 38 initial state p k p applying par lm4 sm3 equation derive applying p rob applying par lm4 lm5 sm3 p ri2 applying par lm5 sm3 equation derive applying par a1 sm1 p k ff1r 1 g p 0 finally applying par lm4 lm5 sm3 p ri2 perform second part procedure generate recursive processes substitute states equivalent terms start state occur equivalent term generate recursion substituting state equivalent term equations generates new equation consider state p 0 k ff1l 1 f2r 1 g p 0 change equation generating recursion follows substituting state equivalent term remaining equations generates new equation consider state p 0 k ff1l 1 g p change equation generating recursion follows substituting state equivalent term remaining equations generates new equation therefore turned initial system recxfx k recxfx recursive sequential process f operational semantics process generates labelled transition system fig 5 4 deriving performance model section show formally derive gsmp system speci cation particular transformation possible specication system complete interaction performance point view specication complete interaction viewpoint system spec ied part larger system may uence behavior hence every standard action appearing semantic model internal action note states semantic model system classied follows choice states states whose outgoing transitions weighted delay starts timed states states whose outgoing transitions delay terminations silent states states whose outgoing transitions actions specication complete performance viewpoint choices specied system may engage quantied probabilistically means semantic model must include silent states nondeterministic choice among dierent future behaviors words silent state either must one outgoing transition outgoing transitions must lead equivalent behaviors notion formally dened follows semantic model complete wrt performance reduced aggregating weakly bisimilar states see sect 3 model without silent states provided system p 2 igsmp g satises two conditions present formal procedure deriving gsmp representing performance behavior p integrated semantic model ip 41 elimination actions rst phase minimize state space p aggregating states equivalent according notion weak bisimulation dened sect 3 since supposed system p satises two conditions side eect minimization actions disappear ip denote resulting lts pm stands minimal tact hence pm includes choice states timed states 42 solution choice trees second phase transformation every choice tree present semantic model single probabilistic choice choice tree formed possible choice paths go given choice state root tree timed state leaf tree note trees cannot include loops composed one transitions delay start number delays execution strictly increases precise trees directed acyclic graphs dags root since node may multiple incoming arcs choice trees attened single choice goes directly root leaves tree following inductive procedure initially step 0 transform semantic model turning weights corresponding probability values denote resulting lts stands probabilistic dened 01 tact positive real numbers represent probabilities w w hence semantic model delay termination transitions probabilistic transitions labeled probability prob note delay start events removed transition labels occurrence events becomes implicit representation system behavior similarly gsmps kth step beginning lts ppk eliminate node choice tree thus reducing size done considering choice state 2 ppk 1 incoming probabilistic transitions transitions removed replaced new set probabilistic transitions determined following way incoming probabilistic transition divided multiple transitions one probabilistic transition leaves state probability distributed among new transitions parts proportional probabilities transitions leave moreover incoming delay termination transitions eliminated together outcoming probabilistic transitions therefore resulting lts ppk l algorithm terminates reach k choice state incoming probabilistic transitions since every step eliminate node choice tree initial semantic model thus reducing size guaranteed eventually happen let k lts results second phase denoted nodes choice tree eliminated following breadthrst visit root easily seen time complexity algorithm linear number probabilistic transitions forming tree dag following elimination ordering node eliminated one ingoing probabilistic transition 43 derivation gsmp show derive generalized semimarkov processes semantic model obtained end previous phase generalized semimarkov process gsmp 24 stochastic process dened set states fs j 2 sg follows state set active elements elsts taken set el decay rate ce el set el partitioned two sets el 0 el el e 2 el 0 element e exponentially distributed lifetime instead e 2 el generally distributed lifetime whenever state advancing element e dies process moves state 0 2 probability gsmp represented tuple set states gsmp el set elements gsmp function associates element distribution lifetime el function associates state set active elements partial function associates decay rate active element state c partial 2 dened e e 2 elsts relation represents transitions states gsmp labeled element e 2 el terminates include transitions p rs p r function associates non zero probability transition gsmp relation meaning p r element e terminates probability p rs e 0 process moves state 0 said previous item p r never zero domain whilst considered zero outside 01 function associates state probability initial state note given tuple dening gsmp sets el 0 el derived following way exp exponential distribution rate respect general denition gsmp given igsmp elements delays decay rate 1 ie advance uniformly time speed performance semantic model pp derived elements gsmp identied delays f labeling transitions pp states gsmp timed states pp transition leaving state gsmp derived beginning delay termination transition leaving corresponding timed state pp case transition leads choice state probabilistic transition leaving state timed state pp reached way state gsmp derived transition leads note certain reach timed state choice trees solved consequently see sect 42 choice states cannot incoming probabilistic transitions transition gsmp labeled element f terminating corresponding termination transition probability associated transition gsmp function p r probability corresponding probabilistic transition probability 1 transition derived delay termination transition leading directly timed state performance semantics igsmp process p dened follows denition 41 performance semantics pp process p 2 igsmp g gsmp represented tuple let unique prob p init dened follows 8 transition relations 1 2 disjoint transition pp leaves state labeled given element f leads either choice state timed state example 42 fig 7 show gsmp derived applying formal translation presented integrated semantic model fig 4 particular gsmp obtained described minimal model fig 5 since model include standard action transitions system considered complete interactive performance viewpoints gsmp fig 7 states labeled active elements transitions terminating elements probability p r associated transition gsmp shown picture 1 moreover p init 1 unique state gsmp pointed arrow outline fact initial state elements represent delays f 1 f 2 respectively probability distribution function given function f fig 7 derived gsmp 5 example queueing systems gg1q section present example specication igsmp particular concentrate queuing systems qss gg1q ie qss one server fifo queue q1 seats serve population unboundedly many customers particular qs interarrival time generally distributed distribution f service time generally distributed distribution g system modeled igsmp follows let action representing fact new customer arrives queue service center action representing customer delivered queue server process algebra specication following one 9 9 specication use process constants instead operator recx denote recursion reason use constants suitable qs gg1q arrivals queue h dqueue h1 queue q1 dqueue q2 server dgserver specied whole system composition arrival process queue server communicate via action types separately modeled arrival process queue server consequence want modify description changing interarrival time distribution f service time distribution g component arrivals server needs modied component queue aected note role actions dening interactions among dierent system components actions zero duration neglected performance viewpoint fig 8 show iqs gg1q picture stands arrivals 0 stands f aarrivals 00 stands aarrivals similarly stands server 0 stands gserver 00 stands g server moreover q h stands queue h h omit parallel composition operators terms eg aq h stands arrivals k fag queue h order derive performance model system qs gg1q make sure complete interaction performance viewpoints fig 8 visible actions therefore behavior system uenced interaction environment complete make complete considering qs gg1q fa dg every action semantic model fig 8 becomes action far completeness wrt performance concerned present fig 9 minimal version iqs gg1q fa dg obtained aggregating weakly bisimilar states see sect 3 since minimal model longer internal actions system complete also wrt performance applying formal procedure dened sect 4 hence solving choice trees minimal model fig 9 nally obtain gsmp fig 10 probability p r associated transition gsmp 1 p init 1 state pointed arrow 0 states elements e 1 e 2 represent delays f g specications use operator recx preferable dealing axiomatizations two constructs shown completely equivalent 25 f f f f d2 d2 d2 aq d2 d2 fig 8 integrated semantic model f f f f f d2 aq d2 aq d2 fig 9 minimal semantic model 6 conclusion section present related work outline open problems left future research fig 10 derived gsmp 61 related work several algebraic languages express generally distributed durations like igsmp previously developed start languages follow completely dierent approach representing behavior systems 10 truly concurrent approach modeling systems proposed employs general distributions term algebra presented 10 truly concurrent semantic model stochastic extension bundle event structure derived represents statically concurrency system expressing components system causal relationships among therefore behavior system described representing explicitly possible global system states happens labeled transition systems way concise semantic model obtained duration distributions statically associated durational actions drawback approach semantic models produced must nevertheless translated transition system form performance evaluated gsmps evolution stochastic process represented form another algebraic approach modeling systems general distributions discrete event simulation approach 1611 example 16 algebra developed extends ccs temporal probabilistic operators order formally describe discrete event simu lations algebra employs actions null duration events delays similarly igsmp states produced operational semantics include explicitly residual durations delays real numbers hence semantic models systems nite approach excludes priori possibility making mathematical analysis models means established theoretical results analytical solution methods insensitive gsmps 24 languages previously developed similar igsmp represent behavior specied systems via labeled transition systems many cases nite according approaches 122822 execution durational actions represented abstract way igsmp without including explicitly residual durations real numbers states 12 technique start reference employed order pointer system state action begins execution 28 instead information causality relations among actions exploited order establish starting point actions recent work 22 methodology obtaining nite semantic models algebra 16 dened based symbolic operational seman tics semantics generates symbolical transition systems abstract time values representing operations values symbolic expres sions drawback approaches structure semantic models generated dierent gsmps therefore always clear derive performance model specied system 22 provides quite involved procedure deriving gsmp systems belonging certain class languages closest igsmp produce semantic models represent probabilistic durations gsmps 1511 particular semantic models represent performance behavior systems means kind clocks probabilistic duration easily seen elements gsmp language 1 performance models derived terms specifying systems applying preliminary procedure gives dierent name durational action term way name represents dierent clock semantic model system approach 1 events action starts explicitly expressed semantic models choices resolved via race policy alternative actions executed parallel rst action terminates wins instead preselection policy igsmp language 11 endowed abstract semantics may generate nite intermediate semantic models models possible derive innite models used discrete event simulation language clock names must explicitly expressed term specify system fact dierent name used clock ensured imposing syntactical restrictions terms igsmp execution clock represented events clock start clock termination two events must explicitly expressed term specifying system automatically generated operational semantics unfortunately language 11 express choices events clock terminations resolved race policy cannot express probabilistic choices basic ingredient gsmps language previously developed 5 clock names events start termination automatically generated igsmp operational semantics way system specications simply express general distributed delays probability distribution functions worry clock names events drawback approaches 1511 wrt igsmp easy way decide equivalence systems hence minimize state space order establish equivalence two systems necessary associate way names clocks used one system names corresponding clocks used one trying extend notion bisimulation way turns rather complex especially presence probabilistic choices see 5 igsmp instead names clocks dynamically generated operational semantics xed rule way equivalent systems get names clocks need associate names clocks establishing equivalence therefore rely standard probabilistic bisimulation opportunity reuse existing results tools 62 future research far future work concerned trying extend approach two main directions capability igsmp express general distributions allow us extend notion observational congruence follows idea could weak also delays delay could seen timed could equate sequence timed single timed provided distribution durations correct relationship example sequence complex pattern exponential could equated phasetype distributed solution problem seems quite involved moreover investigating possibility introducing igsmp operator delay interruption requires introduction special event semantic models representing delay interruption instead delay termination interruption operator would greatly enhance expressive power igsmp since preemption mechanism needed model many real systems acknowledgements thank anonymous referees helpful comments research partially funded murst progetto tosca r tr communicating sequential processes petri net models algebraic theories concurrency communication concurrency complete axiomatisation observational congruence finitestate behaviours bisimulation probabilistic testing transition system specifications negative premises modelchecking dense realtime axiomatising finite concurrent processes lotos extension performance analysis distributed systems adding action refinement finite process algebra compositional approach performance modelling tutorial empa complete axiomatization observational congruence prioritized finitestate behaviors towards performance evaluation general distributions process algebras axiomatising stbisimulation equivalence algebraic approach specification stochastic systems overview synthesis timed process algebras deciding axiomatizing st bisimulation process algebra recursion action refinement ctr pedro r dargenio joostpieter katoen theory stochastic systems part stochastic automata information computation v203 n1 p138 november 25 2005 mario bravetti roberto gorrieri deciding axiomatizing weak st bisimulation process algebra recursion action refinement acm transactions computational logic tocl v3 n4 p465520 october 2002 pedro r dargenio joostpieter katoen theory stochastic systems part ii process algebra information computation v203 n1 p3974 november 25 2005 g clark j hillston product form solution insensitive stochastic process algebra structure performance evaluation v50 n23 p129151 november 2002 joostpieter katoen pedro r dargenio general distributions process algebra lectures formal methods performance analysis first eefeuro summer school trends computer science springerverlag new york inc new york ny 2002