declarative programming graphical interfaces visual examples graphical user interfaces gui provide intuitive easy means users communicate computers however construction gui software requires complex programming far intuitive semantic gap textual application program graphical interface programmer must conceptually maintain correspondence textual programming graphical image resulting interface instead propose programming environment based programming visual example pbve scheme allows gui designers program visual interfaces applications drawing example visualization application data direct manipulation interface system trip3 realizes 1 bidirectional translation model abstract application data pictorial data gui 2 ability generate mapping rules translation example application data corresponding example visualization latter made possible use generalization visual examples system able automatically generate generalized mapping rules given set examples b introduction advent workstations personal computers highresolution graphics realized graphical user interfaces gui8 information visualized colors movements instead flat flavor less text2 5 3 complexity development cost gui however considerably higher compared conventional textbased interfaces primarily due followings 1 specification interface components inherently graphical achieved conventional programming languages inherently textual 2 programmers must somehow maintain correspondence abstract data application visual representation explicit textual programming obvious solution problem 1 employ direct manipulation programming gui thereby allowing programmer graphically manipulate layout ui components however direct manipulation inherently concrete ie lacks means abstraction essential programming gen eral previous approaches utilize direct manipulation gui programming therefore usually serve solution 2 ie programming general correspondence application data visual representation expressing correspondence application data visual representation declaratively step towards solution problem 2 previous research proposed bidirectional translation model prototype system trip225 trip2 realizes bidirectional translation application data visual representation set declarative translation mapping rules modification application data directly reflected visualization con versely graphical editing directly reflected application data programming trip2 however still confined realm textbased specification thus although far easier involved less coding compared conventional gui programming specification mapping rules complex application data nontrivial errorprone task especially gui designers might extensive programming experiences overcome problems propose programming visual example pbve scheme pbve generates declarative mapping rules examples application data corresponding visual represen tation present prototype system trip3 gui programming environment realizes pbve via direct manipulation trip3 enables programmer generate mapping rules automatically merely drawing example pictures macdrawlike drawing ed itor supplying corresponding application data example pbve combines complimentary benefits direct manipulation programming example pbe paradigm sense pbe provides abstraction capability lacking direct manip ulation direct manipulation facilitates easy means providing examples compared past researches employ pbe context gui18 4 trip3 unique following way systems generalize sequential trace users interaction generate imperative programs handle lowlevel user dialogues con trast trip3 generalizes highlevel semantic information visualization application data ie correspondence application data visual representation rest paper organized follows section 2 presents bidirectional translation model employ section 3 overviews pbve framework automatic generation mapping rules prototype system trip3 section 4 describes implementation trip3 section 5 shows examples rule generation via pbve section 6 reviews related work conclude section 7 2 bidirectional translation model trip2 21 four types data representation nontrivial devise general scheme achieving translation application data visual representation data representations could arbitrary solve problem previous research trip14 trip225 proposed two additional canonical data representation layers application data visual representation figure 1 shows four data representations examples applications data representation ar applicationdependent abstract data abstract structure representation asr canonical data representation programmer expresses application data visual structure representation vsr canonical data representation visual images represented asr vsr represented prolog clauses pictorial representation pr refers actual visual images correspond description vsr figure 1 shows organization diagram pr corresponding asr vsr paper example figure 1 used explain process generating mapping rules trip2 focuses translation asr vsr vsr pr translation applications data representation ar abstract structure representation asr visual structure representation vsr pictorial representation pr hogan boss heinlein clarke herbert organization organizationhogan heinleinclarkeherbert horizontalhoganheinlein verticalheinleinclarkeherbert connecthogan heinleinclarkeherbert heinlein herbert clarke hogan cool spatial parser constraint based object layout system inverse mapping rule mapping rule application dependent application dependent figure 1 bidirectional translation model four data representations modification picture reflected application data application data visualized declarative mapping rules figure 2 trip2 system25 tween ar asr left applicationprogrammers responsibility trip14 incorporates cool con straint based object layout system converts vsr clauses pr images trip2 also incorporates spatial parser infers geometrical relationships among graphical objects pr images generates vsr clauses employing canonical data representation layers enables us formalize translation application data visual representation mapping rules perform translation asr vsr whereas inverse mapping rules perform translation vsr asr actual rules represented prolog clauses mapping rule converts asr vsr figure 1 presented organizationrule clause unified clause horizontal generated horizontalxh clause vertical generated verticalhl clause connect generated connectxhl 5 line invokes backtrack database search fail prolog database contains asr data represented prolog clauses ie database facts organizationhogan heinlein clarke herbert example rule organization rule applied prolog interpreter first unifies line 1 fact matches line note capitalized letters x represent variables square brackets ie represent list structures example variable x unified hogan list structure hl unified heinlein clarke herbert whereby h instantiated head list heinlein l remainder clarkeherbert unified variables lines 2 4 generate vsr clauses example line 2 generates vsr clause horizontalhogan heinlein result unifi cation representing geometrical relationship two objects line 5 invokes backtrack mechanism prolog forces enumeration matching asr clauses converted vsr clauses note rule entirely declarative ie imperative expressions facilitating clear concise specification visualization application data corresponding inverse mapping rule almost equivalent mapping rule difference inverse rule asr clause comes vsr clauses difference due execution order prolog lefttoright result minor modifi cation vsr clauses unified first vsr facts asr clauses generated declarative mapping rules surprisingly powerful expressiveness despite conciseness basically support two kinds layout policies one geometrical layouting using vsr clauses horizontal vertical examples family diagram organization diagram topological layouting using vsr clause adjacent example er diagram furthermore mapping rules support recursive structures example tree diagram details see 14 figure 2 shows snapshot trip2 action realizing simple familytree diagram editor asr data left window generationparentstaro hanako childrenichiro jiro saburo translated familytree diagram vice versa user edits asr data system redraws diagram right window reflect modification conversely user modifies diagram generic macdrawlike editor system regenerates asr data consistent modified diagram 22 problems trip2 previous works trip14 trip225 assumed mapping rules textual provided programmers however trivial task nonprogrammers program mapping rules interfaces complex application data although easier compared imperative programming upon analy sis encountered following problems 1 programmer cannot immediately see mapping rules would generate programming thus difficult programmer decide set vsr data would correspond desired visualiza tion determine appropriate parameters width boxes 2 immediately obvious whether geometric constraints imposed set translated vsr data horizontal vertical would sufficient conceivable cases words programmer must make sure resulting constraint system neither underconstrained overly contradictory 3 programming visual ex ample solve problems propose programming visual example pbve scheme whereby de signers intended visualization applicationdependent data constructed generalizing actual visualization examples concrete application data case pbve refers process generating mapping rules translate application data proper visual representation vice versa long style data conforms one inferred example data sense system mimics experienced gui programmers programming skills figure 3 overviews scheme example left two rounded rectangles show pair designer supplied example data example application data example visual representation create mapping rules experienced gui programmer would rely following apriori knowledge visualization ffl names rectangles example picture indicate correspondence parameters application data rectangles ffl left rectangle would represent boss right rectangles connected boss would represent workers ffl could number workers managed boss rules must able align number workers example workers aligned vertically certain vertical gap rectangle mapping rules generated automatically via pbve trip3 system similar way first designer provides sample asr clauses draws corresponding picture using macdrawlike drawing editor pict editor view example draws figure depicted upperleft rectangle figure 3 designer draws sample picture pict editor view system converts picture vsr clauses reflect intention regarding layout objects step 1 figure 3 every time designer draws new object spatial parser infers geometrical relationships horizontal extract intended geometrical relationships pr example heinlein herbert clarke hogan vsr example horizontalhoganheinlein verticalheinleinclarke herbert connecthogan heinleinclarke herbert asr example organizationhogan heinlein clarke herbert variables clarke assign variables parameter generate mapping rule mapping rule rule horizontalv1v2 verticalv2v3 connectv1v2v3 fail figure 3 rule generation visual examples figure 4 pict editor relations similar objects confirmation horizontal average contain figure 5 confirmation panel vertical likely match intention system heuristically determines geometrical relationship likely reflect designers intention computing weight inferred relationship example smaller difference coordinates two objects greater weight horizontal relationship two objects comes alternatively adjacent relationship two objects inferred certain weight attached line connects two inferring likely geometrical relationships system displays inference designer two ways 1 pict editor view colored dotted lines indicate inferred geometrical relationships fig figure ure 4 example dotted horizontal lines indicate graphical objects along lines aligned horizon tally 2 confirmation panel figure 5 system displays inference explicitly textual annota tions relationships sorted according weight likely relationships displayed first color indicators next text show correspondence annotations confirmation panel colored dotted lines pict editor view designer selects intended geometrical relationships confirmation panel checkboxes natural geometrical relationships preselected thus designer usually alter selection systems inference different intention alter selections panel 1 designer inputs sample asr data would correspond example visualizations asr sample editor editor merely pair textinput panels could edited time designer figure 6 designer selects generate rule command menu automated rule generation starts first variables assigned parameter asr clauses step 2 figure 3 variables generalized accept arbitrary number arguments means possible determine part given example generalized without assumptions explicit clues purpose trip3 assume list structure sample asr clause indicates data generalized organization diagram example generalization applicable list structure heinlein clarke herbert could arbitrary number workers managed boss clue allows system generate mapping rules align number workers vertically visual representa tion specifically first parameter hogan replaced variable v1 recall capitalized letters represent variables prolog second list parameter heinlein clarke herbert list variable v2v3 system generates mapping rules appropriate parameters asr vsr 1 note scheme advantageous peridot18 multiple relationships specified whereas peridot one go series modal dialogues clauses replaced variables step 3 figure 3 step global generalization vsr clauses also performed example three connect vsr clauses represents line boss worker combined one generalized vsr clause connectv1v2v3 mentioned subsection 21 rule applied data variables v1 v2v3 unified actual asr clause parameters vsr clauses generated values associated variables figure 7 figure 8 show snapshot system applying abovementioned mapping rule complex instance organization data visualizing corresponding organization diagram inverse mapping rules also similarly generated allow user edit picture reflect modification picture application data organization diagram example figure 8 user draws new person george next edward two new asr clauses personggeorge organizationeg added application data reflecting users intention feature directly inherited trip225 interface structured editor specific data rather users simply draw rectangles circles using freehand objectoriented drawing systems macdraw figure 7 asr data organization editable figure 8 visualized organization diagram 4 implementation trip3 pbve system 41 system overview implemented prototype system trip3 realizes pbve framework nextstation using objectivec prolog figure 9 illustrates system overview trip3 system supports two phases rule generation phase rule application phase rule generation phase designer provides sample asr clauses draws corresponding picture using macdraw like editor 3 spatial parser converts picture 2 next trademark next incorporated 3 current prototype system employ editor rule generation rule application visual mapping inverse visual mapping spatial parser cool mapping rule inverse mapping rule rule generation phase spatial parser asr example vsr example pr example asr vsr pr inference engine rule application phase figure 9 trip3 system overview vsr clauses reflect designers intention geometrical relationship visual objects inference engine generates mapping rules example vsr clauses spatial parser generates example asr clauses designer inputs rule application phase enhanced version trip2 system25 user applies generated rules convert application data visual representation vice versa cool solves geometrical constraints vsr generates pr conversely spatial parser converts pr images vsr clauses converted asr generated inverse mapping rules system generates mapping rules sample asr vsr clauses process overviewed section 3 order achieve functionality actual implementation must support followings 1 generating mapping rules system must check whether enough vsr clauses ie geometrical constraints ensure objects sufficiently constrained 2 system must able generate two styles mapping rules one nonrecursive data struc tures recursive data structures following subsections discuss implementation trip3 focusing two issues 42 checking object stability system generates visual images pr corresponding vsr clauses constraint solver cool solves simultaneous equations extracted vsr clauses instance horizontal relationship generates constraints object0y meaning objects must ycoordinates vsr clauses must supply sufficient equations system underconstrained 4 objects sufficiently constrained positions indeterminate refer floating objects unstable specific refer objects whose x coordinate geometrically sufficiently constrained respectively x coordinate underconstrained xstable correspondingly stable stable objects x ycoordinates geometrically sufficiently constrained ensure mapping rule generates stable objects necessary check enough vsr relationships system generate mapping rules examples algorithm checking whether objects stable described objectiveclike pseudocode select startobject denotes set anobject stableobjects arelation includes anobject ifarelation checkstableobjectsanobject key algorithm message expression arelation checkstableobjectsanobject arelation one geometrical relationship object stable object anobject involved method transfers objects involved relationship among sets unstableobjects xstableobjects ystableobjects stableobjects depending class relationship eg horizontal say action method checkstableobjects different depending class receiver arelation thereby facilitating different sufficient conditions achieving object stability relationship example since relationship horizontal constrains ycoordinates objects involved relationship equiv alent horizontal checkstableobjectsanobject roughly performs followings ffl object involved relationship unstableobjects set transfer object ystableobjects set ffl object involved relationship xstableobjects set transfer object stableobjects set another example relationship xcenter constrains xcoordinate object center xcoordinates objects involved relationship case xcoordinate object could determined xcoordinates objects stable object transferred set 4 note cool gracefully handles overconstrained situations degree distributing errors using least square method14 unstableobjects set xstableobjects set ystableobjects set stableobjects ac cordingly way loop continues remains object transferred loop terminates system checks whether unstableobjects xstableobjects ystableobjects empty sets non empty objects stable system attempts heuristically generate new vsr clauses enforce objects stable organization diagram figure 3 rectangle heinlein stable horizontal vertical whereas rectangles clarke herbert xstable vertical must therefore constraint determines ycoordinates rectangles trip3 adds necessary vsr clauses human designer would offered example picture asked draw another diagram different number objects given particular example picture human designer would generalize picture worker rectangles column aligned vertically certain vertical gaps assumptions determine ycoordinates arbitrary number objects trip3 attempts similar generalization vsr level case system determines number objects column generalized generates new vsr clause yorder assuming objects aligned vertical gap extracted example pic ture result vsr clause yorderheinlein clarke herbert 20 added meaning objects heinlein clarke herbert vertically aligned 20 unit vertical gaps unstable objects remaining even additions system informs designer provided enough examples make objects stable case designer must specify geometrical relationships explicitly according intended layout relationship browser shown figure 10 instance designer specify horizontal gap two objects con strained selects objects pict editor specifies xorder relationship menu relationship browser average contain horizontal delete center generate figure 10 relationship browser 43 generation mapping rules actual generation mapping rules trip3 employs templates serve define common styles mapping rules current implementation provides two types templates one nonrecursive data structures organization example section 3 recursive data structures trees 431 generating mapping rules nonrecursive data structure style mapping rules nonrecursive data structure follows mappingrule fail mentioned subsection 21 rule invoked variables asr clauses line 1 unified parameters asr facts prolog database lines 3 generate vsr clauses unified variables line 5 ie fail invokes backtrack mechanism prolog forces enumeration matching asr clauses converted vsr clauses 432 generating mapping rules recursive data structure process generating mapping rules recursive data structures different nonrecursive data structures difficult generally infer part sample picture recursive fact inferring recursion difficult problem pbe trip3 take advantage fact system interactive let designer specify recursion explicitly draws example picture pragmatic find fact easier designer specify example picture includes explicit clues recursion since would already idea data would visualized recursively first place clarity describe process generating mapping rules trees first designer draws sample pictures shows explicitly part sample picture recursive ie specifies part could include recursive occurrence diagram figure 11 shows interior node tree two dotted rectangles represent recursive occurrences diagram second designer shows recursive data structure terminates ie draws terminal case recursive structure figure 12 terminal case tree leaf designer inputs sample asr data figure 13 note recursive occurrences sample asr clauses represented rec0 rec1 actual asr data would recursive occurrences place terms shown figure 14 third system employs template recursive data struc tures generated mapping rule tree diagram follows 5 5 rule simplified brevity rule actually generated rule recursive case recursivehl horizontalhl fail rule terminal case fail mapping rule consists two subrules one recursive case terminal case line 1 invokes recursive application rule recursive occurrences term tree hl line 2 6 generate nodes corresponding x lines 3 5 generate vsr clauses constrain geometrical relationships among nodes figure 14 instance asr data represents tree mapping rules generated converts tree diagram shown figure 15 rec1 rec0 figure 11 pr example tree diagram cursive obj6 figure 12 pr example tree diagram ter minal figure 13 asr example tree figure 14 asr data 5 examples present examples generation graphical interfaces via pbve using trip3 1 visual editor er diagram widely employed represent database schema 2 visualizer cons cell diagram often used illustrate data structures sexpressions lisp figure 15 tree diagram figure figure 17 snapshots designer inputs sample database schema draws sample picture corresponding er diagram example geometrical relationships horizontal vertical important instead topological relationships adjacent line connection essential 6 figure 19 shows er diagram corresponds complex database schema figure generated rules layout entities automatically determined graph layout module13 cool figure shows sample picture conscell diagram designer drawn two dotted rectangles represent recursive occurrences diagram note shaded rectangle indicates designer constructed group objects specifying small rectangle left dotted rectangle form group grouping mech anism designer indicates bounding box group shaded rectangle right dotted rectangle must aligned horizontally fixed gap without specification two recursive occurrences could overlap figure 20 corresponding sample asr data mapping rules generated example convert asr data figure 22 conscell diagram figure 23 figure example database schema figure 17 example er diagram 6 note current implementation geometrical relationships greater weight topological ones inference engine designer approve topological relationships confirmation panel explicitly figure schema figure 19 actual er diagram figure 20 sample cons cell data rec1 rec4 figure conscell diagram 6 related work review previous work related trip3 direct manipulation programming example pbe constraints among graphical objects many researchers proposed sophisticated ways integrating direct manipulation programming environments unidraw27 provides framework building domainspecific graphical editors framework abstracts direct manipulation properties graphical objects behavior inter communications extensible c class library treegraph editor15 provides flexible direct manipulation graph editor easily integrated applications many user interface management systems uims employ direct manipulation let programmers figure 22 actual cons cell data figure 23 actual cons cell diagram manipulate layout widgets properties reactions users programmers define new windows forth10 11 21 22 26 compared systems trip3 innovative advantage direct manipulation graphical editors integrated applications customized according specific application data extensive procedural pro gramming instead trip3 offers one generic direct manipulation graphical editor realizes interactive gui solely declarative mapping rules programmed easily compared conventional procedural programming furthermore trip3 overcomes disadvantages textbased programming rules employing direct manipulation programming environment ffl direct manipulation easy determine various kinds parameters objects width box designer see exact images generated rules create ffl generating relationships among objects drawing picture prevents unintended specification conflicting constraints designer easily realize intended visualization applicationspecific data compensate lack abstraction capability direct manipulation essential programming employ programming example pbe paradigm extended handle visual examples although pbe necessarily adequate general programming nevertheless provide sufficient means specifying certain types programs intended nonprogrammers especially gui programming use pbe gui programming roughly categorized enduser gui designerprogrammer former usually elaborate macro facility uims example eager4 uses paradigm create macro programs hypercard 7 macintosh 8 metamouse17 system enabling user drawing program specify graphical procedures supplying example execution traces system generalizes traces inductive inference generates generalized drawing procedures demonstrational text formatter20 allows user directly manipulate textual formatting one example system automatically generates macro generalizing example latter case seen systems peridot18 programmers generate widgets eg menus drawing sample pictures uofa24 uims infers programmers intention layout widgets peridot uofa generalize trace drawing action programmer layout widgets create imperative programs simple geometrical constraints realizing lowlevel widgets andor layouts contrast trip3 generalizes correspondence highlevel application data visual representation generates declarative translation rules demo28 enables creation gui demonstrating behavior enhanced 7 hypercard registered trademark apple computer incorporated 8 macintosh registered trademark apple computer incorporated drawing editor provide generalization mechanism abstractions oak26 facilitates creation widgets composing primitive constraints via direct manipulation scope generalization confined repetitive patterns widget geometry novelty trip3 systems pbe categories systems employ demonstration programming relatively lowlevel aspect gui programming whereas trip3 concentrates demonstrational programming highlevel application semantics trip3 also employs constraints express relationships among graphical objects14 12 thinglab1 6 7 graphical simulation laboratory uses constraints represent relationships among objects juno23 constraintbased graphics system enables users manipulate graphical objects directly interactive graph layout system9 employs hierarchical layout algorithms constraints users emphasize certain part large graph employing suitable layout algorithm part many uimss including peridot19 18 garnet21 22 pen guims uims10 11 oak26 employ constraints location behavior handle propagation values 7 conclusion future work focused difficulty creating gui highlevel application data solve problem propose automatic generation declarative translation rules examples emphasize examples visual images call paradigm programming visual example prototype system trip3 lets designer draw visual examples application gui direct manip ulation designer need declare relationships among objects explicitly instead system infers relationships designer merely needs check inference system generalizes visual examples example application data generates appropriate visual mapping inverse visual mapping rules conclude paper future work consideration first strong motivation extend applicability system current implementation predefines style mapping rules system supports certain style visualization generalization list items devising powerful generalization mechanism system would able handle complex application data another approach incorporate metarules feature determines mapping rules generated rule generation phase second trip3 redraw objects satisfy constraints designer confirms new lationship since current implementation realizes communication objectivec process handles drawing editor prolog process serves inference engine files trip3 fast enough achieve realtime redraw faster communication mechanism problem could solved third trip3 support incremental refinement mapping rules designer generates mapping rules cannot refine rules providing additional examples kurlander feiners multiple snapshots scheme16 could employed extracting geometrical constraints series examples currently investigating applicability context framework fourth important issue bidirectional translation model trip225 needs improved trip14 originally focused translation application data pictorial data model originally intended oneway transla tion model devised trip2 derived oneway model hence rough edges thereby requiring separate rules visual mapping inverse25 example inverse mapping rules deliberately modified size graphical object ignored converting objects asr clauses refining model single rule would suffice directions r information visualizer visualizing concurrent computations worlds worlds module mechanism constraints smalltalk incremental constraint solver interactive graph layout interactive specification flexible user interface displays smoothly integrating rulebased techniques direct manipulation iterface builder visualizing abstract objects rela tions algorithm drawing general undirected graphs general framework visualizing abstract objects relations requirements extensible objectoriented treegraph editor inferring constraints multiple snapshots inducing programs directmanipulation environment creating user interfaces demonstra tion creating user interfaces using programming example text formatting demonstration creating graphical interactive application objects demonstration automating lexical syntactic design graphical user interfaces creating visual objects direct manipulation unidraw framework building domainspecific graphical editors demonstrational technique developing interfaces dynamically created objects tr constraintbased tools building user interfaces creating user interfaces demonstration humancomputer interface development concepts systems management algorithm drawing general undirected graphs inducing programs directmanipulation environment creating graphical interactive application objects demonstration unidraw framework building domainspecific module mechanism constraints smalltalk incremental constraint solver creating user interfaces using programming example visual programming constraints garnet worlds within worlds metaphors exploring ndimensional virtual worlds requirements extensible objectoriented treegraph editor interactive specification flexible user interface displays general framework visualizing abstract objects relations automating lexical syntactic design graphical user interfaces eager information visualizer information workspace text formatting demonstration interactive graph layout smoothly integrating rulebased techniques direct manipulation interface builder general framework bidirectional translation abstract pictorial data demonstrational technique developing interfaces dynamically created objects juno constraintbased graphics system visualizing abstract objects relations ctr douglas c kohlert dan r olsen jr pictures input data proceedings sigchi conference human factors computing systems p464471 may 0711 1995 denver colorado united states ken miyashita satoshi matsuoka shin takahashi akinori yonezawa interactive generation graphical user interfaces multiple visual examples proceedings 7th annual acm symposium user interface software technology p8594 november 0204 1994 marina del rey california united states pierre dragicevic stphane chatty david thevenin jeanluc vinot artistic resizing technique rich scalesensitive vector graphics proceedings 18th annual acm symposium user interface software technology october 2326 2005 seattle wa usa satoshi matsuoka shin takahashi tomihisa kamada akinori yonezawa general framework bidirectional translation abstract pictorial data acm transactions information systems tois v10 n4 p408437 oct 1992 margaret burnett herkimer j gottfried graphical definitions expanding spreadsheet languages direct manipulation gestures acm transactions computerhuman interaction tochi v5 n1 p133 march 1998 shin takahashi satoshi matsuoka ken miyashita hiroshi hosobe tomihisa kamada constraintbased approach visualization animation constraints v3 n1 p6186 april 1998 margaret burnett john atwood rebecca walpole djang james reichwein herkimer gottfried sherry yang forms3 firstorder visual language explore boundaries spreadsheet paradigm journal functional programming v11 n2 p155206 march 2001