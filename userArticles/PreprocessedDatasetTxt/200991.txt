fortran 90 environment research prototyping enclosure algorithms nonlinear equations global optimization environment general research prototyping algorithms reliable constrained unconstrained global nonlinear optimization reliable enclosure roots nonlinear systems equations without inequality constraints developed environment portable easy learn use maintain sufficiently fast production work motivation design principles uses capabilities environment outlined environment includes interval data type symbolic form automatic differentiation obtain internal representation functions special technique allow conditional branches operator overloading interval computations generic routines give interval noninterval function derivative information generic routines use special version backward mode automatic differentiation package also includes dynamic data structures exhaustive search algorithms b introduction background motivation numerous applications benefit enclosure methods numerical nonlinear analysis methods include rigorous global optimization constrained unconstrained rigorous location roots nonlinear systems equations without side inequality constraints global optimization important engineering biological economic modelling applications see 7 8 furthermore enclosure ie interval methods applicable provide solutions certainty also efficient methods see 14 37 enclosure methods unconstrained constrained solution nonlinear systems useful robotics sensor data analysis collision detection 12 13 generally reliability computer graphics 29 36 elsewhere etc ad hoc algorithms applications sometimes efficient however enclosure methods contain common subtasks computing interval residuals interval function values furthermore substantial theory developed see 32 many computational tools incorporated methods different ways see example 14 recent tools 20 22 23 still unclear scope applicability tools furthermore efficient prototyping tools requires programming environment easily accessible uniform way general research methods proceed within language fortran 77 example elements fortran 77 package int bis 21 investigated acceleration singular roots 19 boundconstrained global optimization 24 however speed investigations constrained lack interval data type giving tasks graduate students personally observed much higher productivity interval data type acrithxsc 39 accessing interval arithmetic subroutine calls routines much smaller algorithms easily understood reading actual routines routines easily maintained 1 universal representation functions even traditional approximate nonlinear equation solvers optimizers require routines evaluate fact recognized decades motivation behind 5 41 residuals objective functions gradients jacobians hessian matrices newton steps etc major burden necessity code functions derivatives even general investigation enclosure methods since function information used contexts example may interval enclosures objective function gradient hessian matrix required also floating point values well relationships among intermediate quantities produced evaluation possibly ten separate routines return information single mathematical function reason generic interpreters functions interval function interval gradient etc well globally available internal representation specific functions useful means automatically generating representations simple programs required dynamic lists branch bound techniques common deterministic global optimization reliable root isolation nonlinear systems techniques two subregions produced single parent region one child regions placed order list kept processing however order list management differ algorithm algorithm insertion list may required different separated subroutines experimentation new algorithms may demand moving places lists required furthermore size list element depends dimension problem maximum required number elements list known priori thus dynamic list operations encapsulated details advantageous encapsulation certain operations besides list operations common operations include computation preconditioners various types computation step interval newton method others encapsulation would greatly ease highlevel algorithmic research development encapsulation subroutines func tions operators natural interface particular arguments logically required appear arguments array bounds workspace vectors slow research prototyping computer language implement environment attributes must ffl userdefined data types operator overloading ffl pointer data type ffl dynamic memory allocation ffl good facilities defining accessing global data furthermore portability language standardized widely available particularly important hardware rapidly improving changing remote access diverse hardware easily available obsolete equipment rapidly retired similar conditions language also admit style easy maintenance modification found fortran 90 necessary attributes knowing fortran 77 difficulties learning fortran 90 fortran 90 code package seems particularly natural finally necessary non interval auxiliary routines fortran 77 sparse linear system solver immediately seamlessly accessible without necessary modification remainder paper briefly describe key aspects environment development x2 explain interval data type briefly describe internal representation functions generation x3 single particular aspect representation conditional branches x4 outline generic routines interpreting representation x5 key properties listprocessing capabilities appear x7 mention viewed special type symbolic differentiation capability available package x6 assume familiarity interval arithmetic x2 x4 x5 introductions subject found 1 14 30 32 description package operations preconditioner computation interval gaussseidel steps appear elsewhere 2 interval data type recently produced intlib 27 portable fortran 77 library support basic interval arithmetic functions interval arithmetic evaluation elementary functions however direct use intlib requires writing subroutine call elementary operation addition multiplication mentioned x1 leaves developer maintainer substantial disadvantage however since fortran 90 standard contains fortran 77 may directly use intlib supporting package defining interval data type created fortran 90 module intlib arithmetic precisely purpose routine tests fortran 90 interface elementary interval arithmetic portion intlib use intlibarithmetic constants interval constants used elementary functions end program testintervalarithmetic figure 1 example interval arithmetic using fortran 90 overloading example use module appears figure 1 certain fortran 90 compiler dosbased pc program produces output computation accessing intlib fortran 77 appears figure 2 output exactly previously interval data types available products augment precompiler 5 41 pascalsc 34 fortransc acrithxsc 2 etc see also 25 additional references however recently become possible provide portable packages accessible scientific engineering community w walter developing alternate fortran 90 package interval arithmetic 38 package termed fortranxsc certain extent portable version acrithxsc developed upon portable accurate dot product substantial support linear algebra operations contrast interval arithmetic module intlib supporting package accurate dot product presently common elementary functions arithmetic rigorous optimally accurate adequate many situations may somewhat faster arithmetic fortranxsc interval arithmetic module also designed compatible acrithxsc sense names supported operations c standard fortran77 routine uses intlib directly double precision tmp12 tmp22 constants interval constants used elementary functions end figure 2 example interval arithmetic directly fortran 77 elementary functions match facilitate conversion acrith programs representing functions code lists solve systems nonlinear equations find optima researchers practitioners must represent functions derivatives computerusable form thought given beginning first use digital computers problems straightforward method program function required derivatives separate subroutines functions however computation coding derivatives error prone symbolic manipulation packages produce programs derivatives given programs functions however resulting expressions sometimes complex lowest terms unusable finite difference approximations sometimes used usually contain significant amounts roundoff trunction errors furthermore use illogical contexts interval arithmetic applied third alternative automatic differentiation see example 9 10 15 33 forward mode 33 arithmetic operations elementary functions overloaded data type simultaneously contains function derivative values backward mode intermediate quantities obtained evaluation function stored later combined produce derivatives backward mode produce gradients scalarvalued function time proportional number operations necessary evaluate function also storage requirements proportional number operations necessary evaluate function also representation branching ifthenelse evaluation function poses difficulties backward mode used see 15 papers 11 function representation scheme related backward mode automatic differentiation particular use operator overloading code list data type define fortran 90 module overload example actual sequence computer operations addition two code list variables consists writing numeric code identifying operation addition well addresses operands file complete result execution program defining function file containing sequence operations function information termed linear representation since loop constructs explicitly appear 2 example program generate code list appears figure 3 result running program appears figure 4 first row figure 4 gives dimension information number dependent vari ables number independent variables number intermediate quantities produced computation numbers constants two types number conditional branches 3 next four rows identify operations operand addresses result addresses example operation 22 multiplication constant operation 5 taking square operation 20 addition operation 23 addition constant row 6 identifies intermediate quantity 5 dependent variable last two rows contain values constants rows code list associated give complete details definition code list well complete description syntax capabilities code list variable types separate users guide may think code list defining sequence relations 2 also termed wengert list r e wengert 40 3 see x4 explanation conditional branches program illustrates use module overload generate list program testfunction use overload typecdllhs dimension1 f outputfilenamefunctestcdl end program testfunction figure 3 simple program generate code list figure 4 code list file function figure 3 nops total number operations evaluate function oe represents elementary arithmetic operation gamma standard function sin exp power code list differs automatic differentiation appli cations since values initially stored symbolic information sequence operations defining function thus code list placed global storage made available module principle used routine requiring specific function data routines may include subroutines compute residuals gradients jacobi matrices either original system expanded system formed assigning variables intermediate quantities solve one variable terms another 4 contrast schemes code lists presently make attempt identify active dead variables ie restructure code list reduce number rows identifying intermediate quantities longer needed course function evaluation contexts must think code list defining relationships among intermediate quantities merely prescription obtain final dependent variable values particular use relationships intermediate quantities produced evaluation function reduce overestimation final results see 16 22 28 representing conditional branches mentioned x3 conditional branches pose problem generating code lists operator overloading since straightforward execution program containing conditional branches results different code lists depending current values branch variables since think indeed nonlinear equations global optimization algorithms use intermediate quantities variables number variables system would dynamically change however conditional branches important various applications involving nonlinear systems global optimization example graphics computing intersection bspline surfaces would require working functions specified conditional branches reason designed special branch function chi resulting code list contains intermediate variables conditional branches well information concerning particular branch valid function derivative routines interpret code list appropriately depending values branch variables also obtain interval inclusions functions derivatives evaluation branches necessary decision variable takes interval values thus desire uniform environment interval standard floating point arithmetic storage 4 possible solve one variable terms another since inverses known elementary operations tight bounds ranges inverses without linearization inverses may consist one point cases intersect original value intermediate variable return list resulting intervals end figure 5 ordinary conditional branch described chi figure 6 branches symbolic representation wasteful function return x q x 0 x r x 0 x q x r otherwise 5 example suppose wish program conditional branch figure 5 represents complete function definition may write simple program figure 6 code list produced program appears figure 7 operation 27 line 4 code list represents branch function equation 2 note branches conditional statement appear code list 6 last row figure 7 gives address quantity x used branch decision interval arithmetic devised natural rules evaluating differentating within functions described x5 example derivatives chi defined follows 5 case result may consist two intervals 6 multiplication occurs second row power occurs third row figure 7 simple test characteristic function handling ifthenelse use overload typecdllhs dimension1 f outputfilenamefchitscdl end program fchits figure simple illustration branch function figure 7 code list produced program figure 6 basic formulas symbolic differentiation code lists containing chi x q x q x r x q x r differentiation respect decision variable problemati cal numerical differentiation may use x r point else rigor computations actual branchandbound algorithms ever domain subdivided regions x constant sign symbolic differentiation cannot done unless assume x may set xsxq xr xs case occurs example describing continuous spline though arrived structure independently handling conditional branches similar treatment logical variables described 5 using code list obtaining function derivative values package include interpretive routines evaluating functions derivatives interval floating point data capabilities presently development 1 computation dependent variables given independent variables interval floating point data types 2 computation jacobi matrix dependent variables respect independent variables given independent variables 3 computation jacobi matrix dependent variables respect independent variables given intermediate quantities evaluation function 4 computation intermediate quantities independent variables forward sweep code list 5 computation jacobi matrix intermediate quantities respect intermediate quantities 6 solution one intermediate quantity terms others using specified relation code list 7 computation hessian matrix tensor dependent variables respect independent variables given independent variables code list along dimension information accessible routines fortran 90 module workspace allocated dynamically main programming device fortran 90 case state ment case corresponding operation defined code list 7 depending compiler implementation construct interpret code list efficiently also use internal representation module allows particularly simple user interface example interval values function obtained statement 7 technique natural way interpret code lists first suggested author private conversation arnold neumaier programmers obligation assure independent variable values array x array fval enough storage hold dependent variable values 8 seen equation 1 exception branch statement equation 2 elementary operation two operands one result thus think intermediate quantity dependent variable definition equations independent variable intermediate variable new independent variables jacobi matrix resulting expanded system three nonzero entries row assuming matrices must stored efficient store twodimensional array whose row bound 3 information columns nonzero elements occur given row already available code list refer jacobi matrices stored data structure expanded jacobi matrices 9 use backward substitution process compute jacobi matrices original dependent variables respect original independent variables expanded jacobi matrices technique known researchers automatic differentiation eliminate entries columns expanded jacobi matrix corresponding intermediate variables rows corresponding dependent variables jacobi matrix dependent respect independent variables occurs columns corresponding independent variables experiments 16 hint method achieve tighter interval enclosures original jacobi matrix straightforward evaluation particularly true bounds intermediate quantities obtained function evaluation tightened using relationships among intermediate quantities overall complexity routine nops number operations required evaluate function neq number components function ie number dependent variables complexity better forward 8 unfortunately example also illustrates minor inflexibility complicated devise routine fortran 90 works efficiently syntax fval array user data type without preset size due technical aspects standard related lack automatic garbage collection 9 technique proposed xiaofa shi private conversation mode matrix least many rows columns easier use independently tightened interval bounds intermediate quantities backward mode 6 symbolic differentiation code lists since elementary relationship elementary operation oe equation 1 derivative respect operands may produce code list derivative tensor given code list original dependent variables designed set operations code lists closed differentiation differentiation viewed symbolic since input defining representation function independent argument value output similar representation however differs traditional symbolic differentiation manipulation since algebraic expressions stored elemental relationships defining particular representation function routine outputs derivative code list exactly form function code list routines mentioned x5 thus applied derivative code lists obtain numerical interval floating point values higherorder derivatives example alternative using jacobi matrix routine would symbolically differentiate code list use function routine differentiation routine also principle applied indefinite number times output derivatives arbitrary order several issues arise technique first higherorder derivative tensors functions many independent variables exhibit everhigher sym metries scheme meant highorder derivatives thus take account symmetry reduce redundant storage operations example may possible improve scheme using ideas 31 second many components higherorder tensors typically zero possibly use ideas 6 general derivative code lists contain structure information storage economization third issue extent applicability derivative code lists size derivative code list larger original list much larger depends implementation differentiation scheme function alternative interpret original function code list routine directly computes numerical values higherorder derivatives give details derivative code list elsewhere interesting related treatment backward mode automatic differentiation obtain higherorder derivatives appears 4 7 boxes lists nonlinear equations optimization interval methods nonlinear algebraic systems global optimization involve exhaustive searches domain see algorithms 14 x911 26 30 pp 7778 35 p 111 etc exhaustive searches algorithm recursively subdivides initial box b producing list l sub boxes box l processed boxes removed inserted l particularly global optimization algorithms elements lists ordered eg lower bounds function value corresponding box recapitulate considerations introduction software employing lists 1 information coordinates box b corresponding approximate root critical point whether computational existence test proven existence root critical point b bounds range objective function case optimiza tion stored box information may change algorithm 2 possible insert boxes list logically separate parts algorithm example generalized bisection may produce two boxes one inserted list later consideration see 18 etc alternately substitutioniteration process first advocated 22 computation branches square root strictly positive interval would also lead two boxes furthermore division zerocontaining interval interval gaussseidel step subsequent intersection extended intervals original interval could lead two intervals 3 maximum number boxes l known priori general software even research codes able handle arbitrary dimensions efficiently respect ease use storage computation time 4 easy modify research codes easy maintain production codes easy read types code facts lead following conclusions ffl information associated box b encapsulated derived data type simple support creation destruction elements data type provided ffl storage list l allocated freed dynamically list operations encapsulated made generic done dynamic linked list form described 3 x82 data type b associated node created two box data types one optimization one general nonlinear equations well list data types integers inter vals operations lists include insertion removal first element purge operation global optimization printing checking whether list empty creation list operations generic routine name used box type example statement inserts item b list l l list type b item corresponding type storage created list element element inserted reclaimed element removed boxes associated interval vectors list routines read dimension interval vector code list allocate precisely amount storage necessary operations lists make heavy use fortran 90 pointer variables depending hardware compiler implementations operations involving dynamic allocation involve large numbers machine op erations however operations lists within enclosure method codes typically occur infrequently compared computations thus appropriate contexts dealing integer lists known maximum size eg variable indices use simple arrays may appropriate summary conclusions future work used new fortran90 capabilities design system developing numerical nonlinear equation global optimization codes features system include interval data type special symbolic implementation automatic differentiation iterated defined special characteristic function allow consideration conditional branches also supplied various routines obtain numerical values lists produced automatic differentiation finally supplied dynamic data structures exhaustive search algorithms new system eliminate much programming burden developing testing interval noninterval nonlinear equation optimization codes future work include improvement storage structures higher derivatives mentioned x6 development additional functions oe allowable code list example may provide userdefined elementary functions may also allow linear forms like p np x independent variables since evaluation expressions leads exact ranges 9 acknowledgement wish acknowledge referees editor john reid quick careful reading useful suggestions r introduction interval computations programmers guide fortran 90 reverse accumulation accurate rounding error estimates taylor series coefficients augment precompiler automatic differentiation large sparse systems collection test problems constrained global optimization algorithms chain rule revisited scientific computing chain rule revisited scientific computing automatic differentiation al gorithms theory solving large systems nonlinear constraints application data modeling global optimization using interval analysis methods fast automatic differentiation applications global minimization method multidimensional case abstract generalized bisection cost bound interval newton preconditioners interval gaussseidel method intbis portable interval new tonbisection package algorithm 681 decomposition arithmetic expressions improve behavior interval iteration nonlinear systems iii review preconditioners interval gaussseidel method interval branch bound algorithm bound constrained optimization problems intlib portable fortran77 elementary function library cluster problem multivariate global optimization intlib reasonably portable interval elementary function library preconditioner selection heuristic efficient iteration decomposition arithmetic expressions nonlinear systems rigorous computation surface patch intersection curves methods applications interval analysis efficient method numerical evaluation partial derivatives arbitrary order interval methods systems equations automatic differentiation techniques applications introduction scientific computing language pascalsc new computer methods global opti mization interval analysis computer graphics test results global optimization algorithm fortranxsc portable fortran 90 module library accurate reliable scientific computing acrithxsc fortranlike language verified scientific computing simple automatic derivative evaluation program software interval arithmetic reasonably portable package tr fortransc study fortran extension engineeringscientific computation access acrith new computer methods global optimization preconditioners interval gaussseidel method algorithm 681 intbis portable interval newtonbisection package collection test problems constrained global optimization algorithms interval newtongeneralized bisection singularities near roots programmers guide fortran 90 decomposition arithmetic expressions improve behavior interval iteration nonlinear systems interval analysis computer graphics recent advances global optimization efficient method numerical evaluation partial derivatives arbitrary order algorithm 737 intlib software interval arithmetic reasonably portable package simple automatic derivative evaluation program expression parsing rigorous computation bounds solutions practical nonlinear systems ctr r baker kearfott algorithm 763 intervalarithmetic fortran 90 module interval data type acm transactions mathematical software toms v22 n4 p385392 dec 1996 jianwei dian r baker kearfott existence verification singular nonsmooth zeros real nonlinear systems mathematics computation v72 n242 p757766 1 april mihly csaba markt tibor csendes andrs erik csallner multisection interval branchandbound methods global optimization ii numerical tests journal global optimization v16 n3 p219228 march 2000 r b kearfott dawande k du c hu algorithm 737 intliba portable fortran 77 interval standardfunction library acm transactions mathematical software toms v20 n4 p447459 dec 1994 min ho chang young cheol park taiyong lee new global optimization method univariate constrained twicedifferentiable nlp problems journal global optimization v39 n1 p79100 september 2007