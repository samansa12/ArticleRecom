proving convergence selfstabilizing systems using firstorder rewriting regular languages framework selfstabilizing systems convergence proof generally done exhibiting measure strictly decreases legitimate configuration reached discovery measure specific requires deep understanding studied transition system contrast propose simple method proving convergence regards selfstabilizing systems string rewrite systems adapts procedure initially designed dershowitz proving termination string rewrite systems order make method terminate often also propose adapted procedure manipulates schemes ie regular sets words incorporates process scheme generalization interest method illustrated several nontrivial examples b introduction introduced dijkstra three mutual exclusion algorithms ring processes 11 notion selfstabilization largely studied last ten years see 2931 surveys paper consider system consists ring machines controlled central demon configuration concatenation component local states characterized set transitions defined configurations system selfstabilizing respect subset l legitimate configurations regardless initial configuration regardless transition selected step central demon guaranteed reach configuration l within finite number steps set l assumed closure property legitimate configuration l system persistently remains l also frequent paper revised extended version communication given three first authors symp disc99 title new rewrite method proving convergence selfstabilizing systems lncs 1693 springerverlag pp 240253 assume nodeadlock two hypotheses easy show system selfstabilizing iff nocycle property cyclic sequence transitions contains configuration w 62 l property often proved exhibiting norm function defined set configu rations whose value strictly decreases transition bounded sequence transitions long configuration legitimate 31 since measure usually specific considered system finding one difficult requires deep understanding system see eg23144 propose new approach proving absence cycle configurations viewed words formal language transitions rewrite rules nocycle property variant nontermination property rewrite rules absence infinite sequences shown refining generation procedure reduction chains 1 first proposed dershowitz proving string rewriting termination 8 method proposed new 1 uses general technique stringrewriting deal selfstabilization 2 consider possible rewrite derivations representative ones using restricted firstorder rewriting strategy generalization strategy replacing sequences words regular languages also incorporated method order improve termination related work selfstabilization proofs 11 without proof 12 correctness proof given third 3state algorithm 11 showing properties executions using behavioral reasoning already pointed almost proof methods cf 31 based norm functions see example 19 expressed gouda 15 experience ratio time design stabilizing system time verify stabilization one ten simplifying proof process general paradigms proposed various protocol compositions making proofs modular 316 attractor staircase methods 1529 automatic transformations stabilizing systems 2 idea representing sets configurations regular languages used 18 ground level without use 1storder variables note recently works done proving convergence without appealing norm function 32 uses techniques borrowed control theory 1 induction techniques set configurations related work rewrite techniques applied distributed systems although viewing transitions rewrite rules rather natural application general rewrite techniques proving properties distributed systems explored knowledge except 2527 graph rewriting techniques priorities used prove correctness various distributed algorithms election spanningtree construction however work address issue selfstabilization 1 also called forward closures 9 plan paper section 2 explains selfstabilization viewed property string rewriting systems section 3 give basic pro cedure inspired dershowitz terminates allows decide selfstabilization order make procedure terminate often incorporate process generalization section 4 section 5 shows application method detailed examples section 6 concludes final remarks perspectives selfstabilizing systems string rewrite systems first recall basic definitions string rewrite systems 105 words considered generally delimited leftmost rightmost special symbols appearing belong finite alphabet sigma set variable symbols string element sigma empty string ground word element sigma 1storder word element sigma v substitution mapping v sigma v w almost everywhere except finite set variables denoted dom mapping extends trivially words result w called instance word w substitution represented finite set pairs form fww g w2dom substitution ground w sigma w 2 dom 21 string rewrite systems string rewrite systems considered contain lengthpreserving rules divided three subsets top rules top applied rightmost part words bottom rules bottom applied leftmost part words simultaneously ends rest rules middle called middle rules precisely let r resp nonempty strings sigma length xy variables middle made rules form xy xry tops made rules form xxr bottom made rules form xrx 1 x 2 r 1 xr 2 going apply rules either ground words 1storder words form uw v u v strings sigma w variable example consider following rules beauquierdebas algorithm see section 5 bottomrule toprule middle rules rules used throughout next sections illustrate notions defined well method propose note strictly speaking rules applied 6 example 1 correspond 3 rules form x10ay x01ay 2 f0 1 2g sake conciseness neglect restrictive condition application except section 5 22 ground reduction ground word w reducible via rule form x 1 xr 1 iff one also says w instance rule lefthand side via ground substitution fxu yvg reduced form w w reduction via rule form 1 x 2 r 1 xr 2 defined similar way ground word w reduces w 0 via written w w 0 sometimes simply reduced form w via rule say non terminating iff exists infinite sequence reductions via starting ground word w otherwise said terminating example consider 2x11x2 ground word instance lefthand side using substitution fx01g replacement righthand side yields reduced form w reduction ground word w using middle rule r xy xry merely consists searching substring r replacing r note reduction occur various places corresponding possible positions occurs substring w wellknown see eg 24 operation simulated finite transducer say tr associated r w reduces w 0 pair hw w 0 accepted tr example transducer tm1 associated rule x10y x01y represented figure 1 similar simulation possible top bottom rules fig 1 transducer tm 1 rule m1 x10y x01y 23 selfstabilization able give formal definition selfstabilization system modeled string rewrite system configurations regarded ground words writing ln set legitimate configurations system n machines define global set legitimitate configurations n2 ln definition 1 rewrite system selfstabilizing respect set l iff ground word reducible via 1 l closed via ie w words w w 0 2 ground cyclic derivation form w statement 0 expresses nodeadlock property 1 closure property l 2 nocycle property easily follows definition maximal derivation infinite reaches set l corresponds convergence property also called nolivelock property 6 note assuming 1 equivalent version 2 infinite ground derivation delta via 3 firstorder characterization cycles assuming satisfies 0 1 focus problem proving nocycle property stated form 2 0 method relies firstorder characterization cycles show infinite ground derivation via mentioned 2 0 actually instance infinite derivation first level order state main result need notion reduction chains transposed 8 particular context 31 minimal reductions chains deal onevariable words form uw v u v 2 sigma w 2 v notion ground reduction defined section 22 extends trivially onevariable words suffices consider w new constant ie extend sigma fwg say case reduction done using substitution given firstorder word rewrite rule r also possible consider nontrivial instantiations w oe 6 id make reducible problem particular case unification problem finding common instances general unification problem words complex solved makanin 28 however particular unification problem simple share variables lin ie contain one occurrence variable case exists complete set minimal unifiers finite roughly speaking suffices consider manners overlap depending possible instantiations variables see eg 21 assume given minimal complete set unifiers k instance reduces r however disregard unifiers j instantiate variable position replacing variable w subword form turn unnecessary context see remark section 32 operation minimal reduction nonvari able position adaptation operation narrowing 301320 context onevariable words rather 1storder terms example consider rule x11y x22y word 1w1 unifies lefthand side x11y via general unifiers 1g last unifier 4 associated reduction discarded corresponds unification taking place variable position minimal reductions corresponding 1 11w 0 122w 0 1 let us define formal constructive manner operation minimal reduction nonvariable position distinguish two basic cases depending wether involved substitution identity suppose given middle rule r xy xry form 2 sigma substitutions oe 6 id involved minimal reductions via r form set ar set substitutions ff br set substitutions cr set ground substitutions convention fl ij fwg similar set substitutions dr defined top bottom rule r definition 2 word minimally reducible u via rule r using substitution oe 2 dr fidg written toe r u simply toe u iff instance u corresponding instance ae ffl middle rule r xy xry word begins string 1 obtained replacing wa w 0 r ends string 1 u obtained replacing 1 begins j1 delta delta delta 1 ends 1 u obtained replacing r ffl top bottom rule r minimal reduction using oe 6 id defined similarly case middle rule example rule single substitution ff 1 fww 0 1g yields minimal reduction gives two possible instantiations yields following minimal reductions w 0 10003w 0 11003 w 0 1003 seen section 22 reduction ground word via rule r performed applying transducer 1storder word form 1 w 2 minimal reduction simulated manner considering w frozen ie extending sigma withfwg rid associated transducer similarly oe 2 dr define transducer say roe performs minimal reduction via r using oe example case substitution oe form ff g transducer searches string form wa within word given input strings exists replaces w 0 r illustrated figure 2 rule transducer tm1 ff 1 searches string wa 2 replaces w 0 r therefore rule r substitution oe 2 dr fidg always possible define transducer roe accepted roe definition via transducers subsequently allow us extend minimal reduction words schemes straightforward manner see section 4 fig 2 transducer tm 1 ff 1 define notion minimal reduction chains direct transpositions definitions properties 8 particular context definition 3 minimal top reduction chains rewrite system form set derivations inductively defined follows every top rule minimal top reduction chain top minimal reduction chain r rule n oe u via r reduction chain called successor c via r using oe transitive closure successor relation called iterated successor henceforth simply say top chain instead top minimal reduction chain example consider rule viewed chain successor via using fw2w 0 g definition require chains start top rule instead arbitrary rule requirement new respect dershowitzs definition 8 chains start arbitrary rules advantage focusing top chains restrict number possible chains considered determining selfstabilization see theorem 5 restriction endanger correctness characterization assume system gamma top terminating see section 32 recall rules ae string rewrite systems considered substring replaced substring r ae length therefore chain either words ground length form u u v strings sigma length reason length preservation must exist 1 infinite top chain ground explains use following definition definition 4 top chain resp ground derivation quasicyclic 32 characterization selfstabilization state main result theorem 5 let rewrite system let l set configurations 0 ground word reducible via 1 l closed via selfstabilizing wrt l iff quasicyclic top chain via 0 2 l ground instance 0 n n result adaptation dershowitzs theorem 8 p 454 characterizing nonterminating string rewrite systems least one cycling chain infinitely many noncycling infinite chains cannot happen case proof theorem 5 relies properties involving notions active inactive steps within infinite ground derivations introduced dershowitz 8 definition 6 active area ground word w ground derivation wn part w created nonvariable portions righthand sides rules applied top letter ie rightmost letter initial word w 1 considered active precisely suppose rule form x 1 xr 1 resp applied ground word w form u obtain ground word w 0 form u 1 r 1 w 0 letters r 1 resp r 1 r 2 active least one letter 1 resp 1 2 active besides letters u already active w remain active w 0 say ground word active top letter definition 7 active ground derivation via resp inactive ground derivation via ground derivation w wn rules applied active area resp inactive area words denote act gammagamma resp inact gammagammagamma application rule active area resp inactive area ground word derivations start single active top letter successive reductions increase active part words active letters put bold example starting ground word 2012 applying successively top rule active area obtain following active ground derivation act gammagamma act gammagamma 1022 following property counterpart relation reduction sequences narrowing sequences firstorder term theory 20 proof analogous therefore omitted lemma 8 lifting lemma active ground derivation act act gammagamma wn via exists top chain delta instance ie w ground substitution remark lemma states ground derivation instance 1storder top chain chain obtained using sequence minimal instantiations form fwuw 0 g fww 0 ug fwug 1storder covering holds spite fact instantiations oe discarded definition justifies posteriori focus minimal reductions nonvariable positions example active ground derivation see act gammagamma t4 2021 act gammagamma b1 1022 instance via ground substitution fw 0 0g top chain use following property dershowitz general context 8 lemma 9 semicommutation lemma let w words w 1 act inact gammagammagamma w 3 exists ground word w 0 2 inact gammagammagamma w 0act gammagamma w 3 example starting word 1012 consider following derivation via 4 act gammagamma t4 1021 inact gammagammagamma m1 0121 order rule application permuted get 1012 inact gammagammagamma m1 0112 act gammagamma t4 0121 therefore inactive steps always switched active steps pushed upwards remains show number inactive steps infinite ground derivations necessarily finite proposition 10 let rewrite sytem gamma top terminating infinite ground derivation via finite number inactive steps proof consider infinite ground derivation applying rule active area ground word cannot create new inactive letters applying rule inactive area replaces certain portion inactive area another inactive portion length therefore either inactive subareas delta disappear finite number steps b least one remains two fixed positions case b subpart delta 0 delta form w every wn form xn vn yn xn resp vn wn length vn always remain inactive since active application rules subparts xn n involve inactive portion v n one extract delta 0 infinite inactive ground derivation delta 00 affecting vn infinite derivation delta 00 never makes use top rule since top letter active contradiction assumption gamma top terminating possible case therefore inactive subareas disappear finite number steps finally inactive steps infinite ground derivation pushed upwards thus yielding purely active suffix instance top chain proposition 11 suppose gamma top terminating l closed via infinite ground derivation via containing word l quasicyclic top chain via starting word 62 l ground substitution proof part obvious prove onlyif part consider infinite ground derivation delta l property 10 since ing infinite derivation contains finite number inactive steps applying iteratively semicommutation lemma 9 one push back inactive steps beginning derivation thus obtaining reordered infinite ground derivation delta 0 point active steps derivation active infinite ground part derivation l since rules lengthpreserving initial part delta 00 form w wn w wn w p 6 w q n lifting lemma 8 chain particular either ground form u j wv j unwvn ju follows j distinct since instances w p w q via distinct therefore quasicyclic chain ending n n wn 62 l remark order mechanically check point 3 theorem 5 ie termination gamma top one use classical wellfounded orderings used rewriting theory 10 one also use dershowitzs chain test generate general chains either one cycles sense 8 nontermination detection terminate termination proof dershowitzs procedure also refined one knows order prove termination suffices generate bottom chains via ie chains start bottom rule check none cycle course case one check additionally termination generally easier theorem 5 directly results proposition 11 definition selfstabilization 33 chain generation theorem 5 suggests prove selfstabilization following procedure generate top chains infinite chains generated form instances n l selfstabilizing otherwise selfstabilizing order prove selfstabilization necessary sufficient generate 1storder sequences extend top rules instead blindly generating possible ground derivations starting arbitrary ground words generation procedure limited procedure firstorder manipulates onevariable words form uwv instead infinite sets ground instances also limited fact sequences always start lefthand side top rule 34 optimization procedure basic theorem associated generation procedure refined exploiting measure say words never increases applying rule ie relaxed assumption respect norms required traditional selfstabilization proof methods must always decrease ie roughly speaking norms w addition nonincreasing measure assume given rewrite system 0 infinite derivation via rewrite steps finite number necessarily preserving nonincreasing property may viewed rewrite steps via 0 order prove selfstabilization becomes necessary sufficient show absence quasicyclic top chains except ending instance l via 0 instead precisely theorem 5 may replace selfstabilizing wrt l iff quasicyclic top chain via selfstabilizing wrt l iff quasicyclic top chain via 0 henceforth given measure associated system 0 implicitly focus generation top chains via 0 example consider middle rules ghoshs algorithm see section 5 details addition modulo 4 convergence proof uses norm function br ds either br ds strictly decreases step individually br ds nonincreasing functions ds subtle function br simply number breaks ie number neighbouring states q q 0 string differ least one unit contrast method proves convergence help measure br focus brpreserving infinite derivations ie infinite derivations preserve number breaks since br nonincreasing bounded infinite derivation infinite brpreserving suffix loss generality obtain system 0 modify rules brpreserving rules follows remark sometimes convenient use measure never decreasing instead never increasing enhanced theorem still holds infinite derivation via steps finite number must preserving provided bounded upward eg number n machines ring made reasoning used burns pachl see 6 p 339 focus infinite derivations preserving number dy namic segments configurations use nondecreasing measure section 53 refinement allow us restrict even number generated chains however practice spite focusing top chains using preserving system 0 generation procedure terminate produces infinite number word sequences solve problem introduce section 4 notion chains regular sets words instead simply words apply notion generalization compositionality interesting relate compositionality results obtained context selfstabilizing systems obtained context rewrite systems similarly dershowitz proved wrt composition terminating systems see theorem 8 p456 one derive theorem 5 sufficient conditions selfstabilization combination two selfstabilizing systems theorem 12 assume selfstabilizing wrt l 1 selfstabilizing wrt l 2 starting l 1 2 overlap lefthand sides 1 righthand sides 2 executions fair wrt 1 2 3 selfstabilizing wrt l 2 seen version hermans compositionality result 17 context 4 sufficient condition selfstabilization mentioned earlier top chains generated brute manner frequently infinite number however often possible discover recurrent forms words n appearing end chains consider subset rules 4 g beauquierdebas system starting l1 means condition 0 replaced 0 0 ground word l1 reducible via s2 definition 1 selfstabilization s2 wrt l2 3 see eg 31 p 476 formal definition fairness starting 4 applying iteratively rule 4 one generates chains chains infinite number except first one end words form w20 j 1 j 0 convenient generalize words form w20 j 1 regular set w20 1 replace firstorder derivations words firstorder derivations regular sets regular sets called schemes following derivations schemes defined manner cover possible top chains words overapproximation generalized derivations may represented compact form paths along nodes symbolic graph node corresponding scheme absence infinite derivations ie self stabilization shown checking every path graph uses bounded number top rules exploits assumption termination section 43 claim process generalization improves convergence method top chain generation remark idea integrating generalization process overapproximation similar idea using widening context abstract interpretation order accelerate convergence fixedpoint computations abstract domains see 7 idea reasoning derivations regular languages used hoepman 18 context selfstabilizing systems note however hoepman contrast us reason ground level exploit notion firstorder variables 41 replacing words schemes going define notion schemes appropriate form regular languages contain sets words considered extend accordingly notion reduction chains manipulating schemes instead words definition 13 firstorder scheme language form lwm nonempty regular languages sigma w firstorder variable ground scheme language form l l regular language sigma scheme either 1storder ground scheme following assume set legitimate configurations l expressed ground scheme note firstorder word form uwv strings u v seen special firstorder scheme fvg likewise ground word special ground scheme 42 minimal reductions schemes generalization shown earlier possible define minimal reduction words using notion transducers soe r iff hs ti accepted roe allows us define minimal reduction schemes straightforward manner definition 14 let scheme r rule oe substitution dr fidg roe transducer associated r oe reduced form via r using oe scheme 0 defined hs 0 accepted roe g written soe r 0 note finite automaton accepting 0 output roe input filtered follows immediately definition output 0 associated scheme example rule scheme minimally reduces 0g reduction written generalization 1storder schemes overapproximation regular languages surrounding 1storder variable scheme precisely 1storder scheme generalization 1storder scheme note names variables appearing viz w w 0 matter henceforth without loss generality always rename firstorder variables w 0 appearing schemes w particular substitution form fww 0 ug simply fwwug convention generalization 1storder scheme 1storder scheme contains ie say ground scheme generalization ground scheme iff following interleave generalization process minimal duction given rule r substitution oe 2 dr fidg say scheme generalized successor scheme write soe r simply example rule thus write soe generalized successor via r using oe express formally correspondence relation scheme level word level lemma 15 given rule r substitution oe 2 dr fidg scheme word 2 soe r implies soe r scheme 2 give formally notion generalized top chain definition 16 generalized minimal top chains rewrite system form set inductively defined follows every top rule g generalized minimal top chain r rule generalized minimal top chain called generalized successor g via r using oe lemma 15 generalizes follows lemma 17 given top chain words via rules r using substitutions oe top chain schemes using substitutions lemma states top chain word level covered corresponding top chain scheme level hereafter describe procedure chain generation scheme level procedure top rule input gamma denotes set chains successors remain computed generalized chain g 1 select 2 compute finite set generalized successors say fs new soe new rule r 2 oe 2 dr fidg 3 add new gamma unless new old old gamma od note test new old decidable since deals inclusion regular languages optimization procedure implicit consists computing successors subset l justified since interested detecting existence infinite chains intersect l cf criterion 2 0 section 23 example already seen beauquierdebas system righthand side w21 top rule 4 minimally reduces via 4 scheme generalized successor via 4 using fww0g hand scheme minimally reducible via b 1 using fw2wg scheme u minimally reducible via 1 using fw0wg iterative way yields 01w20 scheme u thus generalized generalized successor 1 via b 1 using fw2wg thus 2 latter scheme minimally reducible via 4 resp 1 yields subset 2 2 therefore 2 generalized successor via 4 using fww0g via 1 using fw0wg 43 graph construction convenient represent minimal reduction form 1 oe 1 form edge labelled r 1 oe 1 1 2 likewise chain represented edge labelled r 1 2 followed edge labelled r 2 oe 2 2 3 see graph left figure 3 additionally schemes represented labels nodes structure sharing used order merge representation nodes associated identical schemes generation scheme successors corresponds construction graph paths nodes represent chains schemes example graph right figure 3 corresponds minimal reduction soe r represents compact form infinite number chains fig 3 graphs reductions process graph construction described takes top rule input builds iteratively generalized successors form growing paths node n graph labelled scheme referred pair n generalized top chain using substitutions oe form u represented path graph form hn 1 labels edge n formally procedure follows graph construction q 6 fg 1 select n 2 q 2 compute finite set successors say fs new soe new rule r 2 oe 2 dr fidg 3 3a new old node n old old add edge labelled r oe n n old old 3b otherwise add node n new new q edge labelled r oe n n new new 4 q od according optimization mentioned previously successors step 2 implicitly computed subset l therefore graph edge exits nodes labelled subsets l another obvious optimization consists skipping step 3a case edge labelled oe already exists n n old old example figure 4 shows complete graph corresponding generalized chain generation beauquierdebas system 0 4 input construction graph proposition 18 suppose scheme chain generation generated chain u un via r using oe path n 1 ft 1 g node form n un via edges labeled r gives sufficient condition selfstabilization theorem 19 top rule input path associated graph uses top infinitely often apart paths passing l selfstabilizing proof suppose path using top infinitely often except paths passing l proposition 18 chain schemes using top infinitely often except chains reaching l lemma 17 chain words using tops infinitely often except chains reaching l finally using fact gamma tops terminates infinite chain words except reaching l hence quasicyclic chain therefore selfstabilizing contrast theorem 5 condition longer necessary cannot deduce non selfstabilization case infinite chain produced hand claim procedure terminates often counterpart words thus allowing prove selfstabilization cases illustrated examples next section fig 4 graph construction t4 5 examples 51 beauquierdebas algorithm system originates 4 adaptation dijkstras third 3state algorithm 11 formalism corresponds following system top middle l defined 0 20 10 10 2 example assumed sum elements initial configuration null modulo 3 property preserved applying rules easy check ground word null sum elements reducible via l closed via see 4 therefore selfstabilizing iff ground cyclic derivation via containing element remarked 4 one see applied consequence selfstabilizing iff ground cyclic derivation via containing element w 62 l measure word defined number nonnull elements contained ob viously nonincreasing 0 compatible substitution besides among rules 0 rules preserve number nonnull ele ments refinement basic procedure thus consists generating top chains via instead 0 graph constructed figure 4 gives complete picture situation illustrated previous examples since infinite path using top 4 used follows quasicyclic top chain n n selfstabilization thus proved beauquierdebass variant dijkstras 3state algorithm 52 ghoshs 4state algorithm selfstabilization ghoshs algorithm 14 variant dijkstras 4state al gorithm proved formally along lines system consists parametric number n machines 0 four states except top machine machine 0 two states f0 2g resp f1 3g explained section 2 configuration system string machine states delimited special end symbols writing xy string variables transitions correspond following system rewrite rules middle addition modulo 4 top bottom l defined f1 3g mentioned section 34 ghosh proves convergence considering norm function br ds either br ds strictly decreases step recall br ds nonincreasing functions br number breaks ie number neighbouring states q q 0 string differ least one unit ds measures sum distances pairs neighbouring breaks string difficulty ghoshs proof comes discovery measure ds method uses measure br focus brpreserving infinite derivations instance two following reductions underlines indicating positions substring reduced discarded decrease br one thus consider system 0 middle rules replaced graph construction illustrated figure 5 case initial rule w32w30 similarly another representative graph obtained starting top chain 2 righthand side w12 make figure readable details omitted substitutions oe 0 oe 0 respectively fww0g fww03g edges labelled 1 without substitution correspond schemes appearing figure closed generalized application rule 1 loop represented important point graphs pathes make use top rule finite number times follows theorem 19 system selfstabilizing oe 0 oe 0 oe 0 m1 oe 0 oe 0m1 oe 1 oe 0m1 oe 2 oe 0m1 oe 3 oe 0100 fig 5 firstorder generation chain 53 hoepmans ring orientation algorithm finally sketch method adapts uniform algorithms algorithms without distinguished top bottom middle rules take example selfstabilizing ring orientation algorithm presented hoepman 18 context underlying assumptions existence distinguished top rules top termination gamma top hold longer instead assumption fairness also used 18 used convergence proof infinite sequence rules modifies infinitely often state every machine ring hoepmans algorithm based 16 rules applied words alphabet uses following notations g corresponding rewriting system transforms subword pqr pq 0 r q 0 given following tables rule rule rule rule rules applied position configuration formally every transformation pqr pq 0 r corresponds 3 rules xpqry rules applied position configuration hoepman proves system converges l 2 two steps first exhibits measure strictly decreases applied ground configuration l 0 unless ground configuration belongs subset l 1 exhibits another measure strictly decreases applied ground configuration l 1 unless belongs l 2 also proves system converges l 2 third set 3 beyond scope presentation contrast method gives direct proof convergence l 2 viewed set l legitimate configurations appeal strictly decreasing measure preliminary step transform hoepmans system simpler set rules first use refinement order disregard rules c measure counts number maximal subsequences value either 1 inside word assuming leftmost rightmost elements contiguous example measure 000100w1100 4 rules preserve number except rules c strictly increase 2 therefore c used finite number times bounded upward n focus infinite derivations via cg remaining rules merged form simple new system given table rule note transformation shorthand 4 rules example transforms every transformation pqr p 0 q 0 r 0 corresponds 3 rules xpqry xp 0 q 0 r 0 depending position applied easy see sequence via gamma fa cg simulated sequence via g order prove selfstabilization via thus necessary sufficient prove infinite sequence derivations via 0 apart sequences ending l 2 thus focus chains starting rule e f f 0 since system uniform actually focus chains starting rule e applied arbitrary position eg rightmost one thus starting rule show infinite derivation e firstorder rewriting via 0 regardless sequences going l 2 done two steps first build graph associated e explain infinite path graph except going l 2 graph found figure 6 edges corresponding non trivial substitutions oe 6 id represented nodes addition selfloop labeled id sake readability substitutions labeling edges figure also omitted example consider upmost node three outgoing edges labeled respectively substitution corresponding rule e gives generalized sigma substitution rule e 0 gives generalized sigma substitution rule f 0 fww0g gives generalized f f f f f f fig 6 firstorder graph generation e also note two edges leading l 2 set legitimate configurations implicitly labeled fwg considering graph see three kinds nodes first one corresponds first order scheme lwm second one legitimate scheme l 2 third one ground schemes containing either 0 observation summarized figure 7 oe 6 id fig 7 reduced form graph figure 6 simple analysis new synthetic graph leads us conclude infinite path exists except passing l 2 following reasons infinite loop nodes contain patterns 0 rule rewrite central letter contradiction fairness assumption infinite loop substitution oe 6 id w represents finite word cannot instanciated infinitely often infinite loop label otherwise string represented w could never modified extremities contradicts fairness similar constructions explanations hold rules achieves proof selfstabilization 6 conclusion perspectives contrast methods relying existence strictly decreasing norm function 4141923 method requires little specific knowledge proposes uniform framework full proof several non trivial examples shown ghoshs 4state algorithm 14 beauquierdebass 3state algorithm 4 examples simple ones allow us give clear view procedure procedure inspired dershowitzs chain generation procedure 8 proves convergence selfstabilizing algorithms much way dershowitz proves termination rewrite systems following hoepman 18 enhanced basic method incorporating generalization process words regular languages defining rewriting schemes method fully automatic need particular infer hand generic schemes configurations words produced recurrently throughout derivations main differences traditional proof methods selfstabilization use strictly decreasing measures ground configurations come 1 focusing derivations originating topconfigurations instead derivations starting arbitrary configurations 2 reasoning 1storder variables deriving new configurations restricted strategy reduction top chain generation instead considering possible ground configurations possible ground successors 3 reasoning regular languages including 1storder variables integrating generalization process also given natural counterpart hermans compositionality result framework believe method easily adapts case uniform rings sketched hoepmans ringorientation protocol currently investigating extensions method two directions first want consider realistic token ring algorithms like different versions ibm token ring fddi protocols involving change state reading model message passing model case channel states must modeled hypotheses must slightly modified consider selfstabilization second natural extension concerns algorithms running arbitrary nonring networks framework strings must replaced graphs would use graph rewriting techniques proposed 2527 properties distributed systems acknowledgement would like thank nachum dershowitz encouragement pointing reference 32 r selfstabilizing leader election algorithm tree graphs memory efficient self stabilizing protocols general networks composite routing protocols optimal selfstabilizing algorithm mutual exclusion uniform bidirectional rings uniform selfstabilizing rings abstract interpretation unified lattice model static analysis programs termination linear rewriting systems topics termination rewrite systems selfstabilizing systems spite distributed control belated proof selfstabilization firstorder unification equational theory alternative solution problem selfstabilization triumph tribulation system stabilization adaptative programming adaptativity distributed convergence selfstabilizing ringorientation using constant space selfstabilizing algorithm maximal matching canonical forms unification minimal complete word unification selfstabilizing extensions messagepassing systems exercise proving selfstabilization variant function symbolic modelchecking rich assertional languages computing graph rewriting systems pri orities different local controls graph relabeling systems recognition families graphs local computations problem solvability equations free semigroup selfstabilization automated theoremproving theories simplifiers commu tativity associativity introduction distributed algorithms exercise proving convergence transfer functions tr belated proof selfstabilization exercise proving selfstabilization variant function uniform selfstabilizing rings minimal complete word unification memoryefficient self stabilizing protocols general networks rewrite systems adaptive programming stringrewriting systems selfstabilizing algorithm maximal matching adaptivity distributed convergence selfstabilization alternative solution problem selfstabilization computing graph rewriting systems priorities introduction distributed algorithms recognition families graphs local computations selfstabilizing leader election algorithm tree graphs automated theoremproving theories simplifiers commutativity associativity selfstabilizing systems spite distributed control uniform deterministic selfstabilizing ringorientation oddlength rings termination linear rewriting systems preliminary version topics termination symbolic model checking rich ssertional languages canonical forms unification triumph tribulation system stabilization exercise proving convergence transfer functions