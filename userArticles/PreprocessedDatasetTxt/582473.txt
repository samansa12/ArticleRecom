roma personal metadata service people available diversity digital storage facilities including laptops cell phone address books handheld devices desktop computers webbased storage services unfortunately number personal data repositories increases management problem ensuring uptodate version document users personal file space available storage facility currently using introduce roma personal metadata service make easier locate current versions personal files ensure availability across different repositories centralized service stores information users files name location timestamp keywords behalf mobilityaware applications separating metadata data respositories makes practical keep metadata store highly available portable device paper describe design requirements architecture current prototype implementation roma b introduction people come rely heavily digital devices work communicate keep personal filesincluding email messages notes presentations address lists financial records news clippings music photographsin variety data repositories since people free switch among multiple heterogeneous de vices squirrel away information device happen using moment well ever broadening array webbased storage services ex ample businessperson wishing record travel expense could type laptop scribble personal digital assistant record various webbased expense tracking services one might expect plethora storage options catalyst personal mobility9 enabling people access use personal files wherever whenever want using whatever device convenient instead made harder mobile people ensure uptodate versions files need available current storage option choice contemporary file management tools poor handling multiple data repositories face intermittent connec tivity easy way user determine whether file device currently using accessible later another device whether various copies file across devices uptodate result user may end many outofdate differentlyupdated copies file scattered different devices previous work attempted handle multiple data repositories application level file system level application level efforts focused using existing system services peertopeer synchronization unfortunately tools use highlevel file metadata provided system15 files name date last modification unreliable infer relationships file copies information intended use example user changes name one copy file relationship copies may broken file synchronization tools14 employ applicationspecific metadata synchronize files useful set applications explicitly support distributed file systems coda7 provide access multiple data repositories emulating existing file system semantics redirecting local file system calls remote repository local cache since operate file system level rather application level reliably track modifications made disconnected network transparently store log apply another copy upon reconnection synchronization across multiple end devices performed indirectly logically centralized repository stores master copy users files unfortunately often case two portable devices better connectivity centralized data repository located stationary network server fast cheap widearea network connectivity becomes widespread approach remain impractical keeping repository portable device hand feasible tiny lowpower device becomes capable storing serving potentially huge amounts data fast local network ideal solution would offer flexibility peerto peer synchronization tools along reliability centralized file systems users free copy files device ensure available later personal financial records home pc digital audio files car phone numbers cell phonewithout remember copies reside devices copy modified system roma provides available centralized repository metadata information single users files metadata format includes sufficient information enable tracking file across multiple file stores name timestamp uri data identifier users metadata repository may reside device user carries along metadata records typically compact enough stored highly portable device thus ensuring metadata available users local devices even widearea network connectivity intermittent maintain compatibility existing applications synchronization agents periodically scan data stores changes made legacy applications propagate metadata repository related problem managing versions files across data repositories problem locating files across different repositories file management tools offer hierarchical naming facility organizing large collections files users must invent unique memorable names files find future must arrange files hierarchies related files grouped together come descriptive name spot onerous task given name often means file later found11 arranging files hierarchical folders cumbersome enough many users even bother instead end single documents folder listing hundreds cryptically named uncategorized files problem compounded files need organized across multiple repositories roma metadata include fullyextensible attributes used platform supporting methods organizing locating files current prototype take advantage attributes several projects explored use attributebased naming locate files either single multiple repositories2 4 rest paper describes roma detail begin outlining requirements motivating design subsequent sections detail architecture current prototype implementation roma well key issues became apparent designing system sections followed survey related work discussion possible future directions work 2 motivation design requirements motivate work consider problems faced jane mobile technosavvy manager abc widget com pany uses several computing devices regular ba sis uses pc work another home editing documents managing finances palmtop organizer storing calendar laptop working road cell phone keeping touch addition keeps copy calendar web site always available coworkers frequently downloads latest stock prices personal finance software dashing door business trip new york jane wants make sure everything need productive road odds forget something lot remember promised client id bring along specifications document blue fuzzy widgetsi think called bfwidgetspecdoc specblufuzwiddoc jane could keyword search documents regardless applications used create devices would remember file called directory contains device stored also need bring latest blue fuzzy widget price list probably somewhere divisions web site group file server even though file server web site completely outside con trol jane would like use search tools uses locate documents storage devices make changes presentation working yesterday leave latest copy pc work one home jane copies outdated version laptop may cause write conflict difficult resolve gets back wants grab presentation without check pcs figure version recent one want work expense report plane ill need bring along financial files like people jane time patience arrange documents neatly labeled directories hard find groups related files really needs likely pore directory containing dozens hundreds files guess ones might something travel expenses summarize issues illustrated example dependence filenames locating files lack integration search tools web documents search tools local devices lack support managing multiple copies file across different devices dependence directories grouping files together issues lead us set architectural requirements roma solution able 1 make information users personal files always available applications user 2 associate file file copy set standard attributes including version numbers timestamps help synchronize file replicas avoid many write conflicts 3 allow attribute set extended applications users include attributes keywords enable searching categories allow browsing related files digests thumbnails enable previewing file content parent directories support traditional hierarchical naming desired information used develop intuitive methods organizing locating files 4 track files stored data repositories outside users control user may consider certain file part personal file space even directly create maintain data example even though users bank account balances available web site controlled maintained bank able organize search track changes data like file personal space 5 track files stored disconnected repositories offline storage media metadata valuable even data describe unavailable example user may working disconnected laptop resides copy document wants edit version information lets figure whether copy latest find recent copy upon reconnection alternatively laptop connected slow network use metadata often smaller size associated file find large piece data needs pulled network metadata server agent data store roma application web server browser figure 1 roma architecture applications connected metadata server possibly connected number data stores agents track changes thirdparty data stores web server di agram make appropriate updates metadata server 3 architecture core roma architecture illustrated figure 1 metadata server centralized potentially portable service stores information users personal files files stored autonomous data repositories traditional file systems web servers device storage capability roma aware applications query metadata server file infor mation send updates server information changes applications obtain file data directly data repositories agents monitor data stores changes made romaunaware applications update file information metadata server appropriate roma supports decentralized replication model repositories store firstclass file replicasthat copies file manipulated user ap plications increase availability performance user copy file local storage another device application users behalf roma helps applications maintain connection logically related copies instances file assigning unique file identifier uid common instances file identifier read modified applications normally exposed user file copied contents attributes blue fuzzy widget http projectsbluestuffmbfw13ps blue author jane mobile figure 2 typical metadata record xml instance diverge thus roma keeps one metadata record file instance metadata record tuple composed uid one data locations version number optional domainspecific attributes figure 2 shows typical metadata record data location specifies location file instance universal resource files residing common types data repositories identified using existing uri schemes http ftp networkaccessible servers file local file sys tems naming removable storage media cdrom zip disk important present humanunderstandable name user possibly separate medias native unique identifier floppy serial num ber version number simple counter whenever change made file instance version number incremented romaaware applications supplement metadata records set optional attributes stored namevalue pairs including generic attributes size file type domainspecific attributes like categories thumbnails outlines song titles optional attributes enable application user interfaces support new modes interaction users file space querybased interfaces browsers autonomous agents automatically scan files users space add attributes metadata server based files contents section 6 briefly describes presto system developed placeless documents group xerox parc allows users organize documents terms userdefined attributes user interaction mechanisms developed presto would mesh well cen tralized personal metadata repository provided roma 31 metadata server metadata server logically centralized entity keeps metadata information copies users data keeping metadata information centralized separate data stores many advantages centralization helps avoid write conflicts since single entity knowledge versions data existence potential conflicts prevented happen user starts editing outof date instance file rather caught later files synchronized centralization allows easier searching users metadata applications search single entity completeness search dependent reachability data stores contrast metadata distributed across many data stores search would performed data store acceptable highly available data repositories connected via highbandwidth network cumbersome data stores devices need powered plugged dug shoebox made available separation metadata data store allows easier integration autonomous data stores including legacy thirdparty data stores user limited control storing metadata server users control rather data stores data eliminates need data stores romacompliant greatly eases deployability roma separation also provides ability impose personalized namespace thirdparty shared data user organize data manner independent organization data thirdparty data store separation enables applications knowledge data cannot access either data store offline speaks foreign pro tocol essence applications know dont know main challenge designing centralized metadata server ensuring always available despite intermittent network connectivity section 52 describes one solution problem host metadata server portable device since metadata tend significantly smaller data describe feasible users take metadata server along disconnect network 32 data stores data store information repository whose contents somehow identified retrieved appli cation romacompatible data stores include traditional file web servers also laptops personal digital assistants pdas cell phones wristwatchesdevices storage cannot left running networkaccessible times due power constraints network costs security concernsas well offline storage media like compact discs magnetic tapes information data store dynamically generated example current weather conditions bank account balances architecture supports data stores users control heterogeneous protocols local file systems http ftp etc priori restrictions protocols supported data store data stores naming hierarchy schemes independent users personal namespace data stores keeping goal support legacy thirdparty data stores data stores romaaware need direct communication data stores metadata server feature key increasing deployability roma 33 applications roma applications programs used people view search modify personal data include traditional progams text editors well handheldbased personal information managers pims webbased applications specialpurpose internet appli ances applications colocated data sources example applications running desktop computer colocated computers local file system romaaware applications two primary responsibil ities first take advantage metadata information already repository either explicitly presenting useful metadata user automatically using metadata make decisions example application automatically choose access nearest latest copy file applications second responsibility inform metadata server changes made data affect metadata least means informing metadata server change made synchronization purposes also include updating domainspecific metadata investigating often updates need sent metadata server balance correctness performance concerns applications connected metadata server use necessarily wellconnected data stores may connected weakly example application might speak protocol data store thus might effectively disconnected also data store may disconnected network 34 synchronization agents roma synchronization agents software programs run behalf user without requiring users atten tion agents many tasks including providing background synchronization behalf user hoarding files various devices preparation disconnected operation making timely backups information across data stores tracking thirdparty updates autonomous data stores data shared users agents run anywhere users personal computers cooperating infrastructure limitation agents execution location agent must able access relevant data stores metadata server note use portable metadata server precludes agents running metadata server disconnected rest network section 52 describes alternative approach 35 examples illustrate roma supports user working files replicated across several storage devices let us revisit jane mobile consider romaaware application response janes actions action copying file actually two different results depending intent application provide way distinguish two makes file instance available different repository preparation disconnected operation example application contacts metadata server creates new metadata record file identifier copies attributes sets data location point new copy file copies file create new logically distinct file based original application contacts metadata server creates new metadata record new file identifier copies attributes sets data location point new copy file actions jane may take opens file updating application contacts metadata server checks version number instance another instance higher version number application warns jane modify old version asks wants access latest version synchronize old one possible saves modified file application contacts server increments version number stance updates attributes files size described section 51 write conflict may detected point version number another instance already incremented brings file instance date synchronizing newest instance application contacts server finds metadata record highest version number file copies attributes except data location current instance 36 limitations architecture meets requirements extent 1 metadata store available users applications thirdparty synchronization agents 2 applications take advantage metadata store aid user synchronizing locating files issues discussed sections 52 53 respectively 4 implementation section describe current status prototype roma implementation prototype still early stages yet support synchronization agents 41 metadata server implemented prototype metadata server supports updates simple queries including queries optional attributes written java service running ninja5 toolkit developing highly available network services metadata stored xml format use xset high performance lightweight xml database query processing persistence17 also implemented proofofconcept portable metadata server though metadata server requires full java environment operate implemented simple mechanism migrate metadata repository otherwise disconnected computers using pda transfer medium user finishes working one com puter metadata repository transferred onto pda next time begins using computer metadata repository retrieved pda way though metadata server traveling users metadata always accessible regardless connectivity users computer rest world 42 data stores currently data stores support limited addressable uris applications currently access data stores using http ftp well files accessible via standard file system interface local file systems nfs12 afs6 43 applications implemented three romaaware applications applications allow users view manipulate metadata data variety devices first webbased metadata browser provides hierarchical browsing users personal data browser displays names data files version information deduced mime type file addition file accessible browser present link file also written proxy enable web clip ping arbitrary web content users personal file space displayed figure 3 second application set commandline tools written romaaware ls locate commands query metadata server get command retrieve latest version file remote data stores im port utility create metadata entries files local data store also implemented proofofconcept pda ap plication built using waba vm rmilite16 1 pda application query view contents metadata server currently pda application access actual contents file figure 3 screenshot webclipper proxy user browses web proxy adds links fly allowing user browse metadata server add pages personal file space applications added metadata attribute describe data format files available commandline tools use unix magic command determine data format web clipper determines data format based mime type file 5 design issues future work section describe issues design decisions encountered far work roma along work remains us 51 personal one important design issue roma scope types data supports several reasons behind choice support personal files rather tackle collaboration among different users well attempt simplify system administration handling distribution application binaries packages first restricting personal files gives us option migrating metadata server personal portable device user carries everywhere increase availability option described detail next section second avoids potential source write conflicts due concurrent modifications different users separate instances file conflicts often difficult resolve without discussion two users single user conflicts still result modifications third parties working behalf email transfer agent appending new message users inbox user deletes old one however conflicts often resolved automatically using knowledge application fact email file consists sequence independent messages single user may also create conflicts concurrently executing applications access document avoiding behavior usually within control user resulting conflicts require communication multiple users resolution investigating use version vectors store complete flexible versioning information10 third lets us exploit fact users much better predicting future needs personal files kinds files3 fourth lets us support categories annotations metadata meaningful single person rather group finally believe trend toward specialized applications tailored managing types files groupware systems like concurrent versioning system cvs clearcase lotus notes microsoft outlook impose necessary structure order access shared data multiple writers email often sufficient informal collaboration within small group tools like redhat package manager rpm windows update wellsuited distributing systemoriented data application packages operating system components code libraries tools simplify system administration grouping related files packages enforcing dependencies automatically notifying user bug fixes new versions software web become best choice distributing shared data many readers since applications handle system data collaborative projects shared readmostly data believe remaining important category data personal data thus focus handling category data roma 52 ensuring availability metadata since overarching goal ensure information users files always available user need make system robust face intermittent weak network connectivitythe situations underscore need metadata repository first place approach allow user keep metadata server close physical proximity preferably highly portable device always carry like keychain watch necklace wireless network technologies like bluetooth soon make personalarea networks ality hard imagine server embedded cell phone pda higher availability better performance remote server many situations main difficulty storing metadata portable server making available thirdparty agents act behalf user modify data users personal file space network partitioned copy metadata user agent read modify metadata words need ensure availability third parties well one solution cache metadata multiple locations main copy currently resides users pda another copy stationary networkconnected server provide access third parties naturally raises issues synchronizing copies handling update conflicts metadata replicas however hypothesis updates made metadata third parties rarely conflict user updates example banks web server updates file containing users account balances user rarely updates file testing hypothesis part future work evaluating roma 53 making applications romaaware making applications romaaware biggest challenge realizing romas benefits synchronization file organization across multiple data stores gain benefit application user interfaces file putoutput routines must adapted use update information metadata store several options extending existing applications use roma incorporating roma support new applications first option use applicationspecific extension mechanisms add romaawareness legacy applications example implemented romaaware proxy integrate existing web browsers architecture roma addin modules could written applications microsoft outlook extension apis opensource applications modified directly second option layer romaaware software beneath legacy application possibilities include modifying c library used applications access files writing romaaware file system option nothing adapt applications user interface provide functionality enhancements intelligent retrieval updated copies files third option use agents monitor data edited legacy applications way monitor data repositories users control option neither presents metadata user enhances functionality application however ensure metadata server kept uptodate changes made legacy applications beyond choosing appropriate method extend application use roma bulk programming effort modifying applications user interface communicating metadata store current prototype provides simple generic java rmi interface metadata store applications pass xmlformatted objects platform domainspecific roma libraries could offer much richer support application de velopers including user interface file io compo nents help minimize programming effort ex ample roma library windows could offer dropin replacement standard file explorer components adapting typical productivity application would involve making library api calls rather developing entirely new user interface 54 addressing personal data current roma implementation uses uri identify file instance corresponding particular metadata record unfortunately imperfect solution since relationship uris file instances often onetoone fact rarely many systems file instance identified one uri due aliases links underlying file system multiple network servers providing access files example file identified ftpgunpowderpubpaperps also identified ftpgunpowderpubpaperps alias current directory httpgunpowderpubftppubpaperps since public ftp directory also exported http server problem stems fact uris defined simply string refers resource unique resource identifier currently rely applications agents detect handle cases multiple uris refer file application fails could cause user delete copy file led believe backup copy still ex isted future roma must address problem systematically 6 related work helping users access data distributed storage repositories active area research primary characteristic distinguishing work distributed file systems nfs12 afs6 coda7 emphasis unifying wide variety existing data repositories help users manage personal files like roma coda distributed file system seeks allow users remain productive periods weak network connectivity roma makes metadata available times coda caches file data hoard according user preferences anticipation periods disconnection weak connectivity however unlike roma users must store files centralized coda file servers benefit fully coda impractical people use variety devices may better connectivity exists centralized server even users prefer maintain one data repository may obliged instance company permit mount company file systems home computers note however may appropriate use coda synchronization centralized metadata repository architecture oceanstore8 similar coda place logically single trusted server global data utility comprised set untrusted servers whose owners earn fee offering persistent storage users weakly connected client devices read write closest available server infrastructure takes care replicating migrating data resolving conflicts coda users benefit fully oceanstore data repositoriesfrom server work toaster oven homeare part oceanstore system bayou system10 supports decentralized model users store modify files many repositories communicate peertopeer propagate changes however users cannot easily integrate data bayouunaware data stores like thirdparty web services personal file space presto system2 focuses enabling users organize files effectively presto designers built solution similar roma associates users documents set properties used ganize search retrieve files work specifically address tracking synchronizing multiple copies documents across storage repositories ensure properties available even associated documents inaccessible however applications developed could adapted use roma metadata server property storage presto semantic file system4 enable legacy applications access attributebased storage repositories mapping database queries onto hierarchical namespace presto achieves using virtual nfs server semantic file system integrates functionality file system layer either mechanism could used roma provide access metadata server romaunaware applications elephant file system13 employs sophisticated technique tracking files across changes name changes inode number 7 conclusions described system helps fulfill promise personal mobility allowing people switch among multiple heterogeneous devices access personal files without dealing nittygritty file management details tracking file versions across devices goal achieved use centralized metadata repository contains information users files whether stored devices user manages remote servers administered third party passive storage media like compact discs metadata include version information keywords categories digests thumbnails completely extensible implemented prototype metadata repository designing service integrated easily appli cations service run highly available server migrated handheld device users metadata always accessible 8 acknowledgements authors thank doug terry helpful advice throughout project also thank andy huang kevin lai petros maniatis mema roussopoulos doug terry detailed review comments paper work supported generous gift ntt mobile communications network inc ntt docomo r jinirmitspace small devices uniform document interactions using document properties translucent cache management mobile computing multispace evolutionary platform infrastructural services synchronization caching issues andrew file system discon nected operation coda file system oceanstore architecture globalscale persistent storage mobile people architecture flexible update propagation weakly consistent replica tion humane interface design implementation sun network file system deciding forget elephant file system extending desktop pilot rsync al gorithm wabasoft product overview xset lightweight database internet applica tions tr semantic file systems measurements distributed file system disconnected operation coda file system flexible update propagation weakly consistent replication file synchronizer deciding forget elephant file system mobile people architecture oceanstore integrating information appliances interactive workspace using dynamic mediation integrate cots entities ubiquitous computing environment translucent cache management mobile computing ctr alexandros karypidis spyros lalis automated context aggregation file annotation panbased computing personal ubiquitous computing v11 n1 p3344 october 2006