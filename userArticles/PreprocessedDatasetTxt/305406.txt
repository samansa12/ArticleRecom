threads yield continuations traditional continuation represents rest computation given point computation subcontinuation represents rest subcomputation given point subcomputation subcontinuations expressive traditional continuations shown useful controlling treestructured concurrency yet previously implemented uniprocessors article describes concurrent implementation oneshot subcontinuations like oneshot continuations oneshot subcontinuations firstclass may invoked restriction obeyed nearly programs use continuations techniques used implement oneshot subcontinuations may applied directly oneshot continuation mechanisms may generalized support multishot continuations well novel feature implementation continuations implemented terms threads implementation model rely upon special language features compilation techniques model applicable language language implementation supports small set thread primitives b introduction continuations proven useful implementing variety control structures nonlocal exits exceptions nonblind backtracking 28 material based work supported part national science foundation grant numbers cda9312614 cda 9303189 nondeterministic computations 8 14 coroutines 12 multitasking 7 15 30 source level subcontinuations expressive traditional continuations may used implement similar control structures presence treestructured concurrency 16 17 article describes threadbased implementation oneshot subcontinua tions incorporated multithreaded implementation chez scheme sgi power challenge multiprocessor traditional continuation represents rest computation given point computation subcontinuation represents rest subcomputation given point subcomputation base subcomputation specified explicitly subcontinuation subcomputation rooted base contrast traditional continuation rooted implicitly base entire computation subcontinua tions may used implement traditional continuations introducing explicit root within toplevel evaluation function oneshot subcon tinuations like oneshot continuations 3 23 firstclass may invoked restriction obeyed nearly programs use continuations 3 hieb et al 17 describe subcontinuations detail give operational semantics small language incorporates subcontinuations describe sequential implementation subcontinuations also describe briefly subcontinuations implemented concurrent setting although concurrent implementation realized implementation requires control state concurrent computation represented tree stack segments control state sequential computation represented stack stack segments support traditional continuations 18 implementation oneshot subcontinuations described article uses threads represent stack segment tree stack segments required hiebs implementation model using threads represent stack segments several advantages incorporating support subcontinu ations lowest levels language implementation particular simplifies implementation threads continuations provides clear operational semantics interaction also provides first time viable model adding continuations existing threaded implementations languages c java remainder article organized follows section 2 discusses various continuation mechanisms relate threads section 3 describes subcontinuations detail gives examples use section 4 describes concurrent implementation oneshot sub continuations section identifies small set thread primitives describes implementation subcontinuations terms primi threads yield continuations 3 tives section 4 also discusses implementation might generalized support multishot subcontinuations section 5 presents conclusions 2 background continuation capture operation using traditional continuations creates object encapsulates rest computation invoking traditional continuation discards aborts entire current continuation reinstates previously captured continuation sometimes however finer control required ie part continuation needs captured part current continuation needs discarded continuation reinstated felleisen 9 10 11 introduced prompt operator identify base continuation f capture continuation last prompt continuation captured using f functional com posable invoking abort rather returns current continuation shift reset 6 based modified cps trans formation similar differing primarily captured continuations include prompt subcontinuations generalize felleisens single prompt multiple nested prompts allow continuations used control treestructured concurrency 17 related work sitaram felleisen 27 show nested prompts may obtained single prompts sequential setting splitter 26 extends notion continuation manner similar subcon tinuations sequential setting separates continuation capture mechanism continuation abort mechanism gunter et al 13 describe support multiple prompts may added statically typed languages uniprocessor traditional functional continuations sufficient implement multitasked threads source level 7 15 30 thus many systems support continuations provide primitive support threads continuations also used implement threads multiprocessors mp 29 lowlevel interface designed provide portable multiprocessing platform provides abstraction physical processor operations manage state spin locks mutual exclu sion various concurrency abstractions including threads implemented using firstclass continuations top interface systems provide native support threads continuations example sting 20 21 dialect scheme provides general lowlevel support concurrency cooper et al 5 describe machbased multiprocessor threads implementation standard ml package based modula2 threads package 2 includes mechanisms mutual exclusion synchronization thread state multischeme supports futures continuations 25 systems support continuations form threads continuation operations local threads cannot used control abort reinstate groups cooperating threads katz weise 22 also address relationship continuations futures rather providing mechanism controlling concurrency enforce sequential semantics makes concurrency transparent programmer oneshot continuations 3 23 differ ordinary multishot continuations oneshot continuation may invoked oneshot continuations implemented efficiently multishot continuations stackbased implementations stack segments representing oneshot continuation need copied later use continuation reinstated applications use continuations use oneshot manner oneshot continuations cannot however used implement nondeterminism prolog 4 continuation invoked multiple times yield additional values 8 14 application found requires multishot continuations rather oneshot continuations 3 3 subcontinuations subcontinuation 17 represents rest subcomputation given point subcomputation presence treeshaped concurrency subcontinuations provide complete control process tree allowing arbitrary nonlocal exits reinstatement captured subcomputations may involve multiple threads procedure spawn marks root subcomputation creates controller used capture abort current subcontin uation including root spawn takes procedure p one argument creates controller passes p controller invoked dynamic extent procedures invocation controller never invoked value call spawn value returned p thus expression spawn lambda c cons 1 2 returns 1 2 controller applied procedure q subcontinuation point controller invocation back root controller cap tured q applied captured subcontinuation continuation controller invocation subcontinuation never invoked effect merely abort current subcomputation subcontinuation nonaborting therefore composable subcontinuation captured includes root controller root reinstated subcontinuation invocation allowing controller invoked threads yield continuations 5 following simple example cons 3 spawn lambda c cons 2 cons call spawn creates controller c rooted within cons 3 invoking controller within cons 2 captures aborts continuation without disturbing cons 3 captured continuation includes cons 2 invoking captured continuation reinstates cons 2 within cons 1 value entire expression 3 1 2 subcontinuation captured controller invocation invoked multiple times following example controller invoked base case factorial computation subcontinuation fact5 takes argument multiplies 120 5 entire expression returns 14400 120 120 1 define fact lambda n c n 1 let fact5 spawn lambda c fact 5 c presence concurrency subcontinuation captured aborted controller invocation may encapsulate multiple threads control invoking subcontinuation encapsulates multiple threads control causes concurrent subcomputation resume parallelsearch procedure concurrently traverses given tree looking nodes satisfy specified predicate encountering node invokes controller suspend search returns node along continuation used resume search use pcall 1 section 4 illustrate treestructured concurrency although mechanism introducing treestructured concurrency would suffice including much primitive fork operator pcall evaluates subexpressions parallel applies procedural value first subexpression values remaining subexpressions none subexpressions involve side effects pcall expression behaves like normal procedure call traditional continuations implemented terms subcontinua 6 kumar bruggeman dybvig define parallelsearch lambda tree predicate spawn lambda c letrec search lambda tree empty tree f pcall lambda predicate node tree cons node tree k search left tree search right tree search tree figure 1 node satisfies predicate parallelsearch invokes controller c suspend search returns pair containing node continuation may used search additional nodes tions introducing explicit root via spawn toplevel evaluation function 17 traditional continuation operator callcc defined terms controller rooted toplevel evaluation function although possible implement spawn callcc sequential set ting less straightforward involves explicit simulation stack stack segments required direct sequential implementation subcontinuations oneshot subcontinuations similar oneshot continuations captured oneshot subcontinuation may invoked oneshot continuations stack segments representing oneshot subcontinuation need copied subcontinuation reinstated particular shown section 42 threads used represent stack segments required implement oneshot subcontinuations without concern restarting thread point multiple times 4 implementation section describes implementation subcontinuations terms threads organized follows section 41 describes small set threads yield continuations 7 threadfork thunk forks thread invoke thunk threadself returns current thread mutexmake returns new mutex mutexacquire mutex acquires mutex mutexrelease mutex thread releases mutex thread specified conditionmake mutex returns new condition associated mutex conditionsignal condition signals condition conditionwait condition thread releases mutex associated condition thread specified waits condition signaled point mutex reacquired threadblock thread blocks thread threadunblock thread unblocks thread figure 2 thread system features used implement oneshot subcontinu ations thread primitives sufficient implementing subcontinuations section 42 presents concurrent threadbased implementation oneshot subcontinuations section 43 describes multishot subcontinuations might implemented using threads discusses certain problems restrictions 41 thread primitives oneshot subcontinuations implemented language thread system powerful enough support set threadsystem features shown figure 2 addition ability dynamically fork threads set features includes mutexes mutual exclusion condition variables 19 24 synchronization also includes primitives allow thread block unblock threads features supported least indirectly modern thread systems including sgi irix thread system upon implementation based thread created dynamically using threadfork invokes thunk argument separate thread threads executed effects mutexes condition variables provide structured way accessing shared resources order threads waiting mutex succeed acquiring systems unspecified implementation subcontinuations however convenient allow thread releasing mutex specify next thread succeed acquiring mutex thus primitives release mutex mutexrelease conditionwait take optional second argument thread succeed acquiring mutex next absence direct thread system support feature equivalent functionality implemented associating next thread field mutex thread successfully acquires mutex nonempty nextthread field thread must check see indeed next thread expected hold mutex designated thread must release mutex wait eventually specified thread acquire mutex primitives threadblock threadunblock required control concurrent computations asynchronous one thread block unblock thread point threads execution operations however must synchronous return specified thread actually blocked unblocked threads interface described simple enough implemented top existing thread packages mutexes condition variables supported systems 1 several systems sgi irix linux solaris posix etc extend unix signal mechanism support threads signal mechanism used implement thread blocking unblocking procedures systems support functionality directly 2 42 subcontinuations threads described section 3 pcall provides way create treeshaped con currency spawn provides ability control treeshaped concur rency example treeshaped concurrent computation shown figure 3 although pcall essential subcontinuation mecha nism implementation described along implementation spawn illustrate spawn interacts pcall implementation pcall representative implementation operator used introduce treestructured concurrency systems provide semaphores instead mutexes condition variables implemented terms semaphores requires use user signal eg sigusr1 rather sigstop since handler needed synchronize blocker blocking threads yield continuations 9 subcontinuation controller pcall base blocked executing b c figure 3 process tree containing subcontinuation controller pcall base nodes subcontinuation capture invoking controller b subcontinuation reinstatement invoking captured subcontinuation c pcall expression evaluates subexpressions concurrently applies value first expression values remaining expressions leaf pcall executed becomes branch point separate branch subexpressions thus execution takes place leaves tree subexpressions evaluated branch point becomes leaf procedure applied arguments call spawn causes subcontinuation controller inserted current execution point figure 3a control returns normally point controller removed tree execution resumed controller say b invoked one leaves say subtree b root subtree pruned packaged sub continuation k figure 3b subsequent invocation subcontinuation leaf say c causes subcontinuation grafted onto process tree leaf figure 3c makeindexlist n returns list 0 insertpcallnode threads creates inserts pcall node current leaf insertcontrollernode thread creates inserts controller node current leaf deletechildnode deletes child current thread deletepcalledge node edge deletes edge given pcall node prunesubtree node prunes subtree rooted given controller node graftsubtree node grafts subtree rooted given controller node onto tree current leaf controllerroot node returns thread given controller node nodeleaves node returns list leaves subtree rooted given controller node figure 4 procedures used pcall spawn maintain subcontin uation data structures subcontinuations implemented maintaining tree stack segments stack segment simply stack activation records key observation supporting threadbased implementation continuations thread essence stack activation records thus threads used represent stack segments subcontinuation capture subtree threads packaged subcontinuation blocking currently executing threads subcomputation leaves subtree subcontinuation reinstated subtree threads grafted back onto process tree computation resumed unblocking threads leaves unblocked threads may overwrite activation records stacks subcontinuations represented manner invoked ie oneshot subcontinuations implementations pcall spawn share common set procedures manipulate data structures make process tree procedures listed figure 4 code required implement procedures straightforward presented threads yield continuations 11 operations process tree must atomic implementation uses single global mutex serialize operations time sufficient thread performing operation acquire mutex perform operation release operations however require code executed two different threads ensure atomicity entire operation thread initiating operation acquires mutex performs half operation uses optional next thread parameter mutexrelease procedure pass mutex second thread completes operation releasing mutex 421 implementation pcall code pcall shown figure 5 along help procedure pcall pcall syntactic extension syntactic extension simply makes thunks pcall form subexpressions effectively delaying evaluation passes pcall pcall invoked first obtains mutex gain exclusive access process tree forks thread arguments updates tree releases mutex waits condition done signaled arguments computed child thread concurrently computes one argument result computed child communicated parent thread via specified slot vector result variable counter decremented time child thread terminates keep track number arguments yet computed last child finishes counter goes zero child wakes parent thread signaling condition done parent trims tree releases mutex applies resulting procedure resulting arguments 422 implementation spawn spawn figure 6 invoked obtains processtree mutex creates subcontinuation controller forks child thread adds node tree mark controller releases mutex waits condition done child thread applies procedure f passed spawn controller control return call f either explicit invocation controller ordinary return f flag controllerinvoked used distinguish two cases simpler case controller never invoked call f returns value case child thread enters critical section stores value result make visible parent thread wakes parent signaling condition done child thread terminates parent thread resumes execution result value returned spawn definesyntax pcall syntaxrules pcall length proc lambda proc lambda define mutex mutexmake define pcall lambda n args let result makevector n done conditionmake mutex parent threadself counter n mutexacquire mutex let threadlist map lambda fn index threadfork lambda vectorset result index fn mutexacquire mutex deletepcalledge pcallnode index set counter gamma counter 1 counter begin conditionsignal done mutexrelease mutex parent mutexrelease mutex args makeindexlist n set pcallnode insertpcallnode threadlist conditionwait done mutexrelease mutex let lst vectorlist result apply car lst cdr lst figure 5 implementation pcall threads yield continuations 13 define spawn lambda f define controllernode define controllerinvoked define controllerinvocationthunk define result define done conditionmake mutex define controllerwait lambda set controllerinvoked f conditionwait done controllerinvoked begin mutexrelease mutex define controller see figure 7 mutexacquire mutex let thread threadfork lambda let value f controller mutexacquire mutex let parent controllerroot controllernode set result value conditionsignal done mutexrelease mutex parent set controllernode insertcontrollernode thread figure implementation spawn 14 kumar bruggeman dybvig define controller lambda g mutexacquire mutex let val continue conditionmake mutex rootthread controllerroot controllernode set controllerinvocationthunk lambda prunesubtree controllernode let leaves nodeleaves controllernode foreach threadblock leaves mutexrelease mutex let k lambda v mutexacquire mutex graftsubtree controllernode foreach threadunblock leaves set val v conditionsignal continue set controllerinvoked conditionsignal done conditionwait continue rootthread mutexrelease mutex figure 7 implementation controller complicated case controller figure 7 actually invoked one leaves happens subcontinuation represents subtree rooted controller figure 3b must captured aborted mutex acquired ensure thread starts continuation operation process tree thread invokes controller determines thread rootthread waiting subcontinuation controller packages work done thread thunk controllerinvocationthunk updates variable controllerinvoked inform controller invoked wakes controller signaling condition done waits condition continue handing mutex rootthread rootthread starts executing controllerinvoked flag indicates threads yield continuations 15 controller called explicitly invokes controllerinvocation thunk capture subcontinuation causes tree rooted controller pruned threads executing leaves blocked leaving critical section creates subcontinuation k applies controller argument g subcontinuation later subcontinuation k invoked thread executing leaf thread obtains processtree mutex grafts process subtree captured part subcontinuation onto current leaf unblocks threads leaves grafted subtree figure 3c stores value v returned point controller invoked val signals condition continue thread invoked controller waits condition done signaled thread returns value stored val point controller invoked avoid deadlock thread never blocked holding mutex maintain invariant blocking thread always holds mutex synchronous blocking operation succeeded 43 multishot subcontinuations implementation described preceding section extended support multishot subcontinuations requires thread cloning operator threaddup allows threads captured subcontinuation cloned clones used restart subcomputation captured subcontinuation original ones kept around subsequent invocations subcontinuation three complications arise method extending implementation support multishot subcontinuation first single controller pcall node exist multiple locations process tree fore data structures used communicate parent threads children must moved procedures currently encapsulated processtree data structure must cloned whenever corresponding node tree cloned start operation correct node tree must located corresponding data structures used second condition variables also used pernode basis condition variable one thread waiting thread awakened signaling condition simple replication condition variables however order retain property one thread wait condition variable time work threads waiting condition variables cloned therefore cannot replaced one solution problem accept fact multiple threads might waiting condition variable wake using conditionbroadcast primitive thread awakened would check see intended target wakeup message must wait condition variable third compiler support required allow stack encapsulated within thread copied particular mutable variables data structures must stored outside stack accessed original stack via extra level indirection contrast compiler support required implement oneshot subcontinuations 5 conclusions long known continuations used implement threads article shown threads used implement continuations provided first detailed implementation model subcontinuations concurrent setting furthered understanding relationship continuations threads provided straightforward operational semantics interaction threads subcontinuations implemented complete thread package supports primitives described section 41 part chez scheme sgi power challenge multiprocessor used package implement oneshot sub continuations available via httpwwwcsprincetoneduskumarsubk yet extended implementation support multishot subcontinuations although subcontinuation mechanism described uses higherorder procedures essential mechanism implementa tion implementation oneshot subcontinuations rely upon higherorder procedures special compilation techniques model applicable language language implementation supports small set thread primitives described section 41 thus model demonstrates first time straightforward way add support firstclass continuations threaded versions languages c java without changes language compiler languages without automatic storage management c programmer must responsible deallocating unused subcontinuations data structures used threads represent subcon tinuations nothing new programmers languages already face similar problem threads killed computations aborted via longjmp nonlocal exits techniques used implement oneshot subcontinuations threads yield continuations 17 adapted support oneshot variants continuation mechanisms described section 2 including callcc multishot variants mechanisms supported well subject complications discussed section 43 absence concurrency asynchronous thread operators would needed since one active thread would blocked waiting condition variables acknowledgements comments oscar waddell anonymous reviewers led substantial improvements presentation material r language concurrent symbolic computation synchronization primitives multiprocessor formal specifica tion representing control presence oneshot continuations adding threads standard ml representing control study cps transformation engines continuations transliterating prolog scheme theory practice firstclass prompts beyond continuations obtaining coroutines continuations continuations concurrency representing control presence firstclass continuations operating system structuring concept customizable substrate concurrent languages foundation efficient multithreaded scheme system continuing future interaction futures firstclass continuations indefinite onetime contin uation dynamic extent control operator partial continuations control delimiters hierarchies interpreter extended lambda calculus portable multiprocessor interface standard ml new jersey tr ctr steven e ganz daniel p friedman mitchell wand trampolined style acm sigplan notices v34 n9 p1827 sept 1999