supporting scenariobased requirements engineering abstractscenarios advocated means improving requirements engineering yet methods tools exist support scenariobased paper reports method software assistant tool scenariobased integrates use case approaches objectoriented development method operation tool illustrated financial system case study scenarios used represent paths possible behavior use case investigated elaborate requirements method commences acquisition modeling use case use case compared library abstract models represent different application classes model associated set generic requirements class hence identifying classes use case belongs generic requirements reused scenario paths automatically generated use cases exception types applied normal event sequences suggest possible abnormal events resulting human error generic requirements also attached exceptions suggest possible ways dealing human error types system failure scenarios validated rulebased frames detect problematic event patterns tool suggests appropriate generic requirements deal problems encountered paper concludes review related work discussion prospects scenariobased methods tools b introduction several interpretations scenarios proposed ranging examples behaviour drawn use cases 29 descriptions system usage help understand sociotechnical systems 30 experience based narratives requirements elicitation validation 39 50 scenarios advocated effective means research funded european commission esprit 21903 crews cooperative requirements engineering scenarios longterm research project communicating users stakeholders anchoring requirements analysis real world experience 15 unfortunately scenarios extremely labourintensive capture document 20 44 furthermore concrete recommendations exist scenariobased requirements engineering practised even less tool support available scenarios often describe information instance example level raises question instance level information generalised models specifications used software engineering scenarios may used validate requirements test data collected observable practice operation new system checked 40 alternatively scenarios may seen pathways specification system usage represented animations simulations new system 14 enables validation inspection behaviour future system paper describes method tool support scenario based requirements engineering uses scenarios latter sense industrial practice scenarios used generic situations prompt reuse design patterns 8 48 reuse knowledge requirements engineering could potentially bring considerable benefits developer productivity requirements reuse demonstrated domain specific context 31 however wish extend across domains following earlier work analogies software engineering problems 51 paper organised four sections first previous research reviewed section 3 method software assistant tool scenario based crewssavre scenarios acquisition validation requirements described illustrated financial dealing system case study finally discuss related work future prospects scenario based 2 previous work methods advise use scenarios process requirements analysis validation one exceptions inquiry cycle potts 39 uses scenario scripts identify obstacles problems goaloriented requirements analysis unfortunately inquiry cycle give detailed advice problems may discovered scenarios furthermore leaves open human judgement system requirements determined paper builds concepts inquiry cycle aim providing detailed advice scenarios used requirements validation previous work proposed scenario based requirements analysis method scram recommended combination concept demonstrators scenarios design rationale 50 scram employed scenarios scripts walkthrough method validated design options key points script alternative designs documented design rationale explained users demonstration early prototypes scram proved useful facilitating requirements elaboration early prototype place 48 however gave outline guidance scenariobased analysis scenarios created projections future system usage thereby helping identify requirements raises question many scenarios necessary ensure sufficient requirements capture safety critical systems accurate foresight pressing problem taxonomies events 24 theories human error 37 42 used investigate scenarios future system use previous research 49 extended taxonomic approach safety critical systems generalised applications scenarios adopted object oriented methods 29 21 10 projected visions interaction designed system context scenarios defined paths interaction may occur use case however object oriented methods make explicit reference requirements per se instead requirements implicit within models use cases class hierarchies failure make requirements explicit lead disputes errors validation 17 38 several requirements management tools evolved address need requirements tracability eg doors requisite pro even though tools could integrated systems support object oriented methods eg rational rose syntactic level would inadequate semantic relationships requirements object oriented models needs established one motivation work establish bridge develop sound means integrating oo methods tools discovering requirements dependencies system environment researched jackson 26 pointed domains impose obligations required system jackson proposed generic models called problem frames systemenvironment dependencies events arising human error obligations systems users explicitly analysed modelling relationships dependencies people systems investigated yu mylopoulos 54 chung 7 framework enterprise models facilitates investigation relationships requirements goals agents tasks however scenarios used explicitly approach methods required unlock potential scenario based furthermore relationship investigation based examples models one hand systems requirements imposed environment needs understood clearly one problem scenarios instances ie specific examples behaviour means reusing scenario based knowledge difficult link reusable designs might provided scenarios could generalised linked objectoriented analysis design patterns 18 although authors pattern libraries describe contexts use patterns 8 19 provide guidance extent contexts requirements reuse demonstrated lam et al 30 although scope reuse limited one application domain jet engine control systems many problems share common abstraction 51 raises possibility common abstractions new application domain could discovered early process may possible reuse generic requirements link reusable designs could provide conduit reusing wealth software engineering knowledge resides reusable component libraries well linking requirements objectoriented solution patterns eg 8 19 building bridge requirements engineering reusable designs another motivation research reported paper next turn description method tool support 3 method tool support scenariobased method scenariobased intended integrated object oriented development eg oose 29 hence use cases employed model system functionality behaviour separate requirements specification document maintained make requirements explicit capture diversity different types requirements many located use cases use cases requirements specification developed iteratively analysis progresses define scenario one sequence events one possible pathway use case hence many scenarios may specified one use case scenario represents instance example events could happen scenario may describe normal abnormal behaviour method illustrated figure 1 uses scenarios refine validate system requirements stages method follows 1 elicit document use case stage use cases elicited directly users histories real world system usage created visions future system usage use case model validated correctness respect syntax semantics paper report stage detail 2 analyse generic problems requirements library reusable generic requirements attached models application classes provided browsing tool matches use case input facts acquired designer appropriate generic application classes suggests high level generic requirements attached classes design rationale tradeoffs generic requirements proposed two levels first general routines handling different event patterns secondly requirements associated application classes held repository former provide requirements develop filters validation processes specified event based software engineering methods eg jackson system development 25 latter provide targeted design advice instance transaction handling requirements loanshiring applications 3 generate scenarios step generates scenarios walking possible event sequence use case applying heuristics suggest possible exceptions errors may occur step analysis helps analyst elaborate pathways use case two passes first normal behaviour secondly abnormal behaviour pathway becomes scenario scenario generation supported tool automatically identifies possible pathways use case requests user select probable error pathways 4 validate system requirements using scenarios generation followed toolassisted validation detects event patterns scenarios presents checklists generic requirements appropriate particular normal abnormal event patterns manner requirements refined interactive dialogue software engineer tool outcome set formatted use cases scenarios requirements specifications elaborated reusable requirements although method appears follows linear sequence practice stages interleaved iterative figure 1 method stages scenariobased requirements engineering 31 schema scenario based requirements modelling section describe schema scenario based knowledge shown figure 2 use case collection actions rules govern actions linked together drawn allens temporal semantics 2 calculus albert ii specification language 14 action central concept scenarios use cases use case specifies network actions linked attainment goal describes purpose use case use cases refined lower levels detail complete analysis produces layered collection use cases use cases userdefined properties indicate type activity carried eg decision transaction control etc action sub typed either cognitive eg buyer agrees deal price ahvt yvpvr phr 6hyr brrvp whyvqhvahr brrhr whyvqhr key offer physical eg dealer returns telephone receiver systemdriven eg dealing systems stores information current deal communicative eg buyer requests quote dealer action one start event one end event actions linked 8 types actionlink rules described later detail state transition state object action use case agent contains starts ends results event uses involves scenario sequence goal achieves model primitives models generated structure object composed property 1m ipates figure 2 metaschema modelling use cases scenario based knowledge action involves one agents agent either human eg dealer machine eg dealingsystem composite eg dealingroom unspecified type agents userdefined properties describe knowledge competencies action agent links specified involvement relation subtyped performs starts ends controls responsible action uses nil one many object instances denoted use relation subtyped accesses reads operates action also result state transitions change state objects states aggregations attribute values characterise object given time quantitative qualitative terms structure objects persistent real world objects spatial properties model physical logical units organisation structure objects important components reusable generic domain models called object system models described section 35 also allow use case models extended describe location objects agents activity introduction case study case study based security dealing system major bank london securities dealing systems buy sell bonds giltedged stock clients bank banks dealers also buy sell securities account make profit deals may initiated either client requesting transactions counterparty another bank stockbroker acts buyer requesting quotation dealer offering buy sell securities quotes requested telephone offers posted electronic wire services dealers stockbrokers subscribe case study focus deals initiated counterparty viewpoint dealer main activities use case include agreement dealer buyer deal price number stock entering recording deal information computer system checking deal information entered dealer validate deal case study contains several use cases however space precludes complete description take one use case preparequote example illustrated figure 3 sequence initiated request event counterparty agent dealer responds providing quotation counterparty assesses suitable counterparty agrees quotation deal completed inbound events system deal recorded updated outbound events displays market information recorded deal system actions added model first vision dealing support system work dealer agent linked dealing room structure object describes location work dealer carries prepare quote use case composed several actions involves trade object figure 3 upper level use case illustrated agentinteraction showing tasks agents actions counterparty dealing system dealer head dealer 32 tool support method supported version 21 crewssavre tool developed windowsnt platform using microsoft visual c access thus making compatible loose integration leading commercial requirements management computeraided software engineering software tools supports 6 main functions correspond architecture components shown figure 4 1 incremental specification use cases highlevel system requirements domainuse case modeller supports method stage 1 2 automatic generation scenarios use case scenario generator supports stage 3 manual description use cases scenarios historical data previous system use alternative toolbased automatic scenario generation use casescenario authoring component supports stage 1 4 presentation scenarios supporting userled walkthrough validation system requirements scenario presenter supports stage 4 5 semiautomatic validation incomplete incorrect system requirements using commonly occurring scenario event patterns requirements validator supports stage 4 crewssavre loosely coupled requisitepros requirements database make inferences content type structure requirements another component guides natural language authoring use case specifications currently development component uses libraries sentence case patterns eg 14 parse natural language input semantic networks prior transforming action description crewssavre use case specification space precludes description component paper crewssavre tool permits user develop use cases describe projected historical system usage uses algorithm generate set scenarios use case scenario describes sequence normal abnormal events specified original use case tool uses set validation frames detect event patterns scenarios thereby providing semiautomatic critiquing suggestions requirements implied scenarios domain use case modeller scenario generator scenario presenter requirements validater use case author tool crewssavre tool requisitepro requirements management scenario author tool natural language descriptions use case facts scenario facts generated scenarios generated scenarios scenarios validated requirements user domain expert use case environment modeller validater systemenv models user software engineer figure 4 overview crewssavre tool architecture 33 use case specification user specifies use case using crewssavres domain use case modeller components first domain software engineer specifies actions domain defines agents objects linked actions assigns types eg communicative physical etc action specifies permissible action sequences using actionlink rules initial domain model user choose subset domain actions form normal course use case enables user specify one use case domain hence generate scenarios domain result use case acts container domain information relevant current scenario analysis scenarios used validate different parts domains future system different use cases containing different action descriptions specified consequently domain model enables simple reuse action descriptions across use cases two use cases include action eight types actionlink rule available crewssavre strict sequence part sequence inclusion includes b evstartaevstartb evendaevendb concurrent rules ordering events alternative parallel equal equalstart startswith b evstartaevstartb evendanotevendb equalend event evx represents point time event occurs actions defined evstartaevenda evstartbevendb actions duration start event action must occur end event action link rules types build basic research temporal semantics 2 formal temporal semantics calculus realtime temporal logic called core underpins albert ii specification language 23 current version crewssavre provide allens 2 13 actionlink types rather provides set useful usable semantics based practical reports use case analysis eg 1 29 dealing system domain two actions buyer requests deal dealer dealer retrieves price information dealersystem selection actionlink rule meanwhile indicates general dealer begins retrieve price information buyer begins request deal third action time describing system behaviour dealersystem displays price information dealer linked rule specify strict sequence two actions first action must end second action starts part dealing system domain model shown figure 5 shows subset current domain actions shown figure 5 specification attributes new action b current actionlink rules c agent types parts domain modeller outside scope description one use cases specified domain dealing system use case linked one highlevel requirement statement system action one system requirements use case specification 4 parts first part specifies identifiers actions use case second part specifies actionlink rules linking actions third part contains objectmapping rules needed handle use synonyms action descriptions fourth part specifies exceptiontypes linked use case described section 36 figure 5 domain modeller screen dump 34 checking use case specification validation rules check integrity relationships specified section 31 represented tuple format model component1 relationshiptype model component2 tool checks integrity use case models ensure conform schema addition tool parameterised check use cases variety ways enables user defined validation properties defined schema validation checks carried clusters rules called validationframes composed two parts first situation detects structural pattern ie combination components connected relationship use case second part contains requirements present part model detected situation frames used validating consistency use case models schema detecting potential problems use cases detailed section 35 former case frames detect inconsistencies use case latter case frames detect event patterns scenarios suggest appropriate generic requirements two examples consistency checking frames follows checks agents connected specific relationship type validationframe detects dyadic component relationships situation modelcomponentx relationship component z schema requirements component type component x mandatory component type j component mandatory endvalidationframe example user decides check actions controlled least one agent first tool finds nodes component type agent finds nodes connected agent actions finally whether involvement relationship connects two nodes correct tool configurable input parameters j schema primitives relationship k defined schema tool detects untyped incorrect relationships using structure matching algorithm prepare quotes use case see figure 3 validation check detect dealer controls givequote action ii validates whether two components participating relationship specific properties validationframe detects components relationship correct properties situation modelcomponentx propertyw relationship z component property v schema requirements component type component x mandatory component type j component mandatory component x property w mandatory component property v mandatory endvalidationframe example user wishes validate agents linked use case property property properties vw tested entered dialogue combination may tested case tool searches nodes type agent tests relationships connected agent node relationships connected node type use case tool reads property list use case agent agent authority property use case decision property warning issued user properties sub types lexical search property list frame test dealer authority use case evaluate choice decision property system configurable combinations type checked set nodes arcs conform schema described figure 2 motivation create requirements advice evolves increasing knowledge domain user impose constraints beyond specified schema use tool validate use case conforms constraints 35 using application classes identify generic requirements stage takes first cut use cases maps corresponding abstract application classes essentially associates use cases describing new system related systems share abstraction library application classes termed object system models osms developed validated previous work computational models analogical structure matching 34 object system models osms organised 11 families describe wide variety applications classes families map case study application object supply inventory control accounting object transfer financial systems object logistics messaging object sensing monitoring applications objectagent control command control systems osm composed set cooperating objects agents actions achieve goal facilitate reuse system level rather isolated generic classes taking object supply see appendix example osm models general problem handling transaction buyers suppliers case study matches purchase securities supplied bank counter party acts buyer supplier giving price maps dealer preparing quotation essentially osms patterns requirements specification rather design solutions proposed 19 osm represents transaction cooperating set objects modelled class diagrams agents behaviour represented use case annotated high level generic requirements expressed design rationale diagrams separate set generic use case models provided functional taskrelated aspects applications generic use cases cause state changes objects agents instance diagnostic use case changes state malfunctioning agent eg human patient unknown cause understood symptom diagnosed generic use cases also organised class hierarchies specialised specific use cases associated applications currently seven families generic use cases described diagnosis information searching reservation matching allocation scheduling planning analysis modelling example generic use case information searching composed subgoals articulating need formulating queries evaluating results revising queries necessary dealing domain maps searching background information companies various databases evaluating company profit loss figures press releases refining queries narrow search specific companies interest longer description generic use cases associated design rationale see 53 specific use cases new application may associated object system models either browsing osmuse case hierarchy selecting appropriate models applying identification heuristics see appendix using semiautomated matching tool retrieves appropriate models given small set facts describing new application 51 heuristics point towards osm models associated application however identification appropriate abstractions complex complete description beyond scope paper stage mapping use case components corresponding abstractions osms identified generic requirements attached osms applied new application unfortunately mapping problems solutions rarely one one trade offs considered evaluate merits different solutions design rationale 11 provides representation considering alternative designs may applied requirements problems raised osm nonfunctional requirements presented criteria trade offs may judged software engineer judges generic requirements recruited requirements specification may adds actions use case thereby elaborating specification case study security trading system involves five osms object supply models securities trading account object transfer models settlement part system payment securities purchased object messaging describe communication dealer counterparties osms model sub systems support trading object sensing detects changes security prices markets dealers position agent control describes relationship head dealer dealers addition osms dealing system contains generic use cases evaluate purchase plan strategy describe dealers decision making reasoning map domain specific use cases evaluating deal proposed planning trading strategy specific use case prepare quote mapped generic use case price item associated object supply osm generic model security trading system expressed aggregation osms given figure 6 settlement part system accounting object transfer osm omitted osm objects instantiated dealing system components clusters generic requirements represented design rationale associated appropriate osm components bank security stock client transfer ownedby move request supplier supply dealer banking world wire service signal existin quotes change prices head dealer strategies banking world transfer movein trade move source destination banks quotes make deal prep quote eval trade plan strategy counter party heldby deal security transfer existin price agree eval trade customer request instructions locate generic requirements clusters grs design rationales 1 checking customer preferences limits dealing 2 calculating prices prepare quotations 3 evaluating choices deals 4 sampling changes object properties stock prices 5 message transmission protocols deal notification 6 message encryption deal security 7 communicating commands head dealer strategy 8 reporting compliance strategy obeyedfollowed 9 calculating replenishment257 81 object messaging osm sub class object logistics object sensing osm sub class object properties object supply agent control osms figure 6 aggregation osms match security dealing system represented object oriented analysis notation 9 figure 7 design rationale high level generic requirements clusters 2 3 figure 6 attached evaluate choiceand prepare quoteuse cases instantiated requirement derived generic version given brackets functional requirements could applied support two use cases evaluate deal prepare quote evaluate deal rationale taken generic use case evaluate choice subclass matchingallocation family proposes three options assess purchase set reference levels prioritise several speed operation 9rvtshvhyrvtd7dtihv dr qvv 6tr generic requirements evaluate choices deals check options matrix tradeoff constraintbased matching rapid response accuracy sophisticated choice complexitycost 3 b dcrsrhyvbd bdhqrsswuruyqpurpx design alternatives justifications nonfunctional calculate prices prepare quote calculate volume value goods position weighted matrix calculation use price file display baseline quotes range prices user choice positive justification position argument negative argument position purchase options simple house quality style matrix 22 finally use sophisticated multicriteria decision making algorithm hypertext links rationale point reusable algorithms purpose options prepare quotes automate quotation simple calculations based dealers position desirability stock market movement choose weighted matrix technique quoting according volume requested dealers position leave quotation manual action simple display banks baseline quotations since first two options may time consuming dealers third chosen evaluate deal simple calculation taken optional facility leaving dealer control two high level generic requirements added requirements specification actions use case elaborates system functionality 36 scenario generation stage generates one scenarios use case specification scenario treated one specific ordering events ordering dependent timings start end events action link rules specified originating use case entering timings optional absence timed events algorithm uses ordering inherent link rules one scenario generated single use case actionlink rules strict sequence ie b space possible event sequences large even within relatively simple use case scenario generation algorithm reduces space first determining legal sequences actions space permissible event sequences reduced application actionlink userconstraints user enter constraints specify agents actions considered scenario generation process thus restricting permissible event sequences sequences es include event ev starts action involves predefined agent ag least given probability uc evstarta es ev starts example generated scenario must include event starts action 20 must involve agent dealer action 20 must least 10 likelihood occurrence according probabilities calculated information use case specification prepare quote use case definition leads 3 possible scenarios shown figure 8 difference timing event e40 ends action 40 whether action 40 action 45 occurs depiction ignores application constraint likelihood event sequence occurring scenario1 2 differ timing event e40 end request price information dealersystem scenario3 describes different event sequence dealer unable offer quote deal event event buyer requests quote event s50 event e50 dealer system shows price time event event e40 event event event event e40 event s50 event e50 event event event event e40 event s50 event e50 part use case generates event event e20 dealer picks event event e20 event event e20 event e40 dealer retrieves price event s60 event event e45 dealer refuses deal event event event event e45 event event e20 figure 8 diagram illustrating 3 normal scenario paths generated use case fragment generation mechanism two stages first generates permissible normal course scenario actions link rules use case identifies alternative paths normal sequence exception types summarised table divided two groups first abnormal events drawn hollnagels 24 event phenotypes classification secondly information abnormalities refer message contentseg information incorrect outofdate etc follow validation concepts proposed jackson 27 exception associated one generic requirements propose high level solutions problem exception types presented whatif questions software engineer choose probable appropriate alternative path action step scenario table summary exception types events originating system generic requirements deal abnormal patterns exception generic requirement event happen omitted timeout request resend set default event happens twice iteration discard extra event diagnose duplicate event happens wrong order buffer process early halt wait late send reminder check task event expected validate vs event set discard invalid event information incorrect type request resend prompt correct type incorrect information values check vs type request resend prompt diagnosis information late date check data integrity datetime check use default information detailed apply filters post process sortgroup information general request detail add detail alternative source set rules constrain generation alternative courses scenario using action agent types rules part extensible set augmented using agent types influencing factors described two example rules ev1 starts ac1 ev1 ends ac1 ac1typecognitive extypehuman appliesto ev1 ensures human exception types influencing factors see next section applied cognitive action event ev1 action ac1 exception type ex ev1 starts ac1 ev1 ends ac1 ac1typecommunicative ac1 involves ag1 ag1typemachine ac1 involves ag2 ag2typemachine extypemachinemachinecommunication appliesto ev1 ensures machinemachine communication failures applied communication actions agents type machine event ev1 action ac1 agents ag1 ag2 exception type ex rules identify particular types failure may occur different agenttype combinations generic requirements proposed remedy problems instance first rule human cognitive errors apply action1 counteracted improved training aid memoir facilities eg checklists help system second rule detects network communication errors generic requirements suggested fault tolerant designs sand backup communications algorithm generates set possible alternative paths according agentaction combination use case modeller allows user select probable abnormal pathways according knowledge domain help software engineer anticipate exceptions may occur assign probabilities abnormal events set influencing factors proposed describe necessary preconditions event exception happen sub divided 5 groups according agents involved human agents influencing factors give rise user errors exceptions derived cognitive science research human error 42 normans model slips 37 rasmussens three levels humantask mismatches 41 however human error cannot adequately described cognitive factors included performance affecting properties motivation sickness fatigue age based previous research safety critical systems 49 machine agents failures caused hardware software eg power supply problems software crashes etc humanmachine interaction poor user interface design lead exceptions inputoutput operations group draws taxonomies interaction failures humancomputer interaction 46 consequences poor user interface design eg humanhuman communication scenarios often involve one human agent communication breakdowns people important consequences exceptions derived theories computersupported collaborative work 46 examples include communication breakdowns misunderstandings machinemachine communication scenarios often involve machine agents exceptions specific communication also give rise alternative paths interaction influencing factors give rise human error described figure 9 four outer groups factors working conditions management taskdomain personnel qualities effect four inner factors fatigue stress workload motivations turn effect probability human error manifest event exception type humanmachine action human action human error caused environment factors qualities design two outer groups added personneluser qualities causal influences human operational error whereas system properties either treated causal explanations errors viewed generic user interface requirements prevent errors requirements deal problem posed influencing factors derived several sources literature eg task design training 3 workplace ergonomics 45 human computer interface design 46 47 standards eg iso 9241 25 ultimately modelling event causality complex moreover effort may warranted nonsafety critical system three approaches offered first use influencing factors paperbased tool thought second factors implemented hypertext traversed explore contextual issues may lead errors hence generic requirements deal problems however many variables interact eg high stress increases fatigue finally many combinations influencing factors possible domain requires particular model hence provide general modelling tool instantiated domain specific information tool allows influencing factors entered rating five point scale eg high task low calculates event probability ratings combination factors ratings user controlled factors described figure 9 may entered tool simple weightings perform sensitivity analyses set default formulae interfactor weights provided choice depends users knowledge domain tool indicate errors probable given used defined subset influencing factors type exception difficult predict ie mistake may likely whether manifest event omitted wrong order unpredictable reliable predictions made new alternative path rules see added system tool configurable validation rules added system evolve increasing knowledge domain current rules provide baseline set recommend generic requirements certain types agent eg untrained novices need context sensitive help undo facilities whereas experts require short cuts ability build macros influencing factors may used agent use case properties validated using frames described section 34 37 scenario validation crewssavre looselycoupled rationals requisitepro requirements management tool enable scenariobased validation requirements stored requisitepros data base crewssavre either presents scenario user alongside requirements document enable userled walkthrough validation system requirements enables semiautomatic validation requirements application pattern matching algorithms scenario approach examined turn figure shows userled walkthrough part one scenario dealing system use case requisitepro requirements document validated lefthand side screen shows normal course scenario sequence events righthand side alternative courses generic exceptions generated automatically requirements engineers earlier selection exception types selected event tool advises requirements engineer decide whether alternative course relevant b handled requirements specification user decides alternative course relevant handled requirements specification retrieve crewssavre one candidate generic requirements instantiate add requirements document exception type crewssavres data base linked one generic requirements describe solutions mitigate avoid exception thus crewssavre provides specific advice userled scenario walkthroughs figure 9 influencing factors exceptions interrelationships urfrhr gvtuvt ivr xxfyhpr qrqvphivyv wyr whvr hyvhxvt fyrqtr frvrpr brrhy6fvqr uhvvt qbvqhpr ghpxs rphtrr qqvpvfyvr qxqrvt cvqqrapvhyv hvvtsrrqihpx hvyrhqvtsrrqihpx qfrqvphivyv qrffyshvyr 9vpr chqhrshvyr ahvtr 8tvvooor shp vprhr consider example shown figure 10 user exploring normal course event 90 start communication action dealer enters deal information dealer system shown figure 10s alternative course gac6 information suspect b user browsed candidate generic requirements c copies pastes requirement system shall crossreference information information sources ensure integrity requisitepros requirements document figure also shows current hierarchical structure requirements held requisitepros data base e figure validation frames adding generic requirements second approach automatically crosschecks requirements document scenario using collection patterns encapsulate good sociotechnical system design requirements specification operationalise crewssavre tool applies one validation frames event event pattern userselected scenario determine missing incorrect system requirements validation frames specifies pattern actions events system requirements extend kaos goal patterns 12 describing impact different goal types set possible system behaviours validation frame two parts first defines situation pattern events actions expressed form identifier actiontype agenttypes agenttypes involved action event expressed identifier eventtype action identifier event type defines whether event starts ends action second part frame defines generic requirements needed handle eventaction pattern frames start ps055 standard 35 type requirement performance usability interface operational timing resource verification acceptance testing documentation security portability quality reliability maintainability safety requirement hence automatic requirementsscenario crosschecking possible using patterns event agent action types scenario requirement types requirements document example validation frame validationframe detect periods system inactivity situation agentagcmachine consecutiveagcevaevb requirements requirementperformance optional link requirementfunction timeoutresend optional link endvalidationframe frame detects absence reply event set time period human agent implicitly signals requirement ask resend set time instantiation requirement request price entered dealer within seconds accessing prepare quote option exception deals inbound event delays time longer preset limit ie system used period tool recommends reusable generic requirements example warn user logout user certain period time validation frames alternative course events provide generic requirement handle event exception ev linked event ev follows validationframe situation agentagamachine requirements requirementfunctional mandatory link system shall check data entry mistakes system shall restrict possible data entry endvalidationframe attention failures possible entering dealer information tool proposes generic requirements requirements engineer chooses requirement gr1 system shall check data entry mistakes figure 11 requirements engineer examining event s90 dealer enters deal information dealersystem causal influencing factor agent pays poor attention detail b validation frame detects need functional requirements handle alternatives linked event s90 result user able add new requirements requirements document handle alternative course figure validation frames exceptions finally tool uses validation frames applying osmspecific generic requirements similar manner section 34 high level generic requirements recruited design rationale trade offs whereas frames used detect osm specific patterns scenarios detailed requirements indicated computerised dealing system instantiation object supplying object messaging agentobject control system models consider validation frame linked send communication action object messaging system model situation scenario specifies event starts communication action involves machine agent matches one actions object messaging osm ie sending returning messages situation validation frame identifies least 5 generic system requirements validationframe comment generic requirements send action object messaging osm situation agentagamachine requirements requirementfunctional mandatory link genericrequirementgom1 system shall support identificationretrieval receiver agents address system shall enable user enter receiver agents system shall enable user enter content message system shall enable user send composed message receiver agent system shall maintain senderagent log messages sent received senderagent endvalidationframe example validation frame applicable event starts action buyer requests quote dealer generic requirements applicable computerised support action whether action undertaken telephone email example retrieving receiver agents telephone number email address maintaining sender log telephone calls email messages generic requirements instantiated added requirement specification 4 discussion contributions reported paper threefold first extensive reuse requirements knowledge empowered via decision models generic requirements secondly means semiautomatic requirements validation provided via frames frames extend type checking recognising patterns agents behaviour appropriate validation questions possible design solutions may applied third described use scenarios test pathway simulations novel tool support semiautomatic scenario generations current status development scenario generatorvalidator tool implemented industrial trials commencing clearly coverage terms number validation frames generic requirements contained tool database key issue effecting utility approach approach eclectic depends knowledge literature ergonomics human resource management user interface design contribution made implement integrate knowledge extensible architecture advice currently contained retrieved validation frames provides requirements knowledge summary level although may criticised lacking sufficient detail initial industrial reaction tool encouraging particular value raising design issues addressed current methods eg dsdm 15 far demonstrated proof concept terms operation followed testing utility within small scale industrially realistic application many senses strength method proposed lies integration previous ideas brought concepts safety critical system assessment 24 42 bear requirements analysis integrated scenario based approaches acknowledge heritage inquiry cycle 39 however research contributed advanced method support tool give comprehensive guidance solving problems specification requirements deal explicitly implications human error novel contribution broken ground beyond previous approaches 30 16 furthermore influencing factors bear causes potential error useful heuristics stimulate debate many higher level requirements issues task workplace design however acknowledge difficult provide prescriptive guidance heuristics may contend formalising analytic heuristics capture wealth possible causes error different domains answer heuristics better none point method incremental grows experience failure formalise knowledge hinder parts scenario based method reported paper related enterprise modelling approach yu mylopoulos 54 chung 7 create models system immediate environment using similar semantics tracing dependencies agents goals tasks limited reasoning support tradeoffs functional requirements nonfunctional requirements referred soft goals however method contain detailed event dependency analysis reported scenarios used assessing impact technical systems several authors 6 30 16 however reports give little prescriptive guidance analysis practitioner left examples case studies general lessons extracted instance ordit method 16 gives limited heuristics advise checking agent role allocations fall far short comprehensive guidance proposed dependencies systems environment analysed detail jackson zave 28 point input events impose obligations required system propose formalism modelling dependencies formal modelling applicable class systems implicitly analyse eg real time safety critical applications less clear models deal uncertainties human behaviour deal uncertainty human computer interaction believe scenario based approach appropriate focuses eliciting requirements repair problems caused unreliable human behaviour another approach kaos specification language associated grail tool 32 33 formal modelling refines goaloriented requirements constraint based specifications van lamsweerde et al 33 also adopted problems obstacles inquiry cycle 39 furthermore also employed failure concepts safety critical literature similar manner crewssavre approach anchored goalled requirements refinement use scenarios explicitly contrast crewssavre covers wider range issues kaos less formal rigour representing tradeoff modelling effort coverage formal reasoning far method partially dealt non functional requirements scenarios could expressed quantifiable terms instance goal questionmetric approach basili et al 4 boehms 5 qualityproperty model scenarios sense contain contextual information represent rich pictures system environment 29 description could structured include information related nf goal investigated metrics benchmark testing achievement goal validation frames may extended assessing rich picture scenarios non functional functional requirements instance inbound outbound event involves human agent mediated user interface usability criteria could attached event pattern design guidelines eg iso 9241 25 performance requirements could assessed checking volume temporal distribution events system requirements elaborating scenario based approach cover non functional requirements part ongoing research 52 spite advances scenario based may offer still demonstrate effectiveness practice evidence approach effective empirical studies earlier versions method use scenarios without support tool 50 validation industrial case studies progress acknowledgements research funded european commission esprit 21903 long term research project crews cooperative requirements engineering scenarios project partners include rwthaachen project coordinator city university london university paris france fundp university namur belgium r object oriented analysis dynamic systems development method dsdm version 30 analysis patterns reusable object models design patterns elements reusable objectoriented software iso 9241 human factors engineering design human computer interface design scenariobased analysis nonfunctional requirements tr ctr lin liu eric yu designing information systems social context goal scenario modelling approach information systems v29 n2 p187203 april 2004 norbert seyff paul grunbacher neil maiden amit tosar requirements engineering tools go mobile proceedings 26th international conference software engineering p713714 may 2328 2004 stan jarzabek wai chun ong hongyu zhang handling variant requirements domain modeling journal systems software v68 n3 p171182 15 december john van der poll paula kotz ahmed seffah thiruvengadam radhakrishnan asmaa alsumait combining ucms formal methods representing checking validity scenarios user requirements proceedings annual research conference south african institute computer scientists information technologists enablement technology p5968 september 1719 zhang dan xie wei zou viewing use cases active objects acm sigsoft software engineering notes v26 n2 march 2001 sebastian uchitel greg brunet marsha chechik behaviour model synthesis properties scenarios proceedings 29th international conference software engineering p3443 may 2026 2007 emmanuel letier jeff kramer jeff magee sebastian uchitel monitoring control scenariobased requirements analysis proceedings 27th international conference software engineering may 1521 2005 st louis mo usa dalal alrajeh alessandra russo sebastian uchitel inferring operational requirements scenarios goal models using inductive learning proceedings 2006 international workshop scenarios state machines models algorithms tools may 2727 2006 shanghai china nico lassing daan rijsenbrij hans van vliet well predict changes architecture design time journal systems software v65 n2 p141153 15 february giuseppe della penna benedetto intrigila anna rita laurenzi sergio orefice xml environment scenario based requirements engineering journal systems software v79 n3 p379403 march 2006 julia galliers alistair sutcliffe shailey minocha impact analysis method safetycritical user interface design acm transactions computerhuman interaction tochi v6 n4 p341369 dec 1999 perolof bengtsson nico lassing jan bosch hans van vliet architecturelevel modifiability analysis alma journal systems software v69 n12 p129147 01 january 2004 sascha konrad betty h c cheng laura campbell object analysis patterns embedded systems ieee transactions software engineering v30 n12 p970992 december 2004 idris hsi measuring conceptual fitness application computing ecosystem proceedings 2004 acm workshop interdisciplinary software engineering research november 0505 2004 newport beach ca usa andreas gregoriades alistair sutcliffe scenariobased assessment nonfunctional requirements ieee transactions software engineering v31 n5 p392409 may 2005 colette rolland naveen prakash conceptual modelling requirements engineering annals software engineering v10 n14 p151176 2000 alistair sutcliffe effective use reuse hci knowledge acm transactions computerhuman interaction tochi v7 n2 p197221 june 2000 axel van lamsweerde emmanuel letier handling obstacles goaloriented requirements engineering ieee transactions software engineering v26 n10 p9781005 october 2000 robb klashner sameh sabet dss design model complex problems lessons mission critical infrastructure decision support systems v43 n3 p9901013 april 2007 marcos andr gonalves edward fox layne watson neill kipp streams structures spaces scenarios societies 5s formal model digital libraries acm transactions information systems tois v22 n2 p270312 april 2004 n robinson suzanne pawlowski vecheslav volkov requirements interaction management acm computing surveys csur v35 n2 p132190 june