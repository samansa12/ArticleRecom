coloration neighbourhood search forward checking two contrasting search paradigms solving combinatorial problems isystematic backtracking ilocal search former often effective highly structured problems ability exploit consistency techniques latter tends scale better large problems neither approach ideal problems current trend artificial intelligence hybridisation search techniques paper describes use forward checking local search pruning coloration neighbourhoods graph colouring approach evaluated standard benchmarks compared several algorithms good results obtained particular one variant finds improved colourings geometric graphs another effective equipartite graphs application combinatorial problems discussed b introduction graph colouring nphard combinatorial optimisation problem realworld applications timetabling scheduling frequency assign ment computer register allocation printed circuit board testing pattern matching graph e consists set v vertices set e edges vertices two vertices connected edge said adjacent aim assign colour vertex way two adjacent vertices colour graph colouring problem graph g problem nding kcolouring k small possible chromatic number g graph minimum number colours required colour many algorithms proposed graph colouring problem systematic backtracking gives good results small graphs scales poorly large problems colouring algorithms stochastic nature searching nonsystematic way variety heuristics simplest type stochastic search local search hill climbing often augmented heuristics escaping local minima local search explores neighbourhood point space making local moves neighbourhood consists set points 0 reached single local move aim minimise equivalently maximise objective function f space local move 0 classied backward forward sideways depending whether f 0 f positive negative zero algorithms choose forward move yields greatest reduction value strategy sometimes called greedy steepest descent drawback local stochastic search may converge local minimum point lower value neighbours global minimum aim backward moves escape local minima providing noise sideways moves often used traverse function plateaus might classify colouring algorithms search spaces explore space total colorations consists possible colour assignments vertices graph using xed number colours approach used tabu algorithm tries minimise number con icts con ict adjacent pair vertices colour tabu generates selection possible singlevertex reassignments selects best even leads con icts also maintains list recent moves avoids reversing helps escape local minima consistent total colorations total colorations contain con icts space explored greedy sequential algorithm tries colour vertex colour already used previous vertex possible new colour used heuristics control vertex order colour selection iterative greedy algorithm iteratively applies greedy algorithm using vertex orderings guaranteed generate sequence colorations using nonincreasing number colours brelazs dsatur algorithm 2 explores similar space orders vertices dynamically maximum saturation number distinct colours assigned adjacent vertices breaking ties choosing vertex greatest forward degree degree vertex number adjacent vertices forward degree number uncoloured adjacent vertices dsatur also extended backtracking mehrotra tricks version 15 uses full exhaustive search begins computing clique never coloured another version described culberson beacham papp 3 uses limited backtracking space consistent partial colorations consists consistent colorations subsets vertices use specied number colours space explored impasse colouring algorithms objective function minimised sum forward degrees uncoloured vertices two algorithms morgensterns distributed impasse 17 lewandowski condons parallel impasse 14 distributed impasse performs limited searches distributed architecture search starting previous good coloration maintained pool parallel impasse hybrid impasse systematic search two execute parallel communicate colouring improvements finally independent sets graph sets pairwise nonadjacent vertices exploit fact vertices independent set assigned colour space independent sets explored algorithms johnson et als xrlf 10 culberson using exhaustive restricted backtracking iteration mehrotra tricks lpcolor 15 uses column generation branchandbound explore space motivation classication shall describe local search algorithm explores new space subspace consistent partial colorations reduced applying constraint programming technique forward checking describe new algorithm section 2 evaluate performance section 3 algorithm results related work discussed section 4 paper extension earlier work 19 algorithm described greater detail evaluated systematically fcconsistent partial coloration neighbourhood search rst discuss simple consistency technique constraint programming forward checking fc fc commonly used systematic backtracking 9 combination applied graph colouring follows vertex associated domain possible colours initialised full set available colours colouring vertex one colours domain colour deleted domains adjacent vertices colour assignment permitted causes domain uncoloured vertex become empty domain wipeout often occurs long vertex question due coloured greatly reducing search space backtracking vertex uncoloured assigned colour restored domains adjacent vertices analogue brelaz heuristic may used select vertices colouring select vertex smallest domain breaking ties selecting vertex greatest forward degree fc simple inexpensive algorithm sometimes outperforms theoretically powerful techniques fc backtracking also advantage completeness kcolourings eventually found kcolouring algorithm eventually prove terminating without nding solution however systematic backtracking algorithms often suer poor scalability example fc algorithm eective small nqueens problems cannot solve problems approximately 100 queens contrast local search algorithm solves 10 6 queens linear time 16 backtracking local search complementary search techniques solving colouring combinatorial problems considerable research devoted combining advantages two describe exploit fc within local search algorithm graph colouring idea explore subspace consistent partial col orations also consistent forward checking currently uncoloured vertices least one available colour consistently assigned colorations causing vertex domain wipeout avoided shall call subspace fcconsistent partial colorations reasoning reducing search space may avoid local minima describing particular algorithm used explore space discuss complication arises applying local search systematic backtracking simple maintain vertex domains order colours restored domains backtracking reverse order deleted assignment sucient maintain boolean variable colour domain denoting whether colour currently domain however local search nonsystematic given coloration may wish uncolour vertex recently coloured one need new way maintaining domains number shall call con ict count maintained vertexcolour pair vc recording many currently coloured vertices assignment would con ict initially con ict counts zero colour classed deleted vertex domain con ict count greater zero domains size number nondeleted colours memory requirement con ict counts excessive n vertices k colours k n con ict counts needed roughly amount memory required represent problem may updated incrementally colouringuncolouring vertex con ict count colour adjacent vertex incrementeddecremented however cause signicant runtime overhead compared standard forward check ing updated domains uncoloured coloured vertices design local search algorithm fcconsistent partial col orations algorithm chosen rather simple starting exactly standard fc selects vertex colouring nds colour used without causing domain wipeout colours vertex updates domains adjacent vertices repeats selecting another vertex dierence far domains maintained con ict counts however reaching deadend selected vertex cannot coloured new algorithm behaves dierently standard fc heuristically selects vertex un coloured instead selecting recently coloured vertex attempt made backtrack systematically completeness lost obvious criterion deciding stop backtracking start colouring vertices introduce parameter b 1 reaching deadend b vertices uncoloured colouring resumes note vertices selected colouring uncolouring may follow dierent heuris tics set coloured vertices may change rapidly search b plays part noise parameter temperature simulated nealing controlling permitted disruption state reaching local minimum remains details describing three heuristics selecting b coloured vertices uncolouring cvertex selecting uncoloured vertex colouring uvertex selecting colours try colouring vertex colour consider two alternative uvertex rules select vertex smallest current domain break ties selecting vertex adjacent greatest number uncoloured ver tices break ties randomly nonsingleton randomly select vertex one colour current domain none exists select vertex randomly brelaz heuristic obvious choice idea behind nonsingleton heuristic emulate maxis algorithm constructs independent sets vertices whereas dsatur constructs cliques selecting vertices using inverse brelaz heuristic thus focusing vertices independent possible currently coloured might expect obtain forwardchecking analogue maxis tested perhaps surprisingly performed rather well random graphs whereas brelaz heuristic performed poorly however weaker nonsingleton heuristic performs better possibly greater exibility selecting vertex discussed section 4 given free choice vertices uncolouring selected obvious idea use inverse brelaz uncolour vertex large domain small degree note con ict counts updated irrespective whether vertex coloured coloured vertices also domain sizes tests often caused stagnation weaker nonsingleton heuristic applied coloured vertices works well reduce stagna tion probability 1n n number vertices graph cvertex rule selects vertex randomly instead domain size random ordering domain values works well performance improved remembering previous colour vertex coloured earlier colour rule ips two modes initially prefers dierent colours remembered vertex dierent colour successfully used rule ips preferring remembered colour cvertex next invoked ips back preferring dierent colour aim rule minimise disruption colorations set coloured vertices changes avoiding null local moves function u 6 fg let let colouring u cause domain wipeoutg i1 minb jcj uncolour c update domains else colour u colourd update domains return coloration figure 1 fc partial coloration neighbourhood search xed k new algorithm fcns fcconsistent partial coloration neighbourhood shown figure 1 k 1 permitted number colours b 1 noise parameter c current set coloured vertices initialised fg u current set uncoloured vertices initialised full set n vertices g vertex domain colours fcconsistent current partial coloration initialised full set colours kg algorithm proceeds selecting uncoloured vertices using uvertex rule colours using colour rule reaching deadend fg uncolours b vertices selected cvertex rule termination guaranteed occurs vertices coloured algorithm used nd nearoptimal colouring applying iteratively obvious way start large k example apply algorithm nding total coloration using k 0 k colours restart algorithm k 0 1 colours repeat reaching target number colours specied time performance improved starting iteration coloration similar previous one colour assignments stored iterations rst deadend occurs vertex assigned previous colour possible also possible speculatively reduce k hope nding better colourings quickly however aspiration approach always speed search inadvertently choosing k less chromatic number graph runs risk spending long time fruitless search aspiration used current fcns implementations 3 experimental results fcns evaluated using published results several algorithms wellknown dimacs 11 1 benchmarks culberson luos iterated greedy ig 4 morgensterns distributed impasse 17 wheel optimization swo 12 glover parker ryans tabu 8 tabu algorithm combines tabu metaheuristic branchand bound swo operates two search spaces solution space prioritisation space searches uence solution analysed used change prioritisation guides search strategy used nd next solution found restarting search use standard set benchmarks taken dimacs web site geometric graphs rxy dsjrxy generated randomly placing x vertices unit square assigning edges two vertices euclidean distance less y10 graph denoted gc complement graph g names r dsjr ect dierent sources believe type graph random graphs cnp dsjcnp n vertices edge assigned two vertices xed probability p10 names c dsjc ect dierent sources flat graphs contain colorations hidden way mislead brelazstyle heuristics graph atn c x contains vertices known hidden though necessarily optimal ccolouring leighton graphs le450 15x derived scheduling 450 edges known chromatic number 15 graph colouring closely related timetabling problem two timetabling graphs school1 problem derived timetabling data real high school around 500 students school1 nsh problem derived data ignores study halls register allocation graphs used compilers assign variables registers aim avoiding placement two variables register may active one graph mulsoli1 latin square graph latin sqr 10 derived standard problem design theory figure reproduces published results swo ig dimp distributed impasse pimp parallel impasse tabu figure 3 shows results fcns brelaz fcnsb nonsingleton fcnsn heuris tics times normalised machine 300 mhz dec alphaserver 1000a 5300 unix using benchmark timings 11 dimacs benchmark program dfmax r5005 takes 462 seconds machine times parallel impasse normalised parallel platform 32processor cm5 tables k number colours used time taken seconds figure 3 b value used parameter value chosen runs nd appropriate setting ad hoc approach unfortunately necessary many local search algorithms tabu list length parameter algorithms one parameter example several local search algorithms satisability problem initial number colours k 0 fcns set worst k found algorithms case except algorithms even worse higher values used fcns halted reaching target k selected experimental runs times shown fcns mean times taken reach k k 0 averaged runs short times experimental details algorithms vary details see cited papers brie swo terminated 1000 iterations ig 1000 iterations without improvement tabu hour sooner lackofprogress condition satised distributed impasse used conditions depending problem always halted reaching specied target k parallel impasse ran 3 hours reported time taken nd best solution use time limit instead target number colours explains occasional fractional values k first discuss fcnsb clearly best algorithm geometric graphs r10005 dsjr5005 nds best reported colour ings others nds equally good colourings shorter times geometric graphs randomly generated closely related real problem frequency allocation 10 fcnsb therefore promising algorithm solving problems area future research also performs well school mulsol graphs roughly matching swo ig dimp pimp tabu problem school1 nsh 14 39 141 48 14 024 14 664 26 168 mulsoli1 at300 26 0 358 64 371 41 26 54 324 6637 41 1849 at300 28 0 357 64 37 52 31 1028 33 1914 41 1849 figure 2 previous results dimacs benchmarks fcnsb fcnsn problem figure 3 fncs results dimacs benchmarks performance distributed impasse also tested mehrotra tricks implementation 2 geometric graphs known perform well graphs edge probability 01 found colourings slightly shorted time fcnsb edge probability 05 quickly found good colourings made progress long time r1255 found 36colouring 634 seconds r2505 66colouring 29 seconds dsjr5005 130colouring 176 seconds r10005 246colouring 758 seconds progress made several minutes fcnsb clearly scales better dsatur nding better colourings larger graphs however poor random latin square graphs mediocre leighton graphs next discuss fcnsn geometric school graphs poor sometimes worst algorithm like fcnsb mediocre leighton graphs random latin square graphs beaten distributed impasse presumably due use distributed impasse xrlf algorithm 10 generate initial colorations parallel impasse use xrlf beaten fcnsn random graphs however algorithms also better fcnsn random graphs example g 100005 graphs best algorithms nd colourings low mid80s investigate fcnsn applied equipartite graphs studied several researchers kcolourable equipartite graph generated partitioning vertices k subsets equallysized possible smallest 1 vertex smaller largest edges assigned probability p disallowing edges vertices subset guarantees kcolouring preclude better colourings eiben van der hauw van hemert 5 apply evolutionary algorithms 3colourable equipartite graphs 200 vertices report low success rates graphs low density especially around phase transition occurs minton et al 16 also report min con icts local search algorithm diculties similar problems backtracking version dsatur solves easily 3 n 180 yugami et al 27 apply local search constraint propagation problems obtain improved results fcnsn solves problems easily nds 3colourings approximately 3 seconds moving larger problems culberson et al 4 show ig nd hidden kcolourings g 100005 equipartite graphs k 60 fcnsn also able go little algorithm quite insensitive b k 55 became sensitive optimal value approximately problems rapidly became harder optimal value b fell found hidden 67colouring several hours computation failed nd hidden 68colouring far known 67 highest value k solved class graph experiments fcnsn also managed nd hidden colourings at1000 f5060g 0 setting starting target colouring 50 60 specied initial colouring however results took much trial error achieve included table perhaps surprising nonsingleton heuristic successful let alone competitive particular vertex domain size 1 hence one possible colour brelaz select vertex larger domain hence one possibility nonsingleton delay colouring vertices long possible investigate eect adding forced moves another variant tried select vertex domain size 1 one exists otherwise select one maximum domain size however variant inferior brelaz nonsingleton speculate nonsingleton causes fcns behave similar way independent setbased algorithms maxis focusing search lowdegree vertices better algorithm might obtained explicitly designing nd independent sets applying forward checking another research direction design new vertex orderings aim improving fcnss performance random leighton latin square graphs noise parameter b unfortunately requires tuning graph noise parameter eect setting b low stagnation fcns never nd colouring becomes trapped local minimum eect setting b high less serious simply increasing time taken nd solution increase depends problem performance fcnsn seems fairly insensitive value b nding 18colouring dsjc1255 dsjc10005 increasing b 1 2 slows greatly equivalently prevents nding good colourings time fcnsb seems less sensitive still slowed signicantly much noise experimented variable noise levels try reduce sensitivity noise inconclusive results slightly surprising feature b several graphs example r2505 best results obtained fcnsb fcnsn using dierent values b however perhaps surprising two algorithms focus dierent regions graphs therefore might expected encounter local minima dierent depths main dierence fcns stochastic colouring algorithms performs forward checking also additional advantage ig swo incrementality ig swo incremental restarting expensive move whereas impasse tabu fcns make small cheap moves search space pointed source ineciency joslin clements 12 propose hybrids swo local search future work graph colouring binary constraint satisfaction problem given xed k use con ict counts perform forward checking local search easily generalised problems generalised nonbinary constraint problems done propositional satisability sat experimental results promising large structured sat problems outperforms current systematic local search algorithms 20 fact colouring sat algorithms instances generalpurpose approach combinatorial optimisation constraint satisfaction call constrained local search cls aim cls enhance local search constraint programming techniques used systematic search also given good results sat problems 20 maximum clique problems 22 golomb rulers 22 hard optimisation problem generation lowautocorrelation binary sequences 21 general approach take eective backtracking algorithm replace systematic randomised backtracking usually improving scalability expense completeness might argued fcns generally cls local search algorithm simply randomised backtracker certainly randomised backtracker much common dynamic backtracking db also allows removal early assignments without aecting assignments made since increased exibility backtracking stated aim design db later hybrid algorithm called partial order dynamic backtracking 7 achieved even greater exibility fcns simply inferior version db sacricing completeness good pur pose counterexample view random 3sat problem db slower depthrst search 1 cls scales precisely local search 21 view fcns stochastically explores space fcconsistent partial colorations local search objective function minimises number uncoloured vertices however extent question academic even fcns local search experimental results show captures essence successfully solving problems beyond range systematic backtracking several hybrids local search constraint techniques simplest hybrid parallel distributed implementation one algorithm impasse algorithms used colouring schaerfs timetabling algorithm 24 extended constraint satisfaction problems searches space partial assignments consistent ones using objective function includes measure constraint violation dierent space searched current colouring algorithms fcns graph colouring terms space may called partial colorations opposed consistent partial colorations explored impasse jussien lhommes pathrepair algorithm 13 described generalisation schaerfs approach includes learning allowing complete versions devised tabu list yugami ohta haras eflop algorithm 27 uses constraint propagation escape local minima allowing constraint violation however forward checking maintained throughout search fcns ginsberg mcallesters partialorder dynamic backtracking 7 hybrid dynamic backtracking algorithm local search algorithm 6 enabling follow local gradients search space pesant gendreau 18 apply systematic branchandbound search eciently explore local search neighbourhoods twophase algorithm zhang zhang 28 searches space partial variable assignments alternating backtracking search stochastic local search data structure tuned dierent problems spending time either phase yokoos weak commitment search 26 wcs greedily constructs consistent partial assignments reaching deadend randomly restarts uses learning maintain complete ness richards richards 23 describe sat algorithm called learnsat based wcs shaw 25 describes vehicle routing algorithm called large neighbourhood search performs local search uses backtracking constraint propagation test legality moves algorithms either permits constraint violation uses learn ing constraint violation implies view author constraints underused may drawback solving highly structured problems best graph colouring results structured problems obtained algorithms impasse fcns violate constraints use learning drawback solving large problems restricted use polynomial memory combinatorial problems may large fcns approach combines constraint handling local search making cheap local moves avoiding memoryintensive learning techniques believe combination features makes ideal large highly constrained problems r hazards fancy backtracking exploring kcolorable landscape iterated greedy graph coloring adaptive evolutionary algorithms journal arti gsat dynamic backtracking coloring tabu branch bound increasing tree search eciency constraint satisfaction problems optimization simulated annealing experimental evaluation journal arti pathrepair algorithm experiments parallel graph coloring heuristics applications graph coloring column generation approach graph colouring minimizing con icts heuristic repair method constraint satisfaction scheduling problems distributed coloration neighborhood search view local search constraint pro gramming using incomplete version dynamic backtracking graph colouring stochastic local search constrained spaces hybrid search architecture applied hard random 3sat lowautocorrelation binary sequences trading completeness scalability hybrid search cliques rulers combining local search lookahead scheduling constraint satisfaction problems using constraint programming local search methods solve vehicle routing problems improving repairbased constraint satisfaction methods value propagation combining local search backtracking techniques constraint satisfaction tr ctr steven prestwich sat problems chains dependent variables discrete applied mathematics v130 n2 p329350 15 august marco chiarandini thomas sttzle stochastic local search algorithms graph set tcolouring frequency assignment constraints v12 n3 p371403 september 2007