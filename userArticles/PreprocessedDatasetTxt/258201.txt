online routing virtual circuits applications load balancing machine scheduling paper study problem online allocation routes virtual circuits pointtopoint multicast goal route requests minimizing required bandwidth concentrate case permanent virtual circuits ie circuit established exists forever describe algorithm achieves log n competitive ratio respect maximum congestin nis number nodes network informally results show instead knowing future requests sufficient increase bandwidth communication links log n factor also show result tight online algorithm exists scenario log n increase bandwidth necessary directed networks view virtual circuit routing generalization online load balancing problem defined follows jobs arrive line job must assigned one machines immediately upon arrival assigning job machine increases machines load amount depends job machine goal minimize maximum load related machines case describe first algorithm achieves constant competitive ratio unrelated case nmachines describe new method yields ologncompetitive algorithm stands contrast natural greed approach whose competitive ratio exactly n show result tight online algorithm exists scenario log n increase bandwidth necessary directed networks b introduction virtual circuit routing highspeed integrated communication networks going become reality near future implementation networks raises numerous new issues either exist could easily addressed context existing slowspeed networks particular increase network speed several orders magnitude leads situation bandwidthdelay product far exceeds available buffer space making necessary use bandwidthreservation techniques main abstraction customer use network virtual circuit order use network customer requests reserve required bandwidth two communicating points network guarantees reserved bandwidth indeed available long needed creating illusion real circuit dedicated customer one basic services appears proposals future highspeed networks eg atm 1 permanent virtual circuit pvc service far user concerned virtual circuit supposed behave like physical line connecting corresponding points hence desirable circuit created rerouted network except result failures hence name permanent paper develop framework techniques allow us address problem online virtual circuit routing consider following idealized setting given network edge associated capacity bandwidth requests virtual circuits arrive line request specifies source destination points required bandwidth routing algorithm choose path source destination reserve required bandwidth along path goal minimize maximum edges relative load defined reserved used edge bandwidth measured percentage total edge capacity paper assume rerouting allowed virtual circuits never disappear applications efficent use multicast circuits instead single destination multiple destinations examples include teleconferencing video demand database updates etc case routing algorithm choose tree spans nodes participating multicast framework techniques applied several alternative models discussion models deferred end introduction several recent papers show apply techniques developed paper general cases including routing switched virtual circuits svc ie circuits limited duration time 6 3 4 2 simulation implementation results described 11 indicate online routing algorithms based techniques outperform traditional algorithms routing permanent virtual circuits circuits atm networks customary evaluate performance online algorithms terms competitive ratio 22 supremum possible input sequences ratio maximum load achieved online algorithm maximum load achieved optimal offline algorithm using framework derive online virtual circuit routing algorithms pointtopoint multicast olog n competitive respect load n number nodes network also show omegagamma107 n lower bound competitive ratio virtual circuit routing algorithm case underlying network directed upper bound works directed undirected cases load balancing view virtual circuit routing generalization online machine schedulingload balancing end concentrate nonpreemptive loadbalancing defined follows parallel machines number independent jobs jobs arrive one one job associated load vector assigned exactly one machines thereby increasing load machine amount specified corresponding coordinate load vector job assigned cannot reassigned objective minimize maximum load load balancing problems categorized three classes according properties load vectors done nonpreemptive scheduling problems 13 identical machines case coordinates load vector case first considered graham 12 showed competitive algorithm n number machines bound improved 8 value ffl improved 14 related machines case ith coordinate load vector equal wjvi weight wj depends job j speed vi depends machine cases referred unrelated machines special case coordinates load vector either 1 equal given value depends job considered 7 described olog ncompetitive algorithm case viewed hybrid identical unrelated machines case incomparable related machines case similar special case studied 15 paper show olog ncompetitive algorithm unrelated machines case 8competitive algorithm related machines case although competitive analysis notions apply algorithms without restrictions running times online algorithms presented paper run deterministic polynomial time whereas matching lower bounds based informationtheoretic arguments apply even allow online algorithm use randomization related machines case generalization identical machines problem graham 12 shown greedy algorithm achieves constant competitive ratio thus natural ask whether adaptation algorithm give constant competitive ratio related machines case well prove surprisingly natural greedy approach assigning every new job machine complete lowest resulting load thetalog n competitive nongreedy 8competitive algorithm problem viewed adaptation scheduling algorithm shmoys wein williamson 21 context load balancing show unrelated machines case natural greedy algorithm ncompetitive bound contrasted olog ncompetitive greedy strategy 7 special case coordinates load vector either 1 equal given value depends job large gap bounds indicates unrelated machines case strictly harder requires development new techniques introduce new approach leads olog ncompetitive algorithm general unrelated machines case shown 7 best bound competitive ratio one hope case related work techniques used online framework based ideas developed context approximation algorithms multicommodity flow related problems see eg 20 16 17 19 particular assign link weight exponential links load choose routes computing shortest paths respect weight main difference algorithms presented previously known offline approximation algorithms novel way proving approximation factor allows us execute algorithm online fashion results paper concentrate case jobs virtual circuits permanent ie jobs never leave virtual circuits never terminate azar broder karlin 5 introduced natural generalization model requests duration time show n lower bound competitive ratio load balancing algorithm deals unknown duration case ie case duration request becomes known upon termination lower bound suggests considering case duration request becomes known upon arrival known duration case methods developed paper generalized 6 giving olog nt competitive algorithm problems scheduling unrelated machines known duration case ratio maximum minimum duration similar results achieved virtual circuit routing problem another way overcome lower bound unknownduration case allow reassignments existing jobs case coordinates load vector restricted 1 1 phillips westbrook 18 proposed algorithm achieves olog n competitive ratio making o1 amortized rassignments per job general case considered 4 show extended techniques presented design olog ncompetitive algorithm respect load reroutes circuit olog n times alternative measure network performance amortized throughput defined average time number bits transmitted accepted connections setting networks bandwidth assumed insufficient satisfy requests requests may need rejected upon arrival online algorithm setting combination decision mechanism determines requests satisfy together strategy specifies route requests goal maximize amortized throughput competitive algorithm maximizes throughput singlelink case provided garay gopal 10 case network consists single line nodes considered garay gopal kutten mansour yung 9 techniques presented extended awerbuch azar plotkin 3 provide competitive solution networks unrestricted topology routing scheduling algorithms assume central scheduler makes decisions 2 awerbuch azar extended techniques paper case concurrent requests satisfied decentralized fashion virtual circuit routing section consider problem online routing virtual circuits capacitated network formally given graph e jv capacity function requests arrive tuples request satisfied choosing route p reserving capacity pi along route since always normalize requested bandwidth total available bandwidth procedure assignroutep g e pue let p shortest path g wrt costs c e performance guarantee algorithm b fail else begin success end figure 1 algorithm assignroute convenient define routes assigned requests 1 k online algorithm let k g routes assigned offline algorithm given set routes p define relative load first j requests satisfied 1 let j similarly define e j j corresponding quantities routes produced offline algorithm simplicity abbreviate k k goal online algorithm produce set routes p minimizes problem viewed instance 2terminal net routing pathpacking minimizing corresponds asking much larger make capacities edges order online algorithm able satisfy requests offline algorithm could satisfied network original capacities easy see algorithms presented section extended case increase load uniform along route ie p e arbitrary necessarily equal piue 21 routing algorithm assignroute algorithm assumes knowledge shown figure 1 given request allocate route capacity p assignroute assigns weight edge function change relative load used new route computes shortest path respect weights appropriately chosen constant convenience define notion performance guarantee fi follows algorithm accepts parameter never creates load exceeds fi algorithm allowed return fail refuse route circuit l otherwise route requests lemma 21 exists n algorithm assignroute never fails thus performance guarantee olog n simplify formulas use tilde denote normalization example e j define potential function e e j 2 constants online algorithm satisfies j 1st request route p j1 offline algorithm satisfies route p j1 get following change potential function e ja e j1 fla e jpe j1 gamma e j e j fla e jpe j1 gamma e j e j fla pe last inequality follows fact p j1 shortest path endpoints 1st request respect costs e jpe j1 gamma e since j 1st request satisfied optimal algorithm assigning route p j1 means 8e 2 p therefore order show potential function increase sufficient show 8x 2 0 true initially number edges graph since phi increase satisfying k requests e e implies log log n use simple doubling technique guess start beginning first phase set requested bandwidth first request beginning new phase h 1 set single phase jobs assigned independently jobs assigned previous phases ie load created jobs assigned previous phases ignored phase h ends assignroute returns fail easy see approach increase competitive factor factor 4 factor 2 due load rest phases except last another factor 2 due imprecise approximation since performance guarantee assignroute olog n get following theorem observe holds directed undirected graphs theorem 22 algorithm assignroute used achieve olog n competitive ratio respect load 22 routing multicast circuits many applications teleconferencing video demand etc based multicast instead pointto point circuits request multicast circuit consists tuple 1 communicating points pi required bandwidth one communicating points serve source satisfy request algorithm need assign required bandwidth pi along edges tree spans nodes 1 pointtopoint case considered previous section goal minimize load observe assigning 2pi instead pi bandwidth embed network cycle capacity pi passes communicating points also note case k directly corresponds pointtopoint case algorithm route multicast circuits direct extension pointtopoint routing strategy presented instead routing minweight paths multicast circuits routed minweight steiner trees since finding trees nphard important note approximation sufficient fact show sufficient route trees whose weight within constant factor minimum trees easily found applying minimumcost spanning tree algorithm appropriately constructed graph 23 proof competitive ratio nearly identical proof lemma 21 difference summation range equation 3 instead summing edges path chosen algorithm edges optimum path sum edges tree chosen algorithm edges tree chosen optimum offline algorithm equation 3 based fact cost edges chosen algorithm routing current circuit larger cost edges chosen optimum algorithm routing circuit fact edges form path used words equation 3 remains correct summation range changed algorithm routes minweight steiner trees thus multicast algorithm routes minweight steiner trees olog ncompetitive using instead 1 1fl seen 2approximation minweight steiner tree sufficient increases competitive ratio factor 2 discussion implies following claim theorem 23 exists olog ncompetitive algorithm multicast virtual circuit routing decision implemented polynomial time 23 lower bound routing section show lower bound ofomegagamma24 n competitive ratio online routing algorithm directed network ie network capacity v w necessarily equal capacity w v implies olog ncompetitive algorithm presented previous section optimal case lower bound also holds randomized algorithms working oblivious adversary ie adversary generate new requests independently outcome coin flips online algorithm basic idea modify lower bound azar naor rom 7 online load balancing lower bound adversary introduces new job iteration set machines execute job chosen adversary depends online algorithm general exponential number possible sets whereas routing context graph fixed hence adversarys choice next request limited start end existing nodes graph thus literal translation lower bounds loadbalancing problem particular lower bound 7 leads exponential blowup size resulting graph indicating need somewhat sophisticated construction without loss generality assume n power 2 consider directed graph single source connected one n vertices one sink denoted 11 connected two sinks denoted 21 22 connected respectively etc general 1 log n divide vertices sets jth contains vertices v j gamma1n2 vertices set connected sink associated set sinks denoted ij observe vertices associated ij union two disjoint sets associated construct sequence requests paths source sinks offline load 1 online algorithm assigns least load log nto edge v j combined fact size graph yield theomegagammae2 n lower bound refer load edge v j load v j requests generated log n phases bandwidth every request equal 1 maintain following conditions hold phase 1 phase n requests paths source sink ij j 1 2 end phase set average expected load vertices associated sink ij i2 clearly first phase begins load vertex 0 assume conditions hold phase vertices associated ij union two disjoint sets vertices associated sink associated i12j hence one sets must average expected load i2 end ith phase denote subset generate n requests unit capacity source sink associated since size n average expected load must increase 12 least implying conditions satisfied phase 1 thus last phase average expected load two vertices last set least log nhence expected load one least log nto complete proof show offline algorithm maintain unit maximum load enough show phase offline satisfy requests using edgedisjoint paths without using vertices associated sinks requested latter phases indeed phase n requests paths source sink ij set vertices associated sink contains two disjoint sets size n construction one sets associated sinks latter requests thus offline algorithm route requests phase edgedisjoint paths use vertices set 3 online machine loadbalancing section present several algorithms online machine loadbalancing jobs arrive online immediately assigned one machines goal minimize maximum load formally job j represented load vector assigning job j machine increases load machine p j let j denote load machine already assigned jobs 1 j consider sequence jobs defined oe j load machine achieved offline algorithm assigning jobs 1 j oe goal offline online algorithms minimize l respectively precisely measure performance online algorithm supremum possible sequences lkl k arbitrary length k mentioned introduction loadbalancing problems usually categorized three classes based properties load vectors identical machines related machines denotes speed machine cases referred unrelated machines note instead load one talk execution time restating problem terms goal decrease maximum execution time requirement arriving jobs scheduled immediately procedure assignup let index minimizing performance guarantee algorithm b fail else begin success return b end figure 2 algorithm assignu 31 unrelated machines section consider online loadbalancing unrelated machines show section 4 natural greedy approach far optimal case achieving competitive ratio thetan olog ncompetitive algorithm unrelated machines loadbalancing constructed reduction routing problem considered previous section unfortunately reduction results confusing nonintuitive algorithm instead present simpler algorithm specifically designed machine loadbalancing problem simplicity first consider case given parameter l appropriate value guessed using simple doubling approach increasing competitive ratio factor 4 use tilde denote normalization ie algorithm assignu assumes knowledge shown figure 2 basic step assign job j make j small possible description algorithm omitted job index j since single invocation algorithm deals single job use notion performance guarantee similarly use online routing case algorithm accepts parameter never creates load exceeds fi algorithm allowed return fail refuse schedule job l otherwise schedule arriving jobs lemma 31 l exists n algorithm assignu never fails thus performance guarantee olog n consider state system scheduling constants later show good choice 2 fl 1 recall assumption l j l define potential function assume job j assigned machine 0 online algorithm machine offline algorithm note since offline algorithm assigned job j machine 0 therefore order show potential function increase sufficient show x true since initially fln point assignment process hence log log n notice constants big 6 small example 107 log n 37 changing value fl one trade multiplicative factor additive one note log n lower bound even restricted case considered 7 interesting note case coordinates load vector pj either 1 equal constant p j depends job j algorithm behaves exactly like greedy algorithm considered 7 32 related machines related machines case generalization identical machines case section 4 show natural generalization related machines case grahams greedy algorithm identical machines case leads thetalog n competitive ratio present nongreedy algorithm achieves constant competitive ratio first consider case given parameter l k k index last job simple doubling technique used eliminate assumption roughly speaking algorithm assign jobs slowest machine possible making sure maximum procedure assignrp b fail else begin success return b end figure 3 algorithm assignr load exceed appropriately chosen bound idea assigning job least capable machine first appeared paper shmoys wein williamson 21 considered online scheduling problem algorithm assignr assumes knowledge shown figure 3 basic step assign job j slowest machine load machine 2 assignment description algorithm omitted job index j since single invocation algorithm deals single job assume machines indexed according increasing speed following discussion omit index k understood context particular use l l instead lk l k respectively use notion performance guarantee sense previous section lemma 32 l assignr never fails therefore performance guarantee equal 2 proof assume assignr fails task j let r fastest machine whose load exceed l ie g machine set obviously r 6 n could assigned fastest machine n since rg set overloaded machines since r denote set jobs assigned machine online offline algorithms respectively since dealing related machines implies exists job 2 ie exists job assigned online algorithm machine 2 gamma assigned offline algorithm slower machine assumptions r least fast machine 0 thus p r assigned job j r means online algorithm placed job r slower machine instead contradiction mentioned definition assignr algorithm facilitates doubling approach approximate precisely start beginning first phase 1 set equal load generated first job fastest machine job beginning new phase single phase jobs assigned independently jobs assigned previous phases phase h ends assignr returns fail easy see approach increase competitive factor factor 4 factor 2 due load rest phases except last another factor 2 due imprecise approximation since performance guarantee assignr 2 get theorem 33 algorithm assignr modified achieve competitive ratio 8 4 greedy algorithm simple greedy machine load balancing algorithm due graham 12 gives competitive ratio 2 identical machines case competitive ratio olog n special case considered 7 natural consider whether extensions algorithm lead small competitive ratios respectively general cases related unrelated machines section show unfortunately case precisely show greedy algorithm thetan competitive ratio unrelated machines case thetalog n competitive ratio related machines case contrast olog n 8 competitive ratios respectively produced algorithms presented previous sections consider following greedy algorithm job j assigned upon arrival machine k minimizes resulting load ie machine k minimizes k j broken arbitrary rule lemma 41 greedy algorithm competitive ratio better n unrelated machines proof consider sequence jobs job j cost j machine j cost 1 cost 1 machines ie avoid distinguishing first job jobs refer machine n also machine 0 ffl arbitrarily small positive constant used avoid ties clearly optimal offline algorithm schedule jobs maximum load 1 assigning job j machine j gamma 1 hand greedy algorithm assigns job 1 machine 1 resulting load 1 opposed machine n 1 anywhere else similarly job 2 arrives greedy algorithm assigns 1 note assigning job machine minimum load results algorithm competitive ratio least equal ratio fastest slowest machine speeds machine 2 resulting load 2 instead assigning job machine 1 would produced load 2 ffl likewise job 3 assigned machine 3 forth simple induction argument shows job j always assigned machine j resulting load j giving maximum load n machine n resulting performance ratio n1 ffl made arbitrarily close n lemma 42 competitive ratio greedy algorithm n unrelated machines proof every job j minimum load min p j avoided optimal offline algorithm set jobs assigned machine offline algorithm hand claim maximum load resulting greedy algorithm never exceed sum minimum loads indeed suppose assigning job arrives machine minimizes p j load machine lj gamma 1 j assigned resulting load assigned machine resulting load machine larger either case thus induction lemma 43 greedy algorithm competitive ratio omegagammatio n related machines proof simplicity first assume whenever adding job two different machines result maximum load job assigned faster machine end proof show assumption avoided consider collection machines speeds ranging 1 2 gammak relation k n become clear let n number machines speed 2 gammai suppose n general values chosen sum speeds machines speed 2 gammai equal sum speeds faster machines thus collection jobs would add 1 load machine speed 2 gammai could instead assigned add 1 loads faster machines total number machines consider following sequence jobs first generate n k jobs size 2 gammak followed n jobs size 2 gammakgamma1 forth last generate single job size 1 every machine speed 2 gammaj corresponding job size 2 gammaj simply assigning job corresponding machine offline algorithm schedule jobs resulting maximum load 1 however claim greedy algorithm assigns group jobs machines fast assume induction jobs size 2 gammai assigned load machines speed 2 gammaj equal mink gamma j base case condition simply corresponds machine zero load equation 8 greedy algorithm assign jobs size 2 gammai machines speed resulting load one machines instead assigns one jobs machine speed 2 gammaj j resulting load least nonnegative x greedy algorithm therefore assign job size 2 gammai machine speed 2 gammai slower induction step follows consequently jobs assigned machine speed 2 gammaj load k gamma j single machine speed 1 load k n thus simplifying assumption greedy algorithm always breaks ties favor faster machine greedy algorithm ncompetitive next show avoid simplifying assumption sending large jobs send ffljob size ffl 2 gammai machine speed 2 gammai giving load ffl avoid changing greedy algorithms choice assign large jobs ffl must less 2 gammak smallest possible difference loads resulting large jobs force ties broken favor faster machines require finally ensure ffljob intended machine placed faster machine generate jobs faster machines first require conditions satisfied choosing ffl lemma 44 greedy algorithm competitive ratio olog n related machines proof let l maximum load generated greedy algorithm l maximum load generated optimal offline algorithm structure proof follows first note load fastest machines least l gamma l second show load machines speed v least load machines speed v2 least gamma 4l repeated applications claim imply load machine n times slower fastest machine least l finally use argument similar one used proof lemma 42 show condition hold first consider last job j assigned greedy algorithm machine causing load machine reach since job add l load fastest machine fact new load implies load fastest machines least gamma l suppose load machines speed v least 2l consider set jobs responsible last 2l load increment one machines observe least one jobs call job j assigned offline algorithm machine speed less v hence increase load l since speed v job j increase load machines speeds v2 2l fact job j assigned loads machines speed v least gamma 2l implies loads machines speed v2 least gamma 4l let v speed fastest machines shown machines speed v load least l gamma l iteratively applying claim paragraph shows machines speed v2 gammai load least l gamma l gamma 4il thus every machine speed least vn load least assume contradiction recall since related machines case job j two machines 0 w w j regarded weight job let set machines speed less v max n total weight jobs assigned offline algorithm bounded i62i i62i assumption online algorithm causes load 2l machines implies total weight jobs assigned online algorithm greater 2l contradiction thus acknowledgments indebted david shmoys many helpful discussions r special issue asynchronous transfer mode competitive distributed algorithms concurrent establishment virtual circuits throughput competitive online routing competitive routing virtual circuits unknown duration competitiveness online assignment new algorithms ancient scheduling problem efficient online call control algorithms call preemption communication networks bounds certain multiprocessing anomalies rinnooy kan better algorithm ancient scheduling problem optimal algorithm online bipartite matching online load balancing network flow maximum concurrent flow problem scheduling parallel machines online amortized efficiency list update paging rules approximate solution steiner problem graphs tr amortized efficiency list update paging rules competitive algorithms online problems maximum concurrent flow problem optimal algorithm online bipartite matching scheduling parallel machines online new algorithms ancient scheduling problem call preemption communication networks competitiveness online assignments optimal online algorithm metrical task system online load balancing network flow faster approximation algorithms unit capacity concurrent flow problem applications routing finding sparse cuts fast approximation algorithms multicommodity flow problems competitive multicast routing fast approximation algorithms fractional packing covering problems adding multiple cost constraints combinatorial optimization problems applications multicommodity flows routing admission control general topology networks poisson arrivals competitive routing virtual circuits unknown duration competitive nonpreemptive call control online load balancing temporary tasks load balancing lsub p norm disjoint paths densely embedded graphs online routing permanent virtual circuits improved lower bound load balancing tasks unknown duration routing admission control general topology networks ctr nikhil bansal avrim blum shuchi chawla adam meyerson online oblivious routing proceedings fifteenth annual acm symposium parallel algorithms architectures june 0709 2003 san diego california usa csand imreh scheduling problems two sets identical machines computing v70 n4 p277294 august baruch awerbuch mohammad hajiaghayi robert kleinberg tom leighton online clientserver load balancing without global information proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia jan cosyn karl sigman stochastic networks admission routing using penalty functions queueing systems theory applications v48 n34 p237262 novemberdecember 2004 ashish goel monika r henzinger serge plotkin eva tardos scheduling data transfers network set scheduling problem journal algorithms v48 n2 p314332 september kontogiannis lower bounds competitive algorithms online scheduling unitsize tasks related machines proceedings thiryfourth annual acm symposium theory computing may 1921 2002 montreal quebec canada weifa liang yuzhen liu online disjoint path routing network capacity maximization energyconstrained ad hoc networks ad hoc networks v5 n2 p272285 march 2007 yossi azar edith cohen amos fiat haim kaplan harald rcke optimal oblivious routing polynomial time journal computer system sciences v69 n3 p383394 november 2004 ran adler yossi azar beating logarithmic lower bound randomized preemptive disjoint paths call control algorithms journal scheduling v6 n2 p113129 marchapril yossi azar edith cohen amos fiat haim kaplan harald racke optimal oblivious routing polynomial time proceedings thirtyfifth annual acm symposium theory computing june 0911 2003 san diego ca usa chris harrelson kirsten hildrum satish rao polynomialtime tree decomposition minimize congestion proceedings fifteenth annual acm symposium parallel algorithms architectures june 0709 2003 san diego california usa ran adler yossi azar beating logarithmic lower bound randomized preemptive disjoint paths call control algorithms proceedings tenth annual acmsiam symposium discrete algorithms p110 january 1719 1999 baltimore maryland united states susanne albers stefano leonardi online algorithms acm computing surveys csur v31 n3es sept 1999 allan borodin morten n nielsen charles rackoff incremental priority algorithms proceedings thirteenth annual acmsiam symposium discrete algorithms p752761 january 0608 2002 san francisco california chandra chekuri sanjeev khanna f bruce shepherd allornothing multicommodity flow problem proceedings thirtysixth annual acm symposium theory computing june 1316 2004 chicago il usa mohammad hajiaghayi robert kleinberg tom leighton harald rcke oblivious routing nodecapacitated directed graphs proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia amitai armon yossi azar leah epstein oded regev online restricted assignment temporary tasks unknown durations information processing letters v85 n2 p6772 31 january takwah lam hingfung ting karkeung waiha wong online load balancing temporary tasks revisited theoretical computer science v270 n12 p325340 january marek chrobak claire kenyonmathieu sigact news online algorithms column 10 competitiveness via doubling acm sigact news v37 n4 december 2006 ashish goel adam meyerson serge plotkin approximate majorization fair online load balancing acm transactions algorithms talg v1 n2 p338349 october 2005 sandy irani vitus leung scheduling conflicts bipartite interval graphs journal scheduling v6 n3 p287307 mayjune niv buchbinder joseph naor fair online load balancing proceedings eighteenth annual acm symposium parallelism algorithms architectures july 30august 02 2006 cambridge massachusetts usa yair amir baruch awerbuch amnon barak r sean borgstrom arie keren opportunity cost approach job assignment scalable computing cluster ieee transactions parallel distributed systems v11 n7 p760768 july 2000 arie keren amnon barak opportunity cost algorithms reduction io interprocess communication overhead computing cluster ieee transactions parallel distributed systems v14 n1 p3950 january marek chrobak 2005 offline persepctive acm sigact news v37 n1 march 2006 yi cui klara nahrstedt highbandwidth routing dynamic peertopeer streaming proceedings acm workshop advances peertopeer multimedia streaming november 1111 2005 hilton singapore yi cui baochun li klara nahrstedt achieving optimized capacity utilization application overlay networks multiple competing sessions proceedings sixteenth annual acm symposium parallelism algorithms architectures june 2730 2004 barcelona spain