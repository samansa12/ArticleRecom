firstorder queries finite structures reals investigate properties finite relational structures reals expressed firstorder sentences whose predicates relations structure plus arbitrary polynomial inequalities whose quantifiers range whole set reals constraint programming terminology corresponds boolean real polynomial constraint queries finite structures fact quantifiers range reals seems crucial however observe sentence firstorder theory reals evaluated letting quantifier range finite set real numbers without changing truth value inspired observation show polynomials used linear query expressed uniformly finite structures sentence quantifiers range finite domain structure words linear constraint programming finite structures reduced ordinary query evaluation usual finite model theory databases moreover generic queries taken consideration show reduced even proving queries expressed sentences using polynomial inequalities simple form x b introduction paper motivated two fields computer science heavily rely logic relational databases constraint programming look latter perspective former classical relational database theory 1 database modeled relational structure domain structure fixed universe u possible data elements strings natural numbers typically infinite relations structure contrast always finite model finite tables holding data consequence active domain database consisting data elements actually occurring one relations finite well boolean query mapping databases fixed relational signature true false basic way expressing query firstorder sentence relational sig nature example database containing information children hobbies query parent least hobbies children expressed sentence 8p8c8hchild p c hobbyc since domain database u quantifiers sentence expressing query naturally range whole infinite u thus entirely obvious natural interpretation query always effectively computable firstorder queries indeed computable follows immediately result aylamazyan gilula stolboushkin schwartz 4 simplicity hereafter referred four russians showed order obtain result query suffices let quantifiers range active domain augmented finite set q additional data elements q number quantified variables formula expressing query intuition behind result data elements outside active domain given database alike respect database alternatively choose let quantifiers range active domain thus obtaining semantics quite different natural interpretation example consider databases single unary relation symbol sentence 8xp x always false natural interpretation activedomain interpretation always true fact obvious query expressible natural interpretation also expressible activedomain interpreta tion hull su 11 established implication indeed holds converse implication holds well since activedomain interpretation easily simulated natural interpretation using bounded quantification recent years much attention paid constraint programming languages eg 5 particular 1990 kanellakis kuper revesz demonstrated idea constraint programming also applies database query languages introducing framework con straint query languages 12 important instance framework real polynomial constraints universe u data elements field r real numbers databases relational structures r database relations need longer finite suffices definable finite boolean combinations polynomial inequalities words kary relation structure must semialgebraic subset r k 6 basic way querying real polynomial constraint databases firstorder sentences contain polynomial inequalities addition predicate symbols relational signature example database holds set points r 2 query points lie common circle expressed quantifiers naturally interpreted ranging whole r order evaluate sentence database replace predicate symbol formula polynomial definition corresponding database relation obtain sentence pure firstorder theory reals wellknown theory decidable 15 truth value obtained sentence yields result query real polynomial constraint queries effectively computable finite relations semialgebraic finite relational databases reals form important special case real polynomial constraint databases example want model database holding finite number rectangles either choose store full extents rectangles resulting infinite set points rectangles represented terms linear inequalities obvious way choose store corner points rectangle resulting finite relation present paper investigate whether results four russians hull su mentioned beginning introduc tion carry classical firstorder queries relational databases polynomial constraint queries finite databases reals deed classical case one give alternative activedomain semantics constraint sentences ask whether without loss expressive power note however activedomain quantification defies nature constraint programming means reason intentionally defined potentially finite ranges values hence obvious results mentioned might carry nonetheless found natural analog four russians theorem able establish verbatim analog hullsu theorem case linear polynomials used often case practice result might paraphrased saying finite structures firstorder linear constraint programming reduced ordinary query evaluation usual finite model theory databases development based upon following observation consider prenex normal form sentence firstorder theory reals finite set 0 real numbers exists sequence 0 1 finite sets reals sentence evaluated letting quantifier range rather whole r without changing sentences truth value taking 0 active domain given finite database reals get analog real case four russians theorem reader familiar collinss method quantifier elimination realclosed fields cylindrical algebraic decomposition cad 3 8 surprised observation deed follows less directly obvious adaptation cad construction however give alternative selfcontained proof first principles abstracts away purely algorithmical aspects cad construction focuses logic behind importantly proof provides us basis show case linear polynomials construction sequence departing active domain 0 simulated using linear constraint formula result obtain analog real case hullsu theorem final section paper look queries generic ie distinguish isomorphic databases genericity natural criterion context classical relational databases 2 7 perhaps little less databases reals work 14 proposed alternative spatial genericity criterions based geometrical intu itions nevertheless remains interesting investigate classically generic queries expressed using linear constraint sentences sentences contain polynomial inequalities always express generic queries moment sentence even contains simple inequalities form x already nongeneric furthermore example due gurevich 1 exercise 1727 showing generic query expressible simple inequalities without words simple inequalities though inherently nongeneric viewed isolation help express generic queries natural question ask whether general linear polynomial inequalities help even answer question negatively thus providing partial rectification kupers original intuitions 13 incorrect stated gurevich example mentioned real formulas let r field real numbers real formula firstorder formula built atomic formulas form p 0 p multivariate polynomial real coefficients using logical connectives quantifiers obvious manner among x tuple real numbers satisfaction phi r substituted x denoted r defined standard way usual formula without free variables called sentence example 21 formula phia b c j 9x b c condition like easily expressed terms conditions form p 0 p 0gammap 0 r r 6j phi5 3 1 real formula prenex normal q either 9 8 quantifierfree k1 n subsets r say phia satisfied evaluates true let quantifier q range rather whole r example 22 let phi sentence main result section stated follows theorem 23 let phix prenex normal form real formula finite subset r exists sequence k finite subsets r tuples k r example 24 trivial illustration let formula 9x 2 x r 2 remainder section give simple proof theorem 23 introduce various auxiliary notions rely heavily later sections first define following natural equivalence relation r definition 25 two points b r n called equivalent respect phi denoted j polynomial occurring phi sign positive zero negative b extend equivalence relation inductively lower dimensions equivalence classes dimension cylindrical equivalence classes next lower dimension definition 26 let n assume j already defined r i1 ff fi conversely fi ff b fi j ff ff fi real note lemma 27 j finite index r proof downward induction case set equivalence classes r i1 lying ie intersecting line fa ff j ff 2 rg clearly injection mapping equivalence class c r set fa j 2 cg since j finite index r i1 finite number possible values hence j finite index r well relevance equivalence relations defined demonstrated following lemma use following stands formula q i1 x lemma 28 let k n let b equivalent points r r r lemma proven straightforward induction omitted notion domain sequence defined next crucial technical lemma following definition directly imply theorem 23 definition 29 let k finite subset r sequence finite subsets r called domain sequence respect phi k since j finite index know domain sequence always exists lemma 210 let k sequence wrt phi let proof downward induction case n note concentrate case case q lar denote implication left right assume r exists i1 2 r r according definition 29 exists 0 lemma 28 since r also r thus conclude implication right left straightforward theorem 23 immediately follows case lemma reader may noticed never relied fact polynomial inequalities p 0 occurring real formula p really polynomial theorem holds firstorder language real functions observation substantiates claim made introduction proof abstracts away purely algorithmical aspects collinss cad construction focuses logic behind course departing cad construction one gets effectively computable version theorem 23 give alternative construction linear case section 4 3 queries real databases fix relational signature oe consisting finite number relation symbols associated arity ffs real database b structure type oe r domain assigning relation oe finite relation b rank ffs r active domain b denoted adomb finite set real numbers appearing one relations b query mapping databases type oe true false basic way expressing queries firstorder formulas look like real mulas important additional feature use predicates form sp relation symbol oe arity p polynomial phix query formula b database satisfaction defined standard way par ticular phi sentence expresses query yielding true input database b iff b example 31 assume 2 query points lie common circle expressed 9x 0 9y 0 9r8x query point whose coordinates greater equal 1 expressed 1 note quantifiers query formulas naturally interpreted ranging whole r phi query sentence b database produce real sentence phi b natural way follows let atomic subformula phi relation symbol oe know b finite relation consisting say tuples g replace phi obvious b r assume query sentence phi prenex normal b database subsets r say phi satisfied b evaluates true b let quantifier q range rather whole r given preceding discussion following theorem follows readily material previous section theorem 32 let phi query sentence let b database adomb 1 domain sequence respect phi b theorem analog real case four russians theorem 4 mentioned introduction 4 linear case section focus linear queries expressed query sentences occurring polynomials linear prove linear query expressible linear query sentence quantifiers range active domain input database thereto introduce particular way construct domain sequences active domain database based gaussian elimination show construction simulated uniform ie databaseindependent way linear query formula embarking point notion equivalence points respect given real formula phi definitions 25 26 depends set polynomials occurring phi also talk equivalence respect given set polynomials let pi set linear polynomials polynomial p form c p define sequence linear polynomials inductively follows c q words pi set linear polynomials obtained pi i1 gaussian elimination equivalence points r respect pi characterized terms polynomials pi follows proposition 41 let 1 n let j b respect pi polynomial pi sign positive zero negative b proof sketch downward induction case according definition 26 j b ff fi ff j b fi conversely simplicity ignore part present sketch equivalently induction ff fi polynomial pi i1 sign ff b fi sim plicity ignore sketch polynomials equivalently ff fi p 2 pi i1 seen equivalent pac p definition pi saying p 2 pi sign b let phi linear query sentence q 1 prenex normal form let b database recall definition real described previous section note since phi linear phi b linear well fix pi set polynomials occurring phi b consider sequence pi defined observe lemma 42 let 1 n pi finite union sets form number sets coefficients c set depend particular database b proof consider case consists polynomials occurring phi b elements pi classified two different kinds already occur phi form e p polynomial occurring phi e 2 adomb latter case pgammae may assumed occur possible omit argument assumption without loss generality hence lemma holds n case n follows easily induction position define particular domain sequence respect phi b based sequence definition 43 linear sequence b respect phi sequence 0 inductively defined follows 0 equals adomb 1 0 proposition 44 linear sequence b respect phi domain sequence respect proof according definition 29 must show consider definition terms 0 43 distinguish following possibilities ff 1 2 ff 3 maximal element e e 1 ff e 2 minimal element ff e 2 obvious ff 0 2 moreover way defined clear polynomials pi sign ff ff 0 hence proposition 41 proposition follows one final lemma able state prove main result section lemma 45 0 n exists finite set p linear polynomials database b ith member linear sequence b respect phi equals z independent b proof induction case trivial since definition terms 0 definition 43 clearly consists four polynomials clearly form p 00 induction igamma1 form p 000 combining expressions using tedious straightforward substitution process obtain desired form theorem 46 linear query sentence phi linear query sentence psi database b b psi adom denotes quantifiers psi range active domain database proof let linear sequence b respect phi theorem 32 proposition 44 know b write latter explicitly b case 8 similar lemma 45 know 1 written fpy pg equivalently 9y ranges adomb replacing similar manner obtain desired sentence psi 5 generic queries two databases b b 0 relational signature oe called isomorphic relation symbol oe query yields result isomorphic databases called generic example assume oe consists single binary relation symbol databases type oe viewed finite directed graphs whose nodes real numbers course query expressed language l pure firstorder sentences oe ie containing polynomial inequalities generic examples generic queries graph connected number edges even language l consisting query sentences inequalities simple queries easily expressed pointed introduction however generic queries expressible l l able prove similar gain expressiveness moving l full linear query sentences theorem 51 linear query sentence phi expressing generic query query sentence psi l database b theorem 46 adom denotes quantifiers range active domain know theorem 46 activedomain interpretation without loss generality proof sketch first observe lemma 52 let p linear polynomial exists real formula involving simple inequalities form x disjunction conjunction negation natural number 1 1 aside would like reader note possible specialize theorem 46 query sentences using different construction domain sequence sufficiently large real number 0 tuple set fa true lemma proven noting application multivariate polynomial p viewed application another univariate polynomial particular sufficiently large sign latter application determined sign leading coefficient difficulty overcome univariate polynomial depends particular however seen depends essentially way ordered omit details using genericity phi exploit lemma prove theorem follows define psi query sentence obtained replacing polynomial inequality p 0 occurring phi corresponding formula p provided lemma let b database let size adomb let 0 sufficiently large let ae orderpreserving bijection adomb fa g psi first equivalence holds phi generic second equivalence obvious lemma definition psi third equivalence holds ae orderpreserving psi 2 l query sentences l cannot distinguish databases isomorphic via orderpreserving bijection conclude generic queries expressible l like even cardinality relation connectivity graph expressible linear query either non expressibility l addressed length grumbach su 9 grumbach su tollu 10 also obtained inexpressibility results linear queries using complexity argu ments particular showed context rationals q rather reals r linear queries complexity class ac 0 even cardinality connectivity acknowledgment grateful bart kuijpers careful reading earlier drafts material presented paper r foundations databases universality data retrieval languages geometric reasoning logic algebra constraint logic programming selected search geometrie algebrique reelle computable queries relational data bases quantifier elimination real closed fields cylindrical algebraic decom position finitely representable databases linear constraint databases domain independence relational calculus constraint query languages expressive power relational calculus arithmetic con straints tr ctr leonid libkin collapse result constraint queries structures small degree information processing letters v86 n5 p277281 15 june gabriel kuper jianwen su representation independent language planar spatial databases euclidean distance journal computer system sciences v73 n6 p845874 september 2007 michael benedikt martin grohe leonid libkin luc segoufin reachability connectivity queries constraint databases proceedings nineteenth acm sigmodsigactsigart symposium principles database systems p104115 may 1518 2000 dallas texas united states michael benedikt martin grohe leonid libkin luc segoufin reachability connectivity queries constraint databases journal computer system sciences v66 n1 p169206 01 february michael benedikt leonid libkin relational queries interpreted structures journal acm jacm v47 n4 p644680 july 2000 evgeny dantsin thomas eiter georg gottlob andrei voronkov complexity expressive power logic programming acm computing surveys csur v33 n3 p374425 september 2001