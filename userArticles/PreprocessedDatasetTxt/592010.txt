extending design environments software architecture design designing complex software system cognitively challenging task thus designers need cognitive support create good designs domainoriented design environments cooperative problemsolving systems support designers complex design tasks paper present architecture facilities argo domainoriented design environment software architecture argos architecture motivated desire achieve reuse extensibility design environment separates domainneutral code domainoriented code distributed among active design materials opposed centralized design environment argos facilities motivated observed cognitive needs designers facilities extend previous work design environments enhancing support reflectioninaction adding new support opportunistic design comprehension problem solving b figure 1design environment facilities janus adapted fischer 1994 nizational guidelines opinions fellow project stakeholders domain experts design environments suchasframer lemke fischer 1990 janus fischer 1994 hydra fischer et al 1993 vdde voice dialog design environment sumner bonnardel kallak 1997 support ectioninaction figure 1 shows facilities family design environments domainoriented construction kit facility allows users visualize manipulate design construction analyzer facility critiques design give design feedback linked hypertext argumentation goal speci cation facility helps keep critics relevanttothe designers objectives ectioninaction also supported simulation facilities allow whatif analysis design evaluation catalog example designs accessed via catalog explorer facility designers gain design feedback timely relevant current design task design environments address timeliness linking critics model design process instance framer uses checklist model process designing user interface window given time designer works one checklist item critics relevant item active design environments address relevance linking critics speci cations design goals instance janus hydra allow designer specify goals kitchen oorplans thus activate critics relevant stated design goals furthermore hydra uses critiquing perspectives ie explicit critiquing modes activate critics relevanttoany given set design issues deactivate irrelevant critics 22 architectural styles work software architecture perry wolf 1992 focused representing systems composed software components connectors garlan shaw 1993 architectural styles constrain inform architectural design de ning types components connectors available ways may combined abowd allen garlan 1993 styles expressed set style rules simple architectural style pipeand lter de nes components batch processes standard input output streams connectors data pipes one pipeand lter style rule architecture contain cycles argo supports c2 architectural style taylor et al 1996 c2 component messagebased style designed model applications graphical user interface style emphasizes reuse ui components dialogs structured graphics models constraint managers medvidovic oreizy taylor 1997 c2 style informally summarized layered network concurrent components communicate via message broadcast buses components may send messages requesting operations upward noti cations state changes downward buses broadcast messages sent one component components next higher lower layer component top bottom interface top interface component speci es noti cations handles requests emits upward bottom interface component speci es noti cations emits downward requests handles 23 software architecture design tools design tools domain software architecture tended emphasize analysis wellformedness code generation aesop system allows style speci c design tool generated speci cation style garlan allen ockerbloom 1994 date system allows construction running system architectural description set reusable software components batory omalley 1992 although software architecture tool amphion similar allows users enter graphical speci cation system generate running program lowry et al 1994 eachof systems provides support design representation manipulation transforma tion analysis none explicitly supports architects cognitive needs argo generate code combine software components running system however main contribution argo software architecture communityis emphasis cognitive needs kbsa adm benner 1996 software design environment embodies results many research projects stemming seminal vision knowledgebased software development support green et al 1983 kbsa adm many features common argo including critics list multiple coordinated models system design process modeling kbsa adm intended package previous research results fullfeatured software developmentenvi ronment contrast argo intended explore possible features explicitly support identi ed cognitive needs support cognitive needs kbsa adm argo inspired previous work design environments however believe argo integrated reusable scalable infrastructure yields better cognitive support 6 robbins hilbert redmiles critics design knowledge feedback control situated analysis internal design architect representation perspectives design interactions figure 2design environment facilities argo 3 overview argo decision model process model figure 2 provides overview selected facilities argo software architecture design environment architect uses multiple coordinated design perspectives figure 3 view manipulate argos internal representation architecture stored annotated connected graph critics monitor partial architecture manipulated placing feedback architects list figure 4 argos process model figure 5 serves architect resource carrying architecture design process decision model lists issues architect currently considering criticism control mechanisms use decision model ensure relevance timeliness feedback critics comparison figure 1 shows facilities janus family design environ ments like janus argo provides diverse set facilities support ectionin action including construction critiquing mechanisms argo however extends facilities byintegrating exible process model list explicitly support opportunistic design multiple coordinated design perspectives aid comprehension problem solving cognitive theories facilities support discussed section 5 subsections describe argos facilities last subsection provides usage scenario describes howanarchitect mightinteract argo 31 critics critics support decision making continuously pessimistically analyzing partial architectures delivering design feedback critic performs analysis independently others checking one predicate delivering one piece design feedback critics provide domain knowledge varietyoftypes correctness critics detect syntactic semantic aws completeness critics remind architect incomplete design tasks consistency critics point contradictions within figure 3 three architecture design perspectives component component perspective top shows conceptual component communication classes perspective middle shows modular structure resource component perspective bottom shows machine operating system resource allocation small window lower left shows running klax game represented architecture 8 robbins hilbert redmiles design optimization critics suggest better values design parameters alternative critics present architect alternatives given design decision evolvability critics consider issues modularization ect e ort needed change design time presentation critics look awkward use notation reduces readability tool critics inform architect available design tools times tools useful experiential critics provide reminders past experiences similar designs design elements organizational critics express interests stakeholders development organization types serve describe aggregate critics may understood controlled groups critics maybeofmultiple types new types may de ned appropriate given application domain altogether authored fty critics including examples eachtype examples architecture critics given table 1 expect critics authored project stakeholders various reasons initial set critics developed domain engineer constructing domainoriented design environment practicing architects may de ne critics capture experience building systems distribute critics architects organization keep use future similar authoring activitywas observed gantt nardi found groups cad tool users often members called gardeners assumed role codifying solutions local problems gantt nardi 1992 practicing architects may also ne existing critics adding special cases predicates modifying feedback example one way architect resolve criticism suggest modi cation critic raised issue researchers may also de ne critics support architectural style existing literature architectural styles system design rich source advice made active via critics many organizations already design guidelines currently require designers manually check design software componentvendors may de ne critics add value components sell reduce support costs example critic supplied ascii spell checking component might suggest upgrading unicode version architect declares internationalization goal interactions among stakeholders design community guide evolution critics architect understand particular critics feedbackor believes incorrect may send structured email argo author critic opens dialog knowledge providers ie domain experts consumers ie practicing architects critics may revised relevant timely way critics thoughtofas proactive answers organizational memory terveen selfridge long 1993 ackerman mcdonald 1996 possible improvements argos support organizational memory include associating multiple experts critic prioritizing experts based organizational distance tracking email dialogs requests changes forgotten table 1 selected argo architectural critics name critic critic type decision category missing memory rqmts completeness machine resources component choice alternative component selection many components evolvability topology hard combination test organizational component selection generator limitation tool component selection enough reusable components consistency reuse avoid overlapping nodes presentation readability questionable experiential portability explanation problem memory required run component speci ed components could place list components many components level decomposition easily understood need use components together please make arrangements testing manager default code generator cannot make full use component fraction components marked reusable belowyour stated goals overlapping nodes haveany meaning notation obscures node labels colleague name person di culty using component name os 32 criticism control mechanisms formalizing analyses rules thumb used practicing software architects could produce hundreds critics provide architect usable amountof information subset applicable critics must selected execution given time critics must controlled make e cient use machine resources primary focus e ectiveinteraction architect criticism control mechanisms predicates used limit execution critics relevant timely design decisions considered ar chitect example critics related readability active architect trying concentrate machine resource utilization computing relevance timeliness separately critic predicates allows critics focus entirely identifying problematic conditions product ie partial architecture leaving cognitive design process issues criticism control mechanisms separation concerns also makes possible add value existing critics de ning new control mechanisms 33 list design feedback large numbers critics must managed overwhelm distract architect list user interface figure 4 presents figure 4the architects list design feedback architect nondisruptiveway item added list architect may act immediatelyormay continue manipulating design uninterrupted items come several sources critics post items presenting analyses process model posts items remind architect nish tasks progress architect may post items reminders return deferred design tasks architects may address items order tabs list lter items categories item tied design context whichitwas generated context includes state design background knowledge domain experts contact within design community architect selects item upper pane list window lower pane displays details open design issue possible resolutions doubleclicking item highlights associated architectural elements visible design perspectives item selected architect may manipulate critic produced item send email author followhyperlinks background information 34 design perspectives design perspective de nes projection subgraph design materials relationships represent software architecture perspectives chosen present architectural elements relevant limited set related design issues figure 3 shows three perspectives system modeled argo systemshown simple video game called klax falling colored tiles must arranged rows columns component component perspective nodes represent software components connectors arcs represent communication pathways small circles components represent communication ports component resource component perspective hierarchically groups modules operating system threads processes classes perspective maps conceptual components classes hierarchy programming language classes implement 35 process model argo uses process model support architects carrying design processes design processes di cult state prescriptively exploratory tend driven exceptions often change new requirements con straints opportunities uncovered cugola et al 1995 rather address traditional process modeling concerns eg scheduling enactment approach focuses cognitive issues design process annotating task types decisions architect must consider task use simpli ed version idef0 process notation ifip 1993 models dependencies tasks without prescribing temporal ordering support cognitive needs argo must maintain model aspects architects state mind speci cally argos decision model lists decision types architect currently considering information used control critics relevant timely tasks hand primary source information used determine state decision model decision type annotations tasks process model architect may edit decision model directly design manipulations performed architect also indicate decisions currently considered figure 5 shows example coarsegrained architecture design process model two tasks choose machine resources choose rsrcs choose reusable components choose comps second task annotated decision type reuse architect indicates working choosing reusable components annotations cause argo enable critics support reuse decisions design process model shown figure 5 fairly simple one partly c2 style impose explicit process constraints partly example consider issues organizational policy practice process would complex 36 usage scenario section describe howanarchitect mightinteract argo working several steps transforming basic klax game shown figure 3 figure 5a model design process multiplayer spelling game basic klax game uses sixteen separate components including components generate colored tiles display tiles determine player aligned matching tiles spelling game variation use basic architecture new components generate display letters determine player aligned letters spell word working architecture basic klax game architect places tileartist component architecture shortly thereafter alternative critic posts item indicating another component companys library letterartist de nes interface considered alternative architect knows letterartist appropriate basic klax takes action suggestion inspires idea building spelling variation leaves item list later basic klax completed architect reviews remaining items reminded investigate spelling variation replaces tileartist letterartist de nes new components nextletter spelling replace nexttile matching respectively architect replacing components architecture temporarily inconsistent state critics check consistency componentinterfaces may post items describing interface mismatches items automatically removed new components connected interfaces fully de ned adding two new components architecture may cause consistency critic current percentage reused components falls stated reuse goals satis ed choice components communication relationships architect uses argos process model decide next process model contains task choosing reusable components task allocating machine resources depends output point architect decides work machine resource allocation marks task progress enables critics support design decisions related machine resource allocation three new items posted indicating three new components figure 6architects workspace modifying klax allocated host operating system process architect turns resource component design perspective nds nodes representing tileartist nexttile matching removed new nodes letterartist nextletter spelling added connected process host architect connects new components old ones connected point occurs architect serverside spelling component might slow future multiplayer product connects spelling game client process instead viewing component component perspective resource component perspective architect able understand interactions two aspects architecture figure 6 shows architect would see point two design perspectives open several new potential problems reported critics selected item arose spelling component requires memory available usage scenario architect engaged constructive dialog design critics critics prompted architect new possibilities pointed inconsistencies architect used argos process model help decide design task address next used two design perspectives visualize manipulate aspects architecture relevanttotwo distinct design issues 14 robbins hilbert redmiles later two aspects scenario highlight new facilities argo found previous work dodes 4 implementation section discusses implementation argo base discussion two prototypes initial prototype implemented smalltalk currentversion implemented java first discuss core elements criticism control mechanisms perspectives processes describe argos architecture representation architectures designed argo 41 critics argo critic implemented combination 1 analysis predicate type decision category attributes determining relevance 3 list item given design feedback stored list item contains headline description issue hand contact information critics author hyperlink information encode critics programming language predicates determining languages best suited expressing critics topic future research critic associated one type design material applied instances type critics may access attributes design materials applied traverse relationships design materials critic predicates written pessimistically unspeci ed design attributes assumed havevalues cause critic table 2 presents one critic detail argo provides critic runtime system executes critics background thread control critics may run periodically triggered speci c architecture manipulations execution critic applies analysis predicate evaluate design posts copy item appropriate another thread control periodically examines item architects list removes items longer applicable 42 criticism control mechanisms criticism control mechanisms implemented predicates determine critic enabled argo uses several criticism control mechanisms one disable critic following examples criticism control mechanisms decide critics enabled comparing information provided architect attributes critics architects may hush individual critics rendering temporarily disabled feedback felt inappropriate intrusive allows architects defer issues raised bya particular critic without risk leaving critic disabled inde nitely argos user table 2 details invalid connection critic attribute value name invalid connection design material component types f correctness g decision categories f component selection message flows g hushed false smalltalk predicate comp invalidservices inputs comp outputs select issatisfied invalidservices isempty feedback component needs following messages sentor received present list messages author jrobbins icsuciedu moreinfo http wwwicsuciedu pub arch argo v05 docs interface allows groups critics enabled disabled bytype allows architect control groups critics easily another control mechanism checks critics decision types listed decision model keeps critics relevant tasks hand criticism control mechanisms normally enhance relevance timeliness ever relevance timeliness reduced criticism control mechanisms use incorrect information example architect mistakenly indicates given issue interest architect see feedback related issue might mistakenly assume architecture problems situation avoided byhushing critics instead disabling using awell designed process reminds architect review issues argo advises architect check decision model list becomes overly full many items suppressed number suppressed items computed occasionally running disabled critics without presenting feedback 43 design perspectives argo perspectives objects de ne subgraph design materials current design twotypes perspectives de ned argo predicate ad hoc predicate perspectives contain predicate selects subgraph design adhoc perspectives contain explicit list design materials relationships latter mechanism allows manual construction perspectives via diagram editor new design material instance added design predicate perspectives automatically include appropriate whereas adhoc perspectives contain new material explicitly added perspective 44 process model argos process modeling plugin provides simpli ed process modeling notation based idef0 figure 5 design process modeled task network task design process works input produced upstream tasks produces output use bydownstream tasks control model mandated tasks performed order provided needed inputs available tasks repeated anynumber tasks progress given moment task marked status future progressor nished task also marked list decision types status information shown graphically via color process diagram attributes used update decision model architect indicates task considered nished design environment use cue generate additional criticism perhaps marking task still progress high priority items pending process de ning evolving process referred metaprocess complex evolutionary task architects may need support process model argo rstclass represented connected graph active design materials architect may de ne modify process model via facilities used work architectures multiple perspectives may de ned view process critics may operate process model check wellformed guide construction modi cation eg output task used another task techniques used control architecture critics used process critics including modeling metaprocess process critics relevant timely abilitytochange process gives exibility individual architects process critics communicate enforce external process constraints 45 design environment architecture figures 1 2 indicate facilities available architects give little indication design environment implemented janus similar systems tended one major software component facility components form knowledgerich design environment tight user interface data control integration thomas nejmeh 1992 interest software architecture motivated us seek exible extensible architecture retaining fairly high level integration figure 7 presents argos architecture virtual machine lowest layer provides domainneutral infrastructure user interface components including support representing connected graphs multiple perspectives critic runtime system list logging facilities domainspeci c plugins built shared softarch document users active design document shared process document softarch plugin adds support code generation simulation process plugin adds control decision model domainneutral kernel connected graphs perspectives rationale log critic runtime list decision model reusable interface elements active design documents store architectures reusable design templates palettes active design materials critics code generation templates simulation parameters etc figure 7argos architecture presented virtual machine top infrastructure needed plugins typically provide pervasive functionality cannot built particular design material example code generation support useful design materials software architecture domain domainoriented artifacts stored active documents top layer documents active contain design materials eg software components carry domain knowledge behavior form critics simulation routines code generation templates documents may contain palettes design materials designs reusable design templates process fragments supporting artifacts one advantage architecture artifacts various supporting domains may used domain coherent body concepts relationships found given problem area supporting domain domain problem area secondary concern designer useful completing design task example software architects primary design domain construction systems software components whereas recording managing design rational domain concern important architects secondary con struction argo plugins software architecture process modeling design rationale may available simultaneously providing software architects rstclass supporting artifacts process rationale supporting artifact may manipulated visualized critiqued designing architecture shift away monolithic knowledgerich design environment manipulates passive design materials modular domainneutral infrastructure allows architect interact knowledgerich active design materials trend toward distributing knowledge behavior objects interest observed general rise objectoriented componentbased approaches software design active design materials thought rstclass objects local attributes methods analysis predicates critics thought methods critics cannot easily associated one design material may associated one design perspectives simplicity figure 2 presents critics looking design literal presentation would show critics associated node looking around neighbors advantages shift include increased extensibility scalability separation concerns design environment stronger encapsulation design materials encapsulation enhanced attributes needed analysis made local private design materials thus supporting local name spaces data typing conventions increases extensibility design material may packaged analyses thus de ne semantics need anticipated design environment builder scalability number critics increased central repository critics critics simply travel design materials concerns separated design environment provides infrastructure support analyses packaged critics need perform analysis advantages support evolution architectures design environments software architecture communities time ective support diverse design decisions depends architects ability obtain manage large numbers critics javaversion argo design materials critics may dynamically loaded internet example software component marketplace architect mightdownload several component design materials try current architecture consider resulting design feedback make informed component selection 5 cognitive theories extensions dode approach extensions previous design environment facilities motivated theories designers cognitive needs speci callywe extend previous design environment facilities enhancing support ectioninaction adding new support cognitive needs identi ed theories opportunistic design comprehension problem solving theories identify cognitive needs designers serve de ne requirements design environments subsections describe argo addresses requirements table 3 summarizes argos support cognitive needs 51 ectioninaction 511 theory discussed section 21 schoens theory ectioninaction indicates designers iteratively construct ect revise eachintermediate partial design guindon krasner curtis note e ect part study software developers guindon krasner curtis 1987 calling serendipitous design noted developers worked handson design mental model problem situation improved hence improving design software architectures evolutionary artifacts constructed incrementally result manyinterrelated design decisions made extended periods time visualize design process path traced space branching design alternatives particular software architecture table 3 argo features cognitive theories support critics prolpmcroeuwslsteibnmpatlserordfieoervlsdebtrolacapkuptihnogrship crproeoemnscteinsstduaeoptriueossrnstoapcneordcintipeicvsesesslsfimistic kept relevent timely produce feedback links toapcdrulolsocltiweosmtsiczhraiobtilces despirgoncepsesrespdietcintigves reflectioninaction diversity knowledge x evaluation design xx providing missing knowledge x x opportunistic design timliness x reminding process flexibility x xx process guidance x x process visibility x x comp problem solving dividing complexity x multiple perspectives match multiple mental models thought product one possible paths space choices point critically ect alternatives available later every decision potential requiring earlier decisions reconsidered traditional approaches software architecture analysis require architects make numerous design decisions feedback provided analyses evaluate products relatively complete paths design space without providing much guidance individual decision points result substantial e ort may wasted building poor decisions feedbackisavailable indicate existence problems fewer design alternatives explored furthermore analysis performed extended design episodes may di cult identify exactly decision path architect initially went wrong diverse analyses required support architects addressing diverse design issues performance security faulttolerance extensibility researchto date produced diverse set architectural analysis techniques include static techniques determining deadlock based communication protocols components allen garlan 1994 checking consistency architectural nements moriconi qian riemenschneider 1995 well dynamic techniques architecture simulation luckham vera 1995 need diversity analysis driven diversity project stakeholders potentially con icting opinions experts software architecture eld garlan 1995 curtis krasner iscoe note con icting requirements thus design evaluation criteria major problem software development general curtis krasner iscoe 1988 con ict naturally arise architecture design analysis techniques capable accommodating accommodating con ict analysis yields complete support whereas forbidding con ict essentially prevents architects presented multiple sides design issue consider architectural styles provide design guidance suggesting constraints component connector topology given architecture may satisfy rules several diverse styles simultaneouslyfeedback items related styles useful even contain con icting advice 512 support argo argo supports ectioninaction critics list critics deliver knowledge needed evaluate design decisions list serves knowledge inbox presenting knowledge various sources soon add visual indicators draw architects attention design materials pending criticism silverman mezher 1992 terveen stolze hill 1995 list informative assumption described together support decision making allowing architect browse potential design problems guideline violations expert opinions existing software analysis techniques extremely powerful detecting well de ned properties completed systems memory utilization perfor mance approaches adhere call authoritative assumption support architectural evaluation proving presence absence well de ned properties allows give de nitive feedback architect may limit application late design process architect committed substantial e ort building unanalyzed decisions approaches also tend use interaction model places substantial cognitive burden architects example architects usually required know availability analysis tools recognize relevance particular design decisions explicitly invoke relate output back architecture model interaction draws architects attention away immediate design goals toward steps required get analytical feedback explicit invocation external tools scales well terms machine resources terms human cognitive abilitywe believe cognitive burden interacting external tools may enough prevent e ective use argo follows dode tradition using call informative assump tion architects ultimately responsible making design decisions analysis used support architects informing potential problems pending decisions critics pessimistic need go far prove presence problems fact formal proofs often possible even meaningful partial architectures heuristic analyses identify problems involving design details may explicitly represented architecture either model abstract architecture partially speci ed critics pessimistically predict problems evident partial design positively detect problems quickly evident partial design typically within seconds design manipulation introduces problem criticism control mechanisms help trade early detection relevance current goals concerns cases relevant design details speci ed critics produce authoritative feedback unfortunately design issues inherit tradeo prevent achieving informative authoritative feedback always gap making decision analysis decision gap allows passing time expenditure e ort loss cognitive context one decision analyzed isolation gap may small feedbackisat best informative decision interacts others yet made analysis deferred groups interrelated decision made gap necessarily larger feedbackmay authoritative interactions known however compromise informative vs authoritative tradeo existing analysis tools modi ed make pessimistic assumptions cases partial architectures lack information needed authoritative analysis existing critics controlled achieve certain degree con dence providing feedback alternatively external batch analysis tools paired tool critics remind architect tools would useful example tool critic could watch modi cations ect result batch analysis check architecture state analyzed ie syntax errors would prevent particular analysis rerun batch tool parse output items links back design context case critics knowledge tools available development environment applicable whereas tools provide architectural domain knowledge reusing existing analysis tools one way produce new critics expect critics written modi ed domain engineers domain experts ven dors practicing architects argos approach helps ease critic authoring critics pessimistic critic authors need coordinate activities 22 robbins hilbert redmiles authors avoid giving con icting advice critics need consider relevance timeliness argos infrastructure eases critic authoring providing framework implementing critics user interface managing critics feedback templates critics info web pages 52 opportunistic design 521 theory customary think solutions design problems terms hierarchical plan hierarchical decomposition common strategy cope complex design situations however practice designers observed perform tasks opportunistic order hayesroth hayesroth 1979 guindon krasner curtis 1987 visser 1990 cognitive theory opportunistic design explains although designers plan describe work ordered hierarchical fashion actuality choose successive tasks based criteria cognitive cost simply stated designers followeven plans order choose steps mentally least expensive among alternatives cognitive cost task depends background knowledge designers accessibility pertinent information complexity task designers background knowledge includes design strategies schemas soloway et al 1988 lacking knowledge structure solution proceed particular task likely delay task accessibility information may also cause deviation planned order designers must search information needed complete task task might deferred complexity task roughly corresponds number smaller tasks comprise priority importance step primary factor supersedes least cost criteria priority importance may set external forces eg organizational goal contract designers may also set priorities observations designers placed high priorityonoverlooked steps errors visser 1990 thus theory opportunistic design outlines natural design process designers choose next steps minimize cognitive cost however inherent dangers natural design process mental context switches occur designers change one task another starting new step revisiting former one designers must recall schemas information needed task kept mind immediately preceding task inconsistencies evolve undetected requirements maybeoverlooked forgotten designer focuses engaging ones e ciency lost many context switches guindon krasner curtis observed following di culties main breakdowns observed 1 lack specialized design schemas 2 lack metaschema design process leading poor allocation resources various design activities 3 poor prioritization issues leading poor selection alternative solutions 4 di culty considering stated inferred constraints de ning solution 5 di cultyin performing mental simulations many steps test cases 6 di culty keeping track returning subproblems whose solution post poned 7 di culty expanding merging solutions individual subproblems form complete solution guindon krasner curtisone implication designers would bene use process modeling common process models support stakeholders carrying prescribed activities eg resolving bug report software process research focused developing process notations enactment tools help ensure repeatable execution prescribed processes however focus repeatable processes process tools tended restrictive enforcement process steps design environments allow bene ts opportunistic prescribed design process allow possible augment human designers abilities choose next design task performed help designers providing information make context switch process support exhibit following characteristics accommodate real design process described theory opportunistic design address problems ed guindon krasner curtis visibility helps designers orient process thus supporting designer following prescribed process indicating opportunities choice design process model able represent done far possible next visibility enables designers take series excursions design space reorient afterwards continue design process flexibility allows designers deviate prescribed sequence choose goal problem e ective work designers must able add new goals otherwise alter design process understanding design situation improves process model serve primarily resource designers cognitive design processes secondarily constrainton allowing exibility increases need guidance reminding guidance suggests many possible tasks designer perform next opportunistic design indicates cognitive costs lower tasks ordered minimize mental context switching guidance sensitive priorities eg schedule constraints must also considered guidance include simple suggestions criticisms may also include elaborate help explanations potential design strategies arguments design alternatives reminding helps designers revisit incomplete tasks overlooked alternatives reminding needed design alternatives many design processes complex driven exceptions timeliness applies delivery information designers information design strategies provided designers timely fashion plan deviations context switches maybeavoided achieving timeliness depends anticipating designers needs even approximate representation designers planned steps aid achieving timeliness 522 support argo motivated theory opportunistic design wehave attempted move prede ned processes force certain ordering design decisions exible process models properties outlined extend previous work design environments byintroducing explicit model design process progress information exible list user interface presenting design feedback argos process model supports visibilityby displaying process archi tects progress visibility supported availabilityofmultiple perspectives process example architect maychoose perspective shows parts process lead certain goal furthermore list presents list issues architect may consider next several authors noted traditional sequential work ow systems adequately support exibility proposed use constraintbased process models dourish et al 1996 glance pagani pereschi 1996 argo exibility allowed simple fact argo use process model constrain architects actions architect may address item perform design manipulation time furthermore exibilityissupported architects ability modify process model better represent mental model design process process critics process perspectives metaprocess support architect devising good design process domain currentversion argo guidance provided implicitly layout process model prioritization items however theory opportunistic design suggests guidance based part mental context required perform task pending items could prioritized based rough estimate cognitive cost addressing list process model together support reminding showing issues yet addressed list reminds architect issues addressed immediately process model shows tasks must addressed eventually critics items remind architect issues need reconsidered problems arise beyond knowledge contained critics process model architect also create items contain arbitrary text links personal reminders continuous application critics enables argo provide timely feedback criticism control mechanisms help make continuous critiquing practical reduce distractions ie unneeded context switches due irrelevant feedback addition improving design decisions timely feedback helps architect make timely process decisions eg design excursion complete past decision need reconsideration 53 comprehension problem solving 531 theory theory comprehension problem solving observes designers must bridge gap mental model problem situation formal model solution system kintsch greeno 1985 fischer 1987 situation model consists designers background knowledge problemsolving strategies related current problem design situation system model consists designers knowledge appropriate formal description problem solving design proceeds successive nements mapping elements design situation elements formal description successive nements equated increased comprehension hence name theory domain software designers must map problem design situation onto formal speci cation programming language pennington 1987 soloway ehrlich 1984 domain situation model consists knowledge application domain programming plans design strategies mapping appropriate elements domain formal description system model consists knowledge speci cation programming languages syntax semantics programming plans design strategies enable designers successively decompose design situation identify essential elements relationships compose elements relationships elements solution successive steps designers acquire new information situation model system model pennington observed programmers bene ted multiple representations problem iterative solutions pennington 1987 namely multiple representations program module decomposition state data ow enabled programmers better identify elements relationships problem solution thus readily create mapping situation models working system models kintsch greenos research indicated familiar aspects situation model improved designers abilities formulate solutions kintsch greeno 1985 two results applied extended red miles research programmers behavior multiple representations supported programmers comprehension problem solving working examples redmiles 1993 dividing complexity design multiple perspectives allows perspective simpler overall design moreover separating concerns perspectives allows information relevant certain related issues presented together appropriate notation robbins et al 1996 design perspectives mayoverlap individual design materials may appear multiple perspectives coordination among design perspectives ensures materials relationships presented multiple perspectives may consistently viewed manipulated perspectives overlapping coordinated perspectives aid understanding 26 robbins hilbert redmiles new perspectives new design materials shown relationship familiar ones redmiles 1993 good designs usually organizing structures allow designers locate design details however complex designs expectation single unifying structure naive one fact complex software system development driven bya multitude forces human stakeholders process product functional nonfunctional requirements lowlevel implementation constraints alternative decompositions complex design support organizing structures arise forces di erent mental models stakeholders di ering backgrounds interests using diverse organizing structures supports communication among stakeholders diverse backgrounds mental models whichiskey developing complex systems robust useful contention xed set perspectives appropriate every possible design instead perspective views emphasize currently important project new issues arise design may appropriate use new perspective design address emphasize evolutionary character design perspectives initial set useful domainoriented perspectives often identi ed ahead time fischer et al 1994 532 support argo multiple overlapping design perspectives argo allow improved comprehension problem solving decomposition complexity leveraging familiar comprehend unfamiliar use notations appropriate multiple stakeholders interests supporting mental models particular domain must done domain engineers practicing architects stakeholders apply argo speci c domain architects stakeholders may de ne perspectives course design presentation evolvability critics advise architects de ning using perspectives soni nord hofmeister identify four architectural views 1 conceptual software architecture describes major design elements relationships 2 modular architecture describes decomposition system programming language modules 3 execution architecture describes dynamic structure system 4 code architecture describes way source code artifacts organized developmentenvironment soni nord hofmeister 1995 experience indicates separating concerns view leads overall architecture understandable reusable 41 view model kruchten 1995 consists four main views 1 logical view describes key abstractions classes relationships eg instantiates 2 process view describes software components grouped operating system processes processes communicate 3 development view describes source code modules dependencies 4 physical view describes software distributed among processors execution four views supplemented scenarios use cases describe essential requirements help relate elements various views views provide wellde ned model system importantly identify separate major concerns software develop ment uni ed modeling language uml also uses multiple perspectives visualize various aspects design fowler scott 1997 demonstrating argo wechose perspectives similar described approaches ever believe choice perspectives depends type software built tasks concerns design stakeholders argo supports multiple coordinated perspectives customization addition perspectives described paper argo allows construction new perspectives integration existing perspectives architects given xed set formal notations often revert informal drawings notations applicable soni nord hofmeister 1995 one goal argo allow evolution new notations new needs rec ognized addition structured graphics representing architecture process allow architects annotate perspectives arbitrary unstructured graphics demonstrated figure 3 customizable presentation graphics needed unifying structures system construction must communicated convincingly architects system implementors tobe convincing style presentation must professional norms development organization look like presentation architects scratch pad furthermore adhoc annotations found useful incrementally formalized incorporated notations future designs shipman mccall 1994 expect argos low barrier customization encourage evolution unstructured notations structured ones recurring formalization needs identi ed 6 evaluation preceding section provided theoretical evaluation extensions dode approach also implementation argo described section 4 provides proofofconcept many desired features argo realized section outlines plans evaluate argo working tool argos architecture infrastructure evaluated terms howwell support construction design environments new domains argos support cognitive needs evaluated measuring qualities design processes products 61 application new domains process applying argo new domain consists de ning new design materials critics design process design perspectives belowwe describe experience carrying tasks three domains 28 robbins hilbert redmiles domain c2style software architectures two basic design terials software components connectors basic relationship materials describes communicate basic model extended include design materials operating system threads operating system processes source code modules rapidly authored approximately twenty critics check completeness consistency representation adherence published c2 style guidelines taylor et al 1996 number needed critics small c2 style addresses system topology simple communication patterns c2 design process started tasks create design material types ned splitting activities based possible design material attributes eg reused components vs new components started two perspectives discussed previous work c2 conceptual implemen tation later included perspective visualize relationships software components program modules implement wehave also adapted argo infrastructure implement design environment objectoriented design supports subset object modeling technique rumbaugh et al 1991 since domain well de ned described single book straightforward identify design materials relationships graphical notations perspectives omt subset includes object model behavioral model information model excludes advanced features core set ten critics address correctness completeness design also straightforward implement eg abstract class subclasses indicates incomplete design additional critics inspired book oo design heuristics riel 1996 eg base class make direct references subclasses means adding new subclasses requires modi cations base class heuristics di cult specify critics rely information present represen tation eg semantically related data behavior kept together example authoritative answer cannot given omt design representation contain enough semantic information however critics may apply pessimistic heuristics identify issue might problem provided process perspectives collected various process fragments described two books wehave begun apply argo software requirements speci cations using core methodology faulk et al 1992 avionics application domain core based scr requirements methodology henninger 1980 extensions deal modular decomposition requirements document omt existing documents describe design materials standard notations analyses existing tools cover essentially analyses performed requirement speci cation without considering application domain eg identifying nondeterministic transitions modetransition table implementing core design environmentwe demonstrate added value existing tools byintegrating analysis tightly cognitive process devising speci cation providing heuristics support modularization requirements documents avionics domain eg autopilot control modes largely inde pendentofcockpit display modes speci ed separate requirements modules however certain constraints two date wehave implemented twenty critics check correctness completeness core requirements speci cations integrated independently developed requirements editing tool given us additional con dence critiquing infrastructure argos architecture infrastructure provided satisfactory support initial implementations domainoriented design environments three domains plan evaluate howwell infrastructure extends three dimensions larger domains critics complex designs processes 2 addition new domainoriented plugins eg design rationale 3 use infrastructure people outside research group eg avionics software development group 62 evaluating cognitive support toevaluate argos support cognitive needs designers user testing focus argo ects productivity designer qualityofthe resulting product support ectioninaction increase productiv ityby decreasing time spent reworking design decisions lead better designs cases critics provide knowledge designer lacks shorten lifespan errors reduce number missing design attributes strengthen de signers con dence nal design issues raised addressed expect support opportunistic design allow designers rely less mental paper notes make better process choices comprehension sample design increase designers mental models match one design perspectives experimental data automatically col lected eg lifespan errors others rely human observation interviews experimental subjects use argo features enabled control subjects use argo features disabled plan evaluate resulting designs help blind judges described murray murray 1991 tests measure hypotheses indicate degree identied cognitive needs supported argos features thereby suggest weights associations table 3 related task devising methodology ongoing evaluation qualityof knowledge provided critics guidance contained process models mental models suggested perspectives methodology support ongoing maintenance design environment periodic reorganization reseeding domain knowledge fischer et al 1994 structured email designers knowledge providers one source data evaluation also investigating event monitoring techniques capture data help evaluate howwell provided knowledge impacts actual usage examples quantities could automatically collected include number critics many items designer views many errors xed result viewing feedback critics recentevaluation vdde voice dialog design environment raised several questions character impact design critics sumner bonnardel kallak 1997 study found designers preempted critical feedbackby anticipating criticisms avoiding errors critics could identify designers assessed relevance criticism taking action cases experienced designers disagreed criticism usually added design rationale describing decision sumner bonnardel kallak suggest evaluation critiquing systems explicitly consider designers di ering skill levels suggest future critiquing systems use alternativeinterface metaphors users perceive cooperative rather adversarial experiments plan group subjects experience watch closely anticipation criticism 7 conclusions future work designing complex system cognitively challenging task thus designers need cognitive support create good designs paper wehave presented architecture facilities argo software architecture design environment argos architecture motivated desire reuse extensibility argos facilities motivated observed cognitive needs designers architecture separates domainneutral code domainoriented code active design materials facilities extend previous work design environments enhancing support ectioninaction adding new support opportunistic design comprehension problem solving future work continue exploring relationship cognitive theories tool support identi cation cognitive needs designers lead new design environment facilities support needs also seek ways better support needs wehave identi ed paper eg process model approximates cognitive cost switching design tasks fur thermore investigate ways better supporting using design rationale example architects interactions list potentially rich source data design rationale items placed list identify open issues removed list issues resolved design rationale important part design context items reference relevant past items possible current prototype argo robust enough experimental usage goal develop distribute reusable design environment infrastructure others may apply new application domains successful use infrastructure others serve inform evaluate approach javaversion argo documentation source code examples available authors acknowledgments authors would like thank gerhard fischer cu boulder david morley rockwell international peyman oreizy nenad medvidovic members chiron research team uci anonymous reviewers sponsored defense advanced research projects agency air force research laboratory air force materiel command usaf agree mentnumber f306029720021 f3060294c0218 national science foundation contract number ccr9624846 additional support provided byrockwell international us government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon views conclusions contained herein authors interpreted necessarily representing policies endorsements either expressed implied defense advanced research projects agency air force research laboratory us government approved public release distribution unlimited notes 1 klax trademark atari games r answer garden 2 merging organizational memory collaborative help using style understand descriptions software architecture beyond de nition use architectural interconnection design implementation hierarchical software systems reusable components addressing complexity deal deviations process model enactment field study software design process large systems free ow mediating representations action work ow systems conceptual framework augmentation mans intellect cognitive view reuse redesign supporting software designers integrated domainoriented design environments construction kits design environments steps toward human problemdomain communication embedding computerbased critics contexts design uml distilled applying standard object modeling language gardeners gurus patterns cooperation among cad users exploiting style architectural design envi ronments introduction softwarearchitecture advances software engineering knowledge engineering generalized process structure grammars gpsg flexible representationsofwork report knowledgebased software assistant requirements design designvision breakdown processes early activities software design professionals cognitive model planning specifying software requirements complex systems new techniques application understanding solving word arithmetic problems cooperative problem solving system user interface design eventbased architecture de nition language reuse correct architecture nement ki tool knowledge integration program transformation systems stimulus structures mental representations expert comprehension computer programs foundations study software architecture reducing variability programmers performance explained examples cooperative software visual language features supporting humanhuman humancomputer communication ective practitioner professionals think action designing ective conversation materials design situation supporting knowledgebase evolution incrementalfor malization expert critics engineering design lessons learned research needs empirical studies programming knowledge designing documentation compensate delocalized plans software architecture industrial applications cognitive ergonomics knowledgebased design support systems living design memory magic world de nitions tool integration environments received date accepted date final manuscript date tr ctr shuping cao john grundy john hosking hermann stoeckle ewan tempero nianping zhu generating webbased user interfaces diagramming tools proceedings sixth australasian conference user interface p6372 january 30february 03 2005 newcastle australia david hilbert david f redmiles agents collecting application usage data internet proceedings second international conference autonomous agents p149156 may 1013 1998 minneapolis minnesota united states john grundy yuhong cai anna liu softarchmte generating distributed system testbeds highlevel software architecture descriptions automated software engineering v12 n1 p539 january 2005