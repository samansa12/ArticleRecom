hierarchical reachability graph generation petri nets reachability analysis general approach analysis petri nets due wellknown problem statespace explosion generation reachability set reachability graph known approaches often becomes intractable even moderately sized nets paper presents new method generate represent reachability set reachability graph large petri nets compositional hierarchical way representation related previously known kroneckerbased representations contains complete information reachable markings possible transitions consequently properties possible reachability graph decide decided using kronecker representation central idea new technique divide conquer approach based netlevel results nets decomposed reachability graphs parts generated combined whole approach realized completely automated way integrated petri netbased analysis tool b introduction petri nets pns established formalism describe analyze dynamic systems among large number available analysis techniques generation set reachable markings possible transitions general approach theoretically applicable every bounded net resulting graph denoted reachability graph rg occurrence graph set reachable markings denoted reachability set rs reachable markings pn build vertices graph transitions describe edges edges may labeled corresponding transition identifier pn description rg contains full information dynamic behavior pn easily analyzed gain results functional behavior required verification system properties rgs generated algorithm computing successor markings discovered markings starting initial marking net approach conceptually simple integrated software tools developed analysis pns practice unfortunately size rgs often grows exponentially size pn terms places tokens hence rg generation usable relatively small nets much smaller practically relevant examples consequently large number approaches published increase size rgs handled straightforward idea increase available computing power memory increase size rgs done using powerful parallel distributed computer architectures examples approach found 1 9 describing implementations various parallel architectures 14 25 workstation clusters used rg generation approaches describe rg exploration generalized stochastic petri nets gspns however apply rg exploration pns well general problem paralleldistributed state space generation still exponentially growing problem attacked increasing available resources linearly additionally problem efficient parallelization rg generation arises efficient realization rg generation algorithm distributed way nontrivial since different distributed tasks dependent require synchronization introducing additional overhead particular speedup reached parallel implementation model dependent makes problem efficient general purpose realization parallel rg generation even harder alternative handle large rgs reduce size without loosing relevant information idea exploited two different levels first net simplified reducing number places transitions corresponding approaches denoted reduction rules published uncolored pns 4 subsequently colored pns cpns 16 reduction rules defined respect properties interest thus first properties need defined reduction rules preserve properties introduced yields set predefined rules set predefined properties 4 16 main drawback reduction rules applicability restricted relatively specific structures consequently gain obtained reduction rules nets relatively small reduction rules times used priori step solve problem large rgs second approach reduce size rgs perform reduction level reachable markings approach requires compositional state space generation generation reduction interleaved different techniques exploiting idea exist usual way define complete pn collection interacting components usually component rgs much smaller complete rg thus rgs components generated efficiently reduced according reduction rules preserve relevant properties subsequently reduced component state spaces composed approaches context components interact via synchronized transitions 13 approach cpns introduced rgs components generated parallel considering local transitions additionally synchronization graph describing synchronized transitions defined interleaving local synchronized transition firing complete rg generated properties holding complete rg proved similarly 29 complete component rgs generated first finally combined reduced important properties like deadlocks boundedness preserved 34 compositional analysis method placebordered subnets presented also based interleaving composition behavior preserving reduction 23 different approach components composed via synchronized transitions proposed approach introduces compact representation complete rg efficient way characterize rs idea incidence matrix characterizing rg composed via kronecker operations incidence matrices component rgs rs subset cross product component reachability sets knowing rs rgs components rs rg cpn completely characterized 5 approach hierarchical rg generation proposed hierarchically structured cpns similar previous approach rg described using component rgs composing incidence matrices via kronecker operations approach requires complete net structured appropriate way disadvantage methods efficient rg generation component structure defined modeler methods sensitive component structure techniques reduce size rg behavior preserving reduction depend required results relatively detailed results required reduction fail small effect size rg methods efficient rg computation include stubborn set method 35 eliminates unnecessary interleavings rg generation exploitation symmetries reduce rg 10 22 methods additional computation necessary rg generation cpn observe several structural conditions methods used efficient way ie exploit symmetries cpn contain symmetric parts otherwise reduction effect idea symmetry exploitation combined compact representation rg composing component rgs described 17 quantitative analysis techniques based ordered binary decision diagrams obdds rely symmetries well 30 pastor et al describe obddalgorithms mainly 1 bounded pns apart techniques characterize complete reduced rg efficient compact way several approaches derive results without generating rs rg exist usually approaches yield partial results sense formally prove results disprove finding failure states techniques include simulation invariant analysis 22 paper introduce approach related work presented 23 5 rs rg handled compositional way allows representation generation large rssrgs contrast known methods performing compositional analysis approach represents complete rg behavior preserving reduction applied consequently arbitrary properties checked resulting rg however also possible combine approach behavior preserving reduction although considered paper proposed technique completely automated large class pns including pns covered pinvariants present approach uncolored pns simplify notation keeping mind every cpn finite color sets unfolded uncolored pn 22 obvious approach applied large class cpns structure paper follows sect 2 pn class defined reachability invariant analysis introduced sect 3 describes definition regions divide pn subnets sect 4 abstraction operator described allows us abstract details net description reduce size rs afterwards sect 5 introduces hierarchical compositional representation rs rg different analysis approaches proposed exploit hierarchical representation rs rg sect 7 contains nontrivial example clarify advantages new approach compared conventional rg generation basic definitions known results assume reader familiar pns related basic concepts details fundamentals refer 21 22 28 net 5 tuple finite nonempty set places finite nonempty set transitions backward forward incidence functions initial marking initial marking special case marking marking interpreted integer row vector includes per place p one element describes number tokens place p gives set input places transition gives set output places analogously define notion directly extended sets sequel consider connected nets ie place transition least one incoming one outgoing arc transition 2 enabled marking transition enabled fire changing marking p 2 p marking 0 indicated tm 0 denotes enabled describes set enabled transitions considering firing sequences yields definition language set reachable markings pn reachability graph rgpn contains nodes every 2 rspn arc necessary arcs labeled corresponding transition andor transition rate stochastic petri nets spns spns 27 extend class slightly association exponentially distributed firing times transitions define function set nonnegative numbers w rate exponential distribution associated transition marking assume w 00 enabled rg spn results rg corresponding pn adding transition rates edges rs identical cases spns used performance analysis analyzing continuous time markov chain described spn 27 incidence matrix c matrix contains place p 2 p row transition column cp used define netlevel properties net pn covered positive invariants place vector covered positive invariants transition 2 invariant 0 yt 0 exists algorithm computation invariants given 26 although time complexity exponential worst case usually invariant computation much easier generation rs rg incidence matrix invariants ensure certain properties however completely characterize rs following theorem summarizes classical results theorem 1 pn set p invariants x set invariants following results hold ffl marking 0 reachable marking integer vector z exists mcz implies every 2 rspn integer vector z exists ffl x x analogously ffl reachable marking relation mx hold x 2 x ffl pn covered positive p invariants bounded ffl pn bounded live covered positive invariants proof proofs found standard books pns ffi although invariants offer insight dynamic behavior modeled system times sufficient obtain required results thus rs rg generated detailed analysis usually first rs generated arcs rg computed second step following algorithm computes rs pn terminates rs contains finite number markings 1 generate rs pn u 6 remove u 2 od od set u contains markings successors generated whereas rs contains generated markings u simple data structure like queue stack sufficient since elements added removed rs data structure allowing efficient membership test necessary consequently rs realized using appropriate hash function tree like structure allowing membership test effort logarithmic number elements problem hashing possible collisions usually hard avoid collisions general pns therefore software tools use binary trees generation rs briefly analyze effort required generation rg binary tree used store rs let n number markings rs let n delta number arcs rg hence mean slightly extended version catches infinite rs see coverability graph construction pn literature number successors per marking time required generation rs order approximately delta n delta log 2 n additionally memory limitations taken account even sophisticated data structures used rs number markings generated standard workstation lies 150 000 1 500 000 pns including large number places value much smaller case certain symmetries ordered binary decision diagrams obdds able handle extremely large sizes rs rg see 8 among others pastor et al 30 describe obddtechniques applied pns however use obdds requires existence symmetries yield compact representation rs generated arcs rg generated second step rg represented n theta n incidence matrix q transition identities rates relevant q stored boolean matrix otherwise q include required information autonomous regions pns section define parts pn latter substituted less detailed representation abstraction operation parts denoted regions place border input transition output border different hierarchical constructs pn area 22 places transitions refined however definition natural behaviorally oriented point view see also 11 region describes part acting communication performed receiving tokens environment place bordered input sending tokens environment transition bordered output set transitions r r corresponding functions pn restricted p r r respectively pn r defines region iff input bags transitions r disjoint ie p r region pn r set output transitions consists 2 r analogously set input transition region describes autonomous part pn used define hierarchical structure region minimal contains region proper subset 2 concept illustrated following example serve running example accomplish line argumentation example 1 consider producerconsumer model producer successively fills two buffers b1 b2 fig 1 shows corresponding pn places fp1 p2 p3g describe state producer places fp5 p7g buffer places whose capacity limited places fp4 p6g buffer b2 always filled two itemstokens b1 obtains single tokens model contains two consumers equal behavior consumer nondeterministically takes tokens buffer first buffer considered two consumers willing consume places fp8 p9 p10g give state consumers model clearly artificial intended illustrate concepts minimal regions model shown fig 1 shaded polygons proposition 1 pn regions n r1 n 1 minimal regions disjoint ie n r1 n r2 minimal n r1 6 n r2 p 2 minimal regions define partition ie exactly one minimal region ri ri 3 regions closed union ie n r1 n r2 regions r1 r2 defines subnet n r region minimal regions coincide equivalence relation conflict relation 33 p3 p6 producer buffer b1 consumer c22buffer b2 figure 1 producerconsumer model partition minimal regions proof straightforward nets place least one outgoing arc case one need define additional region consists places empty set output transitions minimal regions generated using simple algorithm shown ut 6 remove 0 ut remove fflt fflt 6 ut od od algorithm terminated sets contains transitions used define regions according def 3 ie fflt 4 generation abstract views let pn petri net want enhance information associated place following kind vector definition 4 pvector v p place p 2 p vector v p 2 zz nm index entries v p referenced v p x x obtain lower index values aggregation function ag zz nm thetain n gamma pvectors markings defined agv linear combination lc zz nm theta zz nm theta gamma zz nm pvectors v v b defined 2 lcmjv tj jv b tjjv tj c lcm gives least common multiple two integers gcd integer vector greatest common divisor elements note v c inductively define extended nets result sequence net transformations based linear combinations sequence transitions pn ffl denote empty sequence extended net tuple n inductively defined follows n extended net let better readability abbreviation resulting new vectors linear combination wrt transition used fv g denote vectors used generate new extended net n st st st extended net n extended net 2 tnftg st st st st st st st note c c b 0 construction additionally distinguish ordinary places p ord generated extension sequence denoted p agg definition separates available vectors total set vectors v order ensure vectors used one step sequence restriction made order focus linear combinations relevant following net transformation basically mimicks computation pinvariants according 26 n contains transitions 2 exactly describes extended net p invariant realized place p 2 p agg aggregated place p representing p invariant marking constant ie interpret marking aggregated place macro marking includes abstract view detailed marking since complete net exchange tokens environment macro markings representing pinvariants invariant however sequence contains subset transitions marking aggregated place represents possibly macro marking subset places belonging p invariant case marking aggregated place changes whenever tokens added removed partial pinvariant represents since net transformation follows computation pinvariants effort limited effort computing pinvariants often effort much smaller since subset transitions used example 2 go details come back running example contains p invariants described formal sums tinvariant 2 fig 2 shows extended net sequence hatched arcs dotted indicate differences n ffl minimal regions connected via t1 t6 t7 merged shaded polygons denote new larger regions n pvectors corresponding linear combinations given tabular p3 p6 figure 2 extended net note definition extended net defines arc weights new arcs connected new places weighted arcs original net allows consider bidirectional arcs selfloops appropriately arcs connected places p12 p13 fig 2 illustrate place represents set places p ord gives aggregated marking marking set aggregating information crucial point deducing hierarchy describe way split extended net high level net set low level nets obtain desired hierarchy formalize aggregation subsequently consider reachability language invariance net extension proof consider induction transition sequences initially trivially fulfill lemma p agg induction step consider st results v v v b 2 new step case p 2 p trivial n st since places 0 gamma remain unchanged consider induction firing sequences oe initially 0 holds definition induction step consider induction assumption ensures show 0 extending oe transition according definition successor marking extended net induction assumption replace mp equation observe gamma remain invariant z 2 p ffl obtain st st z ut way places added net extension sequence ensures reachability set language remain lemma 2 2 extended net n proof induction sequences initially trivially fulfilled induction step start special case directly implies equality case occur eg 6 9v general case give proof contradiction case st oe st oe possible pn hence 9t 0 2 oe enabled pn ie less tokens place p 2 p contradiction definition extended nets 0 changes respect new places case oe possible pn st hence 9t 0 2 oe enabled pn st ie less tokens place st np according lemma 1 st zt obviously z 2 zt obtain contradiction summary equality holds equivalence languages follows line argumentation ut direct consequence lemma 2 invariants remain valid tinvariants due language equivalence pinvariants due additivity invariants cf theorem 1 furthermore decide places like p13 example transitions whether given initial marking 0 p13 ensures transition dead due 0 whether place safely omitted since mp13 gamma p13 2 rs former case clear net live far described way add places net without changing reachability set language notion extended net formal prop introduce hierarchical net simplifies argumentation hierarchical net indeed includes reachability set language n ffl key issue hierarchy abstraction higher level state subsystem must represented less detail lower level use aggregated places obtain aggregated state representation notion subsystem build concept region let rn ffl denote set minimal regions wrt extended net extend net transition 2 r region n r 2 rn ffl new places connect n r regions contain tffl consequently merge regions n r yields new region n 0 r according prop 1 since start partition regions resulting set regions partition partition less fine becomes internal n 0 r fflt r new places give aggregated description internal behavior n 0 r wrt transition following procedure sequence transitions yields n partition regions regions internal transitions aggregated places situation decomposition extended net high level net using aggregated description set low level nets resulting regions internal behavior gives twolevel hierarchy aim formally high level net given extended net n results projection respect extended net corresponding high level net corresponding projections gamma example 3 fig 3 shows high level net extended net running example fig 22p4 p6 t5222 figure 3 high level net proof uses previous lemma equality n ffl n hn deduced omitting places releases enabling conditions thus increases rs omitting transitions isolated since elements pre postset transitions used linear combinations thus contained anymore isolated transitions effect rs ut pinvariants hn linear combinations pinvariants n ffl hence n ffl covered pinvariants hn consequently guarantee finiteness rshn n ffl covered pinvariants lemma 3 states hn indeed considers abstract net detailed net behave way consistent abstractionaggregation region extended net contains places set used transition shows internal behavior allows define nontrivial isolated lowlevel net definition 7 low level net region r extended net n respect n ffl l h pt ln corresponding region r h hn differ transitions ln trivial neglected otherwise ln nontrivial observe hn lns pick aggregated places elements v na neglected information sufficiently represented linear combinations contributed ln region r hn share places transitions r common net elements form interface hn communicate ln asynchronous manner hn puts tokens via transitions 2 sends signals ln experiences output behavior firing 2 r notion hierarchy justified since hn abstracts details inside ln tokens p describe socalled macro marking ln r represent aggregated behaviour ln however ln merged hn observe detailed behavior formally describe extended ln en defined analogously en ordinary pn rsen len defined relationship hn ln symmetric hn aggregated description ln p r vice versa seen ln hn provides environment ln interacts asynchronous manner ln lacks aggregated description hn behavior hence reachability ln cannot seen independently hn reachability set rsln ln given environment hn needs notion en results projection rsenjln following section use concepts give hierarchicalcompositional representation rsn based rshn rsij ln example 4 figs 45 show extended low level nets two nontrivial low level nets indicated shaded polygons running example result producer part transition t1 becomes internal consumer part transitions t6 t7 become internal consumer region p13 becomes part t1t6t7 v12 used construction region transition t3 internal transition obviously selection massive impact resulting hierarchical net description consideration optimal sequences subject investigations state formulate goals rules thumb follow 1 clear nontrivial ln results merging adjacent regions ie n regions become element p6 t722 figure 4 low level net extended low level net consumer region p3 p3 p6 t522 figure 5 low level net extended low level net producer region 2 deriving hierarchy divide conquer strategy sequence yield set nontrivial lns complexity equally distributed set means regions merged whose result cover majority net 3 aggregated places introduce overhead especially building linear combinations impose unacceptable increase net elements reason exponential worst case time complexity invariant computation case freedom select transitions consider subset transitions hence transitions preferred wrt n relatively small implementation proposed approach integrated heuristic rules generate appropriate transition sequences first experiences several examples eg example presented sect 7 encouraging program automatically chooses sequence transitions partions complex nets nontrivial parts nontrivial hpn hierarchical representations rs rg dividing pn hn lns allows us generate represent rspn rgpn space time efficient way notational convenience assume pn decomposed one hn j lns consecutively numbered 1 j furthermore assume sequel reachability sets hn extended lns finite consequently reachability sets isomorphic finite sets consecutive integers thus let x corresponds xth marking rshn use x x interchangeably represent rghn nh theta nh two markings rghn one transition exists one transition x exists describes list transition indexes use generality notation 2 q h x fulfill x reachability set rsj ln j depends environment given hn hence consider en e corresponds j define rsj projection rse places j since ln j hn share places projection rsj onto places markings g rsj macro markings allow partition rsj macro markings useful rsj generation since full details hn irrelevant ln level one redefine transitions firing marking dependent respect rshnj p j p h g rsj en formal prop obtain clear notion rsj practice however computation rsj performed efficiently using macro marking dependent transitions since transitions local hn ignored resulting set rsj might contain markings rspn eliminated subsequent step cf sect 6 let g denote rsj x x 1g set markings belong marking x g rsj markings set rsj x indistinguishable hn ie marking places since reachability sets assumed finite set rsj x represented set integers 1g marking x 2 rshn uniquely determines macro markings lns denote x j macro marking ln j belonging marking x obtain x markings pn characterized using j 1dimensional integer vectors jg xh describes marking rshn marking rsj x j h describes macro marking lnj marking hn equals xh implies xh j p h p since previous relation holds integer vector previously introduced form determines marking extended net define hierarchically generated reachability set observe number markings rs h pn equals lemma 4 hierarchically generated reachability set reachability set related follows proof previous lemmas imply rspn j jg 2 rspn construction hierarchically generated reachability set 2 rs h pn follows second relation follows since equation 8 describes compact way represent huge reachability sets composing smaller sets observe reachability sets hundred markings enough describe sets several millions billions markings keep representation compact assured reachability sets lns roughly size course hard assure priori possible generate regions way include similar number places transitions often sufficient yield reachability sets similar size different regions however reachability set original net equal rs h pn included hierarchically generated reachability set compute rspn part rs h pn reachability graph represented compact form similarly compact representation reachability set first define effect transitions locally lns two different classes transitions distinguished respect ln j h set local transitions ln j j set transitions describe communication ln j hn effect transitions marking level defined using boolean matrices usual assume multiplication boolean values defined boolean summation boolean thus let x n j x theta n j matrix describing transitions reachability graph ln j due firing transition q transition enabled marking x 2 rs j x firing yields successor marking 2 rs j remaining elements matrices 0 since transitions 2 lt j modify marking hn q 2 lt j furthermore define 0 n j xn j otherwise n n theta n matrix 1 diagonal 0 elsewhere 0 nm n theta matrix elements equal 0 reason definition transition modify marking ln j cannot disabled ln j exactly described matrices 0 define q j enabled ln j marking x hn define q h cases q h matrices describe effect transitions respect hn single ln next step consider effect transition respect global net transition enabled marking straightforward prove enabling condition since q j enabling depends marking parts transition belongs transition enabled enabled parts simultaneously similar way characterize transitions markings transition enabled marking firing yields successor marking h relation allows us characterize reachability graph completely elegant way define kronecker operations matrices definition 8 kronecker product aomega b na theta matrix nb theta mb matrix b defined nanb theta mamb matrix kronecker sum phi b defined square matrices aomega nb thetan na thetan definition kronecker sumsproducts include data type matrix elements indeed kinds algebraic rings used particular consider boolean real values since kronecker product associative define generalization j matrices j dimension l j way kronecker sum defined n l j observe c matrix columns consider number nonzero elements c terms number nonzero element j denote number nonzero elements matrix nza obtain kronecker sums product compact way represent huge matrices implicitly kronecker operations realize linearization j dimensional number row indices matrix c computed row indices matrices j using relation x row index c x j row index j n j number rows j way column indices computed relation column index c j column index j j number columns j representations denoted mixed radix number representations obviously x determines x j j vice versa complementary information kronecker operations mixed radix number schemes refer 15 considering example recommended mixed radix numbering schemes well applied number markings rs h pn however use two level scheme first number describes hn marking second number computed numbers ln markings thus marking using numbering scheme rg h pn represented using kronecker products boolean matrices define q h incidence matrix reachability graph considering transition using two level marking number q h block structure n 2 h block matrices includes transitions markings belonging hn marking x markings belonging hn marking due transition net submatrix represented kronecker product ln matrices form describes compact representation huge matrix assume q boolean matrix describing transition rspn appropriate ordering markings ie markings rgpn rg h pn followed markings rg h pn n rgpn initial marking part rgpn rg h pn representation implies successors reachable markings computed using matrices q h consequently also reachability analysis performed using matrices incidence matrix rg h pn represented compact representation kronecker representation definitely preferable applied various analysis algorithms shown sect 6 local transitions cause specific matrix pattern nonzero elements since q x x equals identity matrix 2 lt j j 6 q j l j omega u j x collecting local transitions one matrix l x obtain following representation submatrix q h l x distinguish different local transitions ln distinction necessary transitions visible excluded sets lt j way possible keep relevant information representation rg h pn consider spns transitions enhanced transition rate thus q contains real instead boolean values however kronecker representation matrix similar transitions marking independent transition rates matrix q h given case elements q interpreted real values 10 00 respectively example 5 running example rather small expect practical gain representing rs rg compositional way proposed section however even simple example representation becomes compact example allows us clarify general concepts following table summarizes number markings column rs number transitions rg corresponding column various nets considered obviously hn rg significantly reduced compared pn marking description successor markings ap1 ap2 p2 p4 p5 p6 p7 tnr tnr tnr 22 26 table 1 reachable markings possible transitions hn rs rg transitions pn 254 622 markings possible transitions hn shown tab 1 macro markings respect ln 1 defined projection hn marking places ap1 p4 macro markings ln 2 defined projection hn marking ap2 p5 p7 cases 9 macro markings generated extended nets rs j matrices q j computed ln 1 macro marking represents average 2 markings small number surprising since ln 1 consists internally two places connected via single transition macro markings abstract internal place tokens reside second ln internal details hidden aggregated description used hn consequently macro marking ln 2 represents average 9 detailed markings kronecker representation requires 195 transitions represent complete reachability graph 622 transitions course comparison consider overhead store different matrices kronecker representation however overhead depends number transitions st number lns quantities negligible compared number markings consider large nets hierarchically generated reachability set rs h includes 270 markings means markings unreachable consider point subsequent section 6 hierarchical analysis approaches introduce analysis approaches rely kronecker representation rgpn particular necessary introduce method characterize rspn superset form rs h pn central idea reachability analysis numbering markings rs h pn perfect hash function markings rspn first exploited efficient reachability analysis sgspns class generalized spns consisting components synchronized via transitions work kemper 23 use similar approach necessarily rely see eg 12 alternative let number markings rs h marking hn x let rx boolean vector length nx used store results reachability analysis thus rx h x l marking termination formally use one boolean vector per hn marking obviously possible store vectors consecutively single boolean vector appropriate length reachability analysis requires apart vectors rx different matrices introduced previous section set u store unexplored markings similar set u used generate rs however u store integer pairs instead complete marking vectors let number initial marking rx 0h x 0l initialized 1 remaining vector components zero additionally u initialized following algorithm used determine reachable markings generate structured rs pn u 6 remove j j l compute successor subnet j h q h compute successor subnet hn j 2 j l exists else l 0 step indicated algorithm exploits fact firing transition always yields unique successor marking therefore row matrix q include one element approach easily extended pns different successor markings possible situation occurs nets probabilistic output bags transitions allowed since algorithm computes successor markings reachable markings straightforward prove generate structured rs generates rspn terminates rspn finite case since rs h pn assumed finite remaining point comparison generate structured rs generate rs assume reachability set contains n markings average transitions possible marking theoretical time complexity generate rs ond log 2 n insert member functions rs use log 2 n operations complexity generate structured rs ond since boolean vectors allow us test o1 whether marking reached reduction logarithmic factor seems much first glance however approach used large reachability sets implies reduction least order magnitude additionally constants behind asymptotic complexity much lower generate structured rs reason operations performed simple integer operations several operations generate rs time consuming example new marking found generate rs data structure hold allocated inserted data structure storing already generated markings since data structure usually tree pointers modified generate structured rs operation requires set bit vector r thus usually expect improvement run times around two orders magnitude large reachability sets however apply generate structured rs pn decomposed first reachability sets matrices subnets generated complexity problems large nets much lower reachability analysis also seen example presented apart time complexity also compare space complexity course also difference memory requirements depends concrete example however net decomposed lns roughly identical reachability set sizes size rs h pn rnpn differ much ie several orders magnitude 8 assures size lnhn reachability sets matrices negligible compared size complete reachability set graph experiences show approach allows us handle much larger reachability sets additional advantage generate structured rs make use secondary memory efficient way since vector r structured subvectors successor markings computed consecutively subvectors possible preload required subvectors secondary memory reachability set computed setting values vector r decided o1 whether marking reachable furthermore successor markings marking computed kronecker representation local transitions constant time others time linear number subnets since kronecker representation includes information transitions yielding successors even successors reachable specific transitions computed based basic steps standard algorithms model checking applied nets similar way kronecker representation exploited quantitative analysis spns basic step realize product vector sum kronecker products matrices however step already known numerical analysis combined various iterative numerical analysis techniques 3 thus kronecker representation allows analysis large spn models cannot handled using standard means details refer literature example 6 size running example small useless compare runtimes reachability graph generation instead briefly consider unreachable markings appearing hierarchical representation already mentioned rs h contains 270 markings 254 reachable example unreachable markings consider markings form 0 vector includes number tokens places p1 gamma p7 places p8 p9 p10 consider possible markings obviously three places part pinvariant sum tokens places equal 2 hierarchical generated reachability set possible distributions 2 tokens places p8 p9 p10 included however reachability analysis shows markings reachable place p10 empty reason restriction explained considering behavior net detail token p10 implies t5 fired t4 since p6 empty t3 fired t5 since p2 nonempty t1 t2 fired also t5 firing t2 token resides p5 transferred p4 firing t4 however means t4 fired t5 p10 empty restriction assures p10 empty marking places p1 gamma p7 shown global restriction depends whole net visible isolated part mentioned markings belong rs h reachability analysis shows reachable part rs two optimizations used improve generate structured rs first optimization noticed 23 certain unnecessary interleavings due internal transitions eliminated idea local transitions different lns interfere thus 1 2 lt enabled marking sequences 1 2 2 1 possible yield identical successor marking consequently necessary consider one sequence general set local transitions belong different lns enabled marking transition sequences described subset transitions occur order described need considered reduces number possible sequences l delta l l delta way time complexity reachability analysis reduced second optimization 6 approach discussed reduces time space complexity idea reduce priori marking sets ln combining markings always together reachable simple example consider two markings x 2 rsi pair transitions enabled x firing yields 0 enabled yielding successor marking x x reachable whenever reachable vice versa denote identical reachability markings obviously identical reachability holds markings irreducible subset matrix l x 6 shown condition relaxed however extension beyond scope paper markings identically reachable aggregated priori aggregation case means set identically reachable markings substituted single aggregate marking transitions entering leaving one marking subset substituted transitions enteringleaving aggregate marking transitions markings subset substituted transitions starting ending aggregate marking transformations easily performed adding matrices q rows columns belonging markings subset aggregated size rsi rgi reduced aggregation implies size rs h pn also effort reachability analysis reduced reachability analysis reachability aggregated marking implies markings represented aggregated marking also reachable vice versa aggregated marking reachable detailed markings also reachable optimizations depend net considered however nets effort reachability analysis reduced significantly 7 application example jsj reg total reg nontr p agg rs h rshn max rsj percent rspn table 2 hierarchical representation sequence running example considered far useful illustrate formal concepts order demonstrate applicability approach consider production cell 24 subject modeling analysis variety tools known nontrivial production cell model originates existing production cell industrial setting physically consists six components elevating rotary table rotable robot two extendable arms traveling crane gen hierarchy gen struct rs jsj cpu user cpu user 111 25 30 733 740 112 26 30 649 650 table 3 computation characteristics sequence two conveyor belts production cell performs transportation processing metal plates cyclic pipeline feeding conveyor belt transports metal plates elevating table table lifts plates robot robot inserts plates press takes pressing press onto second conveyor belt originally plates leave system second belt order closed system crane installed put plates second belt onto feeding belt number plates within system constant thanks work heiner et al 18 19 petri net model exists considers processing 5 plates refinement used organize model size however dynamic behavior model defined unless refined subnets available full detail kind hierarchy common modeling purposes useless terms analysis hence analysis starts flat placetransition net 231 places 202 transitions 3 19 known net live 1bounded reachability set contains 1657242 markings reachability graph 6746379 transitions algorithm derive hierarchy starts partition minimal regions considers sequence starts transitions internal minimal regions case 74 transitions example subsequently considers small regions first fig 6 shows total number regions decreases internal regions considered hand number nontrivial regions increases initial phase since algorithm prefers small regions finally decreases trivial regions left nontrivial regions merged table 2 indicates influence hierarchical representation rs gives number regions nontrivial total number aggregated places p agg cardinalities hierarchical reachability set rs h reachability set high level net rshn maximal number markings observed among low level nets quality whole construction shown column percent rspn gives reachable fraction rs h table 3 gives corresponding computation times seconds computation twolevel hierarchy subsequent computation reachability set rspn contained rs h pn times given cpu time user wall clock time times observed sparcstation 4 64 mb main memory 890 mb virtual memory 110 mhz cpu obviously computation times uncritical number aggregated places explode worth mentioning takes slightly minute generate complete reachability set reachability graph represent space efficient way 6 megabyte memory space necessary generate represent rg rs values excellent compared conventional rg generation algorithms 18 model analyzed similar workstation using different pn analysis tools rg generation tool prod needs 14 hours see 18 small runtimes storage requirements show much larger systems handled approach also analyzed open version production cell tools able generate rs see 18 version method needs 3 minutes real time generate rs 2776936 markings rg 13152132 arcs already noticed 19 computation generating set semipositive pinvariants difficult net approach closely related invariant computation compute extended net sequence covering transitions obtain generating set pinvariants well however 3 thank j spranger translating model apnn format 2 used implementation length sequence s10305070 regions nontrivial regions figure total number regions number nontrivial regions length sequence s50150250350450550 places regions figure 7 number aggregated places number nontrivial regions extreme suitable consider subset transitions order remain activity hn pragmatic point view approach allows us consider transitions handled acceptable computational costs stop derivation hierarchy becomes expensive fig 7 clearly indicates careful selection transitions avoid high computational costs however sharp increase 108 steps hierarchy derivation stops 113 steps pinvariant computation 202 steps necessary hence fig 7 also illustrates difficulties invariant computation observed 19 according results table 2 number regions limit number aggregated places give suitable parameters stop automatic hierarchy generation makes sense conclusions proposed new approach efficient generation compact representation reachability sets graphs large pns contrast approaches technique applied general nets without definition hierarchical structure without inherent symmetries structuring pn asynchronously interacting regions done automatically algorithm uses basic step related invariant computation make transition internal region algorithm considers sequence distinct transitions arbitrary principle implementation use heuristic rules order structure net regions approximately size algorithm stops user given number regions obtained usually number regions chosen large avoid complex hn nets covered pinvariants termination guaranteed however cannot ensure termination general pns problem reachability sets part hn ln become unbounded even reachability set complete net bounded problem occur nets covered pinvariants nontrivial example considered paper illustrates experience algorithm exercised set examples new approach allows time space efficient generation representation huge reachability sets graphs course step towards analysis complex pns current research aims integration algorithms modelchecking kronecker representation reachability graph first results indicate approach allows analyze much larger nets conventional means additionally kronecker representation used efficient analysis spns using numerical analysis techniques overview techniques refer 7 r state space construction steady state solution gspns sharedmemory multiprocessor abstract petri net notation complexity kronecker operations sparse matrices applications solution markov models transformation decomposition nets hierarchical high level hierarchical structuring superposed gspns structured analysis approaches large markov chains states beyond parallel state space exploration gspn models wellformed coloured nets symbolic reachability graph distributed simulation storage alternatives large structured state spaces modular state space analysis coloured distributed statespace generation discretestate stochastic models ieee trans reduction theory coloured asynchronous composition high level petri net based design analysis reactive systems case study developing control software manufacturing systems reachability trees highlevel coloured coloured reachability analysis based structured representations formal development reactive systems analysis large gspn models distributed solution tool simple fast algorithm obtain invariants generalized petri net performance analysis using stochastic hierarchical reachability graph generation bounded petri net analysis using boolean manipulation comparative study methods efficient reachability analysis numerical solution stochastic automata networks class modular hierarchical cooperating systems compositional analysis place bordered subnets state art report stubborn sets tr automatic verification finitestate concurrent systems using temporal logic specifications transformations decompositions nets reduction theory coloured nets concurrency workbench using partial orders efficient verification deadlock freedom safety properties symbolic reachability graph coloured petri nets colored petri nets vol automated parallelization discrete statespace generation generating hierarchy gspn analysis structured analysis approaches large markov chains communication concurrency distributed simulation petri nets hierarchical reachability graph bounded petri nets concurrentsoftware analysis structured solution asynchronously communicating stochastic modules hierarchical structuring superposed gspns application theory petri nets limits possibilities automated protocol analysis analysis bistate hashing saturation modular state space analysis coloured petri nets parallel state space exploration gspn models toolbox analysis discrete event dynamic systems reachability analysis based structured representations scecs survey equivalence notions net based systems simple fast algorithm obtain invariants generalized petri net reliable hashing without collosion detection compositional analysis placebordered subnets hierarchical high level petri nets complex system analysis superposed generalized stochastic petri nets petri net analysis using boolean manipulation storage alternatives large structured state spaces state space construction steadystate solution gspns sharedmemory multiprocessor analysis large gspn models ctr michael muskulus daniela besozzi robert brijder paolo cazzaniga sanne houweling dario pescini grzegorz rozenberg cycles communicating classes membrane systems molecular dynamics theoretical computer science v372 n23 p242266 march 2007