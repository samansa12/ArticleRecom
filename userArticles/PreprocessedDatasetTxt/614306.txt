visualization geometric algorithms abstractthis paper investigates visualization geometric algorithms discuss limiting domain makes possible create system enables others use easily knowledge domain helpful building system automates large parts users task system designed isolate user concern graphics done application need specify happens need concerned make happen screen develop conceptual model framework experimenting also present system gasp implements model gasp allows quick generation threedimensional geometric algorithm visualizations even highly complex algorithms also provides visual debugging facility geometric computing show utility gasp presenting variety examples b introduction visualization mathematical concepts goes back early days graphics hardware 21 2 continues present 18 16 15 19 videos use graphics motion explain geometric ideas three dimensions higher widely accepted necessary companions traditional medium journal publication 32 33 similar gains exposition found algorithm animation work become popular recent years 1 8 5 6 27 7 24 23 22 limiting force difficulty generating graphics animations main principle guiding work algorithm designers want visualize algorithms limited current tools partic ular visualizations would less rare effort create little past visualizations produced developing sophisticated software particular situation ayellet tal department applied mathematics computer science weizmann institute science rehovot israel email ayelletwisdomweizmannacil work done princeton university david dobkin department computer science princeton university email dpdcsprincetonedu little movement towards widely usable systems limiting domain able create system enables others use easily chosen domain computational geometry build system greatly facilitates visualization algorithms regardless complexity visual nature geometry makes one areas computer science benefit greatly visualization even simple task imagining mind threedimensional geometric construction hard many cases dynamics algorithm must understood grasp algorithm even simple animation assist geometer describe paper system gasp geometric animation system princeton present conceptual model underlies development implementation system demonstrate utility series snapshots taken videotape 30 three major objectives set gasp apart animation systems eg balsa 8 balsaii 5 6 tango 27 zeus 7 ffl gasp allows quick creation three dimensional algorithm visualizations typical animation produced matter days even hours particular gasp allows fast prototyping algorithm animations ffl even highly complex geometric algorithms animated ease important point view complicated algorithms gain visualization create animation sufficient write dozen lines code ffl providing visual debugging facility geometric computing one major goals gasp project geometric algorithms complex hard implement typical geometric code often heavily pointerbased thus standard debuggers notoriously inadequate addition running geometric code plagued problems robustness 2and degeneracies many ways system used first used simply illustration tool geometric constructions second standalone videotapes accompany talks classes created gasp third gasp ease task debugging fourth gasp significantly enhance study algorithms allowing students interact experiment animations fifth gasp enables users create animations attach documents computational geometers describe configurations geometric objects either ascii text generated symbolic computing tools eg mathematica 34 hand drawn figures created graphics editor system offers alternative allowing geometer feed ascii data simple program get threedimensional dynamic well static visualization objects often dynamics algorithm must understood animations assist geometer powerful adjunct technical paper gasp generating animation requires knowledge computer graphics interaction system tuned users area ex pertise ie geometry recently researchers reluctant implement let alone visualize algo rithms large part due difficulty using graphics systems added difficulty implementing geometric algorithms combination made major effort animate even simplest geometric algorithm system ease unique hardships coding debugging geometric algorithms inherent difficulty checking geometric object eg listing vertices edges faces poly hedron debugger eliminated becomes possible view object practice simple feature able visualize geometric object right bug causes program crash invaluable debugging tool visualization great impact educa tion watching interacting algorithm enhance understanding give insight geometry explain intuition behind al gorithm environment animation runs designed simple effective viewer able observe interact experiment animation important consideration design gasp support enclosures animations online documents gasp movies converted mpeg movies included mosaic documents reader document click icon see animation viewer takes work view animation effect better next section describe conceptual model upon gasp built sections iii iv present specification sys tem focus ways system meets needs geometer viewer section v describe examples system used various scenarios section vi discusses implementation issues summarize mention open problems section vii paper enhanced version 31 ii conceptual model previous algorithm animation systems eg 5 6 7 27 dealt general case thus attempted solve many problems made assumptions type objects kind operations make building blocks animations result knowledge could used creation animation example suppose user wants animate sorting algorithm first user needs decide elements look rectangles cubes maybe cylinders generate user design implement animation operations make algorithm case compare swap operations many possible ways animation system restricted domain vastly superior generalcase system knowledge entities operations domain helpful building animation system produces animations significantly easily appropriate ways visualize entities animate operations embedded system thus large parts users task automated case system designed isolate user concern graphics done one major departures work previous work elimination animator define conceptual model allows us main principle behind model programmers freed design implement visual aspects animation concentrate solely contents animation important job implementing animation timeconsuming also involves graphics design area user usually familiar ability automate process generating animations useful users however might find restrictive would like able change therefore define hierarchy users previous systems identified two types clients endusers clientprogrammers identify three distinct user types system endusers naive programmers advancedprogrammers 1 endusers want experiment algorithm understand functioning endusers able run application ie see animation interactive experience possible play animation slow fast speed run backwards pause alter objects considered run animation input users choosing among things 2 naive application programmers want system makes generic animation algorithms easy possible naive programmer concerned presentation aspects animation choose isolated decisions graphical nature typically naive programmer needs animation one three purposes animation aids debugging process helps exploring research ideas serves prototype animation refined later 3 advanced programmers want addition able easily modify extend various visualization aspects animation major concern generating animations automatically outcome might different useful user might fit programmers taste therefore necessary provide way modify ani mation advanced programmer able change style animation without implement additional code understand levels one draw analogy document processing systems enduser need know animation produced analogy reader document care created second user application writer application writer analogous text preparer typically uses default style settings sys tem creator document concerned text paper includes less visual aspects selection margins spacings fonts similarly application writer concerned contents animation rather visual aspects finally times creator animation want change viewing aspects eg colors animation analogy times writer document would like change fonts margins systems flexibility user change many defaults creating personal style files l e x user needs additional knowledge third type user advanced programmer define similar interface animating algo rithms interface propose response needs consists library calls naive programmer external ascii style files advanced programmer idea using style files new computer graphics eg see 3 use animation systems however novel naiveprogrammer writes short snippets c code define structure animation animation system knows generate appropriate animation c code advanced programmer edit ascii style file control visual aspects animation animation still generated automatically animation system different animation created style file modified editing style file allows experimentation various animations given algorithm thus animation four components ffl algorithm animation system ffl algorithm implementation ffl hooks animation system within algorithm implementation ffl style files programmer need never concerned algorithm animation system algorithm implementation something would done anyways creating hooks main task animator use style files optional believe model suggest general enough applied constrained domains types objects supported operations replaced structure system user interfaces changed iii gasps language gasp algorithm animation system domain computational geometry implements conceptual model presented previous section recall two types programmers naiveprogrammers advancedprogrammers naiveprogrammer concerned contents animation whereas advanced programmers care also visual aspects animation naiveprogrammers need write brief snippets c code define structure animation code includes manipulations objects modifications data struc tures code contains calls gasps library style files used advancedprogrammers change default aspects animation options section introduce programmer interface gasp provides naiveprogrammer interface gasps library set building blocks enable us write animations minimal ef fort need write short snippets c code gasp makes sure powerful enough generate animation follow two principles first programmer need knowledge computer graphics second distinguish animated animated application specifies happens need concerned make happen screen example creation polyhedron different way made appear animation created fading scene traveling location etc code includes visualization issues way operation animates look objects colors scenes interest us built geometric objects displays data structures typical geometric objects lines points poly gons spheres cylinders polyhedra typical data structures include lists trees various forms operations applied objects depend upon types standard animation domain computational geometry built building blocks parameter data required gasp part algorithm animated make use easy gasp requires simple data types integers floats chars arrays integers floats strings avoid using complex data structures eg complex data structure represents polyhedron order keep startup time minimal gasps library contains four classes operations operations objects atomic units mo tion undo a1 operations objects gasps objects include threedimensional geometric objects two dimensional geometric objects combinatorial objects views text titles objects created removed modified also copied grouped ungrouped use create xxx function create object type xxx create function different parameters suitable object created example create line gasp expects two endpoints line parameters whereas create polyhedron gasp needs number vertices polyhedron number faces specification ver tices faces create function default way animate polyhedron fades scene point blinks order attract attention tree created level level starting root use remove object remove object scene object removed reverse fashion way created ex ample polyhedron fades scene point blinks tree removed level level starting leaves working way root object related one modification functions appropriate ob ject example add faces polyhe dron naturally equivalent operation atomic objects spheres copy object creates exact copy object function useful displaying algorithm multiple views create multiple copies objects manipulate distinct ways various views group function creates object contains ordered list child objects grouping allows us isolate effects eg motion specific set objects reverse function ungroup also available threedimensional geometric objects typical objects embedded threespace include spheres cylinders cubes cones planes lines points linesets pointset sweeplines polyhedra meshes mesh represents threedimensional shape formed constructing faces given vertices meshes polyhedra unique objects nonatomic six special functions meshes supported gasp split mesh removes vertices mesh together related cones faces operation animated first creating new meshes cone every removed vertex new cones travel away initial mesh creating black holes cone travels direction vector difference vertex created cone center split mesh attach mesh mesh attaches meshes operation visualized reversed way split oper ation meshes travel towards chosen mesh meet bind mesh mesh similar attach operation one difference end binding process get single object add faces adds new faces mesh dis played default fading remove faces opposite operation add vertices adds new vertices given mesh twodimensional geometric objects typical objects embedded twodimensions include cir cles rectangles elliptic arcs lines points line sets pointset sweeplines polygons splined polygons gasp supports types displays object one default example polygon filled twodimensional objects highlighted using related threedimensional objects eg cylinders highlight edges spheres highlight ver tices etc combinatorial objects combinatorial objects include lists trees various types binary redblack trees etc unlike geometric objects combinatorial objects evident visual representation tree either presented two dimensions three gasp layout tree ways usually prefer novel threedimensional style nodes belong level tree reside single cycle radius cycles increase level tree increases creation tree visualized default fading nodes level level starting root similarly lists displayed two dimensions eg using rectangles three dimensions eg using cubes addition creation deletion trees lists gasp supports addition nodes removal nodes subtrees views view window used rendering built top inventors examiner viewer 28 view contains camera light model also contains buttons thumbwheels allows use mouse modify camera placement scene text titles text objects title objects define text strings rendered screen annotate graphics text titles ease creation videotapes default use twodimensional text titles though threedimensional supported well text appears screen one unit titles show line line default fonts font sizes vary a2 atomic units every logical phase algorithm involve several operations animated con currently isolate phases algorithm grouping primitives logical phases called atomic units use begin atomic end atomic phrase enclose operations belong logical phase gasp executes animation single unit example adding new face polyhe dron creating new plane rotating third object constitute one logical unit operations animated one unit gasp would concurrently fade new faces polyhedron fade plane rotate cylinder code generates animation addfacespoly createplaneplane point1 point2 properties atomic units like object system atomic units named using names rather ids makes interaction programmer system natural also allows enduser follow unfolding algorithm listing names algorithms atomic units assuming appropriate names used atomic units nested nest atomic units within use start late finish early functions start late declares within nesting atomic unit gasp start animating current unit finish early declares within nesting unit gasp terminate animation current atomic unit finally atomic unit accompanied text voice elucidate events happening unit since atomic unit represents logical phase algorithm appropriate unit attach explanations a3 motion smooth motion major component imation motion applied either single object set objects grouping camera camera moves whole scene changes gasp supports five types motion use rotate obj rotate world primitives order rotate object camera respectively terms axis angle use scale world scale obj scale object x use translate world translate obj move object x use linearpath world linearpath obj float object linear path use path world path obj float object bezier curve last two operations need specify positions object moves gasp calculates exact path object floats motion primitives visualized smoothly example rotation done gradu ally desired angle achieved a4 undo use undo operation play animation backwards undo operation takes parameter number atomic units versed gasp knows reverse visually primitive within atomic unit b advancedprogrammer interface operation supported gasp generates piece animation demonstrates specific operation suitable way programmer wants freedom accommodate personal taste parameters animation modified editing style file animation still generated automatically system different animation generated style file mod ified style file affects animation implementation large number parameters changed style file parameters set either globally whole animation atomic unit separately describe parameters b1 visualizing primitives primitive supported gasp animated several ways one default gasp chooses however parameter set style file change default visualization optional one instance objects created various ways fading scaling full size traveling scene blinking growing adding one feature eg tree grows level level mesh grows adding faces one time appearing scene reasonable subset visualizations allowed objects choose favorite option editing one line style file b2 visualizing objects objects rendered various fashions example numerous ways exist present meshes mesh flat smooth wireframed edges mesh displayed true vertices mesh opaque transparent degree different normals defined faces mesh influence colors faces modify parameters special attention given issue col ors color sophisticated complex visible language components 20 gasp chooses colors objects features creates gasp maintains palettes preselected colors picks colors appropriate device presented ie screen video especially important inexperienced users colors assigned objects features faces polyhedron basis creation time every logical phase algorithm associated unused color objects created phase get color scheme allows us group related elements make clear observer algorithm progresses phase phase colors changed style file b3 visualizing motion parameters motion operations also altered style file change axis rotation angle amount translation scale number keyframes path etc b4 miscellaneous many important parameters animation instance able specify style file whether animation running screen video colors look different devices want colors look good video must use less saturated colors gasp knows generate appropriate set colors another example add one line style file tells gasp stop every frame execute given script file found option useful could record movie frame frame writing suitable script file could generate mpeg movies gasp movies providing yet another script file converted frame style file example following part style file animation discussed later section style file determines following aspects animation background color light gray colors chosen gasp colors fit creation video rather screen atomic unit spans frames operations within atomic unit divided increments change scene needs scaled objects become 082 original size rotation world done 20 degrees around axis atomic unit pluck executed 100 frames instead 30 colors faces added atomic unit add faces green beginglobalstyle endglobalstyle beginunitstyle pluck endunitstyle beginunitstyle addfaces endunitstyle note syntax style file eminently simple iv gasps environment interactive environment primary part gasp system allows researchers program mers students explore behavior geometric algorithms designed simple effective allow viewer observe interact experiment animation gasp environment illustrated fig 1 consists control panel student controls execution animation several windows algorithm runs called algorithm windows along text window explains algorithm fig 1 gasps environment control panel control panel upper left fig 1 lets us explore animation pace uses vcr metaphor make interaction intuitive familiar easy might want stop animation various points execution sometimes would like fastforward easy parts singlestep hard ones facilitate understanding may want rewind algorithm order observe confusing parts algorithm multiple times may need pause time suspend execution algorithm eject movie gasps environment allows us b algorithm window observe algorithm algorithm windows bottom fig 1 algorithm windows use inventors examinerviewer 28 thus decorated thumbwheels push buttons thumbwheels let us rotate scale scene use left thumbwheel screen x rota tion use bottom thumbwheel screen rotation use right thumbwheel dolly screen use zoom slider bottom change camera height ortho graphics heightangle perspective push buttons righthand side algorithm window following operations click help button display help card viewer push home button reset camera home position push set home button set new home position click view button reposition camera objects become visible seek button makes camera animate center selected object lefthand side push buttons give us information algorithm animation ls button lists objects currently appearing screen obj button prints description chosen object example polyhedron picked vertices faces printed lu button lists atomic units xf button prints current transformation either selected object global transformation lpr button creates snapshot file screen using lpr option create pictures annotate papers c text window read algorithm animation text window upper right fig 1 text window lets clientprogrammer accompany animation running screen verbal explanations text elucidate events direct viewers attention specific details every atomic unit associated piece text explains events occurring unit current atomic unit changes text window changes ac cordingly voice also supported gasp viewer listen explanations appear text window v gasp action section describe different scenarios produced animations accompany geometric papers excerpts animations given videotape 30 case present problem study goal creating animation animation building using polyhedral hierarchies algorithm based 11 12 builds advanced data structure polyhedron uses intersecting polyhedron plane main component algorithm preprocessing method convex polyhedra 3d creates linearsize data structure polyhedron called hierarchical representa tion using hierarchical representations polyhedra searched ie tested intersection planes merged ie tested pairwise logarithmic time basic geometric primitive used constructing hierarchical representation called pluck given polyhedron build polyhedron p 1 removing vertices v p 0 cones faces attached vertices also removed leaves holes polyhedron p 0 holes retriangulated convex fashion repetition plucking polyhedron p 1 creates new polyhedron p 2 sequence p n forms hierarchical representation two goals creating animation 13 first wanted create video explains data structure algorithm educational reasons second since algorithm detecting planepolyhedral intersection implemented wanted animation aid debugging implementation animation explains hierarchy constructed used first explain single pluck show hierarchy progresses level level first show single pluck animation begins rotating polyhedron identify user fig 2 next highlight vertex lift cone faces moving away polyhedron fig 3 add new triangulation hole created fig 4 finally remove triangulation reattach cone explain plucking reversible done system following piece c code creator animation write explainpluckint polyvertno float polyvertices3 int polyfaceno long polyfaces char polynames int vertno int vertices int long faces create rotate polyhedron createpolyhedronp0 polyvertno polyfaceno polyvertices polyfaces remove vertices cones vertno vertices add new faces undo plucking operations described single gasp primitive create polyhedron fades given polyhedron rotate world makes scene spin split polyhedron highlights vertex splits polyhedron described add faces fades new faces undo removes triangulation brings cone back polyhedron notice code include graph 0fig 2 polyhedron fig 3 removing cone faces fig 4 retriangulating polyhedron ics coloring fading traveling speed etc mentioned code related style file operations controlled allows user experiment animation without modifying recompiling code explaining single pluck next step show pluck independent set vertices difficult single pluck achieved following code char atomic1name char atomic2name char atomic3name char polyname int vertno int vertices int long faces char newpolysnames polyname vertno vertices finishearly05 use style file choose speeds cones move faces fade scene spins etc also use style file choose next color contrasts new faces preserved found gasp helpful implementing algorithm detecting plane polyhedron intersections bugs aware showed animation eg got nonconvex polyhedra part hierarchical rep resentation also found gasps environment useful debugging algorithm necessary watch earlier stages animation construction process set state variables needed later stages control panel gasp allows us fastforward initial fragments get section terest singlestepping section consideration rewinding also highly valuable tools b objects cannot taken apart two hands animation based 26 paper shows configuration six tetrahedra cannot taken apart translation two hands fig 5 presents configuration thirty objects cannot taken apart applying isometry proper subset fig 6 ascii data configurations produced using mathematica purpose animation illustrate use gasp illustration tool geometric configurations took us far less day generate animation increased understanding moving animation significant animation two parts one shows one configurations described part begins fading object belong configuration turn scene colors objects vary objects appear scene scene rotates configuration whole examined animation produced following code except get polyhedron functions belong gasp function get polyhedron reads ascii data object file create polyhedron responsible fading single object rotate world causes scene spin handsint objectno float points3 long indices int nmax fmax char atomicname objectname object getpolyhedronpoints indices createpolyhedronobjectname nmax fig 5 objects cannot taken apart two hands using translation fig 6 objects cannot taken apart two hands using isometries c line segment intersections example based 9 short clip animation 29 shows line segment intersection algorithm action illustrates important features goal use animation aid explaining highly complex algorithm viewer animation control execution animation also choose input editing ascii file containing initial line segments example also illustrates use gasp creating twodimensional animations matter days generated animation animation runs three phases first phase presents initial line segments visibility map needs built fig 7 second phase demonstrates visibility map constructed operating sweepline fashion scanning segments left right maintaining visibility map region swept along way fig 8 finally third pass algorithm made demonstrating cross section along sweepline maintained lazy fashion meaning nodes tree representing cross section might correspond segments stranded past sweepline fig 9 first pass animation red line segments fade scene fade green visibility map fades top illustrate correlation segments map yellow points representing teresting events algorithm blink point scene cleared second pass algorithm begins second pass viewer watch sweepline advances rolling new position gray line fig 8 animation also demonstrates map built new subsegments fade blue change color green become part alreadybuilt visibility map third pass adds information process constructing map showing redblack tree maintained algorithm changes animation also presents walks map marked yellow fig 9 eleven gasps calls necessary fig 7 visibility map fig 8 building visibility map fig 9 maintaining cross section creation animation begin atomic end atomic rotate world scale world create point create line create sweepline modify sweepline create tree add node tree remove object heapsort though gasp originally meant facilitate animations involve threedimensional geometric computation found interface provide actually facilitates animation algorithm involves display three dimensional geometry among many algorithms 25 show added power system chose animate heapsort heapsort efficient sorting algorithm defined basic operations heaps idea build heap containing elements sorted remove order animation element represented cylinder whose height proportional value elements first appear array demonstrated array looked upon tree point animation shows two views heap one array tree displayed three dimensions fig 10 next step animation build heap tree bottom fashion fig 11 whenever two elements switch positions switch views heap built first last element switch heap rearranged end array sorted colors elements sorted well fig 12 vi implementation gasp written c runs unix silicon graphics iris built top inventor 28 motifxt 14 gasp consists two processes communicate messages shown fig 13 process 1 includes collection procedures make programmer inter process 2 responsible executing animation handling viewers input applications code initiates calls procedures belong process 1 process 1 prepares one messages containing type fig 10 two views array fig 11 building heap fig 12 sorted array message type id users inventor process processcode 2 z fig 13 gasps architecture operation required relevant information operation sends process 2 upon receiving message process 2 updates internal data structure executes anima tion sends acknowledgement process 1 acknowledgement includes internal ids objects necessary process 1 waiting message updates hash table objects returns applications code handshaking approach advan tages first enables user visualize scene time calls systems functions occur thus facilitates debugging since rendering done within event mainloop otherwise difficult return application call second compilation becomes quick since heavy code process application link finally users code cannot corrupt gasps code vice versa important point one major goals gasp ease debugging debugging always problem figure whose bug applications systems process 2 responsible graphics works event mainloop use inventors timersensor update graphics sensor goes regular intervals every time goes process 2 checks direction animation running running forwards checks whether still work updating animation yes point instructions process 1 needed latter case checks see whether message sent process 1 keeps accepting messages updating internal data structure confirming acceptance messages gets end atomic message point process 2 starts executing commands specified atomic unit informs first process upon termination animation running backwards updates animation according phase vii conclusions gasp built animation system computational geometry geometric algorithms highly complex hard implement debug difficult grasp visual nature geometry makes animations extremely helpful researchers use system aid exploring new ideas programmers use debugging tool students enhance understanding studied algorithm get intuition way operates gasp demonstration concept picking small domain makes possible create animation system enables others use easily welldefined domain use knowledge kinds objects operations need visualized case becomes practical hide graphics system user automate creation animation user needs specify logical operations need visualized ie ie also recognize algorithm animation system various types users differing needs naive programmer would like produce quickanddirty animation check ideas debugging purposes naive programmer need knowledge computer graphics code includes manipulations objects modifications data struc tures algorithm animation system makes heuristic guesses way animation appear advanced programmer would like say way animation looks advanced programmer experiments animation editing ascii style file without ever modifying compiling code enduser would like experiment finished anima tion algorithm animation system serve varying levels usertypes providing distinct 5interfaces gasp supports levels limiting domain providing multiple suitable interfaces make possible create algorithm animation system allows users quickly create animations gasp typical animation generated short time true even highly complex geometric al gorithms important complex algorithms benefit visualized shown several animations geometric algorithms system stage people starting use fact three 4 10 30 eight segments animations appeared third annual video review computational geometry created gasp two created geometers made movies describing newly discovered algorithms took less week produce consider short time first use system system available ftp future gasp expanded support fourdimensional space invaluable tool research education would like experiment gasp actual class room believe animations used central part teaching computational geom etry demonstrating algorithms accompanying programming assignments finally many intriguing possibilities exist making electronic book gasp user able sit network capture animation experiment algorithm believe reducing effort involved creating animations increase prolifera tion hope gasp first step creation animation systems constrained mains visualization apply many focused enough domains topology databases networks acknowledgements would like thank bernard chazelle numerous discussions great advice work supported part national science foundation grant number ccr9301254 geometry center university minnesota stc funded nsf doe minnesota technology inc dimacs stc funded nsf r sorting sorting video complex function graphs graphical style towards high quality illustration almost optimal polyhedral separators video algorithm animation exploring algorithms using balsaii zeus system algorithm animation multiview editing techniques algorithm animation optimal algorithm intersecting line segments plane computing rectangle discrepancy video fast detection polyhedral intersections determining separation preprocessed polyhedra unified approach osfmotif programmers reference discrete groups visualization threedimensional manifolds knot video document preparation system l e x users guide reference manual sudanese mobius band video outside video graphics design electronic documents user interfaces turning sphere inside video library visualizing combinatorial structures principles taxonomy software visualization robust algorithms program library geometric computation objects cannot taken apart two hands tango framework system algorithm animation objectoriented 3d graphics toolkit newjersey linesegment saw massacre video computing optimal geometries computational crystal growers workshop tr ctr david p dobkin emden r gansner e koutsofios c north path router graph drawing proceedings fourteenth annual symposium computational geometry p415416 june 0710 1998 minneapolis minnesota united states maria shneerson ayellet tal gaspiia geometric algorithm animation system electronic classroom proceedings fourteenth annual symposium computational geometry p405406 june 0710 1998 minneapolis minnesota united states david p dobkin ayellet tal small representation line arrangements proceedings seventeenth annual symposium computational geometry p319320 june 2001 medford massachusetts united states patricia crossno david rogers visual debugging ieee computer graphics applications v22 n6 p610 november 2002 alejo hausner david p dobkin gawain visualizing geometric algorithms webbased animation proceedings fourteenth annual symposium computational geometry p411412 june 0710 1998 minneapolis minnesota united states maria shneerson ayellet tal gaspii geometric algorithm animation system electronic classroom proceedings thirteenth annual symposium computational geometry p379381 june 0406 1997 nice france jrgen dllner klaus hinrichs hermann spiegel interactive environment visualizing animating algorithms proceedings thirteenth annual symposium computational geometry p409411 june 0406 1997 nice france maria shneerson ayellet tal visualization geometric algorithms electronic classroom proceedings 8th conference visualization 97 p455ff october 1824 1997 phoenix arizona united states patricia crossno edward angel visual debugging visualization software case study particle systems proceedings conference visualization 99 celebrating ten years p417420 october 1999 san francisco california united states yoram moses zvi polunsky ayellet tal leonid ulitsky algorithm visualization distributed environments proceedings 1998 ieee symposium information visualization p7178 october 1920 1998 north carolina gill barequet daniel shapiro ayellet tal history consideration reconstructing polyhedral surfaces parallel slices proceedings 7th conference visualization 96 p149ff october 2829 1996 san francisco california united states james e baker isabel f cruz giuseppe liotta roberto tamassia algorithm animation world wide web proceedings workshop advanced visual interfaces may 2729 1996 gubbio italy david p dobkin ayellet tal efficient small representation line arrangements applications proceedings seventeenth annual symposium computational geometry p293301 june 2001 medford massachusetts united states camil demetrescu irene finocchi giuseppe f italiano stefan nher visualization algorithm engineering tools techniques experimental algorithmics algorithm design robust efficient software springerverlag new york inc new york ny 2002