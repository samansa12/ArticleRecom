parametric analysis computer systems general parametric analysis problem allows use parameter variables realtime automata specifications proposed solved analysis algorithm much simpler run efficiently average cases previous works b introduction successful realworld project management relies satisfaction various timing nontiming restraints may compete resources examples restraints include timely sponses budget domestic international regulations system configurations environments compatibilities work define algorithmically solves parametric analysis problem computer systems allows formal description system behaviors design requirements various timing nontiming parameter variables asks general conditions solutions parameter variables design problem influenced previous work alur et al ahv93 wang wang95 discussed briefly later parametric analysis problem presented two parts automaton nontiming parameter variables specification timing nontiming parameter variables following example adapted railroad crossing example shows platform useful popular railroad crossing example consists train monitor gatecontroller figure 1 give parametric version automaton descriptions monitor controller respectively ovals represent metastates arcs represent transitions transition label transition condition clocks reset zero transition global state space calculated cartesian product local state spaces safety requirement whenever train crossing gate must mode gate money spend monitor precise tell far away train approaching suppose two monitor types one costs 1000 dollars tell train coming crossing 290 300 seconds type costs 500 tell train coming crossing 200 350 seconds also two gatecontroller types one costs 900 dollars lower gate 20 50 seconds skip u mode gate train coming crossing controller r mode gateraising mode type costs 300 dollars lower gate 100 200 seconds cannot skip u mode controller r mode suppose design railroad crossing gatecontroller subjected budget constraint cost monitor controller c together cannot exceed 1500 dollars want make sure constraint safety requirement still satisfied expressed logic monitor u controller r figure 1 railroad gate controller example 82 modal operator ctl ce81 ces86 means computations henceforth following statement must true k system behavior descriptions given statically parametric automata spa specifications given parametric computation tree logic pctl outcome algorithm boolean expressions whose literals linear inequalities parameter variables processed standard techniques like simplex simulated extract useful design feedback remainder introduction shall first briefly discuss related work subject sketch outline rest paper 11 related work earliest development ce81 ces86 people use finitestate automata describe system behavior check see satisfy specification given branchingtime temporal logic ctl framework usually called modelchecking ctl computation tree logic formula composed binary propositions boolean operators branchingtime modal operators 9u 9fl 8u 8fl 9 means exists computation 8 means computations u means something true something else true fl means next state example 9puq says exists computation along p true q true since notion realtime clock time ordering among events considered following shorthands generally accepted besides usual ones boolean algebra 93oe 1 9true u intuitively 3 means eventually 2 means henceforth ctl modelchecking used prove correctness concurrent systems circuits communication protocols 1990 platform extended alur et al timed ctl tctl modelchecking problem verify densetime systems equipped resettable clocks acd90 alur et al also solve problem paper innovative state space partitioning scheme cy92 problems deciding earliest latest times target state appear computation timed automaton discussed however derive general conditions parameter variables 1993 alur et al embark reachability problem realtime automata parameter variables ahv93 particularly established general problem algorithm three clocks compared parameter variables automata ahv93 observation greatly influences design platform 1995 wang propose another platform extends tctl modelchecking problem allow timing parameter variables tctl formulae wang95 algorithm gives back boolean conditions whose literals linear equalities timing parameter variables also showed parametric timing analysis problem pspacehard analysis algorithm doubleexponential time complexity henzingers hytech system developed cornell also parametric analysis powerahv93 hhwt95 however framework identify decidable class parametric analysis problem procedure guaranteed terminate comparison framework algorithm generate semilinear description working solutions parameter variables 12 outline section 2 presents system behavior description language statically parametric automaton spa section 3 defines parametric computation tree logic pctl parametric analysis problem section 4 presents algorithm proves correctness analyzes complexity section 5 concludes paper also adopt n r sets nonnegative integers nonnegative reals respectively statically parametric automata spa spa people may combine propositions timing inequalities clock readings linear inequalities parameter variables write invariance transition conditions combination called state predicate defined formally following given set p atomic propositions set c clocks set h parameter variables syntax state predicate j p c h following syntax rules state predicates notationally let bp c h set state predicates p c h note parameter variables considered h static value change time computation automaton state predicate literals called static statically parametric automata statically parametric automaton spa tuple q following restrictions ffl q finite set metastates initial metastate ffl p set atomic propositions ffl c set clocks ffl h set parameters variables function labels metastate condition true metastate q set transitions defines set clocks reset transition defines transition triggering conditions k spa starts execution metastate q 0 shall assume initially clocks read zero metastate transitions clocks increment readings uniform rate transitions spa may fired triggering conditon satisfied different interpretation parameter variables may exhibit different behaviors transition metastate q q j x 2 aeq reading x reset zero state predicates parameter variables states well transitions parameters may also appear specifications analysis problem instance state spa mapping p c ftrue falseg r x 2 c sx set nonnegative real numbers k spa may generate different computations different interpretation parameter vari ables interpretation h mapping n h n c 2 n said interpreted respect state predicates parameter variables interpreted according satisfaction interpreted state predicates state predicate j satisfied state interpretation written going define computation spa convenience adopt following conventions unambiguous iff states one q 2 q ambiguous spas made unambiguous incorporating metastate names propositional conjuncts conjunctive normal forms state predicate metastate convenience shall talk unambiguous spas say spa mean unambiguous spa given spa interpretation h state let q metastate q metastate q 2 q undefined given two states 0 metastate transition 0 interpretation symbols defined also given state ffi state agrees every aspect except interpreted spa given state spa interpretation computation starting called srun sequence pairs ffl 2 n ffl integer 1 q defined real 0 ffl 1 goes i1 metastate transition ie 3 pctl parametric analysis problem parametric computation tree logic pctl used specifying design requirements defined respect given spa suppose given spa oe following syntax rules j state predicate bp c h oe 1 oe 2 pctl formulae element n h note parameter variable subscripts modal also used parameter variables spa also adopt following standard shorthands 8true u oe 1 92 oe 1 83oe 1 different interpretations pctl formula may impose different requirements write notations oe mean oe satisfied state interpretation satisfaction relation defined inductively follows ffl oe state predicate oe iff oe satisfied state predicate 1 st given spa pctl formula oe interpretation h say model oe written j oe iff oe states formally define problem statically parametric analysis problem given spa specification pctl formula oe parametric analysis problem instance oe denoted papa oe formally defined problem deriving general condition interpretation j oe called solution papa oe iff show conditions always expressible boolean combinations linear inequalities parameter variables 4 parametric analysis section shall develop new datastructures parametric region graph conditional path graph solve parametric analysis problem parametric region graph similar region graph defined acd90 contains parametric information region subset state space states exhibit behavior respect given spa pctl formula given parametric analysis problem oe modal subformula oe 1 oe parametric region v v v w figure 2 railroad gate controller example graph region sets v conditional path graph oe 1 fully connected graph v whose arcs labeled sets pairs form static state predicate integer set conveniently call pairs conditional time expressions cte alternatively say conditional path graph j oe 1 oe 1 mapping v theta v power set ctes v v satisfied finite srun time ending 0 2 v 0 oe 1 satisfied way run except 0 subsection 42 shall show modal formula evaluations decomposed computation conditional time expressions kernel section kleenes closure procedure computes conditional path graph computation utilizes following four types integer set manipulations g g means addition consecutive 1 complement 1 ie g shown integer sets resulting manipulations algorithm semilinear 1 semilinear expressions convenient notations expressing infinite integer sets constructed regularly also closed four manipulations also algorithms compute manipulation results specifically know semilinear expressions represented union finite number sets like c special form called periodical normal form pnf difficult prove given operands pnf results four manipulations transformed back pnf due pagelimit shall skip details intuition behind algorithm computing conditional path graph vertex bypassing scheme suppose three regions u v w whose connections conditional path graph shown figure 2 clear bypassing region v realized j oe 1 superset v w j oe 1 v vg conditional path graph construction algorithm utilizes kleenes closure framework calculate arc labels subsection 41 kind extend regions graph concepts acd90 define parametric region graph subsection 42 define conditional path graph present algorithm compute present labelling algorithm parametric analysis problem subsections 43 44 briefly prove seminlinear integer set expressible union finite number integer sets like algorithms correctness analyze complexity 41 parametric region graph brilliant concept region graphs originally discussed used acd90 verifying densetime systems region graph partitions system state space finitely many behaviorequivalent subspaces parametric region graphs extend alur et als region graph contains information parameter variable restrictions beside parameter variables parametric region graphs additional clock gets reset zero reading reaches one used usergiven spa added construct regions convenience parametric timing analysis functions ticking indicator evaluating timed modal formulae pctl reading always 0 1 every state 0 1 timing constants spa integer constants c appear conditions x c timing constants pctl formula oe integer constants c appear subformulae like x gamma c x c 9oe 1 uc oe 2 8oe 1 uc oe 2 let kaoe largest timing constant used oe given parametric analysis problem instance ffi 2 r define fractffi fractional part ffi ie regions given spa pctl formula oe two states 0 aoe 0 ie 0 equivalent respect oe iff following conditions met ffl ffl x gamma c used oe ffl ffl every x denotes equivalent class states respect relation aoe belongs called region k note assumption unambiguous spas know using definition parametric region graph defined follows graph prgraph parametric region graph prgraph spa pctl formula oe directed graph vertex set v set regions arc set f consists following two types arcs ffl arc v v 0 transitions every 2 v 0 ffl arc v v 0 may time arc represent passage time metastate formally every 2 v 0 2 v 0 wang95 propositional valuechangings within metastates taken care automatically v v 0 f let fflv v 0 going states v states v 0 reading increments noninteger going states v states v 0 reading increments integer noninteger otherwise fflv v 0 kclosure oe 1 assumed regions v 2 v know static state predicate condition l oe 1 v makes 1 satisfied v f 1 v w 2 f fflv w f 2 else let j oe 1 0g 2 v 2 v f 1 u w v w table 1 construction conditional path graph integer also conveniently write v similarly let v q metastate 2 vv since regions enough informations determine truth values propositions clock inequalities used parametric analysis problem define mapping state predicates static state predicates region formally given region v state predicate j write vj static predicate constructed according following rules ffl vfalse false ffl vp true iff 8s 2 c false otherwise c false otherwise convenience let hiv region prgraph agrees v every aspect except given pctl formula oe path called oepath oecycle iff interpretation 1 42 labeling algorithm compute parametric condition parametric modal formula like 9oe 1 u oe 2 region instead decompose formula boolean combinations path conditions compute path conditions example suppose interpretation know exists oe 1 path v 1 sufficient condition states v 1 satisfying 9oe 1 u oe 2 5v n define second new data structure conditional path graph prepare presentation algorithm conditional path graph given region graph oe conditional path graph oe 1 denoted mapping v theta v power set conditional time expressions v v finite srun time ending 0 2 v 0 oe 1 satisfied way run except 0 k procedure computing j oe 1 presented table 1 conditional path graph constructed using kclosure oe 1 turn labeling algorithm table 2 calculate parametric conditions modal formulas properly containing oe 1 however still one thing define clearly presenting labeling algorithm connect conditional time expressions arc labels parametric conditions suppose want examine v v 0 run satisfying parametric requirement condition derived expressions pnf numerical variable parameter calculated according following rewriting rules new integer variable never used note since assume operands pnf pay attention case table 2 presents labeling alogrithm l oe v algorithm maps pairs vertices temporal logic formulas boolean combination linear inequalities parameter variables free variables also note labeling algorithm relies special case 920 oe j essentially says infinite computation along oe j always true also presentation table 2 covers typical cases remaining cases please check appendix 43 correctness following lemma establishes correctness labeling algorithm given papa oe interpretation h vertex v gaoe executing l oe v labeling algorithm satisfies l oe v iff v proof proof follows standard structural induction oe often saw related modelchecking literature much resembles one wang95 due pagelimit shall omit k 44 complexity according construction number regions gaoe denoted jg aoe j 3jqj coefficient 3 constant 1 reflect introduction ticking indicator inner loop kclosure oe 1 executed jg aoe j 3 times iteration takes time proportional v wj2 jj oe 1 vvj conditional path graph arc labels ie j oe 1 roughly corresponds set simple paths u v although utilize succinct representation semilinear expressions thus according complexity analysis wang95 find procedure kclosure oe 1 complexity doubly exponential size gaoe thus triply exponential size input assuming constant time manipulation semilinear expressions analyze complexity labeling procedure table 2 procedure l oe invokes kclosure oe j labela oe invokes l oe jga jjoej times thus complexity algorithm roughly triply exponential size oe since polynomials exponentialities still exponential ities finally pctl satisfiability problem undecidable since easier tctl satisfiability problemacd90 1 construct prgraph 2 v 2 v recursively compute l oe v case false l false v false case p case zero v evaluate x gamma c next case else x gamma c evaluated value region u u v 2 f case case p case case case 1 kclosure oe j v f 2 let l 920 oe j v w ii w case 1 kclosure oe j v f 2 let l 9oe j u oe k v w ii w case cases treated ways similar case left table appended end paper case 1 kclosure oe j v f 2 let l 8oe j u oe k v case cases treated ways similar case left table appended end paper table 2 labeling algorithm 5 conclusion success ctlbased techniques automatic verification computer systems bryant86 bcmdh90 hnsy92 would nice formal theory appealing common practice realworld projects developed feel hopeful insight techniques used paper applied help verifying reactive systems natural productive way acknowledgements authors would like thank prof tom henzinger suggestion use dynamic programming solve timing analysis problem triggered research r automata languages programming proceedings 17th icalp proceedings 5th ieee lics proceedings 25th acm stoc symbolic model checking 10 20 states beyond proceedings workshop logic programs automatic verification finitestate concurrent systems using temporallogic specifications proceedings 3rd cav next generation symbolic model checking realtime systems proceedings 10th ieee symposium logic computer science tr automatic verification finitestate concurrent systems using temporal logic specifications graphbased algorithms boolean function manipulation automata modeling realtime systems parametric realtime reasoning modelchecking dense realtime parametric timing analysis realtime systems minimum maximum delay problems realtime systems design synthesis synchronization skeletons using branchingtime temporal logic hytech ctr farn wang hsuchun yen reachability solution characterization parametric realtime systems theoretical computer science v328 n12 p187201 29 november 2004