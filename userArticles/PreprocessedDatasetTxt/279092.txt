interpolating arithmetic readonce formulas parallel formula readonce variable appears arithmetic formula one operations addition subtraction multiplication division constants allowed present randomized las vegas parallel algorithm exact interpolation arithmetic readonce formulas sufficiently large fields specifically nvariable readonce formulas fields size least 3n23n2 algorithm runs olog2 n parallel steps using on4 processors field operations charged unit cost complements results n h bshouty r cleve proc 33rd annual symposium foundations computer science ieee computer science press los alamitos ca 1992 pp 2427 imply classes readonce formulas cannot interpolatedor even learned membership equivalence queriesin polylogarithmic time polynomially many processors even though learned sequentially polynomial time classes include boolean readonce formulas arithmetic readonce formulas fields size log n n variable readonce formulas b introduction problem interpolating formula class c problem exactly identifying formula queries assignment membership oracle interpolation algorithm queries oracle assignment oracle returns value function number classes arithmetic formulas interpolated sequentially polynomialtime well parallel polylogarithmictime polynomially many processors include sparse polynomials sparse rational functions bt88bt90gks90grks88rb89m91 research supported part nserc canada authors email addresses bshoutycpscucalgaryca clevecpscucalgaryca formula variable set v readonce variable appears arithmetic readonce formula field k readonce formula basic operations field k addition subtraction multiplication division constants also permitted formula size arithmetic formula number instances variables ie leaves bshouty hancock hellerstein bhh92 present randomized sequential polynomialtime algorithm interpolating arithmetic readonce formulas arofs sufficiently large fields moreover show arbitrarilysized fields readonce formulas learned using equivalence queries addition membership queries question whether arithmetic readonce formulas interpolated learned quickly parallel depends size underlying field shown bc92 arithmetic readonce formulas fields log n elements polylogarithmictime algorithm uses polynomially many processors interpolating well learning membership equivalence queries also similar negative result holds boolean readonce formulas present las vegas parallel algorithm exact interpolation arithmetic readonce formulas sufficiently large fields fields size least 2 algorithm runs olog 2 n parallel steps using 4 processors field operations charged unit cost obvious parallelizations made interpolating algorithm ie parallelizations independent parts computation one obtains parallel running time thetad depth target formula since general large thetan result significant speedup parallel algorithm uses techniques sequential algorithm bhh92 well new techniques enable nonlocal features arof determined polylogarithmictime parallel algorithm implemented oracle parallel random access machine pram specifically exclusiveread exclusivewrite erew pramwhich means processors accesses communal registers constrained two processors read write register simultaneously erew pram initially selects random input values uniformly independently distributed performs 3 membership queries via oracle queries learning criterion consider exact identification formula f called target formula member class formulas c defined variable set v goal learning algorithm halt output formula h c equivalent f membership query learning algorithm supplies values x 0 variables v input membership oracle receives return value fx 0 projection f obtained hardwiring x value x 0 assignment values subset readonce formulas variables defines projection formula obtained hardwiring assigned variables values formula rewriting formula eliminate constants leaves note f 0 projection f possible simulate membership oracle f 0 using membership oracle f say class c learnable polynomial time algorithm uses membership oracle interpolates f 2 c polynomial time number variables n size f say c efficiently learnable parallel parallel algorithm uses membership oracle interpolates f 2 c polylogarithmic time polynomial number processors parallel computation p processors ask p membership queries one step 3 preliminaries formula rooted tree whose leaves labeled variables constants domain whose internal nodes gates labeled elements set basis functions domain readonce formula formula variable appears two different leaves arithmetic readonce formula field k readonce formula basis addition subtraction multiplication division field elements whose leaves labeled variables constants k bhh92 shown modified basis used represent readonce formula let k arbitrary field modified basis arithmetic readonce formulas k includes two nonunary functions addition multiplication theta unary functions basis ax every b c 2 k ad gamma bc 6 0 requirement prevent identically 0 differing constant factor also assume nonconstant formulas modified basis contain constants leaves represent unary function f b c restriction b c equivalent saying determinant denoted deta nonzero value readonce formula assignment variables determined evaluating formula bottom raises issue division zero bhh92 problem handled defining basis functions extended domain k f1errorg 1 represents 10 error represents 00 special values define basis function follows assume x f c shown bhh92 definitions designed output readonce formula would formula first expanded simplified form px p q gcdp say formula f defined variable set v variables appearing f members v let g say formula f depends variable x values x 0 n x 1 k values f error call input vector justifying assignment x two gates leaves ff fi arof relationships ancestor descendant parent child refer relative position rooted tree let ff descendant fi equivalently fi ancestor ff let ff fi denote ff proper descendant fi ie ff fi ff 6 fi pair variables x x j appear readonce formula unique node farthest root ancestor x x j called lowest common ancestor write lcax x j shall refer type lcax mean basis function computed gate say set w variables common lca single node lca every pair variables w define skeleton formula f tree obtained deleting unary gates f ie skeleton describes parenthesization expression binary operations actual unary operations embedded constants list basic property unary functions f proved bhh92 1 function f bijection k f1g k f1g either constant value kf1errorg else constant value kf1g except one input value error 2 functions f f equivalent 6 0 3 given three distinct points line exists unique function f f b line exists unique function f 4 functions f f b equivalent det det b 6 0 constant b 5 functions f equivalent 6 deta 6 0 functions f f gamma1 equivalent 7 f x 4 collapsibility operations whenever two nonunary gates type arof separated unary gate may possible collapse together single nonunary gate type higher arity 2 f thetag unary operation f called collapsible unary operations f b f c intuitively property means f gate occurs two nonunary gates two gates collapsed single gate higher arity provided new unary gates applied inputs bhh92 explained unary gate f thetacollapsible form 0 collapsible form b following equivalent definitions collapsible used paper property 2 following equivalent 1 f collapsible 2 f 3 f 1 1 following equivalent 1 f thetacollapsible 2 f 3 ff 1 f 0g f0 1g proof prove property showing 1 2 3 f collapsible b therefore bc since nonsingular 6 0 c 6 0 ac f c must result thetacollapsible left reader2 bhh92 threeway justifying assignment defined assignment constant values three variables arof resulting formula depends three remaining variables present results require assignments meet additional requirements defined two gates ff fi ff fi define fffi path sequence gate operations along path tree ff fi including operations ff fi endpoints path define noncollapsing threeway justifying assignment threeway justifying assignment following additional property unassigned variables x z lcax lcax z nonunary operations lcax ylcax z path type function results justifying assignment form unary operations f f b f c f f e f c collapsible intuitively means justifying assignment two gates lcax lcax z cannot collapsedand thus relationship lcax lcax z still detected resulting function define total noncollapsing threeway justifying assignment single assignment constant values variables arof three variables three assigned respective constants resulting assignment noncollapsing threeway justifying 5 parallel learning algorithm section present parallel algorithm learning arofs algorithm three principal components finding total noncollapsing threeway justifying assignment determining skeleton arof determining unary gates arof basic idea first construct graph later referred lcah graph contains information relative positions lcas pairs variables cannot obtained quickly parallel justifying assignments possibility important structure arof collapses given justifying assignment however shall see total noncollapsing justifying assignment sufficient determine entire structure arof modulo polylog processing lcah graph constructed skeleton arof constructed discarding structure lcah graph garbage collection step accomplished using simple graph algorithms well parallel prefix sum computation nc 1 computable lf80 finally skeleton determined unary gates determined recursive tree contraction method using results b74 51 finding total noncollapsing threeway justifying assignment bhh92 proven triple variables x z drawing random values independently sufficiently large field assigning variables arof threeway justifying assignment variables obtained high probability parallel algorithm threeway justifying assignment total noncollapsing required show size field k least 2 randomized procedure also yields total noncollapsing threeway justifying assignment probability least 1therefore time o1 step implemented shall begin preliminary lemmas precise statement require appear corollary 4 lemma 1 collapsing exists one value z 0 z f c j gy z 0 collapsing property 2 ff 2 knf0g fi 2 k substitute f collapsible property 2 f solving system using property 1 get shows one value z makes f b f collapsible property 2 ff 2 knf0g fi 2 f1 gamma1g substitute f thetacollapsible property 2 either f 0 f 1 f0 1g suppose f 0 62 f0 1g suppose f b f 0z 0 similar solving gives shows one value z makes f b f yz thetacollapsible2 lemma 2 let f arof suppose nonunary operations lcax 1 type 2 f thetag let x 0 n independently uniformly randomly chosen k probability x 0 n noncollapsing threeway justifying assignment least 1 gamma proof note x 0 n noncollapsing threeway justifying assignment justifying assignment exists path lcas x 1 x 2 x 3 nonunary operations type path collapses assignment bhh92 probability former condition 2n4 need bound probability latter condition f form efh k may depend variables x addition marked arguments let ey denote formulas respectively x 0 substituted variables denote degrees c functions x assumption f normal form f h0 collapsing therefore lemma 1 exists one value c 1 f h 1 collapsing bound probability value occurring c 1 since degree c 1 1 application schwartzs result sch80 implies probability value occurs c 1 1 similarly f h 1 collapsing lemma 1 implies exists one value c 2 f h 2 collapsing occurs probability 2 follows probability collapsing result follows summing two bounds 2 theorem 3 let f arof k x 0 n chosen uniformly set k probability x 0 total noncollapsing threeway justifying assignment least 1 gamma 6n 2 proof first note lemma 2 immediately infer drawn independently uniformly randomly k probability x 0 n noncollapsing threeway justifying assignment obtain better bound consider subformula c input nonunary gate arof results bhh92 two possible values c result triple variables respect assignment threeway justifying values 0 1 thus proof lemma 2 probability one values arising c 2d degree c also lemma 2 one value c result collapsing assignment probability arising thus probability one two events arising 3d since n 3n since 2n subformulas c probability one attaining one values 6n 2 2 constant proof theorem 3 improved obtain probability using following observation notice upper bounded degree subtree n fact upper bound degree leaves n leaves degree 1 since variables another subformulas degrees easy show 1 simple induction number nodes taking account obtain bound setting obtain following corollary 4 let f arof k x 0 n chosen uniformly set k 2 probability n total noncollapsing threeway justifying assignment least 1 corollary implies expected time complexity finding total non collapsing threeway justifying assignment o1 52 determining skeleton readonce formula parallel section assume total noncollapsing threeway justifying assignment given show construct skeleton 3 membership queries one parallel step followed olog n steps computation firstly suppose triple variables x z wish test whether lcax lcax z opx 6 opx z accomplished direct application techniques bhh92 using fact assignment justifying respect variables x z hand could difficult detect mere justifying assignment justifying assignment might collapse relative structure three variables nonunary operations lcax ylcax z path identical due fact noncollapsing justifying assignment guaranteed substructure three variables collapse determine lcax lcax z o1 time directly applying techniques bhh92 leaves case opx nonunary operations lcax ylcax z path type case techniques bhh92 might fail determine lcax lcax z report equal shall overcome problem later stage learning algorithm making inferences based hierarcical relationships vari ables time time o1 one processor compute following yes lcax lcax z nonunary operations lcax ylcax z path type yes maybe lcax lcax z opx nonunary operations lcax ylcax z path type maybe otherwise note descendantx must lcax possible nonunary operations type lcax 6 lcax z construct extended skeleton arof first construct least common ancestor hierarchy lcah graph defined follows definition least common ancestor hierarchy lcah graph arof n variables consists vertices one corresponding unordered pair variables distinct variables x denote corresponding vertex xy equivalently yx distinct vertices xy zw directed edge present lcah graph lcax lcaz w shall prove following algorithm constructs lcah graph arof algorithm constructlcahgraph 1 parallel distinct variables x z descendantx insert edges xy xz xy yz xz yz yz xz 2 parallel distinct variables x edges xy xw xz present insert edge xy xz 3 parallel distinct variables x z edges xy xz yz present insert edges direction every pair xy xz yz 4 parallel distinct variables x edges xy xw zw present edges xy yw zw present insert edge xy zw theorem 5 algorithm constructlcahgraph constructs lcah graph arof proof proof follows following sequence observations distinct variables x z lcax lcax executing steps 1 2 algorithm appropriate edges pertaining vertices xy xz yz namely xy xz xy yz xz yz yz xz present ii distinct variables x z lcax executing step 3 algorithm appropriate edges pertaining vertices xy xz yz namely edges directions every pair present iii distinct variables x z w executing step 4 algo rithm edge xy zw present lcax lcaz w2 straightforward verify algorithm constructlcahgraph implemented run olog n time erew pram 4 processors moreover 3 membership queries made initially one parallel step arof nonunary gate corresponds biconnected component clique lcah graph thus transform lcah graph extended skeleton arof simply compress biconnected components single vertex extract underlying tree structure graph underlying tree structure graph tree whose transitive closure graph 1 accomplished using standard graph algorithm techniques including parallel prefix sum computation lf80 details follow first designate leader vertex biconnected component record individual variables descendants nonunary gate discard nodes biconnected component algorithm selects leader connected component lcah graph assume total ordering oe vertices lcah graph example lexicographic ordering pair indices two variables corresponding vertex algorithm leader parallel vertices xy oe zw edges xy zw zw xy present mark xy x easy prove following lemma executing algorithm leader precisely one unmarked node namely largest oe ordering biconnected component lcah graph selecting leader biconnected component lcah graph add n new nodes graph correspond n variables edge inserted variable x descendant lcay z accomplished following algorithm algorithm leaves parallel distinct variables x insert edge x xy edge xy zw present insert edge x zw lemma 7 executing algorithm leaves edge x yz present variable x descendant lcay z algorithms leader leaves implemented olog n time 4 processors steps marked nodes discarded augmented lcah graph contains resulting graph 2n gamma 1 vertices isomorphic extended skeleton arof discarding accomplished standard technique involving computation prefix sums first adopt convention order oe extends augmented lcah graph x 1 oe delta delta delta oe x n x oe yz variables x z edges directed towards root node v set ae 1 v unmarked compute prefix sums uv algorithms parallel prefix sum computation lf80 accomplished olog processors function oe bijection unmarked nodes augmented lcah graph ng following algorithm uses values function produce extended skeleton arof algorithm compressandprune parallel distinct vertices u v vertices u v unmarked edge augmented lcah graph insert edge oeu oev skeleton graph parallel distinct edges skeleton graph remove edge skeleton graph following straightforward prove lemma 5 skeleton graph compressandprune produces isomorphic extended skeleton arof inputs x correspond vertices graph 53 determining readonce formula skeleton skeleton arof determined remains determine constants unary gates note nonunary operations easy determine using techniques bhh92 show olog 2 n steps log n processors main idea find node partitions skeleton three parts whose sizes bounded half size skeleton unary gates determined parts recursive manner unary gates required assemble parts computed following lemma immediate consequence result b74 lemma 9 b74 formula f exists nonunary gate type evenly partitions following sense possible relabelling indices variables number variables gy x bounded ne minor technicality lemma since skeleton necessarily binary tree may necessary split nonbinary gate two smaller gates straightforward obtain decomposition skeleton nc 1 decomposition obtained recursive algorithm computing unary gates rof follows following lemma lemma 10 let x 0 n total noncollapsing justifying assignment arof f given skeleton f subformulas gy x possible determine b c thus entire structure f steps log n processors ii given skeleton f problem determining gy x reducible problem determining rof given skeleton proof part assume subformulas gy x ix given since x 0 n justifying assignment gy x 0 l nonconstant unary functions exist nonsingular matrices 0 easy determine olog n parallel steps l also matrices 0 determined o1 steps bhh92 matrices b c determined part ii consider problem determining gy x nonsingular 00 therefore fix x l x 0 l reduction problem determining gfa 00 x similarly reductions problem determining f b 00 hx f c 00 ix since matrices absorbed processing part sufficient2 recursively applying lemmas 9 10 obtain parallel algorithm determine arof given skeleton total noncollapsing threeway justifying assignment olog 2 n steps processor count bounded log n r machine learning learning readonce formulas queries wont membership queries help parallel evaluation general arithmetic expressions learning arithmetic readonce formulas exact learning formulas par allel learning boolean readonce formulas arbitrary symmetric constant fanin gates asking questions minimize errors algorithm learn readonce threshold formulas deterministic algorithm sparse multivariate polynomial interpolation decidability sparse univariate polynomial interpolation exact identification readonce formulas using fixed points amplification functions fast parallel algorithms sparse multivariate polynomial interpolation finite fields interpolation sparse rational functions without knowing bounds exponent learning readonce formulas fields extended bases testing polynomials easy com pute parallel prefix computation learning quickly irrelevant attributes abound new linear threshold algorithm randomized approximation interpolation sparse polynomials complexity learning counterexamples membership queries interpolation approximation sparse multivariate polynomials gf2 learning sparse multivariate polynomials field queries counterexamples fast polynomial algorithms verification polynomial identities theory learnable learning parallel tr ctr amir shpilka interpolation depth3 arithmetic circuits two multiplication gates proceedings thirtyninth annual acm symposium theory computing june 1113 2007 san diego california usa