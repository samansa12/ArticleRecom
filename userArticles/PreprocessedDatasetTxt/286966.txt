visualizing dynamic software system information highlevel models dynamic information collected software system executes help software engineers perform tasks system effectively interpret sizable amount data generated systems execution engineers require tool support developed offline flexible approach visualizing operation objectoriented system architectural level approach complements extends existing profiling visualization approaches available engineers attempting utilize dynamic information paper describe technique discuss preliminary qualitative studies usefulness usability studies undertaken context performance tuning tasks b introduction effective performance many software engineering tasks requires knowledge system works gaining desired knowledge studying statically analyzing source code difficult static analysis instance help software engineer determine two classes interact help engineer determine many objects class might exist runtime many method calls might occur particular objects determining answers questions requires investigation dynamic information collected software system executes permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires specific permission andor fee oopsla 98 1098 vancouver bc c dynamic information helps bridge dichotomy code structure hierarchies classes execution structure networks objects 1 p 326 software engineers require tool support effectively access interpret dynamic system information quantity level detail complex structure information would otherwise overwhelming creating tool help engineer access information two goals must paramount tool must usable must useful task designed address usability defined terms practicality simplicity interface usefulness defined terms easing performance completion task importance especially comparison alternative methods many tools developed provide engineers access dynamic information profilers instance provide numerical summaries dynamic information length time spent executing method information helpful trying tackle system performance problems tasks however verifying objects interacting appropriately according defined roles 6 require additional structural information usefulness profilers types task degrades relevant dynamic information evident summary numeric value produced per method per class basis structural dynamic information needed engineer may attempt use objectlevel visualizer eg 1 6 7 visualizers provide displays interactions objects classes number objects created class task requires views involving many classes large system usability tools de grades tend display complex interactions multiple objects haze extraneous overlain information part overcome complexity problem sefika et al introduced architecturaloriented visualization approach 14 allows engineer investigate operation system coarse finegrained levels design choices made approach limit applicability approach online limiting usefulness kinds tasks approach requires hardwired instrument classes attached system limiting flexibility reducing usability developed offline flexible approach visualizing operation objectoriented system architectural level approach abstracts two fundamental pieces dynamic information number objects involved execution interactions objects visualize two pieces information terms highlevel view system selected engineer useful task performed represent information collected across systems ex ecution use sequence cels cel displays abstracted dynamic information representing particular point systems execution history execution point integration current histori cal information intended ease interpretation display engineer using prototype software engineer navigate forwards backwards cels comprising views execution approach complements extends existing approaches accessing dynamic system information approach ffl allows unfamiliar system studied without alteration source code ffl permits lightweight changes abstraction used condensing dynamic information ffl supplies visualization independent speed execution system studied ffl allows user investigate abstracted information detailed manner supporting forwards backwards navigation across visualizations investigate usefulness usability approach performed preliminary qualitative studies use technique aid performancetuning tasks smalltalk programs studies show technique help software engineers make better use dynamic system information performing tasks performance enhancement begin section 2 describing visualization tech nique section 3 discusses creation visualization section 4 discuss initial evaluation efforts intended assess usability usefulness approach section 5 consider design choices made visualization technique section 6 describes related work section 7 concludes description directions future work visualization technique abstracts information previously collected systems execution uses concepts field computer animation display information user begin description technique focusing visualization describe software engineer construct visualization figures show different views withina visualization produced one case studies investigating performance problem reverse engineering program section 41 two windows figures 1 2 provide one viewa cel showing events occurred within particular interval systems execution defined set n events n adjustable view figure 3 shows summary view events occurring trace figure 4 gives detailed textual view information within summary view sections 21 22 23 describe views detail full details runningexample use provided section 41 prototype permits software engineer easily switch particular cel summary view user may also move sequence cels sequentially via random access animation controls play stop step forward step backward allow user review execution trace pause return points interest discuss navigation capabilities visualization section 23 21 cels cel consists canvas upon drawn set wid gets widgets consist ffl boxes representing set objects abstracted within highlevel model section 32 defined engineer ffl directed hyperarc boxes ffl set directed arcs pairs boxes indicates method object destination box invoked method object source box ffl barchart style histogram associated box indicating ages garbage collection information objects associated box ffl annotations bars within box ffl annotations associated directed arc box drawn identically within cel represents particular abstract entity specified engineer thus change animation grey rectangles figures labelled clustering simfunc module sandsuch rest boxes corresponding abstract entities names two entities clustering simfunc correspond class reverse engineering tool source two entities represent collections classes modulesandsuch stop summary step play step stop data visualization1037 39166360123cel 13 rest clustering rest modulesandsuch rest figure 1 window showing example cel visualization technique modulesandsuch stop summary play step step options000000111111111111 data visualization stack clustering rest simfunc rest rest clustering clustering modulesandsuch figure 2 window showing next cel figure 1 system execution trace step step stop play cel 4 stop step step play options data visualization summary rest modulesandsuch clustering clustering rest rest modulesandsuch modulesandsuch deallocation age deallocation age deallocation age deallocation age allocation pattern allocation pattern allocation pattern allocation pattern9992 figure 3 window showing summary view system execution trace shown figures 1 2 ok cancel 37228 40604 age 3376 methodcontext 37229 40604 age 3375 blockcontexttemplate 37229 40604 age 3375 methodcontext 37232 40604 age 3372 methodcontext 37206 40604 age 3398 array 37217 40604 age 3387 methodcontext 37196 40604 age 3408 array 37215 40604 age 3389 escompactblockcontexttemplate 37214 40604 age 3390 blockcontexttemplate 37214 40604 age 3390 methodcontext 37213 40604 age 3391 escompactblockcontexttemplate 37212 40604 age 3392 methodcontext 37211 40604 age 3393 escompactblockcontexttemplate data visualization 37217 40604 age 3387 blockcontexttemplate allocations sample time figure 4 popup window produced clicking allocation pattern histogram clustering entity figure 3 path hyperarc represents call stack end current interval displayed figure 1 current call stack travels clustering rest boxesthe hyperarc marked red shown dashed black line herein figure 2 call stack extended simfunc well set directed arcs represents total set calls boxes current interval displayed blue shown solid black herein total number pairs boxes manageable set obscure rest cel significantly multiple instances interaction two boxes shown number annotating directed arc two arcs shown figures 1 2 clustering rest 123 calls rest sim func 122 calls object creation age destruction particular focus within visualization box annotated numbers bars indicating total number objects map box allocated deallocated current interval length bar given box proportional maximum number objects represented box course visualization clustering box figure 1 shows total 1127 objects associated created point execution 1037 garbage collected histogram associated box shows information well refined form object created interval displayed survived single interval stepping ahead one cel still exists object survived two intervals kth bin histogram shows total number objects mapped box age k limit number bins histogram objects older threshold age shown rightmost bin histogram histogram attached clustering box figure 1 indicates 1127 objects created relatively far past one shown colour used differentiate objects still exist garbage collected bar histogram divided lower green part marked verticalline pattern herein living objects per red part marked diagonalline pattern herein deleted objects figure 1 upper part bar clus terings histogram shows roughly 80 old objects deallocated yellow shown light grey herein used within box annotations within histograms indicate change occurred interval specifically used show objects created deleted figure 2 shows interval immediately figure 1 additional 324 objects allocated related clustering allocation shown yellow light grey portion upper bar yellow light grey bar first bin histogram complex graph layout algorithms currently used produce views drawing package used prototype supports interactive rearrangement widgets user cel intended represent combination information present predecessor terms original ex ecution summarytodate information predecessors new information difficult interpret isolation context provided summarytodate eases interpretation see section 53 discussion 22 summary view addition individual cels summary view provided display overall execution system studied view shows boxes directed arcs arc annota tions box annotations final cel animated view addition displays two histograms per box different histograms animated view one allocation pattern shows entire execution trace divided set ten equallength intervals trace consists 10n events interval consists n contiguous events height bar represents number objects allocated interval map box histogram deallocation age shows age every object associated box object garbage col lected object garbage collected tracing ended displayed rightmost bar example figure 3 clusterings deallocationage histogram shows objects deallocated young age rest still existed tracing stoppedthis case boxes example except modulesand whose associated objects always deallocated young age clusterings allocation pattern fairly uniform showing slight increase allocations halfway execution hand simfunc stopped allocating objects halfway point 23 navigating visualization three forms interaction visualization view selection animation control detail querying view selection simply entails choosing summary view detailed celbased view would reasonable allow multiple simultaneous views summary celbased provided current imple mentation however offline nature technique section 31 allows multiple instances tool run simultaneously animation control provided several buttons slider textual entry particular values buttons step backwards forwards stepsize number cels play stop slider used random access cel draganddrop fashion textual entry used specify step interval sizes animation speed altering step size allows engineer move animation quickly showing celsthis allows animation proceed quickly redisplay rate graphics software hardware slower desired rate animation default interval ends upon event caused frame added removed execution stack events include making returning method call generally object allocation deallocation granularity generally fine usablewith tens thousands method calls occurring similar numbers objects created destroyed much changes two adjacent cels histograms tend empty bins except rightmost therefore allow engineer reset interval size size ten example indicates cel represent changes system produced ten events detail querying allows engineer connect observations made via abstract visualization actual classes object allocations deallocations method calls abstracted done clicking appropriate widget details sought arcs hyperarcs histograms clicked way cause textual dialog window popup figure 4 popup window contains list dynamic entities associated widget interest exam ple popup arc contains list calls boxes connected arc popup al locationdeallocation histogram animated view gives list objects mapped box created old garbage collected method caused created selection entry within popup windows could used automatically position view textual code browser future version tool 3 constructing visualization software engineer employs fourstage process using visualization technique figure 5 1 data collected execution system studied stored disk 2 software engineer designs highlevel model system set abstract entities selected investigate structural aspects interest example figure 5 utilities database specified entities 3 engineer describes mapping raw dynamic information collected abstract entities figure 5 instance shows dynamic information whose identifier begins foo objects whose class name starts foo mapped utilities entity mapping applied raw information collected tool producing abstract visualization dynamic data 4 software engineer interacts visualization interprets investigate dynamic behaviour system process deliberately divided multiple stages increase usability rather complete entire process every time change required task discovery iteration occur suffix pro cess example software engineer might begin extremely coarse view program knowing little performance interacting resulting visualization gaining partial understanding studied systems operation software engineer need alter highlevel model corresponding mapping generate new visualizationthere need recollect identical dynamic information process based work murphy et al 12 compare visualization technique previous work section 6 31 stage 1 gathering dynamic information dynamic system information collected every method call object creation object deletion performed system investigated words trace information collected information currently consists ordered list ffl class object calling method object created ffl class object method called returning class object created deleted since tool currently uses complete trace information complete call stack given moment reconstructed stage 3 stage 4 database utilities foo utilities db database figure 5 process implementation smalltalk information collected instrumenting smalltalk virtual machine vm log events occur nothing inherent tool use smalltalk could easily implemented language execution instrumented collect required information software engineer often needs understand dynamic problems occur significant initialization studied system collection trace information needs performed portions execution eliminates extraneous information interest speeds process collection implementation vm methods available dynamically activate deactivate tracing used methods collect data figures 4 included main iteration loop algorithm excluding execution pertaining initialization output results 32 stage 2 choosing highlevel view software engineer typically begins investigation idea static structure system studied even case naming conventions organization source code often allow guess systems structure engineer chooses highlevel structural view use basis visualization stating names abstract entities entities may correspond actual system com ponents aggregates subdivisions thereof little connection reality figures 1 4 instance investigator chose two entities representing specific classes program clustering simfunc two entities representing collections classes rest modulesandsuch 33 stage 3 specifying mapping tool indicate dynamic interactions abstract entities needs map relating dynamic system entities abstract ones map indicates specific system entities objects given class methods matching particular pattern represented specific abstract entity thus box visualization engineer states mapping using declarative mapping language usable mapping language must allow engineer easily express relationships entities mapping languages constructs based standard smalltalk notion structural hierarchy methods grouped classes classes categories categories subapplications subapplications applications amap consists ordered set entries three parts 1 name indicating level smalltalk structural hierarchy mapped 2 regular expression indicating set names map particular structural hierarchy level mapped 3 name abstract entity dynamic system entities mapped methods provided mapping class regular expression plus method regular expression simultaneously subapplication class category method simultaneously example say engineer defined abstract entity named foo every message foo passed classes named bar within subapplications dog mapped would indicated map entry matchingsubapplication dog class bar category method foo mapto foo example figures 1 4 used following map matchingclass archclusteringanalysis mapto clustering matchingclass archmodulegroup mapto modulesandsuch matchingclass archprocedure mapto modulesandsuch matchingclass archsymbol mapto modulesandsuch matchingclass archsimfunc mapto simfunc matchingsubapplication schwanke mapto rest interested visualizing interactions system components tool takes note method called method executed called set map entries used map visualization differentiate incoming outgoing calls individual objects also mapped way often important object created track objects simply based class also terms call stack present created object typically mapped particular abstract entity mechanism described object treated belonging abstract entity represented visualization ie representation box mapping possesses two important properties partial ordered ordering means system entity mapped single abstract entity first one map entry valid match mapping partial software engineer need express structure entire system investigating system entity fails match every entry map represented resulting visualization feature decreases overhead tool removes unwanted information visualization engineer wants every dynamic entity appear visualization final entry map form matchinganything mapto default act default abstract entity dynamic entities fall map entries three fundamental questions must answered software visualization ffl technique useful software engineers trying perform task system ffl technique usable software engineers ffl kinds software engineering tasks visualization helpful evaluating technique questions requires number careful indepth studies studies warranted initial determination coarsegrained utility technique paper report results preliminary investigations utility visualization technique preliminary investigations chose fix kind software engineering task studied performance tun ing task chosen heavily reliant dynamic system information tends delegated expert developers visualization technique aid nonexpert developer tackling performance problems would thus beneficial increasing use dynamic system information engineers one initial goals also chose focus usefulness technique rather usability decision reasonable main features technique affecting usability investigated related domains iterative selection highlevel entities designation mapping software instance also characteristic software reflexion model approach visualization technique derived users software reflexion model approach difficulties performing steps 10 11 preliminary studies focus investigating usefulness visualization report two case stud ies first case study section 41 discusses use visualization technique one authors determine smalltalk implementation reverse engineering algorithm 13 running slower expected sce nario focus differences information provided visualization technique compared profiler second case study section 42 expert nonexpert smalltalk developer use visualization attempt discover cause performance problem visualization technique report qualitative quantitative data collected use visualization 41 case study 1 hierarchical agglomerative reverse engineering algorithm attempts automatically cluster entities procedures c program comprising software system subsystems modules based similarity function one authors wanted determine smalltalk implementation particular algorithm 13 executed significantly slowly c implementation algorithm starts placing procedure separate module iteratively computes similarity function possible pair modules iteration similar pair modules combined algorithm terminates specified number modules left modules similar enough combined performance investigator knowledge design program implemented either program examine performance smalltalk implementation investigator first used ibm visualage smalltalk execution profiler tool user either sample trace execution application view collected statistics amount execution time spent particular methods number garbage collection scav enges perusing several views investigator determined 16 execution time spent methods archclusteringanalysis class contains main iteration loop 55 spent methods archcache class acts cache already computed similarity values 46 spent computing new similarity values result surprising information confirmed investigators understanding program works provide hints whether performance could enhanced investigator next applied visualization tech nique choosing highlevel model consisting four entities one entity clustering represented archclusteringanalysis class another simfunc represented class methods computing similarity function third modulesandsuch represented functions modules whose similarity compared fourth rest represented classes comprising program mapping associated appropriate classes subapplications boxes investigator collected trace information main iteration loop program began interacting visualization playing throughthe abstracted information investigator noted large number objects 4500 associated simfunc entity investigator viewed summary queried objects associated simfuncs box object list contained many set methodcontext objects figure 4 results confirmed cost computing similarity two modules high minimized returning play vi sualization investigator noted ratio calls clustering rest rest simfunc lower expected prior investigation shown majority calls clustering rest due calls archcache object calls rest simfunc represent new computations similarity 1 insight led investigator study archcache class investigator found key value used store access similarity values cache causing many hits could slight modification formation keys resulted increase 25 speed program visualization technique aided performancetuning task presenting information caused investigator ask answer right questions implementa tion insight structural interactions system helped investigator narrow algorithmic problem investigator made use interaction object allocation deallocation information summary view ability play replay traced execution 42 case study 2 second case study tool used investigate performance problems specifically due structural design flaw faster step forward step backward visualization tool flaw centered fact implementor chosen generate cels fly often used simple linked lists hold required information arc annotations result adding lists via method better design program would havebeen hide cache behind archsimfunc interface addinteractionsfromtobetween fast removing lists via removeinteractionsfromtobetween required linearorder search list implementor tool discovered flaw informed experimenters existence cause prepare studies experimenters gathered trace consisting stepping forwards backwards visualization tool 2 initial highlevel model mapping also prepared participants short study periods intended focus visualization rather process creating visualization highlevel model simple seen visualization shown figure 6 classes used tool names began two threeletter prefix thus mapped abstract entities prefixes names separate session previously collected trace given two experimental participants expert solving performance problems smalltalk applications nonexpert solving performance problems language participant given introduction tool short training session opportunity use tool toy problem symptom flaw tool explained parameters interaction traced described asked determine three fewer points interest within source code tool saw good candidates detailed analysis also asked answer set questions periodically regards perceptions tool progress task audiotaped question answer sessions also captured automatically log navigation pattern visualization using instrumentation built prototype 421 expert participant expert participant began tenminute inspection summary view gp box seen objects allocated immediately deal located querying attendant allocation pattern histogram showed many objects classes point methodcontext blockcontext animated view used step forward backward mode play mode examine range cels many objects allocated repetitive call pattern observed gp cdf boxes arcs hyperarcs boxes queried de tails methods involved pattern found participant separate code browser used investigate details causing behaviour studyingthe 2 visualization tool run different preexisting execution trace toy example used purpose choice input factor tools symptoms second participant actually received trace step backwards system hour participant decided likeliest cause methods ffl removeinteractionsfromtobetween ffl addinteractionsfromtobetween participant noted similarity code two meth ods observation made sense fundamental problem due data structure participant thus able indicate useful point continue investiga tion requested start study expert participant liked two features tool particular ffl summary view although participant stated case effect slightly obvious summary viewit may obvious cases ffl animation hyperarc resulting pressing play way one watch things go loops circles watch communication back forth different things specific things expert participant felt tool lacked two desirable features ffl integration traditional code browser one could example select method popup detail window code browser display method ffl lack ability view detailed stack dump comparable available smalltalk debugger particularly parameter types passed could seen cannot seen static code smalltalk dynamically typed actual values passed deemed desired instances code browser integration desired feature yet implemented tool designed accommodate change tool allow participant narrow search particular points interest could investigated via debugger similar means desire greater integrated informationfrom tool understand able runs contrary design philosophy complementing existing techniquesit intended supercede use debugger desire also highlights tension offline online approaches accessing dynamic information 422 nonexpert participant nonexpert participant made extensive use object histograms allocationdeallocation bars detailed view investigate performance problem specif ically participant would find cels object deallocation keeping pace object allocation ie cw step stop play step summary stop options00011111100000011111111111100000000000011111111111111111111111100110011 data visualization cdf gp cg cg72010cw figure case study 2 visualization green barshown herein via verticalline patternwas longer red barshown herein via diagonalline patternwithin box would step forward see objects allocated queries associated histograms used determine classes allocated objects less frequently participant would investigate calls involved allocations first forty minutes participant worked solely visualization tool participant began use smalltalk code browsers study associated code approximately hour tool participant identified two methods including removeinteractionsfrom method point code continue investigation determination based part noticing correlation increase message sends gp cg boxes number objects allocated cg similar case expert participant nonexpert found correct area code investigate task posed nonexpert found deallocation age histograms ability determine correlation abstract information method object names clicking histograms interactions visualization particularly help ful however nonexpert indicated desire different displays information finding screen methods cluttered similar expert nonexpert desired integration smalltalk tools code browser instance participant wanted able select call list interactions visit call site code interview part way study pe riod participant noted difficult attack task lack knowledge could cause performance problems visualization tool provided clue proceed emphasis particular dynamic information applicability dynamic information chosen tasks requires research key features technique include offline operation navigable visualization collected data cels based running summary use declarative mapping abstract finegrained information systems execution discuss features use trace information 51 offline operation using online visualization technique slow unidirectional procedure taking technique offline separating visualization system execution achieve two benefits first allows information preprocessed whole prior visualization enabling generation summary information entire execution performance tuning tasks described case studies summary information used provide clues parts system investigate potential sources problem accessing summary information users returned investigate detailed parts execution second allows partial trace execution reviewed without rerun entire execution review capability permits visualization navigable way possible online technique may trace replayed arbitrary point also may played backwards rate independent speed original execution system studied 52 navigable visualization one advantage offline visualization approach navigation capability provided software engineer user unfold execution forward play mode perform detailed investigations particular parts execution moving visualization forward backward current prototype associate information actual execution time offline navigation step forward backward visualization takes time proportional display time next cel rather representing length time required associated method call allocation garbage collection tasks including performance tuning would sometimes helpful steps cels represent system running time 53 running summary believe separately displaying individual events small groups contiguous events makes insufficient visualization system execution lack connection greater context execution sort summary information also needed considered two means providing summary formation single summary picture figure 3 set pictures showing change state system individual intervals execution delta formation provided tool neither alone would sufficient illustrate dynamic nature information attempting visualize summary picture clearly contain temporal ordering eventsit difficult look one mentally reconstruct sequence events produced furthermore summary alone cannot contain enough detail execution useful without becoming cluttered rendered unusable delta pictures address concern visualization temporal nature information however difficult understand relationship delta picture execution toto reach compromise alternatives chose provide running summary execution within individual cels implicitly provides temporal component summary information maintaining context delta information within cel two alternatives maintain context possible first could begin summary view provided tool rather single static picture could also divided sequence cels would show summary information highlightingin different colour say information changed added represented interval directed arcs traversed subset objects deallocated second alternative similar instead highlighting information different interval running summary information changed start execution system current interval would highlighted suffer fact complete summary view quickly become detailed leading information overload however schemes could used complement delta plus runningsummary combination currently used cels yet investigated possibility 54 mapping objects cel maps objects abstraction units associating object abstraction unit using declarative mapping approach requires means naming objects chose namemore precisely identifyan object based created code software engineer identifies objects mapping particular abstraction unit describing part call stack exists one objects created approach advantage engineer identify collections objects perusing source code describing locations relevant allocations occur another possible choice would name objects based class however approach naming would allow objects class mapped different abstraction units limiting ability engineer differentiate distinct uses classes currently mapping provided engineer applied uniformly dynamic information collected system executes ramification decision object associated abstraction unit remains associated unit duration visualization times though may useful modify association objects abstraction units course execution instance object created one subsystem immediately passed argument another subsys tem may useful capture migration object supporting migration would require means allow engineer describe migration would occur also would require updates use histograms object allocation deallocation understanding capability might help performance tasks required support added 55 dynamic information current prototype visualizes trace information collected systems execution trace information benefit complete object interactions allocations deallocations included trace complete information easy engineer reason however trace information often cited problem voluminous 9 2 8 tracing even small pieces systems execution result huge amounts data althoughwe able successfully use trace data investigate performance problems use trace information limits flexibility usability current prototype plan investigate use sampled information basis prototype overcome limitations 6 related work de pauw et al developed number visualizations describe execution objectoriented system including interclass call cluster diagrams interclass call matrices histogram instances allocation matrix 1 visualizations show finegrained execution information individual classes objects utility visualizations degrades size measured number classes system grows several similar object classlevel visualization approaches developed eg 6 5 techniques share scalability problem lange nakamura program explorer tool allow developer integrate offline static dynamic information program aid comprehension activities 7 8 instance show combination information help developer find investigate instances design patterns system visualizations produce also finegrained level vlissides et al use different notion pattern refer execution patterns help developers investigate large amount finegrained execution information available system 3 specifically allow developer query online animation patterns appearing dynamic execution stream program explorer execution pattern approaches developer must apply detailed knowledge system formulate appropriate queries jerding et al applied information mural approach create scalable visualization finegrained program events 4 result execution mural places classes vertically screen uses single pixel vertical bars various colouring approaches indicate calls classes interactions occurring system shown across screen using approach thousands interactions occurring objects visualized one screen authors extend ideas pattern mural provides information mural display automatically detected common occurring sequences calls patterns execution although approach may help developer find unexpected patterns verify existing patterns code still visualizes finegrained informationabout system approach taken sefika et al differs allowing developer utilize coarsegrained system information produce visualizations 14 using technique developer may introduce various abstractions system instrumentation process including subsystem framework patternlevel abstractions abstractions used basis several visualizations including affinity ternary dia grams coarsergrained visualizations produced technique make easier developers investigate intercomponent interactions large systems previous approaches design decisions sefika et al made developing technique limit flexibility choosing online approach permits link speed shown visualization execution speed however discussed online approach limits modes investigation available engineer choosing approach hardwires abstractions interest instrumentation process provides effective data gathering mechanism ever decreases usability technique making difficult engineer apply new system able easily apply technique different systems separation process data gathering visualization visualization technique buildson software reflexion model technique developed murphy et al 12 10 reflexion model technique helps engineer access static dynamic information system enabling comparison posited highlevel model model representing informationextracted either static source systems execution similar visualization tech nique software reflexion model depends declarative mapping language visualization technique extends reflexion model work three fundamental ways applying abstraction approach across discrete intervals execution animation controls providing support map dynamic entities rather static entities mapping memory aspects execution addition interac tions visualization technique also uses running summary model rather complete summary model used reflexion model approach future work condensing dynamic information collected systems execution terms abstractions represent coarse system structure frameworks subsystems help software engineers investigate behaviour system developed visualization technique allows engineers flexibly define coarse structure interest flexibly navigate resulting abstracted views systems execution approach complements extends existing visualization techniques preliminary investigations usefulness usability visualization indicate shows promise enhancing software engineers ability utilize dynamic information performing tasks system date focused use dynamic information aid one particular software engineering taskperformance tuning intend continue investigations utility entire technique extensive case studies wider range tasks larger systems although evidence elsewhere 10 11 iterative mapping approach usable static information studies investigate remains true dynamic information acknowledgments work funded british columbia advanced systems institute industrial partnership program grant oti inc nserc research grant thank edith law participating case study thank anonymous reviewers comments r visualizing behavior objectoriented systems modeling objectoriented program execution execution patterns objectoriented visualization visualizing interactions program executions interactive visualization design patterns help framework understanding efficient program tracing lightweight structural summarization aid software evolution reengineering reflexion models case study software reflexion models bridging gap source highlevel models intelligent tool reengineering software modularity tr visualizing behavior objectoriented systems interactive visualization design patterns help framework understanding software reflexion models architectureoriented visualization visualizing interactions program executions intelligent tool reengineering software modularity efficient program tracing objectoriented program tracing visualization reengineering reflexion models modeling objectoriented program execution lightweight structural summarization aid software evolution ctr george yee visualization privacy compliance proceedings 3rd international workshop visualization computer security november 0303 2006 alexandria virginia usa steven p reiss visual representations executing programs journal visual languages computing v18 n2 p126148 april 2007 andrs moreno mike joy jeliot 3 demanding educational setting electronic notes theoretical computer science entcs 178 p5159 july 2007 johan moe david carr using execution trace data improve distribute systems softwarepractice experience v32 n9 p889906 july 2002 lei wu houari sahraoui petko valtchev program comprehension dynamic recovery code collaboration patterns roles proceedings 2004 conference centre advanced studies collaborative research p5667 october 0407 2004 markham ontario canada robert j walker gail c murphy implicit context easing software evolution reuse acm sigsoft software engineering notes v25 n6 p6978 nov 2000 bradley schmerl david garlan hong yan dynamically discovering architectures discotect acm sigsoft software engineering notes v30 n5 september 2005 davor ubrani gail c murphy hipikat recommending pertinent software development artifacts proceedings 25th international conference software engineering may 0310 2003 portland oregon robert j walker gail c murphy jeffrey steinbok martin p robillard efficient mapping software system traces architectural views proceedings 2000 conference centre advanced studies collaborative research p12 november 1316 2000 mississauga ontario canada iain milne glenn rowe ogre threedimensional program visualization novice programmers education information technologies v9 n3 p219237 september 2004 avi bryant andrew catton kris de volder gail c murphy explicit programming proceedings 1st international conference aspectoriented software development april 2226 2002 enschede netherlands giuseppe pappalardo emiliano tramontana automatically discovering design patterns assessing concern separations applications proceedings 2006 acm symposium applied computing april 2327 2006 dijon france hong yan david garlan bradley schmerl jonathan aldrich rick kazman discotect system discovering architectures running systems proceedings 26th international conference software engineering p470479 may 2328 2004 abdelwahab hamoulhadj timothy c lethbridge survey trace exploration tools techniques proceedings 2004 conference centre advanced studies collaborative research p4255 october 0407 2004 markham ontario canada paul gestwicki bharat jayaraman methodology architecture jive proceedings 2005 acm symposium software visualization may 1415 2005 st louis missouri raimondas lencevicius urs hlzle ambuj k singh dynamic querybased debugging objectoriented programs automated software engineering v10 n1 p3974 january eleni stroulia tarja syst dynamic analysis reverse engineering program understanding acm sigapp applied computing review v10 n1 p817 spring 2002 martin p robillard gail c murphy representing concerns source code acm transactions software engineering methodology tosem v16 n1 p3es february 2007