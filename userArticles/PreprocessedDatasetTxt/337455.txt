approach architectural analysis product lines paper addresses issue perform architectural analysis existing product line architecture con tribution paper identify demonstrate repeatable product line architecture analysis process approach defines good product line architecture terms quality attributes required particular product line development analyzes architecture criteria manual toolsupported methods phased approach described paper provides structured analysis existing product line architecture using 1 formal specification highlevel architecture 2 manual analysis scenarios exercise architectures support required variabilities 3 model checking critical behaviors architectural level required systems product line results application software product line spaceborne telescopes used explain evaluate approach b introduction software product line collection systems share managed set properties derived common set software assets 4 product line approach software development attractive organizations due focus reuse intellec research performed author visiting researcher jet propulsion laboratory author supported part nasaasee summer faculty fellowship z contact author x mailing address dept computer science iowa state uni versity 226 atanaso hall ames ia 500111041 tual eort existing tangible artifacts systems derivatives software product line eg software based product line usually share common ar chitecture new product line many alternative architectures designed according requirement specications one selected baseline core future systems product line leverages existing systems architecture may already place organizational commitment continued use paper addresses issue perform architectural analysis existing product line archi tecture contribution paper identify demonstrate repeatable product line architecture analysis process throughout paper application software product line spaceborne telescopes used explain evaluate approach approach denes good product line architecture terms quality attributes required particular product line development analyzes architecture criteria manual toolsupported methods paper demonstrates analytical value specifying existing architecture architectural description language adl terms identifying architectural mismatches product line terms providing baseline subsequent automated analyses adl model used manually exercise architecture order measure set selected scenarios capture required attributes eg modiability fault tolerance impacts architecture found technique particularly eective verifying whether architecture supported planned variabilities within product line verication architecture involves automated tool support analyze key common behaviors particularly interested adequacy faulttolerant behavior critical data interface common systems model checking targeted behaviors allows demonstration consequences architectural decisions product line phased approach described paper provides structured analysis existing product line architecture using 1 architectural recovery specication 2 manual analysis scenarios exercise architectural support required variabilities 3 model checking critical behaviors architectural level required systems product line rest paper organized follows section 2 provides background relating software architecture product lines interferometer application section 3 describes threestep approach outlined greater detail section 4 presents discusses results manual toolsupported analyses section 5 brie describes related work section 6 offers concluding remarks indicates directions future research section describes background material areas software architectures software product lines interferometry 21 software architectures software architecture describes overall organization software system terms constituent ele ments including computational units interrelationships 21 general architecture dened conguration components connectors component encapsulation computational unit interface species capabilities component provide connectors hand encapsulate ways components interact conguration components interconnected connectors determines topology architecture provides structural semantic view sys tem semantics provided individual specications components connectors another important concept area software architectures concept architectural style architectural style denes patterns semantic constraints conguration components connec tors style dene set family systems share common architectural semantics 18 instance pipe lter style refers pipelined set components whereas layered style refers set components communicate via hierarchies interfaces distinction architectural style architecture important concept throughout work described one would expect systems example product line share base architectural style set shared software components organized communicate certain prescribed manners however architectural variations among systems regarding number components connectors systems replicating portions baseline reference architecture individual architectures 22 product lines bass clements kazman dene software product line collection systems sharing managed set features constructed common set core software assets 4 assets typically include base architecture set shared software components software architecture product line displays commonality systems share provides mechanisms variability among products systems product line referred members derivatives baseline architecture architectural style 23 interferometers product line interest work set interferometer projects development nasas jet propulsion laboratory interferometer con text collection telescopes act together single powerful instrument interferometers used explore origins stars galaxies search earthlike planets around distant stars interferometer combines starlight collects telescopes way light interferes interacts increase intensity increase precision observation three spaceborne interferometers either development planned launch next eleven years additional formation ying interferometers envisioned subsequent years 13 19 two groundbased interferometers product line currently operational least two planned among components shared interferometer systems discussed paper delay line fringe tracker internal metrology delay line component compensates dierence time arrival starlight separate mirrors fringe tracker component provides constant feedback delay line regarding needed adjustments maintain peak intensity fringe pat terns light dark bands produced interference light internal metrology component provides input delay line regarding small changes distances among parts interferometer must included calculations previous work analyzed commonalities variabilities jpl interferometry software project 17 software interferometers high degree commonality managed set shared features built core software components 3 group developers jpl strong background interferometer software provides reusable generic software components interferometer projects extensive documentation requirements design software components well c code component prototypes available analyses addition used whatever projectunique documentation available predictably documentation exists projects farther along de velopment system descriptions available missions software requirements design documents still highlevel informal later missions code yet available spaceborne interferometers section describe approach used analyze interferometer software product line section 31 summarizes overall process used project introduces architectural recovery dis covery specication existing product line section 32 describes manual analysis process used measure quality attributes related product lines section 33 describes behavioral analysis performed using automated tool support 31 process software architecture one key required element present order analyze software product line tness since architecture artifact reused one properties particular product line although architecturallybased product line approach used construction software artifacts conceptual physical used manner indicative product line approach several software products developed process developed based core architecture interferometer software performed three architecturecentered steps 1 architecture recovery discovery specication 2 manual architectural analysis assisted architectural analysis rst step architecture recovery discovery specication used order facilitate two goals 1 familiarize analysts problem domain implemented solution 2 support construction software architectural representation consistent current standards vocabulary step documentation source code developer communication used assist construction reasonable specication software architec ture resulting architecture specication shown graphically figure 1 formed basis subsequent analyses manual automated diagram hardware components shown shaded round rectangles software components shown sharp rectangles connectors represented lines components depict relationships components architecture particular diagram represents software exists within arm interferometer standard interferometer two arms software architecture recovered rst step formed baseline core architecture interferometer product line assumption step later conrmed analysis described although changes software code frequent signicant modications software architecture infrequent reasonable initial view software architecture derived existing design documents later modied new information recovered aid validation models constructed rst step consulted project engineers determine accuracy architecture documented comparison project engineers viewed architecture information instrumental constructing accurate view interferometer architecture validate accuracy core architecture scalability existing planned products product line compared core individual product line derivatives facilitate com parison developed table excerpted table 1 medium communication several developers table row represents dierent component could potentially present interferometer system columns represent dierent derivatives currently either developed planned deployment next several years table served simple way represent features architecture common behavior potential derivative potentially vary multiplicity based number potential starlight collectors arms derivative consulted developers verify number components listed table consistent individual mission plans components core d1 d2 d3 baselines arms delay line 2 2 68 4 fringe tracker 2 1 34 2 instrument user interface table 1 comparison matrix next phase approach perform number analyses order help determine whether architecture amenable product line development approach primary goal determine figure 1 interferometer software architecture certain desirable quality attributes present product line architectures also present interferometer architecture addition interested performing behavioral analysis order study behavioral interactions core architecture might potentially impact derivatives remainder section divided manual architectural analysis analysis using automated support tools one interesting aspects bifurcation analysis along manual automated analysis lines quality attributes fall class variabilities seem supported manual analysis techniques whereas commonalities seem supported manner automated tools work described single point data attempt explain observation although nd interesting recognize need investigation along lines 32 manual architectural analysis bass clements kazman divide quality attributes discerned observing system runtime cannot 4 ones cannot observed runtime modiability key property required interferometer product line modiability according bass et al may quality attribute closely aligned architecture system good way evaluate architecture bass et al identify four categories mod iability extensibility changing capabilities deleting capabilities portability adapting new operating environments restructuring evaluate modiability interferometry product line architecture extracted examples four categories modiability requirements specications four systems currently planned development using productoriented view product line consistent product line approaches pulse technique 6 manually analyzed eect change specied architecture interferometer system chosen requirements well documented individual product line derivatives requirements facilitated study mod iability baseline architecture approach used similar saam 14 scenariobased method analyzing architectures scenario description expected use spe cic product line saam also tests modiability eg proposing specic changes made sys tem advantage scenariobased approach moves discussion rather amorphous highlevel generality modiability concrete contextbased level detail particular product line adds pathlength feedforward capability interferometer product line signicant requirements fall four categories mod iability follows extensibility potential extensibility variations include new algorithms eg dierent fringesearch algo rithm added features eg pathlength feedforward internal metrology deletions deletions involve changes required support incremental capabilities various testbeds prototypes example testbeds use pseudostar input rather actual starlight whereas science interferometers use direct starlight input attribute scenario type example scenario eect architecture extensibility change algorithm algorithm fringe search changed change required extensibility add feature pathlength feedforward capability style change additional connectors extensibility add feature internal metrology added style change additional components connectors deletion delete input use pseudostar rather actual change required portability change hci device shift handheld paddle remote device connector unchanged portability change sensor starlight detector hardware changed interface intact component implementation changes portability add input units starlight collectors style change duplicate existing pieces see discussion portability add processors distribute targeting computation style change change within components restructuring optimize reuse proposed switch corba might change style connectors table 2 analyzing architectures modiability via scenarios portability portability changes widespread since dierent interferometers product line dierent numbers starlight collectors mirrors tele scopes etc addition dierent systems use different starlight detector hardware dierent operator interfaces eg handheld paddle testbeds remote commandability ight units interferometer software run multiple processors number processors variability among systems restructuring restructuring changes included categories limited proposed change optimize reuse scenario used architectural evaluation shown table 2 nine representative changes selected evaluate modiability architecture three extensibility changes one deletion four portability changes one restructuring changes variabilities product line specication ie common interferometers approach use representative scenarios exercise evaluate baseline architecture discussion results application baseline interferometer architecture generally advantages disadvantages approach found section 4 33 analysis using automated support tools one goals project determine extent automated support tools could used aid analysis product line software archi tecture specically intent identify tools could adopted little overhead still satisfying objective formally analyzing architectural behavior meant selected tools reasonable level support documentation following tasks identied critical path achieving automated analysis objectives 1 architecture specication adl 2 formal speci cation behavior 3 analysis behavior approach used selection notations tools described results toolsupported analysis described discussed section 4 acme 9 adl acmestudio 1 support tool chosen specication architecture acme architecture description language used highlevel architectural specication interchange 9 acme contains constructs embedding specications written wide variety existing adls making extensible existing future specication languages acme supported architectural specication tool acmestudio supports graphical construction manipulation software architectures analysis design documents yielded software architecture depicted figure 1 addition recovering specifying highlevel view interferometer architecture behaviors component interactions derived existing design documentation specically used information found design documents help construct formal specication component interactions interferometer software wright adl used formal specication behavior wright 2 adl based csp specication language 11 primary focus wright adl facilitate spec ication connector role port semantics addition based wellestablished csp se mantics existing wright tools support acme adl thus providing clean interface existing acme specication nal step involved using formal specications analyze behavior various aspects certain interactions components architecture increase condence validity formal anal ysis source code interferometer components planned reuse informally reverse engineered determine whether properties observed formal specication present implementation model checker used analyze behaviors interest spin 12 symbolic model checker used verifying behavior wide variety hardware software applications promela input specication language spin based di jkstras guarded command language well csp primary reason choosing notations tools listed pragmatic one notations related either via direct tool interchange support case acme wright semantic foundation eg csp foundation wright promela acme framework including wright specications could used specifying interferometer architecture verication using spin could follow naturally small amount translation embedded wright promela section describe results applying approach described section 3 specically section 41 discusses issues encountered recovery specication interferometer architec ture sections 42 43 describe eorts manually semiautomatically analyze architecture respectively 41 architecture specication shown figure 2 original documentation interferometry software depicts architecture using layered style however analysis subsequent specication architecture discovered architecture documented exhibited layer bridging properties whereby nonadjacent layers architecture communicated thus bridging passing intermediate layers addition sibling components located layer found communicate contrary layered style consequently highlevel interferometer architecture respecied style consistent services behaviors described lowerlevel documentation resulting architecture shown figure 1 accurately spec ied architecture heterogeneous architecture collection communicating processes well constrained pipe lter interaction instrument cds remaining components 42 manual analysis results baseline architecture shows commonality exists among members product line member product line uses architecture adaptation thus nothing architecture constrain anticipated variabilities among members mentioned earlier one key quality attributes interferometer product line modiability gizmo prototypes gizmo design pattern core services configuration controller modulation framework command framework command telemetry framework engine framework framework gizmo interprocessor communication periodic task scheduler hardware framework pointer angle instrument cds delay line fringe tracker star tracker figure 2 original core architecture goal exercising product line architecture considered eect architecture nine representative modiability scenarios drawn documentation eect architecture scenarios table 2 summarizes results manual analysis product line architecture modiability via nine scenarios described section 32 column 1 indicates four categories modiability scenario belongs extensibility deletion portability restructuring column 2 highlevel description scenario eg change algorithm add feature change sensor etc column 3 brie describes particular scenario column 4 indicates eect modiability scenario baseline architecture nine scenarios four involved change baseline architecture scenarios change algorithm deletion input change humancomputer interface device change sensor device two scenarios related extensibility require additional connectors one case additional component original architecture however extensions relatively straightforward scope easy anticipate three scenarios require signicant changes product line architecture changes visible level specied architecture one case add input units implementation scenario involve adding arms ie additional axes interferometer eect detailed core architecture represents single axis requires duplicationreplication connectors components baseline architecture signicant architectural consequence scenario distributes targeting computation processors accommodated without change baseline architec ture level model commitment implementation details number processors sole restructuring scenario possible switch corba might change style implementation connectors would require investigation discussion locality change modiability scenarios demonstrated good locality change specied architecture ie involved changes could readily scoped existence architectural specication assisted eort scenarios aect services required components units reuse units reuse architecture tended small example delay line unit delay linefringe trackerstar tracker delay lines high degree common ality interfaces single delay line single fringe tracker similar members portability layer number delay linefringe tracker interfaces varies greatly among product line members architectural style changed scenarios number connections lesser degree components changed many dierent crossstrappings possible large amount reconguration involved meeting realtime constraints various missions small units reuse may complicate verication integration individual members eg regard contention race conditions starvation etc role redundancy several scenarios involved adding multiple identical components connectors however copies redundant sense adding robustness since needed achieve required performance example starlight collectors added increase amount starlight interferometer process order meet requirements detecting dim targets like wise processors added meet requirements increasing resolution capability interfer ometer architecture redundancy add robustness part spare units alternate data paths performance one unusual aspects application range scope variabilities tend nonnegotiable due tight performance accuracy requirements interferometry missions example upcoming terferometer space interferometry mission sim requires precision level picometer metrology microarcsecond astrometry achieve level precision signicant realtime constraints exist limited exibility accommodate reuse concerns performance requirements mission also drive choice hardware algorithms added capabilities consequence reuse tradeos modi ability vs performance performance wins architectural style despite range variations aect architecture eg varying number ports component varying number instances component interferometry project committed keeping architectural style stable im portantly demonstrates maintaining commonality interfaces number interfaces constant among product line members interfaces relatively stable recognizing long timeline product line extend proposed launches 2020 primacy performance continuous improvement hardware algorithms project done good job designing evolvability repeatable process manual analysis architecture repeatable process applied product lines process follows 1 anticipated changes available documentation project information anticipated changes form product line variabilities baseline architecture must accommodate 2 categorize anticipated changes modia bility categories extensibility deletion portability restructuring 3 select develop scenarios category choice scenarios made broadly challenge goodness architecture regard four modiability categories 4 evaluate eect modiability scenario baseline architecture gives measure goodness architecture respect anticipated variabilities product line 43 analysis using automated support tools manual analysis addressed issues related directly use interferometer architecture product line automated analysis primarily use analyzing behavior viewed common across product line members behavioral properties positive negative discovered architectural level likely common members product line verication key element interferometer architecture use target buer connector connec tor design implementation nonlocking buer used communicate star targets delay line component several components target buer connector viewed possible concern especially light nonlocking feature determined behavior involving connector formally specied order study impact system several components either directly indirectly impacted nonlocking nature target buer connector target sources command controller target generator component target generator uses values written target buer various target sources compute target position interferometer command controller provides control computation enabling disabling target sources target sources write timestamped value target buer timestamp determining time target value becomes valid target generator uses following fourstep sequence calculating target position 1 promote waiting targets active status current time greater equal timestamp 2 read new targets enabled target sources 3 pend assign wait status activate new targets based timestamps 4 compute total target wright specication interaction target generator potential sources data written target buer shown figure 3 source specication models fact source internally decides whether write new value target buer finally target generator specication models targetposition algorithm described wright specication constructed promela specication portions found figures 4 5 intention determining whether following situations could occur data disabled sources potential calculating target position using data sources currently disabled best data enabled sources potential calculate target position using data less current data currently target buer rst case interested determining whether possible generate target position using data inactive sources essence target position input read target gener ator pended due timestamp eg timestamp indicates target value used time future subsequently promoted use timestamp matches precedes current time potential inconsistency occurs time target pended caused fact source disabled waiting period style targetcomputation connector targetbuffer role role readerreadtargetx glue tick component source disable cdscommand tick computation cdscommandenable generate cdscommanddisable computation tick generate dltargetwritey generate generate tick component targetgenerator inputreadtargetx pendoractivate compute computation tick style configuration targetcomputationinstance instances attachments src1dltarget tb1writer dlinput tb1reader end configuration figure 3 subset wright specication proctype source1 chan cds chan cmd chan ts 1 int chan int int activeorinactive cdscmd msgsgenerated maxmsgs activeorinactive true run messagemsg run timestampts od figure 4 promela specication target source second case involves following situation fore target source read potentially pended eventually promoted sequencing events new target value source overwrite recently promoted target based timestamp valid immediate use using spin model checker veried situations fact exist order determine whether cases also present code examined source les able verify proctype targetgenerator chan valid int sum int v msgsgenerated maxmsgs activationpromotion pended targets achieved maintaining previous value s1 s2 read new targets active target sources v v check pended compute target v s1ap s2ap reset sum msgsgenerated maxmsgs break figure 5 promela specication target generator situations documented specied wright fact exist early pre ight version source code cases use nonlocking buer coupled targetgenerator algorithm provided potential intermittent values inconsistent desired current target interferometry project engineers conrmed spin model checker accurately modeled software behavior situations rst case target currently disabled target source may still activated second case newly received target less current timestamp overwrite active target ever neither case software behavior contrary intent given underlying assumptions operational use software discussion automated analysis interferometer architecture using spin model checker greatly facilitated availability use wright acme adls eect using combination tools able use model checking manner directed structure behavior software archi tecture software architecture specication used direct model checking activity facilitating identication potentially interesting points interaction interferometer architecture given fact behavior observed architecture potentially replicated among product line members found approach good complement manual analysis activities extensive body related work product lines described brie section 22 detail 17 work builds product family techniques commonality analysis 3 fast process 22 systematically model required similarities dierences among family members architectural implications product line models analyzed perry 20 gomaa farrukh 10 researchers sei among others 5 date emphasis developing architectures new product lines rather evaluating architecture existing product line done described section 32 software architecture analysis method saam scenariobased method architectural assessment related architectural analysis method architecture tradeo analysis method atam 15 iterative method based identifying set quality attributes associated analysis techniques measure architecture along dimensions attributes sensitive points architecture determined assessing degree attribute analysis varies variations architecture approach focus quality attributes specic product line architec tures approach applied either saam atam context rapide 16 suite techniques tools support use executable architectural design languages eadls toolset supports analysis timesensitive systems early construction phase eg architecture denition analysis correctness performance work motivation choosing particular technique based desire eventually transfer technology project engineers addition interested interoperability tools found acme adl associated acmestudio tool presented least amount educational overhead acme also advantage able embed adls specication however recognize several alternatives rapide exist investigating possibility performing similar analyses tools 6 conclusion work described identies demonstrates process analysis existing product line archi tecture results architectural recovery discovery captured adl model support subsequent inquiries architecture manually analyzed set representative scenarios required quality attributes analysis critical behaviors architectural level uses automated tools model checking evaluate consequences architectural decisions product line application combined approach interferometer product line architecture resulted measurements exibility limits architectural style could assist project work planned several areas previous work used formal techniques reverse engineering program code 7 8 plan investigate reverse engineering also used assist recovery product line assets existing repositories collections programs may involve consideration dierent analysis frameworks eg rapide oer fully integrated environments investigation wrightspin translations also plan pursue relationship product line commonali tiesvariabilities analysis techniques observation quality attributes relating variabilities eg modiability seem best supported manual analysis techniques whereas commonality attributes best analyzed automated tool support eg model checking merits study finally would like make precise role architectural issues product line decision models acknowledgments thank dr john c kelly continued support work thank dr braden e hines dr charles e bell thomas g lockhart helpful discussions explanations regarding reuse interferometry software part work described paper carried jet propulsion laboratory california institute technology contract national aeronautics space administration funding provided nasas code r acmestudio graphical design environment acme formal basis architectural connection software architecture practice framework software product line practice systematic approach derive scope software product lines strongest postcondition formal basis reverse engineer ing speci acme architecture description interchange language reusable architecture federated clientserver systems communicating sequential processes model checker spin eventbased architecture de nition language extending product family approach support safe reuse exploiting architectural style develop family applications generic architecture descriptions product lines software architectures perspectives emerging discipline software productline engineering tr communicating sequential processes software architecture defining families formal basis architectural connection model checker spin strongest postcondition semantics formal basis reverse engineering software architecture practice systematic approach derive scope software product lines specification matching based approach reverse engineering reusable architecture federated clientserver systems software productline engineering extending product family approach support safe reuse scenariobased analysis software architecture eventbased architecture definition language generic architecture descriptions product lines acme ctr robyn r lutz gerald c gannod analysis software product line architecture experience report journal systems software v66 n3 p253267 15 june h conrad cunningham yi liu cuihua zhang using classic problems teach java framework design science computer programming v59 n12 p147169 january 2006 femi g olumofin vojislav b mii holistic architecture assessment method software product lines information software technology v49 n4 p309323 april 2007