tracing lineage view data warehousing environment consider view data lineageproblem warehousing environment given data item materialized warehouse view want identify set source data items produced view item formally define lineage problem develop lineage tracing algorithms relational views aggregation propose mechanisms performing consistent lineage tracing multisource data warehousing environment result form basis tool allows analysts browse warehouse data select view tuples interest drillthrough examine exact source tuples produced view tuples interest b introduction data warehousing system materialized views source data defined computed stored warehouse answer queries source data may stored distributed legacy systems integrated efficient way wid95 typically online analytical processing mining olap olam systems operate data warehouse allowing users perform analysis predictions cd97 hcc98 many cases views useful analysis knowing set source data produced specific pieces view information also useful given data item materialized view determining source data produced process produced termed data lineage problem applications view data lineage ffl olap olam effective data analysis mining needs facilities data exploration different levels ability select portion relevant view data drilldown origins useful addition analyst may want check origins suspect anomalous view data verify reliability sources even repair source data ffl scientific databases scientists apply algorithms commonly understood accepted source data derive views perform specific studies olap useful scientist focus specific view data explore derived original raw data work supported rome laboratories air force contract f306029610312 advanced research development committee community management staff project mdds program ffl online network monitoring diagnosis systems anomalous view data computed diagnosis system network controller use data lineage identify faulty data within huge volumes data dumped network monitors ffl cleansed data feedback information centers download raw data data sources cleanse data performing various transformations data lineage helps locate origins data items allowing system send reports cleansed data back sources even link cleansed items original items materialized view schema evolution data warehouse users may permitted change view definitions eg add column view certain circumstances view data lineage help retrofit existing view contents new view definition without recomputing entire view ffl view update problem surprisingly tracing origins given view data item related wellknown view update problem bs81 section 82 discuss relationship show lineage tracing used help translate view updates corresponding base data updates general view definition provides mapping base data view data given state base data compute corresponding view according view definition however determining inverse mappingfrom view data item back base data produced itis straightforward determine inverse mapping accurately need view definition also need base data additional information warehousing environment introduces certain challenges lineage tracing problem trace lineage base data distributed among multiple sources sources inaccessible consistent warehouse views time warehousing environment help lineage tracing process providing facilities merge data multiple sources store auxiliary information warehouse consistent fashion paper focus lineage problem relational selectprojectjoin views aggregation aspj views data warehousing environment results extend additional relational operators show cww98 summary ffl formulate view data lineage problem give declarative definition tuple derivations relational operators inductively define view tuple derivations based tuple derivations operators section 4 ffl develop derivation tracing algorithms including proofs correctness sections 5 6 ffl discuss issues derivation tracing warehousing environment show trace tuple derivations views defined distributed legacy sources consistently efficiently section 7 first discuss related work section 2 motivate lineage problem using detailed examples section 3 defining lineage problem presenting solutions summarized section 8 revisit related issues eg view update problem detail conclusions future work covered section 9 proofs provided appendix related work great deal work view maintenance related problems data warehous ing best knowledge lineage problem addressed overviews research directions results data warehousing found cd97 wid95 wb97 specifically covers view maintenance problems data warehousing incremental view maintenance algorithms presented relational algebra views qw91 aggregation qua96 recursive views gms93 view selfmaintainability issues addressed qgmw96 warehouse view consistency studied zgmw96 zwgm97 ensure views warehouse consistent reflect consistent states sources papers consider computing warehouse views address reverse problem view data lineage olap systems usually sitting top data warehouse allow users perform analysis make predictions based warehouse view information col96 hcc98 data cube popular olap structure facilitates multidimensional aggregation source data gblp96 cube rollingup drillingdown enable user browse view data level dimension aggregation hru96 mqm97 however data cubes based restricted form relational views usually allow drilling within warehouse original data sources metadata warehouse views maintained record lineage information particular view column cm89 hqgw93 however approach provides schemalevel lineage tracing many applications require lineage finer instancelevel granularity scientific databases use tuplelevel annotations keep track lineage hqgw93 introduce high storage overhead warehousing applications introduces weak inversion compute finegrained data lineage however views inverse weak inverse also system ws97 requires users provide views inverse function order compute lineage feel always practical algorithms trace tuplelevel lineage automatically user maintain necessary auxiliary information ensure view invertibility problem reconstructing base data summary data studied fjs97 statistical approach estimates base data using summary data certain constraints guarantee accurate lineage tracing paper focus accurate lineage tracing base data available either remote sources stored locally warehouse view update problem db78 kel86 translate updates view updates relevant base tables updated base tables derive updated view view data lineage used help solve view update problem employing different approach previous techniques see section 8 finally datalog perform topdown recursive rulegoal unification provide proofs goal proposition ull89 provided proofs find supporting facts goal proposition therefore also thought providing propositions lineage however take approach different rulegoal unification detailed comparison presented section 8 item id item name category binder stationery stationery shirt clothing pants clothing pot kitchenware figure 1 item table store id store name city state 004 macys new york city ny figure 2 store table store id item id price num sold figure 3 sales table motivating examples section provide examples motivate definition data lineage lineage tracing useful consider data warehouse retail store data following base tables itemitem id item name category storestore id store name city state salesstore id item id price num sold item store tables selfexplanatory sales table contains sales information including number price product sold store example table contents shown figures 1 2 3 example 31 lineage spj view suppose sales department wants study selling patterns california stores materialized view calif defined data warehouse analysis sql definition view select storestorename itemitemname salesnumsold store item sales view definition also expressed using relational algebra tree figure 4 materialized view calif sample data shown figure 5 analyst browses view table interested second tuple target pencil 3000 would like see relevant detailed information asks question q1 base data produced tuple target pencil 3000 calif using algorithms present section 5 obtain answer figure 6 answer tells us target store palo alto sold 3000 pencils price 1 dollar sales store storename itemname numsold item calif figure 4 view definition calif store name item name num sold target binder 1000 target pencil 3000 target pants 600 macys shirt 1500 macys pants 600 figure 5 calif table store id name city state item stationery sales id id price num sold figure calif lineage target pencil 3000 example 32 lineage aggregation view lets consider another warehouse view clothing analyzing total clothing sales large stores sold 5000 clothing items clothing select sumnumsold total item store sales group storename relational algebra definition view shown figure 7 extend relational algebra aggregation operator denoted ff gaggrb g list groupby attributes aggrb abbreviates list aggregate functions attributes details given section 41 materialized view contains one tuple 5400 shown figure 8 analyst may wish learn origins tuple asks question q2 base data produced tuple 5400 clothing surprisingly due complex view definition question difficult answer q1 develop appropriate algorithms section 6 figure 9 presents answer lists branches macys clothing items sell items sales information information used derive tuple 5400 clothing questions q1 q2 ask base tuples derive view tuple call base tuples derivation lineage view tuple next section formally define concept derivation sections 5 6 7 present algorithms compute view tuple derivations item sales storename sumnumsold total total total 5000 store clothing figure 7 view definition clothing total figure 8 clothing table store id name city state 004 macys new york city ny item shirt clothing pants clothing sales id id price num sold figure 9 clothing lineage 5400 4 view tuple derivations section define notion tuple derivation set base relation tuples produce given view tuple section 41 first introduces views focus paper tuple derivations operators views defined sections 42 43 respectively assume table relation r schema r contains set tuples duplicates thus consider set semantics paper adapted work bag semantics well please see cww98 database contains list base tables view v virtual materialized result query base tables query mapping base tables view table called view definition denoted v say 41 views consider class views defined base relations using relational algebra operators selection oe projection join aggregation ff framework applies well set union set intersection set difference gamma however operators omitted paper due space constraints please see cww98 details use standard relational semantics included completeness base case ffl projection ig consider multiway natural join thus grammar view definition language follows r base table views c selection condition boolean expression attributes v 1 projection attribute list v 1 g groupby attribute list v 1 aggrb abbreviates list aggregation functions apply attributes v 1 convenience formulation view references relation consider relation instance separate relation example treat selfjoin r r r r 1 r r 2 consider r 1 r 2 two tables approach allows view definitions expressed using algebra tree instead graph limiting views handle view definition language expressed using query tree base tables leaf nodes operators inner nodes figures 4 7 examples query trees 42 tuple derivations operators define concept derivation assume logically view contents computed evaluating view definition query tree bottomup operator tree generates result table based results children nodes passes upwards begin focusing operator defining derivations operators result tuples based input tuples according relational semantics operator generates result tuplebytuple based operand tables intuitively given tuple result operator op subset input tuples produce say tuples subset contribute call entire subset derivation input tuples ts derivation either contribute nothing contribute result tuples figure illustrates derivation view tuple figure operator op applied tables 1 2 may base tables temporary results operators general use rs denote base tables denote tables may base derived table operation result given tuple subsets 2 1 2 contribute called ts derivation formal definition tuple derivation operator given next followed additional explanation definition 41 tuple derivation operator let op relational operator oe ff tables table results applying op given tuple 2 define ts derivation according op op gamma1 maximal subsets op t1 t2 figure 10 derivation tuple opt b 8t also say op gamma1 ts derivation tuple contributes extended represent derivations set tuples represents multiway union relation lists 1 definition 41 requirement says derivation tuple sets derive exactly relational semantics know result tuple must exist tuple sets requirement b says tuple derivation fact contribute something example requirement b given base tuples satisfy selection condition c therefore make contribution view tuple appear view tuples derivation defining lambda maximal subsets satisfy requirements b make sure derivation contains exactly tuples contribute thus derivation fully explains tuple exists view theorem 42 shows unique derivation given view tuple recall proofs provided appendix theorem 42 derivation uniqueness given 2 opt tuple result applying operator op tables exists unique derivation according op example 43 tuple derivation aggregation given table r figure 11a tuple figure 11b derivation r sumy1b r x sumy r r c 1 2 8 r figure tuple derivations aggregation shown figure 11c notice rs subset fh2 3i h2 5ig also satisfies requirements b definition 41 maximal intuitively h2 0i also contributes result tuple since computed adding attributes h2 3i h2 5i h2 0i r definition 41 semantics operators section 41 specify actual tuple derivations operators theorem 44 tuple derivations operators let tables result tuple 43 tuple derivations views defined tuple derivations operators proceed define tuple derivations views mentioned earlier view definition expressed query tree evaluated bottomup intuitively base tuple contributes tuple 0 intermediate result view evaluation 0 contributes view tuple contributes define view tuples derivation set base tuples contribute view tuple specific process view tuple derived illustrated applying view query tree derivation tuple sets presenting intermediate results operator evaluation definition 45 tuple derivation view let database base tables view consider tuple 2 v 1 contributes v 2 view definition contributes according operator op definition 41 2 r contributes according view v j definition recursively contributes according v r b2 c r r 0 figure 12 tuple derivation view define ts derivation according v v gamma1 subsets r rm 2 r contributes according v also call r derivation r according v denoted v finally derivation view tuple set contains base tuples contribute view tuple set v theorem 42 applied inductively obvious way show view tuples derivation unique example 46 tuple derivation view given base table r figure 12a view figure 12c tuple easy see tuples h2 3i h2 5i r contribute h2 3i h2 5i oe 60 r figure 12b contribute h2 8i v derivation v gamma1 r shown figure 12d state properties tuple derivations provide groundwork derivation tracing algorithms theorem 47 derivation transitivity let database base tables r let view suppose v also represented intermediate view derivation v j according v 0 ts derivation according v concatenation derivations according v j v represents multiway concatenation relation lists 2 theorem 47 result definition 45 shows given view v complex definition tree break definition query tree intermediate views compute tuples derivation recursively tracing hierarchy intermediate views 2 concatenation two relation lists relations renamed relation never appears twice since define tuple derivations inductively based view query tree interesting question arises derivations two equivalent views also equivalent two view definitions query trees v 1 v 2 equivalent iff 8d v 1 prove theorem 48 given two equivalent selectprojectjoin spj views tuple derivations also equivalent theorem 48 derivation equivalence spj transformation tuple derivations equivalent spj views equivalent words given equivalent spj views v 1 v 2 according theorem 48 transform spj view simple canonical form tracing tuple derivations unfortunately views aggregation nice property shown following example example 49 tuple derivations equivalent views aggregation let equivalent since given base table r figures 11a 12a figures 11b 12c show contents two views however derivation tuple according v 1 shown figure 11c different according v 2 shown figure 12d given definition 45 straightforward way compute view tuple derivation compute intermediate results operators view definition store temporary tables trace tuples derivation temporary tables recursively reaching base tables obviously approach impractical due computation storage required intermediate results next two sections separately consider spj views views aggregation aspj views show section 5 one relational query base tables suffices compute tuple derivations spj views recursive algorithm aspj view derivation tracing requires modest amount auxiliary information described section 6 5 spj view derivation tracing derivations tuples spj views computed using single relational query base data section first define general concept derivation tracing query applied directly base tables compute view tuples derivation specify tracing queries spj views discuss optimization issues tracing queries 51 derivation tracing queries sometimes write query specific view definition v view tuple apply query database returns ts derivation based definition 45 call query derivation tracing query tracing query v formally definition 51 derivation tracing query let database base tables given view definition v r derivation tracing query v iff ts derivation according v tq tv independent database instance similarly define tracing query view tuple set denote tq tv 52 tracing queries spj views spj views transformed form oe c r 1 using sequence spj algebraic transformations ull89 call form spj canonical form theorem 48 know spj transformations affect view tuple derivations thus given spj view first transform spj canonical form tuple derivations computed systematically using single query first introduce additional operator used tracing queries spj views definition 52 split operator let table schema operator split breaks list tables table list projection onto set attributes h 1 theorem 53 derivation tracing query spj view let database base tables r spj view given derivation according v computed applying following query base tables given tuple set vd derivation tracing query n semijoin operator example 54 tracing query calif recall q1 view calif example 31 asked derivation tuple target pencil 3000 figure 13a shows tracing query target pencil 3000 calif according theorem 53 reader may verify applying tracing query source tables figures 1 2 3 obtain derivation result figure 6 53 tracing query optimization derivation tracing queries section 52 clearly optimized better performance example simple technique pushing selection conditions join operator especially applicable tracing queries significantly reduce query cost figure 13b shows optimized tracing query calif tuple sufficient key information present tracing query even simpler store sales store sales item item store item sales tq target pencil 3000 calif store item sales target pencil 3000 calif b optimized unoptimized figure 13 derivation tracing query target pencil 3000 theorem 55 derivation tracing using key information let r base table attributes k include base keys ie derivation hoe k 1 r according theorem 55 use key information fetch derivation tuple directly base tables without performing join query complexity reduced omn n maximum size base tables number base tables v defined shown tuple derivations spj views traced efficiently complex views aggregations cannot compute tuple derivations single query base tables next section present recursive tracing algorithm views 6 derivation tracing algorithm aspj views section consider spj views aggregation aspj views although shown intermediate results required spj view derivation tracing aspj views traceable without storing certain intermediate results example q2 example 32 user asks derivation tuple view clothing possible compute ts derivation directly store item sales total column view clothing contained base tables therefore cannot find ts derivation knowing ttotal 5400 order trace derivation correctly need tuple hmacys 5400i intermediate aggregation result serve bridge connects base tables view table introduce canonical form aspj views section 61 section 62 specify derivation tracing query simple onelevel aspj view develop recursive tracing algorithm complex aspj views justify correctness section 63 mentioned intermediate aggregation results view evaluation needed derivation tracing intermediate results either recomputed base tables needed stored materialized auxiliary views warehouse issue discussed section 71 remainder section simply assume intermediate aggregation results available 61 aspj canonical form unlike spj views aspj views simple canonical form aspj view definition selection projection join operators cannot pushed aggregation operators view clothing figure 7 example selection total 5000 cannot pushed aggregation selection category clothing cannot pulled aggregation however commuting combining spj operators ull89 possible transform general aspj view query tree form composed ffoe operator sequences call aspj segments segment query tree except topmost must include nontrivial aggregation operator call form aspj canonical form definition 61 aspj canonical form let v aspj view definition database 1 r base table aspj canonical form 2 aspj canonical form v j aspj view aspj canonical form 62 derivation tracing queries onelevel aspj views view defined one aspj segment called onelevel aspj view similar spj views use one query compute tuple derivation onelevel aspj view theorem 62 derivation tracing query onelevel aspj view given onelevel derivation according v computed applying following query base tables given tuple set derivation tracing query evaluation actual tracing query optimized various ways discussed section 53 63 recursive derivation tracing algorithm multilevel aspj views given general aspj view definition first transform view aspj canonical form divide set aspj segments define intermediate view segment example 63 aspj segments intermediate views clothing recall view clothing example 32 rewrite definition aspj canonical form two seg ments introduce intermediate view allclothing shown figure 14 trace tuples derivation recursively tracing hierarchy intermediate views topdown level use tracing query onelevel aspj view compute derivations current tracing tuples respect view base tables next level details follow clothing storename sumnumsold total allclothing total 5000 total segment 1 segment 2 item store sales figure 14 aspj segments intermediate views clothing 631 algorithm figure presents recursive derivation tracing algorithm general aspj view given view definition v aspj canonical form tuple 2 vd procedure tuplederivationt v computes derivation tuple according v main al gorithm procedure tablederivationt v computes derivation tuple set vd according v discussed earlier assume onelevel aspj view available base table intermediate view 1k procedure first computes derivation hv using onelevel aspj view tracing query tqt theorem 62 calls procedure computes recursively derivation tuple set v j according v j concatenates results form derivation entire list view tuple sets example 64 recursive derivation tracing divided view clothing two segments example 63 assume contents intermediate view allclothing available shown figure 16 according algorithm first compute derivation 5400 allclothing obtain trace derivation base tables obtain derivation result figure 9 note necessarily materialize complete intermediate aggregation views allclothing fact many choices anything store issue storing versus recomputing intermediate information needed derivation tracing discussed section 71 632 correctness justify correctness algorithm claim following 1 transforming view aspj canonical form affect derivation canonicalize aspj view transforming segment adjacent aggregation operators spj canonical form process consists spj transformations ull89 theorem 48 shows derivations unchanged spj transformations procedure tuplederivationt v begin return tablederivationftgv procedure tablederivationt v begin onelevel aspj view intermediate view base table return tablelistderivationhv procedure begin return figure 15 algorithm aspj view tuple derivation tracing store name total target 1400 macys 5400 figure allclothing table 2 correct trace derivations recursively view definition tree theorem 47 know derivations transitive levels view definition tree thus tracing tuple derivations canonicalized aspj view first divide definition onelevel aspj views compute derivations intermediate views topdown manner recursive derivation tracing algorithm used trace derivation tuple aspj view conventional database however certain additional issues arise performing derivation tracing multisource warehousing environment proceed discuss next section 7 derivation tracing warehousing environment sections 5 6 presented algorithms trace view tuple derivations algorithms assume base tables well intermediate views accessible consistent view traced assumptions may hold tracing derivations warehouse view defined remote distributed sources following problems may arise 1 efficiency problem querying remote sources performing selections joins tracing queries tuple derivation trace inefficient also recomputing intermediate views tracing multilevel aspj views expensive 2 consistency problem warehouse may refresh views real time means warehouse views become date thus cannot always compute derivation tuples old view new source base tables example base tuple derivation view tuple deleted source change yet propagated view user sees view tuple cannot correctly trace derivation since relevant base tuple gone 3 legacy source problem views defined inaccessible legacy sources traceable base tables available storing auxiliary views warehouse reduce computation cost avoid querying sources qgmw96 solution solves three problems price extra storage view maintenance costs section 71 consider tradeoffs materializing recomputing intermediate results propose store intermediate aggregation results improve overall performance section 72 introduce derivation views store information sources view derivations always computed without querying sources 71 materializing vs recomputing intermediate aggregate results section 6 saw intermediate aggregation results needed derivation tracing general case two ways obtain information one recompute intermediate result tracing process approach requires permanent extra storage tracing process takes longer especially recomputation may require querying sources way maintain materialized auxiliary views containing intermediate results case less computation required tracing time auxiliary views must stored kept uptodate due characteristics warehousing environments suggest warehouses maintain intermediate aggregation results materialized auxiliary views rather recomputing qgmw96 example 71 materialized view allclothing improve efficiency tracing process example 64 materialize auxiliary view allclothing figure 14 contents shown figure 16 note materializing allclothing tuple htarget 1400i used tracing tuple derivations clothing fact filtered selection condition oe total5000 clothings definition case materializing result v instead storing allclothing seems better choice however notice v 0 incrementally maintainable without storing allclothing thus would either need recompute relevant update would incur high maintenance cost need store allclothing case order maintain v 0 therefore materializing v 0 actually likely improvement general given view definition tree selections pushed far possible selection conditions aggregate must summary tributes therefore incrementally maintainable without storing entire aggregation results 72 storing derivation views multisource warehouse problems described earlier eg inefficiency inconsistency warehouse view derivation tracing arise apply tracing queries remote sources therefore may prefer store auxiliary information sources warehouse order avoid source queries derivation trace note auxiliary views may addition intermediate views aggregate view tracing discussed section 71 various strategies storing auxiliary views simple extreme solution store copy source table warehouse algorithm query base views sources however solution costly wasteful source large especially much data contribute view also computing selections joins large base views time tuples derivation traced expensive solutions cases store much less information still enable derivation tracing without accessing sources maintenance cost much higher propose intermediate scheme achieves low tracing query cost modest extra storage maintenance cost adding auxiliary views described section 71 view definition broken multiple aspj segments views defined lowestlevel segments directly source tables views concern let view based v introduce auxiliary view called derivation view v contains information derivation tuple v r specified definition 72 given next theorem 73 shows v tuples derivation r computed simple selection split operation derivation view definition 72 derivation view let rm onelevel aspj view source tables derivation view v denoted dv v theorem 73 derivation tracing using derivation view let v onelevel aspj view base tables dv v vs derivation view defined definition 72 given tuple derivation computed using dv v follows given tuple set derivation example 74 derivation view allclothing view allclothing example 71 defined base tables store item sales suppose base tables located remote sources cannot wish access order trace tuple derivations allclothing maintain derivation view dv allclothing figure 17 shows derivation view definition figure shows contents derivation tracer need query dv allcothing compute view allclothings tuple derivations shown figure 17 using known techniques auxiliary intermediate views derivation views maintained consistently views warehouse zgmw96 zwgm97 note cases warehousing environments sources inaccessible auxiliary views need made selfmaintainable known techniques used well gjm96 qgmw96 storename sumnumsold total dvallclothing allclothing figure 17 view definition dv allclothing store id store name city state item id item name category price num sold 001 target palo alto ca 0004 pants clothing albany ny 0004 pants clothing 35 800 003 macys san francisco ca 0003 shirt clothing 45 1500 003 macys san francisco ca 0004 pants clothing 004 macys new york city ny 0003 shirt clothing 50 2100 004 macys new york city ny 0004 pants clothing 70 1200 figure allclothing table 73 warehousing system supporting derivation tracing figure 19 illustrates overall warehouse structure supports tuple derivation tracing materialized intermediate aggregation results derivation views recall question q2 example 32 query tree left side figure 19 original definition view clothing order trace clothings tuple derivations auxiliary view allclothing maintained record intermediate aggregation results discussed section 71 furthermore trace tuples allclothing derivation view dv allclothing maintained discussed section 72 final set materialized views allclothing ff store name sumnum sold total dv allclothing view computed maintained based views base tables directly beneath using warehouse view maintenance techniques qgmw96 zwgm97 solid arrows right side figure 19 show query answer data flow ordinary view queries sent view clothing derivation queries sent derivation tracer module tracer takes request derivation tuple clothing queries auxiliary view allclothing ts derivation 1 allclothing specified theorem 53 tracer queries dv allclothing derivation 2 1 specified theorem 73 2 ts derivation alternative derivation views one described trade tracing query cost store item sales sources warehouse clothing user store item sales allclothing derivation derivation allclothing clothing dvallclothing derivation queries view queries derivation tracer total 5000 storename sumnumsold total total total total 5000 storename sumnumsold total figure 19 derivation tracing warehouse system storage maintenance cost one simple option split derivation view separate tables contain base tuples source relation contribute view scheme may reduce storage requirement tracing queries must recompute join course accessing sources cheap reliable may preferable query sources directly however compensation log hz96 may needed keep tracing result consistent warehouse views determining whether better materialize necessary information derivation tracing query sources recompute information tracing time given setting based query cost update cost storage constraints source availability etc interesting question left open future work closely related results gup97 lqa97 8 related work revisited section revisit related topics including topdown datalog query processing view update problem examine differences problems also show lineage tracing applied view update problem 81 topdown datalog query processing datalog relations represented predicates tuples atoms facts queries views represented logical rules rule contains head goal body subgoals possibly recursively derive head ull89 two modes reasoning datalog bottomup forwardchaining mode topdown backwardchaining mode topdown mode proves goal constructing rulegoal graph goal top node scanning graph topdown recursively applying rulegoal unification atom matching finding instantiation subgoals base data backtracking used deadend met searching proving process topdown evaluation datalog goal thus provides information facts base data yield goal words provides lineage goal tuple approach tracing tuple lineage obviously different datalog topdown processing instead performing rulegoal unification atom matching one tuple time generate single query retrieve lineage tuples given tuple tuple set spj onelevel aspj view approach better suited tracing query optimization described section 53 support lineage tracing aggregation views handled datalog handle recursion paper although believe approach extended recursive views maintaining efficiency 82 view update problem wellknown view update problem transform updates views updates base tables new base tables continue derive updated view problem first formulated db78 view update insertion deletion modification view tuple mas84 deduced set view update translation rules different view update commands select project join views given view update command cases one set base table updates achieve view update effect much effort focused finding appropriate translations specific cases bs81 cm89 kel86 ls91 general extra semantic information needed choose translation view update algorithms cannot used directly compute view tuple derivations first none algorithms know consider aggregation second although algorithms identify set base tuples affect view tuple base tuples identified may even derive view tuple therefore satisfy definition 45 view tuple derivation general view update approach derivation tracing approach answer two different questions base tuples affect view tuple base tuples exactly derive view tuple respectively two questions equivalent related derivation tracing algorithms used guide view update process find appropriate view update translation cases deletions modifications derivation tracing algorithms directly identify appropriate set base relation tuples modify shown following example example 81 view update deletion example 46 figure 12 illustrated derivation h2 8i view r view update command delete h2 8i v issued use tuple derivation determine h2 3i h2 5i deleted changes updated base table derives updated view fh1 6ig note without using tuple derivation tracing naive algorithm might choose also delete h2 0i maintains correctness deletes necessary insertions problem harder since view tuple inserted well derivation currently exist derivation tracing algorithms adapted identify components possible derivations view tuple inserted thereby guiding base tuple insertions attribute projected view must guessed using extra semantics user instructions base table constraints left null even derivation tracing help guessing process certain cases shown following example example 82 view update insertion suppose view update insert h3 2i v issued view example 46 figure 12 since h3 2i view v cannot ask current derivation know update r r produce new view h3 2i according tracing query v specified theorem 62 guess update derivation r h3 2i must satisfy condition 8t 2 r assuming constraint ry attributes positive integers considering requirement sumr 2 also assert 8t 2 r 2 assuming constraint r duplicates assert putting assertions together potential derivation h3 2i h3 2i appropriate base table update insert h3 2i r notice inserted tuple example 82 carefully chosen h3 8i inserted instead would randomly pick translation reasonable ones ask user choose even case lineage tracing techniques incorporated base table constraints useful reducing number possible translations 9 conclusions future work formulated view data lineage problem presented lineage tracing algorithms relational views aggregation algorithms identify exact subset base data produced given view data item also presented techniques efficient consistent lineage tracing multisource warehousing system results form basis tool analyst browse warehouse data drilldown source data produced warehouse data interest followon future work includes following ffl extended results paper view definitions use bag instead set semantics additional relational operators including gamma please see cww98 also plan extend work handle recursive views ffl tuple derivations defined paper explain certain base relation tuples cause certain view tuples exist derivation tracing useful technique investigating origins potentially erroneous view data however cases view tuple may erroneous base tuples derive erroneous base relation tuples appear derivation missing example base tuple may contribute wrong group aggregate view grouping value incorrect plan explore missing derivation data problem addressed lineage framework ffl sections 71 72 discussed tradeoffs associated materializing versus recomputing intermediate derivation views mentioned briefly selfmaintainability auxiliary views process conducting comparative performance study various options ffl apply derivation tracing techniques view schema evolution problem motivated section 1 ffl study lineage tracing incorporated existing techniques help solve view update problem seen example 82 one interesting problem extend derivation tracing algorithms handle tuples yet view importantly implementing lineage tracing package within whips data warehousing prototype stanfordwgl 96 basic algorithms completed plan experiment appropriate user interface tools analyst obtain browse derivation information example analyst may wish see base derivation data also representation process view data item derived summary data lineage rich problem many interesting applications paper provide initial practical solution lineage tracing data warehouses plan extend work many directions outlined acknowledgements grateful sudarshan chawathe himanshu gupta jeff ullman vasilis vassalos yue zhuge whips group colleagues helpful enlightening discussions r update semantics relational views overview data warehousing olap technology derived data update semantic databases complete solution tracing lineage relational view data updatability relational views recovering information summary data data cube relational aggregation operator generalizing groupby data integration using selfmaintainable views maintenance materialized views problems maintaining views incrementally selection views materialize data warehouse issues online analytical mining data warehouses managing derived data gaea scientific dbms implementing data cubes effi ciently framework supporting data integration using materialized virtual approaches choosing view update translator dialog view definition time physical database design data ware housing updating relational views using knowledge view definition view update time relational database view update translation mechanism maintenance data cubes summary tables warehouse making views selfmaintainable data warehousing maintenance expressions views aggregation incremental recomputation active relational expres sions database knowledgebase systems vol volume2volume research issues data warehousing system prototype warehouse view maintenance research problems data warehousing supporting finegrained data lineage database visualization environment strobe algorithms multisource warehouse consistency multiple view consistency data warehousing tr principles database knowledgebase systems vol research problems data warehousing framework supporting data integration using materialized virtual approaches overview data warehousing olap technology update semantics relational views strobe algorithms multisource warehouse consistency making views selfmaintainable data warehousing implementation integrity constraints views query modification data integration using selfmaintainable views supporting finegrained data lineage database visualization environment multiple view consistency data warehousing physical database design data warehouses data cube concurrency control theory deferred materialized views selection views materialize data warehouse managing derived data gaea scientific dbms aggregatequery processing data warehousing environments recovering information summary data ctr ling wang elke rundensteiner murali mani ming jiang hux schemacentric approach updating xml views proceedings 15th acm international conference information knowledge management november 0611 2006 arlington virginia usa hao fan alexandra poulovassilis using automed metadata data warehousing environments proceedings 6th acm international workshop data warehousing olap november 0707 2003 new orleans louisiana usa laura chiticariu wangchiew tan debugging schema mappings routes proceedings 32nd international conference large data bases september 1215 2006 seoul korea deepavali bhagwat laura chiticariu wangchiew tan gaurav vijayvargiya annotation management system relational databases proceedings thirtieth international conference large data bases p900911 august 31september 03 2004 toronto canada yingwei cui jennifer widom lineage tracing general data warehouse transformations proceedings 27th international conference large data bases p471480 september 1114 2001 gao cong wenfei fan floris geerts annotation propagation revisited key preserving views proceedings 15th acm international conference information knowledge management november 0611 2006 arlington virginia usa cui j widom lineage tracing general data warehouse transformations vldb journal international journal large data bases v12 n1 p4158 may peter buneman wangchiew tan provenance databases proceedings 2007 acm sigmod international conference management data june 1114 2007 beijing china todd j green grigoris karvounarakis val tannen provenance semirings proceedings twentysixth acm sigmodsigactsigart symposium principles database systems june 1113 2007 beijing china james annis yong zhao jens voeckler michael wilde steve kent ian foster applying chimera virtual data concepts cluster finding sloan sky survey proceedings 2002 acmieee conference supercomputing p114 november 16 2002 baltimore maryland peter buneman sanjeev khanna wangchiew tan propagation deletions annotations views proceedings twentyfirst acm sigmodsigactsigart symposium principles database systems june 0305 2002 madison wisconsin alon halevy michael franklin david maier principles dataspace systems proceedings twentyfifth acm sigmodsigactsigart symposium principles database systems p19 june 2628 2006 chicago il usa michael bhlen johann gamper christian jensen algebraic framework temporal attribute characteristics annals mathematics artificial intelligence v46 n3 p349374 march 2006 omar benjelloun anish das sarma alon halevy jennifer widom uldbs databases uncertainty lineage proceedings 32nd international conference large data bases september 1215 2006 seoul korea rajendra bose james frew lineage retrieval scientific data processing survey acm computing surveys csur v37 n1 p128 march 2005 david liu michael j franklin griddb datacentric overlay scientific grids proceedings thirtieth international conference large data bases p600611 august 31september 03 2004 toronto canada b davidson j crabtree b p brunk j schug v tannen g c overton c j stoeckert jr k2kleisli gus experiments integrated access genomic data sources ibm systems journal v40 n2 p512531 february 2001