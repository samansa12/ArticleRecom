constraintbased interactive train rescheduling tool paper report design implementation constraintbased interactive train rescheduling tool project collaboration international institute software technology united nations university unuiist macau formulate train rescheduling constraint satisfaction describe constraint propagation approach tackling problem algorithms timetable verification train rescheduling designed coherent framework formal correctness properties rescheduling algorithm established define two optimality criteria rescheduling correspond minimizing number station visits affected passenger delay respectively two heuristics proposed speed direct search towards optimal solutions feasibility proposed algorithms heuristics confirmed experimentation using reallife data b introduction pracosy peoples republic china railway computing system project 10 undertaken international institute software technol ogy united nations university unuiist aim project develop skills software engineering automation chinese railways specific goal project automation preparation updating running map 1 dispatching trains along 600 kilometer long railway line zhengzhou wuhan peoples republic china zhengzhou wuhan section chosen case study along busy beijingguangzhou line arterial northsouth railway china rate running trains goods passengers section high present management procedures adequate dramatic development domestic economy running map 9 contains information regarding topology railway train number classification arrival departure time trains sta tion arrival departure paths etc computerized running map tool read stations lines definition descriptor file allow segments sub sets stations time intervals defined allow train timetable running map method monitoring movement trains rescheduling arrivals departures satisfy operational constraints read finally display graphically projection timetable given segment given interval sample running map shown figure 6 train dispatchers users tool modify timetable trains sections cannot run according map possibly due accidents andor train delays modification map performed way certain scheduling rules laid local railway bureau violated therefore computer running map tool check users modifications possible violation scheduling rules warn users violations addition tool also assist user repairing either automatically semiautomatically infeasible timetable least train service disruption made call process rescheduling scheduling rescheduling different two aspects first scheduling creates timetable scratch rescheduling assumes feasible timetable user modifications may introduce inconsistencies timetable input second optimality criteria used scheduling minimum operating cost usually defined absolute sense rescheduling however quality output measured respect original timetable pracosy project resulted running map tool capable train timetable verification 7 task hand enhance pracosy tool perform automatic rescheduling considered constraint satisfaction major problem pracosy implementation constraints used passively test possible violation scheduling rules view limitation decided recreate running map tool scratch using constraint programming approach paper give algorithms timetable verification train rescheduling used tool show constraint programming allows us perform constraint checking solving propagation coherent framework study two notions optimality rescheduled timetable respect original timetable notions provide measure quality rescheduling operation also present two heuristics direct speed search towards optimal rescheduled timetables rest paper organized follows section 2 defines basic terminology discusses related work section 3 explains timetable verification algorithm section 4 show formulate train rescheduling constraint satisfaction problem give associated algorithm also discuss two heuristics help direct speed search towards optimal solu tions section 5 describe prototype implementation sample runs tool summarize contribution shed light future work section 6 preliminaries following provide informal definitions necessary terminology according 9 facilitate subsequent discussions names defined selfexplanatory clear context interested readers refer 9 formal definitions terminology topology railway system defined collection named stations identified lines differentiate lines within station connecting two stations referring former lines latter tracks train journey sequence visits connected stations visit station represented arrival time departure time train timetable association trains journeys made scheduling rules set temporal constraints restrict arrival time departure time visit order prevent undesirable events train crash timetable valid feasible scheduling rules violated associations otherwise timetable invalid infeasible given feasible timetable n station visits represented set assignments equality constraints form dt denote arrival departure time respectively 1 modifications make timetable replace assignments ng words delay arrival time departure time visits given infeasible timetable rescheduling process modifying timetable make timetable feasible 21 problem statement six types scheduling rules 9 railway system speed rule station occupancy rule station entry rule station exit rule line time rule stopover rule let two trains 1 2 two adjacent stations b variables atxy dtxy denote train arrival departure time atfrom station x respectively scheduling rules formulated following types scheduling constraints speed constraint constant lng denotes distance station station b constraint enforces average train speed traveling two stations cannot exceed sp station occupancy constraint constraint enforces least ctr time units two trains occupying track station entry constraint constraint enforces least cen time units two trains entering station via line station exit constraint constraint enforces least cex time units two trains departing station via line line time constraints line time rule split two constraints first constraint enforces train overtakes another train traveling direction line second constraint enforces two journeys line opposing directions line must unoccupied least cenx time units stopover constraint cst constraint enforces train stay station least cst time units given topology railway system valid train timetable due unexpected events users running map tool may want modify timetable work first check feasibility modified timetable feasible previous timetable replaced modified one wise reschedule infeasible timetable generate new feasible timetable note efficiency critical concern designing verification rescheduling algorithms since reallife situations rescheduling must performed timely manner notion efficiency may vary according situations ten minutes however tolerable bound general 2 optimal solutions required usually cases impractical generate optimal solutions within given usually small time bound criteria optimality however defined definitions serve guidelines designing various variableordering valueordering heuristics generate good answers precise notion optimality also enables us measure quality rescheduled timetable following present two optimality criteria rescheduled timetable minimumchanges optimal respect original timetable least number station visits modified criterion satisfied easily general since cases simply delay trains question latest possible time resulting timetable however may introduce unreasonable long delay train visits thus criterion usually applied criteria limiting maximum delay rescheduled timetable minimumdelay optimal respect original timetable longest delay among train visits minimum let denote infeasible rescheduled timetable respectively goal criterion minimize following expression aims two criteria could contradict one another represent extremes spectrum possible definitions optimality 22 related work rescheduling different traditional scheduling sense possible solutions rescheduling restricted original schedule zweben et al 11 tackle problem using constraintbased iterative repair heuristics resultant gerry scheduling rescheduling system applied coordinate space shuttle ground processing work based propagation based constraint solver somewhat related work train scheduling komaya fukuda 5 propose problem solving architecture knowledgebased integration simulation scheduling two train scheduling systems designed ar chitecture fukumori et al 3 use tree search constraint propagation technique concepts time belt scheduling system approach claimed suitable doubletrack line continuous time unit recently chiang hau 1 attempt combine repair heuristic several search methods tackle scheduling problems general railway systems two ongoing projects aim automating train scheduling reallife railway ministries work direct outgrowth pracosy project 10 unuiist latest pracosy running map tool prototype uses constraints passively test constraint violation verification engine train scheduling system tss designed taiwan railway bureau trb 6 knowledgebased interactive train scheduling system incorporating automatic manual schedulers users computer system thus able bring complementary skills scheduling tasks 3 timetable verification following describe timetable verification algorithm examines given timetable valid respect set scheduling constraints violated scheduling rules constraints invalid timetable located displayed user algorithm shown figure 1 assumes existence propagationbased constraint solver 8 propagate timetable viewed set constraints variables either form dt arrival time dt departure time variables become ground line 5 post scheduling constraints one one lines 713 variables ground propagate engine performs essentially constraint checking easy check violated constraints 3 initialization 4 fg constraint store initialized 6 constraint verification 7 c 2 c 9 inconsistency found fcg retract c constraint network endfor 14 end fig 1 timetable verification algorithm constraint violated given timetable inconsistency found constraint told store violated constraints retracted algorithm proceed check possible constraint violations groundness variables allows us retract constraint simply removing undesirable constraint constraint store 4 rescheduling constraint satisfaction scheduling instance constraint satisfaction problem following show rescheduling given timetable users modify adjusting arrival departure times obtaining 0 valid invalid 0 invalid rescheduling process attempts repair 0 make feasible repairing mean adjusting value nonmodified variables 1 timetable becomes valid 2 new timetable reasonably close original timetable close mean new timetable create least service disruptions example optimality criteria given section 2 note user modified variables must kept fixed rescheduling process since modifications represent dispatcher requirements order formulate rescheduling constraint satisfaction determine variables problem domains associated variables constraints problem rescheduling variables arrival departure time timetable every variable share integer domain three types constraints rescheduling problem 1 scheduling constraints scheduling constraints set forth section 2 2 1440 minutes 24 hours 2 modification constraints arrival departure time x modified user new value equality constraint constraint enforces user modifications stay fixed rescheduling 3 forwardlabeling constraints nonmodified variable x value original timetable constraint x constraint necessary ensure delay arrival departure time rescheduling becomes finding solution constraint satisfaction problem solution optimal solution closest original timetable ready present rescheduling algorithm shown figures 2 3 algorithm divided three phases phase one line 4 timetable 3 initialization save copy constraint store 5 propagating constraints c 6 rescheduling 7 true 8 read user modifications u u form 9 modifyt s0 u r timetable 11 prompt error messages else rescheduled timetable necessary 14 endif fig 2 train rescheduling algorithm post propagate scheduling constraints prune infeasible values variables pruned constraint network saved 0 since scheduling constraints timetable user modifications u store 0 reused every rescheduling step reallife situation rescheduling performed repeatedly different timetables user modifications saving operation helps avoid unnecessary invocations constraint relaxation actual rescheduling takes place procedure modify lines 1646 second phase lines 1935 rescheduling information extracted user modifications original timetable post propagate modification constraints lines 2327 forwardlabeling constraints lines 2835 inconsistency found rescheduling halted failure reported third phase lines 3646 variables modified users extracted vars function enumerated labeled using form variable procedure modifyin s0 u r previous feasible timetable s0 saved constraint network state user modifications r rescheduled timetable 19 initialization assignment constraints associating usermodified variables 22 post user modifications first second type constraints inconsistency found user modifications inconsistent 26 return 28 prune infeasible values delay arrival departure time 29 constraint third type constraints inconsistency found return 34 endif 36 rescheduling variables rescheduling appropriate variable valueordering used 40 function labeling returns either fg set equality constraints bindings variable x 43 r fail 44 else fig 3 train rescheduling algorithm cont valueordering heuristics embedded labeling function speed direct search towards nearoptimal solution two situations user modifications lead timetable 0 nonrepairable first user modifications self conflicting since user modified variables must kept fixed rescheduling impossible repair variables make timetable valid second user modifications self conflicting room variables adjust make timetable valid constraint propagation algorithms wellknown incomplete 8 thus phase two rescheduling algorithm detect kind conflicts theoretically speaking enumerating procedure phase three guarantee detect inconsistency would usually take impractically long cases rescheduling algorithm fails return answer within minutes users advised abort current computation readjust modifications restart rescheduling process rest section present two variable labeling heuristics designed yield rescheduled timetables minimumdelay minimumchange optimal sense respectively smallestfirst principle variables ordered ascending order lower bound domains values variable domains also enumerated ascending order principle founded assumption short delay train visit cause short delay subsequent one means delays propagate monotonic fashion experimental results confirm using actual timetables pracosy heuristic usually helps generate solutions minimumdelay optimal efficiently construct unrealistic artificial example defeats heuristic figure 4 shows small segment four journeys railway running rescheduling b rescheduling fig 4 nonoptimal solution smallestfirst heuristic map three journeys b c share track nanjing station two journeys c take line traveling nanjing longtan journeys fixed indicated thick lines users suppose station occupancy station exit rules enforces least ten minutes among three points ab c sixty minutes points c respectively modified timetable thus infeasible due insufficient long distance points b figure 4 b shows rescheduled timetable obtained using smallest first principle rescheduling starts moving point b ahead time achieve tenminute requirement points b movement turn causes another conflict points b c point c thus forced move however feasible location point c move points b since point fixed user therefore move point c onehour ahead point maximum delay case two hours solution optimal since better solution obtained simply moving point b twenty minutes ahead time shown figure 5 fig 5 smallestchangesoptimal solution consistentassignmentfirst principle heuristic suggests instantiate first variables instantiated time value original timetable call variables nonconflicting variables conflicting therefore labeling nonconflicting variables backtracked last values variable domains enumerated ascending order idea maintain many variables original value possible heuristic direct searching towards minimumchange optimal solution note nonconflicting variable may instantiated value original value eventually conflicting variables tried possible combination time values solution found efficiency reason classify nonconflicting variables two group first group contains variables share journeys one conflicting variables second group contain rest nonconflicting variables heuristic suggest label first second group nonconflicting variables ordering essential since labeling variables sharing journeys conflicting variables higher chance backtracked apply heuristic reschedule infeasible timetable figure 4 recall points fixed users classify variables associated point b point c conflicting nonconflicting respec tively thus point c labeled first retain original position map point b forced move reaches location tenminute ahead point c specific case minimumchange optimal solution coincides minimumdelay optimal solution example also shows general two heuristics give different first solution 5 prototype implementation order demonstrate feasibility algorithms reconstructed enhanced pracosy running map tool prototype 7 rescheduling capability prototype consists constraintbased scheduler user interface former implemented c ilog solver library 20 4 latter built using microsoft visual basic 30 following overview running map tool presented give sample session tool using segment nanjingxi shanghai china railway amounts 3005 constraints 596 variables rescheduled timetables generated two heuristics explained conclude section showing two examples tool fails respond timely manner running map display figure consists six columns regions column one column four show abbreviated identifiers stations column two shows number arrival departure lines stations column three main window presenting graphical representation timetable time locations x axes respectively column five shows cumulative distance first station column six shows distance current station previous station cases timetable large fit main window two scrollbars enabled fig 6 running map tool user clickanddrag lines modify corresponding train visits map modified timetable validated using verification algorithm check button pressed infeasible warning window shown figure 7 pop display constraint violations point user either invoke rescheduling algorithm pressing reschedule button correct modifications manually restore original feasible timetable figure 8 shows segment china railway timetable due acci fig 7 warning window original feasible timetable b modified infeasible timetable fig 8 comparison two heuristic dent delay train departuring zhenjiang 105 330 yielding map shown figure 8 b usermodified departure time pointed arrow subsequent train visits journey highlighted segment fixed immediately running map tool user movement incurs seven constraint violations modified journey left adjacent journey reschedule infeasible timetable two heuristics succeed generating feasible timetable within seconds figure 9 figure 9 b show rescheduled timetable generated using smallestfirst principle consistentassignmentfirst principle respectively smallestfirst principle b consistentassignmentfirst principle fig 9 comparison two heuristic cont applying smallestfirst principle process visits map left earliest right latest visit associated arrival departure time violate scheduling constraints preserve current value otherwise move time ahead little possible eliminate inconsistencies thus visits journey may modified others remain unchanged explains visually journey shifted right horizontally also bent rescheduling process movement propagates fashion left right whenever movements possible backtracking takes place instead massaging several journeys produce feasible timetable consistentassignmentfirst principle suggests modify station visits possible goal well approximated first locating station visits remain unchanged respect user modifications station visits labeled first conflicting variables change original values labeled last experiments reveal many cases heuristic produces timetable almost identical original timetable seen figure 9 b journeys retain original locations even rightshifted journey shape mostly preserved experimental results confirm rescheduling usually completed within seconds always case figure 10 figure 10 b provide two examples infeasible timetable figure 10 rescheduled using consistentassignmentfirst principle seconds smallestfirst principle fails return answer within five minutes figure b simply nonrepairable timetable neither heuristics return promptly confirm unsolvability problem infeasible timetable 1 b infeasible timetable 2 fig 10 poor performance example 6 concluding remarks contribution paper threefold first define formally train rescheduling constraint satisfaction problem two algorithms railway timetable verifications rescheduling derived based propagation based constraint solver define two optimality criteria used measure quality rescheduled timetable important note optimality criteria defined respect original timetable sec ond based domain knowledge learned domain analysis propose two heuristics speed direct search towards minimumdelay optimal minimumchange optimal solutions respectively feasibility proposed algorithms heuristics confirmed experimentation using reallife data third reconstructed enhanced pracosy running map tool prototype would interesting future work study different stochastic methods train rescheduling work also progress experiment rescheduling method largerscale reallife railway timetables acknowledgement acknowledge pleasure interaction fellows staff unuiist united nations university international institute software technology macau particular indebted prof dines bjrner inviting participation pracosy project also numerous fruitful discussion working sessions sren prehn chris george yulin dong liansuo liu dong yang last least thank anonymous referees constructive comments help improve final version paper r railway scheduling system using repairbased ap proach zhengzhou fundamental algorithm train scheduling based artificial intelligence solver reference manual version 20 knowledgebased approach railway scheduling interactive train scheduling workbench based artificial intelligence simple running map display tool consistency networks relations railway running map design executive overview scheduling rescheduling iterative repair tr