graph coloring adaptive evolutionary algorithms paper presents results experimental investigation solving graph coloring problems evolutionary algorithms eas testing different algorithm variants conclude best option asexual ea using orderbased representation adaptation mechanism periodically changes fitness function evolution adaptive ea general using domain specific knowledge except course decoder fitness function compare adaptive ea powerful traditional graph coloring technique dsatur grouping genetic algorithm gga wide range problem instances different size topology edge density results show adaptive ea superior grouping ga outperforms dsatur hardest problem instances furthermore scales better problem size two algorithms indicates linear computational complexity b introduction main goal paper present results experimental study solving graph coloring problems evolutionary algorithms eas particular show working new problem independent adaptive mechanism constraint handling eas section 2 brief overview graph coloring problems graph coloring techniques given decide investigate graph instances 3colorable identify instances around socalled phase transition challenging ones two graph coloring algorithms selected serve competitors eas among traditional graph coloring techniques choose dsatur brelaz reported high performance brelaz 1979 besides also test grouping ga gga falkenauer graph coloring seen grouping problem gga shows excellent performance grouping problems bin packing falkenauer 1994 section 3 performance measures comparison different algorithms discussed thereafter section 4 grouping ga described section 5 genetic algorithms integer representation orderbased representation compared section 6 present adaptive mechanism modifying penalty function evolution show adaptive mechanism highly increases performance section 7 big comparison adaptive ea grouping ga dsatur made observe grouping ga exhibits lowest performance adaptive ea outperforms dsatur hardest problem instances moreover scales better problem size finally draw conclusions section 8 graph coloring main motivation present research interest applicability genetic generally evolutionary algorithms constraint satisfaction problems general constraint satisfaction problem csp pair hs oei free search space ie cartesian product sets oe formula boolean function eiben ruttkay 1997 solution constraint satisfaction problem 2 usually csp stated problem finding instantiation variables within finite domains constraints relations c prescribed variables hold formula oe conjunction given constraints proved every csp equivalently transformed binary one ie csp constraint concerns exactly two variables nudel 1983 graph coloring problems property natural envision nodes variables edges constraints suggests findings using genetic algorithm specific knowledge problem structure applicable csps well family graph coloring problems undirected graph e given problem color node way two nodes connected edge colored color exist several variations problem like finding least number colors needed color graph find largest subgraph g colored given number colors problems known npcomplete garey johnson 1979 unlikely polynomialtime algorithm exists solves problems arora et al 1992 pure constraint satisfaction problem graph 3coloring variant node graph colored one three given colors problem variant optimization involved minimizing number colors used conflictfree coloring chosen perform indepth investigation variant restricting one problem type studying three different graph topologies several problem sizes whole range edge connectivity values yet keeping number experiments manageable 21 problem instances literature many benchmark 3colorable graphs therefore create graphs tested graph generator 1 written joe culberson generator creates various classes kcolorable quasirandom graphs classes want investigate following arbitrary 3colorable graphs vertices randomly assigned one 3 partition elements colors uniformly independently class widely investigated use term arbitrary distinguish kind graphs following ones equipartite 3colorable graphs three color sets nearly equal size possible smallest sets one element less largest culberson reports graphs present difficulty obtaining specified coloring suite various algorithms culberson luo 1996 sets almost equal size algorithm less information make use case flat 3colorable graphs also variation degree node kept minimum class even tougher since even less information available algorithm creating test graphs happens first prepartitioning vertices three sets 3 colors drawing edges randomly first two types graphs prepartitioning done vertex pair v w assigned edge fixed probability p provided v w color set variation degree vertex measure p called edge connectivity graph instance creating test graphs random number generator needed generator fed random seed obviously influences created graphs turns experiments also effects performance graph coloring algorithms preliminary experiments comparing different genetic algorithms equipartite graphs used section 5 section 6 using three classes final comparison two methods section 7 specifying investigated graph instances use notation g eqn200p008s5 standing equipartite 3colorable graph 200 vertices edge probability 8 seed 5 random generator known many npcomplete problems typical instances easy solve turner found many kcolorable graphs easy color comparisons algorithms based graphs meaningful turner 1988 interesting comparison one look hard problem instances pose challenges candidate algorithms cheeseman et al cheeseman et al 1991 found npcomplete problems order source code c available via ftpftpcsualbertacapubgraphgeneratorgeneratetargz parameter hard problems occur critical value phase transition parameter graph coloring order parameter edge probability edge connectivity p using cost function estimation clearwater hogg clearwater hogg 1996 one determine approximate location phase transition depending number nodes n graph phase transition type problems occur edge connectivity values around 7n 8n values bit different estimate cheeseman et al 1991 experiments confirm range indicate hardest graphs edge connectivity around 7n 8n independently applied graph coloring algorithm investigation concentrate graphs region 22 graph coloring algorithms many traditional graph kcoloring techniques based heuristics existing algorithms 04 approximation algorithm blum blum 1989 simple greedy algorithm kucera 1991 dsatur brelaz brelaz 1979 iterated greedyig culberson luo culberson luo 1996 xrlf johnson et al johnson et al 1991 probably simple best known algorithm greedy algorithm takes ordering nodes graph colors nodes order smallest color 2 possible without violating constraints grimmet mcdiarmid grimmet mcdiarmid shown almost random graphs greedy algorithm uses twice optimal number colors nevertheless several studies showed practice theory greedy algorithm performs poorly kucera 1991 turner 1988 mention ga orderbased representation uses decoder dsatur brelaz brelaz 1979 uses heuristic dynamically change ordering nodes applies greedy method color nodes works follows ffl node highest saturation degree number differently colored neighbors chosen given smallest color still possible ffl case tie node highest degree number neighbors still uncolored subgraph chosen ffl case tie random node chosen random tie breaking dsatur becomes stochastic algorithm like ga results several runs need averaged obtain useful statistics investigation backtrack version turner turner 1988 implemented backtracks lastly evaluated node still available colors try one search step defined expanding node new color including done backtracking dsatur heuristics performs well therefore use heuristic technique compare eas quite research done graph coloring genetic algorithms like fleurent ferland successfully considered various hybrid algorithms fleurent ferland 1996a extended study general implementation heuristic search 2 colors ordered make selection possible methods fleurent ferland 1996b others include von laszewski looked structured operators used adaption step improve convergence rate genetic algorithm laszewski 1991 davis algorithm davis 1991 designed maximize total weights nodes graph colored fixed amount colors resembles problem definition used sawing algorithm also add weights nodes graph colored difference sawing algorithm uses variable weights guide search davis algorithm sees fixed weights problem instance tackles problem optimization problem coll duran moscato discuss graph coloring crossover operators general context coll et al 1995 performance measures algorithms comparisons different gas comparisons gas dsatur based two different measures success rate computational effort probabilistic algorithms may find solution one run may find one another run cope problem execute number runs monitor many times solution found measure success rate sr percentage runs solution found gives estimation probability finding solution one run obvious measure computational effort evaluating algorithms time complexity eg cpu time seconds kronsjo 1987 better option however implementation hardware independent measure computational complexity ie number basic operations required find solution search algorithms number basic search steps particular algorithm uses unfortunately different search algorithms use different search steps ga search step creation evaluation new individual case new coloring thus computational complexity measured average number fitness evaluations successful runs denoted aes average evaluations solution fair measure may seem even different gas may fully comparable way instance ga using heuristic within crossover operator performs hidden labor respect ga applying standard blind crossover words extra computational efforts performing heuristic crossover visible compare aes values search step dsatur backtracking step ie giving node new color thus computational complexity dsatur measured differently ga problem rooted different nature algorithms cannot circumvented despite drawbacks compare algorithms aes first part section 7 measure independent implementational executional issues processor programming language network load etc second part section 7 however compare scalingup behavior investigated algorithms show aes values change growing problem sizes regardless different meaning aes different algorithms comparison means fair grouping genetic algorithm grouping genetic algorithm gga introduced falkenauer falkenauer delchambre 1992 studied falkenauer 1994 falkenauer 1996 gga tries capture exploit structure grouping problems using appropriate chromosomal representation genetic operators outlines gga given figure 1 different steps explained reminder section grouping ga initialize population evaluate population stopcondition sort population using 2tournament selection apply crossover best n c individuals replace worst n c offspring mutate nm randomly selected individuals population apply inversion n randomly selected individuals population evaluate population figure 1 pseudo code grouping genetic algorithm general grouping representation consists two parts object part group part object part consists n genes n number objects grouped group part consists permutation k group labels object gene take k group labels allele indicating object question belongs group given label graph coloring context objects nodes groups colors example chromosome shown figure 2 group part shows three colors b c used coloring graph object part discloses node 2 6 colored color nodes 1 3 4 colored color b node 5 colored color c objects groups figure 2 example chromosome grouping representation gga uses genetic operators group part chromosomes adjusts object part corresponding changes group part use three operators described falkenauer 1994 crossover mutation inversion crossover far difficult operator three uses number steps compute two new chromosomes two parents steps following 1 copy parent 1 child 1 copy parent 2 child 2 select random two crossing sites delimiting crossing section two parents group part parent parent 2 inject contents crossing section first parent first crossing site second child working group parts means injecting groups first parent second child 3 overwrite object part child 2 membership newly inserted groups enforced inherited parent 1 4a adapt resulting groups satisfy constraints problem throw away groups become empty lost object step 3 result objects assigned group objects marked x put queue 4b reinsert objects reside queue done heuristic function long representation remains valid looking node want insert possible assigning color using firstfit heuristic random order available colors constraints violated possible create new group assign object group note step lead increase number colors 5 execute steps 3 4 5 parents exchanged mutation operator uses similar procedure chromosome selected mutation number elements group part deleted group deleted nodes object part color temporarily uncolored deletion groups reinsert uncolored nodes using heuristic used crossover operator third operator inversion operates group part chromosome without affecting object part randomly mark two points group part chromosome reverse order groups two points example found figure 3 figure 3 example inversion grouping representation crossover mutation operators work way length group part chromosome vary minimal number colors needed color graph number nodes graph apply algorithm minimize number colors needed color graph 3colorable graph instances investigate minimum known three therefore let fitness chromosome depend number unnecessary colors amount nodes colored unnecessary color three colors color nodes considered necessary remaining colors defined unnecessary formal definition fitness function let us assume k minimal number colors needed coloring graph furthermore let chromosome x use l colors l k l let us define gx function returns amount nodes colored color chromosome x without loss generality assume colors ordered way fitness function defined l minimize function 1 gga must minimize number colors used coloring graph receives penalty points extra color every node colored color easy see reaches global minimum zero amount colors used equal minimum amount colors needed initialization population done coloring every individual population using firstfit heuristic starting coloring random node algorithm contains pseudosorting procedure using 2tournament selection pseudosorted list individuals created repeatedly selecting two different individuals uniform randomly population compete loser ie one worse fitness value removed population inserted top list procedure stops population becomes singleton last remaining individual added list individuals inserted first sank bottom list seen worst individuals inserted last best ones note algorithm replaces offspring best n c individuals worst n c individuals therefore population size must least 2 delta n c parameter setting compared values recommended falkenauer falkenauer 1994 population fifty individuals n using allele mutation probability giving probability allele group part deleted individual undergoing mutation 10 values best option turned using mutation less crossover particular n present investigation values used 5 standard genetic algorithms experimented several nongrouping genetic algorithms varying different components common features gas used summarized table 1 integer representation gene individual represents node graph value one three colors thus chromosome length l equals number nodes n given graph fitness function based penalizing constraint violation consider edge constraint case edges penalty function f type steady state selection 2tournament deletion strategy worstdeletion crossover rate 10 mutation rate 1chromlength stopcriterion max fitness evaluations table 1 ga setup used experiments except gga w penalty weight assigned ith constraint edge e obvious minimum penalty zero reached constraints violated solution found use penalty w constraint edge thus f simply counts violated constraints conjectured falkenauer representation corresponding genetic operators wellsuited grouping problems graph coloring mainly blind disruption chromosomes falkenauer 1994 experiments confirmed conjecture one unexpected result deserves special attention namely increasing disruptiveness crossover operators increased ga performance seemingly contradicting crossover harmfull detailed presentation results would consume much space full overview found eiben van der hauw 1996 give illustration figure 4 illustrates increasing number crossover points multipoint crossover de jong spears 1992 increasing number parents multiparent crossovers eiben et al 1994 leads better results nevertheless best ga variant within representation turned asexual ga using mutation crossover 11 scheme thus population size 1 preservative selection figure 5 shows comparison best asexual mutation sexual using crossover mutation variants orderbased gas individuals permutations special operators used recombine mutate permutations starkweather et al 1991 fox mcmahon 1991 graph coloring define chromosomes permutations nodes apply decoder constructs coloring permutation integer representation chromosome length decoder used greedy algorithm colors node lowest color violate constraints leaves nodes uncolored colors left simplest way evaluating permutation use number uncolored nodes coloring belonging formally use penalty function concentrates nodes instead edges function f defined aes number parents diagonal crossover points mpoint diagonal mpoint 1point120000160000200000240000 aes number parents scanning uniform figure 4 integer representation effect crossover points parents aes g eqn1000p0025s5 run results averaged 25 independent runs setting nr crossover points nr parents02061 edge connectivity sexual aes edge connectivity sexual asexual figure 5 integer representation asexual mutation vs sexual reproduction uniform incest prevention near phase transition run results averaged 25 independent runs instance w penalty weight assigned node 1 node x left uncolored constraint violation like use w integer representation fitness function counted wrong edges count uncolored nodes note search space orderbased representation much bigger integer representation n instead 3 n 3 n different possible colorings exist coding highly redundant additionally penalty function given equation 3 supplies less information one given equation 2 considerations might suggest ga less successful experiments show opposite true using representation compared different operators various population sizes effect using mutation outcomes similar integer representation sense asexual ga using swap mutation crossover 11 scheme outperforms best sexual ga using ox2 crossover together swap large graphs see figure 6 illustration small graphs partly true global conclusion asexual ga best overall performance order based representation superior integer representation02061 edge connectivity sexual aes edge connectivity sexual asexual figure orderbased representation asexual swap mutation vs sexual reproduction near phase transition run results averaged 25 independent runs instance summarizing findings using gas traditional representations note following best performance achieved algorithm without crossover exclusively using mutation population size 1 question arises whether algorithm still seen genetic supported noting presence crossover population one elements crucial gas however one could also argue representation mutation standard parameter setting extreme avoid conflicts conventions terminology percieve name winning algorithm variant evolutionary algorithm end note contemporary evolutionary computation term evolutionary algorithm comprises among others genetic algorithms evolution strategies es evolutionary programming ep back et al 1997 11 style alorithms common es schwefel 1995 ep always operates without using crossover fogel 1995 6 stepwise adaptation weights evolutionary algorithms intrinsically dynamic adaptive processes thus rather unnatural use static control parameters remain constant evolution using constant parameters however traditional practice meanwhile increasing number papers consider varying parameter settings accumulates knowledge research area thus becoming emerging subtechnology within evolutionary computation looking related work varying parameters eas one distinguish common features several approaches share classification paper hinterding et al 1997 distinguishes three different streams dynamic parameters obtain different values along evolution prescribed user defined schedule schedule typically assigns new values parameters depending time commonly expressed number generations fitness evaluations adaptive parameters obtain new values feedback mechanism monitors evolution new values typically depend achieved progress progress measure input mechanism resets parameter selfadaptive parameters encoded chromosomes undergo evolution opposed previous two techniques even indirect user control parameter clear varying parameters suits general evolutionary spirit better static ones furthermore technical advantages first often lead increased performance second adaptive selfadaptive parameters free user determining parameters ea reduces chance incorrect parameter settings approach falls adaptive category classification scheme technically amounts modifying weights components penalty function hence modifying fitness landscape search based feedback actual population technique introduced constraint solving gas eiben et al 1995b constraints weighted rationale behind clear satisfying constraint high penalty gives relatively high reward algorithm hence interested satisfying constraints thus using appropriate weights focuses attention algorithm hence improve performance appropriate case means constraint weights reflect important rather difficult specific constraint causes two problems one hand determine relative hardness constraints require substantial knowledge problem hand hard cannot seen independently applied problem solver therefore natural idea leave decision measures hardness problem solver although wellfounded arguments culberson 1996 wolpert macready 1997 stating search technique superior general evolutionary algorithm adjusting parameters proved powerful many circumstances angeline 1995 hinterding et al 1997 particular case constraint satisfaction problems expect mechanism enabling ga learn weights circumvent difficulties setting weights human user interesting note using adaptive learning features improve search performance done types algorithms breakout method morris morris 1993 earliest example know adaptive memory features advocated glover glover 1996 applied lkketangen glover lkketangen glover 1996 close evolutionary spirit work well constrained problems also variants gsat algorithm satisfiability problems selman kautz selman kautz 1993 frank frank 1996b frank 1996a apply mechanisms reevaluate weights clauses search process best ea graph 3coloring problem found far uses orderbased representation penalizing uncolored nodes extend variant adaptive mechanism thus basic idea implemented monitoring variables best individual violate constraints raising penalty w belonging variables depending weights updated distinguish offline run online run version technique see figure 7 figure 8 offline saw set initial weights thus fitness function f x test runs run ga f redefine f termination end figure 7 pseudo code offline weight adaptation mechanism online saw set initial weights thus fitness function f termination next tp fitness evaluations let ga go f end redefine f recalculate fitness individuals figure 8 pseudo code online weight adaptation mechanism eiben et al 1995a eiben ruttkay 1996 offline version applied use online version modifying weights hence modifying fitness function evolution certain period particular p fitness evaluations best individual population colored weights uncolored nodes considered hard increased 4w ie w set w 4w implies ea search dynamically changing fitness landscape consequently population reevaluated period 3 call mechanism stepwise adaptation weights saw 3 hereby total number fitness evaluations equal total number generated individuals could argued number reevaluations included total number evaluations however want count search steps total number generated colorings besides reevaluation computationally interesting see fitness curve run ea saw mechanism figure shows run solution found left curve higher resolution displaying fitness best individual 0 10000 evaluations right curve shows range 80000 higher resolution curve left shows within period penalty drops ea making progress sharply rises weights updated giving image saw note saw mechanism introduces two new parameters p 4w thus important check whether performance sawing ea sensitive parameter values end performed extensive test series showed performance pretty much independent parameters illustration present outcomes asexual well sexual orderbased ea figure 9 10 exact values 4w p significant effect performance long p significantly smaller max use reason figure 9 10 also show also presence saw mechanism sexual ea using ox swap clearly inferior asexual variant02061 ox2swap100000200000300000 aes figure 9 effect varying 4w g eqn1000p0010s5 uses population size 1 ox2swap uses population size 700 effect saw mechanism ea performance graphs seen table 2 increase performance adding sawing mechanism dramatic success rate averaged seeds raises 9 92 number search steps drops 205643 89277 figures show sawing ea highly outperforms techniques also performance rather independent random seeds thus saw mechanism highly effective obtaining much better success rates lower costs also robust somewhat surprising low performance gga average terminates 5 colors approximately 50 nodes unnecessary colors cheap individual neednt decoded sum equation 3 recomputed uncolored nodes therefore number reevaluations included total cost 2000 4000 6000 8000 10000 ox2swap100000200000300000 aes figure 10 effect varying p g eqn1000p0010s5 uses population size 1 ox2swap uses population size 700 7 comparing gga sawing ea dsatur results summarized table 2 serve indication viability sawing mechanism solid conclusion performance sawing ea perform extensive comparison grouping ga described section 4 dsatur backtracking sawing ea orderbased representation simple greedy decoder oneswap mutation 4 crossover 11 selection scheme using saw mechanism comparison performed arbitrary 3colorable equipartite 3colorable flat 3colorable graphs connectivities around phase transition results based 100 50 25 runs instances graph generated seed 5 dsatur gas allowed search steps test results concerning sr aes values given figures 11 13 grouping ga inferior two algorithms graph instances small graphs dsatur better ps sawing ea except flat graphs near phase transition see figure 13 medium size graphs n 500 sawing ea slightly better arbitrary equipartite topologies flat graphs see performance sawing ea deteriorates much less phase transition dsatur large graphs sawing ea clearly better wrt success rates often able find solutions dsatur find aes curves sometimes crossing general sawing ea needs fewer steps reason differences could instances small enough dsatur get local optima find solutions possible anymore search space becomes big evaluating overall usefulness sawing ea graph coloring one consider two cases additional tests reported showed oneswap always swaps exactly one pair genes slightly better 11 ga usual swap easy problems ie small graphs far phase transition dsatur better hard instances near phase transition large graphs sawing ea outperforms dsatur results good light fact dsatur highly problem tailored graph coloring algorithm whereas sawing ea general purpose algorithm constraint satisfaction using specific domain knowledge graph coloring another strong property sawing ea take advantage extra time given search increased total number evaluations 1000000 observed dsatur still sr000 g eqn1000p0008s5 performance sawing ea however increased sr000 sr044 aes407283 showing able benefit time given extra time backtracking enough get local optima important question performance algorithm changes problem size grows issue scalability consider wrt success rates computational complexity thus figures 11 13 drawn fixed ns varying ps sequel vary n keep related tested three algorithms using parameters 80n phase transition results given figure 14 showing grouping ga could solve smallest problem instances dsatur able find solutions larger problem instances therefore also made comparison easier instances figure 15 exhibits results showing sawing ea scales much better two methods discussed section 3 even implementation independent number search steps ideal comparing different algorithms nevertheless comparing growth rate number search steps problem size number nodes graphs colored grows gives sound basis judgment even though absolute meaning given numbers may differ scaleup curves aes right hand side plots figure 14 p 80n figure show interesting results easier case dsatur faster sawing ea scales much better really hard graphs 80n sawing ea outperforms dsatur already curves edge connectivity values indicate sawing ea scales linearly problem size edge connectivity n200 dsatur gga 0100000200000300000 aes edge connectivity n200 dsatur edge connectivity n500 dsatur gga 0100000200000300000 aes edge connectivity n500 dsatur edge connectivity n1000 dsatur gga 0100000200000300000 aes edge connectivity n1000 dsatur gga figure 11 comparison arbitrary 3colorable graphs edge connectivity n200 dsatur gga 0100000200000300000 aes edge connectivity n200 dsatur edge connectivity n500 dsatur gga 0100000200000300000 aes edge connectivity n500 dsatur edge connectivity n1000 dsatur gga 0100000200000300000 aes edge connectivity n1000 dsatur gga figure 12 comparison equipartite 3colorable graphs edge connectivity n200 dsatur gga 0100000200000300000 aes edge connectivity n200 dsatur edge connectivity n500 dsatur gga 0100000200000300000 aes edge connectivity n500 dsatur edge connectivity n1000 dsatur gga 0100000200000300000 aes edge connectivity n1000 dsatur gga figure 13 comparison flat 3colorable graphs number nodes dsatur gga2000006000001000000 50 250 500 750 1000 1250 1500 aes number nodes dsatur gga figure 14 scaleup curves sr aes equipartite graphs based runs conclusions npcomplete problems graph coloring form big challenge designers algorithms general evolutionary algorithms particular constraint satisfaction problems form specific challenge paper investigated eas applied graph 3coloring trying several traditional genetic algorithm variants based integer orderbased representation concluded using mutation better using mutation crossover fact accordance common opinion evolutionary computation traditional02061 50 250 500 750 1000 1250 1500 number nodes dsatur aes number nodes dsatur gga figure 15 scaleup curves sr aes equipartite graphs based runs genetic crossovers appropriate socalled grouping problems blindly disrupt chromosomes however interesting note integer representation using crossover points parents imply heavier mixing usual operators increases performance cf section 5 discussed end section 5 argued swithching crossover setting population size 1 genetic algorithm results algorithm cannot called anymore iterated stochastic hillclimbing could appropriate name rather use name evolutionary algorithm name reflects origin method algorithms evolutionary computation use exclusively mutation population size 1 fogel 1995 schwefel 1995 following recommendations grouping problems special representations crossovers advisable falkenauer 1994 implemented tested grouping ga surprisingly gga inferior simple orderbased asexual ea see table 2 suggests using specific grouping operators solution handling graph coloring problem using mutation population size 1 works well main research subject investigation technique called stepwise adaptation weights mechanism problem independent amounts repeatedly redefining weights used definition fitness penalty function similar mechanisms applied search algorithms use ea adding saw mechanism simple orderbased asexual ea increased performance factor 10 success rates increased 9 92 made best algorithm problem instances used preliminary comparison cf table 2 sr aes sr aes sr aes sr aes sr aes dsatur table 2 comparing dsatur backtracking grouping ga 11 orderbased ga using swap 11 orderbased ga using swap saw mechanism different seeds conducting extensive series experiments three different types graph three different sizes various edge connectivity values confirmed sawing ea powerful graph coloring algorithm sawing ea better gga also outperformed dsatur three criteria 1 hardest graph instances performs better dsatur 2 able increase performance given time whereas dsatur scales much better indicating linear scaleup wrt computational complexity especially nice sawing ea tailored problem graph coloring findings thus relevant broader context evolutionary constraint handling saw mechanism helps circumvent major problem penalty based evolutionary constraint handling techniques letting ga find right constraint weights research concerns application sawing npcomplete constrained problems investigating variations saw mechanism straightforward modifications varying value 4w constraints allowing decreasing w constraints already satisfied especially interesting study learning procedure based combining frequency recency based memory lkketangen glover changes weights related solution quality lkketangen glover 1996 finally let us make additional note constraint weights ea finds plots figure suggest problem solving saw mechanism happens two phases first phase ea learning good setting weights phase penalty increases lot increased weights second phase ea solving problem exploiting knowledge appropriate weights learned first phase phase penalty drops sharply indicating using right weights appropriate fitness function second phase problem becomes easy interpretation fitness curves plausible however want suggest ea could learn universally good weights given graph instance first place another problem solver might need weights solve problem besides control experiment applied sawing ea graph thus learning good weights applied ea graph using learned weights non adaptively ie keeping constant along evolution results showed worse performance first run adaptive weights used suggesting saw mechanism works enabling problem solver discover hidden universally good weights therefore wrong seems contradict interpretation distinguishes two phases search moment tend see main advantage saw allowing ea shift focus search quasi continuously thus allowing implicit problem decomposition guides population search space2006001000140018000 2000 4000 6000 8000 10000 fitness evaluations5001500250035000 20000 40000 60000 80000 fitness evaluations figure fitness curve saw mechanism swap r adaptive selfadaptive evolutionary computation proof verification hardness approximation problems handbook evolutionary computation institute physics publishing ltd 04 new methods color vertices graph really hard problems problem structure heuristics scaling behavior genetic algorithms discussion design principles efficient crossover operators graph coloring problems futility blind search exploring kcolorable landscape iterated greedy formal analysis role multipoint crossover genetic algorithms constraint satisfaction problems graph coloring adaptive evolutionary algorithms new representation operators genetic algorithms applied grouping problems hybrid grouping genetic algorithm bin packing genetic algorithm bin packing line balancing evolutionary computation genetic operators sequencing problems computers intractability guide theory npcompleteness tabu search adaptive memory programming advances colouring random graphs adaptation evolutionary computation survey optimization simulated annealing experimental evaluation operations research algorithms complexity efficiency intelligent structural operators kway graph partitioning problem belew booker surrogate constraint methods simple learning satisfiability problems breakout method escaping local minima evolution optimum seeking comparison genetic sequenceing operators almost kcolorable graphs easy color tr ctr steven prestwich coloration neighbourhood search forward checking annals mathematics artificial intelligence v34 n4 p327340 april 2002 rhyd lewis metaheuristics solve sudoku puzzles journal heuristics v13 n4 p387401 august 2007 mrk jelasity pilar martnez ortigosa inmaculada garca uego abstract clustering technique multimodal global optimization journal heuristics v7 n3 p215233 may 2001 domingo ortizboyer csar hervsmartnez nicols garcapedrajas improving crossover operator realcoded genetic algorithms using virtual parents journal heuristics v13 n3 p265314 june 2007 peter ross emma hart dave corne genetic algorithms timetabling advances evolutionary computing theory applications springerverlag new york inc new york ny