inner classes inner classes objectoriented languages play role similar nested function definitions functional languages allowing object export objects direct access methods instance variables however similarity deceptive close look inner classes reveals significant subtleties arising interactions inheritance goal work precise understanding essential features inner classes object study fragment java inner classes inheritance almost nothing else begin giving direct reduction semantics language give alternative semantics translation yet smaller language toplevel classes closely following javas inner classes specification prove two semantics coincide sense translation commutes reduction typesafe b introduction often observed gap objectoriented functional programming styles large might first appear essence object record function closures however differences well similarities one hand objects classes incorporate important mechanisms present functions static members inheritance object identity access protection etc hand functional languages usually allow nested definitions functions giving inner functions direct access local variables enclosing definitions objectoriented languages support sort nesting example smalltalk 3 special syntax block objects similar anonymous functions beta 8 provides patterns unifying classes functions nested arbitrarily recently inner classes popularized inclusion java 11 6 inner classes useful object needs send another object chunk code manipulate first objects methods andor instance variables situations typical userinterface programming example javas abstract window toolkit allows listener object registered userinterface component button button pressed actionperformed method listener invoked example suppose want increment counter button pressed begin defining class counter inner class listener class counter int x class listener implements actionlistner public void actionperformedactionevent e x void listentobutton b baddactionlistenernew listener definition method actionperformed field x enclosing counter object changed method listento creates new listener object sends given button write counter new counter new buttonincrement create display button increments counter every time pressed inner classes powerful abstraction mechanism allowing programs like one expressed much conveniently transparently would possible using toplevel classes however power comes significant cost complexity inner classes interact features objectoriented programmingespecially inheritancein quite subtle ways example closure functional language simple lexical environment including bindings whose scope appears inner class hand access via methods inherited superclasses chain environments including lexical environment appears also lexical environment superclass conversely presence inner classes complicates intuitions inheritance mean example inner class inherit enclosing class happens toplevel class inherits inner class defined different toplevel class javasofts inner classes specification 6 provides one answer questions showing translate program inner classes one using toplevel classes adding inner class extra field points instance enclosing class specification gives clear basic intuitions behavior inner classes falls short completely satisfying account first style indirect forces programmers reason code first passing rather heavy transformation second document somewhat imprecise consisting examples english prose different compilers even different versions suns jdk interpreted specification differently significant details goal work precise understanding essential features inner classes main contributions threefold ffl first give direct operational semantics typing rules small language inner classes inheritance typing rules shown sound operational semantics standard sense keep model simple possible focus basic form inner classes java omitting related mechanisms anonymous classes local classes within blocks static nested classes also deal important interactions access annotations publicprivateetc inner classes cf 6 1 ffl next give translation language inner classes even smaller language toplevel classes formalizing translation semantics java inner classes specification show translation preserves typing ffl finally prove two semantics define behavior inner classes sense translation commutes highlevel reduction relation direct semantics basis work core calculus called featherweight java fj calculus originally proposed context formal study 4 gj 2 extension java parameterized classes designed omit many features java possible even assignment maintaining essential flavor language type system definition fits comfortably page basic properties proved difficulty say simply typed lambdacalculus subtyping extreme simplicity makes ideal vehicle rigorous study new language features parameterized classes inner classes remainder paper organized follows section 2 briefly reviews featherweight java section 3 defines fji extension fj inner classes giving syntax typing rules reduction rules stating standard type soundness results section 4 defines compilation fji fj modeling translation semantics inner classes specification proves correctness respect direct semantics previous section section 5 offers concluding remarks brevity proofs theorems omitted appear forthcoming technical report 5 begin reviewing basic definitions featherweight java 4 fj tiny fragment java including toplevel class definitions object instantiation field access method invocation original version fj also included typecasts required model compilation gj java omitted since interact inner classes significant way since fj sublanguage extension defined section 3 show syntax example program execution rest definition found figure 4 abstract syntax fj class declarations constructor declarations method declarations expressions given follows class c extends c c f k e x new ce metavariables b c e range class names f g range field names ranges method names x ranges parameter names c e range expressions l ranges class declarations k ranges constructor declarations ranges method declarations write f shorthand f 1 fn similarly c x e etc write shorthand 1 mn commas write empty sequence ffl denote concatenation sequences using comma length sequence x written x abbreviate operations pairs sequences obvious way writing c f shorthand c 1 f 1 cn fn c f shorthand c 1 f 1 cn fn thisff shorthand thisf 1 f 1 thisf n fn sequences field declarations parameter names method declarations assumed contain duplicate names key simplification fj omission assignment making fj purely functional 1 objects fields initialized constructor never changed afterwards moreover constructor stylized syntax one parameter field name field super constructor invoked fields supertype remaining fields initialized corresponding parameters constraints enforced typing rules stylized syntax makes operational semantics simple field access expression new cef reduces corresponding constructor argument e also since fj assignment statements method body always consists single return statement computation language goes expressions following returns method invocation expression new cemd reduced looking expression e 0 following return method class c class table reducing instance e 0 receiver object new ce substituted formal arguments special variable respectively figure 4 states reduction rules precisely program fj pair class table set class definitions expression corresponding main method java program reduction relation form e gamma e reduces expression e 0 one step example given class definitions 1 course useful examples programming inner classes involve sideeffecting features java however core mechanisms inner classes interact assignment interesting way omitting assignment fj fji obtain much simpler model offers much insight inner classes class pair extends object object fst object snd pairobject fst object snd pair setfstobject newfst return new pairnewfst thissnd class extends object class b extends object expression new pairnew new bsetfstnew b reduces new pairnew b new b follows new pairnew new bsetfstnew b gamma new pairnew b new pairnew new bsnd gamma new pairnew b new b underlined subexpressions ones reduced step 3 fj inner classes define language fji extending fj inner classes like fj fji imposes syntactic restrictions simplify operational semantics 1 receivers field access method invocation inner class constructor invocation must explicitly specified implicit 2 type names always absolute paths classes denote short abbreviations 3 inner class instantiation expression enew ce annotated static type e written enewt ce conditions 2 3 fji quite subset java whereas fj instead view fji intermediate language users programs translated process elaboration describe elaboration process informally since rather complex especially deep consisting mainly large number rules abbreviating long qualified names detailed treatment given companion technical report 5 begin brief discussion key idea enclosing instances section 31 discuss interactions inner classes subclassing section 32 finally arrive formal definitions syntax 33 fji important auxiliary definitions 34 operational semantics 35 typing relation 36 statements subject reduction progress properties 37 finish section 31 enclosing instances consider following fji class declaration class outer extends object pair outerpair p super class inner extends object object sndp return outerthispsnd outerinner makeinner return thisnewouter inner conceptually instance class outer contains specialized version inner class instantiated yields instances outerinner refer os instance variable p object called enclosing instance outerinner objects enclosing instance named explicitly qualified expression found java fji consisting simple name enclosing class followed general class refer enclosing instances c 1 cngamma1 well usual also written cn fji object inner class instantiated expression form enewt ce e enclosing instance static type e result enewt ce always instance tc regardless runtime type e rigidity reflects static nature javas translation semantics inner classes explicit annotation used fji remember static type e contrast inner classes beta virtual 7 ie different constructors may invoked depending runtime type enclosing instance example subclass outer 0 class outer also inner class inner onew inner might build instance either outerinner outer 0 inner depending dynamic type elaboration process allows type names abbreviated java programs example fji program written class outer extends object pair outerpair p super class inner extends object object sndp return psnd inner makeinner return new inner java return type inner makeinner method denotes nearest inner declara tion also java enclosing instances omitted qualified thus thisnewouter inner original example written new inner 32 subclassing inner classes almost form inheritance involving inner classes allowed java toplevel class extend inner class another toplevel class inner class extend another inner class completely different toplevel class inner class even extend enclosing class one case disallowed class cannot extend inner class discuss restriction later liberality however introduces significant complexity method inherited superclass must executed lexical environment different subclasss figure 1 shows situation three inner classes a1a2a3 b1b2b3 c1c2c3 subclass hierarchy white oval represents enclosing instance three shaded ovals indicate regions program methods c1c2c3 object may defined method inherited a1a2a3 executed environment consisting enclosing instances a1this a2this may access members enclosing classes via a1this a2this similarly b1b2b3 c1c2c3 general class n superclasses inner n different environments may accessed methods moreover environment may consist one enclosing instance six enclosing instances required methods c1c2c3 work example foregoing see provide way six enclosing instances instantiate c1c2c3 object recall object inner class instantiated enclosing object provided prefix e new expression example c1c2c3 object instantiated writing enewc1c2 c3e e enclosing instance corresponding c2this enclosing instances come first enclosing instances enclosing classes immediately enclosing class c1this supplied new expression explicitly reached via extends extends figure 1 chain environments direct enclosing instancefor example enclosing instance e enewc1c2 c3e form new c1cnewc1 c2d includes enclosing instance new c1c corresponds c1this second enclosing instances superclasses determined constructor subclass taking simple example suppose extend inner class outerinner enclosing instance corresponding outerthis required make instance subclass example subclass outerinner class refinedinner extends outerinner object c refinedinnerouter thisouterinner object c declaration refinedinner constructor ordinary argument thisouterinner becomes enclosing instance prefix super constructor invocation providing value outerthis referred inherited method sndp similarly c1c2c3 example subclass b1b2b3 written follows class b1 extends class b2 extends class b3 extends a1a2a3 object b3 b3object a3 a1a2 thisa1a2a3 object b3 note since enclosing instance corresponding a1this included enclosing instance corresponding a2this b3 constructor takes one extra argument enclosing instances class class c1 extends class c2 extends class c3 extends b1b2b3 object c3 c3object a3 a1a2 thisa1a2a3 object b3 b1b2 thisb1b2b3 object c3 since constructor superclass b1b2b3 initializes a2this constructor c3 initializes b2this qualifying super invocation argument thisa1a2a3 passed super ordinary argument fji restrict qualification super constructor argument whereas java allows expression qualification permits clean definition operational semantics saw fj since state information including fields enclosing instances object appears new expression moreover technical reasons connected name mangling involved translation semantics require constructor argument used qualification super named thisc 1 direct superclass example lastly explain allowed class extend one direct indirect inner classes sensible way make instance class suppose could define class class foo extends foobar class bar since foo extends foobar constructor foo need instance foo argument making impossible make instance foo perhaps one could use null enclosing instance case would useful since inner classes usually supposed make use enclosing instances 33 syntax proceed formal definitions fji abstract syntax language shown top left figure 2 use notational conventions previous section metavariables u ranges types qualified class names sequence simple names c 1 c n concatenated periods compactness definitions introduce notation null qualification identify c c metavariable p ranges types write class declaration l includes declarations simple name c superclass fields f constructor k inner classes l methods two kinds constructor declaration depending whether superclass inner toplevel superclass inner subclass constructor must call super constructor qualification f provide enclosing instance visible superclasss methods see typing rules constructor arguments arranged following order 1 superclasss fields initialized superf fsuperf 2 enclosing instance superclass needed 3 fields class defined initialized thisff like fj body method returns expression variable field access method invocation object instantiation assume set variables includes special variables cthis every c variables never used names arguments methods program pair class table ct mapping types class declarations l expression e object treated specially every fji program definition object class appear class table auxiliary functions look fields method declarations class table equipped special cases object return empty sequence fields empty set methods lighten notation follows assume fixed class table ct class table read subtype relation classes write subtype tthe reflexive transitive closure immediate subclass relation given extends clauses ct relation defined formally bottom left figure 2 impose following sanity conditions class table 1 ct class c every inner class declaration l name ct object 62 domct 4 every type except object appearing anywhere ct 2 domct 5 every e 0 newt ce new ce resp appearing anywhere ct tc 2 domct c 2 domct resp 6 cycles subtyping relation 7 6 tu two types tu conditions 1 2 class table fji identified set toplevel classes condition 7 prohibits class extending one inner classes syntax class c extends f k l e x new ce computation new cef gamma e cn new ce new cemd gamma ae x 7 7 cn i21n oe cn gamma ae x 7 7 cn i21n oe subtyping class c extends expression typing itfield method typing i21n class cn extends mtypem itmethod class typing ok pc l ok pc class c extends f k l ok p ok pc l ok pc class c extends td f k l ok p figure 2 fji main definitions field lookup class c extends f k l class c extends ud f k l class c extends f k l class c extends f k l defined method body lookup class c extends f k l class c extends f k l defined enclosing instance lookup encl tc class c extends f encl new cd new class c extends ud f encl new cd 0 e class c extends f encl new class c extends ud f encl figure 3 fji auxiliary definitions 34 auxiliary functions typing reduction rules need auxiliary definitions given figure 3 fields class written fieldst sequence f pairing class field name fields declared class superclasses addition fieldst collects types direct enclosing instances superclasses example fieldsc1c2c3 returns following sequence object a3 field a1a2a3 enclosing instance bound a2this object b3 field b1b2b3 enclosing instance bound b2this object c3 field c1c2c3 third rule definition inserts enclosing instance information fields g superclass ud fields f current class welltyped program fieldst always agree constructor argument list type method class written mtypem pair written ss sequence argument types result type similarly body method class written mbodym triple written x e sequence parameters x expression e class method defined function encl plays crucial role semantics fji intuitively e toplevel inner class instantiation encl returns direct enclosing instance e visible class ie enclosing instance provides correct lexical environment methods inherited first rule simplest case since type expression e 0 newt ce agrees subscript tc returns direct enclosing instance e 0 rules follow common pattern explain fifth rule representative since subscripted type different type argument enclosing instance e 0 correct answer therefore make recursive call object 0 newu dd superclass obtained dropping e 0 many arguments e fields f class sc keep going like finally argument becomes instance match first rule example encl a1a2a3 enewc1c2 c3a new a1newa1 a2 b new b1newb1 b2 c new b1newb1 b2newb1b2 b3a new a1newa1 a2 b new a1newa1 a2newa1a2 a3a new a1newa1 a2 note encl function outputs direct enclosing instance obtain outer enclosing instances a1this encl used repeatedly encl a1a2 encl a1a2a3 e computation fj reduction relation fji form e gamma e 0 write gamma reflexive transitive closure gamma reduction rules given middle left column figure 2 four reduction rules two field access two method invocation field access expression new cef looks field names f c using fieldsc yields constructor argument e position corresponding f field list enewt cef behaves similarly method invocation expression new cemd first calls mbodym c obtain triple sequence formal arguments x method body e class c 1 delta delta delta cn defined yields substitution instance method body x replaced actual arguments special variables cnthis receiver object new ce c n corresponding enclosing instance c obtained encl since method invoked defined c 1 delta delta delta cn direct enclosing instance obtained encl c 1 deltadeltadeltac n e e receiver object similarly cngamma2 obtained encl c1 deltadeltadeltac encl c1 deltadeltadeltac n e reduction rules may applied point expression also need obvious congruence rules e gamma e f like omit example class table includes outer refinedinner pair b new refinedinnernew outernew pairnew new b new objectsndp reduces new b follows new refinedinnernew outernew pairnew new b new objectsndp gamma new outernew pairnew new bpsnd gamma new pairnew new bsnd gamma new b underlined subexpressions redices reduction step 36 typing rules typing rules expressions method declarations class declarations given righthand column figure 2 environment gamma finite mapping variables types written xt typing judgment expressions form gamma e 2 read environment gamma expression e type typing rules syntax directed one rule form expression typing rules object instantiations method invocations check actual parameter type subtype corresponding formal parameter type obtained fields mtype enclosing object must type subtype annotated type new typing judgment method declarations form ok c 1 delta delta delta cn read method declaration ok declared class c 1 delta delta delta cn body method typed context formal parameters method declared types c type c 1 delta delta delta c method name declared superclass must type subclass typing judgment class declarations form l ok p read class declaration l ok declared p p type class declaration l inner class otherwise l toplevel class typing rules check constructor applies super fields superclass initializes fields declared class method declaration inner class declaration class ok condition c 62 p ensures simple class name defined also simple name one enclosing classes avoid ambiguity meaning cthis 37 properties easy show fji programs enjoy standard subject reduction progress properties together guarantee welltyped programs never cause nosuchfielderror nosuchmethoderror 371 theorem subject reduction gamma e 2 e gamma e 0 proof sketch main property required proof following termsubstitution lemma proved induction derivation gamma plus following lemma similarly e 0 theorem proved induction derivation e gamma e 0 case analysis last rule used cases irinvkt irinvki easy using lemmas base cases also straightforward induction steps xi 372 theorem progress suppose e welltyped expression 1 e includes new c 0 ef subexpression fieldsc 0 similarly e includes 2 e includes new c 0 emd subexpression mbodym c similarly e includes e 0 translation semantics section consider style semantics translation fji fj every inner class compiled toplevel class one additional field holding reference direct enclosing stance occurrences qualified translated accesses field example outer refinedinner classes previous section compiled following three fj classes class outer extends object pair outerinner makeinner return new outerinnerthis class outerinner extends object outer outerinnerouter thisouterinner object sndp return thisthisouterinnerpsnd class refinedinner extends outerinner object c refinedinnerouter thisouterinner object c inner class outerinner compiled toplevel class outerinner field thisouterinner holds outer object corresponds direct enclosing instance outerthis original fji program thus outerthis compiled field access expression thisthisouterinner give compilation function j delta j syntactic category except types compilation functions take second argument fji class name entity translated defined written 41 types expressions methods every qualified class name translated simple name obtained syntactic replacement compilation expressions written jej given write jej shorthand je similarly jnew dej new jej new jtdj jej saw compiled inner class one additional field called jtj original class name c class c 1 delta delta delta cn becomes expression follows references direct enclosing instance sequence reaches correct one enclosing instance e 0 e 0 newt ce become last argument compiled constructor invocation compilation methods written jmj straightforward stands jt 1 42 constructors classes compilation constructors written jkj given four cases depending whether current class toplevel class inner class whether superclass toplevel class inner class current class inner class one argument corresponding enclosing instance added argument list name constructor becomes jtcj translation qualified name class superclass inner argument used qualification fsuperf becomes last argument super invocation finally compilation classes written jlj p follows class c extends f k l class c extends jsj class c extends f k l class jtcj extends jsj constructor inner classes methods class c defined p compiled auxiliary argument pc inner classes l become toplevel classes constructor compilation compiled class inner name changes jtcj field jtcj holding enclosing instance added compilation class table written jct j achieved compiling toplevel classes l ct ie 43 properties translation semantics easy show translation semantics preserves typing sense welltyped fji program compiled welltyped fj program 431 theorem compilation preserves typing ct ok respect ct respect jct j jct j ok finally come main result section correspondence direct semantics presented previous section translation semantics defined show behavior compiled program exactly reflects behavior original program fji every step reduction welltyped fji program compiled program takes one steps reaches corresponding state 432 theorem compilation commutes reduction gamma fji e 2 egamma fji e gamma fj proof straightforward induction derivation e gamma fji e 0 case analysis last rule used main lemma cases irinvkt irinvki suppose 2 jnew cej new cej similarly lemma shows calculation encl e correctly mimicked field access mangled fields translation since method invocation direct semantics may involve calculation encl delta delta delta several times lowlevel reduction may require one step mimic one step fji level xi 5 conclusions future work formalized two styles semantics inner classes direct style translation style semantics given compilation lowlevel language without inner classes following javas inner classes specification proved two styles correspond sense translation commutes highlevel reduction relation direct semantics besides deepening understanding inner classes work uncovered several bugs various java compilers future work interaction inner classes access restrictions java clearly worth investigating also hope able model javas forms inner classes anonymous classes local classes declared method bodies slightly complicated since method arguments fields occur free variables expect captured variant fji acknowledgments work supported university pennsylvania national science foundation grant ccr9701826 principled foundations programming objects igarashi research fellow japan society promotion science would like thank bug parade java developer connection httpdeveloperjavasuncomdeveloperbugparadeindexhtml providing useful information r secure implementation java inner classes making future safe past adding genericity java programming language featherweight java minimal core calculus java gj inner classes birger mllerpedersen tr smalltalk80 language implementation virtual classes powerful mechanism objectoriented programming javaisublightsubi typesafemyampersandmdashdefinitely classes mixins making future safe past java type system sound semantic analysis virtual classes tested classes featherwieght java c programming language third edition java language specification statically safe alternative virtual types protection programminglanguage translations ctr nathaniel nystrom stephen chong andrew c myers scalable extensibility via nested inheritance acm sigplan notices v39 n10 october 2004 ancona c anderson f damiani drossopoulou p giannini e zucca provenly correct translation fickle java acm transactions programming languages systems toplas v29 n2 p13es april 2007 christopher league zhong shao valery trifonov typepreserving compilation featherweight java acm transactions programming languages systems toplas v24 n2 p112152 march 2002 radha jagadeesan alan jeffrey james riely typed parametric polymorphism aspects science computer programming v63 n3 p267296 15 december 2006