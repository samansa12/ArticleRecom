deductive technique diagnosis bridging faults deductive technique presented uses voltage testing diagnosis single bridging faults two gate input output lines applicable combinational fullscan sequential circuits defects class faults method accurate construction making assumptions logiclevel wiredandor behavior pathtrace procedure starting failing outputs deduces potential lines associated bridge eliminates certain faults information obtained pathtrace failing outputs combined using intersection graph make deductions intersection graph implicitly represents candidate faults thereby obviating need enumerate faults hence allowing exploration space faults procedures performed dynamically reduced intersection graph maintained reduce memory simulation time dictionary fault simulation required results provided large iscas89 benchmark circuits largest benchmark circuit procedure reduces space bridging faults order 109 hundred faults average 30 seconds execution time b introduction bridging fault 1 two lines b circuit occurs two lines unintentionally shorted lines b different logic values gates driving lines engaged drive fight logic contention depending gates driving lines b input values resistance bridge bridged lines intermediate voltage values va vb well defined logic values 1 0 interpreted logic fans bridge shown shaded region figure 1 logic gates downstream bridged nodes variable input logic thresholds thus intermediate voltage bridged node may interpreted differently different gates known byzantine generals problem 2 3 illustrated figure b voltage node va interpreted faulty value 0 gate good value 1 gate c thus different branches single fanout stem different logic values feasibility diagnosis scheme evaluated using parameters accuracy precision storage requirements computational complexity accurate simulation bridging faults 4 3 computationally expensive thus may feasible perform bridging fault simulation diagnosis space bridging faults extremely large example large iscas89 benchmark circuits order 10 9 faults several techniques proposed diagnosis bridging faults combinational circuits using voltage testing mill research supported part defense advanced research projects agency darpa contract dabt 6396c0069 semiconductor research corporation src grant 95dp109 office naval research onr grant n000149511049 equipment grant hewlettpackard man mccluskey acken 5 presented approach diagnose bridging faults using stuckat dictionaries chess et al 6 lavo et al 7 improved technique techniques enumerate bridging faults hence constrained using reduced set bridging faults extracted layout construction storage requirements fault dictionaries may prohibitive chakravarty gong 8 describe voltagebased algorithm uses wiredand wiredor model stuckat fault dictionaries wiredand wiredor models work technologies one logic value always strongly driven x x x primary outputs b effect propagation primary inputs threshold 26 v threshold 24 vbridge c bridging fault threshold 23 v figure 1 bridging fault effect propagation paper present deductive technique require fault dictionaries explicitly simulate faults either stuckat bridging model wiredand wiredor assumed logiclevel class bridging faults considered single bridging faults two lines circuit lines could gate outputs gate inputs primary inputs defects class faults method accurate defect guaranteed candidate list fol lowing failing vector failing output refer vector primary output fail test tester simulation deductive technique consists two deductive procedures first pathtrace procedure starts failing outputs uses logic values obtained logic simulation good circuit failing vector used deduce lines potentially associated bridging faults second procedure intersection graph constructed information obtained pathtracing failing outputs pathtrace intersection graph constructed processed dynamically diagnosis intersection graph implicitly represents candidate bridging faults consideration thereby allowing processing entire space bridging faults implicit man ner diagnosis reduced version graph maintained retains diagnostic information reduces memory usage simulation time since technique uses logic simulation explicitly simulate faults fast technique outputs list candidate faults resolution size candidate list adequate diagnosis complete otherwise either candidate list simulated bridging fault simulator techniques 5 6 7 8 used improve resolution 2 pathtrace procedure pathtrace procedure deduces lines circuit potentially associated bridging fault potential source error respect failing output defined follows potential source error respect failing output line circuit exists sensitized path failing output application corresponding failing vector note distinction potential sources error actual sources error associated defect following actual sources error simply referred sources error pathtrace procedure similar critical path tracing 9 star algorithm 10 however important differences procedures developed single stuckat faults hence one line circuit assumed faulty however bridging faults due byzantine generals problem lines could sources fault effects effects may reconverge leading effects multiplepath sensitization shown figure 1 b voltages lines va b vb interpreted faulty gates e fault effect reconverges gate f however assumption single bridging fault two lines ensures two lines circuit sources error logicvalue gate input said controlling determines gates output value regardless input values 11 pathtrace procedure proceeds follows start failing output process lines circuit reverse topological order inputs gate output reached observe input values inputs noncontrolling values continue trace inputs one inputs controlling values continue trace one controlling input fanout branch reached continue tracing stem choice selecting controlling value exploited explained later first consider case single line source error failing output consider case lines bridging fault sources error failing output consider single line source errors failing vector reconvergent fanout exists following situations could occur figure 2 effects error stem c propagate output however paths different parities cancel reconverge referred self masking 9 figure 2 b shows example multiple path sensitization 9 bold lines indicate error propagation error line c propagates two paths reconverging propagating output a0h f e f e c propagation error stem c propagates b multiplepath sensitization c figure 2 reconvergent fanout single source error lemma 1 failing vector pathtrace procedure includes potential sources error respect failing puts assuming single source error proof pathtrace reaches fanout branch continues stem hence stem source error would included gate multiple controlling values inputs fault effects propagate gate exists stem errors reconverge gate collectively change controlling values pathtrace reaches gate continue along one lines controlling val ues hence include stem lemma 1 interpreted follows defect causes single line faulty failing vector fault effect propagates failing output pathtrace includes lines sensitized failing output pathtrace procedure conservative respect single sources error lines pathtrace may potential sources error example line h figure 2 b potential source error would included pathtrace however conservative approach necessary lines bridging fault could sources error respect failing output note single source error potential sources error critical lines 9 circuit next consider case lines bridging fault sources error failing vector exists least one path lines bridging fault bridging fault creates one feedback loops fault referred feedback bridging fault 11 paths exist lines bridging fault called nonfeedback bridging fault feedback bridging fault may cause oscillations occur input vector creates sensitized path one line bridging fault path odd inversion parity oscillations detectable tester used additional failing outputs pathtrace pro cedure following lemma theorem corollary applicable feedback nonfeedback bridging faults symbol ab used represent bridging fault lemma 2 bridging fault ab causes fault effect propagation output due reconvergence bridging fault effects lines bridging fault pathtrace procedure starting failing output include least one lines bridging fault proof reconvergent gate exist one controlling input values pathtrace continues one lines controlling input value thus one lines bridging fault covered pathtrace case lemma 2 illustrated figure 3 output gate e fails pathtrace starts output proceeds inputs since gate e two controlling inputs trace continues one node b part bridging fault ab covered pathtrace x x e bridging fault ei f g node test vector po primary output figure 3 pathtrace node set 2 node set n ij defined set lines lie pathtrace starting failing output po application testvector j theorem 1 neither line line b bridging fault ab node set n ij fault ab could caused output po fail test vector j proof contradiction assume bridging fault ab caused output po fail testvector j implies exists sensitized path b interaction fault effects b primary output po application testvector j neither line line b due lemmas 1 2 exists sensitized path po leads contradiction corollary 1 defect single bridging fault ab node set n ij must contain least one lines b proof follows directly theorem 1 note theorem 1 corollary 1 conservative make assumptions resistance bridging fault gates feeding bridging fault input values logic input thresholds gates downstream bridging fault assumption made presence single bridging fault information group node sets used make deductions performed using concept intersection graph 3 intersection graph processing given group node sets fn ij g intersection graph defined follows definition 3 intersection graph simple undirected graph loops multiple edges node setg edge j 6 l figure 4 shows intersection graph 7 vertices corresponding node sets shown within curly brackets intersection graph similar structure initialization graph proposed chakravarty gong 8 however important differences initialization graph constructed using structural information intersection graph constructed using logic information exploited pathtrace procedure initialization graph created statically diagnosis processed however intersection graph updated processed dynamically diagnosis reduction procedure maintains reduced version graph without losing diagnostic formation intersection graph interesting structural properties useful performing deduction maintaining reduced graphs help reduce memory requirements simulation time g 2v g figure 4 intersection graph properties 31 structural properties property 1 gi two vertices v1 v2 set vertices partitioned three sets 0such 8v 2 ei v 0 v 0 proof let n 1 ij n 2 ij node sets corresponding v1 v2 corollary 1 n 1 ij n 2 ij contain least one lines bridging fault ab since v1 v2 contains one lines b say implies n 2 contains line b consider arbitrary vertex v2g corollary 1 follows node set corresponding v3 contains least one lines b thus v3 adjacent least one v1 v2 implies one following three conditions holds v3 adjacent v1 adjacent v2 v3 adjacent v2 adjacent v1 v3 adjacent v1 v2 0are three sets obtained property cliques proof corollary 1 property 1 follows node sets corresponding every v 2 v 0 fv1g contain one one b say node sets corresponding every contain line b thus v 0 cliques figure 4 illustrates properties intersection graphs reduced maintaining properties reduces number vertices edges also reduces number node sets need maintained sizes thus reduction process done dynamically diagnosis help reduce memory simulation time following follows property 2 used reduction process corollary 2 intersection graph clique subgraphs induced v 0 fv1g v 0 fv2g respectively using property 1 node sets v1 contain one lines b bridge node sets v2 contain line 32 intersection graph processing corollary 2 used procedure shown figure 5 reduce intersection graph irreducible intersection graph either complete graph following characteristic ei v 0and v 0sets empty example reduction procedure shown figure 6 initial intersection intersection graph vertex corresponding node set n ij possible find v1 v2 since gi clique reduced reduced reduced reduced edges incident v 0and v 0 figure 5 procedure reducing intersection graph graph reduced two times obtain irreducible graph two disjoint vertices dynamic processing gi proceeds fol lows node set n ij obtained update gi reduce intersection graph irreducible graph obtained node sets processed irreducible intersection graph obtained contains candidate bridging faults candidate list c obtained irreducible graph gir using following rules 1 gir two disconnected components one vertex let n 1 ij n 2 ij node sets associated two vertices g 2 gir one component complete graph v1 ij n 2 ij node sets associated v1 v2 g 3 gir complete graph let g reduced intersection graph compact way implicitly represent space candidate bridging faults reduction procedure prunes space candidate bridging faults without losing diagnostic information defect guaranteed candidate list construction candidate list include faults logically equivalent diagnostically equivalent respect test set better test set may distinguish faults thereby increasing diagnostic res olution whengir complete graph one lines bridge determined certainty results partial diagnosis experimental results indicate partial diagnosis occur often 33 implementation issues complexity major operation performed gi processing reduc tion basic operation needed reduction procedure set intersection node sets need stored vertex g 2gvvg initial intersection graph b reduced intersection graph figure example intersection graph reduction gi node sets represented bitvectors value 1 indicating presence node 0 indicating absence one n lines circuit size node set dn8e bytes bit vector representation allows efficient set intersection using bitwise operator result dynamic processing gi size grows shrinks hence data structure chosen represent gi twodimensional linked list gi jvi j vertices assuming 4 bytes pointers vertex indices worstcase memory requirement gi associated node sets jvi j theta dn8e8jvi j 8jvi j 2 bytes since jvi j typically much smaller n worstcase space complexity ojvi j theta n worstcase size jvi j n fail n fail total number failing outputs failing vectors reduction procedure results jvi j much smaller nfail thereby reducing memory requirements reduction procedure computes v 0and v 0sets based corollary 2 exploring edges ei typically jei j small edge ei reduction procedure computes v 0and intersection operation node sets two vertices gi reduces number vertices gi 1 thus maximum number intersections possible procedure reduce intersection graph jvi 2 thus worstcase time complexity procedure reduce intersection graph ojvi intersections reduction procedure results small jvi j values thereby reducing simulation time 4 heuristics improve resolution pathtracing procedure reaches gate multiple controlling inputs one chosen choice input impacts size resultant node set elements hence impacts diagnostic resolution smaller size node set smaller intersection node sets greater likelihood reducing intersection graph two conditions checked select controlling input manner size resultant node set reduced first based fanout pathtrace reaches stem continues stem unconditionally controlling input branch stem one whose branches chosen input selected since stem selected anyway 10 second condition involves checking controllability line scoap controllability measures used easily controllable input check 0controllability logic value line 0 viceversa likely give smallest node set gate reached two different applications pathtrace choice controlling inputs exists selecting different inputs two runs potentially result smaller intersection two resultant node sets dirty bit set pathtrace chooses controlling input input avoided future invocations pathtrace procedure based conditions three heuristics defined low heuristic 1 chooses controlling input randomly heuristic 2 chooses controlling input checking fanout followed con trollability heuristic 3 chooses controlling input checking dirty bit followed fanout controllability overall diagnosis procedure shown figure 7 test vector outputs simulation failing output po j pathtrace failing output po j figure 7 diagnosis procedure 5 experimental results diagnosis procedure implemented c experiments performed sun sparcstation 20 64mb memory fullscan versions iscas89 sequential benchmark circuits 12 practice failing responses used input diagnosis procedure would obtained testing failing circuit tester diagnosis experiments failing responses generated using accurate bridging fault simulator eproofs 4 ensure diagnostic experiments realistic possible cell libraries circuits generated manually 4 test vectors used compact tests generated target stuckat faults 13 ideally diagnostic test sets bridging faults would best choice large iscas89 benchmark circuits considered benchmark circuits random sample 500 single twoline bridging faults injected one time one faults failing responses obtained performing bridging fault simulation given test set using eproofs faults produce failing outputs dropped rest faults failing responses used perform di agnosis diagnosis results summarized tables 1 2 average minimum maximum sizes candidate lists shown table 1 three different heuristics average size candidate list hundred faults significant reduction space faults expected heuristics 2 3 improve diagnostic resolution heuristic 1 reduction significant example s38584 average size candidate list reduced factor 4 note cases method uniquely identifies fault reso lution 1 best resolutions indicated bold average sizes node sets intersection graph shown figure 2 expected heuristic 2 best terms node set sizes heuristic 2 heuristic 3 better heuristic 1 terms average size intersection graph average values execution time number failing outputs percentage faults partially diagnosed given heuristic 2 interesting observations made table 2 note average size sets small appears independent circuit size 23 orders magnitude smaller total number lines circuit thereby suggesting pathtrace procedure ef ficient average size intersection graph jvi j quarter total number failing outputs indicating graph reduction procedure useful expected heuristic 2 best terms average size node set heuristic 3 best terms average size intersection graph jvi j note procedure accurate construction defect guaranteed candidate list distribution sizes candidate lists shown figure 8 s13207 s38417 trend observed circuits well 10 faults resolution adequate less 20 candidates consider diagnosis complete 80 faults resolution candidate list small enough accurately simulated using bridging fault simulator postprocessing step 25 cases diagnosis partial one lines bridge determined certainty cases resolution large bridging fault simulation cannot performed diagnosis procedure followed techniques 5 6 7 8 using candidate list improve resolu tion note resolutions obtained using compacted stuckat test set expect would better resolution better test sets table 1 diagnostic resolution circuit candidate list size ave min max ave min max ave min max diagnosis procedure requires small execution times seen column 8 table 2 procedure requires logic simulation failing vectors pathtrace procedure failing outputs procedures linear size circuit graph reduction procedure linear size vertex set jvi j techniques used 5 6 7 8 require either storage stuckat fault dictionaries simulation stuckat faults diagnosis seen columns 12 13 table 2 storage requirements dictionaries large simulation time order magnitude larger required diagnosis procedure expected since fault simulation greater linear complexity size circuit fault simulation without fault dropping needs performed techniques used 5 6 7 also need enumerate bridging faults hence constrained use small set realistic faults tradeoff resolution complexity suggests diagnosis procedure space timeefficient could attempted first complemented procedures greater resolution required table 2 diagnosis results comparison techniques using stuckat fault information circuit average size average average values stuckat fault node set jv j heuristic 2 information heu1 heu2 heu3 heu1 heu2 heu3 exec fail partial storage exec time z time s9234f 402 363 370 187 193 193 232 654 035 6927 471 3461 s13207f 296 282 274 625 582 274 311 2983 016 12311 051 g 13155 s38584f 389 287 294 313 287 294 304 649 038 36303 156 g 21451 full fault dictionary matrix format z wo fault dropping0203050709 candidate list size normalized ratio figure 8 distribution candidate list size 6 conclusions future work deductive procedure diagnosis bridging faults accurate experimentally shown space time efficient described information obtained pathtrace procedure failing outputs combined using intersection graph constructed processed dynamically make deduction intersection graph provides implicit means representing processing space candidate bridging faults without using dictionaries explicit fault simulation procedure assumes single bridging fault two lines defect involves multiple faults shorts multiple lines properties gi may violated extensions multiple faults shorts multiple lines require looking larger sized cliques kn n 3 graph gi interesting application work area design error location design errors multiplicity 2 diagnosis procedure used without modification higher multiplicity errors require extensions r bridging stuckat faults fault model evolution diagno sis accuracy vs precision biased voting method simulating cmos bridging faults presence variable gate logic thresholds eproofs cmos bridging fault simulator diagnosing cmos bridging faults stuckat fault dictionaries diagnosing realistic bridging faults stuckat information beyond byzantine gen erals unexpected behavior bridging faults diagnosis algorithm diagnosing twoline bridging faults cmos combinational circuits script critical path tracing algorithm synchronous sequential circuits less information logic simulation useful fault simulation digital system testing testable design combinational profiles sequential benchmark circuits cost effective generation minimal test sets stuckat faults combinational logic circuits tr algorithm diagnosing twoline bridging faults combinational circuits diagnosis realistic bridging faults single stuckat information eproofs beyond byzantine generals biased voting ctr srikanth venkataraman scott brady drummonds poirot applications logic fault diagnosis tool ieee design test v18 n1 p1930 january 2001 yushen yang andreas veneris paul thadikaran srikanth venkataraman extraction error modeling automated model debugging highperformance low power custom designs proceedings conference design automation test europe p9961001 march 0711 2005 andreas veneris jiang brandon liu incremental design debugging logic synthesis environment journal electronic testing theory applications v21 n5 p485494 october 2005