flexible object merging framework need merge different versions object common state arises collaborative computing due several reasons including optimistic concurrency control asynchronous coupling absence access control developed flexible object merging framework allows definition merge policy based particular application context collaborative activity performs automatic semiautomatic interactive merges supports semanticsdetermined merges operates objects arbitrary structure semantics allows finegrained specification merge policies based existing collaborative applications framework consists merge matrix defines merge functions parameters allows definition multiple merge policies merge algorithm performs merge based results computed merge functions conjunction framework introduce set merge policies several useful kinds merges identified paper motivates need general approach merging identifies important merging issues surveys previous research merging identifies list merge requirements describes merging framework illustrates examples evaluates framework respect requirements research efforts merging objects b introduction course collaboratively producing document artifact collaborators often find created two versions containing revisions wish single version becomes task take set revisions one version reapply version object tool points differences versions may employed ease taskif tool available merging versions remains essentially manual process situation objectionable two counts first needed differencing tools may unsatisfactory unavailable second process reapplying one set changes object another version object errorprone timeconsuming tool performs merge automatically responding appropriately conflicting changes would highly useful number merge tools already exist tools merging plaintext files include unix diff3 tool rcs rcsmerge tool 11 fileresolve tool suns network software environment 1 research efforts include work horwitz prins reps program merging tool detects inconsistent merge use program dependency graphs 6 gina collaborative application framework 2 allows users merge revised versions merging command histories work related object merging includes prep flexible diff tool 9 gives users flexibility finding pinpointing differences concurrency control model ellis gibbs 4 determines consistent ordering operations sites distributed collaborative environment merging concurrent operations current merge tools either limited based plain text files adaptable particular collaboration contexts developed novel flexible object merging framework allows definition merge basis particular application context collaborative activity performs automatic semiautomatic interactive merges supports semanticsdetermined merges operates objects arbitrary structure semantics allows finegrained specification merge policies based existing collaborative applications framework consists merge matrix defines merge functions parameters allows definition multiple merge policies merge algorithm performs merge based results merge functions conjunction merge framework introduce set merge policies several useful kinds merges identified rest paper organized follows begin identifying collaboration scenarios problem merging arises highlight issues confront general approach merging follow discussion existing merge tools previous research merging motivate describe set requirements merge tools describe merge scheme provide examples use finally evaluate merge scheme respect ability simulate existing merge tools discussed previously need object merging problems merging arise collaborations instance collaboration consists brainstorming need producing final merged artifact large number artifactbased collaborations however need merging potentially conflicting changes arises section identify conditions collaborations problem arises terms functions collaboration environments may provide use examples two collaboration scenarios feel typical situations requiring object merging referred throughout paper 1 two authors collaborating journal article deadline approaches becomes necessary authors work document simultaneouslyinstead backandforth editing one corrects scattered figures associated references adds citations using ordinary text editors forced work different copies text thus creating two different versions need merged article submitted 2 two programmers collaborating compiler project using unix parser generating tool yacc create grammar compiler basic grammar completed work separate versions may develop different portions gram mar one works productions program statements works productions define legal expressions language point need merge versions make progress compiler coupling merging useful collaborative activities artifact always wysiwis see see 8 coupled case concurrent edits never produce separate versions artifact merging primarily useful coupling views versions object allow asynchronous collaboration concurrent editing existing tools offer coupling course result separate versions case text document collaboration example yacc grammar collaboration provides example uncoupled concurrent editing fact desired time programmers working individually need repeatedly edit compile test requires grammar versions kept separately consistent states merging may also useful cases views object normally coupled become temporarily uncoupled coupling mechanisms unable operate example take case teleconference interrupted communications failure conferees ends may continue work result communications restored work needs merged mobile nomadic computing users environments follow office may also provide cases kind concurrency control merging may useful optimistic long transaction model model collaborators made inconsistent changes would typically wish merge changes rather abort one transactions merging general provides late concurrency control collaborations concurrency control required cannot enforceddue lack tool support example access control situations collaborators work separate versions object access control mechanisms cannot enforce access control policy desired suitably defined merge procedure provide late access control accepting revisions merged object basis author changes example use given later access control used conjunction partitioningwhere collaborators divide object sections one exclusive accesscan prevent need merging always viable solution partitioning may practical object modularized yacc grammar users changes need span multiple overlapping modules moreover partitioning needed particular situation may difficult anticipate known beforehand make changes furthermore appropriate partitioning may well change course collaboration example journal article writers objections partitioning may relevant undoredo systems provide collaborative undoredo 7 need merge capability may somewhat less ened collaborators merge versions object simply stepping edits using redo mechanism apply one collaborators changes others version object merging performed gina environment edit histories grow length becomes less attractive merging procedure usefulness also sensitive granularity edit histories finer grained history tedious merging becomes issues object merging preceding section described different versions object may arise computersupported collaboration thus engendering need tools merge versions section describe merge problem presenting informally regard two different aspects problem first recognizes fact different collaboration contexts require different kinds merging second focuses fact different kinds objects wish merge different properties influence merge procedure examples exhibit differences respects merging different collaboration contexts text document example reason two authors created versions document could work simultaneously would done editing system supported concurrent access file authors different tasks expect changes affect anything example compiler writers case somewhat different programmers different tasks different tasks may involved changes parts grammar versions arose case accidentally intentionally might therefore expect kind merge performed two collaborations differ case two authors working journal article may expect collaborators want simply include changes merged document case compiler writers may expect include negotiate othersin fact may wish discuss changes merge procedure operate somewhat differently case refer first consolidation merge second reconciliation merge consolidation merge assumes two revisions merged revision common version also assumption may overlap conflict changes part changes complementary consolidation merge assumes meaningful version created incorporates nonoverlapping changes merged version includes objects inserted either input version include objects deleted either input version includes changed objects either version includes unchanged objects common versions collaborators choose overlapping changes interactively reconciliation merge assume complementary revisions two versions merged assumes reason merging resolve conflicts variation yacc grammar example given suppose twoprogrammers decided prepare alternative versions part grammar defines expressions two versions completed programmers compare versions side side order choose version think better find however would like take parts final grammar case perform reconciliation merge two versions merge procedure consist mainly making selection one two choices definition kind merge quite different definition consolidation merge reconciliation merge include nonoverlapping revisions consolidation merge extreme form reconciliation merge include revisions collaborators agree upon practical purposes however would desirable allow certain kinds revisions unchallengedany additions would accepted agreement collaborators would required replacements deletions reconciliation merging consolidation merging represent call merge policy merge policy set rules determine revisions included merged object policy may provide criteria used determine revisions included merged object later described merge framework merge policy concrete representa tion allowing policies described formally merge policies may use mechanisms user interaction determine pair conflicting revisions appear merged object suppose salesperson keeps file contact information office desktop machine laptop computer information kept current periodically merging two files done automatically whenever computers linked possible merges salesperson modified piece information systems thereby causing conflict two files merged appropriate merge policy situation may examine time stamp revision keep recent one see policy using object attribute time last modification determine merge result also example policy using automatic conflict resolution merge policy may also examine value objects determine revisions accept let us suppose two students collaborating short paper homework assignment work paper night due although worked separate sections made changes abstract section class next day students need quickly merge revisions without time view others changes feel important submit anything spelling errors set merge policy case overlapping changes sentence sentence passes spell checker chosen merged version pass spell checker sentence first author chosen example semanticsdetermined merge different kind semanticsdetermined merge example let us suppose executive gave projects proposed budget two managers received back two counter proposals versions original budget get feel range costs expected executive produces two merged versions budget one items lowest value versions chosen another highest value chosen executive thus gets high low estimates project merging different kinds objects two objects examples text document yacc grammar differ substantially structure semantics text document may defined sequence paragraphs paragraph sequence sen tences sentence sequence words terminating punctuation word sequence characters yacc grammar hand composed production rules nonterminal lefthand side sequence terminals nonterminals perhaps semantic actions righthand side addition structurally different two objects semantically quite distinct yacc input object represents grammar explicit relationships productions whereas text document simple dependencies figures references figures dependencies complex machinechecked eg new term adequately defined used may thus expect merge policies two objects differ aspects merge policy related object structure one aspect policy defines merge conflict mean situation revisions one version revisions version either overlap accepted merged object would potentially leave object inconsistent state merge policy text document may define conflict changes sentence merge policy yacc grammar may define conflict change production another aspect merge policy objectdependent conflict resolution mechanism tool resolves changes procedure program one language appropriate programs another language collaborators may desire different policies different particular structures different types structures example conflict definition example compiler grammar programmers may designate certain nonterminal declarations changeable one person concurrent changes declarations conflict example policy enforce late access control accommodate intraobject policy differences must able define finegrained merge policies highlevel requirements merge tools based issues object merging discussed identified set requirements general merge tools merge tool ffl offer automatic differencing ie require users manually find differences two sets changes ffl offer interactive merging ie allow users interactively select revisions included merged result ffl operate general objects merge tool restricted objects represented text files ffl provide conflict detection based structure object means conflicts defined terms object structures text sentences program statements instead representation structures lines text file ffl allow semanticsdetermined merges ie provide mechanisms object semantics determine merge result may functions evaluate revisions accept functions simply present semantic information users merge ffl let users specify merge policy users ability tailor merge policy according specific needs includes defining sets changes constitute conflict ffl permit finegrained definition merge policies ffl offer automatic conflict resolution merge tool allow users determine beforehand certain conflicts resolved whether based kinds changes made circumstances changes previous research merging object merging new idea even collaboration systems previous efforts ranged relatively simple systems text documents sophisticated semanticsbased systems computer programs section review efforts discuss light merge issues requirements discussed software development tools unix diff3 unix diff3 program compares three files output ed script applied one three files produce file combines changes two thus producing effect merged file diff3 based diff program strictly textoriented merging program rcs rcsmerge rcsmerge program like diff3 textoriented merge program based mechanisms rcs system 11 observations made diff3 apply rcsmerge advantages rcsmerge diff3 warn overlapping changes integrated safety code management mechanisms versioning system suns nse fileresolve fileresolve tool suns network software environment 1 differencingbased text merge tool allows users sidebyside comparisons two sets changes file automatically merge changes overlap overlapping changes flagged presented user performing merge may select one change modify file hand changes may also undone diff horwitz prins reps 6 present algorithm refer semantic diff merge two different versions program semantically correct fashion two versions interfere semantic diff produce merged program incorporates semantics versions brief merging algorithm first constructs program dependence graphs base version two revised versions merges three dependence graphs one dependence graph checks merged dependence graph interferences finally produces merged program merged dependence graph collaboration tools flexible diff flexible diff 9 tool prep writing environment finds reports differences text documents computes scripts automatically combining differences merged document flexible diff different unix diff tool allows users choose kind differences found reported users first indicate flexible diff granularity differences want found choices word phrase sentence paragraph also offered number parameters control differences reported one granularity pinpointing choices word phrase sentence paragraph user chooses pinpointing granularity sentence word differences shown old sentence deleted new sentence inserted reporting parameters allow users choose fine granularity finding reporting cases many word changes close together flexible diff report phrase sentence changethus improving difference reports readability research flexible diff inspired effort area identifying resolution concurrent changes firstclass research issue collaboration systems motivating need performing task flexibly merge parameters work complement differencing parameters flexible diff work identified gina gina 2 takes approach wholly different previous merge procedures instead basing merge procedure differences object versions gina bases merge command histories keeps command history central entire gina sys tem gina replicated architecture applications maintain consistency exchanging commands application passes command receives user replicated applications form command object application maintains history command objects history basis ginas undoredo capabilities command histories used gina merge procedure follows two authors document begin version create different versions executing different editing commands command history associated object forms twobranched tree authors changes form one branch tree merge two authors changes performed taking one command object branches applying end branchin effect redoing one authors changes authors version object principle diff3 rcsmerge work except two programs based computed version differences rather change histories one author changed part object deleted also changed authors notified choose change keep may undo affected operation first branch redo operation second branch simply redo operation second branch groupware concurrency control ellis gibbs concurrency control model ellis gibbs 4 uses merging ensure site distributed collaborative environment sees order operations site scheme merges operations received sites sites operations according priority based site id target object operation operations aborted one operation may nullify effects another consistency achieved model site sees order operations discussion current systems table 1 shows current merge tools compare requirements discussed discussed gina shown supporting general objects diff3 rcsmerge fileresolve merge lineoriented text objects class includes wide range common entities text documents computer programs include structurallycomplex objects spreadsheets draw ings semantic diff based semantics particular programming language restricted operating programs language gina offers true generality respect object merged based command histories common gina applications semantic diff merge tool offers objectbased conflict detection flexible diff offers objectbased differenc ing semantic diffs conflict detection based semantics object ie whether given statement modifies certain variable flexible diffs difference detection based structure object ie word sentence paragraph rcsmerge fileresolve detect automatic differencing interactive merging general objects object based conflict detection semantics determined merging userset policies finegrained policies automatic conflict resolution rcsmerge ffl fileresolve ffl ffl semantic diff ffl ffl ffl ffl flexible diff ffl ffl ffl table 1 merge tool requirements versions contain changes line regard objectbased conflict detection unless object structure simply sequence lines example object text document versions document contained changes sentence tools would notify users changes line file changes different lines gina conflict detection objectbased since command histories specific type object flexible object merging framework basis overview basis flexible object merging framework suite collaboration system 3 provides general structured objects finegrained object attributes functions checking semantic correctness user changes flexible coupling object views although suite provide version model suites flexible coupling gives us support versions require basic implementation merging system basis general structured objects allows us take applicationindependent approach merging utilize objects structure merge suite objects constructed basic types integers reals strings aggregate types records sequences finally suites finegrained object attributes may inherited via type structure used flexible definition merge policies merge framework consists two elements merge matrix construct algorithm uses merge matrix accomplish merge two object versions merge algorithm recursively traverses structure object topdown substructure takes users edits substructure consults merge matrix determine edits accepted merged result first describe merge matrix detail present procedure implements merge algorithm merge matrix merge matrix mechanism spirit access control matrix operating systems theory 5 lock compatibility table developed research object transactions 10 merge matrix row column editing operation performed object rows represent edits one user columns represent edits user entries matrix specify action merge procedure take pair edits indicated row column address entry general form entry function returns edit action take function inputs may include anything relevant choosing action take identified set predefined merge functions associated parameters including functions select changes basis time changes made made function may invoke functions validation functions check consistencies revised objects typically however entries merge matrix row column edits table 2 shows sample merge matrix sequence object row column operations matrixmodify element delete element insert element operations element elements sequence structured objects mod elt operation stands operations element simple object modify operation means replace use several shorthand notations indicates user performed operation element row column stand edits row column user means edits accepted users stands function presents users alternative changes requests select one another edit returns choice merge procedure entries blank two operations never paired comparison value merge edits mod elt mod elt entry merge matrix indicates edits element users modified merged according elements merge matrix done invoking merge procedure shown next section element particular policy table 2 request user selection one user modified element deleted insertions either user always accepted merge matrices also defined simple types sequence ins elt del elt mod elt ins elt row del elt row users row mod elt users merge edits row table 2 merge matrix sequence object string modify modify users row table 3 merge matrix atomic object integers character strings table 3 merge matrices called atomic merge matrices object treated atomic unit atomic merge matrices also used structured objects would make sense merge changes object example article writers may feel never makes sense merge changes sentence users may want set atomicity property flexibly early stages collaboration writers allow changes paragraph merged paper becomes stable decide merging changes paragraph safe wish make paragraphs atomic units purpose objects element operations sequences two merge matrices defined atomic merge matrix element operations merge matrix used algorithm determined boolean attribute introduced purpose called atomic merge unit attribute merge matrix defined structural level object implemented set object attributes suite object attributes may inherited parent structure eg record field may inherit attributes record type type first structure first atomic merge matrices may inherited via four choices since common types elementoperations merge matrices typespecific however rows columns operations structures defined thus matrices inherited type merge matrix bears resemblance schwarzs spectors lock compatibility table 10 number differences however first outcome consulting lock compatibility table solely function pair operations whereas outcome consulting merge matrix may addition pair operations function particular users merge time two operations performed factor users deem relevant second merge matrix defined level structured object lock compatibility table defined whole object third following second lock compatibility table defined single operations whereas merge matrix includes modify operation may stand multiple operations operations covered single modify operation deferred lowerlevel merge matrices merge algorithm define merge algorithm simple recursive procedure pseudo code shown change report list changes object terms operations objects merge matrix corresponding edits edits two users element field edit one version corresponding edit another version entry version without edit edit edit triple object identifier followed two corresponding edits object algorithm first looks see object treated atomically invokes appropriate function atomic merge matrix performs edits function returns otherwise procedure gets two change reports two revised versions object computes list corresponding edit triples presents list element element merge matrix procedure mergeobjectx object xatomic merge unit xatomic merge matrixrow edit column edit else get change reports version object x compute list corresponding edit triples triple element x row edit column edit xelement merge matrixrow mergeobjectelement x else xelement merge matrixrow edit column edit end mergeobject examplemerging application yacc editor demonstrate merge scheme wrote simple structured editing application editor yacc grammars application motivated first authors experience collaboratively writing yacc grammar need merge versions arising repeatedly throughout collaboration production sequence string productions sequence production rule record nonterm prods productions rules sequence rule merge matrix presented suite control panel entitled merge matrix window shown figure 1 window opened window entitled merge window users select value type whose merge matrix interested use atomic merge unit toggle button choose atomic elmentoperations merge matrix figure 1 merge matrix window applicable open merge matrix window merge matrix button edit actions merge matrix entries selected popup window also shown path button top merge window sets view whose merge matrix attributes loaded values shown windows matrix entries user clicks set button load loads existing values merge matrix windows matrix entries policies button presents popup menu typical merge policies used set entries merge matrix single interaction merge button invokes merge procedure example objectbased conflict detection first example shows case conflict exists would reported conflict nonstructurebased tool nses fileresolve users munson dewan modifying expression section compilers grammar part shown figure 2 munson adding relational operators changes name expr nonterminal simple expr dewan altering grammar multiplication division higher priority addition subtraction changes op second production expr add op decide merge point versions shown figure 3 figure 2 expr op revision figure 3 dewans munsons revisions record modify field modify field merge edits row table 4 merge matrix rule merge policy application consists merge matrices structural level grammar rules rule productions production table 2 used production productions rules table 4 used rule mentioned merge edits modify fieldmodify field entry indicates merge matrix field object consulted matrices dewans edits rows munsons columns overview merge procedure example follows change reports rules sequence indicate users changed elements expr op merge matrix rules indicates two sets changes merged mergeobject called expr element change reports generated indicate munson changed nonterm field changes accepted changed prods field merge matrix calls changes merged mergeobject called prods sequence change reports show element modified users sets changes accepted changes op nonterminal merged likewise result shown figure 4 point collaboration dewan munson may feel concurrent edits production likely cause trouble merged case may set atomic merge unit attribute production true use default atomic merge matrix shown table 3 force select interactively one production changed production figure 4 merged version grammar example finegrained merge policy dewan munson divided responsibility grammar dewan responsibility productions stemming statement nonterminal munson responsibility productions expr nonter minal rather enforcing access rights decide set merge policy choose changes responsible user overlapping changes nonterminal level set expr simple expr add op nonterminals underneath expr atomic units set atomic merge matrices table 5 dewan row user likewise statement nonterminals set mod ifymodify entry column munsons changes taken unfortunately nonterminal called subrtn appears productions statement expr represents procedure call function invocation since munson dewan working sections grammar use subrtn decide changes agreed users changes go merged version thus choose table 6 merge matrix rule defines subrtn modify row row table 5 atomic merge matrix rule modify users users users table merge matrix subrtn rule merge policies section present seven merge policies discussed earlier consolidation merging reconciliation merging merging collaborators strictly enforced roles merging based validation changes merging based computing changes function users changes merge matrix shown table 7 implements merge policy referred earlier consolidation merge modifications element chosen deletion element conservative choice users deleted element deletion accepted insertions always accepted policy reconciliation merging table 8 reflects scenario users expecting many conflicts versions resolve conflicts interactively particular deletions handled interactively policy table 9 collaborators assigned strict roles scenario may one author primary contributor document reader allowed insert comments may change delete anything tools used offer kind access control rows matrix represent edits primary contributor columns represent edits reader disallowed edits reader simply ignored policy table 10 represents case object temporarily exists separate copies case may frequently arise mobile computing user may short period revise home copy object address list example well office copy since assume user aware sets changes may assume sequence ins elt del elt mod elt ins elt row del elt row column row mod elt row merge edits row table 7 policy consolidation merge sequence ins elt del elt mod elt ins elt users row del elt users users users mod elt users merge edits row users column table 8 policy reconciliation merge sequence ins elt del elt mod elt ins elt row del elt row row row mod elt row merge edits row table 9 policy merging strict user roles cases changes overlap recent change one desired policy table 11 formalizes ad hoc policy two grammar programmers used assigned responsibilities different sections grammar similar one strict user roles except case identity user particular object involved considered users divided responsibility document attaching id different sections manner users changes conflict changes user responsibility object involved given priority conflicting changes nondesignated objects selected users interactively could avoid merge altogether situation finegrained access control would prevent users making helpful nonconflicting changes others sections table 12 shows merge policy parameterized applicationspecific validation function row column arguments validated function stand row object version column object version spell checked homework example mentioned earlier would use policy using spellchecker validated function table 13 shows merge policy parameterized function computes edit action merged object based edits object versions f users may select systemdefined functions include min max aver object modify modify row edit later column edit row edit else column edit row table 10 merging according latest revision time object modify modify objectdesignated user row user row edit elsif objectdesignated user column user column edit else merge edits row table designated responsible user merge object modify modify row edit column edit users choose arbitrary choice else edit row table 12 validation merge age sum arithmetic functions string functions concatenation applicationspecific func tions budget example low high estimates would use policy using min max f evaluation section evaluate extent merging scheme fulfills requirements listed consider degree simulate merging tools discussed earlier following discuss contributions believe merge scheme makes finally identify areas future research fulfillment requirements automatic differencing interactive merging ourscheme fully automatic fully manual semiautomatic according merge policies collaborators select setting entry merge matrix users function makes selection pair edits object interactive thus interactive automatic operation may chosen particular substructures particular types giving users great flexibility defining merge policies general objects merge framework based suite system includes type system basic types several type constructors therefore supports general object modify modify replace frow column row table 13 computed merge structured arbitrarilycomplex objects additionally since framework based object structure merges objects independently displayed user wemay merge object modified one user scrollbar edited another user text objectbased conflict detection merge algorithm detects overlapping changes objects recognizes conflicts extent overlapping changes represent conflicting operations merge scheme also accommodates detection semantic inconsistencies allowing verification functions called accepting one versions change verify change bring version inconsistent state 2 object substructure versions merged verify merged result consistent semanticsdetermined merging validation merge policy computedmerge policy designed semanticsbased merging policies include notions object semantics must supplied applicationspecific semantics functions userset merge policies framework provides two levels flexibility defining merge policies lower level merge matrix defined per structure general editingaction functions entries higher level predefined parameterized merge policies parameterized value userset object attribute designated responsibility policy others parameterized applicationspecific usersupplied functions computed merge policy finegrained policies merge policies implemented suite object attributes defined structural level object objects inherit default merge matrix according type may modified users particular structures automatic conflict resolution merge scheme allows conflicts resolved basis information users wish encode object attributes base functions upon framework provides predefined policies based revision time designated owner well policies parameterized applicationspecific functions coverage merge tools unix diff3 rcs rcsmerge nse fileresolve scheme presently implemented utilize shortest editsequence algorithm compute differences base version object revised versions diff3 rcsmerge presume fileresolve tools may emulate policies 1 using merge matrices one feature diff3s policywe unable emulate versions particular line deleted diff3 deletes line line following merged version text change line range append lines change line range row append lines row table 14 policy emulate diff3 text change line range append lines change line range users users row append lines users users row table 15 policy emulate rcsmerge fileresolve tables 14 15 semantic diff semantic diff may simulated using computed merge policy supplied function used semantic diff compute merged program kind use course involve much generic support merging framework offers gina may simulate gina merge procedure using merge policy table 16 difference remains however edits merge procedure operates accumulated edits whereas gina uses actual edit histories contributions work towards framework flexible object merging yielded following contributions ffl set highlevel requirements merge tools ffl evaluation current merge tools respect ffl new flexible object merging framework consisting merge matrix structurebased algorithm ffl several useful merge policies ffl evaluation merge scheme respect generality usefulness future work task immediate importance gain experience merging collaborative work understanding mergings role collaboration grows hope refine merge tool requirements identified develop object edit edit users row table 16 policy emulate gina important merge policies based actual hypothetical collaboration scenarios also consider various userinterface alternatives user interface offer various merge policies also allow convenient customization policies yet experience know kind convenience needed also fundamental issues explore one nway merging ie merging n versions object merge matrix may straightforwardly extended n dimensions appropriate user interface number merge matrix entries n users object operations om n even two users tedious fill applications course provide defaults users still need customize matrix particular situations another interesting issue handle wholeobject op erations currently treat sequence either atomic object simple collection elements without regard property ordered operations modify sequence respect property move element operations treated merge framework related issue larger integrate userdefined abstract types framework acknowledgments comments reviewers helpful improving presentation work discussions held members unc colab group research supported part national science foundation grant iri 9496184and part grant software engineering research center purdue university national science foundation industryuniversity cooperative research center nsf grant ecd8913133 r object management case environment framework shared applications replicated architecture concurrency control groupware systems integrating noninterfering versions programs undoing actions collaborative work collaboration awareness support collaboration transparency requirements next generation shared window systems flexible diffing collaborative writing system synchronizing shared abstract types tr synchronizing shared abstract types rcsmyampersandmdasha system version control integrating noninterfering versions programs concurrency control groupware systems object management case environment collaboration awareness support collaboration transparency requirements next generation shared window systems flexible diffing collaborative writing system undoing actions collaborative work highlevel flexible framework implementing multiuser user interfaces framework shared applications replicated architecture ctr jonathan p munson prasun dewan sync java framework mobile collaborative applications computer v30 n6 p5966 june 1997 claudialavinia ignat moira c norrie drawtogether graphical editor collaborative drawing proceedings 2006 20th anniversary conference computer supported cooperative work november 0408 2006 banff alberta canada matthias ressel doris nitscheruhland rul gunzenhuser integrating transformationoriented approach concurrency control undo group editors proceedings 1996 acm conference computer supported cooperative work p288297 november 1620 1996 boston massachusetts united states mark handley jon crowcroft network text editor nte scalable shared text editor mbone acm sigcomm computer communication review v27 n4 p197208 oct 1997 gareth smith jon obrien recoupling tailored user interfaces proceedings 1998 acm conference computer supported cooperative work p237246 november 1418 1998 seattle washington united states byong g lee kai h chang n hari narayanan integrated approach version control management computer supported collaborative writing proceedings 36th annual southeast regional conference p3443 april 1998 grald oster pascal molli hala skafmolli abdessamad imine safe generic model synchronizing divergent data proceedings 1st frenchspeaking conference mobility ubiquity computing june 0103 2004 nice france paul dourish parting ways divergence data management collaborative work proceedings fourth conference european conference computersupported cooperative work p215230 september 1014 1995 stockholm sweden claudialavinia ignat moira c norrie customisable collaborative editing supporting work processes organisations computers industry v57 n8 p758767 december 2006 pascal molli grald oster hala skafmolli abdessamad imine using transformational approach build safe generic data synchronizer proceedings international acm siggroup conference supporting group work november 0912 2003 sanibel island florida usa jonathan munson prasun dewan concurrency control framework collaborative systems proceedings 1996 acm conference computer supported cooperative work p278287 november 1620 1996 boston massachusetts united states b terry theimer karin petersen j demers j spreitzer c h hauser managing update conflicts bayou weakly connected replicated storage system acm sigops operating systems review v29 n5 p172182 dec 3 1995 anja haake david hicks verse towards hypertext versioning styles proceedings seventh acm conference hypertext p224234 march 1620 1996 bethesda maryland united states j nathan foster michael b greenwald christian kirkegaard benjamin c pierce alan schmitt exploiting schemas data synchronization journal computer system sciences v73 n4 p669689 june 2007 david l hicks john j leggett peter j nrnberg john l schnase hypermedia version control framework acm transactions information systems tois v16 n2 p127160 april 1998 yang du li supporting adaptable consistency control structured collaborative workspaces computer supported cooperative work v14 n5 p469503 october 2005 p bellini p nesi b spinu cooperative visual manipulation music notation acm transactions computerhuman interaction tochi v9 n3 p194237 september 2002 paul dourish using metalevel techniques flexible toolkit cscw applications acm transactions computerhuman interaction tochi v5 n2 p109155 june 1998 prasun dewan integrated approach designing evaluating collaborativeapplications infrastructures computer supported cooperative work v10 n1 p75111 jan 2001