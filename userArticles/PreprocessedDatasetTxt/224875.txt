hybrid decision diagrams abstract functions map boolean vectors integers important design verification arithmetic circuits mtbdds bmds proposed representing class functions discuss relationship methods describe generalization called hybrid decision diagrams often much concise show implement arithmetic operations efficiently hybrid decision diagrams practice one main limitations bmds since performing arithmetic operations functions expressed notation expensive order extend symbolic model checking algorithms handle arithmetic properties essential able compute bdd set variable assignments satisfy arithmetic relation paper give efficient algorithm purpose moreover prove class linear expressions time complexity algorithm linear number variables b introduction functions map boolean vectors integers important design verification arithmetic circuits paper investigate represent manipulate functions efficiently previous paper 6 proposed two ways mtbdds bdd arrays representing class functions using binary decision diagrams recently bryant chen 4 proposed binary moment diagrams bmds representing class functions paper show bmd function mtbdd results applying inverse reedmuller transformation 9 func tion furthermore computed using techniques developed transformation matrix case kronecker product 2 number identical 2 theta 2 matrices show kronecker products 2 theta 2 matrices behave similar way fact transformations obtained kronecker products matrices many cases concise bmd generalized idea transformation matrix kronecker product different matrices way obtain representation called hybrid decision diagram hdd concise either mtbdd bmd similar strategy used becker 7 however technique works boolean domain suitable functions mapping boolean vectors integers using technique transformation matrices original function resulting function must boolean values technique hand works integers allowing integer values handle wider range functions moreover obtain larger reduction factors since choices transformation trices technique applied boolean functions often achieve comparable sometimes better results dynamic variable reordering thus cases serve alternative dynamic variable reordering conjecture combination techniques together may result reductions neither technique achieve alone one main limitations bryant chens work performing arithmetic operations functions represented bmds expensive show operations implemented bmds hybrid decision diagrams well although worst case complexity operations exponential algorithms work quite well practice addition show logical operations performed hybrid decision diagrams used represent boolean functions properties want verify arithmetic circuits expressed arithmetic relations order extend symbolic model checking algorithms 5 handle properties essential able compute bdd set variable assignments satisfy relation bryant chen provide algorithm paper give efficient algorithm purpose moreover prove class linear expressions time complexity algorithm linear number variables techniques handling arithmetic operations relations used intensively verification srt division algorithm similar one used pentium paper organized follows section 2 gives basic properties mtbdds used remainder paper particular section shows matrix operations implemented section 3 describes relationship bmds inverse reedmuller transformation section also introduces kronecker product shows used generalize bmds next section introduces hybrid decision diagrams provides experimental evidence show usefulness representation sections 5 6 main sections paper section 5 show arithmetic operations implemented section 6 give efficient algorithm computing set assignments satisfy arithmetic relation expressed terms hybrid decision diagrams paper concludes section 7 brief summary discussion directions future research 2 multiterminal binary decision diagrams ordered binary decision diagrams bdds canonical representation boolean formulas proposed bryant 3 often substantially compact traditional normal forms conjunctive normal form disjunctive normal form also manipulated efficiently hence bdds become widely used variety cad applications including symbolic simulation verification combinational logic recently verification sequential circuits bdd similar binary decision tree except structure directed acyclic graph rather tree strict total order placed occurrence variables one traverses graph root leaf algorithms linear complexity exist computing bdd representations f f g bdds formulas f g z function maps boolean vectors length integers suppose possible values f function f partitions space b boolean vectors n sets fs g g let f characteristic function say f normal form f x represented sum represented bdd integers terminal nodes call dags multiterminal bdds mtbdds 6 1 arithmetic operation fi mtbdds performed following way give efficient algorithm computing fx fi gx ffl f leaf leaf g apply fi f first argument z z z z z ae ae ae ae ae z z z z z ae ae ae ae ae f 100 figure 1 bdds f g z z z z z ae ae ae ae ae z z z z z ae ae ae ae ae z z z z z ae ae ae ae ae figure 2 bdd f fi g ffl g leaf leaf f apply fi g second argument otherwise f g form figure 1 bdd f fi g depending relative order x x j given figure 2 resulting diagram may normal form order convert normal form reduction phase needed algorithm phase essentially identical reduction phase bryants algorithm constructing bdds 3 let 2 k theta 2 l matrix z easy see represented z x bit vector bit vector j therefore matrices integer values represented integer valued functions using representation shown also perform various matrix operations using mtbdd representation particular matrix multiplication computed following way suppose two matrices b dimensions b product b c dimension 2 k theta 2 treat b integervalued functions compute product matrix c means sum possible assignments practice mx computed way variable eliminated performing addition although operation works well many cases worst case complexity exponential number variables integer functions also represented arrays bdds bdds boolean values corresponds one bit binary representation function value general quite expensive perform operations using representation 3 kronecker transformations recently bryant chen4 developed new representation functions map boolean vectors integer values representation called binary moment diagram bmd function instead shannon expansion use expansion equal f merging common subexpressions dag representation function obtained prove paper gives compact representation certain functions exponential size represented mtbdds directly close relationship representation inverse reedmuller transformation 9 matrix inverse reedmuller transformation defined recursively gammas linear mtbdd representation let binary representation represented column vector value ith entry fi distinguish function corresponding column vector inverse reedmuller transformation obtained multiplying transformation matrix column vector b using technique described previous section theorem 1 mtbdd b f isomorphic bmd f proof theorem easy prove induction number variables base case number variables 0 function constant b mtbdd b f bmd f terminal nodes therefore isomorphic r gammapsi x n0 gammas ngamma11 00 gammas gammas n r gammapsi figure 3 mtbdd n induction step let roots bmd f mtbdd b f x n left child root bmd f bmd f j xn0 right child bmd f j f represented column vector upper half f j xn0 bottom half f j xn1 inverse reedmuller matrix gammas result transformation therefore gammas theta vector represented mtbdd left child mtbdd inverse reedmuller transform f j xn0 right child mtbdd inverse reedmuller transform f induction hypothesis children isomorphic children root bmd f therefore bmd f isomorphic mtbdd b f kronecker product two matrices defined follows 11 1m n1 anmc c 11 b 1mb inverse reedmuller matrix represented kronecker product n identical matrices gammas omega omega z inverse reedmuller transformation unique respect transformations defined kronecker products 2 theta 2 matrices may also provide concise representations functions mapping boolean vectors integers particular reedmuller matrix r n walsh matrix w n represented kronecker products shown r r omega z w omega omega z although kronecker transformation performed matrix multiplication efficient way computing well known property kronecker product igamma1omega 2 theta 2 matrix k identity matrix size k theta k transformation form 2 igamma1omega iomega 2 kgammai called basic transformation let 00 01 10 11 let g function represented mtbdd basic transformation igamma1omega computed result observation kronecker transformation performed series basic transformations moreover proved order basic transformations affect final result fact kronecker product nonsingular 2 theta 2 matrices used transformation matrix produce canonical representation function entries 2 theta 2 matrix restricted among f0 1 gamma1g six interesting matrices matrices either singular would produce bdds isomorphic one six matrices applied transformations functions discussed paper4 transformation partitioned two groups three mtbdds results applying transformations group complexity base example complexity xy kronecker transform base matrix obtained complexity general formula c c j constants prove resulting mtbdd size formula transformation exceed 2nm2n2m1 induction number total variables base case variables trivial simplicity lets suppose x n top variable right child transformed mtbdd induction hypothesis size left child exceed 2m 1 similar manner show left child transformed mtbdd induction hypothesis size exceed 2n therefore total size transformed bdd upper bound 2nm possibility using bmds represent boolean functions discussed 4 gen eral bmd appear better ordinary bdd representing boolean functions order see true consider boolean reedmuller transformation sometimes called functional decision diagram fdd8 transformation obtained applying modulo 2 operations terminal nodes bmd consequently size fdd always smaller size bmd since inverse boolean reedmuller transformation boolean reedmuller trans formation fdd fdd original bdd therefore every function f jfdd f j jbdd f j exists another function f 0 boolean reedmuller transform f jbdd f particular bmd fdd representations middle bit multiplier still exponential 4 hybrid decision diagrams previous sections discussed transformations represented kronecker product number identical 2 theta 2 matrices transformation matrix kronecker product different 2 theta 2 matrices still canonical representation function call transformations obtained matrices hybrid transformations similar strategy tried becker 7 however technique works boolean domain using technique transformation matrices original function resulting function must boolean values technique hand works integers allowing integer values handle wider range functions moreover obtain larger reduction factors since choices transformation matrices apply idea reduce size bdd representation functions since known polynomial algorithm find hybrid kronecker transformation minimizes bdd size use greedy algorithm reduce size restrict entries matrix set f0 1 gamma1g six matrices try variable select matrix gives smallest bdd size bdds obtained transformations called hybrid decision diagrams hdds tried method iscas85 benchmark circuits cases able reduce size bdd representation factor 1300 however reductions magnitute usually occur original function bad variable ordering dynamic variable ordering used method gives much smaller reduction factor example circuit without reordering reordering circuit jinputj output jbddj jbmdj jhddj jbddj j bmd j jhddj table 1 experimental results hybrid transformations iscas85 circuits tried several techniques increase number possible matrices first technique involves increasing number entries matrices accomplished allowing entries take larger values using complex numbers 1g unfortunately neither extension improved results significantly second technique involves using transformation matrices kronecker products larger matrices example tried hybrid kronecker transformations based 4 theta 4 matrices instead 2 theta 2 matrices although able reduce bdd size even using technique time takes find transformations much bigger since number possibilities considerably larger note technique achieve comparable sometimes better results dynamic variable reordering thus cases serve alternative dynamic variable reordering conjecture combination techniques together may result reductions neither technique achieve alone 5 arithmetic operations hybrid decision diagrams order make techniques described previous sections useful desirable able perform various arithmetric operations hybrid bdds paper consider cases addition multiplication two integers suppose f transformed f 0 matrix 1 g transformed g 0 matrix 2 using techniques discussed previous sections scalar multiplication simple perform finding sum two function also simple transformation applied sum must determined first suppose use transformation matrix result next consider perform multiplication choose 2 transformation matrix f delta g suppose top level variable x assume top level transform f 11 12 21 22 inverse 0 11 0a 0a 0 assume also top level transform g inverse omega b b z z z z z ae ae ae ae ae z z z z z ae ae ae ae ae00 l f 0 l r figure 4 bdds f 0 g 0 z z z z z ae ae ae ae ae0 l f delta g 0 r figure 5 bdd f delta g 0 b b theta consequently b 11 0 b 11 0 22 b 11 0b 0 b 12 0b 0f r delta g l 22 b 21 0 b 21 0 22 b 21 0b 0 b 22 0b 0f r delta g l b 21 0b 0 b 22 0b 0f r since f delta g 0 l f delta g 0 r computed term f l delta compute transformation product recursive manner store intermidiate results total number recursive calls compute f delta g 0 jf 0 jjg 0 j additions needed computation worst case complexity still exponential however practice algorithm works quite well example table 2 show time takes compute hybrid decision diagram hybrid decision diagrams timesec 16 20 22 25 30 35 35 45 55 66 table 2 experimental results computing able add multiply functions perform standard logical operations example 6 equations inequalities frequently useful able compute set assignments make f 1 f 2 one 6 example following inequality extremely important correctness radix4 srt floating point division algorithm divisor remainder inequality regarded arrays boolean variables order verify correctness algorithm necessary determine set assignments variables make inequality true finding set assignments satisfy inequality reduced problem finding set assignments make function f positive equations handled similar manner straightforward way solving problem convert f mtbdd pick terminal nodes correct sign however work well general functions mtbdds exponential size hybrid bdds polynomial size example let f functions difference linear size bmds bdd set assignments satisfying f linear size mtbdd size f exponential developed algorithm substantially reduce cost computing relations certain functions process need know sign function values thus find values subhdd sign conclude assignments subhdd value relation consequently dont need continue expand subhdd obtain good algorithm problem necessary determine efficiently subhdd uniform sign achieved computing upper lower bounds subhdd algorithm given determines information intermediate results stored algorithm takes time linear number bdd nodes boundvaluesf upper lower begin iff terminal node let a11 a12 a21 a22 inverse matrix node f easy prove algorithm gives lower upper bounds function represented hybrid bdd let l 11 stand lower11 u 11 stand upper 11 etc let f l stand leftf f r stand rightf suppose recursive calls children produce correct values l 1 f l u 1 l 2 f r u 2 l 11 11 f l u 11 l 12 12 f r u 12 l 21 21 f l u 21 l 22 22 f r u 22 11 12 21 22 theta f l f r l therefore lower upper give correct bounds f improved algorithm computing bdd set assignments make function f positive given similar algorithm used find set assignments make function zero bdd greaterthan0f begin iff terminal node iffvalue else boundvaluesf upper lower ifupper iflower let a11 a12 a21 a22 inverse matrix node f returnbddifthenelselevelf left right algorithm works extremely well verification arithmetic circuits following theorem guarantees efficiency algorithm set linear expressions hybrid decision diagrams bmds formulas occur duing verification srt division algorithm class expressions form 1n x x x xx mn2 c c figure c integer constants use variable ordering x 1n constant bmd f shown figure 6 lemma 1 f represented bmd number recursive calls greater 0 procedure computing bdd f level cannot exceed 4 proof suppose consider recursive calls bmd nodes x ij top variable inverse transformation matrix bmd nodes 2 theta 2 reedmuller matrix thus recursive calls procedure greater 0 apply either left child sum children bmd nodes recursively called variable must sum subbmd figure 6 top variable x ij right children ancestors subbmd right children ancestor nodes subbmd constant nodes value c k 2 l 1 k l j sum right children rewritten form d2 j integer constant therefore bmd nodes top variable x ij form shown figure 7 0 otherwise c 00 c k otherwise apply procedure bound values bmd upper bound computed equal d2 proved induction structure bmd base case trivial induction step consider node variable two cases first case case induction hypothesis upper1 equal d2 since right branch constant x x xx c c c figure 7 bmd nodes explored level x ij upper2 c 2 j therefore similar proof obtained case way able prove lower bound computed procedure hence c 000 c 00 c 00 c 00 c 00 c 00 gamma2 k upper negative 0 algorithm return constant false likewise gamma2 k lower positive algorithm return constant true therefore recursive calls children occur gamma2 gamma2 k since integer 2 theta gamma2 recursive calls theorem 2 complexity greater 0 f 2 proof n levels level takes 4 recursive calls recursive call takes time compute upper lower bound values therefore total time case linear inequalities new bmds generated form constant g existing bmd remember constant without actually adding bmds able avoid generating new bmd nodes introducing technique complexity compute greater 0f reduced j example beginning section relationship time takes compute inequality number bits shown figure 8 7 summary directions future research paper discussed relationship mtbdds bmds also described generalization called hybrid decision diagrams often much concise efficient implementation arithemetic operations hybrid decision diagrams also given computing bdd set variable assignments satisfy arithmetic relation important reasoning arithmetic circuits give efficient algorithm purpose moreover prove class linear expressions time complexity algorithm linear number variables number directions future research currently use greedy algorithm choose appropriate transformation matrix level hybrid decision 10301722 25 253034timesec bits figure 8 time compute gamma2 delta divisor 3 delta remainder 2 delta divisor diagram although seems unlikely efficient algorithm find optimal transformation may possible develop better heuristic would permit even concise representation hybrid decision diagrams transformation matrices nodes one level must allow transformation matrices differ freedom selecting transformation therefore able reduce representation finally algorithm solving arithmetic relations works extremely well linear equations inequalities although current algorithm handle nonlinear equations inequalities well may possible extend algorithm find new algorithm handle complicated nonlinear equations inequalities r algebraic decision diagrams applications introcution matrix analysis verification arithmetic functions binary moment diagrams symbolic model checking 10 20 states beyond spectral transforms large boolean functions applications technology mapping efficient representation manipulation switching functions based ordered kroenecker functional decision diagrams fast ofdd based minimization fixed polarity reedmuller expressions application boolean algebra switching circuit design error de tection tr graphbased algorithms boolean function manipulation symbolic model checking spectral transforms large boolean functions applications technology mapping efficient representation manipulation switching functions based ordered kronecker functional decision diagrams fast ofdd based minimization fixed polarity reedmuller expressions verification arithmetic circuits binary moment diagrams algebraic decision diagrams applications introduction matrix analysis 2nd ed ctr thornton r drechsler spectral decision diagrams using graph transformations proceedings conference design automation test europe p713719 march 2001 munich germany yirngan chen randal e bryant acv arithmetic circuit verifier proceedings 1996 ieeeacm international conference computeraided design p361365 november 1014 1996 san jose california united states james smith giovanni de micheli polynomial methods component matching verification proceedings 1998 ieeeacm international conference computeraided design p678685 november 0812 1998 san jose california united states james smith giovanni de micheli polynomial methods allocating complex components proceedings conference design automation test europe p45es january 1999 munich germany clarke khaira x zhao word level model checkingavoiding pentium fdiv error proceedings 33rd annual conference design automation p645648 june 0307 1996 las vegas nevada united states methods coverage metrics functional verification proceedings conference design automation test europe proceedings march 0610 2006 munich germany rolf drechsler bernd becker stefan ruppertz kbmd verification data structure ieee design test v14 n2 p5159 april 1997 yirngan chen randal e bryant phdd efficient graph representation floating point circuit verification proceedings 1997 ieeeacm international conference computeraided design p27 november 0913 1997 san jose california united states james smith giovanni de micheli polynomial circuit models component matching highlevel synthesis ieee transactions large scale integration vlsi systems v9 n6 p783800 1212001 r drechsler using wordlevel information formal hardware verification automation remote control v65 n6 p963977 june 2004 christoph scholl bernd becker thomas weis wordlevel decision diagrams wlcds division proceedings 1998 ieeeacm international conference computeraided design p672677 november 0812 1998 san jose california united states rolf drechsler wolfgang gnther stefan hreth minimization wordlevel decision diagrams integration vlsi journal v33 n1 p3970 december 2002 louis kruger somesh jha eujin goh dan boneh secure function evaluation ordered binary decision diagrams proceedings 13th acm conference computer communications security october 30november 03 2006 alexandria virginia usa christoph scholl bernd becker thomas weis wlcds complexity wordlevel decision diagramsa lower bound division formal methods system design v20 n3 p311326 may 2002 jin yang aloysius k mok farn wang symbolic model checking eventdriven realtime systems acm transactions programming languages systems toplas v19 n2 p386412 march 1997 martin keim rolf drechsler bernd becker michael martin paul molitor polynomial formal verification multipliers formal methods system design v22 n1 p3958 january jawahar jain james bitner magdy abadir jacob abraham donald fussell indexed bdds algorithmic advances techniques represent verify boolean functions ieee transactions computers v46 n11 p12301245 november 1997 rolf drechsler bernd becker stefan ruppertz kbmds new data structure verification proceedings 1996 european conference design test p2 march 1114 1996 stefan hreth rolf drechsler formal verification wordlevel specifications proceedings conference design automation test europe p11es january 1999 munich germany randal e bryant binary decision diagrams beyond enabling technologies formal verification proceedings 1995 ieeeacm international conference computeraided design p236243 november 0509 1995 san jose california united states pejman lotfikamran mohammad hosseinabady hamid shojaei mehran massoumi zainalabedin navabi ted data structure microprocessor verification proceedings 2005 conference asia south pacific design automation january 1821 2005 shanghai china hreth r drechsler dynamic minimization wordlevel decision diagrams proceedings conference design automation test europe p612617 february 2326 1998 le palais des congrs de paris france john lafferty alexander vardy ordered binary decision diagrams minimal trellises ieee transactions computers v48 n9 p971986 september 1999 christoph kern mark r greenstreet formal verification hardware design survey acm transactions design automation electronic systems todaes v4 n2 p123193 april 1999 edmund clarke berndholger schlingloff model checking handbook automated reasoning elsevier science publishers b v amsterdam netherlands 2001