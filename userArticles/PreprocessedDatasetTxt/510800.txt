extended description techniques security engineering strong demand techniques aid development modelling security critical systems based general security evaluation criteria show extend system structure diagrams case tool autofocus related umlrt collaboration diagrams allow modelling security critical systems particular concerning components channels highlevel lowlevel models systems supported notion security patterns introduced provide generic solutions security requirements explain approach example electronic purse card system b introduction developing distributed systemsin particular applications communicate open networks like internetsecurity extremely important issue many customers reluctant take part electronic business confirmed recent attacks wellknown portal sites cases credit card fraud via internet overcome reluctance make ecommerce mobile systems success systems need become considerably trustworthy solve problem one hand highly sophisticated collections evaluation criteria security critical systems meet like itsec security evaluation criteria itsec 1990 recent successor common criteria cc common criteria 1999 common criteria describe security related functionality included system like authen tification secrecy auditing evaluation assurance levels eals work supported german ministry economics within fairpay project development strictest level eal7 common criteria 1999 part 3 p 66 formal representation highlevel design required hand research produced many formal methods describe verify properties security critical systems ranging protocol modelling verification burrows et al 1989 lowe 1996 paulson 1998 thayer et al 1998 models access control like belllapadula model bell lapadula 1973 notion noninterference goguen meseguer 1998 formal methods however rarely used practice require expert knowledge costly timeconsuming therefore integrated software development process security critical systems needed supported case tools using graphical description techniques reduces cost security problems discovered early development process still inexpensive deal proof meeting evaluation criteria byproduct software development addition systems developed along certain integrated security engineering process much trustworthy paper describe first step towards using extended description techniques security modelling basis work use autofocus description techniques autofocus huber et al 1998b slo tosch 1998 broy slotosch 1999 system structure diagrams related umlrt collaboration diagrams describe system set communicating components corresponding case tool developed munich university technology supports userfriendly graphical system design incorporates simulation code test case generation formal verification correctness main advantage use autofocus general description technique uml simplicity besides exists clear semantics description techniques general uml description techniques defining formal semantics still subject ongoing research start work focus security properties communication channels show certain important security properties communication channels secrecy authenticity modelled different abstraction levels system design explain ideas transition levels using generic security patterns give definitions meanings extended description techniques based autofocus semantics see also jrjens 2001 first work integrating access control models uml description techniques lotz 2000 formal definitions security properties using focus method paper structured follows section 2 give short introduction autofocus section 3 present extensions autofocus system structure diagrams model security properties channels usage techniques demonstrated section 4 help example extended description techniques security engineering 3 model electronic purse system conclude section 5 summary indicate work 2 autofocus autofocusquest huber et al 1998a slotosch 1998 philipps slo tosch 1999 case tool recently developed munich university technology goal combine userfriendly graphical system design support simulation code generation formal verification correctness autofocus supports system specification hierarchical vieworiented way approach well established facilitates use industrial environment however also based wellfounded formal background focus broy et al 1992 fairly elementary underlying concept communicating extended mealy machines system specifications autofocus make use following views system structure diagrams ssds similar collaboration diagrams describe structure interfaces system ssd view system consists number communicating components input output ports allow sending receiving messages particular data type ports connected via chan nels making possible components exchange data ssds hierarchical ie component belonging ssd substructure defined ssd besides components ssd associated local variables data type definitions dtds define data types used model functional language quest philipps slotosch 1999 addition basic types integer userdefined hierarchical data types offered similar used functional programming languages like gofer jones 1993 haskell thompson 1999 state transition diagrams stds represent extended finite automata used describe behaviour component ssd transitions consist input patterns channels preconditions output patterns actions setting local variables transition exe cuted main focus paper extending ssds describe stds detail place extended event traces eets finally make possible describe exemplary system runs similar mscs itu 1996 quest extensions slotosch 1998 autofocus offer various connections autofocus programming languages formal verification tools java code generation model checking using smv bounded model checking test case generation wimmel et al 2000 3 extending system structure diagrams main difference security critical systems traditional systems consideration attacks potential third party could try overhear manipulate security critical data decrease risk attacks minimum special security functionalities used example encryption common principle inhibit overhearing communication two agents state art use graphical description techniques system spec ification specification security critical systems need special description techniques deal particularities systems extend autofocus description techniques fulfill needs security engineering paper extensions autofocus ssds mentioned section 2 described extensions structure diagrams allow definition security requirements furthermore possible specify usage security functionality fulfill defined requirements use special tags security extensions ssds security tags assigned particular diagram parts defined semantics following sections describe different security extensions made ssds 31 security critical system parts model evaluate security aspects distributed systems always necessary define security critical parts identification security critical parts done early within system development process task typically part analysis phase common criteria security critical parts system together form target evaluation toe following definition make notion security criticality precise critical parts distributed system mean parts deal data information protected unauthorized operations eg disclosure manipulation prevention access etc particular security critical system parts connected security requirements secrecy authentication auditing according required strictness evaluation might subject formal modelling want make distinction visible within graphical system descrip tion therefore annotate security critical system parts security tag critical components channels tagged mark non critical system parts noncritical used system part without critical extended description techniques security engineering 5 data figure critical system parts noncritical tag non critical default figure 1 shows ssd consists two security critical components one security critical channel 32 public channels special aspect security critical systems possibility attacks hostile subjects manipulate system overhearing manipulating communication subsystems distinguish private communication channels system public channels use two security tags private public private channel channel hostile party access hostile subject neither overhear manipulate communication takes place via channel vice versa hostile party overhear manipulate communications public channel neither private public used assume default communication channel publicly accessible channel semantics normal channel within autofocus ie dedicated connection one component another channel semantics public channel without secrecy authenticity introduced section 36 defined ssds shown figure 2 using public channel figure 2a abbreviation intruder included model access channel figure 2b behaviour intruder defined threat modelfor example intruder usually overhear intercept redirect messages possible model behaviour flexible way using using autofocus state transition diagrams stds wimmel wisspeintner 2000 identification private public channels done analysis phase system development process right identification security critical parts every security critical channel must analyzed regard accessibilityfor channels optional result analysis documented using tags private public channels data public channel intruder data b data b defined intruder two agents figure 2 semantics public channel 33 replaceable components conventional system structure diagrams always show system normal operation eg ordinary electronic purse card component specified functionality communicating pointofsale component addition manipulation communication link maninthemiddle attack another attack scenario imaginable attacker could try communicate rest system place purse card case ordinary purse card system faked one particular usually contain private keys ordinary cards except leaked mark components replaced faked ones attacker replace tag components replaced nonre place tag neither replace nonreplace used component component non replaceable default definition 4 replaceable component figure 3 shows semantics replace component using replaceable component figure 3a abbreviation specifying two different system scenarios first scenario describes structure system specified component figure 3b second scenario figure 3c attacker exchanges component another component component signature like arbitrary behaviour defined threat model development process replaceable components identified analysis phase together identification private public extended description techniques security engineering 7 data replace component data component exchanged data c scenario 2 component exchanged figure 3 semantics replaceable component channels necessary analyze security critical components regard replaceability 34 encapsulated components encapsulated component component consists publicly accessible subcomponents way attacker possibility manipulate exchange subsystems component furthermore communication within component cannot overheard security tag node used mark component encapsulated one identification encapsulated components done together identification private public channels replaceable components consistency condition node node component consists private channels nonreplace components one example encapsulated component automated teller machine atm atm encapsulated way unauthorized persons able manipulate system parts overhearing internal communication also possible 35 actor components systems interact system environments often desired illustrate system environment graphical system design components part system called actors point actors using tag actor typical example actor system user system user interacts system without part actor components never marked critical tag actor part system therefore need analyze actor respect security aspects actor interact system way affects security requirements visualize critical interactions channels actors system components annotated critical tag 36 secrecy authenticity important security properties communication channelsin addition integrity availability nonrepudiationare authenticity secrecy purpose introduce tags secret auth channels ssds security properties channels identified highlevel design phase taking place activities analysis phase necessary specify security properties security critical public channels many possible definitions authenticity secrecy security literature see gollmann 1996 following give definition based model highlevel design phase assume defined requirements secrecy authenticity fulfilled automatically corresponding tags appear channels consequently requirements restrict possibilities attacker lowlevel design validity requirements ensured proper mechanisms definition 6 secret channel highlevel design message sent secret channel read specified destination component therefore assume highlevel design secret public channel read intruder intruder could write something figure 4 shows semantics secret public channel definition 7 authentic channel highlevel design message received auth channel come specified source component therefore auth public channel written extended description techniques security engineering 9 data secret public channel intruder data data b intruder write data circle represents switch component distributes incoming data outgoing channels figure 4 semantics secret public channel intruder intruder could possibly read data figure 5 illustrates semantics authentic channel relations notion security critical secrecy authenticity security critical channel references data protected attackers see definition 1 secrecy authenticity security properties security properties defines concrete requirements concerning protection data attackers definition 8 consistency condition secret auth channel marked security critical communication visible tacker data sent via channel must protected suitable manner case highlevel design phase protection data must ensured security property critical public channel must secret auth 37 integrity assume secret auth channels also provide message integrity ie message received auth channel guaranteed modified future integrity property could also modelled separately data auth public channel intruder data data b intruder read data figure 5 semantics authentic public channel 38 channel requirements lowlevel lowlevel design phase taking place highlevel design phase system specification refined phase security functionalities used ensure security properties requirements define usage symmetric encryption asymmetric encryption corresponding signatures realize requirements secrecy au thentification security tag sym marks channel defines realization channel must use symmetric encryption algorithm ensure secrecy requirements furthermore asym tag used define usage asymmetric encryption algorithm also possible specify encryption algorithm used guarantee secrecy security tag encalg parameters used together channel specify usage specific encryption algorithm specify additional parameters algorithm example possible define key length encryption keys authenticity realized using specific authentification protocols tag authprotocol parameters defines specific authentification protocol used extended description techniques security engineering 11 choosing specific encryption algorithm realizing secrecy perform refinement step special encryption drivers introduced perform encryption decryption tasks data sent two encryption drivers encrypted realize specific authentification protocol special protocol drivers introduced furthermore additional channels protocol drivers needed allow bidirectional communication refinements statements access intruder channel definition 6 definition 7 change public channels intruder read write access channel encryption mechanism channel must ensure intruder cannot manipulate channel improper way security requirements stated secret auth still fulfilled definition 9 secret authentic channels lowlevel design lowlevel design public channels implementing secret authentic communication modelled including appropriate security functionality convenient way using security patterns security patterns generic solutions common security problems figure 6 shows pattern simple case encryption guaranteeing secrecy communicating components include protocol drivers encryption decryption messages original channel replaced encrypted one encryption pattern could extended including protocol drivers key agreement public key server whole public key infrastructure security patterns instance providing auditing functionality possible 4 exampleelectronic purse transaction system previous section introduced extensions ssds deal security requirements use extended ssds model example system area ecommerce electronic purse card system given specification conforms common electronic purse specification ceps international standard electronic purse environment cep sco 2000 figure 7 shows complete system structure electronic purse system consisting several subcomponents system user possesses electronic purse card card amount money stored user pay card dealer using pointofsale pos terminal electronic purse card involved several security requirements example together components electronic purse card must ensure attacker steal money whole transaction system therefore card security critical component critical furthermore purse card realized single encalg parameter data public channel using specific encryption algorithm encdata encrypt decrypt data data intruder encdata b intruder read write encrypted data figure 6 encryption security pattern integrated chip encapsulated component node consequently assume attacker possibility overhear manipulate communication within electronic purse card attacker could try produce faked card could replace valid card faked one security tag replace component electronicpurse visualizes possibility electronic purse card communicate components interface offers ports read balance decrease balance set balance specific value getbal operation card used pos card loading terminal bank card owner issuerbank cardreader component operation reading balance security critical everybody possesses electronic purse allowed read stored balance card consequently channels getbal returnbal critical tag intruder could build special adapter overhear communication electronic purse card components express possibility communication channels getbal returnbal decreasebal setbal marked public tag user wants load money onto card must go bank use special card terminal channel setbal used transfer money bank account card channel security critical affects security requirement attacker stealing extended description techniques security engineering 13 cardreader electronicpurse pos decreasebalint returnbalint user pay issuerbank acquirerbank getbal loadcardint getbal getbal getbal returnbalint returnbalint returnbalint returnbalint getbal figure 7 electronic purse card system money use property authentification auth ensure card card terminal valid card reader simple device user check amount money stored card attacker exchange card reader another component replace hand card reader component encapsulated node security requirements defined component therefore component security critical pos component card terminal located dealer user insert electronic purse card terminal order pay goods pos directly involved money transaction process therefore component security critical pos encapsulated prevent manipulations within unit malicious dealer possibility exchange pos terminal faked unit pos component instruct electronic purse card decrease balance given amount operation decreasebal part money transaction process communication perform operation security critical comply security requirement intruder cannot steal money must ensure valid pos able decrease amount money money card pos must authenticate way card sure communicate valid pos fact visualized ssd auth tag annotated decreasebal channel dealer submit earned money bank acquirerbank using cashcredit channel channel security critical communication medium standard telephone line potential attacker possibilities overhear manipulate communication fact expressed using public tag channel ensure attacker overhear manipulate transferred data secret auth tags used channel cashcredit two banks used transfer money one bank communication takes place via open network public channel must ensure secrecy authenticity channel protect transaction data bank components security critical see risk potential attacker act faked bank component thus replace tag used banks finally let us look user user part system therefore actor tag used user initiate paying process pos initiation paying process security critical corresponds inserting card whereas amount money withdrawn negotiated outside system critical part paying process takes place money card pos furthermore user load card amount money action amount money transferred bank account onto card operation security critical attacker could try transfer money foreign account extended description techniques security engineering 15 electronic purse card thus need kind authentification perform operation eg user must enter pin code money transaction performed 5 conclusions work work beginning effort extend graphical description techniques distributed systems security aspects support methodical development security critical systems used case tool autofo cus description techniques related umlrt simplicity clear semantics possibility give security extensions straightforward unambiguous meaning showed extend autofocus system structure diagrams security tags highlevel lowlevel design transition highlevel lowlevel design aided possibility use security patterns description techniques illustrated help example field ecommerce electronic purse card system focused consideration channels system structure fu ture additional security properties integrity availability included specification channels components lowlevel design needs detailed using classifications pointed eckert 1998 sides seems promising examine security patterns providing generic architectures specific security functionality evaluate use within development process refinement security requirements security functionalities together influence correctness verification also part research activities also state transition diagrams stds specifying behaviour component extended similar way security properties purpose suggests classify data received sent ports use models belllapadula noninterferencesimilar done jrjens 2001 statechart diagrams behaviour components specified formal proofs carried hand automatically via model checking specified security properties fulfilled eets extended event traces also enriched cryptographic primitives security properties thus used specify verify security functionality component examining software development security critical systems help autofocus eets using protocols ceps purse card system case study subject ongoing work acknowledgments helpful comments encouragement oscar slotosch gratefully acknowledged r secure computer systems mathematical foundations model design distributed systemsan introduction focus enriching software development process formal methods logic authentication common criteria information technology security evaluation version 21 security policy security models mean entity authentication towards development secure systems using uml formally defining security properties relations streams breaking fixing needhamschroeder publickey protocol using fdr inductive approach verifying cryptographic pro tocols quest correct systems model checking diagramms datatypes quest overview project strand spaces security protocol correct haskell thecraft functional programming specification based test sequence generation propositional logic needhamschroeder protocol autofocus case study tr inductive approach verifying cryptographic protocols haskell towards development secure systems using umlsec breaking fixing needhamschroeder publickey protocol using fdr enriching software development process formal methods quest quest correct systems traffic lights autofocus case study tool supported specification simulation distributed systems mean entity authentication ctr monika vetterling guido wimmel alexander wisspeintner secure systems development based common criteria palme project acm sigsoft software engineering notes v27 n6 november 2002 monika vetterling guido wimmel alexander wisspeintner secure systems development based common criteria palme project proceedings 10th acm sigsoft symposium foundations software engineering november 1822 2002 charleston south carolina usa jan jrjens modelling audit security smartcard payment schemes umlsec proceedings 16th international conference information security trusted information new decade challenge june 1113 2001 paris france martin deubler johannes grnbauer jan jrjens guido wimmel sound development secure servicebased systems proceedings 2nd international conference service oriented computing november 1519 2004 new york ny usa folker den braber theo dimitrakos bjrn axel gran mass soldal lund ketil stlen jan yvind aagedal coras methodology modelbased risk assessment using uml uml unified process idea group publishing hershey pa