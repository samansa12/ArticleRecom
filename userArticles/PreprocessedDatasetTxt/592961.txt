qos contentionaware multiresource reservation provide quality service qos guarantee distributed services necessary reserve multiple computing communication resources service session meanwhile techniques available reservation enforcement various types resources therefore need create integrated framework coordinated multiresource reservation one challenge creating framework complex relation endtoend applicationlevel qos corresponding endtoend resource requirement furthermore goals 1 providing best endtoend qos distributed service session 2 increasing overall reservation success rate service sessions conflict paper present qos contentionaware framework endtoend multiresource reservation distributed services framework assumes reservationenabled environment type resource reserved framework consists 1 componentbased qosresource model 2 runtime system architecture coordinated reservation 3 runtime algorithm computation endtoend multiresource reservation plans algorithm provides solution alleviating conflict qos individual service session success rate service sessions specifically service session algorithm computes endtoend reservation plan guarantees highest possible endtoend qos level current endtoend resource availability requires lowest percentage bottleneck resources among feasible reservation plans simulation results show excellent performance algorithm b introduction advances resource reservation scheduling techniques possible provide endtoend quality service qos guarantees distributed applications services various resource reservation scheduling frameworks proposed individual system resources cpu 7 5 network bandwidth 11 disk io bandwidth 9 memory 7 becomes necessary create environment resources reserved scheduled integrated manner environment endtoend multiresource reservation performed client requesting distributed work supported national science foundation contract number 9870736 air force grant contract number f306029720121 national science foundation career grant contract number nsf ccr 9623867 nsf paci grant contract number infrastructure grant contract number nsf eia 9972884 nsf cise infrastructure grant contract number nsf cda 9624396 nasa grant contract number nasa nag 21250 service guaranteed certain level end toend qos key question creating environment distributed service determine best end toend qos level corresponding multiresource quirement constraint current endtoend multiresource availability one difficulty answering question relation endtoend qos level corresponding endtoend resource requirement complex qos level multiresource requirement generally expressed partialordered multidimensional vectors every resource contributes endtoend qos may exist tradeoffs different resources endtoend qos level case multiresource requirement determined looking resources separately instead must determined coordinating entity placed top resources another difficulty even reservationbased envi ronment still resource contention different applications services need reserve pool resources inevitably causing reservations ap plicationsservices fail fact goals 1 increasing overall success rate multiresource reservations different service requests 2 achieving best endto end qos service request conflict paper propose solution difficulties discussed present qos contention aware multiresource reservation algorithm distributed componentbased services algorithm computes endtoend multiresource reservation plan achieves highest possible endtoend qos level constraint current resource availability meantime multiresource reservation plan tends cause low bottleneck resource contention among feasible resource reservation plans lead level endtoend qos rest paper organized follows section 2 describe enabling system architecture multiresource reservation qosresource model algorithm based section 3 present qos contention aware multiresource reservation algorithm section 4 show performance algorithm simulation finally conclude paper section 6 system architecture qosresource model 21 distributed componentbased services distributed services studied paper componentbased distributed object programming techniques distributed service implemented set collaborating service components service component functional unit participating service delivery example distributed video streaming service object tracking functionality besides streaming video client service also track object interest video client client host able playback video rectangle around object tracked service service components include videosender service component running video server objecttracking service component running tracking server videoplayer service component running client host service component distributed service able achieve one levels service qual ity depending amounts resources reserved component service quality achieved individual service component finally leads endtoend qos provided client 22 architecture multiresource reserva tion order deploy distributed componentbased service reservationenabled environment introduce enabling system architecture architecture shown figure 1 involves following entities resource brokers rbs qosproxies service compo nents host environment one rbs managing individual resources one type resource qosproxy runs host coordinating reservation activities local rbs multiresource reservation algorithm executed qosproxies hosts involved distributed service rb responsible reservation scheduling resource 1 basic functions rb includes 1 reporting current resource availability 2 making 1 endtoend network bandwidth look one resource pipe sender receiver compatible rsvp assume network rb receiver always responsible initiating endtoend bandwidth reservation component service component service qosproxy component service qosproxy translation function qosproxy figure 1 architecture multiresource reservation enforcing reservations 3 releasing reservations 4 reporting possible reservation degradations qosproxy responsible coordinating reservation activities individual rbs host basic functions include 1 collecting resource availability information individual rbs 2 executing multiresource reservation algorithm dispatching resultant reservation plan individual rbs 3 starting service component host multiresource reservation completed qosproxy understand relation qos levels corresponding resource requirements service component order compute resource reservation plan however relation highly application specific reason architecture allows service developers provide translation functions plugins qosproxies shown figure 1 translation function relation multiple qos levels resource requirements service component formal definition translation function given section 23 therefore qosproxy call translation function execution multiresource reservation algorithm 23 qosresource model express relation service components qos resource requirement adopt qosresource model model originally proposed 8 service component c associated input quality q output quality q q q represented vectors multiple qos parameters qos parameter sets may identical simplicity assume parameter takes discrete values fore q q service component enumer able compare two qos vectors must parameter set two qos vectors q q b q q b holds qos parameter corresponding value q larger q b service component c resource requirement achieve certain output quality q given input quality q computed translation function c r resource requirement formally represented resource requirement vector r therefore given pair q q resource requirement vector required amount mth source compare two resource requirement vectors must set resources two resource requirement vectors r r b r r b holds type resource corresponding value r larger r b distributed service participating service components organize dependency graph general dependency graph direct acyclic graph dag nodes dependency graph represent service components edges dependency graph represent dependencies among service components figure 2 shows example dependency graph edge service components c c 0 indicates output c input c 0 q c equivalent q c 0 addition node incoming edges example c 1 figure 2 q represents original quality source data involved service example stored video clip live video source involved multimedia service node outgoing edges example c 3 figure 2 q represents resultant endtoend qos figure 2 example dependency graph distributed service 3 multiresource reservation algorithm introducing system architecture multiresource reservation qosresource model present qos contentionaware multiresource reservation algorithm given service request algorithm computes endtoend resource reservation plan service components participating distributed service best endtoend qos delivered client constraint current endtoend resource availability observed client goals algorithm involve qosawareness contentionawareness qosawareness service component may accept multiple levels q achieve multiple levels q algorithm must compute resource reservation plan selecting appropriate levels q q service component lead best possible endtoend qos clientside service component according dependency graph contentionawareness resources may shared services applications competitive basis therefore resource contention may exist resource reservation degree resource contention varies time time resource resource may affect overall success rate resource reservations environment 2 algorithm must find resource reservation plan among possible reservation plans reserve minimum amount bottleneck resources therefore every multiresource reservation disciplined algo rithm overall resource contention environment alleviated following subsections first define qos resource graph qrg key data structure study multiresource reservation problem study special case dependency graph distributed service chain finally extend algorithm deal general case dependency graph distributed service dag 31 qosresource graph formally define multiresource reservation problem using qosresource graph qrg distributed service qrg generated service request run time based dependency graph requested ser vice however definition qrg different dependency graph node qrg represents qos level q q service component c edge qrg node q node q represents corresponding resource requirement vector computed translation function c however edge exists current resource availability also represented vector less resource requirement vector figure 3 shows example qrg generated dependency graph figure 2 dotted rectangles qrg represent corresponding service components dependency graph assume multiresource reservation successful least one resource reserved simplicity without lowering problems complex ity assume original quality source data associated service request single qos level define node representing qos level source node qrg example q figure 30005060506 figure 3 example qrg weights edges shown clientside service component whose q nodes represent endtoend qos levels example service component c 3 figure 3 define q nodes sink nodes qrg example q l qm figure 3 also assume sink nodes ie endtoend qos levels ranked linear order linear ranking determined clients preferences may subjective example two endtoend qos levels comparable client requesting distributed service arbitrate qos level smaller delay parameter value better one larger value define weight edge qrg weight reflect degree resource contention caused resource requirement represented edge edge node q node q let r r req corresponding resource requirement vector computed calling c q q hand let current resource availability vector collected querying rbs first define contention index evaluate competitive reserve r req amount resource r constraint availability r avail paper choose simple definition follows r req r avail intuitively larger percentage resource one tries reserve current availability constraint less likely reservation succeed 3 3 fact definitions also exhibit charac define weight edge r req r avail edge node q node q represents equivalence output quality service component input quality dependent service com ponent therefore weight edges defined zero shown figure 3 32 algorithm chain case defining qrg ready present algorithm first consider special case dependency graph distributed service chain qrg edge nonzero weight exists corresponding r req r avail ie reservation resources according r req feasible fore following observation every path source node one sink nodes represents feasible endtoend resource reservation plan words reserve resources according resource requirement vectors represented nonzeroweight edges path endtoend qos represented sink node guaranteed furthermore best achievable endtoend qos current resource availability represented sink node highest ranking among reachable sink nodes source node example figure 3 assume q l ranks higher qm q l best achievable endtoend qos level however multiple paths q q l ie exist one feasible resource reservation plans achieve q l minimize resource contention algorithm select path value p smallest among paths p defined edge e path p e 4 definition easy see p represents contention index bottleneck resource path note bottleneck resource path may different find path q q l whose bottleneck resource smallest contention index algorithm finds shortest path q q l operator redefined max done running dijkstras algorithm qrg figure 4 shows shortest path shown thicker edges value inside node generated execution dijkstras algorithm computation complexity reservation algorithm chain case okq 2 k number service components dependency graph distributed teristics fortunately easy algorithm adopt different accurate definition future f qm0005060506 figure 4 shortest path q q l representing endtoend reservation plan computed algorithm service q maximum number q levels nodes among service components example figure 4 number q nodes fortunately k q usually fairly small values practice example k q 10 therefore scalability major concern multiresource reservation algorithm number q levels service component set service developer translating function service component experience shows number effectively controlled limiting number possible values qos parameter 33 algorithm dag case consider general case dependency graph distributed service dag dag dependency graph first extend definition service components qos levels service component one outgoing edge q become q service component end outgoing edge shown figure 5 call service component one outgoing edges fanout service component example c 2 figure 5 fanout service component service component one incoming edge q defined concatenation q service components end incoming edges call service component one incoming edges fanin service component example c 5 figure 5 fanin service component example qrg generated dag dependency graph shown figure 6 feasible endtoend reser c3 q 33 q q 41 43 q 33 c1in figure 5 example dag dependency graph distributed service vation plan represented embedded graph qrg 1 service component among edges q node q node one one edge belongs embedded graph 2 within embedded graph sink node representing endtoend qos level achieved reservation plan reachable node embedded graph goal reservation algorithm compute feasible endto reservation plan represented embedded graph g 1 sink node embedded graph highest qos ranking 2 value g smallest among feasible endtoend reservation plans g defined follows edge e g e 500530302060000000608070404505q c cc c c figure 6 example qrg based dag dependency graph shown problem npcomplete therefore focus providing efficient effective heuristics compute endtoend reservation plan achieves best endtoend qos trying maintain low value g heuristics based following twopass procedure qrg pass qrg similar reservation algorithm case chain dependency graph also runs dijkstras algorithm explore shortest path source node sink nodes qrg example figure 7 shows result pass qrg figure 6 notice generating value q node fanin service component example node q r c 5 set value maximum values q nodes end incoming edges exam ple nodes q n q p different dijkstras algorithm definition q r concatenation q n q p therefore resource contention reach q r maximum resource contention reach q n q p respectively c c c figure 7 running heuristics result pass pass ii qrg proceeds reversed direction pass starting reachable sink node highest qos ranking example q v backtrack edges toward source node according result pass determine embedded graph represents resultant endtoend reservation plan however backtracking may encounter following problem arriving fanout service component backtracked edges converge q node example figure 7 backtracked edges thicker ones figure lead different q nodes q h q heuristics use following method resolve nonconvergence locally service components dependent fanout component example c 3 c 4 fix q nodes backtracked example nodes q n select q node fanout service component causes lowest resource contention reach fixed q nodes dependent service com ponents example figure 7 q selected stead q h q reach q n q p resource contention 06 q h reach q n q p resource contention 07 e c c c c c figure 8 running heuristics embedded graph representing resultant reservation plan using twopass heuristics endtoend reservation plan computed qrg figure 7 embedded graph representing reservation plan shown figure 8 limitation heuristics sink node qrg reachable pass heuristics may necessarily find feasible reservation plan pass ii guarantee endtoend qos level represented sink node furthermore due local instead global nature nonconvergence resolution pass ii reservation plan computed heuristics may incur lowest bottleneck resource contention among feasible reservation plans 4 simulation results section evaluate success rate multiresource reservations achieved proposed reservation algorithm results section initial obtained simulation simulate simple scenario distributed service involves three service components simulated environment c 1 runs one host c 2 runs another host c 3 clientside service component runs client host resource contention exists hosts c 1 c 2 ex ecute addition introduce background computation task client host resource contention also exists execution c 3 background task simplicity assume service component requires one type resource qos levels corresponding resource requirements shown figure 9 value brackets denotes required amount resource corresponding q q pair also assume q l higher qos ranking qm notice figure 9 qrg total amount resource host c 1 executes 800 units total amount resource host c 2 executes 400 units total amount resource client host c 3 executes 1 unit assume beginning simulation resources free also assume client host right makes service request background computation task begin run 05 probability amount resource consumes uniformly distributed 025 075 unit 15 25 10 03 03 x amount resource required figure 9 qos levels resource requirements simulated service components first experiment simulate multiresource reservations made 16000 service requests spreading 400 minutes duration ie resource holding time service session varies uniformly 5 50 minutes service requests different clients arrive average rate 40 requests per minute success rates multiresource reservations shown figure 10 point represents success rate 5minute interval compare algorithm random algorithm randomly selects feasible multiresource reservation plan represented path q q l figure 9 400minute period overall success rate using algorithm 9633 random algorithm achieves overall success rate 7806 second experiment simulate different average request arrival rates distributed service for10305070900 50 100 150 200 250 300 350 400 success rate multiresource reservations time minutes algorithm random algorithm figure 10 multiresource reservation success rate 400minute period average arrival rate measure overall success rate 400 minute period using algorithm using random algorithm figure 11 shows overall multiresource reservation success rate different service request arrival rates results show algorithm constantly achieves higher overall success rate random algorithm 5 related work problem multiresource reservation addressed different angles 3 4 resource coallocation architecture mechanisms alloca tion configuration monitoring control presented suggested resource coallocation integral part resource management architecture grid environments addition advance reservation mechanism also proposed one next steps extend algorithm accommodate advance reservation 6 problem apportioning multiple finite resources satisfy qos needs multiple applications along multiple qos dimensions studied however solution based static set applications executed time consider dynamic arrival completion applications therefore solution contentionaware darwin project 1 hierarchical service resource brokerage architecture success rate multiresource reservations overminutes arrival rate multiresource reservation requests requestsmin algorithm random algorithm figure 11 multiresource reservation success rate different request arrival rates introduced order compose valueadded services allocation multiple resources needed signaling protocol multiresource allocation beagle signaling protocol 2 however protocol contentionaware either earlier work qualman system 7 different qosaware resource brokers proposed responsible reservation enforcement cpu network bandwidth memory resources respectively however coordination among resource brokers algorithm proposed compute multiresource reservation plans guarantee endtoend application level qos finally 10 study multiresource reservation problem case chain dependency graph paper extend solution deal general case dag dependency graph 6 conclusion reservationbased environment every type resource reserved need system support compute endtoend multiresource reservation plans make corresponding reservations integrated systematic manner paper first propose system architecture enables integrated multiresource reservation distributed componentbased services present qos contentionaware multiresource reservation algorithm computes reservation plan distributed service request 1 achieves highest level endtoend qos constraint current resource availability 2 causes least bottleneck resource contention case chain dependency tends cause low bottleneck resource contention case dag dependency graph future work includes extension support advance reservation study reservation fairness among service requests highly heterogeneous resource requirements service durations r resource management valueadded customizable network service signaling protocol structured resource allocation resource coallocation computational grids distributed resource management architecture supports advance reservations coallocation cpu reservation time constraints efficient scalable solution multiresource qos problem disk scheduling framework next generation operating systems multimedia service configuration reservation heterogeneous environ ments rsvp new resource reservation protocol tr ctr ashish mehta jay smith h j siegel anthony maciejewski arun jayaseelan bin ye dynamic resource allocation heuristics manage tradeoff makespan robustness journal supercomputing v42 n1 p3358 october 2007 jongkook kim sameer shivle howard jay siegel anthony maciejewski tracy braun myron schneider sonja tideman ramakrishna chitta raheleh b dilmaghani rohit joshi aditya kaul ashish sharma siddhartha sripada praveen vangari siva sankar yellampalli dynamically mapping tasks priorities multiple deadlines heterogeneous environment journal parallel distributed computing v67 n2 p154169 february 2007