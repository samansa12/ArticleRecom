complete characterization complete intersectiontype preorders characterize type preorders yield complete intersectiontype assignment systems calculi respect three canonical settheoretical semantics intersectiontypes inference semantics simple semantics fsemantics semantics arise taking interpretation types subsets applicative structures interpretation preorder relation leq settheoretic inclusion interpretation intersection constructor settheoretic intersection taking interpretation arrow constructor rightarrow la scott respect either possible functionality set largest one least onethese results strengthen generalize significantly earlier results literature knowledge least three respects first inference semantics considered second characterizations given terms simple closure conditions preorder relation leq types rather typing judgments task checking condition made therefore considerably tractable last restrict attention models arbitrary applicative structures admit interpretation function thus allow also treatment models restricted calculi nevertheless characterizations give tailored case models b introduction intersectiontypes disciplines originated coppo dezaniciancaglini 1980 overcome limitations currys type assignment system provide char author addresses dezaniciancaglini dipartimento di informatica universita di torino italy dezanidiunitoit f honsell falessi dipartimento di matematica ed informatica universita di udine via delle scienze 208 33100 udine italy honsell alessidimiuniudit partially supported murst con 99 tosca project fgv 99 cnrgnsaga permission make digitalhard copy part material without fee personal classroom use provided copies made distributed prot commercial advantage acm copyrightserver notice title publication date appear notice given copying permission acm inc copy otherwise republish post servers redistribute lists requires prior specic permission andor fee c acm transactions computational logic vol tbd tbd tbd tbd pages 127 dezani et al acterization strongly normalizing terms calculus pottinger 1980 early issue completeness became crucial intersectiontype preorders lter models introduced barendregt et al 1983 precisely achieve completeness type assignment system respect scotts simple semantics result together conservativity respect currys simple types used barendregt et al 1983 prove scotts conjecture concerning completeness settheoretic semantics simple types number type preorders interest literature grown considerably years eg coppo et al 1984 coppo et al 1987 honsell ronchi della rocca 1992 egidi et al 1992 abramsky ong 1993 plotkin 1993 honsell lenisa 1999 etc especially connection study domain models calculi perspective abramskys domain theory logical form 1991 furthermore new semantics proposed intersection types hindley 1983a problem characterizing syntactically sound adequate complete type preorders respect various settheoretic semantics appears therefore rather natural moreover feel existence completeness results respect settheoretic semantics one barendregt et al 1983 probably one signicant features intersectiontypes paper solve completely characterization problem far three canonical settheoretical semantics intersectiontypes inference semantics simple semantics scott 1975 fsemantics scott 1980b semantics arise interpreting types subsets applicative structures taking interpretation preorder relation settheoretic inclusion interpretation intersection constructor settheoretic intersection taking interpretation arrow constructor la scott logical predicate respect either possible functionality set largest one least one precisely simple semantics types associates arrow type b set elements applied arbitrary element interpretation return element interpretation b scott pointed scott 1980b however key lambda model set elements domain canonical representatives functions ie elements meanings terms starting initial abstraction fsemantics types takes therefore meaning arrow type elements behave expected respect application also canonical representatives functions inference semantics counterpart inference semantics polymorphic types introduced mitchell 1988 generalized suitable applicative structures interpretation function called applicative structures interpretation arrows taken respect arbitrary set includes canonical representatives functions results paper strengthen generalize signicantly earlier results literature knowledge least four respects first consider general denition type preorders allow represent inverse limit models coppo et al 1984 also graph models berline 2000 secondly complete characterization complete intersectiontype preorders 3 inference semantics considered thirdly characterizations given terms simple closure conditions preorder relation types rather typing judgments done earlier dezaniciancaglini margaria 1986 task checking condition made therefore considerably tractable lastly restrict attention models general class applicative structures thus allow also treatment models restricted calculi notably models plotkins callbyvalue v calculus plotkin 1975 models ncalculus honsell lenisa 1999 nevertheless characterizations give tailored case models paper organized follows section 2 introduce type preorders various kinds type assignment systems prove generation lemmata systems section 3 introduce basic semantical structures respect shall discuss soundness completeness type preorders section 4 study lter structures prove crucial property satised interpretation function section 5 main section paper introducing notions type interpretation domain semantic satisability three semantics consideration give characterization results finally section 6 discuss related results give nal remarks 2 intersectiontype preorders type assignment systems intersectiontypes syntactical objects built inductively closing given set c type atoms constants function type constructor intersection type constructor denition 21 intersectiontype languages intersectiontype language c denoted dened following abstract syntax notice denition cardinality c varying parameter notation 22 upper case roman letters arbitrary types writing intersectiontypes shall use following convention constructor takes precedence constructor associates right moreover short z much expressive power intersectiontype disciplines comes fact types endowed preorder relation induces structure meet semilattice respect appears natural especially semantical setting present paper intended meaning types sets denotations interpreted settheoretic intersection interpreted set inclusion moreover sometimes want maximal element types maximal element arrow types atoms call atoms respectively corresponding axioms particularly meaningful used combination e ype assignment system essentially treats universal type terms 4 dezani et al see denition 29 axiom states includes arrow type axiom agrees type assignment system treats universal type abstractions see denition 210 denition 23 intersectiontype preorders intersectiontype preorder c binary relation intersectiontype language tc satisfying following set axioms rules c notation 24 write b b b notice associativity commutativity modulo follow easily axioms rules notation 25 commutative associative write similarly write i2i convene denotes always nite nonempty set type preorders considered far literature dened languages nite countable sets atoms generated recursive sets 5 atoms rules shape b generation sense b true derived axioms rules 5 together denition 23 preorders denoted c 5 5 note countably many possible 5 hence uncountably many preorders cannot represented way note also correspondence 5 75 lazy fig 1 special purpose axioms rules concerning figure 1 gives examples special purpose axioms rules figure 2 presents traditional sets 5 names 5 initials authors rst considered model induced preorder c 5 5 complete characterization complete intersectiontype preorders 5 f lazyg f fig 2 examples nitely generated preorders atoms axioms rules order logical rather historical ba van bakel 1992 ehr egidi et al 1992 ao abramsky ong 1993 bcd barendregt et al 1983 symbol c1 denotes innite set fresh atoms ie dierent meaning axioms rules figure 1 grasped easily consider intended settheoretic semantics whereby types denote subsets domain discourse interpret b set functions map element element b instance combination fact objects domain discourse total functions ie equal barendregt et al 1983 however want capture terms truly represent necessary instance discussing lazy calculus abramsky ong 1993 cannot assume order ensure functions total end postulate instead weaker property lazy according set theoretic semantics axiom states eect simply element function since maps b maps also whole universe notice type denoting whole universe c role could played also type provided lazy 5 reason use time language hence impose two constants occur together c settheoretic meaning axiom immediate function maps b also c actually maps whole intersection b c ie b c see barendregt et al 1983 rule also natural settheoretically asserts arrow constructor contravariant rst argument covariant second one namely function maps b take subset 0 superset b 0 b function map also 0 b 0 see barendregt et al 1983 introduced type preorders explain capitalize eectively expressive power achieved via crucial notion intersection type assignment system natural extension currys type assignment type intersection types first need preliminary denitions notations notation 26 short c 5 c 5 5 denition 27 1 basis c set statements shape xb whose variables distinct 2 intersectiontype assignment system relative denoted 6 dezani et al formal system deriving judgments form subject untyped term predicate tc basis c 3 write x 2 short 9a occurs subject assertion say term typable given basis type 2 tc judgment derivable dene three kinds type assignment systems correspond presence absence atoms rst ones basic type assignment systems deal sets atoms including denition 28 basic type assignment systems preorder c basic type assignment system denoted b formal system deriving judgments shape rules following e 2 c line intended settheoretic interpretation universe extend basic type assignment system suitable axiom denitiontype assignment systems preorder c axioms rules type assignment system denoted deriving judgments shape basic type assignment system together axiom ax similarly 2 c line intended interpretation universe abstractions dene denition 210 type assignment systems preorder 2 c axioms rules type assignment system denoted deriving judgments shape basic type assignment system together axiom complete characterization complete intersectiontype preorders 7 notation 211 following range precisely assume stands whenever whenever otherwise similarly refer barendregt al 200x detailed account interest dierences three kinds intersectiontype assignment systems introduced recall suggestive facts thanks intersection type constructor general selfapplication typed systems case currys type assignment fact easy prove whilst xxx cannot receive type curry system actually strongly normalizing terms typeable b solvable terms typed type equivalent instance using 2 term yxx xxx systems appropriate dealing plotkins call byvalue v calculus plotkin 1975 also systems allow type nonstrongly normalizing terms instance one prove term yxxz may receive type anyway notice proved egidi et al 1992 yxx cannot typed ehr notice structural rules weakening strengthening admissible weakening notice also intersection elimination rules proved immediately derivable moreover straightforward induction structure derivations one prove rule admissible conclude section proving crucial technical result concerning type preorders useful section 5 form generation provides conditions reversing rules type assignment systems notation 212 write assume 33 mean condition always true deal must checked similarly condition 6a must checked moreover write type preorder validates 5 mean theorem 213 generation lemma let preorder following conditions equivalent 8 dezani et al x following conditions equivalent mn i2i c 3 let validate ba following conditions equivalent mn 4 assume 6a following conditions equivalent xm proof proof b easy treat b 1 easy induction derivations since axioms axax 8 rules applied notice condition implies cannot obtained using axioms ax 2 induction derivations interesting case 1 2 last rule applied condition implies cannot 1 2 proof 6 2 6 cases treated similarly induction moreover done since 2 applying rule derive since rule axiom choose since choose b c otherwise 6a proof induction derivations notice xm cannot obtained using axioms ax ax interesting case 1 2 last rule applied proof 2 consider case 1 6 6a 2 complete characterization complete intersectiontype preorders 9 induction done since special cases theorem already appeared literature see baren dregt et al 1983 coppo et al 1984 coppo et al 1987 honsell ronchi della rocca 1992 egidi et al 1992 3 applicative structures suitable lambda calculus section introduce semantical structures consider investigation soundness completeness intersectiontype assignment systems denition 31 applicative structure applicative structure triple applicative structure 2 mapping interpretation function terms satises following properties b 62 fvm c 8d 2 compare denition applicative structures models rst given hindley longo 1980 see also denition 531 barendregt 1984 denition 113 hindley seldin 1986 three conditions missed 1 xd absence conditions 1 2 allows us dene interpretation function lter structures way coincides set derivable types see proposition 45 theorem 46 omit conditions 3 considering also models restricted calculus denition 32 one easily see plotkins structures dened plotkin 1993 applicative structures next section introduce lter structures applicative structures models possibly restricted calculi commonly know viewed special applicative structures first need give denition restricted calculus denition 32 restricted calculus let restricted calculus r calculus obtained standard calculus restricting rule redexes r dezani et al standard calculus main examples truly restricted calculi plotkins callbyvalue v calculus plotkin 1975 incalculus honsell lenisa 1999 finally give crucial denition denition 33 restricted model restricted model restricted calculus r applicative structure hd moreover satises hxmn x n 2 r easy see notions models possibly restricted calculi based applicative structures cast setting 4 filter structures interpretation lambda terms section introduce lter structures basic tool building applicative structures eect models realize completeness type preorders filter structures arise naturally context generalizations stone duality used discussing domain theory logical form see abramsky 1991 coppo et al 1984 vickers 1989 approach provides conceptually independent semantics intersection types lattice semantics types viewed compact elements domains type denotes least element intersections denote joins compact ele ments arrow types allow internalize space continuous endomorphisms following paradigm stone duality type preorders give rise lter structures interpretation terms given nitary logical description start introducing notion lter types show associate type preorder lter structure applicative structure interpretation term given lter types assigned denition 41 let preorder 1 lter simply lter set x tc b b 2 x c denotes set lters denotes lter generated x 4 lter principal shape fag type shall denote fag simply notice lter dicult prove f ordered subset inclusion complete lattice whose bottom element whose top element tc moreover sup directed set lters settheoretic union lters nite 1 elements exactly lters 1 element x nite directed subset x v f implies exists 2 x v complete characterization complete intersectiontype preorders 11 generated nite sets types actually f algebraic ie set nite elements denumerable moreover lter x set kx nite elements x directed sup x next step dene application sets lters denition 42 filter structure let preorder 1 application f f f dened 2 maps f dened 2 g triple hf f g called lter structure notice fa nonempty 2 c follows denition g appears natural recall axiom ax entails universal type functions arrow types correspond step functions allow describe functional behaviour lters following sense proposition 43 let preorder x 2 f get g step function x 2 x proof show g let d6 otherwise thesis trivial denition application lter denition step function since c compact righthand side directed next proposition provides useful tool relating arrow types application 2 informal notation used dene functions see barendregt 1984 page xiii hindley seldin 1986 page 130 12 dezani et al proposition 44 let preorder validates ba let proof otherwise denition application denition 421 c denition lter denition 41 get rule trivial filter structures induce immediately applicative structures proposition 45 let hf f g lter structure let range set term environments interpretation function exists x 2 var otherwise put inductively triple hf applicative structure interpretation function term coincides set types derivable crucial property showing completeness using lter structures theorem 46 let preorder tc term environment x 2 var x 6 moreover implies proof thesis trivial x case since holds otherwise prove thesis induction dene else complete characterization complete intersectiontype preorders 13 x ag theorem 2131 nl denition application induction weakening l theorem 2132 3 rule xn denition g induction weakening l theorem 2134 axiom ax rule 5 settheoretic semantics intersectiontypes main section paper discuss completeness three settheoretic semantics intersectiontypes mentioned introduction par ticular characterize type preorders induce complete type assignment systems inference simple fsemantics applicative struc tures see conditions apply also preorders induce complete systems respect three semantics models recall according semantics meaning types subsets universe discourse ie applicative structure intersection type constructor always interpreted settheoretic intersection arrow interpreted set points belong suitable distinguished set whose applicative behavior mapping antecedent arrow consequent remarked earlier existence complete type assignment systems semantics applicative structures one strongest motivations whole enterprise developing theory intersectiontypes discussing completeness soundness really issue since type preorders sound achieve adequacy hence completeness restrict 14 dezani et al two disjoint classes type preorders namely natural preorders strict preorders filter structures essential showing adequacy structures fact settheoretic interpretation type appropriate subset onetoone correspondence principal lter generated type denition 51 2 c validates ao dened figure 2 2 c validates ba dened figure 2 notice strict type preorder containing constant validates ehr preorders appearing figure 2 natural contain strict otherwise type interpretations given applicative structures xed distinguished set functional objects various choices set amongst maximal one minimal one former determines simple semantics latter fsemantics denition 52 type interpretation domain interpretation domain quadruple applicative structure subset called functionality set xm x simple interpretation domain finterpretation domain g denition 53 type interpretation let domain type interpretation induced type environment 1 denition counterpart intersectiontypes inference semantics polymorphic types mitchell 1988 generalized allowing hd applicative structure instead model x applicative structure hd interpretation function denition depends choice functionality set type environment v interpretation constants f takes account corresponding axioms type assignment systems remarked see page 9 denition applicative structure postulate general nevertheless class environments property particular signicance provided complete characterization complete intersectiontype preorders 15 induce trivial interpretations ie interpretations terms equated hence put denition 54 good environments let hd applicative structure term environment var good x 2 var moreover exist two terms mn discussing sound type assignment systems consider type interpretation domains type environments good notion goodness depend current type preorder kind semantics considering agree inclusion relation types following sense denition 55 let preorder type interpretation domain 1 good good environments 2 b good environments terms variables x 2 f good good moreover good environments variables x 2 tc 3 agree condition 2 denition 55 true particular finterpretation domain good get x 2 implies remark conditions 1 2 denition 55 true known models restricted calculus hindley longo 1980 plotkin 1975 egidi et al 1992 honsell lenisa 1999 one easily see following holds proposition 56 domains type environments agree ao ehr simple interpretation domains type environments agree bcd introduce formally three semantics denitions follow natural way argued informally far restriction denition type interpretation domains type environments good fgood case fsemantics agree denition 57 let denition 58 semantic satisability dezani et al interpretation domains type environments v moreover agree good term environments 2 good simple interpretations domains type environments v moreover agree good term environments interpretations domains type environments v moreover agree good term environments example 6j 6j view denition say inference semantics given simple semantics fsemantics f following proposition immediate proposition 59 f notation 510 shall denote three f derivability type system implies semantic satisability shown next theorem proof induction derivations straightforward theorem 511 soundness implies proof induction derivation using denition type interpretation denition 53 rule e sound denition applicative structure denition 31 soundness rule follows restriction good type interpretation domains type environments denition 551 denition functionality set denition 521 rule sound since consider type interpretation domains type environments agree denition 553 soundness rules immediate regards adequacy rst observe natural strict type preorders adequate particular model p scott 1976 engeler models engeler 1981 graph models satisfy rule see berline 2000 description models webbed models barendregt al 200x presentation via type preorders cannot adequate remark 512 following referees suggestion conjecture graph models would complete using general notions type interpretation domain type interpretation precisely following extensions worthy dening fourth components type interpretation domains functions arrow types subsets xm replacing condition 4 denition 53 complete characterization complete intersectiontype preorders 17 proposition 513 adequacy implies naturality strictness implies natural strict type preorder proof easy verify hypothesis forces type preorder validate rule axiom also lazy 2 c instance regards axiom consider basis cg denition 53 get hence hypothesis bc theorem 2131 must hold must hold shall discuss adequacy three semantics separately first consider inference semantics goal show natural strict type preorders adequate inference semantics proof focus applicative structure induced lter structure put denition 514 let natural strict type preorder let 1 functionality set dened f otherwise 2 type interpretation domain hf type environment dened mapping 4 previous denition symbol overloaded since refers term interpretation lter structure see proposition 45 type interpretation induced type preorder anyway confusion may arise since arguments select interpretation notice 2 c get 2 c get mapping property associating type set lters contain thus preserving property basic case type constants lemma 515 let natural strict type preorder proof induction interesting case arrow type remark x 2 f 2 types x intersections constant types fact x contains arrow type contains also dezani et al lazy 2 c rule x belongs denition induction proposition 44 denition lemma 516 let natural strict type preorder v good agree proof v satisfy condition 1a denition 55 since condition 1b denition 55 let x 2 lemma 515 b 2 xx notice proposition 43 denition g denition step function done since f g lastly notice immediate consequence lemma 515 get therefore v agree finally prove desired adequacy result theorem 517 naturality strictness imply adequacy let natural strict type preorder proof consider type interpretation domain let term environment dened ag easy verify 0 hence lemma 515 theorem 46 property hence proposition 513 theorem 517 natural strict type preorders turn complete respect inference semantics course many preorders interest belong classes instance type preorder induces lter structure isomorphic scotts p scott 1976 preorder reader see barendregt al 200x examples notice preorders ao bcd induce lter structures models barendregt et al 1983 preorder ehr induces model v calculus complete characterization complete intersectiontype preorders 19 egidi et al 1992 preorder ba induces model incalculus honsell lenisa 1999 hence natural preorders induce models complete also class models strict preorders induce models two restricted calculi complete corresponding classes models characterize preorders complete respect simple semantics theorem 518 adequacy simple semantics let preorder natural type preorder validates strict type preorder proof proposition 513 follows natural strict easy check 6 simple adequacy fails since theorem 2131 deduce x let 2 c type interpretation domain type environment hence never holds theorem 2131 hence simple adequacy fails 2 c proves prove given conditions use simple type interpretation domain hf dened denition 514 either lemma 515 follows xg implies 2 conclude last step proof theorem 517 among type preorders figure 2 adequate simple semantics ba bcd adequate type preorders literature honsell lenisa 1999 scott 1972 park 1976 coppo et al 1987 honsell ronchi della rocca 1992 non adequate type preorders inducing computationally adequate models lazy calculus eg ao callbyvalue calculus eg ehr argument used inference semantics allows show natural preorders mentioned theorem 518 induce models precisely complete also class models strict preorders induce v models inmodels complete corresponding classes models completeness simple semantics whenever validates bcd hf proved coppo et al 1984 using lter models coppo et al 1987 using term model equality finally turn fsemantics following denition singles type preorders adequate fsemantics proved theorem 528 denition 519 type preorder fpreorder 1 either natural strict type preorder 2 c 2 c dezani et al 2 strict type preorder 2 c 2 c either example ba ehr ao fpreorders notice natural type preorder validates fpreorder 2 c get next lemma shows types fpreorder satisfy conditions previous denition lemma 520 let either c c proof prove dicult case namely 2 reason induction structure c c 2 c thesis trivial c e c hence cd e c de c thesis immediate otherwise cannot e let us suppose 6 induction follows e get c done 6 e induction follows e therefore c tc easily get corollary 521 let discuss fsemantics useful characterize subset types functional denition 522 dene predicate fun tc induction structure types following proposition gives alternative characterization functional types fpreorders proposition 523 fpreorder proof trivial reason induction structure 2 c thesis follows denition funa otherwise b c complete characterization complete intersectiontype preorders 21 either funb func assume funb case func similar induction either b b rst case either c ac ac second case follows ac choosing arbitrary 2 get j 0 corollary 521 conclude prove adequacy use lter structure hf f g dening previous cases type interpretation domain hf f de nition diers denition 514 choose dierent functionality set denition 524 let fpreorder let 1 f functionality set dened x 2 f type interpretation domain hf f type environment dened mapping f f restricting fpreorders lters contain functional type belong functionality set lemma 525 let fpreorder x 2 f 2 x imply f proof show given conditions proof x take arbitrary b 2 x notice 2 c implies proposition 523 moreover funa implies denition 522 either b b i2i proposition 523 rst case get b rule second case derive using axiom ax rules e implies fxa bg yxy b rules l cases conclude b 2 0 theorem 46 since case b fxa bg proof theorem 46 22 dezani et al since proposition 523 otherwise get fxc yd theorem 2134 implies theorem 2133 using theorem 2131 c f get c rule conclude c b ie lemma 526 let fpreorder proof proof induction similar lemma 515 cases trivial arrow types let x lter f x theorem 46 2 x vice versa 2 x denition 522 fun f proved 2 c hence xg proof lemma 515 proposition 44 since 2 c theorem 46 imply lemma 527 let fpreorder f fgood agree proof mimic proof lemma 516 using lemma 526 instead lemma 515 points denition 55 2 left prove last condition holds key observation lemma 526 theorem 46 basis let f f 0 z 0 exists basis 0 0 theorem 2134 hence zm f since 0 exists basis j x applying rules e get yxy f since f agree get f f conclude f theorem 528 adequacy fsemantics fpreorder complete characterization complete intersectiontype preorders 23 proof first check given conditions necessary let fgood agree good denition 552 follows similar argument obtain x 2 c therefore fadequacy prove theorem 2134 x c 2 tc theorem 2133 c theorem 2131 rule last judgment along implies similarly x show either vice versa consider finterpretation domain f type environment f denition 524 fgood agree lemma 527 lemma 526 xg implies mimicking proof theorem 517 preorders ba ehr ao well type preorders honsell lenisa 1999 scott 1972 park 1976 coppo et al 1987 honsell ronchi della rocca 1992 adequate fsemantics moreover last simple semantics coincides fsemantics preorder bcd example preorder adequate respect fsemantics remark concerning models restricted models made inference simple semantics applies also fsemantics 6 related work final remarks literature essentially ways interpreting currys types model untyped calculus dier interpretation arrow type constructor follows shall mainly follow terminology hindley 1983a dezani et al simple fsemantics dened expected following scott 1980a quotient set semantics takes account want consider equivalent two functions give equivalent results applied equivalent arguments types interpreted partial equivalence relations domain rather simply subsets arrow constructor dened logical relations ab 0 c c 0 c c 0 holds fquotient set semantics scott 1976 modies quotient set semantics way fsemantics modies simple semantics namely requires elements domain equivalent respect arrow must canonical representatives functions finally mitchell mitchell 1988 introduces another semantics calls inference semantics interpretation arrow must least contain canonical representatives functions behave correctly respect application semantics easily extend intersectiontypes dezaniciancaglini margaria 1986 polymorphic types mitchell 1988 crucial question semantics types completeness type assignment systems hindley proved hindley 1983a currys type assignment system complete mentioned semantics specically hindley 1983a hindley 1983b show completeness simple semantics moreover curry type 2 simple semantics particular case quotient set semantics 3 fsemantics particular case fquotient set semantics argument showing points 2 3 easily extends intersection polymorphic types type disciplines enough discuss completeness simple fsemantics get completeness results quotiented versions one could dene also quotient version inference semantics would treated similarly completeness respect simple semantics various intersection type assignment systems models proved barendregt et al 1983 hindley 1982 coppo et al 1984 coppo et al 1987 van bakel 1992 far completeness respect fsemantics intersectiontype assignment systems models cite dezaniciancaglini margaria 1986 yokouchi 1994 abramsky ong 1993 dezaniciancaglini margaria 1986 type preorders give models lters never interpretations abstractions complete fsemantics characterized specically shown type preorder satises previous conditions 6 types invariant equality subjects moreover following rule due rhindley hindley rule 2 c derived rule complete characterization complete intersectiontype preorders 25 yokouchi yokouchi 1994 shows add two suitable rules quite similar hindley rule intersectiontype assignment system coppo et al 1981 obtain completeness fsemantics abramsky ong abramsky ong 1993 prove completeness preorder ao respect fsemantics applicative structures convergence conclude paper three nal remarks natural type preorder adequate fsemantics hind leys rule admissible follows observation given conditions n 0 2 c nd 1 i2i could used syntactic approach based term models introduced hindley 1982 showing adequacy results concerning simple semantics far inference fsemantics end notice reduces abstraction fortiori m1 reduces abstraction xx 1 xyxy therefore representative function whenever representative function consider fpreorder ciancaglini margaria 1986 dm xi implies soundness f xi get f x1 easy check using generation lemma cannot deduce x1 matter fact proof completeness fsemantics yokouchi 1994 uses clever variant term model calculus constants clear us could adapted general case treated would nice investigate independent settheoretic conditions imply type interpretation type environment agree type preorder canonical example sense one given partial applicative structures preorder ehr dezaniciancaglini et al 2000 extended abstract present paper acknowledgment authors grateful wil dekkers yoko motohama referees itrs submission present submission useful comments suggestions particular present general denition type preorder 26 dezani et al allows represent graph models worked crucial guide referee tocl submission r domain theory logical form full abstraction lazy lambda calculus lambda calculus syntax semantics computation foundations via functions application extension basic functionality theory extended type structures functional characters solvable terms type theories complete characterization complete intersectiontype theories characterization f algebras combinators introduction combinators simple semantics coppodezanisalle types completeness theorem typing currys typerules complete respect fsemantics semantical analysis perpetual strategies type inference containment type assignment strongly normalizable continuous lattices open problem data types lattices lambda calculus models letter albert meyer complete restrictions intersection type discipline topology via logic tr introduction combinators myampersandlgrcalculus characterization italicfcomplete assignments type theories normal forms italicdsubscrptinlineequationfmyampersandinfinfinlineequation0elambdamodels type inference containment topology via logic complete restrictions intersection type discipline operational denotational logical descriptions settheoretical elementary models myampersandlgrcalculus approximation theorem topological lambda models topological incompleteness lambda calculus full abstraction lazy lambda calculus fsemantics type assignment systems semantical analysis perpetual strategies myampersandlgrcalculus computation foundations via functions application simple semantics coppedezanisallmyampersandeacute types ycombinator scotts lambdacalculus models ctr dezaniciancaglini f honsell motohama compositional characterisations terms using intersection types theoretical computer science v340 n3 p459495 31 august 2005 fabio alessi franco barbanera mariangiola dezaniciancaglini intersection types lambda models theoretical computer science v355 n2 p108126 11 april 2006