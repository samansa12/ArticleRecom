starburst active database rule system abstractthis paper describes development starburst rule system active database rules facility integrated starburst extensible relational database system ibm almaden research center starburst rule language based arbitrary database state transitions rather tuple statementlevel changes yielding clear flexible execution semantics rule system implemented completely rapid implementation facilitated extensibility features starburst rule management rule processing integrated aspects database processing b introduction active database systems allow users create rulesrules specify data manipulation operations executed automatically whenever certain events occur conditions met active database rules provide general powerful mechanism traditional database features integrity constraint enforcement view maintenance authorization check active database rules also support nontraditional database features version management workflow control active database rules similar forwardchaining production rules used artificial intelligence applications active database systems also provide convenient efficient platform large efficient knowledge bases expert systems paper describe development starburst rule system active database extension starburst prototype extensible relational database system ibm almaden research center cover design rule language implementation rule processing extension starburst starburst rule language work performed author ibm almaden research center san jose ca differs active database rule languages based arbitrary database state transitions rather tuple statementlevel changes permitting execution semantics cleanlydefined flexible implementation starburst rule system completed rapidly relies heavily extensibility features starburst starburst rule processor differs active database rule systems completely implemented fully integrated aspects database process ing including query transaction processing concurrency control rollback recovery error handling authorization paper proceeds follows section 2 survey active database rule systems section 3 describe syntax starburst rule language section 4 specify semantics rule execution examples given section 5 architecture rule system implementation described section 6 section 7 covers several implementation features detail including transition information maintenance concurrency control authorization error handling section 8 concludes provides retrospective discussion starburst rule system highlighting feel successes failures language design implementation finally section 9 mention several applications starburst rule system discuss future directions work related work numerous active database systems designed imple mented three systems closest starburst rule system ariel 31 second version postgres rule system 42 chimera 1214 ariel system rule language execution semantics based closely ops5 9 production rule language originally designed expert systems ariel project focused design ops5like rule language database setting methods highly efficient rule condition testing using variations rete treat algorithms designed ops5 44 ariel rule language fully implemented using exodus database toolkit 31 postgres rule system sometimes referred prs2 distinguish earlier proposal 41 focuses language implementation providing several different classes rules appropriate particular suite applications two implementations postgres rule system one based runtime marking tuples affected rules based compiletime rewriting queries incorporate effects rules 42 chimera system combines objectoriented deductive active database technology active rule language based starbursts extensions objectorientation configurable rule semantics see section 4 first prototype chimera implemented employing techniques adapted starburst 12 several relational active database systems closely related starburst systems described two projects datex 8 dips 38 implement ops5 rule language using underlying database system special indexing techniques support efficient processing large rule data sets paradiser project also uses database system efficient processing expert system rules paradiser focus distributed parallel rule processing 23 rpl relational production language early project relational active database systems rpl includes ops5like rule language based relational queries prototype implementation rule processing loosely coupled commercial relational dbms 22 ardl extension rdl deductive database system supports active rules 39 alert project explores active rules supported top passive database system minimal extensions 37 finally heraclitus relational database programming language delta relations firstclass objects primary goal heraclitus language simulate support active rule processing 29 one early project numerous recent efforts including chimera consider active objectoriented database systems although issues active database systems common relational objectoriented environments many significant differences furthermore date objectoriented active database systems implementations advanced relational counterparts hipac pioneering project area active database systems hipac includes powerful rule language objectoriented data model flexible execution semantics several mainmemory experimental prototypes 20 recently explosion projects objectoriented active database systemsmany projects still preliminary see eg 34671011 several previous papers described language implementation application development issues related starburst rule system initial proposal starburst rule language appears 49 48 describes extensibility features starburst prototype used implementing rule system details starbursts rule priority system given 1 series papers describe rules starburst language generated automatically specifications particular applications integrity constraints considered 15 view maintenance 16 deductive databases 19 heterogeneity management 18 denotational semantics starburst rule language given 45 2 describes methods static analysis starburst rules finally 17 discusses starburst rule system extended parallel distributed database environments except short overview 46 unpublished users guide 47 first paper provide complete description final operational starburst rule system 3 syntax rule language syntax starburst rule language based extended version sql supported starburst database system 30 starburst rule language includes five commands defining manipulating rules create rule alter rule deactivate rule activate rule drop rule addition rules may grouped rule sets defined manipulated commands create ruleset alter ruleset drop ruleset describe eight commands starburst rule system also includes simple user commands querying displaying rules omit paper see 47 details commands user application initiation rule processing describe section 4 31 rule creation rules defined using create rule command syntax command create rule name table triggeringoperations actionlist rulelist rulelist name names rule rule defined table square brackets indicate clauses optional clause specifies causes rule triggered rules triggered three relational data modification operations inserted deleted updated updated triggering operation may include list columns specifying updated without column list indicates rule triggered updates column rule specifies one triggering operations clause specified operations rules table trigger rule clause specifies condition evaluated rule triggered rule condition expressed unrestricted select statement starbursts sql condition true select statement produces least one tuple clause may omitted case rules condition always true note using unrestricted sql select statement condition part rule equivalent using unrestricted sql predicate sql predicate transformed equivalent sql select statement dummy table sql select statement transformed equivalent sql predicate using exists clause specifies list actions executed rule triggered condition true action may database operation including data manipulation commands expressed using starbursts sql select insert delete update data definition commands eg create table drop rule rollback actions executed sequentially order listed optional precedes follows clauses used specify priority orderings rules rule r 1 specifies rule r 2 precedes list indicates rules triggered time r 1 considered first ie r 1 precedes r 2 specifies r 2 follows list indicates rules triggered time r 2 considered first cycles priority ordering permitted rule conditions actions may refer arbitrary database tables also may refer special transition tables four transition tables inserted deleted new updated oldupdated rule table specifies inserted triggering operation transition table inserted logical table containing tuples inserted causing rule triggered similarly deleted transition table new updated contains current values updated tuples oldupdated contains original values tuples 1 transition table may referenced rule corresponds one rules triggering operations note starburst rules include row option option triggering operations readers may familiar options commercial sqlbased trigger systems 3234 neither option appropriate context rules evaluated arbitrary transitions issue addressed section 8 32 rule commands components rule changed rule defined done using alter rule command syntax command alter rule name table actionlist rulelist rulelist rulelist 1 rule triggered updated column transition tables newupdated oldupdated contain tuples column updated rule triggered updated particular columns transition tables newupdated oldupdated contain entire tuples least one specified columns updated precedes follows clauses command use syntax corresponding clauses create rule command clause specifies new rule condition replaces existing one similarly clause specifies new list actions replaces existing list precedes follows clauses specify rules added existing precedes follows lists nopriority clause used remove priority orderings notice clause rule may altered change triggering operations rule must dropped recreated restriction due implementation details existing rule deleted issuing drop rule command drop rule name table sometimes useful temporarily deactivate rules particularly debugging pur poses rule deactivated triggered actions executed even triggering operations occur deactivated rule behaves rule dropped except remains system easily reactivated rule deactivated issuing command deactivate rule name table reactivate rule deactivated following command issued activate rule name table 33 rule sets provided basic facility starburst rule system grouping rules sets rule sets used structure rule applications conjunction process ruleset command described section 43 2 rule set defined using create ruleset command create ruleset name rules added deleted rule set using alter ruleset command alter ruleset name rulelist rulelist rule may number rule sets including none set may contain number rules rule set deleted issuing command drop ruleset name 2 rule sets might also used group rules purposes shared priorities activationdeactivation multiple rules inheriting common components features provided current starburst rule system 4 semantics rule execution section explain semantics rule execution starburst including relationship rule processing query transaction processing 3 descriptions rule behavior section assume number rules already created assume rules altered deactivated activated dropped subtle interactions transactions rules changed concurrently executing transactions discussed section 73 rules processed automatically end transaction triggers least one rule addition rules may processed within transaction special user commands issued semantics rule execution closely tied notion database state transitions hence begin describing transitions describe endoftransaction rule processing finally describe commandinitiated rule processing 41 transitions determine whether rule triggered evaluate rules transition tables based precise notion database state transition transition transformation one database state another results execution sequence sql data manipulation operations since rule processing always occurs within transaction defined respect operations performed transaction need consider issues concurrent transactions failures defining rule semantics furthermore since rules triggered data modification data retrieval execution sql select statements also need considered suppose sequence sql data modification operations insert delete andor date executed transforming database state 0 state 1 depict resulting transition rather considering individual operations creating transition rules consider net effect transitions net effect transition consists set inserted tuples set deleted tuples set updated tuples considering transition associate inserted tuple value state 1 deleted tuple value state 0 updated tuple old value 0 new value 1 tuple modified transition still appears one set net effect transition specifically 3 detailed formal treatments starbursts rule execution semantics found 4549 ffl tuple inserted updated consider insertion updated tuple ffl tuple updated deleted consider deletion original tuple ffl tuple updated consider update original value newest value ffl tuple inserted deleted consider net effect clarity use dashed arrows denote transitions result user application generated data manipulation operations use solid arrows denote transitions result rulegenerated operations example following depicts usergenerated transition followed three rulegenerated transitions rules often consider composite transitions example rule might triggered composite transition net effect transitions 1 3 depict 42 endoftransaction rule processing suppose transaction x executed suppose net effect data modification operations performed x includes least one operation triggers least one rule rule processing invoked automatically end transaction x x commits transaction x creates initial triggering transition rules executed create additional transitions may trigger additional rules may trigger rules rule action executes rollback entire transaction aborts otherwise entire transaction commits rule processing terminates rule processing consists iterative loop iteration 1 triggered rule r selected consideration triggered rule priority r details rule selection discussed section 44 2 rs condition evaluated 3 rs condition true rs actions executed step 1 rule triggered one triggering operations occurred composite transition since last time rule considered since start transaction rule yet considered illustration suppose user transaction creates transition 1 suppose rule r triggered transition 1 selected consideration condition true actions executed point rule considered state 1 triggered one triggering operations occurred composite transition r triggered one triggering operations occurred transition 2 chosen particular semantics rule execution part useful property every rule considers every change exactly 4 property illustrated following example shows composite transitions considered rule r several steps rule processing r r r r r first time rule r considered state 2 r uses changes since initial state 0 ie changes made initial user transaction subsequent execution rule r 0 second consideration state 3 uses changes since 2 r considered third time state 6 uses changes since state 3 upper arrows depict composite transitions used rule r time considered illustrating clearly r considers every change exactly finally note condition evaluation action execution contents rules transition tables always reflect rules triggering transition 4 certainly many possible choices semantics rule execution choice seems appropriate many applications however belief every choice semantics possible concoct reasonable example semantics inconvenient inappropriate recent chimera active rule system addresses issue allowing users choose number alternative semantics 14 43 rule processing commands endoftransaction rule processing sufficient many applications found cases useful rules processed within transaction example verify consistency operations executed transaction complete starburst rule system provides three commands process rules process ruleset setname process rule rulename execution process rules command invokes rule processing rules eligible considered executed behavior rule processing response process rules command identical endoftransaction rule processing particular recall previous section rule triggered one triggering operations occurred composite transition since last time rule considered since start transaction rule yet considered behavior valid even rules processed multiple times within transaction well end transaction behavior retains semantic property every rule considers every change exactly execution process ruleset command invokes rule processing rules specified set eligible considered executed behavior rule processing identical endoftransaction rule processing except case rules specified set considered execution rule processing even triggered rules eventually considered execution however endoftransaction rule processing sooner process ruleset command useful example rules used maintain integrity constraints 15 materialized views 16 case rules associated particular constraint view grouped one set whenever constraint checked view refreshed end transaction process ruleset command issued set execution process rule command invokes rule processing specified rule eligible considered executed behavior rule processing identical endoftransaction rule processing except case rules specified rule considered execution note although one rule eligible considered executed rule processing still may involve several rule executions rule triggers since process rules process ruleset process rule executable starburst commands commands may used rule actions execution rule actions results nested invocations rule processing behavior acceptable well defined may useful certain scenarios however found difficult understand frequently results infinite rule triggering 44 rule selection precedes follows clauses rules allow ordered way long cycle produced rule processing userspecified priorities influence rule selected consideration one rule triggered recall step 1 rule processing algorithm section 42 since userspecified ordering rules may partial ordering indeed ordering required still may necessary system choose multiple triggered rules selection performed deterministically using algorithm induces total ordering currently defined rules total ordering consistent userspecified partial ordering consequently also consistent ordering transitively implied userspecified ordering rule r 1 specified precede rule r 2 rule r 2 specified precede rule r 3 r 1 precede r 3 tiebreaker rules userspecified transitively implied ordering ordered based rule creation time ie r 1 ordered r 2 created r 2 unless ordering impossible given userspecified transitively implied orderings details formalization deterministic rule ordering strategy found 1 5 examples provide examples illustrate syntax rule creation semantics rule execution examples relatively simple contrived serve compactly illustrate salient features starburst rule language syntax semantics comprehensive examples making full rule application reader referred 15 use following generic employeedepartment relational database schema empempno name salary deptno deptdeptno mgrno first example rule cascade implements variation cascaded delete method enforcing referential integrity constraints rule triggered whenever managers deleted action deletes employees departments managed deleted employees deletes departments assume hierarchical structure employees departments assume employee numbers immediately reusedthat single transaction delete employee insert new employee employee number create rule cascade emp deleted delete emp deptno select deptno dept mgrno select empno deleted delete dept mgrno select empno deleted notice particular rule condition ie condition always true two actions executed order references transition table deleted shown selftriggering property rule semantics specified section correctly reflects rules recursive nature second example rule salcontrol controls employee salaries whenever employees inserted salaries updated rule checks average salary average salary exceeds 50 rule deletes inserted updated employees whose salary exceeds 80 create rule salcontrol emp inserted updatedsalary select avgsalary emp 50 delete emp empno select empno inserted union select empno newupdated salary 80 precedes cascade notice particular rule two triggering operations either trigger rule condition references transition tables inserted newupdated specified priority rule cascade consider rule processing rules defined let initial state database include six employeesjane mary jim bill sam suewith following management structure bill sam sue mary jim jane refer figure 5 suppose initial user transaction 1 deletes employee jane transaction updates marys salary exceed 80 average salary exceeds 50 rules cascade salcontrol triggered state 1 note cascade triggered deletes jane sets mary salary 80 average salary 50 deletes mary deletes bill jim deletes sam sue nothing figure 1 transitions example rules respect set fjaneg deleted employees since rule salcontrol priority rule cascade salcontrol chosen consideration condition true executes action deleting employee mary creating transition 2 salcontrol triggered state 2 rule cascade triggered composite transition since initial state transitions 1 set deleted employees fjane maryg rule cascade executes actions deleting employees departments whose manager either jane mary employees bill jim deleted creating transition 3 rule cascade triggered second time state 3 rule considers recent transition set deleted employees fbill jimg rules actions delete employees departments managed either bill jimemployees sam sue deleted finally cascade executes third time transition 4 deleted employees fsam sueg additional employees deleted 6 system architecture starburst rule language described sections 3 4 fully implemented aspects rule definition execution integrated normal database processing implementation took one womanyear complete consists 28000 lines c c code including comments blank lines 10000 semicolons along core capabilities rule management rule processing also included considerable infrastructure program tracing debugging user interaction implementation relies heavily three extensibility features starburst database system attachments table functions event queues describe extensibility features enough detail understand used rule system details extensibility features starburst found 30 ffl attachment feature designed extensions require procedures called tuplelevel database operation certain tables extension creates new attachment type registering set procedures procedure invoked attachment instance created table procedure invoked instance dropped procedure invoked instance altered procedures invoked tuplelevel insert delete update operation table one attachment instances attachment type established registering procedures instances type may created dropped altered table attachment instance created table procedure registered creation may build attachment descriptor data structure stored system provided extension whenever subsequent attachment procedures invoked ffl table function virtual table whose contents generated run time host language procedure rather stored database new table function created registering name along procedure producing tuples table procedure may perform computations long generates tuples appropriate schema table listed clause starburst select operation may table function query referencing table function processed table functions registered procedure called produce contents table ffl event queue feature designed deferred execution procedures event queue declared arbitrary procedures placed queue time executed next time queue invoked rule system uses two builtin event queues one procedures executed preparetocommit phase transaction one procedures executed case rollback figure 2 illustrates general architecture rule system showing execution modules data structures fit together interact starburst diagram starburst query processor data repository appear left ovals center column indicate execution modules rule system rectangles right represent memoryresident data structures maintained figure 2 architecture starburst rule system rule system arrow execution module data indicates execution module creates data reverse arrow indicates execution module uses data doubleheaded arrow one execution module another indicates first module calls second arrows pass originate star indicates call made extensibility feature starburst invocation arrows labeled event causing call occur tuplelevel insert delete update table one rules b reference transition table transition tables implemented table functions c evaluation rule condition execution rule action preparetocommit event queue execution process rules process ruleset process rule command execution rule definition command create rule alter rule drop rule etc data maintained rule system divided ffl rule catalog rule catalog resides database stores information currently defined rules rule sets ffl global rule information efficiency information regarding rules rule sets also stored main memory information shared user processes includes facts rules triggering operations sets rules belong priorities rules whether rules deactivated transition log highly structured log operations occurring within transaction relevant currently defined rules stored main memory called transition log since rule processing information triggering transitions extracted log log also used produce transition tables data structure local ie one transition log maintained user process 5 details transition log given section 71 ffl rule processing information also local process includes information pertinent executing rules within given transaction including rules considered rules potentially triggered given point time addition registered attachment type rule starburst table one instance attachment type least one rule defined table attachment descriptor instance contains indicator information needs written transition log operations occur table see section 71 details execution modules depicted figure 2 ffl rule definition module component processes eight rule definition commands described section 3 use rule definition generically mean command manipulates rules rule sets rule definition module responsible maintaining rule catalog updating global rule information also creates deletes modifies rule attachment instances descriptors appropriate ffl rule attachment procedures set procedures writes transition log whenever relevant table modifications occur rule attachment procedure called automatically whenever insert delete update operation occurs table least one rule 5 starburst user application corresponds one process process comprised sequence transactions ffl transition table procedures set procedures produces transition tables run time referenced rule conditions actions transition tables implemented table functions registered procedures inserted deleted newupdated oldupdated starburst four procedures produce transition tables extracting appropriate tuples transition log ffl rule execution module component responsible selecting executing triggered rules invoked automatically commit point every transaction rule may triggered also invoked whenever query processor encounters process rules process ruleset process rule command determine rules triggered transition log global rule information local rule processing information examined see operations occurred rules triggered operations case process ruleset process rule commands rule execution module considers specified subset rules rule conditions checked actions executed calling starburst query processor details rule execution given section 72 rule system also contains several components illustrated figure 2 ffl system startup whenever starburst started restarted rule system initializes global rule information rule catalog rule attachments initialized automatically starburst ffl process startup transaction cleanup process startup rule system allocates local data structuresthe transition log rule processing infor mation initially structures empty used course transaction reset endoftransaction rule processing ffl rollback handler rule system must correctly handle partial complete rollback time rule catalog attachment information rolled back automatically starburst however rule system must ensure memoryresident data structures modified undo changes made portion transaction rolled back achieved modification place appropriate undo operation rollback event queue 7 implementation features previous section described general architecture starburst rule system section cover five specific important features implementation detail transition information management rule execution concurrency control authorization error handling efficient transition information management rule execution crucial system performance concurrency control authorization error handling necessary full integration database processing 6 71 transition information attachment procedures write transition log save information query processing rule execution module determine rules triggered transition table references rule conditions actions evaluated since effect rule action execution also considered rules transition log must maintained rule processing well happens automatically since rule actions executed starburst query processor recall figure 2 semantics rule execution dictates certain time different rules may need considered respect different transitions include logical timestamp entry transition log also include rule processing information recent time rule considered transition given rule computed based entries transition log occurring time triggering operations transition table references rules determine operations information must written transition log example suppose rule r triggered inserted table reference inserted transition table necessary log times insertions occur also necessary log times deletions occur tuples previously inserted since net effect insert followed delete empty suppose r reference inserted transition table case values inserted tuples must logged addition new values updated tuples must logged tuples previously inserted since inserted transition table must contain current values tuples finally suppose r also triggered updated suppose references transition table newupdated oldupdated new values updated tuples must logged old values need logged since transition table oldupdated referenced clearly many cases consider enumerate 6 readers satisfied implementation overview provided section 6 may skip section without sacrificing flow paper set rules table composite set triggering operations transition table references computed based set information code stored tables rule attachment descriptor attachment procedures invoked use code determine information written transition log approach guarantees necessary information saved transition log data structure use transition log double hash table storing lists records record represents one tuplelevel operation contains tuple identifier operation timestamp necessary new andor old values tuple often necessary access records representing certain operation certain table occurring certain time eg tuples inserted since rule last considered hash performed operation table obtain linked list relevant records descending order timestamp sometimes necessary consider history given tuple form net effect transition eg merge updates detect deleted tuple previously inserted records tuple identifier also linked descending order lists traversed given record obtained particular tuple hashing tuple identifier developed number efficient algorithms maintaining traversing transition log structure 72 rule execution rule execution module invoked query processor whenever process rules process ruleset process rule command encountered rule execution module also must invoked commit point every transaction rules may triggered endoftransaction rule processing first time rule attachment procedure called transactionindicating relevant operation occurredthe attachment procedure places rule execution module preparetocommit event queue transaction ready commit rule execution invoked automatically 7 important advantage approach straightforward approach invoking rule execution module end every transaction overhead incurred transactions rules triggered rule processing maintain data structure called potentialrules part local rule processing information data structure contains references rules potentially triggered point time rules structure potentially 7 procedures placed preparetocommit event queue may modify database important rule execution module invoked procedures queue processing currently starburst preparetocommit procedures modify data execution order rule execution module relative queued procedures unimportant triggered conservative estimateevery triggered rule set may rules set actually triggered end transition rules triggered operations occurred transition added potential rules without considering net effect transition hence example tuples inserted table transition rules triggered inserted added potentialrules regardless whether inserted tuples subsequently deleted practice rare operations transition undone net effect potentialrules usually overly conservative however processing rule potentialrules net effect must computed verify rule indeed triggered note maintaining potentially triggered rules rather actually triggered rules compute net effect one rule cycle rule execution rather triggered rules rule fetched potentialrules consideration must chosen rule higher priority also may triggered achieved maintaining potentialrules sort structure based total ordering rules described section 44 73 concurrency control since starburst multiuser database system must ensure aspects rule system behave correctly presence concurrently executing transactions 8 transactions including triggered rules concurrency control handled automatically database system since rule conditions actions executed starburst query processor however since rules may manipulated online rule system must enforce concurrency control transactions perform rule definition ie transactions create delete modify rules rule sets examples consistency issues involving rule definition consider following scenarios ffl suppose transaction x modifies table concurrent transaction deactivates rule r r triggered x ffl suppose transaction x triggers rules r 1 r 2 concurrent transaction alters relative priority r 1 r 2 ordering used x 8 note however starburst distributed database system issues distributed access shared data main memory structures relevant ffl suppose transaction x executes process ruleset concurrent transaction adds rule r set r triggered x address issues starburst rule system ensuring transactions serializable respect data also respect rules including rule triggering rule sets furthermore ensure equivalent serial transaction schedule respect rules equivalent serial schedule respect data transactions x 1 precedes x 2 serial schedule induced starbursts concurrency control mechanism data serializability x 1 x 2 respect rules guaranteed enforcing following three consistency requirements 1 triggering consistency x 1 performs rule definition table ie x 1 way modifies rules pertaining x 2 modifies data x 2 rule processing sees effect x 1 rule definition x 2 performs rule definition table modified rule processing see effect x 2 rule definition 2 rule set consistency x 1 modifies rule set x 2 includes process ruleset processing sees effect x 1 rule set modification x 2 modifies includes process ruleset x 1 rule processing see effect x 2 rule set modification 3 update consistency x 1 x 2 modify rule rule set x 2 sees effect x 1 modification x 1 see effect x 2 modification addition starburst rule system ensures consistency within transaction enforcing following two requirements intratransaction triggering consistency transaction x modifies table x cannot subsequently perform rule definition intratransaction rule set consistency transaction x executes process ruleset operation x cannot subsequently modify rule set lastly starburst rule system ensures consistency rule ordering ordering consistency x transaction triggers rules r 1 r 2 ordering r 1 r 2 change x first time ordering used rule selection six consistency requirements ensured protocols check andor set locks data rules rule sets starburst locks acquired throughout transaction needed held transaction commits rolls back hence equivalent serial schedule transactions respect data based commit time enforce consistency requirements 1 4 follows transaction x executes rule definition command table x first checks see modified checking holds exclusive locks data rule definition command rejected otherwise x obtains tablelevel shared lock forces x wait transactions currently modifying committed disallows future modifications transactions x commits consistency requirement 2 enforced locking rule sets modifying creating altering dropping rule set transaction must obtain exclusive lock processing rule set transaction must obtain shared lock enforce consistency requirement 5 shared rule set locks cannot upgraded exclusive rule set locks consistency requirement 6 enforced locking rules rule r added data structure potentialrules recall section 72 shared lock obtained r rule definition command affects rule ordering executed create rule alter rule drop rule exclusive lock obtained every rule whose ordering relative rules affected command note even ordering unchanged rules may reversed since transitive relationships may introduced dropped prevent ordering relationships changing within transaction shared rule locks cannot upgraded exclusive rule locks consistency requirement 3 enforced automatically since rule rule set modifications reflected rule catalog rule catalog subject starbursts concurrency control mechanisms data details locking protocols proofs correctness appear 21 74 authorization authorization component starburst rule system address number distinct issues including authorization create rules given table authorization create rules given conditions actions authorization alter drop given rules authorization rule sets authorization rule execution time starburst lattices privilege types defined arbitrary database objects higher types subsuming privileges lower types example database tables highest privilege control privileges write alter attach write privileges update delete insert update delete privilege read table created creator automatically obtains control privilege table includes ability grant revoke privileges rules defined simple linear lattice privilege types highest privilege control alter privilege deactivateactivate lowest tables rules creator automatically obtains control privilege rule may grant revoke privileges create rule r table rs creator must attach read privileges 9 rule creation rs condition actions checked using creators privileges condition actions contain commands creator authorized execute create rule command rejected drop rule r table require either control privilege attach privilege control privilege r alter rule privilege alter required deactivate activate rule privilege deactivateactivate required rule processing rules condition actions executed using privileges rules creator privileges transaction triggering rule defined two privilege types rule sets control alter control subsuming alter rule sets creator obtains control privilege rule set may grant revoke privileges privilege control needed drop rule set privilege alter needed add delete rules rule set privileges rules needed add delete rule sets privileges needed execute process rules process ruleset process rule statements starburst rule system currently enforce authorization requirements users examine rules rule sets systemall rules may queried inspected starburst user clear however authorization requirements reading rules ultimately included complete active database system handling error occurs execution starburst rule definition command due eg creation cyclic priorities inclusion action creator authorized execute syntactic flaw rule definition command rejected rule processing two types errors occur error may generated evaluation rules condition execution rules action rules may trigger indefinitely first case error generated query processor executes rule condition action rule system terminates rule processing aborts current transaction second case rule system includes timeout mechanism number n triggered rules considered rule processing terminates transaction aborted limit n established system administrator 9 general attach privilege table indicates user permitted alter performance table require read privilege table since rule r implicitly read contents transition tables without accessing directly 8 conclusions retrospective starburst rule system fully implemented extension starburst prototype relational database system ibm almaden research center designed rule language flexible general welldefined semantics based arbitrary database state transitions addition usual commands manipulating rules language includes basic rule set facility application structuring includes commands processing rules within transactions addition automatic rule processing occurs end transaction rule processing starburst completely integrated database query transaction processing including concurrency control authorization rollback recovery error handling learned number interesting lessons careful development starburst rule language thorough implementation experiments running system variety rule applications respect design starburst rule language make following observations ffl basing semantics arbitrary transitions offers considerable flexibility generally provides clean execution behavior although users may feel initially better understand tuple statementlevel rule triggering surprising anomalies behavior arise starburst semantics hand simple rule processing tasks tuplelevel statementlevel rule processing usually behave user expects natural efficient starburst approach 10 note also starbursts transition oriented semantics prohibits natural option rule triggering 34 however specifying may result surprising rule interactions behavior avoided starbursts rule semantics ffl rule processing based iterative loop starburst intuitive seems sufficient applications relatively easy implement hence believe complex recursive rule processing algorithms used eg postgres 42 hipac 20 probably worthwhile ffl complex conflict resolution policies used ops5 9 ariel 31 seem appropriate active rule applications simple relative priorities appear sufficient implemented easily efficiently ffl significant drawback starburst rule language opposed number active rule languages lack language facility passing data rules consider eg rule performs simple modification inserted tuple doesnt trigger rules condition action note data associated triggering operations available implicitly transition tables however data satisfying rules condition directly available rules action practice users often write starburst rules explicitly repeat condition subquery action omit condition altogether place action language feature referencing action data satisfying condition suggested 15 would useful ffl convenient extension rule language would allow rules triggered operations multiple tables fact feature effect semantics rule language 49 omitted due additional implementation effort another useful extension would allow rule actions invoke arbitrary host language procedures currently behavior simulated starbursts foreign function feature sql 30 host language procedures cannot called directly rules ffl rules starburst cannot triggered select operations although reason partly implementationdependent attachment extensibility feature available select operations number semantic issues would also need addressed add select triggering operation whether rules triggered nested select expressions respect implementation starburst rule system make following observations ffl extensibility features starburst offered dramatic head start implementing rule system three extensibility features usedattachments event queues table functionswere used heavily significant additional coding would required features available ffl number mainmemory data structures maintained rule system recall section 6 much work associated rule processing involves manipulating structures rule processing fast however structure needed recovery procedures coded operations case complete partial rollback certain important aspects rule processingsuch number rules number tuplelevel operations relevant rules within given transactionare limited fact structures reside memory system would easier implement would scalable mainmemory structures implemented persistent recoverable database objects unfortunately one things starburst offer flexible facility objects performance desired rule operations ffl integrating rule processing directly database system opposed loosely coupled approach offers important advantages performance functional ity loosely coupled approach would impossible fully address issues concurrency control authorization recovery addition significant overhead would incurred need intercept user commands andor database results client level rather within database system although may unappealing sometimes impossible modify extend core code database system appears necessity one wishes build fully integrated active rule system acceptable performance ffl initial performance measurements revealed vast majority time spent rule processing fetching compiling executing rule conditions actions starburst unable store precompiled queries rule conditions actions needed compiled time executed conditions actions stored compiled form main cost rule processing condition evaluation action execution rather aspects pf rule processing finding triggered rules selecting highest priority rule etc lead us believe performance improvements made streamlining rule management rule processing algorithm rather finding ways optimize condition evaluation action execution 9 applications future work starburst rule system used platform developing number applications investigating various issues active database systems used starburst rules enforcing integrity constraints 15 maintaining materialized views 16 implementing deductive databases 19 well several ad hoc applications studied starburst rule system supported tightlycoupled distributed database environment full distribution transparency 17 also studied starburst rule system used manage semantic heterogeneity across looselycoupled databases 18 predicting understanding behavior active database rules important facet application development developed methods statically analyzing sets starburst rules analysis methods determine conservatively whether set rules guaranteed terminate whether rules guaranteed produce unique final state 2 researchers used starburst rule system basis studying implementing secure active databases 40 dynamic integrity constraints 2843 automaticallygenerated compensating actions static constraints 13 although consider starburst rule system complete time several directions may exercised improved extended ffl currently obtained initial cursory performance results would like elaborate results requires developing mechanism accurate measurements deriving sufficient suite test applications ffl explained section 6 rules condition evaluated executing query database incorporate one important optimization namely rule condition understood true soon first tuple query found however support incremental condition monitoring methods used ariel 44 ops5 936 explored incremental condition evaluation context starburst 5 plan explore runtime optimization methods well interested also compiletime optimization methods static combination multiple rules related conditions andor actions ffl statementlevel rule processing achieved starburst rule system issuing process rules command statement would useful provide convenient mechanism example could predefine system rule set called statement users would add rules set system would automatically execute process ruleset statement statement similar mechanism could provided tuplelevel rule processing ffl currently starburst rule system includes basic facilities rule tracing interaction rule processing application programs areas debugging application interfaces offer considerable opportunities useful extensions addition starburstspecific areas future work hope expect starburst rule system continue used basis research active database systems acknowledgments thanks go stefano ceri bobbie cochrane shel finkelstein bruce lindsay made important contributions one aspect another starburst rule system r maintaining priorities production rule system behavior database production rules termination rule based language deductive oodbs new perspective rule support objectoriented databases using delta relations optimize condition evaluation active databases model active object oriented database developing reactive objectoriented databases index support rule activation programming expert systems ops5 introduction rulebased programming integrating objectoriented data modeling rulebased programming paradigm active rule management chimera automatic generation production rules integrity maintenance consolidated specification chimera deriving production rules constraint maintenance deriving production rules incremental view maintenance production rules parallel distributed database environments managing semantic heterogeneity production rules persistent queues deriving incremental production rules deductive data research project active issues integrating active rules database systems relational production language production language relational databases incremental database rule processing paradiser rule management objectoriented databases uniform approach dood ranch asu integrating active integrating active concepts objectoriented database system ode active database constraints triggers deriving integrity maintaining triggers transition graphs implementing language specifying active database execution models starburst midflight dust clears rule condition testing action execution ariel database language sql3 x3h294080 sou003 supporting semantic rules generalized eventtrigger mechanism understanding new sql complete guide active rules based objectoriented queries advances rete pattern match ing architecture transforming passive dbms active dbms implementing large production systems dbms environment concepts algorithms implementing high level active rules top relational dbms multilevel secure rules integrating multilevel active data models postgres rule manager rules implementing temporal integrity constraints using active dbms performance comparison rete treat algorithms testing database rule conditions denotational semantics starburst production rule language starburst rule system language design starburst rule system users guide implementing setoriented production rules extension starburst tr ctr stefano ceri florian daniel federico facca modeling web applications reacting user behaviors computer networks international journal computer telecommunications networking v50 n10 p15331546 14 july 2006 david botzer opher etzion selftuning relationships among rules components active databases systems ieee transactions knowledge data engineering v16 n3 p375379 march 2004 angela bonifati stefano ceri stefano paraboschi active rules xml new paradigm eservices vldb journal international journal large data bases v10 n1 p3947 august 2001 goce trajcevski peter scheuermann herv brnnimann agns voisard dynamic topological predicates notifications moving objects databases proceedings 6th international conference mobile data management may 0913 2005 ayia napa cyprus goce trajcevski peter scheuermann reactive maintenance continuous queries acm sigmobile mobile computing communications review v8 n3 july 2004 alan abrahams david eyers jean bacon asynchronous rulebased approach business process automation using obligations proceedings 2002 acm sigplan workshop rulebased programming p93103 october 05 2002 pittsburgh pennsylvania barbara catania elisa bertino static analysis logical languages deferred update semantics ieee transactions knowledge data engineering v15 n2 p386404 february