probabilistic adaptive direct optimism control time warp distributed memory environment communication overhead time warp induced rollback procedure due overoptimistic progression simulation dominating performance factor limit optimism extent justified inherent model parallelism optimism control mechanism proposed maintaining history record virtual time differences time stamps carried arriving messages forecasting timestamps forthcoming messages probabilistically delays execution scheduled events avoid potential rollback associated communication overhead antimessages investigating statistical forecast methods express central tendency arrival process demonstrate arrival processes context time warp simulations timed petri nets certain predictable consistent arima characteristics encourage use sophisticated recursive forecast procedures based models adaptiveness achieved two respects synchronization behavior logical processes automatically progressing conservatively blocking adequate specific simulation model ii communicationcomputation speed characteristics underlying execution platform b introduction distributed simulation event occurrences set logical processes lps executing asynchronously parallel generates sequence event occurrences sequential simulator would produced provided every lp simulates events nondecreasing timestamp order although sufficient always necessary obey local causality constraint lcc 13 events may independent respect impact simulation future concurrent events generally therefore distributed discrete event simulation ddes insures correctness partial event ordering produced lps executing concurrently consistent total event ordering generated hypothetical sequential discrete event simulation 17 time warp tw 16 ddes protocol opposed conservative chandymisrabryant cmb protocols optimistically ignores lcc letting causality errors occur employs rollback mechanism recover causality violations immediately upon detection rollback procedure relies recon structability past states guaranteed systematic state saving policy corresponding state reconstruction procedures performance inefficiencies caused potentially excessive amounts memory consumption storing state histories waste cpu cycles due overoptimistically progressing simulations eventually rolled back present cmb protocols hand cmb protocols need verify whether safe process event respect lcc tw reliant information coming simulation model eg lookahead furthermore severe performance degrade imposed cmb mandatory deadlock management strategy relieved tw natural way since deadlocks due cyclic waiting conditions messages able make unsafe events safe process exploiting information timestamps never occur another argument relaxation lcc tw hope better model parallelism exploitation acceleration simulation cmb since blocking avoided despite convincing advantages tw devoid shortcomings rollback mechanism known prone inefficient behavior situations event occurrences highly dispersed space time imbalanced event structures yield recursive rollback invocations long cascades lps eventually terminate excessive amount local remote state restoration computations consequence annihilation effects diffused widely space far ahead simulated time consuming considerable amounts computational memory communication resources contributing simulation pathological behavior basically due unlimited optimism assumption underlying tw often referred rollback thrashing distributed memory multiprocessor environments clusters risc workstations ie environments cpu performance significantly tempered communication performance rollback thrashing cause excessively higher performance degrades absolute terms compared shared memory allcache systems 5 outstanding practical interest tw implementations environments therefore reduction communication overhead induced protocol presenting related work optimism control tw section 2 empirical observations distributed memory environment cm5 demonstrate communication behavior tw dominating performance factor section 3 show optimism tw related parallelism available simulation model extracted observing message arrival patterns along input channels lps discussing straightforward statistical methods forecasting next messages timestamp selfadaptive characterization procedure worked based arima autoregressive integrated moving average stochastic processes enable direct probabilistic selfadaptive optimism control mechanism background attempts limit optimism tw order overcome rollback overhead potentials appeared literature sokol briscoe wieland 26 propose restrict optimistic simulation advancements time windows move simulated time moving time window mtw protocol events e occurrence time allowed simulated time window delta postponed next time window events e e 0 ote ote 0 therefore simulated parallel delta naturally protocol favors simulation models low variation event occurrence distances relative window size implicit assumption event occurrence times distributed approximately uniformly space obliviousness respect potentially good optimism beyond upper window edge well difficulty determine delta enough events admitted make simulation efficient main criticisms approach opposed mtw breathing time bucket btb 27 employs adaptable breathing time cycles variable widths time buckets time bucket contains maximum number causally independent events determined event horizon ie minimum occurrence time event scheduled previous bucket lp riskfree executions attained combining optimistic windowing mechanism conservative message sendout policy necessity antimessage avoided restricting potential rollback affect local history records srads 8 breathing time warp btw 28 protocol combines features mtw btb based belief likelihood optimistically processed event subject future correction increases distance timestamp global virtual time gvt therefore sendout event messages timestamps distant gvt delayed windowbased optimism control mechanisms appeared literature bounded time warp btw 30 similar mtw divides virtual time equally sized intervals depletes events every interval new intervall started mimdix 19 probabilistically invokes resynchronization lps regular time intervals prevent lps excessive virtual time advancement windowbased throttling 25 also used intent preventing lps executing far addition aggressive objects whose work rolled back frequently penalized temporary suspension penaltybased throttling protocol described reiher jefferson adaptive sense reacts selfcorrecting way observed execution behavior possibility adapting synchronization behavior ddes protocol desirable point within spectrum pure optimistic pure conservative approaches already seen 24 several contributions appeared along ideas one earliest adaptive tw concurrency control algorithm atw proposed ball hyot 3 atw temporarily suspends event processing observed certain number lcc violations past ie stop lvt advancement time period called blocking window bw size bw determined based minimum function describing wasted computation terms time spent conservatively blocked mode fault recovery mode induced tw rollback mechanism 12 optimal cpu delay interval computed explicit cost model tradeoff optimistically progressing conservatively blocking local simulation established topological message arrival history map encoding realtime virtualtime increments decrements per message arrival empirically observed simulation probabilistic ddes protocol 10 makes use event causality probabilities avoid communication overhead tw probabilistic throttling assuming occurrence e lp probabilistically causal future event changes state variables read e 0 cases conservatively blocking safe process e 0 lp j hinders producing potentially good simulation work clearly repeated executions e e 0 sequences optimistic strategy could gained concurrent execution e 0 e time protocol exploits locally per channel basis every lp probability forthcoming message straggler taking account implicit probabilistic causalities also architectural characteristics target platform like cpu speed communication latencies local adaptive protocol lap proposed hamnes tripathi 14 based average lvt increments average interarrival times l 2 figure 1 lp simulation stochastic petri net cpu time simulated time tries estimate real time blocking window order prevent deadlocks also break blocking conditions early null messages needed lap according rajaei et al 23 classification possibilities regulate degree aggressive ness risk ddes lap falls category switching seamlessly optimistic conservative schemes whereas previously described adaptive protocols limiting optimism tw atw probabilistic protocol categorized direct optimism control mechanisms opposed indirect optimism control individual lps lvt progression throttled via availability free memory adaptive memory management amm scheme proposed das fujimoto 7 attempts combination controling optimism automatic adjustment amount memory order optimize fossil collection cancelback 15 rollback overheads cancelback memory management scheme allows memory spaces used storing recent state input outputhistory lp reclaimed selectively tw exhausted available storage resources fossil collection relocates memory used storing state information definitely reused rollback procedure due gvt progression shown 1 fossil collection tw cancelback always relocate enough memory continuation simulation given certain minimum amount memory physically available 18 point tw performance poor due frequent cancelbacks increasing amount available memory reduce cancelback frequency absolute performance positive increments time increase rollback frequency rollback overhead eventually start overwhelming gain reduced cancelback overheads amm controling amount available memory automatically adjusts knee point optimal tw performance 3 reducing communication overhead tw demonstrate potential gain adaptive direct optimism control mechanism tw consider stochastic petri net spn simulation model used 10 spn figure 1 comprises two places p1 p2 two transitions t1 t2 exponentially distributed enabling delays t1 exp1 together infinite server enabling semantics spn describes continuous time discrete event dynamic system inherent model parallelism 9 occurrence time ott1ffl t1 ith token determined exponential variate depend presence absence token serve multiple tokens simultaneously thus expressing notion parallelism among individual tokens example chosen since smallest possible spn structure able express concurrency among event occurrences degree model parallelism scaled arbitrarily simply adding tokens spn time arbitrary load imbalance imposed mismatching timing parameters t2 order exploit model parallelism distributed discrete event simulation spn model decomposed two spatial regions assigned two lps lp1 lp2 depicted figure 1 two directed communication channels replacing spn arcs t1 p2 t2 p1 thus interconnecting lp1 lp2 required carry messages containing time stamped tokens generated firing transition k number tokens p destination place copy local virtual time lvt lp instant firing transition produced token call tokenmessage since purpose much like spn arc propagate tokens together timestamp one spatial spn region another one resides remote lp sample spn firing scheduled transition internal event always generates external event namely message carrying token hand receipt event message external event always causes new internal event receiving lp namely scheduling new transition firing local event list evl depositing tokens time consistent way target places requires employment ddes synchronization protocol cmb tw based protocols studied literature synchronize execution spatially decomposed pns 29 2 22 6 21 31 tw simulation spn cm5 implemented tw lazy cancellation rollback mechanism concurrent execution pns cm5 using cmmd message passing li braryexecuting spn simulation model figure 1 cm5 empirically explains communication major performance pitfall tw implementations distributed memory multiprocessors figure 2 spn one token initially assigned place contain model parallelism two lps blocked half time two tokens spn little model parallelism lp simulation engines overwhelmed communication 1 ratio execution time used processing events less 12 rest wasted communication data structure manipulations blocking due lack events number tokens degree parallelism percentage cpu time spent communication lp1 number tokens degree parallelism percentage cpu time spent communication lp2 number tokens degree parallelism percentage cpu time spent event simulation lp1 number tokens degree parallelism percentage cpu time spent event simulation lp2 number tokens degree parallelism percentage cpu time spent rollback lp1 number tokens degree parallelism percentage cpu time spent rollback lp2 number tokens degree parallelism percentage time waiting messages lp1 number tokens degree parallelism percentage time waiting messages lp2 figure 2 tw performance lazy cancellation lp 1 lp 2 cm5 scheduled local evl situation improves tokens system parallelism degree 25 cpu time used executing internal events still communication overhead 40 investigate impact lcc violations due inhomogeneous lvt increments communicating lps communication overhead induced rollback example control balance lvt progress parameter balanced situation service t1 takes average long setting twice fast respect lvt progression t2 ie enabling time twice long higher expected enabling time 1 tokens reside p1 steady state enabling t1 charts rollback costs figure empirically show smaller 1 rollbacks induced lp2 imposing increasing rollback overhead cpu executing lp2 clearly lp small lvt increments followed lp high lvt increment frequently force successor rollback given work event processing speed waiting time charts figure 2 observed shift load happens lp1 lp2 increasing 1 giving lp2 chance spend cpu time event execution unfortunately expense lp1 forced idle load tokens consequence order improve overall tw perfor mance rollback consequently communication overhead avoided far possible reducing absolute number rollbackscommunications main issue optimism control mechanism context moreover since event structure general simulation problems cannot assumed stationary whole simulation interval capability lps adapt phases different degrees optimism advisable emerging runtime demanded 32 gaining direct optimism control synchronous parallel execution sample spn illustrated table 1 step 0 lps use precomputed random variates individual future lists schedule events evl let future lists step 1 lp1 lp2 execute respective earliest internal events generating external events messages copies lvt sent lp etc beginning step 3 lp2 lvt end step 2 faces straggler outoftimestamporder message h1p2 037i input queue iq next element lp2 future list 042 since effect straggler local future lp2 ie ht2037 042i lazy rollback strategy applies rollback avoided event ht2079i executed step setting putmessage h1p1 079i generated output queue oq sent end step unfortunately step 4 new straggler h1p2 073i observed iq lp2 effect time lp2 forced roll back figure 1 top indeed lp2 step 3 generated sent h1p1 079i without considering information whether implicit optimism justified lp2 would observed received average one input message per step av erage timestamp increment 0185 might established hypothesis step 4 message expected arrive estimated timestamp 0555 timestamp previous message crement taking alarm potential rollback could avoided propagation local optimistic simulation progression eg delaying sendout h1p1 079i one step illustrated figure 1 bottom lp2 takes input message iq schedules event ht2079i evl process instead execution delayed hypothesis upon next messages timestamp verified next message h1p1 073i hypothesis dropped new event ht2078i scheduled processed next apparently two rollbacks corresponding sending antimessages could avoided applying direct optimism control scheme employs blocking empirical evidence statistical sense potential future rollback next section develop adaptive optimism control mechanism monitoring arrival process messages onthefly determines whether let simulation make full use available parallelism whether throttle optimism order prevent costly rollbacks 4 probabilistic direct optimism control indirect optimism control mechanism like amm although successful shared memory environments appears inappropriate distributed memory systems since potentially increases number rollbacks thus communication overhead instead optimism control directly via throttling simulation engine advisable distributed memory multiprocessors able directly control optimism tw lp approach monitors lvt progression incident channels ie logs timestamps messages arrive observed message arrival patterns lp formulates hypothesis timestamp next message expected arrive related statistical confidence forecast value means throttling adapts synchronization behavior presumably best tradeoff among blocking cmb optimistically progressing tw respect hypothesis current situation throttling done probabilistically sense blocking induced certain probability assume history last n message arrivals maintained lp l every input channel chkl b tsm i1 estimate timestamp forthcoming message let confidence 0 b express trust estimate lp l tw unlimited optimism ib lvt p1 evl ob rb ib lvt p2 evl ob rb tw controlled optimism ib lvt p1 evl ob rb ib lvt p2 evl ob rb table 1 reducing communication overhead probabilistic lp simulation program padoc simulation engine gvt endtime 21 arriving messages updatearrivalstatistics affects local past rollback restore earliest state beforetsm generate sendoutantimessages else chronological insertm iq 22 b ts 23 ib confidence forecastarrivalstatistics 24 tsfirstevl tsfirst nonnegativeiq delay execution else processfirstevl else processfirst nonnegativeiq 25 sendoutoutputmessages 26 fossil collectionadvance gvt od figure 3 padoc simulation engine scheduled tr transition fire next say ottr would execute occurrence tr probability piexecute htr ottri would block average amount cpu time used simulate one transition firing probability algorithm sketch padoc probabilistic direct optimism control lp simulation engine figure 3 explains details note contrast adaptive tw mechanisms compute optimal delay window blocking simulation engine 3 14 12 padoc engine blocks fixed amount real time ie loops blocking decision incrementally establishing longer blocking periods discretization blocking win dow padoc preserves possibility use information arrival process encoded timestamps mes executed transition firing scheduled transition firings tokenmessage arrival simulated timed 1 n3 1 n ts ts n1 n n2 ts figure 4 message timestamp forecast sages arrive blocking phases algorithms based variable size blocking windows fail make use intermediate message arrivals 41 incremental forecast methods predicting timestamp forthcoming message observed n arrivals explained figure 4 basically statistically analyzing arrival instants tsm igamman1 tsm igamman2 estimate difference timestamps two consecutive messages note ffi k negative igammank straggler choice size observation history n well selection forecast procedure critical performance padoc engine two reasons achievable prediction accuracy ii computational space complexity forecast method generally larger n information arrival history available statistical sense considering much arrival history least theoretically give higher prediction precision also consume memory space intuitively complex forecast methods could give better predictions trivial ones liable intrude distributed simulation protocol unacceptable amount computational resource consumption therefore incremental forecast methods low memory complexity recommended ie procedures computed previous forecast actual observation tsm i1 oc instead ocn time arithmetic mean observation window imposed arrival history observed ffi j considered message number arrivals lp2 50 100 150 200 250 300 message number arrivals lp2 50 100 150 200 250 300 message number arrivals lp2 50 100 150 200 250 300 message number arrivals lp2 figure 5 arrival processes observed lp 2 cm5 observed mean b estimate timestamp forthcoming message recursive form upon availability next time difference tsm i1 computed incrementally exponential smoothing arithmetic mean based forecast considers observations equally impor tant possibility express history exponentially weighted sum eg give recent history higher im portance past history exponential smoothing observation vector smoothing factor ff delta case incremental form high weight last observation potentially yields high variation forecasts ff 0 causes intense smoothing making forecasts less reactive shocks arrival process use smoothing factor periodically readjusted simulation median approximation virtual time increments general cannot assumed yield nonskewed unimodal distribution values implicitly assumed arithmetic mean used index central tendency particularly frequency time increments pdf skewed left arithmetic mean higher value median would thus overestimate next messages timestamp consequence would pessimism blocking policy forecast based median would use estimate cannot computed incrementally new timestamp increments inserted sorted list ffi find value median afterwards approximation median developed following execution simulation rollback time lp1 lp2 lp1 lp2 dd tw 046 127 137 58 161 twa 062 237 410 68 54 tws 096 194 377 68 84 twa 064 198 418 58 68 tws 066 171 392 60 82 twa 117 243 435 58 95 ss tw 091 110 150 117 153 twm 057 166 376 73 69 tws 103 198 379 74 96 twa 091 231 416 68 93 table 2 tw cm5 supplement let mean constant every distribution eg exponential distribution c find forecast based median approximated arithmetic mean performance three straightforward forecast methods arithmetic mean exponential smoothing approximated median applied spn figure 1 4 tokens initial marking different timing scenarios summarized table 41 generated using nmap virtual processor simulation tool cm5 performance settings 11 scenario referred dd t1 t2 obey deterministic imbalanced timing second case sd stochastic timing t1 exp1 t2 deterministically timed 8 similarly ds represents exp18 note case lvt progression lp2 average eight times higher lp1 causing significant load imbalance rollback communication overhead forecast confidences kept constant refers tw unlimited optimism sample arrival process traces collected cm5 depicted figure 5 lag acf 0206lag 0206lag 0404lag 0206lag partial acf lag 0402lag 04 02lag 03 02 figure autocorrelation partial autocorrelation function arrival processes lp 2 cm5 two lps dd left sd halfleft ds halfright ss right since timestamp differences dd toggle behavior represents neutral case methods eg method repeatedly overestimates underestimates next timestamp thus cannot gain tw long run overall execution time grows however since forecasting intrudes simulation engine stalls cpu cycles first quartuple lines table 41 explains order intrusion induced various methods case sd second quartuple lines table 41 method finds highest chances avoid rollbacks outperform u ds method finds absolute stress case yielding slowdown compared u arrival process two stochastic components ss outperform u important observation table 41 methods able increase percentage overall execution time spent simulating events communication overhead induced thus optimism control schemes even promising distributed memory environments communicationcomputation speed ratio smaller cm5 eg cluster risc workstations main drawback forecast schemes cannot cope transient patterns arrivals respect central tendency timestamp increments arrival patterns show certain regu larities least correlation time increments yield stress cases seen therefore forecast methods able identify correlations predict next events maximum likelihood correlations demanded 42 arima forecasts section follow idea considering arrival process unknown stochastic processes fx series arima arima arima arima dd sd ds ss aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa simulation aaaa aaaa communication aaaa aaaa rollback aaaa aaaa blocking figure 8 tw arima rs6000 cluster stances random variable specifically x empirically observed timestamp differences transformed series mean ffi fx g statistically dependent variables arrival process modeled integrated autoregressive moving average process eg 4 r dfold differencing operator b backward shift operator defined b means eg 2 process assumed stationary armap q arimap0 q composed pure autoregressive process order p arp explaining dependency white noise random error pure moving average process order q maq explains series iid white noise errors ffl ey looking arrival process obtained cm5 lp2 spn figure 1 figure 5 corresponding autocorrelation acf partial acf fig ts ts ts ts ts probability delay probability delay figure 7 probabilistic direct optimism control arima forecasting ure 6 find high positive correlation every fourth lag dd figure 6 left obviously due four tokens spn case sd figure 6 halfleft leads us hypothesize arrival process ar since find acf dying oscillating damped exponential fashion also intuitive deterministic component process dominates stochastic one t1 exp1 ds figure 6 halfright gives evidence suitable representation arrivals process becuase acf single spike lag 1 pacf dies etc automated characterization arrival process arimap q process classical boxjenkins procedure adapted 1 model order identification first order arima model p q identified since theoretical partial autocorrelations kgamma1 k lag k vanish k p pure arp order process approximated empirical partial autocorrelations rkgamma1 k similarly pure maq theoretical autocorrelations k q empirical data auto correlations rk used approximate order combined armap q process akaikecriterion ie combination p q minimizes aicp log boe 2 approximates order boe 2 pq maximumlikelihood estimate variances oe 2 ffl underlying white noise error akaikecriterion general form arimap q processes indeed intuitively recognized find best order fittings eg sd arima3 0 0 ds arima0 0 4 2 model parameter estimation next step parameters 1 oe determined maximum likelihood estimates empirical data ie estimates minimize square sum 2 residuals tgammaq used model parameters 3 model diagnosticsverification well know method validate model estimates q portmonteau lackoffittest tests whether residuals realizations white noise process confidence level 1 gamma ff test used measure quantify trust model consequence forecast 4 forecast finally recursive durbinlevinson method provides algorithm onestep kstep best linear prediction b confidence level padoc simulation engine figure 3 step 24 executes next scheduled transition firing probability gammabts otherwise cpu blocked time units figure 7 explains blocking probability 2 related confidence level higher confidence steeper ascent delay probability lvt progresses towards b ts steepness sigmoid function figure 7 left higher figure 7 090 note also lvt progression lp j surpassed estimate b ts figure 7 right delays become probable expressing increasing rollback hazard lp runs general observation 1 padoc imposes synchronization behavior close cmb whereas 0 optimism unlimited plain tw moreover periodically rebuilding arima model padoc scheme adapts lp synchronization behavior directly reflecting inherent model parallelism also copes transient arrival processes clearly arima approach optimism control much expensive space execution time previous methods since implementation steps 1 3 box jenkins procedure still way provided simulator arima model computed offline performance comparison reported figure 8 spn figure 1 model parallelism 100 ie 50 tokens p1 p2 nmap execution rs6000 pvm 32 performance characteristics find arima based method able outperform tw approaches shown least good stress cases like dd scenario executed cm 5 revealed performance characteristics arima method whereas gained less tend consistent forecasts therefore better performance model parallelism increases whereas arima significantly sensitive model parallelism 5 conclusion probabilistic direct optimism control padoc mechanism tw distributed discrete event simulation protocol presented simulation engine temporarily blocking processing internal events avoids generation sendout messages states likely rolled back vice versa every lp tends await messages influence local causality among events high probability order avoid causality violations statistical analysis message arrival history used make forecasts timestamps future messages thus enabling every lp adapt local synchronization behavior efficient strategy respect anticipated fu ture two classes forecast methods studied estimates based weighted means efficient incremen tal procedures implemented causing negligible minor intrusion simulation engine methods arithmetic mean exponential smoothing median however cannot cope well seasonal nonstationary arrival process thus prone pathological behavior ii cost higher computational complexity sophisticated forecast methods much higher prediction precision case periodic seasonal correlated channel virtual time increments used specifically time increment process modelled integrated autoregressive moving average process arimap q probabilities delaying execution next internal event directly related confidence model approximation padoc mechanism gains adaptiveness sense independent ratio communication computation speed target platform synchronisation policy adjusted automatically point continuum tw cmb protocols appropriate parallelism inherent simulation model forecasting based arimap q models moreover makes simulation engine also able adapt transient nonstationary arrival processes acknowledgements paper elaborated author visiting university maryland supported grant academic senate university vienna use resources computer science dept cm5 umiacs gratefully acknowledged work partially supported austrian federal ministry science research grant cei gz 308926 oesterreichische nationalbank grant 5069 author wishes thank anonymous referees valuable comments preliminary version paper r effect memory capacity time warp performance time warp simulation stochastic petri nets adaptive timewarp concurrency control algorithm time series theory methods effect communication overheads time warp performance experimental study distributed simulation petri nets adaptive memory management protocol time warp parallel simulation srads local rollback concurrent execution timed petri nets adaptive logical processes probabilistic distributed simulation protocol performance oriented development spmd programs based task structure specifications estimating rollback overhead optimism control time warp parallel discrete event simulation investigations adaptive distributed simulation virtual time ii cancelback protocol storage management time warp fast concurrent simulation using time warp mechanism virtual time optimal memory management time warp parallel simulation mimdix operating system parallel simulation distributed discreteevent simulation automated parallelization timed petrinet simulations parallel simulation timed petrinets local time warp approach parallel simulation spectrum options parallel simulation limitation optimism time warp operating system mtw strategy scheduling discrete simulation events concurrent execution speedes multiplesynchronization environment parallel discreteevent simulation breathing time warp parallel simulation petri nets performance evaluation bounded time warp algorithm tr virtual time distributed discreteevent simulation time series theory methods limitation optimism time warp operating system parallel discrete event simulation virtual time ii storage management conservative optimistic systems optimal memory management time warp parallel simulation breathing time warp local time warp approach parallel simulation effect memory capacity time warp performance investigations adaptive distributed simulation effect communication overheads time warp performance adaptive memory management protocol time warp parallel simulation concurrent execution timed petri nets parallel simulation timed petrinets spectrum options parallel simulation distributed simulation petri nets performance oriented development spmd programs based task structure specifications estimating rollback overhead optimism control time warp ctr francesco quaglia restriction elastic time algorithm information processing letters v83 n5 p243249 15 september 2002 francesco quaglia vittorio cortellessa grain sensitive event scheduling time warp parallel discrete event simulation proceedings fourteenth workshop parallel distributed simulation p173180 may 2831 2000 bologna italy francesco quaglia scaled version elastic time algorithm proceedings fifteenth workshop parallel distributed simulation p157164 may 1518 2001 lake arrowhead california united states david nicol michael johnson ann yoshimura michael e goldsby performance modeling ides framework acm sigsim simulation digest v27 n1 p3845 july 1997 francesco quaglia combining periodic probabilistic checkpointing optimistic simulation proceedings thirteenth workshop parallel distributed simulation p109116 may 0104 1999 atlanta georgia united states tapas k som robert g sargent probabilistic event scheduling policy optimistic parallel discrete event simulation acm sigsim simulation digest v28 n1 p5663 july 1998 francesco quaglia event history based sparse state saving time warp acm sigsim simulation digest v28 n1 p7279 july 1998 edward mascarenhas felipe knop vernon rego minimum cost adaptive synchronization experiments parasol system proceedings 29th conference winter simulation p389396 december 0710 1997 atlanta georgia united states vittorio cortellessa francesco quaglia techniques optimizing model execution aggressivenessrisk effects based scheduling time warp proceedings 32nd conference winter simulation december 1013 2000 orlando florida kiran panesar richard fujimoto adaptive flow control time warp acm sigsim simulation digest v27 n1 p108115 july 1997 malolan chetlur nael abugazaleh r radhakrishnan p wilsey optimizing communication timewarp simulators acm sigsim simulation digest v28 n1 p6471 july 1998 edward mascarenhas felipe knop reuben pasquini vernon rego minimum cost adaptive synchronization experiments parasol system acm transactions modeling computer simulation tomacs v8 n4 p401430 oct 1998 reuben pasquini vernon rego optimistic parallel simulation network workstations proceedings 31st conference winter simulation simulationa bridge future p16101617 december 0508 1999 phoenix arizona united states samir r das estimating cost throttled execution time warp acm sigsim simulation digest v26 n1 p186189 july 1996 francesco quaglia vittorio cortellessa processor scheduling problem time warp synchronization acm transactions modeling computer simulation tomacs v12 n3 p143175 july 2002 christoper h young radharamanan radhakrishnan philip wilsey optimism event execution anymore proceedings thirteenth workshop parallel distributed simulation p136143 may 0104 1999 atlanta georgia united states bernard p zeigler doohwan kim design high level modelling high performance simulation environments acm sigsim simulation digest v26 n1 p154161 july 1996 richard fujimoto parallel distributed simulation proceedings 31st conference winter simulation simulationa bridge future p122131 december 0508 1999 phoenix arizona united states schmerler tanurhan k mllerglaser advanced optimistic approaches logic simulation proceedings conference design automation test europe p362369 february 2326 1998 le palais des congrs de paris france francesco quaglia vittorio cortellessa bruno ciciani tradeoff sequential time warpbased parallel simulation ieee transactions parallel distributed systems v10 n8 p781794 august 1999 kevin jones samir r das combining optimism limiting schemes time warp based parallel simulations proceedings 30th conference winter simulation p499506 december 1316 1998 washington dc united states samir r das adaptive protocols parallel discrete event simulation proceedings 28th conference winter simulation p186193 december 0811 1996 coronado california united states ranjit noronha nael b abughazaleh early cancellation active nic optimization timewarp proceedings sixteenth workshop parallel distributed simulation may 1215 2002 washington dc samir r das richard fujimoto adaptive memory management optimism control time warp acm transactions modeling computer simulation tomacs v7 n2 p239271 april 1997 carl tropper parallel discreteevent simulation applications journal parallel distributed computing v62 n3 p327335 march 2002 richard fujimoto parallel simulation parallel distributed simulation systems proceedings 33nd conference winter simulation december 0912 2001 arlington virginia alois ferscha adaptive time warp simulation timed petri nets ieee transactions software engineering v25 n2 p237257 march 1999 richard fujimoto parallel simulation distributed simulation systems proceedings 35th conference winter simulation driving innovation december 0710 2003 new orleans louisiana