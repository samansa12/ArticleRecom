improving nfs performance wireless links abstractnfs widely used remote file access protocol tuned perform well traditional lans exhibit low error rates users migrating mobile hosts would like continued remote file access via nfs however low bandwidth high error rates degrade performance mobile hosts using wireless links hindering use nfs conducted experiments study behavior nfs wireless testbed based experiments incorporated modifications mobile nfs client paper presents two mechanisms improve nfs performance wireless links aggressive nfs client linklevel retransmissions experiments show mechanisms improve response time 62 brings performance within 5 obtained zero error conditions b introduction mobile computing increasingly demand important part computing infrastructure near future use wireless links gives mobile user new freedom flexibility unfortunately since applications reliable transport protocols optimized wired networks static hosts suffer poor performance used wireless systems performance wireless links currently limited low bandwidths high error rates temporary disconnections high latencies protocols applications must adapted accommodate characteristics order provide acceptable performance mobile users addition transmission limitations mobile users constrained limited disk space unable store data local disks users often must fetch files servers wired network via wireless links network file system nfs protocol widely used wired lans provide mechanism remote distributed file access sgk users migrating mobile hosts stationary workstations want continue use nfs access files however bursty errors higher error rates prevalent wireless media pose performance problems mobile applications use nfsmounted files work supported part nsf grant ccr 9318933 ibm equipment grants novell nfs usable inbuilding wireless networks even presence interference loss limit scope wireless lan networks bandwidths order 1 mbps nfs designed faster physical networks order 10 mbps exhibit rare random errors therefore packet losses attributed either network congestion server failure nfs clients backoff retry request waiting predetermined time period wireless links packet losses usually due burst errors rather network congestion server failures burst periods order hundred millisecondsbbkt96 response losses nfs clients backoff unnecessarily long wait periods leading severe performance degradation nfs improvements needed adversely affect existing wired infrastructure static hosts servers studying behavior nfs wireless testbed implement several mechanisms improve nfs performance measure effectiveness mechanisms wide range error behaviors based studies use smaller block sizes hybrid linear backoff result aggressive nfs client also analyze linklevel retransmissions mechanism improve performance experimental results show mechanisms dramatically improve nfs performance reduce response times 62 without requiring modifications nfs server techniques achieve comparable performance gains several mobile hosts changes incorporate simple achieve substantial performance im provement making nfs wireless links feasible option changes wireless nfs clients require changes server static nfs clients simplicity solution highly complex protocol stack crucial changes suggest general applied data file transfer protocols rest paper organized follows section 2 discusses background related work section 3 presents approach improving nfs performance section 4 describes testbed error model used experiments section 5 presents results experiments finally section 6 summarizes paper presents ideas future investigation background related work nfs provides transparent remote file access heterogeneous networks since nfs usually implemented udp must provide reliability mechanisms versions nfs tcp use tcp reliability mechanisms nonstandard potentially incompatible versions nfs udp ease recovery robustness nfs servers stateless maintain client information therefore nfs clients must initiate communication nfs server sending requests service server responds acknowledgment requested data client receive server ac knowledgment client responsible retrying requests using timeout retransmission polices previous research area concentrated improving nfs performance wired lans tcpip performance wireless media developing new file systems mobile computers studies discuss nfs performance wireless links results provide useful insights specific problem considered paper relation studies research discussed following paragraphs performance nfs traditional wired lans improved using server reply cache jus89 using write gathering improve write throughput jus94 allowing larger 8kb block sizes allowing asynchronous writes pjs 94 modifications improve nfs performance nfs server would significantly help performance nfs wireless environment bottleneck mobile nfs client wireless link transmission traditional improvements use larger block sizes actually detrimental effect lossy wireless links degrade nfs performance mobile hosts diskcaching implemented andrew file system afs sat90 improve remote file access performance coda ks92 later version odyssey snkp94 little work hhrb92 successors afs use diskcaching support disconnected intermittent operation although prefetching diskcaching useful wireless clients decrease time user spends waiting file transfers solve problem poor throughput low wireless link utilization cases file must obtained server study afs low bandwidth network 96 kbps shown importance using dynamically adjustable parameters quickly adjust changes roundtrip times losses bhh94 1 mbps lan environment consider use dynamic parameters less critical although offers additional improvement cost added complexity considered using nfs implementation tcp instead udp unfortunately nfs tcp implementations nonstandard 44bsd tcp implementations work nonbsd servers insure mobile hosts interoperate nfs servers use nfs udp thus tcp improvements directly used improving nfs improves throughput using available bandwidth efficiently uses system clock accurately calculate roundtrip times wait coursegrained timeouts also tries avoid loss due congestion changing congestion window based actual expected throughput values nfs approach also responds quickly losses uses simpler method nondynamic parameters fast retransmission approach ci94 improves tcp performance notifying transport layer mobile host motion soon cellswitch handoff complete avoid initiating congestion control policies approach addresses mobility poor performance caused burst errors wireless link tcp split connection approaches yb94 bb95a basestation 1 buffers packets sent mobile hosts vicinity basestation retransmits lost packets prevent endtoend retransmission mrpc approach bb95b variation tcp split connection approaches seeks improve performance separating connection rpc level gro88 approaches disadvantage high buffer requirements complex migration algorithm consistency problems increased load basestation file systems high consistency requirements would vulnerable split connection approaches although nfs uses rpc mrpc approach would require modifications rpc nfs code client server snoop approach bsak95 agent base station monitors tcp packets caches unacknowledged segments cached packets snoop agent suppresses basestation bridge wired wireless segments network duplicate acknowledgments indicate packet loss retransmits lost packets approach preserves tcp semantics improving performance larger buffer requirement requires complex changes linklevel retransmissions proposed improve performance wireless links addition bdsz94 presents simulates media access protocol provides reliability wireless links mechanisms aim concealing losses wireless link higher layers discussed following section 3 solution approach interests interoperability static hosts attempt towards enhancing performance limited modifications made machines supporting wireless link nfs servers cannot modified accordance requirement solution approach requires modifications mobile nfs client wireless device drivers studying nfs wireless links noted several factors cause poor performance first nfs uses large block sizes usually 8192 bytes decrease overhead involved requesting sending segment data blocks must fragmented ip layer sent physical link maximum transmission unit mtu 1500 bytes single lost fragment causes retransmission entire block error prone wireless links leads many retransmissions avoided using smaller block sizes second nfs feature causes poor performance exponential backoff algorithm used nfs clients occurs block requested client lost delayed due network congestion server overload exponentially increasing timeout periods appropriate cases client waits server free congestion decreased wireless networks burst errors wireless link cause losses burst errors order hundred milliseconds much shorter typical server failure congestion period exponential backoff constitutes overreaction mobile nfs client would achieve better performance using linear backoff reverting exponential algorithm case repeated losses first losses retransmitted short linearly increasing timeout period subsequent losses exponentially increasing timeout values sense inverse congestion control mechanisms proposed jac88 addition improvements nfs client optimizations made device driver using linklevel retransmissions many wireless device drivers implement good retransmission policy reservation protocol guard frequent physical layer errors leads bad link utilization triggers detrimental behavior unnecessary backoff higher level protocols applications involved using linklevel retransmissions dcy93 pal 95 bbkt96 robust wireless link would shield higher layers preventing overreacting errors since constrained work within current hardware protocol stacks must develop linklevel reliability current hardware includes part mac protocol rather implementing entire mac protocol one proposed bdsz94 considered buffering ip packets basestation running tcp connection mobile basestation udp packets would constructed relayed nfs server conceptually approaches snoop split connection approaches mentioned section 2 seek build robust link mobile hosts basestation solution approach described previous paragraphs achieves goal unlike snoop split connection approaches decouples building robust link endtoend reliability mechanisms higher layer protocol dependent tightly coupled approaches information exchanged higher lower layers protocol stack useful improving performance shown bpsk96 approach used necessary degree interaction minimized tcpip protocol stack inherited increasing complexities evolved modified years complexity makes difficult incorporate test changes protocol stack tightly coupled approaches keep track semantics several protocol layers require large buffer space extensive modifications goal achieve improved performance using simpler mechanisms require tight coordination layers stack performance problem therefore tackled simpler manner two layers wireless link higher layer protocol application complex mechanism involving higher layer protocols need built may required higher layer protocol smart retry mechanism philosophy fairly general applies protocols applications well nfs 4 system setup consider micro picocellular building network environment basestations designated locations handle traffic mobile hosts environment wireless burst errors complex impact higher layers errors wireless link modeled due vertical dependency higher layers physical layer possible accurately quantify interactions layers reason important use real testbed determine effect wireless burst errors nfs time accurate performance evaluation requires control errors wireless link 41 testbed shown testbed diagram figure 1 ibm rs6000 acts nfs server ibm rtpc configured basestation two mobile nfs clients ibm ps2 ibm rtpc access nfs server basestation using 1 mbps wireless link decalpha monitors traffic ethernet running tcpdump mj93 tcpdump reported zero packet loss tests using testbed study performance nfs reads writes measuring response times obtained file transfers local disks mobile hosts order control error rate place wireless devices close proximity minimizes uncontrolled errors wireless link instead using physical errors link error model introduced device driver mobile hosts explained next section allows control error patterns keeping benefits real testbed realistic bandwidth limitations processing delays buffer device alpha rs6000 rtpc notrumpcs packet filter nfs server base station shivalikcs nfs client nfs client narmadacs rtpc ethernet lan figure 1 testbed nfs performance evaluation limitations finally ensure consistent results ethernet segment holding static hosts isolated rest building network experiments 42 model signal fading multipath transmission interference cause burst errors wireless links burst errors sequences corrupted lost bits covering period hundred milliseconds degrade quality low bandwidth wireless channels good bad figure 2 2state error model use twostate markov error model shown figure 2 represent quality channel mobile host basestation instead attempting empirically model channel capture relative performance information using simple nontrivial model easily incorporated device driver experiments two states markov model represent error errorfree periods good state bits transmitted without errors bad state occurs bits lost corrupted twostate models used previous researchers characterize error wireless channel bbkt96 starting point empirical model wireless error behavior nkns96 twostate model chosen threestate model discussed studies skkf93wm95 twostate model simplifies model without losing information pertinent research third state would represent guard state would occur single bit corrupted move bad state would occur several consecutive bits corrupted combine guard state bad state allow time bad state arbitrarily small temporal model error behavior wireless channel desired capture temporal nature burst errors quality channel good bad model depends current time instant differs model used bsak95 nonstochastically corrupts small percentage bits transit wireless channel implement temporal model using distribution periods spent good bad states perform experiments various distributions including uniform deterministic wide range error rates results uniform distributions good period mean one second bad period means 0 160 milliseconds presented discrete functions ranges 200 bad period 2000 good period used choose error range based research measured fading bursts 10 100 ms office building environment hmvt94bbkt96 model implemented using kernel timeout mechanism granularity twenty milliseconds incorporate error model input output routines mobile hosts device drivers locate entire model client maintain control synchronization transmit receive channels 5 experimental results experiments conducted reading writing nfsmounted files mobile hosts using mean bad periods range 0 160 milliseconds since various file sizes yield similar results response times experiments 1 mb files reported experiment run 10 times 2 graphs following sections present average response times seconds first present detailed results single mobile host case discuss results extend presence several mobile hosts 51 effect block size effect nfs block size response time reads writes shown figures 3 4 curves figures exhibit either knee low 4096 bytes best performance expected two extremes 1024 8192 bytes using large block sizes increases number fragments increases probability fragment lost bad state single fragment loss requires retransmission entire block detrimental impact performance km87 rf95 alternatively small block sizes cause increase request acknowledgment messages handshaking increases transmission latency tradeoff two opposing effects seen figures 3 4 especially clear higher error rates errors exaggerate opposing effects combination higher error rates 8192 block size results many losses block retransmissions fragment loss increases response time substantially using 1024 block size high error rates data transfer slow due combined also conducted experiments using 10 runs confidence intervals significantly improved larger numbers runs average response time block size bytes effect block size reads ms bad period ms bad period ms bad period ms bad period figure 3 reads perform best 4096 byte blocks4080120160 average response time block size bytes effect block size writes ms bad period ms bad period ms bad period ms bad period figure 4 writes perform best 4096 byte blocks cost increased handshaking overhead frequent losses unexpected result faster response times due buffer overflow problem observe wireless device drivers cards overflow pronounced reads leads anomaly faster response times writes since 4096 byte blocks provide best nfs performance rest experiments use block size reads writes using 4096 block size experiments conducted various error rates figures 5 6 show results changes curves curves display poor performance nfs prior hybrid linear retransmission modifications present following subsections even improved block size performance still limited slow response losses also ran experiments measure performance zero errors wireless links appears zero errors line provide baseline evaluating effectiveness modifications block size 4096 bytes optimal testbed environment approach used determine optimal block sizes environments optimal block size influenced prevailing error rates well relative power communicating machines since significant performance difference using optimal nonoptimal block size advantageous use optimal block size average response time mean bad period ms effect changes reads zero errors hybrid linear retransmit hybrid linear retransmit figure 5 reads show significant improvement modifications 52 effect hybrid linear backoff algorithm modified nfs client uses hybrid linear exponential algorithms calculate backoff intervals event timeout first timeouts client calculates next timeout value adding small constant previous timeout value linear backoff next timeout values calculated according exponential backoff algorithm upperbounded maximum timeout value max timeout c initial small constants r number retransmissions current packet equals number times linear backoff used going exponential results obtained using hybrid backoff algorithm shown hybrid linear curve figure 5 reads figure 6 writes compared changes curves use hybrid linear backoff constitutes significant improvement improvement prominent higher error rates frequent packet losses increase probability block losing fragments repeatedly leading substantial difference timeout values calculated hybrid linear pure exponential algorithms repeated losses quicker retransmissions hybrid linear backoff improve performance eliminating long idle periods previously followed loss reported results transfers lasting 300 seconds terminated rerun terminations required using hybrid linear backoff since aggressive nfs client receive send packets within reasonable time consequently using hybrid linear backoff algorithm serves bound time required read write operation complete addition improving performance lan consisting wireless wired segments packet losses delays primarily due noise wireless channel rather congestion wire heavily loaded servers method dealing losses congestion depends location bottleneck errors low bandwidth cause wireless link bottleneck average response time mean bad period ms effect changes writes zero errors hybrid linear retransmit hybrid linear retransmit figure writes show significant improvement modifications losses assumed norm rather congestion losses since minimum nfs timeout around 700 milliseconds well typical length noise burst exponential backoff react appropriately packet loss fact repeated fragment loss may force client backoff large wait period severely degrading performance hybrid linear backoff optimistic mechanism recovering quickly losses noisy wireless link occasional case congestion wired wireless network server causes timeout pure linear backoff could cause congestion collapse prevent hybrid linear algorithm switches linear backoff exponential three retrials inbuilding environment number mobile hosts per basestation limited restricts number extra packets transmitted congestion preventing congestion due traffic generated mobile nfs clients wired wireless links 53 effect linklevel retransmissions linklevel retransmissions mechanism receiver sender try reliably exchange data using control messages transmitting data according welldefined protocol sender receiver retransmit data messages loss interrupts protocol limits needed retransmissions wireless link improves throughput since retransmissions occur much quickly nfs linklayer retransmits lost packets certain number times giving retry limit necessary minimize roundtrip time variability impact queued data transmissions higher layer reliability mechanisms therefore nfs must ultimately insure reliability attempted data transfers linklayer retransmission policy fair multiple channels discussed bbkt96 emulate linklevel retransmissions holding incoming outgoing packets devicedriver bad period transmitting switch bad state good state occurs results obtained using linklevel retransmissions disabling hybrid linear backoff nfs client shown retransmit curves figures 5 6 use retransmission achieves considerable performance improvement changes since lost packets successfully retransmitted burst period ends instead waiting course grained timeout improvement hybrid linear technique substantial lower error rates longer burst periods cause linklevel mechanisms wait intervals approach length nfs backoff periods even though use technique presents bestcase linklevel transmission gains obtained promising enough warrant complete retransmission protocol implementation 54 effect hybrid linear backoff linklevel retransmissions ensure hybrid linear backoff linklevel retransmissions interfere used together perform experiments mechanisms enabled figures 5 6 show results hybrid linear retransmit curves interference two mechanisms appears curves lie hybrid linear retransmit curves improvements two techniques add completely cases linklevel retransmissions able deliver packets nfs timer expires cases longer error bursts linklevel retransmissions may able react time causing nfs client resend request thus linklevel retransmissions perform work nfs client taking linklevel mechanisms recover slowly one might suggest increased minimum nfs client timeout allow link time get packets across retransmissions although works wireless burst errors cause larger latencies problems occur wired side network performance system modifications installed approaches closely zero error case low error rates provides substantial improvement changes curve higher error rates 55 performance multiple mobile hosts study interaction aggressive nfs mobile clients analyze performance two mobile hosts nfs clients shivalik narmada figures 7 8 present response times shivalik two modified nfs mobile clients accessing nfs server reads writes modified system changes curves performs much better base system changes curves comes close performance modified system single host shown hybrid linear retransmit curves figures 5 6 two mobile clients congestion wireless link problem host achieve substantial improvement retransmission techniques number mobile clients one wireless cell increases congestion eventually become problem losses due errors wireless link experiments large testbed needed determine many mobile clients supported without causing congestion experiments nfs system shown stable well effective experiments need performed larger testbed confirm scalability method expect system perform well micro picocellular environments number mobile hosts expected large nfs server within average response time mean bad period ms changes figure 7 reads scale well multiple clients408040 80 120 160 average response time mean bad period ms changes figure 8 writes scale well multiple clients several wired hops wireless subnet extent scalability depends greatly implementation linklevel retransmissions lightweight mechanism efficient implementation wireless link would appear robust applications higher layer protocols would decrease higher layer retransmissions thereby improving performance scalability section 6 discusses 56 summary results data collected suggests 4096 bytes reasonable nfs block size reads writes use hybrid linear exponential backoff nfs client improves worst case performance also average performance higher error rates time hybrid linear backoff bounds maximum transfer times linklevel retransmissions reduce response times considerably warrant full implementation detailed study results show significant interference linklevel retransmissions nfs clients aggressive retry mechanisms ad dition linklevel retransmissions solve buffer overflow problem observe wireless device drivers cards overflow pronounced reads leads anomaly faster response times writes linklevel retransmissions alone sufficient achieve best worst case nfs performance since guarantee complete reliability higher layer must initiate retransmission cases long bad periods linklevel retransmissions failed recognize cases link completely disconnected take appropriate action higher layer also must act ways minimize interference application protocol streams achieve good performance since linklevel knowledge interaction thus changes nfs client needed complement linklevel retransmissions50150250 packet number packet time seconds nfs read performance 160ms bad period throughput 192 kbs throughput 84 kbs changes figure 9 fewer nfs retransmissions modifications output tcpdump figure 9 illustrates performance difference without modifications changes idle periods follow losses occasional sequential losses cause even longer idle periods due exponential backoff long idle periods degrade performance 84 kbs ran mobile client without modifications read call performed throughput 192 kbs changes doubled throughput eliminating idle periods loss using aggressive nfs client linklevel retransmissions improves response times 62 brings within 5 zero error case several experimental runs 40 millisecond bad period additional benefit techniques consistency response times calculation 95 confidence intervals data collected indicates intervals vary widely high error rates modifications modifications eliminate high variability resulting confidence intervals consistently small performance improvements maintained two mobile hosts work well range error rates results expected scale well hosts micro picocellular environment techniques require modifications nfs server static hosts using nfs affected performance improvements compatibility strongly recommend techniques propose 6 conclusions future work nfs performance wireless links dramatically improved using aggressive nfs client combined linklevel retransmissions experimental results demonstrate approach improves response times 62 corresponding 160 increase put brings performance within 5 zero error wireless link case performance improvement makes use nfs wireless lans feasible option nfs widely used traditional lans important heterogeneous networks maintain remote file access users migrate mobile wireless platforms philosophy focuses incorporating simple changes require tight interaction protocol layers mechanisms use provide substantial performance improvement maintaining compatibility existing nfs servers although paper discusses performance improvements respect nfs techniques apply application protocol performance wireless links general plan extend solutions improve performance protocols wireless links experiments show aggressive nfs client using block size 4096 bytes hybrid linear backoff performs well wireless link addition nfs client tuned behave intelligently cellswitches handoffs information indicating imminent cellswitch usually available wireless device driver appropriate signaling mechanism needs devised inform nfs client applications impending cellswitch client adjust timeout values appropriately prepare latencies occur handoffs working toward providing mechanism situation interaction beneficial link layer signals impending cell switch nfs better interpret losses react appropriately improves higher layers performance cost small amount interaction require complex state information large buffer space together linklevel retransmissions aggressive client techniques deliver improved performance range error rates significant interference linklevel retransmissions aggressive client seen improved performance absence interference present strong case link layer techniques enhancing average case performance higher layer mechanisms improve worst case performance wireless links order implement complete mac protocol one proposed bdsz94 hardware would modified alternative add linklevel retransmission functionality device driver plan implement per destination mac address queues basestation bbkt96 queue scheduled roundrobin fashion improves fairness eliminating headoftheline blocking occurs output queue device driver channel current packets destination bad state addition queue would run dataack protocol queue mobile host basestations maintain one queue per destination mac address mobiles maintain one queue basestation csmaca used determine data sent data transfer considered complete explicit acknowledgment ack received ack different acknowledgment received controller wireless card message loss causes protocol break lost message retransmitted exact number retransmissions given message become clear experimentation implementation protocol achieve gains mac protocol presented bdsz94 within limitations current hardware believe mechanism potential improving performance higher layer protocols nfs without causing interference endtoend flow congestion control mechanisms improved scalability one result per destination scheduling tests using several hosts show substantial performance improvements since hosts per basestation expected micro picocellular environment expect results scale future experiments larger testbed numerous mobile hosts provide better understanding scalability approach also intend combine hoarding used coda ks92 tlac95 predictive file caching techniques kl96 fetch files high probability accessed transferred server onto local disk implemented mechanisms discussed paper would reduce remote file access latencies user response time acknowledgments thank pravin bhagwat many related discussions alexander sarris help setting testbed also thank pete kelehers advanced systems class critical audience work shamik sharma marwan krunz ibrahim korpeoglu sambit sally floyd anonymous reviewers helping improve manuscript various stages conception r itcp indirect tcp mobile hosts mrpc remote procedure call service mobile clients using channel state dependent packet scheduling improve throughput wireless lans macaw media access protocol wireless lans rx hex vegas new techniques congestion detection avoidance comparison mechanisms improving tcp performance wireless links improving tcpip performance wireless networks effects mobility reliable transport protocols throughput performance transportlayer protocols wireless lans network working group little work project measurements modeling temporal variations indoor radio propagation channel congestion avoidance contol improving performance correctness nfs server improving write performance nfs server predicting future filesystem actions prior events fragmentation considered harmful disconnected operation coda file system bsd packet filter new architecture userlevel packet capture tracebased approach modeling wireless channel behavior asymmetric linklayer protocol digital cellular communications nfs version 3 design implementation dynamics tcp traffic atm networks scalable secure highly available distributed file access design implementation sun network file system throughput analysis method hybrid arg schemes burst error channels intelligent file hoarding mobile computers finite state markov channel useful model radio communication channels improving endtoend performance tcp mobile internetworks tr ctr yukwong kwok vincent k n lau novel channeladaptive uplink access control protocol nomadic computing ieee transactions parallel distributed systems v13 n11 p11501165 november 2002 daniel ellard margo seltzer nfs tricks benchmarking traps proceedings usenix annual technical conference usenix annual technical conference p1616 june 0914 2003 san antonio texas xiaohui lin yukwong kwok vincent k n lau quantitative comparison ad hoc routing protocols without channel adaptation ieee transactions mobile computing v4 n2 p111128 march 2005 cynthia rais satish k tripathi studying vertical dependence improve nfs performance wireless networks cluster computing v1 n2 p225235 1998 rusty baldwin nathaniel j davis iv scott f midkiff realtime medium access control protocol ad hoc wireless local area networks acm sigmobile mobile computing communications review v3 n2 p2027 april 1999 rusty baldwin nathaniel j davis iv scott f midkiff richard raines packetized voice transmission using rtmac wireless realtime medium access control protocol acm sigmobile mobile computing communications review v5 n3 p1125 july 2001