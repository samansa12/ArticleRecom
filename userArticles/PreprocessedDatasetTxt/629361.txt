executing algorithms hypercube topology torus multicomputers abstractmany parallel algorithms use hypercubes communication topology among processes algorithms executed hypercube multicomputers communication cost kept minimum since processes allocated processors way communication neighbor processors required however scalability hypercube multicomputers constrained fact interconnection costpernode increases total number nodes scalability point view meshes toruses interesting classes interconnection topologies paper focuses execution algorithms hypercube communication topology multicomputers mesh torus interconnection topologies proposed approach based looking different embeddings hypercube graphs onto mesh torus graphs paper concentrates toruses since already known embedding called standard embedding optimal meshes paper embedding hypercubes onto toruses given dimension proposed novel embedding called xor embedding paper presents set performance figures standard xor embeddings shows latter outperforms former torus addition proven onedimensional torus ring xor embedding optimal sense minimizes execution time class parallel algorithms hypercube topology class algorithms frequently found real applications fft class sorting algorithms b introduction hypercube communication topology frequently found real parallel applications examples include parallel algorithms fft sorts etc 3 11 algorithms called hypercube algorithms dcube algorithms number dimensions hypercube hypercube algorithm dimension dcube algorithm consists 2 processes labeled 0 2 1 every process communicates neighbors one dimension dcube paper problem executing dcube algorithms multicomputers 1 considered multicomputer distributed memory multiprocessor nodes processor local memory interconnected point point links nodes multicomputer interconnected according given pattern interconnection topology topology hypercube dimension dcube multicomputer dcube algorithm executed multicomputer way neighbor processes mapped onto adjacent nodes nodes directly connected point point link case said process dcube algorithm neighbors distance 1 multicomputer ie required communication neighbor nodes way cost communication component dcube algorithm kept minimum executed hypercube multicomputer important drawback hypercube interconnection topology multicomputers scalable dcube multicomputer 2 nodes directly connected nodes point point links therefore cost complexity interconnection hardware per node increases number nodes interconnection topologies meshes toruses considered suitable multicomputers large number nodes since interconnection cost per node depend total number nodes 13 instance node twodimensional torus multicomputer directly connected 4 nodes matter number nodes multicomputer execute dcube algorithm multicomputer topology hypercube first step find mapping function allocates process parallel program onto given processor multicomputer problem formulated finding embedding graph represents topology program hypercube onto graph represents topology multicomputer mesh torus problem embedding given source graph destination graph extensively studied literature particular embedding type graph hypercube widely studied topic see instance 271112 mention recent works however problem embedding hypercubes onto mesh torus extensively studied section 23 review relevant works subject topology algorithm multicomputer different may impossible allocate neighbor processes neighbor processors instance twodimensional torus multicomputer every process dcube algorithm 4 neighbors distance 1 least d4 neighbors distance greater 1 message far neighbors routed point point links nodes found along path destination node good mapping parallel algorithm onto multicomputer keep neighbor processes close possible multicomputer minimizing way communication cost execution paper begins reviewing related work embeddings concentrates particular type embeddings called embeddings constant distances shown embeddings adequate purposes executing dcube algorithms onto meshes toruses well known embedding hypercubes onto meshes called standard embedding 8 embedding constant distances optimal meshes given dimension consequence contribution paper centers embeddings hypercubes onto toruses new embedding called xor embedding proposed paper presents set performance figures shows embedding outperforms standard embedding used mapping function dcube algorithm onto torus multicomputer addition proven xor embedding optimal onedimensional toruses also called rings paper organized follows section 2 introduce notation describe precisely contribution paper well related work sections 3 presents xor embedding section 4 compares performance xor embedding standard embedding using set different performance metrics section 5 proven proposed embedding optimal rings sense results shortest execution time class dcube algorithms finally concluding remarks presented 2 preliminaries related work 21 definitions dcube algorithm parallel algorithm consists 2 processes every process communicates exactly processes processes called neighbors also say communication topology algorithm hypercube means 2 processes labeled 0 2 1 way processes n neighbor ie communicate binary codes n differ single bit bit ith bit neighbor n dimension n neighbor dimension written paper focus dcube algorithms every process following structure i0d1 compute communicate neighbor dimension algorithm every process consists stages composed computation phase followed communication phase stage every process uses different dimension exchange information one neighbors duration computation phase amount information exchanged assumed stages processes dcube algorithm dcube algorithm features called computeandcommunicate dcube algorithm cc dcube algorithm short kind dcube algorithms common real applications like fft type sorts etc 3 11 parallel algorithms modelled graphs vertices graph represent processes algorithm edges graph represent neighbor relationship among processes multicomputer also modelled graph vertices graph represent nodes multicomputer edges graph represent point point links interconnect nodes terms edge link used indistinctly paper multicomputers classified according interconnection topology work presented paper focuses mesh torus multicomputers since scalable interconnection topologies cdimensional torus undirected graph nodes labeled ctuples 1 every node 1 2 c graph two neighbors dimension torus left neighbor dimension j 1 j 1 mod k j c right neighbor dimension 1 j 1 mod k j c cdimensional mesh undirected graph nodes labeled ctuples 1 every node graph two neighbors dimension j mesh 0 left neighbor 1 j 1i c right neighbor node right neighbor j k j 1 left neighbor line onedimensional mesh onedimensional torus called ring figure shows examples illustrates nodes labeled distance graph two vertices minimum number edges join vertices particular case graph models dcube distance two vertices known hamming distance number different bits binary representations embedding graph g graph h injection vertices g vertices h paper attention restricted embeddings g h number vertices therefore mapping given bijective function problem executing cc dcube algorithm multicomputer restated embedding graph g represents cc dcube algorithm onto graph h represents multicomputer dilation edge nm g edge joining vertices n distance h fn fm g models cc dcube algorithm edge exists vertices n mn n 0d1 dilation edge denoted n obviously since n n cc dcube algorithm executed multicomputer defined given embedding f communication processes n n n required iteration cc dcube algorithm implemented message routed n point point links n1 nodes multicomputer represented h found shortest path nodes fn fn n following store forward routing strategy assumed therefore cost sending message fn fn n proportional n 22 contributions mentioned introduction paper focuses executing cc dcube algorithms scalable multicomputers function maps processes onto processors embedding graph defined communication topology algorithm hypercube onto graph defined interconnection topology multicomputer particular interested torus multicomputers since meshes already known embedding called standard embedding described next section optimal cc dcube algorithms 02 03 c 02 03 figure 1 different types multicomputers line b ring c 44 mesh 44 torusthe picture also shows nodes labeled work presented paper centers embeddings 0d1 n 02 1 means every process neighbor dimension distance target multicomputer following embedding feature called embedding constant distances values 0d1 called distances embedding embeddings constant distances property every process takes time communicate given stage cc dcube algorithm duration compute phase also every process waiting intervals avoided since neighbor processes arrive time point communicate fact illustrated later example paper embedding constant distances hypercubes onto toruses arbitrary dimension proposed embedding called xor embedding shown embedding outperforms standard embedding using set different performance metrics moreover prove proposed embedding optimal rings onedimensional toruses sense minimizes execution time cc dcube algorithms executed ring multicomputer another additional property proposed embeddings simplicity means negligible cost compute location process multicomputer preliminary results xor embedding presented 4 23 related work problem embedding dcubes onto meshes toruses previously considered authors review related work presented matic presents 10 study standard embedding defined dcubes onto twodimensional meshes toruses define standard embedding denoted f std dcube onto line ring nodes target multicomputer numbered 0 2 1 see figures 1a 1b standard embedding defined see figure 2a general standard embedding dcube onto cdimensional mesh torus defined follows f std n f std n figure 2b shows example c2 k 1 k 2 4 obviously standard embedding embedding constant distances particular case k 2 dc i1c distances standard embedding shown standard embedding optimal meshes sense minimizes average distance 5 turns results shortest execution time however optimal toruses shown later paper harper 6 lai spague 8 solve problem embedding dcubes onto meshes minimize dilation embedding maximum dilation edge proposals use byweight embedding denoted f bw embedding constant distances next embedding briefly described case line labels vertices represent processes dcube algorithm ordered weights weight label number 1s binary representation labels weight ordered descending order processes dcube ordered way allocated nodes line left right figure 3a shows example byweight embedding extended meshes dimension particular lai spague extend embedding twodimensional meshes 8 figure 3b shows example byweight embedding minimizes dilation embedding lines lower dilation standard embedding twodimensional meshes interesting property particular applications embeddings instance lai spague propose embedding solve problem placing processors hypercube printed circuit board chip modelled twodimensional mesh however byweight embedding embedding constant distances important property b figure 2 standard embeddings 3cube onto line ring b 4cube onto 44 mesh torus label indicates vertex dcube mapped onto node multicomputer wraparound links shown clarity context executing cc dcube algorithms onto multicomputers variable distances result waiting intervals execution cc dcube algorithm due fact two neighbors going communicate finish respective previous computation different time one finish earlier must wait finish waiting intervals contribute increase execution time illustrate fact figure 4 shows example execution times cc 3cube algorithm line standard embedding byweight embedding compared waiting intervals contribute make byweight embedding run slower standard embedding also shown 9 e l tao proposed several embeddings among toruses meshes different dimensions proposals based generalizing concept gray code numbering system mixradix numbering systems since dcube also seen ddimensional mesh torus two elements dimension embedding also applied solve problem addressed paper however focus minimizing dilation longest dilation link dcube therefore resulting embeddings general constant distances desirable property objective however one starts dcube represented means 222 ddimensional mesh torus resulting embedding onto ring twodimensional torus constant distances nevertheless average distance therefore performance executing target algorithm worse embedding proposed paper 3 xor embedding since standard embedding optimal meshes focus toruses proposed embedding called xor embedding denoted f xor belongs class embeddings constant distances section xor embedding case onedimensional torus ring first described generalized dimension 28 26 b figure 3 byweight embeddings 3cube onto line b 5cube onto 31 onedimensional torus ring given positive integer x let xi denote ith bit binary representation x least significant bit considered 0th bit let g graph represents cc dcube algorithm r graph represents ring multicomputer assume vertices r labeled 0 2 1clockwise see figure 1b let nd1 nd2n1n0 label binary code vertex n g vertex mapped onto vertex mf xor n r whose label binary code md1m0 xor ab exclusiveor bits b figure 5 shows example d4 node b c computation communication waiting interval figure 4 dilations standard byweight embeddings d3 executing cc 3cube algorithm line using b standard embedding c byweight embedding 32 general case xor embedding ddimensional hypercube onto 2 d1 2 d2 2 dc cdimensional torus 1 2 c presented let us first define k j following way k 1 0 every 1jc1 let g graph represents dcube graph represents torus vertex n g mapped onto vertex 1 2 c f xor n follows figure 6 shows example d6 noted standard xor embedding dcube onto cdimension torus viewed multiple embeddings smaller hypercubes onto rings instance figure 6 nodes 8 13 6cube constitute 3cube mapped onto 8 nodes second row torus constitute ring embedding xor embedding note simplicity function f xor n function used frequently routing messages execution cc dcube algorithm consists simple bit operations computational cost negligible 4 performance analysis section performance xor embedding standard embedding compared using set different performance metrics metrics used matic 10 evaluate standard embedding twodimensional meshes toruses corresponding expressions standard xor embeddings dcube onto figure 5 xor embedding 4cube onto ring labels indicate node dcube mapped onto corresponding node ring dcube nodes cdimensional torus derived cases general expressions easy compare derive expression corresponding particular case squared torus squared torus 2 dc 2 dc 2 dc cdimensional torus torus whose dimensions size list metrics following execution time f 1 2 c represents execution time cc 1 2 c cube algorithm onto 2 d1 2 d2 2 dc cdimensional torus embedding f used mapping function links dilation spectrum gives number links dilation 1 2 c cube embedded onto 2 d1 2 d2 2 dc cdimensional torus defined mapping function f longest dilation maximum dilation link hypercube embedded onto 2 d1 2 d2 2 dc cdimensional torus defined embedding f total dilation represents sum dilations links hypercube figure xor embedding 6cube onto 88 torus wraparound links shown clarity 48 dcube nodes 1 2 c f maximum load minimum load load node due communication tasks measured number links hypercube traverse particular node links begin finish node considered parameters give maximum minimum value load node result using embedding f average load average load node due communication tasks 41 execution time using embedding mapping function parallel algorithm onto multicomputer important performance measure embedding time execution algorithm takes result using mapping let duration arithmetic computation phase every stage cc dcube algorithm executed target multicomputer let c cost sending message point point link multicomputer time execute cc dcube algorithm multicomputer 2 nodes using embedding f expressed cf cost communication component cc dcube algorithm cf expressed follows expressions n cost communication component process n beginning execution end stage expression indicates cf equal highest communication component cost process end stages cc dcube algorithm expression b gives communication component cost process n end stage stage process n must exchange information neighbor n n cost exchanging information nt c since store forward routing assumed however exchange cannot start processes n n n ready general either process n process n n wait neighbor arrive point communication started term max appears expression b idle intervals called waiting intervals figure 4 ave obviously multicomputer dcube interconnection topology best embedding embedding case n execution time embedding constant distances every n case time execute cc dcube algorithm onto multicomputer defined embedding f average distance embedding 2 d1 2 dc cdimensional torus average distance standard embedding average distance corresponding xor embedding since execution time cc dcube algorithm proportional average distance embedding conclude standard embedding results 33 increase execution time compared xor embedding obviously embedding constant distances minimizes execution time cc dcube algorithm whose average distance minimum embedding property said optimal standard embedding optimal meshes dimension toruses since seen xor embedding outperforms addition proven section 5 xor embedding optimal onedimensional toruses dt c averagedistance f std c c xor c c 42 links dilation spectrum 421 standard embedding rings links dilation spectrum standard embedding case onedimensional torus derived notice node hypercube neighbor dimension distance 2 torus since 2 nodes 2 d1 links dilation 2 i0 d1 conclude links dilation spectrum 422 xor embedding rings xor embedding rings every node neighbor distance 2 i0 d2 two neighbors distance 2 d2 consequence links dilation spectrum follows 423 general case links dilation spectrum standard xor embeddings computed spectrum onedimensional case using following expression particular case squared cdimensional torus standard embedding assuming dc 2 xor embedding corresponding expression 1 2 c c c 1 2 c 1 2 c 43 longest dilation longest dilation obtained links dilation spectrum functions previously developed standard embedding xor embedding corresponding expression assuming seen longest dilation xor embedding 50 shorter standard embedding 44 total dilation parameter also computed using links dilation spectrum given following next expression developed standard xor embeddings particular toruses case standard embedding rings whereas xor embedding rings total dilation case squared cdimensional torus std 1 2 c xor 1 2 c x std xor std c c xor c c c 3 notice total dilation standard embedding 33 higher xor embedding cases 45 maximum minimum load section load due communication tasks every node analyzed objective determine value loaded node least loaded one 451 standard embedding rings assume ddimensional hypercube embedded onto onedimensional torus 2 nodes let load node n due links whose dilation 2 notice periodic function period defined interval figure 7 illustrates example d4 figure shows load every node due links whose dilation 2 2 let load node n due links whose dilation either 2 2 i1 shown periodic function period defined interval figure 8 shows graphically expressions obtained std n std n std n figure 7 load node due links dilation equal 4 standard embedding 4cube onto ring std n std n std n std n std n std n total load given node denoted computed even odd obviously due fact period four times period always two periods maximum every n inside two periods consequence always least one node n get maximum value node see figure 9therefore even odd since std n std n std n std n std n std n std n std n std n std n std std n std n std n std n std n std n std n std std n std n std n figure 8 computing std n std n std n std n std n std n std n std n std std n std n std n std n maximum load standard embedding rings given following expression regarding minimum load seen nodes 0 2 1 null load 452 xor embeddings rings notice load node due links whose dilation less 2 d2 standard xor embedding consequence load due links whose dilation 2 d2 equal illustrated figure 10 means particular example since constant function conclude std std std n std n maximum every n belonging range two periods std n std n figure 9 figure illustrates std n std n std n std n xor n std n xor n xor n std 2 xor n xor std 2 results regarding minimum load since 453 general case since standard xor embeddings hypercube onto cdimensional torus regarded several embeddings smaller hypercubes onto rings always least one node load maximum dimensions torus least one node load minimum dimensions follows xor n figure 10 load node due links dilation equal 4 xor embedding 4cube onto ring xor std 2 std 2 table 1 compares maximum minimum load embeddings onto different toruses conclude xor embedding higher minimum load lower maximum load load nodes communication tasks evenly distributed desirable property 46 average load taking account link dilation results unitary additional load d1 nodes average load nodes due communication tasks computed links dilation spectrum using following expression embeddings particular case ring average load table 1 maximum minimum load standard xor embeddings size torus ave 1 2 c x ave std ave xor cdimensional squared torus average load cases average load standard embedding 33 higher xor embedding difference even higher small hypercubes conclude execution parallel algorithm hypercube communication topology xor embedding result quite less number communication conflicts notice case cc dcube algorithms analyzed paper due particular structure conflicts never occur two embeddings 5 proof optimality f xor rings average distance defined section 41 used main criterion measure goodness embedding constant distances since minimizing average distance implies minimizing execution time cc dcube algorithms section proven xor embedding minimum average distance embeddings constant distances hypercubes onto rings show xor embedding optimal rings prove average distance embedding constant distances higher equal average distance f xor embedding stated theorem 10 theorem several lemmas corollaries needed prove result presented first lower bound sum set d1distances corresponding embedding constant distances found lower bound highest distance embedding computed together give lower bound average distance embedding constant distances lower bound average distance f xor embedding proves optimality given node hypercube define n n subset dimensions hypercube node reached starting node n moving every dimension one another using dimension exactly know order dimensions used matter result instance d13 n ave std 1 2 c ave xor 1 2 c c following n n j n written n n j n parenthesis removed sake clarity meaning referring order dimensions used preserved n n j n means move node n first using dimension j dimension first lemma section proves sum subset d1 distances corresponding d1 dimensions must least 2 d1 1 lemma 1 let f embedding constant distances i0 d1 dcube onto ring let v subset d1 dimensions dcube v contains dimensions dcube excepting one proof let hdnv subset nodes dcube consists nodes n n w n every wv obviously number elements hdnv two power number elements v particular v d1 elements hdnv consists 2 d1 elements given set 2 d1 nodes ring always two nodes set whose distance least 2 d1 1 since possible go node hdnv node set using dimension v distances corresponding dimensions v must add least 2 d1 1 q next lemma states two distances equal embedding dcube onto ring distances must equal 2 d2 lemma 2 let f embedding constant distances i0 d1 dcube onto ring 2 nodes j k following x n means x nd write x proof suppose nodes ring labeled clockwise 0 2 1 let us take node n hypercube let n suppose j k j f n n equal either xk mod 2 xk mod 2 short write f n nxk mod 2 also zf n j n possible solution either yxk mod 2 z xk mod 2 yxk mod 2 zxk mod 2 since situations symmetrical let us suppose first one holds without loss generality also n j n n n n j n let wf n j n n wyk mod 2 cannot equal yk mod 2 since yk mod 2 must different since w also equal f n n j n wzk mod 2 therefore yk zk x2k x2k means 4k 0 implies k d2 0 kk2 d2 integer k0 distances must positive integers however k cannot multiple 2 d1 would imply yz consequence given two nodes x ring say clockwise relation x shortest path x clockwise otherwise say counterclockwise relation x obviously clockwise relation x x counterclockwise relation embedding constant distances i0 d1 dcube onto ring let us define stands short set dimensions whose corresponding distances less 2 d2 hypercube embedded onto ring given node n hypercube define clockwise relation f n counterclockwise relation f n obviously cn given node neighbor given dimension hypercube fixed distance ring clockwise counterclockwise next two lemmas prove take account dimensions hypercube corresponding less 2 d2 always node neighbors dimensions clockwise ring another node neighbors dimensions counterclockwise lemma 3 let f embedding constant distances i0 d1 dcube onto ring 2 nodes let n node hypercube j cn cn j proof obvious j cn j n n j n j relation n n j n j clockwise relation n j n remains proved every k cn k cn j n let suppose k k cn k cn j n assume nodes ring labeled clockwise 0 2 1 let xf n since n j n counterclockwise relation n f n j n hypothesis n k n j n counterclockwise relation n j n f n k n j n clockwise relation n f n k n xd k mod 2 n k n j n n j n k n node xd j k implies either j k d1 0 k d1 0 none hold since 0 hypothesis wrong k cn j n q lemma 4 let f embedding constant distances i0 d1 dcube onto ring 2 nodes node n hypercube us algorithm find node n start node hypercube take cm move n lemma 3 states number elements cn strictly less number elements cm repeating step finally find node n cn refer node designated lemma 4 node c hypercube nodes ring labeled convenient way us node f c labeled node 0 rest nodes ring labeled clockwise 0 2 1 lemma f n next lemma states neighbors n c every dimension j clockwise obviously neighbor n c dimension counterclockwise since c lemma 5 let f embedding constant distances i0 d1 dcube onto ring 2 nodes cn equivalent say proof suppose j j cn c means implies either d1 j possible j lemma 2 j 2 d2 j d1 0 cannot hold since 0 j 2 d2 consequence every j j cn c cn next proven given subset dimensions ws neighbors n w c every clockwise lemma embedding constant distances i0 d1 dcube onto ring 2 nodes w cn w c w proof lemma proved induction number elements w w one element lemma holds proved lemma 5 seen particular case lemma 6 assume lemma holds set less n elements let us suppose hold set wwith n elements means dimension ksw f n k n w c counterclockwise relation f n w c fact lemma holds subset less n elements implies subset ds n elements therefore since w n elements let v equal set w taking element replaced k let iw element w vwi k since v also n elements f n c f n w c f n v c know n k n w since n k counterclockwise relation n w c left part equality must equal rd k mod 2 right part equal sd mod 2 consequence rd k sd substituting r corresponding expressions simplifying obtain equation satisfied two ways either k d1 0 d1 k none hold since 0 k 2 d2 lemma 2 states j cannot equal conclude every ksw f n k n w c clockwise relation f n w c therefore cn w c sw q corollary 7 start node c want move node n w c ws using dimension w exactly time move dimension w moving clockwise ring matter order use dimensions w proof direct implication lemmas 4 6 former states node c neighbors clockwise first hop must necessarily clockwise lemma 6 says moved node c node r using subset w dimensions making use dimension neighbors node r dimension used yet ie belonging sw clockwise next hop must also clockwise q next proven embedding hypercube onto ring constant distances distances lower 2 d2 sum distances must least 2 1 lemma 8 let f embedding constant distances 0 d1 dcube onto ring 2 nodes every 2 d2 embedding exists proof since distances less 2 d2 set dimensions whose distance less consists dimensions dcube lemma 4 states must node c neighbors clockwise addition corollary 7 says possible go node c node hypercube given hopes one corresponding different dimension going always clockwise particular go node c node next counterclockwise moving always clockwise distance two nodes sum distances must least equal amount q corollary 9 embedding constant distances distances less 2 d2 optimal exists context optimal means lowest average distance embeddings constant distances words optimal embedding must least one distance greater equal 2 d2 f n w c states embedding exists sum distances least prove corollary suffices find embedding whose distances add less amount embedding xor embedding one proposed section 3 q ready prove xor embedding optimal proved next theorem corollary theorem 10 let f embedding constant distances 0 d1 dcube onto ring 2 nodes average distance f least 32 d2 1d proof proof based lemma 1 corollary 9 lemma says sum subset d1 distances least 2 d1 1 particular sum d1 lowest distances embedding must least equal amount corollary 9 states optimal embedding least one distance higher equal 2 d2 particular highest distance embedding must higher equal 2 d2 together imply corollary 11 xor embedding dcube onto ring proposed section 3 optimal sense lowest average distance embeddings constant distances proof average distance xor embedding equal lower bound introduced theorem 10 q 6 conclusions paper focuses execution algorithms hypercube communication topology onto multicomputers torus interconnection topology problem tackled means graph embeddings embedding hypercubes onto toruses arbitrary dimension presented embedding called xor embedding belongs class embeddings whose distinguishing property links dimension hypercube dilation torus class embeddings called embeddings constant distances many parallel algorithms hypercube topology property processes perform activity different data activity consists number stages usually many number dimensions hypercube stage composed computing phase followed communication phase data interchanged one neighbors structure found parallel algorithms fft sorting among others type algorithms called cc dcube algorithms constant distances may desirable imply communication phase duration every process avoiding waiting intervals degrade performance averagedistance f xor embedding compared standard embedding using set different performance metrics execution time cc dcube algorithm links dilation spectrum longest dilation total dilation maximum minimum load average load performance xor embedding significantly better standard embedding cc dcube algorithms embedding constant distances results shortest execution time whose average distance minimum proven average distance xor embedding minimum rings onedimensional torus therefore maximizes performance multicomputer algorithms another important property xor embedding simplicity function determines location node dcube found target multicomputer currently working generalization work two different directions first looking general hypercube algorithms second considering general torus multicomputers number processing elements necessarily power two acknowledgments work supported ministry education science spain cicyt tic92880 tic911036 cepba european center parallelism barcelona r multicomputers messagepassing concurrent computers embedding networks ring connections hypercube machines solving problems concurrent processors xor embedding embedding hypercubes onto rings toruses optimal assignments numbers vertices optimal numbering isoperimetric problems graphs embedding threedimensional meshes boolean cubes graph decomposition placement processors hypercube embeddings among meshes tori emulation hypercube architecture nearestneighbor meshconnected processing elements introduction parallel algorithms architectures arrays trees hypercubes contentionfree 2dmesh cluster allocation hypercubes interconnection networks multiprocessors multicomputers theory practice tr ctr mikhail tarkov youngsong mun jaeyoung choi hyungil choi mapping adaptive fuzzy kohonen clustering network onto distributed image processing system parallel computing v28 n9 p12391256 september 2002 luis daz de cerio miguel valerogarca antonio gonzlez hypercube algorithms mesh connected multicomputers ieee transactions parallel distributed systems v13 n12 p12471260 december 2002 otto wohlmuth friedrich mayerlindenberg method embedding arbitrary communication topologies configurable parallel computers proceedings 1998 acm symposium applied computing p569574 february 27march 01 1998 atlanta georgia united states ali karci generalized parallel divide conquer 3d mesh torus journal systems architecture euromicro journal v51 n5 p281295 may 2005