conversion units measurement algorithms presented converting units measurement given form desired form algorithms fast able convert combination units equivalent combination perform dimensional analysis ensure conversion legitimate algorithms also presented simplification symbolic combinations units application techniques perform automatic unit conversion unit checking programming language described b introduction although many programming languages described strongly typed languages types numeric quantities described terms numeric representation real integer etc terms units measurement meters feet etc quantity represented variable assignment value represented one unit computer equipment used research furnished hewlett packard ibm variable assumed different unit clearly error errors cannot detected type system include units measurement conversion units must done explicitly programmer burdensome errorprone since conversion factors used programmer might entered incorrectly might limited accuracy failure represent units explicitly within program code serious shortcoming specification program since later modification program might performed assumption wrong units hundreds units measurement general use entire books 2 13 25 27 29 devoted tables unit conversions paper presents methods symbolic representation units measurement efficient algorithms presented convert combination units equivalent combination verifying legitimacy conversion dimensional analysis algorithms also presented simplification combinations symbolic units applications techniques programming languages data conversion discussed related work 21 units unit conversion 18 14 describe systeme international international system units abbreviated si definitive references si 4 provides style guidelines use si units tables conversion factors several books provide conversion factors algorithms use unit conversion available books differ widely number units covered accuracy conversion factors algorithms books present unit conversion although one might think unit conversion easy everyone knows number books variety methodologies algorithms present suggest otherwise horvath 13 especially complete coverage different units well extensive bibliography tables book give conversion factors given unit single si unit similar approach taken present paper although horvath present conversion algorithms per se semioli schubert 27 present voluminous tables combine multiplication conversion factor quantity source unit converted also present somewhat complex methods obtaining additional accuracy shifting decimal place result book flavor book logarithm tables although published 1974 pocket calculators available presents series directed acyclic graphs node graph unit arcs nodes labeled conversion factors nodes ordered size unit order convert one unit another user traverses graph source unit goal unit multiplying together conversion factors encountered along way dividing moving directed graph arrows although technique presents many conversions together compact structure use involves many steps thus many opportunities error loss accuracy karr loveman 15 outline computational method finding conversion factors method involves writing dimensional quantities conversion factors terms logarithms making matrix equations logarithmic form solving matrix linear algebra since size matrix number units involved conversion multiplied number units system knows matrix time required solve could quickly become large schulz 26 describes comet apl program converting measurements english system used us metric system comet focuses conversion machine part specifications include allowable tolerances gruber olsen 9 describe ontology engineering mathematics including representation units measurement abelian group system convert units presumably process logical deduction would significantly slower methods describe 22 units programming languages units measurement allowed atlas language 5 although atlas allows limited set units limited language constructing combinations units cunis 8 describes lisp programs converting units programs combine units numeric measurements runtime perform runtime conversion consistent lisp tradition runtime type checking allow detection conversion errors compile time gehani 10 argues favor compiletime checking hilfinger 12 describes methods including units numeric data using ada packages discusses modifications ada compilers would required make use packages efficient allow compiletime checking correctness conversions karr loveman 15 propose incorporation units programming languages discuss methods unit conversion dimensional analysis language syntax issues believe unit conversion algorithms described present paper simpler methods require one scalar operation per unit conversion one scalar operation per unit checking whereas methods 15 based manipulation matrices could large 23 data translation reusing existing procedure may require data translated form expected procedure describe 21 methods semiautomatic data translation procedure requires data presented particular units unit conversion may also required unit conversion methods paper combined methods 21 accomplish unit conversion may also required preparing data transmission remote site network use remote procedure call idl interface description language 16 allows exchange large structured data possibly including structure sharing separately written components large software system compiler use idl requires user write precise specifications source target data structures herlihy liskov 11 describe method transmission structured data network possibly different data representation destination method employs userwritten procedures encode decode data transmissible representations 3 unit representation use term simple unit refer named unit appropriate conversion factor dimension described later defined simple units include base units system measurement meter kilogram named units horsepower defined terms units si prefixes nano used scaling positive nonzero numeric constants also allowed simple units addition common abbreviations may defined synonyms actual units eg kg defined synonym kilograma composite unit product quotient units unit either simple unit composite unit represent units lisp syntax composite units written within parentheses preceded operator thus syntax units follows simpleunit symbol j number unit simpleunit j compositeunit say unit normalized nested product quotient terms removed far possible unit quotient two products clearly unit normalized algorithms simplification units described later normalizedunit single numeric conversion factor associated simple unit conversion factor number quantity expressed unit must multiplied order expressed equivalent unit standard system units chosen treating abbreviations synonyms rather giving conversion factor dimension treating units avoids possibility slightly different numeric factors might specified unit different names standard si systeme international dunites system units 18 14 1 different standard system could chosen without affecting algorithms described thus conversion factor meter 10 conversion factor foot 03048 since meter conversion factor numeric constant constant conversion factor product quotient units respectively product quotient factors component units based definitions easy define recursive algorithm computes conversion factor unit whether simple composite algorithm shown pseudocode form fig 1 assuming definitions units acyclic algorithm guaranteed terminate requires time proportional size unit expression tree function 1 unit simple unit number symbol unit number return unit b unit synonym unit 0 return factorunit 0 c unit predefined conversion factor f return f else error unit undefined 2 otherwise unit product b unit quotient u 1 c else error unit improper form figure 1 conversion factor algorithm system provides facilities defining named simple units specified numeric conversion factors defining units terms previously defined units examples unit definitions shown fig 2 first example unit defined name numeric conversion factor list synonyms second example conversion factor specified expression terms previously defined units consider conversion source unit unit desired unit unit let q numeric quantity expressed source unit q si equivalent quantity standard si system q quantity desired unit let f conversion factor source unit f conversion factor desired unit equations f defsimpleunits length meter 10 meters foot 03048 ft feet angstrom 10e10 angstroms defderivedunits force newton kilogram meter second second nt newtons poundforce slug foot second second ounceforce poundforce 16 figure 2 unit definitions thus conversion desired unit accomplished multiplying source quantity f example convert measurement terms feet centimeters factor would 001 given factor algorithm shown fig 1 computes factor simple composite unit easy convert combination units equivalent combination since number also defined unit numeric quantity given unit also converted convert function takes arguments source unit desired unit returns conversion factor f nil conversion undefined incorrect convert foot centimeterconvert meters feetconvert pi micro fortnight inch secconvert acre foot tablespoonsconvert mega poundforce acre kilopascalsconvert kilograms meters last example attempt make incorrect conversion kilograms meters gives result nil dimensional analysis described next section used verify requested conversion correct result nil returned rather numeric conversion factor certain conversions strictly correct deserve special note pound example unit mass often used name force unit properly called poundforce confusion exists mass units ounce kilogram conversion pounds poundsforce involves apparent conversion mass force similarly particle physics mass particle often described using energy units gigaelectronvolts gev described dimensional analysis system either perform strict dimensional checking prohibit forcemass energymass conversion made detect allow specific conversions strict checking otherwise latter case following conversions allowed convert poundforce kilogramconvert 167e27 kg gevthe conversion mass units corresponding force units requires multiplication g conventional value acceleration free fall earths surface sometimes called gravity conversion mass units energy units requires multiplication square speed light physical constant expressed si units 5 dimensional analysis algorithms produce meaningful results must verified requested conversion legitimate clearly impossible example convert kilograms meters correctness unit conversion verified longestablished technique dimensional analysis 6 source goal units must dimensions formally define dimension 8vector integral powers eight base quantities base quantities shown fig 3 together base unit used quantity si system 18 14 added money part si system dimension figure 3 base quantities units dimension product units vector sum dimensions components dimension quotient units vector difference dimensions components verified conversion one unit another legitimate showing dimension vectors two units equal equivalently difference zero vector powers base quantities encountered practice usually small seldom outside range sigma4 dimension represented vector eight integer values dimension checking done operations vectors somewhat expensive computationally since integers vector small might efficient pack bit fields within integer word section describe variation packing technique dimension vector encoded within single 32bit integer call dimension integer using algorithms presented using encoding dimensions added subtracted compared using ordinary scalar integer arithmetic may helpful consider analogy vector arithmetic encoding vectors decimal integers example vector operation 1 2 3 simulated using decimal integers 123 technique work long guaranteed carry one column decimal integer another use similar method encode dimension vector 32bit integer careful justification conditions use integer encoding correct presented following algorithms finally argue conditions satisfied practice use integer encoding dimension checking justified define two 8vectors integer constant shown decimal notation follows 800000 8000000 80000000 assume purposes presentation 8vectors indexed beginning 0 index 8vector kind quantity corresponds index column shown fig 3 vector dimsizes gives size field assigned quantity eg dimsizes0 20 corresponding field size 20 allowable value range sigma9 power length vector dimvals gives multipliers used move vector value proper field position defined follows dimvals dimvals integer dimbias value added dimension integer make positive bias vector component within field half size field dimbias defined dimbias x dimvals delta dimsizes igiven definitions algorithms easily defined convert 8vector form dimension equivalent dimension integer dimension integer easily derived dimension vector v vector dot product v dimvals dimintv x example dimension integer force calculated follows dimension integer converted back 8vector adding dimbias extracting values field algorithm needed unit conversion procedure dimvect n v integer sz mm 7 begin sz dimsizesi figure 4 conversion dimension integer dimension vector provided completeness algorithm shown fig 4 arguments dimension integer n 8vector v stores dimension values derived n v procedure uses truncated division extract biased value field integer encoding bias value sz 2 removed yield signed field value dividing field size used bring next field loworder position algorithm uses dimension integers rather dimension vectors check correctness requested unit conversions addition subtraction comparison dimension vectors simulated scalar addition subtraction comparison corresponding dimension integers state following theorems regarding dimension integers theorem 1 u v dimension vectors results follow immediately definition dimint theorem 2 u v dimension vectors dimintu dimintv dimsizes dimsizes proof suppose dimintu dimintv u 6 v suppose u 0 6 v 0 definition dimint dimvals therefore triangle inequality j u contrary assumptions j u 0 j dimsizes 0and j v 0 j dimsizes 0 therefore must case u inductive repetition argument remaining elements u v must case theorems show checking dimensions unit conversions means dimension integers correct long individual dimension quantities less half field sizes given dimsizes vector justify use integer encoding dimension vectors follows powers dimension quantities found units used practice generally small usually within range sigma4 field size 20 assigned length time temperature field size 10 assigned others dimension vector fit within 32bit integer representation allows power sigma dimsizes igamma 1 quantity long element dimension vector within range two dimension vectors equal corresponding dimension integers equal furthermore integer addition subtraction dimension integers produce results equal dimension integers vector sum difference corresponding dimension vectors representation allows power sigma9 length time temperature power sigma4 mass current substance luminosity money quite adequate note dimension vectors used tests equality unequal dimensions source goal units indicate incorrect conversion overflow field vector integer representation cause error indicated correct unit conversions performed two dimension values still equal despite overflow two unequal dimension vectors appear unequal despite overflow unless incorrect dimension integer corresponds different kind unit dimension value happens exactly equal unlikely happen accidentally example user attempts convert 20th power length time system fail detect error unlikely occurrence consider use efficient integer encoding justified note however 8vectors could used dimension checking instead desired cunis 8 describes alternative representation dimensions represents dimensions rational number lisp ie ratio integers represent positive negative powers dimensions base quantity length assigned distinct small prime product raised appropriate powers forms integer used ratio method requires somewhat storage computation method present arithmetic overflow could problem extendedprecision arithmetic used since lisp provides extendedprecision integers problem lisp 51 unit conversion checking dimension integer corresponding unit found follows dimension constant 0 also case units radian nano 2 dimension base quantity given corresponding value vector dimvals example dimension time dimvals1 20 dimension integer product units sum dimension integers using ordinary 32bit integer arithmetic dimension quotient units difference dimensions dimensions common abstract units force found computing dimension expansion terms base abstract units force expansion also define abstract unit dimensionless dimension integer 0 unit symbol defined system dimension determined abstract unit specified thus fig 2 meter receives dimension length unit defined expansion terms units dimension expansion verified comparison dimension abstract unit convert called convert one unit another also computes dimension source unit minus dimension goal unit difference 0 dimensions conversion legitimate nonzero value indicates difference dimensions source goal units strict conversion desired difference dimension treated error cases however may desired allow automatic conversion mass force mass energy conversions produce unique difference signature recognized conversions corresponding dimension differences source goal shown fig 5 difference matches integer signature conversion factor multiplied additional factor shown table example converting kilograms mass newtons force convert kilogram newtonthe dimension kilogram 8000 dimension newton 7961 difference proper multiplier 980665 although multipliers expressed si units conversion works unit systems 2 constants considered dimension unity whose logarithmic representation zero units sometimes referred dimensionless 18 conversion vector integer factor mass weight weight mass mass energy energy mass figure 5 dimension conversions 6 units programming languages although modern programming languages require specification data types feature compiletime type checking units generally included part types unfortunate since use incorrect units must considered type error commonly used procedures implicit requirements units arguments example system sin function may require argument expressed floatingpoint radians karr loveman 15 advocated inclusion units programming languages although atlas language 5 incorporates units knowledge widelyused programming language implemented use units glisp language glisp generic lisp 19 20 highlevel language abstract data types compiled lisp c additional translation step glisp compiler implemented common lisp 28 glisp data description language describe lisp data structures data structures languages glisp described briefly detail see 21 19 sections describe language features needed include units programming language compiler operations necessary perform unit checking conversion karr loveman 15 suggested units implemented reserved words could used multipliers arithmetic expressions instead implemented units part data types implementation units within programming language involves several different aspects 1 inclusion units part type specification language 2 type checking uses data units 3 derivation units result arithmetic operation 4 coercion data appropriate units necessary 5 syntax expressing numeric constants together units aspects described 61 units part types types usually used describe numeric data integer real etc describe method encoding numeric values units denoted numeric values independent issue therefore numeric type unit must specified part data type adopted simple syntax specify two together units numerictype unit example floatingpoint number denoting quantity meters would type units real meters type specification form may used wherever numeric type specification real would otherwise used since unit specification language allows constants included part unit possible specify unusual units might used hardware devices example suppose optical shaft encoder provides angular position shaft 8bit integer circle broken 256 equal parts unit expressed units integer 2 pi radians 256 62 results operations coercion unit checking conversion performed necessary determine unit result arithmetic operation general necessary create perhaps simplify new symbolic unit descriptions several classes operations handled differently units produced multiplication division easily derived creating new units symbolically multiply divide respectively source units example quantity whose unit meter second multiplied quantity whose unit second resulting unit meter second second unit could simplified meter cases necessary compiler perform simplification usually numeric conversion factor dimension unit used affected redundancy unit specification exponentiation integer powers treated multiplication division function sqrt special case dimension vector argument unit must contain multiples 2 necessary produce output unit half input unit may require unit simplification discussed differences opinion regarding coercion types compiler languages allow coercion within arithmetic expression example integer real added integer converted real prior addition languages allow coercion across assignment operator strict languages coercion treat type differences errors issues arguments raised regarding automatic coercion units implementation options available note however coercion allowed language must furnish construct allow programmer invoke type conversion explicitly describe automatic coercion implemented desired case addition subtraction comparison assignment operations units two arguments must operation meaningful units unequal attempt made convert unit righthand argument unit lefthand argument conversion factor f returned convert algorithm operation illegitimate eg attempt add kilograms meters error signaled compiler gldefun t1 x units real meters units real kilograms glisp error detected glcoerceunits function cannot apply op meters kilograms expression x conversion factor f 10 compiler action needed occur units equivalent unsimplified conversion factor 10 multiplication righthand operand conversion factor must inserted compiler following example illustrates glisp compiler inserts conversion addition operation gldefun t2 x units real meters units real feet result type units real meters lambda x example variable units feet added value variable x units meters case compiler inserted multiplication appropriate factor convert feet meters prior addition result type type lefthand argument convention causes type variable lefthand side assignment statement take precedence cases may known argument procedure required certain units cases procedure arguments typechecked coerced needed example library sin function may require argument radians unit existing data described shaft encoder example conversion required gldefun t3 x units integer 2 pi radians result type real described language mechanism allow programmer explicitly convert units desired form conversion accomplished assigning value variable desired unit units used intermediate results within arithmetic expression may somewhat unusual always converted programmerspecified unit upon assignment variable conversion units may generate extra multiplication operations however compiler performs constant folding 3 operations conversion factors often combined constants human programmers usually write programs way intermediate results reasonable units reasonable numeric values automatic coercion units performed possible intermediate values may unusual units large small numeric values possible compilergenerated unit conversions might cause loss accuracy compared code written humans unit conversions explicitly reason advisable automatic coercion units used floatingpoint representations high accuracy 64bit ieee standard representation human programmer aware unit conversions always force desired units used compiler performs conversions automatically might allow careless programmer overlook potential accuracy problem found inclusion units programs tends nothing units specified variables units need specified variables appear expressions variables avoid type errors 63 constants units may need include physical constants ie numbers attached units part program adopted syntax allows numeric constant unit packaged together q number unit quoted q form indicates quantity units type result type numeric constant combined specified unit example speed light could q 299792458e8 meter second 64 unit simplification cases unit simplification needed example desirable simplify unit describes result function algorithm unit simplification able handle combination units including mixtures units different systems form unit considered simplified may depend needs user electrical engineer might consider kilowatt hour simplified physicist might prefer joule present algorithm works well simplifying units several commonly used systems units addition allows customization specifying new unit systems unit system set base units convention taken dimensionally independent set derived units formed base units multiplication division convention used unit system units used historical reasons may associated unit system defining terms numeric conversion factor combination base units implemented three unit systems si systeme international si system cgs centimetergramsecond english slugfootsecond commonly used kind unit eg length force pressure etc define standard unit kind unit system eg meter newton pascal respectively si system algorithm symbolic simplification unit follows 1 desired system simplified result may specified parameter unspecified dominant system input unit determined counting number occurrences units associated known systems dominant system cannot determined si used 2 input unit flattened consists quotient two products time input units recursively expanded equivalents terms base units length mass time etc units equivalent numbers dimensionality 0 mega degree converted numbers 3 base units numerator denominator product lists goal system converted corresponding units goal system conversion factors accumulated 4 numerator denominator product lists sorted alphabetically 5 corresponding duplicate units removed lists linear pass two lists cancels units appear numerator denominator 6 standard units defined goal system examined multisets represented numerator denominator standard units expansion contained numerator denominator standard unit factor simplified unit standard unit also tested inverse factor largest standard unit factor size greater one base unit chosen replaces expansion unit simplified process continued replacements made must terminate since replacement makes unit expansion smaller example show algorithm simplifies unit expression simplifyunit joule watt units joule watt defined terms base units second second second second second quotient two units flattened quotient two products meter meter kilogram second second second second second meter meter kilogram two product lists sorted kilogram meter meter second second second kilogram meter meter second second duplicated units two sorted lists removed case result single unit second algorithm advantage universal completely breaking input base units canceling duplicates making new unit result accept combination units input also deterministic produces result way stating unit algorithm also reasonably fast since algorithm works definition unit system terms set preferred units possible user define modified unit system user specifies units preferred result simplification examples unit simplification shown simplifyunit meter footsimplifyunit joule watt simplifyunit joule horsepower simplifyunit kilogram meter second second newton simplifyunit atm 1013250 pascal simplifyunit atm english 14695948775721259 poundspersquareinch simplifyunit amp second volt farad simplifyunit newton meter ampere second simplifyunit volt volt lbf atto parsec 26250801011041247 ohm mentioned determining type returned sqrt function requires making unit half input unit example input unit meter meter output unit would meter process determining unit returned sqrt process unit simplification described except last step initial steps simplification input unit represented flat sorted numerator denominator lists containing base units unit system possibly numeric factor lists must consist adjacent pairs identical units otherwise input unit error output unit determined collecting every member input lists checking make sure alternate member identical making new unit lists square root numeric factor 65 units generic procedures done research reuse generic procedures 22 23 generic procedure one used variety data types arguments generic procedure include units automatic checking conversion units essential correct reuse glisp language 19 21 necessary declare type every variable variable assigned value type inference used determine type value variables type becomes type value assigned assignment values different types variable cause error reported compiler feature useful writing generic procedures necessary specify main types used often types input parameters types derived types types local variables specified indirectly single generic procedure specialized variety input types especially useful case types include units figure calculation position aircraft radar data developed system called vip 24 view interactive programming generates programs graphical connections physical mathematical models program generated equations associated physical models typically types units inputs outputs specified units types intermediate values derived type unit inference system illustrated diagram shown fig 6 problem used example small realistic numerical problem calculation position aircraft data provided air search radar assume radar provides input time difference transmission return radar pulse well angle radar antenna time return pulse detected radar illuminates aircraft assume aircraft transponder transmits identity aircraft altitude position altitude radar station assumed known items comprise input data provided program assume units measurement input data externally specified eg hardware devices program required use given units creating program user vip able select variety predefined physical mathematical models constant values operators initially vip display consists set boxes representing input data output box example user first decides model travel radar beam instance uniformmotion user selects physics command kinematics physics menu uniformmotion kinematics menu input value timediff connected time button motion next user selects constant obtains constant speed light denoted c connects velocity v motion distance motion gives total outandback distance radar aircraft dividing distance 2 oneway distance obtained distance connected hypotenuse geometry object righttriangle difference altitude aircraft altitude radar connected triangle x triangle distance point ground directly underneath aircraft distance angle radar give range bearing aircraft connecting another right triangle x offsets aircraft radar obtained collected form relative position vector relpos added radars utm universal transverse mercator coordinates form output process described rather lengthy described words time taken experienced user create program using vip less two minutes note problem involves several instances conversion units measurement physical constant algebraic manipulation several equations hidden performed automatically fig 7 shows glisp program produced vip fig 8 shows program compiled mechanically translated c example unit conversion major part application program however user needed specify input units unit conversion checking performed automatically compiler source programming difficulty potential error eliminated lambda timediff units integer 100 nanosecond radarutm utmcvector d2 q 2997925e8 timediff x4 x3 cos radarangle relpos figure 7 glisp program generated vip radar problem 7 conclusions future work described algorithms conversion units compiler checking units used arithmetic operations coercing units necessary symbolic simplification combinations units unit conversion algorithms simple possible require one multiply divide per unit conversion one add subtract per unit dimension checking algorithms implemented compiler allows units part data type specifications performs automatic unit checking conversion unit conversion problem go away even united states converts si system workers particular fields continue use units parsec micron rather meter tradition units convenient size measurements typically used practice compiler algorithms described relatively easy implement units could incorporated variety programming languages algorithms make feasible implement essentially known units measurement users may use units find convenient agree karr loveman 15 scientific programming languages support use units hope presentation algorithms encourage trend arpa knowledgesharing project 17 focuses combining data distributed databases knowledge bases algorithms described paper used conversion databases use different units included money dimension since often important convert units dollar kilowatthour include monetary units course conversion cutm tqc timediff aircraftaltitude radaraltitude radarangle long timediff aircraftaltitude radaraltitude radarangle long out1 float d1 out2 x1 y1 x2 cutm relpos glvar1621 relposeast glvar1621east relposeast return output figure 8 radar program compiled converted c factors different currencies constant however updating conversion factors periodically useful approximate conversions obtained algorithms handle units include additive constants common examples units celsius fahrenheit temperature scales features glisp language used handle cases note possible convert pure temperature unit another temperature unit would incorrect multiply nonabsolute temperature another unit kelvin degree rankine linearly related converted algorithms rueyjuin chang implemented analysts workbench 7 aid making analytical models included substance additional part quantity along numeric quantity unit example 10 gallons gasoline gasoline substance engineering scientific calculations often involve conversions depend substance well quantity units example 10 gallons gasoline converted volume 10 gallons mass weight energy money energy equivalent kilograms anthracite coal algorithms presented paper might usefully extended include kinds conversions well 8 software available unit conversion software described paper available free anonymous ftp ftpcsutexasedupubnovakunits written common lisp online demonstration software requires workstation running x windows available world wide web via httpwwwcsutexaseduusersnovak acknowledgment thank anonymous reviewers suggestions improving paper r handbook mathematical functions physical measurements international si system units compilers principles american national standard metric practice ieee standard catlas dimensional analysis clichebased modeling expert problemsolving systems package handling units measure lisp ontology engineering mathematics units measure data attribute value transmission method abstract data types ada package dimensional analysis conversion tables units science engineering quantities units incorporation units programming languages idl sharing intermediate representations enabling technology knowledge sharing international system units si glisp lispbased programming system data abstraction negotiated interfaces software reuse software reuse view type clusters software reuse specialization generic procedures views generating programs connections physical models fundamental measures constants science technology writing applications uniform operation mainframe pc metric conversion program conversion tables si metrication metrication handbook engineers tr ctr sharon l greene tracy lou paul matchen dynamic dimensional feedback interface aid business rule creation chi 05 extended abstracts human factors computing systems april 0207 2005 portland usa tarun rathnam christiaan j j paredis developing federation object models using ontologies proceedings 36th conference winter simulation december 0508 2004 washington dc raya khanin dimensional analysis computer algebra proceedings 2001 international symposium symbolic algebraic computation p201208 july 2001 london ontario canada tudor antoniu paul steckler shriram krishnamurthi erich neuwirth matthias felleisen validating unit correctness spreadsheet programs proceedings 26th international conference software engineering p439448 may 2328 2004 jie liu elaine cheong feng zhao semanticsbased optimization across uncoordinated tasks networked embedded systems proceedings 5th acm international conference embedded software september 1822 2005 jersey city nj usa jiang zhendong su osprey practical type system validating dimensional unit correctness c programs proceeding 28th international conference software engineering may 2028 2006 shanghai china gordon novak jr creation views reuse software different data representations ieee transactions software engineering v21 n12 p9931005 december 1995 gordon novak jr software reuse specialization generic procedures views ieee transactions software engineering v23 n7 p401417 july 1997