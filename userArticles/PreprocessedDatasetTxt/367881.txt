empirical studies prediction model regression test selection abstractregression testing important activity account large proportion cost software maintenance one approach reducing cost regression testing employ selective regression testing technique 1 chooses subset test suite used test software modifications 2 uses subset test modified software selective regression testing techniques reduce cost regression testing cost selecting subset test suite together cost running selected subset test cases less cost rerunning entire test suite rosenblum weyuker recently proposed coveragebased predictors use predicting effectiveness regression test selection strategies using regression testing cost model leung white rosenblum weyuker demonstrated applicability predictors performing case study involving 31 versions kornshell investigate applicability rosenblumweyuker rw predictor additional empirical studies performed rw predictor applied number subjects using two different selective regression testing tools dejavu testtube studies support two conclusions first show variability success predictors work second suggest results improved incorporating information distribution modifications shown rw prediction model improved provide accounting b introduction regression testing important activity account large proportion cost software maintenance 5 17 regression testing performed modified software provide confidence software behaves correctly modifications adversely impacted softwares quality one approach reducing cost regression testing employ selective regression testing technique selective regression testing technique chooses subset test suite used test software modifications made uses subset test modified software 5 selective regression testing techniques reduce cost regression testing cost selecting subset test suite together cost running selected subset test cases less cost rerunning entire test suite empirical results obtained rothermel harrold effectiveness selective regression testing algorithms implemented tool called dejavu suggest test selection sometimes effective reducing cost regression testing reducing number test cases need rerun 24 26 however studies also show situations algorithm costeffective furthermore studies performed independently rosenblum weyuker different selective 1 department computer information science ohio state university 2 department information computer science university california irvine 3 department computer science oregon state university 5 variety selective regression testing techniques proposed eg 1 3 4 6 7 8 9 10 12 13 15 16 18 21 26 27 28 29 30 overview analytical comparison techniques see 25 regression testing algorithm implemented tool called testtube 8 also show methods always costeffective 23 selective regression testing costeffective resources spent performing test case selection wasted thus rosenblum weyuker argue 23 would desirable predictor inexpensive apply could indicate whether using selective regression testing method likely worthwhile motivation rosenblum weyuker 23 propose coveragebased predictors use predicting costeffectiveness selective regression testing strategies predictors use average percentage test cases execute covered entitiessuch statements branches functionsto predict number test cases selected change made entities one predictors used predict whether safe selective regression testing strategy one selects test cases cover affected costeffective using regression testing cost model leung white 19 rosenblum weyuker demonstrate usefulness predictor describing results case study performed involving 31 versions kornshell 23 study predictor reported average expected 873 test cases would selected using testtube approach 881 actually selected average 31 versions since difference values small predictor clearly extremely accurate case authors explain however way selective regression testing model employs averages accuracy predictor might vary significantly practice version version particularly issue wide variation distribution changes among entities 23 however predictor intended used predicting longterm behavior method multiple versions argue use averages acceptable investigate applicability rosenblumweyuker rw predictor safe selective regression testing strategies present paper results additional studies applied rw predictor subjects developed researchers siemens corporate research use studies compare effectiveness certain software testing strategies 14 current paper used dejavu testtube perform selective regression testing following sections discuss results studies background rosenblumweyuker predictor rosenblum weyuker presented formal model regression testing support definition computation predictors costeffectiveness 23 model builds work leung white modeling cost employing selective regression testing method 19 models total cost regression testing incorporates two factors cost executing test cases cost performing analyses support test selection number simplifying assumptions made representation cost models 1 costs constant pertestcase basis 2 costs represent composite various costs actually incurred example cost associated individual test case composite includes costs executing test case storing execution data validating results 3 cost analyses needed select test cases test suite completely negative impact costeffectiveness sense analysis activities drain resources could otherwise used support execution additional test cases 4 costeffectiveness inherent attribute test selection complete maintenance lifecycle rather attribute individual versions rosenblum weyukers model 23 let p denote system test let denote regression test suite p jt j denoting number individual test cases let selective regression testing method used choose subset testing modified version p let e set entities system test considered assumed e nonempty every syntactic element p belongs least one entity e rosenblumweyuker rw model defined covers e coverage relation induced method p defined theta e covers e true execution p test case causes entity e exercised least rosenblum weyuker specify meanings exercised several kinds entities p example e function module p e exercised whenever invoked e simple statement statement condition definitionuse association kind execution subpath p e exercised whenever executed letting e c denote set covered entities rw model defined e c follows je c j denoting number covered entities furthermore covers e represented 01 matrix c whose rows represent elements whose columns represent elements e element c ij c defined ae 1 covers finally cc cumulative coverage achieved ie total number ones 01 matrix first step computing predictor safe strategies single entity changed rosenblum weyuker considered expected number test cases would rerun calling average nm defined rosenblum weyuker emphasized predictor intended used selective regression testing strategys goal rerun affected test cases slightly refined variant nm defined using e c rather e universe entities fraction test suite must rerun denoted predictor jt jjt j rosenblum weyuker discussed results case study test selection prediction results compared 31 versions kornshell using testtube selective regression testing method mentioned study test selection technique chose average 881 test cases test suite 31 versions predicted value 873 concluded difference values small results indicated usefulness predictor way predicting costeffectiveness 3 two new empirical studies rosenblumweyuker predic tor results rosenblumweyuker case study encouraging two reasons 1 difference predicted actual values insignificant 2 large proportion test set would rerun regression testing could quite expensive perform analysis necessary determine test cases need rerun would often costeffective use predictor discover simply rerun test suite rather selecting subset test suite nevertheless study involved single selective regression testing method applied single subject pro gram albeit large widelyused one substantial number actual production versions order obtain broader picture usefulness rw predictor conducted additional studies subject software selective regression testing methods particular performed two new studies two methods dejavu testtube applied suite subject programs used studies testing literature 31 statement hypothesis hypothesis tested new studies hypothesis rosenblumweyuker study hypothesis given system test p regression test suite p selective regression testing method possible use information coverage relation covers induced entities p predict whether costeffective regression testing future versions p previous current studies test hypothesis following assumptions 1 prediction based cost metric appropriate p certain simplifying assumptions made costs described section 2 2 prediction performed using data single version p predict costeffectiveness future versions p 3 costeffective means cumulative cost future versions p applying executing test cases selected less cumulative cost future versions p running test cases socalled retestall method lines number number test pool average test program code functions modified versions size suite size description separation schedule2 printtokens2 printtokens1 replace 516 21 replacement table 1 summary subject programs 32 subject programs new studies used seven c programs subjects previously used study researchers siemens corporate research 14 researchers siemens sought study faultdetecting effectiveness different coverage criteria created faulty modified versions seven base programs manually seeding programs faults usually modifying single line code base version never modifying five lines code goal introduce faults realistic possible based experience ten people performed fault seeding working mostly without knowledge others work 14 p 196 base program hutchins et al created large test pool containing possible test cases program populate test pools first created initial set blackbox test cases according good testing practices based testers understanding programs functionality knowledge special values boundary points easily observable code 14 p 194 using category partition method siemens test specification language tool 2 20 augmented set manuallycreated whitebox test cases ensure executable statement edge definitionuse pair base program control flow graph exercised least test cases obtain meaningful results seeded versions programs researchers retained faults neither easy hard detect 14 p 196 defined detectable least three 350 test cases test pool associated program table presents information subjects program table lists name number lines code program number functions program number modified ie fault seeded versions program size test pool average number test cases 1000 coveragebased test suites generated studies brief description programs function describe generation 1000 coveragebased test suites greater detail 33 design new studies studies analysis based measurements following variables independent variable subject program p test suite p selective regression testing method independent variable relation covers e defined section 2 dependent variables subject program p test suite p selective regression testing method two dependent variables 1 cost applying p 2 cost executing p test cases selected used model described section 2 plus measurements dependent variables perform analyses costeffectiveness study involved different kinds analysis described studies used siemens test pools selected smaller test suites particular randomly generated 1000 branchcoveragebased test suites base program associated test pool 6 create test suite applied following algorithm 1 initialize oe 2 uncovered coverable branches remain randomly select element using uniform distribution b execute p recording coverage c add covered branches p previously covered test cases 3 differs previously generated test suites keep increment new step 3 procedure ensures duplicate test suites program although two different test suites may test cases common studies computed cost measures dependent variables dejavu testtube compared information test selection predictions computed using rw predictor gather information considered base program p modified version p test suite j p j computed following percentage test cases j rw predictor predicts selected dejavu arbitrary change made p percentage test cases j rw predictor predicts selected testtube arbitrary change made p percentage test cases j actually selected dejavu changes made create p p percentage test cases j actually selected testtube changes made create p p finally used values evaluate accuracy rw predictor described detail following sections goal first study determine accuracy average rw predictor subject programs modified versions test suites selective regression testing approaches con sidered therefore used regression test selection information described compute average 6 studies focused costeffectiveness selective regression testing methods rather faultdetecting effectiveness coverage criteria realism modifications made siemens programs significant issue important made independently people involved study thereby reducing potential bias results percentages test cases selected dejavu testtube versions p p p computed following p jversions p j jversions p j 1 p jversions p j jversions p j 2 first step investigation see much percentage test cases actually selected methods differed predicted percentage test cases analysis needed following two additional pieces data computed p testtube j represent deviations percentages test cases predicted rw predictor j average actual percentages test cases selected respective method versions p p possible dejavu j testtube j lie anywhere range 100 100 wanted determine ranges values dejavu j testtube j actually fell thus rounded values dejavu j testtube j nearest integer computed gamma100 100 percentage rounded values value p using values result set h r range value gamma100 r 100 prd percentage rounded dejavu j values rg 5 similarly p using testtube j values result set h testtube r range value gamma100 r 100 prd percentage rounded testtube j values rg 6 sets essentially form histogram deviation values ideal case perfect prediction deviations would zero therefore graph would consist single point 0 100 332 study 2 study 1 treated rw predictor general predictor attempt determine accurate predicting test selection percentages future versions program earlier kornshell study 23 determined relation covers e changes little maintenance particular rosenblum weyuker found coverage relation extraordinarily stable 31 versions kornshell included study average onethird one percent elements relation changing version version two versions amount change exceeded one percent reason rosenblum weyuker argued coverage information single version might usable guide test selection several subsequent new versions thereby saving cost redoing coverage analysis new version however circumstances coverage relation stable may desirable make predictions whether test selection likely costeffective particular version using versionspecific information goal second study therefore examine accuracy rw predictor versionspecific predictor subject programs modified versions test suites intuition cases might important utilize information known specific changes made produce particular version considered base program p modified version p test suite j done study 1 except compute averages percentages test cases selected versions program instead data sets study contain one deviation test suite version program study 1 first step investigation see much percentage test cases actually selected methods differed predicted percentage test cases analysis needed following additional pieces data computed p p testtube ij represent deviations percentages test cases predicted rw predictor j actual percentages test cases selected respective method versions p p study 1 determine ranges values dejavu ij testtube ij actually fell rounded values dejavu ij testtube ij nearest integer computed gamma100 100 percentage rounded values value p using dejavu ij values result set h r range value gamma100 r 100 prd percentage rounded dejavu ij values rg 9 similarly p using testtube ij values result set h testtube r range value gamma100 r 100 prd percentage rounded testtube ij values rg 10 34 threats validity three types potential threats validity studies 1 threats construct validity concern measurements constructs interest ie phenomena underlying independent dependent variables 2 threats internal validity concern supposition causal relation phenomena underlying independent dependent variables 3 threats external validity concern ability generalize results 341 construct validity construct validity deals directly issue whether measuring purport measuring rw predictor relies directly coverage information true measurements coverage relation highly accurate coverage relation certainly possible phenomenon affects costeffectiveness selective regression testing therefore measure partially captures potential need find phenomena measure purposes prediction furthermore relied exclusively number test cases selected measure cost reduction care must taken counting test cases deemed selected since reasons test case may selected execution testing personnel simply lacking time run test case addition whereas particular measure cost reduction appropriate subjects studied may testing situations expense test lab testing personnel might significant cost factors particular possibility using spare cycles might affect decision whether worthwhile use selective regression testing method order eliminate test cases therefore whether predictor meaningful 342 internal validity basic premises underlying rosenblum weyukers original predictor 1 costeffectiveness selective regression testing method hence ability predict costeffectiveness directly dependent percentage test suite selective regression testing method chooses run 2 percentage turn directly dependent coverage relation experiment take first premise assumption investigate whether relation percentage tests selected coverage exists appropriate basis prediction new data presented paper reveal coverage explains part costeffectiveness method behavior rw predictor future studies therefore attempt identify factors affect test selection cost effectiveness 343 external validity threats external validity studies centered around issue representative subjects studies subject programs new studies small sizes selected test suites small means even selected test suite whose size differs average predicted value one two elements would produce relatively large percentage difference results study 1 therefore particularly interesting show small average deviations subject programs studies involving siemens programs test suites chosen test pools using branch coverage much finer granularity testtube uses suggesting potential mismatch granularity may somehow skew results generally reasonable ask whether results dependent upon method test pools test suites generated way programs modifications designed view branch coverage suites reasonable test suites could generated practice coveragebased testing programs performed course many ways testers could select test cases test suites studied type suite could found practice results predictive power respect test suites valuable fact faults synthetic sense seeded siemens programs may also affect ability investigate extent change information help us predict future changes later section introduce new predictor call weighted predictor predictor depends versionspecific change information seemed likely conclusions drawn using synthetic changes would necessarily hold naturally occurring faults attempt use siemens programs faulty versions empirically investigate use weighted predictor nevertheless predictor dependent whether changes seeded naturally occurring thus results provide useful data points 4 data results 41 study 1 figure presents data dejavu j equation 3 testtube j equation 4 one graph subject program p appendix gives details computation data using one subject programs printtokens2 example graph contains solid curve dashed curve solid curve consists connected set points h dejavu j equation 5 whereas dashed curve consists connected set points h testtube j equation 6 points left 0 deviation label horizontal axes represent cases percentage test cases predicted less percentage test cases selected tool whereas points right 0 represent cases percentage test cases predicted greater percentage test cases selected tool facilitate display values logarithmic transformation applied axes smoothing algorithms applied curves p j dejavu j range 2033 testtube j range 2428 however shall see figure 2 ranges bit misleading rarely significant number values outside range 100 010 particularly testtube graphs show subjects rw predictor quite successful dejavu testtube selection methods predictor least successful printtokens2 program predicted average 23 test cases dejavu actually selected deviation exceeded 10 using dejavu approach schedule1 prediction roughly 9 high average compared dejavuselected test suite dejavu selected average roughly 10 test cases predicted schedule2 7 totinfo 7 tcas 3 printtokens1 4 fewer replace rw predictor predicted testtube predictor also almost always predicted within 10 actual average number test cases actually selected exception totinfo program average deviation 12 programs average deviations 5 printtokens1 program 5 printtokens2 program 4 replace program 7 tcas program 10 schedule1 1 schedule2 consider results encouraging although successful results described rosenblum weyuker kornshell case study recall study total 31 versions kornshell large program large user base changes made fix real faults modify functionality none changes made purpose study another way view data study consider deviations predicted percentage totinfo schedule2 schedule1 printtokens2printtokens1 60legend actual test selection level deviation occurred vertical axes percentage test suites solid curve dejavu results dashed curve testtube results horizontal axes deviation predicted versus figure 1 deviation predicted actual test selection percentages application dejavu testtube subject programs figure contains one graph subject program graph solid curve represents deviations dejavu dashed curve represents deviations testtube tcas schedule1 schedule2 totinto printtokens2 printtokens1 replace 10 20 20 30 predicted actual test selection percentages absolute value deviation figure 2 absolute value deviation predicted actual test selection percentages application dejavu testtube subject programs figure contains two bars subject program left bar pair represents absolute value deviation dejavu results rw predictor right bar represents absolute value deviation testtube results rw predictor program p numbers averages versions p p bar represents 100 test suites j shading used indicate percentage test suites whose deviations fell within corresponding range actual percentage without considering whether predicted percentage greater less actual percentage selected deviations constitute absolute value deviation compute absolute value deviation performed additional computations p j first computed absd dejavu j j tabulated percentage absd dejavu j absd testtube j fell ranges 010 1020 90100 figure depicts results segmented bar graphs figure contains two bars subject program left bar pair represents absolute value deviation dejavu results rw predictor right bar represents absolute value deviation testtube results rw predic tor program p numbers averages versions p p bar represents 100 test suites j shading used indicate percentage test suites whose deviations fell within corresponding range instance case printtokens2 100 test suites showed less 10 deviation testtube whereas dejavu 14 test suites showed deviations 10 20 82 showed deviations 20 30 4 showed deviations 30 40 results study show many subject programs modified versions test suites absolute value deviation dejavu testtube less 10 cases rw model explains significant portion data however cases absolute value deviation significant example mentioned printtokens2 absolute value deviation predictor dejavu 20 30 80 versions one additional feature data displayed figure 1 bears discussion programs printtokens2 curves represent deviations dejavu testtube relatively close one another printtokens2 contrast two curves disjoint relatively widely separated examination code coverage data locations modifications programs reveals reasons difference sixteen nineteen printtokens2 functions executed large percentage average 95 test cases programs test pool remaining three functions executed much lower percentages 20 50 test cases test pool modifications printtokens2 occur sixteen functions executed nearly test cases thus actual test selections testtube average include test cases presence latter three functions small number test cases reach however causes reduction average number test cases per function causes functionlevel predictor underpredict 0 10 number test cases selected testtube even though nearly test cases enter nearly functions printtokens2 several functions contain branches significantly partition paths taken test cases enter functions thus many statements printtokens2 actually executed fewer 50 test cases enter enclosing functions modifications occur lessfrequently executed statements dejavu selects much smaller test suites testtube empirical comparison testtube dejavu see 22 case approximately half modified versions printtokens2 utilized study however presence large number statements executed larger proportion test cases causes average number test cases per statement exceed number test cases modified statements end result statementlevel predictor overpredicts number test cases selected dejavu 5 27 course precise locations modifications subjects directly affect results therefore fact changes synthetic concern trying generalize results 42 study 2 like figure 1 figure 3 contains one graph subject program graphs also use notation used figure 1 using solid curve represent percentage occurrences dejavu ij deviations test suites j using dashed curve represent percentage occurrences deviations test suites j logarithmic transformation applied axes figure 4 depicts results segmented bar graph manner figure 2 results study show subject programs modified versions test cases deviations absolute value deviations individual versions dejavu testtube much greater study 1 surprising study results averaged versions study 1 example consider tcas printtokens1 replace study 1 average absolute value deviation predicted percentage programs less 10 using either dejavu testtube however individual versions considered percentage test schedule1 tcas schedule2 printtokens2 replace legend horizontal axes deviation predicted versus actual test selection level deviation occurred vertical axes percentage test suites solid curve dejavu results dashed curve testtube results figure 3 versionspecific absolute value deviation predicted actual test selection percentages application dejavu testtube subject programs figure contains one graph subject program graph solid curve represents deviations dejavu dashed curve represents deviations testtube tcas schedule1 schedule2 totinto printtokens2 printtokens1 replace 10 20 20 30 versionspecific absolute value deviation predicted actual test selection percentages figure 4 versionspecific absolute value deviation predicted actual test selection percentages application dejavu testtube subject programs figure contains two bars subject program left bar pair represents absolute value deviation dejavu results rw predictor right bar represents absolute value deviation testtube results rw predictor program p numbers averages versions p p bar represents 100 test suites j shading used indicate percentage test suites whose deviations fell within corresponding range cases selected dejavu programs varies significantly 64 percentages predicted deviations absolute value deviations subjects show similar differences figure 3 range deviations seen cases least versions small number instances deviations significant bar graphs figure 4 show clearly frequently large absolute value deviations occur figure 3 data printtokens2 particularly interesting case curve testtube peaked relatively narrow whereas curve dejavu nearly flat relatively wide discussed preceding section techniques differences reflect differences degree variance coverage relations statement function level well differences location modifications case however considering prediction versionspecific basis causes deviation prediction statement level variance coverage large flat lack variance coverage function level prevents testtube curve flat 5 improved predictors discussed section 34 assumptions underlying measurement costs may pose threats validity conclusions predictions costeffectiveness using rw predictor furthermore subject programs studies significant absolute deviation results selective regression testing tools dejavu testtube respect test selection values predicted rw predictor therefore believe may factors affecting costeffectiveness captured rw predictor factors added model could improve accuracy general versionspecific predictors rw predictor accounts test coverage account locations modifications therefore one obvious refinement would incorporate information modifications predictor saw study 2 specific changes made create particular version may significant effects accuracy prediction practice thus believe extended weighted predictor might accurate general versionspecific prediction predictor would incorporate information locations changes weight predictor accordingly end section extend rw predictor adding weights represent relative frequency changes covered entities element e relative frequency e j modified defined 1 original unweighted rw model discussed section 2 computes expected number test cases would rerun single change made program model uses average number test cases cover covered entity average referred n c weighted analogue n c weighted average wn c define follows wn c c ij defined ae 1 covers note inner sum represents total number test cases covered e multiplying sum weighted contribution total number test cases selected overall weighted average fraction test suite must rerun denoted pi given follows note original unweighted rw predictor version weighted predictor w j 1 represents assumption entity equally likely changed figure 5 coverage pattern figure coverage pattern b see impact difference pi consider coverage patterns b shown respectively figures 5 6 dot represents entity closed curve test case assume patterns generalized large number entities n discussed rosenblum weyuker 23 value predicted pattern 2n pattern test cases distributed evenly entities thus pi yield exact number test cases would selected either dejavu testtube regardless relative frequency changes hence regardless values assigned w j pattern b test cases distributed evenly entities contrast pattern rw predictor never predicts exact fraction selected changed entity significantly inaccurate change core element pattern suppose however instead assuming frequency change equal entities information relative frequency modifications individual entities case using weighted predictor could compute accurate estimate fraction test suite would selected example knew changes always made two noncore entities one changed exactly often entities ever changed weights would 12 two changed entities 0 entities thus would predict case single entity change 1n test suite would selected rather 2n predicted unweighted predictor 51 improved general prediction provided obtain values weights accurately model distribution future modifications program use weighted predictor pi improve general prediction one approach utilize change history information program often available configuration management systems assuming change histories accurately model pattern future modifications result suggested work harrison cook 11 use information compute weights pi change histories recorded module level pi used well predict percentage test cases selected average tool testtube considers modulelevel changes system change histories recorded statement level pi used predict percentage test cases selected average tool dejavu considers statementlevel changes system either case weighted predictor used incorporate data may account changelocation information without performing full change analysis thus used assess whether worthwhile perform analysis needed selective regression testing tool practice weights may collected assumed fixed number subsequent versions program may adjusted change history information becomes available context important consideration involves extent weights collected particular time history program continue predict values future versions program extent accuracy predictions based weights may decrease time future empirical study issue necessary 52 improved versionspecific prediction also use weighted predictor pi versionspecific predictor versionspecific predictor one approach computes w using configuration management system assign weight 1k entity changed k total number entities changed assign weight 0 entities system using weights pi computes exact percentage test cases selected test selection tool selects granularity entities example entities modules pi predict exact percentage test cases selected test selection tool testtube considers changes module level entities statements pi predict exact percentage test cases selected test selection tool dejavu considers changes statement level cost determining number test cases selected cheaper cost actually selecting test cases approach costeffective worth noting rosenblum weyuker found experiments kornshell typically necessary recompute coverage relation frequently remained stable 31 versions studied typical system test make versionspecific predictors extremely efficient use therefore provide valuable information whether use selective regression testing strategy likely costeffective current version system test alternative approach assumes method supplemented additional change analysis capability efficient less precise change analysis supplementary change analysis used critical phase regression testing modifications made create p 0 new version p 7 results supplementary change analysis used assign weights entities system used prediction described using weighted predictor pi versionspecific predictor especially appropriate test suites whose test cases evenly distributed across entities case illustrated pattern b test selection results specific versions may differ widely average test selection results sequence versions 6 conclusions paper presented results new empirical studies designed evaluate effectiveness accuracy rosenblumweyuker rw model predicting costeffectiveness selective regression testing method rw model originally framed solely terms code coverage information evaluated empirically using testtube method sequence 31 versions kornshell new studies two selective regression testing methods used testtube dejavu seven different programs used subjects experimental subjects used new studies original rw model frequently predicted average overall effectiveness two test selection techniques accuracy believe acceptable given cost assumptions underlying rw model quite realistic subjects however predictions model occasionally deviated significantly observed test selection results moreover model applied problem predicting test selection results particular modified versions subject programs predictive power decreased substantially particularly dejavu results suggest distribution modifications made program play significant role determining accuracy predictive model test selection therefore conclude achieve improved accuracy general applied versionspecific manner prediction models must account code coverage modification distribution response result showed extend rosenblumweyuker predictor incorporate information distribution modifications however judge efficacy extended predictive model practice require additional experimentation purpose subjects used studies reported paper suffice rather require versions program form succession changes base versions versions kornshell currently building repository programs versions complete provide subjects suitable empirical investigation predictive models regression testing general weighted predictor particular future studies must directed toward validation rw predictor improved predictors described paper toward development realistic cost model regression 7 rothermel harrold divide regression testing two phases purpose cost analysis preliminary phase changes made software new version software built critical phase new version software tested prior release customers 25 test version 4 417 182 250 300 385 375 364 357 version 5 83 91 125 100 77 125 91 71 version 6 167 455 250 200 308 250 182 143 version 7 417 182 250 300 385 375 364 357 version 8 667 818 625 700 769 750 818 714 version 9 417 182 250 300 385 375 364 357 333 table 2 partial data used computation graphs figure 1 testing require extensive field studies existing large systems order create better picture different factors driving costeffectiveness test suite size test case execution times testing personnel costs availability spare machine cycles regression testing acknowledgments work supported part grant microsoft inc nsf nyi award ccr9696157 ohio state university career award ccr9703108 oregon state university experimental software systems award ccr9707792 ohio state university oregon state university ohio state university research foundation seed grant thanks huiyu wang performed experiments panickos palletas qiang wang advised us statistical analysis jim jones performed statistical analysis monica hutchins tom ostrand siemens corporate research supplying subject programs data necessary experimentation appendix details computation data figures 1 3 compute data used graphs figure 1 used procedure described section 331 explanation give details computation data one subject program printtokens2 experiments used 1000 coveragebased test suites 1 1000 table 2 shows data subset test suites test suite j used rw predictor predict number test cases would selected dejavu arbitrary change made printtokens2 used number determine dejavu j percentage test cases rw predictor predicts selected dejavu arbitrary change made printtokens2 first row table 2 gives percentages ten versions printtokens2 see table 1 next ran dejavu ten versions 1000 test suites version test suite j recorded number test cases selected used number compute j dejavu ij percentage test cases selected ten rows versions percentages example table see ranges 83 667 using equation 1 computed dejavu j test suite j table 2 gives percentages j used equation 3 compute j difference percentage predicted rw predictor average percentage selected dejavu ie dejavu j table 2 shows dejavu j range 189 261 finally created set h dejavu equation 5 ordered pairs set obtained first rounding percentages dejavu j determining number rounded percentages range value gamma100 r 100 determining percentage percentages occur value r thus printtokens2 dejavu 6 rounds 19 dejavu 3 dejavu 7 round rounds 22 dejavu 4 rounds 23 dejavu 1000 rounds 24 dejavu 2 rounds 26 thus ordered pairs h dejavu first coordinates 19 21 22 21 24 26 number rounded percentages 1 1000 used compute percentage times among 1000 test suites percentage occurs used computation second coordinates ordered pairs used ordered pairs plot solid curve printtokens2 figure 1 used similar approach obtain data figure 3 except compute averages deviations compute data used graphs figure 3 used procedure described section 332 explanation give details computation data one subject program printtokens2 table 3 shows data subset 1000 coveragebased test suites test suite used rw predictor predict number test cases would selected dejavu arbitrary changes made printtokens2 used number determine dejavu j percentage test cases rw predictor predicts selected dejavu arbitrary change made printtokens2 first row table 3 gives percentages next ran dejavu ten versions printtokens2 version recorded number test cases selected used number compute dejavu ij 110 percentage test cases selected ten rows versions table 3 give percentages used equation 7 compute version j dejavu ij difference percentage predicted rw predictor percentage selected dejavu table 3 shows percentages range 266 525 finally created set h dejavu equation 9 ordered pairs obtained first rounding percentages dejavu ij determining number rounded percentages range value determining percentage percentages occur value r example printtokens2 dejavu 12 dejavu 82 dejavu 86 round gamma20 dejavu 45 dejavu 75 dejavu 47 dejavu 77 dejavu 97 dejavu 107 round 20 thus h dejavu contains ordered pairs gamma20 20 first coordinates number rounded percentages 1 1000 used compute percentage times among 1000 10 testsuiteversion pairs percentage occurs used computation second coordinates ordered pairs test version 4 417 182 250 300 385 375 364 357 version 5 83 91 125 100 77 125 91 71 version 6 167 455 250 200 308 250 182 143 version 7 417 182 250 300 385 375 364 357 version 8 667 818 625 700 769 750 818 714 version 9 417 182 250 300 385 375 364 357 version 3 381 434 280 440 349 426 378 334 version 4 131 434 280 240 195 176 196 191 version 6 381 161 280 340 272 301 378 405 version 7 131 434 280 240 195 176 196 191 version 8 gamma119 gamma202 gamma95 gamma160 gamma189 gamma199 gamma258 gamma166 version 9 131 434 280 240 195 176 196 191 table 3 partial data used computation graphs figure 3 used procedure obtain data rest graphs figure 3 dejavu used similar procedure obtain data graphs testtube r incremental regression testing automatic generation test scripts formal test specifi cations limit control flow analysis regression test selection incremental program testing using program dependence graphs software testing techniques semantics guided regression test cost reduction system selective regression testing methodology retesting modified software approach regression testing using slicing insights improving maintenance process software measure ment incremental approach unit testing maintenance techniques selective revalidation experiments effectiveness dataflow controlflowbased test adequacy criteria program modifications applications software main tenance methodology test selection insights regression testing study integration testing software regression integration level cost model compare regression test strategies categorypartition method specifying generating functional tests using dataflow analysis regression testing empirical comparison regression test selection techniques using coverage information predict costeffectiveness regression testing strategies empirical studies safe regression test selection technique analyzing regression test selection techniques logical modification oriented software testing approach software fault localization revalidation based incremental data flow analysis regression test selection tool based textual differencing method revalidating modified programs maintenance phase tr ctr david notkin longitudinal program analysis acm sigsoft software engineering notes v28 n1 p11 january alessandro orso nanjuan shi mary jean harrold scaling regression testing large software systems acm sigsoft software engineering notes v29 n6 november 2004 amitabh srivastava jay thiagarajan effectively prioritizing tests development environment acm sigsoft software engineering notes v27 n4 july 2002 john bible gregg rothermel david rosenblum comparative study coarse finegrained safe regression testselection techniques acm transactions software engineering methodology tosem v10 n2 p149183 april 2001 hyunsook gregg rothermel empirical study regression testing techniques incorporating context lifetime factors improved costbenefit models proceedings 14th acm sigsoft international symposium foundations software engineering november 0511 2006 portland oregon usa mary jean harrold testing roadmap proceedings conference future software engineering p6172 june 0411 2000 limerick ireland