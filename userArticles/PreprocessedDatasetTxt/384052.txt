framework semantic reasoning byzantine quorum systems defined class shared variables called tsvariables includes implemented various byzantine quorum system constructions malkhi reiter developed number definitions theorems enabling us reason variables abstractly using tools reduced problem lamports atomic semantics variables simpler problem regular semantics discuss fact problems remained stubbornly difficult solve types byzantine quorum system variables notably masking quorum system variables showing solvable traditional approaches asynchronous environment finally variables define notion pseudoregular pseudoatomic semantics state briefly similar reduction holds concepts b introduction byzantine quorum systems mr98a promising approach problem eciently implementing byzantine faulttolerant data services several variations approach baz97 mrwr97 mrw97 mr98a basic concept data maintained simultaneously multiple sites read write operation processed subset called quorum sites quorums dened way intersection two quorums contains enough servers allow query determine return accurate uptodate information even presence limited set arbitrarily faulty servers furthermore subset servers concerned given operation system also remain available spite limited server crashes network partitions finally fact service designed tolerate outofdate servers eg part recent write quorum greatly simplies task recovering failures long quorum servers date others may brought back online without need recover recent state analyzing semantics shared variables implemented quorum systems quite chal lenging heretofore analysis limited individual protocols framework reasoning semantics quorum variables family example exist compelling arguments eect fully serializable operations achieved types quorum systems notably dissemination quorum systems mr98b remain open problem others eg masking quorum systems mr98a arguments tell us discrepancies exist degree individual solutions generalized one primary contributions paper address need present set denitions theorems allow us reason class shared variables implemented quorum systems including various byzantine quorum systems call variables tsvariables important role timestamps protocols 1 give adapted version lamports formal denitions concepts safe regular atomic semantics lam86 concepts traditionally used describe semantics byzantine quorum systems use necessarily somewhat informal lamports formal denitions theorems based assumption variable writes never concurrent one another adaptation dependent assumption applied directly variables interest fully calculational proof style far know rst paper apply calculational proofs quorum system variables use formalisms prove atomicity result mr98b generalizes important theorem tsvariables writeback mechanism used particular protocol fact reduces problem atomic variable semantics tsvariable simpler problem regular semantics correctness atomic protocol mr98b fact viewed corollary result cryptographic framework dissemination quorum systems sans writeback enforces regular semantics followup show problem atomic semantics fully serializable operations straightforwardly solved types quorum system remaining unsolved others specically show signicant subclass tsvariables traditional approaches protocol design always danger failed read queries aborted retried incorrect asynchronous environment fact masking quorum systems mr98a atomic semantics proved stubbornly elusive fall category finally propose brie discuss somewhat weaker notions pseudoregular pseudoatomic semantics systems structure paper follows section 2 dene tsvariables number related concepts theorems including adapted version lamports semantic categories section 3 use fact denition tsvariables specic quorum system variables simply captures properties common variables relevant analysis theorems therefore also hold variable types may share properties formalisms give fully calculational proof regular readwrite protocol satises denition tsvariable protocol used implement corresponding atomic readwrite protocol section 4 show important class possible protocols traditional approaches protocol design always result danger unresolvable queries asynchronous system dene weaker notions pseudoregular pseudoatomic semantics implemented spite queries conclude section 5 example pseudoregular protocol masking quorum systems included appendix preliminaries 21 formalizing masking quorum system variables tsvariables order reason formally byzantine quorum system variables class need abstraction denes important features variables independently operational details end section introduce concept tsvariables begin dening general concept timestamped variables well number useful functions variables denition 1 timestamped variable variable type whose value read updated conjunction associated timestamp timestamps drawn unbounded totally ordered set let rw set read write operations timestamped variable given readwrite protocol let r rw set reads let w rw set writes following function denitions hold r b represent set reals set booleans respectively value op 2 rw op read valueop value returned read op write valueop value written ts op 2 rw op read tsop timestamp value returned read op write tsop timestamp assigned value written readsfrom r 2 r w reads result write w timestamped variables dene equivalent readsfrom purposes next two functions postulate realvalued global clock eg age universe milliseconds provides absolute timescale system events systems discuss asynchronous individual processes access global clock values functions used reasoning purposes start start time operation global time end end time operation global time purpose functions give us convenient shorthand reasoning possibility concurrency operations without specic actual nondeterministic asynchronous environment order servers process requests essentially op2 concurrent op1 whereas concurrency may exist thus needs resolved proposed serialization op1 op2 simplicity therefore treat latter expression denition concurrency hereafter 2 keeping hypothetical meaning stipulate start end functions meet following restriction 211 tsvariables variable consists type memory address specication operations may performed including least read write 3 refer specication variable protocol read write activity variable described terms run protocol denition 2 run variable v set operations performed v meet specication vs protocol call run rw complete read operations r 2 rw exists write operation rw readsfrom r w useful separate term run consisting operations performed variable lifetime denition 3 history variable run consisting operations performed variable lifetime chapter continue use label rw represent variable run subscripts used distinguish runs context otherwise clear projection run rw onto read operations denoted r corresponding projection onto write operations denoted w although researchers use terms run execution interchangeably work nd useful follow example lam86 gives distinct technical meanings specically execution associates run precedence relation operations run ie denition 4 execution variable v pair hrw rw run v precedence relation irre exive partial order operations rw dene two specic types execution special importance work denition 5 execution hrw said realtime consistent denition 6 execution hrw said writeordered satises following 1 2 hw realtime consistent 2 literal denition would two operations concurrent exist two servers process dierent order however readily seen endop1 startop2 every server processes op1 hence concurrent 3 concern readonly variables context work words 1 writeordered execution write operations totally ordered 2 order consistent partial order write operations real time denition 7 runs rw timestamped variable v relation ts dened 1 8op 2 rw8w ts w tsop tsw 2 8w 2 w8r ts r tsw tsr 3 8r r b ts easy see ts irre exive antisymmetric transitive therefore irre exive partial order note operations identical timestamps necessarily ordered ts dene tsvariables follows denition 8 tsvariable timestamped variable v histories rw v hrw ts writeordered note denitions 7 8 imply tsvariable writes uniquely identied timestamp thus given read one write timestamp therefore make following observation provides simplied form denition readsfrom tsvariables observation 1 read operation r write operation w complete tsvariable run 22 formalizing data semantics tsvariables dene means writeordered execution safe regular atomic denitions safe regular based idea write variable completed previous values variable read concept expressed lam86 terms set writes given read sees 4 denition 9 writeordered execution hrw let w ordered list write operations rw dened furthermore given read operation r let index last write precedes r ie startrg say r sees w 0 w express relationship predicate form thus values read sees might legitimately returned read ie value recently completed write w values concurrent writes denition dicult use directly fortunately fact hrw writeordered implies writes seen r fall within welldened range write earlier last terms write order precede r later last write concurrent r 4 lam86 dened concept singlewriter register whose write operations thus necessarily serial relax requirement dening version sees terms serializable rather serial writes thus denition applied variables multiple writers observation 2 given read r let dened denition 9 let 5 ready give denitions safe regular atomic executions 221 safe executions informal terms execution safe read sees one write returns value write operationally means read concurrent writes returns result recent write according serialization dened writeordering formally continuing use w denote th write order dened say denition writeordered 222 regular executions writeordered execution regular every read returns value sees ie result recently completed write concurrent one formally denition 11 execution hrw regular writeordered note regular execution necessarily safe tsvariables denition useful consequence timestamp given read least timestamp recently completed write formally ts regular calculational proof lemma given figure 1 consists showing arbitrary write precedes given read timestamp less equal read 5 note reverse true possible write fall within given range without seen invisible occurs read r concurrently w j figure 1 proof lemma 1 223 atomic executions finally dene atomic execution execution behaves though operations totally ordered realtime consistent way ie totally ordered b behave though performed serially order c order consistent partial order operations real time denition 12 execution hrw atomic total order rw note second third bullets denition imply atomic execution also regular reverse necessarily true safeness regularity atomicity variable protocol property set possible histories see denition variable implemented protocol denition 13 variable protocol safe regular atomic respect precedence relation possible histories rw consistent protocol execution hrw safe regular atomic protocol safe regular atomic safe regular atomic respect precedence relation variable safe regular atomic protocol safe regular atomic observation 3 denitions 11 12 specically second bullet imply every read regular atomic execution reads write thus possible histories regular atomic variable complete runs 3 reducing atomic semantics problem previous section developed tools reasoning tsvariables class shared variables includes implemented various types benign byzantine quorum systems demonstrate power tools using prove writeback mechanism mr98b apply dissemination quorum systems used promote regular protocol atomic one type tsvariable specically show construct protocol tsvariable atom given protocol regular tsvariable v reg prove result atomic accomplish means following steps 1 add new operation protocol v reg dene operations v atom terms expanded regular protocol show resulting v atom tsvariable 2 dene total order ts 0 operations v atom extends ts ie op ts op b op ts 0 3 use denition 13 prove v atom atomic respect ts 0 31 dening atomic protocol let v reg regular tsvariable expand protocol v reg dening third operation addition read write writeback writeback operation similar write operation v reg except whereas write operations calculate timestamps writeback takes timestamp argument thus writebacks necessarily ordered ts stipulate however runs rw exp expanded protocol continue satisfy lemma 1 well following additional property 6 property 1 read operations r write operations w writeback operations b rw exp dene proposed atomic variable protocol v atom follows read reg write reg read write protocols v reg val ts value timestamp respectively read reg operation words write operation v atom consists single write operation v reg read operation v atom consists read operation v reg followed writeback resulting value timestamp timestamp read atom write atom operation identical timestamp underlying read reg write reg operation write operation v atom consists exactly one write operation v reg follows v atom also tsvariable clarity hereafter follow convention operations v atom represented boldface operations v reg represented italics 6 masking quorum systems dissemination quorum systems lemma 1 property 1 implemented writewriteback perform null operation server whose current timestamp variable higher writewriteback thus monotonicity timestamps enforced server 32 total order operations v atom preparation proving v atom atomic specify precedence relation totally orders runs rw atom v atom ts relation already dened sucient order read operations share timestamp therefore propose dene extension ts 0 ts using following additional function maps operations run rw totally ordered set gtf arbitrary function following three properties uniqueness 8op op b 2 rw gtf op example function mapping op 2 rw pair timeop id id unique realvalued operation identier purpose gtf function act supplement timestamps dene serialization operations sequentiality ensures order imposed gtf compatible partial order operations realtime uniqueness ensures function act tiebreaker operations timestamp read promotion ensures read operation higher gtf write might aect 7 dene ts 0 follows given run rw atom v atom 8op op b 2 rw atom op ts 0 words ts 0 lexicographic ordering pair tsop gtf op therefore total order virtue uniqueness property gtf fact ts gtf totally ordered codomains consequence denition following lemma corollary allow us use denition 12 prove atomicity ts op b op ts 0 corollary 1 executions hrw atom ts 0 v atom writeordered ts 0 ts r proofs lemma corollaries straightforward omitted reasons space 33 proving v atom atomic remaining goal prove hrw atom ts 0 atomic runs rw atom v atom thus proving v atom atomic variable theorem 1 possible histories rw atom v atom execution hrw atom ts 0 atomic already shown ts 0 totally orders rw atom remaining obligations prove 7 fact properties sucient allow us dene total order strictly terms gtf however gtf alone specify behavior timestamps allow us reason directly behavior reads via readsfrom function therefore use gtf indicated figure 2 proof readsfromr w ts 0 ts 0 hrw ts 0 realtime consistent proofs appear figures 2 3 latter case obligation prove ts 0 prove separately four possible cases two writes write followed read read followed write two reads simplicity use convention r w possible subscripts refer operations rw atom r w b denote corresponding read write writeback operations expanded regular protocol figure 3 thus reduced problem atomic semantics tsvariables regular semantics next section show latter problem readily solvable types tsvariables eg dissemination quorum systems signicant class tsvariables including unfortunately masking quorum systems regular semantics cannot achieved asynchronous environment using type approach heretofore standard end section brie discuss regular atomic semantics may approximated variables regular pseudoregular semantics exceptions eg baz97 byzantine quorum system protocols designed asynchronous systems restrictions typically client may send write request quorum servers time using choice timestamp ie writes always enabled ordering scheduling imposed read write requests read write requests processed servers order received 8 according convention adopted earlier ratom set read operations rwatom figure 3 proof hrw ts 0 realtime consistent hereafter describe system characteristics nonrestricted system although several variations quorum system protocols currently literature share following characteristics 1 server maintains single version variable image given time 2 read generates single query returns non value appropriately dened voucher set servers responds query identical images otherwise returns value timestamp context signal aborted operation never written 3 processing write request suciently high timestamp changes state variable image server processing read request consists simply returning requested data remainder discussion refer protocol classic quorum protocol specically smallest voucher set accepted protocol size refer classic mset quorum protocol section show 1 classic mset quorum protocol nonrestricted system may return response given query read r returns value exists write w readsfromr w thus history contains read regular cf observation 3 short theorem 2 1 classic mset protocol regular nonrestricted system prove theorem showing certain possible server responses read query system unresolvable 1 results read value corollary theorem also show true even server maintains bounded list variable images received 41 denitions begin number useful denitions let p classic mset quorum protocol let r w operations p r read operation w recently completed determined timestamp write operation beginning r let q r qw quorums r w respectively performed let f q r set servers return faulty responses read r denition 14 informed set r set q r qw n f note writes concurrent r servers q r qw overwritten since w informed set r voucher set r case servers informed set return results writes r sees denition 9 worst case servers therefore observe observation 4 protocol p regular possible sets responses read informed sets contain identical responses least one voucher set 42 nonregularity argument smallest informed set let q quorum system classic mset quorum protocol p let mininf size smallest possible informed set q 9 smallest informed set represents worstcase scenario successful read suppose given history rw p every read operation concurrent k write operations theorem 3 rw regular proof arbitrary read operation r let partitioning informed set 0 contains servers return result recently completed write operation contains servers return result th write concurrent r nonrestricted system sets may nonempty depending order concurrent operation requests received individual servers prove portions theorem separately 9 every quorum system based welldened set possible failure scenarios value welldened dmininf k read r 2 r contains voucher set extended pigeonhole principle states least one member partition contains least average number elements partition suppose dmininf k r read operation informed set size mininf suppose r concurrent exactly k writes furthermore let r even partition ie partition every set contains either ceiling oor average number elements r contain voucher set r returns implying rw regular since history possible system described protocol regular2 since denition nonrestricted system allows arbitrary values k lemma 3 classic mset protocol p regular nonrestricted system theorem 3 follows directly result thus 1 classic mset read protocol ie protocol requires agreement multiple servers order determine correct result regular unrestricted system category includes masking quorum systems mr98a worth noting ordinary quorum systems dissemination quorum systems classic mset protocols already known regular appropriate failure models benign byzantinelimitedbyauthenticateddata respectively 421 nonregularity classic protocols bounded image list dene classic mset protocol bounded image list enhanced mset protocol following characteristics 1 server maintains bounded list images received given variable ie list last hsize images written server 2 read returns non value receives identical images least b specied b 0 even server responds every query entire list hsize images remains possible read query unresolvable nonrestricted system ie lemma 4 1 classic mset quorum protocol bounded image list regular nonre stricted system proof nonrestricted system given read operation may concurrent unbounded number writes suppose read operation r concurrent hsizes write operations hsize size bounded image list size informed set r 1 server may receive rst hsizei write requests receiving request r image list 1 contain images rst hsize writes image list 2 contain images next hsize writes displace rst hsize list bounded forth response query r therefore receives hsizes dierent variable images exactly one server therefore unable resolve query2 43 ignoring aborts pseudoregular semantics certain applications however may able tolerate occasional aborted reads applications worthwhile reason somewhat weaker version regular atomic semantics variables refer pseudoregular respectively pseudoatomic semantics dene concepts terms variable pseudohistories follows denition 15 pseudohistory variable run consisting writes variable history reads return ie set nonaborted operations dene new semantic concepts follows denition variable protocol pseudoregular pseudoatomic respect precedence relation possible pseudohistories rw consistent protocol execution hrw regular atomic protocol pseudoregular pseudoatomic pseudoregular pseudoatomic respect precedence relation 431 reducing pseudoatomicity pseudoregularity suppose pseudoregular protocol tsvariable example protocol masking quorum systems appears appendix paper initially sketched amprw00 possible pseudohistory rw execution hrw ts satises denition 11 rw complete run therefore arguments section 3 apply pseudohistories well writeback mechanism demonstrated thus used produce pseudoatomic protocol pseudoregular one 5 conclusion paper presented set denitions theorems allow us reason semantics shared variables implemented various types quorum systems including oftenproblematic byzantine quorum systems framework allows us develop theorems variables call tsvariables class without reference details individual implementations also used resulting tools prove regular protocol tsvariable straightforwardly enhanced atomic protocol subsidiary result showed signicant subclass tsvariables including masking quorum systems traditional design approaches cannot produce regular protocol asynchronous environment variables introduce idea pseudoregular pseudoatomic semantics similar original concept except allow occasonal aborted operations acknowledgements would like express sincere thanks dahlia malkhi michael reiter numerous thoughtprovoking discussions jennifer welch hyunyoung lee pete manolios phoebe weidmann helpful comments earlier drafts paper r dynamic byzantine quorum systems synchronous byzantine quorum systems atomic multireader register interprocess communications quorum systems byzantine quorum systems secure scalable replication phalanx optimal byzantine quorum systems probabilistic quorum systems extensions unity methodology elusive atomic register tr dynamic byzantine quorum systems secure scalable replication phalanx ctr ittai abraham gregory chockler idit keidar dahlia malkhi waitfree regular storage byzantine components information processing letters v101 n2 p6065 january 2007