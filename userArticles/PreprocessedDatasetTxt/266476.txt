decomposition technology mapping speedindependent circuits using boolean relations presents new technique decomposition technology mapping speedindependent circuits initial circuit implementation obtained form netlist complex gates may available design library proposed method iteratively performs boolean decomposition gate f twoinput combinational sequential gate g available library two gates hsub 1 hsub 2 simpler f preserving original behavior speedindependence circuit extract functions hsub 1 hsub 2 method uses boolean relations opposed less powerful algebraic factorization approach used previous methods logic decomposition overall library matching optimization carried logic resynthesis performed speedindependent signal insertion hsub 1 hsub 2 allows sharing decomposed logic overall method general existing techniques based restricted decomposition architectures thereby leads better results technology mapping b introduction speedindependent circuits originating de mullers work 12 hazardfree unbounded gate delay model recent progress developing efficient analysis synthesis techniques supported cad tools subclass moved closer practice bearing mind advantages speed independent designs greater temporal robustness selfchecking properties basic ideas synthesis speedindependent circuits eventbased models signal transition graphs stgs change diagrams described eg 4 9 6 provide general conditions logic implementability specifications complex gates latter allowed arbitrary fanin include internal feedback boolean functions selfdependent achieve greater practicality synthesis speedindependent circuits rely realistic assumptions implementation logic thus recent work focused development logic decomposition techniques falls two categories one includes attempts achieve logic decomposition use standard architectures eg standardc architecture mentioned group comprises work targeting decomposition complex gates directly finding behaviorpreserving interconnection simpler gates cases major functional issue addition logic simplification decomposed logic must violate original speedindependent specification criterion makes entire body research logic decomposition technology mapping speedindependent circuits quite specific compared synchronous counterparts work partially supported acidwg esprit 21949 uk epsrc project asti grl24038 cicyt tic 950419 two examples first category 1 8 present initial attempts move complex gates structured implementation basic circuit architecture includes c elements acting latches combinational logic responsible computation excitation functions latches logic assumed consist gates potentially unbounded fain unlimited input inversions bounded fanin gates necessary sufficient conditions implementability circuits architecture called standardc architecture formulated in8 1 called monotonic cover mc requirements intuitive objective mc conditions make first level gates work onehot fashion acknowledgment one c elements following approach various methods speedindependent decomposition technology mapping implementable libraries developedeg 14 7 former method decomposes existing gates eg 3input two 2input ands without search implementation space latter method extends decomposition complex algebraic divisors tackle limitation inherent initial mc architecture best representative second category appears work burns 3 provides general conditions speedindependent decomposition complex sequential elements two sequential elements sequential combinational element notably conditions analyzed using original unexpanded behavioral model thus improving efficiency method work opinion big step right direction addresses mainly correctness issues describe use efficient correctness checks optimization loop allow sharing decomposed gate different signal networks latter issues successfully resolved within standard architecture approach 15 13 methods technology mapping fundamental mode speedindependent circuits using complex gates presented methods however identify set simple logic gates implemented complex gate cannot perform speedindependent decomposition signal function case fit single gate fact bddbased implementation latter used postoptimization step proposed decomposition technique present work considering general framework allows use arbitrary gates latches available library decompose complex gate function shown figure 1 respect effectively making progress towards flexible second approach basic idea new method follows initial complex gate characterized function f result decomposition library component designated g set possibly still complex gates labeled h latter decomposed recursively elements found library optimized achieve lowest possible cost thus large put restrictions implementation architecture work however seen sake practical efficiency implemented procedure deals 2input gates andor latches act gelements decomposition second important change work compared 7 new method based full scale boolean decomposition rather algebraic factorization allows us widen scope implementable solutions improve area cost future work tackle performanceoriented decomposition second goal generalizing celement based decomposition allow designer use conventional types latches eg dlatches srlatches instead celements may exist conventional standardcell libraries furthermore experimental results show see section 6 many cases use standard latches instead celements helps improving circuit implementations considerably power new method appreciated looking example hazardg taken set asynchronous benchmarks original stg specification state graph shown figure 2a b initial implementation using standard carchitecture decomposition using two input gates method described 7 shown figure 2c new method produces much cheaper solution two dlatches shown figure 2e despite apparent triviality experienced human designer solution none previously existing automated tools able obtain also note dlatches used speedindependent fashion g f hn figure 1 general framework speedindependent decomposition thus free metastability hazard problems 1 ad inputs outputs z c c c r c z r r c r c c z c z b z c1000 z z c c c z z z c z c figure 2 example signal transition graph state graph b implementation cde benchmark hazardg paper organized follows section 2 introduces main theoretical concepts notation section 3 presents overview method section 4 describes major aspects boolean relationbased decomposition technique detail section 5 briefly describes algorithmic imple mentation experimental results presented section 6 followed conclusions ideas work background section introduce theoretical concepts notation required decomposition method firstly define state graphs used logic synthesis speedindependent circuits state graph may course generated compact useroriented model signal transition graph state graph provides logic synthesis procedure information necessary deriving boolean functions complex gates secondly state graph used propertypreserving transformation called signal insertion latter performed complex gate decomposed smaller gates thus obtained new signals must guaranteed speedindependent hazardfree inputoutput mode using unbounded gate delay model 1 example transitions input must acknowledged output clock fall close latch eg problem setup hold times long propagation time q larger setup hold times generally case 21 state graphs logic implementability state graph sg labeled directed graph whose nodes called states arc sg labeled event rising falling agamma transition signal specified circuit also allow notation specific direction signal transition state labeled vector signal values sg consistent state labeling v every transition sequence initial state rising falling transitions alternate signal figure 2b shows sg signal transition graph figure 2a consistent write arc state state 0 labeled set signals whose transitions label sg arcs partitioned possibly empty set inputs come environment set outputs state signals must implemented addition consistency following two properties sg needed implementability speedindependent logic circuit first property speedindependence consists three parts determinism commutativity outputpersistence sg called deterministic state label one state 0 sg called commutative whenever two transitions executed state order execution always leads state regardless order event called persistent state enabled remains enabled state reachable firing another event b sg called outputpersistent output signal events persistent states output signal event disable input events transformation eg insertion new signals decomposition performed sg level may affect three properties second requirement complete state coding csc becomes necessary sufficient existence logic circuit implementation consistent sg satisfies csc property every pair states 0 set output events enabled states sg figure 2b outputpersistent csc csc however restrict type logic function implementing signal requires signal cast single atomic gate complexity gate however go beyond provided concrete library technology concepts excitation regions quiescent regions essential transformation sgs particular inserting new signals set states called excitation region er event denoted era set states 2 era quiescent region qr denoted qra transition excitation region era set states stable keeps value ie era eragamma equal 10 qra qragamma examples er qr shown figure 2b 22 propertypreserving event insertion decomposition method essentially behavioral extraction new signals structural logic level must matched insertion transitions behavioral sg level event insertion operation sg selects subset states splits two states creates basis new states excitation region new event figure 3 shows chosen insertion scheme analogous used authors area 16 shall say inserted signal acknowledged signal b b one signals delayed insertion terminology used corresponding transitions example acknowledges x figure 3 state signal insertion must preserve speedindependence original specification events corresponding inserted signal x denoted x x xgamma confusion occurs simply x let deterministic commutative sg let 0 sg obtained inserting event x say insertion state set erx speedindependence preserving set sipset iff 1 event persistent remains persistent 0 2 0 deterministic commutative formal conditions set states r sipset given terms intersections r socalled state diamonds sg 5 conditions illustrated figure 4 possible cases illegal intersections r state diamonds shown first rather c b b x figure 3 event insertion scheme insertion b insertion inefficient method finding sipsets based reduction satisfiability problem proposed 16 efficient method based theory regions described 5 r s3 r r b c figure 4 possible violations sip conditions assume set states sg partitioned two subsets encoded means additional signal new signal added either order satisfy csc condition break complex gate set smaller gates latter case new signal represents output intermediate gate added circuit let r r denote blocks partition implementing partition need insert transitions new signals border states r r input border partition block r denoted ibr informally subset states r r entered call ibr wellformed arcs leading states r gamma ibr states ibr new signal inserted using input border wellformed consistency property violated therefore input border wellformed wellformed speedindependent preserving closure constructed described algorithm presented 7 insertion new signal formalized notion ipartition 16 used similar definition given sg set states ipartition partition four blocks qrxgammag qrxgammaqrx defines states x stable value 0 1 erx erxgamma defines excitation region x new sg 0 distinguish sets states excitation quiescent regions inserted signal x original sg new sg 0 refer era x er 0 respectively insertion x preserves consistency persistency transitions crossing boundaries blocks following qrxgamma era example 21 figure 5 shows three different cases insertion new signal x sg hazardg example insertion using era x era xgamma figure 5a preserve speedindependence sip set conditions violated era x violation type figure 4b signal x inserted excitation regions figure 5b positive switching acknowledged transitions agamma negative switching transition z gamma corresponding excitation regions satisfy sip conditions new sg 0 obtained insertion signal x shown figure 5b note acknowledgment x transitions agamma results delaying input signal transitions 0 x fires changes original io interface sg requires environment look new signal change generally incorrect unless also separately finding implementation environment working appropriate timing assumptions hence insertion rejected ad inputs outputs z c1000 c z c1000 x x z b z c1000 c figure 5 different cases signal insertion benchmark hazardg violating sipcondition changing io interface b correct insertion c excitation regions era x era xgamma shown figure 5c sip sets wellformed comply original io interface positive negative transitions signal x acknowledged output signal z insertion scheme valid 23 basic definitions boolean functions relations important part decomposition method finding appropriate candidates characterization means boolean covers sets states era x era xgamma inserted signal x need reference several important concepts boolean functions relations 11 incompletely specified scalar boolean function functional mapping gamma dont care value subsets domain b n f holds 0 1 dont care value respectively called offset onset dcset f completely specified dcset empty shall always assume f completely specified boolean function unless said otherwise specifically boolean function n boolean variables set called support function f paper shall mostly using notion true support defined follows point ie binary vector values domain b n function f called minterm variable x 2 x essential function f f dependent x exist least two minterms v1 v2 different value x f v1 6 f v2 set essential variables boolean function f called true support f denoted supf clear arbitrary boolean function support may true support eg c true support f x supf subset x let f x boolean function f x support g cofactor f x respect x defined f x respectively wellknown shannon expansion boolean function f x based cofactors boolean difference boolean derivative f x respect x defined ffif 1 foreach noninput signal x solutionsx 2 foreach gate g 2 flatches and2 or2g endfor 3 best hx best sip candidate solutionsx endfor 4 foreach x best hx implementable foreach x best hx empty exit loop 5 let h complex best hx insert new signal z implementing h derive new sg forever 7 library matching figure algorithm logic decomposition technology mapping function f f x ordering former case called positive unate x latter case negative unate x function unate x called binate x function positivenegative unate positivenegative unate support variables otherwise binate example function positive unate variable f incompletely specified function f x dcset let us define dc function fdc say function e f implementation f boolean relation relation boolean spaces 2 11 seen generalization boolean function point domain b n associated several points codomain formally boolean relation r r b n theta f0 1g sometimes shall also use gamma symbol shorthand denoting elements codomain vector eg 10 00 represented one vector gamma0 boolean relations play important role multilevel logic synthesis 11 shall use decomposition method consider set boolean functions domain let r boolean relation domain functions h say h compatible r every point v domain r vector values v h 1 element r example compatible functions given section 4 3 overview method section describe proposed method sequential decomposition speedindependent circuits aimed technology mapping consists three main steps 1 synthesis via decomposition based boolean relations 2 signal insertion generation new sg 3 library matching first two steps iterated functions decomposed implementable gates progress made time new signal inserted step 2 resynthesis performed output signals step 1 finally step 3 collapses decomposed gates matches library gates pseudocode technology mapping algorithm given figure 6 using speedindependent initial sg specification complex gate implementation boolean function sg signal guaranteed speedindependent unfortunately gate may large implemented semicustom library even full custom cmos eg requires many stacked transistors goal proposed method break gate starting output using sequential function selfdependent ie internal feedback combinational gates given vector x sg signals given one noninput signal 2 x general function f x may selfdependent try decompose function f x line 2 algorithm figure 6 ffl combinational sequential gate function gz z vector newly introduced signals ffl vector combinational 2 functions hx signals z ghx implements f x moreover require newly introduced signals speed independent line 3 careful introduce unnecessary fanouts due nonlocal ac knowledgment since would hinder successive area recovery gate merging allowed library problem representing flexibility choice h functions explored context combinational logic minimization 19 among others extend formulation cover also sequential gates sections 41 43 essential order overcome limitations previous methods speedindependent circuit synthesis based specific architecture able use broad range sequential elements like set reset dominant sr latches transparent latches believe overcoming limitation previous methods could use c elements dualrail srlatches one major strengths work apart dramatically improving experimental results allows one use generic standardcell library generally includes sr latches c elements without need design characterize new asynchronousspecific gates algorithm proceeds follows start sg derive logic function noninput signals line 1 perform implementability check function library gate largest nonimplementable function selected decomposition order limit search space currently try candidates g line 2 ffl sequential elements library assumed two inputs order limit search space ffl twoinput gates possible input inversions flexibility choice functions represented boolean relation represents solution space f described section 41 set function pairs compatible boolean relation checked speed independence line 3 described section 22 additional requirement forced us implement new boolean relation minimizer returns compatible functions outlined section 51 speedindependent pair immediately rejected h 1 h 2 checked approximate discussed implementability library increasing order estimated cost two cases 1 speedindependent implementable case decomposition accepted 2 otherwise complex implementable h selected one merged g 2 restriction hx combinational partially lifted section43 latter heuristic technique aimed keeping decomposition balanced note stage also implement h 1 h 2 sequential gate sufficient conditions described section 43 met procedure iterated long progress everything decomposed line 4 time new function h selected implemented new signal inserted sg line resynthesis performed next iteration incompleteness method essentially due greedy heuristic search accepts smallest implementable nonimplementable speedindependent solution believe exhaustive enumeration backtracking would complete even nonautonomous circuits relatively straightforward extension results 17 end perform boolean matching step 10 recover area delay line 7 step merge together simple 2input combinational gates conservatively used decomposition larger library gate guaranteed introduce hazards matched gates atomic 4 logic decomposition using boolean relations 41 specifying permissible decompositions brs paper apply brs following problem given incompletely specified boolean function f x signal 2 x decompose twolevels ghx implements f x functions g h simpler implementation f h called permissible note firstlevel function xg multioutput logic function specifying behavior internal nodes decomposition final goal function decomposition form easily mappable given library hence functions available library selected candidates g step decomposition small mappable piece function g cut potentially complex unmappable function f selected g permissible implementations function h specified br via minimization brs best compatible functions obtained verified speed independence checking sipsets one speedindependent best estimated cost selected since support function f include output variable specify sequential behavior general case perform twolevel sequential decomposition function g function h sequential ie contain output variables supports second level decomposition made sequential selecting latch library candidate gate g technique deriving sequential solution first level h described section 43 next show example permissible implementations decomposition expressed brs example 41 consider stg figure 7a whose sg appears figure 8a signals c inputs output possible implementation logic function f c us decompose function using g resetdominant rslatch represented equation figure 7b first step specify permissible implementations first level functions using br specified table figure 8b consider example vector c easy check f0 0 0 hence vector 0000 table specifies r implementation r must keep input vector either 1 r 0 since necessary 3 simplicity consider decomposition problem singleoutput binary function f although generalization multioutput multivalued functions straightforward rs c dcyc rs rs rs c g r c c e r c r c figure 7 sequential decomposition function region celement dlatch rs sr qrygamma f0gamma gamma0g f0gamma gamma0g f1gamma gamma0g 0gamma f0gamma gamma0g 00 unreachable gammagamma gammagamma gammagamma gammagamma gammagamma gammagamma table 1 boolean relations different gates sufficient conditions rslatch keep value 0 output required specification hand one solution possible input vector 1100 corresponds setting output rslatch 1 boolean relation solver find among others two solutions illustrated figure 7cd 1 2 acd solutions chosen depending cost function table specifies compatible values brs different types gates celement dlatch resetdominant rslatch setdominant srlatch two input gate two input states sg partitioned four subsets ery qryery gamma qry gamma respect signal function f x decomposition performed states reachable sg form dcset br eg state ery one compatible solution 11 allowed input functions h celement output celement states 2 ery 0 f conditions combination 11 possible input combination implies 1 output celement hand state 2 qry output hence enough keep least one input celement 1 expressed values f1gamma gamma1g second line table similarly compatible values derived 42 functional representation boolean relations given sg satisfying csc requirement output signal 2 x associated unique incompletely specified function f x whose dcset represents set unreachable states f x represented three completely specified functions denoted onyx yx dcyx representing dcset f x pairwise disjoint union tautology c c c c ony acdy acdy f r b figure 8 state graph b decomposition signal rs latch let generic ninput gate represented boolean equation inputs gate q output 4 gate sequential q belongs true support gz q give characteristic function boolean relation implementation f x gate g characteristic function represents permissible implementations z allow f decomposed g given characteristic function 1 corresponding table describing boolean relation derived using cofactors minterm support x cofactor brym gives characteristic function compatible values z see example finding decomposition f gate g reduced finding set n functions example 42 example 41 continued sg shown figure 8a corresponds stg figure 7 let us consider implementation signal resetdominant rs latch expressed using characteristic function br recall table shown figure 8b represents function f c permissible values inputs r rs latch dcsets function f c defined following completely specified functions 4 context boolean equations representing gates shall liberally use sign denote assignment rather mathematical equality hence q lefthand side equation stands next value signal q one righthand side corresponds previous value set permissible implementations r characterized following characteristic function br specified table obtained using equation 1 substituting expressions ony dcy function rslatch rs brya c r function value 1 combinations represented table value 0 combinations table eg c example set compatible values given cofactor correspond terms 1gamma gamma0 given boolean relation minterm two possible solutions equation brya c corresponding figure 7cd 43 twolevel sequential decomposition accurate estimation cost solution produced boolean relation minimizer essential order ensure quality final result minimizer handle combinational logic often shown best solution obtained replacing combinational gate sequential one section discusses heuristic techniques used identify replacement possible without altering asynchronous circuit behavior without undergoing cost fullblown sequential optimization step let us consider example example 43 example 41 continued let us assume considered library contains threeinput gates rs sr dlatches implementation 1 signal rslatch inputs rcd sacd matches library requires two gates one two one three inputs one rslatch implementation 2 rslatch inputs rcd c sa would rejected requires complex andor gate library however input function cd replaced signal r output behavior r change ie function rcd c safely replaced rcdrc latter equation corresponds function dlatch gives valid implementation shown figure 7e technique improve precision cost estimation step partially considering sequential gates follows 1 produce permissible functions z via minimization boolean relations z 1 z 2 always combinational z 1 z 2 62 x 2 estimate complexity h 1 matches library complexity cost gate else complexity literal count 3 estimate possible simplification h 1 h 2 due adding signals z 1 z 2 supports ie estimate complexity new pair fh 0 2 g permissible functions z 4 choose best complexity h 1 let us consider task determining h 0 2 step 3 let sg encoded variables set v let z hx x v 2 v equation new variable z inserted resulting sg denoted 0 insa zhx sometimes simply 0 insa z 0 insa z one signal inserted solution step 3 procedure obtained minimizing functions signals z 1 z 2 sg however rather inefficient creation sg 0 computationally expensive hence instead looking exact estimation complexity signals z 1 z 2 rely heuristic solution following ideas input resubstitution presented example 43 computational efficiency formal conditions input resubstitution formulated terms original sg rather terms sg 0 obtained insertion new signals 5 lemma 41 let boolean function hx implement inserted signal z positive negative unate let h 0 x z function obtained hx replacing literal literal z sgs 0 insa zhx 00 insa zh 0 x z isomorphic iff following condition satisfied characteristic function describing set states era z era z gamma informally lemma 41 states resubstitution input z permissible states value function hx depends inserted signal z stable value example 44 example 41 continued let input r rslatch implemented cd figure 7d onset function hcd shown dashed line figure 8a input border h set states onset entered original sg ie similar consideration f0100g input borders satisfy sip conditions hence ibh taken era r era rgamma must expanded beyond ibh state 1100 delay input transition era rgamma f0100 1100g set states value function h essentially depends signal given function negative unate cube ac intersection era rera rgamma therefore condition lemma 41 literal replaced literal r thus producing new permissible function rcd result generalized binate functions follows lemma 42 let boolean function hx implement inserted signal z binate function h represented hx boolean functions depending let h 0 x isomorphic iff following conditions satisfied characteristic boolean functions describing sets states era z era z gamma era z respectively proof given appendix conditions lemma 42 efficiently checked within bddbased framework require check two tautologies involving functions defined states original sg heuristic solution tradeoff computational efficiency optimality even though estimation still completely exact exact solution requires creation 0 insa z allows us discover possibly use implementation figure 7e 5 note heuristic estimation covers cases one input signals combinational permissible replaced feedback z output h cases also investigated checking would complex 5 implementation aspects method logic decomposition presented previous section implemented synthesis tool speedindependent circuits main purpose implementation evaluate potential improvements could obtained synthesis speedindependent circuits using booleanrelationbased decomposition approach efficiency current implementation considered secondary goal stage research 51 solving boolean relations overall approach required solve brs output signal gate latch used decomposition furthermore signal gate several solutions desirable order increase chances find sip functions previous approaches solve brs 2 18 satisfy needs synthesis method since 1 minimize number terms multipleoutput function 2 deliver without significant modifications algorithms implementation one solution br case need obtain several compatible solutions primary goal minimizing complexity function individually term sharing significant twolevel decomposition function speedindependent general hence minimized function must treated atomic object sharing exploited hand resynthesizing circuit insertion new signal reason devised heuristic approach solve brs next briefly sketch given br bryx z function h z individually minimized assuming functions defined way hx compatible solution br general incompatible solution may generated combining h taking example figure 8 individual minimization r could generate solution next minterm incompatible values selected eg dy compatible values 1gamma gamma0 acceptable new brs derived freezing different compatible values selected minterm case two new brs produced values 1gamma gamma0 respectively minterm ac dy next br minimized individually output function new minterms frozen compatible solution obtained approach generates tree brs solved provides way obtaining several compatible solutions br however exploration may become prohibitively expensive search tree pruned implementation branchandboundlike pruning strategy incorporated purpose still time required br solver dominates computational cost overall method current implementation ongoing research solving brs framework carried believe fact pursue minimize functions individually ie without caring term sharing among different output functions deal 2output decompositions may crucial derive algorithms much efficient existing approaches 52 selection best decomposition set compatible solutions generated output signal best candidate selected according following criteria priority 1 least one decomposed functions must speedindependent 2 acknowledgment decomposed functions must increase complexity implementation signals see section 53 3 solutions decomposable functions implementable library preferred 4 solutions complexity largest nonimplementable function minimized preferred criterion helps balance complexity decomposed functions derive balanced treelike structures rather linear ones 6 5 estimated savings obtained sharing function implementation several output signals also considered second order priority criterion among best candidate solutions output signals function largest complexity ie farthest implementability selected implemented new output signal sg complexity function calculated number literals factored form case sequential function matches latches gate library implementation cost directly obtained information provided library 53 signal acknowledgment insertion function delivered br solver efficient sip insertion must found reduces finding partition fera x qra x era xgamma qra xgammag sg era x era xgamma restricted sipsets section 22 become positive negative ers new signal x qra x qra xgamma stand corresponding state sets x stable equal 1 0 respectively general function may several era x era xgamma sets acceptable ers one corresponds signal insertion different acknowledging outputs signals transitions approach perform heuristic exploration seeking different era x era xgamma sets function finally select one according following criteria ffl sets acknowledged signal decomposed ie local acknowledgment preferred ffl set local acknowledgment found one least acknowledgment cost selected selection era x era xgamma sets done independently cost acknowledgment estimated considering influence inserted signal x implementability signals cost either increased decreased depending era x era xgamma selected calculated incrementally deriving new sg signal insertion example consider sg figure 5c insertion new signal x function valid sip set era x would set states f1100 0100 1110 0110g state f1100g input border inserted function valid sip set era xgamma would set states f1001 0001g insertion era x acknowledged transition z era xgamma z gamma however insertion unique sake simplicity let us assume also output signals insertion era would also valid case transition x would acknowledged transitions agamma 54 library mapping logic decomposition noninput signals completed technology mapping step aimed recovering area delay based technologydependent library gates reductions achieved collapsing small fanin gates complex gates provided gates available library collapsing process based boolean matching techniques proposed mailhot et al 10 adapted existence asynchronous memory elements combinational feedback speed independent circuits overall technology mapping process efficiently implemented based utilization bdds 6 different criteria course may used also consider delay resulting implementation since keeping late arriving signals close output generally useful require unbalanced trees 6 experimental results 61 results decomposition technology mapping method logic decomposition presented previous sections implemented applied set benchmarks results shown table 2 circuit signals literalslatches cpu area nonsi area si io old new secs lib 1 lib 2 best 2 inp map best chu150 33 142 101 converta 23 123 164 252 352 312 312 338 296 296 drs ebergen 23 203 62 4 184 160 160 160 144 144 hazard 22 122 02 1 144 120 120 104 104 104 nakpa 46 204 182 441 256 248 248 250 344 250 nowick 33 161 161 170 248 248 248 232 256 232 sbuframwrite 57 226 202 696 296 296 296 360 338 338 trimossend 36 368 1410 2071 576 480 480 786 684 684 total 25252 18037 4288 3984 3976 4180 4662 3982 table 2 experimental results columns literalslatches report complexity circuits derived logic decomposition 2input gates results obtained method presented paper new significantly better obtained method presented 7 old note library used new experiments deliberately restricted sr rs latches ie without celements since generally part standard cell libraries improvement mainly achieved two reasons ffl superiority boolean methods versus algebraic methods logic decomposition ffl intensive use different types latches implement sequential functions compared celementbased implementation 7 however improved results obtained using boolean methods paid terms significant increase terms cpu time reason examples presented 7 decomposed currently exploring ways alleviate problem finding new heuristics solve boolean relations efficiently 62 cost speed independence second part table 2 attempt evaluate cost implementing asynchronous specification speedindependent circuit experiments done follows bench mark following script run sis using library asynchgenlib astg f source scriptrugged map resulting netlists could considered lower bound area circuit regardless hazardous behavior ie circuit implements correct function output signal without regard hazards scriptrugged best known generalpurpose optimization script combinational logic columns labeled lib 1 lib 2 refer two different libraries one biased towards using latches instead combinational feedback 7 one without bias columns labeled si report results obtained method proposed paper two decomposition strategies experimented mapping circuit onto library ffl decompose gates 2input gates 2 inp ffl decompose gates directly mappable gates library map cases decomposition mapping preserve speed independence since use gates muxes may hazardous behavior select input changes clear evidence performing aggressive decomposition 2input gates always best approach technology mapping insertion multiplefanout signals offers opportunities share logic circuit also precludes mapper taking advantage flexibility mapping treelike structures tradeoff must better explored forthcoming work looking best results nonsisi implementations conclude preserving speed independence involve significant overhead experiments shown reported area similar benchmarks even efficiently implemented using sipreserving decomposition impute improvements efficient mapping functions latches using boolean relations 7 conclusions future work paper shown new solution problem multilevel logic synthesis technology mapping asynchronous speedindependent circuits method consists three major parts part 1 uses boolean relations compute set candidates logic decomposition initial complex gate circuit implementation thus complex gate f iteratively split twoinput combinational sequential gate g available library two gates h 1 h 2 simpler f preserving original behavior speedindependence circuit best candidates h 1 selected next step providing lowest cost terms implementability new signal insertion overhead part 2 method performs actual insertion new signals h 1 andor h 2 state graph specification resynthesizes logic latter thus parts 1 2 applied complex gate cannot mapped library finally part 3 library matching recover area delay step collapse larger library gate simple 2input combinational gates denoted g conservatively used decomposing complex gates violations speedindependence arise matched gates atomic method improves significantly previously known techniques 1 8 7 due significantly larger optimization space exploited using 1 boolean relations decomposition 2 broader class latches 8 furthermore ability implement sequential functions sr latches significantly improves practicality method indeed one completely rely earlier methods availability celements conventional library future planning improve boolean relation solution algorithm aimed finding set optimal functions compatible boolean relation essential order improve cpu times synthesize successfully complex specifications r automatic gatelevel synthesis speedindependent circuits exact minimizer boolean relations general conditions decomposition state holding elements synthesis selftimed vlsi circuits graphtheoretic specifications complete state encoding based theory regions concurrent hardware technology mapping speed independent circuits decomposition resynthesis basic gate implementation speedindependent circuits algorithms synthesis testing asynchronous circuits algorithms technology mapping based binary decision diagrams boolean operations synthesis optimization digital circuits theory asynchronous circuits structural methods synthesis speedindependent circuits decomposition methods library binding speedindependent asynchronous designs automatic technology mapping generalized fundamental mode asynchronous designs generalized state assignment theory transformations signal transition graphs heuristic minimization multiplevalued relations permissible functions multioutput components combinational logic optimization tr automatic technology mapping generalized fundamentalmode asynchronous designs decomposition methods library binding speedindependent asynchronous designs basic gate implementation speedindependent circuits generalized state assignment theory transformation signal transition graphs automatic gatelevel synthesis speedindependent circuits synthesis optimization digital circuits algorithms synthesis testing asynchronous circuits general conditions decomposition stateholding elements complete state encoding based theory regions technology mapping speedindependent circuits structural methods synthesis speedindependent circuits ctr jordi cortadella michael kishinevsky alex kondratyev luciano lavagno alexander taubin alex yakovlev lazy transition systems application timing optimization asynchronous circuits proceedings 1998 ieeeacm international conference computeraided design p324331 november 0812 1998 san jose california united states michael kishinevsky jordi cortadella alex kondratyev asynchronous interface specification analysis synthesis proceedings 35th annual conference design automation p27 june 1519 1998 san francisco california united states