automatically extracting structure data business reports considerable amount clean semistructured data internally available companies form business reports however business reports untapped data mining data warehousing querying relational form business reports regular structure reconstructed present algorithms automatically infer regular structure underlying business reports automatically generate wrappers extract relational data b introduction considerable amount clean semistructured data available companies internal business reports created periodic data processing business reports provide data monitoring account balances inventory levels transaction status current production status etc although subject matter may dier widely many business reports share similar structure businesses employ stateoftheart techniques capture reports computer output laser disk cold 1 storage system accessible enterprisewide network cold systems support queries based date title freetext scanning regularexpression matching precomputed indexes whose definitions constructed manually significant cost labor systemsadministrationmaintenance eort business reports integral part business process errors discovered corrections must made new version report must issued compared sources information business reports clean 2 clean data available relational form could feed data warehouse various reasons cases important historical operational data available cold system cases even data available legacy database systems fileprocessing systems variety dierent data sources middleware access layers make dicult assemble integrate information organiza tions databases since organizations business reports provide clean comprehensive integrated view underlying data interest wrappers extract data could less expensive sometimes option giving user finer granularity access business report allows precise queries business report could automatically decomposed relational records would necessary company mediator constructed every one data sources automatic decomposition would make possible movement information cold system relational database data mining information tools available alternatively automatic decomposition would support direct sql interface cold system permitting data mining queries directly cold archive automatic decomposition end user must develop ad hoc techniques extract systems may use storage technology besides optical disk example tape raid use term cold denote kind report archive system recently also termed enterprise reporting brevity use cold used data warehousing clean data free errors redundancy suitable storing warehouse information business report example may manually place data business report spreadsheet receives business report electronically may programmatically transfer data database application access 1 using specialized tools awk 3 perl 25 cambio 8 infoxtract 6 15 monarch 19 diculties faces ad hoc approach manual specification eort set process eort maintain process acquisition sucient programming skills modify process automatic decomposition eliminates reportdefinition specification inherent manual programmatic reportbased information extraction automated extraction possible narrow application domains 12 13 14 however techniques narrow application domains infeasible large report bases ontologies would manually constructed dierent business report semiautomatic techniques wrappers also explored 2 5 11 16 22 techniques take advantage special structural properties business reports project closely related nodose 2 attacks general problem extracting structure kind semistructured document apply techniques specific businessreport domain paper presents system utilizes lattice field descriptions automatically identify fields fieldlevel descriptions system infers line types describe kinds lines found particular business report infers factors page headers footers yielding linetype sequence whose regular structure inferred using standard algorithms 17 18 system implemented java stores extracted information relational tables according line type linegroup structure remainder paper four sections section 2 gives highlevel system overview section 3 gives detailed description key algorithms data structures section 4 gives results report survey section 5 gives conclusions business report field description lattice extract fields report structure definition report decomposition populated database infer line types infer page headers footers infer recursive groups figure 1 business report structure data extraction process overview figure 1 outlines two phases business report decomposition process 1 four steps reportstructure inference 2 report decomposition input business report r make five assumptions 1 r composed fields aggregated lines turn aggregated larger structures 2 r printable ascii represents meaningful humanreadable information 3 3 r uses ascii formfeed character ff page delimiter ascii linefeed character lf line delimiter 4 4 page number lines r l width line w characters padded blanks necessary 5 blank lines blanks fields human readability 3 use ascii ebcdic another character set could used similar fashion case ebcdic easy translate ebcdic ascii format case nonenglish character sets nonus business reports dierent regular expressions would required 4 diculty using crlf line delimiter pc systems 006 9994 10355 jason mason construction inc 10000000 06005 030799 ms ms total large cd 160552979 figure 2 typical type report page figure 3 portion typical type ii report page observed two major categories business report structure distinguished relationship line record structures kinds business reports possible page headers possible page footers report body consists repeating detail lines type detail line columns fields belongs distinct linetype category contains information single record contrast type ii detail line contains fields pertaining several records type business report contains type detail lines type ii business report contains type ii detail lines may also contain type detail lines figure 2 gives example simple type report 5 detail line figure 2 describes particular certificate deposit figure 3 shows portion type ii checkingaccount statement detail line figure 3 lists two three clearedcheck items check number amount date cleared correctly identify basic line types exist within type report extract report structure contrast extracting structure type ii report requires information beyond line classification paper discuss type reports type ii reports subject separate paper process starts type business report r fielddescription lattice f 5 none data paper actual customer data patterns based actual business report structures designed us described section 31 infers structure r stores definition relational database decomposes r stores decomposition database contents r queried paper focuses four steps reportstructure inference phase consists following four steps corresponding algorithms 1 4 respectively 1 line r decompose sequence fields 2 infer b set basic line types r line r assign basic line type b 3 infer page headers footers r factor page structure rs line type description 4 infer rs recursive line groups system implemented java 2 using oromatcher 11 regularexpression library 21 matching extracting substrings lines used mysql 20 database management system twz1jdbcformysql 23 jdbc interface mysql source code available web site 10 21 notation proceeding introduce notation terminology general let r1 rr p 6 business report r p pages r l lines ri denoting ith page page sequence lines line sequence w characters executing algorithm 1 also represent line sequence fields given line denote substring position j k 1 tj k field f 4tuple j k substring f 6 always denote ordered sequence angle brackets also indexes 1based corresponds j starting position f k ending position pattern index defined section 31 fields lines 1 2 respectively say f 1 f 2 overlap q overlap overlap one five alignment values share left right endpoints align agree fields numeric aligned decimalpoint position lr agree align center agree align lr center aligned none apply field type f fields f index least upper bound elements fielddescription lattice f indexed 1 n f defined section 31 q 1 q n let q q padded j q j blanks left blanks right line type lines 1 sequence field types f j two properties 1 none field types may overlap 2 1 n ordered sequences containing strings correspond respectively fields lines 1 two properties guarantee reconstruct original lines line type group type r triple b c either line type ordered sequence group types b c respectively minimum maximum number consecutive occurrences observed r 3 structure extraction algorithms outlined section 2 four algorithms extract business reports structure sections 31 34 describe algorithms 1 4 respectively 31 field detection consider type report figure 2 first task decompose line fields done applying algorithm 1 line r let f fielddescription lattice figure 4 indentation figure 4 represents precedence universal lower bound empty expression shown explicitly element f class describes set ascii strings typically found business reports julian class two immediate successors date number parenthesized numbers figure 4 used section 321 ee sequence regular expressions corresponding field description lattice figure 4 except universal upper bound universal lower bound ee last element sequence e property recognizes sequence contiguous nonblank characters ee corresponds class string case table 1 appendix shows regular expressions e notice expression ei e matches string blank characters algorithm 1 extracts fields line according e algorithm 1 extract fields line input regularexpression sequence e line output sequence disjoint fields comprise relative e e ei matches set j start first match let k largest k w ei recognizes tj k record field 4tuple j k tj k replace characters tj k special nonascii symbol end sort fields j beginning field position 1 string time 3 hour minute second 0 hour minute 0 date julian 0 day month year 0 month day year 0 year month day 0 month year 0 month day 0 day month 0 phone number 3 phone area code 0 phone without area code 0 id code 3 id begins letters 0 id ends letters 0 id digits dashes 0 number julian 0 percent 0 negative 0 general number 0 fraction 0 currency 0 currency dollar sign 0 page number 0 field label 0 dividing line 0 figure 4 fieldclassification lattice regularexpression matching linear length text matched accept exponential space pathological cases 4 inner loop runs ow time since e expressions outer loop executes e times thus algorithm 1 executes oew time since ee last regular expression always recognizes contiguous nonblank characters algorithm 1 terminates extracts fields step replaces characters tj k special symbol forces fields disjoint since tj k longer matched expression 32 basic linetype inference algorithm 2 heart technique infers basic line types describe categories lines business report presenting algorithm define three field linedistance measures first introduce two dierent distances fields firstorder distance secondorder distance firstorder distance measures field distance using characterlevel string comparison secondorder distance yields similarity metric based field classification lattice traditional method characterizing string similarity edit distance 24 describes cost transforming one string computation edit distance omn n lengths strings compared simple adequate firstorder distance computed omaxmn time measure field distances using minimum first secondorder distances together alignment information eg two fields left justified decimalaligned based field distance metric define line distance used algorithm 2 decide two line types belong cluster 321 field distance let 1 2 nonempty ascii strings without loss generality assume firstorder distance 1 2 string 1 k b kronecker delta function namely 1 b 0 b field types recall 1 2 ordered sequences strings firstorder field distance f 1 f 2 string firstorder distance uses trivial lattice characters ignores higherorder structure associated fields secondorder distance uses regularexpression sequence fielddescription lattice f described section 31 e f three important properties 7 1 lattice pair elements f unique least upper bound 2 covering every ascii string member least one class f 3 consistency let f f j classes f let ei ej regular expressions e correspond f f j respectively f precedes f j language recognized ei subset language recognized ej define function assigns element f value specific classes lower values general classes values interval 0 1 shown parentheses figure 4 determined empirically given properties define secondorder field distance let f two field types class f corresponding regular expression ei 1 lub least upper bound f 1 f 2 without loss generality assume f secondorder field distance f 1 f 2 dierence component equation 3 returns low value fields whose classes relatively close p term empirical constant penalize fields whose least upper bound relatively general assigned p value 11 experiments finally ensure distance stays interval 0 1 equation 3 uses min1 expression 7 properties require careful construction fielddescription lattice regularexpression se quence formally prove hold purposes sucient simply assume properties hold lattice f figure 4 class defined set ascii strings consistency property guaranteed replace superior regular expression disjunction regular expression inferior given first secondorder field distances equations 1 3 define field f 1 2 field distance field type f sequence field types line type 2 follows f 1 either overlaps field types 2 overlaps one field type 2 define field f 1 2 1 oth erwise let f single field type 2 overlaps f 1 let equation 4 gives definition field f 1 2 alignment value overlap f 1 f 2 defined section 21 determined alignment values empirically choosing 0 0 1 2 4 agree align lr center respectively 322 line distance number field types line type 1 let n 2 number field types line type 2 based field define line 1 2 line distance 1 2 n 1 n 2 0 value line defined 0 either n 1 n 2 0 value line defined 1 otherwise line defined according equation 5 line 323 linetype inference algorithm 2 infer b set basic line types report r input r algorithm 1 output b set basic line types r l mapping lines r line types b make copy q r rij 1 create new line type 1 rij duplicates line type 2 q generalize 2 cover 1 else add 1 q end reduce line types q b line type qi 1 q let smallest line qi qi line type b add qi b else generalize cover qi end construct array l lij line type b covers line rij algorithm 2 terminates og r p r l time g cost generalize operation described 3 threshold chosen empirically line types 1 2 duplicates associated fieldtype sequences identical field text ie number field types b corresponding field types left right positions c corresponding field types recognized regular expression define means generalize line type 2 cover line type 1 field type f number field types 1 overlap f 2 denote field types f three possibilities nothing f 2 2 least upper bound padded blanks needed 3 e pad strings 2 blanks needed add 2 strings 11 1m joined filledpadded blanks needed field type f 1 1 overlapped field type 2 add f 1 2 modifying 2 field types 2 overlap combine described step 3 33 page headerfooter inference type business report may page header andor page footer page header report r sequence line types appears beginning page r linetype sequence 1 h page header r similarly page footer sequence line types appears end page r assume page footer always starts oset top page distinguish report detail page headers footers require nonblank line type z following properties page ri repeat ri two times immediate succession appears twice single page ri algorithm 3 infer page headers footers line types input array l algorithm 2 output pageheader sequence pagefooter sequence z linetype sequence l z factored mark nonblank line types cannot page headerfooter candidates lij nonblank mark lij lij j k lj k l infer page header find largest h 0 h r l set first h line types page r1 may empty infer page footer find smallest f h f r l jlif f exists set z line types f r l page r1 otherwise let z empty sequence set f r l 1 reduce l l removing page structure blank lines l sequence line types remove blank line types appear l note whereas l twodimensional array l one dimension algorithm 3 terminates l r p time 34 recursive group inference pagespecific structure business report r factored focus inferring structure rs detail section miclets technique 17 18 reasonable general way infer regular structure set example strings nature business reports simplifying assumptions allows possible infer structure single example algorithm 4 variant miclets technique using dierent decision heuristics governing reduce recursive group restricted single example string array l line types business reports created reportwriter 8 built groups form uv k w u possibly empty group header section v detail section repeats one times w possibly empty group footer section u v w sections may composed uv k w structures make three assumptions uv k w structure linegroup types business report r reduced algorithms 1 3 l 1 k 2 v appears consecutively somewhere l 2 group v appears k 2 times consecutively l forms v k component uv k w structure predetermined upper bound k also uvw may appear l long uv k appears elsewhere l 3 groups u v w may appear individually outside uv k w sequence optional lines group real report structure uv k w u w always appear together v k 9 give three examples representing line types lowercase letters example 1 sequence abccc line group group header empty group footer reason particular uv k w solution c business reports created custom programming also follow conventions 9 assumption hold type business reports leave reports future investigation repeating line type example example 2 sequence abccabcccc abcabc thus expression describe structure report abc example 3 sequence abccbccdabcd formed repeating nesting first create inner group section c substitution sequence aeedaed let header detail section e k footer substitution sequence ff group empty header footer detail section f k expression describing report structure essentially algorithm 4 reduces regular expression defined linetype sequence l compact regular expression g describes recursive structure l algorithm 4 infer recursive linetype groups input basic linetype sequence b algorithm 2 linetype sequence l algorithm 3 output recursive linegroup structure let g set group types contains one entry line type b l g substituting line type corresponding group type g g 1 changed true g find smallest j conditions 1 2 3 hold condition 1 every group type v unique condition 2 sequence vv occurs g condition 3 substituting new group type occurrence g group type v still occurs g exists create new group type x whose definition sequence v add x g substitute x g everywhere v appears replace consecutive occurrences xx g single x mark x minimum maximum consecutiveoccurrence counts end algorithm 4 leastfixed point algorithm fixed point upon converge regular expression describe l g initially l loop execute l times since loop long change made change must always reduce size g least 1 loop also executes l times verifying conditions 1 2 3 substituting x v done time thus algorithm 4 executes ob practice algorithm 4 usually took one three passes converge running orders magnitude faster worst case described v k sequences tend long five areas used empirically determined values control business report structure data extraction process 1 regular expressions used recognize fields 2 values associated class fielddescription lattice f 3 value alignment constants agree align lr center 4 threshold linetype generalization 5 penalty leastupperbound generality equation 3 used hundreds reports four dierent organizations basis choices test process used 76 business reports separate organization used training phase 76 reports 7 type additional 7 reports short meaningful ie comprised single page containing page headers single detail line 62 remaining reports process correctly extracted structure data 40 reports failed 22 22 failures point directions future enhancement discuss four 1 e sequence regular expressions matching fields sometimes insucient give four examples one case two fields usually separated single blank space number sign instead space one line caused two fields recognized single string turn caused creation extra line type interfered recursive linetype group inference algorithm 4 ii another case discovered decimalaligned numeric fields leftfilled underscores furthermore underscores abutted string field left eg one 552 two 93422 system recognized string portion together padding underscores single field numbers second field overlapping fields system generated many line types report iii another case discovered currency amounts specified 4 digits decimal point rather common 2 digits due order expressions system broke fields two caused many line types generated iv finally found string field two internal spaces eg xxxx xx string pattern expects one internal space caused field split extra line type generated problems corrected tuning e test set amount tuning required would small adjustments e also required nonus business reports 2 far common reason process fail problem optional fields line type fields present line distance formulas tolerant optional fields however often case lines fields also optional fields lines many fields also often case several fields optional optional fields may lead system generating many line types tuning threshold algorithm 2 particular report sometimes fix problem general solution 3 several cases generalize two line types simplistic structure algorithm 2 decides generalize based threshold future study apply clustering techniques recursive partitioning nearest neighbor 9 find better decision function control generalize line types techniques likely general across business reports dierent line types sensitive order processing line types 4 sometimes uniformity assumption linetype groups hold algorithm 4 assumes uv k w linetype group u v k w always appear together cases lines uv k w structure optional cases especially short lines single line type may reused two distinct uv k w structures algorithm 4 needs revised accommodate optional lines linetype group conclusions possible automatically extract structure data business reports process correctly extracted structure data 40 62 type business reports test set seen initial numbers encouraging much work remains done section 4 mentioned four areas needing improvement 1 field recognition 2 detecting optional fields 3 improved linetype clustering techniques 4 handling optional lines within linetype group also plan study structure data extraction type ii reports may possible use segmentation techniques like applied document imaging optical character recognition ocr algorithms eg 7 may also enable accurate extraction fields lines may shed light improved techniques type linetype clustering current investigation assumed fixedwidth fields padded blanks needed since reports variablewidth fields process needs extended accommodate reports also assumption fields separated white space always hold reports designed printed forms may lines characters divide fields future work examine ways determine field boundaries absence white space one weakness approach number fixed empirically determined constants associated algorithms surely achieve better results using adaptive techniques dynamically compute adjust constants whenever possible fully mapped structure data extraction type ii reports construct compressed data structure contains full inverted index information business report r together sucient information reconstruct original pages r inverted index often enough merely return data associated particular page regulatory constraints financial institution example may require original pages returned eg records may subject subpoena legal proceedings case original report pages must printed thus fully inverting data report must still able retrieve original report pages including white space extensive structural information system generates constitutes excellent domainspecific model compressing reports businessreport structure data extraction system implemented java also implemented graphical pattern editor tool assist creation debugging regular expressions field extraction tool available web site patterneditor 10 10 general applicability regularexpression debugging beyond current project r microsoft corporation access page awk programming language wrapper generation semistructured internet sources mining mainframe reports intelligent data extraction print streams background structure document images data junction corporation home page iterative clustering algorithm interpretation imperfect line drawings data extraction group home page scalable comparisonshopping agent worldwide web conceptualmodeling approach extracting data web ia corporation home page wrapper induction information ex traction regular inference tail clustering method structural methods pattern recognition datawatch corporation home page url httpwww learning extract textbased information worldwide web url httpwww string string correction problem programming perl tr compilers principles techniques tools awk programming language programming perl scalable comparisonshopping agent worldwide web wrapper generation semistructured internet sources nodosemyampersandmdasha tool semiautomatically extracting structured semistructured data text documents ontologybased extraction structuring information datarich unstructured documents stringtostring correction problem conceptualmodelbased data extraction multiplerecord web pages conceptualmodeling approach extracting data web