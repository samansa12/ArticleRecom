logic based abstractions realtime systems verifying concurrent systems described transition systems state explosion one serious problems quantitative temporal information expressed clock ticks considered state explosion even serious present notion abstraction transition systems abstraction driven formulae quantitative temporal logic called qumucalculus defined paper abstraction based notion bisimulation equivalence called nequivalence set actions n natural number proved two transition systems nequivalent iff give truth value qumucalculus formulae actions occurring modal operators contained time constraints whose values less equal n present nonstandard abstract semantics timed process algebra able produce reduced transition systems checking formulae abstract semantics parametric respect set actions natural number n produces reduced transition system nequivalent standard one transformational method also defined means possible syntactically transform program smaller one still preserving nequivalence b introduction paper address problem verifying systems time plays fundamental role correct behaviour refer algebra timed processes atp 22 formalism able model time dependent systems prove properties atp extension traditional process algebras capture discrete quantitative timing aspects respect global clock express semantics language terms labeled transition systems transitions labeled special action called time action action represents progress time viewed clock tick one widely used method verication properties model checking 8 7 model checking technique proves correctness system specication respect desired behavior checking whether structure representing specication satises temporal logic formula describing expected behavior existing verication techniques particular dened concurrent calculi like ccs 21 based representation system means labeled transition system case model checking consists checking whether labeled transition system model formula representing systems specications transition systems state explosion one serious problems often deal transition systems extremely large number states thus making model checking inapplicable moreover system specications quantitative temporal information expressed clock ticks considered state explosion even serious reason new state generated every clock tick fortunately several cases check validity property necessary consider whole transition system abstraction maintains information uences property consideration used denition abstraction criteria reducing transition systems order prove properties eciently abstraction criteria kind often based equivalence relations dened transition systems minimizations respect dierent notions equivalence fact used many existing verication environments see instance 10 13 16 paper present notion abstraction transition systems abstraction driven formulae quantitative temporal logic logic call qumucalculus similar mucalculus 19 particular variant 4 modal operators redened include denition time constraints many logics dened deal time aspects see example 13 14 15 20 fundamental feature qumu calculus formulae used drive abstraction particular given actions time constraints occurring modal operators formula qumucalculus use dening abstract reduced transition system truth value equivalent value standard one abstraction based notion bisimulation equivalence transition systems called h niequivalence set actions dierent time action n natural number informally two transition systems h niequivalent observing actions paths composed time actions shorter equal n exhibit behaviour interesting properties equivalence presented prove two transition systems h niequivalent give truth value formulae actions occurring modal operators contained time constraints whose values less equal n thus given formula actions maximum time constraint n abstract transition system smaller one possibly minimum h niequivalent checked paper present nonstandard abstract semantics astp 22 language dening abstract transition systems astp sequential subset atp actually limitation abstract semantics easily applicable concurrent operators ability reducing transition system suitably investigated also concurrent part abstract semantics usefully exploited guide implementing algorithm build reduced system also present set syntactic rewriting rules transform process smaller one preserving h niequivalence syntactic reduction used rst step reduction process applying abstract semantics preliminaries section 2 introduce logic section 3 abstract semantics section 4 section 5 describe syntactic transformations section 6 concludes paper preliminaries 21 algebra timed processes let us quickly recall main concepts algebra timed processes 22 used specication realtime concurrent distributed systems simplicity consider subset atp called astp algebra sequential timed processes containing parallel operators syntax sequential process terms processes terms short following ranges nite set asynchronous actions g denote set fg ranged action time action userdenable represents progress time x ranges set constant names constant x dened constant denition x def denote set process terms p standard operational semantics 22 given relation p ap p set processes least relation dened rules table 1 rule act manages prexing operator p evolves p transition labeled operator behaves standard nondeterministic choice processes asynchronous initial actions rule sum 1 symmetric one shown moreover p q perform action reaching respectively perform action reaching p 0 q 0 rule sum 2 process bpcq perform asynchronous initial actions p rule delay 1 moreover bpcq perform action reaching process q rule delay 2 finally rule con says constant x behaves p x denition note rule process 0 thus cannot perform move following use p denote term b0cp process perform action becomes process p moreover dene n p n 1 act delay 1 con table 1 standard operational semantics astp labeled transition system transition system short quadruple set states set transition labels actions initial state transition relation given process p write p exist empty sequence given p 2 denote set states reachable p r g given process p set constant denitions standard transition system p dened p note abuse nota tion use denoting operational semantics transition relation among states transition system astp processes equivalence relations dened 22 based notion bisimulation states related transition systems example 1 let us consider vending machine timedependent behavior machine allows user obtain dierent services soft drink immediately request coee delay time unit cappuccino delay two time units cappuccino chocolate delay three time units moreover possible recollect inserted coin requested within one time unit astp specication machine vcoin brecollect money v c coee collect coee v choc cappuccino 3 collect choc cappuccino v soft drink collect soft drink v standard transition system vending machine 14 states transitions 3 quantitative temporal logic abstractions order perform quantitative temporal reasoning dene logic call qumucalculus extension mucalculus 19 particular selective mucalculus 4 syntax following z ranges set variables hi rn j z j z r n 2 n n set natural numbers n called time value hi rn rn must n 0 satisfaction formula state p transition system written p dened follows state satises tt state satises ff state sat quantitative modal oper ators informal meaning operators following hi rn satised state evolve state satisfying executing preceded actions r fg within n time units rn satised state execution occurring within units preceded actions r fg evolves state satisfying hi rn satised state evolve state satisfying executing preceded actions r fg least n time units rn satised state execution occurring least n time units preceded actions r fg evolves state satisfying standard mucalculus xed point formula form z z z z binds free occurrences z occurrence z free within scope binder z z formula closed contains variables z least x point recursive equation z greatest one consider closed formulae precise denition satisfaction closed formula state p transition system given table 2 uses relation n denition 1 n relation given transition system set actions n 2 n dene relation n 2 number actions occurring q express fact possible pass p q executing possibly empty sequence actions belonging containing exactly k followed action transition system satises formula initial state satises astp process p satises formula sp satises example 2 examples properties concerning vending machine described previous section following alway holds coin inserted soft drink may collected within two time units possible recollect inserted coin one time unit 31 formula driven equivalence formula qumucalculus used dene bisimulation equivalence transition systems bisimulation dened considering asynchronous actions occurring quantitative operators belonging z dened notation z indicates substitution every free occurrence variable z table 2 satisfaction formula state formula maximum time value quantitative operators occurring formula thus formulae set occurring actions maximum time value dene bisimulation given set actions time value n h nibisimulation relates states p q path starting p containing k n time actions action ending 2 path starting q containing exactly k time actions action ending 2 reached states bisimilar ii path starting p containing k n time actions action ending 2 path starting q containing n possibly 6 actions action ending 2 reached states bisimilar denition 2 h nibisimulation h niequivalence n 2 n b binary relation rbq implies h niequivalent n exists h nibisimulation containing pair p p 0 fig 1 examples h niequivalence example 3 consider transition systems illustrated figure 1 t1 hfag ni equivalent 2 t1 hfag niequivalent 2 n 3 moreover t1 hfa bg niequivalent 2 every n 2 n following proposition holds relating equivalences dierent n proposition 1 proof see appendix order relate h niequivalence quantitative temporal properties introduce following denition concerning equivalences based sets formulae denition 3 logicbased equivalence let two transition sys tems set closed formulae logicbased equivalence dened given formula qumucalculus dene set occurring actions maximum time value denition 4 max given formula qumucalculus set actions occurring inductively dened follows maximum time value modal operators occurring max inductively dened follows following theorem states h niequivalent transition systems satisfy set formulae occurring actions maximum time value less equal n theorem 1 let systems let n 2 n closed formula qumucalculus max ng proof see appendix 4 abstract transition systems abstract semantics section order reduce number states transition system model checking dene abstraction transition system formula equivalently checked first dene notion time path time path acyclic path composed actions state rst one one input transition state last one one output transition denition 5 time path let transition system path path p 1 holds p 8i 1 n 6 8i 1 n 6 9q 6 p q given astp process p pair h ni dene abstract transition system p means nonstandard semantics consists set inference rules skip actions produce time paths longer n abstract transition system h niequivalent standard transition system p non standard rules shown table 3 symmetric rules sum 1 sum 2 shown use transition relation n parameterized integer n ideas semantics based following actions always performed rules act 1 delay 4 sum 1 actions skipped action encountered lookahead performed order reach either action time action rules act 2 delay 3 sum 2 time action encountered skipped process reach action perform sequence n time units order count time units use superscript n q occurs action belonging executed time actions starting p fact order generate transition p n q rst prove q n q 0 q 0 rules delay 1 delay 2 sum 3 sum 4 successive applications delay 2 sum 4 allow us skip time actions sequence last n ones note premises rules delay 3 delay 4 sum 1 sum 2 sum 3 sum 4 standard operational relation used order know rst action process consequently respect standard behavior operators dierent depending whether rst action time action following proposition characterizes transitions nonstandard semantics proposition 2 let n 2 n astp process p 1 p n q implies 2 2 p proof induction depth inference proposition states two kinds transitions rst one represents execution action 2 characterized superscript 0 second one represents execution action characterized following result holds relating paths composed time actions standard transition system nonstandard one proposition 3 let n 2 n astp process p 1 j n p 2 j n p n q proof see appendix proposition states whenever path standard semantics composed less equal n time actions followed action path number time actions occurs abstract system every path n time actions standard system corresponds path exactly n time actions abstract system formally dene notion abstract transition system denition 6 abstract transition system astp process p given n 2 n abstract transition system p dened q 9jq following theorem holds stating transition system dened nonstandard semantics suitable abstraction standard one theorem 2 let n 2 n astp process p 1 transitions n n p labeled either actions 2 length time path n n p less equal n 3 sp n n n p proof see appendix note abstract transition system n 0 p process p contain transitions labeled time actions expresses precedence properties asynchronous actions following proposition relates h niequivalences dierent n says h niequivalence preserved keeping larger greater n proposition 4 let 0 astp process p proof proposition 1 theorem 2 point 3 delay 1 delay 3 n r n r n r con table 3 nonstandard operational semantics astp example 4 recall vending machine example 1 let us suppose verify following two formulae expressed example 2 formula 1 checked abstract transition system n 1 n1 v collect soft drinkg 2 states 14 transitions hand 2 checked n 2 n2 v states 13 transitions 5 syntactic reduction section investigate syntactic approach reduction transition systems still based formula checked given process p property possible perform syntactic transformations reduce size p terms number operators based actions time values occurring transformations h niequivalence preserving equivalently checked transformed process syntactic reduction used independently semantic abstraction dened previous section table 4 transformation rules h niequivalence preserving transformations shown table 4 form rewriting rules p 7 q means rewrite p q rule r 1 allows deleting asynchronous action rules r 2 r 3 cancel time actions sequences time actions r 2 deletes n time actions sequence ones n applied sequence operand summation ensured imposing sequence prexed asynchronous action handling summations r 3 ap plied deletes n time actions operands note order preserve h niequivalence cases transformed term must guarded asynchronous action following theorem states correctness transformations theorem 3 let n 2 n q astp process q proof see appendix rules could dened performing reductions however every syntactic method static cannot perform possible simplications since cannot know behavior process run time semantic approach like described preceding section based abstract semantics general precise hand compared semantic approach syntactic one advantage less complex time since analyzes source code without executing program though semantic syntactic reductions independent protably combined given process p rst syntactically transformed process q abstract transition system built q using abstract semantics example 5 recall vending machine example 1 let us suppose verify property 2 example 2 apply transformation rules vending machine fcoin moneyg n obtain following reduced process cappuccino collect cappuccino v 2 choc cappuccino collect choc cappuccinov 2 formula 2 checked standard transition v 2 states 14 transitions moreover 2 checked abstract transition system n 2 n2 v 2 obtained applying v 2 abstract semantics states 9 transitions note applying rst syntactic reduction abstract semantics produces transition system smaller one obtained abstract semantics applied initial process 6 conclusions paper presented approach problem reduction number states transition system many abstraction criteria system specications including time constraints dened see example 4 6 9 11 12 realtime systems work 17 denes abstractions transition systems quantitative labels abstraction driven property proved introduced abstract semantics astp processes order formally dene abstract transition system abstract semantics easily applicable concurrent operator appendix b shows extension semantics cope operator abstract semantics used design tool automatically building abstract transition system implementation care must taken manage innite loops occur lookahead process syntactic reductions easily implementable degree reduction performed abstract semantics depends size set actions bound n particular reduction signicant either set small subset bound n small respect length time paths standard transition system obviously reduction performed n greater longest time path standard transition system r model checking via reachability testing timed automata logics models real time survey really temporal logic selective mucalculus new modal operators proving properties reduced transition systems selective mucalculus formulabased equivalence transition systems property preserving simu lations automatic veri model checking abstraction ncsu concurrency workbench generation reduced models checking fragments ctl abstract interpretation reactive systems aboard auto cadp protocol validation veri concept quanti symbolic model checking realtime systems results propositional mucalculus timed automata logic back algebra timed processes local model checking realtime systems tr automatic verification finitestate concurrent systems using temporal logic specifications communication concurrency verifying temporal properties processes really temporal logic symbolic model checking realtime systems algebra timed processes atp abstract interpretation reactive systems selective mucalculus formulabased equivalence transition systems timed automata logic back concept quantified abstract quotient automaton advantage model checking via reachability testing timed automata generalized quantitative temporal reasoning property preserving simulations generation reduced models checking fragments ctl local model checking realtime systems extended abstract validation verification toolbox ncsu concurrency workbench logics models real time realtime mucalculus preliminary report selective myampersandmicrocalculus