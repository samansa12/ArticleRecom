multimodel methodology qualitative model engineering qualitative models arising artificial intelligence domain often concern real systems difficult represent traditional means however promise dealing systems offered research simulation methodology research produces models combine continuous discreteevent formalisms nevertheless aims approaches ai simulation communities remain rather mutually ill understood consequently need bridge theory methodology order uniform language either analyzing reasoning physical systems article introduces methodology formalism developing multiple cooperative models physical systems type studied qualitative physics formalism combines discreteevent continuous models offers approach building intelligent machines capable physical modeling reasoning b introduction humans appear use qualitative models answering questions happens pot water heats caused water overflow pot whether actually use qualitative models something address paper address instead relationship qualitative quantitative modeling perspective systems simulation theory methodology 13 14 work prompted two needs 1 need bridge gaps artificial intelligence ai simulation communities representations system models 2 need derive formal approaches development models systems typically studied ai qualitative modellers respect ai simulation communities groups terminology similar focus instance envisionment 5 would termed reachability tree finite state automaton systems literature landmark 21 would termed discrete event many correlations name four table 1 complete discussion commonalities points controversy given fishwick zeigler 15 event enough similarities goals ai simulation research contend methods simulation modeling play strong role ai considerable amount research performed ai subdisciplines qualitative reasoning 3 39 simulation 21 qualitative physics 17 model based reasoning 34 chief problems addressed ai researchers qualitative simula tion instance revolve around reducing explosive number states obtained envisionment 22 36 applying constraints explosion result model whose structure parameters illdefined simulation researchers dealt fuzzy parameters 10 9 however little simulation research problem studying systems whose structural rather parametric constraints uncertain ie knowing whether two states joined structure finite state automaton ai researchers also performed substantial research modeling qualitative behavior different abstraction aggregation levels 37 38 2 latter interest concerned use example recent ai literature demonstrate certain simulation methods reoriented extended help ai modellers toward goals consider paper forbus 16 presents comprehensive overview field qualitative physics forbus notes device ontologies unnatu foam water heating element copper pot figure 1 pot boiling water ral instance difficult model pot boiling water see fig 1 bouncing ball expressed within system dynamics although system dynamics 35 inadequate representing systems containing phase transitions complicated boundary conditions simulation methodology developed concepts model complex systems multiple levels abstraction 6 7 8 oren 28 developed concept multimodel formalize models containing several submodels one put effect given time idea multimodel roots within work combined simulation modeling combined modeling traditionally referred integration discrete event continuous modeling within system description pritsker 31 32 first implemented combined modeling gasp modeling language cellier 4 developed approach combined continuousdiscrete event models implemented gasp language extension praehofer 30 extended discrete event system specification devs 45 provide formalism simulation environment specifying combined continuousdiscrete event models article build developments providing methodology formalism developing multiple cooperative models physical systems type studied qualitative physics formalism help build intelligent machines capable physical modeling reasoning approach similar goals work forbus falkenheiner simgen 17 system work addanki et al 1 graphs models approach supporting multiple models work similar build multiple models fit together aid questionanswering different levels method differs ai work two fundamental ways 1 models based canonical systems definition described next section 2 place strong emphasis behavior preservation among models traversal using canonical model definition base permits us specify many varieties models petri nets cellular automata system models systems theory 29 18 science 19 predicated canonical formulation emphasis behavior preservation homomorphic mapping insures maximal consistency dynamically mapping abstraction levels use system boiling water illustrate methods although first glance appears simplistic boiling water system appropriate demonstrating wide range discrete continuous behaviors well levels abstraction lets consider questions might ask intelligent system autonomous robot systems relate heat transfer ffl hot water see robot must first understand natural language poses many difficulties complete autonomy answering question must incorporate intensional contextual knowledge question asked within home ie pot hot water robot determine whether intend receive answer hot 98 degrees celsius level answer clear depends personality knowledge human asking question kind system model would necessary robot answer question clearly would best detailed mathematical models heat transfer well aggregated socalled lumped models 42 43 lumped models serve two purposes 1 relatively reduced computational complexity enables used obtain answers quickly 2 serve form cognitive linguistic links different knowledge representation levels see need multiple models effective methods linking models using behavior preserving morphisms behavior preserving aspect critical robot able maintain consistency among various models model base 45 advanced robot might even capable forming correct system analogies metaphors using morphism concepts ffl long take pot water boil question requires detailed mathematical model answer since human would likely prefer accurate time ffl boil water happen next initial priori physical knowledge fluids help answering question knowledge induced robot visually sensed previous occurrences happens water boiled robot likely make prediction common situations boiling water inducing rules simple models multiple instances pattern recognition new simpler system models constructed robot manner new models homomorphically linked existing models boiling water ffl put fiberglass insulation walls much money save assuming robot general knowledge heat transfer see question previous one really similar heat transfer problems generalized dynamical features effort across variables flow variables robot capability see room wall pot pot water generalized capacitances material generalized resistance without generic knowledge robots system knowledge would limited studying questions recognize need following capabilities autonomous agent 1 multiple models process geared answering different questions 2 methodology formalisms create models 3 priori knowledge base basic physical system properties 4 ability deduce new knowledge 5 ability induce new knowledge 6 methods traversing levels abstraction paper deals items one two six 7 19 45 24 propose concepts events partitions formulated within general systems theory support construction multimodels high autonomy systems conjecture partition system components linguistic cognitive pieces learn create qualitative models instance modeling evacuation procedure skyscraper forgo need model articulated figures humans moving real time instead make abstract features allow us create simplified model consisting queuing network recognize humans encounter boundaries door wall humans line key events occur leave quantitative information focal point modeling analysis first review formal definitions systems key system concepts essential abstraction level using boiling water system illustration show models derived topdown approach start abstract model expressed fsa finite state automaton perform homogeneous ie staying within refinement derive two levels refinement final refinement heterogeneous 11 automaton decomposed block networks representing continuous process heating cooling methodology number interesting features ffl result refinement set models different levels abstraction ffl models answer various questions relate proper level abstraction ffl models integrated multimodel 25 28 simulated using one several methods 12 30 ffl semantics multimodel expressed devs formalism ffl devs representation lends abstraction supports efficient discreteevent simulation review systems concepts discussion refinement process justify claims made introduce concept fsacontrolled multimodel create formal specification using devs concepts demonstrate use answering symbolic dynamic questions system structure behavior 2 defining system 21 formal specification deterministic system u classical systems theory 29 40 defined follows time set continuous systems systems ffl u input set containing possible values input system output set state set fflomega set admissible acceptable input functions contains set input functions could arise system operation often due physical limitations omega subset set possible input functions u transition function defined ffl output function system said timeinvariant behavior depend absolute value time case transition function simplified yields state results starting system applying input duration time units discreteevent systems effect input captured resetting initial state shall see useful form transition function socalled inputfree input argument dropped ffis state reached starting state duration use form transition function later application devs formalism multimodel specification system formalism general instance figures 2 3 show two sample models represented using 1 block network 2 state transition method respectively formalisms shown subclasses system formalism 41 fig 2 transfer functions represented boxes inputs outputs connected box termed block model systems engineering data flow graph software engineering state vector system cross product outputs specifically outputs connected boxes memory ie integrator delay make system state q represents algebraic cross product z tdtg fig 3 displays system emphasizing statetostate transitions instead using block network orientation important class state transition model finite state automaton fsa example outputs associated states input conditions involving u provide determinism multiple branches state dy3 figure 2 block network orientationd4321 figure 3 state transition orientation table 2 simulation model types discrete state space continuous state space discrete time difference equations difference equations integer states real states cellular automata finite state automata continuous time queuing models differential equations digital logic models 22 model types taking cross product time state space terms two possible values discrete continuous suggests four possible model types table 2 displays combinations example model formalisms discrete event models cannot localized within table 2 since concept discrete event refers discrete updating process rather discrete continuous character time state see 42 32 characterizations discrete event models discrete event simulations performed models discrete state space ie first column table 2 continuous events simulation literature 32 27 26 one finds reference discrete events continuous events might defined terms start end arbitrary numerical integration interval however concept adequate since depends simulation process intrinsic characteristic model appears events discussed greater detail section 23 discrete since map cognitive linguistic concepts connected processes model next section attempt provide conceptual framework understanding discrete events combined model combines two model types instance combined discrete eventcontinuous model two distinct model types discrete event model continuous model two models coupled discrete events 4 30 23 event identification event state components state vector specific time therefore event form definition event first used physics 33 defined systems theory 29 page 198 simulation literature 32 23 term event usually associated linguistic cognitive mapping even though event legally occur time regardless linguistic association use term event mean key event nominal event derive identify events based segmentation partition criteria involves strong knowledge representation physical system studied study segmentation partitioning means trivial usually determined human domain expert instance arrivals departures key events determined single server queue however would also possible choose events nexttowaterfountain signifying person jumps line 5 seconds get drink water startphaseone ofservice person entering first phase within larger service process events defined points time relative level abstraction associated model many events nexttowaterfountain modeled activities rather events model defined lower abstraction level utilize several heuristics help semiautomating event identification procedure heuristics partitioning trajectories complex process ffl general event occur significant marked change occurs one following trajectories input output state consider input trajectory square wave leading trailing edges good potential locations events continuous systems state variables specify orders derivatives sign change state variable denotes potential event location ffl form list questions asked model objects part question represented simulation model interaction objects possible events general actions applied objects beginning end possible locations events indeed activity scanning world view discreteevent simulation 20 32 activities actions form basic primitives model expression ffl general consider boundary conditions respect collisions geometrical objects points collision indicate events example events projectile hits target articulated figure comes physical contact environment ffl programs context switches ie subroutines models model context switches model deliberately composed separate submodels submodel seen phase events demarcate phase boundaries use particular heuristic partition system boiling water discussed discussing identification discrete events might ask basic philosophical questions kind situations might seen events propose events associated definite cognitive associations instance spot air three feet floor likely cognitive linguistic mapping therefore normally specify event location even object passes spot motion trajectory although ball hits floor serves event since strong cognitive mapping floor 3 example system boiling water 31 overview consider pot boiling water stovetop electric heating element initially pot filled predetermined level water small amount detergent added simulate foaming activity occurs naturally boiling certain foods system one input control temperature knob knob considered one two states 190 ffi c ff ambient temperature make following assumptions connection physical system 1 input knob turning change time input trajectories piecewise continuous two possible values onoff 2 liquid level height increase liquid starts boil 3 liquid starts boil layer foam increases height either overflows pot knob turned 4 liquid level decreases boiling overflow phases create mathematical model must start data expert knowledge domain enough data gathered cost effective way model engineering process simplified since rely solely heuristics identify model analyzing pot boiling water may derive simple causal models whose individual transitions may knob water getting hotter water getting hotter water boiling important facet system modeling choose certain modeling methods require categorization informally specified system components key components system model input output state event time parameter different modeling methods include components different ways instance fsa focuses statetostate transitions input labeled arc dataflow model hand focuses transfer function input output 32 knowledge base large selection model formalisms choose fsas petri nets bond graphs block graphs compartmental models pulse processes differential equations difference equations name individual components chosen aid existing knowledge base created manually along models necessary simulation knowledge base approach similar function system entity structure ses 42 focus knowledge base schemata paper present sort infrastructure needed form models different abstraction levels model knowledge provided human modeller ie automatically inferred knowledge base contains two types semantic networks represent knowledge boiling water domain action object particular networks devoid cycles displayed tree form figures 45 1 paper focus action hierarchy information model use level model top part action tree resembles class hierarchy isa relations break higher level phase model relation points set differential equations model particular phase man relation specifies observable manifestations particular phases 1 ako fig 4 acronym kind foam man ako exception ako ako hyp man isa isa man isa isa isa model model model model model model burnout m6 smell burnt underflow overflow forming bubbles m3 boiling heating cooling cold cold phase figure 4 action hierarchy manifestation relations useful diagnosis hyp relation specifies reached hypothesis also used diagnosis causal reasoning create models must review purpose goals simulation set questions deals classes instances often refer object hierarchies fig 5 purpose choose concentrate temporal phase information answer questions sort happen immediately pot boils long take water cool room temperature knob turned following sections discuss stepwise refinement process create multiple models boiling water system refinement procedure shown figure 6 hierarchy representational nature define hierarchical organization since future questionanswering system facilitated maintaining structure often question may require information present specific layer regardless whether states layer represent lower level states lumped state carry information addition default information carries representing submodel want construct second level abstraction total system take topmost fsa include second level fsa form fsa2 level represents detailed representation given state layer 33 two homogeneous refinements homogeneous refinement refinement model detailed models type instance consider printed circuit board many levels modeled using block formalism model defined type block model might type petri net compartmental model chip level pc board model contain function blocks decomposed block networks way modeller build hierarchy models without represent one attr attr attr attr attr attr partof partof attr attr isa isa isa isa maxtemp type material material height handle body knob burner pot water object partof partof partof partof partof partof partof partof partof partof stovetop oven counter3 disposal stove counter2 floor island kitchen figure 5 two object hierarchies graphs state 6 state automaton block combined refine refine refine 6 state automaton figure model refinement procedure model lowest abstractionaggregation level figure 7 displays three levels finite state automata boiling water process note states 3 levels chosen directly referring action hierarchy fig within knowledge base level refinement corresponds level action hierarchy topmost fsa fig 7 displays simple two state automaton input label fsa1 input discretized knob control either input occur time facilitate change state change input denoted i1 arc fig 7 defining state transition accomplished input becomes i1 knob turned state cold system moves state cold temperature reaches ambient temperature denoted system returns cold second level includes detailed representation state cold combining new fsa fsa1 create fsa2 complete model boiling process fsa3 constructed similarly note transition condition may sometimes refer detailed state specification available current level abstraction example transition exception boiling refers phase overf low model building conditions evidence state refinement necessary however hierarchy useful model building also facilitating questionanswering using variety abstractions discussed sec 4 alternatively modeller may decide terminate refinement process leaving transition nondeterministically specified indeed decision whether continue refinement based modeling objectives accuracy required computational resources available 41 42 34 refinement refinement takes homogeneous refinement step loosening restriction equivalent model types instance might petri net high abstraction level may choose decompose transition block graph transition fires within petri net one may drop functional block level last fsa fig 7 choose represent state continuous model specifically state define three state variables temperature hw height water h f height foam top water updated also parameter h height pot cases h f hw hw end result eventually multimodel coordinated fsa3 continuous models contained within states heating cooling require physical theory stating model heat conduction since convection radiation play major roles system derive good continuous model heating cooling first define resistance thermal resistance height water surface area pot k thermal conductivity water ignore resistance pot since significant resistance water definition thermal capacitance c c flow heat heating element water let c 1 capacitance metal pot c 2 capacitance water c total capacitance newtons law cooling states temperature source heating element 2 temperature water since 2 state variable let boiling ioff f ioff ion ion ioff ion ion ioff ioff ion ion ioff ion ion ioff ion ioff f exception exception cold boiling overflow underflow boiling cooling heating cold cold cold cold boiling figure 7 homogeneous fsa refinement ioff ion ion ion cooling boiling cold cooling fk heating figure 8 decomposition heating state combining newtons law capacitance law using law capacitors series arrive 1 hence equation 2 first order lag step input representing sudden change temperature effected control knob figure 8 displays block diagram heating within heating state proper coupling essential heterogeneous refinements must made clear components one level match components higher level note fig 8 transfer function taking onoff input detected fsa converting input values temperature values block network specifically block labeled f performs mapping onoff realvalued temperatures due latent heat effect water cannot exceed 100 unless water vaporized water turned steam temperature increases beyond 100 however system passes underflow state since hw 0 lowlevel continuous models defined follows 2 1 2 3 first order exponential behaviors therefore rough approximations actual boiling water system internal transition external transition legend figure 9 generic phase graph 4 4 5 boiling constraint h system phase denoted phi state variables water height water height foam note continuous models share common set state variables however general state variables may different model also constants h height top pot h starting height water poured pot k rate constants initial conditions including functional block knowledge create one large model called combined defined fsa3 state containing block model shown fig 8 35 forming multimodel 351 general case presented refinement graphs 2 state automaton block graph lowest level form multimodel need specify set models defined coordinated exactly one submodel active time multimodel created fig 7 treating states phase associating model phase ease exposition considering general case lets consider example figure 9 displays phase graph 3 phases b c different model associated phase instance phase b underlying model 1 generate state trajectories external events denoted fig 9 solid arc phase instance input 1 received phase immediately moves b model 1 starting state determined state 5 otherwise phase remains internal also called state events occur state model satisfies specific transition conditions denoted dashed lines one phase another instance phase let fx 2 interpreted follows state variable x 2 reaches value 42 ie phase becomes c note phase graph fsa augmented capability recognizing changes state events internal events well input events external events phase graph become means coordinating transitions activations submodels multimodel let us summarize example formulation fsacontrolled multimodel fig 9 following variables used c phases ffl input variable 1 2 values assume input immediate effect phase sample state variable continuous model level ffl f arbitrary predicate true false value lower level continuous model containing transition functions defined state variables x j fsacontrolled multimodel simulated combined continuousdiscrete event environment cellier 4 praehofer 30 however fully understand operation simulation first present formalization fsacontrolled multimodel specified structure fsa models map transit ions ffl fsa finite state automaton whose states called phases input induced phase form external events multimodel ffl models set models specified system general formalism given earlier ffl map mapping states fsa models thus phase assigned model 2 models intended one active model multimodel phase ffl transit ions set conditions potentially one transition pair phases fsa form internal transitions multimodel formally transition condition associated phase predicate state set model associated phase map present set models boiling water fsacontrolled multimodel first step transform hierarchical system structure flat structure collapsing hierarchy using phase graph notation create graph figure 10 compressing three levels fig 7 single level graph graph provides fsa coordinator multimodel input induced external transitions shown solid arcs fsa models set continuous models 15 given shown labeling phases elements models transit ions shown set conditions attached dotted arcs fig 10 formal interpretation structure fsamodelsmaptransit ions given mapping devsdess formalism 30 combined continuous discrete event models 3 refrain giving mapping restrict comments following ffl note zero one transition conditions may associated phase case internal transitions phase multimodel remain phase forever unless external event send another phase case one transition condition emerging phase multimodel remain phase condition becomes true immediately switch new phase indicated case several transition conditions multimodel remain current phase one conditions becomes true immediately switch phase corresponding transition 4 ffl multimodel switches one phase another either due external internal event state model new phases must determined relation model old phase general require set initialization specifications one transition simplicity consider requirement instead assume models share common state set transition new model starts state old model time transition occurred 36 devs abstraction fsacontrolled multimodels even though classical system theory 18 29 provides strong definitions individual systems system networks little concentration concept event events critical study systems within classical theory simulation researchers zeigler 41 nance 23 extended classical theory formally specify discrete event models roles events state time within simulation models present brief review resulting devs formalism prelude mapping fsacontrolled multimodel devs equivalent 41 time discrete event systems assumed realvalued devs structure ta follows 3 actually strictly true case models restricted continuous discrete time discrete event however extension general case would difficult 4 must tiebreaking mechanism handling cases one condition simultaneously becomes true m6 m3 heating ioff ion ion ioff ioff ion ioff ion ion ioff ion hfht underflow overflow cold boiling cooling figure 10 six state automaton controller boiling water multimodel fsa3 ffl u input event set ffl output set ffl sequential state set external transition function total state set model e represents state sequential state elapsed time e internal transition function output function ta 01 time advance function devs formalism stated title discrete event system specification shorthand means specifying general system formalized earlier think pictorially box containing process box accepts inputs produces outputs map fsacontrolled multimodel fsamodelsmaptransit ions devs equivalent follows let devs defined u ta ffl u input set fsa ffl output set fsa interest p set phases fsa qm common state set models note typical element p q p phase q state qm also typical element total state set q p q e fsap u phase fsa enters receives input u phase p ffi mp transition function mp model associated phase p map formalizes earlier interpretation fsa receives input immediately switches phases state multimodel updated state corresponding elapsed time e using model control time ffl define ta recall set transition conditions associated given phase p let c pgammap0 condition internal transition p p0 let pgammap0 time c pgammap0 first becomes true mp starts state q pgammap0 minimum time c pgammap0 ffi mp q true 5 tap q minimum pgammap0 p0 ranges transitions c pp0 transit ions note minimum could 1 none conditions satisfied along state trajectory starting q model mp procedures best illustrated referring example fig 9 consider following continuous model definition direct solution differential equation calculate elapsed time starting condition occurs must solve e obtain p phase dictated winning condition ie phase p0 pgammap0 equal tap q 6 output function defined terms output currently active submodel interest preceding formulation fsacontrolled multimodel phases ie states fsa mapped models often however possible provide concrete representation phases associating subsets states common state space qm models since input u participates determining next phase input phase jointly determine partitions qm partition blocks placed correspondence phases figure 11 displays common three dimensional state space hw figure 12 illustrates phase shaded region state space table 3 provides formal correspondence phases input values partition blocks let u p partition block corresponding pair u p u input value p phase mapping viewed labeling partition blocks inputphase pairs case internal event transitions expressed terms boundary crossings partition blocks means condition form c pp0 written membership state partition block u p0 u input prevailing phase 5 assume minimum welldefined continuous systems 6 applying tiebreaking rules necessary aa ta f figure 11 continuous state space boiling water system p 7 example boiling water example transition condition cheat ingboiling input specified entry boilingon table 3 transition corresponds reaching boundary given plane summary important special case fsacontrolled multimodel occurs component models share common state space partitioned block labeled phase well region particular model active restricted case partition blocks continuous model nontrivial leads devs representation model 45 clear construction discrete event model system affords efficient simulation continuous implementation system continuous approach requires stepbystep generation successive model states discrete event form computes state changes event times devs model employs timeadvance internal transition function predict time state next internal event also employs external transition function update state change input occurs zeigler 42 showed devs representation general system homomorphic relation original system called system morphism morphism corre 7 simplified formalization section 35 prevailing input u assumed stored state q detailed formalization would make explicit component q ta f heating phase ta f b cooling phase ha f c boiling phase ta f cold phase undefined aa ha f underflow phase aa ta f f overflow phase figure 12 phase partitions table 3 partitioning boiling water state space phase hw h f cold oe oe oe heating oe oe oe cooling oe oe oe overflow oe oe oe underflow spondence states two systems preserved corresponding transi tions thus state behavior original system preserved although form macrostate rather microstate transitions future research rigorously establish morphism similar fsacontrolled multimodel structure devs equivalent 37 discrete event simulation multimodels devs equivalent fsacontrolled multimodel provides basis discreteevent simulation multimodels simulation multimodel could carried devs based simulation environments devsscheme 43 provide concrete example simulation article present algorithms represented simpack 12 set simulation tools fsacontrolled multimodel converted discrete event simulation translation graph core discrete event simulation event switch statement switch statement composed event statement blocks routines gain control simulation scheduled event future event list initiated caused show use following routines appendices b present switch statements corresponding graphs figures 9 10 respectively remark careful statement conditions actually required pseudocode appendices b occurs state trajectory model approaches never actually reaches threshold specified condition example heating model exponentially approaches boiling temperature according models behavior cases tolerance around limiting value set provide definite boundary crossing control boiling water system driven discrete event simulation fsa fig 10 low level differential equation models simulated using rungekutta integration performing boundary checks internal events question answering choice model specified 3 automata levels one functional block level devs spec ification use models answer questions system query system yet implemented however present sample questions answers practically derived presented multimodel given arbitrary question shown table 4 model chosen base answer note following acronyms ffl qtype means category question 4 types questions specified pred prediction diag diagnostic exp explanation ref reference predictive question one simulation required generate answer diagnostic question yields short answer specifying immediate cause whereas explanation lengthy may involve summary information presented reference question one involve analysis simulation material pot ffl model refers level abstraction specified models discussed far fsa1 abstract 2 state model fsa2 fsa3 5 6 state models respectively lowest level block model labeled comb ie combined ffl knowledge refers additional knowledge needed answer question knowledge base helps provide answers questions recall action object knowledge trees specified boiling water domain note questions require information possibly provided dynamical model alone instance burnt smell attributed overflow state manifestation link action tree fig 4 41 relation qualitative modeling levels abstraction discussed demonstrate causal models within ai could potentially mapped systems view resulting set formal models used answer different classes questions system definition abstract levels multilayer system similar causal modeling method within ai indeed many questions asked high level models could also asked automata presented although investigation necessary support claim one use predictive diagnostic power afforded system representations vital 1 break informal system representations appropriate formal models automata block graphs petri nets 2 use extra knowledge system answer greater percentage questions asked models first requirement suggests informal system descriptions boiling water pot need broken well known entities state phase event entities defined variety graph oriented modeling methods devs specification language used second requirement suggests need knowledge bases house models manner multimodel hierarchies created based type questions answered conclusions used system boiling water demonstrate create fsacontrolled multimodel efficiently represents system using multiple homogeneous heterogeneous models multimodel approach demonstrated ai problem represented challenge system modeling found utilizing combined modeling heterogeneous interlevel coupling homomorphic behavior preservation able create solution ai modeling problem permits reasoning variety levels instance multimodel could potentially answer questions water start boil long cooling take knob turned time x negative side since focus formal structure multimodels ignored difficult problems associated question answering instance case question system warm become cold manually equivalenced warm cold used fsa1 topmost level abstraction know perform procedures investigating possible answers question ever remains much done regard implementing fully realizable natural language interface integrates knowledge base model hierarchy models represent combined simulation three finite state automata levels functional block level individual fsa levels abstraction shown useful answering certain high level system questions combined continuousdiscreteevent model divided total boiling water process distinct phases coordination models phases facilitated phase graph associated fsa final level abstraction addition devs specification provided formalize multimodel concept system theoretic manner devs formulation also allowed casting multimodel form efficient discreteevent sim ulation simulation provides answers questions concerning dynamical behavior system cannot answered symbolic levels abstraction illustrates approaches ai simulation methodology combined achieve artificial systems capable modeling reasoning physical systems heuristic approaches event identification qualitative modeling suggested illustrated multimodel characterization boiling water example introduced forbus 16 although demonstrated multimodel approach system boiling water believe method applicable many scenarios different levels abstraction coded model form appropriate levels started fsas utilized continuous system formalisms detailed simulation would also possible start functional block model link petri nets model formalisms problem semiautomating process taking conceptual nonexecutable object based model system converting executable model remains hard problem taken form ai simulation software engineering completely solved problem method instead method suggests one way designing executing multimodels advantage suggested multimodel approach complex system would otherwise necessitate encoding single level abstraction alternatively modelled multimodel thereby allowing analyst 1 create maintain integrated model base 2 reason system behavior variety abstraction levels described conceptual foundation supporting design execution multimodels future plan several projects including constructing implementations knowledge representation natural language query schemes justifying heuristic approaches supporting theorybased tools r reasoning assumptions graphs models combining qualitative quantitative simulation brief qualitative reasoning physical systems combined continuous system simulation use digital computers techniques tools qualitative physics based confluences hierarchical reasoning simulating complex processes multiple levels abstraction role process abstraction simulation abstraction level traversal hierarchical modeling extracting rules fuzzy simulation fuzzy simulation specifying identifying qualitative models heterogeneous decomposition coupling combined modeling computer simulation modeling methodology qualitative simulation modeling analysis knowledge based simulation methodology application qualitative physics towards automation systems problem solving qualitative physics past topics mathematical systems theory architecture systems problem solving system simulation programming styles languages qualitative simulation taming intractable branching qualitative simulation time state relationships simulation modeling conical methodology framework simulation model devel opment model symbolic processing taxonomy dynamic templates semantic rules simulation advisors certifiers systems theory unified state space approach continuous discrete systems system theoretic foundations combined discretecontinuous system simulation gasp iv simulation language introduction simulation slam ii philosophy space time second aaai workshop model based reasoning boston introduction system dynamics global filters qualitative behaviors combining discrete continuous process models use aggregation causal simulation readings qualitative reasoning physical systems palo alto mathematical theory systems engineering elements theory modelling simulation multifaceted systems modeling structure behavior multiplicity levels devs representation dynamical systems eventbased intelligent control object oriented simulation hierarchical tr multifacetted modelling discrete event simulation qualitative reasoning physical systems introduction simulation slam ii 3rd ed system simulation programming styles languages qualitative simulation use aggregation causal simulation hierarchical reasoning simulating complex processes multiple levels abstraction role process abstraction simulation qualitative physics past present future objectoriented simulation hierarchical modular models intelligent agents endomorphic systems readings qualitative reasoning physical systems qualitative physics based confluences knowledgebased simulation dynamic templates semantic rules simulation advisors certifiers qualitative simulation modeling analysis qualitative physics towards automation systems problem solving heterogeneous decomposition interlevel coupling combined modeling time state relationships simulation modeling theory modelling simulation ctr arnold j almanzor paul r work modeling methodology model specifications development casi casearchitecture simulation integration proceedings 25th conference winter simulation p657661 december 1215 1993 los angeles california united states victor miller paul fishwick graphic modeling using heterogeneous hierarchical models proceedings 25th conference winter simulation p612617 december 1215 1993 los angeles california united states paul fishwick jinho lee minho park hyunju shim next generation modeling rube customized 2d 3d modeling framework simulation proceedings 35th conference winter simulation driving innovation december 0710 2003 new orleans louisiana herbert praehofer dietmar pree visual modeling devsbased multiformalism systems based higraphs proceedings 25th conference winter simulation p595603 december 1215 1993 los angeles california united states paul fishwick simpack getting started simulation programming c c proceedings 24th conference winter simulation p154162 december 1316 1992 arlington virginia united states moonho hwang byoungkyu choi gkdevs geometric kinematic devs formalism simulation modeling 3dimensional multicomponent systems transactions society computer simulation international v18 n3 p159173 september 2001 jin joo lee paul fishwick simulationbased planning multiagent environments proceedings 29th conference winter simulation p405412 december 0710 1997 atlanta georgia united states paul fishwick multimodeling unified modeling framework proceedings 25th conference winter simulation p580581 december 1215 1993 los angeles california united states taewoo kim jinho lee paul fishwick twostage modeling simulation process webbased modeling simulation acm transactions modeling computer simulation tomacs v12 n3 p230248 july 2002 paul fishwick heterogeneous decomposition interlevel coupling combined modeling proceedings 23rd conference winter simulation p11201128 december 0811 1991 phoenix arizona united states paul fishwick simulation model design proceedings 26th conference winter simulation p173175 december 1114 1994 orlando florida united states paul fishwick architectural design digital objects proceedings 30th conference winter simulation p359366 december 1316 1998 washington dc united states paul fishwick simulation model design proceedings 27th conference winter simulation p209211 december 0306 1995 arlington virginia united states frederick k frantz taxonomy model abstraction techniques proceedings 27th conference winter simulation p14131420 december 0306 1995 arlington virginia united states david p miller r james firby paul fishwick jeff rothenberg ai simulationists really need know acm transactions modeling computer simulation tomacs v2 n4 p269284 oct 1992 paul fishwick hannsoskar porr using discrete event modeling effective computer animation control proceedings 23rd conference winter simulation p11561164 december 0811 1991 phoenix arizona united states ashvin radiya discrete event simulation modeling directions 90s proceedings 24th conference winter simulation p773782 december 1316 1992 arlington virginia united states john reed gregory j follen abdollah afjeh improving aircraft design process using webbased modeling simulation acm transactions modeling computer simulation tomacs v10 n1 p5883 jan 2000 francesco amigoni alessandro beda nicola gatti multiagent systems cardiac pacing simulation control ai communications v18 n3 p217228 august 2005 kangsun lee paul fishwick dynamic model abstraction proceedings 28th conference winter simulation p764771 december 0811 1996 coronado california united states john reed abdollah afjeh objectoriented framework distributed computational simulation aerospace propulsion systems proceedings 4th conference usenix conference objectoriented technologies systems coots p1111 april 2730 1998 santa fe new mexico fernando j barros formal representation hybrid mobile components simulation v81 n5 p381393 may 2005 gnter gans matthias jarke gerhard lakemeyer dominik schmitz deliberation metadatabased modeling simulation environment interorganizational networks information systems v30 n7 p587607 november 2005 levent yilmaz toward nextgeneration simulationbased computational tools conflict peace studies social science computer review v25 n1 p4860 february 2007 levent yilmaz tuncer ren nasser ghasemaghaee simulationbased problemsolving environments conflict studies simulation gaming v37 n4 p534556 december 2006 paul fishwick integrated approach system modeling using synthesis artificial intelligence software engineering simulation methodologies acm transactions modeling computer simulation tomacs v2 n4 p307330 oct 1992