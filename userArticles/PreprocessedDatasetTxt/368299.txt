fast sequential circuit test generation using highlevel gatelevel techniques new approach sequential circuit test generation proposed combines software testing based techniques high level test enhancement techniques gate level several sequences derived ensure 100 coverage statements highlevel vhdl description maximize coverage paths sequences enhanced gate level maximize coverage single stuckat faults high fault coverages achieved quickly several benchmark circuits using approach b introduction recent work area sequential circuit test generation focused gate level targeted single stuckat faults deterministic faultoriented simulationbased approaches used eectively although execution times often long key factor limiting eciency approaches lack knowledge circuit behavior architecturallevel test generation proposed means exploiting highlevel information maintaining capability handle stuckat faults 1 however highlevel information must derived structural description register transfer level rtl sequences generated targeted detecting specific stuckat faults modules gatelevel descriptions available circuits modules gatelevel descriptions available handled better fault coverages obtained gatelevel test generator less time 2 several approaches proposed automatic generation functional test vectors circuits described high level including 345 functional test vectors used design verification power estimation addition screening manufacturing defects vemuri kalyanaraman enumerate paths annotated vhdl description trans research supported part darpa contract dabt6395c0069 part european union fost project hewlettpackard equipment grant late set constraints 3 constraint solver used obtain test sequence traverse specified path fault coverages test sets generated statement coverage low higher fault coverages obtained covering statement multiple times cheng krishnakumar transform highlevel description vhdl c extended finite state machine efsm model use efsm model generate test sequences exercise specified functions 4 traversing transitions efsm model shown guarantee coverage functions execution time low generation test sequences good fault coverages achieved several circuits approach proposed corno et al implemented test generator rage aims generate test sequences cover read write operation variable highlevel vhdl description 5 operations covered specified number times good fault coverages achieved several benchmark circuits covering operation least three times fault coverages sometimes higher obtained deterministic gatelevel test generator execution fast larger circuits functional test generation approaches based upon technique commonly used software testing generating tests cover statements system description another software testing tech nique implemented previous work functional test generation generate tests traverse possible paths system description 6 work address path coverage well statement coverage vhdl circuit description may contain multiple processes execute concurrently since path defined within single process apply path coverage singleprocess designs main process multipleprocess designs limitations must placed upon path length bound number tests generated generation tests path coverage addition statement coverage may enable higher fault coverages achieved whether statement coverage path coverage used coverage metric generation test sequences using software testing based techniques limited inability specify values variables maximize detection faults gate level propose combine software testing based approach high level test sequence enhancement techniques gate level achieve high fault coverages sequential circuits quickly gatelevel test sequence enhancement techniques use borrow techniques already developed dynamic compaction tests generated gate level 78 objective maximize number faults detected test sequence generated high level begin overview test generation process section 2 generation test sequences high level using software testing based techniques described section 3 followed discussion test sequence enhancement gate level section 4 results presented section 5 several benchmark circuits section 6 concludes paper overview propose combine software testing based techniques test sequence generation high level gatelevel techniques test sequence enhancement overall test generation process illustrated figure 1 several partiallyspecified test sequences de highlevel description test automatic synthesis gatelevel description sequences test test sequence gatelevel highlevel generation test sequence enhancement figure 1 overview test generation rived highlevel circuit description using various coverage goals eg coverage statements automatic synthesis tool used obtain gatelevel implementation circuit gatelevel test sequence enhancement tool executed generate complete test set targeted high coverage single stuckat faults using test sequences generated high level input highlevel sequences generated aimed traversing number control states system values variables left unspecified much possible gatelevel tool freedom select values maximize fault coverage sequence may reused number times modifications made gate level essentially specify values variables datapath likely result dierent fullyspecified test sequences furthermore sequences subsequences contribute improving fault coverage added test set 3 highlevel test generation first step test generation procedure obtain set partiallyspecified test sequences using highlevel circuit description various coverage goals ideally would like automate process automatic generation tests statement path coverage dicult problem implementation currently available therefore current work sequences derived manually one goals work provide guidelines types highlevel sequences useful stuckat fault testing may possible avoid using sequences dicult derive automatically still achieve high fault coverages particular experiments indicate statement coverage usually suces easier achieve path coverage various highlevel benchmark circuits used work derived vhdl descriptions found various ftp sites circuits b01b08 range simple filters complex microprocessor fetch execution units available authors simplest coverage metric statement coverage test set 100 statement coverage exercises statements vhdl description every branch must exercised least set sequences derived paths necessarily taken path coverage comprehensive metric aim ensure paths taken obtain set sequences 100 statement coverage datapath control portions description identified state transition graph stg control machine derived test sequences assembled traverse control states blocks code state sequence begins resetting cir cuit benchmark circuits using reset signal available however necessary assumption circuit initializable assumption satisfied gate level either using reset signal initialization sequence several vectors added traverse states exercise various statements finally vectors added end sequence ensure circuit ends state output observed many cir cuits outputs observable state vectors unnecessary portions test sequences determine values variables left unspecified much possible gatelevel tool freedom choosing values maximize stuckat fault coverage derivation test sequences 100 statement coverage best illustrated example stg control machine benchmark circuit b03 shown figure 2 reset signal asserted cir reset read request14 update grant read request14 assign init figure 2 stg benchmark circuit b03 cuit placed state init state init bit variables request1 request4 read primary inputs next state set analisi req state analisi req 4bit grant variable written primary outputs one four blocks code executed depending request variables read previous state next state set assign state assign grant variable updated variables request1 request4 read primary inputs next state set analisi req set test sequences derived 100 statement coverage therefore contains four partiallyspecified sequences five vec tors first vector resets circuit second vector sets request variables exercise one four code blocks following state last three vectors used traverse analisi req state assign state grant variable set back analisi req state grant variable written primary outputs obtaining set sequences path coverage start sequence 100 statement coverage several sequences added maximize coverage paths paths considered within state stg also across several states procedure deriving sequences cover paths within state first explained benchmark circuit b04 stg b04 shown figure 3 along flow chart state read din sa reset rlast din din state sc f f f f f figure 3 stg benchmark circuit b04 flow chart state sc sc assignments flow chart carried clock cycle circuit reset state sa entered states sb sc reached next two clock cycles regardless inputs long reset line asserted particular patterns needed reach statements cover paths states sa sb however many paths possible state sc circuit must state sc minimum four clock cycles exercise statements least either four separate sequences one long sequence used opted use larger number shorter sequences order provide sequences optimization gatelevel tool fifteen sequences needed cover paths note ena variable used two separate decision points five sequences needed last two decision points considered consider 8 bit variable used last two decision points part datapath therefore ex periments left specification values variable gatelevel tool paths occur across multiple states must also considered consider stg control unit benchmark circuit b06 shown figure 4 stg contains several cycles order limit number sequences derived place restrictions sequences traverse cycle selfloops traversed sequence cycles sinit sintr sintrw seninw swait senin reset figure 4 stg benchmark circuit b06 sequences terminated state repeated four sequences required fully cover paths involving states wait enin enin w five sequences needed cover paths involving states wait intr 1 intr intr w nine sequences thus required path coverage general stg statement flow reached state must considered deriving sequences path coverage 4 gatelevel test enhancement functional tests generated high level eective traversing much control space machine however cannot exercise values variables except small circuits due large number possible values selecting good values use high level unsolved problem gatelevel approach may eective finding values exercise potential faults 41 architecture gatelevel tool gatelevel test enhancement tool repeatedly selects partiallyspecified sequence provided highlevel test generator attempts evolve fullyspecified sequence maximizes fault coverage number times test sequence evolution attempted parameter specified user sequences may selected randomly sequentially list sequences provided highlevel test generator sequences selected randomly random number generator used decide sequence select random selection guarantee every sequence used restrict order sequences selected sequences selected sequentially first sequence selected first second sequence selected second every sequence selected least number attempts test sequence evolution greater equal number sequences main function gatelevel test enhancement tool repeatedly solve optimization problem maximizing number faults detected se quence genetic algorithms gas used eec tively many dierent optimization problems including sequential circuit test generation 9112 thus use ga test sequence enhancement simply seed ga sequence obtained highlevel set ga fitness function maximize fault detection ga explore several alternative sequences number generations best one added test set improves fault cov erage vectors end sequence contribute fault coverage removed next highlevel sequence selected genetic enhancement procedure repeated process continues number attempts test sequence enhancement reaches userspecified limit 42 ga test sequence enhancement work use simple ga rather steadystate ga 12 since exploration search space paramount simple ga contains population strings individuals 13 application individual represents test sequence successive vectors sequence placed adjacent positions along string individual associated fit ness application fitness measure indicates number faults detected sequence population initialized set sequences derived single sequence generated high level evolutionary processes selection crossover mutation used generate entirely new population existing population process repeated several generations generate new population existing one two individuals selected selection biased toward highly fit individuals two individuals crossed create two entirely new individuals character new string mutated small mutation prob ability two new individuals placed new population process continues new generation entirely filled binary tournament selection without replacement uniform crossover used done previously gatelevel test generation 10 goal evolutionary process improve fitness best individual successive generation combining good portions fit individuals preceding generation however best individual may appear generation save best individual found ga seeded copies partially specified test sequence provided highlevel test generator specified bits every individual bits specified filled ran domly fullyspecified test sequence fault simulated obtain fitness value fitness value measures quality corresponding solution primarily terms fault coverage ga evolved several generations time last generation reached several values specified highlevel test generator may changed many individuals due mutation operator ie sequences may longer covered original partiallyspecified sequence however sequence added test set covers additional faults already covered previous vectors test set highest fault coverage 43 fitness function proofs sequential circuit fault simulator 14 used evaluate fitness candidate test sequence update state circuit best test sequence selected number faults detected primary metric fitness function since objective ga maximize number faults detected given test sequence dier entiate test sequences detect number faults include number fault eects propagated flipflops fitness function since fault eects flipflops may propagated primary outputs subsequent time frames however number fault eects propagated oset number faults simulated number flipflops ensure number faults detected dominant factor fitness function detected effects propagated f lip f lops accurate fitness function essential achieving good solution high computational cost fault simulation may prohibitive especially large circuits avoid excessive computations approximate fitness candidate test using small random sample faults work use sample size 100 faults number faults remaining fault list greater 100 experiments carried evaluate proposed approach combining highlevel gatelevel techniques sequential circuit test generation test sequences derived manually high level extracting stg control machine ensuring vhdl statements paths covered within control state dieq short c program written assist obtaining highlevel sequences circuit contains single loop loop must exited observe output c program used determine number loop iterations executed given input gatelevel implementations circuits synthesized using commercial synthesis tool test sequence enhancement performed gate level using new gabased tool implemented using existing proofs 14 source code 2100 additional lines c code small ga population size 32 used number generations limited 8 minimize execution time nonoverlapping generations crossover mutation probabilities 1 164 used tests generated several highlevel benchmark circuits hp 9000 j200 256 mb mem ory characteristics benchmark circuits summarized table 1 including number vhdl lines highlevel description number control states number logic gates gatelevel circuit number flipflops ffs number primary inputs pis number primary outputs pos number collapsed faults circuits b01b08 used previously research functional test generation 5 circuits barcode gcd dhrc dieq taken hlsynth92 hlsynth95 highlevel synthesis bench marks circuits translated synthesizable subset vhdl used test generation results shown table 2 sequences derived high level maximize path coverage results hitec 15 gatelevel deterministic test generator gatest 10 gatelevel gabased test generator also shown compari son three passes fault list made hitec circuits unless faults identified detected untestable earlier time limits three passes 05 5 50 seconds per fault circuit number faults detected det number test vectors generated vec execution time shown test generator execution time proposed approach includes time gatelevel test enhancement time generating sequences highlevel circuit descriptions expected order magnitude based previous work 5 number attempts generating useful test sequence seq sequence selection strategy strat whether sequential ran dom also shown table well number faults identified untestable hitec results shown sequence selection strategy number attempts gave highest fault coverage using minimal number test vectors table 1 highlevel benchmark circuits high level gate level circuit vhdl lines control states gates flipflops pis pos faults dieq table 2 combining highlevel test generation gatelevel test enhancement highlevel gatelevel hitec gatest circuit det vec time seq strat det vec time unt det vec time b04 1204 113 117m 20 rand 1177 303 142h 136 1217 220 460m 28 261 84 463s barcode 580 77 168m 20 rand 689 1816 287h 12 552 161 452m gcd 1988 356 178m 90 rand 1638 206 137h 3 1377 227 106m dieq 17881 335 180h 100 rand 17730 803 236h 46 18009 662 771h attempts made test sequence enhancement execution time increase higher fault coverages achieved experiments circuits fault coverages proposed approach competitive fault coverages achieved hitec barcode fault coverage achieved hitec two passes fault list 511 minutes exe cution although faults detected hitec third pass b08 hitec achieves higher fault coverage first pass cases b07 gcd higher fault coverages obtained combining highlevel gatelevel techniques furthermore given level fault coverage test sets generated using proposed approach much compact execution times gatelevel test enhancement often orders magnitude smaller hitec nevertheless untestable faults cannot identified using proposed approach thus designer may choose run gatelevel test generator hitec postprocessing step fault coverages proposed approach significantly higher gatest several circuits circuits gatest achieves fault coverage proposed approach test set lengths execution times significantly higher dieq gat est fault coverage higher execution time also significantly higher gatelevel test enhancement similar procedure used gatest except gatest uses random sequences initial ga population seeds used gatelevel test enhancement tool critical providing information ga sequences activate faults propagate fault eects two sequence selection strategies compared table 3 sequences derived high level maximize path coverage 100 statement cover age statement path coverage dieq since circuit contains single path path coverage sequential selection strategy gives better results terms fault coverage test set size circuits cases fault coverages significantly higher random selection random selection therefore preferred general statement table 3 sequential vs random selection sequences derived path coverage statement coverage path coverage statement coverage sequential random sequential random circuit seq det vec time det vec time det vec time det vec time gcd 90 1914 302 186m 1988 356 178m 1662 304 168m 1769 283 136m dhrc dieq 100 17881 335 179h 17881 335 180h 17881 335 179h 17881 335 180h coverage random selection strategy tends give fault coverages good better sequential selection fault coverages sometimes higher sequences derived path cov erage however fault coverages may significantly lower case circuit b05 results unexpected since certain paths may need traversed order excite faults propagate eects primary outputs nevertheless since good results often obtained sequences derived 100 statement coverage alone sequences easier derive approach may preferred 6 conclusions high fault coverages obtained quickly combining highlevel gatelevel techniques test generation sequences derived maximize coverage statements paths highlevel vhdl description enhanced gate level maximize coverage single stuckat faults approach may used preprocessing step gatelevel test generation speed process sometimes results improved fault coverages well higher fault coverages obtained sequences derived path coverage good results also obtained 100 statement coverage random selection sequences gatelevel enhancement shown provide consistently good results r architectural level test generation microprocessors sequential circuit test generation using dynamic state traversal generation design verification tests behavioral vhdl programs using path enumeration constraint programming automatic generation functional vectors using extended finite state machine model testability analysis atpg behavioral rtlevel vhdl high level test generation using software metrics simulationbased techniques dynamic test sequence compaction putting squeeze test sequences cris test cultivation program sequential vlsi circuits sequential circuit test generation genetic algorithm framework gatto genetic algorithm automatic test pattern generation large synchronous sequential cir cuits adaptation natural artificial systems genetic algorithms search proofs fast memoryecient sequential circuit fault simula tor hitec test generation package sequential circuits tr adaptation natural artificial systems sequential circuit test generation genetic algorithm framework generation design verification tests behavioral vhdl programs using path enumeration constraint programming automatic generation functional vectors using extended finite state machine model simulationbased techniques dynamic test sequence compaction cris genetic algorithms search optimization machine learning putting squeeze test sequences testability analysis atpg behavioral rtlevel vhdl sequential circuit test generation using dynamic state traversal ctr silvia chiusano fulvio corno paolo prinetto exploiting behavioral information gatelevel atpg journal electronic testing theory applications v14 n12 p141148 febapril 1999 jaan raik raimund ubar sequential circuit test generation using decision diagram models proceedings conference design automation test europe p145es january 1999 munich germany alessandro fin franco fummi vhdl error simulator functional test generation proceedings conference design automation test europe p390395 march 2730 2000 paris france ali duale mit uyar method enabling feasible conformance test sequence generation efsm models ieee transactions computers v53 n5 p614627 may 2004