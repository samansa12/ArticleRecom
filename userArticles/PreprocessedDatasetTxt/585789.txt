polygon decomposition efficient construction minkowski sums several algorithms computing minkowski sum two polygons plane begin decomposing polygon convex subpolygons examine different methods decomposing polygons suitability efficient construction minkowski sums study experiment various wellknown decompositions well several new decomposition schemes report experiments various decompositions different input polygons among findings general triangulations costly ii constitutes good decomposition one input polygons depends input polygon consequently develop procedure simultaneously decomposing two polygons mixed objective function minimized iii optimal decomposition algorithms significantly expedite minkowskisum computation decomposition expensive compute cases simple heuristics approximate optimal decomposition perform well b introduction given two sets p q ir 2 minkowski sum vector sum denoted p q set fp qg minkowski sums used wide range applications including robot motion planning 26 assembly planning 16 computeraided design pa supported army research oce muri grant daah049610013 sloan fellowship nsf grants eia9870724 eia997287 ccr9732787 grant usisraeli binational science foundation dh ef supported part esprit iv ltr projects 21957 cgal 28155 galia francoisraeli research grant monitored afirstfrance israeli ministry science dh also supported grant usisraeli binational science foundation israel science foundation founded israel academy sciences humanities center geometric computing applications hermann minkowski minerva center geometry tel aviv university preliminary version paper appeared proceedings 8th european symposium algorithms esa 2000 department computer science duke university durham nc 277080129 pankajcsdukeedu z department computer science tel aviv university telaviv 69978 israel flatoposttauacil x department computer science tel aviv university telaviv 69978 israel danhaposttauacil figure 1 robot obstacles reference point rigidly attached robot lefthand side conguration space obstacles free translational path robot righthand side manufacturing cadcam 9 marker making cutting parts stock material consider example obstacle p robot q moves translation choose reference point r rigidly attached q suppose q placed reference point coincides origin let q 0 denote copy q rotated 180 p q 0 locus placements point r p q 6 study motion planning sum called conguration space obstacle q collides p translated along path exactly point r moved along intersects p q 0 figure 1 motivated applications much work obtaining sharp bounds size minkowski sum two sets two three dimensions developing fast algorithms computing minkowski sums well known p polygonal set vertices q another polygonal set n vertices p q portion arrangement omn segments segment minkowski sum vertex p edge q viceversa therefore size p q om 2 n 2 computed within time bound tight worst case 20 see figure 2 p q convex p q convex polygon mn vertices computed om p convex result kedem et al 21 implies p q mn vertices see figure 3 minkowski sum computed omn logmn time 28 minkowski sums curved regions also studied eg 4 19 27 well minkowski sums threedimensions eg see survey paper 2 however focus sums planar polygonal regions devised implemented three algorithms computing minkowski sum two polygonal sets based cgal software library 1 11 main goal produce robust exact implementation goal achieved employing cgal planar maps 14 arrangements 17 packages using exact number types use rational numbers ltered geometric predicates leda library figure 2 fork input p q polygons n vertices respectively horizontal vertical teeth complexity p q figure 3 comb input p convex polygon vertices q comblike polygon n vertices complexity p q mn ecient datastructures algorithms 29 30 currently using software solve translational motion planning problems plane able compute collisionfree paths even environments cluttered obstacles robot could reach destination placement moving tight passages practically moving contact obstacle boundaries see figure 4 example contrast existing motion planning software tight narrow passages constitute signicant hurdle applications package described 12 robustness exactness implementation come cost slow figure 4 tight passage desired target placement small polygon inside inner room dened larger polygon lefthand side conguration space righthand side possible path achieve target passes line segment emanating hole sum running time algorithms comparison standard implementation uses oating point arithmetic makes especially necessary expedite algorithms ways algorithms begin decomposing input polygons convex subpolygons discovered number subpolygons decomposition input polygons also shapes dramatic eect running time minkowskisum algorithms see figure 5 example theoretical study minkowskisum computation eg 21 choice decomposition often irrelevant long decompose polygons convex subpolygons aect worstcase asymptotic running time algorithms practice however dierent decompositions induce large dierence running time minkowskisum algorithms decomposition aect running time algorithms computing minkowski sums several ways global algorithms decompose input polygons convex polygons others specic certain algorithms even specic implementations heart paper examination various factors report ndings polygon decomposition extensively studied computational geometry beyond scope paper give survey results area refer reader survey papers keil 25 bern 5 references therein proceed provide details specic decomposition methods using apply several optimization criteria decompositions employ context minkowski sums natural look decompositions minimize number convex subpolygons show sequel also interested decompositions minimal maximum vertex degree decomposition graph well several criteria report experiments various decompositions dierent input polygons mentioned abstract among ndings general triangulations costly ii constitutes good decomposition one input polygons depends input polygon consequently develop procedure simultaneously decomposing two polygons mixed objective function minimized iii optimal decomposition algorithms signicantly expedite minkowskisum computation decomposition expensive compute cases simple heuristics approximate optimal decomposition perform well next section survey minkowski sum algorithms implemented section 3 describe dierent decomposition algorithms implemented present rst set experimental results section 4 lter methods turn inecient section 5 focus decomposition schemes fast compute also help compute minkowski sum eciently give concluding remarks propose directions work section 6 nave triang min 2 triang min convex convex subpolygons p 33 33 6 time msec compute p q 2133 1603 120 figure 5 dierent decomposition methods applied polygon p leftmost gure left right nave triangulation minimum 2 triangulation minimum convex decomposition details given section 3 table illustrates decomposition sum squares degrees number convex subpolygons time milliseconds compute minkowski sum p convex polygon q 4 vertices algorithms given collection c curves plane arrangement ac subdivision plane vertices edges faces induced curves c planar maps arrangements curves pairwise interior disjoint algorithms computing minkowski sums rely arrangements discussion assume familiarity structures renement thereof called vertical decomposition refer reader 2 15 34 information arrangements vertical decomposi tion 14 17 detailed description planar maps arrangements packages cgal algorithms based input algorithms two polygonal sets p q n vertices respectively algorithms consist following three steps step 1 decompose p convex subpolygons p 1 convex subpolygons step 2 2 1s j 2 1t compute minkowski subsum denote r ij denote r set fr ij 1tg step 3 construct union polygons r computed step 2 output represented planar map minkowski sum p q union polygons r r ij convex polygon easily computed time linear sizes p q j 26 let k denote overall number edges polygons r let denote overall number intersections edges polygons r brie present two dierent algorithms performing step 3 computing union polygons r refer arrangement algorithm incremental union algorithm detailed description algorithms given 12 arrangement algorithm algorithm constructs arrangement ar induced polygons r refer arrangement underlying arrangement minkowski sum adding boundaries polygons r one one random order maintaining vertical decomposition arrangement polygons added far polygon chosen equal probability step constructed arrangement eciently traverse cells vertices edges faces mark cell belonging minkowski sum contained inside least one polygon r construction arrangement takes randomized expected time oi traversal stage takes oi incremental union algorithm algorithm incrementally construct union polygons r adding polygons one random order maintain planar map representing union polygons added far r 2 r insert edges r map remove redundant edges map operations carried eciently using cgal planar map package give nave bound ok 2 log 2 k running time algorithm worst case higher worstcase running time arrangement algorithm practically however incremental union algorithm works much better problem instances remarks 1 also implemented union algorithm using divideandconquer approach since mostly behaves worse incremental algorithm describe full details given 12 2 planar map package provides full support maintaining vertical decomposition ecient point location map however using simple point location strategies nave walkalongaline often faster practice 14 therefore ran tests reported without maintaining vertical decomposition 3 decomposition algorithms describe algorithms implemented decomposing input polygons convex subpolygons use decompositions without steiner points techniques optimal use heuristics optimize certain objective functions running time decomposition stage signicant search optimal solution use dynamic programming cases running time stage negligible even implemented nave solution therefore mention running time heavy decomposition algorithms use notation section 2 simplicity exposition assume input data minkowski algorithm two simple polygons p q practice use decomposition schemes presented general polygonal sets mostly without changing however always possible example keils optimal minimum convex decomposition algorithm work polygons holes 1 furthermore problem decomposing polygon holes convex subpolygons proven nphard irrespective whether steiner points allowed see 23 algorithms use eg ab algorithm applied general polygons without changes discuss decomposition algorithms following sections follows p polygon n vertices r ex 31 triangulation nave triangulation procedure searches pair vertices segment diagonal namely lies inside polygon adds diagonal splits polygon two subpolygons diagonal triangulates subpolygon recursively procedure stops polygon becomes triangle see figure 5 following decompositions concerned degrees vertices decomposition namely number diagonals incident vertex motivation considering degree comes observation way planar map structures perform practice noted existence high degree vertices makes maintaining maps slower dcel structure used maintaining planar map vertex pointer one incident halfedges traverse halfedges around vertex using adjacency pointers halfedges vertex v incident halfedges nding location new edge around v take od traversal steps avoid overhead search structure vertex planarmaps implementation include structure therefore since build planar map incrementally degree v nal map performed steps vertex trying minimize time vertices either try minimize maximum degree sum squares degrees 2 high degree vertices decomposition result high degree vertices underlying arrangement therefore try avoid apply minimization criteria vertices decomposition optimal triangulation minimizing maximum degree using dynamic programming compute triangulation polygon maximum degree vertex minimal algorithm described 18 runs 3 time optimal triangulation minimizing 2 adapted minimalmaximumdegree algorithm nd triangulation minimum 2 degree vertex v 1 cases apply rst decomposition step connects holes outer boundary use algorithm simple subpolygons practical heuristic guarantee optimal solution figure left right slab decomposition angle bisector ab decomposition kd decomposition polygon see figure 5 illustration adaptation straightforward since 2 global properties decomposition updated constant time step dynamic programming algorithm algorithm entire analysis remain 32 convex decomposition without steiner points greedy convex decomposition nave triangulation algorithm except stops soon polygon ex vertex minimum number convex subpolygons minconvex apply algorithm keil 22 computes decomposition polygon minimum number convex subpolygons without introducing new vertices steiner points running time algorithm 2 n log n algorithm uses dynamic programming see figure 5 result recently improved minimum 2 modied keils algorithm compute decompositions minimize 2 sum squares vertex degree like modication minmax degree triangulation case also modify dynamic programming scheme simply replacing cost function decomposition instead computing number polygons original minconvex decomposition algorithm compute dierent global property namely sum squares degrees compute 2 constant time given values 2 decompositions two sub polygons 33 convex decomposition steiner points slab decomposition given direction e ex vertex polygon extend segment directions e e inside polygon hits polygon boundary result decomposition polygon convex slabs e vertical wellknown vertical decomposition polygon see figure 6 decomposition gives 4approximation optimal convex decomposition partitions polygon 2r subpolygons one needs least dr2e subpolygons obvious advantage decomposition simplicity angle bisector decomposition ab algorithm extend internal angle bisector ex vertex rst hit polygons boundary diagonal already extended another vertex 2 see figure 6 decomposition suggested chazelle dobkin 6 gives 2approximation optimal convex p r ex vertices every decomposition p must include least dr2e since every ex vertex eliminated least one diagonal incident diagonal eliminate 2 ex vertices ab decomposition method extends one diagonal ex vertex p decomposed r subpolygons kd decomposition algorithm inspired kdtree method partition set points plane 8 first divide polygon extending vertical rays inside polygon ex vertex horizontally middle number vertices left vertex v namely smaller xcoordinate vs denoted v l number vertices right v denoted v r look ex vertex v maxfv l minimal divide subpolygons extending horizontal line vertex vertically middle continue dividing subpolygons way alternating horizontal vertical division ex vertices remain see figure 6 method try lower stabbing number subdivision namely maximum number subpolygons subdivision intersected line see discussion section 52 decomposition similar quadtree based approximation algorithms computing minimumlength steiner triangulations 10 4 first round experiments present experimental results applying decompositions described previous section collection input pairs polygons summarize results draw conclusions lead us focus smaller set decomposition methods study next section 41 test platform frame program implementation minkowski sum package based cgal version 20 leda version 40 libraries package works linux g compiler well visual c 60 compiler tests performed winnt workstation 500 mhz pentiumiii machine 128 mb ram 2 necessary compute exactly direction angle bisector suce nd segment eliminate ex vertex extended let v ex vertex let u w previous resp next vertex boundary polygon segment direction divides angle uvw two angles less 180 figure 7 star input input lefthand side consists two starshaped polygons underlying arrangement minkowski sum shown middle running times seconds dierent decomposition methods two star polygons 20 vertices presented graph righthand side figure 8 border input input example lefthand side consists border country star shaped polygon minkowski sum shown middle running times seconds dierent decomposition methods border israel 50 vertices star shaped polygon 15 vertices shown graph righthand side implemented interactive program constructs minkowski sums computes conguration space obstacles solves polygon containment polygon separation prob lems software lets user choose decomposition method union algorithm presents resulting minkowski sum underlying arrangement software available httpwwwmathtauacilflato 42 results ran union algorithms arrangement incrementalunion nine decomposition methods various input sets running times computation minkowski sum four input examples summarized figures 710 obvious experimental results using triangulations causes union figure 9 random polygons input input example lefthand side consists two random looking polygons minkowski sum shown middle running times seconds dierent decomposition methods two random looking polygons vertices shown graph righthand side figure 10 fork input input consists two orthogonal fork polygons minkowski sum shown middle running times seconds dierent decomposition methods two fork polygons 8 teeth shown graph righthand side figure 11 example case using minconvex decomposition union computation time smallest becomes inecient considering decomposition time well graph righthand side shows running times seconds computing minkowski sum two polygons lefthand side representing borders india israel 478 50 vertices respectively note constructing minkowski sum two polygons incremental union algorithm handles 40000 possibly intersecting segments algorithms run much slower left three pairs columns histograms figures 7 10 triangulating polygons create n 1m 1 hexagons r potentially intersections edges polygons get poor results since performance union algorithms strongly depends number vertices arrangement hexagon edges minimizing maximum degree sum squares degrees triangulation slow computation results better union performance compared nave triangulation still much worse simple convexdecomposition techniques cases arrangement algorithm runs much slower incremental union approach removing redundant edges partial sum insertion polygons reduce number intersections new polygons current planar map features fork input exception since complexity union roughly complexity underlying arrangement edges remove incremental algorithm signicantly reduce complexity planar map see figure 10 details comparison arrangement union algorithm incremental union algorithm given 13 although minconvex algorithm almost always fastest computing union constructing optimal decomposition may expensive inputs running minconvex decomposition becomes inecient see example figure 11 minimizing sum squares degrees convex decomposition rarely results decomposition dierent minconvex decomposition rst round experiments helped us lter inecient methods next section focus better decomposition algorithms ie minimum convex slab angle bisector kd study attempt improve performance 5 revisiting ecient algorithms section focus attention algorithms found ecient rst round experiments already mentioned measure eciency combining running times decomposition step together union step present experiment showing minimizing number convex subpolygons decomposition always lead better minkowskisum computation time contrast impression rst round results may give also show section certain instances decision decompose input polygon p may change depending polygon q namely p dierent qs decompose p dierently based properties polygon leads us propose mixed objective function simultaneous optimal decomposition two input polygons present optimization procedure mixed function finally take two eective decomposition algorithms ab kd ecient also simple therefore easy modify try improve adding various heuristics 51 nonoptimality minconvex decompositions minimizing number convex parts p q expensive compute always yield best running time minkowskisum construction cases factors important well consider example knife input data p long triangle j teeth along base q composed horizontal vertical teeth see figure 12 p decomposed parts extending diagonals teeth base apex polygon alternatively decompose subpolygons short diagonals minimal length ab decomposition described section 53 x decomposition q latter decomposition p results considerably faster minkowskisum running time despite subpolygons minkowski sum long subpolygons rst decomposition subpolygons q results many intersections edges polygons r rst decomposition long subpolygons latter subpolygons one long subpolygon rest subpolygons also see similar behavior reallife data computing minkowski sum polygonal representation countries star polygons mostly worked faster using kddecomposition ab technique exception degenerate number vertices 23448 9379 running time sec 717 256 figure 12 knife input input polygons lefthand side two types decompositions p enlarged shown second left top subpolygons short diagonals length minimum convex decomposition subpolygons long diagonals third left minkowski sum p q underlying arrangement using short decomposition p shown righthand side table presents number vertices underlying arrangement running time decompositions p 20 teeth 42 vertices q 34 vertices polygons ie ex vertices share x coordinates kd decomposition always generates least many subpolygons ab decomposition 52 mixed objective functions good decomposition techniques handle p q separately might sucient constitutes good decomposition p depends q measured running time computing minkowski sum knife polygon p figure 12 knife polygon second left random polygon q figure 9 scaled q dierently test xed decomposition q decomposed knife polygon p short length ab decomposition long minimum convex decomposition results presented figure 13 see small qs short decomposition knife p subpolygons performs better q grows long decomposition p fewer subpolygons wins experiments imply careful strategy would simultaneously decompose two input polygons least take consideration properties one polygon decomposing running time arrangement union algorithm oi number edges polygons r overall number intersections edges polygons r see section 2 value k depends complexity convex decompositions p q hence want keep complexity small harder optimize value intuitively want edge r intersect polygons r possible consider standard rigidmotion invariant measure lines plane 33 use lc denote set lines intersecting set c figure 13 minkowski sum knife p 22 vertices random polygon q 40 vertices using arrangement union algorithm lefthand side underlying arrangement sum smallest random polygon righthand side underlying arrangement sum largest random polygon q grows number vertices underlying arrangement dropping 15000 5000 long decomposition p 10000 8000 short decomposition perimeter r ij suggests want minimize total lengths diagonals convex decompositions p q aronov fortune 3 use approach show minimizing length triangulation decrease complexity averagecase rayshooting query want minimize two criteria simultaneously let decomposition one polygon govern decomposition see supporting experimental results segments figure 14 experiments randomly chose set points inside square r 2 connected pairs set random segments segment randomly chose two endpoints measured average number intersections per segment function average length segment get dierent average length segments round chose segment taking longest shortest segment l randomly chosen segments l small integer varying 1 15 average number intersections total number intersections arrangement performed 5 experiments value l 1 15 plotted point graph figure 14 represents experiment values l shown graph used generate sets segments dierent average lengths presented results took typical ratio points segments set r compute arrangement ar results show intersection count per segment grows linearly close linearly average length segment therefore assume expected number intersection segment figure 14 average number intersections per segment function average segment length point graph represent conguration containing 125 randomly chosen points square 0 1000 0 1000 r 2 500 randomly chosen segments connecting pairs points arrangement ar polygons r proportional total length edges ar denote ar intuition behind mixed objective function propose next minimizing ar lead minimizing convex subpolygons p decomposed let p perimeter p similarly dene r ij perimeter r ij minkowski sum p summing j get let p denote perimeter p p sum lengths diagonals p subpolygons q kq subpolygons let pq decomposition p q function cd pq cost function simultaneous convex decomposition p q empirical results showed cost function approximates running time want nd decomposition minimizes cost function let c allow steiner points modify dynamicprogramming algorithm keil 22 compute c 2 r 4 auxiliary cost minimum total length diagonals convex decomposition p convex polygons since number convex subpolygons minimal convex decomposition simple polygon twice number ex vertices values j 2r p 2r q respectively r p resp r q number ex vertices q one compute cp modifying keils algorithm 22 modied algorithm well algorithm computing c described detail appendix since running time procedure high practical neither implemented make serious attempt improve running time regard algorithm rst step towards developing ecient algorithms approximating mixed objective functions allow steiner points open question whether optimal decomposition computed polynomial time currently even constantfactor approximation algorithm diculty arises constantfactor approximation known minimumlength convex decomposition simple polygon steiner points allowed 23 53 improving ab kd methods seems tests general ab kd decomposition algorithms work better heuristics next describe attempts improve algorithms minimal length angle bisector decomposition step handle one ex vertex ex vertex always eliminated two diagonals three diagonals eliminate ex vertex least one removed vertex still eliminated algorithm ex vertex look shortest one two diagonals eliminate see figure 16 minimal length ab decomposition performs better nave ab even though generally creates subpolygons ab decomposition performs well cases concave chains countries borders kd algorithm performs better developed kddecomposition technique aiming minimize stabbing number decomposition input polygons turn discussed expect reduce overall number intersections underlying arrangement ar polygons r method however often generates many convex parts tried combine two algorithms follows angle bisector kd decomposition abkd algorithm check two neighbors vertices ex vertex v v 1 v 2 convex extend bisector v apply kd decomposition algorithm remaining nonconvex polygons method aim lower stabbing number without creating redundant convex polygons sections polygons bounded concave chains tested algorithms polygons dierent number convex vertices vertices concave chains tooth vertices results figure 15 suggest abkd performs best numbers vertices concave chains tooth vertices roughly tooth vertices vertices concave chains ab decomposition performs better next tried decrease number convex subpolygons generated decomposition algorithm instead emanating diagonal ex vertex rst tested whether eliminate two ex vertices one diagonal lets call diagonal 2re ex eliminator methods listed generate number subpolygons generated ab algorithm practically number likely smaller improved angle bisector decomposition ex vertex look 2re ex eliminators cannot nd diagonal continue standard ab algorithm ex angle bisector decomposition method work harder trying nd 2re ex eliminator diagonals step go ex vertices trying nd eliminator 2re ex eliminators continue standard ab algorithm rest ex vertices small side angle bisector decomposition ex ab decomposition looking 2re ex eliminators eliminator decomposes polygon two parts one side among candidate eliminators choose one minimal number ex vertices one sides vertices dierent sides added diagonal cannot connected another diagonal intersect added diagonal choosing diagonal trying block minimal number ex vertices connected eliminated another 2re ex eliminator diagonal experimental results shown figure 16 latter improvements ab decomposition seem largest eect union running time keeping decomposition method simple understand implement note small side ab heuristic results 20 faster union time improved ab ex ab decompositions 50 faster standard angle bisector method use small side ab input set used figure 11 overall running time 376 seconds least three times faster results achieved using decomposition methods 6 conclusions presented general scheme computing minkowski sum polygons implemented union algorithms overcome possible degeneracies using exact number types special handling geometric degeneracies obtained robust exact im figure 15 running times computing chain input using ab kd abkd decomposition figure union running times countries borders input chile 368 vertices lefthand side norway 360 vertices righthand side improved decomposition algorithms plementation could handle kinds polygonal inputs emphasis paper eect decomposition method eciency overall process implemented dozen decomposition algorithms among triangulations optimal decompositions dierent criteria approximations heuristics examined several criteria aect running time minkowskisum algorithm effective optimization minimizing number convex subpolygons thus triangulations widely used theoretical literature practical minkowskisum algorithms found minimizing number subpolygons always sucient since deal two polygonal sets participating algorithm found smarter decompose polygons simultaneously minimizing cost function takes account decomposition input set optimal decompositions function also simpler cost functions like overall number convex sub polygons practically slow cases decomposition step minkowski algorithm took time union step therefore developed heuristics approximate well cost function run much faster exact counterparts allowing steiner points angle bisector decomposition gives 2approximation minimal number convex subpolygons ab decomposition simple practical modications smallside ab decomposition decomposition easy implement fast execute gives excellent results minkowskisum algorithm propose several direction research 1 use presented scheme practical improvement proposed reallife applications motion planning gis examine eect dierent decompositions special types input data 2 improve ab decomposition algorithms give better theoretical approximation better running times 3 tested eciency minkowskisum algorithm dierent convex decomposition methods algorithm still give correct answer covering input polygons convex polygons one improve eciency minkowski sum program using coverings instead decompositions r cgal user manual approximating minimumweight triangulations three dimensions kim generation con optimal convex decompositions limited gaps computational ge ometry algorithms applications approximating minimum weight steiner triangulation robust ecient construction planar minkowski sums robust ecient construction planar minkowski sums design implementation planar maps cgal general framework assembly planning motion space approach design implementation planar arrangements curves cgal triangulating planar graphs minimizing maximum degree computing minkowski sums plane curves computing minkowski sums regular polygons union jordan regions collisionfree translational motion amidst polygonal obstacles decomposing polygon simpler components minimum decompositions polygonal objects time bound convex decomposition simple polygons polygon decomposition robot motion planning polynomialrational approximation minkowski sum boundary curves planning purely translational motion convex object twodimensional space using generalized voronoi diagrams placement compaction nonconvex polygons clothing manufacture computational geometry introduction randomized algo rithms tr union jordan regions collisionfree translational motion amidst polygonal obstacles davenportschinzel sequences geometric applications computational geometry arrangements triangulations polynomialrational approximation minkowski sum boundary curves leda design cgal computational geometry algorithms library design implementation panar maps cgal robot motion planning triangulating planar graphs minimizing maximum degree ctr hayim shaul dan halperin improved construction vertical decompositions threedimensional arrangements proceedings eighteenth annual symposium computational geometry p283292 june 0507 2002 barcelona spain ron wein exact approximate construction offset polygons computeraided design v39 n6 p518527 june 2007 eyal flato efi fogel dan halperin eran leiserowitz exact minkowski sums applications proceedings eighteenth annual symposium computational geometry p273274 june 0507 2002 barcelona spain fogel dan halperin christophe weibel exact maximum complexity minkowski sums convex polyhedra proceedings twentythird annual symposium computational geometry june 0608 2007 gyeongju south korea goce trajcevski peter scheuermann herv brnnimann agns voisard dynamic topological predicates notifications moving objects databases proceedings 6th international conference mobile data management may 0913 2005 ayia napa cyprus goce trajcevski peter scheuermann herve brnnimann missioncritical management mobile sensors guide flock sensors proceeedings 1st international workshop data management sensor networks conjunction vldb 2004 august 3030 2004 toronto canada ron wein jur p van den berg dan halperin visibilityvoronoi complex applications proceedings twentyfirst annual symposium computational geometry june 0608 2005 pisa italy ron wein jur p van den berg dan halperin visibilityvoronoi complex applications computational geometry theory applications v36 n1 p6687 january 2007 vladlen koltun pianos flat rigid motion planning three dimensions proceedings sixteenth annual acmsiam symposium discrete algorithms january 2325 2005 vancouver british columbia goce trajcevski ouri wolfson klaus hinrichs sam chamberlain managing uncertainty moving objects databases acm transactions database systems tods v29 n3 p463507 september 2004 julia bennell xiang song comprehensive robust procedure obtaining nofit polygon using minkowski sums computers operations research v35 n1 p267281 january 2008