open extensible network control network control decomposed six parts switch control resource partitioning virtual network building virtual network control generic services datapath components parts benefit support dynamically loadable code allows users extend customize basic functionality related active networks exept dynamic code exercises control granularity connections flows rather individual packets aspects network control explicitly considered network resources recursively partitionable dynamic code able control partitions virtual networks way sees fit policing partitions may occur varying levels strictness b introduction recent years seen flurry papers new directions network control either opening network control 1 2 allowing packets datapath program network nodes proposed active networks community 3 4 drawing experience areas designed implemented framework enables clients program aspects network control controlled fashion done dynamically injecting code various entities constitute network control system subject access control restraints defined elastic network control implementation called haboob 1 1 term elastic borrowed 5 11 contribution haboob opens interfaces used control manage networks also allows extension modification existing components exercise control components need necessarily reside routingswitching nodes generally case active networks key idea haboob also activating network could placed active networks umbrella location role played active code different active networks see also section 3 haboob attempt bridge gap active networks open control moreover consider problem making networks programmable dynamically loadable code active packets wellestablished research area many solutions proposed although certain issues still need resolved interested next step best exploit programmability purpose approach taken slightly higher level active code classified demultiplexed run appropriate execution environment etc however also intention discuss specific applications services built dynamically loadable code approach taken 6 7 others instead paper presents framework implementation questions addressed aspects network control management distinguished benefit programmability dynamically loadable code noted programming network nodes nothing new switch vendors time reprogramming happens whenever network operators update switch software loading new images makes work like haboob different traditional approaches 1 allows reprogramming much shorter time scale 2 without take controller service 3 access control fine granularity instead allowing system administrator update control software possible specify amount customisation network control client allowed perclient basis although implementation atmbased combined ip atm issues may relevant network technology endtoend resource reservation 12 overview section 2 clarify terminology overall view network control management maintained paper section 3 execution environment dynamically loadable code dis cussed sections 46 discuss code loaded heart various components make network control management section 4 also explained resource partitioning differentiation policies policing interoperability implemented specific control system show traditional active networks implemented haboob section 7 application dynamically loadable code continuous media video server built discussed section 8 performance figures given section 9 related work mentioned section 10 finally section 11 summarise draw conclusions henceforth term active networks used paper refers approaches advocated either ants 3 switchware 4 projects ie packets datapath carry programs specifying deal subsequent data packets using term narrow sense allows us contrast haboob easily 2 terminology model define control architecture set protocols policies algorithms used control partition network traditionally telecommunication networks control architectures monolithic closed recent research aimed opening control management achieved promising results 1 allowing example multiple independent network operators present physical network speedup time new services developed deployed network goals approach call open network control ie network control based public interfaces used party implement new services independent vendorspecific solutions argue current implementations offer limited openness namely interface level paper shows useful also allow dynamic extensions interfaces customisation components implement aspects control management truly open 21 decomposition control identify six less orthogonal levels related open network control levels implemented separate components allowing independent development first level model considers switch control interface interface control software physical switch traditional telecommunication systems interface closed shown tempest 1 open generic switch control interface called ariel allows nonproprietary network control systems ie work switch implements interface ariel sufficiently simple implementable even simplest switches similar interfaces proposed elsewhere eg ieee p1520 standards initiative 8 second level comprises partitioning network resources process called divider divider capable making hard partitions switch partitions may controlled different control architecture partitions known switchlets vci space switchports resources well fact software controlling switchlet seems controlling albeit smaller switch divider exports ariel interface switchlets switchlets allow number different control architectures active simultaneously physical switch third level find netbuilder process responsible combining switchlets create virtual networks virtual networks hard partitions network resources virtual network looks exactly like somewhat smaller physical network fourth level considers control architecture software sets tears connections short actually controls virtual network figure 1 shows three control architectures simultaneously active two switches one controls two switchlets two switches whatever happens switchlets never interfere two switchlets operations control architecture limited partition resources ariel ariel ariel ariel ariel ariel ariel ariel switch divider switch divider manager manager rsvp experimental control architecture pnni atmf pnni atmf manager interface used netbuilder create switchlets switchlet management tasks physical switch figure 1 multiple control architectures single physical network partitioned dividers general sequence events implementation model follows start day control architecture requests virtual network netbuilder netbuilder turn requests corresponding switch dividers create appropriate switchlets switches making sure virtual network sensible eg vpivci ranges neighbouring switchlets overlap etc dividers create switchlets return switchlet ariel interface references netbuilder returns control architecture control architecture subsequently makes calls directly switchlets ariel interfaces set tear connections etc finally control architecture makes call netbuilder destroy virtual network fifth level model concerns generic services processes providing functionality may used wide variety clients example generic services federated trader trader used servers export offers services subsequently imported bound clients another example generic servers traffic server discussed section 415 provides applications flexible access measurements taken switch sixth last level comprises datapath components ie components reside datapath participate network control examples include filters transcoders datapro cessing engines unlike active networks approaches ants 9 switchware 4 treat datapath components separately components normally interference datapath exceptional event data processing needed datapath components instantiated example given section 7 complete decomposition network control management model easily extended necessary future question ask levels benefit dynamically loadable code issues paper argues useful provide dynamic customisability levels 22 lack flexibility open control described projects xbind 10 allows speedup development introduction new services compared traditional control communication systems however far functionality levels model still fixed specific problems resulting rigidness discussed throughout text paper argues useful allow clients extend override functionality levels network control management controlled way furthermore although principle possible build use ideal control architecture every application specific network needs seems unlikely practice control architectures active time reason rather implementing specialpurpose control architecture application writers content using existing control architecture closest functionality application really needs allowing clients customise existing network control solutions allows provide extra functionality 3 loadable code active networks community states instead standardising computation performed every packet standardise computational model 3 distinction made control data although agree statement principle think extended explicitly control plane mentioned haboob treats processing datapath exception rather rule therefore role played customised computation individual data packets every node network relatively minor although allow customised computation shown section 7 applicability considered rare packets probably want switched highest possible speed ie without interference applicationspecific computation control plane however inverse true execution control code direct impact speed data travels control plane ideal location allow applicationspecific code implement new services granularity control dynamic code connection flow rather individual packets make flows except datapath components active networks approach treat every packet datapath program capsule 3 least allow packets carry program code 4 instead propose interfere data path also network technology allows separation control data allows important signalling messages get even face congestion messages may contain code form dlas deal congestion separation standard feature atm requires work technologies like ip eg different queues two classes traffic fortunately quite research currently directed towards achieving eg intserv 11 moreover instead simply allowing clients push code routers consider tasks section 2 words address questions allow clients extend functionality switch interface allow mean allow clients program control architecture repartition resources much freedom give controlling resources eg respect policing permit application specify way interoperability control architecture neighbouring control architectures handled flows others etc show approach also different commonly known intelligent networks ins 12 code active passive eg waiting trigger additionally elastic control operates levels network control rather call state another way saying ins easy implement haboob inverse mapping possible 31 sandbox elastic behaviour starts instantiation execution environment dlas environment called sandbox implemented single object sandbox language implementationindependent interfaces specified apart default language support sandbox functionality added form modules full implementation sandbox comes least one module implements simple uniform framework interaction sufi sufi provides operations allow dlas different sandboxes communicate whilst preserving location transparency either via remote evaluation 13 via traditional remote procedure calls rpcs sufi operations extremely simple example parameters remote evaluations always treated byte sequences sufi relies adaptors marshalling unmarshalling type checking parameters runtime case rpc adaptors could generated interfaces automatically prepended remote evaluation call encapsulates rpc remote evaluation currently done sufi also provides operations dlas ffl exporting dlas interfaces access control dlas operations currently based capabilities ffl security example provides method establishing trust using trusted third party ffl reflection dlas find information sandbox also interfaces operations supports use ffl threading semaphores intradla interaction possible register new modules sandbox result commands contained modules interface made available dlas remote evaluation paradigm quite powerful allows clients extend functionality sandbox works follows client appropriate access rights presents bit code called granule remote sandbox evaluation granules may active passive example active granule may iterate switchs management information base see whether particular connections exist send back result passive granules may simply install function iteration code activated explicitly called dlas thought made granules granules defined fragments code autonomously evaluated remote evaluation granules combined ability destroy granules provides way implement replicating migrating dlas whether state automatically sent part migration beyond scope sufi depends language environment current implementations require programmers explicitly gather state would like use remote sandbox note granules migration also allows disintegration integration dlas speak disintegration dla decomposed number granules migrate different sites spreading dla integration opposite effect 32 implementation sandboxes implemented tcl 2 java work python underway case underlying sandbox language implemented single c class easily incorporated existing code written elastic functionality mind note remote evaluation java granules tcl sandbox bound fail instead sufi demands case different language environments rpc still used interaction according traditional clientserver paradigm quite thought given safety security careful shielding strict access control trust establishment controlled access resources part full sandbox implementation controlled access resources also prevent dlas using much cpu time memory etc enforced using operating system nemesis 14 allows one partition resources operating system current implementation however still uses solaris unix capable strict resource control thorough discussion security issues beyond scope paper 4 elastic control architectures many ways build control architecture may useful certain envi ronments others another way saying control architectures represent boundary client applications network primitives may considered api dealing network api tailored certain class applications even made attempt general solution control architectures noman class control archi tectures noman discussed section 42 first deal aspects specific control architecture called sandman demonstrates power elastic control 41 sandman sandman distributed control architecture built top corba compliant dpe figure 2 shows components make basic sandman hierarchical trading mechanism allows clients find control architecture services start day sandman obtains virtual network netbuilder form interface references switchlets performs control operations connection setup teardown etc calls ariel interfaces switchlets important control decisions made connection manager support 2 parameter supplied constructor decides whether use safetcl instead standard tcl modules call admission control cac routing etc switch fabric components responsible actual connection setup across individual switches local host managers represent local interface control architecture clients make requests host manager tries reserve local resources successful forwards request connection manager connection successfully established host manager calls back client providing information established connection eg vpivci pair atm implementation shall see sandman strong support advance reservations endpoint cac router manager local host connection local host manager endpoint switch fabric component switch fabric component manager figure 2 components control architecture 411 basic operations default configuration sandman offers commonly used operations expected sufficient large class applications 1 unicast connection simplest probably common operation connection source one sinks particular time interval particular characteristics eg peak rate 1000 cellss clients submits request control architecture call admission control cac module accepts request client guaranteed connection set time interval traditional immediate connections simply leave interval case defaults 1i 2 multisource multisink connections also small number complicated types connections connection timeshared multiple sources may multiple sinks possibly overlapping time interval details see 15 3 information gathering rather wideranging class operations discover certain things state network topology routes available bandwidth certain switch port etc 4 loading applicationspecific code allowing users applications load code sandman allows exploit applicationspecific knowledge low level discuss loadable code section 413 5 reservation arbitrary sets resources reservation arbitrary sets resources partitioning repartitioning existing sets described section 414 first two operations allow reservation advance guarantees availability required resources time future given probably also commonly used operations expected sufficient majority applications call primary operations operations mentioned called secondary operations 412 call admission control admission control sandman based conviction prohibitively difficult accurately characterise behaviour unknown sources means statistical multiplexing cannot derived careful analysis supplied traffic descriptors instead base cac decision new connections supplied peak rate alleviate potentially overconservative reservation mechanism extend measurementbased effective bandwidth estimation based 16 purpose introduce traffic servers traffic servers take continuous measurements traffic ports switch compute effective bandwidth connections belonging sandmans virtual network effective bandwidth subsequently used cac decisions words unknown sources cac based peak rate alone connections become active estimation made much bandwidth really need used cac decisions traffic servers may vary switch switch plugged fly conceivable traffic servers plugged certain switches indeed certain switch ports others case default conservative cac used detailed explanation sandmans cac found 15 413 dynamic code loading dynamic code loading supported instantiation sandboxes control architecture clients load dlas dlas access primary secondary operations observe really alter functionality sandman dlas simply act normal sandman clients moved sandmans address space potentially gains improvement performance next demonstrate functionality easily extended using principle important make distinction applications resource manipulation behaviour resource reservation behaviour resource manipulation behaviour defined applications actions operations resources implicit assumption resources available use type behaviour includes allocating resources connections freeing connections resources etc resource manipulation behaviour applications generally dont worry availability resources resource reservation behaviour hand concerns solely ensuring certain resources available certain times general care resources used whether used 3 due space limitations paper focuses dlas loaded specify mainly clients resource manipulation however sandman also gives applications complete freedom specifying reservation behaviour form dlas example possible specify every day 9am 5pm network reserved capacity equal ft bps ft may arbitrary number seconds remaining year 2000 note dlas give rise issues scheduling example resource reservation dla evaluated time new reservation made resources associated practice therefore one probably want restrict amount resources eg cpu time dla use expressiveness language type dlas 414 recursively partitioning networks primary operations expected sufficiently expressive large number applications applications however specific needs order restrict propose give applications number resources use please ie without connections imposed purpose sandman includes possibility make possibly advance reservations called netlets ie small virtual networks larger virtual 3 note many basic operations set endtoend connections incorporate reservation manipulation behaviour network netlets consist share arbitrary number resources within encompassing virtual network sandman exports lowlevel primitives control individual resources netlet example possible create arbitrary connections across single switch assuming resources connection part netlet quite different traditional control primitives communication systems allow clients set connections endpoints call lowlevel primitives sandmans tertiary operations tertiary operations currently accessible dlas possible associate dla netlet means dlas control netlets resources level granularity chooses implement applicationspecific functionality efficient manner communication takes place address space rather across network way dlas also implement new functions eg create new type connection subsequently exports onwards external clients appropriate access rights call functions part normal control archi tectures repertoire one things distinguish netlets normal virtual networks parentchild virtual networks discussed genesis 17 interfaces dlas illustrated figure 3 load dla tertiary operations primary operations figure 3 dlas sandman netlets created recursively words possible create netlets netlets enables applications repartition network resources almost unrestricted manner fact encompassing virtual network section 2 really netlet socalled level0 netlet repartitioning network resources extends idea switchlets control architecture additionally netlets present new opportunities specialising policies virtual networks examples consider policing interoperability 415 applicationspecific policing netlets must policed misbehaviour one level0 netlet n affect connections level0 netlets given policing however decide police netlet level police loosely example trust applications netlet behave reason even connections netlet misbehave problems limited n propagate outside world netlets therefore allow us differentiate policing policy network given hard inband policing level0 networks decide police specific higherlevel netlets loosely eg periodically taking measurements switches see exceeded allocated bandwidths certain netlets fact looseness may vary netlet netlet 4 loose policing modified traffic servers section 412 extending sandbox client traffic server sandman able load dlas sandbox determines sort statistics client interested example possible load code specifies 1 certain netlet checked every second see connections stay within capacity allocated netlet 2 control architecture informed case example loose posteriori policing elastic traffic servers allow clients program exactly sort information receive measured traffic words elasticity makes much generalpurpose simple cac tools introduced section 412 traffic servers examples elastic generic services 416 interoperability interoperability control architectures extremely important environment multiple control architectures expected coexist existing solutions simply map primitives one control architecture nearest match neighbouring control architecture example suppose two endpoints b neighbouring control architectures caa cab need communicate caa supports advance reservations cab doesnt probability advance reservation request caa mapped onto direct reservation cab availability resources time needed ensured call simple hopbyhop solution two problems hopbyhop interoperability first problem concerns functionality degradation domain boundaries serious problem two featurerich control architectures communicate via third control architecture less sophisticated api following example advance reservations caa cab support advance reservations intermediate control architecture cac located caa cab doesnt advance reservation request initiated caa translated immediate reservation cac never upgraded advance reservation words functionality degrades domain boundaries crossed solution involves establishment 4 words netlets lightweight virtual networks sense relation higherlevel netlet virtual network similar thread process explicit interdomain signalling channels caa cab using simple hopbyhop solution interdomain signalling channel used carry higherlevel control messages featurerich control architectures control messages simply forwarded cac tunnelling complete description interdomain signalling channels given 18 second problem concerns rigidness existing interoperability solutions example assumed advance reservation always translated immediate reservation cac may right solution cases necessarily best solution cases rather making immediate reservation emulate advance reservation pinning resources long time application may prefer prereserve cac simply hope best ie try reserve resources needed accept consequences fails would good solution application knows bandwidth problem cab requested time interval point applications know mapping best overcome problem fixed primitive mapping sandman allows applications load specific mapping policies overrule default mapping observe without risks example must guard application overriding default operation mapping applicationspecific mapping may well faulty thereby affecting interoperability applications netlets useful restrict applicationspecific mapping specific netlet netlets connections outside netlet affected new policies moreover dlas employed extend functionality control architecture creating innovative connection types help netlets functions exported called external clients possible specify interoperability particular new connection types applicationspecific manners would hard without netlets 42 noman control architectures sandman example homegrown control architecture useful environments things resource repartitioning netlets dlas advance reservations required maybe many others difficult solve control architecture problem general way without referring context noman attempt finding general solution therefore aim designing ultimate control architecture functionality satisfy fact noman offers control architecture functionality instead providing clients means implement functionality noman consists sandbox extended network control module known netcontrol module module provides dlas simple api allows build expand control destroy virtual networks top noman dla loaded contacts netbuilder creates virtual network consisting set switchlets dla obtains handles interface references switchlets returned result handles subsequently used invoke ariel operations switchlets eg set tear connections dla done virtual network calls operation netcontrol module remove words noman really control architecture merely component allows rapid development new nomanbased control architectures dynamically loadable control architectures called noman control architectures using noman clients able upload favourite control architecture functionality dial control architecture even modify add fly attractive least two reasons first possible generate libraries various control architecture components eg routing connection setup cac components components picked added noman mixandmatch fashion order create control architecture choice related way components bound together xbind 2 slightly general components customised replaced fly second allows vertical integration example possible load application top set noman components make application manage resources application control architecture tasks integrated address space resulting considerable performance improvement underlying noman components could shared number applications could belong exclusively single application order prevent something similar context operating systems called crosstalk shared components 14 5 elastic dividers switch interfaces switch dividers task partition resources switch simplest case means partition switchlet obtains vpivci space possibly simple resources well interacts outside world via two types interface 1 management interface provides operations creation destruction switchlets 2 ariel interfaces one per switchlet perform control operations therefore also two places instantiation sandboxes would useful first management component new switchlets created second ariel instantiation ie switchlet 51 dlas ariel sandbox placing sandbox switchlet allows one load applicationspecific code close possible switch could switch using new module known sandbox ariel module code able call switch control operation available traditional control architecture difference call need transmitted network divider runs switch could even simple function call address space active switchlet dlas called micro control achitectures micro control architectures either controlled external applications extreme case contain application code latter case termed applicationspecific micro control achitecture micro control achitectures controlled external applications easily extend ariels functionality implementing example things batch connection setup teardown external application simply calls new operation appropriate parameters micro control achitecture sets tears appropriate connections furthermore ariel sandbox supports override operation allows safely replace modify extend standard ariel operations functionality enables one change behaviour switchlet trivial example consider dla overrides connection setup teardown operation empty operation effectively removes operations switchlets repertoire control architecture controlling switchlet still perform ariel operations eg gather port connection statistics allowed create delete connections interesting example implemented deals vpivci space virtualisation atm network recall switchlets constitute partitioning among things vpivci space means caa obtains different vpivci range cab however wellknown certain control architectures depend specific vpivci values signalling uni signalling example uses vci 5 vpi 0 signalling messages 19 ip switching 20 fore spans 21 depend vpi 0 vci 15 problems arise one wants start control architecture relies particular vpivci value v v already assigned another switchlet solved easily using override operation ariel sandbox operations may overridden map v onto one switchlets vpivci values v transparent control architecture sends usual control messages vpivci value v fact possible completely virtualise vpivci space words allow control architectures use entire spectrum vpivci values supported switch even install dla switchlet maps virtual vpivci values real vpivci values switchlets address space needed haboob allows real vcis pinned edge network control architectures span multiple switches means virtualisa tion dla needs installed responsibility netbuilder discussed section 6 knows allocated resources netlets therefore able install automatically appropriate mappings switchlets network creation time 52 dlas switchlet management component need elastic runtimes process creating switchlets may less obvious one simple use allows network administrators install simple extensions default network functionality automatic instantiation appropriate dla ariel sandbox whenever switchlet created dla extend override ariel operations described previous section example management dla may triggered time create switchlet operation called ie overridden method create switchlets examine request depending certain conditions eg identity requester may create new switchlet ariel dla overrides operations create delete connections empty operation ensures switchlets control architecture allowed anything network except create delete connections interesting use management dlas implements switchlet aggregation whereby creation switchlet really creates whole cluster switchlets presented control architecture single large switchlet aggregate switchlets used improve scalability due space limitations discuss aggregate switchlets 6 elastic network builders netbuilders responsible combining switchlets virtual networks level0 netlets essentially shared servers little functionality specific particular control architecture netbuilders interesting comes adding elasticity question arises decides virtual networks created decided implementers netbuilder static netbuilder fixed functionalityvirtual networks built associating switchlets implementationspecific manner paper argues unnecessarily restrictive although beyond scope paper discuss netbuilder much detail briefly outline issues show use dlas lead improvements compared implementations use static code example reason control architectures able push code netbuilder code restricted using operations exported netbuilder anyway words possible load active passive dlas netbuilder besides sufi offers exact api offered control architectures may optimise performance especially since netbuilders may run close even switch well dlas turn able build new services combining existing netbuilder services exporting interface references services however ability allow dlas recombine existing netbuilder functionality discussed interesting question allowed add remove modify netbuilders default functionality seems reasonable give least system administrators powers may want override certain operations make include extensive logging disable certain functions even preclude use certain switches certain operations system administrators also allowed grant privileges network users way system administrator allowed grant root password machines certain trusted users new functionality thus created system administrators subsequently used nonprivileged dlas present appropriate capability way netbuilders functionality changed extended fly safe manner haboob netbuilder allows clients load code shared sandbox code able use basic operations offered netbuilder well modified extended operations implemented system administrators dlas provided right capability presented simple example netbuilder extension one automatically pushes dlas switchlets created behalf divider way made netbuilder push virtualisation dlas switchlets vpivci spaces switchlets completely virtualised discussed section 51 netbuilder makes sure virtual vci mapped appropriate real vci taking account neighbouring switchlets need mapping 7 active networks recognise value inband computation advocated active network community certain cases example 7 shows example protocol booster extend functionality protocol fly adding forward error correction fec datapath found one links slow unreliable booster affects particular link similarly 6 shows active bridge two ethernet segments allows upgrading new versions network software minimal disruption deal problems haboob answer simple necessary build simple active network node fly consider example protocol booster whenever decision made particular link unreliable needs fec simple dispatch dla reroutes existing connection control entity near link control entity adds fec returns code data path fec addition done dla running sandbox control entity protocol booster mechanism illustrated figure 4 note differ way protocol boosters 7 fact built simple active node example elastic datapath component remove fec lossy add fec figure 4 active protocol booster haboob 8 distributed video server demonstration haboob distributed video server dvs built top sandman aim dvs provide virtual big disk lowend users enough storage space store example featurelength films local disks dvs entirely implemented dynamically loadable code able use disks network users local disk storing long video files recording mode video data automatically striped various disks using coarsegrained striping according userdefined loadbalancing policy means appropriate connections set appropriate times disk particular segment stored playout mode dvs finds segments make video sets connections corresponding disks appropriate fashion ensure smooth playback sink aware simply receives single vpivci pair sources merged resource efficient manner reusing much existing connection possible dvs described detail 22 9 performance space limitations able discuss results great detail indication performance measured connection setup teardown times configuration endpoints communication reside sun ultrasparcs control architecture divider netbuilder run offswitch also ultrasparcs shown table setup across single fore asx200 switch using sandman took little 75 ms 5 teardown took average 26 ms compares favourably atmf uni signalling reported 23 xbind open control reported 10 see section 10 taken rough comparison configuration load switches various scenarios almost certainly different significant effect performance replacing sandman noman control architecture adds approximately 1 ms setup teardown time figures good prove offswitch control using dlas need result poor performance switch software location ms unknown xbindgsmp offswitch dec an2 uni qport offswitch 21 asx200wg uni onswitch 20 asx1000 sandmangsmp offswitch 15 asx200 sandmansnmp offswitch 75 table 1 comparison switch setup times related work several solutions make networks programmable proposed last years briefly discuss active networks open control intelligent networks active networks packetswitched networks packet may carry executable code 3 packets called capsules ie little programs embedded data evaluated transient execution environment allowing network nodes process data applicationspecific way execution packets data path strongly related speed packets travel network note operation administration maintenance oam cells atm offer similar albeit much restricted functionality oam cell effectively carries one finite number predefined programs 5 gsmp server used asx1000 rather buggy experimental implementation explains much slower snmp server asx200 addition control processor i960 much slower pentium ii used asx200 switchware project 4 university pennsylvania similar require packet capsule although packets may carry code switchware designed threelevel architecture first level comprises active packets second level concerns socalled active extensions programs dynamically loaded network offer functions used active packets third layer infrastructure enforces rules dynamic code loading takes care resource allocation formal methods used prove security properties dynamically loadable programs 5 solution network management using delegated agents proposed agents dynamically loadable code dispatched using socalled delegation protocol executing elastic extensible server helps prevent explosion management traffic network central site delegating management also makes control loop managing code managed device smaller decreasing probability failure times problems management needed delegated agents approach quite influential example another project investigates use agents network systems management insert 24 java agents used implement managed objects similar snmp cmip instantiated dynamically second approach making networks programmable known open control early implementations control xbind 10 tempest 1 haboob continuation xbind constitutes framework creation deployment management multimedia services atm networks endtoend qos guarantees services created interconnecting binding abstract representations model local states network resources including links switches purpose abstractions stored organised collection interfaces called binding interface base bib closely related netlets recent genesis project 17 netlets introduced primitive form 15 like research presented genesis enables recursive partitioning network resources partitions network nodes called routelets created parent control program controlled independent child control program however genesis model much complex netlets serious hierarchy nested routelets seems reflected datapath routelet consist myriad components services part comprises routelets transport module resides datapath transport module includes virtual input port forwarding engine processes data virtual output port incoming packet classified example belonging specific higherlevel routelet demultiplexed routelets transport module accordingly arrives routelets virtual input port processed forwarding engine sent virtual output port however sent next node yet first arrives virtual input port parent routelet process repeated arrives root routlets input port processed last time finally forwarded next node network rather inefficient data touched potentially many times example multiplexing many layers contrast flat model netlets netlets form simple partitions lowerlevel netlets controlled arbitrary ways eg setting connections one endpoint another data simply flows connections touched multiplexing happens lowest possible level intelligent networks 25 allow introduction new services associating signalling endpoints basic calls separated inbased calls example dialling 0 800 number trigger temporary suspension callprocessing initiate series transactions service switching point ssp service control point scp essentially realtime database lookup database eg 0800 number tries find corresponding service logic ie code executed code sends back instructions ssp process call bulk current transactions consist translating number dialled caller another number conclusions discussed haboob represents direction network control called elastic control combines elements active networks open control like open control intelligent networks maintains separation control data attempts open traditionally closed communication systems like active networks ease new code added existing network control loading execution environment known sandbox also tries standardise computational model defines sandbox sufi provide dlas uniform interface communication code loading security aspects haboob considers various aspects network control independently enables extensibility customisability acknowledgements thanks ian leslie rebecca isaacs richard mortier cambridge computer laboratory useful comments earlier versions paper r open service support atm realizing foundation programmability atm networks binding architecture towards active network architecture switchware active network implementation delegated agents network management active bridging protocol boosters applying programmability network infrastructures ieee 1520 standards initiative programmable network interfaces ants toolkit building dynamically deploying network protocols programming telecommunication networks specification guaranteed quality service rfc 2212 intelligent network overview implementing remote evaluation design implementation operating system support distributed multimedia applications atm admission control based measurements reservations measurementbased connection admission control genesis kernel virtual network operating system spawning network architectures applicationspecific policies beyond domain boundaries atm usernetwork interface specification version 40 general switch management protocol specificationversion 11 spans uni simple protocol atm signalling release 30 building distributed video server using advanced atm network support per formance benchmarking atm networks mobile agent based management insert project recommendation m3010 principals telecommunications management network tr ctr simon crosby sean rooney rebecca isaacs herbert bos perspective atm lost control acm sigcomm computer communication review v32 n5 november 2002