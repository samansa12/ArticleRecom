simple termination contextsensitive rewriting simple termination often indirect basis existing automatic techniques proving termination rulebased programs eg knuthbendix polynomial recursive path orderings also dpsimple termination etc interesting framework programs contextsensitive rewriting csr provides bridge abstract world general rewriting applied setting declarative specification programming languages eg obj cafeobj elan maude languages certain replacement restrictions specified programs socalled strategy annotations may significantly improve computational properties programs especially regarding termination behaviour contextsensitive rewriting techniques particular methods proving termination csr proved useful analyzing properties programs entails need provide implementable methods proving termination csr simplification orderings corresponding notion simple termination wellknown term rewriting nice properties natural candidates attempt paper introduce investigate corresponding notion simple termination csr prove notion actually provides unifying framework proving termination csr using standard simplification orderings via existing transformational methods also covers csrpo recent proposal extends recursive path ordering rpo wellknown simplification ordering contextsensitive terms also introduce polynomial orderings dealing simple termination csr finally also give criteria modularity simple termination case disjoint unions well constructorsharing rewrite systems b introduction wellfounded orderings ie orderings allowing infinite decreasing sequence provide suitable basis proving termination number programming languages computational systems instance term rewriting systems trss proof termination achieved able find monotone stable wellfounded ordering terms ie reduction ordering l r every rule l r rewrite system 10 40 practice want implement tool proving termination trs r need make problem decidable wellknown termination trss undecidable problem even trss containing one rule 7 hence provide effective approaches yield decidable termination criteria certain classes systems simplification orderings monotone stable orderings satisfying following subterm property term every proper subterm 8 termination trs r proved using simplification ordering say r simply terminating although simple termination also undecidable see 33 covers usual automati zable orderings proving termination rewriting eg recursive path orderings rpo 9 knuthbendix orderings kbo 23 polynomial orderings poly 26 see 37 survey simplification orderings moreover simple termination interesting properties regarding modularity contrast general case simple termination modular disjoint constructorsharing classes hierarchical unions trss 36 obj example sorts nat lnat cons nat lnat lnat strat 1 op nat lnat strat 1 0 first nat lnat lnat strat 1 2 0 vars figure 1 strategy annotations obj contextsensitive rewriting csr 28 restriction rewriting forbids reductions selected arguments functions replacement kary symbol f signature f discriminates symbol signature argument positions replacements allowed 28 way termination behavior rewriting computations improved eg pruning infinite rewrite sequences eager programming languages obj2 14 obj3 20 cafeobj 15 maude 6 possible specify socalled strategy annotations controlling execution pro grams instance obj3 program figure 1 borrowed 2 specifies explicit strategy annotation 1 list constructor cons disables replacements second argument lazy lists see appendix c5 20 collect f positive indices appearing strategy annotation symbol f given obj program 1 use csr provide framework analyzing ensuring essential computational properties termination correctness completeness regarding usual semantics headnormalization normalization functional evaluation infinitary normalization programs using strategy annotations see 1 2 29 30 31 particular termination innermost contextsensitive rewriting recently related termination languages 29 30 instance prove termination obj3 program figure 1 using techniques proving termination csr see examples 5 7 termination csr applications studied number papers 5 13 16 19 22 27 32 38 39 papers eg 13 16 19 27 38 39 termination csr studied transformational setting namely transforming given contextsensitive rewrite system csrs ie pair r consisting trs r replacement map ordinary trs termination latter implies termination former csrs unfortunately transformations typically use new symbols rules introduce loss structure intuition due encoding contextsensitive control original system new elements unnecessarily complicate proofs termination make standard techniques easing proofs eg modular approaches infeasible recently work devoted direct analysis termination related properties csr regarding definition suitable 1 20 obj mean obj2 obj3 cafeobj maude orderings proving termination csr 5 concerning modularity termination related properties 22 moreover abstract properties termination csr remain almost unexplored notable exception zantemas work 39 deed lines work appear promising suggest investigate direct methods achieving simpler proofs termination csr remainder paper first introduce necessary background csr introduce discuss simple termination csr section 3 section 4 show cases transformational approaches yield simple termination original csrs simply terminating therefore existing transformations proving termination csr also used proving simple termination csrss section 5 deal two direct approaches proving termination csr show csrpotermination 5 fact yields simple termina tion also cover simple termination proofs via polynomial orderings finally modularity results concerning simple termination presented section 6 2 motivating example work consider following example 1 consider following onerule trs contained famous example toyama well known trs simply terminating however forbidding reductions first second argument ie defining obtain simply terminating behavior garding csr easily proved using polynomial ordering csr see example 10 preliminaries 21 basics subsequently assume general familiarity basic theory term rewriting cf eg 3 12 given set denotes set subsets given binary relation r set denote transitive closure r reflexive transitive closure r say r terminating iff infinite sequence 1 r 2 r 3 throughout paper x denotes countable set variables f denotes signature ie set function symbols ff fixed arity given mapping ar n set terms built f said linear multiple occurrences single variable terms viewed labelled trees usual way positions represented chains positive natural numbers used address subterms denote empty chain l set positions term p ost positions nonvariable symbols denoted p os f positions variables subterm position p denoted tj p ts p term subterm position replaced symbol labelling root denoted roott rewrite rule ordered pair l r written l r l r 2 arl lefthand side lhs rule l r righthand side rhs trs pair set rewrite rules lr denotes set 2 sake readability proofs moved appendix lhss r instance sl lhs l rule redex set redex positions p os r trs r leftlinear l 2 lr l linear term given trss trs rewrites position p written p tj substitution trs terminating terminating 22 contextsensitive rewriting given signature f mapping replacement map f map f r determines considered symbols set f maps sake simplicity apply replacement map 2 f symbols f 2 f 0 signature f 0 assuming f inclusion ordering p n extends ordering v means considers less positions 0 reduction also say restrictive 0 least upper bound lub given 0 replacement map specifies argument positions reduced symbol f accordingly set replacing positions p os 2 set positions replacing redexes p os contextsensitive rewrite system csrs pair r r trs replacement map contextsensitive rewriting csr 28 contract replacing redexes rewrites written r terminating terminating 3 simple termination csr zantema provided algebraic characterization termination csr 39 standard rewriting proves termination csr fully captured socalled reduction orderings ie wellfounded stable orderings terminating reduction ordering compatible rules r ie l r 2r l r 39 proposition 1 also shows reduction ordering defined means wellfounded monotone f algebras ordered f algebra triple af set f set mappings f k f 2 f strict ordering given f 2 f say monotone ab 2 b f monotone f 2 f f monotone f algebra wellfounded wellfounded given valuation mapping evaluation mapping inductively defined f reduction ordering terms every wellfounded monotone f algebra af 39 proposition 2 use notions following given signature f consider trs embf simply terminating r embf terminating regarding csr obvious extension notion csrs r simply terminating r embf terminating appropriate example 2 consider trs r constant csrs r clearly terminating however r embf embf single rule cx x ca formally contrast trss termination r implies termination r st st proper subterm dering property hold csrss ie termination r general imply termination r st problem projections embf make arguments reducible reducible using replacement map therefore define emb propose following definition 1 csrs r simply terminating r obviously emb simple termination definition 1 standard notion simple termination trss coincide one would expect furthermore simply terminating trs r viewed csrs r arbitrary also simply terminating since emb subset embf finally note v 0 emb included emb 0 simple termination r termination r case simplification orderings algebraic indeed originating counterpart simple termination simplification ordering monotonic stable ordering terms additionally satisfies following subterm property 2 wellknown simplification orderings wellfounded terms finite signatures thus simplification ordering reduction ordering hence suitable trying prove termination trs r comparing left righthand sides rules following natural generalization simplification orderings immediately arises definition 2 let f signature 2 f monotonic stable ordering simplification ordering unfortunately sharp contrast standard case simplification orderings wellfounded general example 3 consider signature consisting constant unary symbol c choose c binary relation consisting pairs fc n ac n1 j n 0g monotone strict ordering subterm property however admits infinite sequence ca c n nevertheless definition 2 characterizes notion simple termination definition 1 following obvious sense theorem 1 csrs r simply terminating wellfounded simplification ordering every rule l r 2 r l r proof r simply terminating csrs r terminating reduction ordering clearly satisfies subterm property due presence corresponding rules emb simplification ordering obviously hand assume wellfounded simplification ordering l r every rule l r 2 r since simplification f hence reduction ordering compatible rules left right hence r simply terminating proving simple termination csr termination csrss r usually proved demonstrating termination transformed trs r q obtained r using transformation 3 q 13 16 17 27 38 39 transformation q 1 correct regarding simple termination simple termination r termination r trs r replacement map 2 r 2 complete regarding simple termination simple termination r implies simple termination r q trs r replacement map 2 r simplest trivial correct transformation proving termination csrss identity r r terminating every replacement map interested proving simple termination csrss using existing transformations according goal mind review main nontrivial correct transformations proving termination csr regarding suitability proving simple termination csr 41 contractive transformation let f signature 2 f replacement map contractive transformation 27 nonreplacing arguments symbols f removed new contracted signature f obtained possibly reducing arity symbols function drops nonreplacing immediate subterms term 2 constructs contracted term joining also transformed replacing arguments corresponding operator f l csrs r contracted r tool muterm 10 implements transformations ing definition difficult see r r emb l thus following theorem 2 let r csrs r l simply terminating r simply terminating proof r l simply terminating r r l terminating hence r emb ing ie r simply terminating example 4 consider following csrs used obtain firstnterms1 first n terms series approximates kary symbol f use rpo based precedence 4 terms f recipsqr sqr f dbl f first f hence r simply terminating contractive transformation works well conserva tive trss ie satisfying v ar r v ar l every rule r r 27 otherwise extra variables appear rule thus would become nonterminating let ar r v ar lg cocm r contains replacement maps 2 cm r make r conservative 32 theorem 3 32 let r leftlinear trs 2 cocm r r terminating r l terminating hence use contractive transformation fully characterize simple termination csr restricted cases theorem 4 let leftlinear trs 2 cocm r r simply terminating r l simply terminating 4 precedence f quasiordering ie reflexive transitive relation symbols signature f proof part theorem 2 part assume r simply terminating r emb terminating theorem 3 r emb l terminating since r emb l ing hence r l simply terminating 42 zantemas transformation zantemas transformation marks nonreplacing arguments function symbols disregarding positions within term 39 given z consists two parts first part results r replacing every function symbol f occurring left righthand side f 0 fresh function symbol arity f included f 0 occurs nonreplacing argument function symbol directly new function symbols used block reductions position addition variable x occurs nonreplacing position lhs l rewrite rule l r occurrences x r replaced activatex activate new unary function symbol used activate blocked function symbols second part r z consists rewrite rules needed blocking unblocking function symbols every f 0 2 f 0 together rule activatex x note since emb emb z r r z thus theorem 5 let r csrs r z simply terminating r simply terminating example 5 following csrs kary symbol f corresponds obj3 program figure 5 use instead cons nil respectively irst 0 xactivatez rom 0 sx rom irst 0 xy irst simply terminating use rpo based precedence sel f activate f first f first f froms gives sel usual lexicographic status hence r simply terminating 13 ferreira ribeiro propose variant zantemas transformation proved strictly powerful zan temas one see 19 r fr two parts first part results first part r z marking function symbols except activate occur already marked sym bol therefore function symbols nonreplacing subterms marked second part consists rule activatex x plus rules f f every f 2 f f 0 appears first part r fr f f rules f f kary symbols f f 0 appear first part fr however giesl middeldorp recently shown rules necessary obtaining correct transformation 19 since also r r emb fr transformation similar zantemas one regarding simple termination ie following theorem 6 let r csrs r fr simply terminating r simply terminating 43 giesl middeldorps transformations giesl middeldorp introduced transformation explicitly marks replacing positions term using new symbol active given trs trs r consists following rules following theorem 7 let r csrs r gm simply terminating r simply terminating 16 giesl middeldorp suggest slightly different presentation r mgm previous transformation presentation symbol active used anymore however proved transformations equivalent regarding simple termination gm simply terminating r mgm 32 thus theorem 7 also holds r mgm giesl middeldorp also introduced transformation r c complete ie every terminating trs transformed terminating given trs replacement map trs r consists following rules see 16 detailed expla f constants c 2 f theorem 8 let r csrs r c simply terminating r simply terminating conclude section noticing toyamas csrs example 1 cannot proved simply terminating using previous transformations 0 note r l even z r fr case coincides r z simply terminating contains nonsimply terminating trs f gm simply terminating gm gm gm finally r c simply terminating either therefore examples show general theorems 2 5 6 7 8 cannot used direction words means certain cases simple termination cannot proved considered transformational techniques ie incomplete regarding simple termination csr tably transformation c complete proving termination csr becomes incomplete proving simple termination csr want use simplification orderings proving termination r c following section consider different class methods based applying transformations csrss contrast methods able directly address termination csrss without transforming 5 direct approaches simpletermination csr 51 contextsensitive recursive path ordering csrpo 5 recursive path ordering rpo wellknown technique automatically proving simple termination trss extended deal termination csrss thus natural question arises csrpoterminating csrss simply terminat ing section positively answer question definition csrpo akin rpo first recall definition rpo given precedence f set function symbols union wellfounded ordering f compatible status function stat f defined recursively follows 1 rpo 2 3 4 rpo union rpo syntactic equality first idea comes mind extend rpo contextsensitive rewriting csrpo marking symbols blocked positions consider smaller active ones therefore terms blocked positions become smaller example 6 consider rule together f1g order prove fromx greater xfromsx take account replacement restriction comparing fromx xfromsx marked version set f however marking symbols nonreplacing positions unnecessarily weaken resulting ordering thus addition usual precedence f symbols marking map denoted defines every symbol every blocked position set symbols marked also used f denote set marked symbols corresponding f given symbol f f f provides subset symbols f marked ie f f marking maps intended mark blocked arguments ie seems reasonable also technically necessary see definition 6 way mark necessary symbols blocked positions however simply apply rpo terms marking symbols blocked positions resulting ordering stable substitutions difficultinteresting point csrpo treatment variables since variables blocked positions somehow smaller variables active positions taken account rpo see 5 thorough discussion issue achieved appropriately marking variables terms compared using csrpo x denote set labeled variables corresponding x variables x labeled subsets f instance x f f ghg ambiguously use variables x denote variables labeled empty set using ordering marking map tells us whether mark top symbol term every time go argument symbol thus marking map apply whole term top symbol arguments recursive calls definition csrpo therefore term access arguments using mts represents result marking top symbol arguments conditional marking top symbols defined ng note said marked symbols appear top term ground term contains variable remarked treatment variables crucial definition csrpo need ensure csrpo stable ordering order solve problem given term provide set labeled variables considered smaller equal without risk losing stability substitutions note label variables symbols marked case applying substitution ensure labeled variable x w set safe wrt stability labeled variables term need x occur sure substitution mtsxw smaller ss therefore assuming x occurs important point happens function symbols heading ss due analyze function symbols harmless head sym bols cases symbols included label w x additionally function symbols appear label reach occurrence x safe finally importantly symbols g proved safe head symbol recursively using subterm containing x greater equal g latter case multiset status g g marking definition 3 5 let nonvariable term x w labeled variable x w 2 stables x 2 set sa f esx variable x st x 2v ars label v defined smallest subset f containing 1 2 union sa f emts ng b g 2f mg mg argg c g 2 f f f g mg argg give definition contextsensitive recursive path ordering first give definition equality relation induced equality function symbols use definition 4 given two terms follows x enlarge equality relation considering permutations arguments symbols multiset status definition 5 csrpo 5 let st 2 1 2 mts ng 3 4 5 lex respectively multiset lexicographic extension wrt precedence f marking map satisfy conditions ensure appropriate properties proving termination csr definition 6 5 let f precedence replacement map marking map f valid marking pair 1 2 f f f 8 f 2 f 3 obj exampletr sorts nat lnat ops ops ops nil nil lnat cons nat lnat lnat strat 1 op nat lnat strat 1 0 ops sel sel nat lnat nat strat 1 2 0 ops first first nat lnat lnat strat 1 2 0 vars figure 2 transformed obj program valid marking maps used csrpo reduction ordering used proving termination csrss 5 csrs r csrpoterminating precedence f f valid marking map f l r l r 2 r example 7 consider csrs r example 5 termination r also proved using csrpo use marking precedence first f sel f f fs fromg use lexicographic status first sel multiset status symbols see example 7 5 example 8 using rewriting restrictions may cause normal forms input expressions unreachable restricted com putation instance evaluation using program figure 1 yields obj example 5 use version 20 obj3 interpreter available httpwwwkindsoftwarecomproductsopensource reduce example firsts0from0 rewrites 2 result lnat cons0first0froms0 note cons0first0froms0 normal form however normal form cannot obtained using obj3 interpreter solved using program transformation techniques instance applying program transformation obj programs obj programs 2 obtain program figure 2 contrast program figure 1 new program used fully evaluate expressions see 2 moreover also able prove termination new program using csrpo 4 use marking precedence f f romconss quote f 0s quote f cons nil quote f quote fcons f cons fcons use lexicographic status symbols prove csrpotermination csrs implies simple termination csrs theorem 9 let r csrs r csrpo terminating simply terminating proof r csrpoterminating exists precedence f valid marking map l r every rule l r r need prove l r also holds every rule l r emb note x 2 stable f f 2 sa f e f since sa f ex therefore sa f e f f f 2 sa f e f means instance obj3 program figure 2 viewed csrs simply terminating hand difficult see termination csrs example 1 cannot proved using csrpo would need prove tuple habxi containing constant symbols ab greater tuple hxxxi contains variables according definition csrpo possible summarize done far say notion simple termination csr plays almost role regarding csr simple termination ordinary rewriting proved simply terminating trss r q prove simple termination r existing transformations q also proved csrpoterminating csrss simply terminat ing furthermore given example simply terminating csrs cannot proved using currently developed automatic techniques next consider still another method direct termination proofs csrss 52 polynomial orderings monomial k variables z function f z k z defined k integer 6 0 nonnegative integers number called coefficient monomial r monomial called constant polynomial k variables z sum finitely many monomials k variables z given signature f 2 f let nf n f algebra f 2 f f n 2 f n polynomial ar f variables satisfying 1 f n definedness 2 f n monotone nf n wellfounded monotone algebra corresponding reduction ordering denoted poly said polynomial ordering f algebra called polynomial interpretation f fact given polynomial interpretation nf n corresponding reduction ordering poly equivalently defined follows 2 poly 8x ie need make explicit evaluation mapping anymore positive aspect polynomial orderings regarding reduction orderings ease proofs monotonicity unrestricted rewriting monotonicity polynomial interpretations normally ensured requiring coeficients polynomials associated function symbols positive see proposition 10 40 3 section 53 course want would actually mean using reduction ordering thus making useless proving termination csr inter esting cases ie trs terminating even though simple way ensure monotonicity polynomial orderings constraining shape coeficients monomials still use following result fx means partial derivative function f wrt ith argument z polynomial z ith argument fx 0 proof let xy 2 z x polynomials viewed functions real numbers obviously differentiable arguments intermediate value theorem real number x z value f x coincides hypothesis positive number x hence conclusion theorem 10 provide full characterization monotony instance polynomial obviously monotone positive result used ensure full monotony ie monotony polynomials standard conditions aforementioned ones hold instance polynomial contains negative coefficients mentioned allowed usual polynomial interpretations monotonicity f ensured using theorem 10 since n use polynomial orderings proving termination csrss example 9 consider csrs r example 1 polynomial interpretation given f n b n 1 obviously f n xyz 2 n xyz 2 n note also f n monotone since f n follows theorem 10 r terminating note polynomial interpretation used example 9 monotonic standard case instance f n f n 010 1 0 ie f n monotone first argument similarly f n n monotone second argument either unrestricted case polynomial orderings wellfounded simplification orderings additionally require theorem 11 let f signature containing least constant nf n polynomial interpretation f 2 f poly wellfounded simplification ordering following immediate corollary corollary 1 let r csrs poly polynomial simplification ordering l poly r rule l r r r simply terminating example 10 continuing example 9 note f n example 9 verifies f n xyz z z xyz 2 n hence r simply terminating 6 modularity simple termination csrss shall investigate extent notion simple termination csrss introduced behaves modular way ie whether simple termination two given csrss implies simple termination union kind modularity analysis general termination csrss recently initiated 22 promising first results let us recall notions results 22 need subsequently simplicity rest paper assume considered csrss finite results also hold arbitrary infinite systems definition 7 say property p csrss modular disjoint unions whenever two disjoint csrss property p disjoint union also 6 notion modularity generalized straightforward way general classes combinations csrss 6 reverse implication usually holds simplicity dont include definition definition 8 rule l r csrs r nonduplicating every x 2 v arl multiset replacing occurrences x r contained multiset replacing occurrences x l duplicating otherwise r nonduplicating rules duplicating otherwise rule l r said collapsing r variable noncollapsing otherwise csrs collapsing collapsing rule noncollapsing otherwise note csrss without replacement restrictions collaps ingness nonduplication yield corresponding wellknown notions trss course order sensibly combine two csrss one require basic compatibility condition regarding respective replacement restrictions definition 9 two csrss r said compatible replacement restrictions shared function symbols ie r union r two compatible csrss r defined componentwise ie disjoint csrss trivially compatible theorem 12 22 let r two disjoint terminating csrss let r union following hold r terminates r non collapsing r terminates r non duplicating r terminates one systems noncollapsing nonduplicating definition 10 trs r said terminating free projections fpterminating short disjoint union r trs fggfgxy xgxy yg terminating r said fpterminating disjoint union r csrs fggfgxy f12g terminating theorem 13 22 let r two disjoint terminating csrss union r nonterminating one systems fpterminating system collapsing already shown trss abstract powerful structure result lot direct indirect consequences corollaries mention definition 11 csrs nondeterministically collapsing term reduces two distinct variables finite number contextsensitive rewrite steps theorem 14 nondeterministically collapsing terminating csrs fpterminating theorem 15 22 termination modular nondeterministically collapsing disjoint csrss consequently also get next result theorem 16 fptermination modular disjoint csrss case trss wellknown simple termination modular disjoint unions 25 also shown via trs version general theorem 13 cf 21 par ticular note trss equivalence simply terminating iff obvious f contains function symbols arity least 2 r embf nondeterministically collapsing additionally r embf terminating r embf fpterminating fact even case trs functions symbols arity 0 1 simple termination fptermination easily shown eg minimal counterexample proof 7 preparations ready tackle modularity simple termination csrss theorem 17 let r csrs least one f 2f simple termination r implies fptermination r proof simple termination r means termination r assumption f 2 f j f j 2 thus f rewrites x x j using j means r nondeterministically collapsing hence theorem 14 r emb consequently also r fp terminating combining theorem 17 theorem 13 get following modularity result simple termination theorem 18 let r two disjoint csrss let r disjoint union moreover suppose exists f 2 f j f j 2 simply terminating r simply terminating interestingly proof result via theorem need technical assumption exists f 2 f currently know whether statement theorem 17 also holds without condition yes theorem would immediately generalize yield general modularity simple termination csrss note condition satisfied proof corresponding statement theorem 17 cannot work trs case since may arbitrarily complicated terms finally let us consider case nondisjoint unions csrss 61 extension constructorsharing case finally let us consider case nondisjoint unions csrss 7 note case terms f simple shape essentially strings definition 12 csrs r r set defined function symbols set constructors csrss f 1 denoting respective signatures sets constructors defined function symbols r said constructor sharing 1 f set shared constructors said shared constructor lifting rootr 2 c shared constructor lifting constructor lifting rule said shared symbol lifting rootr variable shared constructor r said shared lifting collapsing constructor lifting rule r layer preserving shared symbol lifting definition 13 let f rf csrs f 2f say f fully replacing f ng n arity f theorem 19 22 extends 21 theorem 34 r two constructor sharing compatible terminating csrss shared constructors fully replacing union r nonterminating one systems fpterminating system shared symbol lifting ie collapsing constructor lifting 8 proof sketch proof idea analogous 21 one considers minimal counterexample ie nonterminating derivation union minimal number alternating layers using sophisticated abstracting transfromation counterexample translated counterexample uses one two systems plus disjoint system two rules form serve extracting relevant information former signature need note construction work properly need assumption shared constructors fully replacing without assumption statement theorem hold general example 11 consider csrss shared constructor fully replacing csrss obviously terminating also fpterminating union due cycle lengthzeros disjoint unions theorem 19 many results derived especially regarding simple termination following theorem 20 let r constructorsharing csrss shared constructors fully replacing let r union 8 trss result holds finite csrss also finitely branching ones contrast disjoint union case doesnt hold infinitely branching sys tems cf 35 counterexample suppose exists simply terminating r simply terminating note also symmetric asymmetric results easily obtained theorem 19 also theorem 20 anaol ogously case disjoint unions csrss trss simple though somewhat artificial application example following variant example 1 example 12 two csrss f3g systems compat ible constructorsharing shared constructors trivially fully replacing simply terminating difficult show instance consider polynomial interpretation example 9 together g n hence combined system also simply terminating theorem 20 note union includes full version toyamas trs nonterminating absence replacement restrictions proved simply terminating regarding csr selected replacement map 7 conclusion introduced definition simple termination csr analyzed suitability unifying notion similar simple termination rewriting represents class orderings wellsuited automatization proven existing transformations proving termination csr also used proving simple termination csrss contrast restricted forms termination like eg innermost termination csr see 18 22 also shown csrpotermination actually method proving simple termination csrss analyzed use polynomial orderings tool analyzing termination csrss analysis notion simple termination appears quite natural one contextsensitive setting contrast contextfree case simplification orderings finite signatures automatically wellfounded kruskals theorem contextsensitive case termination needs explicitly established orderings used termination proofs possible lines also mentioned finally also obtained first modularity results concerning simple termination csrss results quite encouraging expect similar results obtained also extended general combinations csrss eg composable 34 certain hierarchical 24 11 systems acknowledgements thank anonymous referees helpful remarks r improving ondemand strategy annotations correct complete pos itive strategy annotations obj rewriting personal communication recursive path orderings contextsensitive principles maude simulation turing machines regular rewrite rule note simplification orderings orderings term rewriting systems termination rewriting hierarchical termination principles obj2 overview cafe specification environment algebraic approach creating transformation techniques contextsensitive rewrite systems transforming contextsensitive rewrite systems innermost termination contextsensitive rewriting transformation techniques contextsensitive rewrite systems introducing obj generalized sufficient conditions modular termination rewriting modular termination contextsensitive rewriting simple word problems universal alge bra modular proofs completeness hierarchical term rewriting systems modularity simple termination term rewriting systems shared constructors proving term rewriting systems noetherian termination contextsensitive rewriting rewriting termination ondemand rewriting termination obj programs termination rewriting strategy annotations termination canonical contextsensitive rewriting simple termination difficult modular properties composable term rewriting systems modularity termination term rewriting systems advanced topics term rewriting simplification orderings history results contextsensitive rewriting terese tr termination rewriting modularity simple termination term rewriting systems shared constructors simulation turing machines regular rewrite rule modularity termination term rewriting systems modular proofs completeness hierarchical term rewriting systems rewriting principles obj2 advanced topics term rewriting modular termination contextsensitive rewriting contextsensitive rewriting strategies termination rewriting strategy annotations improving ondemand strategy annotations termination contextsensitive rewriting rewriting contextsensitive acrewriting transforming contextsensitive rewrite systems termination canonical contextsensitive rewriting termination contextsensitive rewriting recursive path orderings contextsensitive hierachical termination termination ondemand rewriting termination obj programs overview cafe specification environmentan algebraic approach creating verifying maintaining formal specifications networks ctr mirthalina fernndez relaxing monotonicity innermost termination information processing letters v93 n3 p117123 14 february 2005 beatriz alarcn ral gutirrez jos iborra salvador lucas proving termination contextsensitive rewriting muterm electronic notes theoretical computer science entcs 188 p105115 july 2007 nao hirokawa aart middeldorp tyrolean termination tool techniques features information computation v205 n4 p474511 april 2007 jrgen giesl aart middeldorp transformation techniques contextsensitive rewrite systems journal functional programming v14 n4 p379427 july 2004 salvador lucas proving termination contextsensitive rewriting transformation information computation v204 n12 p17821846 december 2006