virtual network transport protocols myrinet article describes protocol generalpurpose cluster communication system supports multiprogramming virtual networks direct protected network access reliable message delivery using message timeouts retransmissions powerful returntosend error model applications automatic network mapping protocols use simple lowcost mechanisms exploit properties interconnect without limiting flexibility usability robustness implemented protocols active message communication system runs network 100 sun ultrasparc workstations interconnected 40 myrinet switches progression microbenchmarks demonstrate good performance 42 microsecond roundtrip times 31 mbs nodetonode bandwidth well scalability heavy load graceful performance degradation presence high contention b introduction microsecond switch latencies gigabytes per second scalable bandwidth low transmission error rates cluster interconnection networks myrinet bcf95 provide substantially performance conventional lo research supported part arpa grant f3060295 c0014 california state micro program nsf infrastructure grant cda8722788 nsf graduate research fellow ship authors contacted cal area networks properties stand marked contrast network environments traditional network internetwork protocols designed exploiting fea tures previous efforts fast communication systems produced number portable communication interfaces implementations exam ple generic active messages gam clm95 illinois fast messages fm pkc97 plc95 real world computing partnershipss pm thi96 bip pt97 provide fast communication lay ers constraining specializing communication layers environment example supporting singleprogram multipledata parallel programs assuming perfect reliable network systems achieved highperformance oftentimes par massively parallel processors bringing body work mainstream requires generalpurpose robust communication protocols used date communication interfaces support client server parallel distributed applications multithreaded multiprogrammed environ ment implementations use process scheduling optimization technique rather requirement correctness timeshared system implementations provide protection direct application access network resources critical highperformance fi nally protocols enable systems provide reliable message delivery automatically handle infrequent noncatastrophic network errors support automatic network management tasks topology acquisition route distribution section 2 presents core set requirements cluster protocol states specific assump tions section 3 presents overview system architecture briefly describes four layers communication system section 4 examine issues design decisions pro tocols realized system network interface card nic firmware section 5 analyses performance results several microbenchmarks finish related work conclusions requirements cluster protocol must support multiprogram ming direct access network applica tions protection errant programs sys tem reliable message delivery respect buffer overruns well dropped corrupted packets mechanisms automatically discovering networks topology distributing valid routes multiprogramming essential clusters become personal supercomputers communication system must provide protection applications isolate respective traf fic performance requires direct network access bypassing operating system common case operations system resilient transient network errors faults programmers ought bothered transient problems retransmission mechanisms solve catastrophic problems require handling higher layers finally system support automatic network management including periodic discovery networks topology distribution mutually deadlockfree routes pairs functioning network interfaces protocol architecture makes number assumptions interconnect system first assumes interconnect network latencies order microsecond link bandwidth gigabit relatively error free second interconnect host interfaces homogeneous problem interest communication within single cluster network cluster internet system homogeneity eliminates number issues handling different network maximum transmission units packet formats probing network operating parameters eg tcp slowstart guarantees network fabric protocols used network interfaces identical doesnt preclude use heterogeneous hosts endpoints hosts different endianness lastly maximum number nodes attached cluster interconnect limited enables trading memory resources proportional number network interfaces nics exchange reduced computational costs critical code paths system limit maximum number nics 256 though would straightforward change compiletime constants scale thousand 3 architecture system four layers 1 active message applications programming interface 2 virtual network system abstracts network interfaces communication resources 3 firmware executing embedded processor network interface 4 processor interconnection hardware sections presents brief overview layer highlights important properties relevant nictonic transport protocols described thoroughly section 4 31 amii api active messages 20 amii mc96 provides applications interface communications system allows arbitrary number applications create multiple communications endpoints used send receive messages using procedural interface active messages primitives three message types supported short messages containing 4 8 word payloads medium messages carrying minimum 256 bytes bulk messages providing large memorytomemory transfers medium bulk message data sent anywhere senders address space communication layer provides pageable storage receiving medium messages upon receiving medium message active message handler passed pointer storage operate directly data bulk message data deposited perendpoint virtual memory regions regions located anywhere receivers address space receivers identify regions base address length applications set clear event masks control whether semaphores associated endpoints posted whenever message arrives empty receive queue endpoint setting mask waiting semaphore multithreaded applications option processing messages eventdriven way isolating message traffic unrelated applications done using perendpoint message tags specified application outgoing message contains message tag destination endpoint messages delivered tag message figure 1 data paths sending receiving short medium bulk active mes sages short messages transferred using programmed io directly endpoints nic mem ory medium messages sent received using perendpoint medium message staging areas pageable kernel heap mapped pro cesss address space medium message singlecopy operation sending host zerocopy operation receiving host bulk memory transfers currently built using medium messages singlecopy operations sender singlecopy operations receiver matches tag destination endpoint amii api provides integrated returntosender error model applicationlevel errors nonmatching tags catastrophic network failures losing connectivity remote endpoints message cannot delivered destination returned sender applications register perendpoint error handlers process undeliverable messages implement recovery procedures desired system returns message application simply retransmitting message highly unlikely succeed 32 virtual networks virtual networks collections endpoints mutual addressability requisite tags necessary communication amii provides abstract view endpoints virtualized network interfaces virtual networks view collections endpoints virtualized interconnects onetoone correspondence amii endpoints virtual network endpoints figure 2 processornic node virtual networks layer provides direct network access via endpoints protection unrelated applications ondemand binding endpoints physical communication resources figure 32 illustrates idea applications create one communications endpoints using api functions call virtual network segment driver create endpoint address space seg ments pages network interface memory provide backing store active endpoints whereas host memory acts backing store less active endpoints onnic endpoint cache endpoints mapped processs address space directly accessed application network interface thus bypassing operating system endpoint management uses standard virtual memory mechanisms leverage interprocess protection enforced processes running system applications may create endpoints nic accommodate local memory providing applications exhibit bursty communication behavior small fraction endpoints may active time virtual network system takes advantage virtualizing physical interface resources specifically myrinet system uses nic memory cache active endpoints pages endpoints nic ondemand much like virtual memory systems memory pages frames analogous pagefaults endpoint faults occur either application writes message nonresident endpoint message arrives nonresident endpoint endpoint faults also occur whenever messages sent received reference host memory resources medium message staging area arbitrary userspecified virtual memory regions sending messages endpoint virtual memory segment receiving messages pinned current dma mappings 33 nic firmware firmware implements protocol provides reliable unduplicated message delivery nics protocols must address four core issues scheduling outgoing traffic set resident endpoints nic nic flow control mechanisms policies timer management schedule perform packet retransmissions detecting recovering errors details nic protocols given section 4 protocols implemented firmware determine structure endpoint endpoint four message queues request send reply send request receive reply receive queue entry holds active message short messages transferred directly resident endpoints memory using programming io medium bulk messages use programming io active message dma associated bulk data transfer figure 1 illustrates data flows short medium bulk messages interface medium messages require one copy sender zero copies receiver bulk messages currently implemented using medium messages require one copy sender one copy receiver code zerocopy bulk transfers exists sufficiently tested258146node3 switch switch id135node51id246165025node34166135node91 switch id136switch id136 id246id0246id146884036id146switchid136 switch id146switch switch figure 3 berkeley network topology discovered mapper network mapping daemons periodically explore discover networks current topology case fat treelike network 40 myrinet switches three subclusters currently connected using two switches using 11 cables 34 hardware system hardware consists 100 sun ultrasparc workstations interconnected myrinet figure highspeed local area network wormhole routing linklevel backpressure network uses 40 8port crossbar switches 160 mbs fullduplex links host contains lanai 41 network interface card sbus nic contains 375 mhz embedded processor 256 kb sram single host sbus dma engine independent network send receive dma engines show requirements section 2 context amii virtual networks myrinet influence design implementation nictonic protocol key issues endpoint scheduling flow control timer manage ment reliable message delivery error handling make contributions protocol 41 endpoint scheduling system supports direct network access multiprogramming nic new task endpoint scheduling ie sending messages current set cached endpoints situation different traditional protocol stacks tcpip messages applications pass layers protocol processing multiplexing ever reaching network interface message streams different applications aggregated nic services shared outbound inbound message queues endpoint scheduling policies choose long service one endpoint endpoint service next simple roundrobin algorithm gives endpoint equal minimal service time fair starvation free endpoints always messages waiting send algorithm might satisfactory however application communication bursty ltw93 spending equal time resident endpoint optimal better strategies exist minimize use critical nic resources examining empty queues endpoint scheduling policy must balance optimizing throughput responsiveness particular endpoint aggregate throughput response time current algorithm uses weighted roundrobin policy focuses resources active endpoints empty endpoints skipped endpoint pending messages nic makes attempts send parameter k holds even nic empties particular endpoint loiters host enqueue additional messages loitering also allows firmware cache state packet headers constants sending messages endpoint lowering perpacket overheads larger ks result better performance bursts large k degrades system responsiveness multiple active endpoints empirically chosen k 8 42 flow control system flow control mechanism two requirements one hand allow adequate number unacknowledged messages flight order fill communication pipe sender receiver limit number outstanding messages manage receiver buffering make buffer overruns infrequent steady state sender never wait acknowledgment order send data assuming destination process scheduled attentive network given bandwidth b round trip time rtt requires allowing least b delta rtt bytes outstanding data system addresses flow control three lev els 1 userlevel active message credits endpoints 2 niclevel stopandwait flow control multiple independent logical channels 3 network backpressure userlevel credits rely upon requestreply nature amii allowing endpoint k user outstanding requests waiting responses choosing k user large enough endpointtoendpoint communication proceeds maximum rate prevent receive buffer overflow endpoint request receive queues large enough accommodate several senders transmitting full speed senders small number k user outstanding requests setting request receive queue small multiple k user feasible additional mechanisms discussed shortly engage overruns occur protocol 8 kb packets bandwidth delay product 31mbs bytes less two 8kb messages short packets bandwidth delay product messages provide slack receiver optimize arithmetic computations k user rounded next power 2 4 nic must provide least number logical channels accommodate number outstanding messages discussed next 421 channel management tables two simple data structures manage nictonic flow control information data structures also record timer management error detection information physical route source destination nic overlayed multiple independent logical channels row send channel control table figure 4 holds states channels particular destination interface intersecting column holds state particular logical channel implicit bound number outstanding messages enables implementations trade storage reduced arithmetic address computation two simple easilyaddressable data structures nics delta channels entries sufficient linklevel backpressure ensures heavy load example one communi cation network drop packets creditbased flow control amii library throttles individual senders cannot prevent high con figure 4 nic channel tables nic channel tables provide easyaccess nic flow control timer management error detection informa tion nic uses stopandwait flow control channel manages communication state information channel table entries send table left entry includes timer management information packet timestamp pointer unacknowledged packet number retries receiver sequencing information next sequence number use whether entry use receive table right entry contains sequencing information incoming packets expected sequence number tention common receiver also relying linklevel backpressure endtoend flow control remains effective overheads remain small trades network utilization load allowing packets block consume link switch resources simplicity section 5 shows hybrid scheme performs well 422 receiver buffering fast communication layers prevent buffer overruns dedicating enough receiver buffer space accommodate messages potentially flight p processors credits k outstanding mes sages single endpoint per host requires systems one endpoint made allocating k delta p storage prac tical however large scale systems large number communication endpoints requires k storage e number endpoints virtual network serious scaling storage utilization problems makes preallocation approaches impractical storage grows proportionally virtualized resources physical ones furthermore negligible packet retransmission costs alternative approaches involving modest preallocated buffers packet retransmission become practical provide request response receive queues 16 entries 4 delta k user endpoint sufficient absorb load four senders transmitting maximum rates buffer overflow occurs protocol drops packets nacks senders system automatically retransmits messages important consequence design decision virtual network segment driver use single virtual memory page per endpoint simplifying memory management activities 43 timer management guarantee reliable message delivery communication system must perform timeout retransmission packets timer management algorithm determines packet retransmissions events scheduled deleted retransmission performed sending packet schedules timer event receiving acknowledgment deletes event send table entries periodically scanned packets retransmit perpacket timer management costs must small requires costs scheduling retransmission event send operation deleting retransmission event acknowledgment reception negligible depending granularity timeout quantum frequency timeout events different tradeoffs exist shift costs perpacket operations retransmissions example use larger timer quantum low perpacket costs price expensive retransmissions section 5 shows hybrid scheme zero amortized cost workloads packets retransmitted transport protocol implements timeout retry positive acknowledgments interface firmware provides efficient acknowledgements minimizes expensive sbus transactions currently perform obvious piggybacking acks nacks active message reply messages channel management tables store timeout transmission state sending packet involves reading sequence number appropriate entry send table indexed destination nic free channel saving pointer packet potential retransmissions recording time packet sent receiving nic looks sequencing information incoming packet appropriate receive table entry indexed sending nics id channel message sent sequencing information matches receiver sends acknowledgment sender upon receipt sender updates sequencing information frees channel use new packet using simple easilyaddressable data structures nics delta channels en tries scheduling deleting packet retransmission events take constant time retransmissions though nic perform nics delta work maintaining unacknowledged packet counts destination nic reduces cost signifi cantly sending packet increments counter packets destination nic receiving associated acknowledgement decrements counter counts reduce retransmission overheads proportional total number network interfaces 44 handling system addresses data transmission errors resource available problems three levels nic tonic transport protocols amii api return tosender error model userlevel network management daemons transport protocols building blocks higherlevel api error models network management daemons depend transport protocols handle transient network errors detecting dropping erroneous packet relying upon timeouts retransmissions recovery 255 retransmis sion acks nacks received protocol declares message undeliverable returns amii layer reliable message delivery timeoutretransmission mechanisms require sending interfaces copy unacknowledged message anyway amii library invokes perendpoint error handler function applications may take appropriate recovery actions 441 transient errors positive acknowledgement timeout retransmission ensures delivery packets valid routes data packets dropped corrupted protocol control messages well ensure data control packets never delivered destination despite transmissions tagged sequence numbers timestamps maximum 2 k outstanding messages detecting duplicates requires sequence numbers alternatingbit protocol independent logical channels 442 unreachable endpoints nic determines destination endpoints unreachable relying upon timeout retransmission mechanisms 255 retries ie several seconds nic receives acks nacks receiver protocol deems destination endpoint unreachable happens protocols marks sequence number channel uninitialized returns original message back userlevel via endpoints reply receive queue application handles undeliverable message would active message userspecifiable handler function route destination nic exist endpoints trivially unreachable 443 network management system uses privileged mapper daemons one interface node system probe discover current network topol ogy given current topology daemons elect leader derives distributes set mutually deadlockfree routes nics system mcs97 discovering topology sourcerouted cutthrough network anonymous switches like myrinet requires use network probe packets may potentially deadlock messages network hence mapping myrinets induce deadlock produce truncated corrupted packets received interfaces result switch hardware detecting breaking deadlocks even hardware working perfectly transport protocols perspective mapper daemons perform two specialized functions 1 sending receiving probe packets applicationspecified sourcebased routes discover links switches hosts 2 reading writing entries nic routing tables special functions performed using privileged endpoints available privileged processes 444 virtual networks issues virtual networks introduce new issues reliable unduplicated message delivery endpoints may nonresident dma resources set medium message staging areas packet may need retried unavailable sources endpoints unloaded host memory nic must cope late duplicate acknowledgments arriving nonresident endpoints transport protocol acknowledgments operate upon send receive table entries endpoints protocols must ensure channel table state remains consistent loading unloading endpoints packets successfully written destination endpoints return positive acknowledgments acks senders receiving ack frees corresponding send channel resources nacks notify senders transmission errors unavailable receiver resources receiving nack causes sender note received feedback receiver timeout retransmission mechanisms resend packet simplicity design uses single retransmission mechanism packets chosen use sequencing timeoutretry based multiple independent logical channels acks nacks manage send receive channel table state physical resources consequently time endpoint unloaded nic care must taken flush acks nacks potentially lingering network send queue remote nic requiring outstanding packets positively af firmatively acknowledged unloading starting point endpoints outstanding messages immediately unloaded endpoints outstanding messages wait outstanding messages acked packets positively acknowledged endpoint un loaded guaranteed transmitted packets successfully written destination endpoints fifo message delivery know duplicate acks may retransmitted immediately follow use channel sequence number first ack new packet sent channel use new sequence number acknowledged ack new sequence number seen requiring messages receive acks thus flushes previous duplicate acks may exist network receiving nics send queue however destination node experiences load endpoint unloaded outstanding messages may packets receive acks goal delaying endpoint unload operation ensure old acks nacks corrupt channel state towards goal receiving latest nack reflects result latest retransmission good receiving ack requiring nack recent one necessary avoid cases nack received endpoint unloaded ack original message successfully written arrives determining sender received latest nack done using 32bit timestamp packet retransmissions carries senders timestamp nacks echo timestamp back sender endpoint improved scheme requires packet either receive ack latest nack unloaded 5 measured performance section presents series benchmarks analyzes system first microbenchmarks characterize system terms logp communication model lead comparison previous generation active message system understanding costs added functionality next benchmarks examine performance hosts varying degrees destination endpoint contention concludes examination system performance number active virtual networks increases programs run berkeley network workstations system standalone environ ment topology acquisition routing daemons disabled eliminating background communication activity normally present 51 logp characterization logp communications model uses four parameters characterize performance communication layers parameterization enables comparison different communication layers consistent framework microbenchmark facilities clm95 derive model parameters l latency overhead gap g number processors p given overhead two components sending overhead receiving overhead r send receive overheads measure time spent processor issuing handling messages gap measures permessage time ratelimiting stage communicationsystem latency accumulates time accounted overheads logp parameter comparison time microseconds gam 190 400 580 550 2100 amii 409 428 1598 1260 4194 os g l rtt515253545 components gap latency rtt time microseconds protection 105 112 221 reliability 533 112 228 baseline 960 1036 3745 gap latency rtt figure 5 performance characterization using logp model top graph shows logp parameters measured older current active message systems hardware platform figure 5 shows logp characterization ii new generalpurpose active message system virtual networks error model com parison also shows parameters gam earlier active message system spmd parallel programs lacks virtual networks error model features found new system amii figure show contributions protection checks mechanisms reliable message delivery well retransmission add fundamental cost communication amii roundtrip time 42 microseconds compared gam roundtrip time 21 mi croseconds 21 microseconds spent direction amii 41 spent finding writing message descriptor endpoint 41 spent reading messages endpoint ceiver two network interfaces spend total 126 microseconds injecting ejecting message network careful conditional compilation inclusion individual protocol components network interface firmware allows us measure performance impact additional costs appear gap attributable nictonic transport protocols beyond baseline 960 microseconds gap reliability including costs positively acknowledging message contributes 53 additional microseconds protection checks required generalpurpose multiprogramming environment add another 1 microsecond gap timer retransmission mechanisms add unmeasurable small cost coarse granularity network reliable time scales necessary taking measure ments beyond baseline 104 microseconds latency reliability contributes 11 additional microseconds protection checks add another 11 microseconds timer retransmission protocol mechanisms add measurable latency comparison shows gap specifically network interface firmware limits amii short message rates whereas sending receiving overhead limits gam short message rates although cases microbenchmark used small active messages 4word payloads amii send overhead larger additional information capability stored network interface across sbus amii gap also larger firmware constructs private header message untouchable application sent using separate dma operation requires additional firmware instructions memory accesses 52 contentionfree performance figure 6 shows endpointtoendpoint bandwidth two machines using cachecoherent streaming sbus dma transfers nic dma messages network local memory storeandforward delay introduced large messages moving data host memory interface although current network interface firmware pipeline bulk data transfers eliminate de lay streaming transfers nevertheless reach 31 mbs 4kb messages consistent dma transfers reach 23 mbs 8kb messages gam pipelining increased bulk transfer performance maximum 38 mbs difference consistent streaming dma transfers rests whether hardware buffer sbus message size bytes bandwidth mbs consistent dma streaming dma figure sending bandwidth function message size bytes consistent hosttonic dma operations across sbus higher performance small transfers streaming transfers obtain higher performance data transfer times swamp cost flushing hardware stream buffer sbus bridge chip adaptor kept consistent automatically memory transaction manually via system call upon completion transfer perm avg bw agg bw avg rtt us neighbor 3097 mbs 285 gbs 475 us bisection 565 mbs 052 gbs 508 us table 1 table shows aggregate bandwidth average round trip times 92 nodes different message permutations cshift permuta tion node sends requests right neighbor replies requests received left neigh bor neighbor adjacent nodes perform pairwise exchanges bisection pairs nodes separated network bisection perform pairwise exchanges bandwidth measurements used medium messages whereas rtt measurements used 4word active messages table presents three permutations resulting aggregate sending bandwidths average perhost sending bandwidths permessage roundtrip times run 92 machines column shows bandwidth scales system reaches nontrivial size first two permutations circular shift neighbor exchange communication patterns substantial network locality expected cases perform well bandwidths near peaks permessage roundtrip times within factor 2 op timal bisection exchange pattern shows large number machines saturate bisection bandwidth refer figure 3 see network topology small number bisection cables additional switches network cables ordered increase bisection 53 single virtual network next three figures show performance communication subsystem presence con tention specifically hosts send common destination host traffic destined common host also destined end point reasons become clear host common destination referred server hosts referred clients100003000050000700001 7 13 19 25 31 37 43 senders message rate msgssec aggregate msg rate avg sender rate figure 7 active message rates destination endpoint contention within single virtual network figure 7 shows aggregate message rate server top line number clients sending 4word requests receiving 4word response messages increases additionally shows average perclient message rate bottom line number clients increases 92 figure 8 presents similar results showing sustained bandwidth bulk transfers server number clients sending 1kb messages receiving 4word replies average perclient bandwidth gracefully fairly degrades conjecture fluctuation servers aggregate message rates bandwidths arises acknowledgements reply messages encountering congestion namely requests also destined server variation persender rates senders bandwidth mbs aggregate bw avg sender bw figure 8 delivered bandwidths destination endpoint contention within single virtual network200600100014001 5 9 13 17 senders average round time figure 9 roundtrip times destination endpoint contention within single virtual network bandwidths small observable printed page figure 9 shows average perclient roundtrip time number clients grows hosts slope line exactly gap measured logp microbenchmarks 54 multiple virtual networks extend previous benchmark stress virtual networks first increasing number server endpoints maximum 7 cached interface memory continuing incrementally add endpoints increasingly overcommit resources thus rather clients sharing common destination end point client endpoint dedicated server endpoint n clients server process n different endpoints one paired different client resulting n different virtual networks contains client messages within virtual network guarantees messages virtual networks make forward number clients message rate msgss server client figure 10 aggregate server perclient message rates small numbers virtual networks figure shows average server message rate perclient message rates error bars five minute interval number clients continuously making requests server varies one seven range network interfaces seven endpoint frames accommodate server endpoints scenario stresses scheduling outgoing replies multiplexing incoming requests server results show server message rates within 11 theoretical peak 62 578 messages per second given measured logp gap 1598 microseconds perclient message rates within 16 ideal fair share 1nth servers put steady server performance graceful response system increasing load demonstrate effective operation flowcontrol endpoint scheduling multiplexing mechanisms throughout system figure 11 extends scenario shown figure one important difference server host figure 10 singlethreaded process polls endpoints roundrobin fashion extension number busy endpoints exceeds network interface capacity virtual network system actively loads unloads endpoints interface memory ondemand fashion server attempts write reply message nonresident endpoint request arrives nonresident end pagefault occurs virtual network number clients message rate msgss server client figure 11 aggregate server perclient message rates large numbers virtual networks driver moves backing storage remapped endpoint pages necessary however time server process suspended thus neither sends receives additional messages messages arriving nonresident endpoints endpoints relocated nacked would result significant performance drop interface endpoint frames become overcommitted extend scenario avoid pitfalls blocking server spawns separate thread solaris lwp per client endpoint server thread waits binary semaphore posted communication subsystem upon message arrival causes endpoint receive queue become nonempty additional messages may delivered endpoint server thread sched uled running server thread disables message arrival events processes batch requests reenabling arrival events waiting semaphore apart natural way write server approach allows large number server threads suspended pending resolution endpoint page faults server threads resident endpoints remain runnable actively send receive messages results show event mechanisms thread overheads degrade peak server message rates 15 53 488 messages per second variation average perclient message rates across five minute sampling interval remains small variation message rates clients increases load clients rates 40 higher average others 36 lower average finergrain time series analysis shown client communication rates reveals expected havior clients resident server endpoints burst messages rates shown figure 10 others send messages endpoints become resident appropriate server thread scheduled clients miss turns send appreciable number messages server thread scheduled 6 related work recent communication systems categorized support virtualization network interfaces communication resources positions multiprogramming error handling gam pm fm use messagebased apis little support multiprogramming gam canonical fast active message layer pm fm add support gangscheduling parallel programs systems driven primarily needs spmd parallel comput ing support mpi portability mpps fm handles receive buffer overruns ignores types network error none systems explicit error models hinders implementation highlyavailable nonscientific applications shrimp unet hamlyn closer system systems provide direct protected access network interfaces using techniques similar found application device channels dpd94 shrimp project uses virtual memory mapped communication model run multiple applications preliminary multiprogramming results unet unetmm support multiprogramming hamlyn presented vision senderbased communication able support multiprogramming demonstrated results using pingpong style benchmarks important distinction previous work lies virtualization network interfaces communication resources shrimp level indirection used couple virtual memory communication effectively virtualizes network unet provides virtualized interfaces leaves routing buffer management reliable message delivery protocol issues higherlayers hamlyn allows process map contiguous regions nicaddressable host memory address space messages areas afford level indirection allows system virtualize network interface position taken virtualization direct impact error model event error shrimp hamlyn deliver signals processes unet delegates responsibility providing adequate buffer resources conditioning traffic higherlevel protocols drops packets resources unavailable conclusions bringing direct protected communication mainstream computing requires generalpurpose robust communication protocol paper introduces amii api virtual networks abstraction extends traditional active messages reliable message delivery simple yet powerful error model supports use arbitrary sequential parallel programs paper presented design nictonic transport protocols required general sys tem myrinet implementation measured costs generality relative gam minimal active message layer hardware particular explored costs associated endpoint scheduling flow control timer management reliable message delivery error handling using logp communication model measured basic parameters system implementation achieves endtoend latencies microseconds short active messages peak bandwidth 31 mbs numbers represent twice end end latency 77 bandwidth provided gam cost reliable message delivery makes significant contribution basic communication costs using additional benchmarks demonstrated protocols provide robust performance graceful degradation virtual networks ab straction even physical network interface resources overcommitted factors 12 benchmarks demonstrate feasibility truly virtualizing network interfaces resources show importance supporting multithreaded applications nictonic protocols discussed paper perform well enable diverse set timely research efforts researchers berkeley actively using system investigate explicit implicit techniques coscheduling communicating processes dac96 essential part highperformance communication multiprogrammed clusters uni multiprocessor servers related work clusters smps lmc97 investigates use multiple network interfaces multiprotocol active message layers impact packet switched networks gigabit ethernet cluster interconnect protocols open question eager examine extent existing protocol mechanisms policies apply new regime acknowledgments research supported part arpa grant f3060295c0014 california state micro pro gram professor david e cullers nsf presidential faculty fellowship ccr9253705 nsf infrastructure grant cda8722788 nsf graduate research fellowship national seminconductor corportation graduate research fellowship would like thank rich martin providing valuable feedback earlier versions paper would also like thank eric anderson discussions specialization especially andrea arpacidusseau comments suggestions improving paper r case networks workstations two virtualmemory mapped virtual network interface designs gigabit per second local area network implementation hamlyn sender managed interface archi tecture logp performance assessment fast network interfaces effective distributed scheduling parallel work loads experiences highspeed network adap tor software perspective interface message processor arpa computer net work selfsimilar nature ethernet traffic active message application programming interface communication subsystem organization hpam active message layer network hp workstations system area network map ping high performance messaging workstations illinois fast messages fm myrinet protocol design high performance network ing myrinet experience pm highperformance communication library multiuser parallel environments active messages mechanism integrated communication com putation tr ctr hans eberle nils gura separated highbandwidth lowlatency communication cluster interconnect clint proceedings 2002 acmieee conference supercomputing p112 november 16 2002 baltimore maryland gang qu miodrag potkonjak techniques energy minimization communication pipelines proceedings 1998 ieeeacm international conference computeraided design p597600 november 0812 1998 san jose california united states jinsoo kim kangho kim sungin jung building highperformance communication layer virtual interface architecture linux clusters proceedings 15th international conference supercomputing p335347 june 2001 sorrento italy matt welsh anindya basu xun wilson huang thorsten von eicken memory management userlevel network interfaces ieee micro v18 n2 p7782 march 1998 thorsten von eicken werner vogels evolution virtual interface architecture computer v31 n11 p6168 november 1998 evan speight hazim abdelshafi john k bennett realizing performance potential virtual interface architecture proceedings 13th international conference supercomputing p184192 june 2025 1999 rhodes greece alan mainwaring david e culler design challenges virtual networks fast generalpurpose communication acm sigplan notices v34 n8 p119130 aug 1999 stephan brauss martin frey martin heimlicher andreas huber martin lienhard patrick mller martin nf josef nemecek roland paul anton gunzinger efficient communication architecture commodity supercomputers proceedings 1999 acmieee conference supercomputing cdrom p19es november 1419 1999 portland oregon united states philip buonadonna andrew geweke david culler implementation analysis virtual interface architecture proceedings 1998 acmieee conference supercomputing cdrom p115 november 0713 1998 san jose ca