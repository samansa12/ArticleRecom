efficient optimal design space characterization methodologies one primary advantages highlevel synthesis system ability explore design space paper presents several methodologies design space exploration compute optimal tradeoff points combined problem scheduling clocklength determination module selection discuss methodology takes advantage structure within design space well structure interactions among three subproblems cad b introduction many years one compelling reasons developing highlevel synthesis systems gajski et al 1994 de micheli 1994 desire quickly explore wide range designs behavioral description given set designs two metrics commonly used evaluate quality area ideally total area often functional unit area time schedule length latency finding optimal tradeoff curve two metrics called design space exploration design space exploration generally considered difficult solve optimally reasonable amount time problem usually limited computing either lower bounds timmer et al 1993 estimates chen jeng 1991 optimal tradeoff curve set time resource constraints moreover design space usually determined solving scheduling functional unit allocation subproblems design space exploration methodology described goes beyond traditional design space exploration several ways first optimal tradeoff points computed design space completely characterized second optimal tradeoff points represent optimal solutions timeconstrained scheduling tcs resourceconstrained scheduling rcs problems rather lower bounds estimates third tradeoff points computed manner supports realistic module libraries incorporating clock length determination module selection methodology finally tradeoff points material based upon work supported national science foundation grant mip9423953 addresses stephen blythe department computer science rensselaer polytechnic institute troy ny 12180 robert walker department mathematics computer science kent state university kent oh 44242 blythe r walker min area latency fig 1 example design space showing pareto points shaded regions show two distinct clusters pareto points many tradeoff curves exhibit computed efficient manner careful pruning search space design cycle resulting methodology also extended include additional subproblems 11 design space process exploring design space viewed solving either timeconstrained scheduling tcs problem minimizing functional unit area range time constraints resourceconstrained scheduling rcs problem minimizing latency range resource constraints although tradeoff latency area tradeoff curve smooth due finite combinations library modules available mcfarland 1987 consider design space shown figure 1 curve described set points ft ft g ft minimum area required given time constraint ie optimal solution tcs problem ensure curve completely characterized one could exhaustively solve tcs problem optimally every time constraint min critical path length tmax time constraint corresponding module selection allocation minimum area however bruteforce approach efficient fortunately number points needed fully characterize optimal tradeoff curve much smaller curve completely characterized set ft ft g optimal tradeoff points shown black dots figure 1 points design smaller latency area design smaller area latency points called pareto points de micheli 1994 brayton spence 1984 formally defined follows therefore design space exploration problem solved efficiently efficient optimal design space characterization methodologies ffl 3 finding pareto points design space furthermore many optimal tradeoff curves contain two distinct clusters pareto points shown shaded regions figure 1 one latency small area large another area small latency large paper explores several approaches find pareto points efficient manner first section 2 describes basic methodology explores latency axis find pareto points design space repeatedly applying tcs methodology section 3 discusses extend problem incorporate clock length determination problem section 4 discusses incorporation module selection section 5 related approach based solving rcs problem repeatedly taking advantage structure module selection problem discussed comparison made tcs based method section 6 examines advantages disadvantages combining two approaches manner similar timmers bounding methodology timmer et al 1993 sections 7 8 describes techniques pivoting tcs rcsbased methodologies take advantage pareto point clusters described section 9 results fairly complex module library presented pivoting method works well library discussed lastly section 10 gives summary work suggests future directions may take 2 latencyaxis exploration find pareto points either tcs problem could solved repeatedly various time constraints rcs problem could solved repeatedly various resource constraints methodology repeatedly solves tcs problem 2 leads two subproblems 1 determining time constraints explore 2 determining efficiently explore design space time constraint ideally want avoid exhaustively searching time constraints feasible range min tmax module set clock length specified priori tcs problem need solved time constraints multiple clock length since time constraint could replaced smaller two time constraints would lie without increase area simple example consider design space exploration problem diffeq example paulin knight 1989 using library table 1 trivial library 1 found timmer et al 1993 clock length 100 minimum time constraint 600 length critical path maximum time constraint 1300 latency required feasible schedule 1 mult alu1 time constraints must explored set f600 700 800 900 1000 1100 1200 1300g given set time constraints voyager design space exploration system chaudhuri et al 1997 efficiently characterizes design space follows main loop see figure 2 scans time constraints direction 2 note although solving tcs problem methodology limited solving problem could extended include register allocation interconnect allocation control unit design etc blythe r walker design space exploration areacur maxint compute tmin tmax compute candidate time constraints tmin tmin tmax feasible schedule else compute lower bound lb ft lb areacur pareto point nplb else compute upper bound ub ft else compute lprelaxed lower bound rlb ft rlb areacur pareto point nprlb else else calculate ip solution areacur else pareto point npilp fig 2 voyagers main design space exploration loop creasing latency time constraint asap schedule first calculated determine feasible schedule exists time constraint clock length uses heuristic compute lower bound functional unit area area larger 3 previous area solution pareto point case time constraints 900 1000 1100 1200 figure 3 however lower bound smaller previous area potential 3 problem specified far area never larger however may larger clock length determination module selection problems incorporated methodology described sections 3 4 efficient optimal design space characterization methodologies ffl 5 module area delay ns operations mult 1440 200 fg alu1 160 100 f gamma g table 1 library timmers trivial library 11500250035004500500 600 700 800 900 1000 1100 1200 1300 1400 area latency optimal paretobased curve optimal solutions lower bounds fig 3 results diffeq using library pareto point methodology computes upper bound area compares lower bound two equal point optimal solution pareto point eg time constraint 800 figure 3 results still inconclusive eg time constraint 700 uses tighter computationallyintensive fu lowerbounding method based lp relaxation tries procedure example determining time constraint 700 corresponds pareto point method also fails solves carefullydeveloped ilp formulation chaudhuri et al 1994 determine optimal solution using bounds determined earlier reduce search space solution thus base methodology quickly determines whether time constraint corresponds pareto point carefully pruning search space first computes small set time constraints explore increasingly tighter heuristics used try determine time constraint corresponds pareto point heuristics fail computationallyintensive ilp formulation used unfortunately assuming module set clock length specified priori unrealistic complex module libraries accordingly section 3 describes base methodology extended include clock length determination section 4 describes incorporation module selection 3 adding clock determination described earlier base methodology explores set time constraints determining whether solution tcs problem pareto point problem simplified assuming clock length known priori whereas blythe r walker recent work shown determining system clock length difficult problem chen jeng 1991 chaiyakul et al 1992 narayan gajski 1992 corazao et al 1993 jha et al 1995 chaudhuri et al 1997 choice clock length significant impact resulting design therefore problem clock length determination must folded design space exploration problem 31 prior work described chaudhuri et al 1997 clock determination problem usually ignored favor ad hoc decisions estimates example several early synthesis systems used delay slowest functional unit estimated clock length choice favored use chaining disallowed multicycling heuristic method finding clock length given narayan gajski 1992 result may optimal guarantee optimal clock length chosen 4 scheduling problem could solved repeatedly every possible clock length computationallyintensive task fortunately exhaustive search necessary set candidate clock lengths scheduled reduced corazao et al 1993 one method reducing set given tighter method introduced chen jeng 1991 later proven correct jha et al 1995 chaudhuri et al 1997 method computes small set candidate clock lengths one must optimal clock length taking ceiling integral divisors functional unit delays 32 pruning candidate clock lengths even integraldivisor methods lead set candidate clock lengths large becomes timeconsuming solve tcs problem clock length time constraint fortunately set candidate clock lengths reduced even described definition 1 given clock length c slack k module type k execution delay k given c theorem 1 given clock length c exists clock length c c module types k current module selection c replaced c without lengthening schedule c modules k quality hold operations schedule using modules thus operations schedule using c could scheduled least soon sooner schedule using c operations capable executing faster equally fast schedule using c thus changing clock length c improve schedule 2 4 actually data path component system clock length final clock length includes controller interconnect delays well efficient optimal design space characterization methodologies ffl 7 module area delay ns operations alu1 100 48 f gamma g table 2 library b narayans library clock length slack slack replaced 28 5 8 2455 table 3 slack values found library b demonstrate use theorem consider library b shown table 2 vdp100 library narayan gajski 1992 augmented areas similar library assuming technology limit 17ns shortest clock length integral divisor methods give set candidate clock lengths corresponding slack values shown table 3 consider clock length 33ns found d1635e 33 multiplier scheduled using clock length slack 2ns several clock lengths whose slack multiplier smaller slack corresponding alu1 always larger however clock length 55ns slack multiplier less slack alu1 therefore theorem 1 says schedule uses clock length 33ns shortened using clock length 55ns without increasing number functional units theorem 1 applied full set candidate clock lengths set reduced ck 24g note two sets slack values equivalent shorter clock length dropped since would tend result larger controller 33 exploring candidate clock lengths pruned set ck 0 candidate clock lengths computed integral multiples clock lengths give time constraints explore time constraint candidate clock length methodology outlined figure 2 applied efficiency search time clocks time constr design points nplb nprlb npilp plb p rlb pilp table 4 statistics solving diffeq using library b blythe r walker250350450550650400 500 600 700 800 900 1000 1100 area latency optimal paretobased curve optimal solutions lower bounds fig 4 results diffeq using library b design space exploration w clock determination areacur maxint compute pruned set ck 0 candidate clock lengths compute tmin tmax c j ck 0 compute candidate time constraints tmin tmin tmax using c j ck 0 inducing determine ft pareto point see figure 2 fig 5 voyagers design space exploration loop clock determination constraint improved observing time constraint derived integral multiple one clock lengths inducing clock lengths need explored time constraint resulting methodology outlined figure 5 using library b diffeq example methodology generates design space shown figure 4 pruned set ck candidate clock lengths generated 50 time constraint clock length pairs explored note single time constraint one candidate clock length two corresponded infeasible schedules 48 examined determine pareto points table 4 shows headings last six columns correspond labels figure 2 vast majority solutions determined either pareto nonpareto points using bounding heuristics two solved using tighter lprelaxation lower bounding method solutions required ilp note also several cases time constraints range 420600 efficient optimal design space characterization methodologies ffl 9 module area delay ns operations mult 1440 200 fg alu1 160 100 f gamma g add1 150 100 fg alu2 90 200 f gamma g sub2 85 200 fg add1 85 200 fg table 5 library c timmers library 2 lower bound differed optimal solution methods based solely lowerbounding would incorrectly characterize design space finally figure 4 also demonstrates importance systematically examining relevant clock lengths design space time constraint 652 inducing clock length 163ns leads solution area 500 whereas previous time constraint lower area 400 although point 652 500 optimal respect time constraint fixed clock length 163 ns pareto point thus rejected line labeled nplb figure 2 4 adding module selection adding clock length determination base methodology important step toward supporting complex libraries methodology must also extended cover libraries offer number possible module sets would prefer avoid exhaustive search possible module sets yet must ensure miss combination time constraint clock length module set corresponds pareto point 41 prior work years variety methods employed determine appropriate module set one method described jain et al 1988 generates number module sets selects best one another method presented tim mer et al 1993 computes initial module set milp formulation determines validity scheduling viable schedule found set allocation updated scheduling process repeated 5 previous work clock length determination using techniques determine single module set independently scheduling cannot guarantee globally optimal solution instead trying find single module set method found chen jeng 1991 exhaustively explores possible module sets since method also exhaustively explores integral divisor based clock lengths computational complexity large optimal scheduling estimates computed 42 exploring different module sets fortunately exhaustive search necessary many possible module sets eliminated since incapable implementing 5 method also incorporates type mapping problem milp formulation something methodology yet handle see section 9 blythe r walker1500250035004500600 800 1000 1200 1400 area latency optimal paretobased curve optimal solutions lower bounds fig 6 results diffeq using library c module area delay ns operations mul add 50 50 fg sub table 6 library artificial complex library operation types found data flow graph example case diffeq module set must capable performing operations f gamma g module sets eliminated moreover number module sets must explored time constraint reduced number candidate clock lengths observing time constraint derived integral multiple clock length derived one specific modules therefore module sets contain least one modules must explored time constraint using library c shown table 5 library 2 timmer et al 1993 diffeq example methodology described generates design space shown figure 6 32 possible module sets 1 pruned candidate clock length 100ns 9 time constraints resulting 288 tcs problems solve resulted infeasible schedules ie solution possible vast majority solutions determined either pareto nonpareto points using bounding heuristics library clocks time constr design points nplb nprlb npilp plb prlb pilp table 7 statistics solving diffeq using libraries c efficient optimal design space characterization methodologies ffl 11100200300400200 400 600 800 1000 1200 1400 area latency optimal paretobased curve optimal solutions lower bounds fig 7 results diffeq using library another example consider library shown table 6 artificial library slightly less complex library c realistic module delays using library diffeq example methodology described generates design space shown figure 7 16 possible module sets 9 integraldivisor candidate clock lengths 131 time constraints almost 19000 combinations even pruning candidate clock lengths 6 pruned candidate clock lengths 93 time constraints almost 9000 combinations however methodology solve 1522 tcs problems average 135 clock lengths 1127 module selections time constraint 183 infeasible vast majority solutions determined either pareto nonpareto points using bounding heuristics moreover entire procedure took 15 hours wallclock time without careful pruning search space problem could solved optimally reasonable amount time furthermore 4 module delays many resulting designs lie optimal tradeoff curve although designs optimal solutions particular clock length module set pareto points important methodology correctly explores design space example timmer et al 1993 presents method begins time constraint tmax alternately performs time area lowerbounding find stairstep tradeoff curve even methodology enhanced alternate optimally solving resourceconstrained timeconstrained scheduling problems would find paretobased tradeoff curve absence combined module selection clock length determination problem combined problem included enhanced methodology would fail find paretobased curve one points found timeconstrained scheduling suboptimal point lies optimal paretobased curve point would nonminimal area would used resourceconstrained scheduling find minimal latency nonminimal area thus compounding problem giving erroneous design curve actually lies optimal area curve based blythe r walker module area delay operations mul add 50 50 fg sub table 8 artificial complex library pareto points 5 areaaxis exploration viewing previous approach latencyaxis exploration methodology alternative approach based area axis pareto points found determining set area constraints explore optimally solving rcs problem area constraint necessary reduce number constraints explore searching entire integral range along area axis would prohibitively expensive given reduced set area constraints algorithm outlined figure 2 modified explore area axis instead starting point smallest possible area largest latency continuing reaches point largest possible area minimal latency solving rcs problem minimize schedule latency area constraint various solutions determined either pareto nonpareto points using heuristics exact techniques together manner similar described section 2 much way one time constraint induced one clock length area constraint correspond one module set resource allocation enumerating possible allocations whose resulting area within amax module set gives initial set candidate area resource constraints could used areaaxis methodology size initial set reduced noting may contain overly loose resource constraints example resource constraint 3 adders would loose behavioral description one addition operation general reduce set candidate resource constraints upper bounding number independent paths dfg could require resources type could possibly executed parallel resulting upper bound would maximal number type resources needed allocation schedule using clock length although greatly dependent module library dfg use applying even simple heuristics reduce number area constraints explore 80 85 given basic areaaxis methodology clock length determination module selection problems incorporated much basic latency axis methodology however areaaxis methodology easier solve module selection clock length determination area constraint candidate module selections pronounced effect efficient optimal design space characterization methodologies ffl 13 latency axis area axis timmer based diff 1407 236 513 94 72 ar 4808 850 1240 198 table 9 results axisbased neighborhoodbased timmerlike exploration using library table 8 51 latencyaxis vs areaaxis exploration due effect inducing clock lengths problems easier solve clock length determination problem solve module selection problem time constraint latencyaxis methodology reflected fact often candidate module selections candidate clock lengths time constraint opposite true areaaxis methods area constraint derived module selection allocation without concern clock length determination problem frequently results single module selection many clock length candidates point considered along area axis results latencyaxis areaaxis methodologies given middle two columns table 9 show results three different benchmarks diffeq arlattice elliptic wave filter cell table execution time 6 given minutesseconds along total number points explored ie number tcs rcs problems solved note neither approach universally better time faster use areaaxis exploration ewf example several rcs problems quite timeconsuming solve optimally however expressing problems tcs problems tended significantly faster resulting faster latencyaxis exploration furthermore simplicity module library used tends lend giving fewer area constraints significant factor speed either method thus unclear determine priori axis choose exploration 6 timmerlike exploration axisbased methods described section 5 explore design space reasonably effective manner neither universally effective furthermore method still fairly large number tcsrcs problems solve increase efficiency one approach would combine two methods using search methodology similar one employed timmer et al 1993 described paper timmers methodology solves lower bounding problem could easily adapted solve scheduling problem stead adapted manner timmers methodology essentially alternates solving tcs rcs problems shown figure 8 first given clock length minimal area resource constraint rcs problem would solved 6 executions times based sun sparc20 running solaris operating system blythe r walker timmer curve tcs rcs tcs timmer pareto candidates true optimal curve true pareto points rcs fig 8 pitfall timmers method considering clock length module set determi nation minimizing latency resource constraint resulting latency would used time constraint corresponding tcs problem solved minimizing number resources another rcs problem would solved using minimized number resources etc since every rcs problem solved methodology finds pareto point number tcsrcs problems solved reduced considerably axisbased methods presented timmerlike methodology consider clock length determination problem shown chaudhuri et al 1995 chen jeng 1991 clock length significant impact resulting designs fact failure incorporate clock length determination result overlooking pareto points complete optimal design space timmers methodology assumes single clock length resulting pareto points optimal relative one clock length may fully characterize design space since time constraints induced clock lengths frequently result smaller areas tcs solutions situation depicted figure 8 pareto points c found timmers methodology since correspond different clock lengths one used pareto point also corresponding different clock length missed favor false pareto point b however clock length determination problem incorporated tim mers method considering neighborhood time constraints around timmer pareto candidate follows candidate clock length induced time constraint closest without exceeding pareto points time constraint found instead solving single tcs problem single time con straint minimum area resulting solving tcs problem new time constraints found used area constraint next rcs problem unfortunately information previous schedules longer used prune search space described section 2 puts method distinct disadvantage axisbased methods effect seen last column table 9 execution times neighborhoodbased timmerlike methodology exceed axisbased methodologies even though decrease number design points explored efficient optimal design space characterization methodologies ffl 15 design space exploration using simple pivoting input percentage time constraints explore perc generate candidate time constraints range tmin locate jtmin explore using latency axis methodology using corresponding point generate candidate area constraints range amin explore amin using area axis methodology fig 9 voyagers simple pivoting methodology explored 100 50 1407 358 224 201 138 149 246 94 52 42 45 44 44 72 ar 4808 1104 745 557 441 924 850 table 10 results simple pivoting 7 pivoting latencyaxis areaaxis exploration another approach combining latencyaxis areaaxis exploration consider structure tradeoff curve shown figure 1 large number pareto points clustered two regions one latency small area large another area small latency large phenomenon also illustrated figure 10 latencyaxis methodology exploring latency axis direction increasing latency would find many pareto points fairly quickly would waste considerable amount time exploring time constraints correspond pareto points highlatency cluster pareto points reached using areaaxis methodology exploring area axis direction increasing area similar shortcoming however shortcoming overcome pivoting two axis based methods using latencyaxis methodology explore higharea lowlatency cluster using areaaxis methodology explore highlatency lowarea cluster process outlined figure 9 exploring latency axis direction decreasing latency obvious method pivoting simply switch latencyaxis exploration areaaxis exploration exploring certain percentage perc latency axis note making switch areaaxis methodology must still explore area axis direction increasing area information previous schedules used prune search space described section 2 stop reaches last pareto point found latencyaxis methodology results performing pivoting process various percentages blythe r walker100200300400500 1000 1500 2000 2500 3000 3500 4000 4500 area latency ar optimal paretobased curve ewf optimal paretobased curve fig 10 ewf ar optimal paretobase curves using library table 8 latency axis presented table 10 note 0 column corresponds immediate pivot areaaxis exploration 100 column corresponds using solely latencyaxis exploration surprisingly tradeoff curves depicted figure 10 percentages result fastest execution times fairly low 1020 since lowlatency cluster pareto points within first 20 latency axis unfortunately however consistent percentage always correspond best pivot point every tradeoff curve regardless whether execution time 7 number points explored quantity minimized thus better method deciding pivot must found 8 dynamic pivoting since best pivot point cannot determined priori must determined dynamically exploration process since tradeoff curve often exhibits two clusters pareto points described earlier one approach would determine cluster left pivot exploring next points members either cluster exploring latency axis pivot would occur curve begins flatten roughly horizontal line one simple method implementing dynamic pivot outlined figure 11 window w constant size w size kept window contains last n design points explored many pruned nonpareto points area first element window significantly larger area corresponding current time constraint point latencyaxis exploration current point selected pivot point words pareto point found recently curve flattening pivot latencyaxis exploration areaaxis exploration made 7 ewf example contains several points computationally expensive solved rcs problems thus dramatic execution time increase 20 10 despite decrease points explored efficient optimal design space characterization methodologies ffl 17 design space exploration using dynamic window pivoting input tolerance percentage tol time constraints window generate initial window explore window w using latency axis methodology using a1 points remove t1 w append next w calculate using tcs method generate final window wa area constraints amin explore wa using area axis methodology fig 11 voyagers dynamic pivoting methodology time constraints window diff 236 148 223 440 520 1407 72 44 ar 850 1008 620 734 821 4808 table 11 results dynamic windowbased pivoting results applying dynamic windowbased pivoting given table 11 determine significant change area reached size current window compared change area window percentage change area smaller size window percentage total number time constraints pivoted using area axis otherwise continued using latency axis unfortunately consistent window size yielded best result every case general window size 1015 time constraints generally seemed give good results looking table 11 first example shown diffeq small enough 5 time constraints statistically insignificant leading results dominated areaaxis exploration however ewf results give strong argument using dynamic pivoting bad priori choice using latencyaxis exploration areaaxis exploration shown table 10 could lead significantly larger execution time 15 dynamic pivoting 9 results results far used library presented table 8 library number different delays complicates design space exploration methodology considers clock length determination however two alternatives operation type leading fairly small number blythe r walker module area delay operations mul1 500 200 fg mul3 800 100 fg sub1 100 160 fg sub2 200 110 fg add1 90 150 fg add3 380 50 fg table 12 module selection intensive library latency area timmer pivot 15 4422 437 3258 615 ar 36932 21317 31327 19217 table 13 results using library many module selections1000200030004000 500 1000 1500 2000 2500 3000 3500 4000 4500 area latency ar optimal paretobased curve ewf optimal paretobased curve fig 12 ewf ar optimal paretobase curves using library table 12 efficient optimal design space characterization methodologies ffl 19 module selection candidates consider table 12 opposite fewer unique functional unit delays several delays multiples factors result fewer resulting candidate clock lengths example several functional units 50 candidate clock length however library much larger number module selection candidates results using library presented table 13 compared results using previous library latencyaxis methodology used significantly time spent exploring latency axis since module selection problem much difficult latencyaxis exploration gets time savings due structure clock length determination problem ever areaaxis exploration results generally faster reflecting savings due considering structure module selection problem first library ewf gives several rcs problems time consuming solve optimally corresponding tcs problems time consum ing thus dramatically increasing overall run time area axis note cases number area constraints solve much higher thus savings execution time must result fact structure constraint along area axis library prior library timmerlike exploration even neighborhoodbased timmerlike exploration fails produce faster run times li brary although case primary contributing factor clock length determination number possible module selection candidates generated time constraints ar ewf pivoting method gave best execution times 8 time also explored fewer points timmerlike method finally note resulting design spaces two benchmarks also much complex library seen figure 12 added complexity plots directly attributable complexity module selection problem many area constraints exist leading pareto points derived corresponding resource constraints 10 conclusions future work paper examined process design space exploration reducing process one characterizing optimal latencyarea tradeoff curve finding pareto points curve combined problem scheduling clock length determination module selection presented several exploration methodologies dedicated latencyaxis areaaxis exploration timmerlike exploration method two methods one static one dynamic pivoting two axisbased methods methodologies takes advantage structure found along latency axes carefully pruning large number suboptimal solutions level design cycle making possible use optimal scheduling techniques rather bounds estimates furthermore 8 diffeq benchmark gives skewed results size allow statistically significant number pareto points incorporated within 15 design window thus allowing pivoting method take full advantage structure resulting design space blythe r walker discussed tradeoff curve dominated two clusters pareto points structure along structure combined problem used efficiently find pareto points tests using various benchmarks different module libraries shown importance considering clock length determination module selection problem conjunction scheduling problem subproblems considered conjunction like often subproblems resolved prior independently scheduling shown results accurately reflect optimal tradeoff curve many cases methods consider combined problem entirely miss globally optimal points although methodologies presented solve design space exploration problem optimally could also used generate preliminary characterization replacing optimal scheduler heuristic scheduler lower bound estimate 9 reductions number constraints explore would similar found optimal case amount execution time would lower expense optimality present although methodologies allow us handle realistic module libraries previous methodologies since consider clock length determination module selection consider type mapping prob lem assume operations given type mapped single functional unit type found module selection fully take advantage module libraries thus completely characterize optimal tradeoff curve methodologies particular scheduling portions must enhanced handle complete typemapping problem finding optimal solutions type mapping problem crucial find tight heuristic bounding techniques type mapping problem axisbased methods maintain efficiency pruning methods furthermore realistic model resulting design must developed methodology also incorporates registers interconnect issues controller effects etc r towards practical methodology completely characterizing optimal design space sensitivity optimization timing models high level synthesis exact methodology scheduling 3d design space solution methodology 9 note bounding methodology described would fully characterize design space one described analyzing exploiting structure constraints ilp approach scheduling problem optimal module set clock cycle selection dsp synthesis instruction set mapping performance optimization synthesis optimization digital circuits specification design embedded systems module selection pipeline synthesis reclocking high level synthesis reevaluating design space register transfer hardware synthesis system clock estimation based clock slack min imization force directed scheduling behavioral synthesis asics fast systemlevel areadelay curve prediction tr system clock estimation based clock slack minimization timing models highlevel synthesis specification design embedded systems analyzing exploiting structure constraints ilp approach scheduling problem comprehensive estimation technique highlevel synthesis reclocking highlevel synthesis computing lower bounds functional units scheduling instruction set mapping performance optimization module selection pipelined synthesis synthesis optimization digital circuits toward practical methodology completely characterizing optimal design space ctr zoran salcic george coghill bruce maunder genetic algorithm highlevel optimizer complex datapath dataflow digital systems applied soft computing v7 n3 p979994 june 2007 hyunuk jung kangnyoung lee soonhoi ha efficient hardware controller synthesis synchronous dataflow graph system level design ieee transactions large scale integration vlsi systems v10 n4 p423428 august 2002 yannick le moullec jeanphilippe diguet thierry gourdeaux jeanluc philippe designtrotter systemlevel dynamic estimation task first step towards platform architecture selection journal embedded computing v1 n4 p565586 december 2005 matthias gries methods evaluating covering design space early design development integration vlsi journal v38 n2 p131183 december 2004