ptas minimizing total weighted completion time identical parallel machines consider problem scheduling set ofn jobs onm identical parallel machines minimize weighted sum job completion times problem nphard strong sense best approximation result known far 12 1 2approximation algorithm derived kawaguchi kyan back 1986 contribution paper polynomial time approximation scheme setting settles problem open long time moreover result constitutes rst known approximation scheme strongly nphard scheduling problem minsum objective b introduction problem consider following machine scheduling model given set j n independent jobs scheduled identical parallel machines processors job specified positive processing requirement p j positive weight w j feasible schedule j every job j 2 j processed p j time units one machines uninterrupted fashion every machine process one job time every job processed one machine time completion time job j schedule denoted c j goal minimize total weighted completion time standard classification scheme graham lawler lenstra rinnooy kan 1979 scheduling problem denoted p part input pm complexity problem special case one machine e problem solved polynomial time smiths ratio rule process jobs order nonincreasing thus single machine case importance job measured ratio constant number 2 machines problem nphard ordinary sense solvable pseudopolynomial time part input problem nphard strong sense see problem ss13 garey johnson 1979 special case p j j solvable polynomial time sorting see conway maxwell miller 1967 extended abstract appear proceedings 31st annual acm symposium theory computing stoc99 technische universitt berlin fachbereich mathematik 61 strae des 17 juni 136 d10623 berlin germany email skutellamathtuberlinde part research done first author visiting core louvain laneuve belgium z technische universitt graz institut fr mathematik steyrergasse 30 a8010 graz austria email gwoegioptmathtugrazacat supported start program y43mat austrian ministry science approximation algorithms paper interested close one approach optimum solution nphard scheduling problems polynomial time thus research focuses approximation algorithms efficiently construct schedules whose values within constant factor optimum solution value number ff called performance guarantee performance ratio approximation algorithm family polynomial time approximation algorithms performance called polynomial time approximation scheme ptas running times approximation algorithms even bounded polynomial input size 1 algorithms build fully polynomial time approximation scheme fptas known unless pnp strongly nphard optimization problem cannot possess fptas see garey johnson 1979 known approximation results sahni 1976 gives fptas weakly nphard scheduling problem fixed kawaguchi kyan 1986 analyze list scheduling order nonincreasing ratios w j identical parallel machines prove performance ratio 1 strongly nphard problem till best approximation result problem alon azar woeginger yadid 1998 study scheduling problems identical parallel machines various objective functions solely depend machine completion times particular give polynomial time approximation scheme problem minimizing denotes finishing time machine rewriting objective function appropriate way result implies ptas problem minimizing weighted sum job completion times job ratios w j equal generally speaking approximability scheduling problems total job completion time objective socalled minsum scheduling problems wellunderstood minsum problems solved polynomial time using straightforward algorithms like single machine version problem weakly nphard minsum problems allow fptas based dynamic programming formulations see e g sahni 1976 woeginger 1998 minsum problems ptas unless pnp hoogeveen schuurman woeginger 1998 problems cannot even approximated polynomial time within constant factor like minimizing total flow time see kellerer tautenhahn woeginger 1996 leonardi raz 1997 minsum problems constant factor approximation algorithms based rounding andor transforming andor manipulating solutions preemptive relaxations relaxations integer programming formulations see e g phillips stein wein 1995 hall schulz shmoys wein 1997 skutella 1998 due integrality gap approaches never yield ptas however single ptas known strongly nphard minsum scheduling problem contribution paper contribution polynomial time approximation scheme general problem minimizing total weighted completion time identical parallel machines result derived two steps first step derive ptas special case largest job ratio constant factor away smallest job ratio result derived modifying generalizing technique alon et al 1998 second step derive full generality main idea partition jobs subsets according ratios near optimal schedules computed subsets key observation schedules concatenated without much loss overall performance guarantee result yields first polynomial time approximation scheme strongly nphard scheduling problem minsum objective confirms conjecture hoogeveen schuurman woeginger 1998 solves open problem posed alon et al 1998 finally improves ancient result recently several groups announced independently approximation schemes strongly nphard problem 1j r j j even general scheduling problems cf chekuri et al 1999 organization paper section 2 contains preliminaries used throughout paper section 3 give approximation scheme special case ratios jobs within constant range finally section 4 present approximation scheme arbitrary instances preliminaries smiths ratio rule locally optimal schedule jobs assigned machine order nonincreasing ratios w j proof simple exchange argument throughout paper restrict schedules meeting property given schedule notice second term right hand side nonnegative depend specific schedule therefore 0 1 approximation algorithm problem minimize function approximation algorithm minimizing total weighted completion time fact section 3 convenient consider objective function give polynomial time approximation scheme problem minimize function use following notation subset jobs j denote total processing time jobs j 0 moreover denote average machine load caused jobs j 0 use simpler notation l lj start following observation consider subset jobs j ae jobs j 0 consecutively scheduled machine arbitrary order starting time contribution objective function given observation together smiths ratio rule leads following lemma generalizes result eastman even isaacs 1964 lemma 21 let ae 1 denote different job ratios w j let j h g given schedule denote subset j h assigned machine j hi value schedule given ae h ae proof machine 1 q jobs j scheduled consecutively starting time h1 pj hi result thus follows 2 notice right hand side 3 depends total processing times sets j hi structure sets analysis approximation scheme make use following lower bound value optimal schedule lemma 22 using notation lemma 21 value arbitrary schedule bounded proof 1 lemma 21 get ae h second inequality follows convexity function 1 3 approximation scheme constant range ratios section consider problem minimize give polynomial time approximation scheme instances bounded weight length ratios jobs e job ratios w j arbitrary r 0 real constant depend input first notice rescaling weights jobs restrict case r 1 31 structural insights arbitrary real constant choose corresponding constant delta 2 n ffi delta1 ae round weights jobs ratio job attains nearest integer power ffi value optimal schedule increases factor 1 since constant chosen arbitrarily close 1 may restrict instances p form deltag use following notation section j h class jobs completion time machine schedule denoted lemma 31 let f optimal schedule fm 0 pair machines machine processes exactly one job proof let j denote last job machine observe j must start time moving j end machine 0 would decrease gamma j hence value schedule thus get contradiction assume j first job machine denote first job k let w w 0 denote sum weights jobs scheduled machine 0 respectively since since weight length ratios jobs 1 thus removing job k machine inserting beginning machine 0 changes value schedule p k w contradicting optimality following corollary notice least one machine l every schedule corollary 32 job j size p j fl j occupies machine optimal schedule job size greater fl completion time machine fl optimal schedule result corollary 32 iteratively reduce given instance long job j size remove set jobs j assign machine decrease number machines one following thus restrict instances following form assumption 33 processing time p j job j well completion time machine optimal schedule bounded fl 32 rounding instance define simplified rounded version input compute optimal schedule polynomial time moreover assumption specify later optimal solution rounded instance lead near optimal solution original instance rounding based positive integral constant later chosen sufficiently large rounding done every class j h 0 h delta separately replace jobs j h new jobs slightly different processing times however length weight ratio stay ffi h ffl every big job j original instance replaced corresponding rounded job whose processing time rounded next integer multiple l weight j rounded job equals note rounded processing time holds ffl denote h total processing time small jobs j h whose processing times greater l denote h value h rounded next integer multiple l rounded instance contains new jobs length l weight every new job equals note total number jobs rounded instance bounded n construction get following lemma lemma 34 replacing rounded jobs unrounded counterparts arbitrary schedule transformed instance induces schedule smaller equal value original instance rounded instance solved polynomial time e g dynamic programming however use generalization alternative approach alon azar woeginger yadid 1998 formulate problem integer linear program whose dimension bounded constant assumption 33 construction size p j job j bounded therefore since job sizes integer multiples 1 constant number pi possible moreover since number possible length weight ratios bounded constant delta 1 total number different types jobs bounded constant denote number jobs size k l define vector n n 10 n assignment jobs one machine given vector number jobs size k l assigned machine completion time machine given h0 let cu denote contribution objective function machine scheduled according u j denote average machine load transformed instance observe construction thus assumption 33 bound completion time machine f delta2 l denote u set vectors u mu f delta2 l vector u 2 u entry u kh bounded number depends constants delta f thus independent imput therefore set u constant size formulate problem finding optimal schedule integer linear program constant number variables vector u 2 u introduce variable xu denotes number machines assigned jobs according u optimal schedule given following program min u2u subject u2u u2u shown lenstra 1983 integer linear program constant dimension solved polynomial time 33 proving near optimality lemma 34 remains show value optimal schedule rounded instance factor 1 optimal objective value original instance prove following assumption original instance afterwards demonstrate get rid assumption assumption 35 exists optimal schedule following form completion time every machine fulfills inequality l order achieve desired precision choose integer sufficiently large fulfill inequality since delta ffi f constants depend input also constant independent input lemma 36 assumption 35 optimal objective value rounded instance factor 1 optimal objective value original instance proof take optimal schedule original instance described assumption 35 consider fixed machine finishing time optimal schedule h denote subset j h processed machine let j h denote set jobs processed machine note lemma 21 contribution machine objective function given replace every big job j corresponding rounded big job j may increase every pj 0 multiplicative factor 1 every j 0 h denote h total size small jobs round h next integer multiple l replace appropriate number rounded small jobs length weight ratio ffi h may increase pj 0 h additive factor l note repeating replacement procedure machines one accommodate jobs rounded instance denote k h resulting set rounded jobs assigned machine length weight ratio ffi h compare first term right hand side 6 j 0 h corresponding term jobs k h 2 last inequality applied together second inequality 5 similar way compare second term right hand side 6 j 0 h corresponding term jobs first inequality 5 get right hand side 6 fulfills2 putting together 7 8 4 short calculation shows objective value rounded instance factor 1 optimal objective value original instance finally consider case assumption 35 may violated assumption 33 restrict case lower bound 1 f l violated machine completion time result lemma 31 get corollary 37 optimal schedule f machine every machine 0 one job particular exists job j size p j l every job occupies machine following assume exists job j size p j l otherwise assumption 35 true corollary 37 finished unfortunately know advance whether l f machine optimal schedule therefore take possibilities account compute two schedules given instance better one guaranteed 1 approximation corollary 37 one hand compute optimal schedule rounded instance turn feasible schedule original instance described lemma 34 hand assign job j machine remove jobs instance decrease number machines number removed jobs reduced instance recursively compute 1 approximation taking better two schedules notice recursion step number machines decreased least one thus gamma 1 steps arrive trivial problem solved optimality polynomial time state main result section theorem 38 exists ptas special case problem p constant range aer r arbitrary r 0 real constant depend input 4 polynomial time approximation scheme section present approximation scheme arbitrary instances p main idea deriving result partition set jobs subsets according ratios w j ratios jobs one subset within constant range subset near optimal schedule computed within arbitrary precision polynomial time see theorem 38 second step partial schedules concatenated order nonincreasing job ratios smiths ratio rule obeyed machine sake accessible analysis first present randomized variant approximation scheme discuss derandomization later throughout section assume w j weights jobs rescaled inverse maximal ratio 41 randomized approximation scheme partitioning step let delta positive integer let ffi 1 later choose delta large ffi gets small partitioning set jobs j performed two steps first step computes fine partition randomly turned rougher partition second step 1 h 2 n let jh psi 2 draw q uniformly random f1 q jh notice fixed q number nonempty subsets j q bounded n course take subsets consideration algorithm intuition step 2 compensate undesired property fine partition computed step 1 jobs similar ratio may lie different subsets computed partition random choice step 2 assures probability jobs lie different subsets rough partition small e computing partial schedules quotient biggest smallest ratio jobs subset bounded constant ffi delta thus theorem 38 compute polynomial time nonempty sets jobs j q near optimal mmachine schedules value z q z q denotes value optimal schedule j q concatenation step final step algorithm partial schedules concatenated one possibility machinewise machine jobs assigned partial schedules processed according smiths ratio rule however deterministic concatenation lead undesired unbalance load machines might example happen subset jobs j q consists one job always assigned machine 1 corresponding partial schedule thus concatenating partial schedules proposed would leave one machine idle therefore first randomly uniformly permute numbering machines partial schedule apply machinewise concatenation described randomly generated schedule probability two jobs different subsets processed machine equal 1 one expect appropriately balanced machine assignment 42 analysis randomized approximation scheme analysis based observation value computed schedule composed sum values partial schedules plus additional cost caused delay jobs concatenation step easy see sum values near optimal partial schedules cannot substantially exceed value optimal schedule key insight analysis delay jobs one subset caused another subset concatenation step essentially neglected one reason delayed jobs usually e high probability much smaller ratio thus less important jobs cause delay hand many unimportant jobs neglected total weighted completion time corresponding near optimal partial schedule must large compared delay caused important jobs following lemma provides two lower bounds value optimal schedule z simplify lemma 41 q 2 deltag value z optimal schedule bounded z z q z mx proof take optimal schedule set jobs j denote completion time job j schedule c j yields z q since completion times c also define feasible schedule subset jobs j q order prove second lower bound first observe value optimal schedule decreases round weights jobs j 2 jh w n result follows lemma 22 next step analysis determine expression expected value computed schedule lemma 42 expected value computed schedule given z q min proof first keep q fixed analyze conditional expectation e q theta p conditional expectation equal sum values partial schedules plus expected cost caused delay jobs concatenation step expected delay arbitrary job j 2 j determined follows let 2 n 0 k 2 q j 2 jk j q expected delay job j equal expected load caused jobs machine job j processed since machines permuted uniformly random concatenation step expected load equal average load lie different sets indices q consequence fixed q conditional expectation total weighted completion time z q notice randomly chosen q expected value j q hk equal probability h k lie different sets indices q construction sets indices q r probability equal kgammah delta result thus follows 11 following theorem contains main result subsection theorem 43 given upsilon expected value computed schedule bounded times value optimal solution e proof compare expected value given lemma 42 lower bounds value optimal schedule given lemma 41 since construction algorithm z q q z lemma 41 first term right hand side 10 bounded z q order bound second term right hand side 10 first observe k 2 n thus inequality geometric arithmetic mean yields notice 12 bounds cost possible delay jobs jk caused jobs jh terms lower bounds optimal schedules jh jk 9 particular cost delay small compared sum values optimal schedules jh jk cases 2 however cost may large neglected point make use random choice q precise divide sum pairs h k second term 10 three partial sums first partial sum sigma 1 takes pairs account thus bounded 12 second partial sum sigma 2 takes pairs account bounded using arguments 12 finally third partial sum sigma 3 takes pairs k h account case replace psi 1 e make use random choice q get hkgamma3 hkgamma3 putting results together expected value computed schedule bounded second inequality follows choice ffi short calculation 43 deterministic approximation scheme presented randomized approximation scheme e efficiently compute schedules whose expected values arbitrarily close optimum however might desirable deterministic approximation scheme computes schedules firm performance guarantee cases therefore discuss derandomization randomized approximation scheme since random variable q attain constant number different values afford derandomize partition step algorithm trying possible assignments values q following discussion keep q fixed derandomization concatenation step slightly complicated use method conditional probabilities e consider random decisions one another always choose promising alternative assuming remaining decisions made randomly thus starting partial schedule j q 0 iteratively append remaining partial schedules j q current schedule iteration use locally optimal permutation machines given following way denote load completion time machine current schedule jobs renumber machines sum weights jobs j q processed machine corresponding partial schedule renumber machines partial schedule easy observation proved simple exchange argument appending partial schedule machinewise current schedule according given numbering machines minimizes cost caused delay jobs j q particular cost smaller expected cost randomized variant algorithm given moreover permutation machines chosen iteration influence expected delay jobs considered later iterations since expected delay simply average machine load result discussion value schedule computed deterministic algorithm bounded expected value schedule computed randomized variant given subsection 41 thus consequence theorem 43 state following main result paper theorem 44 exists polynomial time approximation scheme problem p acknowledgements authors would like thank organizers dagstuhlseminar 98301 graph algorithms applications result presented paper achieved r approximation schemes scheduling parallel machines personal communication theory scheduling bounds optimal scheduling n jobs processors computers intractability guide theory np completeness rinnooy kan scheduling minimize average completion time offline online approximation algorithms worst case bound lrf schedule mean weighted flowtime problem approximability nonapproximability results minimizing total flow time single machine approximating total flow time parallel machines minimizing average completion time presence release dates algorithms scheduling independent tasks various optimizers singlestage production semidefinite relaxations parallel machine scheduling dynamic programming formulation guarantee existence fptas tr ctr nicole megow marc uetz tjark vredeveld models algorithms stochastic online scheduling mathematics operations research v31 n3 p513525 august 2006 mark scharbrodt thomas schickinger angelika steger new average case analysis completion time scheduling journal acm jacm v53 n1 p121146 january 2006 martin skutella convex quadratic semidefinite programming relaxations scheduling journal acm jacm v48 n2 p206242 march 2001