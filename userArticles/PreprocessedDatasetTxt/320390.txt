problemoriented analysis basic uml static requirements modeling concepts unified modeling language uml standard modeling language best objectoriented oo modeling experiences embedded paper illustrate role formal specification techniques play developing precise semantics uml present precise characterization requirementslevel problemoriented class diagrams outline characterization used semantically analyze requirements class diagrams b introduction unified modeling language uml 10 standard language modeling complex systems variety views using objectoriented oo concepts effectiveness uml standard predicated among things clear precise pragmatic semantics notations informal semantics ie semantics defined primarily terms key basic concepts explicitly defined ambiguous one aware intended implicit interpretations incomplete contain consistencies problems lead confusion appropriate use language creation models clearly communicate intent furthermore subtle consequences lead deeper understanding concepts turn result effective use language get lost informal treatments semantics without precise semantics standard modeling notation devolve tower babel effectively diluting utility standard formal specification techniques play two significant roles development precise semantics standard notations used ffl tools expressing formal semantics precise natural language descriptions ob tained ffl tools facilitate indepth analyses proposed interpretations paper fst consists formal notation mechanisms rigorously analyzing statements expressed notation early stages development standard language informal discussions debates semantic issues coupled natural language statements reflecting particular perspectives yield valuable insights poorly understood semantic concepts limit value informal analyses semantic concepts concepts become varied interdependent need formal treatment semantics becomes apparent act formalizing semantic concepts forces language developers closely examine perceptions concepts confront assumptions underlying un derstanding analyses resulting formal models reinforce confidence interpretations identify subtle deficiencies interpretations yield significant insights revealing desirable undesirable consequences interpretations use fsts explore semantic concepts paves way expressing semantics formally mathematicallybased definition uml semantics useful provides reference resolving questions meaning consequences meaning cannot directly answered examining natural language descriptions say semantics presented standard document using formal languages bridging gap mathematical expressions realworld concepts model requires much effort make communicating semantics problematic using imprecise vague natural language statements wellformulated natural language description semantics derived formal expression semantics less likely cause confusion one based formal semantics producing mathematicallybased formulations uml semantics primary goal work formal techniques used work gain insights explore consequences proposed semantics primary goal work develop precise semantics uml notations expressed form widely understood eg natural language supports rigorous analyses models intent paper demonstrate role fsts play development welldefined standard modeling languages illustrate use fsts exploring uml semantics developing precise characterizations basic constructs problemoriented class diagrams outline characterizations used rigorously reason properties captured models section 2 introduce formal notation z 11 use explore semantics basic uml class diagram constructs z used work past experiences indicate provides adequate facilities modeling oo concepts 6 7 4 5 section 3 give overview formal characterization basic class diagram constructs discuss issues raised characterization section 4 illustrate characterization used support rigorous semantic analyses class diagrams section 5 conclude overview planned work area section introduce parts z notation necessary understand specifications given paper see 11 details primary structuring construct z schema schema two parts declaration predicate part declaration part consists variable declarations form w type w variable name type type name preceding declaration states value represented w member set named type types sets z predicate part consists predicate defines relationships among declared variables types z either basic composite elements basic types given sets used basic building blocks complex elements ele ments composite types three kinds composite types z set types elements sets cartesian product types elements pairs values schema types elements bindings values variables declared z schema usual set operations eg union intersection available z particular number elements finite set denoted using basic composite types one define relations sets pairs first element domain second element range relation example z declaration stating r relation domain elements drawn range elements drawn b function z example relation domain element related exactly one range element sequence z finite partial function natural numbers sequence element type number operators defined relations functions z paper use operators described follows r relation declared r b2g returns set containing elements related elements b set called domain r case domr a3g ffl ran r returns set containing elements b related elements set called range r case ran subset returns subrelation r domain consisting elements domr also example b2g note a4 element ignored domain r ffl rbt subset returns subrelation r range consisting elements ran r also example b1g ffl rj fsg j subset returns set elements range mapped elements set r example returns inverse r z schemata used model structural dynamic properties systems schema captures structural properties referred state schema schema captures dynamic properties referred operation schema state schema components system declared declaration section static properties system defined predicate part example state schema given telservice set service subscribers directory subscribers telephones dom directory subs subscribers telephones system telephone associated subscriber subs telephones z basic types representing registered subscribers registered telephones respectively telservice schema specifying state telephone system consisting set subscribers subs lookup facility directory text normal font appears directly z expression schema natural language description z expression ie comments predicate part schema contains two conjuncts logical expressions written separate lines predicate part schema anded form single predicate operation schema defines relationship state start end oper ations execution declaration part operation schema declares variables representing states defined state schema inputs puts variables needed define pre postconditions predicate part schema defines relationship states following conventions used variable names operation schemata unprimed variable eg w value variable operation execution primed variable eg w 0 value variable operation execution variable ending eg w input operation variable ending eg w output operation deltas denotes possible change state defined schema includes invariant properties primed unprimed state variables defined schema xis denotes state change includes invariant properties primed unprimed state variables defined schema predicate stating state identical state example operation schema given addsub deltatelservice subscriber added sub 62 subs input current subscriber input subscriber end operation directory directory unchanged operation operation schema defines operation adds new subscriber telephone system whose state defined telservice predicate part consists three conjuncts describing relationship states system determined operation 3 formal characterization requirements class diagrams process used explore semantic foundation static uml models described follows informal analysis systematic careful reading semantic notation sections document carried phase objective gain initial understanding concepts phase revealed obvious deficiencies uml document eg problem associated definition association end multiplicity properties discussed later identified stage stated informal analyses inadequate concepts become varied interdependent subtle deficiencies arise concepts intertwined form complex structures likely identified rigorous analysis concepts formalization phase concerned expressing concepts formally must done manner supports analysis take place next phase formalization phase provides yet another opportunity identifying deficien cies example one identify 1 omissions enough information complete formalization 2 ambiguities information provided formally interpreted different ways 3 inconsistencies information results inconsistent formalization rigorous analysis rigorous analysis involves manipulating formal expressions derive consequences given formalizations explored consequences posing questions manipulating formal expressions determine swers tried determine whether answers desirable undesirable consequences meaning characterized formalization example given formalization frozen association property one ask question object frozen deleted determine whether derived answer desired examining omguml document also identified desirable properties uml constructs omguml document explicitly expressed formalization attempted prove consequences formalization could done heightened confidence formalization could done examined formalization identify problems expressions could happen 1 error made formalization concept 2 concept formalized wellunderstood 3 relevant descriptions descriptions used develop formalization description property checked omguml document inconsistent class diagram conceptual model system expressed terms classes relationships among requirements level class diagram reflects problemoriented structure classes represent problem domain concepts design level class diagram reflects solutionoriented structure interpretation use paper developed problemoriented class diagrams remainder paper requirementslevel class diagram referred cd paper outlines formalization cds detailed account formalization found technical report 3 interpretation cd characterization valid externally observable system states externally observable system state structure consisting system objects links observed external agent point time refer system states possess properties expressed cd configurations semantic domain cds collection sets configurations meaning cd set configurations instancebased semantics cds use consistent uml object interpretation class diagram omg uml document 10 states pg purpose model describe possible states system behav ior state system comprises objects values links state system valid system instance every instance direct instance element system model constraints imposed model satisfied instances references model system model quote relate cds valid system instance configuration interpretation cd constructs eg classes associations may possess two types properties static dynamic static properties used define structure elements represented construct dynamic properties used constrain elements manipulated operations example static property multiplicity class class multiplic ity valid state configuration less p objects class example dynamic property notion addonly attributes addonly attribute one hold one value value added cannot removed analysis static properties cd constructs expressed z state schemata dynamic properties expressed z operation schemata section focus specifying basic static dynamic properties general associations compositions strong aggregation aggregation weak ag gregation generalization structures associations consider multiplicity changeability properties paper navigability visibility properties considered relevant cds ie reflect design considerations appear requirements models ordering secondary association properties considered paper 31 specifying classes z set objects belonging class configuration called configuration set class objects set referred configuration objects class isolation class interpreted set possible instances called object space class context cd class defines configuration sets subset object space interpretation class implies constraints associated class cd constraints configuration sets example class multiplicity restricts number objects configuration set class consistent use class constraints encountered uml oo modeling notations z object space class subclass represented basic type z static properties class defined state schema example class cl multiplicity attributes defined another schema clattribs operations identified elements type opids userdefined enumeration expressed z free types specified z follows object space cl instance schema configuration set cl cl attribs cl clattribs maps objects attribute values cl ops maps objects operation references multiplicity constraint dom cl dom cl ops cls behavioral specification operation given schema maps operation references elements opids current state class objects attribute values links parameter values set possible effects operation effect defined resultant state system malization operations viewed atomic requirements level detail formalization attributes operations paper see 3 indepth discussion 32 formalizing binary associations configuration binary association interpreted mathematical relation configuration sets associated classes satisfies stated constraints association binary association simply set object pairs pair called link careful reading uml document revealed terms multiplicity range multiplicity specification multiplicity property used loosely semantics part document mention multiplicity specification description association semantics page 257 one gets impression section association end associated single multiplicity defined range nonnegative integers use term range often implies contiguous nature seem case notation part omguml document gives clearer picture intent states association end multiplicity specification defines set multiplicities subset open set nonnegative integers page 368 also gives examples associationends associated multiple multiplicities understanding multiplicity expressed follows associationend multiplicity speci fication multiplicity specification set multiplicities multiplicity nonnegative integer range using developed following formalization multiplicity property consider association rel shown diagram instance schema instance schema rel uvst mn pq uv ranges static properties association rel specified z follows rel rel domrel cl 1s ran rel cl 2s cl cl 1s ffl relj fxg j tg formalization interesting interplay associationend multiplicity properties class multiplicity property identified consider case p greater 0 p expression cl implies least one cl2 object system must least cl1 objects system else predicate true multiplicity cl2 class x x 0 multiplicity cl1 class constrained lower bound must greater equal currently using formalization identify categories unnecessarily permissive associationend class multiplicities characterizations categories develop used case tools identify multiplicity constraints permis sive diagram multiplicity cl1 permissive time least 15 instantiated cl1 objects existence appropriate multiplicity cl1 15 rel 321 dynamic properties associations associationend changeable frozen ad donly changeable association end one restrictions placed links set objects associated classes uml default associationend frozen objects frozen association end referred target objects opposite end referred source objects eg see fig 1 omguml notion frozen association ends expressed follows pg 3 property ffrozeng indicates links may added deleted moved object toward end adornment object created initialized interpreted mean source object created additional links added source object target objects none links target objects created creation source object deleted consequence links created source object target object source object created links target objects created lifetime source object formalizing uml description frozen association ends consider question happens object frozen association end target object deleted could find answers omguml document within group felt appropriate answer link also deleted others felt violated constraint links removed source end lifetime source object emphasized text states interpretation phrase object created initialized omguml description frozen properties example consider instance schema instance schema source target class diagram object structure assoc binst ainst figure 1 example frozen association end object structure shown fig 1 object linked three b objects b1 b2 b3 links object b objects frozen clear deletion object would result destruction links necessarily target objects happens one b objects deleted linked source object deleted discussed uml document could find additional information omguml document resolve ambiguity defined two flavors frozen property weak strong frozen properties assoc association strong frozen property association end connected b see fig 1 deletion b object object structure shown fig 1 allowed associated object deleted shade frozen associations forces death dependency source target objects linked target object deleted frozen linked source objects destroyed target object linked one source object permitted associationend multiplicity specification assoc weak frozen property b end linked b object deleted independently linked source object resulting deletion corresponding link case assoc link frozen long either linked object exists let assoc schema defining static properties association assoc shown fig 1 assoc inst inst configuration set defined schema inst b configuration set bs defined inst two variants frozen property expressed strong frozen property frozendepassoc deltaassoc weak frozen property frozenindassoc deltaassoc schemata 0 c assoc domain restriction returns part assoc relation involves domain elements 0 configuration objects state symbol b represents range restriction applied relation r set range elements rbs returns part r involves range elements see section 2 uml association end said addonly links added source object none previously created links target objects deleted define two shades addonly property formally characterized association shown fig 2 deltaassoc weakadd deltaassoc strongadd assoc link created b cannot removed element instance schema instance schema source target assoc binst ainst figure 2 example addonly association end destroyed consequently b element cannot destroyed element destroyed weakadd linked b object deleted source object deleted case link deleted 33 formalizing aggregation uml aggregation corresponds intuitively wholepart association strong aggregation called composition composite aggregate uml infers strong ownership parts whole weak aggregation infers weak ownership distinguishing among general association weak aggregation composition requires formalizing uml notion ownership 331 formalizing simple composition weak ag gregation uml description composition implies multiplicity specification whole end singleton set consists single multiplicity either 11 01 omguml pg 257 composition mathematically modeled function component configuration set whole configuration set form z schema captures static properties composition association except composition relationship modeled function structurally functional relationship part whole characteristic composition note associations intended compositions modeled functions characteristic distinguish composition general association weak form aggregation weakens functional relationship components aggregates general relation allowing sharing compo nents weak aggregation component class aggregate class thus structurally equivalent general association classes one would comp1 agg comp21 13 figure 3 encapsulating composition expect distinguishing features weak strong aggregation would appear form dynamic properties discuss later formalization dynamic properties weak aggregation uncover distinguishing features 332 formalizing encapsulating composition uml composition contain associations umlomg document pg 375 meaning association composition tuple objects connected single link must belong container object refer composition contains associations encapsulating composition comp1 comp2 two component classes whole class whole comp1map maps comp1 objects whole objects comp2map maps comp2 objects whole objects comp1 comp2 related via encapsulating association rel property constraining linking comp1 comp2 expressed follows firstr returns first element pair r comp1 object secondr returns second element r comp2 object example aggregation structure shown fig 3 formalized following schema follows source rel defined rel sc comp 1 target comp 2 aggconfig agg inst instance schema agg rel sc association schema rel multiplicity properties also developed consider useful variations encapsulating associations weakening strengthening omguml property variations discussed 3 particularly useful stronger form encapsulation developed requires objects classes involved encapsulating association must linked occur parts aggregate means parts must appear pairs aggregate structure example clinical laboratory system test request modeled whole object consisting test sample object pairs ie tests without samples vice versa allowed test request 333 formalizing dynamic aspects aggrega tion clear us coincident lifetimes omg uml pg 371 means omguml document literal translation would result following inter pretation parts created time whole created destroyed whole destroyed consequently parts frozen lifetime whole interpretation contradicts intent whole may remove part give another composite object omguml pg 257 requires parts associated whole objects ie disallowing multiplicities 01 whole end propose following deletion property com positions whole composition deleted parts currently associated whole deleted property allows removal parts deletion whole others proposed similar properties eg see 2 9 given composition component comp whole agg defined schema comp agg deletion property compositions specified follows deltacomp agg whole objects deleted delaggs aggs objects must start configuration aggs objects deleted components removed previous section noted weak aggregation structurally equivalent general association unfortunately uml document provide enough information make distinction two concepts either structural behavioral per spective ways distinguishing weak aggregation general binary association currently exploring formalization 8 9 34 specifying generalization structures type space specialization hierarchy viewed carving root superclass object space subsets subset object space subclass configuration subclasses superclass subsets superclass configuration set static properties subclass sub superclass characterized instance schema super defines superclass configurations supers root superclass elements drawn set root defined following schema super inheritance superclass properties subclass config set object space predicate states configuration set subclass precisely objects configuration set super supers object space subclass sub superclass configuration set divided subclass configuration sets constrained follows ffl overlapping disjoint subclasses set subclasses said disjoint objects instances one subclass set otherwise set said consist overlapping subclasses subclass object spaces disjoint property stated followed z disjointhsubs also possible specify disjoint property subclass configuration sets allow object spaces overlap suspect need type constraint occur often omguml document discuss whether disjoint property applies object spaces configuration sets abstract exhaustive superclasses abstract superclass one superclass configuration object also configuration object least one depicted subclass superclass configuration objects configuration objects depicted subclass said nonabstract property configuration set supers abstract respect subclass configurations formalized z follows supers property also stated superclass object spaces omguml document make clear whether property applies object spaces configurations schema characterizing static properties generalization hierarchy created including schemata leaf subclasses declaration part together schemata define static properties classes hierarchy predicates expressing disjoint abstract properties predicate part example formalization generalization structure given next section precise characterization cd construct used infer structural properties constructs 1 using inference mechanisms eg proof techniques one explore consequences particular interpretation need establish properties also arise application development need show model conforms certain requirements challenges posed reviewers models rigorous analysis may also required tackle questions answers explicitly given model consider top model fig 4 model involves composition superclass specialized composition subclass sampleslot specialized association com position one involves subclass sub another class exists association name class super ancestor sub class multiplicities association superclass level constraints links formed objects superclass objects associated class given instances subclasses also instances su perclasses multiplicities superclass level also constrain links exist subclass objects objects associated class modeler restrict links subclass level explicitly stating multiplicities association subclass level multiplicities must consistent multiplicities given superclass level case specialized composition top model fig 4 top model fig 4 one may ask whether aggregation advanceanalyzer sampleslot implied aggregation analyzer sampleslot constraints aggregation informal analysis cd leads conjecture expressed uml terms fig 4 diagram expresses conjecture aggrega infers disjoint 1 regularanalyzer analyzer regularanalyzer analyzer advanceanalyzer advanceanalyzer figure 4 uml inference diagram tion analyzer level implies aggregation also holds advanceanalyzer sampleslot multiplicity sampleslot end 1 multiplicity advanceanalyzer end 01 informal reasoning produced conjecture follows advanced analyzer analyzer hence associated one sample slots note true absence information constrain number slots associated advanced analyzer known regular analyzers sample slots regular analyzers distinct advanced analyzers respective classes disjoint conclude sample slot either belongs regular analyzer advanced analyzer time implies sample slot either associated advanced analyzer specification characterizing cd top inference diagram fig 4 given slot analyzer analyzers analyzerconfig analyzer slot object spaces advanced regular analyzers configuration sets advanced regular analyzers composition mappings advanced analyzer config objects precisely config objects analyzer object space advanced analyzer regular analyzer config objects precisely config objects analyzer object space regular analyzer disjoint analyzers superclass abstract super agg 2 slots analyzers superclass composition sub agg 2 slotsae regs subclass composition subclass composition specializes superclass composition conjecture sample slot part zero one advanced analyzer formally stated follows 6j outline proof conjecture given ffl definition super agg get ffl given analyzers advs regs equivalent turn equivalent 9 advs ffl super ffl given regs implies 6j end proof sketch conjecture advanced analyzer one sample slots absence information constrain property expressed follows proof outline similar proof outline given paper precise semantics also lead development transformation rules employed within case tools 1 transform complex diagrams semantically equivalent simpler diagrams 2 transform diagrams semantically equivalent diagrams implicit properties made explicit inverse usually simplification 1 small set transformations discussed since enlarged set transformation rules structures involving specialized associations remaining part section illustrate rules developed defining transformation rules promoting demoting specialized binary associations generalization structures distinction made complete incomplete cds complete cd one states intended properties ie structure intended extended incomplete cd one state intended properties ie intent structure extended general one precise reasoning complete cds constraints possible extensions inferred incomplete cds demonstrated section example consider cd fig 5 cd considered complete objects linked objects c cd incomplete possibility objects linked objects c objects figure 5 complete vs incomplete cd rules presented section proven manner similar space allow us present proofs rules give instead justify rules informally informal presentation rules based insights gained carrying proofs demotion rule 1 association demotion complete cd fig 6 gives rule demotion binary association complete cd left hand side lhs model elements class linked elements class given objects subclass also objects superclass elements subclass linked objects class cd complete meaning association subclass objects objects class constrained superclass constraints given superclass object associated pq objects subclass object also associated pq objects shown right hand side rhs diagram turn object associated mn superclass objects including none superclass objects b objects including none c objects number b c objects associated object exceed n disjoint disjoint transformation pq mn pq pq rel rel reld pq mn aabs aabs figure demotion rule 1 note inverse rule simplification lhs diagram simplification rhs diagram demotion rule 2 association demotion incomplete cd lhs model fig 7 incomplete meaning additional information constrain association rel moved subclass level may missing case cannot precise cardinality subclass end association define boundaries missing information pertaining association rel example know cardinality subset 0n also know union associations subclass level must equal association superclass level case properties expressed superclass level inconsistent properties expressed subclass level disjoint disjoint transformation mn pq rel pq rel mn pq pq s1s2 subset 0n t1t2 subset 0n figure 7 demotion rule 2 indicate unknown value placing value reference rhs model s1 s2 t1 t2 unknown cardinalities completion model requires values supplied constraints unknown values expressed annotations enclosed fg cd promotion rule 1 association promotion complete cd lhs cd fig 8 complete meaning depicted association objects c association promoted c objects object space mapped objects others assumption object space b subset c ie b subclass c superclass nonabstract transformation still applies constraint rela rhs cd stipulates objects superclass linked either pq zero objects inverse transformation simplification lhs diagram simplification rhs diagram promotion rule 2 association promotion incomplete cd lhs cd fig 9 incomplete means association shown possibly involve objects transformation mn rela pq mn pq mn figure 8 promotion rule 1 c objects cardinalities inferred association superclass level rhs model cannot determined precisely infer cardinality end must subset object linked least c objects cardinality end subset 0 pq mn transformation pq mn subset includes mn subset 0 includes pq rela figure 9 promotion rule 2 5 conclusion paper provide glimpse role formal techniques play developing uml primary goal work provide support uml enables use rigorous modeling lan guage done defining precise semantics uml notations developing mechanisms allow developers rigorously analyze uml models work carried part collaborative effort define precise semantics uml undertaken precise uml puml group approach taken puml group use formal techniques explore define appropriate semantic foundations oo concepts uml notations use foundations develop rules transforming models enable rigorous analysis information puml effort found following website httpwwwcsyorkacukpuml currently working expressing z formalizations cds object constraint language ocl 10 exercise provide us insights ability ocl formally express uml semantics summary argue mathematicallybased techniques used rigorously analyze concepts upon semantics standard notation based acknowledgements work presented paper benefited interactions mirg methods integration research group puml group particular would like thank jeanmichel bruel andy evans brian hendersonsellers bernhard rumpe discussions around issues presented paper paper based work supported national science foundation grant ccr9803491 r reasoning uml class diagrams roles composite objects objectoriented analysis design rigorous objectoriented modeling integrating formal informal notations towards rigorous analysis fusion models mirg experience using z specification calculus objectoriented systems specifying interpreting class hierarchies z information modeling objectoriented approach object management group omg z notation reference manual tr z notation information modeling roles composite objects objectoriented analysis design rigorous objectoriented modeling using z specification calculus objectoriented systems reasoning uml class diagrams ctr jihyun lee cheoljung yoo okbae chang analysis object interaction enterprise javabeans lifecycle using formal specification technique acm sigplan notices v37 n6 june 2002 ana mara funes chris george formalizing uml class diagrams uml unified process idea group publishing hershey pa gailjoon ahn hongxin hu towards realizing formal rbac model real systems proceedings 12th acm symposium access control models technologies june 2022 2007 sophia antipolis france