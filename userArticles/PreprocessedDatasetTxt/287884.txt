engineering software design processes guide process execution abstracttusing systematic development processes important characteristic mature engineering discipline current software practice software design methodologies sdms intended used help design software systematically paper shows however one wellknown example sdm booch objectoriented design bood described literature imprecise incomplete considered fully systematic process specific projects provide effective appropriate guidance control software design processes applied process programming concept design process given two different sets plausible design process requirements elaborated two detailed precise design processes responsive requirements also implemented experimented evaluated prototype called debusbooch supports execution detailed processes b introduction software engineering make solid progress towards becoming mature discipline must move direction establishing standardized disciplined methods processes used systematically practitioners carrying routine software development tasks note standardized methods processes totally inflexible indeed must tailorable flexible enable different practitioners respond research supported advanced research projects agency arpa order 6100 program code 7e20 funded grant ccr8705162 national science foundation work also sponsored advanced research projects agency grant number mda97291j1012 known wide range software development situations correspondingly different ways regardless however basis mature discipline software engineering seems us entail able systematically execute clearly defined process carrying tasks paper refer process systematic provides precise specific guidance software practitioners rationally carry routine parts work design perhaps crucial task software development seems particularly crucial software design processes clearly defined way systematic humphrey hum93 says one great misconceptions creative work creative even advanced research development involves lot routine role process make routine aspects job truly routine agree believe design creative activity still contains lot routine systematized example making design decision probably creative eg deciding entity class using object oriented design method ever order making related design decisions relatively systematic eg identify class first define semantics relations also anticipate progress design communities design methodologies provide routine systematized help adapt sdms practice easily thus improve productivity software quality paper describes work aimed goalnamely make sdm processes systematic thus effective guiding designers work begins assumption large diversity software design methodologies sdms provides least starting point efforts provide software engineering community welldefined systematic design processes paper concentrates booch object oriented design methodology bood boo91 order provide specificity focus paper shows however bood described defined litera ture far vague provide specific guidance designers imprecise incomplete considered systematic process needs specific projects hand find bood could considered methodological framework family processes work builds upon basic ideas process programming ost87 suggest software processes thought software software processes designed coded executed case found bood described literature far closer architecture highlevel design design process code process bood seen amenable variety detailed designs encodings representing elaboration bood architecture sufficiently detailed specific systematic way consistent superior engineering practice older established engineering disciplines remainder paper indicate believe bood considered software design process architecture suggest two significantly different detailed designs elaborated bood viewed detailed elaboration upon basic bood architecture show elaborations defined precisely use accepted software design representations omt rbp use process coding languages appla indeed paper shows use formalisms exactly needed order render elaborations sufficiently complete precise considered systematic thus paper indicates path needs traveled order take work software design methodologists render adequate basis software engineering discipline first section 2 define process architecture provided bood describe two processes elaborated architecture second section 3 describe prototype supports designers carrying execution pro cesses illustrating differently elaborated processes support different execution requirements third section 4 describe experience using prototype summarize main issues arisen efforts take design process architectures described literature level encoded systematic design processes 2 bood architecture two elaborations 21 overview bood decided experiment bood bood widely used provides application examples useful helping us identify key issues elaborating bood level ex ecutable systematic processes detailed description bood found boo91 section present brief description architecture bood process believe summarized consisting following steps 1 classesobjects designers must first analyze application requirements specification identify basic classes objects could entities problem domain mechanisms needed support quirement step produces set candidate classes objects 2 determine semantics classesobjects designers must next determine candidate classes actually defined design specification class defined designers determine semantics specifying fields operations 3 define relations among classes step extension step 2 designers must define relationships among classes include use inheritance instantiation meta lationships steps 2 3 produce set class object diagrams templates might grouped class categories 4 implement classes designers must finally select use certain mechanisms programming constructs implement classesobjects step produces set modules might grouped subsystems bood provides hints guidelines carry steps however bood provides explicit elaboration details steps thus designers left fill important details complex major activities done result considerable range variation success carrying bood process carried relatively successful documented defined described way helps repeat effectively pass others reuse believe sense bood described literature process architecture provides broad features outlines produce design supplies elements thought used building blocks specific approaches design creation hand provides specific guidance details procedures filled others claim become design process designers eg authors hkk93 implementors method applied specific projects organizations 22 process definition formalism earlier experiences kh88 cko92 shown statecharts formalism hln 90 powerful vehicle modeling software processes thus use variant statecharts hln 90 dynamic modeling notation object modeling technique 91 model processes elaborate bood shown later believe dynamic models bood processes sufficient demonstrate point generally approach use notion state denoted labeled rounded box represent step bood process notion activity text inside rounded box represent step contain steps according omt order performing activities sequential parallel forms use order activities listed recommend plausible order performing activities transition denoted solid arc denotes moving one design step another text labels transition denote events cause transi tion text within brackets indicates guarding conditions transition text within parentheses denotes attributes passed along transition state could substates denotes substep step indeed modelling formalism generally inadequate characterizing certain details processes found sometimes necessary specify details order render process attempting specify sufficiently precisely could realistically considered systematic ex ample omt provide capability specifying sequencing two events sent transition specification order might well basis important guidance designer design issues ought considered others thus found necessary supplement omt using process coding language called appla sho90b model details appla superset ada supports many features found useful examples appla code also provided subsequent sections paper note goal work use process models codes demonstrate diversity details processes elaborated sdm shown later dynamic models bood processes sufficient demonstrate point thus develop omts object models function models bood processes 23 modeling bood architecture fig 1 represents omt model original bood process architecture described boo91 architecture merged step 2 3 original bood process experience shows hard separate steps practice booch also considers step 3 extension step 2 boo91 believe model considerably precise informal description originally provided still quite vague imprecise many important issues however booch boo91 claims vagueness necessary order assure users able tailor modify dictated specifics particular design situations example step 2 fig 1 define order editing various bood diagrams templates define clearly diagrams templates must specified order move step 2 step 3 booch claims different designers might important legitimate needs elaborate details different ways chapters 812 boo91 provide examples found indeed many ways details might elaborated precisely many different variants might offer better guidance differences might well arise differences application differences organization differences personnel expertise differences nature specific project constraints differences understood analyzed however design process carried defined suitable precision precise definitions needed order support adequate improvements efforts novices addition believe expert designers internalized 3 implement classes objects browse classobject diagrams requirements change list user initiates transition inconsistency found proposed modification requirements exist user initiates transition edit object diagram edit state transition diagram edit module diagram edit process diagram edit moduel template edit process template candidate classesobjects defined user initiates transition change list changes candidates list candidates edit class template edit timing diagram browse candidate classesobjects 2 identify semantics classesobjects edit object template edit class diagram list candidate classesobjects nouns 1 read requirements edit data flow diagram user initiates transition classobject diagramtemplates classobject diagramtemplate defined changes classobject diagramtemplates find inconsistency classobject diagramstemplates proposed modification user initiates transition user initiates transition proposed modification figure 1 process architecture bood specific effective elaborations bood architecture defined pre cisely important design expertise may understood reused automated improved order make remarks specific discuss two possible elaborations bood architecture addition using examples show need power design code representations vehicles making design processes clear thereby providing effective guidance 24 two examples bood process refinement 241 examples software project types first characterize two different types projects elaborate variants design pro cesses within outlines bood architecture see project properties columns table 1 parameters characterizations 1 implementation language documentation requirements project schedule designer skill 5 software operation domain software domain 7 maturity software domain based upon experiences identified two project types representatives projects commonly encounted software engineering practice see table 1 example instance project type 1 could defenserelated medical systems project instance project type 2 could civilian project expected elaborating processes fit requirements two different types projects would help us understand range processes could elaborated bood seven characterization parameters chosen earlier work indicated parameters likely major interesting effects upon design process elaboration example consulting siemens medical companies found us food drug administration fda specific documentation requirements requires control monitoring corrective actions product design fda89 says corrective action required action appropriately monitored schedule established completing corrective action quick fixes pro hibited certainly affects sdm applied specific project application examples described boo91 also provide us details seemed likely useful employing parameters help us derive boodbased design processes exam ple one boochs examples indicates c eventual application coding language classobject diagrams would need translated module diagrams addition boochs problem report application example boo91 helps us understand process requirements developing information processing system instance example shows method must tailored support design database schemas traffic control example helps us understand process requirements developing large scale deviceembedded system 242 processes elaborated bood section present portions omt diagrams used define details two elaborations basic bood architecture refine parts level executable code processes clearly booch design process represents consider completely plausible design process quite completely precisely definedto point systematic specific kinds projects two processes demonstrate point great deal imprecision current definition booch objectoriented design also indicate bood elaborated range elaboration might applied specific projects refer first elaborated process template oriented process top emphasizes defining various bood templates eg class tem plate hypothesizes importance carrying 1 template oriented example 2 diagram oriented example project properties process requirements project properties process requirements must coded ada specify module diagram must coded c guide designers specify module diagram since needed case must incorporate requires specification minimum documentation need enforce complete documentation templates required specifying templates longterm allow full documentation shortterm encourage use existing code skilled design team less process guidance inexperienced design team process guidance process flexibility less process flexibility safetycritical change control needed non safetycritical less change control needed eg medical systems satisfy fdas requirements large scale use structured analysis information processing system single familiar domain deviceembedded system support partitioning domain need support schema design state art project need support prototyping wellunderstood support prototyping needed need support code reuse table 1 project characteristics process requirements design activity delivers complete doc umentation tops emphasis complete documentation seen noting refined steps 2 3 fig 1 detailed model defined fig 2 hypothesized designing top software developed safetycritical therefore top enforce control design change often required government agencies ensure product quality accordingly note high level design top incorporates approval cycle changes previously defined artifacts hand hypothesized top executed skilled experienced designers refine detailed design activities lower level steps expectation designers would insist upon freedom flexibility would given also illustrates possible define design process precisely yet still provide considerable freedom flexibility practitioners addition designed top allow certain degree flexibility making transitions one step another also included possibility incorporating prototyping subprocess process refer second elaborated process diagram oriented process dop emphasizes specifying bood diagrams derived process boochs home heating system example boo91 dop hypothesized weak requirements area documentation therefore design need designers specify boods templates see figures 4 also hypothesized product designed coded language provides direct support programming classes objects reason dop omits step 3 general model shown fig 1 part elaboration leaving model defined fig 4 note elaboration incorporates fewer toplevel steps general bood model also hypothesized dop aimed supporting novice designers dop provides detailed guidelines identifying classesobjects see figures 5 6 7 addition dop assumes great deal importance placed upon reuse response dop incorporates steps guide designers reuse existing software components see fig 7 job creating specific detailed elaborations bood limited solely modification processing steps bood also entails specifying flow control steps substeps good example importance specifications seen examining change management handled design processes use term forward change management denote transition used maintain consistency changed artifact dependent artifacts normally specified later stage pro cess example designer may add class candidate class list step 1 fig 2 results forcing designers redo step 2 consider adding corresponding class class diagram virtually guidance bood precisely done critical tricky issues consistency management addressed thus clear need detailed guidance automatic change control one way done refine highlevel transition shown fig 8 fig 8 dotted line transition class represents event sent transition example transition selected class rejected class caused updating candidate class field needed false ie class longer needed sends event delete class class class clearly refinement simply one large assortment possible refinements claim one right one claim however supplying details provide specific guidance important designersespecially novice designers large design teams turn specifically designed process shown particularly useful desirable detailed specification also render amendable computer support also note stop level design diagrams refining meaning forward change management went defined actual executable process code code written appla process coding language fig 9 shows appla code process defined fig 8 note code provides even de tails example note code specifies changing candidate class candidate object cause ordered sequence events 1 insertion object template 2 removal class template 3 forwarding template step 3 editing object template stress specific details considered feasible elaboration boodonly one possible elaboration believe however specifying design process level detail deeper understandings result process becomes systematic addition reducing process executable appla code becomes possible use computer provide great deal automated support eg types automatic updating consistency maintenance human designers another kind control flow bood backward change management aimed maintaining consistency specified artifact artifacts upon specified artifact de pend artifacts normally defined earlier stages process example step 2 fig 2 designers may need define class class diagram find class correspond candidate class incomplete faulty analysis application requirements thus designers go back earlier steps reviewing requirements possibly redoing step 1 add class candidate class list transition refined coded manner similar described case forward change management browse requirement browse candidate classesobjects edit class diagram edit state transition diagram edit object diagram browse class diagram browse object diagram edit class templates edit class utility templates edit object templates browse object diagram browse class diagram edit module diagram edit process diagram edit device template edit process template edit module template browse module diagram determine semantics class step 3 specify classobject templates develop module diagram specify module template step inconsistency found requirements exist user initates transition classobject find inconsistencies candidate classobject diagrams list candidate classobjects candidate classesobjects defined reviewed user initiates transition user initiates transition classobject diargam user initiates transition step requirements changes candidates changed list changes approved diagrams changes changed diagrams classobject diagrams reviewed changes approved changed list changes candidates changes approved find inconsistencies classobject templates modification approved modification approved classobject diagrams find inconsistencies modification approved find inconsistencies class diagram changes classobject templates classobject templates changes approved user initiates transition classobject diagrams classobject templates classobject templates reviewed find inconsistencies module diagram modification approved user initiates transition module diagrams module diagrams defined changes module diagram changed module diagram figure 2 toplevel process definition template oriented process process definitions including main flow change management transitions explicitly clearly demonstrate published booch object oriented design description elaborated precisely defined process provide effective guidance specific projects research indicates observation quite generally applicable range sdms currently espoused widely community number reasons imprecision already noted imprecision intentionally permit wide variation design processes match similarly wide design process contexts requirements neither doubt dispute need believe work shown met effectively tailoring sdms specific needs projects processes resulting tailoring supported appropriate tools provide effective guidance help implement various recommended practices eg recommended fda fda89 next sections discuss support execution elaborations bood architecture described browse requirement browse requirements edit data flow diagram edit object diagram edit class diagram user initiates transition inappropriate problem definition step 11 step 12 problem boundary structured analysis step 14 prototyping user initiates transition problem proposed new definition problem user initiates transition definition approved problem user initiates transition domain analysis step 13 browse requirements edit candidate classobjects user initiates transitiondata flow diagrams problem definition approved candidate classobject candidate classobjects exist step 1 identify candidate classobject figure 3 secondlevel process definition template oriented process refinement step 1 2 identify semantics classesobjects requirements change list requirements exist user initiates transition design specification inconsistency found 1 change candidates user initiates transition list candidates candidate classesobjects defined browse candidate classesobjects edit class diagram edit object diagram edit state transition diagram edit timing diagram user initiates transition find inconsistency candidates classobject diagrams proposed modification figure 4 toplevel process definition diagram oriented process browse requirement problem definition inappropriate problem definition step 11 define problem boundary proposed definition domain analysis step 12 13 reusebased design user initiates transition candidate classesobjects user initiates transition problem defined candidate abstract class user initiates transition step 1 identify candidate classobject figure 5 secondlevel process definition diagram oriented process search noun search verb search adjective key abstractions browse requirement candidate classesobjects identify classes nouns decide operations verbs objects nouns identified nouns verbs adjectives user initiates transition change list nounsverbsadjective changes domain analysis step 12 step 121 step 122 figure thirdlevel process definition diagram oriented process refinement domain analysis reusable components develop object diagram edit concrete classes concrete classes instantiate abstract class user initiates transition user initiates transition user initiates transition concrete class user initiates transition abstract class change reusable components change semantics abstract class 13 reusebased design change object diagram new components new object diagram completed concrete classes abstract classes abstract classes class abstract classes reusable components reusable components candidate classes user initiates transition object diagram candidate classes find new sharable objects description objects figure 7 thirdlevel process definition diagram oriented process refinement reusebased design based boochs home heating system example 3 support executing bood pro experiment ideas demonstrate processes supported appropriately developed research prototype called debus booch support execution design processes sort described execution processes possible result encoding appla superset ada translated ada compiled executable code note bood addresses issues concerned supporting single users working single design project designers must work teams often engaged multiple projects simultane ously practical system support users must simply execute straightforward encodings bood elaborations debusbooch prototype adapts architecture used previous research prototype rebus shdh 91 architecture lets developers post done submit finished tasks whiteboard coordinate task assign ments since work published directly related topic paper describe selected class insert rejected class update rejected class b update update update existing class name existing class name insert selected class b terminated update delete selected object update rejected object class object insert class update delete class delete class delete class insert class insert object figure 8 refinement forward change man agement illustrates precisely change candidate list might affect class dia gramtemplates candidate recorded three fields name needed indicating selected candidate kind indicating class addition variety difficult user interface issues faced implementing system exhaustive treatment issues well beyond scope limitations paper indication approaches related problems seen following brief implementation discussion 31 system overview debusbooch provides four levels process guidance support endusers see fig 11 user interface representations 1 process selection accessed enables users select range elaborations bood ar chitecture nonatomic step elaboration shown fig 10 done selecting driver perform constrained sequence steps certain level selected process step hierarchy debusbooch helps users selection furnishing users access information nature various processes steps candidaterel classtemplate trigger maintaincandidate maintain product step 1 trigger body maintaincandidate begin loop trigger select upon candidaterelupdate needed newname updateneeded newneeded newkind completion change management necessary candidate selected updated case kind class candidate longer needed classtemplatedeletename name else candidate becomes needed classtemplateinsert name name query pname plen sname slen defineclassprocpnameplensname slen classtemplateupdate name name updatename true newname newname newneeded true case newkind object objectrelinsert name name classtemplatedelete name operation abstractclass case upon select figure 9 appla code defining forward change management candidate class list class di agramtemplate definitions process 1 process n step 11 step 12 step n1 step nm step 111 step 1111 process 2 console driver 11 driver 12 driver n1 driver nm driver 111 panel 1111 toolbutton 1 toolbutton 2 support initiate exclusive unspecified order constrained order debusbooch system interface architecture sdm model criteria guidline display display figure 10 sdm definition support model 2 process step execution accessed panel user obtain support sequencing coordination driver activities performed elaborated design pro cess activities divided two cat egories required optional activities ex ample step used determine semantics classes designers must use class diagram editor therefore supports required activ ity step designers may use requirements browser therefore supports optional activity designers invoke tools support required activities clicking set environment button using access method help designers set design environment easily note different processes may different required activities example template oriented process top editing class template required activity however contrast using diagram oriented process dop user cannot even access editor 3 atomic activitysupport ac cessed toolbutton user obtain support specific activity atomic step example user request access class diagram editor order obtain support defining class diagram activity performed determining semantics classes 4 documenation help support ac cessed displays support obtained conjunction use tools support atomic activities displays made available convey variety informa tion criteria guidelines examples measures so92 used help designers understand carry activity debusbooch provides flexibility needed experienced designers designers use console display access supports listed example designer click consoles steps button execute step elaborated bood process long guarding condition step satisfied otherwise invocation rejected figure shows four types support made available designers use debus booch particular figure indicates degrees interactions allowed among supports processes steps activities particular note support process execution provided exclusive basis believe reasonable use one process time design given sys tem major part system similarly constraints furnishing support simultaneous execution process steps often data dependencies steps hand support simultaneous execution activities unconstrained many design process activities must often highly cooperative practice sets activities must indeed carried constrained orders case necessary group composite steps decisions allowable degrees concurrency made based observations nature structure process models defined section 242 32 scenario use debusbooch general scenario indicates designers might use debusbooch see fig 11 1 designers select specific elaborated bood process menu popped pressing process button may select process selector retrieve information processes process process selector describes appropriate situations eg documentation requirements project deadline process used 2 upon clicking menu item ie selected process corresponding driver initi ated designers must enter name subsystem designed subsystem assigned management process highlevel system decomposition process eg case whiteboard shdh 3 subsystem name entered driver check design steps performed subsystem automatically set current substep order continue design subsystem tantamount process restarting suspended execution process previously stored checkpoint designer click run button invoke corresponding subdriver atomic step support 4 subdriver initiated step 3 repeated except designers need enter subsystem name 5 atomic step support invoked panel appears designers click toolbuttons invoke tools support activities carried atomic step 6 finished step designers click next step using steps buttons driver move process forward guarding condition eg see fig 2 next step true move succeed otherwise move rejected finishing final step elaborated process designer may go back first step start another iteration subsystem reviewing revising artifacts produced previous iteration thus debusbooch also provides supports process iteration scenario illustrates debusbooch provides different supports users using different process elaborations example using template oriented process user guided driver enforcement provided guarding condi tion specify module diagram useful ada used implementation language con trast using diagram oriented process user directed define module diagram considered value objectoriented language used 4 experience evaluation past year carried two experiments one evaluation debusbooch figure 11 stack debusbooch windows supporting booch method first experiment used prototype develop design example elevator control system realtime system controls moving elevators response requests users rc92 used example demonstrating arcadia consortium supports whole software development life cycle system requires full documentation implemented ada safetycritical deviceembedded design team include lead author students finished software design course thus project characteristics described template oriented example see table 1 experience experiment shows template oriented process top supported design development quite effectively process represented drivers panels guided us define bood templates module di agrams example designers guided define problem boundary first identify candidate classes controller button floor door experiment found set environment button frequently used effective guiding designers define required diagrams templates flexibility offered process allowed designers modify intermediate design specifications example designers often moved back step 1 step 2 ie determine semantics class step fig 2 modify candidate classes however ensure system safety process enforced stricter control backward changes directly affect actual design documentation example transition step 3 step 2 fig 2 strictly monitored using prototype found current implementation restrictive thus think debusbooch needs provide number rather one methods selected controlling transition examples may include 1 modification triggers revision history recording 2 modication triggers change notification mech anism 3 modication triggers change approval process example methods support different degrees control design process second experiment used debusbooch develop design problem reporting system described boo91 project fits five characteristics diagram oriented example see table 1 system coded c minimum document requirements safetycritical information processing system wellunderstood design team including lead author software engineer however experienced described diagram oriented example experiment experience similar first experiment one additional interesting experience wellunderstood domain eg design relational database schema process diagram oriented process dop could designed even specific therefore provide effective guidance ex ample steps 122 2 provide guidance normalization classes seems indicate building large system sdm might need tailored set different processes effective designing certain kinds components system example large system might contain embedded system data processing system case dop top processes might need applied developing system installed version debusbooch siemens corporate research scr technologists used prototype evaluated technologists specialized experienced evaluating case tools making recommendations siemens operating companies evalu ation technologists executed tool examined important features based upon ex perience technologists believe debusbooch particularly useful novice designers tool explicitly supports boods concepts processes experience tells us novice designers much interested using well de fined detailed process guide design tool debusbooch explicitly supports sdm process help learn sdm quickly experiences coming experiments evaluation 1 process execution hierarchy tree drivers panels fig 10 cannot deep two main reasons sugges tion 1 deep execution hierarchy needs much effort tracking detailed process states problem similar getting lost hyperspace problem found hypertext system con87 2 need minimize time overhead transiting various tools support various design steps suggestions clearly reinforce observations problem mental resource overhead so93 novice designers willing accept overhead trade guidance skilled designers however evaluation seems indicate even novice designers process execution tree cannot deep evaluation suggested three levels seem maximal 2 designers difficulty selecting processes users need stronger support selecting pro cesses textual help message associated process seems sufficient readable illustrative method must developed help users understand process requirements quickly thereby help users select appropriate processes 3 support coordination designers working different steps model focuses supporting designers work parallel designing different software components supporting individual designer work parallel multiple software components however current model weak coordinating two designers working software component different process steps example found finished class diagram might need passed another designer defining module diagram often helps utilizing different skills designers 4 need stronger support tracking coordinating processes suggestion closely related first suggestion evaluation indicates process tracking mechanism even important process guides designers relatively low levels process process tracking must emphasize indicating current state process help designers understand rationales goal performing step summary work developing elaborations bood architecture precise design process designs code brought number technical issues sharpened focus generally found quite feasible rewarding develop design processes level executable code raises number key issues easily swept rug process architectures process models many issues tended resolved informally ad hoc ways past stood way putting widespread practice superior software design processes following summarizes important interesting findings work 51 advantages detail process definition process modelers often struggle choose general process definitions specific process defini tions processes general often criticized providing useful guidelines processes specific often criticized leaving freedom designers found starting specific sdm bood elaborating making specific needs particular situation represents good blending two strategies serves make resulting process sharper deterministic thus helps make systematic susceptible computerized support seems worthwhile note taking approach tantamount pursuing process developing software design process piece software guided set process requirements assumed architectural specification case bood architecture therefore convinced importance dealing details elaborating design process architectures designs code summarize process design issues describe addressed using 1 step selection sdm often describes many could activities process descrip tion work turned many shouldmust activities order provide effective guidance example bood suggests specifying module diagrams however using implementation language directly supports programming classes objects debusbooch guides designers specify diagrams useless specific application see fig 4 process programming approach elaboration specific processes also found straightforward specify incorporate various related processes eg reuse proto typing design process see figures 3 5 7 example 2 refinement selection sdm generally provides guidance set highlevel steps highlevel step set guidelines designers often left free follow guidelines closely rely upon experience novice would tend follow guidelines skilled designers would rely experience support guidelines ap proach provide supports novice skilled designers novices use detailed process support guide design activities skilled designers use highlevel process support 3 control condition selection sdm usually specify strictly design changes managed usually specify precisely conditions step considered finished approach tailoring sdms specific projects define conditions quite precisely example medical system often safetycritical regulated fda decide provide strict control see fig 2 ensure system consistency reliability however experience using debusbooch shows control mechanism enabled specifications eg class diagrams stable used software components 4 control flow selection sdm usually specify possible transitions steps instead specifies likely done frequently transitions crucial ones may also difficult explain thus specified sufficiently precisely approach makes far easier add precision specification tran sitions example fig 8 shows various transitions needed modifying classes 5 concurrency specification noted earlier sdms intended specify support efforts single designer working one project time clearly unrealistic assume mode designers work therefore support mode work sufficient work adapted architecture shdh 91 capable supporting group development activities performed step allow individual designers work design parallel 52 related work seen work similar approach developing design processes software analyzing contrasting elaborated processes illustrating explicitly currently existing sdm descriptions cannot taken directly completely systematic process specific projects work unique indicates one might use process programming approach modeling coding sdm family systematic processes used corresponding family projects demonstrates sdm processes defined precisely precisely defined sdm process likely effectively supported thus provides effective guidance experiment encourages us confident using projectdomainspecific process programming approach solving many problems sharpening supporting software processes work eg studied mechanisms supporting generic software processes however without studying specific generic instantiated processes work value mechanisms hard evaluate work related projects aimed developing processcentered software environment like reported ms92 kf87 mr88 phi89 acm90 fo91 mgds90 dg90 significant difference efforts work work targeted specific process require ments provides specific strategies supporting specific processes emerge work acknowledged experts case experts domain software design ex ample provide specific interface architecture tool access methods supporting sdms various users contrast work developing processcentered environments aimed developing generalpurpose software development envi ronments instance mr88 supports specifying software development rules marvel kf87 general purpose programming environment describe specifically provide effective guidance using specific development method specific kinds projects another difference work focuses evaluating varied external behaviors system work focuses study implementation mechanisms process representation formalisms eg fo91 study mechanisms formalisms focus pa per comparisons formalisms eg appla others found shdh 6 status future work current prototype version debusbooch implemented using c guide user interface development tool appla incorporates stp awm89 arcadia prototypes whole prototype consists 34 unix processes supports console driver panel tools also demonstrated tools fair fifth international conference software development environments 1 present prototype enhanced conversion code appla incorporation new features new design process steps new design processes plan carry following future work 1 focusing specific project domains elaborate still specific process models support environments help deepen understanding project domains influences process requirements sdm elaborations 2 collecting data elaborated processes used based analysis data would able adjust processes scientifically 3 developing projectdomainspecific process gen erator specification project proper ties corresponding process definitions support environment might eventually automatically generated least part acknowledgments thank members arcadia software environment research consortium comments particularly stanley sutton mark maybee useful comments appla code also thank scr researchers particularly wenpao liao experimented evaluated prototype also grateful tom murphy dan paulish supporting us continue work scr thank bill sherman wen pao liao reviewing final version paper r software process enactment oikos wasserman r mechanisms generic process support booch method process pragmatics process modeling introduction sur vey managing software processes environment melmac preproduction quality assurance planning recommendations medical device manufacturers integration needs process enacted environments formalizing specification modeling ooa statemate working environment development complex reactive sys tems using personal software pro cess formalization design process architecture intelligent assistence software development software process modeling software development environment lawgoverned systems process integration case environments software processes software state change architecture prototype executable process models object oriented modeling design rebus requirements elevator control system object behavior analysis real time recursive design debus software design process program towards objective challenges executing design process tr ctr stanley p chien object pattern computer user interface systems information processing technology nova science publishers inc commack ny 2001