determinization weighted finite automata study problem constructing deterministic equivalent nondeterministic weighted finitestate automaton wfa determinization wfas important applications automatic speech recognition asr provide first polynomialtime algorithm test twins property determines wfa admits deterministic equivalent also give upper bounds size deterministic equivalent bound tight case acyclic wfas previously mohri presented superpolynomialtime algorithm test twins property also gave algorithm determinize wfas showed latter runs time linear size output deterministic equivalent exists otherwise terminate bounds imply upper bound running time algorithmgiven wfas expand exponentially size determinized explore occur asr tend shrink determinized according asr folklore phenomenon attributable solely fact asr wfas simple topology particular acyclic layered introduce simple class wfas structure show expansion determinization depends transition weights weightings cause shrink others including random weightings cause expand exponentially provide experimental evidence asr wfas exhibit weight dependence shrink determinized therefore result favorable weightings addition special topology analyses observations used design new approximate wfa determinization algorithm reported separate paper along experimental results showing achieves significant wfa size reduction negligible impact asr performance b introduction finitestate machines relation rational functions power series extensively studied 2 3 12 16 widely applied fields ranging image compression 911 14 natural language processing 17 18 24 26 subclass finitestate machines weighted finitestate automata wfas recently assumed new importance wfas provide powerful method manipulating models human language automatic speech recognition asr systems 19 20 new research direction also raises number challenging algorithmic questions 5 weighted finitestate automaton wfa nondeterministic finite automaton nfa alphabet symbol weight set k transition semiring together r generates partial function strings k value accepted string semiring sum accepting paths semiring product weights along accepting path partial function rational power series 25 important example asr set wfas minsum semiring compute accepted string minimum cost accepting path paper study problems related determinization wfas deter ministic sequential wfa one transition given input symbol state rational power series generated deterministic wfas determinization algorithm takes input wfa produces deterministic wfa generates rational power series one exists importance determinization asr well established 17 19 20 far know mohri 17 presented first determinization procedure wfas extending seminal ideas choffrut 7 8 weber klemm 27 regarding stringtostring transducers mohri gives determinization procedure three phases first converted equivalent unambiguous trim wfa using algorithm analogous one nfas 12 unambiguous trim defined mohri gives algorithm tt determines twins property also defined twins property deterministic equivalent twins property second algorithm mohris dta applied yield 0 deterministic equivalent algorithm tt runs om 4n 2 number transitions n number states algorithm runs time linear size 0 mohri observes 0 exponentially larger wfas include classical nfas gives upper bound worstcase statespace expansion however due weights classical nfa upper bound apply finally mohri gives algorithm takes deterministic wfa outputs minimumsize equivalent deterministic wfa paper present several results related determinization wfas section 3 give first polynomialtime algorithm test whether unambiguous wfa satisfies twins property runs om 2 n 6 time provide worstcase time complexity analysis dta number states output deterministic wfa 2 n2 lg nn 2 lg jsigmaj1 sigma input alphabet weights rational bound becomes 2 n2 lg n1minn 2 lg jsigmajae ae maximum bitsize weight input wfa acyclic bound becomes tight constant factors alphabet size sections 46 study questions motivated use wfa determinization asr 19 20 although determinization causes exponential statespace expansion worst case asr systems determinized wfas often smaller input wfas 17 fortuitous performance asr systems depends directly wfa size 19 20 study size reductions occur folklore explanation within asr community credits special topologythe underlying directed graph ignoring weightsfor phenomenon asr wfas tend multipartite acyclic wfa always admits deterministic equivalent section 4 exhibit multipartite acyclic wfas whose minimum equivalent deterministic wfas exponentially larger section 5 study class wfas rg simple multipartite acyclic topology absence weights deterministic equivalent smaller show 2 rg n exists assignment weights minimal equivalent deterministic wfa states using ideas universal hashing show similar results hold weights random ibit numbers call wfa weightdependent expansion determinization strongly determined weights examined experimentally effect varying weights actual wfas asr applications section 6 give results experiments asr examples weightdependent experimental results together theory develop show folklore explanation insufficient asr wfas shrink determinization topology weighting tend favorable results help explain nature wfas algorithmic point view ie weights assigned transitions wfa affect performance algorithms manipulating others relate directly theory weighted automata definitions terminology given semiring k weighted finite automaton wfa tuple set states q 2 q initial state sigma set symbols ffi q theta sigma theta k theta q set transitions q f q set final states assume throughout jsigma j 1 deterministic sequential wfa one transition wfa multiple transitions pair q 1 oe differing target state q 2 problems examined paper motivated primarily asr applications work minsum semiring furthermore algorithms considered use subtraction minsum semiring admits thus limit discussion minsum semiring consider sequence transitions induces string string w accepted q q q 2 accepted g accepts w let ct weight weight w set sequences transitions accept string w weight w weighted language g set weighted strings accepted g accepted gg intuitively weight transition g seen confidence one taking transition weights need however satisfy stochastic constraints probabilistic automata introduced rabin 22 fix two states q q 0 string v 2 sigma cq v q 0 minimum taken transition sequences q q 0 generating v refer cq v q 0 optimal cost generating v q q 0 generally abuse notation ffiq w represent set states reachable state q 2 q string w 2 sigma extend function ffi strings usual way q means sequence transitions q q 0 generating v topology g topg projection qthetasigma thetaq ffi ie transitions g without respect weights also refer topg graph underlying g wfa trim every state appears accepting path string transition weighted 0 1 minsum semiring wfa unambiguous exactly one accepting path accepted string determinization g problem computing deterministic wfa g 0 g 0 exists denote output algorithm dta dtag denote minimal deterministic wfa accepting lg ming one exists say g expands dtag states andor transitions g let size g n assume transition labeled exactly one symbol jsigma j recall weights g nonnegative real numbers let c maximum weight general case weights incommensurable real numbers requiring infinite precision integer case weights represented bits denote integral range b b z integer case extends case weights rationals requiring ae bits assume integer rational cases weights normalized remove excess leastsignificant zero bits analyses use ram model computation follows general case charge constant time arithmeticlogic operation involving weights real numbers refer model ram 21 relevant parameters analyses n jsigma j integer case also use ram except arithmeticlogic operation takes oae time refer model coram 1 relevant parameters analyses n jsigma j ae 3 determinization wfas 31 algorithm testing twins property definition 1 two states q q 0 wfa g twins 8u v 2 sigma 2 q 2 ffi following holds cq v twins property pairs q q 0 2 q twins states q q 0 reachable q common string q q 0 twins string induces cycle induces cycles equal optimal cost note two states cycle common string twins g trim unambiguous wfa g twins property 8u v 2 sigma 2 juvj 2n following holds exist two states q q 0 fq q 0 g ffi q u ii q 2 ffiq v must follow analogous stated choffrut 7 8 different terms weber klemm 27 identify necessary sufficient conditions stringtostring transducer admit sequential transducer realizing rational transduction proof techniques used wfas differ used obtain analogous results stringtostring transducers however particular efficient algorithm derive test wfa twins related weber klemm 27 testing twins stringtostring transducers define qq multipartite acyclic labeled weighted graph 2n 2 layers follows root vertex comprises layer zero corresponds q q 0 given vertices layer gamma 1 obtain vertices layer follows let u vertex layer corresponding q 1 connected u 0 corresponding q 0 2 layer two distinct transitions g arc connecting u u 0 labeled 2 sigma cost qq 2n let q q 0 vertex corresponding q q 0 layer qq let set pairs distinct states g reachable q qq q q 0 analogously qq fix two distinct states q q 0 g let q q 0 occurrences q q 0 qq 0 excluding q q 0 0 sequence may empty symmetric sequence extracted q 0 q refer sequences common cycles sequences q q 0 say q q 0 satisfy local twins property common cycles sequences empty b zero cost shortest path q q 0 0 q q 0 q lemma 2 let g trim unambiguous wfa g satisfies twins property rt empty ii q q 0 local twins property proof sketch outline proof sufficient condition nontrivial case states rt satisfy local twins property common cycles sequences empty let rt 0 set assume g satisfy twins property derive contradiction since rt 0 empty set pairs states ii satisfied lemma 1 empty since g satisfy twins property must exist two states q q 0 string 1 q q 0 reached initial state g string u ii q 2 ffiq v q loss generality assume one show q q 0 using fact g unambiguous one show exactly one path qq 0 root q q 0 jvj cost local twins property test whether trim unambiguous wfa twins property first compute qq set rt pair states q q 0 yet processed need compute qq 0 q 0 q respective shortest path trees theorem 1 let g trim unambiguous wfa general case whether g satisfies twins property checked om using ram integer case bound becomes oaem using coram 32 section describe algorithm give upper bound size deterministic machines produced algorithm results section 5 show upper bound tight within polynomial factors given wfa generalizes classic powerset construction construct deterministic wfa g 0 follows start state g 0 fq 0g forms initial queue p p 6 pop state p q 1g r values encode pathlength infor mation follows oe 2 sigma let fq 0 g set states reachable oetransitions q minimum weights oetransitions q 0 j q plus respective g let q add transition q oe ae q 0 g 0 push q 0 onto p q 0 new oetransition state q g 0 deterministic let tg w set sequences transitions g accept string w 2 sigma let g 0 w one sequence transitions g 0 accepts string mohri 17 shows ct g 0 let set sequences transitions g state q state q induce string w let g 0 w one sequence transitions g 0 induces string g 0 w ends state fq 1 shows ct g thus r remainder encodes difference weight shortest path state induces w g weight path inducing w g 0 hence least one remainder state must zero 33 analyzing first bound number states dtag denoted dtag theorem 2 wfa g twins property general case integer rational case dtag 2 n lg jsigmaj g acyclic independent assumptions weights acyclic bound tight constant factors alphabet proof sketch let r set remainders dtag let r set remainders r following holds 9w 2 sigma jwj two states q 1 q 2 j twins property implies r r worst case istate tuple g appear dtag j ituples remainders assume counts including tuples without zero remainders therefore dtag general case string length n reach pair necessarily distinct states g therefore jrj integer case remainders r 0 n acyclic case dtag bounded number strings weighted language accepted g bounded jsigma j n discuss tightness section 5 processing tuple stateremainders generated time excluding cost arithmetic min operations yielding following theorem 3 let g wfa satisfying twins property general case takes ojsigmajn ram rational integer case co ram acyclic case takes ojsigmajn m2 n lg jsigmaj time ram oaejsigmajn m2 n lg jsigmaj time coram use results generate hard instances determinization algorithm reweighting function simply reweighting f applied wfa g preserves topology g possibly changes weights want determine reweighting f minfg exists jminfgj maximized among reweightings minfg exists restrict attention integer case without loss generality assume g trim unambiguous theorem 2 shows weights affect growth dtag must ae n 2 lg jsigma j set ae find required reweight ing simply consider possible reweightings g satisfying twins property requiring ae max bits 2 ae possible reweightings takes 2 on2 lg nn 2 lg jsigmaj time compute expansion decide resulting machine cannot determinized bounding total time 4 hot automata section provides family acyclic multipartite wfas hot de terminized expand independently weights transitions given alphabet g consider language ie set nlength strings include symbols sigma simple obtain acyclic multipartite nfa h polyn size accepts l hard show minimal dfa accepting l theta2 nlg n states furthermore construct h bounds hold binary alphabet h corresponds wfa arcs weighted identically since acyclic wfas satisfy twins property always determinized altering weights increase expansion kintala wotschke 15 provide set nfas produces hierarchy expansion factors determinized providing additional examples hot wfas 5 weightdependent automata section study simple family wfas multipartite acyclic topology examine various reweightings affect size determinized equivalent family shrinks without weights expansion due weighting study related spirit previous works measuring nondeterminism finite automata 1315 however nondeterminism encoded weights first discuss case binary alphabet generalize arbitrary alphabets 51 rail graph denote rgk klayer rail graph rgk 2k g arcs 0 see fig 1 rgk 1partite also fixed outdegrees consider strings induced paths 0 either k b k language rgk set strings lrg nondeterministic choice state 0 either top bottom rail may selected hence string w accepted one two paths one following top rail bottom rail fig 1 topology klayer rail graph technically rgk ambiguous disambiguate rgk adding transitions k b k distinct symbol new final state results extend case clarity presentation discuss ambiguous rail graph rail graph weightdependent section 52 provide weightings produces k1vertex trivial seriesparallel graph graph k1 vertices transitions symbols vertices i1 1 k hand section 53 exhibit weightings rail graph cause dta produce exponential statespace expansions also explore relationship magnitude weights amount expansion possible section 54 show random weightings induce behavior worstcase weightings finally section 55 generalize rail graph arbitrary alphabets 52 weighting rgk consider determinizing rgk dta set states reachable string g given weighting function c let c w denote cost accepting string w top path taken ie c analogously define c b w corresponding cost along bottom path let rw remainder vector w pair form 0 c b 0 state layer 0 determinized wfa labeled ft string w leading state thus two strings w 1 w 2 identical length lead distinct states determinized version rail graph rw 1 convenient simply write w sign rw determines two forms 0 x x 0 remainder vector occurs denote weight top rsp bottom arc labeled oe vertex theorem 4 reweighting f consists seriesparallel graph proof f suffices since case rw 1 g particular giving zero weights suffices 53 worstcase weightings rgk theorem 5 j 2 0 k z reweighting f layers 0 j dtafrgk form complete binary tree 2 vertices proof sketch choose weighting consider pair strings w identical length w 1 6 w 2 weighting ensures rw 1 theorem 6 j 2 0 k z reweighting f layers 0 complete binary tree vertices theorem 6 generalized theorem 10 shows weightdependence artifact dta acyclic bound theorem 2 tight binary alphabets address sensitivity size expansion magnitude weights arguing exponential statespace expansion requires exponentially big weights rail graph means size expansion exponential number states superpolynomial number bits theorem 7 let f reweighting jdtafrgkj required encode frgk proof sketch must beomega remainders among states depth k determinized wfa necessitatingomega distinct permutations k bits among thusomega k weights must similarly highorder bits set corollary 1 let f reweighting jminfrgkj required encode frgk 54 random weightings rgk theorem 8 let g rgk weighted numbers chosen independently uniformly random 1 denotes expected value random variable x theorem 9 let g rgk weighted logarithms numbers chosen independently uniformly random 1 proofs theorems 8 9 use observation random functions defined rg essentially universal hash functions 6 bound sufficiently low probability remainders two distinct strings equal theorem 9 motivated fact weights asr wfas negated log probabilities extending rgk arbitrary alphabets extend rail graph arbitrary alphabets defining rgr k klayer r rail graph follows rgr assume alphabet 1 subgraph induced vertex 0 vertices v comprises rail rgr k subgraph induced vertices j comprises layer j rgr k vertex 0 comprises layer 0 rgr k thus rg2 k klayer rail graph rgk defined section 51 let ci j weight arc labeled vertex v theorems 4 5 generalize easily klayer rrail graphs theorem 6 generalizes rgr follows showing acyclic bound theorem 2 tight arbitrary alphabets theorem 10 j 2 0 k z reweighting f layers 0 complete rary tree r j gamma1 vertices proof sketch choose following weighting set ci 1 given two strings w 1 6 w 2 jw 1 j show w 1 w 2 must lead different vertices deterministic realization rgr k assume w 1 w 2 lead vertex let c w cost string w given suffix length k gamma show cw 1 c w 1 right hand side fixed value delta consider position w 1 w 2 differ denote ith symbol string w wi consider two suffixes 1 2 length observe given weighting rgr forces minimum cost path string symbol oe position j follow rail rgammaoe thus use show cw 1 6 experimental observations asr wfas determine whether asr wfas manifest weight dependence experimented 100 wfas generated att speech recognizer 23 using grammar air travel information system atis standard test bed 4 transition labeled word weighted recognizer negated log probability realizing transition source state refer weights speech weights determinized wfa speech weights zero weights weights assigned independently uniformly random 0 2 gamma1 z 0 could determinized speech weights due computational limitations omitted data figure 2a shows many wfas expanded determinized different weightings figure 2b classifies 63 wfas expanded least one weight ing wfa took weighting produced maximal expansion usually 8bit random weighting although due computational limitations unable determinize wfas large random weightings xaxis indicates open interval within value lgjdtagjjgj falls utility determinization asr includes reduction size achieved actual speech weights sample 82 wfas shrank determinized computed value lgjgjjdtagj plot results fig 2c fig 2d examine relationship value lgjdtagjjgj number bits used random weights chose ten wfas highest final expansion value plotted lgjdtagjjgj number bits used reference functions plotted number bits speech zerosbit rndbit rndbit rndbit rndbit rndbit rndbit rndbit rnd type weighting2060 number wfas expand log base 2 expansion factor515 number wfas b log base 2 shrinkage number wfas c number random bits26log expansion factor q0v004 fig 2 observations asr wfas wfas exhibit subexponential growth number bits increases although like q0t063 increased 128 times even four random bits wfa could determinized speech weights slightly hot determinized zeroweighted variant 27 arcs original wfa remaining ninetynine wfas shrank zero weights none hot one expanded due weights rather topology figure 2a indicates many wfas degree weight dependence figure 2d suggests random weights good way estimate degree wfa weight dependent note expansion factor superlin possibly exponential function number random bits suggesting large eg 32bit random weights cause expansion anything analogous experiments minimized determinized wfas yield results qualitatively although fewer wfas still expand minimization hence weight dependence seems fundamental property wfas rather artifact dta acknowledgements thank mehryar mohri fernando pereira antonio restivo fruitful discussions r network flows theory rational series languages algorithmic aspects speech recognition intro duction universal classes hash functions une caracterisation des fonctions sequentielles et des fonctions sous sequentielles en tant que relations rationnelles finite automata computing real functions computational power weighted finite automata measuring nondeterminism regular languages arithmetic coding weighted finite automata amounts nondeterminism finite automata use sequential transducers natural language processing speech recognition composition weighted finite automata weighted rational transductions application human language processing computational geometry introduction probabilistic automata att analyse syntaxique transformationelle du francais par transducteurs et lexique grammaire economy description singlevalued transducers tr ctr mark g eramian efficient simulation nondeterministic weighted finite automata journal automata languages combinatorics v9 n23 p257267 september 2004 bjrn borchardt pumping lemma decidability problems recognizable tree series acta cybernetica v16 n4 p509544 2004 julien quint equivalence weighted finitestate transducers proceedings acl 2004 interactive poster demonstration sessions p23es july 2126 2004 barcelona spain manfred droste dietrich kuske skew infinitary formal power series theoretical computer science v366 n3 p199227 20 november 2006 bjrn borchardt heiko vogler determinization finite state weighted tree automata journal automata languages combinatorics v8 n3 p417463 06012003 manfred droste paul gastin weighted automata weighted logics theoretical computer science v380 n12 p6986 june 2007 cyril allauzen mehryar mohri efficient algorithms testing twins property journal automata languages combinatorics v8 n2 p117144 april ines klimann sylvain lombardy jean mairesse christophe prieur deciding unambiguity sequentiality finitely ambiguous maxplus automaton theoretical computer science v327 n3 p349373 2 november 2004 sylvain lombardy jacques sakarovitch sequential theoretical computer science v356 n1 p224244 5 may 2006 manfred droste heiko vogler weighted tree automata weighted logics theoretical computer science v366 n3 p228247 20 november 2006