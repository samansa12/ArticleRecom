axioms realtime logics paper presents complete axiomatization two decidable propositional realtime linear temporal logics event clock logic eventclocktl metric interval temporal logic past metricintervaltl completeness proof consists effective proof building procedure eventclocktl result obtain complete axiomatization metricintervaltl providing axioms translating formulae two logics equally expressive proof structured yield axiomatizations also interesting fragments logics linear temporal logic real numbers tlr b introduction many realtime systems safetycritical therefore deserve specified mathematical precision end realtime linear temporal logics 5 proposed served basis specification languages preliminary version paper appeared proceedings tenth international conference concurrency theory concur lecture notes computer science 1466 springerverlag 1998 pp 219236 work supported part onr yip award n000149510520 nsf career award ccr9501708 nsf grant ccr9504469 darpanasa grant nag21214 aro muri grant daah049610341 belgian national fund scientific research fnrs european commission wgs aspire fireworks portuguese fct praxis xxi walloon region belgacom preprint submitted elsevier preprint 12 november 1999 use real numbers time advantages specification compositionality several syntaxes possible deal real time freeze quantification 412 explicit clocks firstorder temporal logic 1121 integration intervals 10 timebounded operators 17 study logics timebounded operators logics ones certain restrictions decidable satisfiability problem 5 logic extends operators temporal logic allow specification time bounds scope temporal operators example every p event followed q event exactly 1 time unit shown logic undecidable even recursively axiomatizable 4 one reason undecidability result ability specify exact distances events exact distance properties called punctuality properties logic metricintervaltl obtained removing ability specify punctuality properties bounds appearing temporal operators must nonsingular intervals example formula expresses every p event followed q event least 1 time unit 2 time units metricintervaltl formula interval 1 2 nonsingular logic metricintervaltl decidable 3 decidability result allows program verification using automatic techniques however specification large contains firstorder parts mixture automatic manual proof generation suitable unfortunately current automatic reasoning techniques based timed automata provide explicit proofs secondly axiomatization provides deep insights logic third complete axiomatization serves yardstick definition relative completeness expressive logics firstorder extensions completely axiomatizable style 1620 axiomatization timebounded operator logics cited important open question 517 provide complete axiom system decidable realtime logics proofbuilding procedure build axiom system considering increasingly complex logics ltr 6 eventclocktl past clocks event past future clocks also called past future operators method use show completeness axiomatization standard show possible construct model consistent formula specifically proof completeness adaptation extension proof completeness axiomatization handling realtime operators requires care represents core technical contribution paper previous works presented axioms realtime logics true versus relative completeness result dense realtime 12 completeness results given realtime logics explicit clocks timebounded operators time modeled discrete time domain natural numbers 97 completeness result presented qualitative non realtime part logics considered pa per time domain considered dense hypothesis finite variability consider 1 dropped consequence different techniques applied 17 axioms realtime logics proposed axioms given firstorder extensions logics relative completeness results studied note completeness result given firstorder temporal logics finally relative completeness result given duration calculus 10 completeness relative hypothesis valid interval logic formulae provable models logics realtime 21 models time domain choose nonnegative real numbers r 0g dense domain natural gives many advantages detailed elsewhere compositionality 6 full abstractness 6 stuttering independence 1 easy refinement advantages results paper mainly depend density easily adapted rational numbers q real numbers r avoid zenos paradox add models condition finite variability 6 condition 3 finitely many state changes occur finite amount time interval convex subset time given 2 freely use notations interval ft 0 j 9t 00 2 constraint 0 0 2 interval ft 0j9t g bounded nonempty interval infimum also called greatest lower bound left endpoint begin supremum also called least upper bound right endpoint end interval thus usually written eg l r l left endpoint rounded parenthesis l indicates l excluded interval r right endpoint square parenthesis r indicates r included interval interval called leftopen rightclosed extend notation usual allowing r 1 interval written form two intervals j adjacent right endpoint noted ri equal left endpoint j noted lj either rightopen j leftclosed rightclosed j leftopen say nonempty 1 every finite interval time interpretation propositions change finitely many times interval singular ri case often use rather similarly l abbreviates 0 l etc interval sequence infinite sequence nonempty bounded intervals 1 first interval 0 leftclosed left endpoint 0 2 0 intervals i1 adjacent 3 2 exists consequently interval sequence partitions time every bounded subset covered finitely many elements partition let p set propositional symbols state p set propositions timed state sequence pair consists infinite sequence states interval sequence intuitively states period state thus timed state sequence viewed function 2 p indicating time 2 state 22 linear temporal logic real numbers ltr formulae ltr 6 built propositional symbols boolean con nectives temporal since generated following p proposition ltr formula oe holds time 2 timed state sequence written according following definition ltr formula oe satisfiable exists time oe ltr formula oe valid every every time logic shown expressively equivalent monadic firstorder logic order reals 15 operators u slightly nonclassical intuitive require oe 2 start leftclosed interval hand slightly weaker classical variant together expressive power show providing mutual translations sections 221 241 thus simple matter taste note classical u 221 abbreviations sequel use following abbreviations defined reflexive first argument reflexive two arguments meaning future short time future dual fl noted k 9 means thus arbitrarily close future dont introduce since see due finite variability fl dual meaning eventually future meaning always future ffl reflexive counterparts sigma meaning unless future ffl reflexive counterparts w past counterpart abbreviations since reflexive first argument since reflexive two arguments meaning past arbitrarily close meaning eventually past meaning always past ffl reflexive counterparts meaning unless past ffl reflexive counterparts z 23 eventclock temporal logic formulae eventclocktl 22 built propositional symbols boolean connectives temporal since operators two realtime op erators time history operator oe asserts oe true last interval gamma prediction operator oe asserts oe true next interval formulae eventclocktl generated following oe p proposition interval empty singular whose bounds natural numbers infinite holds time 2 timed state sequence written according timevalue timed trace sequence event tick reset event reset event reset undefined small big blocked small small blocked small tick event clock fig 1 history clock evolving time rules ltr following additional clauses oe formula intuitively seen expressing constraint value clock measures distance next time formula oe true sequel use analogy call clock prediction clock oe similarly oe formula seen constraint value clock records distance last time formula oe true call clock history clock oe history resp prediction clock oe ffl next 1 oe resp previous 1 oe called tick ffl point oe held last resp hold next called event ffl point oe hold resp held last called reset ffl oe true time true resp still true say clock blocked time ffl oe never true resp never true clock undefined time main part axiomatization consists describing behavior relation clocks time formal account relation eventclocktl formulae clocks refer interested reader 22 simply recall theorem 1 22 satisfiability problem eventclocktl complete pspace best result expected since temporal logic complexity example 1 p 5 p asserts every p state first subsequent p state exactly 5 units later p false formula 5 asserts whenever last p state exactly 5 units ago q true timeout 24 metricinterval temporal logic restricts power metrictlin apparently different way eventclocktl realtime constraints attached directly cannot punctual formulae metricintervaltl 3 built propositional symbols boolean connectives timebounded since operators u oe 2 j oe 1 oe 2 p proposition nonsingular interval whose bounds natural numbers infinite holds time timed state sequence written according following definition propositional boolean clauses ltr u oe 2 iff 9t used classical respect original definition doesnt matter explained subsection 221 theorem 2 3 satisfiability problem metricintervaltl complete expspace although logics equally expressive translation must difficult enough absorb difference complexity translation presented section 5 indeed gives exponential blowup formulae 241 abbreviations sequel use following abbreviations u 01 oe 2 untimed metricintervaltl uoe expresses next oeinterval leftclosed u oe 2 u oe meaning within ffl oe j sigma oe meaning always within past counterpart abbreviations fact use notations logics intentional harmless since definitions semantically equivalent furthermore redefined basic operators eventclocktl also use abbreviations asserts every q state preceded p state time difference 5 rightclosed intermediate states r states formula p sigma 56 p asserts every p state followed p state time difference least 5 less 6 time units weaker eventclocktl example since p might also hold course 5 units exactly required 3 axiomatization eventclocktl section 4 present proofbuilding procedure eventclocktl section simply collect axioms used procedure present intuitive meaning logics symmetric past future duality call mirror principle except time begins end therefore axioms written future understanding mirror images obtained replacing u etc also axioms mean axiomatization future fragment logics axioms make past future interact proof technique makes interaction unavoidable mainly axiom 11 31 qualitative axioms complete ltr use rule inference replacement equivalent formulae 1 propositional tautologies 2 nonmetric part use following axioms mirror images mainly make use fl operator shall see corresponds transition relation structure axiom 3 usual necessitation modal generalization rule expressed axiom similarly 4 usual weakening principle expressed slightly nonclassical form 5 6 allow distribute fl boolean operators note validity 6 requires finite variability 7 8 describe u operators transmitted interval boundaries 9 gives local consistency conditions transmission 10 ensures eventuality combined 11 also seen weakening left side u induction axiom essential express finite variability property transmitted interval boundaries true point said otherwise point reached crossing finitely many interval boundaries axioms express time begins 12 end 13 written axioms independent begin end axioms order deal easily time domains see subsection 44 apparently spurious fl occur eg 11 useful future bounded remark 3 theorem 21 shows axioms form complete axiomatization logic real numbers finite variability defined ltr 6 system proposed 6 unfortunately unsound redundant incomplete indeed axiom f5 6 unsound axiom f7 deduced axiom f8 system cannot derive induction axiom 11 see last point take structure formed r 0 followed r finite variability satisfies system 6 corrected according 7 induction axiom thus valid formula cannot derived system 32 quantitative axioms realtime part first describe static behavior intersection union intervals translated conjunction disjunction due fact single next event ij oe oe j oe 14 ij oe oe j oe 15 since strict future operator value 0 never used constrain time next occurrence simply require future occurrence finally addition corresponds nesting next step proof describe single realtime oe evolves time using fl use 20 reduce leftopen events easier case leftclosed ones axioms complete formulae realtime operators prediction operators oe track qualitative formula oe single history tracked formula use mirror axioms plus axiom expressing future time infinite bound exceeded description provided axioms mostly expressed automaton figure 2 showing possible evolution history predicates figure receive formal status lemma 22 consequences oe fig 2 possible evolutions history clock axioms simply read automaton instance 1 oe 1 oe oeu fl 1 oe checked looking paths starting 1 oe soon several formulae present cannot combine individual behavior evolve synchronously common implicit real time use family axioms mirrors express common speed express properties order addition expressed different clocks said otherwise ordering ticks correspond ordering events use u w express ordering puq means q occur time p eg 26 antecedent 1 oe states oe ticks thus together events shall order oes similarly 30 says last oe less 1 ago even closer last less 1 ago well 33 theorems use proof derived rules ltr thus eventclocktl lemma 4 rules modus ponens modal generalization derivable oe proof ffl rule modus ponens 32 derived replacement 1 follows oe deduce propositionally oe 1 replace oe propositionally ffl rule modal generalization 33 also called necessitation derived similarly 1 3 oe deduce oe replacing 3 obtain uoe taking get lambdaoe well also need theorems oe sigmaoe oe 43 oe oe j oe j 45 proof 13 remove condition fl mirror 6 use 5 duality 34 expanding definition prove soe results mirror 4 oe 0 oe 36 formulae false beginning time 38 8 7 40 13 10 41 take 14 j 0 0 16 obtain 42 well prove mirror 14 0 17 sigma 10 fl 43 15 14 17 44 15 14 17 45 15 14 4 4 completeness axiomatic system eventclocktl usual soundness system axioms proved simple inductive reasoning structure axioms concentrate difficult part completeness proposed axiomatic system usual temporal logic weak completeness every valid formula eventclocktl exists finite formal derivation axiomatic system formula often convenient prove contrapositive every consistent eventclocktl formula satisfiable due mirror principle explanations given future proof divided steps prove completeness increasing fragments eventclocktl 1 first deal qualitative part without realtime part proof follows roughly completeness proof 19 discretetime logic work worlds built syntactically maximal consistent sets formulae b identify transition relation syntactic counterpart next operator discretetime logic 19 fl expressing transition closed open interval expressing transition open closed interval c impose axioms describing possible transitions operator give induction principle 11 extends properties local transitions global properties 2 realtime part give statics clock b describe transitions clock c axioms force clocks evolve simultaneously completeness axioms proved showing realistic clock evolutions allowed axioms 41 qualitative part let us assume formula ff consistent let us prove satisfiable simplify presentation proof use following lemma lemma 5 every eventclocktl formula rewritten equivalent formula using constant 1 proof first use theorem oe oe oe 44 every formula oe li 6 0 rewritten conjunction formulae 0bounded intervals using axioms mn oe n oe 18 every interval decomposed nesting operators associated intervals length 1 xi sequel assume formula ff want construct model eventclocktl 1 allowed lemma 5 define set cff formulae associated ff ffl sub subformulae ff ffl formulae sub subject future realtime constraint subg say prediction clock associated formulae ffl formulae also track floe next occurrence oe leftopen simplify notation information oe reconstructed axiom 20 rg ffl select whether track oe floe need formulae giving openness next interval ffl formulae giving current integer value clocks f1 oe 1 oe jg thanks initial transformation consider whether integer value 1 among tick formulae used f determine fractional parts clocks ig ffl also define mirror sets instance ffl formulae giving ordering fractional parts clocks coded ordering ticks g ffl eventualities ffl constant true used lemma 14 close union sets fl obtain closure ff noted cff step preserves finiteness since stop adding one operators theorems 39 38 show addition would semantically useless past 6 37 also give result since two possible cases true move negations outside cancel except perhaps one otherwise know false 4 case one fl one needed use notational convention identify formulas simplified form example write oe 2 cff floe 2 cff mean simplification operator note although qualitative part need already include realtime formulae used later subsection behave simple propositions propositionally consistent structure set formulae f ae cff complete wrt cff formulae oe 2 cff either oe 2 f oe 2 f propositionally consistent call set propositional atom cff define first structure finite graph set propositional atoms cff delta theta transition relation structure delta defined considering two subrelations represents transition rightclosed leftopen interval represents transition rightopen leftclosed interval propositional atoms define transition relation delta union delta define atom singular iff contains formula symmetrically oe oe lemma 6 following b atoms 1 singular iff irreflexive ie 2 adelta b singular b singular singular b singular singular one atom unique c b delta c initial iff contains singular since contains monitored iff contains ff formula check floating satisfiability atom exactly represented conjunction formulae contains written propositional completeness lemma 7 w relation delta define formula deltaa w b formula b simplified v floe2a oe propositional structure members b allowed vary freely thus cancel distribution rule lemma proof dually w b simplified v oe2a oe therefore lemma 9 let delta transitive closure delta since delta similarly lemma using disjunction rule reachable obtain use induction axiom using necessitation 33 modus ponens 32 obtain lemma eventclocktlconsistent structure say atom eventclocktlconsistent propositionally consistent consistent axioms rules given section 3 consider structure delta subset propositional atoms eventclocktlconsistent lambdag note lemmas still valid structure pi inconsistent atoms suppressed investigate deeply properties structure pi show prove structure consistent formula ff satisfiable first define notions ffl maximal strongly connected substructure mscsomega nonempty set structure pi 1 every atom reach atoms omegagamma ie omega strongly connected 2 1 2omega ieomega maximal ffl mscsomega called initial 1 deltad 2 2 2omega 1 2 omegagamma ie omega incoming edges ffl mscsomega called final 1 deltad 2 1 2omega 2 2 omegagamma ieomega outgoing edges ffl mscsomega called selffulfilling every formula form oe 1 uoe 2 2 2 omegagamma exists b 2omega oe 2 2 b establish two properties mscs structure pi every final mscsomega structure pi selffulfilling proof let us make hypothesis exists oe 1 uoe 2 2 2omega b 2 oe 2 62 b lemma 12 hypothesis oe 2 62 b theorem 46 propositional reasoning conclude using axiom 10 hypothesis oe 1 obtain definition sigma obtain contradiction impossible since hypothesis consistent xi lemma 14 every nonempty initial mscsomega structure pi contains initial atom ie exists 2omega 62 proof definition initial mscs know 1 deltad 2 2 2 omegagamma us make hypothesis 2 omegagamma 2 mirror lemma 12 conclude propositional reasoning hypothesis 2 contradicts axiom 12 62 pi thusomega empty xi actually initial mscs made single initial atom sequel concentrate particular paths called runs structure pi run structure delta infinite sequence atoms infinite sequence intervals 1 initiality 0 initial atom 2 consecution every 0 3 singularity every 0 singular atom singular alternation 0 alternates singular open intervals ie 0 2i singular 2i1 open 5 eventuality set fa n nmg final mscs note moment timing information provided purely qualitative singular open therefore alternating sequence adequate qualitative stage later construct specific sequence satisfying also realtime constraints sequel given aet denotes atom 2 lemma 15 transition relation delta structure pi total ie atoms 2 exists atom deltab proof prove consistent thus completed form atom b assume definition replace 13 giving fl phi phi 5 set ffloej fl oe 2 ag ffloej fl oe 2 ag inconsistent using 34 set ffloejfloe 2 agffloejfloe 2 ag inconsistent thus inconsistent contradicting 2 xi lemma 16 every atom structure pi run ae passes proof 1 initiality ie every atom pi either initial reached initial atom let us consider atom initial done otherwise let us make hypothesis reached initial atom means b propositional completeness 2 b lemma 12 propositional reasoning using axiom 12 obtain contradiction use path first part run 2 consecution construction 3 singularity ie every odd atom singular first second part run obtain taking simple path thus without selfloops since first atom 0 initial singular nonsingular singular states alternate lemma 6 final repetition technique might work mscs single atom know single atom nonsingular thus singularity also verified alternation choose alternating interval sequence since timing information irrelevant point eventuality ie every atom pi reach one final mscs pi direct consequence fact delta total fact finite use reaching path second part run infinite repetition final mscs run structure pi qualitative hintikka property respects semantics qualitative temporal operators expressed following conditions realtime operators treated following h1 singular singular either singular exists j st oe 2 2 j k st singular 2 exists either singular exists k st singular 2 exists call run qualitative hintikka run next show properties additional properties runs related hintikka properties lemma 17 every run structure pi every 0 sigmaoe 2 ffl either singular exists ffl nonsingular exists j oe 2 j proof first let us prove following properties transition relation delta recall sigmaoe j uoe definition propositional reasoning obtain definition mirror axiom 8 propositional reasoning obtain two properties sigmaoe 2 either oe appears j j singular thus right closed j singular thus open interval oe never true sigmaoe propagates rest run last possibility excluded definition run clause 5 every run eventually loops final thus selffulfilling lemma mscsomegagamma either oe realized looping sigmaoe 2omega 2omega thus eventually realized xi lemma every run structure pi every position run oe 1 uoe 2 2 right implication property h2 verified ie ffl either singular exists k st ffl singular 2 exists proof hypothesis know oe 1 uoe 2 2 first treat case singular ffl axiom 10 lemma 17 know exists j us make hypothesis j first oe 2 atom ffl remains us show k st reason induction value k base case hypothesis oe 1 uoe 2 2 also right closed thus floe 2 oe 2 i1 definition theorem 35 axiom 5 fact hypothesis oe 2 62 i1 prop allows us conclude oe 1 2 i1 induction case induction hypothesis know oe 1 2 kgamma1 oe 1 first position oe 2 verified establish result reason cases k open thus kgamma1 singular right closed thus floe 2 cff floe 2 definition oe 1 uoe 2 2 kgamma1 induction hypothesis axiom 7 conclude oe 1 uoe 2 2 k using axiom 9 theorem 35 axiom 5 fact oe 2 62 k prop conclude oe 1 2 k 2 k closed implies kgamma1 right open kgamma1 definition oe 2 cff oe 2 k oe 2 2 k using properties mirror axiom 8 conclude oe 1 oe 1 uoe 2 2 k treat case singular axiom lemma 17 know exists later atom j ie j done otherwise j must prove k st done reasoning xi prove reverse ie every time oe 1 uoe 2 verified atom along run oe 1 uoe 2 appears atom lemma necessary qualitative completeness use property lemmas realtime operators lemma 19 every run structure pi every position ffl either singular exists k st ffl singular 2 exists proof reason considering three following mutually exclusive cases 1 singular exists reason induction show oe 1 uoe 2 2 j gammal l st ffl base case l 1 hypothesis know oe 2 2 j reason cases j gamma1 right closed j gamma1 definition using axiom 9 deduce prop b j gamma1 right open know hypothesis thus oe 1 2 j gamma1 also j gamma1 using mirror axiom 8 propositional reasoning definition ffl induction case 1 l established result us show result j gammal first note hypothesis oe 1 2 j gammalgamma1 reason cases j gammal right closed j gammal definition gammal axiom 7 oe 1 uoe 2 2 j gammal b j gammal right open j gammal definition gammal know hypothesis oe 1 2 j gammal singular j gammal induction hypothesis using mirror axiom 8 propositional reasoning obtain oe 1 definition oe 1 uoe 2 2 j gammal 2 singular oe 2 2 j singular definition axiom 9 proposition reasoning obtain desired result oe 1 uoe 2 2 3 singular oe 2 62 j exists case treated inductive reasoning similar first one also two corresponding mirror lemmas soperator previous proved lemmas shown qualitative axioms section 3 complete qualitative fragment eventclocktl ie logic ltr lemma 20 run ae hintikka property ltr formulae every proof hintikka property proved lemmas expressed without reference time remains prove implies usual definition induction formulae must prove 9t 0 h2 course take 0 somewhere j 0 divided 3 parts part empty singular part k j part j 2 conversely usual definition implies h2 first note given aet singular singular means lemma 6 thus merge i1 ensure singular iff singular without loss generality let j first index oe 2 singular else j take 0 j without loss generality since need 00 must h3 symmetric xi finally following theorem expresses completeness qualitative axioms logic ltr theorem 21 every ltr formula consistent qualitative axioms satisfiable proof let ff consistent ltr formula construct delta let atom structure ff 2 atom b exists ff consistent lemma 16 exists run 0 lemma 20 ae thus ff turn completeness realtime axioms 42 quantitative part run structure pi timed hintikka property respects hintikka properties defined previously two following additional properties h4 oe 2 aet iff exists 0 2 ti oe 2 aet 0 run respects additional properties called welltimed run sequel show run structure pi modify sequence intervals using procedure way modified run welltimed recall given tracked formula oe 2 r ffl 1 oe called tick called event note second case need considered thanks axioms 20 ffl oe oe oe floe called reset evolution realtime predicates described figure 2 see status drawing lemma 22 tracked formula oe 2 r projection pi restricted atoms containing formulae coe oe 1 oe 1 oe 1 oe sigmagammaoe contained figure 2 proof suffices show consistent atoms transitions added figure ffl atoms axioms 15 17 14 16 ffl transitions simply take missing arrows figure show cannot exist proof fairly long show excerpts 1 assume atom containing oe 1 oe linked atom b containing oe way b axioms 14 15 16 1 oe 2 b definition 34 fl 1 oe 2 main step use mirror 23 negated sides fl impossible 13 thus conclude contradicting oe 2 2 show two transitions eliminated restriction coe first one contains 1 oe oe coe contains 1 oe oe prove using 9 detail coe abbreviates oeuoe oe applying 9 unfolding u obtain using first disjunct impossible 5 34 38 hand definition whence contradiction 3 second transition eliminated contains 1 oe oe coe b contains 1 oe oe definition axiom 22 contradicting 1 oe 2 constraint realtime formula atom begin constraint index e previous event tick reset occurred end constraint index j next event tick reset occurs vocabulary refers order time begin always corresponding end whether history prediction operators begins ends ticks resets events always singular say history clock oe active event oe next reset oe small event next tick reset big big doesnt give actual constraints since stay big time one hand hand passed first tick forced 1 time unit apart event thus monotonicity time ensure big constraints indeed semantically true define scope constraint interval event next tick reset equivalently begin end vocabulary applies symmetrically prediction operators actual constraints either equalities time spend scope must 1 linking event tick inequalities time spend scope must less 1 inequality always linked small clock constraints partially ordered scope enough solve constraints maximal scope shall see constraint maximal scope always owns indexes found end scope scope inequality extends event reset whether atom scope constraint deduced contents table shows contents atom end equality distinguish prediction history cases table simplified fact assume events closed begin atom closest one past contain indicated formulae table equality constraints ticking clocks begin end 1 oe tick oe oes 1 oe event table shows contents atom indicating clock small thus scope constraint whose begin whose end begin resp end closest atoms indicated contents table small clocks begin end tick reset note existence begin ends guaranteed fig 2 clock cannot stay small forever section furthermore enforce stay small 1 unit time proof shows constraints solved iff compatible sense scope equality cannot included scope inequality strictly scope another equality axioms several clocks ensure compatibility previous section built run irrelevant qualitatively correct run build welltimed run j attributing wellchosen sequence intervals atoms run satisfy realtime constraints introduce two lemmas algorithm relies also read fig 2 lemma 23 every run structure pi proof lemma direct consequence mirrors axioms 14 17 xi lemma 24 every run structure pi 1 2 exists proof lemma direct consequence mirror axiom 10 xi algorithm proceeds induction along run attributing time points consequence open interval attributed odd dont mention define even ie attribute interval 0 0 initial atom 0 2 induction identify solve tightest constraint containing define b begin tightest constraint cases equality constraints 1 2 last singular atom b containing time b ii else 1 2 last atom b containing 1 time b set b equality constraints consider inequality constraints compute earliest begin b small clocks using table 2 igamma2 b 1 choose 12 ii otherwise attribute say igamma2 12 algorithm selects arbitrarily equality constraint still deterministic lemma 25 two equality constraints end begins identical proof four combinations equality constraints possible 1 first constraint 1 oe second constraint 1 contains thus 1 14 apply 26 obtain oes repeat oe inverted obtain soe formulae imply mirror lemma 19 cannot occur oe conversely thus occur atom b second constraint event 1 contains 1 oe 14 apply 29 obtain 1 soe since contains u 1 oe since eventuality 1 oe true apply 28 obtain oez know tick occurs first perhaps exaequo among possibilities end z formulae imply lemma 19 1 cannot occur oe conversely thus occur atom 2 first constraint event oe oes 1 oe 2 second constraint case simply previous one oe inverted b second constraint event 1 contains since eventuality oe true apply 27 obtain 1 tick 1 occurred first repeat oe inverted formulae imply lemma 19 1 cannot occur 1 oe conversely thus occur atom solving equation end also solves current partial inequations lemma 26 scope inequation end equation begin j inequation begin b equation b j proof 3 possible forms inequations see table 42 begin ie 1 2 j must show b j equation thus first case true hypothesis must occur past gives b j b oe oes 1 oe 2 1 oe 2 b using 27 obtain 1 oez first case true hypothesis gives b j cannot assume mirror lemma 25 gives begin event ie 2 j must show b j equation apply 26 obtain oes meaning mirror lemma 19 b j soe 62 otherwise apply 30 yielding 1 oe 2 contradicting 1 oe 2 15 conclude b j b oe oes 1 oe 2 1 oe 2 b j cannot reverse 1 oe otherwise apply mirror 31 deduce begin reset either 1 2 already event use axiom 23 show since intervening j fig2 implies 1 2 j1 thus 1 2 deduce 1 2 j must show b j equation 1 oe 2 event oe 2 b apply 28 obtain oez means b j intervening j using lemma 19 u 1 oe 2 j using mirror 31 1 oe oe 2 j thus impossible since oe 2 j conclude b j b oe oes 1 oe 2 1 oe 2 b u oe 2 use 27 obtain 1 oez reset occurs strictly tick first case using intervening positions j u 1 oe 2 j using mirror 30 1 oe 2 j second case thus true means b j impossible since conclude b j show algorithm attr assigns time bounds intervals increasing lemma 27 sequence built attr increasing proof notation definition amounts prove b defined since either case equality middle point case inequality b defined constraints trivially verified attribute igamma2 12 prove non trivial cases induction 1 base case 2 either constraint active b undefined prove 0 1 2 induction divide cases according constraint selected whose begin called equality lemmas 25 26 begin ie b igamma2 b inductive hypothesis increasing b igamma2 b thus b inequality thus begin b igamma2 b since obtained sorting inductive hypothesis increasing b igamma2 inductive hypothesis 1 thus furthermore algorithm attr ensures time increases beyond bounds lemma 28 sequence intervals j j built algorithm finite variability exists 0 proof although lower bound duration interval show time spend passage final cycle least 12 thus real number reached index 2tc c number atoms final cycle divide cases 1 cycle n contains atom scope constraint time spent 12 2 else cycle contains constraints thus constraints maximal scope scope however cannot greater one cycle let e end constraint thus e scope constraint earlier begin time spent scope constraint least 12 let b begin scope constraint egamma2 b since begin end singular distinct thus algorithm gives 12 since scope cannot greater one cycle time spent cycle least 12 procedure correctly solves constraints lemma 29 interval attribution attr transforms run ae welltimed run attrae proof show two supplementary properties welltimed run must show next occurs gamma 1 constraints automatically satisfied mirror eventuality rule 17 guarantees occurred us take first j corresponding event ii according fig2 stay false eventually reach iii axiom 25 guarantees satisfying equality entail satisfying greaterthan constraint since refer tracked event since equality later formulae 2 b 1 since equality constraint algorithm attr must chosen equality constraint begin b thus 1 lemma 25 begin event oe also b c 1 isnt even singular know constraint still active next atom end constraint always singular 22 ffl might become equality clock may tick case treated previous case i1 instead monotonicity time ensure ffl still inequality treated instead monotonicity time ensure thus point assume even let j begin constraint oe 2 j constraint selected attr equality lemma 26 begin b j ii constraint chosen inequality pair 1 2 also inequality let f begin algorithm selected constraint earliest begin b 2 let 2 similarly must show next occurs 1 constraints automatically satisfied eventuality rule 17 guarantees occur 9j j take first j corresponding event assume singular figure 2 guarantees first tick 9k iii reset rule 25 guarantees satisfying equality entail satisfying greaterthan constraint since refer end event since equality later formulae 2 b 1 let j contain next event since equality con straint algorithm attr must chosen equality constraint j lemma 25 begin thus c 1 let j contain next event constraint selected attr j equality lemma 26 begin b ii constraint chosen j inequality pair 1 2 also inequality j let f begin algorithm selected constraint earliest begin b reader expects proof converse implication needed thanks 43 xi consequence last lemmas lemma timed run built attr hintikka property event finally obtain desired theorem theorem 31 every eventclocktlconsistent formula satisfiable proof ff eventclocktlconsistent formula exists ffmonitored atom ff pi lemma 16 exists set runs sigma pass ff properties procedure attr lemma 18 lemma 28 lemma 29 least one run hintikka property event clocktl direct see model ff time 2 ff interval time associated ff thus ff satisfiable xi corollary 32 rule 1 axioms 231 form complete axiomatization eventclocktl 43 comparison automata construction spirit procedure given considered building automaton corresponding formula known procedures 3 deciding use similar construction first building timed automaton region automaton could use construction directly involves features automata counterpart logic thus could expressed axioms however main ideas similar region automaton record integer value clock code formulae form 1 1 1 oe also record ordering fractional parts clocks coded formulae form 1 1 oeu 1 1 small differences however simplicity maintain information needed instance record ordering two ticks even ticks linked current value clock relationship inverted special case clock previous following tick need cannot maintain fractional information easy build careful efficient tableau procedure records needed information structure atoms constructed treats eventualities different spirit automata may invalid paths graph atoms immediate add acceptance conditions eliminate obtain classical automaton less obvious design class automata expressive logic done 14 44 time domains already indicated incidentally proofs written adapt time domains twith minimal change consider totally ordered dense time however instance could use time domain 1 real numbers r replace 12 mirror 13 2 rational numbers q force bounds interval rational well nothing changed otherwise transition open interval open interval possible common bound irrational defeats induction axiom 11 postpone study case paper basic ideas proof still apply 3 bounded real interval closed qualitative part replace 13 mirror 12 quantitative part first remove axiom 25 duration interval stating beginning distance end otherwise add best approximation b open qualitative part replace 13 mirror 12 qualitative point view open interval indistinguishable infinite one 5 translating metricintervaltl eventclocktl logics designed different philosophical standpoint metricin restricts undecidable logic metrictl relaxing punctuality ie forbidding look exact time values eventclocktl contrast forbids look past next event future however shown 14 surprisingly expressive power power given nesting connectives allows logic forbidden work need mere proof expressiveness need finite number axioms expressing translation formulae two logics give axioms procedure use provide proof equivalence first suppress intervals containing 0 u u j replace bounded untils u 0 62 simpler sigma provided u l left endpoint intervals ig suppress classical using infinite intervals reduce lower bound l 0 0 using finite intervals left bound equal 0 exclude needed 49 use operator note formulae u oe u oe reduced formulae use constant 1 using axioms 18 19 left bound interval different 0 right bound different 1 reduce length interval 1 using use following rules recursively lower bound reduced 0 way metricintervaltl formula translated event formula bounds always 0 1 actually used small part eventclocktl eliminate 1 oe showing basic operators expressive power full metricintervaltl converse translation much simpler oe sigma oe sigma inf0g oe 62 oeu 51 axiomatization metricintervaltl obtain axiom system metricintervaltl simply translate axioms eventclocktl add axioms expressing translation indeed translations direction therefore prove metricintervaltl formula translate event prove using procedure section 4 proof translated back metricintervaltl proving indeed step replacement replacements invariant syntaxdirected translation preserving equivalence finish proof add actually translation axioms stronger stating case defined 62 63 simple considered mere shorthand thus axioms 129 4960 form complete axiomatization metricintervaltl u understood shorthands theorem 33 rule 1 axioms 229 axioms 4960 form complete axiomatization metricintervaltl 6 conclusion specification realtime systems using dense time natural many semantical advantages discretetime techniques proof techniques 818 generalized modelchecking decision techniques generalized 23 unfortunately technique 3 uses translation automata powerful complex temporal logic thus suitable building completeness proof paper provides complete axiom systems proofbuilding procedures linear real time extending technique 19 procedure used automate proof construction propositional fragments larger firstorder proof possible extensions work ffl proof rules admittedly cumbersome since exactly reflect layered structure proof instance realtime axioms clearly separated qualitative axioms intuitive rules devised constraint paper provides easy way show com pleteness enough prove axioms paper also explains generalized axioms even obvious generalizations possible prefer stick axioms needed proof facilitate later completeness proof using technique ffl logics used paper assume concrete values given realtime constraints demonstrated hytech checker 13 often useful mention parameters instead symbolic constants derive needed constraints parameters instead simple yesno answer ffl extension results paper firstorder variants metricin explored however completeness often lost firstorder variants 23 ffl development programs specifications supported automaton produced proposed technique might helpful program skeleton style 24 r existence refinement mappings model checking dense real time benefits relaxing punctuality really temporal logic logics models real time survey really abstract concurrent model temporal logic basic tense logic automatic verification finitestate concurrent systems using temporallogic specifications axiomatization temporal logic since real numbers semantics completeness duration calculus next generation regular realtime languages tense logic theory order complete proof systems qptl specifying message passing timecritical systems temporal logic checking finitestate concurrent programs satisfy linear specification glory past anchored version temporal framework temporal logic realtime systems state clock logic decidable realtime logic incompleteness firstorder temporal logic synthesis communicating processes temporallogic specifications tr automatic verification finitestate concurrent systems using temporal logic specifications incompleteness firstorder temporal logic temporal logic real time systems halforder modal logic prove realtime properties existence refinement mappings modelchecking dense realtime benefits relaxing punctuality checking finite state concurrent programs satisfy linear specification really abstract concurrent model temporal logic specifying message passing timecritical systems temporal logic regular realtime languages state clock logic glory past anchored version temporal framework logics models real time semantics completeness duration calculus complete proof systems qptl hytech synthesis communicating processes temporal logic specifications ctr carsten lutz dirk walther frank wolter quantitative temporal logics reals pspace information computation v205 n1 p99123 january 2007