efficient generation rotating workforce schedules generating highquality schedules rotating workforce critical task situations certain staffing level must guaranteed industrial plants police departments results ergonomics best guidelines shiftworkers bulletin european time studies 3 european foundation improvement living working conditions 1991 indicate rotating workforce schedules profound impact health satisfaction employees well performance work moreover rotating workforce schedules must satisfy legal requirements also meet objectives employing organization paper description solution problem stated one basic design decisions aim highquality schedules realistically sized problems obtained rather quickly maintaining human control interaction decisionmaker algorithm therefore consists four steps 1 choosing set lengths work blocks work block sequence consecutive days work 2 choosing particular sequence blocks work daysoff blocks amongst optimal weekend characteristics 3 enumerating possible shift sequences chosen work blocks subject shift change constraints bounds sequences shifts 4 assignment shift sequences work blocks fulfilling staffing requirements combination constraint satisfaction problemoriented intelligent backtracking algorithms four steps allows finding good solutions realworld problems acceptable time computational results benchmark example found literature confirmed viability approach algorithms implemented commercial shift scheduling software b introduction workforce scheduling assignment employees shifts daysoff given period time exist two main variants problem rotating cyclic workforce schedules noncyclic workforce schedules rotating workforce scheduleat least planning stageall employees basic schedule start different offsets therefore individual preferences employees cannot taken account aim find schedule optimal employees average noncyclic workforce schedules individual preferences employees taken consideration aim achieve schedules fulfill preferences employees variants workforce schedules constraints minimum needed number employees shift satisfied variants problem npcomplete 8 thus hard solve general consistent prohibitively large search spaces conflicting constraints usually encountered reasons unless absolutely required find optimal schedule generation good feasible schedules reasonable amount time important complexity problem relatively high number constraints must satisfied case soft constaints optimized generating schedule without help computer short time almost impossible even small instances problem therefore computerized workforce scheduling subject interest researchers years tien kamiyama 11 give good survey algorithms used workforce scheduling different approaches used solve problems workforce scheduling examples use exhaustive enumeration 5 3 glover mcmillan 4 rely integration techniques management sciences artificial intelligence solve general shift scheduling problems balakrishnan wong 1 solved problem rotating workforce scheduling modeling network flow problem smith bennett 10 combine constraint satisfaction local improvement algorithms develop schedules anesthetists schaerf meisels 9 proposed general local search employee timetabling problems paper focus rotating workforce scheduling problem main contribution paper provide new framework solve problem rotating workforce scheduling including efficient backtracking algorithms step framework constraint satisfaction divided four steps step search space reduced make possible use backtracking algorithms computational results show approach efficient real sized problems main characteristic approach possibility generate highquality schedules short time interactively human decision maker paper organized follows section 2 give detailed definition problem consider section 3 present new framework algorithms used framework section 4 discuss computational results two realworld problem problem instances taken literature section 5 concludes describes work remains done 2 definition problem section describe problem consider paper problem restricted case general workforce scheduling problem general definitions workforce scheduling problems found 4 9 6 definition problem consider given instance number employees n set shifts activities 1 represents dayoff w length schedule total length planning period n w cyclicity schedules usually n w multiple 7 allowing take weekends consideration even schedule reused one planning period cyclic schedule represented n w matrix 2 nw element ij matrix corresponds one shift element ij shows shift employee works day j whether employee free cyclic schedule schedule one employee consists sequence rows matrix last element row adjacent first element next row last element matrix adjacent first element temporal requirements 1 w matrix r element r ij matrix r shows required number employees shift day j constraints sequences shifts allowed assigned employees complement c ijk matrix c 1 sequence shifts j k allowed otherwise note algorithms describe section 3 easily extended allow longer allowedforbidden sequences also note lau 8 could show problem npcomplete even restrict forbidden sequences length two maximum minimum length periods successive shifts vectors element shows maximum respectively minimum allowed length periods successive shifts maximum minimum length work days blocks maxw minw problem find many non isomorphic cyclic schedules assignments shifts employees possible satisfy requirement matrix constraints optimal terms free weekends weekends requirement matrix r satisfied constraints satisfied shift change matrix c ng 8j nexts ij 11 otherwise next k ij z maximum length periods successive shifts ng 8j z minimum length periods successive shifts ng 8j next b ij 6 k maximum length work blocks ng 8j minimum length work blocks ng 8j next b ij rationale behind trying obtain one schedule made clear section 3 optimality free weekends times conflict solutions selected work blocks 3 four step framework tien kamiyama 11 proposed five stage framework workforce scheduling algorithms framework consist stages determination temporal manpower requirements total manpower requirement recreation blocks recreationwork schedule assignment shifts shift schedule first two stages seen allocation problem last three stages daysoff scheduling assignment shifts stages related solved sequentially exist also algorithms solve two stages simultaneously problem formulation assume temporal requirements total requirements already given temporal requirements given requirement matrix determine number employees needed day shift total requirements represented problem number employees n propose new framework solving problem assigning daysoff shifts employees framework consist following four steps 1 choosing set lengths work blocks work block sequence consecutive days work shifts 2 choosing particular sequence work daysoff blocks among optimal weekend characteristics 3 enumerating possible shift sequences chosen work blocks subject shift change constraints bounds sequences shifts 4 assignment shift sequences work blocks fulfilling staffing requirements first give motivation using framework approach focused interaction decision maker thus process generating schedules half automatic system generates possible candidate sets lengths work blocks step 1 decision maker select one solutions best reflects preferences way satisfy two goals one hand additional soft constraint concerning lengths work blocks taken account interaction hand search space step 2 significantly reduced thus able solve step 2 much effectively step main concern find best solution weekends user selection step 1 impact features weekends versus length work blocks since two constraints ones practice often conflict decision maker decide wishes optimal length work blocks better features weekends step 3 satisfy two goals first shift change constraints bounds number successive shifts sequence work block legal shift sequences terms thus step backtracking algorithms find fast assignments terms work blocks requirements fulfilled shift change constraints daysoff exist satisfaction checked stage second new soft constraint introduced indeed generate bunch shift plans contain different terms user possibility eliminate undesired terms thus eliminating solutions contain terms terms impact table 1 possible schedule work blocks order 46546555 employeeday mon tue wen thu fri sat sun 3 n n n 4 5 6 n 8 n n 9 n n fatigue sleepiness employees important highquality plans sought 31 determination lengths work blocks work block sequence work days two daysoff employee work day day j heshe assigned shift different daysoff shift step feature work blocks interested length features work blocks eg shifts work block made begin end block etc known time schedule cyclic employees schedule thus work blocks whole planning period example week schedule 9 employees given table 1 consists two work blocks length 6 four work blocks length 5 two length 4 order 4 6 5 4 6 5 5 5 rearranging order blocks schedules constructed example schedule order work blocks 5 5 6 5 4 4 5 6 represent schedules work blocks different order work blocks unique solutions called class solution blocks given decreasing order class solution example thus f6 6 5 5 5 clear even small instances problems exist many class solutions main concern step generate possible class solution many possible large instances problem one class solution nothing else integer partition sum working days one employee whole planning period find possible class solutions step deal following two problems generation restricted partitions elimination partitions schedule created elements partition represent lengths work blocks constraints maximum minimum length work blocks exist partitions must gen erated maximum minimum lengths daysoff blocks also impact maximum minimum allowed number elements one partition since two work blocks always daysoff block recreation block summary partitions fulfill following criteria generated maximum minimum value elements partition two parameters respectively maximum minimum allowed length work blocks minimum number elements partition daysosum daysosum sum daysoff one employee whole planning period maximum number elements partition daysosum set partitions fulfill criteria subset set possible partitions one first generate full set possible partitions eliminate fulfill constraints given criteria however approach inefficient large instances problem idea use restrictions pruning partitions generated implemented procedure based idea generation restricted partitions pseudo code given set p contains elements partition n initialize n maxb minb maxw minw value arguments first procedure call recursive procedure restrictedpartitionspos maxvalue maxvalue partitioniscompleted add set p element elements set p store partition set p pruning recursive call endif remove last element set p loop end restricted partitions produce legal schedule fulfills requirements work force per day step test desired number employees whole day shift want class solutions bring us legal shift plan eliminate restricted partitions cannot fulfill work force per day requirements restricted partition legal least one distribution daysoff exists fulfills work force per day requirements worst case distributions daysoff tested want sure restricted partition legal daysoff distribution one first generate daysoff distributions test permutation restricted partitions least one satisfying daysoff distribution found approach rather ineffective class solution generated many legal daysoff distribution thus process testing takes long large instances typical problems implemented backtracking algorithms testing restricted partitions additionally want obtain first class solutions early possible implemented three stages time restricted test manner lose time restricted partitions legal daysoff distribution beginning test algorithm testing restricted partitions given without time restriction input restricted partition possible daysoff blocks initialize vectors w numberofuniqueworkblocks f numberofuniquedaysoblocks unique work blocks respectively unique daysoff blocks example unique work blocks class solution f5 5 4 4 3g blocks 5 4 3 represents one work daysoff block takes values 1 numberofworkblocks 2 work block comes daysoff block aim find first schedule fulfills requirements per day first procedure call recursive procedure partitiontesti odd whilek numberofuniqueworkblocks assign block work block w k req day number employees get larger requirement number work blocks type w k get larger number blocks type w k class solution pruning req true endif else partial schedule block tested requirements number employees day overfilled number work blocks type w k get larger number blocks type w k class solution req true endif endif loop else whilek numberofuniquedaysoblocks assign block daysoff block f k sumtest test sum daysoff required sumtest true class solution least one daysoff distribution test endif else partial schedule block tested freetest test employees required test done day pruning freetest true endif endif loop endif end 32 determination distribution work blocks daysoff blocks optimal weekend characteristics class solution known different shift plans produced subject order work blocks distribution daysoff order blocks class solution may exist many distributions daysoff introduce new soft constraint constraint concerns weekends goal find order work blocks best solution solutions dominated weekends goal maximize number weekends maximize number long weekends weekend plus monday friday free find solution better distribution weekends distribution weekends evaluated following method every time two weekends appear directly distribution gets negative point one distribution weekends better another one less negative points priority given number weekends followed distribution weekends finally number long weekends considered others equal possible candidates permutations work blocks found class solution permutation may may daysoff distributions permutation least one daysoff distribution goal find best solutions weekends best solutions cannot dominated another solution say solution solut 1 dominates solution solut 2 following cases number weekends solut 2 evaluation weekends distribution solut 1 equal one solut2 solut 1 long weekends solut 1 number weekends solut 2 evaluation weekends distribution solut 1 better one solut2 solut 1 weekends solut 2 two comments made first permutations class solutions may daysoff distribution use time restrictions finding daysoff distributions words first daysoff distribution found predetermined time next permutation tested second large instances problems many daysoff distributions may exist may impede search best solution interrupting test done manually depending size problem large instances problem impossible generate permutations class solutions permutation best daysoff distributions cases main concern enumerate many solutions possible best dayoff distribution found predetermined time found solutions sorted based weekends attributes user decide easier distribution daysoff work days wants continue user may select one solutions solely based weekends sometimes order work blocks may also decide one prefer example order work blocks 7 6 3 7 6 3 7 6 order finding legal daysoff distributions permutation class solution use backtracking procedure similar one testing restricted partitions step 1 except distribution work blocks fixed daysoff distributions given order work blocks found selecting best solutions based weekends comparatively trivial task takes long selected solutions step 2 fixed distribution work blocks daysoff blocks final step assignment shifts work blocks done 33 generating allowed shift sequences work block step 2 work daysoff blocks fixed remains assign shifts employees use backtracking algorithm make algorithm efficient introduce another interaction step basic idea step work block construct possible sequences shifts subject shift change constraints upper lower bounds length sequences successive shifts constraints number sequences call terms large thus backtracking algorithms much efficient compared classical backtracking algorithms position work blocks shift possibilities would tried test shift change constraints would done much timeconsuming manner thus resulting much slower search solutions example suppose solution selected user step 2 distribution work blocks 6 4 4 6 5 4 5 shifts day afternoon night n forbidden shift changes n n maximum minimum lengths successive shifts 26 25 n 24 task construct legal terms work blocks length 6 5 4 work block legth 6 following terms exist dddddd ddddaa ddddnn dddaaa dddnnn ddaaaa ddnnnn ddaann aaaann aaannn aannnn block length 5 ddddd dddaa dddnn ddaaa ddnnn aaaaa aaann aannn block length 4 dddd ddaa ddnn aaaa aann nnnn approach appropriate number shifts large number shifts large group shifts similar characteristics called shift types example exists separate day shift saturday begins later normal day shift two shifts grouped together grouping similar shifts shift types allows us smaller number terms per work blocks therefore reduces overall search space end transformation shift types substituted shifts done similar approach applied weil heus 12 group different daysoff shifts one shift type thus reduce search space different daysoff shifts grouped one shift interchangeable substitution impact constraints evaluation process constructing terms takes long time given length work blocks usually less 9 basic shift change constraints always exist legal working time restrictions 34 assignment shift sequences work blocks know terms use backtracking algorithm find legal solutions satisfy requirements every shift every day size search space searched algorithm b number work blocks n number legal terms block would use terms search space would size sum work days course latter case would constraints instance shift change con straints corresponding algorithm would much slower constraints tested one time construct terms pseudo code backtracking algorithm based terms given let us observe terms tests shift change constraints done without consideration shift daysoff exist shift changes constraints include daysoff test solution done later sequences input distribution work daysoff blocks generate legal shift sequences work block value argument first call procedure shiftassignment recursive procedure number shift sequences block k assign block sequence number k test requirements fulfilled shift change constraints violated stage test forbidden shift sequences include daysoff store schedule endif else partial schedule block tested ptesttest shift needed employees assigned pruning ptest true endif endif loop end exist rare cases even exists work daysoff distribution assignment shifts found fulfills temporal requirements every shift every day shift change constraints cases constraints minimum maximum length periods successive shifts must relaxed obtain solutions computational results section report computational results obtained approach implemented four step framework software package called first class schedule fcs part shift scheduling package called shiftplanassistant spa ximes 1 corp results section obtained intel p2 330 mhz first two examples taken realworld sized problems typical kind problems fcs designed give results three benchmark examples literature compare results paper balakrishnan wong 1 solved problems rotating workforce scheduling modeling network flow problem algorithms implemented fortran ibm 3081 computer problem 1 organization operates one 8 hours shift day shift monday saturday 4 employees needed whereas sunday employees needed requirements fulfilled 5 employees work average 384 hours per week rotating week schedule constructed fulfills following constraints 1 length periods successive shifts 26 2 length work blocks 2 6 days length daysoff blocks 1 4 3 features weekends good possible note daysoff blocks length 1 preferred otherwise class solution problem would exist using fcs step 1 class solutions generated 45 seconds f6 4 4 3 3 2 2g f6 6 3 3 3g select class solution f6 6 proceed next step step 2 fcs generates 6 solutions 06 seconds one long weekend select solution distribution work blocks 6 4 4 proceed next steps step 3 4 solved automatically obtain first existing schedule 002 seconds solution shown table 2 quality schedule stems fact 8 consecutive work days single dayoff constraint important single daysoff allowed example showed small instance problem one shift nevertheless even instances relatively difficult find high quality solutions subject constraint table 2 first class schedule solution problem 1 employeeday mon tue wed thu fri sat sun 3 4 5 let us note schedule applied multiple 5 employees duties also multiplied employees grouped teams example employees grouped 5 teams 6 employees problem 2 organization operates three 8 hours shifts day shift afternoon shift night shift n monday friday three employees needed shift whereas saturday sunday two employees suffice requirements fulfilled 12 employees work average 38 hours per week rotating week schedule constructed fulfills following constraints 1 sequences shifts allowed assigned employees 2 length periods successive shifts 27 26 n 25 3 length work blocks 4 7 days length daysoff blocks 2 4 4 features weekends good possible using fcs step 1 first class solution generated 007 seconds interrupt process generation class solutions 16 seconds already 7 class solutions generated many others f6 6 5 4g first solution highest number optimal blocks namely length 5 entails weak features weekends reason select class solution f7 proceed next step step 2 optimal solution distribution blocks weekends 3 long found less 2 seconds first 11 solutions generated 11 seconds one solution 6 weekends 4 long distribution weekends acceptable solution order work blocks follows 7 7 6 5 5 5 7 5 5 5 select solution proceed next steps step 3 4 solved automatically obtain first schedule given table 3 017 seconds first 50 schedules 4 seconds decision maker table 3 first class schedule solution problem 2 employeeday mon tue wed thu fri sat sun 3 4 n n 5 n n n 6 n n 7 n n 8 9 n n n n n eliminate undesired terms besides solutions exist also large amount solutions differ terms better distribution weekends would sought could found another class solution example 5 5g found step 1 16 seconds cost longer work sequences problem 3 first problem literature discuss computational results first class schedule problem solved butler 3 edmonton police department alberta canada properties problem number employees 9 shifts 1 day 2 evening 3 night temporal requirements r 37 b constraints length work periods 4 7 days shift 1 precede rest period preceding shift 3 work period weekends shift 3 shift 2 work periods allowed least two consecutive days must assigned shift table 4 solution balakrishnan wong 1 problem 3 employeeday mon tue wed thu fri sat sun 1 3 4 5 n n n 6 n 7 8 n 9 n n n n two 7day work periods allowed work periods consecutive balakrishnan wong 1 solve problem using network model needed 7354 seconds identify optimal solution problem solution given table 4 use 1 shift 2 n shift 3 element matrix empty employee free give computational results observations made first constraint two three cannot represented framework let us note three examples given cannot model problem exactly true balakrishnan wongs 1 approach original problems high degree due different legal requirements found uscanadian versus found european context tried mimic constraints closely possible replace similar constraints appeared meaningful european context said let us proceed follows constraints applied model left like original problem mentioned include additional constraints maximum length successive shifts minimum maximum length daysoff blocks summary additional constraint used first class schedule allowed shift changes n n length daysoff periods 2 4 vector maxs model first generate class solutions class solutions exist given problem given constraints table 5 first class schedule solution problem 3 employeeday mon tue wed thu fri sat sun 3 n n n n 4 5 n n n 6 7 n n 9 n first solution generated 014 seconds solutions 438 seconds select step class solution highest number optimal blocks f7 7 6 5 5 5 5 5g step 2 distributions work daysoff periods gives best results weekends found select best solution offered step first class schedule order work blocks 7 5 7 5 5 6 5 5 computations system took 073 seconds step 3 4 solved automatically first solution given table 5 generated 039 seconds first 50 solutions 429 seconds exist also many solutions differ terms contain undesired solutions eliminated elimination unwanted terms problem 4 laporte et al 7 exist three non overlapping shifts n 9 employ ees requirements 2 employees shift every day week schedule constructed fulfills constraints 1 rest periods least two daysoff 2 work periods must 2 7 days long work done shift 4 7 work done shift n 3 shift changes occur dayoff 4 schedules contain many weekends possible 5 weekends distributed throughout schedule evenly possible 6 long short periods followed long short rest periods table solution balakrishnan wong 1 problem 7 employeeday mon tue wed thu fri sat sun 3 4 5 n n n n n 6 n n 7 8 n n n n 9 n n n 7 work periods 7 days preferred shift n balakrishnan wong 1 need 31084 seconds obtain first optimal solution solution given table 6 authors report also another solution three weekends found another structure costs weekends fcs constraint 1 straightforward constraint 2 approximated take minimum work blocks 4 constraint 3 also modeled take minimum length successive shifts 4 maximum length successive shifts take 7 shift constraints 4 5 incorporated step 2 constraint 6 cannot modeled constraint 7 modeled selecting appropriate terms step 3 given parameters problem exist 23 class solutions generated 5 seconds class solution exist least one distribution daysoff could assignment shifts work blocks exist range blocks successive shifts narrow case problem range lengths blocks successive shifts 4 7 many class solution assignment shifts found class solution solutions three free weekends class solution f7 7 7 7 5 5 4g gives better distribution weekends select class solution step 1 system generate 5 solutions step 2 169 seconds selected solution order work blocks 7 7 4 7 5 7 5 step 3 4 solved simultaneously first solution arrived 008 seconds solutions found 05 seconds one solutions shown table 7 class solution f7 7 7 7 7 7g distribution weekends found 7 see arrive solutions much faster balakrishnan wong 1 though interaction human decision maker step fast overall process constructing optimal solution still take long problem 5 problem larger problem first reported 5 characteristics problem number employees 17 length planning period 17 weeks table 7 first class schedule solution problem 7 employeeday mon tue wed thu fri sat sun 3 n n n n 4 5 6 n n n n n 7 8 n n 9 n n n three nonoverlapping shifts temporal requirements r 37 b constraints restperiod lengths must 2 7 days workperiods lengths must 3 8 days shift cannot assigned 4 consecutive weeks row shift changes allowed rest period includes sunday monday allowable shift changes 1 3 2 1 3 2 balakrishnan wong 1 need 45798 seconds arrive optimal solution given table 8 first class schedule cannot model constraints 3 4 5 original form allow changes block reason shift change constraints case following shift changes allowed 2 1 3 1 3 2 additionally limit rest period length 2 4 work periods length 4 7 maximum minimum length blocks successive shifts given vectors maxs conditions first class solution f6 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5g found 022 first 9 solutions 142 seconds course exist much class solutions table 8 solution balakrishnan wong 1 problem 5 employeeday mon tue wed thu fri sat sun 3 4 5 n n n n 6 n n n n n 7 n n n 8 9 13 n n n n 14 n n n n 15 finding class solutions take much time large problem choose first solution optimal blocks obtain solutions 5 weekends even though weekends one arrive better solution following class solution f7 6 5 5 5 5 5 5 5 5 5 5 5 5 5 4g step 2 stop process generation distributions work daysoff blocks 20 seconds get 3 solutions solutions select solution order blocks 7 6 5 5 5 5 5 5 5 5 5 5 5 4 5 5 first solution steps 3 4 generated 073 seconds first 50 solutions 467 seconds first solution given table 9 see solution much worse distribution weekends solution 1 solution blocks length 8 many optimal blocks length 5 solutions also 5 successive night shifts seven night shifts considered much much better distribution weekendsoff found fcs maximum length work days increased 8 case step 2 fcs takes longer depends directly number blocks one disadvantage fcs user try many class solutions find optimal solution however time generate solutions step short interactive use possible advantages interactively solving scheduling problems possibility include user decision process example one may prefer longer blocks better table 9 first class schedule solution problem 5 employeeday mon tue wed thu fri sat sun 3 4 5 6 n 8 9 n n 13 n n 14 n n 17 n n distribution weekends shorter work blocks worse distribution weekends conclusions paper proposed new framework solving rotating workforce scheduling problem showed framework powerful solving real problems main features framework possibility generate high quality schedules interaction human decision maker solve real cases reasonable amount time besides making sure generated schedules fulfill hard constraints also allows incorporate preferences human decision maker regarding soft constraints otherwise difficult assess model step 1 enhanced view possible solutions subject length work blocks given step 2 preferred sequences work blocks connection weekends features selected step 4 bounds successive shifts shift change constraints specified much precision decision maker complete view terms shift sequences used build schedules step 2 framework solved efficiently search space already much reduced step 1 furthermore step 4 showed assignment shifts employees done efficiently backtracking algorithms even large instances sequences shifts work blocks generated first number employees large grouped teams thus framework used even though framework appropriate real cases large instances problems optimal solution weekends cannot always guaranteed size search space one possibility solve problem efficiently could stop backtracking one solution almost maximum number weekends found given problem always know maximum number weekends temporal requirements solution weekends search technique like local search used improve distribution weekends finally framework extended introducing new constraints r network model rotating workforce scheduling problem computerized manpower scheduling general employee scheduling problem integration ms ai computerized scheduling police manpower employee timetabling rotating schedules complexity manpower scheduling solving employee timetabling problems generalized local search combining constraint satisfaction local improvement algorithms construct anaesthetists rotas manpower scheduling algorithms eliminating interchangeable values nurse scheduling problem formulated constraint satisfaction problem tr general employee scheduling problem integration ms ai complexity manpower shift scheduling solving employee timetabling problems generalized local search ctr yana kortsarts integrating realworld scheduling problem basic algorithms course journal computing sciences colleges v22 n6 p184192 june 2007 mikel lezaun gloria prez eduardo sinz de la maza rostering rail passenger carrier journal scheduling v10 n45 p245254 october 2007