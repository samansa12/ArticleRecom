performance endtoend rate control stochastic available capacity motivated tcp endtoend abr study performance adaptive window congestion control operates explicit feedback ratecontrol mechanism situation bandwidth available elastic traffic stochastically time varying assumed sender receiver adaptive window protocol colocated ratecontrol endpoints objective study understand interaction ratecontrol loop windowcontrol loop beneficial endtoend throughput parameters problem propagation delay bottleneck buffers rate variation available bottleneck bandwidth affect performancethe available bottleneck bandwidth modeled twostate markov chain develop analysis explicitly models bottleneck buffers delayed explicit rate feedback tcps adaptive window mechanism analysis however applies variations available bandwidth occur periods larger roundtrip delay fast variations bottleneck bandwidth provide results simulation tcp testbed uses linux tcp code simulationemulation network model inside linux kernelwe find endtoend abr performance tcp improves significantly network bottleneck bandwidth variations slow compared roundtrip propagation delay find tcp abr relatively insensitive bottleneck buffer size results shortterm average link capacity feedback abr level instcap use testbed study effcap feedback motivated notion effective capacity bottleneck link find effcap feedback adaptive rate bandwidth variations bottleneck link thus yields good performance compared instcap wide range rate bottleneck bandwidth variation finally study tcp abr effcap feedback provides throughput fairness even connections different roundtrip propagation delays b introduction bottleneck link xmitter recvr abr recvr endtoend abr source abr figure 1 network study large round trip delay single congested link path connection abr connection originates host ends destination node call scenario endtoend abr available bit rate abr service asynchronous transfer mode atm networks primarily meant transporting besteffort data traffic connections use abr service called abr sessions share network bandwidth left serving cbr vbr traffic available bandwidth varies requirements ongoing cbrvbr sessions hence switches carrying abr sessions implement ratebased feedback control congestion avoidance control causes abr sources reduce increase cell transmission rates depending availability bandwidth network abr service guarantee endtoend reliable transport data applications additional protocol needed application atm layer ensure reliable communication deploy ip host ip host atm wide area network routerswitch routerswitch ip ip abr ip ip abr figure 2 tcpip edgetoedge atmabr tcp connection split one edgetoedge tcp abr connection two endtoedge tcp ip connections edge switchrouter regulates flow tcp acknowledgements back tcp senders ments atm networks internets transport control protocol tcp used ensure endtoend reliability data applications tcp however adaptive window based congestion control mechanism serves slow sources network congestion hence important know whether adaptive window control tcp level ratebased control abr level interact beneficially point view application level throughput paper consider situation atm network extends upto tcp endpoints ie endtoend abr opposed edgetoedge abr see figure 1 results also apply tcp edgetoedge abr endtoend tcp connection comprises tandem edgetoedge tcp connection two edgetoend connections tcp spoofing done edgedevices see figure 2 consider hypothetical situation control loop zero delay case abr source session ie atm network interface card nic source node follow variations bandwidth bottleneck link without delay result loss take place network tcp window grow tcp window size exceeds window required fill round trip pipe packets buffered source buffer hence see congestion effectively pushed network edge source buffer would much larger maximum window size tcp window remain fixed maximum window size congestion control become purely rate based one abr service used however tcp would increase window overshoot required window size due packet loss would reduce window size hence clear zero delay control loop endtoend abr definitely improve throughput tcp variations bottleneck bandwidth occur however delay abr control loop clear whether improvement paper study tcp endtoend abr consider tcp connection network large roundtrip delay connection single bottleneck link time varying capacity current trends seem indicate least near future atm remain wan transport technology hence atm services extend network edge whereas tcp continue used endtoend protocol interlan ip packets transported atm virtual circuits designing widearea intranet based ip atm technology one effectively control congestion backbone transporting tcpip traffic abr virtual circuits connection hosts two lans would split tcp abr widearea edgetoedge connection two endtoedge connections lans see figure 2 edge devices would control tcp endpoints respective lans regulating flow acknowledgements acks back senders framework results would apply edgetoedge tcp abr connection many simulation studies carried study interaction tcp atmabr control loops 7 authors study effect running large unidirectional file transfer applications tcp abr important result study cell loss ratio clr good indicator tcp perfor mance also show maximum throughput achieved tcp sources rate limited abr rather window limited tcp reference 8 reports study buffering requirements zero cell loss tcp abr shown buffer capacity required switch proportional maximum round trip time vcs link independent number sources vcs proportionality factor depends switch algorithm work 9 authors introduce various patterns vbr background traffic vbr background traffic introduces variations abr capacity tcp traffic introduces variations abr demand 3 authors study effect atmabr control throughput fairness running large unidirectional file transfer applications tcptahoe tcpreno see 15 single bottleneck link static service rate authors 12 study performance tcp atm multiple connections static bottleneck link paper reports simulation study relative performances atm abr ubr service categories transporting tcpip flows edgetoedge atm ie host nodes atm endpoints network summary conclusion seem strong evidence tcpip workloads greater complexity abr pays better tcp throughputs results however edgetoedge abr comment endtoend ie hosts atm nic atm study paper studies primarily simulation studies analytical work tcp abr seem exist literature paper make following contributions develop analytical model tcp connection explicit rate abr single bottleneck link time varying available capacity analytical model assume explicit rate feedback based short term average available capacity think instantaneous capacity feedback call approach instcap feedback ii use testbed validate analytical results testbed implements hybrid simulation comprising actual linux tcp code network emula tionsimulation implemented ip loopback code linux kernel iii develop explicit rate feedback based longer term history bottleneck rate process computation motivated though well known concept effective capacity derived large deviations analysis bottleneck queue process call effcap feedback effcap effective preventing loss bottleneck buffers since resulting model hard analyse results effcap feedback obtained hybrid simulator mentioned results show different types bottleneck bandwidth feedbacks needed slowly varying bottleneck bandwidth rapidly varying bottleneck bandwidth intermediate regime effcap feedback adapts rate bandwidth variation develop guidelines choosing two parameters arise online calculations effcap iv finally study performance two tcp connections pass bottleneck link different round trip propagation delays objective determine whether tcp abr fairer tcp alone circumstances study use effcap feedback paper organized follows section 2 describe network model study section 3 develop analysis tcp abr instcap segmentation buffer rate feedback host computer abr adaptive rate server bottleneck link figure 3 segmentation buffer system study host nic card extends hosts main memory rate feedback bottleneck link delayed one round trip delay feedback tcp alone section 4 develop effcap algorithm tcp abr effcap feedback amenable simulation section 5 present analysis results instcap feedback simulation results instcap effcap performance instcap effcap feedbacks compared section 6 study choice two parameters arise effcap feedback section 7 provide simulation results two tcp connections abr effcap feedback finally section 8 summarise observations work 2 network model consider system consisting tcp connection source destination node connected network large propagation delay shown figure 1 tcp congestion control implement fastretransmit hence must time loss recovery assume one link called bottleneck link causes significant queueing delays connection delays due links fixed ie fixed propagation delays introduced due links detailed model shown figure 3 tcp packets converted atm cells forwarded abr segmentation buffer buffer network interface card nic extends main memory computer hence look upon infinite buffer segmentation buffer server also called abr source gets rate feedback network abr source service rate adapts rate feedback bottleneck link buffer represents either abr output buffer atm switch case tcp abr router buffer case tcp alone network carries traffic cbrvbr causes bottleneck link capacity seen connection interest vary time bottleneck link buffer finite result packet loss due buffer overflow rate mismatch source rate link service rate occurs model assume portion link capacity reserved besteffort traffic hence always available tcp connection atmabr case reservation would made using minimum cell rate mcr feature abr would implemented appropriate link scheduling mechanism thus guaranteed service traffic backlogged link tcp connection gets bandwidth reserved besteffort traffic otherwise gets full bandwidth hence two state model suffices available link rate first part study assume abr feedback instantaneous rate feedback scheme ie bottleneck link periodically feeds back short term abr source feedback reaches one round trip propagation delay abr source adapts value transmits cells rate 3 tcpabr instantaneous capacity feedback time cells atm segmentation buffer source transmitted time dependent rate gamma1 depends abr rate feedback ie service time packet time bottleneck finite buffer b max time dependent service rate r gamma1 packetssec function independent markov chain analysis assume 2 state markov chain modulating channel state bottleneck link capacity deterministic buffer full cell arrives cell dropped addition assume cells corresponding tcp packet dropped assumption allows us work full tcp packets akin partial packet discard proposed 13 packet lost gets serviced rate r gamma1 assumed constant service time packet reaches destination deterministic delay destination atm layer reassembles packet delivers tcp receiver tcp receiver responds ack tcpabr transmitter bottleneck link propagation delay figure 4 queueing model tcp endtoend abr acknowledgement delay propagation processing delay reaches source tcp source responds increasing window size tcp window evolution modeled several ways see 11 10 study model tcp window adjustments congestion avoidance phase original tcp algorithm proposed 4 van jacobson probabilistically follows every time nonduplicate ack acknowledgement requests packet acknowledged earlier arrives source window size w increases one probability 1 hand packet lost bottleneck link buffer ack packets subsequently received packets continue carry sequence number lost packet eventually source window becomes empty timeout begins expiry timeout threshold window w th set half maximum congestion window achieved loss next slow start begins 31 queueing network model figure 4 closed queueing network representation tcp abr session model tcp connection data transfer phase hence data packets assumed fixed length buffer segmentation queue source host assumed infinite size many packets buffer number untransmitted packets window service time buffer models time taken transmit entire tcp packet worth atm cells owing feedback rate control service rate follows rate bottleneck link assume rate change transmission cells single tcp packet service time equivalently service rate follows bottleneck link service rate delay delta units time delta round trip fixed propagation delay bottleneck link modeled finite buffer queue deterministic packet service time service time rate markov modulated independent markov chain two states 0 1 service rate higher state 0 round trip propagation delay delta modeled infinite server queue service time delta notice various propagation delays network sourcebottleneck link delay bottleneck linkdestination delay destinationsource return path delay lumped single delay element see figure 4 justified fact even source adapts change link capacity earlier one round trip time effect change seen round trip time bottleneck link packets read full tcp packets let number packets segmentation buffer host time number packets bottleneck link buffer time number packets propagation queue time r service time packet bottleneck link r 2 fr g take thus times normalized bottleneck link packet service time higher service rate service time packet source link follows r delay delta round trip propagation delay ie g since instantaneous rate bottleneck link fed back call instantaneous rate feedback scheme note practice instantaneous rate really average rate small window instantaneous rate feedback modelled simulations discussed later call feedback instcap 32 analysis queueing model consider vector process slow start phase loss window reaches w ceases grow coarse timeout occurs log wloss epoch round trip propagation delay figure 5 embedded process process hard analyze directly instead study embedded process suitable approximations turns analytically tractable consider embedded process f use obvious notation following analysis make following assumptions assume rate modulating markov chain embedded epochs ii source adapts immediately explicit rate feedback receives true actual abr source behaviour specified atm forum 1 rate decreases actual abr source behaviour increase explicit rate results exponential growth source rate sudden jump however assume even increase source rate takes place sudden jump iii loss slow start phase tcp 11 authors show loss occur slow start phase bmax delta 1even rate change occurs slow start phase however case tcp abr source bottleneck link rates match loss occur phase long rate changes occur slowstart hence assumption valid case tcp alone bmax delta observe packets propagation delay queue see figure 4 k departed queue k1 follows service time deterministic equal delta delta new packet arriving propagation delay queue still present queue k1 hand loss occurs due buffer overflow bottleneck link k k1 proceed follows figure 5 shows packet loss epoch interval first loss since last time tcp went timeout recovery loss epoch packets bottleneck buffer acks flight back transmitter acks packets form unbroken sequence hence contribute window increase algorithm transmitter assume ack loss reverse path transmitter continue transmitting window exhausted start coarse timer assume timeout occur interval k2 k3 see figure 5 recovery starts embedded epoch k3 thus first loss recovery occurs interval model takes two intervals start recovery note since loss occurred since last recovery k therefore tcp window k given assuming packet transmissions straddle embedded epochs ii packets arrive backtoback segmentation buffer interval leads conservative estimate tcp throughput see discussion following figure 8 find probability loss occurs k k1 distribution tcp window time timeout starts suppose window w congestion avoidance threshold next recovery cycle take approximately dlog 2 round trip times length delta reach congestion avoidance threshold assuming loss occurs slow start phase true b max small 11 k determine distribution description mind define k 1 loss occurs loss occurs loss window w particular realization x k write b loss occurs k k 0 7 recalling evolution ft proceed analyze evolution fx k k 0g bottleneck link modulating process mentioned earlier two state markov chain embedded taking values fr g let p 01 transition probabilities markov chain notice also discrete time markov chain dtmc let q transition probability matrix r k g explained given x particular determined using probabilistic model window evolution congestion avoidance phase consider evolution k segmentation buffer queue process loss occurs k k1 n k increment tcp window interval characterized follows k k1 ack arriving source say time window size increases one probability 1 however assume window size increases one probability 1 probability change every arrival instead use window assumption due arrivals source queue window size increases random amount n k see acks maximum increase window size let us define n k abd similarly get recursive relations b k1 consider example explaining evolution x k x k1 let x b 2 1 ie source service rate twice bottleneck link server loss take place delta packets flight packets arrive source queue increase window size n k hence minadn k delta packets transmitted bottleneck buffer delta packets transmitted rate 1 interval length delta loss occur given b compute range n k equation 11 satisfied suppose loss occurs n k x 0 ix let us define prfwindow achieved w loss occurs k compute quantity manner similar outlined computation px loss occurs u k given equation 8 loss occurs given x next cycle begins recovery loss includes next slow start phase suppose window 2m loss occured next congestion avoidance phase begin tcp window size slow start phase loss recovery reaches take dlog 2 cycles end period state various queues given channel state start next cycle described transition probability matrix modulating markov chain hence probability pxffx 2m 14 discussion clear given x k distribution x k1 computed without knowledge past history hence fx k k 0g markov chain given k x k distribution k1 computed without knowledge past history hence process fx k k k 0g markov renewal process mrp see 17 mrp model tcpabr 33 computation throughput given markov renewal process fx associate kth cycle accounts successful transmission packets let x denote stationary probability distribution markov chain fx k k 0g denote fl tcpabr throughput tcp abr markov renewalreward theorem 17 denotes expectation wrt stationary distribution x distribution x obtained transition probabilities section 32 x expected reward cycle begins bx dx values b state x interval k loss occurs take thus lossless intervals reward number acknowledgements returned source note actually accounts packets successfully received receiver previous intervals loss occurs abr source sending high rate link transmitting low rate loss occurs k delta need account reward interval starting k k1 slowstart ends note k congestion window ax dx first component reward dx bx buffered packets result acks causing left edge tcp window advance since link rate half source rate loss occur 2b packets enter link buffer abr source packets succeed cause left edge window advance assume window grows 1 process hence following lost packet ax packets sent thus bound reward timeout occurs dx loss timeout ensuing slowstart phase successfully transfers packets described earlier hence upper bound reward loss occurs ax summation index w window sizes actually optimistic reward packets transmitted next cycle even though successfully reached receiver could also conservative accounting assume loss occurs packets transmitted cycle retransmitted future cycles numerical results shall compare throughputs two bounds follows x similarly x ux mean cycle length x beginning cycle analysis section 32 follows hence x 34 tcp without atmabr without abr rate control source host would transmit full rate link assume link much faster bottleneck link model constant rate arrival process figure server queue time varying service capacity fed constant rate source infinitely fast system model similar previous case difference eliminated segmentation buffer assumptions make analysis however lead optimistic estimate throughput analysis analogous provided 4 tcpabr effective capacity feedback develop another kind rate feedback motivate approach consider finite buffer single server queue stationary ergodic service process see figure 6 suppose abr source sent packets constant rate would like find rate maximizes tcp throughput hence let input process queue constant rate deterministic arrival process given buffer size b max desired quality service qos say cell loss probability ffl would like know maximum rate arrival process qos guarantee met look discrete time approach problem see 16 practice discrete time approach adequate rate feedback updated multiples basic measurement interval consider slotted time queueing model service c packets slot buffer hold b max packets fc g stationary ergodic process let ec mean process c min minimum number packets served per slot constant number packets denoted fl arrive slot would like find fl max desired qos cell loss probability ffl achieved 16 following asymptotic condition considered x random variable represents stationary queue length lim log ie large b max loss probability better e gammaffib max shown logarithms taken base e performance objective met lim log ee gammaffi desired qos need let us denote expression right hand side equation 25 gamma eff gamma eff called effective capacity server intuitively expect values ffl gamma eff 2 c min ec let us apply effective capacity approach problem let abr source see figure adapt effective bandwidth bottleneck link server anal ysis assumed markov modulated bottleneck link capacity changes occurring every delta units time delta round trip propagation delay hence discrete time model fl number packet arrivals bottleneck link delta units time c number packets served interval compute effective capacity bottleneck link server using equation 25 however still need determine desired qos ie ffl equivalently ffi find ffi conduct following experiment let abr source transmit constant rate say given markov modulating process find maximizes tcp throughput assume effective capacity bottleneck link using equation 25 find smallest ffi results effective capacity value ffi obtained turns consistent wide range markov modulating processes use value ffi qos requirement tcp abr discrete time queueing model tcp abr analyzed manner analogous section 32 find analysis several sets parameters value ffi maximizes tcp throughput consistently large 6070 expected since tcp performance sensitive loss 41 algorithm effective capacity computation practice know priori statistics modulating process hence need online method computing effective bandwidth section develop algorithm computing effective capacity time varying bottleneck link carrying tcp traffic idea based equation 25 observation end previous section ffi large averages time figure 7 schematic windows used computation effective capacity bsed rate feedback take measurement interval time units also update interval rate feedback shall approximate expression effective bandwidth equation 25 replacing n 1 large finite log ee gammaffi effective capacity computation performed ms units time assume process ergodic stationary hence approximate expectation average n sets samples set taken ms units time note since process stationary ergodic n intervals need disjoint following argument work denoting c ij ith link capacity value jth block intervals j 2 f1 ng logn e gammaffi log 1 log e gammaffi motivated take ffi large yields log e gammaffimin notice essentially means average capacities n sliding blocks block representing ms units time feed back minimum values see figure 7 formula obtained equation 31 particularly simple form derivation viewed motivation formula formula however independent intuitive appeal see derivation required n large however study effect choice n large small performance effective capacity feedback done section 6 also provide guidelines selecting values n various situations formula equation 31 intuitively satisfying call effcap feedback consider case network changes slow n values average capacity one equal capacity bottleneck link hence rate fed back abr source instantaneous free capacity bottleneck link ie situation effcap instcap network variations fast effcap mean capacity bottleneck link done get best throughput hence effcap behaves like instcap slow network changes adapts mean bottleneck link capacity fast changes intermediate rates changes effcap necessarily conservative feeds back minimum link rate another benefit could get using effcap effcap assumes large value ffi means cell loss probability ffl small implies tcp throughput essentially abr throughput thus effcap used along minimum cell rate feature abr service guarantee minimum throughput tcp connections simulation results presented demonstrate 5 numerical simulation results section first compare analytical results throughput tcp without abr abr instcap feedback simulation results hybrid tcp simulator involving actual tcp code model network implemented loopback driver linux pentium machine show performance tcp improves abr used endtoend data transport tcp study performance effcap scheme compare instcap scheme efficiency mean time per state rtd conservative analysis 10 packets conservative analysis 12 packets optimistic analysis 12 packets testbed results 10 packets testbed results 12 packets figure 8 analysis simulation results instcap feedback throughput tcp abr round trip propagation delay 40 time units bottleneck link buffers either 10 12 packets notice 80 lowest two curves testbed results uppermost two curves optimistic analysis middle two curves conservative analysis 51 instantaneous rate feedback scheme recall previous section bottleneck link markov modulated analysis assumed modulating chain two states call high state low state low state link capacity used higher priority traffic link capacity fraction link capacity high state full link rate available set results present section assume fraction 05 also assume mean time state ie markov chain symmetric denote mean time state denote mean time state normalized delta ie example delta 200msec means mean time per state 400msec note analysis applies 1 large value means network changes slow compared round trip propagation delay rtd whereas 1 means network transients occur several times per round trip time linux kernel implementation network simulator markov chain make transitions every 30msec hence take also measurement interval explicit rate feedback interval ie denote one packet transmission time bottleneck link high rate state one time unit thus results presented packet transmission time low rate state 2 time units plot bottleneck link efficiency vs mean time spends state ie define efficiency throughput fraction mean capacity bottleneck link include tcpip headers throughput account atm headers overhead use words throughput efficiency interchangeably modulating markov chain spending time state mean capacity link 075 figure 8 shows throughput tcp abr instcap scheme 2 compare optimistic analysis conservative one see section 33 testbed ie simulation results different buffer sizes analysis processes embedded multiples one round trip propagation delay feedback bottleneck link sent every rtd feedback reaches abr source one round trip propagation delay simulations however feedback sent abr source every 30msec reaches abr source one round trip propagation delay figure 8 see except small analysis simulations match within percent analyses less observed throughputs 1020 small explained note model assume packets arrive leave back back abr source rate change occurs bottleneck link packets arrive back back source sends twice rate bottleneck link example every two packets arriving bottleneck link one gets queued however reality packets need arrive back back hence queue buildup slower means probability packet loss occurs bottleneck link buffer actually lower analytical model effect becomes significant rate bottleneck link variations increase however observe simulations effect significant values figure 9 shows throughput tcp without abr see simulation results give throughput upto 20 less analytical ones occurs due two reasons even 1 throughput tcp abr go 1 atm overheads every 53 bytes transmitted 5 bytes atm headers hence asymptotic throughput approximately 90 efficiency mean time per state rtd figure 9 analysis simulation results throughput tcp without abr round propagation delay 40 time units bottleneck link buffers either 10 12 packets observe tcp sensitive bottleneck link buffer size changes assumed analysis loss occurs slowstart phase shown 11 bottleneck link buffer less 1of bandwidthdelay product corresponds 13 packets 6500 byte buffer loss occur slowstart phase ii optimistically compute throughput tcp using upper bound reward loss cycle see figures 8 9 abr makes tcp throughput insensitive buffer size variations however tcp alone significant worsening throughput buffer reduction explained fact abr control loop converged buffer size immaterial loss takes place source bottleneck link rate however without abr tcp loses packets even transients occur useful observe since times curves normalized packet transmission time high rate state results several different ranges parameters read curves give example link capacity 155mbps high rate state tcp packets size 500 bytes one time unit 258sec round trip propagation delay delta means changes link bandwidth occur efficiency mean time per state rtd alone 8 packets alone 12 packets figure 10 simulation results tcp without abr instcap feedback small values rtd 40 time units average every 1032msec consider another example link capacity 2mbps high rate period let packet size 1000bytes delay corresponding 40 time units 160msec corresponds changes occurring every 16 seconds two examples illustrate fact curves normalized used read numbers many scenarios 3 figures 8 9 see performance tcp improves 20 abr employed data transport instcap feedback used changes link rate slow improvement performance abr due fact abr pushes congestion network edge tcp window grows beyond point pipe gets full ie w r packets start queueing abr segmentation buffer end system large window size increases till maximum window size advertised receiver reached loss occurs network abr source sends right rate bottleneck link hence end tcp window size fixed maximum window size pipe always full assumptions analysis render inapplicable small figure 10 compares simulation results tcp abr instcap feedback without abr various buffer sizes results starting going 3 note however delta absolute parameter curves since governs round trip pipe thus although normalized delta curves yield values fixed varying delta note even though throughput improvement due abr great small performance tcp significantly worsen due abr next section see better rate feedback abr result distinct improvement tcpabr throughput even range see figure 10 becomes less 1 throughput tcp increases explained fact rate mismatch occurs interval time less one round trip propagation delay result buffer size required handle overload becomes less becomes small packet sent different rate hence abr source effectively sends mean capacity loss rarely occurs buffers handle almost rate mismatches hence throughput increases 52 comparison effcap instcap performance simulation efficiency mean time per state rtd effective capacity 8 packets effective capacity 10 packets effective capacity 12 packets instantaneous rate feedback 8 packets instantaneous rate feedback 10 packets instantaneous rate feedback 12 packets figure 11 simulation results comparison effcap instcap feedback schemes tcp abr various bottleneck link buffers 812 packets rtd 40 time units figure 7 figure compare performances relatively large figure 11 use results testbed compare relative performances effcap instcap feedback schemes abr recall effcap algorithm two parameters namely number samples used block average n number blocks samples minimum taken efficiency mean time per state rtd effective capacity 8 packets effective capacity 10 packets effective capacity 12 packets instantaneous rate feedback 8 packets instantaneous rate feedback 10 packets instantaneous rate feedback 12 packets figure 12 simulation results comparison effcap instcap feedback schemes tcp abr various bottleneck link buffers 812 packets rtd 40 time units figure 7 figure compare performances small values figure effcap scheme uses ie average one round trip propagation delay 4 worth samples also maintain window 8 rtd worth averages ie maintain averages bottleneck link returns minimum abr source source adapts rate case instcap scheme simulation rate fed back every 30msec see figure 11 large throughput effcap worse instcap scheme 34 conservative nature effcap algorithm takes minimum available capacity several blocks time interval however see figure 12 small effcap algorithm improves instcap approach 1020 significant improvement seems worthwhile lose percent efficiency large gain large improvement small summarize figures 13 14 plotted throughput tcp abr using two different feedback schemes compared results throughput tcp without abr see throughput tcp improves 4 new sample generated every 30msec rtd 200msec example hence 6667 round 7 efficiency mean time per state rtd effective capacity 10 packets instantaneous rate feedback 10 packets figure 13 simulation results comparison throughput tcp abr effective capacity scheme instantaneous rate feedback scheme tcp without abr buffer 10 packets parameters remaining simulations0506070809 efficiency mean time per state rtd effective capacity 10 packets instantaneous rate feedback 10 packets figure 14 simulation results comparison throughput tcp abr effective capacity scheme instantaneous rate feedback scheme tcp without abr buffer 10 packets parameters remaining simulations abr employed link level data transport plots clearly brings merits effective capacity scheme see values effcap scheme performs considerably better tcp alone large throughput improvement 30 small improvement order 1015 adaptive effcap succeeds keeping tcp throughput better minimum link rate instcap fails small thus mcr abr connection may used guarantee minimum tcp throughput 6 choice n effcap 61 significance n begin recalling results shown figures 11 12 figures identify three broad regions performance relation large 50 rate mismatch occurs small fraction also rate mismatches infrequent implying infrequent losses thereby increasing throughput hence sufficient track instantaneous available capacity choosing small values n verified figure 11 shows instcap feedback performs better region hand small fraction delta 02 frequent rate mismatches small durations compared delta reduces buffer requirement hence losses occur rarely rapid variations capacity even small provides mean capacity also n averages roughly equal mean capacity thus source essentially transmits mean capacity effcap well instcap feedback hence high throughput feedbacks seen figure 12 intermediate values 05 20 throughput drops substantially types feedback values comparable delta hence rate mismatch frequent persists relatively longer causing buffer build larger value leads frequent losses frequent losses throughput adversely affected tcps blind adaptation window control range expect see severe throughput loss sessions large delta therefore region need choose n properly essentially avoid rate mismatch hence loss capacity estimate yield minimum capacity implying need small large n small helps avoid averaging many samples large n helps pick minimum selection n cannot based value alone however delta absolute parameter tcp window control major effect tcp throughput hence selection n seen results section 62 62 simulation results discussion simulations carried hybrid simulator also used section 5 capacity variation process two state markov chain high state capacity value 100kbsec kb kilo bytes low state 50kbsec mean capacity thus 75kbsec simulations measurement feedback 30ms throughput measured data transfer 10mb file average throughput 4 file transfers reported tcp packet size 500 bytes maximum tcp window 32kb denotes number measurement samples averaging window effective capacity method uses n overlapping windows see figure 7 determine minimum average thus n corresponds memory algorithm introduce following notation simulation results means average calculated measurement intervals corresponding round trip propagation delay delta means e averages compared memory algorithm k round trip times example let 200ms ie minimum 49 averages 621 study n section study effect n throughput carrying two sets simulations case 1 fixed delta varying figure 15 shows effect n throughput tcp session given delta equivalently rate capacity variation varying results corroborate discussion beginning section 61 fixed delta large 60 small value n performs slightly better whereas small 03 throughput increases steeply negligible throughput gain increasing n 03 1 expected improvement seen larger n slight improvement seen varying n efficiency mean time per state rtd efficiency mean time per state rtd figure 15 efficiency variation increasing values n varied 32ms 40s link buffer 10 pkts 5000kb advantage choosing larger value n intermediate range 02 clearly seen case 2 fixed varying delta03040506 efficiency mean time per state rtd figure efficiency vs fixed 1000ms delta varied right left 50ms 500ms delta link buffer10 efficiency mean time per state rtd figure 17 efficiency vs fixed 100ms delta varied right left 50ms 500ms delta link buffer10 pkts figures 17 show efficiency variation different values n fixed delta varied note according notation n different different deltas n kdelta curve example n n 4delta curve ie memory algorithm 4 rtds 100ms respectively 6 12 notice compared figure 15 figures 16 17 show different efficiency variations former case varied delta kept constant whereas latter case fixed delta varied indicated section 61 delta absolute parameter affects throughput figure 16 corresponds delta500ms figure 17 corresponds 50ms considerable throughput difference demonstrates dependence absolute value delta observed throughput larger values delta lower small values delta difference tcp session larger delta needs larger window 5 achieve desired throughput single packet loss causes tcp window drop packet loss takes longer time session larger delta rebuild window session smaller delta intermediate range explained section 61 losses frequent high hence throughput session large delta severely affected figure 17 substantial improvement throughput seen memory effcap algorithm increases larger memory gives better throughput wider range delta compared lower values reason observations follows given delta n increases able track minimum capacity value better minimum capacity 50kbsec 66 mean capacity 75kbsec hence n increases see efficiency increasing 06 small average delta yields average rate whereas large average delta yields peak minimum rate thus large minimum deltas 4 6 adequate yield high throughput whereas small many averages need minimized get minimum rate figure shows 8 larger values n improve throughput according argument given see smaller n performs better improvement negligible conclusions drawn results follows choice n based delta large 20 n small along limiting case 1 small 02 n matter much intermediate range large n better 622 study section study performance averaging parameter already seen figure 11 60 small value selected study lower ranges 5 actually tcp window depends directly bandwidth delay product numerical results however link speed fixed hence window depends simply delta efficiency window size measurement intervals rtt 50ms rtt 100ms efficiency window size measurement intervals rtt 50ms rtt 100ms rtt 200ms figure efficiency variation varying set 1000ms three delta values 50ms 100ms 200ms considered lefthand graph n set according righthand n 12delta varied 1 10 ie averaging interval varied 30ms 300ms link buffer 10 pkts ranges 5 efficiency window size measurement intervals rtt 50ms rtt 100ms rtt 200ms050709 efficiency window size measurement intervals rtt 50ms rtt 100ms rtt 200ms figure 19 efficiency variation varying set 100ms three delta values 50ms 100ms 200ms considered lefthand graph n set according righthand n 12delta varied 1 10 link buffer 10 pkts ranges 05 study effect vary window size two n settings effect n could differentiated varied 1 10 measuring intervals results shown figure figure 19 100ms values delta 50ms 100ms 200ms thus range consideration 05 20 already found needs small range consideration however observe throughput sensitive figure 18 clear advantage increasing n seen 200ms ms figure see slight trend decreasing throughput increasing delta small small possible track instantaneous capacity better larger larger delta values 1000ms mentioned trend greatly reduced making throughput insensitive however slight decrease throughput seen case ms takes larger values reason follows discussed section 61 larger value makes response algorithm sluggish hence track minimum intermediate range larger n needed case n fixed hence decrease larger similar effect seen figure 19 delta50ms 100ms figure 19 range 05 2 throughput insensitive variation insensitivity observed case n small larger delta50ms 100ms 1015 decrease throughput seen reason explained inability track minimum smaller value n conclude intermediate range throughput sensitive small delta larger eg performs better since possible track instantaneous rate general small value improves throughput intermediate range larger values n needs increased enable tracking minimum 7 tcpabr effcap feedback multiple sessions sharing bottleneck link throughput fairness major issue multiple sessions sharing bottleneck link seen tcp alone unfair towards sessions larger round trip times may expected however tcp sessions abr get fair share available capacity 14 fairness instcap feedback investigated shown slow variations available capacity tcp sessions abr employing instcap feedback achieve fairness section study fairness tcp sessions abr effcap feedback scheme simulations use 240ms roundtrip time session 1 360ms session 2 link buffer size bytes denote delta 1 delta 2 roundtrip times session 1 session 2 respectively notations described earlier subscripts denote session number following graphs mean time per state markov chain divided larger 360ms simulations carried calculating effcap two different ways explained case 1 effective capacity case calculate effcap session independently done selecting proportional delta 30ms update interval select session 1 2 take 132 see section 6 effcap computed n session fedback 1of figure 20 shows simulation results see small values 03 sessions receive equal throughput however 03 unfairness seen towards session larger propagation delay explained discussion section 61 range due frequent rate mismatches hence losses tcp behavior dominant packet drop leads greater throughput decrease session larger delta session smaller delta0250350450550 efficiency mean time per state larger rtd session 1240ms session 2360ms0250350450550 efficiency mean time per state larger rtd session 1240ms session 2360ms figure 20 efficiency variation mean time per state normalized larger case two sessions sharing link delta 1 240ms delta 2 360ms link buffer 18pkts session fed back fair share half effcap calculated 72 case 2 effective capacity simulation corresponds average delta 1 delta 2 ie 300ms 10 measurement intervals correspondingly choosing efficiency mean time per state larger rtd session 1240ms session 2360ms0250350450550 efficiency mean time per state larger rtd session 1240ms session 2360ms figure 21 efficiency variation mean time per state normalized larger case two sessions sharing link delta 1 240ms delta 2 360ms link buffer 18pkts averages session fed back fair share half effcap calculated n way making rate calculation independent individual roundtrip times observe figure 21 effcap calculated way yields somewhat better fairness scheme used case 1 also see better fairness obtained even intermediate range however drop overall efficiency throughput session smaller delta reduced figures 22 23 show comparison tcp alone tcp abr effcap feedback longer range curves include results figures 20 21 see 20 effcap gives fairness sessions whereas tcp grossly unfair session larger delta slight decrease overall efficiency tcp abr note tcp abr link actually carries 10 bytes atm overhead tcp alone also see figure even 20 observed case instcap 14 conclusions paper first developed analytical model widearea tcp connection endtoend abr instcap feedback running single bottleneck link timevarying capacity compared analytical results performance tcp without abr abr instcap rate feedback results hybrid efficiency mean time per state larger rtd session 1 effcap session 2 effcap session 1 tcp alone session 2 tcp alone figure 22 comparison efficiency sessions tcp alone tcp abr employing effcap feedback case 1 delta 1 240ms delta 2 360ms cases use link buffer pkts simulation seen analysis simulation results tcp abr match quite well whereas analysis overestimates performance tcp without abr results show throughput improvement running tcp abr depends relative rate capacity variation respect round trip delay connection slow variations link capacity improvement significant 25 30 whereas rate variations comparable round trip delay tcp throughput abr slightly worse tcp alone also proposed effcap effective capacity based algorithm rate feedback simulated tcp abr effcap feedback shown unlike instcap feedback effcap succeeds keeping tcp throughput higher minimum bandwidth bottleneck link see figure 12 effcap computation involves two parameters n throughput variation tcp session abr employing effcap feedback broadly divided three regions selection parameters thus depends range well roundtrip propagation delay large 60 n need small ideally efficiency mean time per state larger rtd session 1 effcap session 2 effcap session 1 tcp alone session 2 tcp alone figure 23 comparison efficiency sessions tcp alone tcp abr employing effcap feedback case 2 delta 1 240ms delta 2 360ms cases use link buffer pkts instcap performs best region small 03 sufficient source send mean bottleneck rate rapid capacity variations mean capacity measured selecting large however becomes small choice n matter much intermediate range 05 20 throughput decreases due frequent losses hence n need selected carefully region large value n improves throughput whereas performance insensitive towards general small value performs better given value n throughput drop region compensated choosing large buffer thereby reducing losses summary broad guideline buffer sizes studied using provides good throughput performance tcp abr wide range delta values case multiple sessions effcap feedback provides fairness wider range instcap effcap feedback based average roundtrip times sessions seen provide fairness even capacity variations intermediate range advantage instcap fair rate variations slow compared delta 14 r atm forum traffic management specification version 40 simulation tcp performance atm networks impact atm abr control performance tcptahoe tcpreno congestion avoidance control modified tcp congestion avoidance algorithm erica switch algorithm abr traffic management atm networks performance tcpip abr service atm networks buffer requirements tcpip abr performance tcp abr atm backbone various vbr traffic patterns comparative performance analysis versions tcp local network lossy link performance tcpip networks high bandwidth delay products random loss tcp atm abr ubr dynamics tcp traffic atm networks tcp endtoend abr study tcp performance endtoend rate control stochastic available capacity slow start congestion avoidance fast retransmit fast recovery algorithms effective bandwidths call admission traffic policing filtering atm networks stochastic modeling theory queues prentice hall tr performance tcpip networks high bandwidthdelay products random loss comparative performance analysis versions tcp local network lossy link analysis source policy effects tcp ratecontrolled atm networks tcp wireless link level error control erica switch algorithm abr traffic management atm networks modeling tcp reno performance new approach asynchronous distributed rate control elastic sessions integrated packet networks ctr aditya karnik anurag kumar performance tcp congestion control explicit rate feedback ieeeacm transactions networking ton v13 n1 p108120 february 2005 jungshian li chuangang liu chengyu huang achieving multipointtomultipoint fairness rcnwa journal systems architecture euromicro journal v53 n7 p437452 july 2007 ahmed e kamal discretetime modeling tcp reno background traffic interference extension redbased routers performance evaluation v58 n23 p109142 november 2004