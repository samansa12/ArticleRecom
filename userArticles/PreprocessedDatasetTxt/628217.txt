performance study robust load sharing strategies distributed heterogeneous web server systems replication information across multiple servers becoming common approach support popular web sites distributed architecture mechanisms assign client requests web servers scalable centralized mirrored architecture paper consider distributed systems authoritative domain name server adns web site takes request dispatcher role mapping url hostname ip address visible node web server web cluster interface architecture support local geographical distribution web servers however adns controls small fraction requests reaching web site address mapping requested client access indeed reduce internet traffic address resolution cached various name servers timetolive ttl period opens entirely new set problems traditional centralized schedulers paralleldistributed systems face heterogeneity assumption web node capacity much likely practice increases order complexity request assignment problem severely affects applicability performance existing load sharing algorithms propose new assignment strategies namely adaptive ttl schemes tailor ttl value address mapping instead using fixed value mapping requests adaptive ttl schemes able address nonuniformity client requests heterogeneous capacity web server nodes extensive simulations show proposed algorithms effective avoiding node overload even high levels heterogeneity limited adns control b introduction ever increasing trac demand popular web sites parallel distributed architecture provide transparent access users preserve one logical interface wwwsiteorg system scalability transparency require internal mechanism automatically assigns client requests web node oer best service 25 17 13 6 besides performance improvement dynamic request assignment allows web server system continue provide information even temporary permanent failures servers paper consider web server system collection heterogeneous nodes visible ip address one node may consist single web server multiple server machines behind network interface web cluster systems client request assignment decision typically taken network web switch level client request reaches web site domain name server system dns level address lookup phase url hostname web site translated ip address one nodes web server system 8 address mapping request handled authoritative domain name server adns web site therefore serve request dispatcher original installations locally distributed web server systems dnsbased request assignment include ncsa httpserver 25 sweb server 4 lbnamed 34 sunscalr 36 geographical scale web site typically built upon set distributed web clusters cluster provides one ip visible address client applications dnsbased dispatching mechanisms geographically distributed systems implemented several commercial products cisco distributeddirector 11 alteon websystems gslb 3 resonates global dispatcher 33 f5 networks 3dns 19 hydraweb techs 23 radware wsd 31 ibm network dispatcher 26 foundry networks 21 case multiple web servers location web clusters various web switch solutions described 12 17 22 35 29 web switch full control incoming requests however approach best suitable locally distributed web server system moreover web switch become system bottleneck web site subject high request rates one dispatching mechanism paper focus dnsbased architectures scale locally geographically distributed web server systems dispatching algorithms implemented adns level address new challenging issues main problems load sharing come highly uneven distribution load among client domains 5 16 internet mechanisms address caching let adns control small fraction often order percentage requests reaching web site adns species period validity cached addresses value referred timetolive ttl interval typically xed time address mapping requests reaching adns unlike web switch manage client requests reaching site limited control adns prevents risks bottleneck dnsbased distributed web server systems hand feature creates challenge adnsbased global scheduling 1 algorithms makes subject quite dierent existing literature centralized schedulers traditional paralleldistributed systems almost full control job requests 18 10 32 24 general view problem nd mechanisms algorithms able stabilize load system control arrivals limited percentage total load reaching system realistic scenarios 13 shown application classical dispatching algorithms roundrobin leastloadedserver adns often results overloaded web nodes well saturation overall system capacity dispatching policies integrate client information feedback alarms highly loaded web nodes achieve much better performance homogeneous web server system complexity adns assignment problem increases presence web nodes dierent capacities web systems called heterogeneous nodes much likely found practice result nonuniform distribution client requests rates limited control dispatcher node heterogeneity adns take global scheduling decisions great uncertainties paper nds simple extension algorithms homogeneous web server systems proposed 13 perform well policies show poor performance even low levels node heterogeneity static dynamic global scheduling policies heterogeneous parallel systems proposed 2 27 cannot used peculiarities adns scheduling problem qualitative observations preliminary performance results convinced us entirely new approach necessary paper propose evaluate new adns dispatching policies called adaptive ttl algorithms unlike conventional adns algorithms xed ttl value used address mapping requests tailoring ttl value adaptively address request opens new dimension perform load sharing extensive simulation results show strategies able avoid overloading nodes eectively even high levels node heterogeneity adaptive ttl dispatching simple mechanism immediately used actual environment requires changes existing web protocols applications parts direct control web site technical management installed base hosts 1 paper use denition global scheduling given 10 dispatching synonymous name servers user software huge think realistic dispatching mechanism must work without requiring modications existing protocols address mechanisms widely used network applications moreover adaptive ttl algorithms low computational complexity require small amount system information show robust performance even presence noncooperative name servers information system state partial inaccurate outline paper follows section 2 provide general description environment section 3 focus new issues distributed web server system introduces adns global scheduling problem examine relevant state information required facilitate adns scheduling section 4 consider various adns scheduling algorithms constant ttl propose new class adaptive algorithms section 5 section 6 describe model parameters heterogeneous distributed web server systems performance study moreover discuss appropriate metrics compare performance algorithms section 7 present performance results various algorithms wide set scenarios section 8 analyze implications performance study summarize characteristics proposed algorithms section 9 contains concluding remarks environment paper consider web server system collection fs heterogeneous nodes numbered nonincreasing order processing capacity node may consist single server web cluster may based single multiprocessors machines dierent disk speeds various internal architectures however point view address heterogeneity notion node may dierent capacity satisfy client requests particular node characterized absolute capacity c expressed hits per second satisfy relative capacity ratio capacity capacity powerful node web server system moreover measure heterogeneity level distributed architecture maximum dierence relative node capacities example absolute capacities nodes hitssec vector relative capacities web site built upon distributed web server system visible users one logical hostname wwwsiteorg however ip addresses web nodes servers clusters visible client applications operation www works clientserver system clients submit requests objects identied uniform resource locator url specied user url consists hostname part document specication hostname logical address may refer one multiple ip addresses paper consider latter instance ip address node web server system hostname resolved address mapping request managed domain name server system called lookup phase may involve several name servers instances also adns client received ip address web node direct document request selected node problem small percentage client requests actually needs adns handle address request indeed path clients adns typically several name servers valid copy address mapping returned adns mapping found one name servers path ttl expired address request resolved bypassing name resolution provided adns web browsers user side also cache address mapping period usually 15 minutes adns control clients set local name servers connected network local gateways rewalls socks servers refer subnetwork behind local gateways domain 3 dnsbased web server system section rst consider various issues dnsbased dispatching examine state conguration information useful adns discuss ways obtain information 31 dns global scheduling issues distributed web server system uses one url hostname provide single interface users address request reaching system adns returns tuple ip address ttl rst tuple entry ip address one nodes web server system second entry ttl period name servers along path adns client cache mapping addition role ip address resolver adns distributed web server system perform global scheduler distributes requests based optimization criterion load balancing minimization system response time minimization overloaded nodes client proximity rst consider scheduling issue address mapping delay discussion ttl value selection section 5 new approach introduced paper existing adnses typically use dns rotation roundrobin rr 1 leastloaded server 34 proximity 11 algorithms map requests nodes observed policies show ne performance unrealistic hypotheses adns almost full control client requests clients uniformly distributed among domains unfortunately web environment distribution clients among domains highly nonuniform 5 issue limited adns control cannot easily removed indeed ip address caching name servers ttl period limits control adns small fraction requests reaching web server system although ttl values close 0 would give control adns various reasons prevent solution besides risks causing bottleneck adns small ttl values typically ignored name servers order avoid overloading network name resolution trac adns assignment coarse grain distribution load among web nodes proximity take account heavy load uctuations web workload amplied geographical context besides burst arrivals uniform distribution among internet domains clients connected web site world time zones another cause heterogeneous source arrivals considering highly popular web sites adns selects web node basis best network proximity highly probable address resolution found caches intermediate name servers internet region even less address requests reach adns web server system point view combination nonuniform load limited control result bursts requests arriving domain node ttl period thereby causing high load imbalance main challenge nd realistic adns algorithm low computational complexity fully compatible web standards able address issues heterogeneity web nodes 32 relevant state conguration information dns schedul ing one important consideration dealing adns scheduling problem kind state conguration information used mapping url host names ip addresses indepth analysis carried 13 eectiveness dierent types state information adns scheduling homogeneous web server systems summarized scheduling policies roundrobin random used 25 4 28 require state information show bad performance realistic scenarios 13 see discussions section 71 detailed server state information algorithms using detailed information state web node example queue lengths present past utilization perform better previous ones still unable avoid overloading web node underutilizing nodes present load information capture eect future arrivals due past address resolutions makes server load information obsolete quickly poorly correlated future load condi tions excludes policies leastloadedserver class consideration heterogeneous web server system information client domain load eective scheduling policy take account client domain information adns decision ip address resolution aects selected node entire ttl interval hostname ip address mapping cached name servers therefore adns needs make adequate prediction impact future load nodes following address mapping key goal obtain estimation domain hit rate number hits per second reaching web server system ith domain multiplying ttl obtain hidden load weight average number hits domain sends web node interval new address resolution request reached adns information overloaded nodes information overload nodes useful adns avoid assigning address requests already overutilized nodes purpose excluding assignment load returns normal conditions scheduling algorithms combine domain hit rate information feedback information overloaded nodes make address mapping decision addition node processing capacities shall see later heterogeneous web server system node processing capacity needs taken account adns either making node assignment xing ttl value 33 information gathering mechanisms based observation previous section adns scheduling algorithms considered paper apply feedback alarm mechanism evaluate hit rate client domain connected web site main question whether kinds information actually accessible adns distributed web server system recall rst requirement adns algorithm must fully compatible existing web standards protocols particular state information needed policy received adns nodes adns entities web site management use collect exchange load information algorithms mechanisms need active cooperation web components browsers name servers users pursued require modications outofcontrol web components next examine adns access feedback alarm domain hit rate information implementation feedback alarm information requires two simple mechanisms monitor load web node asynchronous communication protocol nodes adns node periodically calculates utilization checks whether exceeded given threshold case node sends alarm signal adns excludes assignment load falls threshold last event communicated adns normal signal assume global scheduling algorithms discussed next consider node candidate receiving requests node overloaded although faulttolerance focus paper worth noting simple modication feedback mechanism could also avoid routing requests failed unreachable nodes either nodeinitiated synchronous messages schedulerinitiated polling mechanism strategies could combined scheduling algorithms also provide faulttolerance estimation domain hit rate cannot done adns alone information coming clients adns limited new session requiring address resolution adns sees ip address clients domain due address caching mechanisms adns see another address request coming domain ttl seconds independent domain hit rate hence viable approach estimate information requires cooperation web nodes track collect workload distributed web server system logle maintained node trace client accesses terms hits according common logle format 14 information hit includes remote domain hostname ip address requested url date time request request type furthermore also extended logs provide referred information linking request previous web page request client additional details found 9 node periodically sends estimate domain hit rates adns collector process gets estimates computes actual hit rate domain adding hit rate node finally node processing capacity information f g required static conguration information estimate number hits http requests per second node support figure 1 summarizes various components needed adns assuming node consists single web server machine addition dns base function include adns scheduler alarm monitor domain load collector ttl selector adns scheduler assigns address request one node based scheduling algorithm alarm monitor tracks feedback alarm servers avoid assigning requests overloaded node load level returned normal domain load collector collects domain hit information node estimates hit rate hidden load weight domain ttl selector xes appropriate ttl value address mapping also shown corresponding components web node besides http daemon server include load monitor request counter load monitor tracks node load issues alarm normal signal accordingly explained request counter estimates number hits received domain given period provides information domain load collector adns node web cluster multiple server machines request counter load monitor processes run web switch component would twofold role intracluster information collector interface adns algorithms constant ttl strategies work well homogeneous case cannot expected achieve acceptable results heterogeneous node system hence consider better performing homogeneous node algorithms seem extensible heterogeneous environment among several alternatives proposed 13 following policies gave promising results present forms extended heterogeneous node system take account nonuniform hit rates dierent node capacities twotier roundrobin rr2 algorithm generalization roundrobin rr algorithm based two considerations first since clients scheduler adns domain load collector selector alarm monitor http daemon server adns dns base function load monitor request counter web server node figure 1 software component diagram unevenly distributed domain hit rates dierent secondly risk overloading nodes typically due requests coming small set popular domains therefore rr2 uses domain hit rate information partition domains connected web site two classes normal hot domains particular rr2 sets class threshold evaluates relative domain hit rate respect total number hits interval connected domains domains characterized relative hit rate larger class threshold belong hot class default x class threshold 1jdj jdj average number domains connected nodes say domain relative hit rate larger class threshold belongs hot class rr2 strategy applies roundrobin policy class domains separately objective reduce probability hot domains assigned frequently nodes partitions domains two classes investigated little performance improvement 13 also rr easily extendible heterogeneous web server system addition probabilistic routing features basic idea make round robin assignment probabilistic based upon node capacity purpose generate random number 0 1 assuming 1 last chosen node assign new requests otherwise i1 becomes next candidate repeat process generate another random number compare relative capacity i1 straightforward modication allows rr2 rr schedule requests taking account various node capacities probabilistic versions rr rr2 algorithms denoted probabilisticrr prr probabilisticrr2 prr2 respectively hereafter refer conventional rr deterministicrr drr distinguish prr analogously drr2 prr2 dynamically accumulated load dal algorithm uses domain hit rate estimate hidden load weight domain time adns makes node selection following ip address resolution request accumulates hidden load weight requesting domain bin node predict many requests arrive chosen node due mapping new ip address request adns selects node lowest accumulated bin level dal makes node selection based hidden load weight clients generalization algorithm heterogeneous web server system take account node capacity solution normalize hidden load weight accumulated bin capacity corresponding node ip address assignment dal selects node would result lowest bin level assignment minimum residual load mrl algorithm modication basic dal analogous previous algorithm mrl tracks hidden load weight domain addition adns maintains assignment table containing domain node assignments times occurrences let l j average session length client jth domain period ttll j eect assignment expected expire requests sent jth domain due assignment hence entry assignment deleted assignment table arrival address resolution request time adns evaluates expected number residual requests node basis previous assignments chooses node minimum number residual requests min domain j w w j hidden load weight jth domain relative capacity ith node j k time assignment k th address resolution request coming jth domain ith node mapping table notation denotes positive terms considered internal sum residual load expected remain assignment corresponding term detected negative term j represents time instant address mapping expires term j represents remaining time mapping still valid normalizing w j eect node heterogeneity captured average session lengths l j readily available adns estimated web nodes session identied via cookie generation mechanism inferred heuristics using sites topology referred information 30 since l j expected rather stable time frequency exchanges nodes adns information relatively low addition extensions adns algorithms taken homogeneous envi ronments consider scheduling disciplines specically tailored heterogeneous environment basic idea reduce probability assigning requests hot domains less powerful nodes two representative examples approach twoalarm algorithms strategy modies asynchronous feedback mechanism introducing twolevels threshold dierent relative capacity corresponding level goal reduce probability node high load gets selected serve requests since strategies prr prr2 base decision relative node capacities force reduction perceived relative capacity node utilization becomes high fact utilization node exceeds rst threshold 1 adns reduces relative capacity example dividing two utilization exceeds second threshold 2 adns xes 0 capacities 0 would use random choice weighted node capacities restrictedrr2 algorithm simple modication rr2 requests coming normal domains divided among nodes probabilistic manner previously described requests coming hot domains assigned top powerful nodes distributed web server system avoid restricted subset serve heavy requests consider top node node relative capacity 08 5 dns algorithms dynamic choice ttl shall see section 71 algorithms derived generalizations scheduling policies used homogeneous web server system inadequate address node hetero geneity unevenly domain hit rates limited adns control poor performance motivated search new strategies intervene ttl value parameter controlled adns section propose two classes algorithms use policy section 4 selection node dynamically adjust ttl value based dierent criteria rst class algorithms mainly addresses problem limited control adns purpose increases adns control many overloaded nodes dynamic reduction ttl second class algorithms oriented address node heterogeneity unevenly distributed clients use ttl values reduce load skew summary main characteristics discussed dispatching algorithms table 2 section 8 shall see set ttl value address request variable ttl algorithm requires information number overloaded nodes adaptive ttl algorithms need information processing capacity node hit rate connected domain since type information used adns scheduler discussed previous section new information required dynamically x ttl value 51 variable ttl algorithms firstly consider variable ttl varttl algorithms tune ttl values based load conditions overall web server system number overloaded nodes increases algorithms reduce ttl value otherwise use default higher ttl values rationale strategies comes principle adns control incoming requests many nodes distributed system overloaded paper implement following simple formula determining ttl value time ttl base ttl value node overloaded joverloadtj minimum upper bound value number overloaded nodes time example ttl base 300 seconds 60 seconds ttl value drops 240 seconds one node gets overloaded xing 4 means ttl value drops 60 seconds even 4 nodes overloaded node selection varttl policies combined algorithm section 4 paper consider probabilistic versions rr rr2 prrvarttl prr2varttl 52 adaptive ttl algorithms instead reducing ttl value give control adns alternative address unevenly distributed hit rates heterogeneous node capacities assigning dierent ttl value address request rationale approach comes observation hidden load weight increases ttl value independently domain therefore properly selecting ttl value address resolution request control subsequent request load reduce load skews main cause overloading especially heterogeneous system specically make subsequent requests domain consume similar percentages node capacity address node heterogeneity nonuniform hit rates first consider node heterogeneity assign higher ttl value adns chooses powerful node lower ttl value requests routed less capable node due fact fraction node capacity powerful node handle larger number requests take requests longer ttl interval analogous approach adopted handle uneven hit rate distribution address requests coming hot domains receive lower ttl value requests originated normal domains hot domains higher hit rates shorter ttl interval even total number subsequent requests generated new class scheduling disciplines use approach called adaptive ttl consists twostep decision process rst step adns selects web node second step chooses appropriate value ttl interval strategies combined scheduling algorithm described section 4 due space limitations consider basic rr algorithm rr2 variant furthermore combine adaptive ttl policies deterministic probabilistic versions algorithms handle nonuniform requests using ttl values inversely proportional domain hit rate address system heterogeneity either node selection probabilistic policies use ttl values proportional node capacities deterministic policies 521 probabilistic algorithms probabilistic policies use prr prr2 algorithms select node value assigned based hit rate domain originated address request generic form denote ttli policy partitions domains classes based relative domain hit rate assigns dierent ttl value address requests originating dierent domain class ttli metaalgorithm includes various strategies obtain degenerate policy ttl1 uses ttl domain hence truly adaptive ttl algorithm policy ttl2 partitions domains normal hot domains chooses high ttl value requests coming normal domains low ttl value requests coming hot domains analogously strategy uses threetier partition domains denotes algorithm ttlk uses dierent ttl value connected domain actual implementation reduce amount bookkeeping domains lower hit rates may lumped one class ttlk policies let ttl j denote ttl value chosen requests coming jth domain time p parameter scales average ttl minimum ttl value hence overall rate address mapping requests j max hit rates available estimation time jth domain popular domain respectively 522 deterministic algorithms deterministic algorithms node selection done adns deterministic rr rr2 policy approach handling nonuniform hit rates via adjusting ttl value similar described probabilistic disciplines however value chosen considering node capacity well generic ttls policy partition client domains classes based domain hit rates ttl class node set inversely proportional class hit rate proportional node capacity deterministic ttls 1 algorithm degenerate case considers node heterogeneity ignores skew domain hit rates ttls 2 policy uses two ttl values node depending domain class requests normal hot domain ttls k algorithm selects ttl value node domain combination specically ttl chosen requests jth domain ith node time parameter scales average ttl minimum ttl value 6 performance model section provide details simulation model describe various parameters model discuss performance metrics compare dierent adns schemes 61 model assumptions parameters rst consider workload assume clients partitioned among domains based zipfs distribution distribution probability selecting ith domain proportional 1i 1 x 38 choice motivated several studies demonstrating one ranks popularity client domains frequency accesses web site distribution number clients domain function short head corresponding big providers organizations companies possibly behind rewalls long tail example workload analysis academic commercial web sites shows average 75 client requests come 10 domains 5 experiments clients partitioned among domains based pure zipfs distribution using default case represents uneven client distribution additional sensitivity analysis skew parameter x distributions included section 74 model details internet trac 15 focus paper web server system however consider major components impact performance system includes accurate representation number distribution intermediate name servers 7 aect operations performance adns scheduling algorithms address caching mechanisms moreover consider details concerning client session entire period access web site single user rst step client obtains adns cache name server gateway address mapping one web nodes address resolution process web server system consists heterogeneous nodes identical content requests clients assigned one nodes node selection completed client modeled submit multiple web page requests separated given mean think time number page requests per session time two page requests client assumed exponentially distributed 5 page request consists burst small requests sent node bursts represent objects contained within web page referred hits http10 protocol hit request establishes new connection client web node however address caching browser level guarantees client session served web node independently duration moreover new version http11 provides persistent connections session 20 consequence dierence http protocols aect results paper number hits per page request obtained uniform distribution discrete interval 515 previous measures reported roughly seven dierent hits per page however recent analyses indicate mean number embedded hits increasing 16 hit service time interarrival time hit requests node assumed exponentially distributed also consider case hits long mean service time like cgi type section 74 parameters used experiments reported table 1 default values brackets otherwise specied performance results refer default values thorough sensitivity analysis shown space limits reveals main conclusions experiments aected choice workload parameters number hits per page request mean service time interarrival time hits category parameter setting default values web system number nodes 7 system capacity 1500 hitssec average system load 1000 hitssec average utilization 06667 homogeneous domain connected 10100 20 client number 10003000 distribution among domains zipf geometric request web page requests per session exponential mean 20 hits per web page request uniform 515 interarrival page requests exponential mean 15 interarrival hits exponential mean 025 hit service time exponential mean 1c table 1 parameters system time values seconds experiments considered levels node heterogeneity table 1 reports details relative capacities heterogeneity level web server system carefully choosing workload system parameters average utilization system kept 23 whole capacity value obtained ratio oered load total number hits per second arriving web site system capacity sum capacity node denoted hits per second although considered dierent levels node heterogeneity keep system capacity constant allow fair comparison among performance proposed algorithms furthermore implement feedback alarm node periodically calculates utilization period 16 seconds checks whether exceeded given 075 threshold 13 additional simulation results shown indicate results sensitive parameters twoalarm algorithms two threshold xed 06 075 respectively constant ttl schemes default ttl value 240 seconds used 17 variable ttl algorithm ttl base xed 300 seconds note base ttl value ttl base higher ttl value constant ttl case fact one nodes becomes overloaded ttl value drops 240 seconds becomes constant ttl case adaptive ttl algorithms average ttl value xed 400 seconds keep minimum ttl value denoted ttl seconds maximum ttl value go 1200 seconds average ttl value considerable higher 240 seconds constant ttl case nonetheless shall see later adaptive ttl algorithms still perform far better constant algorithms sensitivity analysis ttl values provided section 74 simulators implemented using csim package 37 simulation run made hours web site activities condence intervals estimated 95 condence interval observed within 4 mean 62 performance metrics next examine metrics interest evaluating performance adns algorithm heterogeneous web server system main goal avoid web nodes becoming overloaded say objective minimize highest load among nodes instant commonly adopted metrics standard deviation node utilization useful purpose minimizing load dierences among web nodes secondary goal considerations lead us evaluate performance various policies focusing system maximum utilization given instant highest node utilization observed instant among nodes system example assume three nodes web server system utilizations 06 075 063 respectively time 1 093 066 042 respectively time 2 system maximum utilization 1 075 2 093 system maximum utilization 093 web site serious load problems 2 specically major performance criterion cumulative frequency system maximum utilization probability fraction time system maximum utilization certain value focusing highest utilization among web nodes deduce whether web server system overloaded moreover cumulative frequency provide indication relative frequency overloading example probability nodes less 080 utilized 075 implies probability least one node exceeding 080 utilized 025 practice performance various scheduling policies evaluated tracking periodic intervals system maximum utilizations observed simulation runs node maximum utilization changes time however system maximum utilization instant low means node overloaded time tracking period time system maximum utilization certain threshold get indication well web server system working recall experiments web server system subject oered load equal 23 overall system capacity note typically nodes even dierent proportions contribute maximum entire simulation run since average utilization xed 06667 distribution system maximum utilization perfect policy always maintaining utilization 06667 node step function goes 0 1 utilization 06667 evaluate sensitivity algorithms function system parameters node heterogeneity nd useful adopt dierent metric related cumulative frequency system maximum utilization set results consider 96th percentile system maximum utilization p robsystemmaxu tilization 096 words probability node web server system overloaded namely probnot overloaded system becomes performance metric interest 7 performance results performance evaluation proposed dispatching algorithms carried large number experiments subset presented due space limitation rst set experiments section 71 shows problem constant ttl algorithms illustrates point considering scheduling component sucient achieve good performance evaluate algorithms also explore ttl component remaining sections focus measuring eectively adaptive ttl algorithms applied adns scheduler controls small percentage requests avoid overloading nodes heterogeneous distributed web server system 71 constant ttl schemes section evaluate performance constant ttl algorithms based parameters shown table 1 obtained simulation results four heterogeneity levels web server system 20 65 figures 2 present performance lowest heterogeneity level table 1 gure also report ideal policy prr algorithm uniform distribution client request rates random algorithm worst performance yaxis cumulative probability relative frequency system maximum utilization reported xaxis higher probability less likely nodes overloaded hence better load sharing achieved example prr2 policy probability maximum utilization less 095 05 drr probability 02 gure conrms various probabilistic versions roundrobin policy perform better deterministic versions improvement even consistent look rr2 algorithm results mrl policy close prr2 much better drr algorithm often proposed dnsbased distributed systems indeed latter policy probability node overloaded 02 say 80 observed time least one overloaded node however even considering slightly heterogeneous system strategy achieves acceptable performance best instance web server system least one node overloaded p robsystemmaxu tilization 096 30 time shapes cumulative frequencies far ideal policys behavior motivated search alternative policies restrictedrr2 roundrobin two alarms restrictedrr2 prr2alarm2 respectively figures 3 analyzes sensitivity proposed algorithms constant ttl system heterogeneity yaxis probability web node overloaded xaxis heterogeneity level web server system gure shows dal mrlbased policies unable control node load distributed web server system heterogeneous performance variants constant ttl algorithms prralarm2 prr2alarm2 restrictedrr2 similar basic prr2 although prr2alarm2 algorithm often performs better policies strategy clearly outperforms policies system heterogeneity levels moreover diculty determining best strategy also conrmed reported experiments vary number domains clients average load none policies actually considered adequate probability least one overloaded node still high always 030 cumulative frequency system max utilization prr mrl drr random zipf figure 2 performance constant ttl algorithms heterogeneity level 2004080 probnot overloaded level prr mrl figure 3 sensitivity system heterogeneity constant ttl algorithms 72 comparison constant dynamic ttl schemes next set results evaluates system heterogeneity aects performance adaptive ttl schemes figure 4 compares various deterministic ttls algorithms low heterogeneity level 20 set consists deterministic rr2 rr scheduling schemes also shown gure drr scheme constant ttl first set ttl strategies rr2 scheduling scheme always slightly better rr scheme adaptive ttl schemes address node client heterogeneity perform signicantly better constant ttl policies policies taking account node heterogeneity done ttls 1 schemes improve performance much moreover results strategies use dierent node domain namely drrttls k drr2ttls k close envelope curve ideal prruniform policy similar results achieved probabilistic schemes combine adaptive ttl handle nonuniform domain hit rates probabilistic routing features address system heterogeneity figure 5 shows cumulative probability system maximum utilization heterogeneity level 20 relative order among strategies remains analogous previous order specically rr2 scheduling policies slightly better rr strategies ttlk strategies outperform ttl2 strategies also consider variable ttl varttl schemes performance varttl schemes close strategies furthermore probabilistic adaptive ttl approaches consistently better prr scheme constant ttl even heterogeneity level low 20 since rr2based algorithms perform better rrbased counterpart cumulative frequency system max utilization drr figure 4 performance deterministic algorithms heterogeneity level 2002061 cumulative frequency system max utilization prr figure 5 performance probabilistic algorithms heterogeneity level 20 mainder section mainly focus former class policies figures 6 7 refer distributed web server system 35 65 heterogeneity level respectively figure 6 shows adopt ttl proportional domain hit rate deterministic strategy ttls k prevails probabilistic ttlk hand consider two classes domains probabilistic approach ttl2 slightly better deterministic ttls 2 analogous results observed system heterogeneity equal 50 system parameters probabilistic approaches tend perform better deterministic strategies system heterogeneity high 60 figure 7 shows drr2 ttls k performs best look 98th percentile shape curve favor prr2ttlk consider lower percentiles moreover drr2ttls 2 prr2ttl2 algorithms performed less previous cases dierentiate favor probabilistic algorithms prr2varttl performs close prr2ttl2 strategy drr2ttls 2 drr2ttls 1 seem rather inadequate address high heterogeneity levels next consider average number messages adns constant ttl variable ttl adaptive ttl schemes specically figure 8 prr2 prr2varttl prr2ttlk chosen represent constant ttl variable ttl adaptive schemes respectively dierence among schemes class prr2 ttlk drr2ttls k small figure 8 shows number address requests alarm requests 35 heterogeneity level variable ttl schemes higher request load adns adaptive ttl constant ttl schemes comparable however important policy risks stress adns cumulative frequency system max utilization figure performance rr2based algorithms heterogeneity level 3502061 cumulative frequency system max utilization figure 7 performance rr2based algorithms heterogeneity level 6550150250350450dns messages per hour constant ttl variable ttl adaptive ttl constant requests alarms alarms alarms figure 8 number address resolution requests adns 73 sensitivity system heterogeneity set experiments evaluate sensitivity proposed strategies degree system heterogeneity 20 65 rst focus deterministic probabilistic policies figure 9 figure 10 respectively compare two classes policies rr2 figure 11 yaxis probability node web server system overloaded xaxis denotes heterogeneity level figures 911 show adaptive ttl algorithms relatively stable performance vary widely heterogeneity level increases 50 level sensible performance degradation observed policies however heterogeneity level large gap exists among schemes use dierent ttl value connected domain policies moreover achieving best performance ttls k ttlk algorithms display best stability ttl2 algorithms still acceptable combined rr2based scheduling schemes tend degrade higher heterogeneity level combined rrbased scheduling schemes varttl algorithm uses variable ttl depending upon number overloaded nodes unstable shown figure 11 drr shown figure performs much worse adaptive ttl policies similar constant ttl strategy comparing figure 9 figure 3 hereafter consider two types strategies instability poor performance respectively figure 11 shows assign dierent ttl connected domain drr2ttls k performs best two classes domains prr2ttl2 performs better drr2ttls 2 higher heterogeneity levels shown results following observed adaptive ttl schemes especially drr2ttls k prr2ttlk effective avoiding overloading nodes even system highly heterogeneous domain hit rates unevenly distributed pure zipfs function constant ttl strategies cannot handle nonuniformity client distribution well node heterogeneity various enhancements provided restrictedrr twoalarmrr schemes really eective dierentiating requests coming popular normal domains improves performance regardless whether ttl dynamically chosen xed indeed rr2 based strategies always slightly better rrbased counterparts deterministic strategies typically perform better probabilistic schemes however dierence large tends diminish high heterogeneity levels probnot overloaded level figure 9 sensitivity system heterogeneity probnot overloaded level figure 10 sensitivity system heterogeneity probnot overloaded level figure 11 sensitivity system heterogeneity rr2based algorithms 74 sensitivity ttl values workload parameters consider sensitivity average ttl values figure 12 prr2ttlk shown 20 heterogeneity level dierent mean ttl values 300 500 seconds drr2ttls k schemes show similar behavior prr2ttlk schemes shown readability gure adaptive ttl schemes outperform constant ttl scheme prr2 wide margin regardless tll values figure 13 drr2ttls k shown 50 heterogeneity level various mean ttl values prr2ttlk schemes shown readability gure superiority adaptive ttl schemes observed figure 14 shows sensitivity overload probability various ttl policies mean ttl value heterogeneity level 20 various dynamic figure 12 sensitivity ttl probabilistic algorithm cumulative frequency system max utilization figure 13 sensitivity ttl deterministic algorithm probnot overloaded prr figure 14 sensitivity ttl dynamic ttl schemes schemes perform far superior constant ttl schemes prr prr2 show much less sensitivity ttl values among dynamic ttl schemes drr2 ttls k provides best performance also rr2 policies perform better corresponding rr policies next study sensitivity client request distributions addition pure zipf distribution skew parameter distribution zipf distribution 05 uniform distribution corresponding considered figure 15 shows performance prr2ttlk dierent client distributions heterogeneity level 35 performance improves skew client distribution decreases geometric distribution performance close pure zipf distribution note mean ttl value kept 400 seconds cases client distributions dierent skew minimum ttl values geometric p03 figure 15 sensitivity client distribution mean ttl400 seconds02061 cumulative frequency system max utilization zipf x05 mean ttl158 sec geometric figure 16 sensitivity client distribution prr2ttlk dierent dierent client distributions see equation 3 hold minimum ttl value ttl 60 seconds cases figure 16 performance gap much larger skew client distribution increases spread ttl values among client domains hence also mean ttl value also increases skew indicated figure 16 next sensitivity hit service time examined consider case hit requests cgi dynamic request particularly long service time introduce new type web page requests consist one hit cgitype ordinary hits considered cgitype hit assumed average service time 10 times ordinary hits figure 17 shows performance prr2ttlk dierent percentages new type web page requests containing cgitype hit dynamic ttl scheme handles workload long hit service time well percentage long web page requests increases performance actually improves due fact given amount total load system per request load increases number subsequent requests arriving ttl period decrease adns control improves 75 robustness adaptive ttl schemes previous results point clear preference adaptive ttl schemes examine robustness considering two specic aspects one impact name servers gateways following ttl value recommended adns sensitive performance accuracy estimated domain hit rate latter less cgi req0 cgi req5 cgi req10 cgi req15 cgi req20 figure 17 sensitivity long requests prr2ttlk algorithms issue load domain remains relatively stable changes slowly however dynamic environment hit rates domains may change continuously dicult obtain accurate estimate 751 eects noncooperative name servers name server caches address mapping ttl period order avoid network saturation due address resolution trac small ttl values typically ignored name servers since common ttl lower threshold adopted name servers study consider worst case scenarios name servers gateways considered noncooperative proposed ttl lower given minimum perform sensitivity analysis threshold figure shows sensitivity adaptive ttl policies minimum accepted value name servers heterogeneity level 35 performance drr2ttls k ppr2ttlk gradually deteriorates minimum ttl value allowed name servers increases however prr2ttl2 almost insensitive minimum accepted ttl advantage drr2ttls k ppr2ttlk diminishes minimum ttl value accepted name servers increases ttls k schemes may sometimes need select quite low ttl value client request coming hot domain assigned node limited capacity hand probabilistic ttl2 strategy almost aected problem noncooperative name servers uses rough partitioning two classes domains able always assign ttl values higher 180 seconds experiments probnot overloaded minttlns figure 18 sensitivity minimum accepted ttl name servers 752 eects estimation error next examine maximum error estimating hit rate domain may aect system performance figures 19 20 compare various adaptive ttl schemes function estimation error heterogeneity levels 20 50 respectively experiment introduce perturbation hit rate domain adns estimates domain hit rates remain hence percentage error load estimate amount perturbation actual load case error hit rate busiest domain increased hit rates domains proportionally decreased maintain total load system eectively increases skew hit rate distribution hence represents worst case06081 probnot overloaded estimation figure 19 sensitivity estimation error hetero geneity level probnot overloaded estimation figure 20 sensitivity estimation error hetero geneity level 50 estimation error load perturbation increases system performance decreases eight algorithms however ttls k ttlk schemes clustered top show much less sensitivity ttls 2 ttl2 schemes bottom particular node heterogeneity high 50 error large 30 performance ttls 2 strategies degrade substantially contrast ttls k ttlk schemes slightly aected error estimating domain hit rate heterogeneity level less 50 performance degrades percentage points compared case estimation error shows robustness ttls k ttlk algorithms although ttls 2 ttl2 algorithms sensitive estimation error even limited 10 important note shown results refer positive perturbation client domain heaviest hit rate actually worst unrealistic case indirectly increase skews client request distributions pure zipfs distribution results reported consider negative perturbation heaviest domain hit rate show analogous performance ttlk policies much better performance ttls 2 ttl2 strategies expected reduction hit rate busiest domain makes client requests evenly distributed pure zipfs distribution 8 summary performance study table 2 outlines specic methods adns algorithm uses address heterogeneous nodes uneven distribution client requests summary balance load across multiple web nodes adns two control knobs scheduling policy node selection ttl value period validity selection exploring scheduling component alone constant ttl algorithms inadequate address node heterogeneity uneven distributions clients among domains variable ttl policies dynamically reduce ttl number overloaded nodes increases control given adns perform better constant ttl algorithms however approach sucient cope high heterogeneity levels category adns algorithm nonuniform client distribution heterogeneous nodes constant twotier domain partition prr probabilistic routing twotier domain partition probabilistic routing dal accumulated hidden load weight normalized bin mrl residual hidden load weight normalized residual bin prralarm2 two alarms probabilistic routing prr2alarm2 twotier domain partition two alarms probabilistic routing twotier domain partition limited probabilistic routing variable routing twotier domain partition probabilistic routing adaptive deterministic drrttls ttliclasses hit rate ttlnode capacities domain partition ttlnode capacities twotier domain partition ttlnode capacities adaptive ttl prrttl1 policy prr probabilistic prrttli ttliclasses hit rate probabilistic routing prr2ttl1 policy prr2 prr2ttli twotier domain partition probabilistic routing table 2 summary adns scheduling algorithms adaptive ttl schemes easily integrated even simple scheduling policies rr rr2 approach shows good performance various node heterogeneity levels system parameters even presence noncooperative internet name servers full control choice ttl values name servers cooperative drr2ttls k strategy choice limited control chosen ttl values drr2ttls k show reasonable resilient eect noncooperative name servers drr2ttls k prr2ttlk perform well even domain hit rate cannot accurately estimated high variability load sources heterogeneity level web server system aects achievable level perfor mance specically results indicate degree heterogeneity within 50 probability node overloading guaranteed best adaptive ttl policies always less 005010 therefore achieve satisfactory performance would desirable exceed heterogeneity level design distributed web server system moreover adaptive ttl algorithms give best results even homogeneous web server systems instances almost always able avoid overloading nodes even adns control client requests remains 34 total load reaching web site 9 conclusions although distributed web server systems may greatly improve performance enhance faulttolerance popular web sites success depends load sharing algorithms able automatically assign client requests appropriate node many interesting scheduling algorithms parallel distributed systems previously proposed however none directly adopted dynamically sharing load distributed web server system request dispatching carried authoritative dns web site main problems adns dispatcher controls small fraction client requests actually reach web server system besides requests unevenly distributed among internet domains problems complicated consider likely scenario web server system consisting heterogeneous nodes rst showed extending known scheduling strategies adopted homogeneous node case 13 lead satisfactory results therefore propose dierent class strategies namely adaptive ttl schemes assign dierent expiration time ttl value address mapping taking account capacity chosen node andor relative load weight domain originated client request key result paper situations simple combination alarm signal overloaded nodes adaptive ttl dramatically reduces load imbalance even web server system highly heterogeneous adns scheduler controls limited portion incoming requests moreover proposed strategies demonstrate high robustness performance almost aected even error estimating domain load sizable say 30 slightly aected presence noncooperative name servers name servers gateways accepting low ttl values could sometimes proposed adns acknowledgements work entirely carried michele colajanni visiting researcher ibm tj watson research center yorktown heights ny paper beneted preliminary discussions held daniel dias ibm tj watson research center contributions experiments given valeria cardellini university roma tor vergata italy authors wish thank anonymous referees helpful comments earlier versions paper r dns bind alteon web systems httpwww httpwww common log httpwww httpwww httpwww httpwww dispatcher httpwww csim18 simulation engine human behavior principles least e tr ctr xueyan tang samuel chanson adaptive hash routing cluster clientside web proxies journal parallel distributed computing v64 n10 p11681184 october 2004 request redirection algorithms distributed web systems ieee transactions parallel distributed systems v14 n4 p355368 april lapsun cheung yukwok kwok load balancing approaches distributed object computing systems journal supercomputing v27 n2 p149175 february 2004