event services high performance systems internet grid changing face high performance computing rather tightlycoupled spmdstyle components running single cluster parallel machine even internet programmed mpi applications evolving sets cooperating components scattered across diverse computational elements components may run different operating systems hardware platforms may written different organizations different languages complete applications constructed assembling components plugandplay fashion new vision high performance computing demands features characteristics easily provided traditional highperformance communications middleware response needs developed echo highperformance eventdelivery middleware meets new demands grid environment echo provides efficient binary transmission event data unique features support datatype discovery enterprisescale application evolution present measurements detailing echos performance show echo significantly outperforms systems intended provide functionality provides throughput latency comparable efficient middleware infrastructures available b introduction area distributed computing strong focus research high performance computing resulting development software infrastructures like pvm mpi globus creation national machine room grid doe ncsaalliance researchers increasingly research focus domain turned towards component architectures facilitate development complex applications allowing creation generic reusable components easing independent component development earliest requirements component architectures highperformance computing derived systems attach scientific visualizations running computations continuing research generalized models include ability flexibly link general purpose computational elements well 22242 componentbased software development proposed software engineering community last decade 2529 advantages widely recognized industry resulting development systems enterprise java beans microsofts component object model distributed extension dcom developing specification corba component model ccm omgs corba version 30 common technique integrating different components system eventbased invocation also known implicit reactive invocation historical roots systems based actors 15 daemons packetswitched networks eventbased integration attractive strongly supports software reuse facilitates system evolution 1211 bringing benefits componentbased software development domain highperformance computing work seek create complete component framework instead concentrated providing integration mechanism allow community obtain advantages architectures maintaining high performance paper discusses results work efficient eventbased middleware echo systems distributed collaborating components constructed several attributes echo distinguish related work high performance sharing distributed data echo transports distributed data performance similar achieved systems like mpi level performance required integration mechanism support normally large data flows part high performance applications distributed vi sualization example level performance enables end users interact via meaningful data sets generated runtime computational models employed paper demonstrates echos high performance across heterogeneous hardware platforms using networked machines resident georgia tech previous work used echo internetwide collabora tions17 demonstrated ability represent control data events occurring distributed computational workbenches dynamic data provision consumption echo supports publishsubscribe model communica tion thus new components introduced echobased system simply registering right set events system without need recompilation relinking addition components dynamically replaced without affecting components system facilitating system evolution eventbased publishsubscribe models like one offered echo become increasingly popular utility within variety environments including internet ecommerce applications30 extensible systems23 collaborative systems14 distributed virtual reality19 mobile systems32 wellestablished echo differs ongoing past research efficient support event transmission across heterogeneous machines derived ability recognize provide runtime translation userdefined event formats systems like fobus20 schooner16 demonstrated utility making type information available middleware neither attempted attain high performance achieved echo dynamic type extension reflection one major features differentiating componentbased applications tightlycoupled kin relative lack priori knowledge data flows order able drop component place system component must able discover contents data flows operate upon even parts application designed work together face difficulty maintaining priori knowledge wide area grid environment different pieces application changed upgraded time may necessary modify data flows invalidating pieces rely previous knowledge andor requiring simultaneous upgrade diffi culties componentbased systems typically provide integration mechanism offer degree type extension reflection terms borrowed objectoriented systems express ability transparently extend existing data types preserving validity code using old type type extension ability third parties discover contents operate upon data type without priori knowledge reflection one important contributions echo provides features without compromising performance measurements paper demonstrate interoperability echobased applications also interoperate corba javabased components like used diesel combustion collaboratory hydrology workbench thus end users continue employ tools like javabased visad data visualization system corbabased collaboration services deepview gain high performance data movement contrast event rates attained corba javabased event systems331 interoperability java corbabased systems demonstrated elsewhere echo available since october 1997 group used various largescale ongoing development research efforts among efforts principal interest high performance community atmospheric hydrology applications mentioned earlier well two additional ones developed group 1 distributed materials design workbench multiple end users interact computational tools order jointly design high performance materials 2 distributed implementation ntunixspanning system molecular dynamics andor crystal plasticity studies done collaborators departments mechanical engineering physics georgia tech finally echo events one key building blocks darpafunded infosphere information technology expedition26 remainder paper organized follows section 2 describes echos basic functionality section 3 compares echos event delivery performance communication systems offer form type extension reflection particular examine performance set middleware systems might considered alternative candidates integration mechanism component infrastruc ture including corba event channels event distribution via javas rmi xmlbased communication scheme comparing basic latency echo using mpi message exchange baseline measurement also study impact machine heterogeneity echos performance explore effects type extension features finally section 4 discusses key areas future work summarizes conclusions 2 echo functionality echo shares semantics common class event delivery systems use channelbased subscriptions event channel mechanism event sinks sources matched source clients submit events specific channel sink clients subscribed channel notified event channels essentially entities extent event propagation controlled corba event service13 also channelbased channels distributed objects channel process c process b process channel event channel event event abstract view event channels channel event channel channel event event channel event event channel event event channel process c process b process channel b echo realization event channels figure 1 using event channels communication 21 efficient event propagation unlike many corba event implementations event services elvin28 echo event channels centralized way instead channels lightweight virtual entities figure 1a depicts set processes communicating using event channels event channels shown existing space processes practice distributed entities bookkeeping data residing process referenced depicted figure 1b channels created process opened anywhere else used process creates event channel distinguished contact point processes wishing use channel channel id must used open channel contains contact information creating process well information identifying specific channel however event distribution centralized distinguished processes event propagation event messages always sent directly event source sinks network traffic individual channels multiplexed shared communications links echo implemented top dataexchange10 pbio8 packages developed georgia tech simplify connection management heterogeneous binary data transfer inherits packages portability different network transport layers threads packages dataexchange pbio operate across various versions unix windows nt used tcpip udp atm communication protocols across standard specialized network links like scramnet6 addition offering interprocess event delivery echo also provides mechanisms associating threads event handlers allowing form intraprocess communication local remote sinks may appear channel allowing inter intraprocess communication freely mixed manner transparent event sender sources sinks within address space event delivered directly placing event appropriate sharedmemory dispatch queue intraprocess delivery valuable paper concentrates aspects echo relating remote delivery events 22 event types typed channels one differentiating characteristics echo support efficient transmission handling fully typed events event delivery systems leave event data marshalling application echo allows types associated event channels sinks sources automatically handle heterogeneous data transfer issues building functionality echo using pbio allows efficient layering nearly eliminates data copies marshalling unmarshalling others noted18 careful layering minimize data copies critical delivering full network bandwidth higher levels software abstrac tion layering pbio key feature echo makes suitable applications demand high performance large amounts data base type handling optimization functionally echo event types similar user defined types mpi main differences expressive power implementation like mpis user defined types echo event types describe cstyle structures made atomic data types systems support nested structures staticallysized arrays echos type sys smilliseconds logscaledata structure size roundtrip latency1kb 100b 100kb1001 java corba mpich echo figure 2 comparison latency basic data exchange event infrastructures tems extends support nullterminated strings dynamically sized arrays 1 fully declaring message types underlying communication system gives system opportunity optimize transport mpi implementations typically exploit opportunity often transport user defined types even slowly messages directly marshalled application contrast echo pbio achieve performance advantage avoiding xdr iiop wire representations different native representation data type instead echo pbio use wire format equivalent native data representation ndr sender conversion native representation receiver done upon receipt dynamically generated conversion routines measurements 4 show pbio encode times vary data size decode times much faster mpi much twothirds latency heterogeneous message exchange software conversion overhead4 pbios ndr approach yields roundtrip message latencies low 40 mpi type extension echo supports robust evolution sets programs communicating events allowing variation data types associated single channel particular event source may submit event whose type superset event type associated channel conversely event sink may type subset event type associated channel essentially allows new field added event source without invalidating existing event receivers functionality extremely valuable system evolves means event contents changed without need simultaneously upgrade every component 1 case dynamically sized arrays array size given integertyped field record full information types supported echo pbio found 81kb data structure size delivered bandwidth 100b mbitsseccorba java mpich echo figure 3 comparison delivered bandwidth event infrastructure accommodate new type echo even allows type variation intraprocess communication imposing conversions source sink use identical types performing necessary transformations source sink types differ content layout type variation allowed echo differs supported message passing systems intra address space event systems example spin event system 23 supports statically typed events similarly mpis user defined type interfaces offer mechanisms program interpret message without priori knowledge con tents additionally mpi performs strict type matching message sends receives specifically prohibiting type variation echo allows terms flexibility offered applications echos features closely resemble features systems support marshalling objects mes sages systems subclassing type extension provide support robust system evolution substantively similar provided echos type vari ation however objectbased marshalling often suffers prohibitively poor performance echos strength maintains application integration advantages objectbased systems significantly outperforming measurements next section show echo also outperforms traditional messagepassing systems many circumstances 3 echo performance 31 breakdown costs figures 2 3 represent basic performance characteristics variety communication infrastructures might used eventbased communication high performance applications values basic event latency bandwidth environment con 5echo corba mpich xml total roundtrip 306 530 801 1249 network transfer 139 139 139 182 x86 decode 16 16 116 276 x86 encode 0015 064 89 124 network transfer 139 139 139 182 table cost breakdown heterogeneous 100kb event exchange times milliseconds sisting x86based pc sun sparc connected 100 mbps ethernet 2 note use logarithmic vertical scale figure 2 useful presenting latencies range message sizes graph tends minimize substantial performance advantage echo demonstrates compared infrastructures infrastructures compared dont share characteristics features fact accounts performance differences echos strength provides important features systems maintaining performance achieved traditional highperformance systems like mpich particular echo provides event type discovery dynamic type extension manner similar xml achieved serializing objects events java rmi corba also gaining acceptance distributed systems middleware event services provide similar features section examine echos performance characteristics detail contrast infrastructures table 1 shows breakdown costs involved roundtrip event latency measures figure 2 present roundtrip times naturally show combinations sendrecv two different architectures heterogeneous system time components labeled encode represent span time application submitting data transmission point infrastructure invokes underlying network send operation net work transfer times oneway times transmit encoded data sending receiving chines decode times time end recv operation point data presented application usable form breakdown useful understanding different costs communication particular might change different networks processors 2 sun machine ultra 30 247 mhz cpu running solaris 7 x86 machine 450 mhz pentium ii also running solaris 7 100kb001100 millisecond logscale 1 corba mpich sender encode times data structure size figure 4 sendside data encoding times excluded java rmi breakdown table 1 performs network send operations incrementally marshalling process allows java pipeline encode network send operations making simple cost breakdown impos sible however result design decision java rmi requires tens thousands kernel calls send 100kb message seriously impacting performance additionally roundtrip times listed table near sum encodexmitdecode times true corba numbers implementations corba typed event channel service typically rely corbas dynamic invocation interface operate orbs ex amined dii function intraaddressspace invocations result corba typed event channel must reside different address space either event source event sink adding extra hop every event delivery could considered implementation artifact might handled differently future corba event implementations 311 sending side costs echos significant performance feature use native data format sending architecture wire format effects approach noticeable comparing encode times different communication infrastructures figure 4 expands upon summary data table 1 shows senderside data encoding costs variety communications systems example mpich uses slow interpreted marshalling procedure heterogeneous communication mpi userdefined data types significant impact mpich performance sis apparent table 1 shows mpich devoting much 60 roundtrip message time encoding decoding corbas iiop wire format differs architec tures native data layout alignment requirements result corba must copy application data sending orbacus copy performed compiletimegenerated stub code resulting better performance mpich approach ever echo significantly faster performs little processing prior network send operation using xml wire format obviously decision significant performance impact event system table 1 makes clear two significant issues large encodedecode times expanded network transmission times former result distance ascii representation used xml native binary data repre sentation xml encoding costs represent processing necessary convert data binary string form copy element beginend blocks output string one end encoding time xml several times expensive entire roundtrip message exchange infrastructures network time also significantly higher xml asciiencoded data plus ginend labels much larger equivalent binary representation much larger depends upon data size field labels details encoding thus xmlbased schemes transmit data schemes rely binary encoding 32 receiving side costs echos ndr approach binary data exchange eliminates senderside processing transmitting senders native format isolating complexity managing heterogeneity receiver result receiver must perform conversion various incoming wire formats native format conversion may require byteorder changes byteswapping movement data one offset another even change basic size data type example 4byte integer 8byte integer conversion another form marshal ing problem occurs widely rpc implementa tions1 network communication marshaling significant overhead727 tools like usc21 attempt optimize marshaling compiletime lutions unfortunately dynamic form marshaling problem echo layout even complete field contents incoming record unknown runtime rules static solutions conversion overhead nil homogeneous data exchanges table 1 shows significantly high heterogeneous exchanges 66 generically receiverside overhead communication middleware several components ffl byteorder conversion ffl data movement costs ffl control costs byte order conversion costs extent unavoid able communicating machines use different byte orders translation must performed somewhere regardless capabilities communications package data movement costs harder quantify byte swapping necessary data movement performed part process without incurring significant additional costs otherwise clever design communications middleware often avoid copying data ever packages define wire format transmitted data harder time clever area one basic difficulties native format mixeddatatype structures architectures gaps unused areas fields inserted compiler satisfy data alignment requirements avoid making assumptions alignment requirements machines run packages use wire formats fully packed gaps mismatch forces data copy operation situations clever communications system might otherwise avoided costs represent overhead iterating fields record deciding next packages require application marshal unmarshal data advantage process occurs specialpurpose compiler optimized code minimizing control costs however keep code simple portable systems uniformly rely communicating predefined wire mat therefore incurring data movement costs described previous paragraph packages marshal data typically use alternative approach control marshaling process controlled amounts tabledriven interpreter interpreter marshals unmarshals applicationdefined data making data movement conversion decisions based upon description structure provided application knowledge format incoming record approach data conversion gives package significant flexibility reacting changes incoming data initial choice implementing pbio technology echo based necessarily takes different approach receiverside decoding wire format continuous string xml parsed receiving end expat milliseconds logscale 100kb 10kb 1kb 100b100data structure size mpich corba echo receiver decode times figure 5 receiver side costs xml mpi ndr logarith mic scale used vertical dimension xml parser 3 5 calls handler routines every data element xml stream handler interpret element name convert data value string appropriate binary type store appropriate place flexibility makes xml extremely robust changes incoming record parser employed quite fast xml still pays relatively heavy penalty requiring stringtobinary conversion receiving side assume high performance computing functions data sent somewhere processing processing requires event data string form thus xml decoding parsing also equivalent c strtod similar operation convert data native representation comparison receiverside costs xml echo nonoptimized echo wire formats figure 5 shows comparison receiverside processing costs sparc interpreted converters used xml mpich via mpiunpack call ndr receiver conversions clearly expensive typically one two orders decimal magnitude costly ndrbased converter heterogeneous exchange exchange homogeneous architectures echo mpi would substantially lower costs xmls costs would remain unchanged ndrbased converter relatively heavily optimized performs considerably better mpi part mpich uses separate buffer unpacked message rather reusing receive buffer however echos receiverside conversion costs still contribute roughly 20 cost 3 variety implementations xml including xml generators parsers available used fastest known us time expat 5 milliseconds logscale 100b 100kb10 1 data structure size echo dcg echo mpich receiver decode times figure 6 receiver side costs interpreted conversions mpi echo dcg conversions echo endtoend message exchange portion conversion overhead must consequence raw number operations involved performing data conversion significant fraction overhead due fact conversion essentially performed interpreter optimizing receiverside costs echo decision transmit data senders native format results wire format unknown receiver runtime requiring somewhat costly interpreted conversion solution problem problem employ dynamic code generation create customized conversion subroutine every incoming record type 4 routines generated receiver fly soon wire format known execution times dynamically generated conversion routines shown figure 6 chosen leave xml conversion times figure keep scale manageable size please note use logarithmic scale dynamically generated conversion routine operates significantly faster interpreted version improvement removes conversion major cost communication bringing near level copy operation particular without dynamic code generation conversion routines echos practice eliminating senderside encoding cost transmitting senders native format might viable combination two techniques ffl transmitting senders native format ffl using dynamic code generation conversion routines receiving side key echos efficiency pbio binary code generation facilities exploited echo exist popular machine architectures including sparc 4 details nature echo infrastructure dynamic code generation found 9 orbacus echo send receive send receive data size side side side side overhead overhead overhead overhead table cost breakdown homogeneous event exchange times milliseconds mips x86 i960 machines 33 costs homogeneous exchanges echo virtually senderside encoding costs dynamic code generation achieves performance similar achieved compiletime stub generation echo tends outperform communication infrastructures particularly apparent heterogeneous message exchanges encodedecode time play significant role overall message costs however echos approach also yields performance gains transfers homogeneous systems shown table 2 simplicity table concentrates echo orbacus infrastructures higher orbacus costs large data sizes represent cost required data copy converting iiop wire format native data representation echo requires copy 5 heterogeneous case echo preprocess data prior sending wire format corresponds native data representation echo deliver received data directly application without copying message buffer possible iiop potential data alignment conflicts iiop native data representation common 100mbps network speeds additional data copy operations account relatively small fraction total exchange costs ever minimizing data copies critical delivering full network bandwidth higher levels software ab straction18 gigabit networks specialized lowlatency communications mechanisms come common use additional copy operations imposed even homogeneous communications fixed wire formats become important limitation communication speeds increasing echos performance advantage 5 smaller data sizes extra copy overhead small compared fixed delivery costs systems 1 01mismatching fields000000000000111111111111000000001111111100001111matching fields00001111 100kb hetergeneous receive times data structure size milliseconds logscale figure 7 receiverside decoding costs without unexpected field heterogeneous case 34 costs type extension addition efficient operation basic event fer echo supports creation evolution sets collaborating programs event type discovery dynamic type extension echo events carry format metainformation somewhat like xmlstyle description message content metainformation incredibly useful tool building deploying enterpriselevel distributed systems 1 allows generic components operate upon data priori knowledge 2 allows evolution extension basic message formats used application without requiring simultaneous upgrades application components terms echo allows reflection type extension valuable features commonly associated object systems data type information represented transmission format tokens used retrieve full type information tokens small included every echo event transmission part header information affect performance significantly echo supports type extension virtue field matching incoming expected records name new fields added events without disruption application components dont expect new fields simply ignore systems support reflection type extension messaging systems use xml wire format marshal objects messages suffer prohibitively poor performance compared systems mpich corba sup port therefore interesting examine effect exploiting features upon echo performance particular measure performance effect type extension introducing unexpected field incoming message measuring change receiverside processing figures 7 8 present receiveside processing costs 1 010000111100001111matching fields0000111100001111mismatching fields 100kb 10kb 1kb 100b milliseconds logscale data structure size homogeneous receive times figure 8 receiverside decoding costs without unexpected field homogeneous case exchange data unexpected field figures show values measured sparc side heterogeneous homogeneous exchanges respectively using echos dynamic code generation facilities create conversion routines clear figure 7 extra field effect upon receiveside per formance transmitting would added slightly network transmission time otherwise support type extension adds cost exchange figure 8 shows effect presence unexpected field homogeneous case overhead potentially significant homogeneous case normally imposes conversion overhead echo presence unexpected field creates layout mismatch wire native record formats result conversion routine must relocate fields figure shows resulting overhead nonnegligible high exists heterogeneous case smaller record sizes cost receiving data actually caused overhead kernel select call difference overheads matching extra field cases roughly comparable cost memcpy operation amount data results shown figure 8 actually based upon worstcase assumption unexpected field appears expected fields record causing field offset mismatches expected fields general overhead imposed mismatch varies proportionally extent mismatch evolving application might exploit feature echo adding additional end existing record formats would minimize overhead caused application components updated 4 conclusions future work paper examines echo eventbased middleware designed meet demands new generation grid applications particular consider communicationintegration demands componentbased systems highperformance computing environment might different tightlycoupled applications echo meets requirements providing publishsubscribe communication model supports type extension type discovery objectbased xmlbased systems provide similar functionality measurements section 3 show echo significantly better performance terms delivered bandwidth endtoend latency measurements also show echo matches cases outperforms mpich metrics supporting assertion echo suitable use main data flows grid applications future work examine aspects echo beyond scope paper features include derived event channels support sourceside event filtering remote data transformation protochannels mechanism receivers control customize sourceside event generation also expand upon echos ties systems including corba java r impact language system remote procedure call design katarzyna kea hey asynchronous notifications among distributed objects efficient wire formats high performance computing scramnet networks architectural considerations new generation protocols portable selfdescribing binary data streams fast heterogeneous binary data interchange performance communication distributed laboratories formalizing design spaces implicit invocation mechanisms introduction software architecture object management group language proving theorems robots configuring scientific applications heterogeneous distributed system acds adapting computational data streams high performance efficient layering high speed communication fast messages 2 information bus architecture extensible distributed systems universal stub compiler diesel combustion collaboratory combustion researchers collaborating internet dynamic binding extensible system channel distributed microscopy informatics foundations study software architecture performance firefly rpc elvin left building publishsubscribe notification service quenching software architecture perspectives emerging discipline information flow based approach message brokering jini infrastructure collaborating mobile agents tr ctr james kohl torsten wilde david e bernholdt cumulvs interacting highperformance scientific simulations visualization steering fault tolerance international journal high performance computing applications v20 n2 p255285 may 2006