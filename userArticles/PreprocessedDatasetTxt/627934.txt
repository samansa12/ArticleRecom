navigational accesses temporal object model abstracta considerable research effort devoted past years query languages temporal data context relational objectoriented model objectoriented databases provide navigational approach data access based object references paper investigate navigational approach querying objectoriented databases formally define notion temporal path expression address formal basis issues related correctness expressions particular focus static analysis give set conditions ensuring expression always results correct access runtime b introduction temporal join join time join navigational path expressions implicit joins explicit joins dangling importance temporal data management long recognized database community many techniques modeling managing temporal data introduced 19 21 research temporal databases developed framework relational data model 8 10 17 20 however also temporal objectoriented databases recently received increasing attention several objectoriented data models proposed 16 reason interest applications objectoriented database management systems expected provide support exhibit form temporality examples engineering databases multimedia systems office information systems however pointed also snodgrass 16 contrast temporal relational data models specification temporal objectoriented data models cases informal overcome drawback proposed 1 formal temporal objectoriented data model addressed formal basis several issues deriving introduction time objectoriented context considerable research effort temporal databases devoted design temporal query languages relational objectoriented data model particular temporal extensions relational algebra 8 18 relational calculus 18 relational commercial query languages quel 15 sql 13 17 proposed temporal query languages relevant operation represented indeed temporal relational query languages join relational operator two different flavors referred 2 8 two different join operators required temporal data models two kinds values ordinary temporal represented 2join plays role nontemporal relational data models allows compare attribute values occur point time whereas temporal join allows impose conditions times associated tuples several temporal objectoriented query languages also proposed 16 many query languages extensions relational query languages like daplex 14 quel 12 sql 9 rather existing nontemporal objectoriented query languages however important note objectoriented database systems 3 support approach data access addition traditional query language constructs available relational database systems modality must taken account designing temporal objectoriented query languages navigational approach based object identifiers aggregation relationships given oid system directly accesses corresponding object navigates objects referred components access modality combined classical eg sqllike ac cess thus conditions query imposed nested attributes hierarchy rooted object examination allow conveniently describe joins aiming getting component object objectoriented query language distinction made corresponding hierarchical structure objects analogous relational ones explicitly comparing two objects issues related explicit joins quite similar arising relational context implicit joins poses new problems indeed value object attribute identifier another object identifier seen pointer referred object obviously access correct pointer must paper investigate issues related implicit joins navigational accesses temporal context therefore goal paper propose new temporal objectoriented query language rather investigate impact time peculiar features objectoriented query languages purpose first introduce formal notion temporal path expression temporal path expressions obtained extension classical path expressions objectoriented languages attribute access time specified addition ttype oi ci temporal temporal 2 reference temporal objectoriented model integer real bool character string time time time function identity function nontemporal types referential integrity constraint structured types temporal types attribute name time expressed either explicitly specifying time instant set time instants implicitly means formalism symbolically denote sets time instants investigate notion path expression correctness remarked clifford croker 8 temporal model must enforce respect temporal dimension example information employee worked division time correct employee division existed database time means correctness conditions imposed database ensure satisfies temporal constraints proposed notion consistency temporal objectoriented database 1 however consistency database alone enough ensure navigations objects correct thus paper investigate issue correctness navigational accesses whether correctness statically verified best knowledge first extensive investigation concerning navigational accesses temporal context addressing problem static analysis path expressions one papers considering navigational access one cheng gadia 7 language ootempsql provides sublanguage associative navigation relying notions similar concept temporal expression however neither formal semantics given language correctness conditions stated remainder paper organized follows section 2 presents brief overview chimera data model section 3 describes formalism use symbolically denote set time instants temporal path expression section 4 formally introduces temporal path expressions addresses problem path expression correctness section 5 deals static analysis path expressions whereas path expression equality considered section 6 finally section 7 concludes paper paper includes two appendixes reporting syntax language use specify boolean expressions sketch proofs main results respectively chimera temporal extension chimera objectoriented data model 11 chimera provides concepts commonly ascribed objectoriented data models object identity complex objects userdefined operations classes inheritance following denote set object identifiers set class identifiers class names set attribute names moreover denotes set chimera legal values chimera notion supported existence finite set basic predefined value types postulated containing types type also predefined value type used definition temporal types chimera supports sets lists records allows use class names definition structured types addition abovementioned nontemporal types chimera supports collection handle uniform way temporal nontemporal domains type corresponding temporal type defined intuitively instances type partial functions instances type instances type chimera temporal types used definition structured types function defined takes argument temporal type returns corresponding static type assume domain type domain 01 isomorphic set natural numbers symbol 0 denotes relative beginning denotes c c oi instance member class example 1 temporal dom c c lifespan dom dom dom dom dom lifespan valid signature implementation lifespan temporal immutable nontemporal suppose following examples chimera classes class class subclass according usual terminology object class specific class inheritance hierarchy object belongs object instance class also superclasses class time employee 10now employee name salary status division manager name employee temporalstring salary employee temporalinteger status employee string division employee temporalstring manager employee temporal manager manager 10now employee manager employee dependents official car current time interval denoted set consecutive time instants including time instants included single time instant represented time interval denotes null interval time dimension considered model time chimera consists two components containing information use class instances providing implementation signature associated class representing time interval class existed assume lifespan class contiguous class signature contains information attributes name domain methods name type input output parameters instances attributes chimera either temporal immutable nontemporal historical attribute attribute whose value may change time whose values different times recorded database attribute attribute whose value cannot modified object lifetime whereas static attribute attribute whose value change time whose past values meaningful application hand thus recorded database immutable attributes regarded particular case temporal ones since value constant function temporal domain temporal attributes temporal types domains values functions temporal domain set legal values attribute throughout paper represent value temporal attribute type set pair legal values type time intervals attribute assumes value time instant given class denotes set attributes instances class whereas denotes domain attribute class finally since objects belonging class vary time class maintains history objects instances members class time set objects members class changes dynamically time thus represent extension chimera classes introduce function 2 assigning extent class instant set identifiers objects time belongs either instances members object example 2 fh ig f fh ig fh ig fh ig fh ig dom class history lifespan class history lifespan class history lifespan class history instances class contain immutable attribute whose value never changes instance lifespans static attribute keep track history changes three temporal attributes record whole history changes class subclass additional attributes consider classes example 1 suppose following examples chimera objects dependents manager temporalsetofemployee official car manager string manager employee name status salary division manager manager employee dependents official car name 20now alan smith salary 206015k 61now30k status fulltime division 20100disks 101nowprinters manager 2049i 50nowi 20nowemployee name 50now mary dole salary 50now50k status fulltime division 50nowprinters manager 50nowi dependents 50100 50nowmanager notion chimera formalized following definition object 4tuple oid lifespan record value names attributes corresponding values set time inter vals class identifiers class identifier specific class belongs 1 given oid make use function refer class object denoted belongs time note defined c 3 temporal expressions first last slice first instant last instant inst slice th select employees earned managers time interval 10100 select employees work printers department headed mary dole query example query set time instants query condition must verified given explicitly contrast query example query set time instants implicitly specified temporal expression consistency object checked respect specific class object consistent respect specific class consistent respect superclasses two intervals considered disjoint cannot collapsed single one note 12 34 disjoint require object consistent instance classes belongs notion consistency keeps account temporal context object state class object belongs change time therefore verifying consistency object requires two steps first set attributes characterizing object instant lifespan must determined correctness values respect specific class object belongs time must verified note consider instant lesser current time able identify temporal attributes characterizing object time since static attributes record current values thus instants lesser current time makes sense check correctness values temporal attributes objects moreover current time also correctness values static attributes respect specific class object currently belongs must checked refer interested reader 1 details generally nontemporal objectoriented database query selects objects based evaluation boolean expressions involving attribute values method invocation results temporal context queries must allow retrieval objects satisfying given boolean expression set boolean expressions specific set time instants defined either explicitly implicitly implicitly represent time respect boolean expression must evaluated need formalism symbolically denote set time instants symbolic formalism use similar one proposed gadia nair 10 based notion temporal expression symbolic representation set time instants main difference notion temporal expression one 10 allow use selection operators definition temporal expressions see defintion 3 introduced later following use set disjoint intervals compact notation set natural numbers included intervals operations union usual semantics set operations moreover 7 true one natural numbers represented 7 finally define projection operation 57 takes input set disjoint time intervals 7 natural number function 5 orders elements 7 increasing order respect upper bound returns interval dering cardinality 7 lesser equal returns otherwise ex 2and example 4 example 5 te te te te te te te te te te first te last te slice te n first instant te last instant te inst slice te n first te te te salary 20k division salary 40k salary salary 40k status fulltime 30k salary 40k managername mary dole temporal interpretation boolean expression expression evaluated object example 2 whereas temporal interpretation empty set attribute never reached value lifespan note temporal interpretation evaluated object finally note interpretation set attribute static imply attribute assumed value different instants lesser current time however since record value attribute current time able check truth condition examples temporal expressions ample following denotes set boolean expressions boolean expressions specified using language described appendix formally defining notion temporal expression need introduce following definition let boolean expression temporal interpretation written set instants true set chimera temporal expressions recursively defined follows temporal interpretation boolean expression temporal expression temporal expressions temporal temporal expression temporal expressions temporal expression uniquely denotes set time intervals semantics temporal expression set intervals denotes formalized means function defined follows let temporal expression semantics denoted defined follows c example 6 4 temporal path expressions usefulness instantvalued temporal expressions made clear following section consider objects example 2 expression evaluated similarly instantvalued managersalary 40k 101now 50now 50now managersalary 40k 5050 division first te te te last te first instant te min te te last instant te inst slice te first instant last te nth instant time intervals following refer temporal expressions denoting single time instant temporal expressions formally temporal expression instantvalued temporal expression temporal path expressions obtained extension classical path expressions objectoriented languages 4 attribute access time specified addition attribute name way value attribute specified time denoted time expressed either explicitly specifying time instant set time instants implicitly means temporal expression language express path expressions allows nesting attribute accesses expressed means postfix dot notation restriction imposed attribute accesses path expression last one qualified time instant set time intervals thus denoting nontemporal value attribute access specified alternatively set time intervals specified qualify intermediate attribute access path expression set would seen set time instants belonging intervals access would denote set nontemporal values accesses evaluated following subsections give formal treatment path expressions temporal context address problem path expression semantics correctness 42 semantics example 7 employee division salary mary dole manager ar e te ea te e e ea e te ea te e ea e ea x last interval first instant consider classes example 1 let variable type following examples path expressions section formally define set chimera path expressions following denote set objectdenoting variables set chimera path expressions recursively defined follows simple path expression defined follows objectdenoting variable simple path expression simple path expression attribute name instantvalued temporal expression simple path expression simple path expression attribute name time instant simple path expression simple path expression attribute name simple path expression terminal path expression defined follows simple path expression attribute name temporal expression terminal path expression simple path expression attribute name 7 2 set time intervals 7 terminal path expression simple path expression attribute name terminal path expression simple path expressions terminal path expressions path expressions semantics path expression ie value denoted specified starting oidassignment function assigning oids objectdenoting variables however value denoted path expression depends temporal specifications contains consider first case path expression time instant specified either implicitly explicitly path expression form temporal specification occurs terminal part path expression denotes nontemporal value manager definition 6 time path expression example 8 strong time referring example 7 sake simplicity following represent value static attribute type partial function defined e ea ea ova ea e ea ea ova ova ea ea ova e e ar e x first instant object identified oid evaluates consider expression expression temporal specification terminal part intuitive interpretation time specified expression evaluated current time simply shorthand however consider sequence attribute accesses composing path suppose let object identified oid evaluates consistency database certainly defined time attribute contrast could undefined time thus path expression contains temporal qualifier evaluated time denoted qualifier till another explicit temporal qualifier encountered therefore path expression equivalent path expression contain temporal specification simply shorthand consider terminal path expression 7 7 set time intervals either explicitly implicitly denoted value associated expression restriction function value time intervals 7 however two different interpretations path expression possible according interpretation denoted function must defined 7 otherwise path expression denotes value according interpretation path expression denotes function partial 7 assume default interpretation path expression weak one however strong interpretation also required using alternative syntax 7 terminal path expression denotes temporal value whenever defined formalize notions first introduce associated path expression denoted 0 let simple path expression time denoted 0 time instant recursively defined follows instantvalued temporal expression consider restriction temporal value set time intervals specified following definitions consider path expressions example 7and suppose object example 2 division salary mary dole 506015k 61now30k manager definition 7 temporal value weak restriction definition 8 temporal value strong restriction definition 9 path expression semantics example 9 temporal undefined temporal v undefined e ar te te ea te e va te ea te e va te ea te e va ea e va x last interval first instant let temporal value type let 7 2 set time time intervals weak restriction 7 denoted function otherwise let temporal value type set time intervals strong restriction 7 denoted function otherwise ready define semantics value denoted path expression let oidassignment semantics path expression oidassignment denoted recursively defined follows oid assigned variable instantvalued temporal expression temporal expression temporal expression 43 proposition 1 proposition 2 following given function denotes set values defined ea ea dom ea ea ea e ea dom e ar e dom let path expression weak semantics following relationship holds contrast strong semantics relationship holds path expression correct oid assignment following conditions satisfied note according definition 9 simply shorthand similarly equivalent therefore remainder discussion explicitly consider cases following proposition relates semantics path expression set time intervals either explicitly implicitly denoted semantics path expression time instants composing set proposition thus characterizes nontemporal valued terminal expressions derivable temporal valued ones subsection focus conditions ensuring path expression correct given assignment conditions ensure defined denotes value correctness conditions depend structure path expression starting basis inductive definition path expressions path expression correct provided oidassignment assigns oid variable thus given path expression must consider oidassignments defined variables consider case time instant either implicitly explicitly denoted expression denote value object denoted must exist time must attribute class object belongs finally value time must stored terminal path expressions correctness conditions differ according two different interpretations strong weak path expressions particular strong interpretation requires conditions satisfied time instants specified set time intervals whereas weak interpretation requires existence least instant specified set intervals conditions satisfied following proposition states correctness conditions path expression corollary 1 proposition 3 employee division 5 status mary dole division dom c n n n c c n e e e e x last interval first instant dom e dom e dom e dom xa 2 3 4 conditions 1 3 hold conditions 1 3 hold conditions 1 3 hold let path expression static attribute correct furthermore static attribute correct static attribute correct static attribute correct referring objects example 2 path expressions example 7 correct whereas following examples incorrect path expressions given variable type let correct path expression correct remark condition proposition 2 terminal expressions strong semantics require object never migrated intervals 7 7 contrast requires classes belonged 7 contains attribute following corollary states correctness conditions path expressions containing static attributes correctness test path expression performed linear time respect length path expression length path expression number attribute accesses dots appearing following proposition specifies domains temporal values denoted correct path expressions knowledge relevant order check correctness subsequent uses values instance path expressions used comparison formulas r 2a 5 static analysis path expressions rule 1 e xa te x v ar ar meaning inference rule following conditions rule premises upper part rule satisfied rule consequence lower part rule inferred previous subsection stated conditions ensuring temporal path expression correct denotes value however conditions checked dynamically since depend specific object assigned variable appearing path expression oidassignment section establish conditions ensuring correctness path expression oidassignment relevance conditions checked statically program query compilation time thus allowing ensure means static checks given path expression always correct runtime approach related static type checking techniques nontemporal database programming languages database languages type declarations exploited statically check correctness program ensure runtime type errors occur 6 first consider problem determining legal oidassignments nontemporal typed objectoriented language type information associated variable type declared variable express information type declared variable type declaration implies runtime variable instantiated object member class instance subclass moving temporal context need express information form denote variable instantiated object member time stated following rule let path expression temporal type information associated form type declared formally therefore given variable type information oidassignment legal object assigned instance class time let path expression let type information associated oidassignment legal figure 1 shows typing rules path expressions denote type associated path expression rule 1 states type path expression type declared rules 2 3 4 deal path expressions time instants thus denoting nontemporal values whereas remaining rules deal terminal path expressions time intervals thus denoting temporal values simplicity throughout paper considered static attributes particular case temporal attributes whose values defined time instant take account distinction static temporal attributes rules refined example rule 2 replaced following two rules figure 1 temporal path expression typing rules2 r r r instantvalued r r r non instantvalued r r non instantvalued r ar type ea te dom te type ea dom type ea dom type ea te dom te type ea dom type ea te dom te type ea dom r 2b type ea dom proposition 4 example 11 corollary 2 example 12 manager 50 division 20 string employee 50 division 20 manager 50 division 40 manager 50 division division 50 last instant te first instant te inst slice te n te n e e e e x lif espan let type correct path expression legal assignment correct moreover type deduced referring classes example 1 consider path expression path expression type correct consider oid assignment example 2 oid assignment legal since however undefined since let type correct path expression legal assignment correct referring classes example 1 objects example 2 easy see path expression type correct correct respect legal oid assignment indeed undefined since similar refinements done rules however mean statically check whether instant denoted temporal expression thus following focus temporal attributes order apply typing rules important information whether temporal expression instantvalued general property cannot statically decided since depends content database however sufficient syntactic conditions temporal expressions ensuring instantvaluedness particular temporal expressions form instantvalued able introduce notion type correctness path expression relate notion notion dynamic correctness discussed section 43 path expression said type correct type deduced according rules figure 1 contrast path expression contains specification two different time instants type correctness imply correctness legal oidassignment shown following example path expressions denoting temporal value similar result obtained weak interpretation stated following corollary particular case note type correct path expression legal assignment correct contrast strong interpretation type correctness imply correctness legal oidassignment shown following example 6 path expression equality inst ins ins salary mary dole salary 50now salary mary dole salary ar ar ar dom e dom e e e last interval x last interval x ar e e e e dom e dom e e e dom e dom e definition 14 weakvalue equality example 13 proposition 5 instantaneousvalue equality weakvalue equality referring path expressions example 9 implies two path expressions also weak value equal let oidassignment let two path expressions correct correct correct value path expression denotes compared means comparison operator etc value appropriate type value denoted another path expression clearly comparison expression correct several constraints must satisfied involving type compared values time comparison expression evaluated sake simplicity section focus notion path expression equality however similar considerations apply comparison operators path expression equality formalized following definition let oidassignment two path expressions equal note notion path expression equality uniformly applies path expressions denoting temporal static values temporal context two notions equality devised two path expressions instantaneously value equal exists instant denote value two path expressions weakly value equal exist two instants necessarily denote value notions formalized following definitions let oidassignment two path expressions instantaneously value equal exists instant let oidassignment two path expressions weakly value equal exist two instants notions equality obviously make sense path expressions denoting temporal values also path expression denoting static value compared types equalities path expressions denoting either static temporal values current time therefore several constraints must satisfied values denoted two path expressions compared one types equality constraints formalized following proposition ins definition 15 restricted equality example 14 proposition 6 salary mary dole salary ins ins inst inst w inst inst inst inst omit definition analogous results hold restricted equality given two path expressions resp ar e e e e te te e e e e te te te dom e dom e e e te te te dom e te dom e last interval e e te te also interested comparing two path expressions one notions equality specific set time instants either implicitly explicitly denoted possibility formalized following definition oidassignment let two path expressions note conditions stated proposition 5 easily extended case expression involving restricted equalities finally following relationships hold various types equality snapshot conditions conclusions r submitted publication semantic assumptions query evaluation understanding types objectoriented model historical relational data model hrdm reviseted paper addressed problem querying temporal objectoriented database navigational approach work extended several directions available via anonymous ftp hsql historical query language functional data model data language daplex temporal query language tquel temporal objectoriented databases critical comparison tsql2 temporal query language generalized relational framework modeling temporal data temporal relational data model temporal database bibliography update following give syntax bnf form language provided chimera define boolean expressions definition 9 proposition proved induction structure path expression prove correctness terminal expression 7 given static attribute consider case separately first recall simply shorthand basis inductive step ii ii iii proof corollary 2 proof proposition 5 let us consider first item let us consider second item let us consider fourth item tr ctr adali l sapino v subrahmanian algebra creating querying multimedia presentations multimedia systems v8 n3 p212230 october 2000 salvatore march charles wood gove n allen research frontiers object technology information systems frontiers v1 n1 p5174 july 1999