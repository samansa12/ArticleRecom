system approximate tree matching ordered labeled trees trees node label lefttoright order children fixed trees many applications vision pattern recognition molecular biology programming compilation natural language processing many applications involve comparing trees retrievingextracting information repository trees examples include classification unknown patterns analysis newly sequenced rna structures semantic taxonomy dictionary definitions generation interpreters nonprocedural programming languages automatic error recovery correction programming languages previous systems use exact matching generalized regular expression matching tree comparison paper presents system called approximatetreebyexample atbe allows inexact matching trees atbe system interacts user simple powerful query language graphical devices provided facilitate inputing queries paper describes architecture atbe illustrates use describes aspects atbe implementation also discuss underlying algorithms provide sample applications b introduction ordered labeled trees trees node label lefttoright order children fixed 1 trees many applications vision molecular biology programming compilation natural language processing including representation images 29 patterns 7 13 20 intermediate code 1 14 grammar parses 10 35 dictionary definitions 5 23 secondary structures rna 30 frequently used disciplines well many applications involve comparing trees retrievingextracting information repositories trees example ffl molecular biology researchers collect vast amounts rna structures trees whose features analyzed gain information newly sequenced rna compare rnas structure database searching ones similar topologies topological similarities often possible infer similarities functions related rnas 30 32 34 ffl natural language processing computational linguists store dictionary definitions lexical database definitions represented syntactically trees syntactic head definition often genus term superordinate word defined 9 linguists extract semantic information syntactic analysis definitions thereby constructing semantic taxonomies 10 22 ffl pattern recognition commonly used technique classify unknown pattern tree compare data sets assign category majority closest patterns belong 12 ffl programming languages one effective way used select error recovery correction compare parse trees associated corrected strings replacements well corresponding strings 35 whereas ordered labeled trees widely used different applications systems built support comparison information retrievalextraction repositories trees far know two systems developed ibm support operations apt 10 lql 5 apt designed extract linguistic information corpus parse trees allows user mark target node parse tree automatically constructs partially instantiated prolog term serves pattern finding nodes occupy comparable structural location parse trees lql hand provides users template tree structure represents superset possible structures individual entries lexical database template users query maintain extract information database however since systems employ unification techniques tree matching capabilities limited exact matches cannot used example extract information trees noisily represented possibly caused mistyping 1 throughout paper shall refer ordered trees simply trees ambiguity occurs misspelling words terminals trees 2 paper presents inexact tree matching system called approximatetreebyexample atbe developed new york university atbe designed support constructing comparing querying sets trees given pattern tree system allows users retrieve approximately matched trees pattern database extract information trees pertinent pattern 3 atbe many salient features 1 support wide variety applications atbe provides query language tree comparison based relational database language 33 system customizable users tailor system meet needs applications inserting applicationspecific trees applicationspecific distance metrics operations 2 manipulates trees uniform manner numerous ways represent describe tree 27 43 however tree input atbe manipulates stores displays standardized forms 3 userfriendly atbe provides substantial graphical devices facilitate users input queries gives users flexibility edit trees time instead using templates system multiple window display makes effective use screen utilizes onscreen popup menus alternatives typing commands 4 machineindependent atbe implemented c xwindows 44 xbased implementation permits system used variety workstations paper gives overview atbe system section 2 introduce terminology background tree comparison section 3 presents query language section 4 describes systems architecture section 5 discusses underlying algorithms two companion papers 41 42 describe detail graphical interface use system background 21 edit operations trees concerned ordered labeled ones node tree label possibly additional information information referred node contents node contents could size properties like rna secondary structures 30 lexical features grammar parses 10 figure 1 illustrates grammar parse representing sentence boy reads book 2 importance dealing type inexact matching actual applications widely addressed literature see eg 11 16 31 3 include term approximate naming system two reasons first states system perform inexact tree matching ie allows certain inaccuracy dissimilarity exist comparing trees second approximate string matching operation allows prefix strings removed comparing strings important many applications 18 37 atbe analogous operations allowing certain subtrees removed comparing trees term byexample refers way users query database described section 3 book vp det boy reads det fig 1 parse tree representing sentence boy reads book 10 many algorithms developed exact tree comparison 14 17 system based inexact algorithms presented 45 46 47 algorithms generalization used determining editing distance sequences 4 three types edit operations relabel delete insert node represent operations u v u v either node null node call relabeling operation u 6 v 6 delete operation u 6 insert operation tree results application edit operation tree 1 written illustrates edit operations let sequence edit operations transforms tree tree 0 sequence trees definition edit operations really shorthand specification specification full detail consider single edit operation eg one transforms igamma1 relabeling operation specify node relabeled igamma1 holds delete operation insert operation little complicated must specify parent p node n inserted consecutive sequence siblings among children p children n consecutive sequence empty need specify position n among children p however continue use shorthand specifications clear mapping structure defined let fl cost function assigns edit operation nonnegative real number flu v constrain fl distance metric satisfies following three properties nonnegative w triangle inequality extend fl sequence edit operations letting editing distance simply distance tree tree 0 denoted distt 0 defined minimum cost sequences edit operations transform 0 ie sequence edit operations transforming 0 g definition fl makes dist distance metric well c r r f relabeling change one node label b another c r c c f e r ii deletion node children deleted node b become children parent r r r e f f e iii insertion node consecutive sequence siblings among children r e f become children c fig 2 examples illustrating edit operations 22 mappings edit operations correspond mapping graphical specification edit operations apply node two trees mapping figure 3 shows way transform 0 corresponds sequence delete node label insert node label let represent ith node tree according ordering eg preorder formally mapping 0 triple simply confusion set pairs integers satisfying following conditions represents number nodes indicated tree 2 pair left 2 0 j 1 left 0 j 2 sibling order preserved c ancestor ancestor 0 j 2 ancestor order preserved c e f b f fig 3 mapping 0 dotted line node u node v 0 indicates u changed v u 6 v u remains unchanged v nodes touched dotted line deleted nodes 0 touched inserted thus mapping figure 3 f1 1 2 2 4 3 5 5 6 6g let mapping 0 let j sets nodes 0 respectively touched dotted line define cost ij2m i2i given sequence edit operations 0 shown exists mapping 0 flm fls conversely mapping exists sequence edit operations hence mapping 0 g 23 approximate tree matching operations 37 ukkonen discussed approximate string matching operations allow prefixes strings removed comparing strings myers miller 21 discussed similar operations regular expressions extend operations trees considering prefixes collection subtrees following two operations introduced ffl cutting node n tree means removing n descendants ie removing subtree rooted n ffl pruning node n tree means removing descendants n n remains thus pruning never eliminates entire tree operations useful locating portions tree closely match given pattern consider example trees figure 4 1 exactly matches subtree rooted 3 prune node b 3 cut node e type subtree matching corresponds one defined hoffmann odonnell 14 note may exist applicable pruning operations certain matchings yielded cuttings example cutting node c node e 3 resulting tree matches 2 however pruning operation applied case yield matching section 3 shall discuss use two operations practical applications e b c c fig 4 example trees 3 atbe queries 31 query specification atbe user formulates query building pattern tree screen providing appropriate statement building tree user may draw scratch may edit existing tree database eg existing tree may template may edit solution tree another query 4 may key tree linear form directly linear form tree fully parenthesized expression preorder enumeration tree ie first root subtrees left right node contents enclosed braces follow immediately corresponding node labels statement type retrieve insert delete first one information retrieval extraction second third used modifying underlying database figure 5 illustrates atbe query pattern represents rna secondary structure drawn 30 displayed approximate tree example window node contents normally shown screen saving space purposes seen popup windows eg popup window associated node labeled n indicates nodes size 2 statement entered statement window also shown figure linear form pattern keyed using text editor querybyexample paradigm employed atbe allows rapid incremental development queries easily refined highlight certain structural properties trees investigation many systems used similar concepts constructing queries 15 25 36 49 50 difference whereas systems express operations tabular skeletons atbe expresses operations tree structures represent entries underlying database sense atbes queries similar 4 using result query operand queries often desired developing query languages advanced information systems 2 motivation property atbe times users may find one solution tree promising closely matching trees file situation may edit solution tree use new pattern search data trees file lql 5 fig 5 query screen layout atbe pattern represents rna secondary structure 30 node contents eg size properties displayed via popup windows string shown window linear form pattern 32 query description interpretation table 1 gives complete bnflike syntax atbe statements 5 atbe stmt retrieve treetype treevar filename delete treename filename boolexpr boolexpr boolexpr j boolexpr boolexpr distop dist j distwithcut j distwithprune treeop size j height itervar treetype filename table 1 syntax atbe statements general atbes retrieve statement following construct retrieve treetype treevar filename boolexpr treetype either tree subtree clause specifies file users want search clause imposes constraints trees specifying conditions solution subtree must satisfy query implemented search specified file data subtree belonging file selected stored treevariable time new subtree stored variable boolean expression evaluated expression true subtree becomes answer file treated set therefore search file unordered subtree selected twice boolean expression consists terms connected logical connectives intersection union let pa refer pattern subtree file term form comparison operator eg expression evaluates constant two kinds tree operators 5 templates available save user typing inputing statements ffl size computes total number nodes subtree ffl height computes number edges longest path root leaf three kinds distance operators ffl dist computes distance pa ffl distwithcut computes minimum distance pa allowing zero cuttings nodes cf section 23 cost associated cuttings formally let somerootst represent set nodes two nodes mn 2 somerootst neither ancestor let cutt somerootst represent resulting tree remove subtrees rooted nodes somerootst f distpa cutt somerootstg ffl distwithprune computes minimum distance pa allowing zero prunings nodes cf section 23 distwithcut cost associated prunings expression constant aggregate expression latter form itervar treetype filename aggregate operator either min max see examples section 33 expression evaluated binding subtree specified file iterationvariable computing distance pattern convention identified pa subtree without cuttings prunings minimum maximum distance values returned result 321 semantics distance operators addition constant nodes namely ones whose labels contents specified pattern may contain following marks ffl variables x etc bars umbrellas appear edges pattern tree collectively referred variable length dont care marks 47 variables appear leaves preceded underscore marks may appear several places pattern marksubstitution instantiation pattern pa replaces marks nodes data tree ffl variable matched replaced subtree repeated variables ie different occurrences variable matched identical subtrees ffl bar viewed pseudo node pa matched part path root leaf ffl umbrella also viewed pseudo node matched part path subtrees emanating nodes path except possibly lowest node path lowest node umbrella matched set leftmost subtrees set rightmost subtrees mark named substitution pattern formally let lowest node n let children n c 1 c k lefttoright order let j 0 matched subtrees rooted c 1 addition node n ancestors along path starting n subtrees proper ancestors n let spa resulting markfree pattern tree require mapping spa map substituting nodes thus cost induced mark substitutions distance distwith cut distwithprune respectively pa respect substitution denoted distpa distwithcutpa distwithprunepa respectively defined distspa distwithcutspa 6 distance distwithcut distwithprune respectively pa obtained one best marksubstitutions ie fdistoppa sg set possible marksubstitutions distop one distance operators intuitively query may minimize substitutions minimize cuttings prunings minimize resulting number edits notice apt 10 lql systems 5 also provide similar operations though capabilities much limited support following exact match query pattern pa variables 5 bars 10 umbrellas retrieve tree filename distwithcutpa next subsections illustrate use atbe queries using examples drawn various applications 6 alternatively distpa could defined minimum cost sequences edit operations transform nodes excluding marks pa nodes involved substitution xn pa fig 6 variable instantiation variables pa matched shaded subtrees ii bar instantiation bar matched nodes black dots path p iii umbrella instantiation umbrella matched nodes black dots path p shaded subtrees notice consecutive children along descendents lowest node p represented unshaded subtree excluded instantiation mapped nodes underneath umbrella pa 33 example queries information retrieval one major functions atbe support tree information retrieval commonly used retrieval operation applications perhaps find trees closest given pattern 7 assuming pattern shown figure 5 query might expressed follows retrieve tree f distpa dist pa u u tree f trees obtained query displayed one time screen 8 user able see best 7 example analyzing features newly sequenced rna may exist rnas database exactly match new rna circumstance researchers often attempt get similar new one type query also known bestmatch retrieval 32 8 displayed either vertical normal form shown figure 5 horizontal normal form see figure 7 mapping yields distance solution tree large eg contains hundreds nodes edges nodes shrunk proportionally entire tree fit window users may lasso part interest zoom see detail 42 9 fig 7 horizontal normal form tree figure 5 situations trees represent noisy information users might wish find data trees within certain distance pattern type retrieval known goodmatch retrieval 39 example query retrieve tree f finds data trees within distance 7 pattern whose height greater 5 possible portion data tree unimportant situation user may provide pattern containing umbrellas shown figure 8 retrieve tree f distpa fig 8 atbe query retrieving data trees portion unimportant query retrieves data trees consisting nodes n h data trees subtree rooted shape subtree unimportant provided contains b one leaves applications users may wish retrieve portions trees rather entire trees hoffmann odonnell 14 instance discussed apply tree replacement techniques produce interpreters 9 tree large window user scroll window left right examine one portion tree time nonprocedural programming languages lisp lucid one important operation application locate occurrences pattern subject tree figure 9 shows atbe query finds subtrees file f exactly match given pattern allowing zero prunings nodes thus query able locate portions tree match pattern sense hoffmann odonnell generalized approximate hoffmann odonnell style matching replacing distwithprunepa retrieve subtree f distwithprunepa fig 9 atbe query retrieving subtrees solution subtrees obtained query displayed one time may also displayed tree basis namely entire tree displayed corresponding subtrees highlighted 42 like query languages 3 33 atbe also allows users store solution subtrees file rather display screen example retrieve tree f g distpa tree f stores trees file f dissimilar worst matching pattern file g 34 example queries information extraction previous section presents several examples information retrieval another major function atbe support information extraction trees let us consider examples drawn natural language processing consider tree shown figure 1 suppose user wishes find nouns direct object verb reads database parsed text 10 would type query shown figure 10 query retrieves data trees exactly match pattern allowing zero cuttings nodes cut subtrees nodes represent dontcare parts ie specify given pattern match data tree even data tree additional subtrees thus considered irrelevant respect pattern query illustrates use variables nodes used instantiate variable x represent objects verb reads highlighted displaying mapping trees 42 retrieve tree f distwithcutpa vp reads fig 10 atbe query finding nouns direct object reads query generalized replacing distwithcutpa k took inspiration operations apt system 10 handles exact tree matching ie distwithcutpa must zero extension approximate tree matching help many applications example users may type verbs past tense pattern tree even though matching data tree uses present tense using distwithcutpa find matching data tree whereas distwithcutpa apt would times computational linguists might want find semantic properties noun particularly determined predicates may serve argument 26 consider example query done book user wishes get set verbs book object database atbe query expressed shown figure 11 vp x book retrieve tree f fig 11 atbe query finding verbs book object query illustrates use bars bar specifies path may contain certain points zero unspecified intermediate nodes mark useful locating verbs complicated sentences boy wanted read book woman knew boy wanted read book 10 approximate matching helps locate verbs sentences book misspelled appears plural form 42 thus attaching variables bars pattern users extract information nodes subtrees database updating operations described atbes retrievalextraction operations turn updating operations atbe provides insert delete operations maintain database example user wishes erase pattern name say foo shown figure 5 file f would type statement delete foo f modifying tree achieved first retrieving file eg retrieve tree foo f editing erasing original copy storing new copy typing insert foo f 4 system organization implementation atbe implemented c xwindows currently runs sparc workstations sun operating system version 411 figure 12 shows organization system display manager displays trees mapping information assists user form atbe query query processor parses query performs query optimization tree comparator responsible computing distances trees system first started display manager activated accepts query performs syntax checking pattern input statement error query passed query processor processor parsing query recognizes files accessed retrieves trees invokes tree comparator whenever necessary perform tree comparison query processor produces output query control returns display manager displays answers screen modules communicate writing data files file names passed parameters 41 display manager display manager consists two components one provides user interface editing queries one displays solution trees editing pattern atbe allows users use text editor keying pattern alternatively tree editor tree editor enables users insert delete remove copy subtrees modify node labels contents attach bars umbrellas restriction order operations display manager also helps users format output vertical horizontal normal forms shows mapping information display manager tree distances trees comparator tree database tree subtrees subtrees query processor query subtrees solution fig 12 atbe system organization display manager menudriven number available functions state state associated set commands displayed via popup menus causes state transition executed command entered display manager either updates current window command recognized prints error message goes back state command entered command erroneous user finishes constructing query types carriage return display manager goes series consistency checks query errors appear query display manager shows error messages screen goes back initial state waiting another query typical errors may include inserting unmatched parentheses braces pattern keyed giving wrong information trees compared explain later errors found display manager transforms pattern linear form query keyed stores query file passes file name well control query processor 42 query processor query processor gets control reads query file specified passed file name parses query accesses files relevant data trees stored data trees stored linear forms cf section 31 whenever encountering tree comparison operators dist distwithcut distwithprune processor encodes corresponding trees file invokes tree comparator execute operators since computing distances trees usually timeconsuming developed algorithms prevent query processor exhaustively searching data trees file see section 5 addition query processor responsible choosing appropriate heuristics pool heuristics tailored different queries finding solution trees query processor stores file passes file name control back display manager 43 customizing atbe system atbe system customizable providing node definitions cost functions trees users tailor system meet need different applications briefly describe procedure details use system reader referred 41 42 recall node ordered labeled tree label possibly node contents simple language written c provided specify node contents example consider molecular structure shown figure 5 node structure associated label integer represents size property node node definition type tree thus looks follows node l f int node l nodes identification size refers information integer represents notice nodes label string type specified definition assume every node label treated implicit field users feed various node definitions described system set io programs used read trees specified node formats well cost function programs specific userdefined node formats generated users may modify cost function programs meet applications requirements 10 resulting programs compiled linked modules ie tree comparison query optimization graphical interface produce custom system using generated system users may input queries refer trees different node formats compute distance trees users must provide correct format information corresponding cost functions edit operations done clicking appropriate popup menu items filling information dialogue windows information match trees compared system shows error messages ignores corresponding query underlying algorithms major algorithms used implement atbe classified three categories 1 computing distances trees without marks ie variables bars umbrellas 2 computing distances trees marks also instantiating 3 query optimization first set algorithms presented 46 given two trees 1 2 algorithms compute distance without cuttings prunings ojt 1 j theta jt 2 j theta mindeptht 1 using ojt 1 j theta jt 2 space computation also produces product best mapping yields distance well distances subtrees two trees example insert delete node format node l may cost 5 relabeling cost 3 users specify cost functions system provides default cost functions second set algorithms given 47 algorithms compute distance 1 2 assuming one contains variables bars umbrellas algorithms also find best mapping yielding distance locate appropriate subtrees nodes used instantiating marks time space complexities algorithms first set algorithms third set algorithms essentially employs triangle inequality reduce computational efforts query evaluation illustration algorithms might instructive researchers develop query optimizers advanced information systems pictorial 6 8 28 spatial database systems 24 38 describe algorithms first focusing patterns without marks 51 algorithms processing queries without marks exposition purpose use bestmatch query running example general cases found 32 39 40 given file f n trees pattern pa one straightforward way finding trees f closest pa compute distance tree f pa search trees minimum distance major problem approach computational expense particularly trees files large approach instead first precompute pairwise distances trees f proceed stages picking one tree time comparing pattern updating current bestmatches necessary eliminating certain trees consideration specifically suppose point computed distpa tree f current bestmatching tree b two cases may arise case 1 case eliminate trees farther away closer distpa cannot contribute solutions see notice triangle inequality implies would never become bestmatching tree case 2 case becomes current bestmatching tree eliminate trees farther away 2 theta distpa consideration triangle inequality moreover let 1 igamma1 whose distances pa computed previous stages eliminate trees consideration farther away j 1 closer j distpa trees havent eliminated consideration yet thus exploiting triangle inequality precomputed intrafile distances filter trees could possibly satisfy query given distances known far 11 expedite query evaluation also developed heuristic called pick least lower bound picking trees heuristic works picking first tree randomly subsequent stages selects tree lower bound distance given pattern pa minimized based previously computed trees lower bounds obtained distpa picked previously intuitively heuristic uses lower bound estimate exact distance thus tree least lower bound expected potentially closest tree pa several trees lower bound heuristic selects one least upper bound upper bound obtained reason expect smaller difference lower upper bounds precise estimated distance ties difference broken arbitrarily 12 52 algorithms processing queries containing bars general triangle inequality hold pattern contains marks figure 13 illustrates case f x e c pa b e gh fig 13 assume edit operations cost one ffl computing distpa pa would match corresponding nodes x would match subtree rooted c resulting distance would 0 ffl computing distt 0 c would deleted nodes would match corresponding nodes 0 resulting distance would 1 representing cost deleting c ffl computing distpa 0 pa would match corresponding nodes 0 x would match either subtree rooted subtree rooted e cases resulting distance would 3 representing cost deleting three nodes subtree used instantiation thus distpa 0 put data trees intrafile distances unix files distance information stored separately trees read query processor needed distances newly inserted trees trees already file added periodically deleted trees marked trees together distances erased manually periodical manner well conducted experiments evaluate behavior algorithms results indicate performance algorithms slightly influenced file sizes strongly dependent distance distribution 32 39 algorithms work well distance distribution seriously skewed instance processing bestmatch queries algorithms eliminate nearly 80 trees average consideration uniformly distributed distances however special cases namely pattern contains bars derive bounding procedures similar used markfree case consider simple case pattern pa contains one bar suppose distpa distt 0 two arbitrary trees 0 f claim show consider set e edit operations transform pa set e 0 edit operations transform 0 let p path matched bar let e set edit operations applied p let p 0 resulting path 0 length p 0 may zero thus distance pa 0 bounded worst match bar p 0 zero cost apply edit operations e transform remaining part pa 0 upper bound offers useful cutoff criterion eliminate trees consideration searching farther trees pattern example consider retrieving trees file f dissimilar pattern pa let w represent current worst match using previous arguments distpa filter trees hand becomes current worst match eliminate trees consideration example illustrates use triangle inequality eliminate irrelevant trees worstmatch retrieval unfortunately developing complete cutoff procedures queries containing types marks nontrivial problem techniques optimizing queries remain explored 6 conclusions future work paper presents overview atbe system system makes several contributions 1 first system support approximate tree matching 2 supports many useful optional functions ability computing distance pattern data tree ffl cut prune subtrees data tree minimize distance ffl substitute variable length dont care nodes data tree minimize distance ffl instantiate variables placed leaves pattern tree 3 provides query language allows users combine variety constraints flexible ways use editing distance measure dissimilarity two trees applications researchers proposed different measurements tree matching see eg 7 19 adapt system develop custom environment specific distance measures designed system modular way cleanly separating routines tree comparison routines ie query optimization graphical interface etc thus user modify routines without changing rest system modular design also facilitates augmenting system additional functions work atbe continuing two main goals 1 system well algorithms deal ordered labeled trees 48 shown problem finding editing distance unordered labeled trees ie trees leftto right order nodes children unimportant npcomplete investigating heuristics comparing trees plan extend system handle 2 present lack techniques optimizing queries containing variables umbrellas may degrade system performance seriously currently working optimization strategies queries atbe used several universities would pleased share atbe software experiences groups pursuing relevant research readers interested obtaining software send written request one authors acknowledgements would like thank members lexical systems project ibm j watson research center particular b boguraev r byrd chodorow j klavans neff ravin helpful discussions concerning work systems r byrd chodorow inspirational would also like thank p kilpelainen university helsinki providing valuable comments using atbe colleagues howell smosna k snyder assisting us implementing atbe anonymous referees editor spooner constructive suggestions greatly improved readability paper r code generation using tree matching dynamic programming oql query language manipulating objectoriented databases system r relational approach data management fast string matching algorithm informal guide lexical query language pictorial database systems waveform correlation tree matching database structure manipulation capabilities picture database management system picdms extracting semantic hierarchies large online dictionary locating syntactic patterns text corpora approximate pattern matching pattern database system pattern classification scene analysis representation random waveforms relational trees generalized querybyexample data manipulation language based database logic noisy substring matching problem efficient tree pattern matching introducing efficient parallelism approximate string matching new serial algorithm treematching algorithm based node splitting merging tree system approach fingerprint pattern recognition approximate matching regular expressions creating querying hierarchical lexical data bases dictionaries dictionary grammars dictionary entry parsing probe spatial data modeling query processing image database application query processing techniques summarytable byexample database query language semantic representation lexical knowledge tidier drawings trees efficient pictorial database system psql distance transform images represented quadtrees comparing multiple rna secondary structures using tree comparisons structural descriptions inexact matching new techniques bestmatch retrieval design implementation ingres three dimensional structure transfer rna two crystal forms treetotree correction problem timebyexample query language historical databases finding approximate pattern strings design architectural implications spatial information system query processing distance metrics query optimization database information retrieval systems reference manual atbe tool approximate tree matching tool tree pattern matching tidy drawings trees programming manual editing distance trees algorithms applications simple fast algorithms editing distance trees related problems editing distance unordered labeled trees querybyexample officebyexample business language unifies data word processing electronic mail tr introducing efficient parallelism approximate string matching new serial algorithm tree system approach fingerprint pattern recognition timebyexample query language historical databases code generation using tree matching dynamic programming simple fast algorithms editing distance trees related problems query processing techniques summarytablebyexample database query language oql query language manipulating objectoriented databases new techniques bestmatch retrieval query optimization database information retrieval systems editing distance unordered labeled trees system r design implementation ingres treetotree correction problem pattern matching trees fast string searching algorithm probe spatial data modeling query processing image database application efficient pictorial database system psql query processing distance metrics fast serial parallel algorithms approximate tree matching vldcs editing distance trees ctr pavel makagonov celia b reyes espinosa elements principal stages design nonprofit websites proceedings 2nd wseas international conference computer engineering applications p115119 january 2527 2008 acapulco mexico kemal oflazer errortolerant tree matching proceedings 16th conference computational linguistics august 0509 1996 copenhagen denmark chiahsin huang tyngruey chuang hahnming lee fast structural query application chinese treebank sentence retrieval proceedings 2004 acm symposium document engineering october 2830 2004 milwaukee wisconsin usa jason tsongli wang dennis shasha george j chang liam relihan kaizhong zhang girish patel structural matching discovery document databases acm sigmod record v26 n2 p560563 june 1997 sachindra joshi neeraj agrawal raghu krishnapuram sumit negi bag paths model measuring structural similarity web documents proceedings ninth acm sigkdd international conference knowledge discovery data mining august 2427 2003 washington dc sudarshan chawathe comparing hierarchical data external memory proceedings 25th international conference large data bases p90101 september 0710 1999 flesca e masciari efficient effective web change detection data knowledge engineering v46 n2 p203224 august xifeng yan philip yu jiawei han substructure similarity search graph databases proceedings 2005 acm sigmod international conference management data june 1416 2005 baltimore maryland alfredo ferro giovanni gallo rosalba giugno alfredo pulvirenti bestmatch retrieval structured images ieee transactions pattern analysis machine intelligence v23 n7 p707718 july 2001 xifeng yan feida zhu philip yu jiawei han featurebased similarity search graph structures acm transactions database systems tods v31 n4 p14181453 december 2006 marcello pelillo kaleem siddiqi steven w zucker matching hierarchical structures using association graphs ieee transactions pattern analysis machine intelligence v21 n11 p11051120 november 1999 jason tsongli wang gungwei chirn thomas g marr bruce shapiro dennis shasha kaizhong zhang combinatorial pattern discovery scientific data preliminary results acm sigmod record v23 n2 p115125 june 1994 luca lombardi alfredo petrosino distributed recursive learning shape recognition multiscale trees image vision computing v25 n2 p240247 february 2007 michal van wyk tariq durrani barend j van wyk rkhs interpolatorbased graph matching algorithm ieee transactions pattern analysis machine intelligence v24 n7 p988995 july 2002 philip bille survey tree edit distance related problems theoretical computer science v337 n13 p217239 9 june 2005 erhard rahm philip bernstein survey approaches automatic schema matching vldb journal international journal large data bases v10 n4 p334350 december 2001 didier dubois henri prade florence sdes fuzzy logic techniques multimedia database querying preliminary investigation potentials ieee transactions knowledge data engineering v13 n3 p383392 may 2001 dennis shasha jason l wang rosalba giugno algorithmics applications tree graph searching proceedings twentyfirst acm sigmodsigactsigart symposium principles database systems june 0305 2002 madison wisconsin