experimenting quantitative evaluation tools monitoring operational security abstractthis paper presents results experiment security evaluation system modeled privilege graph exhibits security vulnerabilities quantitative measures estimate effort attacker might expend exploit vulnerabilities defeat system security objectives proposed set tools developed compute measures used experiment monitor large real system nearly two years experimental results presented validity measures discussed finally practical usefulness tools operational security monitoring shown comparison existing approaches given b introduction security increasing worry computing system administrators computing systems vital companies organizations systems made vulnerable new user requirements new services groupware information sharing facilities interconnection insecure networks powerful applications whose complexity may hide serious security flaws etc side users current computing systems security main concern prepared sake security waive system ease use give information sharing facilities conditions difficult reach acceptable degree security since users play important role computing system security even best system designed highest security would insecure badly operated casual users lax use efficient protection mechanisms would introduce flaws could exploited possible attackers thus one main tasks computing system administrators negotiate system users make change careless behavior improve system security easy job would user renounce bad habits considers sensitive data applications may difficult understand flaws introduces system endangering user accounts possibly sensitive information set tools presented aims facilitating administrators appear proc 6th ifip working conf dependable computing critical applications dcca6 garmishpartenkirchen germany march 57 1997 ieee computer society press task providing quantitative assessment current system security level tools help identify security flaws eliminated best security improvement least incidence users quantitative evaluation tools also enable monitor evolution global system security respect modifications environment configurations applications user behavior measurements delivered evaluation tools represent accurately possible security system operation ie ability resist possible attacks equivalently difficulty attacker exploit vulnerabilities present system defeat security objectives several characteristics deduced definitions security measure characterizes security system independently threats face system security measure whether many potential attackers high low competence tenacity course given system given security measure probably defeated many competent tenacious attackers lazy security measure directly related security objectives system secure long main security objectives respected even easy perform illegitimate actions defeat objectives instance system secure even easy intruder read public information security measure evolve according system modifications influencing security modification bring new vulnerabilities andor correct previous ones security measure sensitive modifications main use measures monitor security evolution given system rather rate absolutely security different systems important know security given system improving decaying compare security independent sys tems different objectives applications users environments etc theoretical framework developed laas identify compute measures dacier deswarte et al 1996a dacier 1994 framework based 1 theoretical model privilege graph exhibiting system vulnerabilities 2 definition security objectives mathematical model based markov chains compute security measures demonstrate practical feasibility approach theoretical framework implemented set software tools compute security measures large unix systems major question raised approach validity obtained measures represent accurately system security domain direct validation ex pected real attacks real systems rare precise correlation obtained computed measures success rate attacks even tiger team approach would probably inefficient since attacks necessarily representative real attacks good accuracy tiger team attacks must numerous stable system olovs son jonsson et al 1995 measures intended rate dynamic evolution system security practical validation experimental chosen observe security measures computed real fullscale system long period analyze significant measure change respect events triggering changes paper presents experiment section 2 presents short description theoretical framework section 3 presents experiment discusses results finally section 4 draws conclusion 2 presentation approach 21 formal description operational system vulnerabilities shown dacier deswarte 1994 vulnerabilities exhibited operational computing system represented privilege graph graph node x represents set privileges owned user set users eg unix group arc node x node indicates method exists user owning x privileges obtain node three classes vulnerabilities may identified vulnerability represented arc direct security flaw easily guessed password bad directory file protections enabling implantation trojan horse vulnerability necessarily security flaw instead result use feature designed improve security instance unix rhosts file enables user u1 grant privileges another user u2 without disclosing pas sword security flaw u1 trusts u2 needs u2 undertake tasks less secure solutions would give password reduce protection u2 grants privilege u3 u2 trusting u3 transitivity u3 reach u1s privileges even u1 trust u3 third class arcs representation privilege subsets directly issued protection scheme instance unix groups arc node representing privilege set group member node representing privilege set group figure 1 gives example privilege graph arcs labeled vulnerability classes guessys password 2 x ys rhosts 3y subset x 4 x attack via email 5y uses program owned x modify setuid program owned fig 1 example privilege graph sets privileges highly sensitive eg superuser privileges nodes called target nodes since likely targets attacks hand possible identify nodes privileges possible attackers nodes f called attacker nodes example define node called insider represents minimal privileges registered user eg privilege execute login change password etc path exists attacker node target node security breach potentially occur since transitivity possible attacker exploit system vulnerabilities obtain target privileges real systems paths exist lot possible vulnerabilities exist even cannot exploited attacker instance passwords guessed luck passwords easily obtained insiders dictionary automatic tools crack muffet 1992 identify short time passwords much complex practical means get exhaustive searching true class arcs vulnerabilities easily exploitable attacker eg arc corresponding group membership others may request knowledge competence tenacity luck means even path exists attacker node target node system security low probability defeated attacker needs lot cleverness competence time run arcs composing path definition given section 1 measure difficulty attackers reach targets would good measure security system assess measure arc privilege graph assigned weight corresponding effort needed potential attacker perform privilege transfer corresponding arc notion effort encompassing several characteristics attack process preexisting attack tools time needed perform attack computing power available attacker etc littlewood brocklehurst et al 1993 example effort needed obtain password assessed computing power time needed crack identify password trojan horse attack effort assessed competence needed design trojan horse time needed implant program executed target user time needed target user activate latter depend attack process user behavior effort weight assigned arc thus compound parameter represented rate success corresponding elementary attack following section presents model compute global privilege graph security measure elementary arc weights 22 assumptions order evaluate quantitative measures characterizing operational security based privilege graph necessary identify scenarios attacks may attempted potential attacker reach target first assume attacker sensible attempt attack would give privileges already possesses additional assumptions required characterize progress attacker towards target different models defined depending assumptions considered behavior tacker first model considered assume attacker chooses shortest path leading target denoted sp following ie one lowest mean value cumulated effort shortest path evaluated directly privilege graph taking account rates assigned arcs however assumption implicitly means attacker knows advance whole topology privilege graph build whole privilege graph attacker needs sets privileges described graph attacker already privileges need build graph clearly shortest path assumption satisfactory following introduce two alternative assumptions show corresponding security measures instructive security administrators measure sp attackers privileges increase result progress towards target characterized statetransition graph state identifies set privileges already gained transitions states occur attacker succeeds attack allowing acquire new privileges order fully characterize attack process state graph need specify additional assumption defines attacks attempted attacker step attack process two different assumptions discussed hereafter corresponding specific attack process model ie attacker profile total memory tm assumption step attack process possibilities attacks considered ie newly visited node privilege graph already visited nodes apply previously step attacker may choose one attack among set possible attacks memoryless ml assumption newly visited node privilege graph attacker chooses one attacks issued node without considering attacks already visited nodes apply previously assumptions assumed attack process stops target reached consider situations attackers may give interrupt process figure 2 plots state graph attack process associated example given figure 1 assumptions tm ml considered assumed insider attacker node target node improve clarity figure x admin insider respectively referred x seen scenarios attacks represented figure 2b correspond subset identified figure 2a 23 mathematical model order able compare evolution security measures corresponding assumptions tm ml sp need specify mathematical model used evaluate mean effort attacker reach target investigations led us choose markovian model satisfies intuitive properties regarding security evolution see dacier deswarte et al 1996a dacier deswarte et al 1996b details markov model based assumption probability succeed given elementary attack amount effort e spent described exponential distribution given l rate assigned attack practical considerations derived use distribution following potential attacker eventually succeed reaching target path leading target exists provided spends enough effort mean effort succeed given attack given 1l last point particularly valuable since knowledge attack rates sufficient characterize whole distribution first point deserves clarifications fact aim evaluate system resiliency successful attacks respect specified target consider scenarios attacks eventually lead target scenarios may aborted attack process based markovian assumption transition state transition attack process rated success rate corresponding vulnerability various probabilistic measures derived model among mean effort potential attacker reach specified target denoted metf mean effort security failure analogy mean time failure metric allows easy physical interpretation results higher metf better security moreover simple analytical expressions easily obtained analyzed order check plausibility model results metf given sum mean efforts spent states leading target weighted probability visiting states mean effort spent state j denoted e j given inverse sum state js output transition rates 1 outj set states reachable single transition state j l ji transition rate state j state tm assumption b ml assumption fig 2 attack process state graph associated example figure 1i fi fi let us denote metf k mean effort state k initial state p ki conditional probability transition state k state 2 according model highest output conditional probabilities values correspond transitions highest success rates clearly complexity metf computation algorithm related size attack process state graph associated assumption adopted assumption tm number paths leading target considered higher number paths corresponding assumption ml 24 assumptions tm ml sp expected behaviors following analyze expected behaviors metf assumptions tm ml sp considered 241 single path let us consider first example privilege graph containing single path attacker node target node see figure 3 case metf given k number arcs path l j success rate associated elementary attack j value metf obtained either assumption tm ml sp considered clearly number arcs increases metf increases security improves also values l j increase metf decreases security degrades fig 3 markov model corresponding single path 242 multiple paths regards sp assumption shortest path obtained identifying privilege graph direct paths attacker node target node evaluating minimum value metf among values computed direct path direct path attacker target node belongs path visited expression metf sp rate assigned arc belongs direct path k n number direct paths metf values corresponding assumptions tm ml obtained processing corresponding state transition attack process let us consider example figure 4 attacker target privilege graph figure 4a indicates pre z sence two paths leading target markov models corresponding assumptions ml tm given figure 4b 4c respectively application relations 1 2 leads following expressions could seen value l 1 l 2 l 3 expression metf tm always lower corresponds case first path exists corresponds case second path exists result illustrates fact addition new paths leading target privilege graph surely leads decrease metf tm indicates security degradation result easily generalized details found dacier 1994 however assumption ml leads different behavior since metf ml may increase decrease depending values parameters instance metf ml lower ie mean effort spent obtaining privileges node node c lower mean effort corresponding initial path due fact assumption ml contrarily assumption tm attacker chooses given path never backtracks reaches target modifications introduced privilege graph lead additional paths shorter derived initial privilege graph metf ml decreases otherwise metf ml increases previous discussion concluded metf tm always lower mean effort calculated based shortest path metf tm metf sp assumption ml metf ml may lower higher metf sp depending values parameters structure privilege graph last property worth mentioning concerns comparison metf ml metf tm since attack scenarios corresponding assumption ml subset obtained assumption tm proved privilege graph assumption ml leads higher metf values assumption tm metf ml metf tm privilege graph b assumption ml c assumption tm fig 4 multiple pathsexample l 1 l 1 l 3 l 2 l 3 l l l 4 l 1 l 1 l 3 l 2 l 3 l 3 l 2 l 3 l 2 l 4 l 3 l 1 l 3 l 1 l 4 l 1 l 1 l 4 l 2 l 4 acd ac l 1 l3 abd acd ac l3 abd l3 abcd 25 discussion based results previous section table 1 summarizes expected behavior measures metf ml metf tm number paths attacker target set privileges increases noteworthy consider simultaneous occurrence several modifications privilege graph addition deletion vulnerabilities modification rates assigned vulnerabilities different simultaneous modifications may influence diversely system security thus difficult predict type behavior observed security measures operational systems frequent one modification privilege graph occurs time privilege graph constructed time modification occurs likely typical behaviors reported table 1 always satisfied one modification privilege graph occurs expect number paths increases addition new vulnerability metf tm decreases since new path weakens security target shortest path attacker target decreases metf tm decreases shows degradation security discussed previous section two kinds behavior may observed new path decreases probability taking another relatively easy path benefit longer new one metf tm may increase indicated behavior 2 table 1 otherwise metf ml evolution metf tm decrease number paths increases reveal degradation security behavior 1 clearly assumption tm allows easier interpretation security evolution analyzing variation measure together modifications introduced privilege graph security administrators assess whether modifications significant impact se curity based results identify critical paths privilege graph take appropriate decisions either correct system weaknesses security decreases keep system configuration unchanged risks induced modifications significant either security increases small decrease metf observed regards assumption ml increase metf ml number paths increases may considered unrealistic could mean security increases additional vulnerabilities introduced kind measure behavior due ml attacker profile number number table 1 typical behaviors assumes attacker chooses given path never leaves top events appearing selected path correspond easy attacks attacker inclined choose path following attacks require much effort succeed mean effort reach target increase main question whether type attacker profile realistic difficult answer question lack real data experiment presented following section show valuable information security evolution provided security administrators even model ml considered indeed mainly interested metf variation rather absolute values measure significant variation metf thoroughly examined concerning shortest path clear information provided measure incomplete one path privilege graph taken account therefore security variation due presence paths identified shortest path computed monitor operational security 3 experiment 31 tools description experiment presented section conducted using set tools main steps evaluation process 1 definition security policy security objective chosen system relevant security targets sets privileges must protected potential attackers sets privileges targets protected identified attackertarget pair corresponds two sets nodes privilege graph one quantitative evaluation needed tool developed describe formally security objectives pairs identified gathered file probing system building privilege developed tool named asa automatic security advisor looks known vulnerabilities unix system study builds related privilege graph tool runs extended privileges order able analyze parts system far asa using many procedures included cops package farmer spafford 1990 precisely like cops unix scripts scan unix file system gathering information access permissions several files either user specific directories crack program run guess user passwords using standard dictionary time vulnerability detected system arc added privilege graph cons truction know step analysis potential vulnerability identified relevant security flaw correction attempted output asa tool therefore privilege graph describing known vulnerabilities target system time snapshot probing system privilege graph built may recorded archive archive regularly augmented using classical unix tools cron allow automatic periodic analysis system subsequently another tool computes security measures presented section 2 security objective computations applied either single privilege graph whole archive securityrelevant events last ease analysis security measures computed tool identifies significant variation measure security events caused precisely looks arcs involved paths attacker target sets changed two consecutive privilege gra phs helps identify events caused measure evolution example output tool given annex 32 target system description system observation experiment large distributed computer system hundred different workstations connected local area network 700 users sharing one global file system experiment total number users changed frequently due arrival departure temporary staff frequent event target system probing security vulnerabilities made global file system experiment system observed 13 months daily basis starting june 1995 end july 1996 archive privilege graphs contains 385 items one day target system experiment security main concern users since critical information stored system necessary enforce strong global security policy even sometimes users system administrators might worry personal reasons safety reasons explains important number known vulnerabilities shown hereafter noteworthy vulnerabilities persist accepted often provide useful convenient functionalities furthermore main objective validate behavior security measures observed natural evolution system try convince users remove vulnerabilities identified improve system security 33 experiment settings 331 security objectives evaluating security measures requires relevant sets targets attackers defi ned pairs related security objectives one would like system fulfill much possible unix system one important target protect attacks root account generally every account allowing obtain superuser privileges another interesting target study group system administrators giving access data share select precise attacker choose insider set privileges defined section 2 table 2 summarizes case studies analysis second security objective one problem appears due existence superusers unix superuser able get privileges user sys tem thus consider target set users protect mechanism implicitly leads us unix superuser privilege bypasses access control mechanisms include superuser set privileges includes set considered objective 2 would included objective 1 one sequence privilege transfer methods enables defeat objective 1 also defeats objective 2 order completely distinct case studies consider vulnerabilities linked superuser properties objective 2 removed privilege graphs instantaneous arcs going directly superuser admingroup set privileges 332 vulnerabilities known vulnerabilities unix monitored 13 among common cluding password checking crack software userdefined privilege transfer methods incorrectexploitable permissions setuid files rhosts files initialization files profile cshrc etc incorrect path search allows trojan horse attacks etc detailed review classical unix vulnerabilities found garfinkel spafford 1995 addition specific arcs labeled instantaneous correspond inclusions privilege sets example one user node nodes unix groups belongs security state modifications events occur vulnerabilities either created eliminated arcs privilege graph added deleted value associated one vulnerability weight assigned arc changes events occurred frequently experiment 333 quantification experiment defined four level classification scale see table 3 different levels differ one order magnitude rate different vulnerabilities level1 corresponds easiest elementary attacks level4 difficult ones various levels assigned attack rather arbitrary evaluating precisely success rate various attacks present system would required additional tools recording user profiles currently available prototype however attacker target objective 1 insider root objective 2 insider admingroup table 2 security objectives name weight table 3 attack success rate levels serious drawback experiment aims primarily validating security measures behavior rather precisely rate security system 34 experiment results results experiment corresponding objectives 1 2 presented figure 5 figure 6 respectively measures presented number paths found attacker target sets metf sp metf tm metf ml list corresponding security events given annex metf tm computed number paths attacker target relatively small thus thick line curves two graphics sometimes present gaps fig 5 measures evolution objective 1 insider root11000695 0795 0895 0995 1095 1195 1295 0196 0296 0396 0496 0596 0696 0796 0896 insider root due uncomputability measure unfortunately large gaps appear figure 6 significant measure variation cause analyzed detailed description given annex experiment feedback following analyze subset events included annexa check assumptions expected behaviors discussed section 24 section 25 fig measures evolution objective 2 insider admingroup1000695 0795 0895 0995 1095 1195 1295 0196 0296 0396 0496 0596 0696 0796 0896 insider admingroup 351 events 2 7 11 objective 1 objective 1 events 2 7 11 exhibit global behavior type 1 see table 1 events satisfies conditions behavior observed add one new vulnerability already available attacker reach root target therefore increasing total number possible paths attacker node tar get furthermore shortest path evolve new paths shorter previous shortest one precisely vulnerabilities corresponding events described table 4 extracted table 5 seen figure 5 figure 6 detailed table annex metf tm always decreased result occurence events showing degradation security amplitude evolution variable depending difficulty related new vulnerability relative position respect previously existing paths fact verified metf tm every single degradation security sometimes relative variation measure small visible plots therefore whole experiment behavior metf tm agreement expectations mo reover events 2 7 11 metf ml evolution similar evolution metf tm 352 event 11 objective 2 objective 2 event 11 different impact security measures illustrates behavior 2 case increase number paths attacker target lead decrease metf tm increase metf ml expected metf ml metf tm measures would always evolve direction happens secondary path appears lengthens previous path influences metf ml shows improvement reducing probability selecting fast path metf tm affected fact new path created shows degradation 353 event 24 period p objective 1 beginning march 1996 strong decrease shortest path attacker target objective 1 occurred event 24 figure 5 shows metf ml metf tm decrease result evolution event date problem one user grants write permissions everyone home directory allowing implant trojan horse careless users could activate example another user grants write permissions everyone login initialization file allowing major trojan horse attack would activated next login oct 95 third user grants write permission everyone rhosts fi le enabling immediate attack via identity transfer mechanisms unix table 4 examples vulnerabilities leading behavior 1 period p followed event 24 also exhibits interesting behavior period seen comparing two curves figure 5 metf tm nearly equal influence shortest path important length directly controls value metf tm behavior metf ml case possible attacker reach target easy steps situation clear target well protected furthermore security directly affected vulnerabilities appearing shortest path would mandatory react disable vulnerabilities 354 events 6 13 objectives 1 2 figure 5 figure 6 also observed similar phenomena sudden important increases number paths november 1995 objective 1 end august 1995 november 1995 objective 2 problem involved incorrect positioning write permission others field unix permissions important initialization file created path target nearly every user system thus provided insider user much intermediate initial paths vulnerable users overall system phenomenon normal securityrelevant event disturbs evaluation security two reasons first dramatic increase number paths precludes computation metf tm shown decrease security second new paths longer previous ones metf ml increases fact insider attacker much likely choose long path spend lot effort system reaching target metf ml sensitive normal evolution metf ml may satisfying indication overall security evolution however cases dramatic increase number paths attacker target indicates directly thorough security analysis must performed 355 event 16 objective 2 order validate modeling assumptions need consider evolution security measures single events occur since evolution cannot predicted several conflicting events occur instance consequence event 16 objective 2 seems contradict conclusions section 3421 shows increase number paths attacker target security measures metf tm metf ml increase evolution due occurrence several simultaneous security events within period one observation system 1 day situation occurred experiment fact difference measures tm sp small 10 3 course direclty visible plot fact looking closely description event 16 given table 5 seen three vulnerabilities disabled two different users one user enabled new one first two events positive influence security last one opposite effect increases number paths evolutions measures seem indicate last one least impact 36 comparison various measures addition results discussed section 35 make following remarks comparison different measures shown figure 5 figure 6 361 shortest path period covered experiment shortest path evolved 3 times objective 1 twice objective 2 measure provides interesting information easiest path present system however dynamic enough useful operational monitoring security evolution indicated section 25 comparison metf tm value shortest path take account fact several equivalent paths could available fact length nature path vulnerabilities involved interest improve security path seems major impact metf ml metf tm 362 number paths number paths attacker target sensitive information varies lot seems difficult use alone operational security monitoring first noticed security event leading decrease increase number paths attacker target necessarily lead significant variation security measures see 1 18 19 20 22 table 5 theoretically seems possible ignore security events minor influence mean effort spent attacker reach target case impact addition deletion arcs privilege graph relatively small compared global effort values even number paths varies contrary identified events led significant evolution metf ml metf tm whereas number paths changed slightly see 2 3 4 11 12 16 17 21 23 table 5 therefore able detect particular events important influence security system without significantly affecting number paths attacker target globally see number paths existing attacker target measure would raise important number alarms among may relatively uninteresting moreover important security events would lead raise alarm consequently measure seems difficult use metf ml metf tm less reliable 363 metf tm metf ml measures exhibit interesting behavior stability periods separated several variations seen annex variations related securityrelevant event however also see metf tm cannot computed time main drawback metf ml sometimes exhibit delicate behavior shows increase effort needed attacker reach target number paths increases behavior 2 weakens confidence metf ml single security event 6 13 lead great increase measure however seems possible rely metf ml reveal degradation security target react adequately significant security events contrary number paths among measures metf tm seems exhibit plausible behavior additional work would needed reduce complexity algorithm used compute obtain values miss complete comparison metf ml 37 comparison security monitoring tools usually tools dedicated operational security analysis cops satan limit action direct check system ends list known vulnerabilities present possibly sorted different classes according severity prototype presented paper heavily based tools see asa description section 31 gathered data also interesting compare information provided security end first step prototype complete evaluation method performed figure 7 plots evolution number known vulnerabilities system whole experiment figure 8 shows results details distribution vulnerabilities audited among various severity levels considered use directly information provided figure 7 figure 8 monitor security system see number alarms would faced would important fact time new security event occurs system would obli fig 7 evolution total number vulnerabilities fig 8 evolution distribution vulnerabilities20060010000695 0995 1295 0396 069620060010000695 0995 1295 0396 0696 level1 level2 level3 level4 ged analyze precisely even minor event know exactly influence security objectives probably reduce number alarms one would try take account severity level new vulnerabilities involved however see comparing figure 8 figure 5 figure 6 evolution number severe vulnerabilities level1 level2 present system decrease overall security always correlated course intention depreciate value results obtained automatic tools essential first step handle operational security monitoring evaluation method mostly based data provided tools however well known problem number alarms raised tools important cannot always taken care easily evaluation measures presented previous section enable security administrator extract variations ones would really need reaction therefore results obtained evaluation method complementary derived classical security analysis tools paper presented approach aiming quantitative evaluation security operational systems evaluation based theoretical model called privilege graph describes system vulnerabilities may offer opportunities potential attackers defeat security objectives studied several modeling assumptions discussed validity assumptions based experimental study performed real system three different models discussed corresponding three assumptions attacker behavior sp tm ml experiment results show assumption tm satisfactory behavior corresponding measure provides useful feedback security administrators order monitor security system ie evaluate impact system vulnerabilities security objectives identify vulnerabilities may lead security degradation unfortunately security measure associated assumption tm always computed due complexity algorithm hand computation measure related assumption ml easier howe ver difficult security administrators identify appropriate actions done system based observed behavior measure fact case variation security measure carefully analyzed whereas assumption tm negative variation measure considered finally concluded shortest path number vulnerabilities number paths sufficient characterize operational security evolution experimental results presented paper modeling assumptions considered constitute preliminary investigation feasibility security evaluation operational systems taking account dynamic evolution benefits kinds evaluations work needed improve accuracy measures considered order improve confidence help security administrators better monitoring security systems acknowledgments authors grateful marc dacier ibm zrich remarks early version paper pioneering work quantitative evaluation security also thank anonymous referees helpful reviews work partially supported uap assurances european esprit project n20072 design validation deva r towards quantitative evaluation computer security privilege graph extension typed access matrix model models tools quantitative assessment operational security quantitative assessment operational security models tools cops security checker system towards operational measures computer security crack version 41 sensible password checker unix towards operational measures computer security experimentation modelling tr ctr david nicol modeling simulation security evaluation ieee security privacy v3 n5 p7174 september 2005 michael yanguo liu issa traore empirical relation coupling attackability software systems case study dos proceedings 2006 workshop programming languages analysis security june 1010 2006 ottawa ontario canada paul ammann duminda wijesekera saket kaushik scalable graphbased network vulnerability analysis proceedings 9th acm conference computer communications security november 1822 2002 washington dc usa b b madan k trivedi security modeling quantification intrusion tolerant systems using attackresponse graph journal high speed networks v13 n4 p297308 january 2004 joseph pamula sushil jajodia paul ammann vipin swarup weakestadversary security metric network configuration security analysis proceedings 2nd acm workshop quality protection october 3030 2006 alexandria virginia usa shuo chen jun xu zbigniew kalbarczyk ravishankar k iyer keith whisnant modeling evaluating security threats transient errors firewall software performance evaluation v56 n14 p5372 march 2004 somesh jha jeannette wing survivability analysis networked systems proceedings 23rd international conference software engineering p307317 may 1219 2001 toronto ontario canada bharat b madan katerina goevapopstojanova kalyanaraman vaidyanathan kishor trivedi method modeling quantifying security attributes intrusion tolerant systems performance evaluation v56 n14 p167186 march 2004 yusung wu bingrui foo yuchun mao saurabh bagchi eugene h spafford automated adaptive intrusion containment systems interacting services computer networks international journal computer telecommunications networking v51 n5 p13341360 april 2007 yanguo michael liu issa traore complexity measures secure serviceoriented software architectures proceedings third international workshop predictor models software engineering p11 may 2026 2007 huseyin cavusoglu srinivasan raghunathan configuration detection software comparison decision game theory approaches decision analysis v1 n3 p131148 september 2004 karabulut f kerschbaum f massacci p robinson yautsiukhin security trust business outsourcing manifesto electronic notes theoretical computer science entcs 179 p4758 july 2007 wang bharat b madan kishor trivedi security analysis sitar intrusion tolerance system proceedings acm workshop survivable selfregenerative systems association 10th acm conference computer communications security p2332 october 3131 2003 fairfax va wei li rayford b vaughn yoginder dandass approach model network exploitations using exploitation graphs simulation v82 n8 p523541 august 2006 algirdas avizienis jeanclaude laprie brian randell carl landwehr basic concepts taxonomy dependable secure computing ieee transactions dependable secure computing v1 n1 p1133 january 2004 david nicol william h sanders kishor trivedi modelbased evaluation dependability security ieee transactions dependable secure computing v1 n1 p4865 january 2004