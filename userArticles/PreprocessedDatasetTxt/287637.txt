computing rankrevealing qr factorizations dense matrices develop algorithms implementations computing rankrevealing qr rrqr factorizations dense matrices first develop efficient block algorithm approximating rrqr factorization employing windowed version commonly used golub pivoting strategy aided incremental condition estimation second develop efficiently implementable variants guaranteed reliable rrqr algorithms triangular matrices originally suggested chandrasekaran ipsen pan tang suggest algorithmic improvements respect condition estimation termination criteria givens updating combining block algorithm one triangular postprocessing steps arrive efficient reliable algorithm computing rrqr factorization dense matrix experimental results ibm rs6000 sgi r8000 platforms show approach performs three times faster less reliable qr factorization column pivoting currently implemented lapack comes within 15 performance lapack block algorithm computing qr factorization without column exchanges thus expect routine useful may circumstances numerical rank deficiency cannot ruled currently ignored computational cost dealing b introduction briefly summarize properties rankrevealing qr factorization rrqr factorization let theta n matrix wlog n singular values define numerical rank r respect threshold follows oe r oe r1 also let qr factorization form r 11 r 12 p permutation matrix q orthonormal columns r upper triangular r 11 order r let denote twonorm condition number matrix say 2 rrqr factorization following properties satisfied whenever welldetermined gap singular value spectrum oe r oe r1 hence numerical rank r well defined rrqr factorization 2 reveals numerical rank wellconditioned leading submatrix r 11 trailing submatrix r 22 small norm also note matrix gammai easily computed 2 usually good approximation nullvectors steps subspace iteration suffice compute nullvectors correct working precision chan hansen 1992 rrqr factorization valuable tool numerical linear algebra provides accurate information rank numerical nullspace main use arises solution rankdeficient leastsquares problems example geodesy golub et al 1986 computeraided design grandine 1989 nonlinear leastsquares problems 1978 solution integral equations elden schreiber 1986 calculation splines grandine 1987 applications arise beamforming bischof shroff 1992 spectral estimation hsieh et al 1991 regularization hansen 1990 hansen et al 1992 walden 1991 stewart 1990 suggested another alternative singular value decomposition svd complete orthogonal decomposition called urv decomposition factorization decomposes r 11 r 12 u v orthogonal kr 12 k 2 kr 22 k 2 order oe r1 particular compared rrqr factorizations urv decompositions employ general orthogonal matrix v instead permutation matrix p urv decompositions expensive compute well suited nullspace updat ing rrqr factorizations hand suited leastsquares setting since one need store orthogonal matrix v orthogonal matrix usually applied righthand side fly course rrqr factorizations used compute initial urv decomposition briefly review history rrqr algorithms interlacing theorem singular values golub loan 1983 corollary 833 oe hence satisfy condition 3 need pursue two tasks task 1 find permutation p maximizes oe min r 11 task 2 find permutation p minimizes oe max r 22 businger golub 1965 suggested commonly called qr factorization column pivoting given set already selected columns algorithm chooses next pivot column one farthest away euclidean norm subspace spanned columns already chosen golub loan 1983 p168 p645 intuitive strategy addresses task 1 greedy algorithm known fail socalled kahan matrices golub loan 1989 p 245 example 551 works well practice forms basis linpack dongarra et al 1979 lapack anderson et al 1992a anderson et al 1994b implementations recently quintanaorti sun bischof 1995 developed implementation busingergolub algorithm allows half work performed blas3 kernels bischof also developed restrictedpivoting variants busingergolub strategy enable use blas3 type kernels 1989 almost work reduce communication cost distributedmemory machines 1991 one approach task2 based essence following fact proved chan hansen 1992 lemma 1 r 2 ir nthetan w nthetap nonsingular means determine matrix w p linearly independent columns lie approximately nullspace r ie krwk 2 small w 2 well conditioned oe min w large guaranteed elements bottom right p theta p block r small algorithms based computing wellconditioned nullspace bases include golub klema stewart 1976 chan 1987 foster 1986 algorithms addressing task2 stewart 1984 gragg stewart 1976 algorithms addressing task 1 include chan hansen 1994 golub klema stewart 1976 fact latter achieves task 1 task 2 therefore reveals rank expensive comparison others bischof hansen combined restrictedpivoting strategy chans algorithm chan 1987 arrive algorithm sparse matrices bischof hansen 1991 also developed blockvariant chans algorithm bischof hansen 1992 fortran 77 implementation chans algorithm provided reichel gragg 1990 chans algorithm chan 1987 guaranteed long rank matrix close n algorithm guaranteed produce reliable bounds reliability may decrease rank matrix hong pan 1992 showed exists permutation matrix p triangular factor r partitioned 2 oe min r 11 loworder polynomials n r versus exponential factor chans algorithm chandrasekaran ipsen 1994 first develop rrqr algorithms satisfy 8 9 paper also reviews provides common framework previously devised strategies particular introduce socalled unification principle says running task1 algorithm rows inverse matrix yields task2 algorithm suggest hybrid algorithms alternate task1 task2 steps refine separation singular values r pan tang 1992 gu eisenstat 1992 presented different classes algorithms achieving 8 9 addressing possibility nontermination algorithms floatingpoint inaccuracies goal work develop efficient reliable rrqr algorithm implementation suitable inclusion numerical library lapack specifically wished develop implementation reliable close performance qr factorization without pivoting implementation would provide algorithm developers efficient tool addressing potential numerical rank deficiency minimizing computational penalty addressing potential rank deficiency strategy involves following ingredients efficient blockalgorithm computing approximate rrqr factorization based work bischof 1989 efficient implementations rrqr algorithms well suited triangular matrices based work chandrasekaran ipsen 1994 pan tang 1992 algorithms seemed better suited triangular matrices suggested gu eisenstat 1992 expect 1 2 foreach ng res 3 minm n 4 let pvt n respvt maximal 5 7 8 foreach ng 9 res j res 2 10 end foreach 11 end fig 1 qr factorization algorithm traditional column pivoting cases approximate rrqr factorization computed block algorithm close desired rrqr factorization requiring little postpro cessing almost entirely blas3 based preprocessing algorithm performs considerably faster qr factorization column pivoting close performance qr factorization without pivoting paper structured follows next section review block algorithm computing approximate rrqr factorization based restricted pivoting approach section 3 describe modifications chandrasekaran ipsens hybridiii algorithm pan tangs algorithm 3 section 4 presents experimental results ibm rs6000 sgi r8000 platforms section 5 summarize results 2 block qr factorization restricted pivoting section describe block qr factorization algorithm employs restricted pivoting strategy approximately compute rrqr factorization employing ideas described bischof 1989 compute q sequence householder matrices given vector x choose vector u first canonical unit vector j ff see examplegolub loan 1989 p 196 application householder matrix b hua involves matrixvector product z u rankone update b gamma 2uz figure 1 describes busingergolub householder qr factorization algorithm traditional column pivoting businger golub 1965 computing qr decomposition theta n matrix primitive operation u genhhx computes u hux multiple e 1 primitive operation step completed values res length projections j th column currently permuted ap onto orthogonal complement subspace spanned first columns ap values res j updated easily recomputed every step although e e e e e e fig 2 restricting pivoting block algorithm roundoff errors may make necessary recompute res periodically dongarra et al 1979 p 917 suppressed detail line 9 figure 1 bulk computationalwork algorithm performed apphh ker nel relies matrixvector operations however todays cachebased architectures ranging workstations supercomputers matrixmatrix operations perform much better matrixmatrix operations exploited using socalled block algorithms whose toplevel unit computation matrix blocks instead vectors algorithms play central role example lapack implementations anderson et al 1992a anderson et al 1994b lapack employs socalled compact wy representation products householder matrices schreiber van loan 1989 expresses product series theta householder matrices 10 theta nb matrix nb theta nb upper triangular matrix stable implementations generating householder vectors well forming applying compact wy factors provided lapack arrive block qr factorization algorithm would like avoid updating part several householder transformations computed strategy impossible traditional pivoting since must update res j choose next pivot column modify traditional approach half work using block transformations best issues discussed detail quintanaorti et al 1995 therefore instead limit scope pivoting suggested bischof 1989 thus update remaining columns computed enough householder transformations make block update worthwhile idea graphically depicted figure 2 given stage done columns left pivot window try select next pivot columns exclusively columns pivot window touching part right pivot window combined householder vectors defined next batch pivot columns compact wy factor apply block update columns right since leading block r supposed approximate large singular values must able guard pivot columns close span columns already selected given upper triangular matrix r defined first columns q ap new column determined new candidate pivot column must determine whether condition number larger threshold defines consider rankdeficient matrix approximate oe r easy compute cheaply estimate oe min r i1 employ incremental condition estimation ice bischof 1990 bischof tang 1991 given good estimate b oe min r defined large norm solution x r 1 new column incremental condition estimation 3k flops computes c oe min r oe min r sx c stable implementation ice based formulation bischof tang 1991 provided lapack routine xlaic1 1 ice order magnitude cheaper condition estimators see example higham 1986 considerably reliable simply using j fl j estimate oe min r i1 see example bischof 1991 also define b oe min r restricted block pivoting algorithm proceeds four phases phase 1 pivoting largest column first position step motivated fact norm largest column usually good estimate phase 2 block qr factorization restricted pivoting given desired block size nb window size ws ws nb try generate nb householder transformations applying busingergolub pivoting strategy columns pivot window using ice assess impact column selection condition number via ice pivot column chosen pivot window would lead leading triangular factor whose condition number exceeds mark remaining columns pivot window k say rejected pivot end matrix generate block transformation width nb apply remainder matrix reposition pivot window 1 sequel use conventionthat prefix x generically refers appropriate one four different precision instantiations slaic1 dlaic1 claic1 zlaic1 encompass next ws yet rejected columns columns either accepted part leading triangular factor rejected stage algorithm phase stops assuming included r 2 columns leading triangular factor point computed r 2 theta r 2 upper triangular matrix r satisfies r 2 estimate numerical rank respect threshold point experiments chose choice tries ensure suitable pivot window loosens bit matrix size increases pivot window large reduce performance overhead generating block orthogonal transformations larger number unblocked operations hand pivot window small reduce pivoting flexibility thus increase likelihood restricted pivoting strategy fail produce good approximate rrqr factorization experiments choice w small impact 5 overall performance negligible impact numerical behavior phase 3 traditional pivoting strategy among rejected columns since phase 2 rejects remaining columns pivot window pivot candidate rejected column may pivoted end rejected hence continue traditional busingergolub pivoting strategy remaining updating 14 estimate condition number phase ends column r 3 say inclusion next pivot column would pushed condition number beyond threshold expect many columns selected phase mainly intended cheap safeguard possible failure initial restrictedpivoting strategy phase 4 block qr factorization without pivoting remaining columns columns yet factored columns r 3 great probability linearly dependent previous ones since rejected phase 2 phase 3 hence unlikely kind column exchanges among remaining columns would change rank estimate standard blas3 block qr factorization implemented lapack routine xgeqrf fastest way complete triangularization completion phase 4 computed qr factorization kthat satisfies column r r 3 n r r3 result suggests qr factorization good approximation rrqr factorization r 3 good estimate rank however qr factorization guarantee reveal numerical rank correctly thus back algorithm guaranteed reliable rrqr implementations introduced next two sections 3 postprocessing algorithms approximate rrqr factor ization 1991 chandrasekaran ipsen 1994 introduced unified framework rrqr algorithms developed algorithm guaranteed satisfy 8 thus properly reveal rank algorithm assumes initial matrix triangular thus well suited postprocessing step algorithm presented prexeding section shortly thereafter pan tang 1992 introduced another guaranteed reliable rrqr algorithm triangular matrices following subsections describe improvements implementations algorithms 31 rrqr algorithm pan tang implement variant pan tang 1992 call algorithm 3 pseudocode algorithm shown figure 3 assumes input upper triangular matrix r pi r denotes right cyclic permutation exchanges columns j eg denotes left cyclic permutation exchanges columns j ie j j algorithm triua denotes upper triangular factor r qr factorization qr seen figure 3 use notation shorthand retriangularizations r column exchanges given value k socalled ffactor 1 algorithm guaranteed halt produce triangular factorization satisfies oe min r 11 oe r 22 f implementation incorporates following features 1 incremental condition estimation ice used arrive estimates smallest singular values vectors thus oe line 5 v line figure 3 computed inexpensively u line 2 use ice significantly reduces implementation cost 2 qr factorization update line 4 must performed iftest line thus delay possible 3 algorithm terminate columns need checked new permutations must occur pan tangs algorithm rechecking columns algorithm 1 2 u left singular vector corresponding oe min r1 k 1 k 3 accepted col 4 r triur delta pi r 5 compute 7 accepted col accepted col 8 else 9 v right singular vector corresponding oe 10 find index q 1 q 11 r triur delta pi l 12 u left singular vector corresponding oe min r1k 1 k 13 end 14 n 15 end fig 3 variant pantang rrqr algorithm permutation always starts column k 1 instead begin checking column right one caused permutation thus first concentrate columns worked 4 left cyclic shift permutes triangular matrix upper hessenberg form retriangularized givens rotations applying givens rotations rows r obvious fashion done example ichel gragg 1990 expensive terms data movement columnoriented nature fortran data layout thus apply givens rotations aggregated fashion updating matrix strips r1 jb j gamma1b1 jb width b previously computed givens rotations similarly right cyclic shift introduces spike column j eliminated givens rotations bottomup fashion aggregate givens rotations first compute rotations touching spike diagonal r apply one block column time experiments choose width b matrix strips blocksize nb preprocessing compared straightforward implementation pan tangs algorithm 3 improvements 1 3 average decreased runtime factor five 200 theta 200 matrices alliant fx80 retriangularizations frequent improvement 4 noticeable impact resulting twofold fourfold performance gain matrices order 500 1000 ibm rs6000370 pan tang introduced ffactor prevent cycling algorithm higher f tighter bounds 18 19 better approximations k k 1st singular values r however f large introduces column exchanges therefore iterations roundoff errors might present convergence problems used work algorithm 1 2 repeat 3 golubisffk 4 golubisffk1 5 chaniisffk1 6 7 none four subalgorithms modified column ordering fig 4 variant chandrasekaranipsen hybridiii algorithm algorithm golubisffk 1 find smallest index j k j n 2 krk j jk 3 4 r triur delta pi r 5 end fig 5 ffactor variant golubi algorithm 32 rrqr algorithm chandrasekaran ipsen chandrasekaran ipsen introduced algorithms achieve bounds 18 19 implemented variant socalled hybridiii algorithm pseudocode shown figures 4 6 compared original hybridiii algorithm implementation incorporates following features 1 employ chanii strategy 2 algorithm instead socalled stewartii strategy 3 algorithm need inversion ipsen chandrasekaran employed experiments 2 original hybridiii algorithm contained two subloops first one looping golubik chaniik till convergence second one looping golubik1 chaniik1 present different loop ordering variant one simpler seems enhance convergence matrices required considerable postprocessing new loop ordering required 7 less steps 1000 theta 1000 matrices one step call golubi chan ii chandrasekaran ipsens original algorithm addition new ordering speeds detection convergence shown algorithm 1 v right singular vector corresponding oe min r1k 1 k 2 find largest index 3 f delta jv 4 r triur delta pi l 5 end fig 6 ffactor variant chanii algorithm 3 implementation pantang algorithm use ice estimating singular values vectors efficient aggregated givens scheme retriangularizations employ generalization ffactor technique guarantee termination presence rounding errors pivoting method assigns every column weight namely krk golubik v chaniik v right singular vector corresponding smallest singular value ensure termination chandrasekaran ipsen suggested pivoting column weight exceeded current column least n 2 ffl ffl computer precision analyze impact change bounds obtained algorithm contrast use multiplicative tolerance factor f like pan tang analysis quintanaorti quintanaorti 1996 proves algorithm achieves bounds oe min r 11 oe k 20 oe r 22 bounds identical 18 19 except f 2 instead f enters equation 0 f 1 used implementation claimed new loop ordering avoid unnecessary steps algorithm terminate illustrate consider situation apply chandrasekaran ipsens original ordering matrix almost reveals rank 1 golubik final permutation occurs rank revealed 2 chaniik 3 golubik another iteration inner kloop since permutation occurred 4 chaniik 5 golubik1 inner loop 7 golubik another iteration main loop since permutation occurred last pass 8 9 golubik1 10 chaniik1 termination contrast hybridiiisf algorithm terminates four steps 1 golubisfk final permutation 2 golubisfk1 3 chaniisfk1 4 chaniisfk termination algorithm rrqrfk repeat call hybridiiisffk pt3mfk ff rank k stop else ff fi else ff fi fig 7 algorithm computing rankrevealing qr factorization 33 determining numerical rank stewart 1993 pointed chandrasekaranipsen pantang al gorithms well versions algorithms reveal rank matrix per se rather given integer k compute tight estimates obtain numerical rank respect given threshold given initial estimate rank provided example algorithm described section 2 employ algorithm shown figure 7 actual implementation ff fi computed hybridiiisf pt3m 4 experimental results report section experimental results doubleprecision implementations algorithms presented preceding section consider following codes dgeqpf implementation qr factorization column pivoting currently provided lapack dgeqpb implementation windowed qr factorization scheme described section 2 dgeqpx dgeqpb followed implementation variant chan drasekaranipsen algorithm described subsections 32 33 dgeqpy dgeqpb followed implementation variant pantang algorithm described subsections 31 33 dgeqrf block qr factorization without pivoting provided lapack implementation algorithms make heavy use available lapack infrastructure code used experiments including test timing drivers test matrix generators available rrqrtargz pubprism ftpsuperorg tested matrices size 100 150 250 500 1000 ibm rs6000 model 370 sgi r8000 case employed vendorsupplied blas essl sgimath libraries respectively 41 numerical reliability employed different matrix types test algorithms various singular value distributions numerical rank ranging 3 full rank details test matrix generation beyond scope paper give brief synopsis details reader referred code test designed exercise column pivoting matrix 6 designed test behavior condition estimation presence clusters smallest singular value cases employed lapack matrix generator xlatms generates random symmetric matrices multiplying diagonal matrix prescribed singular values random orthogonal matrices left right break1 distribution singular values 10 except one arithmetic geometric distributions decay 10 specified smallest singular value arithmetic geometric fashion respectively reversed distributions order diagonal entries reversed test cases 7 though 12 used xlatms generate matrix smallest singular value 50e4 interspersed random linear combinations fullrank columns pad matrix order n test cases 13 18 used xlatms generate matrices order n smallest singular value 20e7 believe set representative matrices encountered practice report section results matrices size noting identical qualitative behavior observed smaller matrix sizes decided report largest matrix sizes possibility failure general increases number numerical steps involved numerical results obtained three platforms agreed machine precision case list table 1 numerical rank r respect condition threshold 10e5 largest singular value oe max rth singular value oe r r 1st singular value oe r1 smallest singular value oe min test cases figures 8 9 display ratio theta oe 1 oe r br defined 14 computed estimate condition number r dgeqpb figure 8 dgeqpx dgeqpy figure 9 thus theta ratio ideal condition number estimate condition number leading triangular factor identified rrqr factorization ratio close 1 b good condition estimate rrqr factorizations good job capturing large singular values since pivoting strategy hence numerical behavior dgeqpb potentially affected block size chosen figures 8 9 contain seven panels shows results obtained test matrices block size ranging 1 24 shown top panel see except matrix type 1 figure 8 block size play much rule numerically although close inspection reveals subtle variations figure 8 9 block size 1 dgeqpb becomes standard busingergolub pivoting strategy thus first panel figure 8 corroborates experimentally robust behavior algorithm also see except table 1 test matrix types description r oe max oe r oe r1 oe min matrix rank minmn full rank 3 full rank 1000 10e0 50e4 50e4 50e4 small norm n full rank small norm smallest sing values clustered 1000 10e0 70e4 70e43 70e4 7 break1 distribution 501 10e0 50e4 17e15 10e26 reversed break1 distribution 501 10e0 50e4 17e15 12e27 9 geometric distribution 501 10e0 50e4 33e16 19e35 reversed geometric distribution 501 10e0 50e4 32e16 54e35 11 arithmetic distribution 501 10e0 50e4 97e16 14e34 reversed arithmetic distribution 501 10e0 50e4 97e16 12e34 13 break1 distribution 999 10e0 10e0 20e7 20e7 14 reversed break1 distribution 999 10e0 10e0 20e7 20e7 geometric distribution 746 10e0 50e5 99e6 20e7 reversed geometric distribution 746 10e0 50e5 99e6 20e7 17 arithmetic distribution 999 10e0 10e1 20e7 20e7 reversed arithmetic distribution 999 10e0 10e1 20e7 20e7 tests optimal condno estimated condno fig 8 ratio optimal estimated condition number optimal condno estimated condno qpy fig 9 ratio optimal estimated condition number dgeqpx solid line dgeqpy dashed type 1 restricted pivoting strategy employed dgeqpb much impact numerical behavior matrix type 1 however performs much worse matrix 1 constructed generating ngamma 1 independent columns generating leading n1 random linear combinations columns scaled ffl 1 4 ffl machine precision thus restricted pivoting strategy myopic view matrix gets stuck speak columns postprocessing approximate rrqr factorizations hand remedies potential shortcomings preprocessing step seen figure 9 inaccurate factorization matrix 1 corrected essence correct factorizations get improved slightly except small vari ations dgeqpx dgeqpy deliver identical results also computed exact condition number leading triangular submatrices identified triangularizations dgeqpb dgeqpx dgeqpy compared condition estimate figure 10 shows ratio exact condition number estimated condition number leading triangular factor observe excellent agreement within order magnitude cases hence spikes test matrices 13 14 figures 8 9 due errors estimators rather show algorithms difficulties confronted dense clusters singular values also note context notion rank numerically illdefined since sensible place draw line rank derived via svd 746 cases algorithms deliver estimates 680 710 minimal changes condition number corresponding leading triangular factors summary results show dgeqpx dgeqpy reliable algorithms revealing numerical rank produce rrqr factorizations whose exact estimated qpx qpy fig 10 ratio exact estimated condition number leading triangular factor dgeqpb dashed dgeqpx dasheddotted dgeqpy dotted leading triangular factors accurately capture desired part spectrum thus reliable numerically sensible rank estimates thus rrqr factorization takes advantage efficiency simplicity qr factorization yet produces information almost reliable computed means expensive singular value decomposition 42 computing performance section report performance lapack codes dgeqpf dgeqrf well new dgeqpb dgeqpx dgeqpy codes codes well others presented section mflop rate obtained dividing number operations required unblocked version dgeqrf runtime normalized mflop rate readily allows timing comparisons report matrix sizes 100 250 500 1000 using block sizes nb 1 5 figures show mflop performance averaged versus block size ibm sgi platforms dotted line denotes performance dgeqpf solid one dgeqrf dashed one dgeqpb x symbols indicate dgeqpx dgeqpy respectively three machines performance two new algorithms computing rrqr robust respect variations block size two new block algorithms computing rrqr factorization except small matrices sgi faster lapacks dgeqpf matrix sizes note sgi data cache 4 mb ibm platform data cache thus matrices order 500 fit sgi cache matrices order 1000 therefore matrices size 500 less observe limited benefits block size performance performance block size performance performance fig 11 performance versus block size ibm rs6000370 dgeqpf delta delta delta dgeqrf block size performance block size performance performance block size performance fig 12 performance versus block size sgi r8000 dgeqpf delta delta delta dgeqrf dge performance fig 13 performance versus matrix type ibm rs6000370 better inherent data locality blas 3 implementation computer results also show dgeqpx dgeqpy exhibit comparable performance figures 13 14 offer closer look performance various test matrices chose nb 16 representative example similar behavior observed cases see ibm platforms figure 13 performance dgeqrf dgeqpf depend matrix type also see except matrix types 1 5 15 16 postprocessing initial approximate rrqr factorization takes little time dgeqpx dgeqpy performing similarly matrix type 1 considerable work required improve initial qr factorization matrix types 5 15 performance dgeqpx dgeqpy differ noticeably ibm platform clear winner also note matrix type 5 suitable dgeqpb since independent columns front thus revealed quickly rest matrix factored dgeqrf sgi platform figure 14 offers different picture performance algorithms shows dependence matrix type dgeqpb performs worse matrix type 5 others nonetheless except matrix 1 dgeqpx dgeqpy require much postprocessing effort pictures matrix sizes similar cost dgeqpx dgeqpy decreases matrix size increases except matrix type 1 increases expected also note figures 11 though 12 would looked even favorable algorithm omitted matrix 1 chosen median instead average performance figure 15 shows percentage actual amount flops spent monitoring e performance fig 14 performance versus matrix type sgi r8000 rank dgeqpb postprocessing initial qr factorization different matrix sizes ibm rs6000 show matrix types 2 18 since behavior matrix type 1 rather different special case roughly 50 overall flops expended postprocessing note actual performance penalty due operations small still considerably higher flop count suggests surprising given relatively finegrained nature condition estimation postprocessing operations lastly one may wonder whether use dgeqrf compute initial qr factorization would lead better results since dgeqrf fastest qr factorization algorithm case since dgeqrf provide rank preordering thus performance gains dgeqrf annihilated postprocessing steps example matrices order 250 ibm rs6000370 average mflop rate excluding matrix 5 45 standard deviation 14 percentage flops spent postprocessing cases average 768 standard deviation 67 matrix 5 lucky since matrix low rank independent columns front matrix thus spend 3 postprocessing obtaining performance 491 mflops overall cases though considerable effort expended postprocessing phase leading overall disappointing performance results show preordering done dgeqpb essential efficiency overall algorithm 5 conclusions paper presented rankrevealing qr factorization rrqr algorithms combine initial qr factorization employing restricted pivoting scheme flops pivoting flops pivoting fig 15 cost pivoting flops versus matrix types algorithms dgeqpx dgeqpy ibm rs6000370 matrix sizes 100 250 x 500 1000 postprocessing steps based variants algorithms suggested chandrasekaran ipsen pan tang restrictedpivoting strategy results initial qr factorization almost entirely based blas3 kernels yet still achieves good approximation rrqr factorization time guarantee reliability initial rrqr factorization improve need improved algorithm suggested pan tang relying heavily incremental condition estimation blocked givens rotation updates computational efficiency alternative implemented version algorithm chandrasekaran ipsen among improvements uses ffactor technique suggested pan tang avoid cycling presence roundoff errors numerical experiments eighteen different matrix types matrices ranging size 100 1000 ibm rs6000 sgi r8000 platforms show approach produces reliable rank estimates outperforming less reliable qr factorization column pivoting currently common approach computing rrqr factorization dense matrix acknowledgments thank xiaobai sun peter tang enrique quintanaorti stimulating discussions subject r incremental condition estimation parallel qr factorization algorithm controlled local pivoting siam journal scientific statistical computing block algorithm computing rankrevealing qr factorizations updating signal subspaces robust incremental condition estimation preprint mcsp2250391 linear least squares solution householder transformation rank revealing qr factorizations applications rank revealing qr factor ization rankrevealing qr factorizations application systolic arrays linear discrete illposed problems rank null space calculations using matrix decomposition without column interchanges rank degeneracy least squares problems matrix computations matrix computations 2nd comparison direct iterative methods certain large scale geodetic leastsquares problem stable variant secant method solving nonlinear equations iterative method computing multivariate c 1 piecewise polynomial interpolants rank deficient interpolation optimal design example technical report scatr113 stable efficient algorithm rankone modification symmmetric eigenproblem truncated svd solutions discrete illposed problems ill determined numerical rank efficient algorithms computing condition number tridiagonal matrix rank revealing qr decomposition svd mathematics computation comparisons truncated qr svd methods ar spectral estimations levenbergmarquardt algorithm implementationand theory bounds singular values revealed qr factor izaton guaranteeing termination chandrasekaran fortran subroutines updating qr factorization acm transactions mathematical software storage efficient wy representation products householder transformations rank degeneracy updating algorithm subspace tracking determining rank presence error using fast signal processor solve inverse kinematic problem special emphasis singularity problem tr efficient algorithms computing condition number tridagonal matrix comparison direct iterative methods certian large scale godetic least squares problems aplicaiton systolic arrays linear discrete ill posed problems storageefficient wy representation products householder transformations block qr factorization algorithm using restricted pivoting truncated singular value decomposition solutions discrete illposed problems illdetermined numerical rank incremental condition estimation algorithm 686 fortran subroutines updating qr decomposition updating algorithm subspace tracking parallel qr factorization algorithm controlled local pivoting structurepreserving rankrevealing qrfactorizations lapacks users guide applications rank revealing qr factorization determining rank presence error modified truncated svd method regularization general form rankrevealing factorisations matrix computations 3rd ed blas3 version qr factorization column pivoting rank degeneracy least squares problems working note 33 robust incremental condition estimation ctr c h bischof g quintanaort algorithm 782 codes rankrevealing qr factorizations dense matrices acm transactions mathematical software toms v24 n2 p254257 june 1998 enrique quintanaort gregorio quintanaort maribel castillo vicente hernndez efficient algorithms block hessenberg form journal supercomputing v20 n1 p5566 august 2001 peter benner maribel castillo enrique quintanaort vicente hernndez parallel partial stabilizing algorithms large linear control systems journal supercomputing v15 n2 p193206 feb12000