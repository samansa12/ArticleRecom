analysis reduction angle calculation using cordic algorithm abstractin paper consider errors appearing angle computations cordic algorithm circular hyperbolic coordinate systems using fixedpoint arithmetic include errors arising finite number iterations finite width data path also finite number bits input show last contribution significant operands small error acceptable input normalization stage included making unsatisfactory previous proposals reduce error propose method based prescaling input operands modified cordic recurrence show suitable alternative input normalization smaller hardware cost solution also used pipelined architectures redundant carrysave arithmetic b introduction cordic coordinate rotation digital computer algorithm iterative technique permits computing several transcendental functions using additions shifts operations 15 16 among functions included trigonometric functions like sine cosine tan gent arctangent module vector hyperbolic functions like sinh cosh tanh arctanh several arithmetic functions due simplicity hardware implementation several signal processing algorithms digital filters orthogonal transforms matrix factorization formulated cordic arithmetic therefore several cordicbased vlsi architectures proposed solve related signal processing problems 7 applications requiring high speed pipelining andor redundant arithmetic introduced implementation cordic algorithm way iteration algorithm evaluated different stage pipeline hand carry ripple adders replaced redundant adders carry save cs signed digit sd carry propagation within adders eliminated 4 11 13 14 control algorithm requires exact determination sign variable modified cordic algorithm facilitates determination sign redundant arithmetic proposed 5 analysis cordic algorithm fundamental efficient design cordic based architectures achieve good performance important know behaviour error take account effect hardware implementation obtain specified accuracy different sources error cordic algorithm analyzed detail 8 9 10 paper focus errors appearing computation inverse tangent function angle calculation fixedpoint arithmetic operation computed cordic algorithm vectoring mode require final scaling inherent cordic algorithm since scale factor introduced mode operation angle calculation useful algorithms matrix factorization like eigenvalue singular value decomposition svd 6 implementation digital filters 1 12 matrix factorization requires angle computation circular coordinate system digital filters may need angle computation circular hyperbolic coordinates rounding error accumulated control coordinate iterations cordic algorithm may result large error evaluation inverse tangent error important applications cordic based svd algorithm inverse tangent function evaluated using fixedpoint format unnormalized data 10 kind filters hyperbolic inverse tangent need computed 1 12 10 technique called partial normalization proposed bound error however technique hard implement redundant arithmetic take consideration initial error due rounding input operands perform analysis error considering following three components ffl error due rounding input data ffl error due finite number iterations ffl error due finite datapath width show first components considered previous analyses significant input operands small consequence solution proposed 10 might appropriate small input operands seems suitable solution perform normalization input operands includes additional bits present solution performs prescaling operands modifies cordic recurrence 5 show solution simpler normalization produces smaller total error cordic algorithm consists rotation vector circular hyperbolic coordinate system rotation performed decomposing angle sequence preselected elementary angles specifically basic cordic iteration microrotation 15 16 integer taking values 1 gamma1 circular hyperbolic coordinates respectively variables x z microrotation tan microrotation angle shifting sequence sm circular coordinate system s1 hyperbolic coordinate system sequence may chosen starting microrotations repeated cordic iterations coordinates x rewritten matrix notation input vector iteration vi output vector depending parameter cordic algorithm may evaluate trigonometric functions selecting coordinate reduced zero permits evaluating angle vector accumulated z n1 way z coordinates z coordinates following derive numerical bounds overall error computation inverse tangent function circular coordinate systems cases coordinate reduced zero chosing according equation 4 angle computed stored variable z follow notation introduced 8 10 accuracy cordic algorithm influence processor design first analyzed walther 16 concluded obtain precision n bits data paths bits needed later precise bounds modes cordic algorithm obtained 8 9 10 hu 8 performs thorough analysis several errors modes cordic algorithm derives numerical error bounds type error however results inverse tangent inverse hyperbolic tangent computations included 10 shown numerical errors inverse tangent computation using fixed point arithmetic small operands large overall error split two components approximation error rounding error approximation error due angle quantization decomposition angle finite number microrotation angles produces error representation angle hand rounding error caused finite word length data path denote ideal cordic mathematically defined cordic algorithm infinite precision data path infinite number microrotations real cordic practical implementation cordic algorithm finite precision data path finite number microrotations possible define intermediate cordic uses infinite precision arithmetic number microrotations real cordic figure 1 shows relationship among three definitions way approximation error difference output ideal cordic output intermediate cordic rounding error difference output intermediate cordic real cordic usually error due rounding input operands neglected considered rounding errors input data often real situation input data obtained another hardware module rounding variables larger precision cases initial rounding error input data considered deriving bounds source error become important applications involving small inputs consider fixedpoint arithmetic n fractional bits input operands b fractional bits representation x z data paths inside cordic obtain nbit results wordlengths used illustrated figure 2 way initial rounding error input operands rounding error introduced microrotation circular coordinates value coordinate obtained intermediate cordic microrotations ff angle calculated intermediate cordic hand angle computed ideal cordic given approximation error 10 jv0j module input vector hand jy n1 value n1 finite precision f c n1 rounding error coordinate microrotations convergence jy considering rounding error z datapath n conclude angle error bounded find bound f c n1 following derivation 8 rounding error bounded p 1 given equation 3 k delta k l 2 norm defined square root largest eigenvalue matrix 8 rounding error composed two parts rounding error produced initial rounding error input operands first term rounding error accumulated n 1 microrotations considering initial rounding error input data second third terms therefore gamman due initial rounding error first term equation 11 15 due accumulated rounding error second third terms equation 11 replacing equation 12 equation 10 bound overall error computation inverse tangent function obtained gamman 15 equation 13 shows error computation inverse tangent constant bound depends norm input vector jv0j error becomes larger smaller norm input vector way x 0 0 close zero large error results consequently error bounded input operands bounded similar equation may obtained overall error hyperbolic vectoring number cordic iterations hyperbolic coordinates 16 max maximum input angle case error becomes large hyperbolic norm input vector 0 small means input normalization error bounded since lower bound jv0j enforced however implementation normalization requires extra hardware determine amount components vector shifted two leadingzero encoders comparator barrel shifters perform shifts single cycle therefore normalization hardware consuming 10 alternative solution proposed circular vectoring partial normal ization involves modification cordic unit include normalization step integrated cordic iterations solution bounds error main drawbacks solution initial rounding error considered difficult implement efficiently redundant arithmetic figure 3 illustrates partial normalization input normalization distributed along cordic iterations normalization performed introducing zeros real bits least significant positions input data input data known precision larger precision used cordic iteration b bits b bits input considered normalization extra bits input ignored resulting large error considered analysis performed 10 figure 4 shows error produced partial normalization initial rounding error considered error conventional cordic algorithm error produced using cordic input normalization latter case error considering normalization introducing zeros normalization real bits considered figure plots error expressed precision obtained angle versus module input vector although error lower error produced standard cordic algorithm still significant small inputs higher error cordic algorithm input normalization partial normalization performed introducing zeros hand microrotations modifed include normalization resulting microrotations include comparisons choose maximum minimum two variables variable shifts perform normalization therefore solution adequate redundant arithmetic andor pipelined architectures next sections new approaches developed bound error angle calcu lation approaches suitable wordserial pipelined architectures redundant nonredundant arithmetic require little extra hardware cost 4 modified cordic algorithm introduction redundant arithmetic angle computation cordic algorithm motivated development modified cordic microrotations circular coordinate system 5 recurrences transformed making microrotations equation 1 transformed selection ffi performed according following equation figure 5 illustrates modified cordic algorithm w coordinate reduced zero left shift performed coordinate microrotation transformation facilitates implementation cordic algorithm redundant arithmetic redundant arithmetic csa sda exact determination sign coordinate time consuming redundant representation coordinate transformation possible use estimate redundant representation w determination ffi instead fully assimilated value make possible necessary use redundant representation angle allowing ffi take values set gamma1 01 corresponding selection functions using carrysave signeddigit representations found 5 moreover hardware reduced since one shifters eliminated work propose change cordic equations aim reducing errors computation inverse tangent function following obtain error bounds angle computation modified cordic algorithm based variable w circular hyperbolic coordinates take account initial rounding error input operands 41 angle error analysis circular coordinate system modified cordic iterations circular coordinate system given equation 16 rewritten input vector vi output vector pw1 transformation matrix following similar derivation standard cordic algorithm possible find bound overall error way value coordinate w microrotations ff angle calculated intermediate cordic equation 20 rewritten angle vector v0 therefore approximation error considering rounding error z datapath angle error modified algorithm circular coordinates bounded wn1 rounding error coordinate w find bound f c wn1 use equation 11 considering transformation matrix given equation 19 moreover rounding error introduced microrotation modified cordic algorithm bounded rounding error introduced coordinate w multiplied factor 2 microrotation right shifts evaluate l 2 norm matrix product k ij pw1 k following relation 2 taken account n k rounding error modified cordic algorithm bounded first term contribution initial rounding error second one accumulated error microrotations replacing result equation 24 error computation angle modified algorithm obtained seen comparing equations 13 30 reduction error computation angle tan using modified cordic iterations due mainly elimination rounding error w coordinate results lower accumulated rounding error n iterations figure 6a shows errors observed several initial values standard modified cordic algorithms several different values b cases error becomes important jv0j decreases although error standard cordic always slighty larger error modified cordic however although diference errors standard modified algorithms small modified cordic algorithm results simpler hardware imple mentation since one shifter eliminated suitable implementations redundant arithmetic 42 angle error analysis hyperbolic coordinate system analysis developed previous section extended evaluation error angle computation hyperbolic coordinates function calculating tanh iteration i0 evaluated similarly circular coordinates define modified cordic algorithm means transformation given equation 15 modified microrotation similarly circular coordinate case find quantization error given therefore obtain bound error angle calculation find bound accumulated rounding error f h wn1 use equation 25 considering transformation matrix pwgamma1 similarly case circular coordinate system evaluate k account equation 26 matrix anj defined equation 27 matrix qij defined values q 0 q 1 depend type microrotation performed follows repetition repetition j therefore l 2 norm matrix repetition way rounding error hyperbolic coordinates obtained considering rounding error z data path overall error hyperbolic angle computation modified cordic algorithm errors standard modified cordic algorithms operating hyperbolic vectoring shown figure 6b circular vectoring mode operation error reduced means utilization modified cordic algorithm rounding error w coordinate eliminated hand observation figure 6 find error hyperbolic vectoring larger circular vectoring hyperbolic coordinate scale factor k h less unity reduces operands hyperbolic module vector decreases mapping vector xaxis therefore rounding error important hyperbolic coordinates circular coordinates according equation 38 hyperbolic vectoring error would large even normalized inputs x 1 1 similar however range convergence algorithm imposes limit value x considering basic sequence microrotations cordic algorithm hyperbolic coordinates 16 results therefore error significant inputs operands small although modified cordic algorithm reduces overall error angle computa tion circular hyperbolic coordinate system error still unbounded becomes important module input vector small smaller module input vector larger error therefore necessary develop solutions efficiently reduce error low hardware timing cost error angle calculation modified cordic algorithm still unbounded large module input vector small natural solution problem normalization input operands however requires two leadingzeros coders comparator two barrel shifters hardware consuming propose solution minimization angle calculation error modified algorithm circular hyperbolic coordinates nonredundant redundant arithmetic develop solution based operand prescaling error bounded close precision algorithm hardware implementation simpler implementation partial normalization technique standard input normalization moreover unlike solution developed 10 solution may applied cordic algorithm redundant arithmetic angle calculation error important module input vector small therefore input vector module forced take large values angle error reduced output cordic algorithm within precision required operand prescaling technique multiplies module input vector constant factor way resulting module large enough minimize angle calculation error prescaling carried starting cordic iterations thus preprocessing stage following consider perform operand prescaling b bits input operands known b internal wordlength cordic p least significant bits used prescaling shift right input vectors shown figure 7 shown solution presented 10 possible perform normalization considering additional bits input taking account considerations prescaling follows x w input variables inputs cordic processor prescaling module input vector multiplied scaling factor way error computation inverse tangent function reduced important factor reducing rounding error also imposing lower bound v delta 2 gamman prescaling carried input vector module small fore defined 1 jx j 2 gammas jw j 2 gammas prescaling performed module input vector lower 2 gammas case multiply input vector times 2 obtain large module value chosen way error minimized error angle computation input vector module jv j 2 gammas must already bounded close precision algorithm way maximum overall error angle computation circular coordinates prescaling obtained replacing jv0j equation considering later case minimum input vector module jv results sin sin k1 delta2 gamma16gammas figure 8 shows error several different prescalings corresponding prescaling 9 precision algorithm internal precision modified cordic arquitecture moreover input operands rounded bits prescaling prescaling carried considering least b bits input known module input vector less 2 gammas since module modified error without prescaling module larger 2 gammas prescaling carried error significantly reduced since module enlarged prescaling similar results obtained hyperbolic coordinate system however error angle although reduced still large vectors module jv j 2 gamma2s example prescaling performed error large input vectors small module less approximately 2 gamma10 hand scaling factor large input vectors module less 2 gammas present important error example prescaling error large module 2 gamma6 2 gamma9 since prescaling carried expression 43 illustration figure 8 seen single value produces acceptable error whole range jv0j achieved double prescaling two different scaling factors used 1 jx j 2 gammas1 jw j 2 gammas1 s1 s2 figure 9 shows error circular hyperbolic coordinates respectively considering double prescaling 9 way maximum error reduced approximately 2 gamma15 close precision algorithm every input vector module moreover common prescaling hyperbolic circular coordinates used facilitates vlsi implementation modified cordic architecture figure compares error angle calculation using partial normalization technique described 10 prescaling technique double prescaling modified equations error prescaling technique always lower error partial normalization said partial normalization use bits corresponding precision less 2 gammab input perform normalization prescaling extended precision although high precision n 32 necessary consider least three values scaling factor 51 prescaling technique nonredundant arithmetic cordic algorithm implemented using nonredundant arithmetic hardware implementation prescaling technique consists comparison module vector scaling factors corresponding shifting input operands comparison module scaling factor performed according equation 44 two input coordinates compared 2 gammas1 2 gammas2 corresponding scaling factor obtained example implementation double prescaling technique shown figure 11 seen necessary include small number control gates two rows multiplexers charge selecting scaled unscaled operand first row multiplexers performs shift 2 5 according result checking bits 0 5 x w way shift carried bits equal 1 0 negative positive numbers less 2 gamma5 second pair multiplexers additional shift 2 4 performed bits 6 9 also 1 0 performing case total shift 2 9 52 prescaling technique redundant arithmetic implementation cordic algorithm redundant arithmetic requires assimilation certain number bits w variable obtain estimation sign used determination direction microrotation 5 11 13 applied normalized data position significant bit known way data normalized necessary perform previous normalization 3 cordic architecture avoids assimilation checking certain number bits proposed architecture based moresignificantbitfirst calculation absolute value coordinate detection magnitude changes calculation calculation direction microrotation requires propagation carry mostsignificant leastsignificant bit coordinate reason additional registers needed skew data important characteristic architecture input data need normalized angle calculation error described previous sections although architecture uses coordinate control variable modified use variable w instead coordinate resulting highspeed implementation modified cordic algorithm hand prescaling performed scheme shown figure 11 way prescaling technique may incorporated preprocessing stage architecture obtain pipelined redundant arithmetic cordic permits computation inverse tangent function circular hyperbolic coordinates without errors unnormalized data without need performing initial normalization 53 evaluation prescaling technique hardware complexity double prescaling lower complexity standard normalization stage actually prescaling technique considered incomplete normalization two different shifts possible hand hardware complexity also lower partial normalization 10 partial normalization implies introduction additional hardware cordic architecture xy registers b bits long necessary introduce two normalization shift registers maximum shift m2 12 addition two leadingzero encoders operate m2 12 significant digits coordinates x required increase clock cycle produced inclusion two normalization barrel shifters critical path wordserial implementation solution presented prescaling technique introduce additional hardware cordic processors since prescaling preprocessing stage moreover utilization variable w instead coordinate permits reducing global hardware cost cordic architecture one shifters eliminated finally prescaling technique used pipelined processors redundant arithmetic whereas partial normalization technique restricted wordserial architecture conventional nonredundant arithmetic pipelined architecture cordic algorithm partial normalization technique would need two barrel shifters stage pipeline addition hardware implementation cordic microrotations implementation partial normalization redundant arihtmetic inefficient since several comparisons involved 6 conclusions thorough analysis errors appearing calculation inverse tangent hyperbolic inverse tangent functions cordic algorithm shows large numerical errors result inputs unnormnalized module input vector small shown means error analysis utilization modified cordic algorithm based w iteration siginificantly reduces numerical errors angle computation circular hyperbolic coordinates analysis rounding error input operands taken account error source neglected previous analyse literature shown error becomes important applications involving unnormalized inputs hand propose solution problem operand prescaling results low cost vlsi implementation operand prescaling technique consists preprocessing stage cordic microrotations input vector scaled constant factor module small enough result large error angle computation solution used pipelined wordserial cordic processors redundant nonredundant arithmetic moreover prescaling chosen way scale factor used circular hyperbolic coordinate systems r vlsi speech analysis chip set based squareroot normalized ladder forms unnormalized fixedpoint cordic arithmetic svd processors high speed bitlevel pipelined architectures redundant cordic implementations cordic algorithm new results fast vlsi implementation redundant online cordic application matrix triangularization svd redundant online cordic unitary transforma tions cordicbased vlsi architectures digital signal processing quantization effects cordic algorithm neglected error source cordic algorithm numerical accuracy hardware tradeoffs cordic arithmetic specialpurpose processors constantfactor redundant cordic angle calculation rotation 2fold normalized squareroot schur rls adaptive filter redundant cordic methods constant scale factor sine cosine computation low latency time cordic algorithms cordic trigonometric computing technique unified algorithm elementary functions tr ctr toms lang elisardo antelo cordic vectoring arbitrary target value ieee transactions computers v47 n7 p736749 july 1998