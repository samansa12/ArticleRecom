selection views materialize data warehouse data warehouse stores materialized views data one sources purpose efficiently implementing decisionsupport olap queries one important decisions designing data warehouse selection materialized views maintained warehouse goal select appropriate set views minimizes total query response time cost maintaining selected views given limited amount resource eg materialization time storage space etc article developed theoretical framework general problem selection views data warehouse present polynomialtime heuristics selection views optimize total query response time diskspace constraint important special cases general data warehouse scenario viz 1 view graph queryview unique evaluation eg multiplequery optimizer used general global evaluation plan queries 2 view graph view computed one related views eg data cubes present proofs showing algorithms guaranteed provide solution fairly close within constant factor ratio optimal solution extend heuristic general andor view graphs finally address detail viewselection problem maintenance cost constraint present provably competitive heuristics b introduction data warehouse repository integrated information available querying analysis ik93 wid95 figure 1 illustrates architecture typical warehouse 96 information stored warehouse form views referred materialized views derived data sources order keep materialized view consistent data sources view incrementally maintained zgmhw95 gm95 maintenance views incurs known view maintenance update costs paper concentrate problem selecting appropriate set materialized views one important design decisions designing data warehouse given storage space constraint problem select set derived views minimize total query response time cost maintaining selected views refer problem viewselection problem related work problem follows hru96 presents analyzes algorithms selection views special case data cubes wrapper wrapper wrapper metadata store manager view manager view source query processor integrator monitor monitor wrapper monitor wrapper data warehouse view specifier administrator fig 1 typical data warehouse architecture gupta et al ghru96 extend result selection views indexes data cubes works ignore update costs rss96 looks problem augmenting given set materialized views additional set views may reduce total maintenance cost rest paper organized follows next section develop theoretical framework viewselection problem following two sections present analyze heuristics special cases section 5 present algorithm general viewselection problem data warehouse finally conclude section 6 viewselection problem formulation 21 andor view graphs subsection develop notion andor view graph one inputs viewselection problem start defining notions expression dags queries views definition 21 expression adagan expression adag anddag query view v directed acyclic graph base relations sinks outgoing edges node v source incoming edges nodeview u outgoing edges nodes views required compute u dependence indicated drawing semicircle called arc edges arc operator 1 cost associated cost incurred computation u v 1 evaluation cost node u expression adag sum costs associated descendants arc 2 1 operator associated arc actually kary function involving operations like join union aggregation etc b c b c e f b fig 2 expression adag b expression aodag definition 22 expression aodag expression aodag view query v directed acyclic graph v source base relations sinks nonsink node associated one arcs binding subset outgoing edges previous definition arc operator cost associated one arc node depicts multiple ways computing node 2 definition 23 andor view graph graph g called andor view graph views queries subgraph g g expression aodag v node u andor view graph following parameters associated f u fre quency queries u u space occupied u g u frequency updates u example graph figure 2b andor view graph subset views f 2 note andor view graph view u computed views v view v computed v 1 also computed 22 constructing andor view graph given set queries supported warehouse construct andor view graph queries follows first construct expressionao dag query q set andor view graph g set queries constructed merging expression aodags node andor view graph g represent view could selected materialization views considered materialization query q construct expression aodag consist alternate useful ways evaluating q given base relations presence queriesviews roussopoulos rou82 considers exactly problem objective analysis identify possible useful ways produce result view given view definitions base relations 23 viewselection problem given andor view graph g quantity available space view selection problem select set views subset nodes g minimizes sum total query response time total maintenance cost constraint total space occupied less formally let qu denote cost answering query u also node g using set materialized views given view graph g evaluation cost cheapest embedded expression adag u g whose sinks belong set l l set sinks g without loss generality assumed sinks g always available computation represent base tables sources thus qu oe cost answering query u directly sources let u u maintenance cost view u presence set materialized views set sinks l given andor view graph g quantity wish select set viewsnodes constraint viewselection problem nphard even special case andor graph arc binds one edge update frequencies zero straightforward reduction minimum set cover 24 benefit set selected views let c arbitrary set views view graph g benefit c respect already selected set views denoted bc defined g function defined benefit c per unit space respect bc sc sc space occupied views c also bc oe called absolute benefit set c monotonicity property benefit function b said satisfy monotonicity property respect disjoint sets views monotonicity property benefit function important greedy heuristics deliver competitive within constant factor optimal solutions given instance andor view graph optimal solution partitioned disjoint subsets views om benefit function satisfies monotonicity property wrt guide greedy heuristic select stage optimal set views type includes greedy heuristic guaranteed deliver solution whose benefit least 63 optimal benefit show later 3 view graph section consider special case viewselection problem andor view graphs assume arc binds outgoing edges node case depicts simplied scenario view unique way computed call graph g view graph node computed children arc operator cost associated view graph set queries merging expression adags queries 31 motivation general viewselection problem approximated simplified problem selecting views view graph given set queries supported warehouse instead contructing andor view graph section 22 could run multiplequery optimizer sel88 cm82 generate global plan essentially view graph queries global plan takes advantage common subexpressions among queries 32 selection views view graph subsection present heuristics solving viewselection problem view graphs without update costs later extend special case view graphs update costs note viewselection problem view graphs known npcomplete problem given view graph g without updates quantity find set views minimizes quantity g constraint total space occupied views algorithm 31 greedy algorithm given g andor view graph space constraint begin set structures selected far let c view maximum benefit per unit space respect return end greedy algorithm present simple greedy heuristic selecting views stage select view maximum benefit per unit space stage see algorithm 31 running time greedy algorithm number nodes graph k number stages used algorithm observation 1 view graph without updates benefit function b satisfies monotonicity property respect arbitrary set theorem 31 view graph g without updates quantity greedy algorithm produces solution uses units space r size largest view g also absolute benefit least times optimal benefit achievable using much space used proof easy see space used greedy algorithm solution sm optimal solution using k units space absolute benefit b consider stage greedy algorithm already chosen set g l occupying l units space incremental benefits 1 absolute benefit g l thus surely absolute benefit set g l least b therefore benefit set respect g l bog l least using observation 1 easy show contradiction exists view bo k benefit per unit space respect g l set c selected algorithm least least b gamma distributing benefit c unit spaces equally purpose analysis get lj b gamma sc true set c selected stage set equations viz b ka multiplying j th equation adding equations get absolute benefit greedyinterchange algorithm present another heuristic called greedyinterchange algorithm starts solution produced greedy algorithm algorithm 31 improves solution interchanging view already selected view selected 2 iteratively performs interchanging solution cannot improved interchange see algorithm 32 unfortunately much proved competitiveness solution produced greedy interchange algorithm except obviously least good greedy algorithm moreover running time greedy interchange algorithm unbounded believe greedy interchange algorithm practice would perform much better greedy algorithm views occupy different amounts space one view may addedremoved algorithm 32 greedyinterchange algorithm given g andor view graph space constraint assume views occupy amount space begin run greedy algorithm let solution returned repeat pair views c absolute benefit greater return end 33 incorporating update costs unfortunately benefit function may satisfy monotonicity property update costs see informally consider view c 1 helps maintaining another view c 2 hence benefit might sum benefits individually however benefit function satisfy monotonicity property special case shown following lemma lemma 1 view graph benefit function b satisfies monotonicity property respect sets consisting single views update frequency g v view v less query frequency f v proof suffices prove bv oe bv view v set views let set necessarily proper ancestors v view graph g let let set ancestors v descendants set bv oe note qx oegamma view graph ancestor x v therefore get bv bv already selected v reduces query costs nodes therefore bv last term right hand side due reduction update costs nodes result inclusion v u x x2ma qv oe let md set descendants v let qmd x2md qx oe using u get qv oe theorem 32 consider view graph g view update frequency less query frequency graph g greedy algorithm produces solution whose absolute benefit least 1 gamma 1e times optimal benefit achievable using much space used 34 view graph indexes section generalize viewselection problem view graph introducing indexes nodeview presence indexes cost computation depends upon indexes used execute operation indexes built upon corresponding views index materialized corresponding view already materialized thus selecting index without view benefit hence benefit function may satisfy monotonicity property arbitrary sets structures 3 assume index materialized never computed answering user queries need introduce slightly different cost model view graphs indexes view graph indexes may multiple edges node u v possibly one index v instead associating costs arcs associate label edge u v cost thought cost incurred accessing relation many times required compute u v using th index addition kary monotonically increasing cost function associated every arc binds k edges consider node u k outgoing edges nodes let kary cost function associated arc binding outgoing edges f cost computing u children using th indexes respectively ft edge u v j label problem given quantity view graph g indexes associated edge label cost function associated arc described assume updates find set structures minimizes quantity g constraint total space occupied structures innerlevel greedy algorithm innerlevel greedy algorithm works stages stage selects subset c consists either view indexes selected greedy manner single index whose view already selected one previous stages 3 structure view index cost accessing v without indexes algorithm 33 innerlevel greedy algorithm given g view graph indexes space constraint begin structures selected far containing view indexes view v indexes selected greedy manner construct ig let ic index v whose benefit per unit space wrt index ij view v return end stage thought consisting two phases first phase view v construct set ig initially contains view one one indexes added ig order incremental benefits benefit per unit space ig respect set structures selected till stage reaches maximum ig maximum benefit per unit space respect chosen c second phase index whose benefit per unit space maximum respect selected benefit per unit space selected index compared c better one selected addition see algorithm 33 running time innerlevel greedy algorithm ok total number structures given view graph k maximum number structures fit units space worst case observation 2 view graph indexes without updates benefit function b satisfies monotonicity property respect arbitrary sets structures consists view indexes theorem 33 view graph indexes given quantity innerlevel greedy algorithm algorithm 33 produces solution uses 2s units space also absolute benefit least 1 gamma 1e 063 0467 optimal benefit achievable using much space used assuming structure occupies units space proof easy see sm 2s let j let optimal solution absolute benefit b consider stage innerlevel greedy algorithm already chosen set g l occupying l units space incremental benefits 1 2 3 l absolute benefit set og l least b therefore benefit set respect g l bog l least contains views split disjoint sets consists view indexes monotonicity property b wrt sets easy show contradiction exists least one k benefit per unit space set c selected innerlevel greedy algorithm stage least 063 times follows result theorem 41 performance guarantee simple greedy algorithm skipping tedious details 063 distributing benefit c unit spaces equally purposes analysis get lj k sc true set c selected stage set equations viz b k multiplying j th equation adding equations get ab absolute benefit graph section consider andor view graphs arc binds exactly one edge call andor view graph g view graph node computed one children 41 motivation specific model data warehouse data cube data cubes databases critical value eg sales organized several dimensions ex ample sales automobiles organized model color etc queries system usually ask breakdown sales dimen sions therefore associate aggregate view called cube v ff subset ff dimensions view v ff essentially result select ff group ff sql query base table aggregate view v ff computed view v fi iff ff fi data cube andor view graph view graph view zero ways construct views way involves one view hence results developed section view graphs apply data cubes olap databases updates assume update costs throughout section 42 view selection view graph subsection present algorithms solving viewselection problem view graphs without update costs generalizes problem considered harinarayan et al hru96 selection cubes data cube prove greedy algorithm algorithm 31 proposed performs performance guarantee even setting view graph variant problem known kmedian also studied different context facility location cfn77 problem given view graph g quantity find set views minimizes quantity g constraint total space occupied views assume updates observation 3 view graph without updates benefit function b satisfies monotonicity property respect arbitrary sets theorem 41 view graph g without updates given quantity greedy algorithm produces solution uses units space r size largest view g also absolute benefit least 1 gamma 1e times optimal benefit achievable using much space used recently feige fei96 showed minimum setcover problem cannot approximated within factor number elements using polynomial time algorithm unless natural reduction minimum setcover problem problem view selection view graphs reduction shows polynomial time algorithm viewselection problem view graphs guarantee solution better 63 inputs unless greedy interchange algorithm cornuejols et al cfn77 show similar facility location problem extensive experiments cases running time greedy interchange little less 15 times running time greedy algorithm returns much better solution returned greedy algorithm 43 view graph indexes case view graphs generalize viewselection problem view graphs introducing indexes nodeview view graph g indexes edge node u v label associated cost computing u v using th index 0 cost computing u v problem given quantity view graph g indexes find set structures minimizes quantity g constraint total space occupied structures views indexes assume updates observation 4 view graph indexes without updates benefit function b satisfies monotonicity property respect disjoint sets structures consists view indexes theorem 42 innerlevel greedy algorithm produces solution uses 2s units space also absolute benefit least 1gamma1e 063 0467 optimal benefit achievable using much space used assuming structure occupies units space 5 view selection andor view graphs section try generalize results developed previous sections viewselection problem general andor view graphs present aogreedy algorithm could take exponential time worst case performance guarantee 63 also present multilevel greedy algorithm generalization innerlevel greedy algrorithm algorithm 33 give different formulation viewselection problem andor graphs sake simplifying description algorithm definition 51 queryview graph queryview graph g bipartite graph q e q set queries supported warehouse subset powerset v set views edge q oe iff query q answered using views set oe cost associated edge cost incurred answering q using oe also frequency f q associated query q 2 q assume set ae 2 set base tables q ae 2 e q 2 q 5 note arbitrary andor view graph converted equivalent queryview problem view selection queryview graphs given quantity queryview graph select set views v minimizes total query response time 6 constraint total space occupied views 5 queryview graph looked upon graph query q 2 q computed set views oe q oe 2 e 6 though ignore update costs incorporated adding possibly additional nodes additional edges fi defined later 51 aogreedy algorithm queryview graphs define intersection graph f graph set vertices edges respectively edge ff fi 2 set views ff fi intersect aogreedy algorithm works stages follows stage algorithm picks connected subgraph h f whose corresponding set views vh union sets views corresponding vertices h offers maximum benefit per unit space stage set views vh added set views already selected previous stages algorithm halts space occupied selected views exceeds omit proof following theorem due space constraints observation 5 optimal solution viewselection problem query view graph g form theorem 51 queryview graph without updates quantity aogreedy algorithm produces solution uses 2s units space also absolute benefit least 1 gamma 1e times optimal benefit achievable using much space used queryview graph e corresponding view graph aogreedy algorithm behaves exactly greedy algorithm algorithm 31 taking polynomial time view graphs 52 multilevel greedy algorithm section generalize innerlevel greedy algorithm algorithm 33 multiple innerlevels greedy selection queryview graphs try modify aogreedy algorithm queryview graphs attempt improve running time expense performance guarantee consider queryview graph e intersection graph f view v v 2 oe node oe f 7 v exists run aogreedy algorithm g let 0 set obtained removing v element f 0 corresponding intersection graph select set views u whose benefit per unit space close optimal k connected components f 0 select set views u greedy manner initially set u contains v stage select set views j corresponding subgraph component f maximum benefit per unit space set views j added set u maintained continue adding views u till total benefit per unit space u cannot improved difficult show benefit per unit space u least 63 benefit per unit space vh set views whose benefit per unit space 7 technique developed easily generalized case fi l 1 connected components satisfying property v vertex oe g maximum among connected subgraphs f algorithm continues interatively picking new set u adding set already selected views space occupied exceeds algorithm could still take exponential time need consider possible subgraphs f could apply technique recursively graphs f selecting set views u whose benefit within 63 benefit optimal set views f applying technique recursively r times yields rlevel greedy algorithm omit proof following theorem theorem 52 queryview graph g given quantity rlevel greedy algorithm delivers solution uses 2s units space also benefit least 1 gamma 1e 063 r optimal benefit achievable using much space used assuming view occupies units space rlevel greedy algorithm takes okn 2r time excluding time taken final level k maximum number views fit units space given instance one could estimate value r r th level graphs f small constantsize graphs last level would take constant amount time view graph indexes equivalent queryview graph q e element oe 2 consists single view one indexes 8 hence first stage graphs obtained consist nodes representing single indexes queryview graph 1level inner greedy algorithm behaves exactly innerlevel greedy algorithm algorithm 33 view graphs indexes 6 conclusions future directions paper developed theoretical framework general problem selection views data warehouse presented competitive polynomialtime heuristics important special cases problem occur practice presented proofs showing algorithms guaranteed provide solution within constant factor optimal still lot questions remain unanswered need considerable attention noteworthy among 1 competitive polynomialtime heuristics special cases like andor trees binary andor view trees even without updates optimizing update costs heuristics optimize total query benefit constraint total maintenance time 2 prove negative results approximability view selection problem 8 assumption index never computed answer query believe techniques developed paper would offer significant insights greedy heuristic nature viewselection problem data warehouse hope viewselection problem would invoke substantial interest database theory community acknowledgements would like express thanks advisor prof jeff ullman constant encouragement insightful suggestions r location bank accounts optimize float analytic study exact approximate algorithm personal communication processing multiple queries database systems threshold ln n approximating set cover index selection olap maintenance materialized views prob lems implementing data cubes efficiently rdbvms developing data warehouse logical access path schema database materialized view maintenance integrity constraint checking trading space time multiple query optimization system prototype warehouse view maintenance research problems data warehousing view maintenance warehousing environment tr ctr michael lawrence multiobjective genetic algorithms materialized view selection olap data warehouses proceedings 8th annual conference genetic evolutionary computation july 0812 2006 seattle washington usa