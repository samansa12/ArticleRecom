adaptive mesh refinement using wavepropagation algorithms hyperbolic systems adaptive mesh refinement algorithm developed euler equations gas dynamics extended employ highresolution wavepropagation algorithms general framework allows use variety new problems including hyperbolic equations conservation form problems source terms capacity functions logically rectangular curvilinear grids framework requires modified approach maintaining consistency conservation grid interfaces described detail algorithm implemented amrclaw package freely available b introduction multidimensional wavepropagation algorithm described 14 highresolution method second order accurate smooth solutions maintaining sharp discontinuities use slopelimiters based ideas developed hyperbolic systems conservation laws context shock capturing methods apply general framework allows application hyperbolic systems conservation form variablecoefficient hyperbolic systems form arise example studying acoustics elasticity heterogeneous materials varying material properties see section 6 practical problems desirable use mesh refinement cluster grid points regions needed example around shocks regions solution courant institute new york university 251 mercer st new york ny 10012 bergercimsnyuedu 2 department applied mathematics department mathematics university washington box 352420 seattle january 1997 appear special issue siam j numer anal dedicated ami harten revised july 1997 steep gradients complicated structure done adaptive manner based behavior solution timedependent problems region refinement must move adaptively interesting structure effective adaptive mesh refinement amr strategy developed 16 uses cartesian grids refinement space time rectangular patches refinement arbitrary even integer ratio typically 4 recursive refinement done within patches arbitrary depth algorithm originally developed euler equations gas dynamics using fluxdifferencing methods easily extended systems conservation laws crucial ingredient manner fluxes gridrefinement interfaces coordinated insure method globally conservative described detail 5 reviewed section 21 paper show wavepropagation algorithm used conjunction amr strategy algorithm written general form use flux differencing per se though special case conservation law method reexpressed flux differencing form fully conservative section 4 show gridrefinement interfaces possible apply correction procedure maintains global conservation applied conservation law reduces fluxbased approach retaining general wavepropagation framework allows application general hyperbolic systems also discuss extensions presented 14 incorporated amr includes source terms capacityform differencing applications mapped curvilinear grids topics discussed sections 5 6 domain assumed rectangular least computational space metric terms included actually solving problem nonrectangular physical domain curvilinear grid obtained smooth mapping cartesian computational grid grid jacobian function properly incorporated using capacity function described section 52 wavepropagation algorithm implemented general software package called clawpack conservation laws package holdover earlier versions applied conservation laws package available netlib11 software recently combined bergers implementation amr incorporating extensions described paper freely available amrclaw package6 numerical results presented paper obtained amrclaw several examples included package details use package found online documentation 2 amr algorithm adaptive mesh refinement algorithm conservation laws fully described 5 brief summary given amr approach adaptive mesh refinement uses collection logically rectangular meshes make coarse grid refinements cover subset domain use smaller rectangular grid patches fine patches recursively nested given level accuracy attained typically patch level l refined x even integer rl time step also refined factor rl time steps must taken refined grid level l step grids level l mesh ratios deltatdeltax deltatdeltay grids ensuring stability explicit difference schemes every k time steps particular grid level finer level grids regenerated order follow moving features flow error estimation procedure based richardson extrapolation determines regions resolution solution insufficient procedure compares solution obtained taking 2 steps existing grid one computed taking 1 time step grid twice coarse direction cells error greater tolerance flagged refinement criteria might used addition instead error estimate eg identifying steep gradients variable buffer zone around flagged cells also flagged insure features interest escape refinement region next k time steps buffer width k adjustable parameters must coordinated flagged cells organized rectangular grid patches typically containing several hundred several thousand grid points per patch note cells tagged refinement also included new fine grid patches typically grid generation algorithm produces grids 70 cells within new grid patches tagged needing refinement remaining 30 untagged still lie within new patch boundaries taking small patches one could avoid refining many cells must balanced competing desire create relatively separate patches minimize computational overhead boundaries fine grids see 1 details refinement clustering algorithms see figure 6 example refinement logically rectangular patches alternative would use quadtree data structure eg 7 15 flagged cells refined storage overhead data structures typically 30 50 words per cell usually exceeds storage overhead associated block structured approach even 30 additionally refined grid finite volume method used advance solution resulting grid hierarchy cell averages variable stored grid cell solving conservation law cell averages updated fluxdifferencing algorithm based fluxes cell edges section 3 review wavepropagation methods extension nonconservative hyperbolic systems integration proceeds grid level grids level 1 first integrated time step grids level 2 integrated r 1 time steps catch approach applied recursively level boundary conditions grids imposed using ghost cells computational domain extended g ghost cells direction values assigned ghost cells start time step g2 methods described physical boundary user must set ghost cell values time step based problem specification eg extrapolation outflow boundary reflection solid wall however boundary fine grid may interior domain case neighboring fine grid supply values ghost cells interpolated coarser parent grid spacetime interpolation must general used since time steps taken fine grid coarse grid intermediate times coarse grid values available however since coarse grids always advanced first data available earlier later time coarse grid interpolate techniques developed paper adaptive refinement easily described one space dimension refined grid patches become intervals concentrate case development techniques carry directly multiple space dimensions implemented two dimensions amrclaw software twodimensional results presented section 6 21 conservation grid interfaces interface coarse fine grids must also insure formulas used update solution grid consistent one another particular conservation law solved must preserve global conservation illustrate conservative flux correction required grid interfaces manner must modifed wavepropagation algorithms consider onedimensional case two levels grid factor two refinement denote coarse grid spacing h time step k grid spacing fine grid figure 1a shows coarse grid single time step xt space figure 1b shows also finer grid overlaid denote values fine grid q assume cells grid ends cell j coarse grid coarse grid compute fluxes f 0 indicated figure 1a update coarse grid values fluxdifferencing algorithm note f represents flux left edge cell interface grid cells instead commonlyused cluttered notation f igamma12 fine grid use fluxes indicated figure 1c two time steps grid use fluxdifferencing form 2 compute fluxes near right edge grid need use values ghost cells also indicated figure 1c values determined using spacetime interpolation coarse grid values q 0 described psfrag replacements psfrag replacements c psfrag replacements figure 1 coarse grid onedimensional example shown spacetime values q fluxes f indicated b also shows fine grid overlaid grid interface values q fine grid indicated c flux values f needed fine grid ghost cells q m1 q m2 also indicated values needed compute fine grid fluxes grid interface need coordinate values obtained two different grids final time first coarse grid cells overlapped fine grid cells replace value q 1 average finegrid values sensible since finegrid values presumably accurate coarsegrid value also crucial maintaining global conservation regridding fine grid eliminated important maintaining stability since information must allowed pass fine coarse grid well direction fully conservative however also must modify coarsegrid value q 1 j initially computing q 1 j used coarsegrid flux f 0 j left edge cell conservative must instead use leftedge flux agrees flux used determining finegrid values left cell instead using f 0 use 1 j corrected difference two global conservation total mass multiples coarse grid time step sense total mass im conserved boundary effects farfield 3 wavepropagation algorithms one space dimension wavepropagation algorithm described 14 based solving riemann problem interface grid cells using resulting wave structure update solution grid cell side course basis host methods conservation laws dating back godunovs method8 riemann problem consists original conservation law together piecewise constant initial data defined two neighboring cell values wide class conservation laws riemann problem solved either exactly approximately solution similarity solution consisting set waves propagating constant speeds system conservation laws solution used define flux cell interface yielding godunovs method second order accuracy achieved various ways eg introducing slope information slopelimiters flux limiters used give good resolution discontinuities without spurious oscillations see eg 12 general discussion methods wavepropagation algorithms based using waves directly update cell values including second order corrections wave limiters conservation laws methods rewritten conservation form defining flux functions terms waves implemented way allows application hyperbolic problems conservation form still welldefined wave structure flux function illustrate consider advection equation variable velocity equation sometimes called color equation conservation form value q constant along characteristics integral q conserved assume ux 0 everywhere interface x igamma12 cells define riemann problem function ux initial data q given u cellcentered values ux cells solution riemann problem wave w simply propagates speed u right since u 0 time step k wave moves distance ku cell modifies cell average first order upwind method wavepropagation form thus generally ux arbitrary sign first order wavepropagation algorithm alternatively riemann problem might defined using edge value u igamma12 interface cells update formula 7 would become advantages twodimensional incompressible flow see 13 illustration use formulation 7 based cellcentered velocites 6 rather edge values highresolution secondorder corrections easily introduced fact done fluxdifferencing form even nonconservative equations color equation simplifies procedure insuring conservation applied conservation law cell interface x igamma12 define w limited version wave w limitera b represents standard limiter minmod superbee including corrections method 7 becomes note u constant advection equation 5 conservation law case reduces assuming u 0 example numerical flux standard fluxlimiter method advection equation see 19 example particular limiter used reduces laxwendroff method general form 9 fluxdifferencing form works effectively color equation standard fluxdifferencing constantcoefficient advection equation form 9 easily extended general hyperbolic systems consider variablecoefficient linear system q 2 lr ax 2 lr mthetam diagonalizable real eigenvalues riemann problem x igamma12 decompose q way leftgoing waves eigenvectors matrix igamma1 defined cell traveling speeds p eigenvalues igamma1 rightgoing waves eigenvectors traveling speeds p summation term gives firstorder upwind method secondorder corrections defined w i1 limited version wave w p obtained comparing w p w p details including worked example acoustics heterogeneous medium found 14 documentation 11 wavepropagation algorithm extended nonlinear systems conservation laws using roe approximate riemann solver16 linearizes problem cell interface way wavepropagation approach guaranteed conservative general wavepropagation algorithm written symbolically represents rightgoing fluctuation ith riemann problem left edge cell gamma deltaq i1 leftgoing fluctuation riemann problem right edge cell fluctuation sum waves moving appropriate direction wave speed multiplied wave strength notation motivated fact constantcoefficient linear system q eigendecomposition matrix right eigenvectors waves w p case given w vector wave strengths note linear case general conservation law method 11 conservative provided ie fluctuations defined fluxdifference splitting easy see since define using 11 shows method rewritten conservation form flux f 4 wavepropagation grid interfaces interface fine coarse grid wavepropagation form still used update values grid independently using ghost cell values needed near grid inter faces still replace new coarse grid value average fine grid values cell covered fine grid tricky part extending amr algorithm wavepropagation algorithms conservative correction coarse cells adjacent finer grids eg value figure 1b recall fluxdifferencing algorithm value must modified correction 4 insure conservation since flux coarse cell agrees total flux adjacent fine cells wavepropagation algorithm must apply similar fixup insure waves match appropriate manner yield conservation conservation expected turns slightly difficult numerical flux available fluxdifferencing form discussed section 2 note second order correction terms written fluxdifferencing form even nonconservative systems terms corrected using 4 firstorder upwind terms written terms fluctuations gamma deltaq deltaq must handled differently concentrate firstorder alogrithm difficulty solution easily seen examining constant coefficient advection onedimensional grid figure 1 case u 0 waves moving coarse grid fine grid suppose solving cauchy problem data compact support fine coarse grids extend gamma1 respectively hope conservation sense im im coarse grid sum coarse grid cells get telescoping qdifferences everywhere except first cell similarly 2 steps fine grid find im im summing two results see method globally conservative add correction global sum magnitude accomplished modifying value q 1 note exactly modification 4 obtained fluxdifferencing form used since advection equation instead relying flux function interpret correction another way using wave propagation figure 2a shows waves affect relevant cell values end time increment apply wavepropagation algorithm grid separately something wrong picture view initial data defining piecewise constant function need solve riemann problem discontinuity add total fluctuation riemann problem deltaq grid values order maintain conservation general gamma deltaq added cell left deltaq cell right figure 2a shows failed solve riemann problem states ghostcell value fine grid q 0 j initial time restore conservation must solve riemann problem states add resulting total fluctuation weighted since time step k cell size h cell value j terms maintaining conservation sort correction could equally well added cell values instead q 1 j choice clearly reasonable figure agrees modifications applied fluxdifferencing framework similarly second step fine grid must also solve riemann problem m1 q 0 j add fluctuations q 1 advection example considered two corrections sum exactly required correction 14 since rewritten correction easily extended arbitrary hyperbolic system since presumably riemann solver produces gamma deltaq deltaq two states m1 q 0 modify q 1 psfrag replacements psfrag replacements figure 2 waves arising solving riemann problems fine coarse grids sepa rately b wave arising solving riemann problem ghost cell value q 0 coarse grid value q 0 must also included order maintain conservation similar modification must made r time steps refined grid within single coarse grid step r refinement ratio fixup algorithm thus takes solve riemann problem data m1 q 0 j compute gamma deltaq deltaq update q 1 deltaq case conservation law restore conservation fact agrees flux function modification 4 numerical fluxes defined 13 note view 12 conservation law case coarse grid value q 1 j simply updated entire flux difference need actually solve riemann problem however implementing presented gives uniform general formulation idea extends directly two space dimensions also three dimensions multidimensional wavepropagation algorithm consists solving onedimensional riemann problems normal cell interface defines waves fluctuations exactly one dimension used onedimensional algorithm also used define transverse correc tions essentially solving riemann problem transverse direction using fluctuations data corrections needed give second order accuracy multidimensions well increase stability limit allow courant numbers close 1 corrections fully described 14 present purposes need note corrections modify correction fluxes f corresponding yfluxes g fluxdifferencing form automatically corrected grid interfaces step 4 corrections made due fluxes numerical experiments demonstrate full second order accuracy conservation laws nonconservative equations approach used along secondorder correction terms discussed section 3 5 extensions amrclaw software contains extensions wavepropagation algorithms discussed 14 implemented clawpack briefly described emphasis new issues arise connection mesh refinement 51 source terms consider hyperbolic equation source terms handled using standard fractional step method also called splitting method approach alternate solving homogeneous hyperbolic equation ignoring source term solving ode q context amr need apply sequence within time step grid must implement carefully order avoid generating excessive noise interface contaminate solution whenever solve riemann problem must ensure data side contains total contribution source terms order avoid generation spurious waves must carefully observed computing ghost cell values fine grid intermediate times also solving additional riemann problem need conservative fix described section 4 recall riemann problem ghost cell values intermediate time coarse grid value original time source terms included coarse grid value must modified incorporate correct source contributions interface details presented first discuss basic fractional step method use grid time step first solve homogeneous hyperbolic equation time deltat use resulting solution initial data sourceterm equation time deltat socalled firstorder splitting godunov splitting opposed strang splitting one advances first half time step one equation full time step equation ends half time step first equation again17 18 formally strang splitting give second order accuracy situations first order accuracy achieved choice practical problems methods nature useful differences resolution actually seen generally negligible applying strang splitting n time steps equivalent starting half time step one operator alternating deltat steps nth step finish half step first operator change made minor modification shifting one half time step beginning end computation formally odeltat hence reduce global accuracy first order clearly degrade overall resolution solution degree solution may simply shifted odeltat relative correct location example different sort errors introduced genuine first order method eg using first order upwind method place highresolution fluxlimiter method see 14 discussion point using simpler splitting number advantages context coupling source terms hyperbolic solver particularly amr one thing less expensive since source terms advanced per time step instead twice course one could combine half time steps together strang splitting alluded impractical variable time steps used particularly adaptive refinement specification boundary conditions also simplified usersupplied routine extends values computational grid ghost cells called beginning time step producing values ghost cells guarantee physical boundary conditions satisfied example normal momentum must negated solid wall boundary euler equations since hyperbolic equation advanced first conditions used immediately source terms advanced typically local ode solve grid cell require using ghost cell values need worry solving odes ghost cells since values replaced immediately start next time step applying hyperbolic solver first also simplifies modifications needed grid interfaces minimize noise generation algorithm fairly simple extension presented already let hk represent solution operator hyperbolic equation sk solution operator source terms fractional step method one time step single grid takes form consider refined grid refinement ratio r let q represent solution fine grid time step k let q coarse grid solution time step k algorithm coarse grid update initialize coarse grid value needed conservation fixup advance fine grids spacetime interpolate ghost cell values m2 using q 0 q 1 conservation fixup solve riemann problem data m1 q 0n j compute gamma deltaq deltaq apply source terms coarse grid value basically direct extension algorithm described previously except final step ensures riemann problem solved correction phase consistent data fine time step numerical tests shown approach performs quite well attempts styles splitting eg strang splitting godunov splitting order h reversed much less successful gain better appreciation mismatches interface generate noise reader encouraged explore various strategies simple scalar equation constant advection speed u data q initially constant space numerical ode method used solve q using trivial exact solution operator approach lead generation noise interface simply ode solved accurately fine grid coarse grid leading jumps q interface hence waves propagating speed u approach outlined generate ok 2 noise long ode solver least first order accurate whereas approach considered would generate ok noise 52 capacityform differencing wavepropagation algorithm 14 also described general form applies quasilinear equation form one dimension obvious generalization dimensions function x called capacity function since represents way capacity medium hold quantity q working form particularly useful equations conservation form xqx conserved quantity rather q alone flux defined terms q onedimensional example consider flow variablearea duct x crosssectional area q represents concentration per unit volume case h volume ith grid cell flow porous media another example represents porosity one dimensions form also arises using mapped curvilinear grids case jacobian grid transformation details presented 14 idea capacityform differencing replace update formula 11 case conservation law assuming 12 holds guarantees conservation h definition must also incorporate second order corrections replacing 10 h using capacityform differencing amr direct provided insure conservation maintained transferring information grids returning figure 1b suppose capacities defined coarse grid defined fine grid region two grids overlap assume values consistent example figure 1b capacity coarse grid cell agrees total capacity two fine cells h updating coarse grid value q 1 average fine grid values q 2 must weight capacity functions replace 3 finally gridinterface correction 15 replace h denominator j h 6 numerical results present amr computations examples 14 illustrate source terms nonconservative hyperbolic systems capacity form differencing curvilinear grids successfully handled examples found amrclaw webpage6 including animations example 61 repeat example 383 14 consists linear equations acoustics hyperbolic system 3 equations discontinuity sound speed across line oblique grid plane wave strikes interface angle leading transmitted reflected waves timeevolution best seen figure 4 acoustics equations pressure perturbation p velocities u v written coefficients density aex bulk modulus elasticity kx example ae discontinuity across interface k constant riemann solvers system wavepropagation form given 14 figure 4a shows contour plot initial pressure cosine hump 14 moving towards upper right dashed line shows location discontinuity sound speed heterogeneous material described density bulk modulus elasticity bulk replacements figure 3 pressure contours plane wave hitting discontinuity sound speed acoustics equations time 06 finer grids shaded darker shading indicating finer levels three levels used 76 theta 50 grid coarsest level refinement factor 2 level modulus taken constant density discontinuous leading discontinuity sound speed grid cell density defined cell average true density cell 14 shown wavepropagation algorithm handles problem well even discontinuity density aligned grid figure 3 shows amrclaw calculation coarsest grid 76 theta 50 two levels refinement used finest grid compares resolution seen lower plots figure 8 14 tolerance used chosen way weaker reflected wave refined level 2 smaller tolerance would cause level 3 refinement wave well used ratio 2 refinement level demonstration purposes example 62 previous example fully test new interface conditions fine coarse grids nonconservative case acoustics equations fail conservation form along interface density discontinuous wave stays embedded level 3 grids moves along interface severe test repeated computation simple change error estimation procedure points flagged refinement x 06 x 06 coarsest grid wave moves initial fine grids onto coarse grid time advances figure 4 shows sequence times ending time shown figure 3b smearing wave seen coarser grid inevitable difficulties observed along discontinuity density example 63 repeat example 3101 14 advection equation tracer qx densitystratified flow hump take ux vx fixed 12 140103050709pressure c 12 140103050709pressure 12 140103050709pressure figure 4 pressure contours plane wave hitting discontinuity sound speed acoustics equations four different times test refinement allowed x 06 wave moves refined region velocity field chosen aeq conserved quantity test problem consider flow hump bottom topography given domain 1 velocity field chosen using stream function define condition 21 satisfied dividing ae gives velocity field note u v divergence free stream function velocity though true contours constant give streamlines flow use density profile 14 velocities increase exponentially test use 25 figure 5 shows initial data exact solution time data consisting circular blob tracer problem solved curvilinear grid irregular region xy plane mapped smoothly rectangle equation 20 transformed advection equation rectangle solved uniform cartesian grid computational gamma j space use grid 2 14 mapping capacityform differencing used jacobian grid mapping explained 14 figure 6 shows computed results 3 levels refinement refinement ratio 2 case finest grid resolution calculation shown figure 10 figure 5 densitystratified flow hump left initial data 1 inside circular region elsewhere region solution 1 time computed results 200 theta 100 cartesian grid 14 conclusions adaptive mesh refinement algorithm developed euler equations gas dynamics extended employ highresolution wavepropagation algorithms general framework particular discussed modifications needed allow application method hyperbolic problems conservation form following approach 14 done way still maintains conservation applied conservation law spite fact wavepropagation approach used update cell averages rather standard fluxdifferencing generalization also presented fractional step methods hyperbolic equations source terms also discussed extensions capacityform differencing formulation useful applying methods curvilinear grids refinement done logically rectangular patches illustrated section 6 one example advection equations future intend explore use curvilinear grids fully nonlinear conservation laws euler equations since bodyfitted curvilinear grids crucial applications adaptive mesh refinement even crucial solving threedimensional problems two space dimensions recently clawpack extended three dimensions 9 10 work underway extend amrclaw version underlying amr code euler equations previously successfully extended three dimensions eg 1 20 ideas presented paper carry easily well title b 05 04 03 02 01 0 01050709psfrag replacements figure computed density time stratified flow hump contour levels 005 095 compare figure 10 14 b blowup grids near top hump acknowledgments indebted smadar karni pointing difficulty maintaining conservation grid interfaces wavepropagation framework led development ideas presented work supported part nsf grants dms9505021 dms96226645 doe grants defg0396er25292 defg0288er25053 defg0292er25139 afosr grant f49620940132 r three dimensional adaptive mesh refinement hyperbolic conservation laws adaptive mesh refinement hyperbolic partial differential equations automatic adaptive grid refinement euler equations adaptive mesh refinement hyperbolic partial differential equations local adaptive mesh refinement shock hydrodynamics test version available httpwww adaptivelyrefined cartesian mesh solver euler equa tions available netlib numerical methods conservation laws wave propagation algorithms multidimensional hyperbolic systems solution euler magnetohydrodynamic equations solutionadaptive cartesian grids construction comparison high resolution schemes using flux limiters hyperbolic conservation laws aspects computational dynamics colliding flows astrophysical nebulae tr ctr lars ferm per ltstedt spacetime adaptive solution first order pdes journal scientific computing v26 n1 p83110 january 2006 k w liang p lin r c e tan numerical solution quenching problems using meshdependent variable temporal steps applied numerical mathematics v57 n57 p791800 may 2007 zhijun tan zhengru zhang yunqing huang tao tang moving mesh methods locally varying time steps journal computational physics v200 n1 p347367 10 october 2004 ding c shu stencil adaptive algorithm finite difference solution incompressible viscous flows journal computational physics v214 n1 p397420 1 may 2006 james rossmanith wave propagation method hyperbolic systems sphere journal computational physics v213 r blikberg srevik load balancing openmp implementation nested parallelism parallel computing v31 n1012 p984998 october december 2005 ragnhild blikberg tor srevik nested parallelism allocation threads tasks openmp implementation scientific programming v9 n23 p185194 august 2001 yuan tao tang resolving shockinduced combustion adaptive mesh redistribution method journal computational physics v224 n2 p587600 june 2007 siegfried mller youssef stiriba fully adaptive multiscale schemes conservation laws employing locally varying time stepping journal scientific computing v30 n3 p493531 march 2007 nail k yamaleev mark h carpenter accuracy adaptive grid methods captured shocks journal computational physics v181 n1 p280316 september 1 2002 alexei poludnenko alexei khokhlov computation fluid flows noninertial contracting expanding rotating reference frames journal computational physics v220 n2 p678711 january 2007