inverse kinematics positioning using nonlinear programming highly articulated figures articulated figure often modeled set rigid segments connected joints configuration altered varying joint angles although straight forward compute figure configurations given joint angles forward kinematics difficult find joint angles desired configuration inverse kinematics since inverse kinematics problem special importance animator wishing set figure posture satisfying set positioning constraints researchers proposed several different approaches however try follow approaches interactive animation system object operate highly articulated realistic human figure fail either generality performance approach problem nonlinear programming techniques successfully used since 1988 spatial constraint system within jack human figure simulation system developed university pennsylvania proves satisfactorily efficient controllable robust spatial constraint system involves two parts one constraint figure endeffector one spatial environment goal two parts dealt separately achieve neat modular implementation constraints added one time appropriate weights designating importance constraint relative others always solved group physical limits prevent satisfaction constraints system stops possibly local optimal solution given weights also rigidity joint angle controlled useful redundant degrees freedom b introduction computer animation articulated figure often modeled set rigid segments connected joints joint abstractly constraint geometric relationship two adjacent segments relationship expressed number parameters called joint angles judicious selection joints eg segments connected form tree structure collection joint angles joints corresponds oneonone configuration figure correspondence provides immediate computer representation articulated figure configurations sense given set joint angles straightforward compute corresponding configuration problem finding set joint angles corresponds given configuration inverse kinematics problem persists practice inverse kinematics problem however extremely important computer animation since often spatial appearance rather joint angles animator interested naturally problem received attention many researchers computer animation well robotics see next section various algorithms reflect particular aspects problem fail provide general efficient robust solution positioning highly articulated figures interactive animation system interactive manipulation articulated figures animator poses figure spatial context whereas joint angles merely internal possibly hidden representations postures configurations 18 joint angles define target configuration much interesting process joint angles take arriving target responsiveness essential quick response also essential practical control articulated figures mapping spatial configurations joint angles done repeatedly example path planning strength constraints prediction next configuration transformed joint angles iteratively 14 workspace computation another example 1 former example time sequence handled level control latter example process joint angles take arriving target postures pertinent context offer new approach inverse kinematics problem following section shall talk motivation detail approach based nonlinear programming numerical method solving minimum nonlinear function searches solution highdimensional joint angle space based computational economy rather physical meanings deals joint limits intrinsically rather special case successfully implemented found wide uses noted complex nature nonlinear functions many efficient nonlinear programming algorithms terminate find local minima algorithm picked limitation practice however unacceptably serious problem local minima less likely target configuration distant starting one occur interactive manipulation users easily perturb figure configuration slightly get around local minima background inverse kinematics determining mechanism motion common technique mechanical engineering particularly robot research 16 robotics however people mostly concerned functionality manipulators overly redundant degrees freedom usually desired except special purposes moreover computation usually carried particular linkage geometries contrast many interesting objects computer animation domain human figure example many redundant degrees freedom viewed treestructured kinematic mechanism necessary look effective means solving problem various circumstances peculiar computer animation korein badler began study implement methods kinematic chain positioning especially context joint limits redundant degrees freedom 12 13 3 badler et al used position constraints specify spatial configurations articulated figures recursively solved joint angles satisfy multiple position constraints owing simple solver constraints handled limited type pointtopoint position constraints girard maciejewski adopted method robotics 11 calculated pseudoinverse jacobian matrix relates increment joint angles displacement endeffector space main formula increment joint angle vector dr displacement vector representing position andor orientation endeffector space j pseudoinverse jacobian r understand think r 3d column vector denoting position hand nd column vector consisting joint angles may contribute motion hand eg joint angles shoulder wrist differential equality words equality holds ignore displacement higher order ojdrj 2 developed drive robot increment small actual motion carried physically continuous way simply position human figure computer simulated environment however would economical move endeffector r small steps making computer animation sequence would optimal either take step size smaller necessary moreover pseudoinverse calculation required step formula normally quite expensive deal joint limits et al used energy constraints positioning purposes 24 constraints positional orientational satisfied energy function zero way solved constraints integrate differential equation parameter eg joint angle vector defines configuration system e energy function r gradient operator clearly integral initial condition et monotonically decreases time dt joint angle space defines line called isoenergy line energy function e takes identical value number energy level line physical meaning energy function witkin et als method searches path initial configuration target configuration point perpendicular isoenergy lines instead associating energy functions constraints barzel barr introduced deviation functions measure deviation two constrained parts 5 discussed variety constraints 5 pointtopoint pointtonail etc associated deviation functions segment system rigid bodies subjected external forces gravity constraint forces bring deviations zero whenever greater constraint forces solved set dynamic differential equations requires deviations go zero exponentially certain amount time worth noting approach based physical modeling interpretation also used witkin welch nonrigid bodies whose deformations controlled number parameters 25 apply kind methods articulated figures joint would considered pointtopoint constraint added system algebraic equation poses practical problems render solutions inappropriate highly articulated figures first unusual several dozen joints highly articulated figure would add number constraint equations substantially second joint articulated figure meant absolute constraint words compete constraint relates point segment figure point space competition often gives rise numerical instability notice methods property common target configuration result process starting one process bears physical meaning girard maciejewskis method 11 process determined endeffector path witkin et als method 24 determined energy function path space perpendicular family isoenergy lines barzel barrs method 5 dynamic methods 25 process determined physical interpretations segment external constraint forces exerted methods solve constraints also offer smooth process constraints satisfied certain contexts achieved target configuration therefore natural sense results process user less able comprehend control property free concerned target configuration defined spatial constraints rather physical realization true many circumstances physical methods could computationally inefficient add extra burdens original geometric problem example searching local minimum along line one may first choose small step size compute function value rises another way find solution could like first locate interval minimum lies use golden ratio method method similar binary search find minimum first method shows vivid picture function changes minimum gradually whereas second method statistically much faster therefore since target configuration defined minimum energy function e see 24 dont look minimum directly naturalness target configuration may give user immediate control allowing user specify constraints remains affordable nonlinear programming numerical technique solve local minima nonlinear functions solution search maintains numerical efficiency robustness intermediate values starting state final one could general fairly irregular two classes nonlinear programming problems one unconstrained nonlinear programming variables free take values one constrained nonlinear programming variables take values certain range constraints variables fit exactly joint limits articulated figures although latter problem theoretically reduced former one unconstrained constrained nonlinear programming problems studied extensively simple reduction may cause numerical instability propose new approach inverse kinematics problem based nonlinear programming methods target application interactive manipulation highly articulated figures human figures joints joint limits must violated 3 spatial constraints basic geometric entity considered articulated figure data structure articulated figure used defined peabody language developed computer graphics research lab cnstr joint angle index table weight joint goal g assembler mg mg nonlinear objective function generator programming goal type parameters endeffector figure 1 multiple spatial constraint system university pennsylvania 17 peabody figure composed rigid segments connected together joints joint several rotational translational degrees freedom subject joint limits data structure viewed tree nodes represent segments edges represent joints decided data structure need address problem setting figure desired posture discussed introduction wish able adjust posture directly spatial domain spatial constraints designed purpose spatial constraint simply demand endeffector segment figure placed andor aligned goal space say constraint satisfied equivalent saying goal reached endeffectors propensity hold goal persists constraint disabled deleted figure 1 diagram multiple spatial constraint system jack system consists three major components objective function generator assembler nonlinear programming solver described following sections endeffectors 41 endeffector mappings formally view endeffector mapping 1 q joint angle space set consisting joint angle vectors r 3 denotes set 3d vectors 2 set 3d unit vectors accordingly e 9d vector whose first three components form positional vector designating spatial position point endeffector segment second third three components form two unit vectors designating directions two independent unit vectors endeffector segment given instance joint angles joints endeffector e associates 9d vector e 2 l according figure definition since segments figure rigid angle expanded last two unit vectors remain unchanged convenient choice set 90 degrees nine numbers uniquely determine position orientation endeffector segment space first three numbers independent next six numbers must satisfy two unity equations one expanded angle equation three equations take away three degrees freedom e e six independent quantities exactly needed determine position orientation rigid body space lets take example let endeffector segment right hand pelvis fixed temporarily serving root figure tree definition given joint angles joints waist right wrist present vector location orientation right hand computed result put e provided point two orthonormal vectors attached hand selected reference jr jr jr jr jromega omega omega omega omega omega omega theta theta theta thetaffi jr delta effector segment figure 2 joint chain practice components e always interesting sometimes interested position components first three components say location tip middle finger sometimes interested one two unit vector components e say direction unit vector corresponding index finger two unit vector components e define entire orientation endeffector segment general interested certain combinations cases endeffector mapping e labeled type interesting components present e 42 endeffector computational module endeffector module part objective function generator see figure 1 since data structure figure tree endeffector depends joints lie along path root figure tree distal segment endeffector segment let us call path joint chain figure 2 simplicity assume joint figure 2 one degree freedom joint multiple degrees freedom decomposed conceptually several joints one degree freedom zero distance one joint another length joint chain total number joints along chain figure 2 n given transposition operator module compute endeffector vector e sake computational efficiency algorithm chose solve constraint requires derivative quantities e e matrix e jacobian matrix use explained later naturally modules responsibility compute vector e composed combination point vector two unit vectors endeffector segment referring figure 2 let r point vector v unit vector endeffector segment clear order compute e e sufficient know compute r v r v joints current human figure model rotational joints discuss rotational joints 1 let ith joint angle along chain rotation axis joint unit vector u turns r v easily computed cascaded multiplications 4 4 homogeneous matrices derivatives easily computed see 26 r 5 goals 51 goal potential functions goal also viewed mapping domain l range endeffector mapping defined 2 r set nonnegative real numbers since function p assigns scalar combination position directions space call potential function endeffector vector e plugged potential function p argument produces nonnegative real number p e understood 1 translational joints treated similarly actually even simpler distance current endeffector location position andor orientation associated goal pair endeffector goal range endeffector must domain potential function 52 goal computational module goal module part objective function generator figure 1 compute potential p x gradient column vector formed partial derivatives let x denotes ith component vector x gradient p x thus written r x p x listed following potential functions gradients useful types goals implemented jack note module completely independent data structure articulated figure position goals goal defined point p 3d vector space domain l range corresponding endeffector mapping accordingly r 3 potential function gradient orientation goals orientation goal defined pair orthonormal vectors accordingly domain theoretically potential function could practice however may adequate potential function combined position goal would effect make one unit difference length important one radian difference angle always intended make one length unit commensurate degrees angle need multiply p factor c thatc 2d explicitly flexible potential function chosen dx dy gradient dx dy e gamma g 11 goal direction g could unconstrained setting c dy 0 useful example orientationally constrain normal palm person holding cup water positionorientation goals position orientation goal treated two goals sometimes convenient combine together one goal potential function positionorientation goal chosen weighted sum position orientation components dx dy w p w weights assigned position orientation respectively domain gradients r r calculated 7 10 11 aimingat goals goal defined point p space endeffector defined position vector r unit vector v endeffector segment goal reached ray emanating r direction v passes p domain potential function type goal useful example posing human figure facing toward certain point potential function c defined 8 gradient calculated line goals goal defined line passes points p p unit vector line meant point r endeffector segment lie potential function domain gradient plane goals goal defined plane unit normal point p similar line goal plane meant point r endeffector segment lie potential function domain gradient halfspace goals goal defined plane specified way plane goal plane used divide space two halves point r endeffector segment reaches goal halfspace point potential function domain gradient gamma2 6 spatial constraint nonlinear programming problem spatial constraint constrains endeffector goal section 4 5 current joint angles distance endeffector goal simply quantity computed first invoking endeffector module compute e invoking goal module e input argument potential function process illustrated figure 1 ideally want solve algebraic equation reality however equation always satisfiable goal always reachable thus problem would naturally find feasible region minimizes function g joint angles figure definition lower limits upper limits joint angles shoulder confined polygon expressed linear inequalities therefore formulate problem problem nonlinear programming subject linear constraints variables formally minimize g subject column vectors whose dimensions equalities allow linear relationships among joint angles inequalities admit lower limit l upper limit u ith joint angle inequalities polygonal region shoulder joint angles elevationabduction twist similarly expressed set inequalities 7 solving nonlinear programming problem problem posed 23 find minimum objective function g intractable without knowledge regularity objective function properties linearity convexity regulate global behavior function may help find global minimum otherwise research nonlinear programming area mostly done solve local minima worthwhile practice functions moderate local minimum often one wants fails local minimum found another attempt new initial point would quite likely order quick response chose compromise local minima years observation seen many serious problems algorithm used solve problem 23 described appendix iterates approach solution iteration searches minimum along certain direction order search direction point solution accurately fewer iterations needed direction determined based gradient current point also gradients previous steps iteration method monotonic namely iterations value objective function takes never increases globally convergent namely converges local minimum regardless initial point two properties attractive us configuration could otherwise diverge arbitrarily could cause disaster previous posture resulted substantial effort carry computation need compute g gradient r g becomes easy preparation sections 4 5 function value computed 22 gradient computed follows e e r x p e readily computed endeffector goal modules respectively clear number joint angles along chain n grows computational complexity g g linear goals listed section 52 since endeffector module needs time goal module needs o1 time ready solve single constraint referring figure 1 objective function g gradient g computed objective function generator request module nonlinear programming iteration solve multiple constraints add objective functions gradients pass sums nonlinear programming module explained following sections 8 multiple constraints single constraint far adequate defining posture unlike methods given 11 24 5 constraint satisfied result evolution initial configuration method strides toward solution configuration space among infinite number possibilities due high redundancy across multiple degrees freedom attempt made assure solution natural evolution starting configuration example constraining hand goal elbow might result undesired position additional constraint elbow could necessary satisfactory posture constraints would needed complex postures therefore system handles multiple constraints since objective function g defined 22 nonnegative multiple constraints solved minimizingthe sum objective functions associated goals g number constraints subscript denotes association ith constraint w nonnegative weight assigned ith constraint reflect relative importance constraint thus multiple constraints solved problem 23 g replaced g defined 25 note g computed independently number additions needed compute g also true gradient gradient operator r additive constraints may also tied together disjunctively considered satisfied one satisfied solve problem define objective function g i2f1mg useful example constrain endeffector outside convex polyhedron outside space viewed disjunction outward halfspaces defined polygonal faces 9 assembler multiple constraints stated previous sections overall objective function multiple constraints found computing separately independently objective functions individual constraints adding together section shall explain assembler works module objective function generator takes joint chain array corresponding joint angles goal type parameters constraint input computes objective function value g gradient g since partial derivatives respect joint angles joint chain zero gradient determined module include derivatives respect joint angles chain property lends clean modular implementation however two gradient vectors structured different constraints add directly ith joint angle one chain may ith joint angle another chain difference resolved assembler module suppose constraints let q ordered set joint angles joint chain ith constraint n number joint angles q let union q order defined certain way n number joint angles q possible overlap among q lets define index table mapping ng jth joint angle q corresponds jth joint angle overall index system q index table along weight constraint passed assembler effect ith constraint gradient overall objective function g correctly accounted g j derivative objective function ith constraint g regard jth joint angle q available assembler stands partial derivative g regard jth joint angle q initially set zero reconciliation joint chains suggested expression 28 union needed combine joint chains fact slightly complicated allow user specify set joints joint chain resource constraint satisfaction joint chain go endeffector segment back root figure definition specified user defines constraint since constraints may input one one joint may affect endeffector one constraint picked joint chain could well picked joint chain another constraint example waist joint might selected constraint right hand later may selected constraint left hand similar observations made 2 reconciliation necessary unite q q done possible extension joint chain instance joint qa qb affects endeffector constraint b added qb constraint added deleted system reconciliation must redone however careful deliberation operation done scratch 11 rigidities individual degrees freedom nonlinear programming algorithm use utilizes gradient quantities given error tolerance termination variable would undergo displacement value objective function changes relatively due unit increment variable partial derivative property used control rigidity individual degrees freedom assigning scaling factors joint angles scaling factor effect changes unit joint angle hence scales derivative respect greater partial derivative compared others closer search direction direction corresponding variable implementation multiple spatial constraint system rigidity individual degrees freedom controlled implemented jack 17 kernel algorithm used solve nonlinear programming problem presented appendix constraint may type set disjunctively combined constraints type listed section 52 system sets avenue spatial specifications articulated figure configurations joint angle resolutions pose displayed left panel figure 3 achieved using 6 constraints two posi tionorientation constraints two hands used hold tube one direction orientation component suppressed normals palms tube aligned two plane constraints elbows used stretch elbows two side planes figure look toward bottom tube used two constraints line constraint constrain view point point middle two eyes central axis tube aimingat constraint point viewing vector toward bottom tube torso figure 17 segments two consecutive segments joint 3 degrees freedom joints however grouped together form joint group driven three independent parameters forward extension lateral bending axial rotation number effective degrees freedom torso 3 joint connecting sternum clavicle joint connecting clavicle upper arm similarly grouped form shoulder complex three effective degrees freedom elevation abduction twist new modeling construct joint group interdependencies among joints incorporation spatial constraint system described 4 27 degrees freedom case two two elbows six two wrists three torso neck two neck head total number degrees freedom thus 22 running silicon graphics workstation 340 vgx starting upright neutral position solution took 5 seconds comparison right panel figure 3 demonstrates result exactly task except spinal joints grouped task 17 spinal joints 3 degrees freedom involves 48 17 theta 3 gamma degrees freedom previous task 70 degrees freedom total expected took 10 seconds longer joint angle distribution along spinal joints interesting figure 4 shows joint angle distribution along grouped spinal joints corresponding pose left panel figure 3 mentioned spine consists 17 vertebral segments 12 thoracic vertebrae 5 lumbar vertebrae numbered top 1 st lumbar vertebra succeeding 12 th thoracic vertebra figure 4 t1 denotes joint connecting 2 nd thoracic vertebra 1 st thoracic vertebra note t12 denotes joint connecting st lumbar vertebra 12 th thoracic vertebra l5 denotes joint connecting lower torso sacrum 5 th lumbar figure 5 shows joint angle distribution corresponding right panel figure 3 independent spinal joints comparing figure 4 5 clear inverse kinematics algorithm based function optimization methods alone results irregular joint angle distribution along spinal joints treated independently regulated appropriately grouping joints together figure 4 gives example regulated distribution beyond scope paper find realistic spinal joint angle distributions issues regarding kinematic model human spine found 15 human models figures 6 8 older jack bodies five segments torso interdependencies among joints modeled figure 6 situation goal reachable joint chain includes joints shoulder hand goal position plus direction normal right face box add joints task joint chain starts waist goal becomes reachable joint angles along torso segments treated equally leads awkward pose shown figure 7 make natural set rigidities lateral bending axial rotation torso segments 05 middle range 01 result shown figure 8 task joint chain starting waist involves 22 degrees freedom took 2 seconds silicon graphics workstation 4d25tg task left panel figure 3 figure 8 involve equal number degrees freedom worth explaining task figure 3 took twice long task figure 8 despite clear superiority speed silicon graphics 340 vgx enjoys 4d25tg exact number computational steps iteration computational complexity counted 2 total number degrees freedom n number constraints see appendix however algorithm iterative number iterations depends part spatial complexity spatial relationship starting configuration target configuration nonlinearity objective function affected functions used produce joint angles grouped joints number parameters impossible count exactly total number iterations given tolerance computational complexity dimension usually measured convergence rate obviously task figure 3 much complicated figure 8 quantitatively analyzed time efficiency algorithm one take account number degrees freedom involved number constraints solved spatial complexity target analyzing time efficiency nonlinear programming algorithms algorithms often tested typical reasonably involved functions consensus test suite typical challenging inverse kinematics tasks yet developed figure 3 looking towards end tube left panel spinal joints grouped right panel spinal joints independent degree forwardextension lateralbending axialrotation figure 4 joint angles distribution along grouped spinal joints degree forwardextension lateralbending axialrotation figure 5 joint angles distribution along independent spinal joints figure goal reachable without activating torso figure 7 successful awkward reach figure 8 natural reach controlled rigidities spinal joints acknowledgments research partially supported aro grant daal0389c0031 including participation us army human engineering laboratory natick laboratory nasa ames research center us air force depth contract hughes missile systems f3361591c0001 moco inc nsf cise grant cda8822719 partial support work provided national science foundations instrumentation laboratory improvement program grant use9152503 appendix algorithm nonlinear programming subject linear constraints sections 4252 section 9 compute g onm steps number constraints n total number degrees freedom many algorithms developed solve problem 23 without constraints joint angles variable metric method conjugate gradient method considered good one deal linear equality inequality constraints 23 rosen proposed projection method search direction determined corresponding unconstrained problem orthogonally projected subspace defined constraints variables 22 goldfarb combined dfps method variable metric algorithm 7 rosens projection method 9 variable metric method enjoyed improvements bfgs method 6 8 10 23 considered successful one motivations improvement get best conditioning approximate inverse hessian matrix 23 algorithm presenting combination bfgs method rosens projection method overall framework similar goldfarbs method give algorithmic description full rationale 9 8 10 23 consulted algorithm like others finds kuhntucker point point objective function satisfies necessary conditions constrained local minimum without loss generality assume 23 unit vectors say point feasible satisfies equalities inequalities 23 ith constraint said active equality constraint always active feasible point assume point active constraints linearly independent let q denote n q matrix derived lumping together q vectors ie following description algorithm superscript denotes association ith iteration initial feasible point h 0 0 initially chosen n n positive definite symmetric matrix suppose q constraints active point 0 q composed first l columns q q computed applying 32 q times step 1 given kuhntucker point step 2 algorithm terminate step 1 either kh qq g kh qq assumed ff q gamma12 ii ith diagonal element positive see 9 former holds proceed step 3 otherwise drop qth constraint q obtain h projection matrix q qth column q qgamma1 n obtained taking qth column q step 1 step 3 let search direction use line search technique obtain biggest possible positive numbers step 4 add q j corresponding minf j g step 3 compute q j q j step 1 step 5 otherwise set oe q follows use bfgs formula else use dfp formula step 1 inexact line search strategy 31 step 3 proposed powell 20 also suggested descent direction e g strategy guarantees function value decreased oe pointed section 7 gradient g almost expensive function p used cubic hermite interpolation method linear searching sake speed feel fairly effective switch bfgs formula dfp formula step 5 suggested fletcher 8 notice matrix multiplications performed n n matrix vector n 1 matrix 1 n matrix example matrix multiplication h q j q grouped h q j h inverse matrix might take much time fortunately efficient recursive relation details complexity one iteration 2 provided number k equalities inequalities correctness algorithm proved goldfarb 9 exact line search step 3 dfp formula step 5 hard follow proof 9 show correctness algorithm careful 9 maximum algorithm minimum tried bfgs formula found bfgs really better shanno compared 23 many functions results generally favor bfgs formula r complexity computing reachable workspaces redundant manipulators special problems human movement simulation articulated figure positioning multiple con straints simulating humans computer graphics animation control modeling system based dynamic constraints convergence class doublerank minimization algorithms rapidly convergent descent method minimization new approach variable metric algorithms extension davidons variable metric method maximization linear inequality equality constraints family variable metric methods derived variational means computational modeling computer animation legged figures techniques goal directed motion geometric investigation reach strength guided motion robot manipulators mathematics jack toolkit manipulating articulated figures interactive realtime articulated figure manipulation using multiple kinematic constraints hybrid method nonlinear equations global convergence properties variable metric algorithm minimization without exact line searches variable metric method linearly constrained minimization problems gradient projection method nonlinear programming conditioning quasinewton methods function minimization energy constraints parameterized models fast animation control nonrigid structures mathematics coordinated control prostheses manipulators moving posture reconstruction perspective projections jointed figure motion tr geometric investigation reach articulated figure positioning multiple constraints energy constraints parameterized models interactive realtime articulated figure manipulation using multiple kinematic constraints strength guided motion evaluation reachable workspace redundant manipulators interactive behaviors bipedal articulated figures simulating humans computational modeling computer animation legged figures modeling system based dynamic constraints robot manipulators kinematic model human spine torso ctr martin fdor application inverse kinematics skeleton manipulation realtime proceedings 19th spring conference computer graphics april 2426 2003 budmerice slovakia juan cordero javier matellanes resolution inverse kinematic articulated structure using jacobian pseudoinverse graphics programming methods charles river media inc rockland michael neff eugene fiume methods exploring expressive stance graphical models v68 n2 p133157 march 2006 jin ok kim bum ro lee chin hyun chung realtime interactive motion transitions uniform posture map future generation computer systems v21 n7 p11061116 july 2005 charles rose brian guenter bobby bodenheimer michael f cohen efficient generation motion transitions using spacetime constraints proceedings 23rd annual conference computer graphics interactive techniques p147154 august 1996 vineet r kamat julio c martinez practical 3d animation multiply articulated construction equipment proceedings 36th conference winter simulation december 0508 2004 washington dc joanna l power j bernheim brush przemyslaw prusinkiewicz david h salesin interactive arrangement botanical lsystem models proceedings 1999 symposium interactive 3d graphics p175182 april 2629 1999 atlanta georgia united states michael meredith steve maddock adapting motion capture data using weighted realtime inverse kinematics computers entertainment cie v3 n1 janmarch 2005 hiroshi hosobe geometric constraint library 3d graphical applications proceedings 2nd international symposium smart graphics p94101 june 1113 2002 hawthorne new york victor brian zordan nicholas c van der horst mapping optical motion capture data skeletal motion using physical model proceedings acm siggrapheurographics symposium computer animation july 2627 2003 san diego california john p granieri jonathan crabtree norman badler production playback human figure motion visual simulation acm transactions modeling computer simulation tomacs v5 n3 p222241 july 1995 damian merrick tim dwyer skeletal animation exploration graphs proceedings 2004 australasian symposium information visualisation p6170 february 01 2004 christchurch new zealand wordseye automatic texttoscene conversion system proceedings 28th annual conference computer graphics interactive techniques p487496 august 2001 colin murray damian merrick masahiro takatsuka graph interaction forcebased skeletal animation proceedings 2004 australasian symposium information visualisation p8190 february 01 2004 christchurch new zealand michael neff eugene fiume methods exploring expressive stance proceedings 2004 acm siggrapheurographics symposium computer animation august 2729 2004 grenoble france james davis maneesh agrawala erika chuang zoran popovi david salesin sketching interface articulated figure animation acm siggraph 2006 courses july 30august 03 2006 boston massachusetts james davis maneesh agrawala erika chuang zoran popovi david salesin sketching interface articulated figure animation proceedings acm siggrapheurographics symposium computer animation july 2627 2003 san diego california hyun joon shin jehee lee sung yong shin michael gleicher computer puppetry importancebased approach acm transactions graphics tog v20 n2 p6794 april 2001 george elkoura karan singh handrix animating human hand proceedings acm siggrapheurographics symposium computer animation july 2627 2003 san diego california nicolas pronost georges dumont validating retargeted interpolated locomotions dynamicsbased analysis proceedings 4th international conference computer graphics interactive techniques australasia southeast asia november 29december 02 2006 kuala lumpur malaysia jehee lee sung yong shin hierarchical approach interactive motion editing humanlike figures proceedings 26th annual conference computer graphics interactive techniques p3948 july 1999 claudia esteves gustavo arechavaleta julien pettr jeanpaul laumond animation planning virtual characters cooperation acm transactions graphics tog v25 n2 p319339 april 2006 benot le callennec ronan boulic interactive motion deformation prioritized constraints proceedings 2004 acm siggrapheurographics symposium computer animation august 2729 2004 grenoble france benot le callennec ronan boulic interactive motion deformation prioritized constraints graphical models v68 n2 p175193 march 2006 timothy j roberts stephen j mckenna ian w ricketts human pose estimation using partial configurations probabilistic regions international journal computer vision v73 n3 p285306 july 2007 david forsyth okan arikan leslie ikemoto james obrien deva ramanan computational studies human motion part 1 tracking motion synthesis foundations trends computer graphics vision v1 n2 p77254 july 2006