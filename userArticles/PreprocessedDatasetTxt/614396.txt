new line integral convolution algorithm visualizing timevarying flow fields abstractnew challenges vector field visualization emerge timedependent numerical simulations become ubiquitous field computational fluid dynamics cfd visualize data generated simulations traditional techniques displaying particle traces reveal flow phenomena preselected local regions thus unable track evolution global flow features time paper presents new algorithm called uflic unsteady flow lic visualize vector data unsteady flow fields algorithm extends texture synthesis technique called line integral convolution lic devising new convolution algorithm uses timeaccurate value scattering scheme model texture advection addition algorithm maintains coherence flow animation successively updating convolution results time furthermore propose parallel uflic algorithm achieve high loadbalancing multiprocessor computers shared memory architecture demonstrate effectiveness new algorithm presenting image snapshots several cfd case studies b introduction vector field data arise computer simulations variety disciplines computational fluid dynamics cfd global climate modeling electromagnetism visualizing vector data effectively challenging problem due difficulties finding suitable graphical icons represent display vectors twodimensional computer displays present new challenges emerge timedependent simulations become ubiquitous simulations produce largescale solutions multiple time steps carry complex dynamic information underlying simulation model visualize timevarying data two types methods generally used one referred instantaneous method visualizations created based instance data field time visualization results streamlines vector plots sequence discrete time steps animated together instantaneous method often suffers problem lacking coherence animation frames incoherent animation interfere understanding flow fields unsteady phenomena addition streamline shown given instance time correspond path particle travel flow changing direction constantly amend problems researchers developed different method called timedependent method better characterize hanwei shen mrj technology solutions nasa ames research center david kao nasa ames research center evolution flow field continuously tracking visualization objects particles time examples numerical streaklines pathlines 1 2 paper presents timedependent method visualizing vector data unsteady flow fields using line integral convolution lic 3 underlying approach propose new convolution algorithm called uflic unsteady flow lic accurately model unsteady flow advection line integral convolution method originally proposed cabral leedom 3 visualization technique produce continuous flow textures resemble surface oil patterns produced windtunnel experiments synthesized textures effectively illustrate global flow directions dense flow field however lic convolution computed following traces streamlines steady flow field readily used visualizing unsteady flow data simple extension compute lic every time step flow field animate results together unfortunately approach suffers problems instantaneous method mentioned forssell cohen 4 proposed extension changing convolution path streamlines pathlines visualizing timevarying vector fields method produces better visualization unsteady flow fields resulting animation lack coherence consecutive frames underlying flows fairly unsteady algorithm extends lic method devising new convolution algorithm simulates advection flow traces globally unsteady flow fields regular lic algorithm takes white noise image input texture input texture advected time create directional patterns flow every time step advection performed using new convolution method called timeaccurate value scattering scheme timeaccurate value scattering scheme image value every pixel scattered following flows pathline trace computed using numerical integration methods every integration step pathline image value source pixel coupled timestamp corresponding physical time deposited pixel path every pixel completes scattering convolution value every pixel computed collecting deposits timestamps matching time corresponding current animation frame track flow patterns time maintain coherence animation frames devise process called successive feedforward drives convolutions time process repeat timeaccurate value scattering every time step instead using white noise image texture input every time take resulting texture previous convolution step perform highpass filtering use texture input compute new convolution based preliminary work 5 paper provides precise description uflic algorithm important implementation details addition improve algorithms inter activity present parallel implementation algorithm multiprocessor machines sharedmemory architectures parallel algorithm distribute convolution workload among available processors subdividing texture space subregions carefully choosing shapes subregions achieve high load balancing following first give overview lic method next describe analyze existing algorithm unsteady flows present uflic algorithm detail followed parallel algorithm conclude paper presenting performance results case studies applying method several unsteady flow data sets cfd simulations ii background related work section briefly review lic method proposed cabral leedom 3 describe analyze method proposed forssell cohen 4 unsteady flow field data line integral convolution line integral convolution method texture synthesis technique used visualize vector field data taking vector field white noise image input algorithm uses low pass filter perform onedimensional convolution noise image convolution kernel follows paths streamlines originating pixel positive negative directions resulting intensity values lic pixels along streamline strongly correlated directional patterns flow field easily visualized perform convolution different periodic filter kernels used examples hanning filter 3 box filter 6 7 fig 1 illustrates process lic convolution recently several extensions original lic algorithm proposed forssell cohen 4 adapt lic method curvilinear grid data stalling hege 6 propose efficient convolution method speed lic computation shen johnson 7 combine dye advection fig 1 process lic convolution threedimensional lic visualize global local flow features time okada kao 8 use postfiltering techniques sharpen lic output highlight flow features flow separations reattachments kiu banks 9 propose use multifrequency noise input lic enhance contrasts among regions different velocity magnitudes recently jobard lefer 10 devised motion map data structure encode motion information flow field produce visual effect similar lic image texture outputs line integral convolution method provide excellent visual representation flow field effectiveness generally comes two types coherence first spatial coherence used highlight flow lines field output image lic method establishes coherence correlating pixel values along streamline result line integral convolution second type coherence temporal coherence coherence required animating flow motion lic method achieves temporal coherence shifting filter phase used convolution convolved noise texture periodically move along streamlines time b line integral convolution unsteady flows lic technique proposed originally primarily intended visualizing data steady flow fields visualize unsteady flow data extension proposed forssell cohen4 contrast convolving streamlines steady flow field extension convolves forward fig 2 convolution values pixels b uncorrelated pixels b different convolution paths represented p1 p2 respectively backward pathlines originating pixel every time step pathline path particle travels unsteady flow field time mathematical definition pathline given next section animate flow motion algorithm shifts filters phase every time step generate animation sequence purpose convolving along pathlines show traces particles moving unsteady flows thus reveal dynamic features underlying field however several problems associated pathline convolution flow rather unsteady first coherence convolution values along pathline difficult establish illustrate problem fig 2 pathline p 1 starts pixel time 1 passes pixel b time 2 convolution path pixel similarly pathline p 2 starting b time 1 convolution path pixel b since pathlines p 1 p 2 pass b different times 2 1 respectively different traces result convolution values b uncorrelated two different sets pixel values used hence image value coherence along neither pathline p 1 p 2 established forssell cohen 4 reported flow lines output images become ambiguous convolution window set wide problem mentioned explain phenomenon drawback using pathline convolution comes difficulties establishing temporal coherence using phaseshift method proposed regular lic method reason lies variation time pathlines originating seed point flow unsteady result algorithm filter shifted phases applied different convolution paths however effectiveness using phaseshift method create fig 3 convolution image generated using pathline convolution algorithm artificial motion effects mainly relies fact convolution path fixed time result temporal coherence consecutive frames represent flow motion using phaseshift method becomes rather obscure unsteady flow data addition problems discussed issues pathline convolution 5 problems practice limit effectiveness using pathline convolution visualize flow fields rather unsteady fig 3 shows sample image produced pathline convolution method obscure coherence flow texture clearly noticeable following section propose new algorithm uflic visualizing unsteady flow fields instead relying shifting convolution kernel phase gathering pixel values flow path every pixel create animated textures devise new convolution algorithm simulates advection textures based underlying flow fields new algorithm consists timeaccurate value scattering scheme successive feedforward method algorithm provides timeaccurate highly coherent solution highlight dynamic global features unsteady flow fields iii new algorithm image convolution thought gathering values many input samples output sample value gathering scattering one input sample many output samples value scat tering lic method proposed originally cabral leedom 3 uses value gathering scheme algorithm pixel field travels positive negative streamline directions gather pixel values compute convolution convolution implemented different way first letting every pixel scatter image intensity value along streamline path convolution result pixel resulting image computed averaging contributions previously made pixels refer method value scattering scheme convolution path streamline steady state vector field value gathering value scattering equivalent however timevarying vector fields value gathering value scattering produce different results pathline used convolution path illustrate fig 2 pathline pixel pixel b enables b receive contribution scattering scheme used however using gathering scheme b gather value pathline p2 starting b pass accurately reflect physical phenomena unsteady flow fields method value scattering convolution appropriate value gathering method reason lies nature value scattering corresponds flow advections every pixel image plane thought particle particles move along flow traces leave footprints create convolution image section present new algorithm uflic uses value scattering scheme perform line integral convolution visualizing unsteady flow fields starting white noise image input texture uflic algorithm successively advects texture create sequence flow images achieve propose new convolution method called timeaccurate value scattering scheme incorporates time convolution timeaccurate value scattering convolution scheme driven successive feedforward process iteratively takes convolution output previous step highpass filtering texture input next convolution produce new flow textures uflic algorithm effectively produce animations spatial temporal coherence tracking dynamic flow features time following first present timeaccurate value scattering scheme describe successive feedforward process timeaccurate value scattering timevarying simulation two different notions time frequently used one physical time computational time physical time used describe continuous measurable quantity physical world seconds days let physical two consecutive time steps unsteady flow denoted dt physical time th time step computational time nonphysical quantity computational space th time step let corresponding computational time computational step size one following types time involved carefully distinguished propose timeaccurate value scattering scheme compute line integral convolution value scattering scheme computes convolution image step timevarying flow data advecting input texture time input texture either white noise image convolution result output preceding step delay discussion choice input next section following discussion assume current computational time step corresponding physical time explain valuescattering convolution method given input texture every pixel field serves seed particle pixel position starting physical time seed particle advects forward field space time following pathline defined z tdeltat pt position particle physical time pt deltat new position time deltat vpt velocity particle pt physical time evaluate expression generate particle traces numerical methods rungekutta second fourthorder integration scheme used every integration step input image value p pixel particle originates normalized scattered pixels along pathline normalization determined two factors ffl length current integration step ffl age particle assuming box kernel function used line integral convolution computed multiplying image value distance two consecutive integration steps explains first normalization factor assume particle n th integration step distance particle positions current preceding integration defined expressed second normalization factor simulates effect fading time seed particles intensity define particles age n th integration step deltat deltat th time increment pathline integration based particles age define normalization variable value decreases age particle increases assuming expected life span particle n overall normalization weight w normalized scattering value n th integration step becomes normalized p theta w data scattering scheme normalized pixel value every integration step associated timestamp given pathline starts seed pixel physical time corresponding physical time n th integration step deltat compute convolution frame every integer computational time step corresponding original data therefore use roundedup computational time corresponding physical time timestamp associated normalized image value computed receive scattering image values pixel keeps buffer called convolution buffer c buffer within cbuffer several buckets corresponding different computational times bucket field accumulated image values accum field accumulated weights w accum scattering n th integration step done adding normalized image value normalized weight w bucket pixel n th integration step corresponds computational time normalized seed particle distance travel defined convolution length determine convolution length indirectly specifying particles life span defined life span computational time converted physical time used every particle convolution advantage using global life span control convolution length lengths different pathlines automatically scaled proportional particles velocity magnitude desirable effect described 3 4 addition life span gives number time steps data must loaded main memory particle may complete advection based life span specified seed particle advection number buckets c buffer structure required actually predetermined assuming life span pathline n computational time ie particle starts ends n buckets buffer needed particle travel longer n computational time steps born implementation cbuffer onedimensional ring buffer structure integer phi index points bucket corresponds current computational time every pixel starts advection value phi computed hence assuming particle computational time 0 current integration step corresponding bucket ring buffer destination pixel deposit index fig 4 depicts structure ring buffer mod fig 4 example life span seed particle n 5 computational time steps current computational time pixel starts advection 6 value phi pointing bucket convolution buffer cbuffer 1 timeaccurate value scattering scheme every pixel advects field scatters image value based scattering method described every pixel completes scattering process start computing convolution get resulting texture proceed including convolution scattered pixel values timestamp equal current computational time therefore go pixels cbuffer obtain accumulated pixel value accum accumulated weight w accum corresponding bucket bucket index phi final convolution value c computed w accum accumulated image values buckets future timestamps used time comes increment value phi one current bucket cbuffer reused addition current computational time also incremented one value scattering convolution proceed next time step data worth mentioning method pixel scatters value along forward pathline direction backward direction reason lies nature backward scattering correspond observable physical phenomenon flows advect backwards addition symmetry issue mentioned 3 appear problem unsteady flow animations b successive feedforward value scattering scheme provides timeaccurate model simulating flow advection create spatial coherence output texture section describe process successively transports convolution results time maintain temporal coherence visualizing unsteady flows mentioned previously define timedependent method one progressively tracks visualization results time section present timedependent process called successive feedforward drives timeaccurate value scattering scheme create temporal coherence algorithm works follows initially input value scattering convolution algorithm regular white noise texture value scattering scheme advects convolves noise texture obtain convolution result first time step subsequent convolutions instead using noise texture use output previous convolution input texture input texture showing patterns formed previous steps flow field advected result output frames consecutive time steps highly coherent flow texture continuously convolved advected throughout space time important issue successive feedforward method must addressed line integral convolution method general value scattering scheme particular really lowpass filtering process consequently contrasts among flow lines gradually reduced time lowpass filtering process repeatedly applied input texture would cause problems one tried visualize long sequence unsteady flow data correct problem first apply highpass filter hpf input texture result previous convolution used value scattering scheme next step highpass filter helps enhance flow lines maintain contrast input texture highpass filter used method laplacian operator twodimensional laplacian written 3 theta 3 mask fi fi fi fi fi fi fi result computed mask exclusively positive values order display result common technique used digital image processing applications subtract laplacian fig 5 convolution image generated input texture without noisejittered highpass filtering original image filter mask overall operations laplacian subtraction derived prevent highpass filter introducing unnecessary high frequencies might cause aliasing final image jitter resulting output highpass filter original input noise texture done masking least significant seven bits output original input noise highpass filtering noise jittering produce convolution images restored contrast clearer flow traces fig 5 shows snapshot animation sequence without using noisejittered highpass filter fig 6 result noise jittered highpass filter difference quite dramatic note fig 6 used compare fig 3 images produced time step data fig 7 gives overview entire algorithm note noisejittered highpass filtering process applies input texture next iteration convolution animation images iv parallel implementation section present simple parallel implementation uflic algorithm multiprocessor machines sharedmemory architectures following first discuss subdivide convolution workload among processors describe synchronization steps among processors noteworthy parallel algorithm regular lic method massively parallel distributed memory computers proposed zockler stalling hege11 algorithm steady lic method unsteady lic subdivide texture image fig 6 convolution image generated input texture noisehittered highpass filtering scattering convolution nhpf noisejittered highpass filter current computational time display fig 7 algorithm flowchart space distribute workload workload subdivision nature successive feedforward process requires uflic algorithm must executed sequentially time convolution one time step completed next convolution start implementation parallelize timeaccurate value scattering scheme executed every computational time step distribute workload subdivide image space subregions distribute convolution task subregions among available processors choosing shapes subregions two considerations ffl subregions assigned processor well distributed image space ffl processor locality data access maintained computing convolution convolution workload incurred value scattering pixel generally determined length pathline farther pathline extends work needed fig 8 uflic parallelized subdividing texture space tiles randomly assigning tiles available processing elements pes pixels encountered along way operations value accumulation involved occurs seed particle travels regions higher velocity flow field variation velocities different regions flow field quite dramatic distribution velocities usually quite uneven order give processor balanced workload processor assigned subregions evenly distributed entire field issue considered subdividing work space maintenance locality data access avoid penalty caused local cache miss memory page fault accessing flow data happen two consecutive seed particles processor schedules advect located long distance case vector data brought cache main memory one particle advection flushed new page data advection second particle starts based two considerations parallel algorithm divides image space rectangular tiles fig 8 given p processors first specify number tiles processor receive divide entire texture space theta p tiles randomly assign tiles processor associating tile random number sort tiles random numbers sorting processor takes turn grab tiles sorted tile list b process synchronization work distribution completed processor starts computing convolution values pixels tiles parallel convolution process divided three phases synchronization points among processors three phases scattering pixel values along pathlines ffl computing convolution results cbuffers performing noisejittered high pass filtering first phase value scattering involves writing cbuffers belong pixels along pathline since processors performing scattering simultaneously possible one processor needs write bucket cbuffer time implementation instead locking cbuffer processor writing inevitably incur performance overhead allocate separate set buckets processor recall sequential algorithm number buckets cbuffer equal pathlines life span n given p available processors allocate n buckets processor total number buckets cbuffer p theta n way although memory needed locking mechanism required cbuffer currently available multiprocessor sharedmemory machines found overhead overwhelming second phase parallelization fairly straightforward processor independently traverses cbuffers pixels tiles compute convolution results note within cbuffer p buckets corresponding computational time step convolution computed accumulating normalizing scattered image values buckets third phase processor simply applies noisejittered highpass filtering process independently convolution results pixels belonging tiles v results discussion section empirical results evaluating uflic algorithm provided first present performance analysis sequential parallel implementations show case studies several cfd applications performance analysis data two unsteady cfd simulations used experiments shown table applied uflic algorithm twodimensional curvilinear surface delta wing model 287 theta 529 texture resolution twodimensional curvilinear surface airfoil model 196 theta 389 texture resolution machine used generate results sgi onyx2 texture resolutions surfaces two unsteady flow data sets data set texture resolution wing 287 theta 529 airfoil 196 theta 389 ii uflic computation time seconds one processor data set scattering convolution filtering total wing 7113 023 019 7155 airfoil 12385 011 009 12405 195 mhz r10000 processors table ii shows breakdown average computation time using one processor generating texture image animation series used three computational time steps seed particles life span table show time spent uflics three phases scattering pixel values computing convolutions highpass filtering found process value scattering required 99 total execution time majority calculations provided pathlines seed particles noteworthy computation time data scattering necessarily proportional texture resolution reason seed particles different flow fields given life span may travel different distances due different flow velocities result variation workload data scattering process mentioned previously section parallel algorithm table ii see computational time value scattering airfoil data set longer delta wing data set even though texture resolution airfoil smaller explained table iii compares average pathline lengths seed particles airfoil delta wing data sets iii average pathline length pixels data set pathline length airfoil performance parallel uflic delta wing cpus time speedup efficiency 6 1317 543 090 performance parallel uflic airfoil cpus time speedup efficiency 6 2279 544 090 7 2022 613 088 parallel implementation given p processors assign processor p theta 16 tiles dividing twodimensional texture space 4p theta 4p tiles table iv table v show total execution times seconds speedup factors parallel efficiencies parallel algorithm seven processors parallel efficiency defined dividing speedup factor number processors results observe achieve 90 parallel efficiency good load balance fig 9 fig 10 show parallel speedup graphs b case studies section show results applying new algorithm several cfd applications animation ideal method show results paper show several snapshots animation many cfd simulations performed study flow phenomena oscillating wings generally simulation done using two dimensional airfoil first example based simulation unsteady twodimensional turbulent flow oscillating airfoil pitches number processors26 parallelized uflic fig 9 parallel speedup uflic algorithm delta wing number processors26 parallelized uflic fig 10 parallel speedup uflic algorithm airfoil eleven degrees oscillational motion airfoil creates vortex shedding vortex formation figs 11a 11b show formation primary vortex rotating clockwise airfoil flow texture shown colored velocity magnitude blue indicates low velocity magenta high velocity initially velocity high near leading edge airfoil airfoil pitches velocity decreases leading edge increases near trailing edge counterclockwise secondary vortex forms beyond trailing edge airfoil see figs 11c 11d furthermore primary vortex gains strength primary vortex separates airfoil compared unsteady flows shown fig 11 results steady lic comparison used steady lic compute surface flows time step independently animated steady lic time difference animation uflic apparent new algorithm animation reveals dynamic behavior vortices vortex formation vortex shedding much realistically steady lic fig 12 depicts snapshot time sequence flow patterns several spiraling vortices unsteady flow simulation four vortices vortices orbit vortices flow compared steady lic spiraling motion vortices shown instead lic reveals translation vortices next example unsteady flow simulation fa18 fighter aircraft air combat twintailed fa18 jet highangle attack simulation involves study tail buffet occurs vertical tails immersed unsteady flow bursting vortices along leading edge tails frequent phenomenon cause heavy loading one vertical tails jet major safety concern fig 13a b show first wave vortex bursting along leading edge one vertical tails figure shows outboard tail eg side tail facing away vertical tail note movement vortex occurs near blue shaded region leading edge tail upper tip tail another wave vortex bursting shown fig 13c 13d animation vortex bursting phenomenon revealed dramatically last example taken unsteady flow simulation 65degree sweep delta wing degrees angle attack simulation several interesting flow separations reattachments occur along leading edge delta wing zero degree static roll angle furthermore vortex breakdown present unsteady flow fig 14 shows snapshot surface flow given time step velocity magnitude color contours give indication change velocity time along leading edge wing flow velocity relatively high compared velocity near wing body based examples presented section observations made regarding surface flows generated new algorithm first flow unsteady blurriness likely occur regions flow changing rapidly unlike surface flow patterns generated regular lic flow lines generated using unsteady lic may different line widths could attributed changes velocity magnitude flow direction vi conclusions future work presented uflic unsteady flow line integral convolution algorithm visualizing vector data unsteady flow fields using timeaccurate value scattering scheme successive feedforward process new convolution algorithm accurately model flow advection create highly coherent flow animations results several case studies using algorithm shown new technique effective capturing dynamic features unsteady flow fields future work includes applying method threedimensional unsteady flow data sets addi tion would like compare unsteady lic method spot noise technique introduced van wijk 12 spot noise effective method creating flow texture patterns final texture image quality based distribution shape spots de leeuw van wijk 13 enhanced spot noise technique bending spots based local stream surfaces objective produce accurate flow texture patterns near flow regions high curvature extend spot noise technique unsteady flows key issues resolved instance spots advected time distribution spots change rapidly challenge maintain coherence spots time another consideration spot bending assumes flow steady local stream surfaces however unsteady flows assumption may true plan look issues acknowledgments work supported part nasa contract nas214303 would like thank neal chaderjian ken gee shigeru obayashi ravi samtaney providing data sets special thanks randy kaemmerer meticulous proofreading manuscript michael cox david ellsworth interesting discussions valuable suggestions parallel imple mentation also thank tim sandstrom gail felchle chris henze members data analysis group nasa ames research center helpful comments suggestions technical support r visualization timedependent flow fields visualizing timevarying phenomena numerical simulations unsteady flows imaging vector fields using line integral convolution using line integral convolution flow visualization curvilinear grids uflic line integral convolution algorithm visualizing unsteady flows fast resolution independent line integral convolution visualizing vector fields using line integral convolution dye advection enhanced line integral convolution flow feature detection motion map efficient computation steady flow animations parallel line integral convolution spot noise texture synthesis data visualization enhanced spot noise vector field visualization tr ctr nan li zhiong huang featurebased pencil drawing method proceedings 1st international conference computer graphics interactive techniques australasia south east asia february 1114 2003 melbourne australia walter h jimenez wagner correa claudio silva baptista baptista visualizing spatial temporal variability coastal observatories proceedings 14th ieee visualization 2003 vis03 p75 october 2224 jarke j van wijk image based flow visualization acm transactions graphics tog v21 n3 july 2002 bruno jobard gordon erlebacher yousuff hussaini lagrangianeulerian advection unsteady flow visualization proceedings conference visualization 01 october 2126 2001 san diego california pak chung wong harlan foote david l kao ruby leung jim thomas multivariate visualization data fusion information visualization v1 n34 p182193 december 2002 daniel weiskopf gordon erlebacher thomas ertl texturebased framework spacetimecoherent visualization timedependent vector fields proceedings 14th ieee visualization 2003 vis03 p15 october 2224 bruno jobard gordon erlebacher yousuff hussaini hardwareaccelerated texture advection unsteady flow visualization proceedings conference visualization 00 p155162 october 2000 salt lake city utah united states bruno jobard gordon erlebacher yousuff hussaini lagrangianeulerian advection noise dye textures unsteady flow visualization ieee transactions visualization computer graphics v8 n3 p211222 july 2002 anders helgeland oyvind andreassen visualization vector fields using seed lic volume rendering ieee transactions visualization computer graphics v10 n6 p673682 november 2004 vivek verma david kao alex pang plic bridging gap streamlines lic proceedings conference visualization 99 celebrating ten years p341348 october 1999 san francisco california united states zhanping liu robert james moorhead ii auflic accelerated algorithm unsteady flow line integral convolution proceedings symposium data visualisation 2002 may 2729 2002 barcelona spain guoshi li udeepta bordoloi hanwei shen chameleon interactive texturebased rendering framework visualizing threedimensional vector fields proceedings 14th ieee visualization 2003 vis03 p32 october 2224 tobias schafhitzel eduardo tejada daniel weiskopf thomas ertl pointbased stream surfaces path surfaces proceedings graphics interface 2007 may 2830 2007 montreal canada jarke j van wijk image based flow visualization curved surfaces proceedings 14th ieee visualization 2003 vis03 p17 october 2224 robert laramee jarke j van wijk bruno jobard helwig hauser isa ibfvs image spacebased visualization flow surfaces ieee transactions visualization computer graphics v10 n6 p637648 november 2004 hongfeng yu kwanliu joel welling parallel visualization pipeline terascale earthquake simulations proceedings 2004 acmieee conference supercomputing p49 november 0612 2004 zhanping liu robert j moorhead accelerated unsteady flow line integral convolution ieee transactions visualization computer graphics v11 n2 p113125 march 2005