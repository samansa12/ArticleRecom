refinement methods geometric bounds constructive solid geometry constructive solid geometry geometric solids represented trees whose leaves labeled primitive solids whose internal nodes labeled settheoretic operations bounding function context upper lower estimate extent constituent sets bounds commonly used speed algorithms based trees introduce class totally consistent bounding functions desirable properties allowing surprisingly good bounds built quickly outer inner bounds refined using set rewrite rules give complexity convergence results implemented refinement rules outer bounds within solid modeling system proved especially useful intersection testing three four dimensions implementations used boxes bounds different classes shapes bounds also explored rewrite rules also applicable relatively slow exact operations explore theoretical insight general boolean algebras results concerning relationship bounds active zones also noted b introduction outer bounds commonly used speed geometric algorithms example wish tell whether two geometric entities intersect form spheres around entities spheres intersect deduce entities cannot intersect concept bound obvious may seem strange spend entire paper talking bounds however subtleties arise allow bounds bounds normal sense desirable computational properties show types bounds possible useful geometric entities described constructively constructive solid geometry csg build complicated shapes collection simple shapes 11 think csg description tree internal nodes correspond set operations leaf nodes correspond simple shapes primitives branches tree imply functional application compute shape represented tree start leaves work way tree applying set operations go many modelling systems use csg primary construction method eg 3 6 many systems permit constructive operations making datastructures eg 2 normal way applying bounds csg tree attach suitable supersets primitives bounds leaf nodes however extend notion bound every node tree follows binary node corresponding union operation know child nodes represent shapes bounded l r shape represented must contained within l r set bound similarly node corresponded intersection operation corresponding composite bound would l r way could recursively compute bound every node tree considerations arise make idea involved particular efficiency processing may desire bounds node rectangle appropriate dimensionality l r must replaced smallest enclosing rectangle shapes desired solution may obvious however besides propagation bounds upwards tree also downward propagation consider simple example shapes one dimensional lines shape bounded interval 0 2 shape b 1 3 bound b 1 2 thus want compute intersection worry intersection points within 1 2 12 bound b new sense observations form basis work reported obtained practical insight allowed us significantly speed certain geometric computations solid modelling system well discovering rich area theoretical results practical implementations detailed elsewhere 4 5 emphasis paper theoretical underpinnings however clarity first describe main results using system bounding boxes form basis practical implementation x2 relates work x3 considering general cases apply type system bounds obey rules x4 x5 continue study bounds algebraic properties convergence results different types bounds eg boxes spheres convex hulls consider two related bounding systems x6 consider bounds based subsets objects rather supersets turn dual properties properties superset bounds discussion based csg trees limited set union set intersection operations x7 show results entirely hold complement difference operators csg trees however show slightly less general system bounds called sbounds successfully applied cases sbounds fact basis implementations overview onedimensional example x1 introduced reasoning behind rules use reason extent expressions csg tree twodimensional example suffice illustrate practical use ideas consider figure 1a shows small csg tree two operators phi andomega denoting union intersection respectively squares figure frames help show relative size position polygons three primitive shapes shown leaves tree fourth shows final shape denoted tree 1 ie union triangle parallelogram intersected wedge consider bounds tree nodes restricting boxes aligned frames restriction makes lot sense computationally box denoted four numbers easy work figure 1b shows bounds larger primitive polygons also shows bounds two internal nodes tree priori knowledge constitutes sensible bounds nodes useomegagamma universal set asomega bigger set position apply reasoning described x1 working way tree take union lower two primitives bounds indeed superset partial shape given union node tree however computational reasons actually store box fits around union two bounds rather union indeed box generated directly without explicitly forming union bounds taking maxima minima coordinates defined corners leafnode boxes box shown figure 1c boxes used generate shown dashed two finite bounds root node tree finite bound node generated taking intersection two bounds child nodes figure 1d supersets shapes formed evaluating csg tree every node tree treat box root node window interesting parts tree viewed take window intersect boxes child nodes repeating process union node intersect new bound found two children giving bound set figure 1e boxes generated longer supersets partial shapes generated evaluate tree normal way shown dotted particular leftmost node empty box bound however evaluate tree 1 terminology made precise x4 using bounds generated windows parts partial shapes bother evaluating throwing parts lie outside windows indeed obtain shape root node tree general form rules follows working way tree take set operation node apply two bounds child nodes intersect result bound already node usage described example special case rule existing bounds omegagammah working way tree take bound parent node intersect bound child node replacing childs bound shall see order applying rules affect validity process always end suitable set windows however natural order working way bottom working way guaranteed continue making progress may surprising may often improve matters repeating process example figure 1 case point whereby performing another sweep tree tree gives us set bounds figure 1f case applying rules makes difference fact leftmost node bounded means ignore node entirely 2 fact replace original tree simpler tree intersection parallelogram wedge need worry computing intersection within relatively small window bound formed root node fact may make much difference simple case apply sort reasoning arbitrarily complex primitive shapes number dimensions threedimensional example figure 2a shows robot modelled using 19 primitive shapes environment modelled using 4 primitive shapes perform interference testing robot environment checking whether intersection set empty null thus form symbolically csg tree represents intersection set could evaluate immediately instead use aligned threedimensional boxes bound node tree figure 2b shows finite boxes 3 initially formed primitive nodes work way tree using refinement rules bounds longer changing case every node tree becomes bounded two passes implying intersection null without even consider detailed geometry rotating waist joint robot ensure interference gives us example objects interfere figure 2c shows outline objects thick lines around intersection volume showing 5 nonempty bounds left three passes smallness bounds means subsequent processing required prove interference requires little computation time 4 may tempted ask questions way bound system converges issues detailed later paper basically ffl bound system always converge using natural application sequence described always converges n gamma 1 passes tree always converges final state given starting state ffl results apply whatever dimensionality boxes used tilove calls nodes redundant 15 3 infinite halfspaces used model robot initially bounded omegagamma b omega omega c omega e figure 1 twodimensional example z b z c figure 2 threedimensional example ffl rules also exist trees difference complement operations ffl similar though powerful results hold types bounds bubbles convex hulls 3 related work use bounds passed folklore computational geometry solid mod elling work described heavily influenced work university rochesters production automation project resulted padl series geometric modelling systems particular tilove introduced notion redundant primitives 14 others project investigated obvious rules described later introduced padl2 however introduce abstraction bounding function allows us consider algebraic convergence properties rules generalise rewrite rules allow multiple applications 9 instead took idea call consistency defined concept called active zone effectively notation smallest possible consistent bound 12 8 active zones used design faster geometrical operations csg trees especially boundary evaluation instead evaluated directly used prune geometric information within complex geometric computations boundary evaluation contrast work concentrated general computational framework arbitrary bounds may evaluated efficiently normally preprocessing stage implemented work part robmod geometric modelling system 6 proved especially useful interference detection 4 collision detection considering intersections fourdimensional spacetime 5 totallyconsistent bounds start formal analysis systems bounds characterise bounds need notation conventions allow us discuss particular need able distinguish csg tree datastructure within computer set 4 represented datastructure thus say tree consists number internal nodes label symbols phiomega psi corresponding operations gamma set difference respectively 5 leaf nodes tree correspond primitive shapes label nodes convenient eg l p n node tree also given convenient label uniquely distinguish purpose discussion use 1 etc labels general nodes reserve label root node entire tree also regard label node standing subtree node rootthese uses may distinguished context paper consider trees union intersection nodes called positive trees theoretical limitation always rewrite tree contains difference nodes using set identity set complement operation always rewrite tree contains complement operations repeated use de morgans laws starting root node tree working towards leaves however may practical reasons preferring deal original tree x7 discuss case operators allowed foundations allow us describe tree syntactic structure enable us assign semantics tree need know shapes leaf node corresponds assume existence primitive interpretation function takes leaf node returns shape ie subset n given compute corresponding full interpretation function j delta j obvious rules l leaf node gives set operation corresponding node thus shape entire tree given jt j add idea bound framework want consider bounds attached every node tree define bounding functions bounding function bf takes node tree returns subset space 6 use fi fi 0 etc denote bounding functions say bounding function fi standard bf discussion assume fixed tree fixed primitive interpretation mind normal idea bound use standard bounds show nonstandard bounds also useful bounds tree expect imply bound fit node region outside ignored consider outer bounds inner bounds considered x6 leads us define new interpretation function tree bounded interpretation j delta j fi follows 4 subset n n 5 distinguish tree node labels corresponding set operations want alter bound set stored nodes 6 single bounding function implemented storing specification set say simple box node tree rules describe refine bound recursively without extra space requirements otherwise leaf node jt j note standard bounds fi always jt j computing shape jt j important thing intermediate computations rather final answer thus distinguish consistent bounding functions follows pi definitions say fi consistent jt j say fi totally consistent jt j fi bounding functions notation f v g g w f means f g functions domain ft gt arguments idea behind total consistency able expand totally consistent bound without losing consistency fact consistency implies total consistency positive trees proof explain difference two concepts use example containing set difference operator consider tree primitive interpretation function two rectangles shown figure 3a jt bounding function consistent totally consistent replace bound set z shown figure 3c new bounding function longer consistent hand bounding function totally consistent although would generated procedures detailed paper rest paper main consideration generation bounding functions totally consistent demand total consistency rather con sistency two reasons firstly spirit notion bound bound lower bound possible expand bound arbitrarily secondly practically introduced rewrite rules allow us form smaller consistent bounds however start say spherical bounds consistent totally consistent could apply rewrite rules without generating nonspherical bounds totally consistent bounds generate new totally consistent bound rewrite rules expanded form say sphere prove notions consistency total consistency equivalent positive trees invoking concept monotonicity given fixed csg tree could write value returned bounded interpretation function function bounds say c b z figure 3 example consistent bounding function totally consistent nodes tree v would contain operations monotonic whenever w x z informally set operations monotonic formula gets bigger arguments get bigger fi consistent fi 0 w fi fiomega bf always returnsomegagamma middle inequalities arising monotonicity v thus proving conjecture emphasis total consistency desirable property matter notation abbreviate totally consistent bounding function tcbf totally consistent bound tcbound see immediately standard bounding function totally consistent generate bounding functions may invoke principles explained earlier viz pi upward principle given bf fi tree internal node form replace bound superset pi downward principle given bf fi tree node 6 parent p replace bound superset fit justify principles two theorems pi upward theorem let bounded tree tcbf fi subtree another tcbf given differs fi fi 0 pi downward theorem let bounded tree tcbf fi subtree 0 immediate subtree another tcbf function given fi 0 differs fi 0 note fact bf returns supersets tcbf also tcbf definition total consistency means consider strict equality statement theorems theorems generalised x6 proof generalised theorems given appendix 5 applying tcbounds upward downward principles associated theorems tell us make legal rewrites bounds associated csg tree principles deterministic freedom chose superset appropriate smallest bound practise would chose way specifying suitable superset use deterministic rules instead chose rules need decide class k bounds boxes spheres etc write two operators u analogues always return results k b 2 k require aub 2 k atb 2 k aub b atb ab would normally attempt chose u return smallest bound k rules follows pi upward rule given bf fi tree internal node form replace bound fit u fit l pi fit r pi u isomega phi pi downward rule given bf fi tree node 6 parent p replace bound fit u another choice make implementing bounds namely order apply rules examples figure 1 figure 2 used natural application order use work define pass bottomup set applications upward rule throughout tree pass topdown set applications downward rule throughout tree thus usual order application generate tcbf computing standard bounds leaf nodes setting internal bounds omegagamma apply number passdown pass pairs interesting consider convergence properties tcbf system first question set bounds generated converge final value even bounds converge may know whether converge unique set values final set values might depend order rules applied however bound operators monotonic converge true aligned boxes unique answer assured theorem 1 operators u monotonic fixedpoint obtained application upward downward rules unique given initial fi proof fixedpoint 7 unique exists distinct fi 1 fi 2 fi 1 formed number application rules denote fi similarly operation gives smaller bf oe 1 fixedpoint system leftmost term 1 fi 1 contradicting fact distinct consider specific tcbf systems starting probably useful aligned box system 51 aligned box system consider detail case twodimensional aligned box system arguments apply number dimensions two dimensions box rectangle described fourtuple viz combine boxes rewrite rules need pair combination operators write u distinguish general case obvious operators use note may denoteomega hgamma1 gamma1 11i formulae hold formulae given hold bounds need able identify instances formed treat explicitly using identities operators applied unit time properties include identity u b operators commutative associative neither general distributes general bf system set bounds plus pair specific operators u call system bounds consisting aligned boxes number dimensions u boxbf system twodimensional boxbf system converges easily seen using argument applied systems bounds namely n total set initial bounds n values parameter fourtuple u operators generate new values set possible bounds finite convergence follows fact set bounds monotonically decreasing size tcbf system fact better show number passdown pass pairs required strictly limited n n number leaf nodes tree 7 fixedpoint bounding system set bounds whose values changed available rewrite rules call bf system sensible operator x systems consider sensible indeed also satisfy x operators u commutative bf fixedpoint system sensible proof inspection cases noting sensibility condition implies u idempotent x u take boxbf apply pass followed pass new boxbf fixedpoint new null bounds generated proof lemma 2 let fi 1 result applying upward pass fi 0 fi 2 result applying downward pass fi 1 assume new null bounds created wish show fi 2 satisfies conditions lemma 1 firstly note existing null bounds fi 0 descendent nodes must also null bounded otherwise pass generates fi 2 force null contradicting fact new null bounds generated simple case analysis confirms nullbounded internal node must satisfy conditions lemma 1 consider values internal node nullbounded case 1 note fi 1 l similarly case 2 resulting bounds nonnull apply conditional distributive identity show demonstrate 2 holds first consider onedimensional case bound closed interval say reference identities recalling x u x u z must nonempty obtain proves result onedimensional case result extends multidimensional case number dimensions considering dimension separately aligned box cartesian product intervals pi corollary aligned box tcbf system converge n passdown pass pairs n number leaves csg tree corollary follows subtree becomes bounded reached convergence 8 lemma 2 passdown pass pair either bounding function becomes fixedpoint subtree becomes null bounded prac tise examples generated models real objects say two three passes required convergence reached however generate artificial examples require linear number passes converge consider tree made binary tree structure explicit k corresponds open interval 1 example corresponds finding intersection two interlocking combs successive passdown pass pairs give following bounds 1 require approximately reach convergence n number leaf nodes tree figure 4 illustrates twodimensional case requires exactly consider tree takes union vertical bars intersects union horizontal bars pass topmost rightmost bar alternately bounded 9 52 practical tcbf systems 521 spherical bound system use spheres dimensionality bounds unique natural pair operators new spheres resulting applying operators smallest possible volume spherical bound described centre radius say given two spheres say euclidean distance c l c operators given ffl operation get two cases 8 use fact speed algorithms based results pruning parts tree become nullbounded 4 9 fact worst case boxbf system tree n leaves takes exactly n passes converge must 1 nonnull leaf left figure 4 worstcase example boxbfs sphere enveloped larger sphere result larger sphere otherwise result new sphere namely ffl operation u get three cases spheres apart result result smaller sphere otherwise result new sphere namely l r 2 2d case centre resulting sphere lies line centres original spheres sphere minimum radius consistent superset unionintersection original spheres results intuitive enough new sphere must contain two original spheres figure 5 shows various configurations differing values u case r l slightly confusing new sphere contain common maximalradius disc higherdimensional analogue lies perpendicular line joining centres originals spheres illustrated twodimensional slice figure 5b maximalradius line resultant intersection sphere shown dotted sphere operators commutative lack many interesting algebraic properties neither associative monotonic 10 thus theorem 1 hold consider three spheres b c b c b c overlapping without either subsuming f x uy figure 5 various configurations sphere operators smaller sphere forms intersection f figure collection circles exhibit two distinct fixedpoints fact fixedpoints system need unique consider figure 6 shows number circles colinear centres consider circles b c initial bounds nodes b c tree b c apply normal upthendown procedure internal nodes initially bounded omegagamma obtain circle uc final bound node two passes circles shown uc uc intermediate bounds nodes however take different order whereby take initial bound pass root node b c find c becomes nullbounded bound propagates nodes thus example exhibits two distinct fixedpoints depending order deterministic rules applied 522 convex hulls another possibility bounds system use convex hulls bound convex set operators u equivalent equivalent followed taking convex hull operations easily shown monotonic associative operators share properties boxbf system however operators take constant time compute assume dealing convex polytopes rather general convex sets two convex polygons merged time linear number edges polygons two convex polyhedra merged log n time 10 leads total cost bound ond pass pass twodimensional case n total number vertices leafnode hulls depth tree thus cost bound log n tree balanced implemented bound system within modelling system figure 7 illustrates twodimensional example imagine twodimensional robot arm modelled union seven polygons environment modelled union 4 rectangles figure 7a let romega e set test interferences robot environment r e appropriate 13 7 node subtrees model robot environment consider bounds generated system r figure 7b shows bounds initial pass together outlines primitives shown dotted intersection two hulls generated root node passed back tree subsequent pass figure 7c gives bounds next pass shows much robot nullbounded figure 7d shows next pass bounds overlap tree nodes becomes nullbounded next pass proof noninterference would occurred used boxbounds instead 523 prism bounds consider case wish evaluate intersection two entities described csg tree construct new tree one entity 2 apply rules generate good tcbf could use boxbounds aligned standard coordinate axes approach used 4 however may reason preferring align bounds 1 one set axes 2 another set formally accommodated using arbitrary polytopes bounds whilst choosing store bounds node boxes preferred alignment simple example consider intersection two twodimensional shapes shown figure 8 intersection described simple twoleaf tree using standard aligned bounds diagonal bar bound large square obtain horizontal bar bound node however use bound aligned diagonal bar bar compute intersection two bounds exactly root node whilst passing bounds leaves appropriate alignment gives bounds shown dotted lines two bars usefulness effect special rule root node preserve unit time cost bound operations general case would structure trees 1 2 still use standard box operations within subtree bounds alignment use special u operation root node combine information two subtrees example figure 8 may seem contrived intersection bars small however method works bounds arbitrary dimension dimensionality bounds increases number simultaneous constraints increases conspires make intersected region small particular used aligned bounds collision detection application intersection test performed four dimensions fourth dimension time arrange bounds object aligned boxes moving corresponding object gives rise different alignments fourdimensional prisms root node 5 c b figure 7 example convex hull bf system figure 8 example tcbfs different alignments 53 mixing bounds bound universally good situations might useful could use number different types bounds somehow combine results meaningfully would nice could take two arbitrary tcbfs tree say fi 1 fi 2 merge considering sets fit node strictly possible tcbounds resulting fi need totally consistent example consider however possible merge tcbfs generated normal way namely taking standard bf applying rewrite rules follows tcbfs instances sbounds see x7 merging property hold proviso mind consider different schemes mixing bounds one manner mixing bounds would compute number bounds parallel say sphere aligned box leave application use different bounds required example rendering applications application might generate potential edge segments membership classified csg tree 13 12 segments pruned bounds appropriate generating node first alternative possibility establish hierarchy bounds using say aligned boxes convex hulls scheme standard box bounds may computed first convex hulls generated nonnull bounded nodes two advantages waste time computing convex hull bounds nodes easily proved nullbounded box bounds generated used initial convexhull bounds aligned boxes leaf nodes replaced intersection convex hulls around primitives key idea refine current bounds required idea used university leeds isos system 1 use inner bounds well outer standard bounds 54 theoretical aspects completeness collect together results interest developing theory tcbounds pertaining happens make bounds exact idea ordering different tcbfs 541 exact combination operations imagine tcbf system start standard bound set omega bounds internal nodes combine bounds using exact form upward downward rules j u j systemthe exact combination systemhas interesting properties theorem 2 exactcombination system forms fixedpoint exactly one upward pass followed downward pass proof let fi 0 tcbf generated upward pass fi 00 tcbf generated downward pass general internal node node aomega downward pass obtain required lemma 1 node phi set z similarly fi 00 r effectively exact combination system best tcbf generate sense gives best fit bf generated way satisfies exact relationship active zones 12 tree namely izone node zt active zone 7 542 relative consistency initial tcbf fi particular tree original primitive interpretation almost incidental tcbfs generate also tcbfs primitive interpretation 0 fi tcbf observation suggests abstract away interpretation consider rewrite rules operating arbitrary bounding function idea behind relative consistency pi relative consistency given tree bounding function fi 0 relatively consistent respect fi written fi 0 fi fi fi 0 every primitive interpretation fi totally consistent fi 0 totally consistent easily shown upward downward principles produce new bounding functions relatively consistent ie fi 0 generated fi use upward downward principles fi 0 fi properties ffl reflexive transitive ffl preserved upward downward principles 6 double bounds totallyconsistent bounds derived idea reasoning supersets upper bounds although considering examples using set algebra results apply arbitrary boolean algebra demonstrated reference axioms theorems boolean algebra concept superset specialisation concept supremum appropriate boolean lattice powerset lattice interesting consider whether dual system developed based around lattice infimum indeed set algebra based around idea finding subsets set expressions subsets could used say prove interference demonstrating lower bound known lie within intersection set without ado introduce appropriate definitions pi definitions double bounding function dbf function tree nodes pairs subsets space one element pair called outer bound element called inner bound denote dbfs b b etc outer inner bounds bt respectively doublebounded interpretation j given rules otherwise leaf node jt words force interpretation node superset inner bound intersect outer bound say b consistent jt say b totally consistent jt b may consider dbf defining skin around sets given subtrees csg tree namely difference outer bound inner bound indeed take limiting case approximations exact starting exact sets using exact form combination operators end exact relationship skin active zone node 11 dbf whose outer bounds omega whose inner bounds totally consistent doublebounding function specifically izone uzone node respectively 12 7 tcdbf dbf whose outerinner bounds areomegagamma branch nodes l leaf nodes also tcdbf thus usually generate initial tcdbf use upward downward principles generate new tcdbfs let notation f x denote function returns values f everywhere except x returns appropriate principles pi upward principle dbfs given dbf b tree internal node form replace bound b 0 satisfying pi downward principle dbfs given dbf b tree node 6 parent p replace bound b 0 satisfying outline proof validity principles appendix note start tcdbf whose inner bounds obtain system tcbfs previously described also start tcdbf whose outer bounds allomegagamma immediate dual tcbf system inner bounds tempting try set specific inner bound system based internal boxes figure 9 shows construction twodimensional outer bound example figure 1 figure 9a shows suitable set initial internal bounds figure 9b shows bound set achieved single pass upward rule root node internally bounded system converged one reason natural choice performing bound operations outer bounds figure 9 picked rectangle interior set union largest area another problem object given root node small inner bound must smaller figure 9c shows bound set resulting tree rightmost primitive moved left slightly 10 width frame overlap area larger case overlap proven observing internal bounds 7 sbounds discussion far admitted csg trees containingomega phi operations admit set difference complement operations theory tidy illustrate means examples however practical results even useful indeed implemented within solid modelling system note definitions interpretation bounded interpretation etc natural extensions case new operators allowed consider simple tree b c figure 9 twodimensional example tcdbfs psi symbol set difference operation gamma noting identity see obvious upward rule refine bound fit fit outer bound extent jbj however information existing bounds bound point returned later consider double bounds thus obtain pi upward principle psi nodes replace fit superset fit already single downward principle set operations would nice extend difference case however following counterexample shows rule preserve totalconsistency counterexample consider tree b primitive interpretation tcbf example given however bf tc bf fi consistent examine counterexample see fi although totallyconsistent sort bf would generated starting standard bf applying upward downward rules suggests might retrieve rules restricting interesting bounds way may done sbounds pi sbound functions given tree primitive interpretation bounding function fi sbound function totally consistent respect smaller primitive interpretations ie jt j 0 fi 0 w fi 0 v sets returned sbound function called sbounds words introduced artificial constraintthat bf must respect smaller interpretations sbounds explored detail 4 give overview properties properties sbounds ffl standard bf sbound function ffl sbounds preserved upward principle downward principle cluding cases psi operations ffl fi 1 fi 2 two sbound functions tree primitive interpreta tion given need additional rule differences allowed might tempted always convert csg tree positive form one onlyomega phi internal nodes use rules tcbfs however true bounds generated necessarily cases example consider tree psi b psi c initial bounds b c b c respectively using system u operation equivalent boxbf system convergence occur one thendown pass bounds leaves convert equivalent tree aomega b phi c applying rewrite rules obtain bound c c rather effectively conversion positive form meant b export bound omegagamma whereas original form bound b could exported locally c 71 double bounds one problem extending tcbfs trees containing difference operations impossible bound complement interpretation subtree however dbfs contain outer inner bound seems plausible meaningful symmetric rules could developed particular obvious upward principle psi given dbf b tree internal node form replace bound b 0 satisfying unfortunately rule preserve consistency shown counterexample consider dbf applying rule gives b 0 consistent counterexample together others convinced us possible combine inner outer bounds consistent manner thus proper principle difference node pi upward principle doublebounds psi given dbf b tree internal node form replace bound effectively cannot pass useful information righthand child psi node conclusions presented might seem like bewildering array concepts definitions concerning various types bounds fact may organise concepts along different orthogonal axes one axis could label generality far work concerned standard bounds occupy one end axis consistent bounds occupy sbounds tcbounds concentrated tcbounds paper results apply practise start standard bf generate sbounds course totally consistent another axis could labelled accuracy bound boxes spheres might one end convex hulls little along exactshapes far end conversely might label axis speed computation note talking speed explicitly computing bounds active zones exact computed implicitly bound systems rich source algebraic problems work done boxbf system computationally useful nice algebraic properties unfortunately practical systems much harder analyse despite apparent simplicity monotonicity shown desirable property guarantees unique fixed point would suggest sphere system used simply grounds monotonic said much applications techniques csg modeller robmod 6 use boxbf system geometric computations matter course convergence rapid ignore time takes drawing volume property calculation like advantages performing bound computations tend small measurable however interference detection collision detection advantages huge speedups order magnitude common implicit intersection node root csg tree reductions size bounds tend large 4 raycasting could also benefit use tcbounds perform bound analysis ray bounded thin box objects another way thinking bound systems set constraints sub expressions example standard bound places definite constraints values x z coordinates points set given subexpression turning observation around regard rewrite rules tcbounds rules constraint manipulation system use solve constraint problems might normally given geometric significance indeed definitions rewrite rules hold boolean algebra rewriterules could principle used set tcbounds elements algebra stated topic proved rich ground theoretical results much work still done particular would like strengthen convergence results bf systems show practical promise namely spheres convex hulls meantime though general applicability upward downward theorems means safely use bound systems practical effect another area interest alternative orderings application rules implementations make use multiple bf systems lot surprises generated simple observations started acknowledgement work first author described paper supported serc studentship university edinburgh department artificial intelligence second author partially supported nsf grants ccr8703458 dcr8401898 authors would like thank mike brady encouragement promoting collaboration lead work r boundary evaluation using inner outer sets isos method gmsolid interactive modeling design analysis solids efficient intersection tests objects defined constructively collision detection fourdimensional intersection testing geometry engine robotics relationship sbounds active zones constructive solid geometry generalizing active zones settheoretic solid models experimental study null object detection algorithms e 2 computational geometry introduction solid modeling historical summary contemporary assessment active zones csg accelerating boundary evaluation set membership classification unified approach geometric intersection problems expoiting spatial structural locality geometric modelling tr computational geometry introduction active zones csg accelerating boundary evaluation redundancy elimination interference detection shading algorithms generalizing active zones settheoretic solid models efficient intersection tests objects defined constructively relationship sbounds active zones constructive solid geometry boundary evaluation using inner outer sets ctr stephen cameron efficient bounds constructive solid geometry ieee computer graphics applications v11 n3 p6874 may 1991 john hable jarek rossignac blister gpubased rendering boolean combinations freeform triangulated shapes acm transactions graphics tog v24 n3 july 2005 marco mazzetti luigi ciminiera computing csg tree boundaries algebraic expressions proceedings second acm symposium solid modeling applications p155162 may 1921 1993 montreal quebec canada aguilera ayala orthogonal polyhedra geometric bounds constructive solid geometry proceedings fourth acm symposium solid modeling applications p5667 may 1416 1997 atlanta georgia united states stephen cameron approximation hierarchies sbounds proceedings first acm symposium solid modeling foundations cadcam applications p129137 june 0507 1991 austin texas united states