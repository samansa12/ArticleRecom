stochastic petri net analysis replicated file system authors present stochastic petri net model replicated file system distributed environment replicated files reside different hosts voting algorithm used maintain consistency witnesses simply record status file contain data used addition place files reduce overhead model sufficiently detailed include file status current outofdate well failure repair hosts copies witnesses reside presented number copies witnesses fixed parameter model two different majority protocols examined b introduction users distributed systems often replicate important files different hosts protect subset host failures consistency files across database difficult maintain manually data abstraction replicated file introduced automate update procedure ellis83 popek81 stonebraker79 consistency files often maintained assigning votes copy file automatically assembling quorum majority votes file access requiring majority update insures one write set exist time quorum automatically includes least one recently updated copies system tolerates host failures extent minority votes may unavailable time file update still permitted paris suggests replacing copies witnesses contain data testify current state copies witnesses low storage costs simple update paris86a paris86 paris86 believed replacement copies witnesses minor impact availability file system availability analysis replicated file system performed markov chain often used jajodia87 paris86a paris86 markov chain constructed manually analysis often limited small systems perhaps three copies modeled highest level without proper tools difficult develop markov model large system detailed enough include failure repair hosts voting updating procedures higher level language needed description system allow automatic generation markov chain stochastic petri net model provides language present stochastic petri net model distributed file system whose structure independent number copies witnesses model automatically converted markov chain solved numerically state probabilities generated markov chains 1746 states describing replicated file system considered defining stochastic petri net model incrementally develop model includes copies witnesses failure repair requests voting solve model availability filesystem static adaptive voting algorithms examine performancereliability tradeoffs associated preferring copies vs preferring witnesses participate quorum majority available replicated file system mutual consistency various representatives replicated file maintained least three ways ellis83 writing copies update designating primary copy leader parker83 stonebraker79 using various weighted voting algorithms davcev85 ellis83 gifford79 jajodia87 paris86a paris86 thomas79 weighted voting algorithm copy assigned number votes set copies representing majority votes quorum must assembled update copies may assigned different weights number votes including none different quorums defined read write operations consistency guaranteed long quorums high enough disallow simultaneous read write operations disjoint sets copies simplest quorum policies require majority copies participate read write assigning one vote however system administrator alter performance manipulating voting structure replicated file gifford79 associated representative timestamp version number increased update time copies representing majority votes highest version number assemblage majority guaranteed contain representative highest version number copies version number identical time quorum copies gathered outofdate copy participating quorum brought uptodate transaction processed copies participating quorum become obsolete since longer highest version number paris suggests replacing copies witnesses decrease overhead maintaining multiple copies file witnesses contain data vote confirm current state copies created maintained easily simply contain version numbers reflecting recent write observed quorum gathered counting witnesses copies least one current copy must included copy version number highest witness version number update cannot performed paris suggests transforming witnesses copies vice versa needed assumptions model developed assume simplicity representative copy witness assigned one vote vote assignment called uniform assignment barbara87 shown optimize reliability fully connected homogeneous systems perfect links also assume copies witnesses transformed assume following scenario gathering quorum request received status request message sent site known contain representative representative residing functioning host computer answers communicating status majority representatives available subset chosen participate update selection process members participating subset tries minimize time needed service request including many current representatives possible preferably witnesses since fast update quorum thus formed first choosing current copy needed current witnesses current copies outdated witnesses outdated copies order current copies witnesses participating quorum updated remaining ones become outdated since recent timestamp host computers fail repaired thus representatives available times representative machine failed assumed outofdate machine subsequently repaired conservative unrealistic assumption possible exactly model whether representative gone outofdate host chose model would complex quorum cannot formed request received manual reconstruction initiated restore system original state keep model becoming complex consider write requests assume time lapse requests also assume hosts fail quorum gathered hosts may fail update procedure times events assumed exponentially distributed allow markov chain analysis times general distribution semimarkov analysis simulation would needed bechta84a 4 stochastic petri net petri net graphical model useful modeling systems exhibiting concurrent asynchronous nondeterministic behavior peterson81 nodes petri net places drawn circles representing conditions transitions drawn bars representing events tokens drawn small filled circles moved place place transitions fire used denote conditions holding given time event usually enabled combination conditions transition enabled combination tokens places arc drawn place transition transition place arcs used signify combination conditions must hold event occur combination conditions holds event occurs arc place p transition p input place arc p p output place conditions exclusive transition enabled input place contains least one token enabled transition fires removing token input place depositing token output place stochastic petri nets spn defined associating exponentially distributed firing time transition molloy81 natkin80 spn analyzed considering possible markings enumerations tokens place solving resulting reachability graph markov chain generalized stochastic petri nets gspn allow immediate zero firing time timed exponentially distributed firing time transitions immediate transitions drawn thin bars timed transitions drawn thick bars gspn solved markov chains well ajmone84 extended stochastic petri nets espn bechta84a bechta85 allow transition times generally distributed cases espn solved markov chain semimarkov process otherwise simulated model used paper basically gspn variations original current definition use term stochastic petri net spn generic meaning petri net stochastic timing three additional features control enabling transition included spn model inhibitor arcs transition priorities enabling functions inhibitor arc peterson81 place transition disables transition corresponding input place empty several transitions different priorities simultaneously enabled marking ones highest priority chosen fire others disabled enabling function logical function defined marking evaluates false disables transition specifically transition enabled 1 least one token input places 2 token inhibiting places 3 enabling funtion evaluates true 4 transition u priority satisfying 1 2 3 exists description transition labeled tuple namepriorityenabling function enabling function identically equal true absent priority indicated lower number indicates higher priority several enabled transitions scheduled fire instant probability distribution possibly markingdependent defined across determine ones fire spn present immediate transitions require specification probabilities since probability contemporary firing continuous exponential distributions null 5 model quorum consider spn shown figure 1 part larger one considered later certain moment time spn contains token place labeled start number tokens places labeled cc current copies cw current witnesses ow outdated witnesses oc outdated copies representing number representatives corresponding state beginning observation remaining places empty assume possible reach quorum token cc place minority hosts transition t16 enabled fire exponentially distributed amount time signifying time needed send status request messages receive responses t16 fires assembly quorum begins likely majority representatives respond subset must selected participate update mentioned earlier would like minimize time needed perform update prefer include many witnesses possible must always include current copy quorum token removed cc place deposited qc quorum copies place t16 fires token also deposited drive place start gathering representatives transitions 17 18 t19 t20 represent inclusion current witnesses current copies outdated witnesses outdated copies quorum respectively want transitions fire order 17 18 t19 20 assigned priorities 2 3 4 5 respectively want transitions fire majority reached associate enabling function q logical function q evaluates true majority representatives selected participate update transaction q logical complement q transition t17 fire current witness transition t18 fire current copy outdated witnesses updated necessary outdated copies made current last two events requires time transitions t19 t20 timed soon q evaluates true gathering stop 18 19 t20 might fire many times enabled q evaluates true transition 26 priority 6 enabled point tokens places qc qw quorum witnesses denote participants update sum tokens two places represents majority representatives file system want embed spn describing gathering quorum within larger spn including failures repairs update procedure consider quorum gathering model subnet activated token deposited start place exited token deposited done place cc cw ow oc places shared larger net shared places drawn doublecircle figures numbers used transitions correspond one two instances subnet numbers second instance 21 22 23 24 25 27 respectively instead 16 17 18 19 20 26 6 file system model overall model distributed file system shown figure 2 contents boxes labeled form quorum spn shown figure 1 exception cc cw oc ow places shared overall model left portion figure 2 models failure repair hosts copies reside right portion models failure repair hosts witnesses reside center portion models update transaction describe portion separately places cw dw ow far right figure represent number witnesses current host failed outofdate transition t2 represents failure host assume hosts identical transition t4 represents repair host transition t40 represents failure host outofdate witness since assume witness goes outofdate host fails output place transition t4 place ow similar structure copies consists transitions 1 t3 39 places cc dc oc assume copy host failed subsequently repaired check existence quorum file system possibly bringing uptodate action represented box labeled form quorum 2 host copy resides repaired corresponding token deposited oc place token also deposited try place represent attempt form quorum possible outofdate copy needs brought uptodate reaching quorum transition t41 insures one token exists place try token deposited place try possible reach quorum transition t15 fires token deposited start2 place spn figure 1 also token deposited place inq2 simply used signify quorum formed qc done qw places quorum gathering spn shown overall spn cc cw oc ow places quorum gathering spn respective places overall spn thus arcs places boxes shown explicitly figure 2 arcs shown explicitly figure 1 quorum gathered outofdate copy updated transition 13 representatives returned respective places transitions t12 14 transition t13 higher priority transitions t12 14 fires center section spn models normal update process transition t0 models time lapse update requests request received token deposited place req quorum formed function f evaluates true transition t5 fire deposit token start1 place box labeled form quorum 1 another instance quorum gathering spn qc1 qw1 done1 places common overall spn quorum gathering completed remaining current representatives become outdated transitions t8 10 two transitions moved tokens cc cw oc ow respectively t9 fires allowing update occur point representatives may updated transitions t6 7 hosts reside may fail transitions t28 29 await next request 7 manual reconstruction file configuration spn defined produces markov chain absorbing states correspond situations quorum cannot formed majority hosts since wanted analyze steadystate availability system introduce manual intervention reconstruct system quorum possible figure 3 shows spn used model manual reconstruction file structure request received possible gather quorum function f evaluates false transition t30 figure 2 fires deposits token start place figure 3 describe firings transitions t31 gather together outdated representatives deposit corresponding tokens places c w failed hosts must repaired representatives gathered repair represented timed transitions t36 37 representatives gathered transitions t33 t34 may begin firing bring representatives uptodate two transitions emptied places c w transitions t38 fire putting token done transition t35 figure 2 remove token token residing inrec restoring initial configuration 8 model specification model specified solution package cspl cbased stochastic petri net language based c programming language set predefined functions available definitions spn entities distinguishes cspl c predefined functions place trans iarc oarc harc used defining places transitions input arcs output arcs inhibitor arcs respectively also builtin functions debugging spn specifying solution method desired output measures enabling distribution probability functions transition defined user c functions markingdependency obtained using builtin functions markplace returning number tokens specified place enabling functions q f used respectively quorum gathering subnet figure 1 trigger reconstruction subnet figure 2 logical functions defined current marking spn keep functions simple defined three places overall spn inq1 inq2 inrec token place inq1 quorum formed normal update token place inq2 outofdate copy checking see valid quorum possible place inrec holds token manual reconstruction file system cspl code describing q f respectively following c programming language means logical means logical int q f else thus q evaluates true iff half total number representatives places qw qc least one copy given structure spn int f f markcc markinq1 markinq2 else thus current copy token place cc quorum reconstruction progress token places inq1 inq2 inrec representatives transition enabled firing rates timed transitions depend number tokens input place example transition t1 fires rate equal failure rate individual host multiplied number operational hosts tokens place cc float phi floating point constant representing failure rate single host marking dependent firing rates transitions representing host failures defined similarly 9 model experimentation two different quorum definitions varied mean time repair failed hosts number copies number witnesses sets experiments assumed parameters listed table 1 considered mean time repair 1 hour 2 hours 8 hours first set experiments defined quorum majority representatives quorum must include current copy previously discussed second set experiments relaxed definition requiring quorum consist majority representatives operational hosts example suppose total 3 copies 2 witnesses created one available current given requirement majority representatives must participate quorum update cannot serviced however require quorum consist majority representatives operational hosts quorum formed using available copy witness second assumption updates continue last copy fails manual reconstruction must performed idea concurrently investigated jajodia mutchler jajodia87 termed dynamic voting similar approach adaptive voting used design faulttolerant hardware systems siewiorek82 model adaptive voting instead static voting definitions q f need changed eliminate dependency places dw dc analyzed availability system observing probability token place inrec measure represents steadystate probability system undergoing manual reconstruction file system availability file system complement probability shown two quorum definitions table 2 hours model system one copy 11 states model system 4 copies 3 witnesses 1746 states hours see adaptive voting technique increases availability total number representatives small technique may decrease availability many representatives see example configuration 5 copies 2 witnesses availability system decreases copies replaced witnesses voting techniques certain point increases behavior explained considering factors affecting overall availability first replacing copies witnesses decreases total number copies probability copies regardless state witnesses higher negative effect availability especially sharp decrease availability experienced going dn2e 1 dn2e n representatives available present case n odd see jajodia87 discussion case n even reason quorum policy assuming time host assuming 7 quorum contain two copies two witnesses 52 case one copy three witnesses 43 case one copy quorum implies whenever copy becomes unavailable copies useless outofdate increase availability point dn2e less intuitive main cause probably quorum policy suggests investigations quorum policies effect availability needed hours adaptive voting technique always increases availability although improvement decreases number witnesses increases 5 representatives allowing one representatives witness increases availability static voting decreases adaptive voting 7 representatives assignment two witness status maximizes availability static voting however adaptive algorithm still performs better assumptions stated addition witnesses fixed number copies increase availability seen comparing results 3 copies 0 witnesses 099908 3 copies 2 witnesses 095992 3 copies 4 witnesses 095663 see table adaptive voting reason decrease availability adding extra witnesses explained examining procedure used selection participants quorum desire speed quorum gathering process gives preference witnesses quorum since update procedure witness fast however preference increases probability copies outofdate since current copy necessary quorum redundant copies often outofdate decrease availability results trying improve availability without considering performance quorum gathering procedure would give preference copies participants easily reflected spn model consideration priorities associated transitions figure 1 need changed include current copies outdated copies current witnesses outdated witnesses order table 3 compares availability 3 copies 0 2 4 witnesses two different preferences formation quorum using adaptive voting algorithm case addition witnesses favorably affects availability preference copies quorum increases time needed perform update since takes longer write copy witness table 4 compare steadystate probability system update state estimate probability spn looking probability token place inq1 figure 2 token likely place inq1 preference forming quorum given copies witnesses conclusions presented detailed stochastic petri net model replicated file system availability analysis model included failure repair hosts file updates quorum formation manual reconstruction file system total number representatives file varied one seven composition representatives number copies witnesses varied well using model investigated two different voting algorithms used maintain file consis tency first algorithm static voting required majority representatives participate update second algorithm adaptive voting required majority representatives operational units participate update cases adaptive voting algorithm resulted higher availability file system effect pronounced mean time repair host higher thus smaller number hosts available given time examined process actual participants update selected given majority available desire fast update process leads preference witnesses quorum effect decreasing availability file system decrease availability attributed fact representative partecipants quorum become outdated copies frequently outofdate increase availability file system preference given copies participants update unfavorable effect performance since takes longer perform update copy witness takes longer service request copies quorum participants future modeling efforts look effect converting copies witnesses vice versa effect using different quorum policies availability file system also investigate heuristics determining perform conversion espect able explore wide number policies making minor changes additions spn presented r class generalized stochastic petri nets performance evaluation multiprocessor reliability voting mechanisms extended stochastic petri nets applications analysis design unified package solution stochastic petri net models consistency recovery control replicated files roe file system weighted voting replicated data dynamic voting integration delay throughput measures distributed processing models reseaux de petri stochastiques voting witnesses consistency scheme replicated files voting variable number copies detection mutual inconsistency distributed systems petri net theory modeling systems locus network transparent theory practice reliable system design concurrency control consistency multiple copies data distributed ingres majority consensus approach concurrency control multiple copy databases tr class generalized stochastic petri nets performance evaluation multiprocessor systems reliability voting mechanisms dynamic voting majority consensus approach concurrency control multiple copy databases consistency recovery control replicated files petri net theory modeling systems extended stochastic petri nets design unified package solution stochastic petri net models weighted voting replicated data locus network transparent high reliability distributed system ctr g chiola marsan g balbo g conte generalized stochastic petri nets definition net level implications ieee transactions software engineering v19 n2 p89107 february 1993 yiannis e papelis thomas l casavant specification analysis paralleldistributed software systems petri nets transition enabling functions ieee transactions software engineering v18 n3 p252261 march 1992 yuanbao shieh dipak ghosal prasad r chintamaneni satish k tripathi modeling hierarchical distributed systems faulttolerance ieee transactions software engineering v16 n4 p444457 april 1990 changsik park john j metzner efficient location discrepancies multiple replicated large files ieee transactions parallel distributed systems v13 n6 p597610 june 2002