foundation computable solid modelling solid modelling computational geometry based classical topology geometry basic predicates operations membership subset inclusion union intersection continuous therefore computable sound computational framework solids geometry built framework computable predicates operations practice correctness algorithms computational geometry usually proved using unrealistic real ram machine model computation allows comparison real numbers undesirable result correct algorithms implemented turn unreliable programs use domaintheoretic approach recursive analysis develop basis effective realistic framework solid modelling framework equipped well defined realistic notion computability reflects observable properties real solids basic predicates operations solids computable model admits regular nonregular sets supports design methodology actual robust algorithms moreover model able capture uncertainties input data actual cad situations b introduction correctness algorithms computational geometry usually proved using real ram machine 22 model computation since model realistic correct algorithms implemented turn unreliable programs cagd modeling operators effect rounding errors consistency robustness actual implementations open question handled industrial software various unreliable expensive epsilon heuristics remain unsatisfactory authors claim robust algorithm one whose correctness proved assumption realistic machine model 17 18 branch computer science called recursive analysis defines precisely means context realistic turing machine model computation compute objects belonging noncountable sets real numbers paper use domaintheoretic approach recursive analysis develop basis effective framework solid modeling settheoretic aspects solid modeling revis ited leading theoretically motivated model shows interesting similarities requicha solid model 23 24 within model unavoidable limitations solid modeling computations proved sound framework design specifications feasible modeling operators provided consequences computation boundary representation paradigm sketched incorporate existing methods 13 28 16 14 15 general mathematically wellfounded theory moreover model able capture uncertainties input data 8 19 actual cad situations need following requirements mathematical model 1 notion computability solids well defined 2 model reflect observable properties real solids 3 model closed boolean operations 4 nonregular sets 1 captured model well 5 support design methodology actual robust algorithms section 2 outline elements recursive analysis domain theory used subsequent sections section 3 presents solid domain mathematical model computable rigid solids section 4 give illustration simple case one design robust algorithm light domaintheoretic approach recursive analysis domain theory section briefly outline elements recursive analysis 26 7 5 21 domain theory 1 29 2 need paper first deal n set nonnegative integers function f n n recursive computable general purpose computer eg turing machine c program means finite program written general language output fn whenever input n 2 n recursively enumerable subset n set image recursive function recursive set set whose complement also sets recursive construction nontrivial next consider set q rational numbers since q countable onetoone correspondence n write therefore computability q reduces computability n theory computability set real numbers r uncountable involved since set finite programs written general purpose computer countable follows set computable real numbers ie output finite program also countable characterized terms recursive functions real number r computable exists recursive functions f g means r effective limit computable sequence rational numbers say real number lower respectively upper semi computable limit increasing respectively decreasing computable sequence rational numbers follows real number computable lower upper semicomputable similarly function f b r computable effective limit sup norm computable sequence rational polynomials intuitively suitable representation sign binary system real number given infinite sequence digits computable function one compute finite part output sequence reading finite part input sequence follows computable function always continuous respect euclidean topology r domain theory originally introduced independently scott 27 mathematical theory semantics programming languages ershov 12 studying partial computable functionals finite type domain structure modeling computational process data type incomplete uncertain specified information partially ordered set partial order corresponds notion information simple example domain ftt ff g boolean values tt ff together least element one thinks 1 set regular closure interior undefined boolean value domain also equipped notion completion cauchy completeness metric spaces notion approximation socalled scott topology domain 0 every open set upward closed ie whenever scott open set contains element also contains element element see appendix precise definitions class socalled continuous domains recent years successfully used modeling computation number areas analysis 9 continuous domain countable subset basis elements every element domain completely specified set basis elements approximate one use countable basis provide effective structure domain obtain notions computable element effectively given domain computable function two effectively given continuous domains give two examples useful continuous domains section motivate idea solid domain introduced next section interval domain i0 1 n unit box 0 1 n ae r n set nonempty ndimensional subrectangles 0 1 n ordered reverse inclusion basic scott open set given every open subset r n collection rectangles contained map x embedding onto set maximal elements i0 1 n every maximal element fxg obtained least upper bound lub increasing chain elements ie shrinking nested sequence subrectangles containing fxg interior thereby giving approximation fxg equivalently x set subrectangles rational coordinates provides countable basis one similarly define example interval domain ir n r n interval domains igamma1 1 ir r one point compactification r used develop feasible framework exact real arithmetic using linear fractional transformations 10 20 important feature domains context paper used obtain computable approximations operations classically noncomputable example comparison real number 0 computable however function neg igamma1 nega b best computable approximation predicate upper space ux compact metric space x set nonempty compact subsets x ordered reverse inclusion fact ux generalization interval domain similar properties example basic scott open set given every open subset ae x collection nonempty compact subsets contained interval domain map x embedding onto set maximal elements ux upper space gives rise computational model fractals measure integration theory 9 idea solid domain next section closely linked upper space 0 1 n 3 domaintheoretic model section introduce solid domain mathematical model representing rigid solids focus settheoretic aspects solid modeling requicha introducing rsets model 23 model motivated requirements 1 5 given introduction subset topological space ffi c denote respectively closure interior boundary complement regularization subset defined requicha 23 24 subset ffi say set regular equal regularization 31 solid domain solid domain s0 1 n unit cube 0 1 n ae r n set ordered pairs b compact subsets 0 endowed information order elements s0 1 n called partial solids proposition 31 s0 continuous domain proposition 32 b 2 s0 1 n exists subset 0 1 n one take example say represents subset follows partial order s0 1 n isomorphic quotient power set 0 1 n equivalence relation ordering given subset x 0 1 n classical membership predicate 2 0 continuous except x follows best continuous approximation predicate value taken x recall open set containing contains whole set ftt ff g two subsets equivalent best continuous approximation membership predicate analogy general set theory set completely defined membership predicate solid domain seen collection subsets distinguished continuous membership predicates definition solid domain consistent requirement 1 since computable membership predicate continuous definition also consistent requirement 2 closely related way consider idealization machine used measure mechanical parts two parts corresponding equivalent subsets cannot discriminated machine moreover partial solids generally domaintheoretically defined data types cf section allow us capture partial uncertain input data 8 19 encountered realistic cad situations starting continuous membership predicate natural definition complement would swap values tt ff means complement b b cf requirement 3 requirement 4 figure represents subset x 0 1 2 regular regularization removes external internal dangling edge set captured framework requicha model subsequent figures two components b partial solid depicted separately picture clarity proposition 33 maximal elements s0 1 n precisely represent regular sets words maximal elements form b b regular next consider boolean operators first note regularized union 23 24 two adjacent three dimensional boxes ie product intervals computable since decide whether adjacent faces contact one would decide equality two real numbers computable 21 requirements 1 3 entail existence boolean operators computable respect realistic machine model eg turing machine order define boolean operators solid domain obtain truth table logical boolean operators ftt ff g consider logical boolean operator applied continuous membership predicates two partial solids would define union indeed truth table parallel domain theory see 2 page 133 one likewise build truth table note similarities inonout points classifications used boundary representation based algorithms 25 3 truth tables follow definition boolean operators partial solids beware given two partial solids representing adjacent boxes union would represent settheoretic union boxes illustrated figure 1ooo 2 defined continuous membership predicate points 0 1 n order able compute predicate extend interval domain i0 1 n defining 2 i0 ff proposition 34 following maps continuous ffl 2 i0 similarly one define continuous predicate ae s0 g 32 computability solid domain order endow s0 1 n computability structure introduce two different countable bases lead notion computability correspond different types algorithms use rational hyperplane subset r n form fx 0 rational numbers least one nonzero rational polyhedron regular subset 0 1 n whose boundary included finite union rational hyperplanes notice rational polyhedron may connected may also empty set dyadic number rational number whose denominator power 2 dyadic voxel set finite union cubes product n intervals whose endpoints dyadic numbers notice every voxel set rational polyhedra partial rational polyhedron prp element b 2 s0 1 n b rational polyhedra following prp stands set prps partial dyadic voxel set pdvs element b 2 s0 1 n b dyadic voxel sets pdvs stands set pvdss set prp effectively enumerable prp represented finite set integers ie rational coordinates vertices incidence graph exists program compute one one correspondence n prp write deltag proposition 35 prp forms countable basis solid domain s0 1 n moreover solid domain effectively given respect enumeration fr 0 deltag basis therefore every element s0 1 n least upper bound sequence prps approximating ii predicate r k r j k j fact predicate recursive exists program able decide pair integers k j whether r k r j practical point view implies boolean operators rational polyhedra computable see 6 efficient implementation subset compact intersection countable set rational polyhedra general notion computability domains see appendix element b 2 computable set fkjr k bg obtain class computable partial solids replace prp basis pdvs basis notion computability somewhat weaker one could expect consider computable partial solid b computable point x 2 0 1 n n exists program compute increasing sequence converging b program compute increasing sequence k rational intervals i0 1 n converging x two programs one obtain program compute increasing sequence rational numbers representing square minimum distance k k follows minimum distance x lower semicomputable real number however distance may computable introduce stronger notion computability make distance computable element b 2 s0 1 n recursive set fkjr k bg recursive shown 4 b recursive exists program compute two nested sequences rational polyhedra b effective limits sequences respect hausdorff metric 4 several related notions computability compact sets given setting notion computable partial solid b means b core notion recursive partial solid means b recursive positive negative result proposition 36 boolean operators s0 1 n computable however intersection two recursive partial solids may recursive illustrated figure two initial recursive partial solids represent regular sets details construction presented full version paper crucial property left endpoint lower horizontal line segment limit computable increasing bounded sequence rational numbers lower semicomputable computable intersection 1 2 therefore horizontal segment whose leftend point computable therefore requirement3 prevents us choose recursive partial solids model 1a 2 however choose following notion stronger computability neither weaker stronger recursiveness say element b 2 s0 1 n lebesgue computable computable lebesgue measures b computable note lebesgue measure c ae r n therefore b lebesgue computable exists program compute increasing sequence proposition 37 boolean operators s0 1 n lebesgue computable words exists program given two increasing sequences prps defining two partial solids lebesgue measures effectively converging computes increasing sequence prps defining intersection lebesgue measures effectively converging lebesgue computable partial solid b manufactured error made small want volume assuming idealized manufacturing device table compares general three notions computable solids partial solid distance point boolean operators lebesgues measure computable semicomputable computable noncomputable recursive computable noncomputable noncomputable lebesgues computable semicomputable computable computable stage work model choice would lebesgue computable partial solids since stable boolean operators 4 robustness issues illustrate rudimentary class boundary represented solids domaintheoretic approach matches requirement 5 usually robustness issues show two related way numerical computation wellspecified case discontinuities example intersection tangential partially overlapping surfaces ii values logical predicates evaluated numerical computations inconsistent resulting invalid output catastrophic failure algorithm 41 disk domain consider set disks euclidean plane disk represented three real numbers giving coordinates center radius x r r 0 abuse notation element denotes real triple defining corresponding disk plane context always makes clear meaning mind define domain interval disks set interval triples k k add bottom element partially order reverse inclusion k v l 3 domain isomorphic maximal elements identified elements element said rational x gamma k r k rational numbers general theory computability domains see appendix k computable least upper bound increasing computable sequence rational interval disks exists program compute increasing sequence definition consistent solid domain introduced section 3 image fk interval disk k 2 partial solid easily shown f monotonic continuous fact computable respect natural effective structure induced ir 2 theta r restricted interval disks contained 0 1 2 f fact embedding 42 domain relative position disks consider combinatorial part computation boolean operators disks purpose consider following map theta r 3 predicates 3 theta domain fgamma g defined 0 domain topology fgamma g ensures predicates continuous inequalities range made 11 values defining relative position two disks denote set 11 values f subset domain fgamma g 3 whose order relation induced order relation fgamma g represented figure 43 extension actual computation define inf denotes infimum greatest lower bound exists every subset since f bounded complete domain see appendix p best continuous extension p possible compute image p k l pair k l rational interval disks reduces evaluation sign polynomials q see 6 two increasing sequences rational interval disks increasing respect v defining pair interval disks one compute increasing sequence f defining relative position actual image computed finite time however image maximal element f one never knows output refined using accurate input ie terms two rational interval disk sequences behaviour consistent requirement 2 physical world statement two disks tangent example means tangent relevant accuracy accurate measuring may reveal actually intersect fact disjoint b b b b b b b aaa aa aa b aa aa 5 conclusion solid domain described satisfies requirements computability observable properties closure boolean operations admission nonregular sets design robust algorithms stated introduction classical analysis framework allowing discontinuous behaviour exact real number comparisons neither realistic model interaction physical world measuring manufacturing realistic basis design algorithms implemented realistic machines able deal finite data authors believe domaintheoretic approach even initial stage application solid modeling computational geometry powerful mathematical framework model partial uncertain data guide design robust software solid model defined general class topological spaces particular locally compact hausdorff spaces r n also represented equivalently terms pairs open sets equivalently terms continuous functions space boolean domain ftt ff g deal issues future paper future work use domaintheoretic framework capture information solids geometric objects particular deal generally boundary representation differential properties curves surfaces c k g k properties also focus actual computations applying methodology illustrated section 4 complex situations appendix section give formal definitions number notions domain theory used paper think partially ordered set poset p v set output computation partial order order information words v b indicates less information b example set f0 1g 1 finite infinite sequences bits 0 1 v b sequence initial segment sequence b poset v b simply means b bits information nonempty subset p directed pair elements exists c 2 v c b v c directed set therefore consistent set output elements computation every pair output b output c information b directed complete partial order dcpo domain partial order every directed subset p least upper bound lub denoted f easily seen f0 1g 1 dcpo say dcpo pointed least element usually denoted called bottom two elements b dcpo say waybelow approximates b denoted b every directed subset b v f exists c 2 v c idea finitary approximation b whenever lub consistent set output elements information b already one input elements consistent set information f0 1g 1 b iff v b finite sequence closed subsets scott topology domain subsets c downward closed ie closed taking lubs directed subsets ie every directed subset c f 2 c basis domain subset b every element x 2 domain set b fy 2 bjy xg elements basis waybelow x directed f continuous domain dcpo countable basis words every element continuous domain expressed lub directed set basis elements approximate domain bounded complete every bounded subset lub domain every subset infimum greatest lower bound one easily check f0 1g 1 continuous dcpo set finite sequences form countable basis shown function f dcpos continuous respect scott topology monotone ie v b fa v fb preserves lubs directed sets ie directed f f f a2a fa continuous domain least element effectively given wrt enumeration countable base deltag b set f mn standard pairing function ie isomorphism x 7 xyxy1 means master program generates pairs basis elements b say x 2 computable set fnjb n xg equivalent say recursive function g b gn n0 increasing chain f say continuous effectively given continuous domains basis computable set f mn jb fan g equivalent say f maps computable elements computable elements effective way every computable function shown continuous function 30 theorem 3616 shown 11 notions computability domain ir intervals r induce class computable real numbers computable real functions classical theory 21 described section 2 acknowledgements first author supported epsrc would like thank hospitality institute studies theoretical physics mathematics tehran part work done r domain theory domains lambdacalculi toward topology computational geometry computability subsets euclidean space closed compact subsets computing exact geometric predicates using modular arithmetic single precision introduction recursive function theory robustness numerical methods geometric computation problem data uncertain domains computation mathematics new representation exact real numbers domain theoretic approach computability real line computable functionals finite types epsilon geometry towards robust interval solid modeling curved objects robust interval algorithm curve intersections boundary representation modelling local tolerances representation b toward data type solid modeling based domain theory algorithmic tolerances semantics data exchange efficient online computation real functions using exact floating point computability analysis physics computational geometry introduction mathematical foundations constructive solid geometry representation rigid solids boolean operations solid modeling boundary evaluation merging algorithms outline mathematical theory computation using tolerances guarantee valid polyhedral modeling results mathematical theory domains tr computational geometry introduction computability epsilon geometry building robust algorithms imprecise computations using tolerances guarantee valid polyhedral modeling results dynamical systems measures fractals via domain theory boundary representation modelling local tolerances effective algebras domain theory towards robust interval solid modeling curved objects algorithmic tolerances semantics data exchange domaintheoretic approach computability real line foundation computable solid modeling domains lambdacalculi computability subsets euclidean space computable banach spaces via domain theory representations rigid solids theory methods systems type theory via exact categories measure twodimensional regions polynomialtime computable boundaries ctr martin ziegler effectively open real functions journal complexity v22 n6 p827849 december 2006 abbas edalat andr lieutier domain theory differential calculus functions one variable mathematical structures computer science v14 n6 p771802 december 2004