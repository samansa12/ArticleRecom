load balancing multicomputerdistributed systems equipped circuit cutthrough switching capability abstractfor multicomputer distributed systems use circuit switching wormhole routing virtual cutthrough last two collectively called cutthrough switching communication overhead message delivery time depend largely upon link contention rather upon distance source destination larger communication overhead longer delivery delay occurs message traverses route heavier traffic one longer distance lesser traffic characteristic greatly affects selection routes interprocessor communication andor load balancing consider loadbalancing problem types systems objective find maximum load imbalance eliminated without violating traffic capacity constraint route eliminate imbalance keeping maximum link traffic low possible investigate loadbalancing problem various conditions first consider case excess load overloaded node divisible devise network flow algorithm solve type load balancing problem optimally polynomial time next impose realistic assumption system uses specific routing scheme excess load transferred overloaded node underloaded node must use route found routing scheme case use graph transformation technique transform system graph another graph network flow algorithm applied solve load balancing problem optimally finally consider case excess load overloaded node indivisible ie excess load must transferred entity show loadbalancing problem type becomes npcomplete propose heuristic algorithm solution b introduction multicomputer distributed systems dynamic creationdeletion data andor files may temporarily overload nodessites storage space leaving others underloaded since storage resources nodesite usually limited uneven datafile distribution may result inefficient use storage space affect future datafile creation example nodessites may sufficient space store new datafiles even overall system sufficient space datafiles load balancing respect thus transfer excess data load overloaded nodes underloaded nodes balance data load among nodes system multicomputer distributed systems use circuit switching wormhole routing 9 virtual cutthrough 8 communication overhead message delivery time depend largely upon link contention rather upon distance source destination larger communication overhead longer delivery delay results message traverses route heavier traffic one longer distance lesser traffic characteristic greatly affects selection routes interprocessor communication ipc andor load balancing objective selecting route ipc load balancing thus minimize traffic volume link communication overheaddelay due link contention minimized note objective also reduces probability blocking future messages transferring load overloaded nodes underloaded ones balances storage load among nodes minimizing maximum link contention among links balances communication load among links major difference ipc load balancing former case must select route routes pair communicating processors latter case select route routes overloaded node one underloaded nodes note excess load overloaded node transferred underloaded node nodes instead particular one difference variations ipc routing problem nphard optimal algorithms polynomialtime complexity exist several variations load balancing problem kandlur shin 7 studied route selection problem interprocessor communication multicomputer networks equipped virtual cutthrough switching capability paper study instead route selection problem load balancing multicomputer distributed systems use circuit switching wormhole routing virtual cutthrough main concern find maximum load imbalance eliminated routes eliminate imbalance without violating traffic capacity constraint 3 link keeping maximum link contention low possible work significant extension bokharis work 3 solved load balancing problem several restricted assumptions 1 unit load imbalance overloaded underloaded node ie node either one unit excess load one unit deficit load neutral 2 contention allowed link ie one unit excess load transferred via link moreover solution approach take account contention excess load transferred among processors ipc traffic paper relax assumptions load imbalance node arbitrary value instead one unit one unit excess load transferred via link long links traffic capacity constraint violated two cases studied first consider case excess load overloaded node divisible ie arbitrarily divided transferred one underloaded nodes second consider case may one entities excess load node indivisible must transferred underloaded node entity also take account effect existing ipc traffic route selection transferring excess load result load balancing problem considered paper much general practical difficult solve one treated 3 3 bokhari considered multicomputer systems use specific routing schemes particular considered mesh hypercube interconnection networks use rowcolumn columnrow ecube routing schemes respectively used graph transformation technique network flow algorithm solve load balancing problem systems graph transformation schemes used meshes hypercubes different correctness trivial prove especially case hypercube interconnection networks contrast propose simple unified graph transformation scheme network flow algorithm solve load balancing problem multicomputerdistributed systems without specific routing schemes proposed graph transformation scheme together network flow algorithm works larger class routing schemes including rowcolumn columnrow e cube schemes proposed scheme also intuitive appeal correctness easy prove proposed graph transformation scheme network flow algorithm show case divisible excess load load balancing problem without specific routing schemes solved optimally polynomial time ie find maximum load 3 defined later imbalance eliminated without violating traffic capacity constraint link minimizing maximum contention among links case indivisible excess load first prove load balancing problem npcomplete propose heuristic algorithm rest paper organized follows section 2 formally define load balancing problem considered paper briefly review network flow problem whose solution algorithms used solve load balancing problem section 3 discuss apply network flow algorithm described section 2 optimally solve load balancing problem assumptions excess load divisible specific routing scheme system consideration section 4 show transform representing graph system specific routing scheme another graph technique described section 3 used find optimal solution load balancing system section 5 give npcomplete proof heuristic algorithm load balancing problem indivisible excess load paper concludes section 6 problem formulation network flow algorithm 21 problem formulation system consideration either distributed pointtopoint network multicomputer interconnection structure mesh hypercube use directed graph e represent system vertexnode set v represents set nodesprocessors system edge set e represents set communication links also traffic capacity simply capacity function c defined edge set e ie edge associated traffic capacity cv maximum communication volume measured data units bits bytes packets take place node v node v j constraint link u v cu v defined 1 note traffic capacity defined paper link bandwidth maximum data transmission rate link think traffic capacity link maximum contention defined later allowed link also note using notation v denote edge allows one edge vertex another vertex however impose unnecessary constraints multiple edges vertex another vertex transformed single edges introducing new vertex properly redefining capacity function assume system needs perform load balancing node either loaded underloaded neutral total excess load overloaded node e deficit load underloaded node j 2 v denoted j excess deficit loads arbitrary values opposed one unit assumed 3 3 assume global state system degree load imbalance node known central load balancing controller determination degree load imbalance node beyond scope paper require e units load transferred overloaded node underloaded nodes j units load transferred underloaded node j overloaded nodes call requirement load transfer constraint also assume without loss generality transferring one unit load link incurs one unit communication volume link link capacity constraint requires total communication volume link v exceed traffic capacity cv link system may may use specific routing scheme specific routing scheme used path p v v j said feasible underlying routing scheme routing scheme find p one possible path v v j assume least one feasible path vertex vertex jej jv j note may one feasible paths vertex another vertex since assume one edge vertex another vertex use sequence vertices denote path paper consider routing schemes satisfy following properties p1 edge e feasible path ie v feasible path v v j p2 subpath feasible path also feasible ie path v 1 feasible path also feasible 1 p3 last edge feasible path overlaps first edge another feasible path path formed combining two feasible paths also feasible ie v 1 two feasible paths v 1 also feasible fig 1 routing schemes commonly used meshes hypercubes rowcolumn column row ecube routing algorithms respectively mesh interconnection network considered two dimensional array processor denoted hx yi connected four neighboring processors hx sigma 1 yi hx sigma 1i boundaries array may wrapped around hand ndimensional hypercube ncube 2 n processors labeled processor labeled binary representationaddress hb feasible feasible figure 1 property p3 routing schemes considered paper two processors connected binary addresses differ exactly one bit rowcolumn algorithm meshes routes messagepacket first horizontally source node node column destination node vertically destination node example message source node h3 4i destination node h5 2i routed via path h3 4i h4 4i h5 4i h5 3i h5 2i ecube algorithm hypercubes always routes message node closely matches address destination node comparison beginning least significant bit addresses example message source node h01110i destination node h10101i routed via path h01110i h01111i h01101i h00101i h10101i easy check rowcolumn columnrow routing algorithm meshes satisfies properties p1p3 ecube routing algorithm hypercubes satisfies properties p1 p2 check ecube routing algorithm also satisfies p3 let v two feasible paths ncube ecube routing algorithm let addresses v j v j1 hb respectively recall since v j1 two adjacent nodes binary addresses differ one bit according ecube algorithm addresses nodes v j1 must form easy see path v 1 formed combining two feasible paths also feasible path want find maximum load imbalance eliminated routes eliminate imbalance without violating link capacity load transfer constraints minimizing maximum link contention 22 minimax flow algorithm solution approach load balancing problem considered paper based flow problem solution algorithm described 6 4 minimax flow algorithm finds maximum flow network 01 weight function also minimizes maximum edge cost cost edge defined weight times flow edge applying algorithm load balancing problem one view maximum flow maximum load imbalance eliminated edge cost link contention describing solution approach load balancing problem first give brief review minimax flow problemalgorithm details network flow problem flow problemalgorithm found 10 6 respectively c network vertexnode set v edge set e source sink capacity function e underlying directed graph 5 set positive real numbers edge u v 2 e also associated nonnegative realvalued weight wu v ease discussion define c w defined v theta v say network 01 weight function w flow network n function satisfies following properties 1 capacity constraint 2 conservation condition edge u v 2 e fu v called flow u v u v called net flow u v capacity constraint states flow u v bounded capacity cu v conservation condition states net flow going node except source sink equal net flow going node value flow f denoted jf j net flow going source ie load balancing problem divisible excess load transferring fu v units load u v fv u units load v u assuming fu v fv u replaced 4 brought attention ahuja 2 designed similar algorithm solve minimax transportation problem algorithm also adapted solve minimax flow problem 5 without loss generality assume g simple graph ie loop edge vertex v multiple edges edges vertex u another vertex v therefore edge represented two end vertices edge note however assumption easily enforced introducing dummy vertices properly redefining capacity weight functions graph g originally satisfy assumption transferring fu v gamma fv u units net load u v without changing value flow load without increasing contention flow edge network therefore f flow fu v fv u 0 flow u v simply replaced fu v gamma fv u flow v u 0 note fu v fv u 0 implies u v v u belong e note however replacement operation valid excess load indivisible since one indivisible excess load fu v units transferred u v another indivisible excess load fv u units transferred v u cannot cancel replaced single load transferred one vertex u v 2 e fu say flow f saturates edge u v call u v fsaturated edge n edge cost respect flow f edge u v 2 e defined wu v delta fu v total cost flow f defined v flow problem 6 find maximum flow f minimizes maximum edge cost ie minimizes max uv2e wu v delta fu v show load balancing problem transformed minimax flow problem 01 weight function henceforth concentrate networks 01 weight functions definition given network c 01 weight function w define new network edge u v 2 e edge u v 2 e fi called critical edge wu let f maximum flow n f fi maximum flow nfi since c fi u v cu v u v 2 e jf vg easy see fi therefore jf fi capacity fi critical edges nfi maximum edge cost note weight critical edge 1 allowed network nfi hence minimum value maximum edge cost maximum flow n fi fi minimum value fi jf fi maximum flow nfi 2 propose 6 minimax flow algorithm mmc01 solution minimax flow problem 01 weight function mmc01 simply finds fi constructs maximum flow network nfi completeness list algorithm mmc01 fig 2 summarize however sake conciseness omit proofs correctness time complexity algorithm interested reader referred 6 details idea behind algorithm mmc01 iteration variable fi constructed network nfi set maximum edge cost allowed iteration maximum edge algorithm mmc01 step 1 find maximum flow f value jf j network c step 2 let number edges nonzero weights n wlog assume 1 step 3 construct network find maximum flow f fi value jf fi j nfi jf step 5 step 4 let delta jf let r set f fi saturated critical edges nfi ie go step 3 step 5 maximum flow f fi minimizes maximum edge cost found maximum edge cost respect flow f fi fi figure 2 algorithm minimax flow problem 01 weight function cost capacity edge u v wu set mincu v fi ie flow allowed go edge u v restricted mincu v fi hence cost edge u v bounded mincu v fi delta wu v fi algorithm repeatedly constructs maximum flows networks nfi increasing values fi steps 34 initially fi 0 step 2 jf maximum flow zero cost otherwise jf fi optimal value fi ie minimum value maximum edge cost fi found step 3 jf optimal value fi found u v wu f fi saturated critical edge nfi therefore get larger flow need increase capacities critical edges let delta defined algorithm step 4 shown 6 fi delta fi hence set delta repeat process step 4 assignment guarantees value fi always less equal optimal value fi upon termination jf also shown 6 algorithm mmc01 terminates iterations hence time complexity delta mnm number edges nonzero weight mnm time complexity algorithm used algorithm mmc01 find maximum flow network jv vertices edges 3 systems without specific routing schemes section discuss load balancing problem systems without constrained specific routing scheme ie excess load transferred overloaded node underloaded node j use route path j first consider case excess load overloaded node arbitrarily divided transferred one underloaded nodes example node v excess load e nodes v j v k deficit load j k respectively transfer e ij e ik units load v v j v k respectively e real numbers case excess load indivisible ie overloaded node may one entities excess load transferred underloaded node entity load balancing problem becomes difficult defer discussion case section 5 case excess load arbitrarily divisible algorithm mmc01 described section 22 easily applied find maximum amount load imbalance eliminated minimizing maximum link contention given graph representation e multicomputer distributed system capacity function c let ae v set overloaded nodes node excess load e set underloaded nodes node j deficit load j e j real numbers note recall e maximum amount load transferred underloaded nodes j maximum amount load receive overloaded nodes mentioned section 1 assume e j given determination beyond scope paper construct new graph g 0 adding g new source node new sink node tg define new capacity function c 0 v current communication volume link v due interprocessor communication traffic ie c 0 v maximum amount load transferred link edge v violating traffic capacity constraint finally weight function w defined wu recall load balancing problem considered paper want find maximum amount load imbalance eliminated minimizing maximum link contention equivalent find minimax flow network 01 weight function w let fv amount load transferred link v load balancing procedure activated two possible ways define link contention depending type communication traffic minimized link c1 concerned minimizing amount total communication traffic link v contention f v concerned minimizing amount load transferred link v define contention fv c2 simply use algorithm mmc01 find minimax flow f network weight function w value jf j maximum edge cost flow f found mmc01 maximum load imbalance eliminated maximum edge contention flow respectively c1 link contention defined f v network nfi redefined follows f defined define new network edge u v 2 e edge u v 2 e fi called critical edge wu moreover initial value fi step 2 mmc01 changed max uv2e f u v case value fi iteration mmc01 maximum contention f u v allowed iteration since cases c1 c2 solved similarly except graph representations need appropriately defined unless otherwise stated assume following discussion contention edge u v defined fu v ie total amount excess load transferred edge suppose excess load arbitrarily divisible without loss generality assume smallest indivisible load entity one unit case flow f capacity c redefined functions v theta v z set positive integers algorithm mmc01 still applied find integral minimax flow network n except statement fi fi delta step 4 changed fi fi g g x xy xz jl ik figure 3 illustration graph transformation 4 systems specific routing schemes section discuss load balancing problem systems special routing schemes satisfy properties p1p3 discussed section 2 rowcolumn columnrow routing scheme meshes ecube routing scheme hypercubes satisfy properties p1p3 3 two routing schemes handled differently solving load balancing problem fact using approach described 3 different graph transformation methods need designed different routing schemes contrast propose unified graph transformation scheme applied different routing schemes long satisfy properties p1p3 given system graph e specific routing scheme satisfies properties p1 p3 first transform g another graph g according following rules see fig r1 vertex v x 2 v dv x xd indegree outdegree total degree respectively vertex v x g vertex v called invertexnode v x corresponds incoming edge v vertex v xz called outvertexnode v x corresponds outgoing edge v x v x g r2 let v ik v xy correspond edge v g corresponding edge v ik xy g 0 capacity v weight 1 r3 v feasible path v v j g add edge v xz graph g 0 capacity 1 weight 0 v xy jl edges g 0 corresponding edges v r4 overloaded node v add g 0 node ik figure 4 transformed graph 3 theta 3 mesh uses rowcolumn routing scheme capacity e weight 1 e total excess load v underloaded node v j add g 0 node j v j edges v jl capacity j weight 1 j deficit load v j r5 add g 0 source sink edge capacity e weight 0 overloaded node v edge capacity j weight 0 underloaded node v j j system graph g transformed g 0 treat system represented g 0 one without specific routing scheme solve load balancing problem finding minimax flow network weight function w described section 3 capacity weight functions defined rules r1r5 transformed graphs obtained applying rules r1r3 3 theta 3 mesh uses rowcolumn routing scheme 3cube uses ecube routing scheme shown fig 4 fig 5 respectively note assume link two adjacent nodes u v mesh hypercube bidirectional communication link thus two directed edges u v v u corresponding link graph representation mesh hypercube fig 4 easy see whenever routing path uses horizontal edge longer able use vertical edge hence directed path outvertex figure 5 transformed graph 3cube uses ecube routing scheme invertex transformed graph corresponds feasible path found rowcolumn routing scheme mesh vice versa transformed graph also satisfies requirement ecube routing scheme hy percubes example consider node h011i fig 5 definition ecube routing scheme path going node h011i node h010i go either node h001i node h111i path going node h011i node h001i go node h111i path going node h011i node h111i go nowhere formally prove correctness transformation suffices us prove following theorem theorem 1 suppose routing scheme used system consideration satisfies properties p1p3 every feasible routing path vertex v x another vertex v g corresponds unique directed path outvertex v xz v x invertex v yw v transformed graph g 0 vice versa assume g 0 derived applying rules r1r3 g feasible path v x v g property p2 know subpath v j l feasible path g transformation rules r1r3 easy see exists directed path v yw g 0 hand suppose zw directed path g 0 transformation rules easy see edge must satisfies either u 0 invertex v 0 outvertex vice versa moreover u 0 invertex v 0 outvertex u 0 v 0 correspond vertex g therefore k must even outvertices v 0 invertices moreover pair vertices 2l v 0 correspond vertex say v 2l invertex v j l v 0 outvertex v j l l transformation rules r1 r2 know v x directed path v x v g notational simplicity let v next prove induction path feasible specifically show paths v j 0 feasible since v e property p1 path v feasible g suppose path v j 0 feasible g since v 0 edge g 0 transformation rule r3 know v j feasible path g property p3 conclude path v 5 systems indivisible excess load section discuss case excess load indivisible assume specific routing scheme system systems use certain specific routing schemes one first apply graph transformation rules described section 4 representing graph treat transformed graph system specific routing scheme discussed section 3 system indivisible excess load overloaded node one entities excess load e i1 k 1 transferred underloaded node entity without loss generality assume overloaded node exactly one entity indivisible excess load e since excess load add new overloaded node ij one entity indivisible excess load e ij new edge entity excess load e ij neutral node note use e refer either entity excess load amount first show load balancing problem indivisible excess load nphard strong sense 5 fact show problem finding maximum load imbalance eliminated without considering link contention already nphard strong sense figure instance construction npcompleteness proof excess load indivisible propose heuristic algorithm solution nphard case load balancing problem decision version load balancing problem finding maximum load imbalance eliminated ask given number b whether possible eliminate least b units load imbalance without violating link capacity load transfer constraints theorem 2 decision version load balancing problem finding maximum load imbalance eliminated npcomplete strong sense excess load indivisible proof easy see decision version load balancing problem np complete proof reduce multiprocessor scheduling problem 5 given set n tasks length la 1 n number p processors deadline partition max 1ip given instance multiprocessor scheduling problem construct instance load balancing problem shown fig 6 1 overloaded node indivisible excess load la units underloaded node deficit load units 2 p nodedisjoint paths u v edges paths capacity edges infinite capacity note construction done polynomial time easy see least b units load imbalance eliminated without violating link capacity load transfer constraints exists solution multiprocessor scheduling problem since multiprocessor scheduling problem npcompete strong sense decision version load balancing problem indivisible excess load also npcomplete strong sense 2 since unlikely find polynomial time optimal algorithm load balancing problem indivisible excess load propose heuristic algorithm problem let e graph representation multicomputer distributed system consideration cu v capacity load transferring purpose edge u v u v 2 e let overloaded nodes q underloaded nodes overloaded node indivisible excess load e must routed underloaded node entity underloaded node deficit load maximum amount load receive overloaded nodes without loss generality assume e sorted nonincreasing heuristic algorithm see fig 7 consists two phases phase treat excess load divisible use network flow technique described section 3 find minimax flow f excess load indeed divisible f would optimal solution value jf j maximum load imbalance eliminated maximum link contention cost minimized phase ii use minimax flow f found phase template route entities excess load one one way resulting flow link close corresponding minimax flow possible ie value fu v found phase serves target flow load edge u v achieved phase ii since general larger amounts excess load difficult route smaller amounts route excess load nonincreasing order load amount execution phase ii f 0 u v total load currently routed edge v excess load currently routed e say edge u v feasible path feasible 6 edges path feasible route excess load e overloaded node underloaded node j actually node via feasible path ie excess load routed via path edge enough remaining capacity note phase ii vertex edges fact used ie underlying graph g qg excess load e routed using greedy type algorithm called ordered depthfirst search odfs note fu v gamma f 0 u v difference target flow fu v total load f 0 u v currently routed edge u v large fu implies current load routed edge u v still far target value note fu may negative therefore vertex u always choose traverse next edge u v largest fu delta gamma f 0 u delta value among feasible outgoing edges u hence reduce 6 note overload word feasible term feasible path defined different defined section 21 phase step 1 construct network let wu step 2 treat excess load e divisible load use algorithm mmc01 find minimax flow f n phase ii step 1 set f 0 u v 0 u v step 2 1 p following step 21 use ordered depthfirstsearch odfs algorithm find feasible path ordered dfs algorithm similar dfs graph traversal algorithm 4 except branching vertex always choose traverse next edge largest fdelta delta gamma f 0 delta delta value among untraversed feasible edges vertex step 22 exist feasible path means excess load e eliminated next round load balancing performed exists feasible path let p first path found odfs algorithm p used route eliminate excess load e next round load balancing performed reset f 0 u v f 0 u v edge u v p figure 7 heuristic algorithm case excess load indivisible maximum fu delta gamma f 0 u delta value u note heuristic algorithm optimal algorithm may find maximum load imbalance eliminated cases find maximum load imbalance may minimize maximum link contention use following example illustrate heuristic algorithm example 1 suppose constructed network system graph e minimax flow f found end phase shown fig 8a maximum edge 77 74 94 93 75 93 b 93 c 93 93 22 figure 8 example shows heuristic algorithm works cost link contention shown figure 4 note edges e considered phase ii initially set f 0 u first route excess load e 1 starting vertex 1 since fs 1 odfs algorithm first visit vertex v 2 since v feasible outgoing edge ie next vertex visited 2 vertex visited feasible path 1 found e ie path edge u v path reset f 0 u current values c 0 u shown fig 8b next route excess load e 2 using odfs algorithm find feasible path e 2 note vertex 2 although fs still choose edge 5 edge u v path found e 2 reset f 0 u current values shown fig 8c next excess load routed e 3 path found e 3 values routed f 0 updated shown fig 8d finally route excess load e 4 starting 4 odfs first traverses edge vertex 3 since feasible outgoing edge odfs backtracks vertex 4 traverses edge since 3 visited odfs next traverses v 2 next edge traversed path found e 4 values c 0 u routed f 0 updated shown fig 8e amount load imbalance eliminated example 7 maximum link contention 7 2 time complexity heuristic algorithm shown following theorem theorem 3 phase heuristic algorithm worstcase time complexity om delta mnm time complexity finding maximum flow network ox vertices oy edges phase ii heuristic algorithm worstcase time complexity op number excess load entities proof complexity phase discussed section 22 note edges nonzero weight n mentioned earlier underlying graph finding paths overloaded nodes underloaded nodes phase ii g q number underloaded nodes wellknown dfs algorithm done x number vertices number edges graph traversed odfs algorithm time first visit backtrack vertex always traverse untraversed edge maximum fdelta delta gamma f 0 delta delta value therefore traversing outgoing edges vertex u takes od outdegree u logarithm base 2 thus total time route excess load entities 1 4 since need route p excess load entities e worstcase time complexity phase ii op note since assume one entity indivisible excess load overloaded node least one directed path vertex vertex g 6 conclusion paper consider load balancing problem multicomputer distributed systems use circuit switching wormhole routing virtual cutthrough objective finding maximum load imbalance eliminated without violating traffic capacity constraint link minimizing maximum link contention among links solve problem various conditions give om delta mnm optimal algorithm load balancing problem divisible excess load n number nodesprocessors number links system mx time complexity finding maximum flow network x vertices edges propose graph transformation technique systems specific routing schemes satisfy properties p1p3 described section 21 graph transformation technique transforms representing graph system another graph load balancing problem solved optimally manner 7 easy see overloaded node one entity indivisible excess load time complexity phase ii changed op since add p vertices p edges system graph however still n q time complexity load balancing problem systems without specific routing schemes also consider load balancing problem case excess load indivisible prove problem nphard propose based om delta mnm optimal algorithm problem divisible excess load om delta mnm heuristic algorithm solution problem p number excess load entities result obtained paper significant extension bokharis work reported 3 generalize work several directions 1 relax assumption unit load imbalance 2 relax assumption unit link contention 3 consider effect existing ipc traffic selection routes load balancing 4 graph transformation technique network flow model applied larger class routing schemes moreover solution approach algorithms intuitive simpler proposed 3 r design analysis computer algorithms algorithms minimax transportation problem network flow model load balancing circuitswitched multicomput ers introduction algorithms computers intractability guide theory npcompleteness fast algorithm minimax flow problem 01 weights traffic routing multicomputer networks virtual cutthrough capability virtual new computer communication switching technique survey wormhole routing techniques direct networks data structures network algorithms tr ctr michael e houle antonios symvonis david r wood dimensionexchange algorithms token distribution treeconnected architectures journal parallel distributed computing v64 n5 p591605 may 2004 patrick p c lee vishal misra dan rubenstein distributed algorithms secure multipath routing attackresistant networks ieeeacm transactions networking ton v15 n6 p14901501 december 2007