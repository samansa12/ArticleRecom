design use algorithms permuting large entries diagonal sparse matrices consider techniques permuting sparse matrix diagonal permuted matrix entries large absolute value discuss various criteria consider implementation computer codes indicate several cases permutation useful include solution sparse equations direct method iterative technique also consider use generating preconditioner iterative method see effect reorderings dramatic although best priori strategy means clear b introduction study algorithms permutation square unsymmetric sparse matrix order n diagonal permuted matrix large entries useful several ways wish solve system nonsingular square matrix order n x b vectors length n preordering place large entries diagonal useful whether direct iterative methods used solution direct methods putting large entries diagonal suggests pivoting diagonal might stable course nothing rigorous indeed stability guaranteed however solution scheme like multifrontal method duff reid 1983 symbolic phase chooses initial pivotal sequence subsequent factorization phase modifies sequence stability mean modification required less permutation applied iterative methods simple techniques like jacobi gaussseidel converge quickly diagonal entry large relative offdiagonals row column techniques like block iterative methods benefit entries diagonal blocks large additionally preconditioning techniques example diagonal preconditioning incomplete lu preconditioning intuitively evident large diagonals beneficial consider precisely mean permutations section 2 discuss algorithms performing implementation issues section 3 consider effect permutations using direct methods solution section 4 use iterative methods sections 5 6 discussing effect preconditioning latter section finally consider implications current work section 7 throughout symbols jxj interpreted context x scalar modulus intended x set cardinality number entries set understood permuting matrix large diagonals 21 transversals maximum transversals say n theta n matrix large diagonal absolute value diagonal entry large relative absolute values offdiagonal entries row column concerned permuting rows columns matrix resulting diagonal permuted matrix property permuted matrix would like ratio large j 1 j n course even possible ensure ratio greater 10 j simple example shows thus necessary first scale matrix computing permutation appropriate scaling would scale columns largest entry column 10 algorithm describe section 22 would effect maximizing 21 arbitrary nonsingular n theta n matrix necessary sufficient condition set n entries permuted diagonal two row two column set entries termed maximum transversal concept central paper define rigorously let denote set n ordered index pairs j 1 row index column index j appears called transversal matrix ij 6 0 called maximum transversal largest possible cardinality jt j equal n matrix nonsingular indeed jt defines n theta n permutation matrix p p matrix transversal entries diagonal sparse system solution major use transversal algorithms first stage permuting matrices block triangular form matrix first permuted unsymmetric permutation make diagonal zerofree symmetric permutation used obtain block triangular form important feature approach block triangular form depend transversal found first stage duff 1977 maximum transversal also required generalization block triangular ordering developed pothen fan 1990 22 bottleneck transversals consider two strategies obtaining maximum transversal large transversal entries primary strategy consider paper maximize smallest value diagonal permuted matrix compute maximum transversal maximum transversal 1 min ij2t transversal called bottleneck transversal 1 smallest value ja ij j called bottleneck value equivalently jt smallest value diagonal p maximized permutations p equals bottleneck value outline algorithm computes bottleneck transversal 0 matrix given assume already algorithm obtaining maximum transversal denote mt routine returns maximum transversal matrix starting initial guess transversal let ffl denote matrix obtained setting zero entries ja ij j denote transversal obtained removing transversal elements algorithm bt initialization set fflmin zero fflmax infinity exist begin choose discuss chosen later fflmin ffl else endif complete transversal permutation needed matrix structurally singular maximum transversal hence jm j required cardinality bottleneck transversal 0 computed nonsingular throughout algorithm fflmax fflmin maximum transversal size jm j exist fflmax exist fflmin step ffl chosen interval fflmin fflmax maximum transversal matrix ffl computed transversal size jm j fflmin set ffl 1 term bottleneck used many years assignment problems example glicksberg gross 1953 otherwise fflmax set ffl hence size interval decreases step ffl converge bottleneck value termination algorithm 0 computed bottleneck transversal ffl corresponding bottleneck value value ffl unique bottleneck transversal 0 usually unique algorithm bt makes use algorithms finding maximum transversal currently known algorithm best asymptotic bound finding maximum transversal hopcroft karp 1973 worstcase complexity n number entries matrix efficient implementation algorithm found duff wiberg 1988 depthfirst search algorithm implemented duff 1981 harwell subroutine library code mc21 theoretically worstcase behaviour practice behaves like latter algorithm far simpler concentrate following although note relatively straightforward modify use algorithm hopcroft karp 1973 similar way limitation algorithm bt maximizes smallest value diagonal permuted matrix although means diagonal values smaller may maximal consider example 3 theta 3 ffic 22 ffi close zero algorithm bt applied matrix returns either transversal f1 1 2 2 3 3g f2 1 1 2 3 3g clearly latter transversal preferable modifications propose help choosing large entries possible early transversal entries beneficial first permute matrix block triangular form use bt blocks diagonal done since entries maximum transversal must lie blocks furthermore mean bt operates smaller matrices also usually obtain transversal better quality inasmuch minimum diagonal entry maximized true block diagonal thus matrix 22 combination ordering block triangular form followed bt would yield preferred transversal f2 1 1 2 3 3g possibilities improving diagonal values permuted matrix smallest one apply row scaling subsequent initial column scaling matrix increase numerical values nonzero entries rows maximum absolute numerical value less one row scaling applied matrix 22 changes coefficient 33 ffi 10 algorithm bt compute f2 1 1 2 3 3g bottleneck transversal matrix 22 unfortunately row scaling always help seen matrixb 10 ffic maximum transversals legitimate bottleneck transversals indeed bt algorithm dependent scaling example matrix bottleneck transversal f2 1 1 2g whereas row scaled bottleneck transversal f1 1 2 2g another possibility improving size diagonal values apply algorithm bt repeatedly without loss generality suppose application bt entry nn smallest diagonal value algorithm bt applied n gamma 1 theta n gamma 1 leading principal submatrix could repeated k steps n gamma leading principal submatrix contains ones assumption original matrix row column scaled obviously quite expensive since algorithm bt applied times although good starting point bt algorithm stage call algorithm successive bottleneck transversal algorithm fact found usually gives little improvement bt consider paper 23 maximum product transversals algorithm yielding transversal independent scaling maximize product moduli entries diagonal find permutation oe ioe j 23 maximized strategy used pivoting full gaussian elimination olschowka neumaier 1996 corresponds obtaining weighted bipartite matching olschowka neumaier 1996 combine permutation scaling strategy permutation 23 maximizes product diagonal entries permuted matrix clearly product zero matrix structurally singular scaling transforms matrix socalled imatrix whose diagonal entries one whose offdiagonal entries less equal one maximizing product diagonal entries equivalent minimizing sum diagonal entries matrix defined follows assume denotes n theta n nonnegative nonsingular matrix log maximum absolute value column j matrix minimizing sum diagonal entries stated terms assignment problem solved 3 time full n theta n matrices log n time sparse matrices entries bipartite weighted matching algorithm used solve problem applying algorithm c produces vectors u v transversal length n define scaled matrix imatrix scaling experiments unlike olschowka neumaier use sparse bipartite weighted matching whereas considered full matrices worst case complexity algorithm log n similar bt although practice sometimes requires work bt programmed algorithm without final scaling called algorithm mpd maximum product diagonal compare bt mc21 later sections paper note matrixb mpd algorithm obtains transversal f1 1 2 2 3 3g whereas example gaussian elimination diagonal transversal would better additionally fact scaling influence choice bottleneck transversal could deemed useful characteristic 3 implementation bt algorithm consider implementation details algorithm bt previous section also illustrate performance matrices harwellboeing collection duff grimes lewis 1989 collection davis 1997 code implementing bt algorithm included future release harwell subroutine library hsl 1996 updating transversal stage algorithm bt easily accelerate algorithm described section 2 computing value minimum entry transversal viz min ij2t setting fflmin value rather ffl issue crucial efficiency choice ffl beginning step step choose ffl close value fflmin highly likely find maximum transversal total number steps required obtain bottleneck transversal large worst case could require steps number nonzero entries ffl reduces one iteration algorithm converges faster size interval fflmin fflmax reduces significantly step would therefore appear sensible choose ffl step interval split two almost equal subintervals ffl fflminfflmax2 however nonzero values magnitude fflmin fflmax clustered near one endpoints possibility exists nonzero values discarded algorithm proceed slowly avoid ffl chosen median nonzero values fflmin fflmax consider transversal algorithm like mc21 modified implement algorithm bt efficiently useful describe briefly mc21 works column matrix searched turn called original column either entry row transversal entry presently row found made transversal entry cheap assignment entry search moves previous column whose transversal entry one rows entry original column new column checked cheap assignment one exists cheap assignment entry original column row old transversal entry replace transversal entries thereby extending length transversal 1 cheap assignment search continues columns depth first search fashion chain augmenting path form found transversal entries row every odd member path transversal entry assignment made column j transversal extended 1 replacing transversal entries augmenting path even members path transversal selection algorithms like mc21 take account numerical values nonzero entries however clear algorithm bt converge faster chosen value minimum entry large noting constructing augmenting path often several candidates cheap assignment extending path mc21 makes arbitrary choice modified candidate largest absolute value chosen note local strategy guarantee augmenting paths highest values found second modification aims exploiting information obtained previous steps algorithm bt algorithm bt repeatedly computes maximum transversal ffl implementation mc21 harwell subroutine library computes scratch modified start partial transversal easily achieved holding set columns contain entries partial transversal performing depth search search set columns course many ways implement choice ffl one alternative maintain array ptr length pointers entries first part ptr point entries form matrix ffl max first two parts ptr point entries form ffl min elements third part ptr point remaining smaller entries new value ffl chosen directly o1 time picking numerical value entry pointed element second part ptr assignment algorithm bt either ffl min ffl max second part ptr permuted ptr divided three parts alternative global using fast sorting algorithm entries elements ptr point entries order decreasing absolute value ptr divided three parts described previous alternative choosing o1 time ffl equal numerical value entry pointed median element second part ptr ffl divide interval ffl min closetoequal size alternatives advantage able choose new ffl quickly require extra memory repeated permutations pointers prefer approach less expensive memory matches transversal algorithm better since mc21 always searches columns order facilitate construction matrices ffl first sorting entries column matrix decreasing absolute value sparse matrix well bounded number entries column done time matrix ffl implicitly defined array len length n lenj pointing first entry column j matrix whose value smaller ffl position immediately end column j matrix ffl since entries column ffl contiguous repeated modification ffl algorithm bt redefines matrix ffl corresponds simply changing pointers array len actual choice ffl phase algorithm bt done selecting matrix ffl min entry absolute value x ffl min columns ffl min searched entry found ffl set absolute value search costs time since column direct access entries absolute values ffl min ffl max pointer array len mentioned choosing ffl carefully speed algorithm bt considerably therefore instead choosing arbitrary entry matrix define ffl choose number k say entries lying ffl min ffl max random sort absolute value set ffl absolute value median element 2 implementation used set matrices used experiments unsymmetric matrices taken sparse matrix collections duff grimes lewis 1992 davis 1997 table 31 shows order number entries time compute bottleneck transversal matrix matrices initially row column scaled mean matrix scaled maximum entry row column one machine used experiments following sections 166 mhz sun ultra2 algorithms implemented fortran 77 matrix n time secs goodwin 7320 324784 027 226 182 onetone2 36057 227628 263 053 042 table 31 times transversal algorithms order matrix n number entries 2 technique commonly used speed sorting algorithms like quicksort 4 solution equations direct methods mcsparse parallel direct unsymmetric linear system solver developed gallivan marsolf wijshoff 1996 uses reordering identify priori large medium grain parallelism reorder matrix bordered block triangular form ordering uses initial nonsymmetric ordering enhances numerical properties factorization subsequent symmetric orderings used obtain bordered block triangular matrix wijshoff 1989 nonsymmetric ordering effectively modified version mc21 search phase cheap assignment augmenting path entry ij selected absolute value within bound ff 0 ff 1 largest entry column j instead taking first entry found search satisfies threshold algorithm scans column entry largest absolute value algorithm starts initial bound ff 01 maximum transversal cannot found values column examined determine maximum value bound would allowed assignment take place column new bound set minimum bound estimates failed columns algorithm restarted bound less preset limit tried transversal still found bound ignored code finds transversal terminology assuming initial column scaling matrix means maximum transversal size n computed matrix ff multifrontal approach duff reid 1983 later developed amestoy duff 1989 analysis performed structure obtain ordering reduces fillin assumption diagonal entries numerically suitable pivoting numerical factorization guided assembly tree node tree steps gaussian elimination performed dense submatrix whose schur complement passed parent node tree assembled summed schur complements children original entries matrix however numerical considerations prevent us choosing pivot algorithm proceed schur complement passed parent larger usually work storage needed effect factorization logic first permuting matrix large entries diagonal computing ordering reduce fillin try reduce number pivots delayed way thereby reducing storage work factorization show effect table 41 see even using mc21 beneficial although bt algorithm show significant gains sometimes use mpd cause significant reduction number delayed pivots add numerical accuracy solution sometimes slightly improved permutations cases good solutions found matrix transversal algorithm used none mc21 bt mpd goodwin 536 1622 358 53 table 41 number delayed pivots factorization ma41 indicates ma41 requires real working space larger 25 million words 8 bytes table 42 show effect number entries factors mirrors results table 41 shows benefits transversal selection algorithms effect seen table 43 sometimes observe dramatic reduction time solution preceded permutation matrix transversal algorithm used none mc21 bt mpd onetone2 14082683 2875603 2167523 2169903 goodwin 1263104 2673318 1791112 1282004 table 42 number entries factors ma41 addition able select pivots chosen analysis phase multifrontal code ma41 better matrices whose structure symmetric nearly transversal orderings cases increase symmetry resulting reordered matrix particularly apparent sparse system many zeros diagonal case reduction number offdiagonal entries reordered matrix influence symmetry notice respect sophisticated transversal algorithms may actually cause problems since could reorder symmetrically structured matrix zerofree diagonal whereas mc21 leave unchanged matrix transversal algorithm used none mc21 bt mpd goodwin 364 1463 600 356 table 43 time seconds sun ultra2 ma41 solution system 5 solution equations iterative methods large family iterative methods socalled stationary methods iteration scheme splitting chosen system easy solve invertible 51 written ae spectral radius jjm convergence iterates x k solution gamma1 b guaranteed arbitrary x 0 general smaller jjm faster convergence thus algorithm makes entries large n small beneficial simple method type jacobi method corresponding splitting denotes diagonal l strictly lower triangular part u strictly upper triangular part matrix however particularly current powerful method conduct experiments using block cimmino implementation arioli duff noailles ruiz 1992 equivalent using block jacobi algorithm normal equations implementation subproblems corresponding blocks rows matrix solved direct method similar considered previous section similar reasons beneficial increase magnitude diagonal entries unsymmetric permutations show effect table 51 see number iterations solution problem mahindas 7682 convergence tolerance set 10 gamma12 transversal selection algorithm followed reverse cuthill mckee algorithm obtain block tridiagonal form matrix partitioned 2 4 8 16 block rows acceleration used block cg algorithm block sizes 1 4 8 acceleration block rows none mc21 bt mpd table 51 number iterations block cimmino algorithm mahindas every case use transversal algorithm accelerates convergence method sometimes significant amount however use algorithms increase size diagonal entries usually help convergence convergence block cimmino depends angles subspaces strongly influenced diagonal entries 6 preconditioning section consider effect using permutation induced transversal algorithms prior solving system using preconditioned iterative method consider preconditionings corresponding incomplete factorizations form ilu0 ilu1 ilut study convergence iterative methods gmres20 bicgstab qmr refer reader standard text like saad 1996 description discussion methods since diagonal permuted matrix dominant diagonal original matrix would hope permutations would enhance convergence show results runs table 61 maximum number iterations set 1000 convergence tolerance 10 gamma9 quite clear reorderings significant effect convergence preconditioned iterative method cases method converge permutation others greatly improves convergence would appear results table 61 experiments performed sophisticated mpd transversal algorithm generally results greatest reduction number iterations although best method depend overall solution time including transversal selection algorithm 7 conclusions future work described algorithms obtaining transversals large entries indicated implemented showing resulting programmes written efficient performance clear reordering matrices permuted matrix large diagonal significant effect solving sparse systems wide range techniques somewhat less clear universal strategy best cases thus started experimenting combining strategies mentioned paper particularly block cimmino approach combining unsymmetric ordering symmetric ordering one example plan study combination symmetric tpablo ordering benzi choi szyld 1997 possible extend techniques orderings try increase size diagonal also immediate sub super diagonals use resulting tridiagonal part matrix preconditioner one also build criteria weighting obtaining bipartite matching example incorporate markowitz count sparsity would also preserved choice resulting diagonal pivot finally noticed experiments ma41 one effect transversal selection increase structural symmetry unsymmetric matrices thus exploring use ordering techniques directly attempt increase structural symmetry acknowledgments grateful patrick amestoy enseeiht michele benzi cerfacs daniel ruiz enseeiht assistance experiments direct methods preconditioned iterative methods block iterative methods respectively would also like thank alex pothen early discussions bottleneck transversals john reid jennifer scott comments draft paper matrix method transversal algorithm bicgstab 123 21 11 qmr 101 26 17 qmr 72 19 12 mahindas west0497 table 61 number iterations required preconditioned iterative methods r threshold ordering preconditioning nonsymmetric problems design use frontal scheme solving sparse unsymmetric equations users guide harwellboeing sparse matrix collection release production line assignment problem iterative methods sparse linear systems symmetric orderings unsymmetric sparse matrices tr ctr iain duff jennifer scott stabilized bordered block diagonal forms parallel sparse solvers parallel computing v31 n34 p275289 marchapril 2005 kai shen parallel sparse lu factorization secondclass message passing platforms proceedings 19th annual international conference supercomputing june 2022 2005 cambridge massachusetts olaf schenk klaus grtner twolevel dynamic scheduling pardiso improved scalability shared memory multiprocessing systems parallel computing v28 n2 p187197 february 2002 olaf schenk andreas wchter michael hagemann matchingbased preprocessing algorithms solution saddlepoint problems largescale nonconvex interiorpoint optimization computational optimization applications v36 n23 p321341 april 2007 olaf schenk klaus grtner solving unsymmetric sparse systems linear equations pardiso future generation computer systems v20 n3 p475487 april 2004 patrick r amestoy iain duff jeanyves lexcellent xiaoye li analysis comparison two general sparse solvers distributed memory computers acm transactions mathematical software toms v27 n4 p388421 december 2001 kai shen parallel sparse lu factorization different message passing platforms journal parallel distributed computing v66 n11 p13871403 november 2006 xiaoye li overview superlu algorithms implementation user interface acm transactions mathematical software toms v31 n3 p302325 september 2005 anshul gupta recent advances direct methods solving unsymmetric sparse systems linear equations acm transactions mathematical software toms v28 n3 p301324 september 2002 anwar hussein ke chen fast computational methods locating fold points power flow equations journal computational applied mathematics v164165 n1 p419430 1 march 2004 jack dongarra victor eijkhout piotr uszczek recursive approach sparse matrix lu factorization scientific programming v9 n1 p5160 january 2001 belur v dasarathy editorial identity fusion unsupervised environments information fusion v7 n2 p157160 june 2006 xiaoye li james w demmel superludist scalable distributedmemory sparse direct solver unsymmetric linear systems acm transactions mathematical software toms v29 n2 p110140 june nicholas gould jennifer scott yifan hu numerical evaluation sparse direct solvers solution large sparse symmetric linear systems equations acm transactions mathematical software toms v33 n2 p10es june 2007 michele benzi preconditioning techniques large linear systems survey journal computational physics v182 n2 p418477 november 2002