jitter control qos networks study jitter control networks guaranteed quality service qos competitive analysis point view propose online algorithms control jitter compare performance best possible offline algorithm given arrival sequence delay jitter goal minimize difference delay times different packets show simple online algorithm using buffer b slots guarantees delay jitter best offline algorithm using buffer space b2 prove guarantees made online algorithm hold even simple distributed implementations total buffer space distributed along path connection provided input stream satisfies certain simple property rate jitter goal minimize difference interarrival times develop online algorithm using buffer size 2b h h 1 compare jitter jitter optimal offline algorithm using buffer size b prove algorithm guarantees difference bounded term proportional bh b introduction need networks guaranteed quality service qos widely recognized today see eg 8 11 unlike todays best effort networks internet user guarantee performance may expect network qos networks guarantee enduser application certain level performance example atm networks support guaranteed qos various parameters including endtoend delay delay jitter called cell transfer delay cell delay variation respectively 5 12 jitter measures variability delay packets given stream important property many applications example streaming realtime applications ideally packets delivered perfectly periodic fashion however even source generates evenly spaced stream unavoidable jitter introduced network due variable queuing propagation delays packets arrive destination wide range interarrival times jitter increases switches along path connection due many factors conflicts packets wishing use links nondeterministic propagation delay datalink layer jitter quantified two ways one measure called delay jitter bounds maximum difference total delay different packets assuming without loss generality abstract source perfectly periodic approach useful contexts interactive communication eg voice video teleconferencing guarantee delay jitter translated maximum buffer size needed destination second measure called rate jitter bounds difference packet delivery rates various times precisely rate jitter measures difference minimal maximal interarrival times interarrival time packets reciprocal rate rate jitter useful measure many realtime applications video broadcast net slight deviation rate translates small deterioration perceived quality another important reason keeping jitter control comes network management even applications requiring jitter guarantees example well known traffic bursts tend build network 8 15 jitter control provides means regulating traffic inside network behavior internal traffic easily manageable subtle argument favor jitter control given 17 proceeds follows qos network admits connection type contract agreed upon network user application user committed keeping traffic within certain bounds peak bandwidth maximal burst size etc network committed providing certain service guarantees maximal delay loss rate etc since network consists collection links switches guarantees must depend guarantees made components guarantees made link switch turn contingent bounds locally incoming traffic mentioned unless action taken network characteristics connection may fact get worse switches path thus commit lower qos jitter control useful allowing network ensure traffic incoming switch nicer get better guarantees switch jitter control implementation usually modeled follows 17 8 traffic incoming switch input jitterregulator reshapes traffic holding packets internal buffer packet released jitterregulator passed link scheduler schedules packet transmission output link work focus studying jitterregulators nature results state concrete results would like explain insight seek prior work performance jitter control algorithm measured either worstcase behavior statistical assumptions thus properties algorithms either deterministic given deterministic worstcase assumptions input stream probabilistic given stochastic assumptions input stream work prove relativistic guarantees compare performance algorithm question performance best possible algorithm treat adversary compete adversary algorithm assumed constrained online nature problem assumed produce best possible output given input even best output may computable hindsight hence adversary algorithm sometimes called offline algorithm algorithms whose performance bounded respect performance offline adversary called competitive 10 7 1 argue proving algorithm competitive meaningful sometimes superior proving deterministic stochastic guarantees first deterministic stochastic guarantees say nothing case underlying assumptions hold reason even worse underlying assumptionsin particular tractable stochastic assumptions notoriously hard justify hand competitive algorithm assume anything input therefore guarantees robust sense secondly worstcase guarantees usually say much individual cases example algorithm may called deterministically optimal even performs always bad worst case competitive algorithms contrast guaranteed relatively well every instance thirdly add assumption input sequence relativistic guarantee would immediately translate specific deterministic guarantee remark unlike conventional competitive analysis cases shall compare performance online algorithms performance optimal offline adversary restricted use less buffer space example prove statements algorithm z using space b produces jitter never jitter produced optimal algorithm given arrival sequence using space b2 one possible interpretation result algorithm z always uses least half buffer space optimallyas knew future advance results consider delay ratejitter delayjitter give simple online algorithm prove delayjitter output delayjitter produced optimal offline algorithm using half space give lower bound delayjitter showing doubling space necessary also consider distributed implementation algorithm total space 2b distributed along path prove distributed algorithm guarantees delayjitter centralized offline algorithm using space b provided additional condition beginning sequence met complete picture also describe efficient optimal offline algorithm delayjitter algorithms assume average interarrival time input stream denoted x given ahead time one way view relativistic gurantee algorithm following assume specific arrival sequence using buffer size b one reduce jitter comletely ie zero jitter case online algorithm using space 2b would also output completely periodic sequence ie zero jitter rate jitter assume online algorithm receives addition x two parameters denoted max min lower upper bound desired time consecutive packets output stream online algorithm present uses buffer size 2b h h 1 parameter b offline algorithm using buffer space b release packets interdeparture times interval min max optimal jitter may much lower algorithm guarantees ratejitter released sequence best offline jitter plus additive term 2b also show algorithm adapt unknown x finally prove online algorithms using less 2b buffer space doomed trivial ratejitter guarantees respect offline algorithm using space b related work qos subject extensive research current decade starting seminal work ferrari 2 see 16 comprehensive survey number algorithms proposed jitter control partridge 9 proposed timestamp message source fully reconstruct stream destination based bound maximal endtoend delay verma et al 13 proposed jitteredd algorithm jitter controller switch computes packet eligibility time packet submitted link scheduler idea set eligibility time difference maximum delay previous link actual delay packet way traffic completely reconstructed jitter node note jitter edd requires nodes synchronized clocks leaveintime algorithm 3 replaces synchronized clocks requirement jitteredd virtual clocks 19 golestani 4 proposed stopandgo algorithm described follows time divided frames packets arriving one frame released following frame allows high flexibility reshaping traffic hierarchical roundrobin hrr proposed 6 guarantees time frame connection predetermined slots send packets comparative study ratecontrol algorithms found 18 new jitter control algorithm proposed 14 paper organization section 2 give basic definitions notations section 3 study delay jitter single switch section 4 extend results section 3 distributed implementation section 5 study rate jitter model jittercontrol algorithm packet arrival sequence fifo buffer packet release sequence figure 1 abstract node model jitter control algorithm controls packet release buffer based arrival sequence consider following abstract communication model node network see fig 1 given sequence packets denoted 0 arrives time arrivalk packets assumed equal size packet stored buffer upon arrival released time perhaps immediately arrival packets released fifo order time packet release also called packet departure packet send governed jitter control algorithm given algorithm arrival time sequence denote send k time packet k released consider jitter control algorithms use boundedsize buffer space shall assume buffer slot capable storing exactly one packet packets must delivered hence buffer size limitation formalized follows release time sequence generated algorithm using buffer size b must satisfy following condition 0 k n define lower bound expresses fact packet cannot sent arrives upper bound states packet k b arrives packet k must released due fifoness limited size buffer call sequence departure times bfeasible given sequence arrival times satisfies eq 1 ie attained algorithm using buffer space b algorithm called online action time function packet arrivals releases occur algorithm called offline action may depend future events times sequence nondecreasing sequence real numbers turn define properties times sequences main interest paper given times sequence i0 define average minimum maximum interarrival times follows ffl average interarrival time oe x oe n ffl minimum interarrival time oe x oe ng ffl maximum interarrival time oe x oe ng shall omit oe superscript context clear average rate oe simply 1x oe shall talk jitter oe distinguish two different kinds jitter delay jitter intuitively measures far difference delivery times different 1 note definition allows 0length intervals b packets system formal difficulty overcome assuming explicitly event packet arrival release occurs different time point clarity exposition prefer simplified model although results hold models packets ideal time difference perfectly periodic sequence packets spaced exactly x time units apart formally given times sequence i0 define delay jitter oe 0ikn shall also concerned rate jitter oe described intuitively maximal difference interarrival times equivalent difference rates different times formally define rate jitter oe 0ijn following simple property shows relationship delay rate jitter lemma 21 let oe times sequence 1 delay jitter oe equals 0 rate jitter oe equals 0 2 delay jitter oe j rate jitter oe 2j 3 ffl 0 exists sequence oe fflm rate jitter ffl delay jitter least proof suppose i0 1 delay jitter oe 0 iff 0 n true iff rate jitter oe 0 2 delay jitter oe j 0 triangle inequality rate jitter oe 2j 3 let ffl choose even number n i0 defined inductively follows clearly resulting oe times sequence average interarrival rate x rate jitter ffl 0 ffl however hence delay jitter least nffl 0 choice n means analyzing performance jitter control algorithms competitive analysis 1 context shall measure delay rate jitter sequence produced online algorithm best jitter attainable sequence expected finding release times minimize jitter may require knowledge complete arrival sequence advance ie computed offline algorithm results expressed terms performance online algorithms using buffer space b compared best jitter attainable offline algorithm using space b usually interested two parameters algorithms jitter guaranteed online algorithms function best possible offline guarantee buffer size used online algorithm function buffer size used optimal offline algorithm 3 delayjitter control section analyze best achievable delayjitter first present efficient offline algorithm attains best possible delay jitter using given buffer space b proceed main result section online delayjitter control algorithm attains best jitter guarantee attained offline algorithm uses half buffer space finally present lower bound shows online algorithm whose jitter guarantees function jitter guarantees offline algorithm must least twice space used offline algorithm 31 offline delayjitter control start offline case suppose given complete sequence farrivalkg n packet arrival times wish find sequence release times fsend kg n k0 minimizes delay jitter using b buffer space offline algorithm defined follows algorithm offline delayjitter control 1 0 k n define interval define 2 find minimal interval intersects intervals e k 3 packet k let theorem 31 sequence fsend kg n k0 nondeceasing bfeasible sequence minimal delay jitter proof straightforward see definitions send arrivalk arrivalk b hence resulting sequence bfeasible proving fifoness done follows definitions sufficient prove p k p k1 x see first note definition distinguish two cases minm eq 2 p k1 p k done second case minm case eq 2 implies proof correctness complete optimality solution follows immediately minimality 32 online delayjitter control algorithm turn main result delayjitter control online algorithm using 2b buffer space guarantees delayjitter bounded best jitter achievable offline algorithm using b space algorithm simple first buffer loaded b packets b1st packet arrives algorithm releases first buffered packet time algorithm tries release packet k kx time formally algorithm defined follows algorithm b online delayjitter control define send n release sequence defined send send k arrivalk send clearly algorithm b online algorithm prove jittercontrol property theorem 32 given arrival sequence offline algorithm using space b attain delay jitter j release sequence generated algorithm b delayjitter j using 2b buffer space proof obviously buffer space used algorithm b 2b bound delayjitter follows lemma 34 lemma 36 proved time packet number figure 2 example oriented jitter bounds point coordinates x denotes packet released time x slope dashed lines 1x following definition useful analysis see fig 2 definition 31 let k0 time sequence oriented jitter bounds packet k 0in g 0in g intuitvely j oe k says much packet k late compared earliest packet j oe k says much k premature comapred latest packet following immediate properties oriented jitter bounds lemma 33 let k0 time sequence average interarrival times x delay jitter j 1 k jk 0 jk 0 2 k 3 exist k k 0 proof 1 follows choosing 31 2 let j rearranging assume wlog 0 definition follows 0 g therefore 0in 0in summing eqs 34 result follows 3 follows choosing eqs 34 respectively following lemma shows deviation actual release time generated algorithm b ideal 0jitter sequence fsend kg k bounded somewhat surpris ingly bounded oriented jitter bounds two specific packets bfeasible sequence lemma 34 let k0 bfeasible sequence given arrival sequence 0 k n gammaj oe 0 send proof proceed case analysis send k done lemma 33 1 send k send k specification algorithm b send arrivalk case lemma proved following inequality send send k definition j oe 0 send since send 0 send 0 last case consider send k case specification algorithm b send 2b lemma case proved following inequality send send k b bfeasibility offline definition j oe b send 0 send b reader may note since lemma 33 12 implies j oe 0 j oe 0 j oe lemma 34 used easily derive bound 2j oe delayjitter attained algorithm b proving promised bound j oe requires refined analysis oriented jitter bounds facilitate introduce following concept definition 32 let k0 times sequence let k times sequence oe perturbed k intuitively sequence obtained assigning release time packet k changing times packets preserve fifo order see fig 3 example packet k released earlier k packets k may moved well packet k released later k packets k may moved following properties perturbed sequences direct consequence definition k0 times sequence let k packet let time point packet number time packet number time figure 3 example perturbation left sequence oe right oe5 note moved respect oe proof simplest way verify claims geometrical consider figure 3 corresponds case assertion b1 says point k moved left left diagonal line points remain two diagonal lines points lie diagonal lines assertion b2 states horizontal distance point k left diagonal line strictly decreases assertion states points point k horizontal distance left diagonal line increase case analogous prove theorem 32 prove interesting property oriented jitter bounds optimal sequences intuitively lemma says following fix arrival sequence consider optimal release sequences using b buffer space fix two packets b apart cannot case optimal release sequences first packet early second packet late formally following lemma 36 let j minimal delay jitter given arrival sequence using space b let 0 j n packets j b exists bfeasible sequence oe given arrival sequence delay jitter j j oe note lemma 36 combined lemma 34 completes proof theorem 32 shall use general statement section 4 proof let oe optimal release sequence attaining jitter j given arrival se quence j oe j oe j minimal among optimal sequences first note either j oe done since lemma 33 12 j oe j oe j j assume j oe 0 j oe j 0 claim case released together hence packets released together prove claim contradiction suppose must case either arrivalj ii j arrivalj ii hold case holds let consider perturbed sequence oei packet released time choice perturbed sequence oei following properties bfeasible since may differ oe packets packets held little longer oei released time arrivalj arrivali b claim follows case since properties 12 imply oei sequence using b buffer space attains jitter j properties 34 contradict assumed minimality j oe j similar argument shows case ii holds arrivaljg perturbed sequence oej contradicts minimality j oe thus proved optimal sequence either j oe cases lemma proved else sequence minimizing j oe must case proceed bound j oe using fact first note since definition exists packet k 1 k 1 j since definition get fact similarly adding equations 56 get conclude required 33 lower bound online delayjitter control algorithms close section lower bound online delayjitter control algorithms following theorem says online algorithm using less 2b buffer space pays heavily terms delay jitter compared offline algorithm using space b theorem 37 let 1 b exist arrival sequences offline algorithm using space b gets jitter 0 online algorithm using 2b gamma buffer space gets delayjitter least x moreover exist arrival sequences offline algorithm using space b gets 0jitter online algorithm using less b buffer space guarantee finite delay jitter proof consider following scenario time 0 packets arrive time arrive first note offline algorithm attaining 0 jitter releasing packet k time k delta x consider online algorithm z first claim z cannot release packet 0 packet b arrives otherwise packet b may arrive arbitrarily far future making delay jitter online algorithm arbitrarily large hence time b delta x b1 new packets arrive algorithm z still stores first packets since buffer space 2b gamma assumption forced release least immediately since delays packets 0 equal follows definition delayjitter delayjitter release sequence least x case online algorithm less b space consider scenario batch b packet arrive together time 0 batch b packets arrive time large since online algorithm release packet 0 time 0 delay jitter least tb gamma 1 arbitrarily large 4 distributed delayjitter control section 3 considered single delayjitter regulator section prove interesting property composing many delayjitter regulators employing algorithm b specifically consider path links connecting nodes v source v destination make simplifying assumption propagation delay link deterministic denote event arrival packet k node j arrivalk j release packet k node v j sendk j input stream generated source fsendk 0g k farrivalk 1g k output stream fsendk mg k node 2bm buffer space simplicity assume divides b distributed algorithm following algorithm bd distributed online delayjitter control 1 j node buffer space 2bm specifically node j sets send k releases packet k close possible send k j subject 2bmfeasibility see algorithm b prove jitter control capability algorithm bd jitter control capability centralized jitter control algorithm b total buffer space certain condition beginning sequence explained shortly put differently one lose jitter control capability dividing buffer space along path precise result given theorem theorem 41 suppose given arrival sequence k0 exists centralized offline algorithm attaining jitter j using space b packet 0 released time arrivalbm oe release sequence node v 0 release sequence fsend k mg k generated algorithm bd node v delay jitter j intuitively additional condition way release first packet relatively early centralized optimal algorithm condition suffices compensate distributed nature algorithm bd condition also necessary algorithm input system start algorithm offline algorithm still wait arbitrarily long starting release packets algorithm bd bound start releasing packets even 2b proof essentially adapting proofs algorithm b section 3 distributed setting highlight distinguishing points let propagation delay link v j total delay links path first lemma bounds desired release times packets one node terms desired release times upstream nodes lemma 42 nodes 1 j packets k send k k send proof consider lower bound first algorithm send 0 send 0 since 1 send 0 send 0 obtain induction k send k proving lower bound prove upper bound first claim 1 send k send k 0 k eq 7 follows fact specification algorithm b node starts releasing packets first b buffer therefore none first b packets released late node prove upper bound induction j base case trivial inductive step fix j consider send algorithm send 0 x 7 send 0 x induction k rearranging case underflow argue packet late output node v n late nodes way lemma 43 send k send k send k proof first show node v j send k k j send k 1 true since specification algorithm b time send k j buffer node j empty hence node v j gamma1 sent packet k time send k k implies send k send 1 therefore nodes v j send k summation obtain send k send k case overflow show analogous property overflow output node result chain reaction overflows nodes lemma 44 send k send k send k proof prove send k send k send send bound buffer size send k gamma assumption send send words packet k overflowing node packet k overflowing node 1 hence send lemma follows lemmas used proof following variant lemma 34 lemma 45 let k0 bfeasible sequence given arrival sequence send 0 arrivalbm 1 0 k gammaj oe 0 send k gamma send k j oe bm proof send k send k done lemma 33 1 send k send k send k send k 0 lemma 43 send k since send k send 0 since send 0 arrival send 0 k send k send k send k send k b since offline b space send b arrival send 0 send theorem 41 follows lemma 45 combined lemma 36 independent online algorithm 5 ratejitter control section consider problem minimizing ratejitter ie keep rate packets released within tightest possible bounds shall use equivalent concept minimizing difference interdeparture times present online algorithm ratejitter control using space 2b compare offline algorithm using space b guaranteeing jitter j algorithm guarantees rate jitter j constant c also show obtain rate jitter multiplicative factor optimal simple modification algorithm algorithm work without knowledge exact average interarrival time case jitter guarantees come effect initial period packets may released slowly also show without doubling space guarantees terms optimal ratejitter made aside remark offline ratejitter control solved optimally using linearprogramming technique 51 online ratejitter control algorithm turn describe main result section online algorithm ratejitter control algorithm specified following parameters ffl b buffer size offline algorithm ie b space parameter online algorithm b ffl min bounds minimum maximum interdeparture time offline algorithm ffl x average interdeparture time input also output sequence parameters min max thought requirements worst rate jitter bounds application willing tolerate goal ratejitter control algorithm minimize rate jitter subject assumption space b sufficient offline algorithm bound interdeparture times range min max trivial choice min max x min x max minimal maximal inter arrival times input sequence however using tighter min max one may get much stronger guarantee jitter guarantees expressed terms b h j best rate jitter given arrival sequence attainable offline algorithm using space b note online algorithm even achieving rate jitter max gammai min may nontrivial bounds performance offline algorithm whose precise specification may depend events arbitrarily far future basic idea algorithm next release time monotonically decreasing function current number packets buffer words packets buffer lower interdeparture time packets thus higher release rate algorithm c online ratejitter control algorithm uses b space possible number 0 j 2b h packets buffer associate time denoted idtj defined follows let note idtj monotonically decreasing function j algorithm starts buffer loading stage packets accumulated released first time number j packets buffer satisfies idtj x let g let denote first time number packets buffer reaches time loading stage first packet released following rule governs remainder execution algorithm variable last departure maintained whose value time last packet sent time last departureidtj j number packets currently buffer deliver packet update last departure ratejitter bound algorithm c given following theorem theorem 51 let j best ratejitter attainable offline algorithm using buffer space b given arrival sequence maximal ratejitter release sequence generated algorithm c j h never idea proof theorem 51 number packets buffer never slots away slots correspond rates generated optimal offline algorithm formally analyze algorithm c fix optimal execution offline algorithm let us denote maximum minimum interdeparture times offline execution max min respectively hence jitter attained offline algorithm quantities also define following terms note l u shall also use following shorthand notation let b denote number packets stored time buffers algorithm c offline algorithm respectively let ie many packets algorithm c offline algorithm time use extensively following trivial property difference lemma 52 gammab difft b proof immediate fact 0 b b let number packets sent algorithm c time interval analogously offline algorithm following lemma states difference modified according difference packets released lemma 53 two time points proof consider events time interval arrival increases number stored packets offline algorithm c hence change difference follows difft 2 exactly difference number packets sent two algorithms given interval significance lemma 53 allows us ignore packet arrivals analyzing space requirement algorithm need consider difference space requirement offline algorithm following lemma bounds minimal interdeparture time algorithm c example lemma 54 times difft u 1 proof let point time b u 1 lemma follows immediately assume b u point b 0 u b 0 u point exists since b consider time interval interval min released offline algorithm algorithm c released least u min hence since lemma 52 difft 0 u result follows lemma 53 similarly bound difference lemma 55 times difft proof let point time case b point b 0 l b 0 l point 0 must exist since b l time interval l b result follows lemma 53 prove theorem 51 proof theorem 51 lemma 54 times b hence minimal interdeparture time algorithm c smaller min less b2 imax gammai min h lemma 55 times maximal interdeparture time algorithm c larger max less b h since since packets released time theorem follows worthwhile noting doubling space mandatory online ratejitter control well delayjitter control following theorem implies theorem 56 let 1 b exist arrival sequences offline algorithm using space b gets 0jitter online algorithm using 2b gamma buffer space gets ratejitter least x proof theorem 56 similar proof theorem 37 therefore omit 52 adapting unknown x avoid need knowing x advance willing tolerate slow rate initial segment online algorithm done changing specification loading stage algorithm c terminate buffer contains b packets corresponds interarrival time max opposed interarrival time x original specification thereafter algorithm starts releasing packets according specification idt call resulting algorithm c gamma bound time elapses execution c gamma buffer size reach value l clearly point onward guarantees made theorem 51 hold true algorithm c gamma well lemma 57 consider execution algorithm c gamma let time initial loading ends let first time b proof first time b consider time interval length denote number packets arriving interval consider offline algorithm 1 consider execution algorithm time interval interdeparture time least therefore ymaxiffi using eq 8 since b definition ie gammay summing noting gammab 53 multiplicative rate jitter applications may useful define jitter ratio maximal minimal interarrival times call measure multiplicative rate jitter mrate jitter short easy adapt algorithm c case interested mrate jitter needed define case obtain following result using proof technique theorem 51 theorem 58 let j best mratejitter attainable offline algorithm using buffer space b given arrival sequence maximal mratejitter release sequence generated algorithm c using function idtm j delta h 6 conclusion paper studied jitter control algorithms measured terms guarantees relative best possible offline algorithm results delay jitter show simple algorithm filling half buffer strong relative property rate jitter proposed simple algorithm release rate proportional fill level buffer showed relative guarantees quite strong well studied simple distributed model jitter control leave work analyzing realistic models systems including multiple streams interesting network topology r online computation competitive analysis client requirements realtime communication services atm networks concepts rate control servers highspeed networks competitive snoopy caching engineering approach computer networking isochronous applications require jittercontrolled networks amortized efficiency list update paging rules computer networks atm forum technical committee guaranteeing delay jitter bounds packet switching networks charcterizing traffic behavior providing endtoend service guarantees within atm networks service disciplines guaranteed performance service packetswitched networks comparison ratebased services disciplines new architecture packet switched network protocols tr amortized efficiency list update paging rules stopandgo queueing framework congestion management comparison ratebased service disciplines persession endtoend delay distributions call admission problem realtime applications qos requirements atm networks 2nd ed leaveintime computer networks 3rd ed engineering approach computer networking online computation competitive analysis characterizing traffic behavior providing endtoend service guarantees within atm networks ctr khuller problems column acm transactions algorithms talg v2 n1 p130134 january 2006 pal mainak chatterjee sajal k das twolevel resource management scheme wireless networks based usersatisfaction acm sigmobile mobile computing communications review v9 n4 october 2005 yiping gong bin liu wenjie li performance inputqueued cellbased switches two priority classes proceedings 15th international conference computer communication p507514 august 1214 2002 mumbai maharashtra india