certification software components reuse becoming one key areas dealing cost quality software systems important issue reliability components hence making certification software components critical area objective article try describe methods used certify measure ability software components fulfil reliability requirements placed usage modeling technique presented used formulate usage models components technique make possible certify components also certify system containing components usage model describes usage structural point view complemented profile describing expected usage figures failure statistics usage test form input hypothesis certification model makes possible certify specific reliability level given degree confidence certification model basis deciding whether component accepted either storage reusable component reuse concluded proposed method makes possible certify software components developing reuse b introduction objectoriented techniques make possible develop components general develop reusable components particular components must certified regarding properties example reliability component developed reuse must reliability measures attached based one several usage profiles objective certification method discussed provide basis obtaining reliability measure components reliability measure may either actual reliability indirect measure reliability mtbf mean time failures development reuse usage model must constructed parallel development component usage model structural model external view component probabilities different events added model creating usage profile describes actual probabilities events objective components developed certified put repository component stored together characteristics usage model usage profile reliability measure stored connected usage profile since another pro file probably give different perceived reliability component altogether development reuse involves retrieving components repository retrieval stage necessary examine reliability components reused components certified using specific profiles stored reused different environment another usage profile must certified new usage profile method certification described following steps modelling software usage 2 derivation usage profile generation test cases 4 execution test cases collection failure data 5 certification reliability prediction future reliability method applied certification components well system cer tification vii certification software components 22 component certification components must certified external view ie actual implementation component must influence certification process estimation usage probabilities must accurate possible may many cases impossible exactly determine usage profile component problematic especially individual component indirectly influenced external users system must however emphasized important issue find probabilities reasonable relative instead aiming true probabilities ie operation reuse components also means usage model component reused since usage model describes possible usage component without probability estimates events assigned implies structural description usage reused even actual usage profile problems component reuse model reuse different cases discussed section 35 component certification also discussed poore et al poore93 3 usage modelling 31 introduction section discusses usage models usage profiles software systems whole well individual components illustration given chapter 5 means simple telecommunication example system may seen consisting number components component arbitrary element handles coherent functionality usage models intended model external view usage component user behaviour described component behaviour users may humans compo nents modelling usage software components includes problems arise modelling usage systems whole 3 usage modelling primary users component immediate vicinity example components cases users involved example endusers indirectly affect use actual components therefore usage component may derived external user system even user communicate directly component assumed usage models created accordance system structure support reuse view still external objective create usage model parts conform structure system reuse components also means possible reuse usage model describing external usage particular component usage models components may combine way similar components combination within system providing services external user different usage profiles may attached one usage model 32 usage model markov chains means modelling usage discussed whittaker poore whittaker93 use markov chains several advantages including wellknown theories main disadvantage however chain grows large applying large multiuser software systems runeson92 objective usage model determine next event based probabilities markov chain chain used generate next event without taking time events consideration means times events handled separately arbitrary time distribution used hierarchical markov model introduced state hierarchy model shy cope disadvantage known state explosion problem runeson92 shy model describe different types users ie human users systems system parts multiple combinations instances user types development usage model user types handled constructed separately composed usage model system whole model modular therefore suitable reuse since objective ensure conformity usage model system structure see section 31 vii certification software components system configurations example different markets may differ terms user types services available therefore usage models different system configurations may constructed combining shy models reusable components shy models configurationspecific parts hence obtaining shy models different system configurations particular different services one component types reused implies certification often related services potentially provided system general principles behind shy model shown figure 1 usage level user type level user level service level behaviour level link figure 1 state hierarchy model usage divided hierarchy part represents aspect usage 1 usage level state represents complete usage 2 user type level contains user types categories 3 user level represents individual users 4 service level represents usage services available user service usage description instantiated different users 5 behaviour level describes detailed usage single service normal markov chain 3 usage modelling interaction different services modelled links meaning transition one markov chain behaviour level causing transition another chain behaviour level exam ple dials b shown figure 2 transition idle dial user leads transition idle ring user b user user b idle dial idle ring figure 2 link example dials b model discussed detail wohlin runeson wohlin93 runeson92 also used example chapter 5 see particular section 52 33 usage profile usage model complemented usage profile assigns probabilities every branch hierarchy together every transition behaviour level probabilities must derived based experience earlier systems expected changes concerning actual system expected usage system marketed probabilities hierarchy assigned static values example chapter 5 dynamically changed depending states users model latter approach needed able model fact events probable special conditions example probable user recently lifted receiver dial digit specific user lift receiver use dynamic probabilities hierarchy discussed runeson wohlin runeson92 test cases selected running shy model first user type selected random controlled selection specific user chosen service available selected user drawn finally transition markov chain behaviour level actual service selected transition corresponds spe cific stimulus appended test script model run beginning usage level see figure 1 vii certification software components section 54 generation specific stimulus also means generating data put system parameters stimulus hence data taken account 34 usage profile reuse component developed reuse certified particular usage profile initial usage stored repository future reuse component stored together characteristics usage model usage profile reliability measure attached actual usage profile used certification since based particular profile valid arbitrary usage parts components frequently used operation tested frequently key objective usage testing parts less erroneous since failures found certification assumed corrected another usage profile relating parts component probably give lower reliability measure developing reuse software components necessary compare certified usage profiles environment component reused similar profile found next step assess whether reliability measure stored component good enough system developed component certified usage profile new sys tem new certification must performed usage model stored component used certification certification new profile new certified reliability stored repository component objective measures reliability arbitrary usage profile would interest development reuse however impossible record measures since definition reliability probability device performing purpose adequately period time intended operating conditions encountered component therefore recertified reused operational conditions initially profiled 3 usage modelling 35 reuse usage model proposed usage model easily reused extent model reuse model reused depends system components system reused different reuse scenarios presented component certification together system context component certification 1 reuse usage model usage profile usage model usage profile component reused without modification component certi fied stored repository 2 reuse usage model adjusted usage profile usage model component reused component certified individually new usage profile certification obtained model applying new usage profile gives new reliability measure component based upon new expected usage 3 reuse adjustments usage model usage profile adjustments structural usage component made component changed order reused usage model must therefore updated accordingly new certifi cation must made reuse components system context 1 reuse component without modification objective derive usage model system usage models components system composed set components particular achieved structural usage component un changed probabilities usage profile changed investigated whether possible derive vii certification software components system reliability measures reliability measures components usage profiles components unchanged main problem probable interdependence components assessed component certification area research 2 reuse component modifications change usage model result change adaptation component therefore usage model individual component must changed thereby changing usage model system system either certified expected usage profile system reliability system must derived components problem addressed poore93 3 changes existing system element system changed example component replaced another different functionality usage affected component changed existing usage model new certification must obtained based new usage model two factors concerning shy usage model make suitable reuse first distinction usage model usage profile important since facilitates use model different profiles without changes secondly modularity usage model traceability constituents usage model components system essential reuse point view 36 evaluation shy model important aspects shy model 1 intuitive conformity model parts system constituents makes natural develop model particularly case system constituent provides specific service external user 4 certification components 2 size model size increases linearly increasing numbers users runeson92 3 degree detail model supports different levels detail actual degree detail determined based system size components application domain 4 dependencies functional dependencies included model link concept 5 reuse support model supports reuse stated section 35 modularity conformity system constituents 6 assignment probabilities structure model helps partition problem smaller parts hence making easier derive transition probabilities 7 calculations theoretically possible make calculations hierarchical model transforming normal markov model however impossible practically due size normal model work progress allow calculations performed directly shy model 8 generation test cases test cases generated automatically model 4 certification components 41 theoretical basis book musa et al musa87 model reliability demonstration testing described model form hypothesis certifica tion determines specific mtbf requirement met given degree confidence hypothesis proposed testing aimed providing basis acceptance rejection hypothesis procedure based use correct operational profile testing faults corrected primary objective however certify mtbf requirement fulfilled vii certification software components end certification hence corrections certifica tion process ought allowed relaxation assumption model correction failure discussed hypothesis certification model based adaptation sampling technique used acceptance rejection products general hypothesis mtbf greater predetermined requirement hypothesis rejected objective met required confidence accepted hypothesis neither accepted rejected testing must continue required confidence decision achieved hypothesis certification performed plotting failure data control chart figure 3 shows failure number r normalized failure time tnorm failure time normalized dividing failure time required mtbf testing continues whilst measured points fall continue region testing terminated measure points fall rejection acceptance region software rejected accepted accordingly r2010tnorm figure 3 control chart hypothesis certification reliability control chart constructed drawing acceptance rejection lines based accepted risks taken acceptance bad product rejection good product calculations described musa et al musa87 correction software faults introduced resetting control chart correction times practical reset control chart every failure chart reset number failures occurred reason resetting chart mainly correction software viewed new product 4 certification components concluded hypothesis certification model easy understand use hypothesis certification model provides support decisions acceptance rejection software products specified levels confidence different failure types monitored example different severities failure data type plotted diagram related required mtbf specific types overall criterion acceptance software accepted accepted failure types hypothesis certification model give predictions future reliability growth certification however complemented software reliability growth model purpose 42 practical application hypothesis certification model suitable use certifica tion newly developed reusable software components major advantage model require certain number failures occur obtaining results model works even failure occurs since certain failurefree execution time makes possible state mtbf given degree confidence greater predetermined value therefore mtbf realistic measure even particular software component may fault free model assume particular failure distribution available software reliability growth models require occurrence many failures predictions made component reliability normal figure would region 2040 failures hopefully realistic failure expectation figure software component also anticipated popularity reuse develops quality software systems improve since reusable components tested thoroughly certified specific reliability level different usage profiles therefore implying performing systems development reuse number faults component exceptionally low proposed hypothesis certification model still applied vii certification software components 5 simple example 51 general description objective section summarize explain models presented sections thorough simple manner using example telecommunication domain example follows steps outlined section 21 basic concept usage model presented figure 1 module certified module composed two components c1 c2 module seen compo nent c1 reused component found repository c2 reused extensive adjustments c1 offers service s1 user whereas c2 originally offered s2 reused component version s2 changed s2 service added s3 module shown figure 4 figure 4 module certified reused component c1 certified usage profile profile expected using c1 module must therefore recertified 52 modelling software usage shy usage model module developed according structure figure 1 two different user types use module namely ut2 two users first type ie u11 u12 one user second type u21 three upper levels shy model usage level user type level user level illustrated figure 5 5 simple example usage figure 5 upper levels usage model module three services available users module first service s1 c1 reused without adjustment therefore behaviour level usage model service also reused without adjustment usage profile s1 however changed new profile must derived service s2 c2 changed s2 results addition two new states original usage model s2 service s3 c2 new behaviour level usage model must developed since service new behaviour level usage models services illustrated figure 6 shaded areas changed new figure 6 usage models s1 reused s2 modified s3 new entire usage model composed using structure figure 5 together usage models service figure 6 users type 1 access service s1 user user type 1 instance usage model service s1 connected user type 2 access services s2 s3 hence one instance usage model connected user type 2 services interdependent links services would added hence modelling dependence services used external users entire usage model module shown figure 7 vii certification software components usage figure 7 usage model module 53 derivation usage profile usage profile derived ie probabilities assigned different transitions usage model static probabilities used example see section 33 first probabilities different user types determined followed assignment probabilities users type probabilities selection services available user determined finally transition probabilities within behaviour level model services assigned usage profile derived bottomup suitable application question strength modelling concept one level need dealt time possible usage profile usage model shown figure 8 though without probabilities s2 s3 unfortunately impossible go example detail article particular discuss links depth detailed presentation see wohlin93 runeson92 54 generation test cases initially usage model starts welldefined initial state ie behaviour level models defined initial states 5 simple example usage x03 figure 8 usage profile module selection starts usage state random number drawn example 0534 selecting ut1 since 0534 07 see figure 8 another random number drawn example 0107 selecting u11 selection service random number needed actual state service usage model denoted x transition selected performed stimulus connected transition appended test script shy model run beginning usage state several test cases one long test case generated depending application 55 execution test cases collection failure data test cases generated executed types tests failure times recorded failure times measured terms execution time calendar time depending application example failure data shown table 1 times failures given undefined time unit failure data constructed illustrate example table 1 failure data failure number 1 time fail 320 241 847 732 138 475 851 923 1664 1160 ures vii certification software components 56 certification reliability reliability certified applying hypothesis certification model collected failure data fact mtbf requirement certified mtbf objective example 800 time units means first normalized failure time tnorm equal 320800 see table 1 figure 9 data points plotted control chart module certification accepted points fall acceptance region module accepted eighth ninth failure time acceptance 5 400 r97531reject continue accept tnorm figure 9 control chart certification 6 conclusions reuse one key developmental issues software systems future particular reliable systems therefore reused components must reliable component reliability achieved applying sound development methods implementing fault tolerance finally adapting methods ensure certify reliability quality attributes components developing reuse usage testing operational profile testing already shown superiority traditional testing techniques reliability per 6 conclusions spective higher perceived reliability operation obtained usage testing coverage testing less effort cost gains applying usage testing presented example musa musa93 article concentrated certification software com ponents issues development reliable software fault tolerance equally important although discussed proposed method usage modelling ie state hierarchy shy model shown valuable abstraction fundamental problem concerning components reuse model divided levels services modelled independently possible therefore supporting reuse objective area certification software components quite new ideas capabilities presented research course application needed reliability certification model discussed well established disciplines also adapted used software community model simple understand apply emphasized usage models developed reliability measures given usage profile reused together components division structural usage model different usage profiles makes possible reuse usage model apply new profiles new environment behaviour different considered earlier models methods applied simple example illustrate opportunities benefits proposed scheme therefore concluded proposed method one similar applied reuse environment obtain necessary reliability components developing reuse acknowledgement wish thank johan brantestam qlabs valuable technical comments helen sheppard word word graeme richardson helping us english well whole personnel q labs also acknowledge suggestions made anonymous ieee transactions software engineering referees vii certification software components 7 r software reuse emerging technology tr software reliability measurement prediction application software reuse emerging technology markov analysis software specifications planning certifying software system reliability operational profiles softwarereliability engineering ctr hai zhuge inexact model matching approach applications journal systems software v67 n3 p201212 15 september lutz prechelt walter f tichy controlled experiment assess benefits procedure argument type checking ieee transactions software engineering v24 n4 p302312 april 1998 castano v de antonellis b pernici building reusable components public administration domain acm sigsoft software engineering notes v20 nsi p8187 aug 1995 victor r basili steven e condon khaled el emam robert b hendrick walcelio melo characterizing modeling cost rework library reusable software components proceedings 19th international conference software engineering p282291 may 1723 1997 boston massachusetts united states sathit nakkrasae peraphon sophatsathit formal approach specification classification software components proceedings 14th international conference software engineering knowledge engineering july 1519 2002 ischia italy john c knight michael f dunn software quality domaindriven certification annals software engineering 5 p293315 1998 osman balci methodology certification modeling simulation applications acm transactions modeling computer simulation tomacs v11 n4 p352377 october 2001 osman balci richard e nance james arthur william f ormsby improving model development process expanding horizons verification validation accreditation research practice proceedings 34th conference winter simulation exploring new frontiers december 0811 2002 san diego california