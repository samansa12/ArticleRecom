efficient support interactive scanning operations mpegbased videoondemand systems paper present efficient approachfor supporting fastscanning fs operations mpegbased videoondemand vod systems approach based onstoring multiple differently encoded versions samemovie server inormal versioni used normalplayback several iscan versionsi used fs eachscan version supports forward backward fs givenspeedup server responds fs request switching normal version appropriate scan versionscanning versions produced encoding sample theraw frames using gop pattern normal version scanning version decoded played back atthe normal frame rate gives perceptual motion speedupby able control traffic envelopes scanversions approach integrated previouslyproposed framework distributing archived mpegcoded video streams fs operations supported using littleextra network bandwidth beyond already allocatedfor normal playback mechanisms controlling trafficenvelopes scan versions presented actionstaken server clients decoder response tovarious types interactive requests described detailthe latency incurred implementing various interactive requests shown within acceptable range stripingand diskscheduling strategies storing various versions atthe server presented issues related implementationof approach discussed b introduction maturing video compression technologies magnetic storage subsystems broadband networking made videoondemand vod computer networks viable ever major carriers tested smallscale vod systems companies provide related services products emerging cf 18 6 improve marketability vod services accelerate widescale deployment services must support user interactivity affordable cost mini mum interactive vod service must allow users dynamically request basic vcr operations part paper presented acmspie multimedia computing networking conference 1998 department electrical computer engineering university arizona tucson az 85718 tel 520 621 8731 krunzecearizonaedu work partially supported nsf career award ani9733143 partially university arizona facultygrant award z department computer science university maryland college park md 20742 stopresume pauseresume slow motion jump forward backward fast scanning ie viewing movie forward backward multiple times normal playback rate difficulty supporting interactivity vod system varies one interactive function another stop jump pause followed resume relatively easy support require bandwidth required normal playback hand fastscanning involves displaying frames several times normal rate transporting decoding frames multiple times normal frame rate prohibitively expensive infeasible todays hardware decoders backward fs even difficult support compression schemes involve motion interpolated frames b frames mpeg scheme 17 case mpeg reference frames group pictures gop must decoded b frames gop played back reverse order several approaches proposed support interactivity vod system 26 interactive operations including scanning implemented client side using prefetched frames attractiveness approach lies transparency network server ever scanning operation lasts extended period time significant portion movie must prefetched addition large buffer requirement excessive prefetching necessitates requesting movie long commencement scanning operations also supported transmitting frames multiple times normal frame rate communications channel different one used normal playback 12 28 since given point time small percentage users interactive mode interactive channel shared several users however case small probability request fs operation rejected ie fs operations guaranteed statistical basis scanning operation video frames must decoded multiple times normal decoding rate interactivity also addressed context batching 2 1 3 11 15 24 25 34 example 2 authors assume vod server operates multicast environment whereby multiple instances movie simultaneously distributed however instants different logical times vcr operations implemented moving user multicast group appropriate logical time since number different instances movie limited scheme support discontinuous vcr functions settop buffer needed support fs operations excessive number multiple instances small furthermore decoder still required process frames multiple times normal frame rate achieve fs effect fs functions also supported dropping parts original compressed video stream 9 31 7 27 dropping aims reducing transport decoding requirements fs without causing significant degradation video quality mpeg2 dropping facilitated various modes scalability spatial temporal snr 17 spatial scalability example provides means drop less important data enhancement layer maintain essential data base layer typically dropping performed compression must done selectively ensure dropped data result significant degradation video quality example whole mpeg frames dropped dropping must take account dependency structure mpeg sequence one possibility drop b frames mpeg stream transmit anchor frames p 7 transmitted frames played back normal playback rate give visual perception fs another alternative drop mpeg frames pergop basis 9 since gop interval corresponds half second approach introduces discontinuities movie third approach skip trailing part gop transmit first frames gop 27 transmitted frames must chosen manner decoded independently skipped frames transmitted frames played back normal frame rate good discussion mpegrelated techniques given 31 instead dropping frames compression researchers suggested supporting fs operations using separate copies movie encoded lower quality quality normal playback copy 30 scan copies include p frames ie b frames used makes easier provide backward fastscan motion vectors predicted frames encoded manner reduce artifacts playing frames reverse order work introduce efficient approach supporting forward fastscanning ffs backward fastscanning bfs vod system similar 30 approach based encoding separate copies movie used fs operations copy generated skipping raw video frames compression refer versions scan versions one used normal playback normal version scan version used provide bfs ffs given speedup scan versions encoded way played back normal frame rate give perception faster video forward backward direction contrast approach 30 scan versions encoded using gop normal version b frames included encoding scan version performed manner enforces particular timevarying traffic envelope version form ratecontrolled compression results variable picture quality fs making envelopes scan versions identical sufficiently close envelope normal version fs integrated previously proposed framework distribution archived mpegcoded video streams 21 22 generating scan versions exhibit similar envelopes normal version fs operations made transparent underlying network supported little extra bandwidth decoding rate normal playback paper organized follows section 2 briefly describe previously proposed framework video distribution based timevarying traffic envelopes section 3 preprocessing steps required support fs operations presented section 4 provides detailed description fsrelated interactivity supported signalling client server discussed section 5 section 6 discuss disk scheduling needed proposed fs approach implementation issues briefly discussed section 7 section 8 compare scheme fs schemes finally section 9 summarizes paper points open research issues envelopebased video scheduling multiplexing section give overview previously proposed framework distribution mpegcoded video streams details found 21 22 33 framework video distribution network consists several fixedcapacity dedicated bandwidth pipes extend server remote headend switches public network figure 1 bandwidth pipes example atm virtual paths vps onto several video connections multiplexed clients request videos demand sending requests server via one switches video streams transported constant frame rate perstream bandwidth video streams video streams switch video server clients clients headend switch public network figure 1 video distribution network two switches significantly less source peak rate since frame transmission rate playback rate prefetching needed client settop box bandwidth gain achieved statistical multiplexing mpeg streams described deterministic timedependent traffic envelopes envelope constitutes timevarying upper bound bit rate intended capture periodic structure mpeg stream terms repetition gops simplest form traffic envelope called global envelope described follows ith mpeg stream global envelope periodic function time parameterized 5tuple max largest frame typically frame p max largest p b frame typically p frame b max largest b frame construction remaining two parameters characterize gop pattern ith stream n length gop itoi frame distance ptop frame distance example global envelope shown figure 2 based globalenvelope model mpeg streams appropriately scheduled multi time frame periods bit rate global traffic envelope windowbased envelope figure 2 example global windowbased traffic envelopes n plexing server consider n mpeg video streams destined switch let b traffic envelope whose starting time given let e n least common multiple fn 1 n g define phase u n u 1 0 special case n describes frame lag gop relative closest gop 1 temporal relationships gops n streams completely specified referred arrangement let b tot traffic envelope resulting superposition n streams b tot periodic period e n peak rate b tot given b tot allocating ncu n bandwidth aggregate traffic stream guaranteed constant framerate delivery endtoend basis values u cu n referred perstream allocated bandwidth psab smaller source peak rate allocated bandwidth ncu n updated dynamically upon addition new video stream termination ongoing one stream scheduling performed new video requests done expense delaying service new request e frame periods optimal scheduling policy one produces best arrangement u u2u n 2 u set possible arrangements n streams 21 optimal suboptimal scheduling policies proposed homogeneous heterogeneous multiplexed streams characterized global envelopes policies resulted psab 4060 source peak rate actual value depends envelope bandwidth gain improved using windowbased traffic envelopes 33 case prerecorded mpeg sequence divided several segments number frames time takes transmit one segment called window globalenvelope model five parameters used characterize windowbased envelope however case values first three parameters ie maximum frame sizes computed segment movie see figure 2 several efficient scheduling schemes devised windowbased envelopes clearly smaller window size smaller amount allocated bandwidth higher computational complexity updating allocated bandwidth reasonable window sizes psab 1530 source peak rate depending envelope parameters window size bandwidth gain comparable one achieved video smoothing eg 29 26 23 13 16 advantages 1 requiring buffer settop box 2 depending network delay variation 3 small startup delay framework 21 22 originally designed playbackonly vod support client interactivity interactive operations fs easily integrated framework therefore addressed paper focus fs interactive operations integration vod framework 3 preprocessing video movies 31 scan versions support fs operations server maintains multiple differently encoded versions movie one version referred normal version used normalspeed playback versions referred scan versions used fastscanning scan version used support ffs bfs given speedup server switches various versions depending requested interactive operation one version transmitted given instant time given speedup factor 2 corresponding scan version obtained encoding subset raw ie uncompressed frames original movie sampling rate 1tos refer sampling rate skip factor scan versions encoded using gop pattern normal version transported normal frame rate result easy show every raw frame encoded frame scan version also encoded frame normal version ie frames scan versions constitute subset frames normal version accordingly max global envelope scan version less equal max global envelope normal version case p max b max p b frame types involve motion compensation prediction interpolation exploits similarities consecutive frames reduce frame size frame skipping increases differences successive images resulting larger p b frames impact frame skipping maximum average frame sizes illustrated figure 3 race clip skipping clip consists 1000 frames frame dimensions 320theta240 pixels skip factor encoding performed using mpeg2 software encoder 3 quantization values set 8 10 25 p b frames respectively part b figure shows average size frames almost unaffected frame skipping contrast average sizes p b frames tend increase skip factor frames frames skip factor normalized frame size race trace maximum frame sizes frames frames normalized frame size race trace b average frame sizes figure 3 frame sizes scan version versus skip factor values normalized respect counterparts normal version 32 controlling envelopes scan versions indicated figure 3a encoding sample raw frames may result higher values generate scan versions comparable envelopes normal version encoding p b frames scan version must rate controlled common approach control size mpeg frame vary quantization factor perframe basis results variable video quality fs operations however quality still constant normal playback without loss generality consider case envelopes global extension windowbased envelopes straightforward bound sizes p b frames scan version encoder uses two predefined upper thresholds u normal version u p u nonnegative constants p frame scan version encoded size greater u u b positive envelope scan version allowed exceed envelope normal version fixed amount case windowbased envelopes u one window another depending variations p raw frame scan version encoded p b frame encoding algorithm checks whether size compressed frame associated upper threshold quantization factor corresponding frame type increased one raw frame reencoded procedure repeated size compressed frame smaller corresponding upper threshold two different approaches used initialize quantization value new p b frame encoded first approach algorithm frame encoded first time encoder starts last quantization value used encoding previous frame type main problem approach quantization value might kept unnecessarily high following encoding large frame resulting unnecessarily low quality fs important produce scan versions comparable envelopes normal version little incentive reducing envelopes envelope normal version second approach encoding algorithm tries track nominal quantization value used encoding type frame normal version consider encoding p frame similar discussion applies b frames first encoding attempt encoder checks final quantization value used encode previous p frame value equal nominal quantization value p frames taken initial quantization value current frame hand last quantization value previous p frame larger nominal value quantization value current frame initialized last quantization value minus one first encoding attempt resulting frame size within upper bound encoder proceeds next frame otherwise quantization value incremented raw frame reencoded first approach advantage second approach tries produce fs effect constant quality normal playback possible minimizes fluctuation video quality fs figure 4 depicts variations quantization values p b frames u 005 experiments nominal quantization values p b frames 10 25 respectively note quantization factors typep typeb frames plotted versus index every frame scan version including indices frames second encoding approach video quality fs varies smoothly around nominal quality expense increase number encoding attempts since encoding vod done offline encoding time may less issue video quality st algorithm 2nd algorithm quantization factor race trace nominal value p frames 1st algorithm 2nd algorithm 2005152535quantization factor race trace nominal value frames figure 4 variations quantization values encoding scan version two approaches contrasted respect video quality using peak signaltonoise ratio psnr use psnr ycomponent decoded frame psnr obtained comparing original raw frame decoded version encoding done using one two algorithms figure 5 depicts resulting psnr values race movie 005 approaches achieve acceptable quality psnr sufficiently large average psnr value 200 frames 369 db first algorithm 375 db second ie average quality slightly better second algorithm absolute values psnr convey advantage second encoding approach purpose compute psnr values 200 frames encoding done without constraints ie upper bounds imposed use values reference frame compute difference reference psnr value psnr value resulting two ratecontrol encoding algorithms differences plotted figure 6 segment scan version figure large value indicates large deviation reference psnr thus lower quality clearly second algorithm achieves better quality first approach expense encoding attempts 33 storage overhead generating separate copies fs operations comes expense extra storage server evaluate storage overhead take account following considerations 1 bfs ffs speedup supported using one scan version 2 frames scan versions need stored since part frames normal version 3 number encoded frames scan version inversely proportional skip factor given considerations storage overhead scan versions computed follows without loss generality st algorithm 2nd algorithm 90 100 110 120 130 140 150 160 170 180 190515253545race trace figure 5 psnr encoded frames scan version 1st algorithm 2nd algorithm 90 100 110 120 130 140 150 160 170 180 1900515253545race trace figure difference psnr constrained unconstrained encoding consider case global traffic envelopes let f number frames normal version frames fn frames f1m gamma 1n p frames f1 gamma 1m b frames storage requirement normal version given avg p avg b avg average frame sizes p b frames normal version let p avg average sizes p b frames scan version skip factor storage requirement scan version given w scan n scan versions skip factors relative increase storage requirement given numerical examples show relative increase storage requirement given figures 7 8 race clip figure 7 depicts relative storage overhead scan version function different upper thresholds 3 upper threshold negligible impact storage overhead 4 storage overhead scan version 25 storage requirement normal version figure 8 shows increase storage function gop length n storage overhead increases slowly n skip factor storage increase figure 7 relative increase storage function 0 5 10 15 20 gop length storage increase figure 8 relative increase storage function n switching normal scan versions section describe switching versions used support various fsrelated operations notation use specify frame consists letter frame type number indicates logical time frame ie time relative events movie convention applies versions thus b16 scan version b frame obtained encoding 16th raw frame original movie b frame necessarily 16th frame temporal order scan version example 8th frame temporal order scan version 41 operation normal playback interpolative nature b compression decoding b frame depends two reference frames p must transmitted decoded b frame decoded one reference frames comes b frame temporal order enable continuous playback receiver mpeg frames transmitted network according decoding order thus transmission decoding order mpeg sequence different temporal playback order example temporal transmission orders normal version shown figure 9 order decode frames b2 b3 i1 p4 must first transmitted decoded process transmitting decoding displaying frames proceeds follows starting time time unit taken one frame period server transmits frames according transmission order ignoring network delays time decoder receives decodes frame i1 time interval 0 1 maintains uncompressed copy frame used decoding subsequent frames interval 1 2 frame p4 received decoded stored frame buffer note p4 decoded reference uncompressed version i1 playback starts i1 displayed interval 2 3 two time units received interval b2 received decoded interval 3 4 b2 displayed b3 received decoded interval 4 5 b3 displayed i7 received decoded stored one two frame buffers point decoder discards i1 subsequent interval p4 already received decoded displayed b5 received decoded using uncompressed p4 i7 frames frame buffer discussion assumed frame received decoded one time unit temporal order b transmission order figure 9 temporal transmission orders normal version decoder maintains twoframe buffer contains two recently decoded reference frames incoming p frame decoded reference recent two incoming b frame decoded reference 42 switching normal playback ffs interactive fs operations implemented server switching normal version one scan versions switching one version another performed online response client request section describe switching used implement ffs similar situation normal playback frames scan version different transmission order temporal order case ffs temporal order scan version playback order figure 10 depicts temporal transmission orders scan version 2 two successive frames scan version differ logical times sn frame periods logical time time relative events movie temporal order b transmission order figure 10 temporal transmission orders scan version maintain gop periodicity switching normal scan version must take place frame furthermore enable correct decoding p b frames normal scan versions frame must common versions ffs request arrives server server continues send frames normal version excluding first p frame follows common frame point server switches scan version example figure 11 illustrates idea example use normal scan versions figures 9 10 respectively ffs request arrives server p16 normal version transmitted case server continues send frames normal version including b24 essentially corresponds continuing play back frames normal version next common frame i25 server switches scan version starting p31 b27 b29 etc frame p31 decoded using i25 common versions example gives worstcase latency receiver continues normal playback sn frame periods time ffs request issued assuming gop normal version corresponds half second worstcase latency s2 seconds average latency s4 seconds requesting ffs client trying advance fast movie thus extending normal playback seconds prior initiating ffs acceptable note disruption playback transition normal ffs switching operation transparent decoder normal version scan version received displayed b9 p10 b11 b12 i13 b14 normal playback 7gamma ffs request start ffs figure 11 switching normal playback ffs 43 switching ffs normal playback present two different approaches switching ffs normal playback first approach similar one used switch normal playback ffs upon receiving request normal playback server continues send frames scan version next common frame also sends b frames scan version precedes frame temporal order comes transmission order server switches normal version approach illustrated example figure 12 movie ffs mode client requests normal playback display frame b23 point server transmitted p31 ideally receiver proceed playing back frames indices 24 25 26 etc decode b24 decoder needs p22 normal version however server transmits p22 frame eventually played back causing undesirable artifacts neither server start p28 normal version since decoder incorrectly decode frame reference p31 scan version ensure switching normal playback done received frames decoded properly artifacts without modifications normal operation decoder server must continue send frames scan version next common frame i37 switches normal version starting p40 decoded properly using i37 means ffs extended beyond point normal playback requested worst case normal playback resumed logical time s2 seconds logical time normaltoffs request since n frames scan version correspond seconds worth video however takes maximum 12 second real time reach appropriate switching point scan version normal version received decoded i25 b21 b23 p31 b27 b29 i37 b33 b35 p40 b38 b39 i43 displayed b17 p19 b21 b23 i25 b27 b29 p31 b33 b35 i37 b38 b39 normal playback request start normal playback figure 12 first approach switching ffs normal playback approach advantage transparent decoder ie decoder need know switch scan version normal version occurred however disadvantage normal playback resumes later point requested worstcase difference s2 seconds movie time reduce extra ffs introduce second switching approach normal playback resumes subsequent frame normal version frame necessarily common scan normal versions describe approach reference example figure 13 n shown figure client requests resumeplayback b27 scan version displayed normal playback resumed starting subsequent frame normal version whose logical time closest logical time resumeplayback request example frame i31 switching process client continues display frames scan version ie extended ffs frame closest logical time i31 example frame p31 frame p31 never displayed used decode b27 b29 scan version receiving displaying i31 normal version movie pauses frame p34 normal version received decoded since two reference frames needed stream playback process pause period decoder ignores frames sent server figure 13 frames represented x dont care course mechanism needed inform decoder start accepting decoding incoming frames mechanism described later section note switching approach transparent decoder shown logical time last displayed frame scan version farther frame periods logical time subsequent frame normal version thus transition scan version normal version speedup motion picture somewhere normal playback ffs example b29 scan version followed i31 normal version transition appears continuation ffs second ffstonormal switching approach normal playback resumes logical time farther 12 second n frame periods logical time ffstonormal request compared s2 seconds first approach maximum time client wait normal playback resumed ns frame periods extended ffs frame periods pause amounts 12s m2n seconds less one second scan version normal version received decoded p31 b27 b29 i31 x x p34 b32 b33 i37 b35 displayed b23 i25 b27 b29 i31 i31 i31 i31 b32 b33 p34 normal playback start normal playback request figure 13 second approach switching ffs normal playback 44 switching normal playback bfs instead generating distinct scan version bfs use one scan version ffs bfs speedup case dependency structure mpeg sequence must taken account transmitting frames bfs decoding displaying frames client side first consider switching normal playback backward playback special case bfs 441 normal playback backward playback implement backward playback bpb server uses different transmission order one used forward normal playback receiving bpb request server initiates bpb operation starting subsequent reference frame p current gop initiating bpb decoder must receive decode reference frames current previous gops consider situation figure 14 temporal order underlying mpeg sequence shown part figure suppose bpb issued playback b36 subsequent reference frame follows b36 temporal order i37 thus client continues normal playback display i37 meanwhile server continues sending frames normal version needed maintain normal playback including i37 server starts sending reference frames current previous gops maximum 2nm reference frames need decoded stored frame buffer bpb initiated example client already decoded stored i37 bpb issued hence initiating bpb decoder must receive decode i28 p31 p34 current gop well i19 p22 previous gop frames transmitted decoded movie pauses maximum duration two gops one second minimize pause duration following guidelines followed whenever possible 1 reference frames present gop sent reference frames previous gop 2 reference frames given gop sent according decoding order however ensuring gop periodicity transmitted sequence important satisfying two guidelines thus guidelines violated necessary example figure 14b frames i28 p31 p34 must sent order according first guideline first available slot send frame maintaining gop periodicity time slot 42 whereas server send p frame slot 39 thus server sends slot 39 i28 slot 42 violating first guideline process building reference frames decoder server need send frames otherwise b frames ignored decoder resulting empty slots transmission sequence indicated xs dont care figure 14b required reference frames received decoded bpb initiated note p frames decoded periods received must temporarily stored compressed format reference frames previous gop received frames received decoded displayed backward direction clearly management frame buffer decoder must modified support bpb instead storing two reference frames decoder must store maximum 2nm uncompressed frames mechanism needed signal decoder transmitted reference frames bpb mechanism described section 5 decoder receives indication bpb requested modifies management frame buffer accommodate uncompressed frames figure 15 depicts change content frame buffer example note bpb request issued decoding p40 normal playback replaces p34 thus time decoder starts modifying buffer management uncompressed p34 parts already discarded p34 must retransmitted 442 normal playback bfs addition reversing playback direction bfs request also involves switching normal scan version section present two different approaches supporting bfs first approach approach bfs initiated common frame following bfs request normal playback continues display common frame thus server continues sending frames temporal order normal version received i37 b35 b36 decoded i37 b35 b36 p40 i28 displayed b33 p34 b35 b36 i37 i37 i37 i37 i37 i37 i37 i37 time 43 44 normal request received decoded p31 p34 i19 b36 b35 p22 b33 b32 displayed i37 i37 i37 i37 i37 i37 i37 i37 b36 b35 p34 b33 time pause 7gamma start bpb received p13 decoded p25 displayed b32 p31 time 57 58 59 continue bpb b received decoded displayed frames figure 14 switching normal playback backward playback time uncompressed frames buffer 36 p40 i37 37 i37 p40 discarded 42 i28 i37 48 p34 p31 i28 i37 54 p22 i19 p34 p31 i28 i37 57 p25 p22 i19 p34 p31 i28 figure 15 content frame buffer transition normal playback bpb normal version short period following receipt bfs request server switches scan version case normaltobpb server must first send reference frames current previous gops scan version maximum 2nm reference frames consider example figure 16 scan version following parameters 2 bfs request issued playback frame b72 normal version normal playback continues display i73 first common frame server receives bfs request transmission p76 thus frames precede i73 playback order already sent server switches scan version starts sending reference frames current previous gops example frames i37 i55 p61 p67 must received decoded bfs initiated general bfs cannot initiated frames current gop one frames previous gop decoded frames transmitted following guidelines used support bpb thus transmission order p61 i55 p67 i37 decoding order i55 p61 p67 i37 case bpb b frames need transmitted buildup reference frames also p frames decoded frame periods received must temporarily stored compressed format buildup reference frames movie pauses frame 73 frame i37 received decoded transmission decoding reverse playback scan version streamed bfs initiated part c figure 16 depicts change content frame buffer previous example bfs request issued display common frame rather bestcase scenario worstcase scenario occurs bfs requested display common frame case normal playback continues additional sn frame periods s2 seconds next common frame encountered extra normal playback followed pause period lasts two gops one second reference frames accumulated decoder second approach alternative approach initiate bfs closest reference frame p scan version bfs request issued movie pauses immediately currently displayed frame could type client identifies reference frame scan version closest logical time larger logical time currently displayed frame bfs initiated reference frame server receives bfs request starts sending reference frames last two gops including designated reference frame thereafter process similar one used first bfs approach example consider situation figure 17 since bfs request issued playback b80 movie pauses frame reference frame scan version temporal order scan version received decoded displayed time normal bfs request received decoded p61 p67 i37 b71 b69 p43 b65 b63 p49 displayed i73 i73 i73 i73 i73 i73 i73 i73 b71 b69 p67 b65 b63 time 81 pause 7gamma start bfs received decoded displayed p61 b59 b57 i55 b53 b51 time 94 95 96 97 continue bfs b received decoded played frames time uncompressed frames buffer 71 i73 p70 72 p76 i73 73 i73 p76 discarded 78 i55 i73 84 p67 p61 i55 i73 87 i37 p67 p61 i55 i73 90 p43 i37 p67 p61 i55 i73 discarded 93 p49 p43 i37 p61 i55 p67 discarded c content frame buffer decoder figure first approach switching normal playback bfs closest logical time current logical time p79 thus bfs initiated p79 decoder must receive p79 p61 i73 p67 p43 i55 p49 order must decode i73 p79 i55 p61 order done process transmitting decoding displaying frames purpose bfs streamed similar first approach maximum duration pause period given periods one second m2n second independent slightly higher worstcase pause period first approach extra normal playback first approach received decoded b78 i82 b80 b81 i73 displayed b77 b78 p79 b80 b80 b80 b80 b80 b80 b80 b80 b80 b80 normal bfs request received decoded p79 i55 p61 b77 b75 p67 displayed b80 b80 b80 b80 b80 b80 b80 b80 b80 b80 p79 b77 b75 pause 7gamma start bfs received decoded displayed i73 b71 b69 p67 b65 b63 p61 b59 b57 continue bfs figure 17 second approach switching normal playback bfs 45 switching bfs normal playback easiest way resume normal playback following bfs initiate normal playback frame common normal scan versions analogous first approach switching normal playback bfs thus client requests normal playback movie remains bfs mode common frame encountered worst normal playback resumed logical point s2 seconds movie time logical time resume requested takes maximum 12 second reach common frame gop scan version corresponds sampled video segment duration seconds however takes 12 second play back gop upon receiving resumeplayback request server switches normal version starting common frame since two reference frames needed frame buffer stream decoding process movie pauses common frame periods m2n second pause needed decode p frame normal version follows common frame normal playback resumed switching process illustrated example figure 18 forms interactivity include switching ffs bfs without going received i37 b65 b63 p31 b59 b57 p7 b53 b51 i19 b47 b45 x decoded i37 b65 b63 p43 b59 b57 p49 b53 b51 i19 b47 b45 displayed b69 p67 b65 b63 p61 b59 b57 i55 b53 b51 p49 b47 b45 normal playback request received decoded displayed p43 b41 b39 i37 i37 i37 i37 b38 b39 p40 continue bfs pause 7gamma start normal playback figure 18 switching bfs normal playback requested operation switching delay seconds 1st ffstonormal 1st approach 12 ffstonormal 2nd approach 12s m2n bpbtonormal 12 m2n bfstonormal 12 m2n table 1 worstcase switching delay associated various interactive operations normal playback also vod system supports multiple fs speedups switching take place two scan versions different speedups scenarios dealt using similar approaches ones described slight modifications fit specifics scenario due space limitations elaborate scenarios define latency interactive operation difference time request client side initiation time clients display device latency measures actual waiting time client consists 1 roundtrip propagation time rtt client server 2 processing delay server 3 switching delay delay caused switching one version another includes time needed reach appropriate switching point time needed build frame buffer bfs operations second component latency relatively small ignored rtt depends underlying network topology 28 authors report oneway propagation delays 50 milliseconds widearea atm network less 10 milliseconds atm lan connections table 1 summarizes worstcase switching delay various types requests delay measured real time logical time movie typical values n say worstcase switching delay associated common interactive operations ranges fraction second three seconds delay reduced using smaller gop length n reducing however reducing skip factor increase storage requirement scan version since frames generated reducing gop length increase storage needed normal scan versions potentially reduce efficiency underlying envelope based scheduling mechanism tuning parameters requires careful consideration involved tradeoffs 5 signalling signalling client server must extended allow decoder distinguish various versions purpose use inband signalling mechanism based userdata field header mpeg frame frame carries header value skip factor playback direction forward backward information conveyed using one byte userdata field significant bit byte encodes playback direction seven bits encode skip factor fact four bits enough represent skip factors remaining three bits used convey types information p b frames given version skip factor inserted frame header encoding version contrast frames skip factor inserted transmission since frames common two versions frames playback direction added fly transmission mpeg stream done efficiently since user data frame header byte aligned located fixed offset beginning mpeg frame server insert userdata bytes minimal parsing mpeg stream information gop structure version included sequence header header first gop information used allocate memory frame buffer initial signalling phase 6 disk scheduling compressed videos typically stored disk units retrieval blocks block consists one consecutive gops stream switching scheme requires storing multiple versions mpeg movie straightforward approach store version separately selfcontained mpeg stream main disadvantage approach wastes disk space separately maintaining frames scan version although frames already included normal version cost disk space major issue storage approach preferred simplicity otherwise duplicate frames eliminated method intermixing versions movie needed accomplished structure retrieval block extended accommodate scan versions movie let k skip factors supported system let lcm least common multiple skip factors block consists lcm gops normal version plus lcm gops ith scan version way block contains portions normal scan versions correspond segment movie resulting block consists lcm frames excessively large block sizes avoided appropriate choice skip factors least common multiple small frames within block organized follows first frames lcm gops normal version put beginning block separate frames generated scan versions followed p b frames version p b frames first scan version preferably one smaller skip factor p b frames next scan version frames scan versions included structure allows efficient disk access since related data stored consecutively disk extra diskhead movements needed access outofstream frames scheme frames block ordered according transmission order rearranged sent network rearrangement efficiently achieved allowing envelopescheduling module responsible sending frames network random access buffered frames way transmission order achieved without data movement memory order able manipulate individual frames knowledge location frame within retrieval block necessary accomplished associating small directory indices retrieval block directory computed movie initially stored disk maintained main memory database since size small playback normal version first part retrieval block includes p b frames normal version retrieved disk waste io bandwidth scan version retrieved two alternatives exist first alternative read whole block discard frames belong target scan version alternative read frames target scan version two reads one frames beginning block one p b frames target scan version directory associated block used locate appropriate frames inside retrieval block first approach simpler wastes io bandwidth fs periods second alternative requires two reads per block eliminates waste io bandwidth especially several scan versions per movie another issue placement blocks within disk subsystem multidisk system blocks typically striped among different disks order maximize disk throughput balance io load examples striping schemes found 32 5 10 conventional block placement approach ones 19 easily adapted framework particular retrieval block composed frames versions movie resulting composite stream striped similar typical mpeg stream hand different versions movie stored independently version placed disk independently using example one algorithms 19 finally block retrieval playback performed using algorithms attempt minimize disk head movements handle block retrieval scan algorithm 14 sorts blocks retrieved cylinder location blocks outermost cylinders serviced first head moves towards innermost cylinders 7 implementation issues feasibility stream scheduling multiplexing approach demonstrated 20 using specific hardware setup briefly discuss general implementation issues related approach since approach relies timevarying envelopes timing considerations crucial operation purpose two important modules must implemented video server stream manager envelope scheduler modules coordinate operation disk scheduler used prefetching video blocks 71 stream manager main purpose module handle client requests new movies well requests interactive operations simplest form stream manager consists userlevel process process establishes bandwidth pipe destination switch waits indefinitely client requests eg listens given port request new video arrives server stream manager inquires envelope scheduling module admissibility new stream provides information disk io subsystem retrieve movie data place buffers envelope scheduling module case fs request stream manager responsible adding stream switching information needed client decoder eg speedup direction playback 72 envelope scheduler module responsible envelopebased stream scheduling multiplexing admission control upon receiving request new stream envelope scheduler computes best phase scheduling stream purpose maintains bandwidth table dimension n theta e n number ongoing streams row describes traffic envelope one active stream taking relative phase account additional row needed give aggregate bandwidth e n successive time slots bandwidth table envelope prospective stream envelope scheduler easily determine best phase new stream associated bandwidth similarly check admissibility new stream stream found admissible envelope scheduler updates bandwidth table incorporating envelope new stream analogous procedure used ongoing stream terminated request accepted data retrieved disk subsystem units blocks block size depends underlying striping mechanism typically consists several gops ideally would like retrieve data framebyframe basis level fine granularity feasible current disk systems envelope scheduler maintains perstream buffer space used temporarily store retrieved data statistical multiplexing implemented software using highpriority process executes periodically every 1f seconds f frame rate formatted video start period process reads one frame every perstream buffer sends frames network clearly timeliness process impacts effectiveness multiplexing approach timeliness easily ensured realtime operating system os oss support neardeterministic execution processing tasks various approaches used increase priority process performing multiplexing task example flavors unix possible assign negative priority process giving higher priority execution userlevel processes another possibility implement process part os kernel gives process high priority ensures timeliness approach used design stony brook server 31 based freebsd 24 unix os yet another approach performing multiplexing process implement process network device driver 20 20 multiplexing process implemented device driver atm network adaptor card nic communications stream manager userlevel process device driver provided extended set system calls derived unix system call 8 comparison schemes section compare fs approach following approaches 1 multicastbased stream switching 2 2 contingencychannelbased 12 3 stony brook server 31 4 prefetching 26 5 gopskipping 8 6 partialgopskipping 27 7 skipping bp frames 7 brief discussion approaches given section 1 comparison performed respect factors first column table 2 difficulty quantify certain factors lack detailed information certain fs approaches contend qualitative comparison scheme given one three grades examined factor good fair poor comparison meant convey tradeoffs provided different schemes comment examined factors video data retrieved disk units blocks temporarily stored servers main memory sent network therefore memory requirement server depends block size turn depends underlying disk scheduling approach scheme different ways storing scan versions disk scan versions intermixed normal version block composed gops block size relatively large resulting large servermemory requirement schemes generally smaller block sizes client resources refer memory cpu requirements needed process decode received frame provide backward fs operations scheme requires buffering maximum reference frames larger postencoding frame skipping schemes require buffering two reference frames lower prefetching approach large amount video data must prefetched clients settop box also client processing requirement scheme lower contingencychannel scheme client decode display data multiple times normal playback rate bitrate control refers flexibility trading visual quality fs lower bit rate regard factor partialdropping schemes perform poorly since limited reduction bitrate achievable fs contrast streamswitching schemes stony brooks achieve good degree bandwidth control since use preencoded scan versions two scheme provides tighter control resulting bit rate bit rate injected network also controlled extent prefetching approach visual quality includes quality displayed video fs operations continuity video ie amount disruption due video gaps artifacts caused delay initiation interactive operation factors hard measure quantitatively general expect streamswitching schemes give better performance singlestream schemes compared stony brooks approach 31 scheme expected result better visual quality backward fs periods latter scheme requires modifying motion vectors backward scan versions frameskipping schemes result progressively worse quality larger parts mpeg stream skipped prefetching contingencychannel approaches result good visual quality expense extra client memory network bandwidth performance guarantees refer mathematically proven bounds response time interactive operation response time duration instant client issues fs request fs initiated client display includes transport processing delays scheme capable providing bounds functionality refers flexibility supporting fs requests eg number speedups duration fs period allowable sequence interactive operations etc scheme stony brook scheme achieve high functionality since impose limitation time durations fs operations prefetching approach duration fs operation limited size memory settop box typically holds small portion video movie postencoding frameskipping schemes provide limited number fs speedups contingency channel approach interactive operation may denied many users interactive mode ie interactivity supported statistical basis multicast approach short fs periods supported using locally stored data extended fs requires switching different multicast group different logical playback time general interactivity difficult support multicast approach terms required network bandwidth fs operations approach uses almost amount bandwidth needed normal playback perstream bandwidth fs operations also small multicast contingencychannel approaches value depends number active sources prefetching approach fs supported locally extra network bandwidth needed fs operations similarly extra bandwidth required gopdropping approach partial dropping schemes less efficient terms fs bandwidth requirement eg dropping b frames causes average bit rate mpeg sequence increase drastically storage requirement relatively high schemes use multiple copies per movie stony brooks duplication frames done storage overhead scheme less stony brooks singlecopy schemes lower storage requirements terms complexity disk scheduling schemes involve skipping parts gop require relatively complicated disk scheduling subsystem carefully places data disk disk load balanced normal scan periods stream switching schemes also require slightly sophisticated disk scheduling support switching different copies contingencychannel scheme need retrieve frames multiple times normal playback rate complicates disk scheduling subsystem general disk scheduling interactive vod inherently sophisticated unpredicted pattern clients interactivity factor scheme server memory f g g g g g g g client resources f g p g p g g g bitrate visual quality g p g g g p p p performance guarantees g network bandwidth g g g f g g f p storage requirement p g g p g g g g scheduling complexity f g p f g g g g table 2 comparison different approaches support fs operations 9 summary future work paper presented approach supporting interactive fastscanning fs operations vod system approach integrated previously proposed framework distributing archived mpegcoded video streams widearea network scanning operations supported generating multiple differently encoded versions movie addition normal version used normal playback several scan versions maintained server scan version obtained encoding sample raw frames used support forward backward fast scanning given speedup server responds fsrelated request switching currently transmitted version another version proper encoding scan versions interactive scan operations supported little extra bandwidth decoding requirement normal playback gain comes expense small storage overhead server variability quality motion picture fastscanning periods scheme impose restriction number spacing sequencing interactive operations vod clients given flexibility choose set available vod services offer different levels interactivity billing would done based quality flexibility associated selected service future work includes developing multilevel qos framework interactive vod level corresponds certain degree interactivity could include limitations interactive functions eg number supported speedups visual quality scanning maximum duration scanning operation etc r optimal batching policies videoondemand servers use multicast delivery provide scalable interactive videoondemand service metascheduling continuous media audiovisual multimedia services video demand specification 11 opensystems approach video demand vcr like functions scalable videoondemand service provision vcrlike functions support fully interactive playout diskarraybased video server storage retrieval methods support fully interactive playout diskarray based video server scheduling policies ondemand video server batching providing vcr capabilities largescale video servers comparison bandwidth smoothing techniques transmission prerecorded compressed video multimedia storage servers tutorial adaptive piggybacking novel technique data sharing videoondemand storage servers vbr video atm reducing network resource requirements endsystem traffic shaping isompeg ii baseband passband transport systems interactive video services evaluation video layout strategies highperformance storage server bandwidth allocation admission control schemes distribution mpeg streams vod systems exploiting temporal structure mpeg video reduction bandwidth requirements impact video scheduling bandwidth allocation multiplexed mpeg streams algorithm lossless smoothing mpeg video performance model interactive videoondemand systems split merge sam protocol interactive videoondemand systems bandwidth renegotiation vbr video atm networks supporting stored video reducing rate variability endtoend resource requirements optimal smoothing efficient support scan operations video servers adventures building stony brook video server efficient transport stored video using stream scheduling windowbased traffic envelopes design analysis lookahead scheduling scheme support pauseresume videoondemand application tr metascheduling continuous media algorithm lossless smoothing mpeg video staggered striping multimedia information systems scheduling policies ondemand video server batching providing vcr capabilities largescale video servers support fully interactive playout diskarraybased video server evaluating video layout strategies highperformance storage server efficient support scan operations video servers design analysis lookahead scheduling scheme support pauseresume videoondemand applications storage retrieval methods support fully interactive playout diskarraybased video server adaptive piggybacking supporting stored video adventures building stony brook video server impact video scheduling band width allocation multiplexed mpeg streams multimedia storage servers lowcost storage server movie demand databases vbr video atm comparison bandwidth smoothing techniques transmission prerecorded compressed video exploiting temporal structure mpeg video reduction bandwidth requirements split merge sam protocol interactive videoondemand systems pipelined disk arrays digital movie retrieval scalable videoondemand service provision vcrlike functions optimizing placement multimedia objects disk array ctr kostas e psannis yutaka ishibashi mpeg4 interactive video streaming wireless networks proceedings 9th wseas international conference computers p17 july 1416 2005 athens greece