secure execution java applets using remote playground abstractmobile code presents number threats machines execute introduce approach protecting machines resources hold mobile code describe system based approach protecting host machines java 11 applets approach java applet downloaded protected domain rerouted dedicated machine set machines playground executed prior execution applet transformed use downloading users web browser graphics terminal input output user illusion applet running machine reality however mobile code runs sanitized environment playground user files cannot mounted limited network connections accepted machines protected domain playground thus provides second level defense mobile code circumvents languagebased defenses paper presents design implementation playground java 11 applets discusses extensions forms mobile code including java 12 b introduction advances mobile code particularly java considerably increased exposure networked computers attackers due push technologies often deliver code attacker download execute programs victims machine without victims knowledge consent attackers code could conceivably delete modify steal data victims machine otherwise abuse resources available machine moreover mobile code sandboxes intended constrain mobile code many cases proven unsatisfactory implementation errors enable mobile code circumvent sandboxs security mechanisms 1 9 one oldest ideas security computer oth erwise physically separate attacker resources value paper present novel approach physically separating mobile code resources basic idea execute mobile code somewhere users machine resources value user avail able force mobile code interact user sanitized environment course could achieved running mobile code server serves thereby eliminating mo bility however challenge achieve physical separation without eliminating benefits derived code mobility particular reducing load codes server increasing performance colocating code user order achieve protection organizational level propose designation distinguished machine set machines playground mobile code served protected domain executed mobile code pushed machine protected domain automatically rerouted executed domains play ground enable user interact mobile code execution users computer acts graphics terminal mobile code displays output receives input ever point mobile code executed users machine provided valuable resources available playground mobile code entirely corrupt playground risk mains resources moreover playground placed close network proximity machines domain serves performance degradation experienced users minimal even many playgrounds serving domain balance load among paper report design implementation playground java 11 applets described system reroutes java applets retrieved via web domains playground applets executed using users browser essentially io terminal disallowing playground mount protected file systems open arbitrary network connections domain machinesin limit locate playground outside mains firewallthe domains resources protected even playground completely corrupted system largely transparent users applet developers configurations requires changes web browsers use today class applets amenable execution present playground prototype eg due performance requirements code structure experience class small fraction java applets described playground need trusted system work securely indeed trusted code common configurations system browser small graphics server java applet runs browser graphics server implements interfaces untrusted applet running play ground calls interact user graphics server simply structured piece code thus amenable analysis one configuration system trust limited graphics server browser requires minor change browsers available today constrained using todays browsers offtheshelf web proxy component system described section 3 must also trusted rest paper structured follows section 2 relate work previous efforts protecting resources hostile mobile code give overview system section 3 refine description section 4 describe implementation system detail security system discussed section 5 limitations discussed section 6 related work three general approaches previously proposed securing hosts mobile code first deployed large scale java sandbox model model java applets executed restricted execution environment sandbox within users browser sandbox attempts prevent applet performing illegal actions approach met mixed success even small implementation errors enable applets entirely bypass security restrictions enforced sandbox 1 second general approach execute mobile code trusted based criteria ex ample balfanz proposed java filter allows users specify servers accept java applets see httpwwwcsprincetonedusip criterion applet trusted server serves related approach determine whether trust mobile code based author determined eg code digitally signed author approach adopted securing microsofts activex content also supported applets jdk 11 combinations approach sandbox model implemented jdk 12 3 4 netscape communicator see 14 enforce access controls applet based signatures possesses properties third variation theme proofcarrying code 11 mobile code accompanied proof satisfies certain properties however techniques yet applied languages rich java java bytecodes approach compatible approaches described playground executes applets sandboxes hence name playground could easily adapted execute trusted applets based criteria approach provides orthogonal defense hostile applets particular system hostile applet still physically separated valuable resources circumventing defenses third approach securing hosts mobile code simply run mobile code coursegrained approach java simply disable java browser another approach filter applets firewall 10 see also 9 chapter 5 advantage allowing applets served behind firewall executed independently work system similar recently marketed digitivity inc californiabased company descriptions system scientific liter ature inferred several differences systems white paper 5 web site httpwwwdigitivitycom discussions company representatives first elements digi tivity systemnotably protocol communication users browser analog playground java virtual machine jvm running playgroundare proprietary whereas system built using public widelyused protocols jvms may enable digitiv ity easily tune systems performance approach promotes greater confidence security system exposing maximum public scrutiny understanding second system require trust certain elements system according 5 trusted architecture discuss trusted elements architecture section 511 3 architecture core idea paper establish dedicated machine set machines called playground mobile code transparently executed using users browsers io terminals section give overview playground supporting architecture implemented java deferring many details section 4 understand system works first necessary understand browsers retrieve load run java applets browser retrieves web page written hypertext markup language html takes actions based html tags page one tag applet tag might appear follows applet codehostileclass tag instructs browser retrieve run applet named hostileclass server served page browser applet returns format called java bytecode suitable running jvm bytecode subjected bytecode verification process loaded browsers jvm executed see eg 8 system browser requests web page request sent proxy figure 1 step 1 proxy forwards request end server step 2 receives requested page step 3 page received proxy parses identify applet tags returning page applet tag identified proxy replaces named applet name trusted graphics server applet stored locally browser 1 proxy sends modified page back browser step 4 loads graphics server applet upon receiving page applet tag proxy identified proxy retrieves named applet steps 56 modifies bytecode use graphics server requesting browser input output proxy forwards modified applet playground step 7 executed using graphics server browser io terminal step 8 summarize three important components architecture graphics server applet loaded users browser proxy playground none need executed machine indeed benefits executing different machines discussed section 5 graphics server playground implemented java thus run java compliant environment proxy perl script proxy used multiple browsers mul stored locally means stored directory named classpath environment variable tiple playgrounds case multiple playgrounds proxy distribute load among playgrounds improved performance following subsections describe functions components detail security issues discussed section 5 31 graphics server section give overview graphics server loaded users browser place applet provided web server graphics server java applet must introduce java terminology describe java class collection data fields functions called methods operate fields object instance class point time stateie values assigned data fieldsthat manipulated invoking methods object defined objects class classes arranged hierar chy subclass inherit fields methods superclass running java applet consists collection objects whose methods invoked runtime system turn invoke one anothers methods information java see eg 2 311 remote awt classes abstract window toolkit awt standard api implementing graphical user interfaces gui java programs awt contains classes user input output devices including buttons choice boxes text fields images variety types windows name virtually every java applet interacts user instantiating awt classes invoking methods objects created intuitive goal graphics server provide versions awt classes whose instances created manipulated playground example graphics server enable program running playground create dialog window users browser display user informed user clicks ok button parlance distributed object technology objectie one invoked outside virtual machine residesis called remote object class defines called remote class graphics server running users browser allow machines play ground create use remote awt objects users browser interacting user accordingly graphics server implemented collection remote classes remote class one exception described section 312 remote version corresponding awt class 7 modified applet load graphics server change 4 modified page 1 request page 8 io change io browser proxy 6 applet 3 page load applet web 5 request applet 2 request page playground figure 1 playground architecture modified java applet running playground creates collection graphical objects graphics server implement gui remotely uses stubs interact see section 33 minimize amount code graphics server remote class subclass corresponding awt class enables inherit many method implementations original awt class methods must overwritten example involving event monitoring remote class methods involving remote objects events eg mouse clicks remote button object must adapted pass back event stubs residing playground jvm present implementation remote classes employ remote method invocation rmi communicate playground rmi available java 11 platforms including netscape communicator internet explorer 40 jdk 11 hotjava 10 312 remote applet class described section 311 classes comprise graphics server remote versions awt classes main exception remote version javaappletapplet applet class class java applets must subclass main purpose applet class provide standard interface applets envi ronment thus remote version class serves provide interface applet running playground environment must interact namely users browser specifically class implements two types methods first provides remote interfaces methods applet class applets playground invoke interact users environment second class defines new con structor method remote awt class see section 311 example constructbutton method constructing remote button users browser constructor returns reference newlycreated button remote methods button invoked directly play ground similarly constructor method remote awt classes initially started graphics server consists one object whose class remote applet class called browserserverclass applet playground invoke methods object objects created create graphical user interface desires user 32 proxy proxy serves browsers playgrounds interface web retrieves html pages browser java bytecodes playground transforms formats suitable browser playground use retrieving html page browser proxy parses returning html identifies applet tags page replaces references remote applet class graphics server see section 312 thus browser receives returned html page loads remote applet class stored locally instead applet originally referenced page retrieving java bytecode file play ground proxy transforms bytecode interacts user browser machine running playground replacing invocations awt methods invocations corresponding remote awt methods browser precisely invocations playgroundside stubs remote awt methods turn call remote awt methods involves parsing incoming bytecode making automatic textual substitutions change names awt classes names representative stubs corresponding remote awt classes 33 playground playground machine loads modified applets proxy executes described proxy modifies applets bytecodes playgroundresident stubs remote awt methods called instead nonremote awt methods modified applet runs playground skeleton gui containing stubs corresponding remote graphics objects built playground stubs contain code remotely invoking remote objects methods users browser handling events passed back browser example case dialog window ok button stubs window button objects instantiated playground calls methods displaying window button passed remote objects users browser button press events passed back methods provided buttons stub handle events stubs stored locally playground aside playground configured standard jvm playground centralized resource carefully administered moreover investments playground eg upgrading hardware performing enhanced monitoring improve applet performance security users protected main even multiple playgrounds loadbalancing implementation 41 example order understand components described section 3 work together section illustrate execution simple applet example describes applet automatically transformed interact browser remotely graphics server playgroundside stubs interact applet execution section necessarily involves lowlevel detail casual reader skip ahead section 5 without much loss continuity applet use illustration shown figure 2 simple complete applet prints word click wherever user clicks mouse button purposes discussion implements two methods care first init method invoked registers ie applet object one receive mouse click events registration achieved via call addmouselistener method inherits applet superclass second method implements mouseclicked method invoked whenever mouse click occurs method calls getgraphics inherited applet obtain graphics object whose methods called display graphics case method invokes drawstring method graphics object draw string click mouse clicked import javaapplet import javaawt import javaawtevent public class click extends applet implements mouselistener public void init tell applet mouselistener objects notify mouse events occur since implement mouselistener interface methods called method mouselistener interface invoked user clicks mouse button public void mouseclickedmouseevent e graphics gdrawstringclick egetx egety unused methods mouselistener interface public void mousepressedmouseevent e public void mousereleasedmouseevent e public void mouseenteredmouseevent e public void mouseexitedmouseevent e figure 2 applet draws click wherever user clicks click applet standalone applet intended executed using remote graphics display input output thus proxy retrieves bytecode applet applet must altered run playground one thing addmouselistener method invocation must somehow passed browser indicate playground applet wants receive mouse events mouse click events must passed back playground mouseclicked invoked present implementation passing information achieved using java remote method invocation rmi associated remote class stub calling executes calling jvm stub invoked exactly object invoked marshals parameters passes across network remote object services request stubs described interfaces suffix xface example browserxface interface used call browserserver object graphics server rmi provides mechanism invoke methods remotely get click applet use rmi achieve exploit subclass inheritance features java interpose versions methods invokes precisely alter click applet subclass pgapplet rather standard applet class straightforward modification bytecode click applet changing click subclasses way addmouselistener method called figure 2 one figure 3 pgapplet shown figure calls necessary remote applet object graphics server described section 312 addmouselistener method simply adds argument click applet array mouse listeners first register registers mouse listener graphics server registration graphics server handled addpgmouselistener remote method browserserver class remote applet object running browser see section 312 relevant code browserserver shown figure 5 recall browserserver implements browserxface interface specifies remote methods called playground addpgmouselistener method one remote methods records fact playground applet wants informed mouse events registers object mouse listener objects mouseclicked method invoked mouse clicked invocation passes mouseclick eventor precisely reference browserevent remote object holds reference actual mouseclick event object back pgmouseclicked remote method pgapplet class pgmouseclicked method invokes mouseclicked pgmouseevent object 2 readability figures 36 omit import statements error checking exception handling trycatch statements etc public class pgapplet extends applet implements pgappletxface browserxface bx mouselistener new mouselistener int adds mouselistener first register object graphics server mouselistener public synchronized void addmouselistenermouselistener l mlindex 1 part pgappletxface remote interface invoked browser graphics server mouse clicked public void pgmouseclickedbrowsereventxface e int pgmouseevent new pgmouseevente returns object encapsulates remote graphics object browser applet public graphics getgraphics return new pggraphicsbxgetbrowsergraphics figure 3 part pgapplet class executes playground public class pggraphics extends graphics reference browsergraphics remote object graphics server private browsergraphicsxface bg constructor object calls superclass constructor saves reference browsergraphics remote object public pggraphicsbrowsergraphicsxface b invokes drawstring graphics server public void drawstringstring str int x int bgdrawstringstr x figure 4 part pggraphics class executes playground holds reference browserevent object pgmouseevent object translates invocations methods eg getx gety figure invocations corresponding browserevent remote methods turn translates invocations actual event object browser brevity browserevent pgmouseevent classes shown call getgraphics click also replaced pgapplet version shown figure 3 getgraphics method pgapplet retrieves reference remote browsergraphics ob ject via getbrowsergraphics method figure 5 getgraphics method pgapplet returns browsergraphics reference encapsulated within pggraphics object calling click invokes drawstring arguments passed browser executed figures 46 42 passing reference example previous section parameters needed passed across network serializable object serialization refers ability write complete state object output stream recreate object later time reading serialized state input stream 12 2 object serialization central remote method invocationand thus communication graphics server playground stubsbecause allows method parameters passed remote method return value passed back example section 41 remote method invocation bgdrawstringstr x pggraphicsdrawstring method figure 4 causes difficulty str string x integers serializable however classes serializable example image class represents displayable image platformdependent way previous invocation bgdrawstringstr x suc ceeds similar invocation bgdrawimageimg x fails img instance image cannot serialized sent graphics server even objects could serialized serializing transmitting large complex objects result substantial cost reasons object passed parameter remote method graphics server generally constructed graphics server originally corresponding stub playground reference object browser passed graphics server routines place object way object reference ever passed network public class browserserver extends applet implements browserxface mouselistener reference mouselistener object playground pgmouselistenerxface ml part browserxface remote interface invoked playground add remote mouselistener public void addpgmouselistenerpgmouselistenerxface pml invoked whenever mouse clicked passes event mouselistener playground public void mouseclickedmouseevent event mlpgmouseclickednew browsereventevent returns remote object encapsulates graphics context applet public browsergraphicsxface getbrowsergraphics graphics return new browsergraphicsg figure 5 part browserserver class executes browser public class browsergraphics extends graphics implements browsergraphicsxface private graphics constructor class calls superclass constructor saves pointer real graphics object passed exports interface callable playground public browsergraphicsgraphics gx part browsergraphicsxface remote interface invoked playground draw string public void drawstringstring str int x int gdrawstringstr x figure part browsergraphics class executes browser illustrate manner passing objects ref erence continue example image downloaded applet calls creation image object eg via appletgetimage method interposed pgappletgetimage passes arguments url string serializable remote image creation method graphics server remote method constructs image places array objects returns array index occupies playground objects pass index remote graphics server methods place image example browsergraphics class graphics server implements versions drawimage method accept image indices display corresponding image conversely circumstances objects need passed parameters remote methods cannot first created browser due security reasonseg objects class userdefined class overwrites methods awt classor class parameter object unknown eg known implement interface circumstances reference passed parameters place method invocations intended object passed back playground object processing continuing image example callbacks occur downloaded applet applies certain image filters image displaying one filter rgbimagefilter subclass rgbimagefilter defines perpixel transformation apply image overwriting filterrgb method avoid loading untrusted code browser filter must executed playground callbacks filterrgb method circumstances need pass objects reference considerably hurt performance continuing rgbimagefilter example filtering image may require every image pixel passed browser playground transformed filterrgb method passed back result considerable delay rendering image though experience delay reasonable images whose pixel values indices colormap array ie images employ indexcolormodel 43 addressing previous sections described applet running playground coerced using users browser io terminal io performed browser however applet running playground graphics server running users browser must able find communicate complicated fact html page contain number applet tags modified proxy result multiple instances graphics server running browser retain intended function page necessary correctly match applet running playground corresponding instance graphics server browser addressing scheme use requires proxy make additional changes html page containing applet references prior forwarding browser specifically page contains applet tag form applet codehostileclass proxy replaces hostileclass browserserverclass described section 3 also adds parameter tag html page like applet codebrowserserverclass param namecontactaddress valueaddress parameter tags tags contain namevalue pairs one assigns address value proxy generates unique value contactaddress param tags appear applet tag terminator applet shown used specify parameters applet run case browserserverclass object ie remote applet object graphics server see section 312 looks contactaddress field parameters obtains address assigned proxy browserserver object initialized prepared service requests playground binds remote reference address assigned proxy binding stored rmi name server 13 proxy remembers address assigned applet tag provides address playground similar fashion proxy loads applets playground sending playground html page identical contactaddress param tags forwarded browser simplicity step shown figure 3 jvm playground loads referenced applets via proxy uses corresponding param tags provided look corresponding graphics servers rmi name server discussed previously security goal system protect resources protected domain hostile applets downloaded users domain limit attention protecting data users offer hostile applets protecting data users offer hostile applets eg typing applets interface must achieved via protections concern though utilize playground avail able 51 requirements achieving strong protection domains private resources relies least following two distinct requirements 1 prevent jvm users browser loading classes network achieved untrusted code never loaded browser unless browser machines local class files maliciously altered possibility consider later section describe disabling network class loading many classes attacks successfully mounted jvms prevented system 2 prevent untrusted applets running playground accessing valuable resources assume untrusted applets might circumvent languagebased protections playground requirement met relying underlying operating system protections play ground preferably isolating playground valuable user resources describe alternatives meeting requirements playground system 511 preventing network class loading preventing network class loading browser achieved one two ways system trusted proxy one approach depend proxy rewrite incoming applet tags html pages point graphics server class stored locally browser intercept deny entry class files destined protected machines 10 rewriting applet tags ensures browser never directed incoming page load anything trusted graphics server 3 playground passes unknown class 3 strictly true javascriptenabled browsers applet tag may dynamically generated page graphics server eg parameter remote method call graphics server unable load class class passage denied proxy approach works browser offtheshelf requires changes browser beyond specifying proxy browsers http ssl proxy typically done using simple preferences menu browser disadvantage however proxy becomes part trusted computing base system reason proxy must written protected carefully refer approach trusted proxy approach untrusted proxy second approach preventing browser loading classes network directly disable network class loading browser main disadvantage approach requires either configuration sourcecode changes browsers protected domain particular popular browsers today including netscape communicator internet explorer 40 sourcecode change seems required achieve expect changes become easier browsers security policies become configurable advantage approach excludes proxy trusted computing base system hence call untrusted proxy approach approach browser graphics server classes trusted computing base precisely show approaches prevent network class loading browser describe causes classes loaded network approaches prevent 1 section 3 briefly described process browser loads applet specified applet tag html page described sections 3 43 proxy modifies code attribute applet tag reference trusted graphics server applet stored locally browser thus browser coerced always loading graphics server applet ap plet untrusted proxy approach coercion serves merely functional purposeie running graphics server playground applet connectbut security threatened proxy fails rewrite applet tag interpreted browser possibly response user action tag visible proxy thus cannot rewrit ten retrieval applet must blocked proxy attempted trusted proxy approach coercion central security function 2 applet loaded started applet class loader browser loads classes referenced applet class core java library stored locally applet class loader would normally retrieve class network however approach applet class loader needs load local classes graphics server applet refers local classes 3 described section 3 modified applet playground invokes remote methods server present implementation uses rmi carry invocations rmi class loader load additional classes pass parameters return values rmi class loader first looks local directories find classes going network retrieve possible playground applet passes object whose class stored locally browser machine particularly playground corrupted trusted proxy approach rmi class loader goes network via proxy retrieve class class detected denied proxy untrusted proxy ap proach rmi class loader returns exception immediately upon determining class available locally 512 isolating untrusted applets untrusted applets diverted play ground security relies preventing applets accessing protected resources first step playgrounds jvms thus applets execute accounts different actual users accounts permissions associated resources eg user files available playground achieves security equivalent provided access control mechanisms playgrounds operating system similarly jvms playground execute different accounts reduce threat interjvm attacks see section 53 complete compromise playground feared configuration network may provide additional defenses example network file servers configured refuse requests playground machines requests authenti cated afs 6 even total corruption playground immediately lead compromise user files similarly machines protected domain configured refuse network connections playground except designated ports reserved browsers graphics servers listen compromise playground gain little attacker limit organizations playground placed outside firewall thereby giving applets greater access run servers served however firewalls disallow connections outside firewall inside additional steps may necessary communication proceed uninhibited graphics server browser applet playground particular rmi java 11 used proto opens network connections browser playground directions ie browser playground vice versa one approach enable connections across firewall multiplex single connection graphics server playground ie inside outside achieved graphics server playground applet interpose customized connection implementation eg changing socketimplfactory technical reasons appear possible offthe shelf browsers eg appears work hotjava 10 netscape 30 another alternative establish reserved ports graphics servers listen connections playground applets configure firewall admit connections playground ports 52 rmi security though requirements discussed section 51 necessary security system may sufficient particular rmi relatively new technology could conceivably present new vulner abilities first step toward securing rmi support authenticated encrypted transport network attacker cannot alter eavesdrop communication browser playground also achieved interposing encryption object serialization layer see 12 troubling threat possible vulnerabilities object serialization routines used marshal parameters return values remote method invocations worst case corrupted playground could conceivably send stream bytes unserialized browser corrupt type system jvm browser decision generally pass primitive data types eg integers strings parameters remote method invocations see section 42 would seem fortu itous greatly limits number structurally interesting classes attacker disposal attempting attack however possibility vulnerability cannot yet ruled several research efforts presently examining rmi effort identify correct problems process public scrutiny one main advantages building system public widely used components 53 resistance known attacks one way assess security approach examine face known attack types section review several classes attack applets mount describe extent system defends accessing modifying protected resources several bugs type safety mechanisms java provided ways applets bypass java sand boxes including popular browsers 1 9 penetrations typically enable applet perform operation operating system allows including reading writing users files opening network connections machines attack anticipate foreseeable future type safety errors continue exist therefore must presume applets running playground may run unconstrained sandbox ever still confined playground operating systems protections ultimately attack resources available playground section 512 described several approaches limit resources available applets play ground expect proper network operating system configuration hostile applets effectively isolated protected resources denial service denial service attack hostile applet might disable significantly degrade access system resources cpu disk network interactive devices ladue 7 presents several applets eg consume cpu even user clicks away applet origin page monopolize system locks pop windows users screen endlessly using java playground applets effect protected domain affect playground machine however applet pops windows endlessly causes graphics server running users browser create infinite stream windows uncontrolled may prevent access user terminal altogether require user reboot machine otherwise shut browser one approach defend configure graphics server andor playground limit number rate window creations another type denial service applet may deny service applets within jvm eg killing others threads 7 although sandbox mechanisms browsers intended separate applets different web pages one another several ways circumventing separation shown 1 7 prevented system applets page run separate jvm playground separate user account hence unable directly affect applets another page except attacking playground violating privacy java security policy browsers geared towards maintaining user privacy disallowing loaded applets access local formation cases however java applet reveal lot user whose browser executes example 7 ladue presents applet uses sendmail trick send mail users behalf sendmail daemon running applets server applet downloaded onto unix host running standard ident service mail identifies users ip address also users account name system applet runs playground machine account users information reveal limited available playground 6 limitations experience system transparent users applets however classes applets playground architecture transparent indeed system may unable execute certain applets particular remote interface supported graphics server supports passage certain classes parameters return values remote methods code running playground attempts pass object parameter whose class unknown subclass expected parameter class browser required load subclass unserialize parameter however class loading network prevented system see section 511 load complete exception generated time writing number applets cannot supported due limitation seem significant indeed yet encounter applet problem second limitation approach moving applet away machine users browser executes applets io incurs overhead communicating network experience indicates many applets cost barely noticeable typical local area network links 10mbits ethernet however applets whose output involves intensive io operations eg lowlevel image filtering see section 42 overhead considerable emergence functional applets raises new challenges transparently executing playground example one envision text editor applet downloaded network used compose document save disk applet inconsistent sandbox policies implemented netscape 3x internet explorer 3x networkloaded applets allowed write files however may well possible flexible policies implemented recently soontobe released versions products eg 14 4 primary direction ongoing work extending playground architecture support applets become available still offering protections data intended applet 7 conclusion paper presented novel approach protecting hosts mobile code implementation approach java applets idea behind approach execute mobile code sanitized environment isolated machine playground using users browser io terminal gave detailed account technology allow transparent execution java applets separately graphical interface users browser using system users enjoy applets downloaded network exposing isolated environment playground machine untrusted code although presented playground approach technology context java applets mobilecode platforms may also utilize acknowledgements grateful drew dean ed felten li gong anonymous referees helpful comments r java security hotjava netscape beyond java nutshell java security present near future going beyond sandbox overview new security architecture java tm development kit 12 secure mobile code management enabling java enterprise scale performance distributed file system pushing limits java security java virtual machine specification java security hostile ap plets blocking java applets firewall safe kernel extensions without runtime checking extensible security architectures java tr ctr f brazier b j overeinder van steen n j e wijngaards agent factory generative migration mobile agents heterogeneous environments proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain peng liu wanyu zang meng yu incentivebased modeling inference attacker intent objectives strategies acm transactions information system security tissec v8 n1 p78118 february 2005 k g anagnostakis sidiroglou p akritidis k xinidis e markatos keromytis detecting targeted attacks using shadow honeypots proceedings 14th conference usenix security symposium p99 july 31august 05 2005 baltimore md peng liu wanyu zang incentivebased modeling inference attacker intent objectives strategies proceedings 10th acm conference computer communications security october 2730 2003 washington dc usa alexander moshchuk tanya bragin damien deville steven gribble henry levy spyproxy executionbased detection malicious web content proceedings 16th usenix security symposium usenix security symposium p116 august 0610 2007 boston pieter h hartel luc moreau formalizing safety java java virtual machine java card acm computing surveys csur v33 n4 p517558 december 2001