time vlsioptimal sorting enhanced meshes abstractsorting fundamental problem applications areas computer science engineering work address problem sorting mesh connected computers enhanced endowing row column dedicated highspeed bus architecture commonly referred mesh multiple broadcasting commercially available adopted dap family multiprocessors somewhat surprisingly problem sorting mn elements mesh multiple broadcasting size sqrt ntimes sqrt n studied thus far sparse case min theta left sqrt n right dense case mn yet many applications require using existing platform size sqrt ntimes sqrt n sorting elements sqrt n b introduction tremendous advances vlsi technologically feasible economically viable build parallel machines featuring tens thousands processors 4 22 39 40 42 47 however practice indicates increase raw computational power always translate performance increases order magnitude reason seems twofold first problems known admit efficient parallel solutions second parallel computation requires interprocessor communication often acts bottleneck parallel machines context mesh emerged one platforms choice solving problems image processing computer vision pattern recognition robotics computational morphology number application domains benefit simple intuitive architecture growing day 2 4 39 40 42 regular intuitive topology makes mesh eminently suitable vlsi implementation several models built years examples include illiac v staran mpp maspar among many others 4 5 11 39 yet mesh everyone large computational diameter makes mesh notoriously slow contexts computation involves global data movement address shortcoming mesh enhanced addition various types bus systems 1 2 16 18 20 23 39 43 early solutions involving addition one global buses shared processors mesh implemented number massively parallel machines 2 4 19 39 yet another popular way enhancing mesh architecture involves endowing every row bus resulting architecture referred mesh row buses received good deal attention literature recently powerful architecture obtained adding one bus every row every column mesh illustrated figure 1 20 abstraction system referred mesh multiple broadcasting mmb short mmb implemented vlsi commercially available dap family multicomputers 20 38 41 turn due commercial availability mmb attracted great deal attention applications ranging image processing 21 38 41 visibility robotics 7 14 15 37 pattern recognition 9 10 20 25 37 optimization 17 query processing 9 13 fundamental problems 3 6 8 9 10 16 found efficient solutions platform variants 18 25 29 30 shall discuss section 2 assume mmb communicates outside world via io ports placed along leftmost column platform consistent view enhanced meshes serve fast dedicated coprocessors presentday computers 28 scenario host computer passes data systolic fashion enhanced mesh batches n presence elements processed leftmost columns used store input concerned io issues assuming input pretiled leftmost columns platform sorting unquestionably one extensively investigated topics computer science somewhat surprisingly thus far problem sorting n elements mmb size addressed sparse case 2 theta n dense case 2 thetan sparse case olariu et al 35 proposed timeoptimal thetalog n time algorithm sort elements stored one row mmb size n yet many applications require using existing platform size sorting elements example automated visual inspection one interested computing similarity measure coefficient vertical strip image 27 similar situation arises task tracking mobile target across series frames 31 46 latter case scene consists typically static objects one interested evaluating movementrelated parameters target order perform task realtime crucial use existing platform process sort parameter values pixels narrow rectangular subimage width subimage interest depends course speed target moves across domain therefore order able meet readtime requirements one use adaptive sorting algorithms fast possible main contribution paper propose first know adaptive time vlsioptimal sorting algorithm mmb specifically show fix pretiled leftmost columns mmb size time show timeoptimal architecture also easy see achieves 2 lower bound word model heart algorithms lies novel deterministic sampling scheme reminiscent one developed recently olariu schwing 36 main feature sampling scheme used bucket sorting resulting buckets well balanced making costly rebalancing unnecessary remainder paper organized follows section 2 discusses model computation used throughout paper section 3 presents time vlsi lower bound arguments section 4 reviews number basic data movement results section 5 presents details optimal sorting algorithm finally section 6 summarizes results poses number open problems 2 model computation mmb size theta n hereafter referred mesh confusion possible consists mn identical processors positioned rectangular array overlaid highspeed bus system every row mesh processors connected horizontal bus similarly every column processors connected vertical bus illustrated figure 1 assume processors leftmost column serve io ports illustrated way mmb communicate outside world figure 1 mmb size 4 theta 4 processor p j located row column j 1 northwest corner mesh processor p j local links neighbors exist throughout paper assume mmb operates simd mode time unit instruction broadcast processors execute wait next instruction processor assumed know coordinates within mesh constant number registers size olog mn unit time processors perform arithmetic boolean operation communicate one neighbors using local link broadcast value bus read value specified bus operations involves handling olog mn bits information due physical constraints one processor allowed broadcast given bus one time contrast processors bus simultaneously read value broadcast accord researchers 3 16 17 20 21 23 38 39 assume constant broadcast delay although inexact experiments dap ppa yuppie multiprocessor array systems seem indicate reasonable working hypothesis 23 26 29 38 39 3 lower bounds purpose section show every algorithm sorts n elements pretiled leftmost e columns mmb size must take time argument information transfer type consider submesh consisting processors n input constructed way every element initially input find final position sorted order outside see possible note n guarantees number elements satisfies mp msince elements leave enter o1 time follows algorithm correctly sorts input data must take time thus following result theorem 31 every algorithm sorts n elements stored leftmost columns mesh multiple broadcasting size must take addition timelower bounds algorithms solving given problem one often interested designing algorithms feature good vlsi performance one mn m2n figure 2 illustrating lower bound argument commonly used metrics assessing goodness algorithm implemented vlsi 2 complexity 44 chip area computation time time lower bound based metric strong based memory requirements inputoutput rate requirements information flow within chip wellknown 44 word model 2 lower bound sorting elements vlsi chip 2 case size input varies area n mesh constant hence algorithm 2 optimal must running time thus case time lower bound omegagamma vlsioptimality remaining part paper show lower bounds derived tight providing algorithm matching running time sake better understanding first present preliminary discussion data movement techniques used throughout paper 4 data movement data movement operations constitute basic building blocks lay foundations many efficient algorithms parallel machines constructed interconnection network processors purpose section review number data movement techniques mmb instrumental design sorting algorithm merging two sorted sequences one fundamental operations computer science olariu et al 35 proposed constant time algorithm merge two sorted sequences total length stored one row mmb size precisely following result established 35 proposition 41 let p n sorted sequences stored first row mmb size holding two sequences merged sorted sequence o1 time since merging important ingredient algorithm give details merging algorithm 35 begin using vertical buses first row replicated rows mesh next every row 1 r processor p broadcasts horizontally corresponding row bus easy see every unique processor p j clearly unique processor use horizontal bus broadcast j back p turn processor enough information compute position sorted sequence exactly way position every b j sorted sequence computed o1 time knowing positions sorted sequence elements moved final positions time next consider problem merging multiple sorted sequences common length let sequence n stored one per processor first row mmb size n suppose sequence consists k sorted subsequences subsequence consists consecutive elements original sequence goal sort entire sequence definiteness assume subsequence j 1 j k contains elements j gamma1 sorting algorithm proceeds merging subsequences two time longer longer subsequences details follows set aside submeshes size 2 theta 2 k every pair consecutive subsequences merged one submeshes specifically first pair subsequences allocated submesh northwest corner next pair subsequences allocated submesh processor northwest corner note moving subsequences corresponding submeshes amounts simple broadcast operation vertical buses submesh corresponding subsequences merged using algorithm described proposition 41 operation takes constant time repeating merging operation dlog ke times entire sequence sorted consequently following result lemma 42 sequence consisting k equalsized sorted subsequences stored first row mesh multiple broadcasting size sorted olog finally look data movement technique mmb size involving reorganization elements leftmost x columns mesh sorted rowmajor order columnmajor order see figure 3a 3d accomplished series simple data movement operations whose details follow simplify notation shall assume x integer leftmost x columns mesh moved one time follows column moved every processor p broadcasts element holds processor p r illustrated figure 3b view mesh consisting horizontal submeshes r 1 size x theta p n submesh r p x broadcasts value along column bus j p j records shown figure 3c constant time processor p j broadcasts value along row bus j processor p p j repeated submesh r p 1 p x thus accomplishing required data movement ox time summarize findings state following result lemma 43 given mesh multiple broadcasting size stored leftmost x columns sorted rowmajor order data moved sorted columnmajor order leftmost x columns ox time b c r x x x figure 3 illustrating data movement lemma 43 5 algorithm position present time vlsioptimal sorting algorithm mmb essentially algorithm implements wellknown bucket sort strategy novelty approach resides way define buckets ensuring bucket overly full throughout assume mmb r size fix arbitrary constant 1 input assumed set elements totally ordered universe 1 stored leftmost e columns r assume o1 time comparisons among elements universe avoid tedious otherwise inconsequential details assume integer goal sort elements columnmajor order output mesh time propose show assumptions entire task sorting performed time thus discussion section 3 conclude algorithm time vlsioptimal worth mentioning yet another interesting feature algorithm namely time input data time sort time output data essentially make presentation transparent easier follow refer submesh consisting leftmost columns r words submesh initially contains input slice size k input consists elements stored k consecutive rows first present outline algorithm proceed details start partitioning slices size n sort elements slice rowmajor using optimal sorting algorithm meshes 32 45 next use bucketsort merge consecutive slices size order using strategy slices merged larger slices sorted rowmajor order continue merging process left one slice size rowmajor order finally employing data movement discussed lemma 43 data converted columnmajor order proceed show task merging consecutive sorted slices size sorted slice size time purpose convenient view original mesh r consisting submeshes r jk size involving processors p r j gamma 1 refer submeshes r kk diagonal see figure 4 illustration notice diagonal submeshes viewed independent mmbs since task performed parallel without broadcasting conflict algorithm begins moving elements every r k1 diagonal submesh r kk accomplished column column time present details processing takes place parallel every diagonal submesh r kk rightmost element every row r kk referred leader row shown figure 4 begin sequence leaders increasing order note virtue grouping sequence leaders consists leaders r r 11 r 22 r 22 figure 4 illustrating diagonal submeshes leaders sorted subsequences lemma 42 sequence leaders sorted olog time let sorted sequence 1 convenience assign next preparation bucket sort define set every j 1 2 definition leaders j gamma1m p n 1 jm belong bucket b j observation motivates us call row r kk regular respect bucket b j leader belongs b j similarly row r kk said special respect bucket b j leader belongs bucket b j leader previous row belongs bucket handle boundary case also say row special respect b j first row slice leader belongs b j note elements must either regular rows special rows respect b j point make key observation observation 51 respect every bucket b j exist regular rows special rows r kk proof number regular rows follows directly definition bucket b j 2 claim concerning number special rows follows assumed sortedness n slices size implies slice size may contain one special row respect bucket order process buckets individually partition mesh r kk submeshes size specifically 1 contains leftmost columns r kk 2 contains next columns submesh dedicated bucket b j order accumulate process elements belonging bucket describe next time replicate contents 1 every submesh next broadcast submesh j values j gamma1 j used 2 define bucket b j result elements belong b j mark unmarked elements change value 1 point useful view mesh r kk consisting submeshes q size theta easy see processor p r q lj n objective becomes move elements j belonging bucket b j submesh q jj see done let q k v leader regular row respect bucket b j rank r row taken r 1 order ranks regular rows respect moved row q jj corresponding rank easy confirm regular rows respect b j moved submesh q jj time consider row u j special respect bucket b j row u assigned rank note two special rows rank order ranks special rows moved rows q jj corresponding ranks number special rows time taken move special rows q jj notice result previous data movement operations processor q jj holds two elements one regular row respect b j one special row next sort elements submesh q jj overlaid rowmajor order case number elements q jj exceed 2 sorting elements placed one per processor number elements exceeds 2 n first 2 n said belong generation1 remaining elements said belong generation 2 elements belonging generation1 stored one per processor rowmajor order overlaid generation2 also rowmajor order task performed follows using one optimal sorting algorithm meshes 32 45 sort elements regular rows q jj repeat elements special rows merging two sorted sequences thus obtained accomplished another time submesh q jj elements know ranks bucket b j next goal compute final rank elements r kk give details operation let 1 sorted slices size largest element bucket b j parallel using simple data movement j broadcast processors j time next determine rank j l follows every l identify smallest element strictly larger j clearly done time since every processor compare j element holds element held predecessor rank j among elements r kk obtained simply adding ranks j l ranks known time broadcast first row q jj sum computed olog knows rank r kk every element bucket b j finds o1 time rank r kk using rank bucket size bucket rank j consequently proved following result lemma 52 rank r kk every element every bucket determined time finally need move elements leftmost columns r kk rowmajor order o1 time element determines final position rank r follows row number x given r e column number every submesh j element belonging generation1 moved row x belongs sorted rowmajor order broadcasting rows q jj one time takes time notice point every row r kk contains elements knowing columns belong another time elements broadcast positions along row buses repeated generation2 elements parallel every diagonal submesh r kk moves back data leftmost columns submesh r k1 thus time elements moved leftmost columns r r contains slices size sorted rowmajor order summarize findings state following result lemma 53 task merging consecutive sorted slices size slice size performed time worstcase complexity task sorting slice size easy confirm recurrence describing behavior algorithm terminates end iterations dividing 1 throughout raising 1th power obtain combining 3 4 obtain turn 5 implies thus total running time algorithm given obtained solving recurrence since ffl constant proved following result theorem 54 every choice constant set n 1 elements stored leftmost e columns mesh multiple broadcasting size sorted theta time time vlsioptimal 6 conclusions open problems meshconnected computer architecture emerged one natural choices solving large number computational tasks image processing computational geom etry computer vision regular structure simple interconnection topology makes mesh particularly well suited vlsi implementation however due large communication diameter mesh tends slow comes handling data transfer operations long distances attempt overcome problem meshconnected computers augmented addition various types bus systems among mesh multiple broadcasting mmb particular interest commercially available underlying architecture dap family multiprocessors main contribution paper present first known adaptive time vlsioptimal sorting algorithm mmb specifically shown fix constant task sorting elements n 1 pretiled leftmost columns mmb size performed time time vlsioptimal number problems remain open first would interest see whether bucketing technique used paper applied problem selection day timeoptimal selection algorithms meshes multiple broadcasting known also known whether technique used paper extended meshes enhanced addition k global buses 1 12 would like completely resolve issues concerning optimal sorting entire range results lin others 24 show near nomegagamma378 n time lower bound sorting architecture results imply sorting algorithm cannot vlsioptimal near quite recently lin et al 24 proposed novel vlsi architecture digital geometry mesh hybrid buses mhb obtained enhancing mmb precharged 1bit row column buses would interesting see whether techniques used paper extend mhb promises exciting area future work acknowledgement authors wish thank anonymous referees constructive comments suggestions led lucid presentation also indebted professor ibarra timely professional way handling submission r optimal bounds finding maximum array processors k global buses parallel computation models methods square meshes always optimal design massively parallel processor staran parallel processor system hardware square meshes optimal convex hull computation fast selection algorithm meshes multiple broadcasting convexity problems meshes multiple broadcasting maspar mp1 architecture designing efficient parallel algorithms mesh connected computers multiple broadcasting efficient median finding application twovariable linear programming meshconnected computers multiple broadcasting prefix computations generalized meshconnected computer multiple buses array processor multiple broadcast ing image computations meshes multiple broadcast multiway merge sorting network ieee transactions computers parallel processing letters mesh hybrid buses efficient parallel architecture digital geometry ieee transactions parallel distributed systems computer vision optimal sorting algorithms busconnected processor arrays methods realizing priority bus system guided tour computer vision bitonic sort meshconnected parallel computer finding connected components connected ones meshconnected parallel computer data broadcasting simd computers optimal convex hull algorithms enhanced meshes new deterministic sampling scheme amt dap 500 massively parallel processor parallel computing theory practice fractal graphics image compression simd processor constant time bsr solutions parenthesis matching vlsi complexity sorting sorting meshconnected parallel computer foundations vision algorithms sorting arbitrary input using fixedsize parallel sorting device tr