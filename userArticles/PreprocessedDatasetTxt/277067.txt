incorporating speculative execution scheduling controlflow intensive behavioral descriptions speculative execution refers execution parts computation execution conditional operations decide whether needs executed shown promising technique eliminating performance bottlenecks imposed control flow hardware software implementations alike paper present techniques incorporate speculative execution finegrained manner scheduling controlflow intensive behavioral descriptions demonstrate failing take account information resource constraints branch probabilities lead significantly suboptimal performance also demonstrate may necessary speculate simultaneously along multiple paths subject resource constraints order minimize delay overheads incurred prediction errors occur experimental results several benchmarks show speculative scheduling algorithm result significant upto sevenfold improvements performance measured terms average number clock cycles compared scheduling without speculative execution also best worst case execution times speculatively performed schedules better corresponding values schedules obtained without speculative execution b introduction speculative execution refers execution part computation known control path belongs executed example execution code branch statement branch condition evaluated used overcome extent scheduling bottlenecks imposed controlflow previous work speculative execution areas highlevel synthesis 1 2 3 well highperformance compilation 4 5 previous work 1 2 3 highlevel synthesis attempted locate single multiple paths speculation prior schedul ing paper presents techniques integrate speculative execution scheduling highlevel synthesis controlflow intensive designs context demonstrate using information resource constraints branch probabil work supported part nsf grant 9319269 part alternative system concepts inc sbir contract air force rome laboratories permissions make digitalhard copy part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copyright notice title publication date appear notice given copying permission acm inc copy otherwise republish post servers redistribute lists requires prior specific permission andor fee dac 98 san francisco california ities deciding speculate lead significantly suboptimal performance also demonstrate necessary perform speculative execution along multiple paths finegrain level course scheduling order obtain maximal benefits addition present techniques automatically manage additional speculative results generated speculatively executed operations show incorporate speculative execution generic scheduling methodology particular present results integration efficient scheduler wavesched 6 experimental results various benchmarks examples presented indicate upto sevenfold improvement performance average number clock cycles required perform computation background motivation scheduling tools typically work using one intermediate representations behavioral description data flow graph dfg control flow graph cfg controldata flow graph cdfg paper use cdfg intermediate representation behavioral description state transition graphs stgs represent scheduled behavioral description explained later sections addition behavioral description scheduler also accepts following information ffl constraint number resources type available resource allocation constraints ffl target clock period implementation constraints limit extent data control chaining allowed ffl profiling information indicates branch probabilities various conditional constructs present behavioral description present motivational examples illustrate use speculative execution scheduling consider part behavioral description corresponding cdfg fragment shown figure 1 contains loop cdfg contains vertices corresponding operations behavioral description solid lines indicate data dependencies dotted lines indicate control dependencies control edges cdfg annotated variable represents result conditional operation generates ex ample control edges fed operation 1 marked c figure 1 initial values variables 4 used loop body indicated parentheses beside corresponding cdfg data edges let us consider task scheduling cdfg shown figure 1 suppose following constraints used scheduling k t4 c c figure 1 cdfg illustrate speculative execution s5 s5 15 m14 12 13 21 22 10 22 23 11 m20 23 24 12 m21 m11c1 10 b figure 2 nonspeculative schedule cdfg figure 1 b schedule incorporating speculative execution ffl target clock period allows execution memory access operations one clock cycle operation requires two clock cycles addition assume operation implemented using 2stage pipelined multiplier chaining allowed since leads violation target clock period constraint general however algorithm handle chaining ffl aim optimize performance design much possible hence resource constraints specified purposes illustration example limitation scheduling algorithm handle resource constraints described later sections schedule cdfg incorporate speculative execution shown figure 2a schedule obtained applying either loopdirected scheduling 7 technique wavesched 6 technique cdfg vertices stg represent schedule states directly correspond states controller rtl implementation state annotated names cdfg operations performed state including suffix represents symbolic iteration index cdfg loop operation belongs example consider operation 1 cdfg 1 encountered first time scheduling assigned subscript 0 resulting operation stg figure 2a general multiple copies operation may generated scheduling corresponding different conditional paths different iterations loop ex ample operation 1 1 stg figure 2a corresponds execution first unrolled instance cdfg operation 1 edge stg represents controller state transition annotated conditions activate transition iteration loop scheduled cdfg requires eight clock cycles example data dependencies among operations within loop require performed serially addition control dependencies comparison operation together interiteration data dependency 1 1 1 prevent parallel computation multiple loop iterations even loop unrolling employed schedule cdfg figure 1 incorporates speculative execution shown stg figure 2b schedule derived techniques present later sections speculatively executed operations annotated conditional operations whose results depend upon using following tion opcond represents operation op executed assuming speculation condition cond evaluate rue speculation condition cond could general expression conjunction results various conditional operations stg example consider operation 1 1c 1 state s1 figure 2b speculatively executed operation corresponds second instance cdfg operation schedule assumes result conditional operation 1 1 executed state s7 going true states s7 s8 represent steady state schedule note steady state new iteration initiated every cycle opposed eight cycles following example illustrates impact branch probabilities resource constraints performance speculatively derived schedules makes case integration speculation scheduling process consider example cdfg shown figure 3 select operation sel1 selects data operand l r port value port 1 0 figure 4 shows three different schedules use speculative execution generated using different resource constraints branch probabilities stg figure 4a generated assuming following information available resources consist one incrementer one adder intraiteration data control dependency operations correspond iteration loop interiteration dependency operations different eg consecutive iterations refer intraiteration data control dependencies simply data control dependencies 1c e l r figure 3 cdfg demonstrating effect resource constraints branch probabilities speculative execution b c figure 4 three speculative schedules derived using different resource constraints branch probabilities one comparator one shifter one multiplier require one cycle also probability comparison 1 evaluating f alse higher evaluating true since result 1 evaluates f alse often schedule figure 4a gives preference executing operations corresponding control path eg 2 result 2 scheduled performed sole adder state s0 opposed 1 even though data operands operations available average number clock cycles cc required stg figure 4a calculated follows equation pc1 represents probability result comparison 1 evaluates true stg figure 4b derived information except assumed comparison 1 evaluates true often evaluates f alse hence operation 1 given preference operation 2 scheduled s0 average number clock cycles cc b required stg figure 4b given following expression suppose resource constraints relaxed allow two adders speculative schedule results shown figure 4c average number clock cycles cc c required stg figure 4c given following expression expected number cycles cc figure 5 comparison speculative schedules values cc cc b cc c various values p ranging 0 1 plotted figure 5 expected schedule figure 4a outperforms schedule figure 4b pc1 05 schedule figure 4b performs better 05 moreover schedule figure 4c derived using one extra adder outperforms two schedules values pc1 thus conclude branch probabilities resource constraints influence tradeoffs involved deciding conditional paths speculate upon making case integration speculative execution scheduling step information available following example illustrates necessary perform speculative execution along multiple paths finegrained man ner order obtain maximal performance improvements schedules shown figure 4 generated s5 figure speculation along single path speculatively executing operations conditional paths cdfg finegrained manner allowed resource constraints purpose comparison scheduled cdfg shown figure 3 assuming scheduling information assumed derive schedule figure 4b however case restricted scheduler allow speculative execution along one path resulting schedule shown figure 6 average number clock cycles cc required stg figure 6 given following expression comparing expression cc expression cc b previous example indicates cc cc b feasible values pc1 thus example simultaneously speculating along multiple paths according resource availability results schedule provably better one derived speculating along probable path scheduling algorithm automatically decides best paths speculate upon given resource constraints branch probabilities 3 algorithm section present changes need made generic scheduling algorithm support speculative execution 31 generic scheduling algorithm figure 7 shows pseudocode generic scheduling algo rithm inputs scheduler cdfg g sched generic scheduler cdfg g allocation constraint k module selection info inf clock period clk f set unscheduled operations set schedulable operations junscheduled operationsj schedulable operation schedulable operations k inf clk select operation scheduling selected operation must honor allocation clock cycle constraints unscheduled operationsremove operationop 5 schedulable operationsremove operationop 6 set schedulable successors compute schedulable successorsopfind set operations ops fanout become schedulable op scheduled 7 schedulable operationsappendschedulable successors augment schedulable operations addition operations schedulable successors gg figure 7 pseudocode generic scheduling algorithm uled target clock period design allocation constraints specify numbers types functional units available module selection information gives type functional unit operation mapped output scheduler stg describes schedule point generic scheduler maintains set unscheduled operations whose data control dependencies satisfied therefore scheduled schedulable operations b set operations unscheduled unscheduled operations scheduling process proceeds follows operation schedulable operations selected scheduling given state statement 2 selection honor allocation clock cycle constraints manner selection done varies one scheduling algorithm another selected operation op scheduled state since op longer belongs either schedulable operations unscheduled operations removed sets statements 4 5 also scheduling op might render operations fanout schedu lable routine compute schedulable successors statement identifies operations operations subsequently included set schedulable operations statement 7 32 incorporating speculative execution generic scheduler overview provide overview changes need made incorporate speculative execution framework generic scheduler shown figure 7 support speculative execution generic scheduler shown figure 7 needs modified follows details steps provided section 33 1 operation scheduled one needs recognize schedulable successors including ones r figure 8 cdfg fragment illustrating speculative execution speculatively scheduled addition speculatively executed operations successors need specially marked clearly procedure compute schedulable successors needs augmented consider cases note stage every speculatively schedulable operation added list schedulable operations however actually scheduled operations worth speculated ignored eventually removed list schedulable operations using procedures described later section example 4 consider cdfg fragment shown figure 8 assume operation op0 scheduled operation op2 scheduled operations op1 op3 sel1 op4 unscheduled output routine compute schedulable successorsop2 must include operation op4 speculatively executed ie operands assumed results operations op2 op0 2 operations scheduled control data dependencies speculatively executed operations resolved would potentially validate invalidate speculatively performed operations operations validated considered normal ie need specially marked longer operations unscheduled operations schedulable operations invalidated need longer considered scheduling therefore removed sets general resolution control data dependencies speculatively performed operation creates two separate threads execution correspond success failure speculation example 5 consider cdfg fragment shown figure 8 suppose operations op0 op2 op4 scheduled operation op3 unscheduled operation op4 uses operands results operations op2 op0 assume operation op1 scheduled op1 evaluates true execution op4 considered fruitful operands chosen computation correct therefore op4 scheduled schedulable successors need considered conditional result op1 anymore data structures modified reflect fact however op1 evaluates false op4 use operands results operations op3 op0 thus invalidating result speculation fore schedulable operations whose computations influenced result computed op4 invalid removed set schedulable operations 3 set schedulable operations operation selected scheduling contains operations whose execution speculative ie whose results always use ful selection procedure represented routine select schedulable operation statement 2 needs modified account fact example operations whose execution extremely improbable would make poor selection candidates resources consumed might better utilized operations whose execution proba ble also operations fall critical paths would better candidates selection offcritical paths 33 incorporating speculative execution generic scheduler closer look section fill details changes outlined section 32 preceded formal treatment concepts related speculative execution scheduler supports speculative execution works conditioned operations atomic schedulable units normal scheduler uses operations therefore faninfanout relationships operations captured cdfg need defined conditioned operations since speculatively performed operations conditioned event adjective speculatively performed applied operation implies conditioned event combination events mentioned section 32 operation scheduled schedulable successors need computed r l r figure 9 illustrating scheduling successors speculatively performed operations consider cdfg fragment shown figure 9 assume operations op5 op6 scheduled operations op1 op3 op4 unscheduled op2 sched uled possible schedule two versions operation op7 first version op7 0 using op2 op5 operands second op7 00 using op2 op6 op7 0 conditioned cop1 cop4 op7 00 conditioned cop1 cop4 following analysis presents structured means identifying relationships present result helps derive faninfanout relationships among speculatively performed operations lemma 1 consider operation op whose fanins op1 op2 opn fanins op speculatively scheduled op particular ith fanin opi conditioned c op would conditioned v n present details steps 1 2 3 outlined section 32 step 1 step addresses issue deriving schedulable successors scheduled operation op0 result lemma 1 used procedure scheduled op erations satisfies following condition sources schedulable operation condition exits operation fanout cdfg whose fanins reachable outputs operations paths consist exclusively select opera tions path connecting output operation opj input fanout denoted pj operations pj note aj equal represents condition path pj selected ie result operation op j propagated path pj appropriate input fanout operation fanout conditioned v represents expression opk conditioned observation 1 used infer schedulable successors operation procedure compute schedulable successors called statement 6 pseudocodeshown figure 7 appropriately augmented far described technique used identify schedulable successors operation accomplished tagging operations conditions results would valid note procedure allows us speculate possible outcomes branch arbitrarily deeply nested branches integrated scheduler supports loop unrolling speculation could also cross loop boundaries present technique used validate invalidate speculatively performed operations whose dependencies resolved step 2 suppose operation op resolves condition c scheduled resolution c results creation two different threads execution true ii false following procedure carried every operation belongs either set schedulable operations set scheduled operations let op conditioned true false branch c evaluated assuming value 1 0 c resultant expression new expression op conditioned step 3 describe procedure employed scheduler select operation schedule pool schedulable oper ations schedulable operations schedulable operations contain operations conditioned different sets events ie choose different paths speculate upon need decide best candidate map given resource best mean operation whose mapping given resource would minimize expected number cycles schedule formally problem stated follows given partial schedule ii functional unit fu iii set operations may speculative execute functional unit iv typical input traces select operation mapped fu would minimize expected number cycles problem proven npcomplete even conditional loopfree behavioral descriptions 8 therefore use following heuristic whose guiding principle successfully employed several scheduling algorithms 9 heuristic based following premise operations cdfg feed primary outputs long paths critical operations feed primary outputs short paths therefore need scheduled earlier rationale behind heuristic operations belong short paths mobile long paths ie total schedule length less sensitive variations schedules length path measured sum delays constituent operations datadominated descriptions loops conditional operations longest path pair operations fixed controlflow intensive descriptions paths could input dependent therefore longest path pair operations must defined respect given input example cdfg shown figure 3 longest path connecting primary input c output depends upon value taken operation 1 since scheduling algorithm geared towards minimizing average execution time use expected length longest path operation primary output metric rank different operations use notation lop denote quantity operation op speculation adds new dimension problem result computed operation guaranteed useful table 1 expected number cycles number states best worstcase number cycles results circuit enc states bc wc ws sp ws sp ws sp ws sp barcode gcd 95 findmin 522 265 4 table 2 allocation constraints examples table 2 circuit add1 sub1 mult1 comp1 eqc1 inc1 findmin operation op account effect multiplying probability operations output utilized lop derive metric operations criticality expressed means following equation criticalityop measures desirability scheduling op product probabilities events op conditioned lop defined 4 experimental results techniques described paper implemented program called waveschedspec written c evaluated program using produce schedules several commonly available benchmarks schedules compared produced scheduling algorithm wavesched 6 without use speculative execution respect following metrics expected number cycles b number states stg produced c smallest number cycles taken execute behavioral description largest number cycles taken execute behavioral description general finding largest number cycles taken execute behavioral description hard problem however examples considered paper static analysis description sufficient find number table 1 summarizes results obtained columns labeled states bc wc represent respectively expected number cycles number states stg produced smallest number cycles taken execute stg largest number cycles taken execute stg minor columns ws produced wavesched wavesched spec respectively used library functional units consisted adder add1 b subtracter sub1 c mul tiplier mult1 lessthan comparator comp1 e equality comparator eqc1 f incrementer inc1 unlimited numbers singleinput logic gates assumed available functional units except mult1 executes two cycles take one cycle execute allocation constraints example found looking entry corresponding example table 2 example allocation constraints gcd two sub1 one comp1 two eqc1 expected number cycles final design measured simulating vhdl description schedule using synopsysvss simulator input traces used simulation obtained zeromean gaussian sequences examples barcode gcd tlc findmin borrowed literature test1 example shown figure 1 barcode represents barcode reader gcd computes greatest common divisor inputs tlc represents traffic light con troller findmin returns index minimum element array results obtained indicate waveschedspec produced average expected schedule length speedup 28 schedules obtained using wavesched note wavesched 6 reported achieved average speedup 2 schedules produced existing scheduling algorithms pathbased scheduling 10 loopdirected scheduling 7 get idea area overhead technique obtained 16bit rtl implementation gcd example using inhouse highlevel synthesis system schedules produced waveschedspec wavesched rtl circuits technologymapped using msu library area gatelevel circuits obtained area overhead circuit produced waveschedspec found 31 also note waveschedspec number cycles shortest longest paths smaller equal corresponding number wavesched conclusions paper presented technique incorporating speculative execution scheduling controlflow intensive designs demonstrated order fully exploit power speculative execution one needs integrate scheduling introduced nodetagging scheme identification operations speculatively scheduled given state heuristic select best operation schedule techniques fully integrated existing scheduling algorithm support implicit unrolling loops functional pipelining controlflow intensive behaviors parallelize execution independent loops whose bodies share resources experimental results demonstrate presented techniques improve performance generated schedule significantly schedules produced using speculative execution average 28 times faster schedules produced without benefit r experiments lowlevel speculative computation based multiple branch prediction global scheduling independent control dependenciesbased condition vectors combining mbpspeculative computation loop pipelining highlevel synthesis trace scheduling technique global microcode compaction sentinel scheduling model compilercontrolled speculative execution wavesched novel scheduling technique controlflow intensive behavioral de scriptions performance analysis optimization schedules conditional loopintensive specifica tions computers intractibility empirical evaluation highlevel synthesis scheduling heuristics pathbased scheduling synthesis tr global scheduling independent control dependencies based condition vectors empirical evaluation highlevel synthesis scheduling heuristics sentinel scheduling performance analysis optimization schedules conditional loopintensive specifications italicwavescheditalic computers intractability combining mbpspeculative computation loop pipelining highlevel synthesis ctr sumit gupta nick savoiu sunwoo kim nikil dutt rajesh gupta alex nicolau speculation techniques high level synthesis control intensive designs proceedings 38th conference design automation p269272 june 2001 las vegas nevada united states sumit gupta nikil dutt rajesh gupta alex nicolau dynamic conditional branch balancing highlevel synthesis controlintensive designs proceedings conference design automation test europe p10270 march 0307 sumit gupta nick savoiu nikil dutt rajesh gupta alex nicolau timothy kam michael kishinevsky shai rotem coordinated transformations highlevel synthesis high performance microprocessor blocks proceedings 39th conference design automation june 1014 2002 new orleans louisiana usa satish pillai margarida f jacome compilerdirected ilp extraction clustered vliwepic machines predication speculation modulo scheduling proceedings conference design automation test europe p10422 march 0307 sumit gupta nick savoiu nikil dutt rajesh gupta alex nicolau conditional speculation effects performance area highlevel snthesis proceedings 14th international symposium systems synthesis september 30october 03 2001 montral pq canada soha hassoun fine grain incremental rescheduling via architectural retiming proceedings 11th international symposium system synthesis p158163 december 0204 1998 hsinchu taiwan china luiz c v dos santos jochen g jess exploiting state equivalence fly applying code motion speculation proceedings conference design automation test europe p120es january 1999 munich germany darko kirovski miodrag potkonjak engineering change methodology applications behavioral system synthesis proceedings 36th acmieee conference design automation p604609 june 2125 1999 new orleans louisiana united states srivaths ravi ganesh lakshminarayana niraj k jha removal memory access bottlenecks scheduling controlflow intensive behavioral descriptions proceedings 1998 ieeeacm international conference computeraided design p577584 november 0812 1998 san jose california united states sumit gupta nikil dutt rajesh gupta alexandru nicolau loop shifting compaction highlevel synthesis designs complex control flow proceedings conference design automation test europe p10114 february 1620 2004