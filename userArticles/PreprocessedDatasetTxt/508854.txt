comprehensive model arbitrary result extraction within realms workflow management grid computing scheduling distributed services central issue schedulers balance time cost fit within clients budget accepting explicit data dependencies services best resolution scheduling results extracted one service total simply forwarded next service however distributed objects remote services adhere various standards data delivery result extraction multiple means requesting results multiple ways delivering results examining several popular idiosyncratic methods developed comprehensive model combines functionality component models model arbitrary result extraction distributed objects provides increased flexibility object users increased audience module providers turn intelligent schedulers may leverage result extraction features b introduction 11 traditional rpcs asynchronous extraction address problem obtaining results multiple computational servers response requests made client program simplest form result extraction traditional synchronous remote procedure call rpc parameters passed client waits patiently results finally results simultaneously available single object returned certain function calls languages offer procedure calls one outparameter even possible c use pointers cleanly implemented corba dominant form result extraction programming languages many distributed systems eg corba typical procedure call defined idl syntax like void mymethodin type1 param1 type2 param2 type3 param3 12 alternative extraction models models data extraction received little attention programming languages paradigms alternative models generally strictly functional traditional procedure call used increasingly replacement rpcstyle result extraction least aspect provide functionality flexibility rpc one important enhancements addition asynchrony clients stall results computed delivered strictly powerful must asynchronous result extraction used even many sequential computing languages like java ada enabled various ways message passing threading rendezvous etc asynchrony tool delay reorder result extraction well understood widely used 12 13 partial extraction data results become almost ubiquitous advent web browsing examples extraction models progressive extraction results seen limited use specialized arenas also envision models encompassing esoteric extraction models potential flexible wide limited use today perhaps important model refer partial extraction partial extraction taking desired portions result set thus saving costs associated extracting entire set instance almost modern web browsers ability download text without images speed browsing slower connections many browsers also allow users filter unwanted objects ie embedded audio html documents web brought partial extraction desktop default browsing model another model result extraction strictly powerful traditional rpc progressive extraction model many scientific computations adaptive mesh refinements answers become better eg precise time important extract results progress made toward acceptable solution steering early termination reasons typical application type design aircraft wing 2 3 5 12 certain scientific mathematical processes like newtons method successive approximation roots equation also utilize type extraction 4 traditional rpc result extraction model lend well progressive extractions decomposition traditional call model discussed time 10 advocate breakdown extraction phase model propose extraction model developed course research development language clam composition language autonomous megamodules 8 within chaims composing highlevel access interfaces multisite software megaprogramming project 1 encompasses three important augmentations asynchronous partial progressive rpcstyle result extraction models amalgamation three extraction paradigms leads general model expressive three taken alone 13 current system support partial progressive extraction many languages systems generic asynchronous remote procedure call model result extraction provides enough flexibility cases custom solutions abound occasionally custom solutions become widespread often circumstantially eg runtime support rather language specification instance partial extraction within available community webbrowsers arise html per se consequence parsing html pages making selective http requests effect webbrowser implements partial extraction results html provides schema results available example web users choose download certain types content webbrowser implements filtering affected html http protocol accept htmlhttpbrowsing model appropriate partial extractions schema data available course without schema partial extractions would meaningless level constrains domain partial extraction semantically meaningful even practical however since model partial extraction wholly encompasses traditional rpc method result extraction problem progressive extractions frequently consequences elaborate development projects arise consequence nature data involved look webbrowsing find extremely limited form progressive extraction one arises data hand rather html http within certain result sets like weather maps results change time simply rerequesting data progressive updates data may seen client hand see broader picture progressive result extraction turn usually handtooled codes specialized single applications far know currently language primitives supporting progressive extractions additionally marginal runtime protocol support progressive extractions seems exist specialized data streams like browsing weather services intentional support found examples handcoded systems allow partial result extractions predefined process points allow early result inspection 3 working codes built allow users steer executions test convergence iterative solution generators however language runtime system develop arbitrary codes allow progressive extractions found especially true compositions languages geared toward distributed objects herein outline set language primitives expressive enough capture result extraction models simultaneously also review implementation general result extraction model encompassed within megaprogramming language clam supporting components within chaims system 7 2 result extraction within 21 definitions motivation focus result extraction studies interesting results come computational services rather simple data services like databases web servers etc computational services add value input data results computational services tailored inputs unlike data services results often already available service used like static pages web server various extraction methods potentially value context computational services context data services define partial extraction extraction subset available results define progressive extraction extractions result parameter different contentdata different points computation different points computation deliver different accuracy specific results typical simulations complex calculations images signify dependencies results actual time case weather data changes time went several versions clam led current infrastructure originally limited partial data extractions repeated iterations design process yielded generalpurpose clientcentric result examination extraction model seems maximally flexible say model clientcentric unlike exception callbacktype model clients initiate data inspection collection data demand approach clients expect servers push either data status rather must make requests specifically contrast clientcentric approach corba event model seen 34 finally present clam one possible language implementation generic result extraction model clam composition language rather computationally oriented language 8 14 aptly suited presentation extraction model though necessarily programmers language choice given problem advocate extraction model present within particular working framework chaims 22 language specification clam two basic primitives essential result extraction model examine extract use examine inspect progress calculation method invocation procedure etc requesting data status provided server also information invocation progress concerning computation time purpose examine primitive used determine state progress invocation referred invocationhandle examine two status fields state progress state done notdone partial error progress field integer used indicate progress results well invocation various pieces status progress information returned client requests line clientcentric approach syntax mystatusstatus mystatusstatus imagine megamodule module providing service method foo returns three distinct resultsdata b c foo invoked work done b c incomplete call thus return notdone complete call foohandleexamine return done work performed meaningful results available extraction results ready foohandleexamine returns partial case error invocation foo error returned megamodule supports invocation progress information invocationhandleexamine used instead mystatus order get progress information invocation progress information indicates much progress computation made already terms time used estimated time needed complete ideally progress information agreement pre invocation cost estimation also provided clam see primitive estimate 8 yet conditions like server load change rapidly essential able track progress computation invocation completion upon receipt invocation status partial client knows subset results extractable though particular element result data ready extraction result contains progressive thus temporary values finalized yet partial indicates client would worth inspect individual result parameters get particular status information imagine foo return data elements b c case done b partially done extractable results available progress made c call would return partial subset available data ready subsequently client issue foohandleexaminea return done foohandleexamineb return partial 50 foohandleexaminec return notdone interpretations results examination c obvious case result b assuming result value 50 completed server makes additional information available client return tuple partial 50 would express remember second parameter returned examine integer clam places restriction general use servers impart meaning parameters however recommended usage value indicate percentage 0 100 value completion semantic meaning associated particular server available client builders via special repository clam couples examine primitive equally powerful extract mechanism purpose extract call collects results invocation subset parameters returned invocation extracted fact parameters extracted ones explicitly specified left hand side command syntax returning previous example method foo look extract return fields namevalue pairs may contain subset available data example method foo might following tmpaa tmpbb foohandleextract call would return current values b leaving c server extract primitive allows extract results ready well needed contrast much simpler extract simply results would returned extract command independent state 23 analysis extraction model different flavors extraction available different levels functionality extract examine present various achievable extraction modes portions complete set clam data extraction primitives available analysis shows examine extract relate interact provide result extraction flavors outlined paper within examine simple inspection returns per invocation status value done notdone partial error two augmentations made examine primitive first augmentation addition second parameter progress indicator second augmentation ability inspect individual parameters two augmentations provide four distinct possible examination schemes 1 without parameter inspection without progress information 2 without parameter inspection progress information invocation specific 3 parameter inspection without progress information 4 parameter inspection progress information parameter specific two types extract clam extract returns values invocation like rpc b extract retrieves specific return values like requesting specific embedded html objects two extraction options coupled four possible types examine form eight possible models extraction reference source found shows table possible combinations outlines basic functionality achievable potential scheme even simplest case shown entry 1a examine works per invocation basis cannot examine particular parameters extract returns entire set results extraction model remains powerful typical cfortranlike procedure call viable asynchrony achieved model retains clientcentric orientation client polls chosen times examine extract data whenever desired assumption clam client may also extract data multiple times places burdens support system discuss next section table 1 examineextract relationships single extract per return element extract b per invocation examine one parameter 1 1a like asynchronous procedure call eg java rmi 1b limited partial extraction like 1a added ability extract subset return data time indicated partial limited one checkpoint results completed per invocation examine two parameters 2 2a limited progressive extraction becomes possible data completion level indirectly indicated second parameter must retrieve entire data set 2b limited progressive extraction still possible legitimate potential partial extractions unique set 1b per result examine one parameter 3 3a allows data retrieval particular return values complete entire set must retrieved time semantic partial extraction 3b true partial extraction becomes possible real progressive extraction eg webbrowsing per result examine two parameters 4 4a progressive extraction becomes possible data completion level indicated second parameters must retrieve entire data set determine detail 2a 4b partial progressive extraction possible single results may extracted various stages completion eg clam mechanism table entry 1b mainly used partial result extraction results completed yet results needed client possibility extract results needed right away leave results server extracted later point time client indicates longer interested results main advantage level partial extraction avoidance transmitting huge amounts data needed particularly case one result parameter contains metainformation tells client needs result parameters mechanism compared partial download webpages webbrowser first download browser might exclude images later point person using webbrowser might request download specific images based textual information received first download usage partial extraction become important allows partially download small amount information spend costs mainly time using slow connections costly images really needed limited capability process progress inspection even one return parameter table entry 1b set done notdone partial error room limited process inspection return partial server may indicate unique meaningful checkpoint client could used indicate arbitrary level completion arbitrary subset data currently meaningful single return value really special binary case second return value examine together per return element extract model reasonably used extract one specific predefined subset results final extraction entire return data set figure 1 one shows use partial creating single binary partition results way partial indicates specific case results b ready yet c yet ready eg c ready yet yet b could indicated status notdone would returned clarity examine closely power associated entry table entry 1a one status parameter per invocation ie foo ability extract entire return data set clearly limited much like asynchronous remote procedure call clear distinction client polls result readiness also data delivered client requests noted previously table entry 1b see adding per element extraction capability allows clients reasonably extract one portion data set done earlier whole capability still limited model reasonably used extract one specific predefined subset results final extraction entire return data set return value partial used indicate partial set results done whereas examination return value done may indicate results ready use partial seen figure 1 possible create single binary partition results way ready ready ready returnvaluesfromfoo figure 1 overloading partial additional semantic information table entry 2a see limited progressive extraction data made possible addition second parameter examine status results indirectly derived progress invocation indirect progress indication applies entire result return set really useful one result parameter result parameters belong tightly together superset webbrowser extraction method actually webbrowser extract method weather data computed images simulations metainformation data returned client ie status data 20 complete etc add metadata web browsing browser must extended actively process return values another mechanism like java javascript table entry 2b see limited progressive extraction data made possible addition second parameter examine really power examination extraction model table entry 2a however creative server programmers could take advantage scheme similar shown figure 1 still even circumstance programmers limited one predefined subset extraction allowed flexibility seen entries 3b 4b table entry 3a see addition per return value examination information one return value method functions entries 3a 3b 4a 4b identical entries 1a 1b 2a 2b respectively refer entry 3a semantic partial extraction per result examination allows user know exactly individual return results ready entire data set must extracted get particular element cause unnecessary delay overhead especially large return data sets table entry 3b see first fully functional partial extraction whereas entries 1b 2b individual return values could selected return set partial extraction meaningful without per return value examine primitive offered table entry 4a progressive extraction possible progress indicators data return value hand still suffers overhead table entry 3a data must extracted stage expense cannot avoided table entry 4b see manifestation complete clam examineextraction model one facets general result extraction model partial progressive extractions possible including partialprogressive extractions arbitrary individual elements may extracted various stages completion without exception model strictly powerful others 24 granularity partial extraction discussion table 1 special case possible extract exactly one subset parameters case 1b general case wherein partial extraction arbitrary set parameters extracted case 3b cases granularity extraction given individual method parameter one method parameter either extracted whole module supplier wants provide fine granularity partial extraction results method split many different parameters possible allows fine granularity partial examination extraction yet two distinct disadvantages result parameters correlated together form larger logical structure higher level structure gets lost specification method well extraction client burdened reconstructing higher level data structure overhead concerning programming well concerning information dissemination client needs get information somewhere reconstruct higher level structure information necessarily part method specification add figure part repository definition xmlwith definition parameter persdat leave details short cuts simple parameters schema spec dorotheastree figure 2 sample clam repository information another way provide fine granularity partial extraction result parameters without burdening client reconstruction higher level data structures module provider makes substructure result parameter public allows users examine request part result parameter one possible way using xml parameters 15 structure parameters defined dtds xmlschemas made public along method interfaces 16 clam dtd xml parameters defined chaims repository shown figure 2 client wants extract parameters whole client uses clam syntax discussed section 22 client wants examine extract part parameter client adds xql query string parameter name examine extract command parameter persdat specified figure 2 client could examine extract element lastname following clam commands xql simple query language allows clietns search extract specific subelements xml parameter example whole data structure persdat searched element tag lastname returned inclusive subelements xql would also allow clients specify whole path eg persdatnamelastname search element anywhere within another element eg persdatlastname anywhere within entire parameter eg lastname specific example queries return data xql also allows complex queries including conditions subscripts details see 17 using xql queries extracting partial results computational methods confused using xql queries extract data xml database spite apparent similarities several differences query nonpersistent data lifetime result parameters linked duration invocation exists overall schema result parameters one module even several modules scope xml specification dtd repository one single parameter relationships parameters issue partial extraction due first two differences also need use join operation simple query language like xql fulfills needs partial extraction whereas xmldatabases complex query languages like xmlql might better suited 18 25 implementation issues 251 wrapping within chaims server modules certain compatibility requirements many server modules actually wrapped legacy code necessary components act remote servers minimal chaims compliance legacy module trivially support examineextract relationship like table entry 1a single extract per invocation examine simply treat legacy module like black box returns done notdone error without partial also return values collected chaims wrapper client freely choose request data though must request data explicitly client may also perform multiple requests data without augmentation original code table entry 1b connection wrapper legacy code invoke foo invoke foo figure 3 clientwrapper communication use powerful models data extraction significant modification would required nave modules originally classified two augmentation types legacy modules either partial progressivetype augmentations partial extraction augmentations make particular subset return data externally available completion entire invocation progressive extraction augmentations post information multiple stages ie implementerdefined checkpoints native modules designed partial progressive extraction must way post interim results may extracted clients interim results must held structure request data may serviced without interrupting working code chaims wrapper threaded component handles messages provides means storing interim results delivering results clients implement partial progressive extractions two pieces information required status data module posts interim result delivered wrapper native server pieces information must given result value status need provided per method pre invocation however information extracted collected knowledge partial results partial results ready status notdone partial results ready status done results ready level per invocation status simply partial partial result indicates error however per invocation status set error prevents blind per invocation extraction data elements may corrupt 252 result marshalling methods two equally appropriate methods marshalling partial results depending upon application passive active marshalling concerns basically servers clients passive approach whenever client specifically requests status partial results message handler requests information working code appropriate routines provided runtime layer cpam composition protocol autonomous megamodules form java class may user developed course native codes written intent posting partial results easier work wrapped codes use suitable language java otherwise figure 4 better shows marshalling examination interaction wrapper legacy code status progress information held wrapper also temporary storage locations extractable parameters located wrapper active approach data marshalling appropriate certain problem types method server program reaches point appropriate post status results directly cpam objects wrapper layer tradeoffs approaches clear active posting conceptually simpler easier code requires overhead posting storing interim results may never examined figure 4 shows active approach data marshalling would proceed time wrapper receives examine request appropriate routines actively inspect legacy code update statusprogress structure wrapper extract received request passed legacy code data structures updated results passed back client wrapper legacy code result result c status progress figure 4 wrapper result marshalling 253 termination ability delay extractions make repeated extractions implies server longer knows exactly client finished invocation traditional rpc problem case work complete results returned server procedure obligations client arbitrary extraction server obligated hold data client even without allowing repeated extractions subtle reasons server must hold data clients case partial extraction example method foo client may extract result fields b server know client also interested result field c since priori communication intent client server relationship must changed somewhat obligation server cache store results balanced clients obligation explicitly terminate invocation explicit termination merely signals server client longer interested extractions particular invocation integral detail model result extraction 254 repository repository method interfaces structure return values available programmers using arbitrary extraction model course programming small ie standalone programs inhouse projects etc really issue making services available saleuse externally service providers must provide appropriate information results extracted instance delivering foo net provider indicate users fields b c may extracted separately information context chaims assume programming large provided via repository 3 comparisons following compare extraction model defined clam mirrored primitive primitive chaims access protocol cpam extraction models found following protocols web browsing jointflow swap corbadii 31 partial progressive result extraction web browsing web browsing generally falls category services refer data services recall data services primarily deliver specific data requested clients rather computational services add value client supplied data clients usually represented one many available web browsers crawlers web servers deliver data clients clients request data using http protocol data extracted documents delivered servers often written html often components varying types including images audio video web browsing occurs batch interactive ways batch browsing performed crawlers many reasons indexing archiving etc interactive browsing performed humans numerous reasons information gathering electronic commerce etc browser either sort makes request server specific document document returned client serves template requests document html browser may parse document determine elements form complete document ie images tags document serves schema describing elements may extracted server main document fetched consider possible partial progressive extractions take place extract subelement web page http request sent server data error message returned batch browsing textual information contained page frequently enough meaningful different generalized result extraction model discuss schema results meaningful web browsing page retrieved often meaningful subelements describes aside consider result extraction terms gathering subelements pages interactive browsing partial extraction simple process least marginally exploitable widely used interactive browsers netscape microsofts internet explorer feature autoload feature toggled varying degrees automatically load load different content type images audio video instance users concerned images text disturbed audio browser makes http requests subelements save audio partial extraction cases especially slower internet connections images expensive download users may choose automatically download images determining particular image set images important enough invest time partial extraction webbrowsing special case general partial extraction model first result extracted always contains information results extracted based first result client determines interest elements page also gets information results available contrast general model result parameter may need provide information result parameters possible result parameters specified repository beforehand commonly found progressive extraction web browsing quite different progressive extraction computational service though progressive extraction computational services web eg improving simulation data also feasible computational service progressive extraction refers extracting various transformations input data life computation web browsing progressive extraction actually repeated extraction changing data stream weather services web often provide continuous updates satellite images stock tickers provide updated information users current information investments repeated extractions stream show streams progress time sometimes repeated extractions may done manually reloading source may pulled servers html update commands javascripts embedded javacode etc data retrievable time progress status always done 100 accurate yet expect data contain also information point time refers 32 incremental result extraction progress monitoring jointflow jointflow joint workflow management facility corba 6 implementation i4 protocol workflow reference model wfmc 11 top corba jointflow adopts object oriented view workflow management processes activities requesters resources process managers event audits etc distributed objects collaborating get overall job done objects accessed orb jointflow specification defines interfaces idl chosen jointflow comparison protocol also support request remote computational units yet need degree autonomy protocol also based asynchronous invocation work extraction results special primitives invocation monitoring extraction work started requester asks process manager create new process requester communicates directly new process setting context attributes process invoking start operation process process physical device wrapper legacy code may initiate several activity objects might turn use resources eg humans via assignments act requesters processes focus interest interaction requester process concerning result extraction progress monitoring 321 monitoring progress work processes activities one following states running notrunningnotstarted notrunningsuspended completed successfully terminated unsuccessfully aborted unsuccessfully requester query state process states activities process querying navigating links processes activities states assignments querying navigating links activities assignments requester knows workflow model different steps implemented process requester might able interpret state information subactivities assignments figure progress process model known eg due autonomy boundary assumed chaims status information provided jointflow protocol essentially completed yet completed contrast chaims supports notion certain services may support progress information eg 40 done monitored information detailed running complete aggregated better suited autonomous services detailed information component activities contrast chaims polls progress information jointflow process signals completion requester audit event audit events could also used implement chaimslike progress monitoring top jointflow process special result attribute progress information process free update attribute regularly send audit event old new value progress indicator result requester update yet result attribute cannot polled requester contrast cpam swap getresult returns results results available least intermediate results 322 extracting results incrementally processes activities operation getresultprocessdata returning list name value pairs getresult take input parameter thus returns results getresult operation may used request intermediate result data may may provided depending upon work performed results cannot yet obtained operation getresult raises exception returns garbage results final whole unit work completed resulting state change state complete notification container process requester kind extracting intermediate results corresponds progressive extraction result attributes chaims following features found chaims available jointflow partial extraction getresult none result values extracted getresult mechanism return exception values progressive extraction getresult one result attribute yet results ready intermediate final extraction accuracy information intermediate results unless separate result attribute possibility find availability accuracy intermediate results unless requesting results though partial progressive result extraction part design jointflow also achieved using audit events pushing progressive partial results onto requester instead letting requester poll process activity send audit event requester containing process whenever one result values updated event would contain old well new result value case large data frequent updates messaging mechanism could result huge amounts traffic mechanism would extended special context attributes tell process activity advance results reported intervals yet results static server centric approach contrast clientcentric approach chaims based data demand also partial progressive result extraction mandated jointflow protocol questionable many processes activities would actually offer 33 incremental result extraction progress monitoring swap swap simple workflow access protocol proposal workflow protocol based extending http mainly implements i4 extend also i2 i3 wfmc reference model swap defines several interfaces different components internet resources workflow system interact via swap three main components type processinstance processdefinition observer messages exchanged components extended httpmessages headers defined swap data exchanged encoded textxml body message process instance interface processinstance created started sending createprocessinstance message appropriate processdefinition resource message also contains context data set uri observer resource notified completion events response contains uri newly created process instance process started either automatically processdefinition resource createinstancemessage contains startimmediately flag sending proppatch message process instance new state running process instance resource delegate work resources acting observer ask processdefinition resources creation process instances jointflow chaims process instance creation setting context attributes start process extraction results done asynchronously 331 result extraction result monitoring results extracted process instance sending message propfind time execution process instance message either returns available results contained list requested result attributes returns selected ones result attributes returned available requested attributes yet available presumably exception returned result attributes swap specify results returned propfind final given possibility ask specific result attributes get exceptions specific result attributes case available made possible exceptions encoded xml instead one possible exceptions one procedure call corba based jointflow protocol allows degree partial maybe even progressive extraction process instance signals completion work observer complete message message also contains result data name value pairs represent final set data time completion sending complete message resource exist longer contrast chaims result data lost client observer sends terminate process instance also send notify messages observer resource messages transmit state change events data change events role change events data change events containing names values data items changed 332 incremental result extraction defined chaims model mechanisms swap allow following kind result extraction progress monitoring partial result extraction either pushing results via notify messages pulling results via propfind messages possible notify sends new result data propfind returns available result data whether already returned previous propfind notification result changes without sending also new values possible unless additional result attributes added true getting status individual results asking status results without getting also results possible unless state attribute added data attribute set result attributes progressive result extraction swap specification explicitly specify progressive result updates process instance allowed result attributes would available values final yes progressive results extracted either pushing results via notify messages pulling results via propfind messages accuracy indication provided would implemented via additional result attributes 333 process progress monitoring propfind returns result values available also returns state process instance additional descriptive information process possible states specified process propfind also returns list possible state values yet cases would probably notyetrunning running suspended completed terminated etc basic set states defined i4 process instance asked uri processes delegated work observer directly ask subprocesses statuses analogue model found jointflow thus drawbacks concerning autonomy concerning amalgated progress information progress information specified swap could implemented special result attribute assuming result attributes changed time result attributes could extracted time propfind independent availability result attributes though swap support incremental result extraction defined chaims could quite easily either added swap protocol done using swap protocol defined applying simple workarounds mentioned swap similar goals accessing remote processes chaims open flexible protocol result extraction model already close one chaims could easily extended contain aspects chaims extraction model yet swap designed incremental extraction mind strong duality extract monitoring command found chaims examine extract 34 incremental result extraction progress monitoring corba 341 corba dii corba offers two modes interaction client remote servers static dynamic interface orb static interface idl must exist compiled stub code linked client client executes remote procedure calls remote methods local dynamic invocation interface dii offers dynamic access stub code necessary client know ask idl remote object ie names methods parameters take client creates request method object request method name appears string parameters appear list named values named value containing name parameter value type pointer value corba type code length parameter flags request created method invoked either done synchronously invoke asynchronously send fact flags allow elaborate settings invoke returns remote computation completed client read parameters named value list case send client blocked order figure invocation finished client use getresponse either blocking waits invocation done nonblocking mode soon return status getresponse indicates remote computation done client read parameters named value list case asynchronous method invocation corbadii progress invocation monitored asked client far completion concerned progress information available progressive extraction results supported dii course client free read use results completion invocation yet computation going partial extraction supported 342 corba notification service order mimic incremental result extraction chaims one could use asynchronous method invocation dii coupled event service corba client could implemented pullconsumer special event channel chaimsresults servers could push results channel soon available together accuracy information though event channels could used purpose could require every megamodule uses event channels integration incremental result extraction invocation progress monitoring access protocol definitely adequate consider integral part protocol true languages used program client clam directly supports incremental extraction progress monitoring case languages used programming corba clients 4 conclusions chaims project sought build compositiononly language remote autonomous services consider many different extraction models used different domains examination led realization simple asynchronous rpcstyle approach enough build language access protocol support arbitrary result extractions took careful consideration myriad ways extractions currently used widespread well handcrafted systems building support primitives result extraction methods autonomously progressively partially binding within one system led formulation comprehensive model arbitrary result extraction model captures notions traditional result extraction partial extraction progressive extraction combining two simple primitives clam examine extract full power extraction types achieved extraction model appropriate template existing systems future languages well generic result extraction assumes necessary asynchrony achieved among components distributed communication threading available means 5 r language system composing autonomous heterogeneous distributed megamodules opus coordination language multidisciplinary applications exploiting parallelism multidisciplinary applications using opus porgram design engineers icase research quarterly cpam protocol software composition clam composition language autonomous megamodules simple workflow access protocol swap towards megaprogramming paradigm componentbased programming workflow reference model pipeline expansion coordinated applications design implementation composition multisite services extensible markup language xml 10 schema objectoriented xml 20 xql tutorial xmlql query language xml tr toward megaprogramming programming languages 3rd ed c program design engineers cpam protocol software composition case economy grid architecture service oriented grid computing opus coordination language multidisciplinary applications ctr andrea omicini sascha ossowski editorial message special track coordination models languages applications proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain