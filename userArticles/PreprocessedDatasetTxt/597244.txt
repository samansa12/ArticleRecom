scheduling optimization delivery multimedia streams using query scripts new techniques necessary satisfy high bandwidth requirement temporal relationships multimedia data streams network environment clients experience gaps multimedia data streams presentations multimedia server services multiple clients variable delay occurs end one multimedia stream beginning next multimedia stream client requests queued awaiting service leads interruptions discontinuities clients presentation special techniques necessary manage temporal relationships multimedia streams distributed environments paper propose two scheduling algorithms delivering multimedia streams using query script multimedia database interface clients client specify multimedia objects make presentation temporal relationships query script submitted information query script used multimedia database system schedule optimize delivery using simulations analyzed performance proposed delivery scheduling algorithms predelivery optimization method simulation results show delivery scheduling algorithms satisfy specified temporal relationships multimedia streams maintaining better use system resources b introduction multimedia information systems require new data modeling delivery capabilities specify guarantee temporal relationships streams 7 capabilities critical distributed computing systems due multimedia datas high resource require ments paper propose use query scripts interface clients multimedia database systems specifying delivery multimedia data query scripts allow clients make retrieval research supported part ncr lexisnexis nsf grant cda9601670 c 2001 kluwer academic publishers printed netherlands campbell chung request consisting set multimedia objects temporal ordering multimedia database system information given query script enables database system reserve sucient disk bandwidth memory system resources order meet clients request approach database management system dbms combined multimedia server dbms provides data modeling manages key information multimedia data media server stores delivers multimedia data atomic objects example relational database systems support multimedia use binary large objects blobs blob unstructured storage string database system treats atomic object database schema manages access data blob storing pointer blob objectoriented database systems support accurate modeling better integration multimedia data eventually store multimedia data object sequence data cases order satisfy delivery timing requirements multimedia streams usually specialized media servers handle actual storage delivery multimedia objects media server shared storage facility capable isochronous delivery multimedia data isochronous delivery guarantees new packet data available client time present next video frame audio data additionally media server incorporates serverpush methodology opposed traditional clientpull methodology minimize network trac extraneous client read requests 23 clientpull case client makes separate requests block data hand case serverpush single request made client stream delivery server continually transmits data blocks stream media servers extend existing le system capabilities providing multimedia data placement strategies bounded delivery timing guaranteed buer media management special disk retrieval techniques techniques media server able handle concurrent retrieval transmission multimedia streams supports multiple clients claim relationship media server multimedia database system develops relationship le systems traditional database systems developed originally le system central data management component applications managed logical view data gradually database systems emerged provide common data models catalogs dictionar ies indices tools 8 thus database system extended le systems management capability feel similar architec delivery scheduling multimedia streams 3 tural hierarchy exists multimedia database systems media servers shown figure 1 media server provides basic storage delivery functions multimedia data database system adds necessary modeling management functions additionally media server deliver information directly client application bypassing database system file system dbms media server application dbms file system application traditional multimedia figure 1 hierarchy database systems specialized media servers necessary handle delivery multimedia data since audio video data continuous video consists continuous sequence frames frame needs retrieval processing delivery within strict xed time interval audio continuous sequence samples needs conversion sample interval delivery multimedia data dierent delivery traditional data since multimedia data inherently presentational words usually purpose multimedia data presentation users rather additional computational processing since multimedia data large example 10 seconds vcr quality video 15 mb client wait complete retrieval object beginning presentation instead client processes multimedia data blocks arrive sequence data blocks delivered regular time intervals constitutes multimedia stream delivery problems related many subsystems major bottleneck disk 17 disk subsystems guarantee data delivery within bounds necessary presentation video audio disk orders requests minimize seek times hence exact data delivery timing dependent upon current set requests locations corresponding disk blocks leads random delivery timing unacceptable multimedia data proper decoding multimedia data requires data always present decoding needed common solution retrieve one unit data disk multimedia stream xed disk service round 9 scheme guarantees 4 campbell chung timely delivery long total number requested streams certain limit problem delivery scheme using xed disk service round characterized besteort delivery lead loss temporal ordering streams besteort delivery media server attempts satisfy accepted requests oers guarantees due stochastic nature retrieval process example client wants display two streams simultaneously makes two separate requests rst accepted second rejected loses desired temporal ordering two multimedia streams major problem large gaps streams supposed sequential besteort delivery system may accept request rst stream client immediately receive several requests clients media servers capacity second multimedia stream needed client media server busy deliver immediately results undesired gap two streams called interstream latency shown figure 2 figure 2 loss temporal order multimedia presentation systems address temporal synchronization problems 4 25 deal network based delivery systems assume local storage systems exert strict control disk accesses assumption feasible network environment multiple requests arrive media server several clients network environment besteort de delivery scheduling multimedia streams 5 livery systems provide necessary synchronization multimedia streams approach enables client request set multimedia objects specify temporal order using query scripts query scripts contain enough information multimedia database system maintain requested temporal delivery order query script spec ies entire set multimedia objects temporal ordering one request system create delivery schedule ensure proper delivery delivery scheduling minimizes unacceptable latencies experienced besteort delivery systems remainder paper introduce query script propose two delivery scheduling algorithms named scan scheduling group scheduling simulation results demonstrate proposed delivery scheduling algorithms satisfy specied temporal ordering streams maintaining high system resource utilization also analyze eect predelivery optimization performance proposed scheduling algorithms 2 scheduling delivery using query scripts query script two parts declaration temporal ordering declaration part uses object identiers specify multimedia data objects delivered client temporal ordering part species timing relationships multimedia objects three basic temporal ordering actions initiate streams wait streams complete terminate streams figure 3 shows example query script declares four multimedia data objects delivery video plays completion videos b c play simulta neously video b completes video c terminates even though nished yet video plays details query scripts given 5 query script used specication synchronized presentation multimedia objects temporal relationships continuous media objects easily specied using query script covers eventbased synchronization requirements 3 compared synchronization specication schemes query script quite easy use easily extended adding synchronization constructs example timing operations added cover intervalbased synchronizations extensive survey comparisons dierent synchronization speci cation methods given 3 6 campbell chung figure 3 query script example query script support detailed temporal synchronization semantics presentation language fire 4 mheg 12 19 20 hytime 11 expect client applications use schemes provide richer temporal physical modeling semantics use query scripts make delivery requests include temporal relationships client application manages nal presentation timing using presentation language multimedia delivery system uses query script schedule manage delivery timing information query script provides database system enough information properly schedule delivery scheduling ensures query scripts temporal ordering met overcommitment system resources occurs optimized usage system resources besteort delivery systems perform scheduling since current set requests known system accepts requests contract maintain delivery leads random rejection streams lengthy gaps multimedia streams query scripts delivery manager create delivery schedule since entire delivery request client specied delivery manager able schedule delivery multimedia objects guarantee desired performance creating feasible schedule using predelivery optimization technique predelivery optimization consists prefetching disk blocks periods disk underutilization start query scripts delivery scheduling multimedia streams 7 21 scan scheduling delivery scheduling main reason using query scripts delivery schedule consolidated list service intervals streams accepted query scripts delivery manager uses information query script schedule delivery streams integrating service intervals current delivery schedule feasible schedule one overcommitment system resources delivery scheduled multimedia streams satisfying temporal orderings specied query scripts media server uses delivery schedule control delivery multimedia streams client workstations three major parts delivery manager media server parser scheduler retrieval manager shown figure 4 scheduling process starts client sends query script media server query script parsed graph called script realization graph srg 5 scheduler takes request queue nds starting time allow streams delivered according clients temporal ordering requirements creating series test schedules integrates new request current delivery schedule scheduler selects feasible test schedule new delivery schedule retrieval manager reads delivery schedule every xed disk service round determine streams service identies set disk blocks retrieve disk disk blocks retrieved delivery manager sends clients isochronous delivery guaranteed client request scheduled query scripts served every xed disk service round main part schedule list service intervals resource needs service interval service interval represents period time set streams delivered therefore level resource utilization required service interval figure 5a shows service intervals delivery schedule new service interval begins change set active multimedia streams figure 5b shows service intervals new query script adding new query script existing delivery schedule results set service intervals figure 5c list service intervals delivery schedule maintains information future resource needs fashion examined quickly developed two scheduling algorithms named scan scheduling group scheduling present scan scheduling algorithm simulation results introducing group scheduling 8 campbell chung figure 4 delivery manager figure 5 service intervals scan scheduling algorithm schedules one query script time progressively slipping new query scripts start time nding rst feasible schedule named scan scheduling algorithm creates test schedule integrating service intervals new query script current schedule shown figure 6 test schedule becomes new delivery schedule feasible feasible schedule one service intervals receive adequate disk bandwidth buer memory network bandwidth system resources required test schedule feasible algorithm repeatedly nds next possible start time new query script obtaining feasible schedule algorithm always nd start time results feasible schedule since media server delivery scheduling multimedia streams 9 admits query script feasible ensures feasible schedule exists even though may start new query script end currently accepted query scripts apply admission test integrate test schedule test schedule feasible reject query script accept test schedule start fail pass locate next possible start time update test schedule try predelivery optimization unsuccessful successful update test schedule figure 6 scan scheduling algorithm key ecient execution scan scheduling algorithm limit number possible test schedules requires nding minimum set possible start times new query script instead sequentially incrementing possible start time scan algorithm examines time instances current schedules resource utilization level changes ie start end points service intervals schedule signicantly reduces number test schedules however since one service interval requiring excessive amount resources make test schedule infeasible may unduly long delay starting new query script thus need optimize schedule reduce total service time query scripts campbell chung 22 predelivery optimization optimization delivery scheduling required reduce total delivery time query script making better use system resources delivery manager uses prefetching buering techniques overcome overcommitment system resources provide earlier delivery requests idle disk bandwidth buer memory used prefetch buer multimedia streams overcommitted service intervals delivery query scripts rst step check resource requirements service interval test schedule problem algorithm calculates total amount memory space needed correct overcommitment amount proportional length overcommitted service interval amount overcommitted disk bandwidth algorithm scans back test sched ules service intervals looking available disk bandwidth memory space nds available resources test schedule updated include prefetch operations overcommitted service intervals corrected updated test schedule accepted otherwise new test schedule generated selecting next possible start time new query script media server based optimization necessary since client workstation perform local optimization delivery requests client workstation perform local optimization perform global optimization unaware client requests also client may fully aware length bandwidth requirement composition requested multimedia objects complete scheduling optimization scheduling algorithm needs know properties multimedia objects client get information delivery manager part multimedia database system better perform optimization since detailed knowledge actual multimedia content 3 simulation evaluate performance scheduling optimization algorithms based query script created simulation environment simulation implemented using csim 18 discrete event simulator supporting concurrent processes written c csim primitives provide multitasking capabilities handle interprocess communications manage data collection resulting simulation close actual implementation c delivery scheduling multimedia streams 11 comparison also evaluate cases clients release individual request multimedia stream called baseline approach article 31 simulation model simulation model includes three major components clients delivery manager disk manager client processes three stages request generation request submission data reception simulations clients request consists four playback intervals length interval determined longest multimedia stream interval streams playback interval start together beginning interval playback interval three multimedia streams selected pool 180 multimedia streams consists 120 small streams 60 large streams length stream randomly selected uniformly distributed set values distribution small streams ranges 5 15 seconds distribution large streams ranges 45 75 seconds baseline cases client makes request multimedia stream start playback interval query script cases client submits single query script multimedia streams involved experiments clients wait receive multimedia data delivery manager record delivery times initiate another cycle requests delivery manager disk manager parts media server media server receives query script delivery manager rst parses query script executes delivery scheduling routine scheduling routine merges query script current delivery schedule using proposed scan scheduling algorithm delivery manager generates list disk blocks retrieved according schedule sends disk manager disk manager retrieves data blocks memory buers transfers client network simulation use network delay network congestion models since appropriate multimedia networks able handle maximum number 150 kbsec streams current disk model supports disk manager simulates hp 97560 disk following model methodology used 24 disk model calculates seek time rotational delay head switch time data transfer time disk request disk request consists entire track data 36 kbytes model uses piecewise linear approximation disks campbell chung table disk drive simulation parameters number cylinders 1962 number tracks per cylinder 19 number data sectors per track 72 sector size bytes 512 data transfer rate 23 mbsec rotation speed 4002 rpm 383 cylinders head switch time 16 ms controller overhead 22 ms actual seek time seek distances determined placement multimedia streams disk simulation determine whether schedule feasible delivery manager uses xed maximum number continuous multimedia streams disk model deliver concurrently theoretical maximum number streams disk deliver limited disk bandwidth practice actual number concurrent streams delivered signicantly lower due random distribution seek delay experimentally determined maximum number streams disk continuously support increasing number streams delivered monitoring disk bandwidth utilization number data runs simulation stream stored sequence randomly selected tracks select maximum number serviceable streams one less point disk bandwidth utilization reaches 100 data underrun error occurs figure 7 shows maximum average disk bandwidth utilization recorded simulation run 10000 seconds simulation one track stream delivered xed disk service round one disk service round period time playback data one buer simulation buer stores whole disk track playback rate assumed 150 kbsec disk head movement based grouped sweeping scheduling delivery scheduling multimedia streams 13 gss algorithm 27 number groups one amount extra time disk service round delivering one track stream gives us disk bandwidth utilization percentage average disk bandwidth utilization statistical average disk service rounds maximum disk bandwidth utilization largest disk bandwidth utilizations disk service rounds simulation figure 7 selected eight maximum number simultaneous streams serviced continuously figure 7 determining maximum number serviceable streams disk model uses multiple buers retrieving multimedia stream one buer loaded data disk data another buer delivered client workstation multiple buering results ecient continuous data retrievals disk forces startup delay least one disk service round rst buer lled stream startup delay amount time client request delivery rst data block client usually two buers allocated stream double buering except case prefetching multiple tracks stream scheduling optimization simulation capture disk bandwidth utilization startup delay interstream latency gap two consecutive streams experiments using proposed predelivery optimiza tion also capture memory usage resulting output data collected xed length warmup period remove startup tran sients also perform 10 simulation runs 10000 seconds obtain average values considering stochastic nature simulation 14 campbell chung run consists xed number clients client makes new request current request completely served 32 performance scan scheduling goal using query scripts eliminate gap two consecutive streams may baseline approach gap result client individually requesting stream delivery manager queues requests required disk bandwidth available streams serviced rstcomerstserved basis length gap increases number streams increases system work load increases figure 8 shows average maximum latency streams baseline experiments baseline approach average 075 second latency three clients however average interstream latency increases rapidly disk contention becomes higher six clients higher load requests available resources system queues requests streams interstream latency eect creating gaps problems delivery ordering figure 8 interstream latencies larger loads interstream latency increase 30 seconds every two streams simulation client request four playback intervals total interstream latency easily several minutes long query scripts gaps streams shown figure 8 scheduling algorithm ensures sucient resources delivery streams query scripts delivery scheduling multimedia streams 15 benet contiguous presentation query script comes cost increased startup delay figures 9 10 show average maximum startup delay baseline scan scheduling experiments startup delay baseline experiments follows pattern interstream latency since scheduling delivery begins whenever system resources become available scan scheduling experiments show increase startup delay since system starts delivery query script maintains feasible schedule startup delay becomes high contention system resources grows scheduler needs delay start times query scripts manage contention figure 9 average startup delay figure 10 maximum startup delay campbell chung figure 11 illustrates delivery characteristics baseline approach scan scheduling based query script baseline approach experiences interstream latency loss synchronization due heavy system work load scan scheduling approach may experience larger startup delay since system creates delivery schedule ensures sucient resources complete delivery query script baseline approach start delivery earlier since guarantee exists figure 11 delivery timing predelivery optimization lowers startup delay seen figure 9 figure 10 benet comes prefetching data thus able nd feasible schedule earlier start times query scripts optimizer uses memory hold prefetched blocks multimedia streams figure 12 shows memory utilization predelivery optimization scan scheduling algorithm memory usage quickly grows number clients increases next simulation experiment limited amount memory 20 mb predelivery figure 13 shows little change average maximum startup delay memory limitation infeasible schedules require small amount predelivery become feasible figure 14 shows distribution actual startup delays simulation run scan scheduling optimization distribution shows high percentage requests start within short period clients 65 requests started within 9 seconds six clients 65 started within 28 seconds next analysis examines disk bandwidth utilization measure disk bandwidth utilization function disks idle time disk service round figure 15 see average disk utilization highest baseline cases without scheduling delivery scheduling multimedia streams 17 figure 12 memory usage predelivery optimization figure 13 startup delay withwithout memory limitation system service requests made quickly possible results higher disk utilization level however since simulations performed xed continuous work load lower disk bandwidth utilization maintaining delivery throughput indicates ecient scheduling methodology implies time remains disk service round additional requests including nonstream requests approach interleaving access continuous streams noncontinuous data allows disk system service multimedia objects traditional le accesses figure 15 also shows limiting buer memory size 20 mb predelivery eect disk bandwidth utilization campbell chung figure 14 distribution startup delay figure 15 average disk bandwidth utilization article considered constantbitrate cbr streams constant playback rate 150 kbsec however modern digital videos use variablebitrate vbr compression mpeg 13 15 21 22 data consumption rate playback dierent dierent frames retrieval vbr streams use constant time length ctl retrieval constant data length cdl retrieval 6 ctl retrieval variable amount data retrieved stream disk service round playback time next service round hand cdl retrieval xed amount data retrieved stream delivery scheduling multimedia streams 19 disk service round playback time dierent next disk service round buer enough data playback next disk service round data retrieved current disk service round 1 use cdl retrieval scan scheduling algorithm applied described xed amount data retrived stream disk service round however use ctl retrieval adopt generalized ctl gctl proposed 2 gctl duration ctl retrieval round integer multiple duration disk service round xed amount data retrieved stream disk service round thus scan scheduling algorithm used along gctl retrieval networking critical issue delivery multimedia streams especially vbr streams 10 14 26 however article focused retrieval scheduling multimedia streams disk subsystem within media server networking issues beyond scope article main goal scan scheduling algorithm satisfy interstream synchronization specications supporting videolike operations rewind fastforward operations specic stream easy user initiates videolike operation stream presented stream removed corresponding query script system change current delivery schedule video like operation regarded separate request disk bandwidth requirement considered generate new sched ule many query scripts serviced enough disk bandwidth available start requested videolike operation may delayed 4 group scheduling section look additional optimization technique extends scan scheduling algorithm order improve system resource utilization scan scheduling algorithm perform optimization nds feasible schedule earliest start time new query script however nd feasible schedules select schedule better uses resources reduces overall query script startup delay example rst feasible schedule new query script happens set intervals high disk bandwidth utilization late schedule following query scripts must start point high utilization however new query scripts start time slightly delayed new schedule campbell chung created might avoid intervals high utilization levels hence allow query scripts start earlier pass integrate test schedule test schedule feasible include test schedule apply metrics candidate schedules select best one select another start time time window find feasible schedule apply scan scheduiling algorithm fail set candidate schedules start figure 16 group scheduling algorithm 41 creation candidate schedules nd multiple feasible candidate schedules new query script check possible start times within xed time span earliest start time query script obtained applying scan scheduling algorithm xed time span called timewindow prevents us considering many candidate schedules dierent start times new query script moreover desirable delay start time much favor performance metrics set candidate schedules select schedule based performance metrics scheduling algorithm named group scheduling shown figure 16 scan scheduling algorithm always minimizes startup latency new query script since selects rst feasible start time group scheduling may increase startup delay new query script selecting start time better uses system resources however limiting additional latency important process optimizing delivery scheduling multimedia streams 21 delivery schedule multiple query scripts inadvertently make new query script unduly suer long startup delay metrics could select start time maximizes startup delay new query script example selecting schedule lowest maximum disk bandwidth utilization level may desirable accommodate query scripts later however strategy leads starting new query script end current scheduled query scripts figure 17 shows sample case situation occurs figure 17a depicts existing schedule new query script immediately starting new query script results delivery schedule maximum utilization 8 shown figure 17b starting new query script end current schedule figure 17c results maximum utilization 5 strategy thus select schedule figure 17c maximally delays start time new query scripta existing delivery schedule new query script b test schedule new query script starts immediatelyc test schedule new query script starts end new query script current schedule33 figure 17 increased startup delay problem timewindow limits additional startup delay new query script feasible schedules start time falling within timewindow allowed candidate schedules varying length timewindow controls maximum startup delay new query script tradeo larger timewindow size provides candidate schedules selection cost potentially increasing startup delay new query script simulation used 10 seconds timewindow size 22 campbell chung 42 selection criteria set candidate schedules created next task select best schedule selection algorithm ranks candidate schedule based metric selects schedule highest rank new delivery schedule metric identies schedules exhibit desirable properties based optimization goals one optimization goal reduce sum query scripts startup delay another goal better use system resources disk bandwidth use disk bandwidth utilization since measures eciency data transfer disk drive memory basically seek schedules minimize spikes big changes disk bandwidth utilization startup delay later query scripts reduced example figure depicts poor selection schedule impacts query scripts submitted later figure 18b scheduler integrates new query script existing schedule one service interval high utilization 8 result start next query script delayed interval however schedule integrates new query script figure 18c delaying start maximum utilization level becomes 6 next query script may start earlier existing delivery schedule new query script b test schedule new query script starts immediately new query script current schedule3 5 5 38 new query script starts c starting new qs later avoids high utilization level figure 18 optimizing query script integration basic optimization goals mind identied following optimization strategies summarized table ii fully described delivery scheduling multimedia streams 23 table ii summary selection metrics smallest startup delay scan scheduling algorithm biggest soonest highest utilization level early schedule monotonic decreasing consistently decreasing utilization level highest floor schedule highest minimum utilization level lowest ceiling schedule lowest maximum utilization level minimum dierential schedule smallest dierence maximum minimum utilization levels time minimum schedule largest total time period minimum utilization level smallest startup delay rst strategy corresponds scan scheduling algorithm select rst feasible schedule advantages methodology query script starts quickly possible optimization overhead low candidate schedules considered biggest soonest strategy rank schedules based end time last interval highest disk bandwidth utilization scheduler selects schedule smallest end time corresponds schedule highest utilization level ending sooner schedules result avoid cases interval late schedule delays query scripts high utilization level selecting schedules high utilization levels early allows query scripts start earlier monotonic decreasing strategy record earliest time within schedule bandwidth utilization remains decreases earlier time better schedule biggestsoonest strategy based upon last time highest bandwidth utilization thus ignores behavior intervals schedule hand monotonic decreasing strategy measures tendency campbell chung higher bandwidth utilization levels sooner lower utilization levels later schedule selecting schedule exhibits decreased bandwidth utilization levels late schedule makes easier schedule query scripts smaller startup latencies increases nearterm disk bandwidth utilization highest floor strategy looks minimum disk bandwidth utilization measure schedules eciency oor represents lowest bandwidth utilization level schedule since schedules least one interval low utilization level lowest oor considered instead strategy select schedule high est oor idea schedules consistently high utilization levels retrieve data period time hence make better use resources lowest ceiling ceiling represents highest bandwidth utilization level schedule strategy selects schedule lowest ceiling attempt select schedule consistent disk bandwidth utilization selecting schedule high ceiling make sense single short interval maximum utilization occurs fre quently schedules consistent utilization characterized low ceilings allow query scripts scheduled earliest possible time reduces startup delay minimum dierential logical combination highest oor lowest ceiling strate gies described select schedule smallest dierence ceiling oor schedules consistent performance makes easier integrate query scripts time minimum nal metric considered amount time schedule spends oor longer schedule uses oor utilization disk bandwidth available query scripts 43 adding predelivery optimization schedule selection lets consider role predelivery optimization creating candidate schedules three basic approaches rst perform delivery scheduling multimedia streams 25 predelivery optimization nally selected delivery sched ule second perform predelivery optimization potential schedules one possible start time new query script identify feasible candidate schedules nal approach make predelivery overhead part metric rst case performing predelivery optimization selected schedule reduces optimization time decreases possibility nding best predelivery optimization makes schedules feasible cost adding time group scheduling process additional time necessary predelivery optimization around 100 ms per schedule simulation however simulation results show reduce average startup delay query scripts 5 seconds apply predelivery optimization timewindow 10 seconds potential schedules thus performing predelivery optimization potential schedules benecial last option including predelivery overhead metric simply done using total amount memory used predelivery tiebreaker selection metric values equal memory usage predelivery determines schedule select 44 performance group scheduling use simulation environment disk model simulation group scheduling used simulation scan scheduling query script requested client new group scheduling algorithm rst creates set candidate schedules selecting feasible start times new query script scan scheduling algorithm start end points service intervals current schedule potential start times new query script dramatically cuts number candidate schedules evaluated scheduler creates test schedule potential start time new query script test schedule feasible predelivery optimization applied attempt make feasible collection feasible schedules found trial integration process becomes set candidate schedules one candidate schedules selected new query script based selection metric simulations limited buer memory size 20 mb predelivery optimization first compare various selection strategies using dierent met rics terms average startup delay scheduled query scripts figure 19 shows results experiments four ten clients scan algorithm slightly higher average startup delay 26 campbell chung many cases six clients resource contention begins point group scheduling begins uence results ever since average startup delays dierent selection strategies quite similar conclude much improvement comes small delay added start time new query script selecting best schedule candidate schedules dierent start times provides 57 improvement average startup delay figure 19 average startup delay figure 20 maximum startup delay larger improvement seen maximum startup delay shown figure 20 compared scan scheduling group schedul delivery scheduling multimedia streams 27 ing algorithm reduces maximum startup delay around 10 seconds runs high numbers clients figure 21 shows amount memory used predelivery optimization group scheduling algorithm memory usage play role selection metrics maximum limit make potential schedules infeasible group scheduling algorithm better uses disk bandwidth explained hence require much predelivery optimization scan scheduling algorithm many cases thus memory usage predelivery optimization group scheduling algorithm usually lower scan scheduling algorithm figure 21 memory usage predelivery optimization next analysis examines disk bandwidth utilization measure disk bandwidth utilization function disks idle time disk service round figure 22 see average disk bandwidth utilization higher group scheduling cases scan scheduling information delivered shorter period time group scheduling evidenced smaller startup delay query scripts 5 conclusion paper presented new methodology delivering multimedia objects multimedia database system maintains temporal ordering requirements specied client developed delivery scheduling algorithms ensure sucient system resources 28 campbell chung figure 22 average disk bandwidth utilization meet clients temporal ordering requirements obtain clients requirements introduced query script new interface clients multimedia database systems allows client completely specify set multimedia objects temporal relationships information proposed scheduling algorithms delivery manager creates delivery sched ule minimize resulting startup delay query script use predelivery optimization technique prefetches disk blocks memory series system simulations shows eects benets provided proposed delivery scheduling algorithms without query scripts clients experience large interstream latencies since global delivery scheduling possible example simulations showed maximum interstream latency 40 seconds six clients query scripts interstream latency presentation query script begins desired temporal order synchronization multimedia streams perfectly satised scan scheduling using query scripts average startup delay may increase delivery manager delays start query scripts maintain feasible schedules however increase startup delay client scan scheduling quite comparable total interstream latencies baseline approach means delivery throughput quite comparable cases moreover scan scheduling algorithm requires less disk bandwidth delivery throughput limited buer memory predelivery optimization affect delivery performance group scheduling algorithm extends scan scheduling algorithm examining multiple potential retrieval delivery scheduling multimedia streams 29 schedules selecting best schedule algorithm rst creates set candidate schedules uses predened selection metric rank selects best schedule proposed various selection metrics discussed implementation benets compared scan scheduling group scheduling results 5 decrease average startup delay 10 decrease maximum startup delay maintaining better memory disk bandwidth utilization computation overhead group scheduling around 100 ms potential schedule almost negligible compared performance gain r multimedia information storage management introduction database systems iso 10744 iso multimedia hypermedia experts group mheg computer science mathematical introduction getting started csim17 users manual mheg center mpeg video compression standard tr ctr soon chung anil l pereira timed petri net representation smil ieee multimedia v12 n1 p6472 january 2005 harald kosch ahmed mostefaoui lszl bszrmnyi lionel brunie heuristics optimizing multiclip queries video databases multimedia tools applications v22 n3 p235262 march 2004