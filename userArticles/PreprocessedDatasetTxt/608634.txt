defining open software architectures customized remote execution web agents agentbased solutions promise ameliorate web services promoting modular construction web servers relieving network transferring useless data supporting user mobility etc however existing web servers favor hosting agents paper proposes description agent behavior terms requirements regarding resource utilization eg memory disk space functional services eg system calls nonfunctional properties eg degree replication access control formally expressed requirements used automated decision process based software specification matching techniques upon acceptance agent host uses requirements construct environment customized agents execution discuss benefits approach used promote existing agentbased solutions web framework b introduction since appearance early 90s web greatly evolved initially intended transfer hypertext documents success worldwide acceptance led focus research interest directions like distributed computing electronic commerce etc however perspective intensive use webs architecture designed employment consequently today web confronted number problems ranging server saturation heavy network trac access control verication client requests one prominent solutions coping problems use software agents concept introduced distributed systems eld articial intelligence 1 common sense agent anyone acts behalf interest somebody else consequently software agent piece code endowed capabilities allow perform task place person piece code context document use term agent signify autonomous piece code c 1999 kluwer academic publishers printed netherlands v issarny saridakis mobile characteristics executed independently originator agents permit computations executed close data results decrease network bandwidth utilization response time relaxing restrictions permanent location computations promote distribution workload among components distributed system finally agents support construction modular servers capable adapting large variety client requests hand agents raise major problems potential hosts problems related hosts capabilities provide indispensable primitives supporting agents execution compatibility agents requirements hosts policies execution primitives policies execution properties fully describe agents behavior host environment accepting agent without supporting required execution properties might acceptable agents originator accepting agent whose execution properties con ict hosts policies might acceptable host hence accepting agent host system informed agents properties analyze decide whether given agent properly hosted paper presents framework host decides acceptance agent based explicit description agents execution properties based means provided software architecture eld describe agents execution properties open architecture abstractly unambiguously characterizes host environment expected agent using architectural description agents specication host able detect conicts policies decide whether accept agent case agent acceptance host also information customized execution environment meet agents requirements remainder paper structured follows next section gives overview results eld software architecture use base ground proposal section 3 addresses description open software architectures characterize web agents respect execution properties expected host environment instantiation host environment customized given agent addressed section 4 related work discussed section 5 conclude section 6 summarizing contribution customized remote execution web agents 3 2 software architecture research software architecture domain aims reducing costs developing complex software systems 18 21 towards goal formal notations provided describe software architectures replacing usual informal description terms boxandline di agrams notations generically referred architecture description languages adls adl allows developer describe gross organization system terms coarsegrained architectural elements abstracting away implementation details prominent elements software architecture subdivided following categories components characterize unit computation data store connectors characterize unit interaction congurations describe specic possibly generic software architecture composition set components via connectors existing adls dier depending software architecture aspects targeted identify least two research di rections dene dierent adls architecture analysis provides formal specication architectures behavior eg 14 10 ii architecture implementation delivers implementation application architectural description eg 20 8 research directions instigate design implementation case tools based technologies model checking theorem proving type checking 12 21 example illustrate use adls take example primitive distributed file system dfs dfs composed client interacting possibly distributed le server performing le accesses assume interaction protocol components rpclike using simplied version adl used aster project 1 dfs architecture given conguration made client le server components bound together using connector describing rpc protocol figure 1 contains corresponding declarations 4 v issarny saridakis component client port client typeformat format server typeformat format functional typeint close typedsc fd interaction open close read write client key state server nonfunctional state checkpoint component port server typeformat format functional typeint close typedsc fd read typedsc fd interaction open close read write server nonfunctional read write failureatomicity connector role client typeformat format server typeformat format port client typeformat format functional interaction state client nonfunctional secure reliable components c client connectors com rpc binding functional copen fsopen cclose fsclose cread fsread cwrite fswrite comkey comstate cstate interaction cclient comclient comserver figure 1 architectural description dfs customized remote execution web agents 5 architectural elements described figure 1 dene gross organization dfs abstract manner give associated execution properties precisely execution properties dfs subdivided functional properties dene operations provided called architectural elements fact functional property either provided called element declaring given semantics port corresponding interaction performed instance client component calls open operation leserver component nonfunctional properties characterize resource management policies provided architectural elements instance state key operations client component provide checkpoint authentication properties respectively rpc connector provides reliable secure communications interactions using interaction properties characterize communication protocols used performing interactions among com ponents dfs example interactions achieved using rpc protocol point considered declaration execution properties terms operation signatures names associated declared operations eg key authentication typechecking process typically employed distributed programming environments verify correctness bindings among declared operations based pattern matching however using pattern matching techniques verify satisfaction execution properties requirements placed bindings relies informal description execution properties obviously cannot rely pattern matching performed names describing execution properties eg authentication rpc etc verify correctness bindings slightly dierent interpretation name interacting sides may cause communication problems dicult track resolve overcome problem associate name set formal specications serve denition allows clean interface declarations execution properties requirements resolution based specica tion matching next subsection gives overview work done area formally specifying execution properties sake conciseness give examples formal specications following interested reader may refer 7 details topic 6 v issarny saridakis 22 formal specifications execution properties formal specication functional properties amounts specifying behavior operations required provided architectural elements behavior operations specied terms pre postconditions using hoares logic eg 17 23 addition straightforward benet formally specifying functional properties verifying correctness component interconnection favors software reuse evolution component may retrieved component database using component specication correctness component substitution within conguration checked respect specications involved components aforementioned verications lie denition relations specications relations dene terms specication match ing correctness conditions software interconnection reuse substitution 17 13 23 nonfunctional property characterizes resource management policy implemented underlying execution platform similar functional properties nonfunctional ones specied terms rst order logic eg 9 specications refer operations explicitly stated conguration description software system provided execution platform middleware way transparent software system allows us specify nonfunctional property terms unique predicate instead pre postconditions practically formal specication nonfunctional properties provide verication respect declared nonfunctional properties correctness regarding bindings among components addition enables systematic customization middleware respect properties required architectural elements eg 8 24 brie stated middleware components providing nonfunctional properties retrieved systematic way specication matching required provided properties retrieved components integrated application components using base connectors formal specication interaction properties examined 2 csplike notation introduced formal specication behaviors components connectors respect communication patterns allows correctness verication conguration respect communication protocols used using notion renement given csp framework component description embeds set port processes component interaction points coordination process dening coordination among ports behavior component described customized remote execution web agents 7 parallel composition port coordination processes simi larly connector dened terms set role processes realize communications among components coordination process species coordination among roles behavior connector described parallel composition role coordination processes 3 web agent open software architecture web agent denes software component interacts components host environment interactions characterized functional nonfunctional interaction properties associated thus software agent specied inside open software architecture denes conguration made agent component set open components connectors must provided host environment host may safely accept execute agent formers capabilities cover latters requirements agents requirements agents requirements host environment precisely dened providing following information elements agents open architecture agent component denes functional properties expects host environment together associated interaction properties functional interaction nonfunctional properties provides connector characterizes interaction nonfunctional properties made available host environment communication among agent hosts components open component characterizes software component agent willing interact words agent component abstractly denes agents behavior exposing interfaces host open components connectors provide description execution properties provided host environment 8 v issarny saridakis agent component client figure 1 open component hostfileserver leserver figure 1 connector rpc figure 1 components agent x fs hostfileserver connectors svce service binding dfs binding figure 1 figure 2 description agent accessing le server host environment 31 example illustration let us give denition open architecture agent accesses le server host system figure 2 gives description resulting architecture close dfs architecture discussed subsection 21 except client component corresponds agent given description open architecture host safely accept execute agent host able instantiate open hostfileserver component service connector without violating security policies 32 interpreting agent specifications far arguing architectural descriptions like one given figure 2 provide sucient information agents requirements hosts guarantees based information one decide whether agent conforms hosts policies whether host support requirements agent make practical use approach need associate agents hosts interfaces describe execution properties addition hosts must provided framework allows interpret interfaces framework support analysis agents execution properties reasoning combination hosts policies eg see 3 study combination properties describing security policies customized remote execution web agents 9 ideally three types execution properties ie functional non functional interaction properties described using formal specications however common practice shown informal specications provide sucient guarantees correct reasoning functional properties like case omgs object transaction service see chapter 16 6 similar manner informal specication shown sucient interaction properties due wellknown widely accepted interpretations common communication protocols contrast formal specication necessary nonfunctional properties since exist precise common understanding represent consider example case rpc system designers common interpretation clientserver interaction interpretation associated nonfunctional properties like atmostonce failure semantics often dier given architectural description serves specication agent analysis reasoning performed host prior agents acceptance formally dened follows 8c 2 oagent matchportsp c p c h 8i 2 iagent matchfunci h matchnonfunci h matchinteri h functions symbols used expressions dened follows oagent chost agent denote respectively open components declared agent components available host agent based trust issues ie origin agent associated level trust iagent ihost agent denote respectively connectors declared agent connectors available host agent based trust issues denotes set ports dened c evaluates true set ports p requested agent subset set ports p 0 provided host function implemented using pattern matching techniques v issarny saridakis evaluates true functional properties c 0 match c function implemented using pattern matching functional properties specied terms operation signatures otherwise functional properties formally specied function rely theorem prover evaluates true nonfunctional properties declared c 0 match declared c function implemented using theorem prover since argued specication matching nonfunctional properties mandatory matchinteri 0 evaluates true interaction property least one interaction property 0 matches similarly functional properties function implemented using pattern matching however greater robustness exibility formal specications interaction properties employed instance may achieved using cspbased process algebra proposed 2 interaction properties match processes declared 0 rene let us remark matching function may automated using tool like fdr 5 4 instantiating customized hosts web agents given agents specication seen host environment analyze agents requirements reason compatibility hosts policies section report work carried using outcome analysis instantiate execution environment customized agents needs instantiation process based searching retrieving hosts architectural elements match open components connectors declared agent addition execution properties mentioned thus far explicitly take consideration usage host resources requested agent guarantee agent able execute completion 19 purpose include additional clause named resource conguration description resources required agents execution declared figure 3 gives example explicit declaration agent requirements concerning hosts resources customized remote execution web agents 11 components agent x connectors svce service binding dfs binding figure 1 resource figure 3 explicit declaration agents requirements regarding hosts resources 41 customizing host environment upon reception agent specication host rst evaluates whether able execute agent based agents originator available architectural elements resources host noties agents originator sends agents code host accept agent reason rejection sent agents originator possible reasons include insucient level trust performing requested operations unavailability architectural elements unavailability resources agents originator may revise initial requirements modifying open software architecture constraints make new request host considering agents specication instead treating hostile entity facilitates acceptance host however considered issues related safety host web community considered much important acceptance agent accepting agent relying declared properties risk accept agent actually exhibits dierent behavior one declares case agent may cause damages execution environment obviously approach viable situations like never raise assure execution environment given agent built host according agents specication describe exact interaction points host properties except allocated resources ie private memory disk space agent access without restrictions way agent access host pass declared bindings conforming associated execution properties hence execution environment v issarny saridakis safe host since allow agent perform actions declared interface although host guarantees correct execution agent whose behavior conforms one declared interface guarantees exist execution agents whose behaviors deviate declared ones cases customized environment may provide stronger execution properties requested agent may occur two conditions host possess component providing exactly property requested agent possess component providing stronger property ii agent still accepted host stronger property replaces originally requested one agents specication cases include allocation bigger portion resources one required support 32bit encryption keys 16bit keys requested use component implements failure atomicity retryonerror rst requested etc hence agent requested 155kb memory actually uses 16kb may nally execute completion although priori guaranteed 42 prototype implementation experiment practicality approach implemented prototype agents written java programming language prototype clientserver system clients contact server cgi request remote execution one agents clientserver interaction decomposed follows client rst sends agents specication server waits approval rejection notication server upon reception agents specication server checks whether able host agent based available architectural elements resources presented previous subsection architectural elements available host stored software repository organized able identify subset elements safely made available agent respect originator current prototype distinguish two kinds agents originated intranet server belongs originate outside intranet availability architectural elements simply relies pattern matching functional interaction properties hand checks regarding nonfunctional properties done using specication matching relies tool developed customized remote execution web agents 13 middleware customization 8 server safely execute agent computes unique key reserves requested resources key sent client together acceptance notication agent cannot run reason rejection notied client client receives notication message server checks whether agent accepted former case sends agents code server together associated key latter case client reissues requests later reason rejection temporary resource un availability client may issue new agent specication reason rejection execution property upon reception agents code server checks agents identity using associated key agent authen ticated runs customized execution environment allows agent behave way described specication addition customized execution environment provides private address space agents execution order conne consequences agents crash failed agent alone assure agent respects execution properties declared interface used securitymanager java class build agentsecuritymanager agentsecurity manager surveys execution agent terms le system network accesses resource consumption causes agent abort agent attempts unauthorized action prototype sucient evaluating practicality approach needs enhanced standpoint performance scalability host instantiation process software repository architectural elements available host actually composed small set elements enabling sequential search work needed experiment large software repository addition prototype implementation would obviously benet enhanced products based java technology products like suns may provide substantial improvements prototype 14 v issarny saridakis 5 related work implicit hostagent interaction model underlies approach similar conventional web agent interaction model agent describes process host provides execution environment eg httpbased mobile agents 11 yet case execution environment prepared host according agents execution properties implies execution environment explicitly dened agent agent execution environment strongly coupled standpoint web agents resemble mobile ambients 4 dene mobile code bounded execution environment single entity move across webs administrative domains however mobile ambient modeling entity used structural element system model described ambient calculus whereas web agent set execution properties describing behavior piece software conceptual similarity mobile ambients web agents suggests ambient calculus employed provide formal model hostagent interactions described paper practical level prototype deals safety problems stemming inappropriate resource use mapping agent individual process although approach assures problems like memory address violation aect execution agent caused restricts severely number agents execute concurrently given host dierent approach suggested proofcarrying code pcc short used support safe execution mobile agents 15 pcc agents carry proof conform hosts policies host capable verifying validity proof hence agents safely mapped threads share address space agents even host threads sense pcc provides elegant alternative heavy hosting scheme used prototype extra cost building proof agents originator verifying validity host however pcc provide support nonfunctional execution properties support type agents requirements host hence directly comparable approach rather considered alternative approach resource management prototype general approach hosting web agents aim replacing existing environments supporting mobile agents instead aims providing unifying way describing agents behavior terms functional nonfunctional execution properties considering hosting based behavior framework customized remote execution web agents 15 issues related code mobility remote execution foreign hosts uniformly expressed execution properties execution properties integrate agent characteristics regarding mobility support primitives eg attach move clone 11 nonfunctional requirements eg authentication availability secrecy integrity 22 hence approaches like mobile assistant programming 16 provides underlying framework creating agents moving dierent hosts gain signicant benets presented approach terms exible agent hosting 6 conclusion paper proposed framework reasoning acceptance agents constructing execution environments customized agents requirements proposed framework conveniently adapts existing technology elds distributed systems formal specications needs web agents approach based description open software architectures characterizing execution properties provided agents expected host environment proposed framework suggests hosting agent consists verifying compatibility agents requirements hosts policies customizing host environment meet approved requirements proposal easy use simple case ie interface declaration agents nonfunctional requirements equally easy declaration corba supports declaration complex execution properties without sacricing functionality performance safety host ie customized execution environment guarantees agents requirements hosts constraints besides benets agent presented approach provides support modular constructions host environments results exible scalable web servers customization agents execution environment permits use resource management algorithms allow host concurrently serve one agent without signicant impacts performance moreover modular constructions allow web servers apply dierent hosting poli cies according various criteria based agent characteristics consequence number research issues addressed web agent framework including host use current state deciding accept agent advertise dispose cost resources combinations nonfunctional properties v issarny saridakis host accept assure fair treatment agents equivalent requirements etc r intelligent agents formal basis architectural connection dealing multipolicy security large open distributed systems mobile ambients failures divergence common object services speci achieving middleware customization con characterizing coordination architectures according nonfunctional execution properties exposing skeleton coordination closet framework classifying comparing architecture description languages correct architecture nement untrusted agents using proofcarrying code mobile assistant programming ecient information access www inscape environment foundations study software architecture customized remote execution web agents abstraction software architectures tools support software architecture perspectives emerging discipline framework systematic synthesis transactional middleware tr