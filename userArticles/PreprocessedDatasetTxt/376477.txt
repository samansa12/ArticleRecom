knowledge level software engineering methodology agent oriented programming goal paper introduce motivate methodology called emphtropos building agent oriented software systems tropos based two key ideas first notion agent related mentalistic notions instance beliefs goals actions plans used phases software development early analysis actual implementation second tropos covers also early phases requirements analysis thus allowing deeper understanding environment software must operate kind interactions occur software human agents methodology illustrated help case study b introduction agent oriented programming aop often motivated need open architectures continuously change evolve accommodate new components meet new requirements software must operate different platforms without recompilation minimal assumptions operating environment users must robust autonomous proactive examples applications aop seems suited quoted literature 15 electronic commerce enterprise resource planning airtraffic control systems personal digital assistants book travel arrangements qualify agent software hardware system often required properties autonomy social permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee agents01 may 28june 1 2001 montr eal quebec canada ability reactivity proactivity attributes sometimes requested mobility veracity rationality key feature makes possible implement systems properties paradigm programming done abstract level precisely following newell knowledge level 13 thus aop talk mental states beliefs instead machine states plans actions instead programs communication negotiation social ability instead interaction io functionalities goals desires mental notions provide least part software extra flexibility needed order deal complexity intrinsic applications mentioned first paragraph explicit representation manipulation goals plans allows instance runtime adjustment system behavior needed order cope unforeseen cir cumstances meaningful interaction human software agents 1 defining software development methodology called tropos allow us exploit flexibility provided aop nutshell two key novel features tropos following 1 notion agent related mentalistic notions used phases software development first phases early analysis actual implementation particular target implementation agent language system jack 3 agent programming platform based bdi beliefsdesiresintentions agent architecture 2 crucial role given earlier analysis requirements precedes prescriptive requirements specifi cation consider therefore much earlier phases phases supported instance oop software engineering methodologies one example 1 aop often introduced specialization natu ral development object oriented programming oop see instance 14 11 15 opinion step oop aop paradigm shift simple spe cialization also features aop found oop languages instance mobility inheritance take context different abstract meaning methodologies based uml 2 use case analysis proposed early activity followed architectural design described detail move crucial order achieve objectives goal paper introduce motivate tropos methodology phases presentation carried help running example example considered fragment substantial software system full implementation requiring various man years work developed government trentino provincia autonoma di trento pat system call throughout eculture system webbased broker cultural information services province trentino including information obtained museums exhibitions cultural organizations events governments intention system usable variety users including trentinos tourists looking things scholars students looking material relevant studies paper structured follows section 2 introduces five basic steps tropos methodology namely early requirement analysis late requirements analysis architectural design detailed design implementation five tropos phases described applied context eculture system example sections 3 4 5 6 7 conclusions presented section 8 paper follows two previous papers 12 4 provide motivations behind tropos project early glimpse methodology works respect earlier papers much emphasis put issue developing knowledge level specifications 2 tropos methodology overview tropos intended support five phases software development ffl early requirements concerned understanding problem studying existing organizational setting output phase organizational model includes relevant actors respective dependencies actors organizational set ting characterized goals iso lation would unable achieve goals achievable virtue reciprocal meansend knowledge dependencies 19 ffl late requirements systemtobe described within operational environment along relevant functions qualities description models system small number actors number social dependencies actors environment ffl architectural design systems global architecture defined terms subsystems interconnected data control flows frame work subsystems represented actors data control interconnections correspond actor de pendencies step specify actor capabilities agents types agents special kinds actors see phase ends specification system agents ffl detailed design agent system architecture defined detail terms internal external events plans beliefs agent communication protocols implementation actual implementation system carried jack consistently detailed design idea paying attention activities precede specification prescriptive requirements understanding intended system would meet organizational goals new first proposed requirements engineering literature see instance 7 18 particular adapt ideas eric yus model requirements engineering called offers actors goals actor dependencies primitive concepts 18 2 main motivation underlying earlier work develop richer conceptual framework modeling processes involve multiple participants humans computers goal systematic reengineering pro cesses one main advantages kind analysis one also capture also piece software developed turn allows refined analysis system dependencies particular much better uniform treatment systems functional requirements also nonfunctional requirements latter usually hard deal neither yus work far know previous work requirements analysis developed aop mind application ideas aop decision use mentalistic notions phases analysis important consequences writing agent oriented specifications programs one uses notions abstractions used describe behavior human agents processes involving conceptual gap system must users interacting must reduced minimum thus providing part extra flexibility needed cope complexity intrinsic applications mentioned introduction indeed software engineering methodologies specification languages developed order support oop essentially support phases architectural design downwards moment connection intentions different human software agents cannot explicitly specified using uml instance software engineer start use case analysis possi bly refined developing activity diagrams moves architectural design engineer static analysis using class diagrams dynamic analysis using instance sequence interaction diagrams target get detail level abstraction allowed actual classes methods attributes used implement system however applying approach related diagrams aop misses advantages coming fact aop one writes programs knowledge level forces programmer translate goals mentalistic notions software level notions instance classes attributes methods ofi applied various application areas including requirements engineering 17 business process reengineering 21 software modeling processes 20 ccultural infrastructure system usable spent services increase internet taxes well enjoy visit system eculture visitor eculture museum citizen internet use available available provide get cultural information dependee depender dependum goal softgoal actor goal dependency figure 1 actor diagram specifying stakeholders eculture project main goal dependencies class diagrams consequent negative effect former notions must reintroduced programming phase instance writing jack code programmer must program goals beliefs plans lost connection original mentalistic notions used early late requirements work auml 1 10 though relevant provides first mapping oop aop specifications example work suffering kind problem following sections present five tropos phases applied context eculture system example 3 early requirements early requirements analysis requirements engineer models analyzes intentions stakehold ers following tropos stakeholders intentions modeled goals form goaloriented analysis eventually lead functional nonfunctional requirements systemtobe early requirements assumed involve social actors depend goals achieved tasks performed resources furnished tropos includes actor diagrams describing network social dependency relationships among actors well rationale diagrams analyzing trying fulfill goals meansends analysis 3 primitives formalized using intentional concepts ai goal belief ability commitment actor diagram graph node represents actor link two actors indicates one actor depends reason order attain goal call depending actor depender actor depended upon dependee object around dependency centers called actor diagrams called strategic dependency mod els rationale diagrams called strategic rationale models internet use system build citizens increase services reasonable expenses taxes well provide educate ecultural provide interesting systems funds cultural system offer inexpensive infrastructure funding museums systems eculture museum services good internet infrastructure available good cultural services spent available eculture figure 2 rational diagram pat rectangular box added dependency models resource dependency dependum see eg figure 1 depending another actor dependum actor able achieve goals would otherwise unable achieve easily well time depender becomes vulnerable dependee fails deliver de pendum depender would adversely affected ability achieve goals eculture example start informally listing stakeholders ffl provincia autonoma di trento pat government agency funding project objectives include improving public information services increase tourism new information services also encouraging internet use within province ffl museums cultural information providers respective collections museums want government funds buildimprove cultural information ser vices willing interface systems eculture system ffl visitors want access cultural information visit trentino make visit interesting andor pleasant ffl trentino citizens want easily accessible infor mation sort stakeholders correspond actors actor dia gram notice citizens visitors correspond hu man agents case two stake holders museums pat correspond rather roles actor agent role position according fact actor well identified human software entity agent function role played agent collects set roles usually played single agent position figure 1 shows actors involved eculture project respective goals particular pat associated single relevant goal increase internet use visitor museum associated softgoals enjoy visit provide cultural services respectively softgoals distinguished goals dont formal definition amenable different qualita tive kind analysis see 5 detailed description softgoals citizen wants get cultural information depends pat fulfill softgoal taxes well spent high level goal motivates specific pats respon sibilities namely provide internet infrastructure deliver eculture system make usable early requirements analysis goes extending actor diagram incrementally adding specific actor dependencies come meansends analysis goal specify analysis using rationale diagrams figure 2 depicts fragment one diagram obtained exploding part diagram figure 1 perspective pat modeled diagram appears balloon within pats goals analyzed dependencies actors established example intended illustrate meansends analysis conducted throughout idea goals decomposed subgoals positivenegative contributions subgoals goals specified thus figure 2 goals increase internet use eculture system available well served goal build eculture system high level softgoal taxes well spent gets two positive contributions thought justifications selection particular dependencies final result phase set strategic dependencies among actors built incrementally performing meansends analysis goal goals analyzed later added specific goal instance example figure 2 pats goal build eculture system introduced last therefore subgoals motivated higher level goals fulfills 4 4 late requirements late requirement analysis systemtobe eculture system example described within operating environment along relevant functions qual ities system represented one actors number dependencies actors en vironment dependencies define functional nonfunctional requirements systemtobe figure 3 illustrates late requirements actor diagram eculture system actor introduced pat depends provide ecultural services one pats subgoals discovered meansend analysis depicted figure 2 softgoal usable eculture system citizen depends pat see figure 1 delegated pat eculture system eculture system expected fulfill pat softgoals extensible eculture system flexible rationale diagrams one also introduce tasks resources connect fulfillment goals system available flexible temporal eculture scalable available ecultural usable eculture provide provide eculture educational eculture system eculture user friendly system eculture info services technology provide services system use internet system usable system system eculture extensible ecultural services services ecultural logistic info cultural info portable make reservations virtual visit provide figure 3 fragment actor diagram including pat eculture system actors rationale diagram eculture system detailed within balloon eculture system use internet technology balloon figure 3 shows two pats dependums analyzed point view eculture system goal provide ecultural services decomposed decomposition four subgoals make servation provide info educational services virtual visit specified along subgoal hierarchy instance types information system provide logistical timetables visiting instructions museums cultural instance cultural content museums special cultural events rationale diagram includes also softgoal analysis usable eculture system softgoal two positive contributions user friendly eculture system available eculture system latter softgoal turns specifies following three basic nonfunctional require ments system portability scalability availability time starting analysis systemtobe actor decomposed subactors take responsibility fulfilling one goals system figure 4 shows resulting eculture system actor diagram eculture system depends info broker provide info educational broker provide educational services reservation broker make reserva tion virtual visit broker provide virtual interfacing provide system educational broker interface eculture educational system services broker info broker system manager system interface manager interface user manager make reservations virtual visits provide info interfacing user virtual visit reservation broker figure 4 system actor diagram subactors decomposition eculture system visit system manager provide interface furthermore subactor decomposed subactors responsible fulfillment one subgoals point analysis look actor diagram direct dependency citizen plays role system user eculture system words see former citizens goal get cultural information fulfilled current eculture system rational diagram goal depen dency see figure 5 provides sort usecase analysis 9 5 architectural design architectural design phase consists three steps 1 refining system actor diagram 2 identifying capabilities 3 assigning agents first step system actor diagram extended according design patterns 8 provide solutions heterogeneous agents communication nonfunctional quirements 5 figure 6 shows extended actor diagram respect info broker 6 user interface manager sources interface manager responsible interfacing system external actors citizen museum respectively second step consists capturing actor capabilities analysis tasks actors subactors carry order fulfill functional requirements goals capability set events plans beliefs necessary fulfillment actor goals figure 7 shows 5 step design patterns agent systems mapped actor diagrams 6 sake readability show actors needed take account nonfunctional require ments eg system extensibility user friendliness source query result citizen area search information info specification area get cultural eculture system information classify search synthesize geographical area results search keywords search area museum get info area query sources find info sources search time period figure 5 rationale diagram goal get cultural information hexagonal shapes model tasks task decomposition links model tasksubtask relationships goaltask links type meansends links example info broker actor analysis respect goal searching information topic area info broker decomposed three subactors area classifier results synthesizer info searcher area classifier responsible classification information provided user depends user interface manager goal interfacing users info searcher depends area classifier thematic area information user interested depends sources interface manager goal interfacing sources museum results synthesizer depends info searcher information concerning pending query query information museum query results manager citizen interface user sources interface manager broker info interfacing users sources interfacing system interfacing eculture eculture system interfacing museum figure extended actor diagram info broker interface manager sources citizen query results interfacing interfacing interfacing eculture system system area sources synthesizer broker specification area eculture information results info classifier area information query information area searcher info museum interface user manager interfacing users figure 7 actor diagram capability analysis info broker capabilities easily identified analyzing diagram figure 7 particular dependency relationship gives place one capabilities triggered external events table 1 lists capabilities associated extended actor diagram figure 7 listed respect systemtobe actors numbered order eliminate possible copies whereas actor name n capability area classifier 1 get area specification form classify area 3 provide area information 4 provide service description info searcher 5 get area information 6 find information source 7 compose query 8 query source 9 provide query information provide service description query information get query results 12 provide query results synthesize area query results provide service description sources interface 14 wrap information source manager provide service description user interface 15 get user specification manager user specification get query results present query results user provide service description table 1 actors capabilities agent capabilities query handler 1 3 4 5 7 8 9 10 11 12 classifier 2 4 searcher 6 4 synthesizer 13 4 wrapper 14 4 user interface agent 15 16 17 18 4 table 2 agent types capabilities last step architectural design consists defining set agent types assigning agent one different capabilities agent assignment table 2 reports agents assignment respect capabilities listed table 1 capabilities concern exclusively task search area assigned info broker course many capabilities agent types needed case consider goals tasks associated complete extended actor diagram general agents assignment unique depends designer number agents capabilities assigned choices driven analysis extended actor diagram way designer thinks system term agents activities done architectural design compared wooldridge et al propose within gaia methodology 16 instance actor diagram refinement compared role modeling gaia instead consider also nonfunctional require ments similarly capability analysis compared protocols modeling even gaia external events considered evaluate query results present empty results present query results eempty result set query results ee informsia uia query results figure 8 capability diagram using auml activity diagram ovals represent plans arcs internal external events 6 detailed design detailed design phase aims specifying agent capabilities interactions specification capabilities amounts modeling external internal events trigger plans beliefs involved agent reasoning practical approaches step often used 7 paper adapt subset auml diagrams proposed 1 particular 1 capability diagrams auml activity diagram allows model capability set correlated ca pabilities point view specific ac tor external events set starting state capability diagram activity nodes model plans transition arcs model events beliefs modeled ob jects instance figure 8 depicts capability diagram query results capability user interface agent 2 plan diagrams plan node capability diagram specified auml action diagrams 3 agent interaction diagrams auml sequence diagrams exploited auml sequence diagrams agents corresponds objects whose lifeline independent specific interaction modeled uml object created destroyed interaction communication acts agents correspond asynchronous message arcs shown sequence diagrams modeling agent interaction protocols proposed 10 straightforwardly applied example 7 instance dataeventplan diagram used jack developer ralph ronnquist personal communication 7 implementation using bdi ar bdi platform chosen implementation jack intelligent agents agentoriented development environment built top fully integrated java agents jack autonomous software components explicit goals desires achieve events handle agents programmed set plans order make capable achieving goals implementation activity follows step step natural way detailed design specification described section 6 fact notions introduced section direct correspondence following jacks constructs explained agent jacks agent construct used define behavior intelligent software agent includes capabilities agent types messages events responds plans uses achieve goals capability jacks capability construct include plans events beliefs capabilities agent assigned number capabilities furthermore given capability assigned different agents jacks capability provides way applying reuse concepts ffl belief currently tropos concept used implementation phase considering move earlier phases jacks database construct provides generic relational database database describes set beliefs agent ffl event internal external events specified detailed design map jacks event construct jack event describes triggering condition actions ffl plan plans contained capability specification resulting detailed design level map jacks plan construct jack plan sequence instructions agent follows try achieve goals handle designed events example definition userinterface agent jack code follows public agent userinterface extends agent capability getqueryresults capability provideuserspecification capability getuserspecification capability presentqueryresults handles event informqueryresults handles event resultsset capability presentqueryresults analyzed detail previous section see figure 8 defined follows public capability presentqueryresults extends capability handles external event informqueryresults posts event resultsset posts event emptyresultsset private database queryresults private database resultsmodel uses plan evaluatequeryresults uses plan presentemptyresults uses plan presentresults 8 conclusions paper proposed tropos new software engineering methodology allows us exploit advantages extra flexibility compared programming paradigms instance oop coming using aop two main intuitions underlying tropos pervasive use phases knowledge level specifi cations idea one start early phase early requirements specification allows us create continuum one starts set mentalistic notions eg beliefs goals plans always present early requirements progressively convert actual mentalistic notions implemented agent oriented software direct mapping early requirements actual implementation allows us develop software architectures well tuned problems solve therefore extra flexibility needed complex applications mentioned introduction several open points still remain important able use concepts beliefs events early possible tropos methodology able exploit adaptation reuse concepts activities development process well support iterative process able extend tropos process also important activities software engineering testing deployment maintenance 9 acknowledgments knowledge paolo busetta jack invaluable without paper would much harder write wed like thank also ralph ronnquist manuel kolp helpful comments 10 r agent uml formalism specifying multiagent interaction unified modeling language user guide jack intelligent agents components intelligent agents java developing agentoriented information systems enterprise goal architectural design patterns multiagent coordination agentbased software engineering tropos framework requirementsdriven software development knowledge level intelligent agents theory practice gaia methodology agentoriented analysis design modeling organizations information systems requirements engineering modeling strategic relationships process reengineering ar modeling strategic actor relationships business process reengineering understanding software process modeling using goals tr agentoriented programming goaldirected requirements acquisition understanding myampersandldquowhymyampersandrdquo software process modelling analysis design modelling strategic relationships process reengineering unified modeling language user guide agentbased software engineering gaia methodology agentoriented analysis design er ar modelling strategic actor relationships business process reengineering ctr jorge j gmezsanz juan pavn francisco garijo metamodels building multiagent systems proceedings 2002 acm symposium applied computing march 1114 2002 madrid spain ghassan beydoun cesar gonzalezperez graham low brian hendersonsellers synthesis generic mas metamodel acm sigsoft software engineering notes v30 n4 july 2005 haibin zhu mengchu zhou methodology first language second way teach objectoriented programming companion 18th annual acm sigplan conference objectoriented programming systems languages applications october 2630 2003 anaheim ca usa rubn fuentes jorge j gmezsanz juan pavn integrating agentoriented methodologies umlat proceedings fifth international joint conference autonomous agents multiagent systems may 0812 2006 hakodate japan haralambos mouratidis paolo giorgini gordon manson modelling secure multiagent systems proceedings second international joint conference autonomous agents multiagent systems july 1418 2003 melbourne australia fausto giunchiglia john mylopoulos anna perini tropos software development methodology processes models diagrams proceedings first international joint conference autonomous agents multiagent systems part 1 july 1519 2002 bologna italy franco zambonelli nicholas r jennings michael wooldridge developing multiagent systems gaia methodology acm transactions software engineering methodology tosem v12 n3 p317370 july anthony karageorgos simon thompson nikolay mehandjiev agentbased system design b2b electronic commerce international journal electronic commerce v7 n1 p5990 number 1fall 2002 liliana ardissono anna goy giovanna petrone marino segnan multiagent infrastructure developing personalized webbased systems acm transactions internet technology toit v5 n1 p4769 february 2005 anthony karageorgos nikolay mehandjiev simon thompson ramasd semiautomatic method designing agent organisations knowledge engineering review v17 n4 p331358 december 2002 greg brown betty h c cheng heather goldsby ji zhang goaloriented specification adaptation requirements engineering adaptive systems proceedings 2006 international workshop selfadaptation selfmanaging systems may 2122 2006 shanghai china anna perini angelo susi fausto giunchiglia coordination specification multiagent systems requirements architecture tropos methodology proceedings 14th international conference software engineering knowledge engineering july 1519 2002 ischia italy paolo bresciani anna perini paolo giorgini fausto giunchiglia john mylopoulos tropos agentoriented software development methodology autonomous agents multiagent systems v8 n3 p203236 may 2004 jaelson castro manuel kolp john mylopoulos towards requirementsdriven information systems engineering tropos project information systems v27 n6 p365389 september 2002 manuel kolp paolo giorgini john mylopoulos multiagent architectures organizational structures autonomous agents multiagent systems v13 n1 p325 july 2006