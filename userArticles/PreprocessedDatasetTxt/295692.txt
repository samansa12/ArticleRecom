design interactive online help desk alexandria digital library large software systems digital libraries electronic commerce applications customer support systems user interface system often complex difficult navigate necessary provide users interactive online support help users learn effectively use applications online help facilities include providing tutorials animated demonstrations synchronized activities users system supporting staff real time instruction guidance multimedia communication support staff chat voice shared whiteboards tools quick identification user problems paper investigate interactive online help support developed provided context working system alexandria digital library adl geospatiallyreferenced data developed online help system alexhelp alexhelp supports collaborative sessions user librarian support staff include activities map browsing region selection recorded demonstration sessions user primitive tools analyzing user sessions channels voice text based communications design alexhelp based user activity logs system lightweight software component easily integrated adl user interface client prototype alexhelp developed integrated adl client adl client alexhelp written java b introduction online customer service systems call centers customer care centers widely used eg home banking telephone registration online shopping airline ticket booking digital libraries etc however supported part nsf grants iri9411330 iri9700370 appear proc acm international joint conference work activities coordination collaboration wacc 99 feb 2225 san francisco ca 1999 systems lack sufficient capabilities interactive communication mechanisms necessary providing online customers sophisticated support help emergence world wide web provides new options user support help problem multimedia information images audiovideo animation easily presented addition traditional text hand rapid advances technol ogy software systems existing applications becoming complicated time new applications quickly developed applications include distance learning computerbased training electronic commerce applications believe good package online help facilities compensate deficiencies user interfaces also make complex services easier learn use core help facilities lies cooperating software systems modules enabling communication user service human agents communication may based paradigms specific software systems addition ascii voice channels example context digital library georeferenced information user information specialist help desk distant site able view interface session user see information specialist exactly similar situations also occur sessions seeking technical support software systems making online reservations orders etc paper present design implementation online interactive help system context digital library geospatially referenced information particular report experiences development integration online help desk system alex help alexandria digital library adl ffl adl user starts session initiating httpbased connection adl server one session adl client software relatively complex user interface allows users browse maps zoom inout construct queries searches manipulate results queries potential users adl necessarily much experience accessing computers dealing spatial information knowledge software systems may limited objective provide time online collaborative help facilities users adl system alexhelp system provides following functional ity user request establish connection help desk connection made user information specialist share common view users adl session information specialist able perform various actions adl client interface including mentioned actions happen simultaneously sides addition synchronized session support alexhelp also allows presentation prerecorded demonstration sessions user showing replaying user sessions help desk alexhelp designed using user activity logs ie session logs lightweight software component easily integrated layered top adl user interface client design different many collaborative systems developed scratch collaborative environment tools adl system already operational using tools like habanero would require rewriting much adl client code could significantly increase cost communication moreover advantage approach saves time repeating work already done pointed bm94 straightforward approach constructing collaborative environments combines different communication mechanisms together necessarily result good collaborative environment bergmann mudge found experiment successful use system requires much logistics support ever find certain class collaborative applications careful design makes possible significantly reduce costs automating repetitive tasks work alexhelp focused adl client generally speaking alexhelp quite different typical groupware gru94b collaborative model alexhelp supports much simpler since collaboration occurs users system help desk collaborative session one participant designated master others slaves master controls slaves views client interface essentially session either user help desk master master token passed among participants transferring must control help desk collaborative actions supported session complex nature connection master slaves almost stateless clearly application context adl also representative various online assistance services cscw research community several typologies proposed terms grudins typology gru94a cscw models categorized two dimensions space time follows different different predictable unpredictable meeting work shifts team rooms facilitation l different tele video electronic collaborative predictable desktop mail writing conferencing different interactive computer workflow unpredictable multicast boards seminar alexhelp system supports combination mod els space dimension collaboration occur different locations either predictable unpredictable time dimension time different predictable time work also related synchronized web browsers wr94 flf94 however alexhelp based integrated adl client software rather relying web browsers design issues implementation techniques thus quite different paper organized follows section 2 presents motivation alexhelp section 3 outlines overall design system architecture section 4 focuses session log file key component used alexhelp section 5 briefly summarizes discusses implementation sues conclusions future work included section 6 section first give motivating example context alexandria digital library system discuss general concept online interactive help systems help wizards applications alexandria digital library adl ffl 95 digital library geospatially referenced data including maps images text adls graphical user interface client application implemented java user runs locally users workstation connecting adl via ternet adl client includes following components see figure 1 1 map browser window window 1 figure 1 map browser window allows users interactively pan zoom twodimensional map globe locate areas interest addition user select one areas map may used constrain queries map also used display spatial extent items retrieved query 2 search window window 2 figure 1 search window allows users set query parameters parameters include choosing collections search location ie coordinates map browser type information maps aerial photographs catalog hydrologic features gazetteer date options 3 workspace window window 3 figure 1 workspace window displays allows manipulation query results query history also maintained allowing adl client returned state prior query scan display metadata browser bottom part workspace window displays brief object metadata brief metadata includes title format access information spatialtemporal references small scale version original image available window full metadata access information requested 4 help window window 4 figure 1 adl clients help window typical example todays software help systems shows depending component graphical user interface se lected help topics specific component adl wide range potential users many may experience interacting complex software sys tems help window assistance tutorial walkthrough also made available adl homepage 1 clearly something required however since still difficult inexperienced users figure 1 adl clientuser interface know use system particular purposes consider following example suppose student majoring political science working research paper civil population santa barbara area one friends suggests get useful data adl follows friends suggestion launches adl client unfortunately quickly finds frustrated tries help system still confused unable learn effectively utilize adl needs quick answer university library could ask one librarians help find information shes looking alexhelps extension adl help system choices blindly searching answers static help system following possible alternatives could try online tutorial demo sessions could download prerecorded sessions replay demo session player discussed section 4 sessions could demonstrate basic operation adl client online tutorial doesnt help could try help wizard would guided process answers questions based nature prob lem help wizard would direct several demo sessions would hopefully help solve problem first two methods dont solve problem could connect help desk adl interactive session help desk could communicate textbased chat phone online audio channels information specialist guides process constructing query evaluating information returned query would actually see adl client exactly would need help desk controls client talk clearly help desk services help student example conceivable different kinds users may prefer service others provide help desk services example following capabilities need developed ffl collaborative sessions collaborative session mean adl clients sides user help desk con nected one client control session sends actions client mirrors graphical user interface clients switch roles session allowing user help desk participate rich exchange information ffl session replay demo sessions support staff always immediately available instead forcing users wait contact information specialist alexhelp uses concept demo sessions demo sessions examples using adl client may replayed client showing user successful ways use client support concept developed session player gives user vcrstyle control session user may pause rewind start stop sessions different sessions show user perform tasks varying complexity com plex useful able pause session replay subtle difficult portions addition session player allows users record sessions may sent support staff offline analysis detection usage patterns ffl multimedia communication interaction user help desk restricted manipulating observing adl client seems reasonable assume network connection type established help desks users adl clients could utilized synchronizing clients collaborative help systems provide additional methods com textbased chat voice even video could used allow participants communicate shared whiteboards fit paradigm well case whiteboard application reason participants connected explain use application addition capabilities also useful context provide ffl call waiting forwarding order serve users fairly efficiently design calls way queue help requests one user wants participate collaborative session call waiting means user requests connect help desk collaborative session help desk immediately available user notified period waiting information expected wait time reasons current delay might made available user another method support interactive help call warding current information specialist proficient particular area user needs help users connection may task switched another information specialist proper expertise ffl multicast collaborative sessions multicast support one slave mode client synchronized single master mode client desirable feature support scheduled instructional demonstration sessions distance learning based analysis requirements online assistance adl design adl client decided interactive online help facilities alexhelp designed independent component easily integrated adl client even though alexhelp system relatively simple include everything listed end section 2 succeeds good example adding collaborative functions top singleuser version software package feedback development user evaluation groups within adl project shows system provides feasible efficient way support interactive online help adl section discuss main issues developing alexhelp system including functionality design architecture 31 functionality prototype alexhelp provides following facilities ffl collaborative session establishment operation simple dialog window used initiate connection two adl clients connection made alexhelp runs one two modes slave receive mode mode adl client uses alexhelp listen incoming messages client message remote event received remote graphical user interface event replayed duplicated slave client user slave client unable change clients state master send mode mode alexhelp system sends local graphical user interface events slave adl client replayed state master adl client thus reflected slave adl client particular adl client map browser window able replay operations zoom zoom pan etc ffl session replay also developed mechanism replaying recorded sessions discuss next section every adl client records operations log file alex help utilizes logs collaborative sessions replay 32 design consideration appropriate collaborative model alexhelp system driven part goal quickly developing prototype could used demonstrate possibilities extending developing online help sys tems access adl clients code base also constraint could change basic functionality client words client perform respects exactly thus faced adding multiuser ability existing singleuser application originally designed multiuser access mind task grudin recommends reasonable way approach building groupware gru94b able fundamentally alter client prevented us using frameworks toolkits building collaborative environments like ncsas habanero cgj suns jsdt java shared data toolkit jsdt using framework jsdt would entail essence rebuilding application hand including adl client application comprises collaborative environment like habanero would require user run adl client component application within new environment making ability participate collaborative help session dependent new environment deemed unacceptable two reasons first adl client meant standalone application library users interface adl second adl client fairly small footprint terms memory network resources including larger framework would impose additional resource requirements specification calls model collaboration best described turn taking token passing semantically one user help desk control clients given time period collaboration one clients slave receive mode master send mode considering simple model desired features within context collaborative help system adl need use complex concurrency control shared object models gm94 mr91 user interface client say currently receive mode simply locked may receive interpret events messages client say b ie remote client user unable change client state clients trade roles client takes charge events generated sent duplicated client b realized early adl client log facilities already place rich enough duplicate actions one client another client separated space andor time simplified design clienttoclient commu nication also makes easy generalize clientto client model onetomany multicast model rather capturing packaging system user interface events transmission potentially complex endeavor even syntactically sweet language like java java log entries simply sent remote client generated use session logs alexhelp discussed detail section 4 33 architecture initially intended help desk adl user would run program respective work stations thought symmetry participants using application ie one set code good design project progressed decided help desk responsible controlling help ses sion necessary features control built help desks client help session information specialist may turn control remote user ie help desks client becomes slave information specialist ability recover control session desired however alexhelp rewritten along next version adl client development single application continued help desks session management features implemented current prototype alexhelp consists three layers adl client layer event handler layer communication layer fig ure 2 three layers described 331 adl client adl client primary interface adl users library first incarnation adl client java applet suitable running within javacapable browser netscapes navigator current version standalone application built entirely java subsequent development intended produce standalone applet versions mentioned section 32 liberty fundamentally change adl clients design function ality chose therefore layer additional functionality required top adl client see figure 2 note prototype adl client communicates directly event handler layer communication figure 2 reflects design rather current implementation iterative software development model would choose next iteration post prototype restrict adl client interacting single layer event handler layer order keep module dependencies clean 332 alexhelp event handler layer event handler layered directly top adl client primary function receive incoming remote events communication layer replay reproduce local adl client noted section 32 existing logging mechanism adl client rich enough content allow us duplicate replay remote events local adl client allowed us simple design event handler layer remote event received form log entry string ascii characters parsed determine event triggered locally adl client event handler directs local adl client perform event example remote event pan horizontal vertical movement remote adl clients map browser window event handler notifies local adl client providing direction pan north south east west also distance design handling remote events easily generalized distance learning multicasting scenario single information specialist instructor runs adl client master mode clients events broadcast group adl client users whose clients operating slave mode adl client slave mode receives handles remote events manner described 333 alexhelp communication layer discussion collaborative model chosen alexhelp system mentioned jsdt example framework building collaborative applications provides abstractions typical components systems channel client server opportunity building alexhelp also adl client scratch likely wed chosen framework ease typically troublesome task properly designing building system distributed communication central operation however decided given time limited flexibility terms altering adl client would easier faster use simple tcpip sockets implement clienttoclient communication choice made easy javas inclusion networking abstractions part core libraries java javanet library provides objects encapsulate network connections either connectionoriented connectionless also provides model sending message multiple recipients useful distancelearning multicast model current implementation alexhelp system provides clienttoclient connections using connectionoriented java sockets turntaking slavemaster model next version alexhelp include distance learning mode well alexhelps architecture structured layers would relatively easy replace one layers alternative implementation hopefully would easy point replacing one layer would require modifications adjacent layers communication layer meant exception addition foresee utilizing communication layer apply additional communication mechanisms textbased chat voice video etc adl client event handler communication layer communication layer adl client event handler adl client layer communication layer adl server event layer handler figure 2 architecture alexhelp section discuss central technique using session logs developing synchronized sessions alexhelp also illustrate session logs facilitate design session replay give general discussion applying technique contexts several early design meetings included personnel adl development team among many invaluable things learned fact built simple user activity log system client part event handling adl client certain user systemgenerated events logged ascii text file may analyzed fact original intent adl development team use activity logs analysis user activity usage pattern discovery saw logs augmented include information event could use log entries implement coordination two physically separate adl clients logs could viewed persistence mechanism giving us method session replay felt persistence entire users session would crucial integrating alexhelp adls existing help system experience developing alexhelp using session logs way forward local events remote client persistence mechanism showed us certain class applications log files instrumental rapidly simply augmenting existing help systems building new ones also adding multiuser capability singleuser applications section 41 discuss format adl clients log files explain example log entries section 42 discuss use logs controlling collaborative sessions alexhelp section 43 examines log files used implement vcrstyle control demo sessions log replay section 44 discusses general application logbased technique 41 adl client log file adl client log consists event summaries makes single log entry order entries appear log maps loosely order occur may variation two logs recording identical sessions due timing differences tracked effects multithreading ie system event may occur usergenerated event user event logged first due scheduling experience unexpected behavior related scheduling discrepancies addition information recording event see examples log entry also includes information identifying particular session client generated event log entry information interest information allows event reconstructed log entry actually makes little entry many cases less one third log entry interest brevity information session client iden tification removed log entries used discussion following examples adl clients log en tries comments related using logs alexhelp ffl client action map mode zoom log entry among simplest types generated user clicks mouse button labeled zoom map browser window similar log entries made user clicks buttons labeled zoom select erase ffl client action new extent 2053 4056 2529 4944 log entry occurs user clicks mouse map map browser window selected mode either zoom zoom new extent identifies map resizing event parameters correspond lower left upper right corners rectangular geographic region defines new extent map map browser window first two numbers latitude longitude lower left corner second two latitude longitude upper right corner ffl client action query regions modified log entry occurs selected mode select user clicks drags mouse map map browser window action creates selection box defines rectangular geographic region previous log entry parameters latitudes longitudes lower left upper right corners geospatial region may used constrain queries selection boxes may overlap ffl client action query regions modified log entry selection box drawn case however several selection boxes already existed log entries modifications query regions selection boxes like log entry simply enumerate selection boxes whether change adding removing selection box log entry shows five currently existing selection boxes ffl client action map button pressed west log entry shows pan event horizontally vertically repositioning map map browser win dow 42 logs collaborativesynchronized sessions adl clients log facility central design implementation synchronized help sessions specification calls ability capture distribute reproduce graphical user interface events capturing events occur troublesome best worst im possible although java aids programmer type endeavor see section 32 clear us light fact session log mechanism already place utilizing would permit implementation proceed much faster dealing intercepting events graphical user interface level augmenting adl client order send log entries remote client simple matter hooking module responsible writing log entries file acting log entries received remote client entails using adl clients public application programming interface api set internal state triggers corresponding changes graphical user interface example consider two adl clients b connected collaborative session client operated alexandria help desk b operated user library currently master send mode b slave receive mode information specialist draws selection box client map browser log module client appends log file entry corresponding drawing selection box since master mode log entry also handed alexhelps event handler layer log entry forwarded alexhelps communication layer sent network connection client b client b log entry received communication layer immediately hands event handler layer event handler parses log entry determine interest case finds log entry consists parameters making list selection boxes event handler uses adl client bs public api set collection selection boxes client b redraws display map browser window reflect change events received adl client slave receive mode graphical user interface gives user kind visual cues alert something changed state selection boxmap zoom mode buttons changed example button selected flashes red white several times given priori knowledge possible forms log entries take task parsing log entry deciding terms reproducing event rather simple consequently event handler layer possibly complex module alexhelp essentially parser rather restricted language see example log entries section 41 43 vcrstyle control log replay demo sessions alexhelps collaborative sessions adl clients session logs important design development alexhelps demo sessions giving user ability play replay series graphical user interface events user operating vcr powerful learning tool goes beyond help systems textbased rely short animations using alexhelps model demo sessions conjunction detailed explanations easily supplied along log files text audio files help systems developed show usage complex software systems way users would otherwise experience using system perhaps trialanderror fashion demo sessions alexhelp use log files way client b section 42 uses incoming log entries adl client playing demo session uses alexhelps event handler layer read log file parsing log entry carrying event described entry alexhelp uses additional window graphical user interface give user control replay user may set rate playback start pause playback singlestep session ie play single event pause rewind single event rewind start session 44 use utility log files envision adl well complex software systems help systems utilize log files concert help wizard help wizard would present user series questions help focus user towards one several log files show examples sessions closely resemble user need achieve goals application stark contrast many help systems current applications seem consist mainly duplicating functional descriptions user interface component help files help systems built session logs viewed extension support staff even support staff end users operate different time zones making synchronized activities difficult schedule custom session logs created forwarded user lieu online meeting example one recommendations application alexhelp adl maintain page alexandria world wide web site dedicated listing demo sessions users may download demo sessions showing queries similar users hope carry thus learn use adl interface example sessions users turn record session log support staff analysis better summary problem using application complete reproduction users activity 5 implementation rapid prototype section briefly discuss issues related implementation current prototype 51 module architecture relationship alexhelp modules original adl system shown figure 3 implementation details extension modules discussed following sections interest figure 3 various working modes extended adl client 1 standalone mode sole working mode supported original adl system native user interface ui events generated local windowing environment sent user event handler get recorded locally event logging module 2 master mode client master mode native ui events still processed user event handler however also sent remote client via network interface 3 slave mode client slave mode user interface respond local ui events remote events instead remote events go event parser ui highlighting module presents visual cues user remote events occurring 4 vcr mode replaying session logs retrieved network locally event parser passes event ui highlighting module passes events user event handler performing necessary highlighting 52 network interface network sublayer encapsulated object responsible maintaining tcp link state information related connection reason choosing opposed udp reliable link guarantees delivery synchronization messages desired reliable link greatly simplifies mode switching proto col current prototype added mode switching control help desks adl client since decided keep one code base implemented information specialist control mode switches reliable connection allows us use simple handshaking protocol ensure state consistency event parser kernel session player event parser breaks session logs sequence event records retrieves type parameter event finite number event types shown section 41 type format events simple regular language makes manual coding event parser decided use much simpler using lexical analyzer generator lex 53 session player multithreaded session player performs well however careful attention must paid atomicity replaying remote events aborting event middle result inconsistent state events interested ie capture relay adl client thats slave mode finish finite brief amount time simply use protocol ensures completion current event 54 user interface receiver event notification user interface events obvious generated user found replaying events received remote master client major changes obvious things zooming map browser window minor changes resulting selecting button easily missed user ideally every user interface event could duplicated tracking movement mouse way easier follow subtle changes user interface state possible simulate user interface events level granularity requires formidable amount user interface resources addition time required implementing scheme available us developing prototype instead added fairly simple layer user event handler event parser depending user interface component question gives user obvious visual clues example changing mode select erase map browser window select button changes highlighting default color nonselected components erase button flashes red white several times finally settling default color selected components lightweight modular approach makes easy replace extend event notification system synchronized web browser mentioned section 2 current adl client also uses world wide web browser display images results figure 3 relationship extension modules original system queries separate project implemented primitive synchronization two world wide web browsers using javascript java functionality similar much simpler wr94 flf94 6 conclusions future work experience design development alexhelp shows adding collaborative functionality existing system independent module viable fast approach approach summarized following steps 1 examine existing system based analysis carefully design extension system design work includes limited extension architecture function specification 2 identify one several likely hook points original system extension case one hook points session logging augmented logging facilities enable distribution user interface events 3 perform detailed design work including communication interface state transition protocols user events production etc 4 implement link new module existing system mentioned previously done throwaway prototype promising features left due time constraints include design good help wizard requires much analysis problems users may encounter might interesting add logic help wizard allowed learn users requests ffl call forwarding call forwarding trivial feature since tcpip sockets dont allow migration connection information system system transparent call forwarding meaning user aware connection broken reestablished involves another layer upon tcpip protocol ffl wait time estimation accurate estimation expected waiting time necessary practical system however finding suitable model estimation could interesting research area one model would involve using prioritybased scheduling incoming help call requests many factors must considered determining priority user class premium user common user etc accumulated wait time difficulty urgency problem reasonable measures es tablished etc scheduling fashion similar process scheduling operating system multicast support multicast support become important user group grows larger incorporation multicast capability involves modification collaboration model mode control protocol ffl client side action analysis users session logs reflect actions theyve performed data valuable analysis digital library used data mining may added ease task analyzing potentially large volume data currently adl accessed small testing com however security issues become important service open public ffl multimedia support multimedia support difficult plug several separate channels within communication layer however since users access library via different links ranging high speed network connections low speed modem connections users able control bandwidth switching multimedia features connection accommodate acknowledgments authors thank vinod anupam stimulating discussions lead idea online help studied paper linda hill mary larsgaard adl implementation team particular nathan freitas kevin lovette comments help specification implementation alexhelp linda hill maryanna rae comments earlier version paper r automated assistance telemeeting lifecycle alexandria digital library rapid prototype metadata schema extending www synchronous collaboration real time groupware distributed system concurrency control effect interface eight challenges developers jdk 11 java shared data toolkit impact cscw database technology synchronous collaboration tool worldwide web tr groupware social dynamics computersupported cooperative work real time groupware distributed system automated assistance telemeeting lifecycle java objectsharing habanero alexandria digital library ctr marcos andr gonalves edward fox layne watson neill kipp streams structures spaces scenarios societies 5s formal model digital libraries acm transactions information systems tois v22 n2 p270312 april 2004