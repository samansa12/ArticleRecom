breadthfirst rollback spatially explicit simulations efficiency parallel discrete event simulations use optimistic protocol strongly dependent overhead incurred rollbacks paper introduces novel approach rollback processing limits number events rolled back result straggler antimessage method called breadthfirst rollback bfr suitable spatially explicit problems space discretized distributed among processes simulation objects move freely space bfr uses incremental state saving allowing recovery causal relationships events rollback relationships used determine events need rolled back results demonstrate almost linear speedupa dramatic improvement traditional approach rollback processing b introduction one major challenges parallel discrete event simulation pdes achieve good perfor mance goal difficult attain nature discrete event simulation organizes events priority queue based timestamp events processes order porting simulation parallel platform priority queue distributed among logical processes lps correspond physical processes mod eled lps interact sending event messages costly maintain causality events two basic protocols developed ensure causality constraints satisfied 9 conservative 5 optimistic time warp tw 11 best known optimistic protocol causality errors allowed occur error detected erroneous computation rolled back research described paper utilizes optimistic protocol focuses optimizing rollback processing method rollback processing present applicable simulations consist space objects moving freely space discretized multidimensional lattice divided among lps make use incremental state saving techniques 18 detect dependencies events typical implementations rollback setting used previous implementation 7 roll back entire area assigned lp paper present novel approach termed breadthfirst rollback bfr rollback contained area directly affected straggler event message timestamp smaller current simulation time antimessage cancellation event also present improved simulation speedup performance resulting use approach application motivated work lyme disease simulation twodimensional space discretized twodimensional lattice important characteristics simulation mobile objects moving freely space mice stationary objects present lattice nodes ticks two main groups events local node tick bites mouse deaths etc ii nonlocal mouse moving one node anothermove event simulation currently runs ibm sp2 show results 16 processors model designed object oriented fashion implemented c communications processes use mpi 10 message passing library related work two interrelated issues arisen optimizing optimistic protocols pdes one need reduce overhead rollbacks limit administrative overhead partitioning problem many small lps happens example digital logic simulations address issues clustering lps often used lazy reevaluation 9 used determine straggler antimessage effect state simulation processing straggler canceling event state simulation remains need reexecute events time rollback current time problem approach hard compare state vectors order determine state changed also applicable protocols using incremental state saving local time warp ltw 15 approach combines two simulation protocols using optimistic protocol lps belonging cluster maintaining conservative protocol clusters ltw minimizes impact rollback lps given cluster clustered time warp ctw 1 2 takes opposite view uses conservative synchronization within clusters optimistic protocol reason given choice since lps cluster share memory space tight synchronization performed efficiently two algorithms rollback presented clustered lo cal first case rollback reaches cluster lps cluster rolled back way memory usage efficient events present input queues scheduled time rollback removed local algorithm affected lps rolled back restricting rollback speeds computation increases size memory needed entire input queues kept multicluster simulator 16 digital circuits modeled takes bit different look clustering first cluster composed set lps rather consists one lp composed set logical gates lps clusters assigned simulation process case spatially explicit problems issue partitioning space lps also importance discretizing space results multidimensional lattice following question arises one lp assigned lattice node results high simulation overhead lattice nodes clustered resulting clusters assigned lps first implementation lyme disease used latter approach assigned spatially close nodes single lp tw used lps similar ctw except implementation multiple lps within cluster simulate space efficiently unfortunately approach perform well hoped especially problem size grew larger rollback occurred cluster entire cluster roll back improve performance nodes lattice belonging lp cluster allowed progress independently simulation time however nodes cluster supervision one lp rollback occurs lpcluster affected lattice nodes rolled back thanks breadthfirst rollback strategy explained section 3 approach classified intercluster intracluster time warp tw main innovation bfr future information global information past distributed among nodes spatial lattice future information centralized facilitate scheduling events past information distributed limit effects rollback one could say point view future treat partition single lp whereas point view past treat partition set lps one lp per lattice node performance new method yields speedup close linear breadthfirst rollback approach breadthfirst rollback designed spatially ex plicit optimistic pdes space discretized divided among lps lp responsible set interconnected lattice nodes speed simulation dictated efficiency two steps forward event rollback processing forward computation facilitated event queue global executing lp choice next event quick impact rollback reduced depth rollback kept min imum rollback reach past necessary number events affected given time minimized latter rely property spatially explicit prob lems two events located sufficiently far apart space one cannot affect certain values current logical virtual time lvt lp time rollback one events needs rolled back causality error occurs events classified local nonlocal local event affects state one lattice node nonlocal event example move event moves object one location next affects least two nodes lattice local events easy roll back assume local event e location original impact point rollback potential 1st2nd 3rd waves rollback location x figure 1 waves rollback x time triggers event e 1 time 1 location x definition local event rollback occurs impacts event e state location x restored time prior time restoring state e 1 automatically undone however triggering event e nonlocal triggers event e 1 location restoring state location x sufficientit also necessary restore state location x 1 prior occurrence event e 1 regardless whether event local nonlocal state information restored nodeby node basis show impact rollback lp consider straggler antimessage arriving location x marked darkest shade figure 1 rollback proceed follows events x rolled back time r time straggler antimessage since incremental state saving used events undone decreasing time order enable recovery state information rollback involves undoing events happened x event e processed node examined determine e caused another event lets call e 1 occur different location x 1 6 x nonlocal event case location x 1 rolled back time prior occurrence e 1 e undone breathfirst wave gave name new approach simulation objects move one lattice node neighboring one rollback spread one site neighbors time rollback new site must strictly greater one site x nonzero delay causallydependent events gen eral breadth rollback bounded speed simulated objects move around space figure shows potential waves rollback initial impact point three layers processing practice size affected area usually smaller shaded area figure 1 events one site likely affect neighboring nodes obviously event location x triggered events neighboring lp antimessages sent interesting note location belonging given lp different logical time fact necessarily process events given lp increasingtimestamp order two events independent event higher timestamp processed ahead event lower timestamp similar type processing mentioned briefly 17 coop conservativeoptimistic processing justification requirement processing events timestamp order necessary provably correct simulations required events simulation object processed correct time order due type processing process event forward execution check logical time node event scheduled logical time greater time event node roll back 4 comparison traditional approach demonstrate improvements performance present model used initial simula tion use bfr method space previously mentioned discretized twodimensional lattice similar discretization used example personal communication services 4 space discretized representing network hexagonal square cells simula tions cell modeled lp research developed simulation system spatially explicit problems particular application describe paper simulation spread lyme disease lyme disease simulation would prohibitively expensive assign one lp lattice node cluster lattice nodes single lp currently space divided stripwise among available processors course spatial decompositions used achieve better performance space also divided lps available processors 8 lps simulation called space man agers responsible events happen given region space space speedup processors figure 2 speedup small data set 2400 nodes manager determines object moves local space another partition object future events sent appropriate space manager previously mentioned optimistic approach used allow concurrent processing events happening time different locations state information large use incremental state saving information necessary rollback event processed state information changes placed local data structure event placed processed event list events move object one lp another also placed message list pointers events actually placed lists resulting duplication costly speeds sending antimessages object moves another lp sending lp saves object corresponding events ghost list able restore information upon rollback rollback occurs messages message list removed corresponding antimessages sent use aggressive cancellation events processed event list removed undone undoing event involved sending object another process entails restoring objects ghost list restoring future events object event queue events parts state changed events restored fossil collection obsolete information removed discarded three lists processed event list message list ghost list initial results obtained smallsize simulation encouraging figure 2 however speedup number processors figure 3 speedup large data set 32000 run time seconds number processors run time multiple logical processes figure 4 running time large data set multiple lps per processor1525352 4 speedup number processors figure 5 speedup large data set 16lps impressive larger simulations figure 3 performance degradation caused large space allocation individual processes resulting increased problem size rollback occurs entire space allocated lp rolled back minimize impact rollback divided space lps keeping number processors figure 4 shows runtime improvement achieved approach given problem size ultimate number lps ure 5 best efficiency achieved 8 processors 5 challenges new approach order implement bfr changes made simulation engine also model major change made move event question arose object moving location x location object placed processed placed location x location rolled back would way finding event affected location placed location location x rolled back similar difficulty arises placing move event processed lists also good solution one case object moving location case moving location dilemma motivated us split move event two moveout movein events hence object moves location x location moveout placed processed event list x movein location x 1 exception location belongs another lp case movein placed processed event list location x placed top corresponding moveout event indicate message sent upon rollback movein another lp en countered antimessage sent result treatment antimessages coupled breadthfirst processing rollbacks gives us effect lazy cancellation 12 antimessage sent together location x original message ad dressed avoid searching lattice nodes information since movein event indicates message sent message list necessary another affected structure ghost list original ap proach objects events placed list order objects left partition time order preserved objects placed list timestamp order nodes lattice different times nonordered aspect ghost list poses problems fossil collection list cannot merely truncated remove obsolete objects solution distribute list among nodes useful load balancing described final section ever ghost list relatively small compared processed event list might necessary distribute list load balancing performed sufficient maintain order list based virtual time object removed simulation additionally event triggering information must preserved original implementation event created identity event caused saved one tags trigger new event event undone dependent future events removed trigger tags event queue bfr possible future event already processed assigned location rolled back yet prohibitively expensive traverse future event list processed event list neighborhood search events whose triggers match given event tag solution create dependency pointers trigger event newly created events way dependent event easily accessed location resides rolled back pointer tacking previously implemented shared memory 9 decide whether event canceled approach also need know dependent event processed order able quickly locate either event queue processed event list one change required random number generation original simulation single random number stream used lp numbers used example calculating time occurrence new events since sequence events executed single lp differ run run random number sequence yield two different results obviously result repeatability important chose distribute random number sequence among nodes lattice initially single random number sequence used seed sequences node node generates new sequence 6 examples demonstrate behavior bfr algorithm lets consider example figure 6 figure shows processed lists three different lattice nodes 0001 02 event mo moveout mi mi could event mo moveout mi movein event causality relation recent past mi mo mo mi relation past figure view processed lists three nodes lattice event mi movein event x local event rollback location 01 time 0 following happen first mi 3 undone placed event queue done x 2 mo 2 considered dependence mi 4 detected rollback location 02 time 2 performed result x 3 undone mi 4 undone placed event queue next mo 2 undone causes mi 4 removed event queue mo 1 exam ined 00 rolled back time 1 mi 2 undone placed event queue mo 1 undone mi 1 removed event queue rollback occurred location 00 time three recent events location 00 undone placed event queue location affected rollback possible locations affected simulation progresses forward exam ple event mo z scheduled time 2 00 triggered event mi z 01 time 3 location 01 would roll back time 3 interesting aside location xy simulation time next event future list scheduled time 1 location cessed event comes another process necessarily incur rollback event occur location xy rollback happen however destined location localized rollback occur result comparing timestamp incoming event uninfected larval tick infected nymphal tick unifected mouse mouse infection tick bite infection tick bite infected figure 7 cycle lyme disease local virtual time enough determine rollback necessary 7 application description present results obtained bfr important sketch applicationthe simulation lyme disease disease prevalent northeastern united states 3 13 people acquire disease coming contact tick infected spirochete may transfer humans blood causing infection since ticks practically immobile spread disease driven ticks mobile hosts mice deer even though visible cases lyme disease involve humans main infection cycle consists ticks mice fig 7 infected tick bites mouse animal becomes infected disease also transmitted infected mouse uninfected feeding tick seasonal cycle disease duration simulation 180 days starting late spring6 time active ticks mice mice time looking nesting sites may carry ticks considerable distance 14 mice modeled individuals ticks sheer number many 1200 larvae400m 2 14 treated background space discretized nodes size 20x20m 2 represent size home range mouse node may contain number ticks various stages development various infection status mice move around space search empty nesting sites initiation search described disperse event moves move event mice die kill event cannot find nesting site natural causes old age attacks run time sec number processors comparison run times approaches breadthfirst old approach figure 8 results comparison runs bfr traditional approach predators disease mice bitten ticks tick bite ticks drop tick drop list events move event nonlocal figure 8 shows performance bfr illustrates almost linear speedup running time bfr considerably shorter traditional approach looking new algorithm observe several benefits important benefit rollback occurs need roll back events belonging given lp necessary events undone traditional ap proach number events needed rolled back ultimately proportional number lattice nodes assigned given lp rollback occurred events happened space undone hand rollback occurs bfr version number events affected rollback proportional length edges space interface lps case space divided strips number events affected given rollback proportional length two communicating edges fore size space assigned given lp increases number lps given problem size decreases number events affected rollback case bfr remains roughly con stant traditional approach number increases proportionally increased length noncommunicating edges consequently observe number events rolled back using bfr order magnitude smaller traditional speedup number processors comparison speedup balanced unbalanced computations balanced load uneven load figure 9 speedup balanced unbalanced computations also get fewer antimessages sent result automatic lazy cancellation general one lp per processor eliminates onprocessor communication delays course drawbacks new method fossil collection much expensive lists distributed therefore done global virtual time increased certain amount last fossil collection harder maintain dependency pointers triggers event un done pointers reset pointers maintained events created deleted undone whereas triggers set must code deal multiple dependents aggressive cancellation seen results seem adverse impact performance 9 conclusions future work described new algorithm rollback processing spatially explicit problems algorithm based optimistic protocol relies space partitioned multidimensional lattice rollbacks minimized examining processed event list lattice node roll back search causal dependencies events span lattice nodes rollback impacts minimum number sites making simulation efficient result almost linear speedup achieved obviously performance attainable thanks large amount parallelism existing application address issue load distribution simulations load per lp uneven example odd lps load even ones performance degrades shown figure 9 another advantage bfr lends well load balancing since local node level history tracking facilitates load balanc ing overloaded lp shed layers space order balance load nothing special needs happen receiving side messages sent space arrived simply discarded sender space reconstructed ghost list receiver assume load exchanged neighboring pro cesses sending side however priority queue filtered order extract future events area sent new process order decide need migrate load event queue scanned determine event density since large number events queue given time quantity might prove good measure load density high process space sent neighboring processes acknowledgments work supported national science foundation grants bir9320264 ccr 9527151 content paper necessarily reflect position policy us governmentno official endorsement inferred implied r dynamic load balancing clustered time warp logic sim ulations time warp logic simulation biological social phenomenon lyme disease case study simulating pcs networks using time warp distributed simu lation case study design verification distributed programs parallel discrete event simulation lyme disease continuously monitored global virtual time parallel discrete event simulation simulating lyme disease using parallel discrete event simulation parallel discrete event simula tion anthony skjel lum virtual time study time warp rollback mechanisms epidemiology lyme disease united states 19871998 temporal spatial dynamics ixodes scapu laris acari ixodidae rural landscape local time warp approach parallel simulation dynamic load balancing multicluster simulation network workstations speedes unified approach parallel simulation incremental state saving speedes using c tr ctr jing lei zhang carl tropper dependence list time warp proceedings fifteenth workshop parallel distributed simulation p3545 may 1518 2001 lake arrowhead california united states malolan chetlur philip wilsey causality representation cancellation mechanism time warp simulations proceedings fifteenth workshop parallel distributed simulation p165172 may 1518 2001 lake arrowhead california united states ewa deelman boleslaw k szymanski dynamic load balancing parallel discrete event simulation spatially explicit problems acm sigsim simulation digest v28 n1 p4653 july 1998 rao philip wilsey accelerating spatially explicit simulations spread lyme disease proceedings 38th annual symposium simulation p251258 april 0406 2005 boleslaw k szymanski gilbert chen simulation using software agents linking spatially explicit parallel continuous discrete models proceedings 32nd conference winter simulation december 1013 2000 orlando florida christopher carothers david bauer shawn pearce ross highperformance low memory modular time warp system proceedings fourteenth workshop parallel distributed simulation p5360 may 2831 2000 bologna italy maniatty mohammed j zaki systems support scalable data mining acm sigkdd explorations newsletter v2 n2 p5665 dec 2000