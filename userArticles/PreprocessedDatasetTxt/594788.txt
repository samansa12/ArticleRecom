object model direction implications direction important spatial concept used many fields geographic information systemsgis image interpretation also frequently used selection condition spatial queries previous work modeled direction relational predicate spatial objects conversely paper model direction new kind spatial object using concepts vectors points angles basic approach model direction unit vector novel view direction several obvious advantages modeled spatial object direction object attributes operation set secondly new spatial data types oriented spatial objects open spatial objects defined abstract object level finally object view direction makes direction reasoning easy also reduces need large number inference rules features important spatial query processing optimization applicability direction model demonstrated geographic query examples b introduction 11 modeling direction direction common spatial concept used everywhere daily life people communicate geographic space example giving route descriptions direction necessary convey information direction also frequently used selection condition spatial queries11 used similarity accessing image databases18 example queries used army battlefield visualization10 anything ridge list swamps front tankand lets move north tree first example refers viewerbased orientation second defined either intrinsic orientation tankobjectbased viewer third example refers absolute direction respect tree order process queries involving direction constraints selection criteria spatial database system provide way users formalize directions common means handling direction model direction spatial relationship objects4 20 8 26 3 16 9 6 22 15 paper formalize direction different perspective spatial object basic approach model direction unit vector orientation set directions spatial object direction attributes operators richer set predicates operators direction orientation defined second new spatial data types oriented spatial objects unbounded spatial objects easily defined abstract object level object view direction also makes easy perform direction reasoning using simple vector algebra also reduces large number inference rules commonly needed useful processing optimization spatial queries contain direction constraints model direction three frames reference absolute object viewerbased orientation discuss philosophical issue whether directions objectentities strictest sense absolute directions north south east west defined using coordinate system wrt earth thus considered objects right object view relative directions eg left front needs thought directions defined respect coordinate systems attached objects issue needs explored 12 related work contributions research work direction modeling carried several areas geographic information systems image analysis studies capture semantics direction relations spatial reasoning direction 3 4 6 two major direction reference frames used model direction 2d space conebased model16 projectionbased model4 6 frank1 compared two models found projectionbased reference frame better many aspects common way model directions extended objects objects minimum bounding rectanglembr direction relations obtained applying allens 2 interval relations along x axis case 169 different relations3 distinguished work based mbr proposed picture indexing pictorial databases18 26 work aligns boundary box objects major axis14 makes possible satisfy different reference frames9 hand freska 5 proposed alternative method semiintervals formalize onedimensional temporal relation based incomplete knowledge object goyal egenhofer 8 introduced directionrelation matrix represent cardinal directions based projectionbased frame partitions space around reference object records direction tiles target object falls model still limitations modeling line objects limited 2d space little work done directions 3d space 7 previous work modeled direction spatial relationship spatial objects seems natural mapping directional relationship used geographic space modeling method limitations operations direction limited orienteddirected objects unbounded objects cannot represented spatial data model paper models direction spatial object unit vector novel view direction several advantages binary boolean relationship view modeled spatial object direction object attributes operation set implementation operators use vector algebra making richer set predicates operators direction feasible secondly new spatial data types oriented objects unbounded objects defined abstract object level object view direction also makes directional reasoning easy basic vector algebra sufficient inferencing new directions special new qualitative rules needed reduces complexity directional reasoning involving appropriate quantitative information useful spatial query processing optimization spatial databases discussion direction objects formal proofs applications appear 24 algebra equivalence classes direction objects defined algebra unifies different methods directonal qualitative reasoning appeared previous work4 issues outside scope paper focusses defining basic concepts implications treating directions objects 13 scope outline paper organization paper follows section 2 define mathematical framework propose new adts directions orientations new spatial data type hierarchy also proposed section section 3 oriented spatial object defined using orientation object application spatial queries discussed open geometry applications illustrated section4 finally paper concludes discussions recommendations future work 2 basic concepts 21 points vectors angles basic concepts use points vectors angles illustrated figure 1 point position space described using coordinates coordinate system characteristic distinguishes one point another position vector contrast vectors u v points p q different angle vector v figure 1 diagram points vectors angles magnitude direction fixed position space angle two vectors represents direction deviation one vector angle mean smaller one two vectors like diagram 1 paper denote points capitalized letters p denote vectors lower case letters arrow v simplicity use cartesian coordinate system represent points vectors paper cartesian coordinate system 3d righthanded rectangular coordinate system three axes x z perpendicular intersecting origin point p space represented ordered triple x rectangular components p x z axes respectively let u vectors basis vectors coordinate system vector v defined linear combination basis vectors u z b c numbers operands operations definition u z u z theta theta b jajjbj sin u u unit vector perpendicular b scale u z number z point away p distance jaj along direction table 1 operations vectors points table summarizes representative operations points vectors p two points angle vectors b u z u z see subtraction operation applied point pairs resulting vector operations addition subtraction scale multiplication dot productfi cross producttheta available vector operands definitions given terms components cartesian coordinate system one operation available point vector actually produces another point associativity commutativity distribution properties operators examined future work towards integrating vector objects query languages 22 direction orientation direction defined unit vector ie vector magnitude equal 1 table 2 defines operations directions operations definition composition d2 deviation reverse gamma1 theta 1 1 among 2 among 2 table 2 operations directions operations directions classified three categories first category contains operations produce new directions composition reverse operations category composition operation actually achieved vectoraddition resulting vector scaled magnitude unit vector represents new direction reverse operator produces reverse direction vector second category operations calculate deviation two directions operator deviation calculates cosine angle two directions hence gives deviation one direction pair vectors orthogonal dotproduct returns zero ie 90 0 deviation last category operations test relationships among directions operators among belong category figure 2 1 1 2 see later sections three categories d2 figure 2 operator direction operations make modeling direction concise flexible orientation modeled spatial object consists point origin n pairwise orthogonal directions n dimension embedding space origin point n directions form cartesian coordinate system 3d space three directions may labeled backfront leftright belowabove directions orientation formally define orientation operations 3d space follows definition works well long vector d1 parallel vector d2 parallel case handled user defined manner 3 plane orientation quadruple hop front right abovei op point front right three orthogonal directions two operations front right right aboven right aboven right abovefi rotationmatrix example rotation matrix rotates orientation along axis angle table 3 gives illustration operations front right front right rightn aboven front right table 3 operations orientation abstract data types modeling direction summary discussion definition adts vector direction orientation given table 4 c like syntax used column labeled attributes declares member variables class representative operations column declares interfaces operations class vector class three member variables real type variables represent three coefficients vector written linear combination basis vectors coordinate system constructor constructs vector object given three real arguments five vector operators declared member operator functions direction defined subclass vector class constructed either vector ordered triple besides inheriting attributes operators vector class direction also adds new operators among orientation class four member variables form cartesian coordinate system translate rotate declared member operator functions orientation class 23 frame reference absolute objectviewerbased directions section deal pointbased objects simplicity three different perspective systems define absolute directionseg north south objectbased directionseg left adt attributes representative operations vector xcomp float vectorfloat float float constructor zcomp float vector operator vector operator scale float operator dotproduct vector vector operator theta vector directionfloat float float constructor directionvector constructor direction inherited vector direction operator compositiondirection subclass vector constraint unit magnitude direction operator float operator deviationdirection boolean betweendirection direction boolean amongdirection direction direction orientation constructor right direction orientation operator rotaterotatematrix table 4 abstract data types direction orientation viewerbased directions absolute direction absolute direction embedding space defined relationship among objects based locations embedding space simplicity ignore elevation earths curvature use projectionbased model map space 2d local coordinate system north east right 1 model absolute directions two ways constant direction objects directional predicates constant direction objects created frequently asked directions eg east west north south ne se sw table 5 illustrates define constant directions terms coordinates local embedding space unit vector denoted ordered paira b represents vector u north unit vector 10 01 10 01 1 directions east north west south table 5 constant absolute direction introducing constant direction objects provides much flexibility describing deciding di rection using operator deviation calculate much deviation one direction another direction also produce new direction given deviation specific constant direction useful layout facilities second also provide corresponding directional predicates make convenient users 1 global view extend ellipsoidal coordinate system13 specify direction relation two objects east w est south north northwest northeast southw est southeast two objects assuming centroids p 1 p 2 represent relationship p 1 east predicate predicate true equation holds predicates defined similarly constant directions predicates give precise directional calculation one angle matches case sometimes users may interested approximate direction direction range north northwest operator makes approximate directional predicate possible want test whether p 1 north northwest p 2 use operator c notation north objectbased direction objectbased direction direction target object respect orientation reference object reference object oriented object target object may may orientation figure 3 person desk oriented objects person behind desk desk behind person also use ob represent orientation object b right ob three directions bs orientation using direction operator reverse directions bs behind left described gammao right respectively flag left desk desk right flag figure 3 viewerobjectbased direction given target point object reference point object b direction relative b calculated using deviation operation direction objects first direction object ba constructed vector gamma b direction point object respect point object bs orientation decided deviation direction object ba three directions front right ob bs orientation vector dotproduct meta operation direction deviation operation table 6 illustrates calculation objectbased direction first column consists directional predicates remaining three columns conditions needed satisfy predicates direction predicates ba front ba right ba front behind right left frontb right right right right among frontbaboveb leftb right right right right table objectbased orientation predicate returns true three corresponding conditions hold first six rows illustrate calculation exact directions front left etc row 1 dotproduct vector ba direction ob front greater zero dotproducts vector ba two directions orientation ob zeros means front b directional predicates precise direction checking whereas two categories predicates direction range checking second category directional predicates test located region two directions operator used c notation example relationship fronta rightb represented predicate right value true ba front ba right greater zero ba equal zero predicates category directions 2d space third category predicates consists eight directional predicates test among three directions 3d space represent predicates using operator among seen table using direction object ba checking directional predicates converts calculation direction deviation easily performed dotproduct operation viewerbased direction viewerbased direction refers directional relationship measured viewers per spective figure 3 flag left desk viewers perspective three related components system target object reference object b viewer viewer hisher orientation whereas objects b may may oriented objects given three components estimate direction object relative object b viewers perspective way similar used objectbased system similar predicates wrt viewer defined calculated dotproduct vector ba three directions reference orientation reference orientation viewers orientation v hence three dotproducts needed calculated front right similar table obtained table 7 direction predicates front right right right table 7 viewerbased orientation viewerbased direction system viewer may change hisher orientation positionunlike objects still using operators rotate translate orientation easily generate new orientations viewerbased directions heavily used route navigation route instructions given terms absolute direction ie north south etc fact since many people idea absolute direction particularly area new route instructions absolute direction little meaning directions would much easier understand instructions given viewerbased direction many web routing servers mapsonus use many viewerbased directions possible route instructions figure 4 example route map starts computer science building university minnesota um apartment st paul campus turnbyturn instructions given table 8 seen table viewerbased directions used every turn make easy users follow descriptions intuitively como avse como av washington av knapp av e245 raymond av university avenue us52 figure 4 route planning go total miles start head south union st se start union st se mpls mn1 less 1 mi turn left onto washington ave se 00 3 14 mi turn left onto raymond ave 19 4 11 mi continue onto n cleveland ave 30 end less 1 mi end point2051 knapp ave stpaul table 8 turnbyturn directions 24 new spatial data type hierarchy work done modeling space spatial geometry hierarchy open gis consortium12 proposed spatial object hierarchy incorporating 2d spatial adts sql illustrated figure 5 hierarchy consists p oints curves surface class geometrycollection basic operations confined topological metric operations since data types model bounded shape objects hierarchy limitations modeling objects example maps rivers roads buildings directionsorientations example exceptions printed maps oriented north better visualization flexibility spatial queries allows queries state left minnesota asked nongeographers may use geographic concepts like north west etc spatial queries minnesota north part usa answered comparing location minnesota center usa direction center without necessity getting information boundary usa ogis hierarchy spatial objects modeled bounded objects north part usa represented polygon needs accurate boundary information actually little effect query new spatial data type hierarchy proposed figure 6 hierarchy includes oriented objects unboundedopen objects could defined using direction orientation objects discussed multilinestring multipolygon linearring line multipoint multicurve multisurface polygon linestring curve point spatialreferencesystem geometry geometrycollection surface figure 5 spatial data type hierarchy12 new spatial hierarchy maps roads defined oriented objects new spatial data type hierarchy figure 6 illustrates extended spatial data type hierarchy consists shape objects vectors orienteddirected objects spatial data types operators embedded extended query language implement spatial query language vector object oriented spatial surface curve solid direction geometry orientation open geometry open line open rectangle oriented directed line oriented solid point closed geometry point classical type figure extended spatial data type hierarchy many new operators available extended spatial object model vector objects shape objects affine transformations performed addition operations makes gis applications easy example urban planning needs interactive placementorientation facilities locationbased query exploration use affine operations using operations also improve viewer flexibility look earth space instead viewer view direction performing rotation transformations later sections new spatial data types discussed detail applications geographic space also described 3 defining orienteddirected spatial object many objects geographic space intrinsic directionsorientations addition locations shapes buildings rivers roads discussed modeling maps oriented objects provides users flexibility query specification also allows users little knowledge geographic space query directions intuitively based orientations routing example given figure 4 turnbyturn directions table 8 mostly use viewerbased direction make information meaningful nongeographical users since information orientation starting address first directional instruction based absolute direction south know orientation exit building use viewerbased direction instead since case viewers orientation aligned building exits orientation instruction may turn right onto union street se easy user follow table 9 shows queries answered reference objects andor viewers modeled oriented objects queries list swamps front tank list farm fields suitable tank movement left lake viewed viewer 1 lets move back little far next intersection road table 9 queries need orientation information introducing orientation class spatial object hierarchy makes easy formalize oriented objects addition attributes location shape geometric shape objects oriented object attribute orientation instance object class orientation operators available oriented objects include topological operators direction orientation operators adt oriented objects specified oracle8025 first define direction object type orientation object oracle 80 following assume geometry spatial type defined ogis12 could point line polygon etc x number number z number member function compositionadirection directiontype return directiontype member function reverse return directiontype member function deviationadirection directiontype return number member function betweenadirection directiontype bdirection directiontype return number pragma restrict referencesdefault wnds op pointtype d1 directiontype d2 directiontype d3 directiontype member function translateavector vectortype return orientationtype member function rotatedegree number return orientationtype pragma restrict referencesdefault wnds orientedobject object shape geometry orientation orientationtype member function leftobj geometry return number functions defined similarily pragma restrict referencesdefault wnds name varchar220 orientation orientationtype member function leftobj1 geometry obj2 geometry return number functions defined similarily pragma restrict referencesdefault wnds use data types solve spatial queries involving oriented objects example show write first two queries table 9 using oracle 80 first query contains objectbased direction second one focuses viewerbased direction first database schema created consists four tables farmf ield landcover tank v iewer queries performed database schema extent geometry extent geometry extent orientedobject list swamps front tank select lname lextent landcover l tank ffl explanationfront objectbased direction predicate respect oriented object tank landcover partition space based landcover type search partitions lie front tank check type example possible types include swamps water hill list farm fields suitable tank movement left lake viewed viewer1 select fname fextent farmfield f landcover l viewer v vleftfextent lextent1 ffl explanation farm field suitable tank movement crop growing inside soft low type field farmf ield table identify property left viewerbased direction predicate respect orientation viewer database search farmfields left lake viewer1s perspective list satisfying fields suitable tank movement 4 open geometry open objects mean geometries whose boundaries partially defined extending beyond data window infinite think query example first query given map minnesota data window whats length mississippi river questions gis system answer length mississippi river inside minnesota b least length mississippi river inside minnesota dont know exactly since mississippi river extends outside minnesota cannot compute exact length river given minnesota map prefer answer b modeling river closed object return answer precise however model river open object answer b obtained accurate 41 categories open geometry table categorizes open objects based two factors extent object knowledge object figure 7 gives examples category open objects knowledge open object within window beyond window extent openg complete none finite openi complete complete infinite openp partial partial table 10 defining open objects object finite boundary well defined within data window closed object type openg refers object finite boundary extends beyond data window portion object within data window fully known portion outside data window partially known type open object useful gis applications example consider map minnesota data window mississippi river falls category openg openi refers object infinite boundary complete knowledge object either within data window outside even though seems little interest geographic science since earth finite surface category useful modeling direction extended objects discuss later section moreover openi openg similar closed openi openg openp data window figure 7 examples open shapes topological properties type openp refers object incomplete information dealing kind object scope discussion paper focus category openg openi use term open object places difference two unnecessary differentiated 42 geometric topological operations open objects subsection examine effects open objects geometric topological operations table 11 table 12 give results basic geometric topological operations respectively closed represents closed object open refers open object first column small table contains first argument type first row contains second argument type example differenceclosed open two arguments difference open objects result could either closed objectif two open objects extending space open object intersection closed open union closed open difference closed open closed closed closed closed closed open closed closed closed open open open closed closed open open open open open closed table 11 domains ranges geometric operations open objects etdoc closed open within closed open closed boolean boolean closed boolean boolean boolean boolean open boolean dont know open false dont know table 12 domain ranges logical operations open object etdoc stands one figure 8 illustrates four cases operation difference open shape involved pattern parts represent difference two objects worth mentioning since open shapes e f extend region differencee f closed shape ab cd xy f data window figure 8 operation difference open shapes table 12 combine operations results one table etdoc represents one operations set fequal touches disjoint overlap crossesg result operations could either boolean dont know dont know special value properties similar null value database useful observation topological operations involving closed objects always boolean results 43 defining open line open rectangle examples open spatial objects open lines open planes open spaces common way define 3d cartesian geometry terms equations parametric equations 17 ct line point axc0 3d space would convenient corresponding object classes users could describe abstract level use describe space direction object could used purpose define open lines open rectangle regions using directions points table 13 shows formalize open object examples figure 9 c e b figure 9 examples open shapes several subtypes type open line could 1end openfigure 9a needs start point direction define could 2end openfigure 9b needs intermediate point direction describe open rectangle also three subtypes 1side open rectangle 9c described two vertices rectangle one direction perpendicular edge connected two vertices 2side open rectangle described using two 1end open lines start vertex rectangle also 3side open rectangle could defined type subtype descriptions examples open line openline11end open line startpoint direction openline22end open line intermediatepoint direction b openrect11side open rectangle vertex 1 vertex 2 direction direction perpendicular segment formed two vertices c open rectangle openrect22side open region two 1end open lines vertex openrect33side open rectangle 2end open line direction e table 13 defining open objects 2end open line direction obvious extending open cube easy abstract data type open lines open rectangles adts open objects given table 14 using c notation entire open object class defined subclass geometry geometric topological operations available open objects include openunion openintersection opendifference openwithin openequals opentouches opendis joint openoverlap overcrosses definition operators overloaded open objects according table 11 table 12 show attributes constructors open object class illustration represent spatial objects figure 9 adt attributes constructors examples figure 9 line table 14 abstract data types open lines open rectangles 44 modeling direction nonpoint objects using open objects use open shapes model directions extended objects converting calculation directional relationships calculation topological relationships objects given two objects ro want decide direction target object related reference object ro using approach 8 first obtain mbr object ro partition space around object ro nine direction tiles based mbr object ro rectangle abcd figure 10 represent direction tile spatial object table 150000000000001111111111111111 ro figure 10 object ro rectangle representation figure 10 rectangleabc table 15 direction tile eight nine direction tiles open rectangles nw ne se sw 2side open rectan gles n w e 1side open rectangles order test direction object related object ro test direction tile falls calculation converted overlap relationship object direction tiles example directional relationship tested similarly noticed table 12 topological operations involving closed objects produce boolean values union tiles overlap region target object located wrt object ro example figure 10 north northwest west object ro paper model direction new kind spatial object using concepts vectors points angles basic approach model direction unit vector novel object view direction several obvious advantages allows user define orientation spatial objects also gives richer set predicates operators direction orientation new spatial data types oriented spatial objects unbounded spatial objects defined well finally direction reasoning useful spatial query processing optimization implemented simply basic vector algebra benefits new viewpoint obvious promising future work would integrate vector abstract data types extensible query language evaluate efficiency context various gis applications21 23 would also like explore use vectors model values spatial attributes windvelocity magnetic field earth etc acknowledgments work sponsored part army high performance computing research center auspices department army army research laboratory cooperative agreement number daah049520003contract number daah0495c0008 content necessarily reflect position policy government official endorsement inferred work also supported part nsf grant 9631539 thanks christiane mccarthy helping improve readability paper r qualitative spatial reasoning cardinal directions example maintaining knowledge temporal intervals hierarchical reasoning direction relations qualitative spatial reasoning cardinal directions temporal reasoning based semiintervals using orientation information qualitative spatial reasoning basic meanings spatial relations computation evaluation 3d space directionrelation matrix representation direction relations extended spatial objects various views spatial prepositions composing conceptual structure spoken natural language virtual reality environment introduction spatial database systems open gis consortium inc open gis consortium inc observers point view extension symbolic projections qualitative representation spatial knowledge twodimensional space algorithm determine directional relationship arbitrarilyshaped polygons plane modern mathematical analysis using 2d c mathematical elements computer graphics ccam connectivityclustered access method networks network computations equivalence classes direction objects applications first course database systems primenumberbased matrix strategy efficient iconic indexing symbolic pictures tr