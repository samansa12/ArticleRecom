model bgp routing network engineering performance ip networks depends wide variety dynamic conditions traffic shifts equipment failures planned maintenance topology changes parts internet degrade performance maintain good performance network operators must continually reconfigure routing protocols operators configure bgp control traffic flows neighboring autonomous systems ases well traffic traverses networks however bgp route selection distributed indirectly controlled configurable policies influenced complex interactions intradomain routing protocols operators cannot predict particular bgp configuration would behave practice avoid inadvertently degrading network performance operators need evaluate effects configuration changes deploying live network propose algorithm computes outcome bgp route selection process router single given static snapshot network state without simulating complex details bgp message passing describe bgp emulator based algorithm emulator exploits unique characteristics routing data reduce computational overhead using data large isp show emulator correctly computes bgp routing decisions running time acceptable many tasks traffic engineering capacity planning b introduction delivery ip packets internet depends large collection routers compute endtoend paths dis permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee tributed fashion using standardized routing protocols providing low latency high throughput high reliability requires network operators adjust routing protocol configuration performance problems arise network conditions change example operator might adjust configuration respond network congestion equipment failures prepare planned maintenance however complexity protocols large number tunable parameters size network make extremely difficult operators reason effects actions common approach tweak pray longer acceptable environment users high expectations performance reliability 1 avoid costly debugging time catastrophic mistakes operators must able make predictions quickly based accurate model routing protocols previous work area focused interior gateway protocols igps open shortest path first ospf intermediate systemintermediate system isis operate within single autonomous system protocols link configurable integer cost used compute shortest path smallest cost path network tuning link weights gives operators way modify paths inside satisfy network user performance goals 2 several existing tools 3 4 5 capture changes link weights would affect flow offered traffic new paths also propose good candidate settings link weights although tools extremely valuable network operators flow traffic large service provider backbones ultimately depends interdomain routing protocol well provider uses border gateway protocol bgp exchange reachability information neighboring domains propagate routes within network un fortunately several subtleties make modeling bgp route selection much challenging emulating igp bgps distributed path vector operation means every router may different view network state contrast link state protocols flood complete information throughout network bgpspeaking router sends incremental reachability information immediate neighbors bgp router sends advertisement notify neighbor new route destination prefix withdrawal revoke route longer available bgpspeaking router locally computes best bgp route best routes announced neigh bors change best path one router affect selection best route another router single router complete view available bgp routes bgp route selection complex process depends combination route attributes igps advertise single integer metric link select routes based shortest r b routers neighboring routes ebgp routes ebgp router ingress egress figure 1 network engineering terminology paths bgp route advertisements include various attributes list ases path path ip address router responsible route next hop bgp route selection based complex multistage decision process 6 bgp allows operators specify complex policies indirect effect selection best path bgp route selection depends interactions intradomain routing protocols whereas igp modeled isolation selection best bgp route router also depends igp path cost bgp next hop announcing route hot potato routing router prefers route shortest igp path closest exit point introduces complex coupling bgp underlying igp hierarchical ibgp configuration affects routing choices available router internal bgp ibgp used distribute bgplearned routes throughout rather ibgp session pair routers full mesh ibgp large provider networks typically distribute routes hierarchical fashion makes choices available one router dependent decisions made routers may prevent protocol converging paper present model accurately determines network configuration routes learned via external bgp ebgp affect flow traffic existing tools simulate bgps behavior 7 first paper develop model determines outcome bgp path selection process router without simulating dynamics protocol type model important several reasons first network operators need know paths routers ultimately select perform engineering tasks eg traffic engineering maintenance need computationally expensive simulation routing dynamics present emulator based model facilitates tasks providing fast accurate answers questions effects changes network second accurate model bgp route selection used improve validate existing simulators highlighting subtleties protocol situations bgp might converge unique solution simulator may compute one possible outcome may accurately reflect outcome real network modeling framework present determine whether bgp configuration would converge unique outcome predicting configuration change would affect flow traffic first requires way determine route ingress router would select destination prefix given network configuration ebgp routes learned egress routers shown figure 1 paper solves precisely problem model bgp routing present essentially abstraction conceals protocol details irrelevant outcome bgp decision process model computes bgp routing decisions network configured correctly checked separately testing certain sufficient con ditions model also combined prefixlevel traffic measurements form basis traffic engineering tool rest paper organized follows section 2 present several examples network engineering tasks motivate need accurate predictive model bgp path selection section 3 describes practical constraints network configuration routing advertisements must satisfy make modeling bgp route selection possible applies constraints novel way decompose route prediction problem three distinct phases section 4 describe phase route prediction algorithm detail section 5 describes prototype implementation bgp emulator sections 6 7 present evaluation validation prototype routing configuration data large tier1 isp experiments show route prediction algorithm accurately predicts bgp routing decisions efficient enough practical many network engineering tasks section 8 provides overview related work conclude section 9 2 network engineering section discuss network engineering problems operators commonly face examples demonstrate need systematically model bgps route selection process move beyond todays tweak pray techniques discuss practical model bgp useful particular discuss advantages model simulation live testing 21 network engineering problems network operators must adjust routing protocol configuration respond following common changes network conditions changes traffic load traffic dynamic amount traffic destination may suddenly change causing changes traffic distribution across network links example web site sometimes experiences traffic surge due flash crowd ie slashdot effect network routing traffic destination neighboring could experience congestion outbound link destination network operator must reconfigure routing policy alleviate congestion changes link capacity network links frequently upgraded higher capacity response network operators may wish adjust configuration route additional traffic recently upgraded links example link figure 1 upgraded oc12 oc48 network operator would want shift traffic b longterm connectivity changes longer timescales points network connects neighboring ases well ases connects change links ases appear disappear network operators must move large amounts traf fic shown figure 1 added third link neighboring operator would shift portion traffic b new link changes available routes due protocol dynamics changing commercial agreements might suddenly receive alternate route destination could cause traffic flow shift dramatically alternatively existing route could suddenly disappear events may require network operator rebalance flow traffic planned maintenance network operators commonly perform routine maintenance portions network adjusting interior routing link weights divert traffic away part network undergoing maintenance router r undergoing upgrade network operator could adjust igp link weights bgp configuration divert traffic away r without overloading links border neighboring domains failure disaster planning operator may wish evaluate robustness network examining effects failures routing traffic flow studying effects component link failure even serious catastrophe eg fiber cut tunnel fire terrorist attack helps network operators planners make design decisions tools exist help network operators adjust interior routing protocol parameters rebalance traffic within 3 4 5 operators must also rebalance traffic across external links networks reconfiguring bgp network operator wants shift traffic link b figure 1 typically would adjust import policy set routes router commonly decreasing local preference attribute router assigns routes 8 would cause routes learned router b destinations appear attractive causing traffic destinations exit via b 22 network engineering requirements motivated practical network engineering examples present several requirements network engineering tool predicts outcome bgp route selection throughout paper use term prediction describe process determining outcome bgp route selection offline operators need able predict effects configuration change deployment live network operators typically handle network engineering tasks tuning existing configuration live network witnessing effects change reverting previous configuration desired effects achieved method time consuming lead unnecessary performance degradation complexity interdomain routing makes essentially impossible compute backof theenvelope estimates effects configuration changes network engineering involves exploring large search space operators need predict effects candidate configuration change quickly possible operators usually need experiment many possible configuration changes arriving acceptable solution requires techniques quickly evaluating effects proposed configuration change prac tice candidate configuration changes typically small modifications existing configuration less likely cause significant unexpected changes routes offered traffic load useful route prediction tool fast evaluating incremental changes network engineering tasks require accurate prediction outcome bgp path selection process require detailed simulation protocol dynamics network simulators eg ssfnet 7 help operators understand dynamic routing protocol behavior simulation represents network behavior terms message passing protocol dynamics certain period time contrast network engineers usually need know outcome pathselection process lowlevel timing details furthermore existing simulators capture relevant protocol interactions affect outcome decision process simulating every detailed interaction hard without higher level model bgp first place summary bgp path selection massive highly tunable distributed computation maintain good endtoend performance operators need way predict outcome computation various configurations 1 efficiently 2 way facilitates evaluating incremental changes 3 without deploying configuration changes live network following sections describe way model bgp decision process across every router algorithm correctly efficiently computes outcome bgp decision process router 3 modeling framework glance modeling routing decisions seems simple applying bgp decision process router ever bgp routing system inside guaranteed converge unique solution routers make consistent deci sions even system converges decision made one router affect options available routers applying theoretical results previous work impose three practical constraints routing system make modeling bgp route selection possible show route selection modeled three distinct phases constraints satisfied 31 constraints routing system given ebgplearned routes destination prefix would like determine route router would ultimately select unfortunately certain network configurations lend efficient route prediction fundamental problem underlying bgpsome configurations converge determining whether system converges unique solution computationally intractable 9 make modeling bgp route selection feasible impose three constraints explain constraints reasonable assume practice ebgplearned routes change frequently internal routing system time propagate effects one ebgp advertisement next one arrives assume constraint 1 ebgplearned routes change slowly respect timescale network engineering decisions practice bgp routes stable days weeks time 10 vast majority traffic associated stable routes 11 allows emulation operate static snapshot ebgp routes ebgp routing change treated separate problem instance network operators significant flexibility deciding propagate ebgplearned routes throughout simplest case routers configured full mesh ibgp ses sions general though routers may form complicated signaling graph ibgp sessions shown figure 2 edge corresponds ibgp session pair routers router normally forward ibgplearned routes ibgp neighbors however router configured route reflector rr forwards routes learned one routereflector clients clients following terminology previous work 12 use term ibgp session router rr conventional ibgp session two routers ibgp session rr client valid signaling path consists zero edges followed one edge followed zero edges alter natively routers within also grouped one confederations confederations used much less frequently route reflectors focus modeling route reflectors model effects confederations every ebgplearned route propagate signaling graph every router example consider figure 2 example ibgp signaling graph figure 2 edge rr1 rr2 session whereas edge z rr2 session ebgp route learned z reach via rr2 rr1 ass signaling graph violate property even routers connected via igp example session rr1 session instead session would way receive ebgp route learned z types partitions make modeling difficult therefore assume constraint 2 router valid ibgp signaling path every router 1 operational network violate constraint since could create network partition even though connected ip level full mesh ibgp sessions satisfies constraint full ibgp mesh among toplevel rrs turn ibgp sessions rr clients common configuration scenario ensuring ebgplearned route ibgp path every router still guarantee router converges unique solution router learns routes advertised immediate ibgp ebgp neighbors example figure 2 w z ebgplearned routes router learns single route route reflector rr1 suppose rr1 selects ebgp route advertised z would pick zs route well even would preferred w route zs route note makes different routing decision would could select best route ebgp routes ie w z situations differences routers local rankings bgp routes cause persistent oscillations even forwarding loops make difficult model outcome bgp decision process fortunately problems avoided network configuration satisfies following sufficient condition 12 constraint 3 router prefers routes learned neighbors routes learned neighbors b signaling graph cycle edges c shortest igp path pair routers valid signaling path part satisfied routers change attributes ibgplearned routes router lower igp path cost clients routers common practices applying import policies ebgp sessions placing rrs clients pointofpresence ie pop ensure conditions hold part b states rr b b rr c c rr consistent common practice constructing routereflector hierarchy rather arbitrary signaling graph part c ensures routers along shortest path egress point selected egress point 1 property checked breadthfirst walk edges signaling graph marking nodes visited graph walk edge followed edge 1 highest local preference 2 lowest path length 3 lowest origin type 4 lowest med nexthop 5 ebgplearned ibgplearned 6 lowest igp path cost exit point 7 lowest router id bgp speaker 2 table 1 steps bgp decision process prevents deflections part c difficult ensure practice consistent approach assigning clients rrs along shortest path egress point imposing three constraints make modeling bgp route selection possible router applies multistage decision process 6 select single best route summarized table 1 decision process considers set available routes destination proceeds stepbystep eliminate candidate routes example decision process first eliminates routes highest local preference value forth single best route remains since route selected one router affect routes available another router cannot simply apply bgp decision process independently router although must model distribution routes within constraints 1 3 ensure system converges unique solution allows us apply following intuitive result theorem 1 routing system guaranteed converge unique solution solution independent order routers exchange routes apply decision process proved slightly different version theorem previous work theorem 41 13 practice router may receive numerous route advertisements select propagate best route multiple times settling final choice fortunately careful selection particular ordering events prediction algorithm predict outcome without simulating protocol dynamics 32 phases route prediction algorithm although constraints discussed previously presented conditions stable routing constraints also necessary model bgp route selection constructively apply constraints propose novel way decomposing route prediction theorem 1 gives us flexibility define message ordering without affecting correctness specifically algorithm selects message ordering decomposes problem three distinct phases shown figure 3 rest section explains decomposition deferring detailed discussion phase section 4 receiving ebgp routes applying import policy first phase assumes router receives ebgplearned routes applies import policies exchanging ibgp update messages ebgplearned route attributes destination prefix path associated ebgp session import policy may filter route set certain attributes local preference origin type multipleexit discriminator med according attributes advertised route eg based ases path applying import policy local operation ebgplearned route 2 router vendors allow tiebreaking based oldest route ie route learned first feature often disabled avoid introducing nondeterminism bgp pathselection process ebgp modified ebgp routes routes routes per prefix ebgp routes per prefix ibgp signaling graph per prefix ingress best egress point best bgp route best best ebgp igp path costs per ingressegress pair compute compute import policies per ebgp session router id per session apply import policy per prefix figure 3 decomposing networkwide bgp route selection three independent phases router first phase emulates exactly operations real router would perform upon receiving ebgp routes routes modified attributes form input second phase computing best ebgplearned routes many routes first phase would never selected router best bgp route example ebgplearned route local preference 90 would never selected another route local preference 100 long every ebgplearned route reach every router constraint 2 router would ever make less attractive decision router words corollary 1 constraint 2 implies every router selects best bgp route equally good first four steps decision process example router east coast united states might select route learned new york whereas router west coast might select route learned san francisco still two routes would local preference path length origin type two routes nexthop would also med value property allows second phase algorithm focus selection best ebgp routes across ebgpspeaking routers without modeling details distributing routes throughout modeling influence ibgp igp within third phase router selects single route set best ebgp routes border router contributes set best routes selects best ebgplearned route every router selects one routes propagated via ibgp behavior consistent step 5 bgp decision process decision router depends routes selected ibgp neighbors costs igp paths exit points routes learned router ids ibgp sessions introduces dependency ibgp igp fortunately algorithm needs consider total igp path cost shortest igp paths pair routers rather hopbyhop costs make simplification constraint 3c implies routers along igp path router chosen egress point selected best bgp route router along path egress point would deflect data packet toward different egress point ingress router selected although diagram figure 3 shows three phases envision network operators could incorporate modules additional functionality example module could combine predicted bgp routes traffic data predict load link network using emulator traffic engineering assumes traffic volumes relatively stable remain stable response configuration changes previous work found prefixes responsible large amounts traffic relatively stable traffic volumes long timescales 8 operators could use emulator test configuration changes reasonably slow timescales affect prefixes stable traffic volumes network operator could also combine measurements estimates traffic arriving ingress point destination prefix 14 linklevel paths predict load link network another module might evaluate optimality linklevel paths terms propagation delay link utilization could search good configuration changes applying live network 4 route prediction algorithm drawing modeling framework section 3 section proposes algorithm computes best route router since path selection process independent prefix focus prediction problem single destination prefix ensure algorithm efficient best route algorithm predicts router change predictions made earlier routers words design algorithm emulate bgp message ordering require backtracking satisfying constraint first phase algorithm straightforward applying import policy purely local operation router however second third phases algorithm complicated subtle interactions bgp decision process interaction med router id prevents second phase algorithm simply selecting locally best route router complication arises bgp decision process compares med values routes nexthop med value ebgp route learned one router may affect local ranking ebgplearned routes another router interaction ibgp igp prevents third phase algorithm visiting router arbitrary order complication arises best bgp route one router chosen based igp path costs router ids vantage point affects options available ibgp neighbors remainder section describes second third phases algorithm arrive correct prediction without backtracking 41 computing set best ebgp routes second phase algorithm begins complete set ebgp routes modification import policies produces set candidate best ebgp routes best route router selects element set thus second phase algorithm must following properties must eliminate ebgplearned routes could best route router impose constraint simplify later stages algorithm c ibgp 3 figure 4 interaction med router id bgp decision process small numbers router ids completion second phase ebgpspeaking router must contribute one candidate route property must hold bgp protocol specification requires router select propagate single best route second phase algorithm determines best route destination every ebgpspeaking router starting complete set ebgplearned routes systematically eliminating routes set candidate routes first algorithm eliminates every route set would eliminated based first three steps bgp decision process ie local preference value path length origin type algorithm effectively applies first three steps bgp decision process globally across set candidate ebgp routes might seem appealing either continue applying steps bgp decision process globally apply remaining steps decision process locally router ie eliminate routes set candidate routes based med router id etc however interaction med router id attributes precludes consistent ranking routes router figure 4 presents simple example illustrates two approaches incorrect global route elimination correct consider example figure 4 assume 3 learns ebgp routes b c equally good step 3 bgp decision process routes b learned 1 routes c learned 2 global comparison routes c first eliminated based med router x picks route since preferred b based router id comparison applied router however conclusion incorrect would always prefer route route since learned via ebgp step 5 equally good step 4 recall router compare meds routes different nexthop ases local route elimination correct might also seem natural simply select best route locally router subsequently eliminate routes set comparing routes within set locally best routes work either consider figure 4 applying decision process locally router router selects route c router id lower sim ilarly router selects route suggests router x would ultimately select best route since better c due med comparison however conclusion also incorrect x always prefer route route correctly handle interaction med router id attributes algorithm determines effects steps 48 bgp decision process emulating effects particular message ordering correctly propagates effects med routers best route without backtracking figure 5 summarizes ebgpspeaking routers candidate ebgplearned routes either eliminated marked best route 1 select ebgpspeaking router least one candidate route consider route best locally router among remaining candidate routes 2 eliminate route higher med value nexthop locallybest route another router otherwise eliminate routes router well routes nexthop larger med value mark remaining route router best route figure 5 applying steps 48 bgp decision process determine set best ebgp routes part algorithm network figure 4 starts c locallybest routes x respectively based router id algorithm applies following steps 1 consider x locallybest route c higher med value nexthop eliminate c candidates router x 2 consider locallybest route router locallybest route smaller med value nexthop mark best route eliminate b 3 consider x locallybest route among remaining candidates routers routes left mark best route algorithm computes correct routing decision router router x router router better step 5 b step 7 c step 4 router x better step 5 better b matter router select b better c matter since c always worse step 4 theorem 2 ebgpspeaking router network second phase route prediction algorithm selects best route router best route router ebgp learned route best route ibgplearned route second phase eliminates routes router proof theorem follows two proofs previous work 13 work first show second phase route prediction algorithm never eliminates candidate route ebgpspeaking router would selected best route theorem a4 algorithm always eliminates every candidate route bgp eliminates theorem a4 additionally second phase algorithm correctly predicts set best ebgp routes without backtracking 42 computing best route router third phase algorithm determines best bgp route router given igp path costs ebgp speaking router ibgp signaling graph surface problem relatively simple solution router take set best ebgplearned routes select closest egress point breaking ties based router id approach would work ebgp speaking routers readvertised every ebgplearned route every router fullmesh ibgp configuration however use route reflectors rrs typically violates assumption routing alternatives available particular router depends position route reflector hierarchy example consider a3ebgp figure interaction ibgp igp decision process small numbers igp path costs solid lines ibgp sessions dashed line igp path 1 consider routers partial order defined edges signaling graph starting router neighbors router select best route among available candidate routes neighbors already selected route candidate routes exist assign best route yet 2 consider routers partial order defined edges signaling graph starting router neighbors router select route previous step select best route among routes selected immediate neighbors figure 7 efficiently computing best route router network shown figure 6 routers x ebgp routes b respectively equally good first four steps decision process network rr1 prefers route smaller igp path cost x however would prefer b shortest igp path cost 3 via router z shortest path x cost 5 however advertises best route rr2 rr2 never learns route b account dependencies algorithm emulates particular ibgp message ordering making decisions router propagating effects decisions routers visiting router without backtracking theorem 1 allows algorithm select ibgp message ordering constraint 3 satisfied algorithm consider routing decisions router order specified figure 7 applying algorithm example figure 6 shaded routers select best routes first step since routers direct path ibgp hierarchy ebgpspeaking router first x select best ebgp routes b respectively since routers level hierarchy algorithm visit der rr1 applies bgp decision process b selects smaller igp path cost bgp decision process applied rest routers starting top hierarchy proceeding downward rr2 receives best route destination similarly z receives rr2 w receives rr1 algorithm operates defining two partial orderings routers based edge edges respectively possible constraint 3b requires signaling graph cycles edges visiting routers direction ensures router selects route possible required constraint 3a visiting remaining routers direction ensures router routes available making deci sion considering routers particular ordering guarantees router makes decision change later router makes decision result know theorem 3 constraints 2 3 satisfied third phase algorithm correctly predicts egress router ingress router would choose using bgp without backtracking theorem restatement theorem earlier work 15 sufficient conditions stable bgp routing level previous result uses constructive proof show specific set export policy preference relations ases guarantee bgp arrive stable path assignment proof shows existence stable routing first assigning paths neighbors neighbors previous work observed conditions bgp stability aslevel ibgp route reflection within 12 theorem 3 follows directly applying constructive proof stable global routing ibgp route reflection proof 5 emulator design demonstrate algorithm section 4 accurate practical implemented bgp emulator computes outcome bgp decision process routers section discuss input data emulator requires network operators obtain data practice describe basic design emulator deferring discussion performance optimizations section 63 51 input data shown figure 8 emulator uses three inputs bgp routing tables bgp tables ebgpspeaking routers provide first phase algorithm snapshot routes advertised neighboring ases ignore routers current view best route current setting local preference attribute since relate existing network configuration rather scenarios might want emulate router configuration files configuration files used 1 determine import policies ie route maps ebgp session 2 determine ibgp signaling graph 3 compute igp path costs pair routers import policies used manipulate attributes ebgp routes first phase algorithm ibgp igp information needed third phase bgp neighbor information bgp decision process depends router id associated bgp session announcing route algorithms require knowing router id associated bgp session second phase uses router ids ebgp sessions third phase uses router ids ibgp sessions emphasize several points regard input data first network operator capture necessary data telnet ssh access router second many aspects input data eg router id data routes prefixes stable traffic volumes etc change often emulator useful even input data collected infrequently eg day finally certain inputs approximated eg router id typically loopback ip address router often affect decision process emulator effective even limited input bgp tables known routes route maps import modified routes bgp neighbor info router id egress points ibgp topology rr clients igp configuration igp path costs predicted routes apply import policy compute best ebgp routes compute best route figure 8 data flow emulator fonts specify raw inputs input tables derived tables practice operators might collect raw inputs day 52 emulator design overview emulator uses database backend design provides efficient access small subsets configuration data routes also stores intermediate results allow us validate part algorithm separately figure 8 summarizes emulator uses inputs intermediate results generate table predicted routes emulator performs route prediction three distinct database operations correspond three phases described section 32 computing modified routes emulator loads bgp tables route maps database first operation applies import policies ebgp routes row import table specifies particular set rows known routes table modified emulator performs actual modifications modified routes table specifically row import table specifies router name ip address bgp neighbor path regular expression row known routes table contains routing table entry includes ip prefix router route learned nexthop ip address ie bgp neighbor path route among attributes row import table first operation applies policy 1 finding appropriate routes selecting set routes learned corresponding router bgp session match specified path regular expression 2 setting attributes eg local preference according values specified row import table primary challenges associated operation result potentially large number ie order millions ebgp learned routes address challenges section 63 computing egress points second operation applies technique section 41 generate set best ebgplearned routes serves input third module part algorithm performs select statements modified routes table successively refine set candidate routes router id table contains router id every bgp session router needed step 7 decision process method section 41 marks best routes routes inserted egress points table use third operation computing predicted routes third operation uses ibgp signaling graph igp path costs technique section 42 determine best bgp route prefix router module uses ibgp signaling graph determine routes advertised router igp path costs pair routers determine closest ebgpspeaking router ingress router used step 6 decision pro cess router id ibgp session step 7 determine egress router ingress router select rr clients table represents ibgp signaling graph igp path costs represents shortest igp path pair routers row rr clients specifies route reflector client particular cluster provides partial ordering needed algorithm applying igp tiebreaking step ingress router igp path costs used determine egress router shortest igp path 6 performance evaluation section evaluate performance implementation bgp emulator attempt perform complete performance analysis prototype rather conduct experiments demonstrate practicality prediction algorithm evaluation preliminary performance tests demonstrate emulator operate timescales could allow operator use bgp emulator based algorithms practical setting evaluation demonstrates following points emulator computes best routes one prefix throughout large tier1 isp network one second although predicting best route prefixes routers network takes several hours type computation need performed frequently practice exploiting commonalities among route advertisements eliminate redundant computation reduces running time emulator approximately 50 using emulator evaluate effects incremental change router configuration typically takes sec onds thus believe emulator practical tasks interdomain traffic engineering briefly discussing evaluation framework examine emulators performance first discuss emulators performance computes routes every prefix routing table scratch without performance optimizations examine insights bgp decision process previous measurement studies improve performance finally describe emulator quickly predict effects incremental configuration changes 61 evaluation framework ran emulator sun fire 15000 192 gb ram 48 900 mhz ultrasparciii copper processors timeshared machine ran experiments several times ensure accuracy measurements except noted prototype used two 900 mhz processors one database process one emulator combined memory footprint database process emulator never exceeded 50 mb emulator use resources standard pc results evaluation reasonably reflect emulators performance commodity hardware emulators running time depends many interdependent factorsincluding number neighbor ases number ebgp sessions number prefixes number routersrunning independent benchmarks factors realistic routing configuration data extremely difficult example difficult run experiment controls every factor affects running time varying number ebgp sessions similarly determining precise running time emulator process incremental configuration change difficult running time depends many routes must recomputed result change rather isolating individual factors affect performance difficult may accurately reflect realistic network conditions evaluated bgp emulators running time using actual routing tables configuration data large tier1 isp several hundred routers present absolute performance numbers well appropriate averages give rough estimate emulators running time arbitrarysized network also use averages estimate running time computing effects incremental routing changes networks fewer prefixes routing tables fewer routers fewer bgp sessions per router therefore running times report considered conservative emulator shorter running time networks 62 route prediction scratch get baseline performance estimate algorithm first ran emulator without performance optimizations emulator begin executing route prediction algorithm must load input data database loading configuration data three separate steps 1 parsing loading routing tables 2 parsing loading import policies 3 building database indexes first two steps parallelized router since tables configuration router parsed loaded independently loading routing table sequence prototype parsed loaded 1620061 ebgp learned routes large tier1 isp 90 minutes rate 280 routes per second loading 20 tables parallel emulator finished loading routing tables 520 seconds speed operation critical since likely performed per day time parse load import policies router id information negligible emulator parsed loaded information 1 second data parsed loaded database emulator applied 486 import policy operations ebgp learned routes total 1576 seconds 031 operations per second make sense give perprefix performance number module since one import policy applies many prefixes second module computed set best ebgp routes rate 3 prefixes per second third module computed best route prefix ingress router approximately 73 milliseconds per prefix per router although emulator takes total 5 hours compute routes routers large isp network running emulator likely much faster cases first depending task network operator may need perform route prediction every prefix example well known majority network traffic destined relatively small fraction total prefixes 8 thus network operator would likely able perform effective traffic engineering emulating route selection small number prefixes similarly network operator debugging reachability problem single prefix small group prefixes need run emulator prefixes second several performance optimizations significantly improve efficiency emulator discussed next subsection 63 performance optimizations ensure emulator operates reasonable timescales even large number routes ebgp sessions designed emulator around inherent structure input data particular make three observations inspire aspects design 1 many bgp routes path attribute 2 neighboring ases often advertise large group prefixes attributes across ebgp sessions often advertise large group prefixes set ebgpspeaking routers 3 incremental router configuration changes typically affect relatively small number routes observations allow bgp emulator scale large number prefixes ebgp sessions divide emulators running time half store manipulate unique path modifying ebgplearned routes according import policies potentially involves sequentially scanning routers bgp routing table routes whose paths match given regular expression performing operation per import policy would involve many table scans fortunately many ebgplearned routes path bgp routing tables unique path appears twenty ebgplearned routes average exploit observation known routes modified routes tables store pointer ie foreign key separate table contains distinct paths level indirection significantly reduces overhead first module repeatedly modifies attributes set routes match certain path regular expression first module 1 searches relatively small path table find path pointers associated regular expression 2 selects subset table entries must modified selecting entries path pointers table indexed operating table 45000 paths instead 1 million ebgplearned routes first module apply 102 import policy operations per secondmore factor 3 improvement 031 operations per second reported section 62 group prefixes ebgp routing choices emulator must compute set best ebgplearned routes prefix internet routing table often 100000 prefixes performing prediction per prefix could computationally expensive fortunately neighboring typically advertises large group prefixes set peering sessions many prefixes advertised exactly fashion across ebgp sessions neighboring ases 8 typically happens single institution announces several prefixes single location single peer advertises various prefixes path length process computing set best routes exactly large groups prefixes example two prefixes identical set modified routes ie attributes route ebgp neighbor second module emulator would produce egress set fact true long two prefixes routes path length neighbor since bgp decision process considers length path exploit observation known routes modified routes tables store length path along pointer table unique paths group prefixes routes path length local preference origin type med reducing total number predictions 91554 ie one per prefix 8291 ie one per group prefixes identifying groups prefixes required 1420 seconds time proportional total number ebgplearned routes grouping prefixes computation second module requires 15753 seconds rather 30212 seconds needed performing computation separately prefix speedup exceed factor two overhead checking database determine whether new computation avoided group prefixes egress set best route emulator predicts particular ingress router ultimately depends set routers egress set prefix theory number distinct sets egress routers exponential number routers fortunately many prefixes advertised exactly fashion usually applies local policies manipulate select routes many prefixes exactly set egress routers emulator thus select best route group prefixes egress set rather prefix routing data 91554 prefixes 290 distinct egress sets exploit observation applying algorithm section 42 per ingress router set egress routers rather ingress router prefix determining whether prediction already computed ingress router set egress routers requires additional database query despite additional overhead optimization reduces running time third module 73 43 milliseconds per prefix per ingress router compute small differences incremental changes envision network operators would use bgp emulator traffic engineering tool order predict configuration change would affect flow traffic kinds configuration changes typically affect small subset total number routes thus cases incremental configuration change emulator avoids unnecessary recomputation determining prefixes affected policy change recomputing best routes prefixes first phase algorithm reapplies import policy routes learned associated ebgp session first phase keeps track prefixes affected policy change allows second phase reevaluate bgp decision process prefixes third phase evaluates selection egress point destination prefixes fact prefixes might set egress points third phase evaluated allowing emulator reuse result earlier computation together optimizations allow emulator return quick answer questions incremental changes network configuration find recomputing best routes single import policy change takes less one second average 7 validation verify emulator produces correct answers perform validation using complete routing protocol implementations production routers large operational network network simulators capture full details standard routing proto cols useful compare emulators results simulator addition may unaware vendorspecific variations could affect accuracy results since cannot make arbitrary changes network run emulator individual snapshots derived daily dumps router configuration files bgp routing tables bgp neighbor information compare emulators route predictions seen practice phase algorithm compare results actual bgp tables present breakdown mismatches encounter isolate sources inaccuracy evaluate module independently assuming perfect inputs previous module also perform endtoend validation emulator generates correct results 99 prefixes mismatches attributed fact data sets collected slightly different times analysis focuses snapshot network state early morning est february 4 2003 validate prediction algorithm 91554 prefixes whose ebgp routes learned peering points large providers since routing tables lo number attribute mismatch unusual configuration total errors paths 43434 3 9 12 0028 routes 1620061 36 277 313 0019 table 2 summary errors applying import policy number different missing total errors paths 43434 66 187 253 0582 table 3 mispredictions set best ebgp routes cations excluded prefixes learned routers recall prediction algorithm relies knowing potential egress routers routes prefix learned initial bgp routing data consists 1620061 ebgplearned routes 43434 distinct paths apply tool inputs check whether emulator produces answers operational routers selected addition collecting bgp routing tables peering routers ebgp routes learned also collect bgp tables several route reflectors access routers verify results 71 applying import policy verify first phase correctly emulates application import policy need compare route attributes ie local preference med etc modified routes table actual bgp routing tables modified routes table contains routes attributes modified applying import policies specified import table initial known routes table prototype uses routing tables approximate actual routes received router cannot determine routes discarded import policy thus emulator cannot emulate filtering policies specified import policies still determine effects import policy configurations set manipulate route attributes eg traffic engineering compare route attributes known routes modified routes tables 1620061 ebgp routes 43434 distinct paths table 2 summarizes results validation emulators results matched route attributes seen bgp tables 313 ebgplearned routes 12 distinct paths observed 36 attribute mismatches 3 paths likely attributed actual policy changes since routing tables configuration files captured slightly different times day verified conclusion inspecting configuration data next day remaining mismatches involved 9 unique paths prototype handle complex configuration scenario permitted cisco routers accounted 277 313 route mismatches overall first phase produced successful results 9997 cases 72 computing set best ebgp routes verify second phase correctly computes set best ebgp routes check best route ebgpspeaking router specified egress points table corresponds route appears routing table routers route reflec tors routes match vast majority time however cases two routers different routes ie different paths even though one router apparently learned route directly results summarized dif ferent column table 3 missing column highlights cases rr route prefix timing incon router predictions case 1 case 2 case 3 total errors table 4 errors predicting best egress router prefixes predicted incorrectly second phase right answer peering router excluded sistencies explain scenarios together account 05 cases verify emulator incorrectly exclude routes set best ebgp routes check prefix best route rr appears set best ebgp routes computed emulator 3 words consider cases rrs best route would directed traffic towards egress router contained egress points table 111 best routes rrs 2 prefixes fell category routing dynamics explain inconsistencies manual inspection found many cases best route rr clearly worse routes set best ebgp routes eg rrs best route local preference higher path length 73 computing best route router verify emulator correctly predicts best egress router examined best routes bgp tables several routers compared destination prefix nexthop pair routing table results predicted routes table entry router performed comparisons two access routers connect directly customers different geographic locations verify emulator makes correct predictions ingress routers also analyzed emulators predictions two route reflectors verify algorithm makes correct route predictions traverses signaling graph best route matched prediction 995997 cases summarized table 4 router excluded prefixes best egress router one peering routers included known routes table recall excluded routers routing tables cases cannot evaluate whether algorithm would made correct prediction didnt routes egress router first place classify errors among remaining prefixes terms three cases case 1 route ingress router appear modified routes table appear egress set case 2 route ingress router appears modified routes table appear egress points table case 3 misprediction obvious explanation case 1 errors likely result timing inconsistencies best route ingress router exist egress router routing tables dumped timing inconsistencies also explain case 2 errors example ingress router route reflector could route longer one best ebgp learned routes could happen better route arrives ebgpspeaking router yet propagated routers unable explain 005 errors 74 endtoend validation performed endtoend validation study effect error propagation best routes ultimately predicted em 3 reverse necessarily true egress point may larger igp path cost toplevel rrs certain sets ebgp routes router predictions case 1 case 2 case 3 total errors table 5 summary errors endtoend validation ulator compared emulators prediction four routing tables used validation third module exception input included errors first two mod ules four routers emulator predicted correct routes 99 prefixes summarized table 5 hypothesized majority mispredicted routes could explained dynamics input data example best route ebgpspeaking router temporarily withdrawn time route reflector table captured inconsistencies routing tables could arise 4 results suggest algorithm proposed ac curate prediction errors infrequent result mainly dynamics inputs since prefixes whose routes change frequently receive much traffic 11 inconsistencies would certainly prevent emulator used traffic engineering tasks 8 related work previous work presented igp emulator helps network operators optimize link weights intradomain traffic engineering 3 emulator model changes bgp routing policies effects ibgp path selection also much focus modeling bgp convergence 9 15 first paper model bgp route selection recent work proposes efficient techniques largescale parameter optimization various network protocols including tuning local preference attribute bgp 16 work complementary oursthe proposed search techniques could use emulator inner loop techniques currently use simulators ssfnet 7 depend outcome bgp path selection dynamics would likely benefit efficient accurate emulator inner loop bgp model paper applies several previous theoretical results new ways constraints ibgp configuration present section 3 motivated previouslyderived sufficient conditions ibgp guarantee routing protocols converge stable deflectionfree path assignment 12 17 work specified conditions ensure correct routing behavior constraints also required model bgp routing third phase route prediction algorithm also uses results previous work applied constructive proof regarding stable interas policy configurations 15 ibgp configuration used proof basis third phase algorithm recent work explores practical traffic engineering techniques bgp assumes existence bgp emulator testing traffic engineering techniques offline 8 previously proposed highlevel architecture bgp emulator including decomposition figure 3 second phase algorithm 13 paper present complete design phase algorithm including detailed analysis second phase 4 evaluate hypothesis analyzed feed ibgp update messages collected day 45 prefixes incorrect predictions bgp routing change data collection period router apparent mismatch occurred 83 prefixes experienced update router period argue decomposition models route selection process correctly also describe design implementation emulator based three phases algorithm present evaluation validation 9 conclusion perform everyday network engineering tasks effectively effi ciently minimal unnecessary changes live network operators need way model routing protocol configuration behave deploying configuration paper presented model accurately efficiently predicts outcome bgp route selection process single using snapshot network configuration ebgp learned routes neighboring domains algorithm presented first models outcome bgp decision process across every router without simulating protocol dynamics implemented emulator based model demonstrate algorithm accurate efficient enough used practice many network engineering tasks model presented necessary step advancing state art network engineering believe model bgp emulation tool present several immediate possibilities future work first networkwide bgp route prediction could combined traffic measurements help network operators select bgp configuration changes achieve various traffic engineering tasks second emulator could combined higherlevel mechanisms spot misconfiguration check constraints robustness satisfied 18 finally note modeling bgp routing much difficult future hope routing protocol designers consider ease modeling design goal routing protocols easy model reason make everyday network engineering tasks tractable acknowledgments thanks joel gottlieb tim griffin carsten lund help router configuration data glenn fowler routing table parser also thank magdalena balazinska greg harfst carsten lund stan rost aman shaikh renata teixeira comments draft paper 10 r overview principles internet traffic engineering traffic engineering traditional ip routing protocols netscope traffic engineering ip networks cariden mainstation border gateway protocol 4 bgp4 ssfnet guidelines interdomain traffic engineering stable paths problem interdomain routing experimental study internet stability widearea network failures bgp routing stability popular destinations correctness ibgp configuration networkwide bgp route prediction traffic engineering deriving traffic demands operational ip networks methodology experience stable internet routing without global coordination recursive random search algorithm largescale network parameter configuration analysis med oscillation problem bgp practical verification techniques widearea routing tr deriving traffic demands operational ip networks stable internet routing without global coordination stable paths problem interdomain routing correctness ibgp configuration bgp routing stability popular destinations analysis med oscillation problem bgp recursive random search algorithm largescale network parameter configuration experimental study internet stability backbone failures guidelines interdomain traffic engineering ctr michael liljenstam david nicol ondemand computation policy based routes largescale network simulation proceedings 36th conference winter simulation december 0508 2004 washington dc wolfgang mhlbauer anja feldmann olaf maennel matthew roughan steve uhlig building astopology model captures route diversity acm sigcomm computer communication review v36 n4 october 2006 jaideep chandrashekar zhili zhang hal peterson fixing bgp one time proceedings acm sigcomm workshop network troubleshooting research theory operations practice meet malfunctioning reality september 0303 2004 portland oregon usa renata teixeira aman shaikh tim griffin geoffrey voelker network sensitivity hotpotato disruptions acm sigcomm computer communication review v34 n4 october 2004 renata teixeira timothy g griffin mauricio g c resende jennifer rexford tie breaking tunable interdomain egress selection ieeeacm transactions networking ton v15 n4 p761774 august 2007 renata teixeira timothy g griffin mauricio g c resende jennifer rexford tie breaking tunable interdomain egress selection proceedings 2005 acm conference emerging network experiment technology october 2427 2005 toulouse france nick feamster jennifer rexford networkwide prediction bgp routes ieeeacm transactions networking ton v15 n2 p253266 april 2007 patrick verkaik dan pei tom scholl aman shaikh alex c snoeren jacobus e van der merwe wresting control bgp scalable finegrained route control 2007 usenix annual technical conference proceedings usenix annual technical conference p114 june 1722 2007 santa clara ca renata teixeira sharad agarwal jennifer rexford bgp routing changes merging views two isps acm sigcomm computer communication review v35 n5 october 2005 nick feamster hari balakrishnan jennifer rexford aman shaikh jacobus van der merwe case separating routing routers proceedings acm sigcomm workshop future directions network architecture august 3030 2004 portland oregon usa renata teixeira jennifer rexford measurement framework pinpointing routing changes proceedings acm sigcomm workshop network troubleshooting research theory operations practice meet malfunctioning reality september 0303 2004 portland oregon usa hao wang haiyong xie lili qiu yang richard yang yin zhang albert greenberg cope traffic engineering dynamic networks acm sigcomm computer communication review v36 n4 october 2006 steve uhlig olivier bonaventure designing bgpbased outbound traffic engineering techniques stub ases acm sigcomm computer communication review v34 n5 p89106 october 2004 gerhard kramer ivana mari roy yates cooperative communications foundations trends networking v1 n3 p271425 august 2006