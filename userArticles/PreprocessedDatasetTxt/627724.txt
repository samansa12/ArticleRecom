temporal access control mechanism database systems abstractthis paper presents discretionary access control model authorizations contain temporal intervals validity authorization automatically revoked associated temporal interval expires proposed model provides rules automatic derivation new authorizations explicitly specified positive negative authorizations supported formal definition concepts presented paper together semantic interpretation authorizations derivation rules clauses general logic program issues deriving presence negative authorizations discussed also allow negation rules possible derive new authorizations basis absence authorizations presence type rules may lead generation different sets authorizations depending evaluation order approach presented based establishing ordering among authorizations derivation rules guarantees unique set valid authorizations moreover give algorithm detecting whether ordering established given set authorizations rules administrative operations adding removing modifying authorizations derivation rules presented efficiency issues related operations also tackled paper materialization approach proposed allowing efficiently perform access control b introduction many realworld situations permissions temporal dimension usually limited time may hold specific periods time general however access control mechanisms provided part commercial data management systems temporal capabilities typical commercial relational dbms rdbms example possible specify using authorization command language user may access relation day week need arises authorization management access control must implemented application program level approach makes authorization management difficult possible thus need adding temporal capabilities access control model appears strong pointed also thomas sandhu 11 paper present authorization model extends conventional authorization models like provided commercial rdbmss temporal capabilities temporal authorization model based two main concepts first concept temporal interval authorizations authorization time interval associated representing set time instants authorization granted authorization expires associated time interval elapsed second concept temporal dependency among authorizations temporal dependency seen rule allowing authorization derived presence absence another authorization temporal dependency used example specify user authorization long another user different authorization four different temporal dependency operators provided model temporal dependencies expressed form derivation rules rules may parametric single rule may denote set dependencies example single derivation rule may specify user read files another user read relatively interval time besides temporal capabilities model supports positive negative authorizations capability supporting explicit denials provided negative authorizations used specifying exceptions supporting stricter control case decentralized authorization administration 5 combination positivenegative authorizations temporal authorizations results powerful yet flexible authorization model critical issue model represented presence derivation rules allow derive new authorizations basis absence authorizations one point view rules provide expressiveness representation temporal dependencies another point view introduce problem generating unique set authorizations indeed given set authorizations derivation rules may generate different sets authorizations depending evaluation order avoid problem impose syntactical restriction set derivation rules show condition guarantees uniqueness set derived authorizations paper show also problem related problem negation logic programming another issue discussed paper efficiency access control whenever access must enforced system must check whether appropriate authorization present authorization catalogs whether inferred authorizations catalogs derivation rules activity inferring authorization rather expensive like performing query deductive database thus materialization approach adopted approach similar view materialization approach used deductive relational databases 6 8 approach results view calculated stored view defined rather recomputed time view queried use similar time new authorization added authorizations inferred calculated stored authorization catalogs thus access control efficient since difference costs explicit authorizations derived authorizations note administrative operations become expensive much less frequent access control moreover use proper maintenance algorithms update materialized authorizations without need recomputing upon execution administrative requests time issues access control derivation rules authorizations come attention researchers recently kerberos system 10 based clientserver architecture provides notion ticket needed requiring service server associated validity time validity time used save client need acquire ticket interaction server ticket mechanism used grant accesses resources managed system rather used denote client authenticated authentication server thus scope temporal ticket mechanism different access control model woo lam 13 proposed general formalism expressing authorization rules language specify rules almost expressive power first order logic major issue formalism tradeoff expressiveness efficiency seems strongly unbalanced approach think important devise restricted languages focusing relevant properties temporal authorization model propose paper step direction logic language stating security specifications based modal logic proposed abadi et al 1 however logic mainly used model concepts roles delegation authorities framework provide mechanism express temporal operators authorization derivation preliminary version authorization model presented paper presented bertino bettini samarati 4 model presented paper number major differences respect previous model current model supports positive negative authorizations provides substantial extensions derivation rules particular current model derivation rules also temporal interval validity extension coupled negative positive authorizations leads several interesting questions concerning theory implementation investigate current paper investigate also efficiency issues proposing materialization strategy computing set valid authorizations giving algorithms maintenance materialization paper deal discretionary access control mandatory access control note however majority dbms provide discretionary access control therefore since focus research extend authorization facilities provided conventional dbms address discretionary access control recent multilevel dbms like trusted oracle 9 provide mandatory access control coupled discretionary access control new features provided model could orthogonally incorporated systems well remainder paper organized follows section 2 describes authorization model giving basic definitions examples section 3 present formal semantics authorizations derivation rules explain problems due presence negations rules sufficient condition guarantee presence unique set derived authorizations algorithm checking condition given section 4 show valid authorizations computed administrative operations allow users add remove modify temporal authorizations rules described section 5 efficiency issues concerning need updating set valid authorizations upon administrative operations considered section 6 lack space refer reader interested proofs 3 2 authorization model section illustrate authorization model keep authorization model general thus applicable protection information different data models make assumptions underlying data model accesses must controlled access modes users exercise system choice data model access modes executable objects model made system initialized following u denotes set users set objects set access modes executable objects model allows specification explicit authorizations stating permission denial users exercise access modes objects derivation rules stating permission denial users exercise access modes objects conditioned presence absence permissions denials authorization derivation rule time interval associated indicating time authorizationrule applicable assume time discrete particular take model time natural numbers total order relation ready introduce temporal authorizations derivation rules 21 temporal authorizations model positive negative authorizations specified positive authorizations indicate permissions whereas negative authorizations indicate denials access authorizations formally defined follows definition 21 authorization authorization 5tuple sompng s2 u user authorization granted o2 object authorization refers m2 access mode privilege authorization granted pn2 f gammag indicates whether authorization positive negative gamma g2 u user granted authorization tuple somg states user granted access mode object user g tuple somgammag states user forbidden access mode object user g consider temporal constraint associated authorization refer authorization together temporal constraint temporal authorization temporal authorizations defined follows definition 22 temporal authorization temporal authorization pair time auth time authorization temporal authorization 1 2 sompng states user g granted user authorization positive negative mode object holds times 1 2 example authorization 1050johno 1 readbob states john read object instants 10 50 authorization granted bob note authorization without temporal constraint represented temporal authorization whose validity spans time authorization granted infinity following given temporal authorization b e sompng denote sa oa respectively subject object privilege sign authorization positive negative grantor starting ending time 22 derivation rules additional authorizations derived authorizations explicitly specified derivation based temporal propositions used rules allow new temporal authorizations derived basis presence absence temporal authorizations derivation rules applied positive well negative authorizations like authorizations derivation rules time interval associated time interval associated derivation rule indicates set instants rule applied derivation rules also contain variables specification refer derivation rules terms authorizations explicitly specified ground derivation rules derivation rules containing variables parametric derivation rules 221 ground derivation rules ground derivation rules defined follows definition 23 ground derivation rule ground derivation rule defined b e 1 hopi 2 time interval associated rule b 2 e authorizations user specified rule hopi one following operators whenever aslongas whenevernot unless rule b e states user 1 authorized pn denied pn according presence absence depending operator authorization formal semantics temporal operators used derivation rules given section 3 intuitive semantics follows derive 1 instant b e 2 given derived example rule r 1 figure 1 specified sam states every time 735 ann read object thanks authorization granted sam also chris read object derive 1 instant b e 2 either given derived instant b note unlike whenever operator aslongas operator allow derive 1 instant b e exists instant 0 b 0 2 given cannot derived 0 derive 1 instant b e 2 neither given derived derive 1 instant b e 2 neither given derived instant b note unlike whenevernot unless operator allow derive 1 instant b e exists instant 0 b 0 2 given derived 0 example 21 consider authorizations derivation rules illustrated figure 1 following temporal authorizations derived authorizations 1 2 rule r 1 authorization 1 rule r 2 411 johno 1 readsam rule r 3 r1 735 chriso1readsam whenever anno1readsam r2 1035 matto1readsam aslongas anno1readsam figure 1 example authorizations derivation rules ffl 59 bobo 1 readsam rule r 4 ffl 59 jimo 1 readsam rules r 4 r 5 222 authorizations derivation rules specification proceeding illustrate semantics derivation rules authorizations need make remark authorizations rules model users explicitly authorized specify authorizations derivation rules administrative privileges give users authority granting accesses objects users either directly explicit authorizations indirectly derivation rules three different administrative privileges considered refer administer semantics privileges follows ffl refer user refer privilege object refer object derivation rule ie object appear right temporal operator derivation rule specified user ffl administer user administer privilege object grant revoke users authorizations access object either explicitly rules ffl indicates possession object user creates object receives privilege privilege allows user grant revoke access authorizations well grant revoke administrative privileges object administrative authorizations ie authorizations administrative privileges constrained specific time interval hold time specified time revoked objects owner however sake simplicity uniformity respect authorizations associate time intervals also administrative authorizations time interval associated administrative authorization spans time authorization specified 1 administrative authorizations formally defined follows definition 24 administrative authorization administrative authorization defined time interval associated authorization 2 u user authorization granted object authorization specified p administrative privilege granted instance administrative authorization 201 johno 1 administer states john administer privilege object therefore grant users access authorizations starting time 20 authorization b e 1 require administer privilege moreover derivation rule following conditions must satisfied either administer privilege either administer refer privilege conditions checked time authorizationrule specified insertion autho rizationrule accepted conditions satisfied 1 223 parametric derivation rules derivation rules also use variables specification refer rules parametric derivation rules introduce parametric derivation rules first give definition authorization pattern definition 25 authorization pattern authorization pattern ap tuple sompng sg gammag symbol special character denoting user object access mode depending position authorization pattern definition 26 matching authorization authorization matches pattern ap element equal corresponding element ap different parametric derivation rules defined follows definition 27 parametric derivation rule parametric derivation rule defined authorization patterns elements definition 23 authorization patterns rule must verify following conditions least one element among sap 1 different ffl symbol used sap 1 used corresponding element sap 2 elaborate section 5 r1 11 chrissam whenever samfriendssam figure 2 example parametric derivation rules parametric derivation rule seen shorthand specifying several ground derivation rules operating different subjects objects access modes given parametric derivation rule refer ground rules corresponds instances parametric rule expressed following definition definition 28 parametric rule instances let derivation rule set instances r set composed possible ground derivation rules b e hopi matches ap 1 matches ap 2 following conditions note instances derived parametric rules must also satisfy constraints administrative privileges illustrated previous section rules following example illustrates use parametric derivation rules example 22 sam wishes grant authorization exercise certain number access modes certain objects group friends chris matt jim instead specifying one authorization every access mode every object friends sam proceed follows new user samfriends playing role group defined user sam wishes include group whenever rule parametric object access mode defined authorization left operator subject user identifier authorization right subject samfriends see figure 2 time interval associated rule interpreted time interval user appearing left considered member group samfriends example rules r 1 r 2 r 3 figure 2 allow given positive authorization specified samfriends derive authorization chris matt jim respectively rule r 2 expires time 100 intuitively time matt considered anymore member group hence time interval associated authorizations derived matt ending time equal 100 4 example sam appears grantor authorization right operators rules r 1 r 3 hence authorizations chris matt jim derived authorizations granted samfriends sam sam require rules fire regardless grantor authorizations samfriends putting grantor right side rules r 1 r 3 3 formal semantics section formalize semantics temporal authorizations derivation rules first necessary point possibility express negative authorizations introduces potential conflicts among authorizations suppose negative authorization privilege object granted user previously obtained privilege object given time interval presence negative positive authorizations intended inconsistency since consider negative authorizations prevailing respect positive authorizations considering set authorizations rules figure 2 rule r 3 authorization 4 derive authorization 5 501jimo 2 writejohn inconsistency since apply denialstakeprecedence principle hence negative authorization prevails jim authorization write object interval 1049 formal semantics obeys denialstakeprecedence principle start description formal semantics introducing concept tab definition 31 temporal authorization base temporal authorization base tab set temporal authorizations derivation rules rest paper denote insttab tab parametric rule substituted set instances according definition 28 obviously tab insttab equivalent semantics tab given set clauses general logic program corresponding insttab use logic two sorts natural numbers temporal sort generic domain sort language includes constant symbols natural numbers finite set constant symbols eg elements temporal variable symbols include temporal predicate symbols fixed interpretation corresponding order relation natural numbers predicate symbol f temporal arity 1 domain arity 5 predicate symbols fn fg temporal arity 2 domain arity 5 predicate symbol g temporal arity 1 domain arity 3 resulting language similar temporal deductive language proposed 2 main difference presence negation rules type authorizationrule insttab table 1 reports corresponding clauseset clauses intuitively predicate f used represent authorizations specific instants fact f true interpretation corresponds validity instant according interpretation predicates g fn fp auxiliary predicates used avoid quantification intuitively gt true interpretation least one negative authorization som valid instant according interpretation fn 00 true interpretation least instant 0 00 authorization false according interpretation fp 00 true interpretation least instant 0 00 authorization true according interpretation denote logic program corresponding tab ptab consider stable model semantics logic programs negation 7 identify models 2 ptab definition 32 valid authorization given model ptab authorization said valid time respect f contained ptab unique model contains f simply say valid time 31 restrictions rules important property require set temporal authorizations rules must always able derive unique set valid authorizations means example set rules together fixed set explicit authorizations derive different authorizations depending evaluation order give example illustrating different authorizations derived depending evaluation order example 31 consider following rules r r suppose explicit authorizations 1 2 tab rules consider first r 1 derive authorization 1 cannot derive 2 consider first r 2 derive 2 1 hence two different sets derived authorizations case reason give preference one set 4 point view semantics given property always unique set valid authorizations guaranteed exists unique model program corresponding tab hence limit derivation rules unique model computed rest section formally define sets rules avoided order guarantee unique model ptab give algorithm detection following use term negative operator negop refer whenevernot unless negative rule refer rule using negative operator similarly positive operator posop used refer whenever aslongas present operator presentop used refer whenever whenevernot 2 due properties resulting program case stable models identical wellfounded models 12 gt f gamma g table 1 semantics temporal authorizations rules past operator pastop used refer unless aslongas moreover use symbols shortcut 5tuple binary relation among temporal authorizations appearing insttab defined follows ffl rule b e hopi insttab hopi arbitrary operator b tt e relation represents dependency instant instant hopi negative operator say represents strict dependency ffl rule b e hpastopi insttab represents strict dependency using relation define complex notion priority among temporal authorizations definition 33 priority authorization time higher priority authorization time one following conditions holds ffl sequence ta 1 exists least one relationships strict dependency ffl two sequences ta 1 l exist sa l l l ffl authorization l instant 00 exist l 00 l note second condition definition implies negative authorization higher priority positive counterpart instant ready identify critical sets derivation rules definition 34 critical set tab contains critical set rules authorization insttab instant exist instant priority example 32 consider set rules r 1 r r 3 three rules form critical set easily checked definition 34 applies set rules deed first condition definition 33 rules r 1 r 2 bobo 1 writejim41 second condition first condition rule r 3 obtain johno applying twice third condition transitivity bobo 1 writejim41 hence set rules critical 4 csd critical set detection algorithm described next subsection used recognize reject tab containing critical set 32 algorithm critical set detection use set disjoint 3 intervals compact notation set natural numbers included intervals hence operations union 1 2 intersection usual semantics set operations however implement operations performed using intervals giving result set disjoint intervals use two kinds set membership 2 true one natural numbers represented exactly one disjoint intervals given insttab algorithm critical set detection returns false critical set exists tab otherwise returns sequence sets levels hl representing partition set pairs ha ti authorization appearing either explicitly rule insttab instant 1 tmax define tmax first instant greater maximum temporal constant appearing insttab following refer set l level pair ha level say level 2 intuitively authorizations appearing lower levels certain set instants higher priority evaluation authorizations appearing higher levels different sets instants algorithms paper use functions add delete adddelete modify pairs ha result statement add ha l addition pair l l otherwise replacement ha analogously result delete ha l deletion pair l pair ha replacement ha algorithm reported figures 34 5 works follows step 1 tmax substituted occurrence symbol 1 time intervals associated authorizations rules insttab need consider time instants 1 instants greater tmax authorizations valid remain unchanged critical set exists found time lower equal tmax step 2 maxlevel determined number authorizations appearing insttab multiplied tmax maxlevel corresponds number pairs ha ti partitioned number levels toplevel initialized 1 level initially contains authorizations insttab instant 1 tmax step 3 recursively calls function checklevels examines authorizations different levels dependencies among authorizations possibly changes level pairs ha basis dependency loop step 3 ends last call checklevels change level level number greater maxlevel first case levels constructed algorithm returned second case false returned function checklevels composed three steps step 1 levels toplevel 1 examined negative authorization found given level l certain set time intervals nl level positive authorizations subject object access mode appearing level lower l 3 two intervals considered disjoint cannot collapsed single one note 1 2 3 4 disjoint algorithm 31 critical set detection csd algorithm input insttab output false critical set detected otherwise sequence sets representing partition set pairs ha ti appears insttab 1 max set l called level l ji set time intervals associated j level 1 temporal authorization rule time limit 2 maxlevel nautht max nauth number authorizations appearing insttab toplevel authorization appearing insttab endfor 3 repeat checklevels changes level toplevel maxlevel 4 return false toplevel maxlevel sequence figure 3 algorithm critical set detection increased l 1 time instants nl step 2 rules evaluated levels examined decreasing order starting toplevel every time authorization found level l time interval nl disjoint b e function update called increase level time instants appearing nl b e new level l operator rule whenever l 1 whenevernot step 2 rules evaluated levels examined decreasing order starting toplevel every time authorization found level l time interval nl disjoint b e function update called increase level time instants greater equal minimum instant l new level l instant l l 1 instants b e greater function update given level lev authorization set time intervals brings authorization level lev time instant appears levels lower lev example 33 consider tab containing following authorizations rules 4060a 2jjohn indicates negative authorization subject object access mode 2 john grantor algorithm critical set detection returns following levels correctness csd algorithm model uniqueness following two theorems state properties levels returned csd algorithm respect dependencies among authorizations theorem 31 let n two authorizations appearing insttab 0 two time instants lower equal max n 0 either algorithm returns false end execution authorization instant 0 appears level higher equal authorization n instant strict dependency instant 0 appears level higher n instant theorem 32 let n two authorizations appearing insttab subject access mode object different sign either algorithm returns false end execution positive authorization appears level higher negative authorization time instant 1 max correctness csd algorithm stated following theorem theorem 33 given tab csd algorithm terminates ii returns false value tab contains critical set observed purpose determining authorization state system certain instant uniqueness ptab model instant required uniqueness model absence critical sets guaranteed following theorem theorem 34 given tab critical sets corresponding logic program ptab unique model 4 materialization authorizations model control whether request access object given access mode authorized may require evaluation several rules two different strategies used enforce access control function checklevelshl 1 l partition set pairs ha l ig h sams oamo mamm delete endfor endfor endfor endfor 2 rule tr l toplevel tr 6 f g l 1 case hpresentopi endcase tr tr n nl endif l endwhile endfor 3 rule l toplevel case hpastopi aslongas l f update l update unless update l endcase endif l endwhile endfor figure 4 function checklevels function lev toplevel toplevel lev endif 6 f g h 1 delete endif endwhile figure 5 function update runtime derivation every time user requires access system verifies whether access request authorized basis authorizations derivations rules tab computing necessary derived authorizations materialization system permanently maintains valid authorizations explicit derived upon access request system immediately check whether valid corresponding positive authorization exists approaches pros cons first approach advantage actions required upon modification tab however access control becomes cumbersome since access request may require computation derived authorizations second approach runtime computation avoided price explicitly maintaining derived authorizations updated every time tab modified generally access requests considerably frequent administrative requests modifying authorizations andor rules argue second approach preferable moreover drawback provided need recalculating explicit authorizations upon modifications tab overcome application efficient algorithms update materialized authorizations upon modifications without need reconsidering rules recomputing materialized authorizations reasons adopt materialization approach following illustrate compute given tab corresponding valid authorizations section 6 provide algorithms reflecting changes tab materialized authorizations without need recomputing authorizations beginning definition 41 temporal authorization base extent temporal authorization base extent tabext tab set valid authorizations derived tab tabext contains valid authorizations tab computed according semantics explicit authorizations derivation rules authorizations maintained tabext using compact representation k associated set k disjoint intervals representing instants k valid time t0 tabext contain explicit derived authorizations upon execution administrative operation grantrevoke authorizations rules tabext updated reflect effects operation execution strategy maintaining explicit derived authorizations adopted beginning necessary populate tabext explicit authorizations derivation rules already present tab critical set csd algorithm returns sequence levels hl authorization corresponding set instants partitioned among k levels sequence essential establish evaluation order guarantees computed tabext contains valid authorizations algorithm 41 reported figure 6 computes tabext tab algorithm receives input tabs instantiated version insttab sequence hl given csd algorithm algorithm based technique used compute model locally stratified logic programs intuitively rule instances authorizations partitioned among finite number levels according priority relation inferences certain level performed possible inferences lower levels performed main step algorithm step 2 iteration k levels returned csd algorithm level starting constructs set x authorizations rules available level precisely x contains pairs element insttab x explicit authorization b e rule b e hopian 0 set intervals representing instants level instant b derives new authorizations drawing possible inferences level using elements x authorizations previously derived last step algorithm step 3 extends intervals derived authorizations basis following observation derived authorization instant max guaranteed authorization derived instant greater max fact due particular form rules formally proved part proof theorem 41 following example illustrates application algorithm tabext generation algorithm 41 input output csd algorithm insttab valid authorization interval g sequence hx xt b te xt b te hopi 0 g x initialized empty i1 k construction x element x insttab xt b te xt b te hopian endfor b construction tabext repeat element hx endfor new authorization derived endfor ha tabext 1 function case op aslongas b 2 2tn else unless else endif endcase pnam return figure algorithm tabext generation example 41 consider tab illustrated example 33 levels computed csd algorithm illustrated example apply algorithm tabext generation let tab ext tabext resulting ith iteration ffl 2b tab 1 since h10 200 1 f10 200gi element x 1 authorizations tab 1 blocking 1 ffl 2a 80gig 2b h40 60 2jjohn whenevernot 3 f40 60gi authorizations tab 1 ext obtain h5 100 2 whenever 1 f5 39 61 100gi obtain hence tab 2 80gig ffl 2a 2b function deriveauthh5 100 2 whenever 1 f40 60gi tab 2 returns since authorization time interval 4060 80gig ffl levels 201 example appear tab 3 ext hence algorithm terminates returning tab 3 ext correctness algorithm stated following theorem theorem 41 given tabext returned algorithm 41 authorization valid time exists ha tabext 2 updated tabext access request checked tabext access request user 1 exercise access mode 1 object 1 time allowed pair ha exists tabext sas 1 oao 1 mam 1 pna 2 5 tab administration administrative operations allow users add remove modify temporal authorizations derivation rules give revoke users right administer objects refer derivation rules temporal authorization derivation rule tab identified unique label assigned system time insertion label allows user refer specific temporal authorization derivation rule upon execution administrative operations following discuss administrative operations considered model syntax operations bnf form given table 2 reference figure non terminal symbols hsubjecti hobjectihaccessmodei hauthti hnatnumberi represent elements domains f gammag respectively non terminal symbols haidi hridi represent system labels symbol used specification starting time authorizationrule indicate time administrative request submitted system administrative requests affect access authorizations derivation rules administrative authorizations follows requests affecting authorizations object requests granting revoking authorizations object user requesting must either administer privilege object grant grant access mode object subject specified time interval grant operation results addition new temporal authorization starting time authorization must greater equal time authorization inserted possible specify retroactive authorizations deny deny access mode object subject given time interval deny operation results addition new temporal negative authorization revoke revoke access mode object subject revoke operation required reference single authorization specifying label ie deletion specific authorization requested reference access mode object respect given time interval revoke operation results deletion modification temporal authorizations revokee access mode object granted user revokes privilege time interval revocation requested spans time request 1 authorizations access mode object granted revokee revoker deleted revocation required specific time interval authorizations access mode object granted revokee revoker deleted modified exclude interval possibly split authorizations note user revoke authorizations granted revoke request user affects authorizations granted specific user revoke negation revoke negation access mode object subject analogous revoke operation exception applies negative authorizations ffl requests affecting rules requests specifying deleting rules user requesting must either administer privilege object appearing left operator either administer refer privilege object appearing right operator addrule add new derivation rule grantor authorization appearing left temporal operator identifies user inserting rule like authorizations starting time interval associated rule must greater time request specified droprule drop derivation rule previously specified operation requires argument label rule deleted like revocation authorizations user drop rules specified ffl requests affecting administrative authorizations requests granting revoking administrative privileges object executed owner object grantadm grant administer privilege object subject results new administrative authorization spanning time request 1 revokeadm revoke administer privilege object subject results deletion authorization administer privilege object previously granted revokee ii deletion authorizations object derivation rules object appears authorization left operator specified revokee revokee reference privilege object also derivation rules object appears authorization right operator deleted grant refer privilege object subject revokeref revoke refer privilege object subject results deletion authorization refer privilege object previously granted subject deletion rules granted revokee object appears authorization right operator grant haccessmodei hobjecti hsubjecti hdenyi deny haccessmodei hobjecti hsubjecti revoke haccessmodei hobjecti hsubjecti revoke negation haccessmodei hobjecti hsubjecti hgrantadmi grantadm hobjecti hsubjecti hrevokeadmi revokeadm hobjecti hsubjecti hgrantrefi grantref hobjecti hsubjecti hrevokerefi revokeref hobjecti hsubjecti table 2 syntax administrative operations 6 tabext maintenance execution administrative operations illustrated previous section change set valid authoriza tions tabext modified accordingly instance insertion explicit authorization cause deletion authorizations tabext happens authorization appears right side negative rule negative authorization similar problem arises authorization deletion devised set algorithms update tabext upon administrative request without need recomputing materialized authorizations algorithms use methods similar employed maintenance materialized recursive views negation 8 maintenance algorithms make use sequences defined section 4 permanently stored updated reflect changes tab approach exploits fact authorizations tab ext derived using authorizations tab igamma1 ext rules x thus change authorizationrule level affect authorization tab j ext authorizations ext need reconsidered following illustrate algorithm updating tabext upon insertion new positive autho rizations based dred algorithm 8 methods maintain tabext insertiondeletion negative authorization deletion positive one similar positive authorizations insertion refer reader 3 description algorithms ones insertiondeletion derivation rules 61 insertion explicit positive authorizations algorithm figure 7 implements maintenance tabext insertion explicit positive au thorization receives input tabext insttab corresponding sequences hl positive authorization returns tab u ext set valid authorizations resulting insertion positive authorization updated sequences hl 0 algorithm works follows suppose positive authorization b e k inserted inserted authorization appear insttab time interval exceeds tmax necessary recompute sequence hl authorizations partitioned csd algorithm partition authorizations among levels changes number levels could increase step 1 step 2 positive authorization inserted insttab step 3 iteratively considers elements hat tabext replaces symbol 1 tmax step 4 initializes ins sdel tab u ext ins sdel two data structures containing authorizations inserted deleted tab u ext till current point computation authorizations kept ins sdel using representation tabext step 5 algorithm computes l min least level authorization k appears instant time interval operations tabext maintenance executed starting level l min step 6 computes sets x 0 case x 0 since insertion new authorization change levels authorizations insttab step 7 iteration levels returned csd algorithm starting level l min level algorithm performs following operations ffl compute set x 0 adding x element ha set time intervals representing time instants inserted authorization level ffl compute set time intervals representing time instants inserted authorization level blocked negative authorization ffl insert element ha k ins tab u ffl call function dredext computes authorizations level inserted removed tab u ext insertion b finally last step algorithm iteratively considers elements updated tabext substitutes value tmax symbol 1 function dredext given level l authorizations inserted deleted tab u ext till current point computation updates tab u ext according rules fired level l function consists three main steps step adds sdel removes tab u ext overestimate authorizations need deleted insertion b e k authorization added sdel step insertion b e k invalidates derivation authorization elements l step b reinserts tab u ext authorizations deleted previous step alternative derivation reinserted authorizations obviously removed sdel finally step c adds ins tab u ext new authorizations derived derivation rules x 0 l insertion b theorem 61 given tab positive authorization b e k algorithm 61 terminates moreover ii sequence hx 0 computed algorithm correct finally iii tab u ext computed algorithm contains valid authorizations wrt tab b e k following example illustrates algorithm 61 works example 61 consider tab illustrated example 33 set materialized authorizations sets x tab illustrated example 41 suppose time t7 authorization 4050a 3 inserted tab necessary run csd algorithm since upper bound time interval inserted authorization exceed tmax201 3 already appears insttab since l x 0 1 3 considered first iteration step 7 algorithm 61 x 0 inserts h40 50a 3 tab u ext second iteration element x 0 function dredext searches elements 2 n ins ins algorithm 61 insertion explicit positive authorization positive authorization b te k element denoted ha sequence sequence hx ext updated tabext 2 sequence hl 0 sequence hx 0 else k k l 0 ha tabext substitute symbol 1 tmax sins sdel initialized empty tab u ilmin k 9x x 0 else b ft u c add sins tab u hti td dredextsinssdel e f endfor ext substitute value figure 7 algorithm positive authorization insertion function dredexts l repeat hx l pnam else case op endcase else endif endfor sd change b repeat hx l delete endfor sd change c repeat hx l pnam else case op endcase else tab u endif endfor change return hs figure 8 function dredext function case op aslongasunless ts maxftjt2tg endif endcase else return figure 9 function derive element satisfies condition added sdel removed tab u ext third iteration step c function dredext executed fha 2 f40 50gig added ins changes made iteration hence algorithm terminates resulting tab u ext tab u 7 conclusions future work paper presented authorization model temporal capabilities model introduces concept temporal authorization authorization together start expiration time negative well positive authorizations specified derivation rules expressed allow new temporal authorizations derived basis presence absence temporal authorizations four different temporal operators used derivation rules administrative authorizations regulate insertion removal authorizations rules users given formal semantics temporal authorizations derivation rules terms general logic program problem ensuring uniqueness derived authorizations corresponds theoretical issue existence unique model logic program presented approach solve problem based stratification authorizations derivation rules provided algorithm determines whether authorization base stratification proved authorization base stratified unique set derived authorizations always computed performance issues addressed materialization approach derived authorizations explicitly stored proposed algorithms building materialized set derived authorizations maintaining upon execution administrative operations proposed proposed model currently implementation investigate systems performance various characteristics authorization base currently extending work several directions first decentralized authorization administration facilities added model second model extended periodic authorizations capability allows specify example given subject may access data item every thursday also access control based past access histories included model finally plan investigate different temporal logic formalisms constraint logic programming possible foundations temporal authorization models acknowledgment authors wish thank prof michael gelfond useful discussions problems related semantics negation r calculus access control distributed systems representation infinite temporal data queries extended abstract temporal access control mechanism database systems temporal authorization model authorizations relational database management systems deriving production rules incremental view maintenance stable model semantics logic programming maintaining views incrementally authentication service open network systems discretionary access control objectoriented databases issues research directions wellfounded semantics general logic programs authorizations distributed systems new approach tr ctr elisa bertino silvana castano elena ferrari marco mesiti specifying enforcing access control policies xml document sources world wide web v3 n3 p139151 2000 elisa bertino sushil jajodia pierangela samarati flexible authorization mechanism relational data management systems acm transactions information systems tois v17 n2 p101140 april 1999 sushil jajodia pierangela samarati v subrahmanian eliza bertino unified framework enforcing multiple access control policies acm sigmod record v26 n2 p474485 june 1997 elisa bertino claudio bettini elena ferrari pierangela samarati supporting periodic authorizations temporal reasoning database access control proceedings 22th international conference large data bases p472483 september 0306 1996 mizuho iwaihara ryotaro hayashi somchai chatvichienchai chutiporn anutariya vilas wuwongse relevancybased access control evaluation versioned xml documents acm transactions information system security tissec v10 n1 p3es february 2007 mizuho iwaihara somchai chatvichienchai chutiporn anutariya vilas wuwongse relevancy based access control versioned xml documents proceedings tenth acm symposium access control models technologies june 0103 2005 stockholm sweden h f wedde mario lischka rolebased access control ambient remote space proceedings ninth acm symposium access control models technologies june 0204 2004 yorktown heights new york usa michael j covington wende long srividhya srinivasan anind k dev mustaque ahamad gregory abowd securing contextaware applications using environment roles proceedings sixth acm symposium access control models technologies p1020 may 2001 chantilly virginia united states elisa bertino claudio bettini elena ferrari pierangela samarati access control model supporting periodicity constraints temporal reasoning acm transactions database systems tods v23 n3 p231285 sept 1998 elisa bertino silvana castano elena ferrari marco mesiti controlled access dissemination xml documents proceedings 2nd international workshop web information data management p2227 november 0206 1999 kansas city missouri united states avigdor gal vijayalakshmi atluri authorization model temporal data proceedings 7th acm conference computer communications security p144153 november 0104 2000 athens greece franois siewe antonio cau hussein zedan compositional framework access control policies enforcement proceedings acm workshop formal methods security engineering p3242 october 30 2003 washington dc xinwen zhang jaehong park francesco parisipresicce ravi sandhu logical specification usage control proceedings ninth acm symposium access control models technologies june 0204 2004 yorktown heights new york usa xinwen zhang francesco parisipresicce ravi sandhu jaehong park formal model policy specification usage control acm transactions information system security tissec v8 n4 p351387 november 2005 shermann chan qing li jos pino videoacm transitive temporal access control mechanism collaborative video database production applications multimedia tools applications v29 n1 p2953 april 2006 sushil jajodia pierangela samarati maria luisa sapino v subrahmanian flexible support multiple access control policies acm transactions database systems tods v26 n2 p214260 june 2001 nabil adam yelena yesha strategic directions electronic commerce digital libraries towards digital agora acm computing surveys csur v28 n4 p818835 dec 1996 n r adam v atluri e bertino e ferrari contentbased authorization model digital libraries ieee transactions knowledge data engineering v14 n2 p296315 march 2002 vijayalakshmi atluri avigdor gal authorization model temporal derived data securing information portals acm transactions information system security tissec v5 n1 p6294 february 2002 jean bacon ken moody walt yao model oasis rolebased access control support active security acm transactions information system security tissec v5 n4 p492540 november 2002 vijayalakshmi atluri soon ae chun authorization model geospatial data ieee transactions dependable secure computing v1 n4 p238254 october 2004