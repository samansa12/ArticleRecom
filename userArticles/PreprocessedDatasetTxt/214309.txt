case study simulating pcs networks using time warp rapid growth demand mobile communications past years led intensive research development efforts complex pcs personal communication service networks capacity planning performance modeling necessary maintain high quality service mobile subscriber minimizing cost pcs provider need flexible analysis tools high computational requirements large pcs network simulations make excellent candidate parallel simulationhere describe experiences developing two pcs simulation models general purpose distributed simulation platform based time warp mechanism models utilize two widely used approaches simulating pcs networks callinitiated ii portableinitiated models discuss design decisions made mapping models time warp executive characterize workloads resulting models terms factors communication locality computation granularity present performance measurements execution network workstations measurements indicate callinitiated model generally outperforms portable initiated model able capture phenomenon busy line effect moreover studies indicate high locality largescale pcs network simulations make wellsuited execution general purpose parallel distributed simulation platforms b introduction personal communication service pcs network 3 provides wireless communication services nomadic users service area pcs network populated set geographically distributed transmittersreceivers called radio ports set radio channels assigned radio port users coverage area cell radio port send receive phone calls using radio channels user moves one cell another phone call handoff said occur case pcs network attempts allocate radio channel new cell allow phone call connection continue channels new cell busy phone call forced terminate important engineer system likelihood force termination low eg less 1 traditionally analytic models used understand performance characteristics types networks however analytic models often sufficiently general flexible must make simplifying assumptions system parameters make analysis tractable ex ample blocking probability fixed channel assignment pcs network modeled analytically using erlangb system 11 20 however erlangb system appropriate predicting blocking probability p b figure 1 estimating problem size363840 e r 500 1000 1500 2000 impact network size e r c e b impact network size r c simulated sec c impact termination time number portables much larger number available channels resulting p b much greater 1 analytic model fixed channel assignment pcs network network radio channels used cell static number channels per cell constant cannot easily modified study aspects pcs network effect call handoff 17 dynamic channel assignment 1 11 20 call blocking statistics discrete event simulation provides general flexible framework evaluating system models large highcapacity personal communication services pcs networks models excellent candidate simulation pcs simulation network usually represented hexagonal square cells ideally pcs simulation experiments model large networks containing thousands cells however due limited computing resources studies examine smallscale networks containing fewer 50 cells 11 20 output statistics boundary cells usually discarded avoid boundary effect lin mak 12 showed approach may lead biased output statistics suggest using large network wraparound topology achieve reliable simulation results illustrate impact network size consider following portable initiated simulation model using fixed channel assignment scheme portable mobile phone resides cell period time moves another cell phone call arrives radio channel used connect cor assignment strategies increase channel availability intelligently reallocating channels cells based traffic load within cell traffic mobility cochannel interference responding portable channels busy call blocked dropped output measure blocking probability b probability phone call dropped figures 1 b illustrate impact network size experiments assume expected number portables cell n portable resides cell period time paper exponential distribution mean 1 proposed 19 moves one four neighboring cells equal probability call arrivals portable form poisson process arrival rate call holding times exponential distribution mean 1 simulation covers seconds simulated time mean call holding time 1 wrapping effect occurs statistical results produced simulation error cell boundaries wrap back wrapping cells boundaries allows portable edge suddenly move reappear side grid cells unnatural portable movement error introduced call statistics error reduced using larger network work cells figures suggest network size 256 cells required avoid wrapping effect moreover figure 1 c suggests lated seconds required obtain steady state blocking probability 256 5 theta 10 4 seconds number events executed order 10 7 simple cell level simulation larger complex pcs simulations bellcores network operations plan nop architecture pcs includes integration switching elements plain old telephone service pots network estimate number events executed single run depending detail simulation model observed 10 4 10 5 events per second efficient discrete event simulation packages commercial packages often much slower accordingly simulation magnitude require many hours cpu time large simulation programs may require memory available single machine large computational requirements need flexibility pcs network models good candidate parallel simulation 8 impact varying pcs simulation parameters time warp mechanism investigated 2 paper extends work examines experiences executing pcs simulation models distributed time warp system particular discuss approach mapping pcs models distributed simulator characteristics workload model impact efficiency distributed simulator performance system developed pcs models fall two types models callinitiated 9 17 portableinitiate 19 12 study consider types models models described section 2 section 3 describes design decisions made map models time warp based distributed simulation environment section 4 characterizes workload bothpcs models discusses aspects workload impact distributed simulator section 5 describes implementation details distributed time warp environment presents performance data collected executing simulations collection workstations section 6 concludes reflecting learned study suitability pcs simulations parallel simulation ii important design implementation models enable efficient execution time warp system 2 description pcs models section describe callinitiated portable initiated models primary difference two models callinitiated model simulates behavior portable phone conversations portable initiated model tracks movement portables even figure 2 callinitiated model flowchart call processing within single cell call arrival denotes new call arriving cell call handoff cell assign channel call complete going call release channel move move neighboring cell release channel call arrival channel available call blocked conversations implication differences discussed detail callinitiated model organized around two object types cell call cell represents area covered cellular receivertransmitter fixed number channels allocated call represents active phone conversation depicted figure 2 call arrives cell channel availability determined channel available call counted blocked channel available assigned call call completes occupied channel released portable call connected leaving cells area 2 allocated channel released call handedoff destination cell handoff destination cell realized call arrival event neighboring cell channel neighboring cell available call counted handoff block also known forced termination channel available call reconnects continues without interruption portableinitiated model also organized around two object types cell portable previous model cell represents cellular receivertransmitter fixed number channels allocated portable represents mobile phone unit resides within cell period time moves one four neighboring cells shown figure 3 new call arrives cell cell first determines status destination portable destination portable busy another call call counted busy line busy line occurs portable currently connected phone call another phone call arrives portable callinitiated model notion busy line one fundamental differences two models important effect call statistics portable busy cell determines channel availability channels busy call counted call block channel available allocated destination use call allowed connect call progress portable tracks location portable determines moving current cells signal range drops currently used channel requests channel neighbor cell moving channels neighboring destination cell busy call counts assume portable movement exponentially distributed figure 3 portableinitiated model flowchart call processing within single cell portable arrival denotes portable entering cells area assign channel call arrived call complete going call release channel channel available busy call blocked busy line move move move neighboring cell release channel portable arrival handoff handoff block channel available call reconnects continues without interruption b computed total number blocked calls busylines divided total number call attempts reflect call blocking probability due network congestion busylines subtracted total number blocked calls prior computing p b table 1 shows blocking probability p b significantly lower model blocking probability callinitiated model reason difference busy lines explicitly simulated portableinitiated model reduce number blocked calls simulation simulating busylines calls may blocked due insufficient network resources counted busylines reduces number call blocks computing p b reduction number blocked calls called busyline effect accordingly portableinitiated model fewer blocked calls callinitiated model busylines number call attempts difference p b two models decrease number portables per cell grows fixed number channels per cell number portables per cell becomes larger number call attempts grows resulting larger demands placed network resources network demand rises p b rise impact busylines p b decrease accordingly portableinitiated model used number portables per cell large busy line effect significant impact p b large number portables per cell callinitiated model appropriate seen later callinitiated model efficient simulated less time portableinitiated model computational requirements models discussed implementation section focuses howwe mapped simulation model distributed simulator emphasizing design implementation decisions rationales decisions made along way 31 distributed simulators distributed simulator consists collection logical processes lps modeling distinct component system modeled lps communicate exchanging timestamped event messages like existing distributed simulation protocols assume different lps may share state variables modified simulation synchronization mechanism must ensure lp processes events timestamp order order prevent events simulated future affecting past synchronization issue widely studied eg see 4 6 13 16 time warp mechanism uses detectionandrecovery protocol synchronize computation detailed discussion time warp mechanism refer reader 4 10 32 implementing pcs models natural way map pcs models general purpose sequential simulator would realize callportable simulation process cells state variables call initiated model call arrival cell could simulated creating call lp would persist call completes forced terminate handoff another cell portableinitiated model call arrival cell could simulated scheduling call arrival event particular portable lp model portable lp would persist duration simulation however approach poses problem time warp exe cution callinitiated model call handedoff another cell channel destination cell must available implies call lp must access cells state information particular cells channel availability cell state information must therefore shared among several call lps sharing state information allowed time warp widely used solution problem implement cell lp accesses cell lps state information realized exchanging timestamped messages lps carry values requested state vari ables however pcs models whenever call arrives portablecall lp would need exchange timestamped messages cell lp determine channel availability overhead associated messages becomes large particularly call portable migrated cell different processor cost prohibitive distributed environment communications expensive order avoid sharing state lps realized cells lps callsportables timestamped messages travel among cell lps mapping cells lps standard technique used applications 18 mapping call portables timestamped messages reasonable approach modeling perspective viewed model flowcharts figures 2 3 models call portable arrives channel availability must determined since message denoting call arrival sent cell lp call processed channel availability information accessible callportable contained within call arrival message moreover portableinitiated model portable availability portable engaged phone call must also determined cell since call arrival message carries portables state information portable availability known cell using mapping handoff pcs models realized message sent two cell lps destination cell lp views handoff callportable arrival accordingly phases call processing pcs models mapping guarantees necessary state information available without additional overhead exchanging timestamped messages drawback approach fewer lps thus less parallelism simulator present context serious handicap noted earlier required simulations contain hundreds thousands cells thus sufficient number lps computing platforms available study amount parallelism within cell limited large extent dependencies arising accesses cell lps state information table 1 compare p b callinitiated portableinitiated models across varied pcs parameters pcs parameters callinitiated p b portableinitiated p b mins 3308 1752 pcs models behavior callportable realized 4 different types events nextcall denotes call arrival ii completioncallwhich denotes completed call cell ie call blocked iii moveout denotes call moving current cell iv movein denotes arrival handoff call cell initialize callinitiated simulation cell sends initial event invokes startup method event procedure upon processing startup method cell initialize schedule arrival first call cell scheduling event future invoke nextcall method call contains two independent timestamp fields call completion move timestamps call completion timestamp represents time phone call complete move timestamp represents time call leave current cell reside one neighboring cells minimum two timestamp fields determines event type cell destination call call arrivals generated scheduling next call arrival end processing nextcall method accordingly cell lp determines call arrivals sends messages simulation selfinitiating impacts performance distributed simulation discussed later detailed analysis performance bounds selfinitiating simulations refer reader 15 portableinitiated simulation similar call initiated model initialization cell sends initial event invokes startup method upon processing startup method cell initialize schedule fixed number messages containing portable portable contains three independent timestamp fields call completion next call move timestamps callinitiated model calls contained two independent timestamps call completion move timestamps call completion move timestamps meaning models however additional next call timestamp contained portableinitiated simulation represents time next call arrive primary purpose next call timestamp determine busy lines occur minimum three timestamp fields determines type event scheduled cell portable arrivals generated determining portable receive next call arrival based nextcall timestamp accordingly like callinitiated model portableinitiated model also selfinitiating models callportable interarrival times callportable completion times callportable move times exponentially distributed though one could trivially substitute distributions simulation program 4 workload characterization section characterize workload pcs model first quantify workload terms pcs model application parameters discuss characteristics relevant performance distributed simulator 41 model parameters pcs models following application parame ters callportable mobility ii call interarrival time iii number cells iv number callsportables parameters discussed mobility callsportables determines frequently callsportables move different cell turn determines frequently lps communicate recall previous discussion time cell lps communicate handoff portablecall lps communicate frequently number messages sent processors increases increases distributed simulator overheads leading slower execution times section 5 present performance data supports hypothesis call interarrival time determines amount work available simulator given period simulated time modest size pcs networks call interarrival time significant impact rate simulation progresses simulated time determine likely simulation roll back fixed amount lookahead faster rate progress likely simulation roll back lookahead defined amount simulated time lp see future discussed detail later large pcs networks workload sufficient change call interarrival times impact sim ulations rate progress effect likelihood rollbacks occur section 5 present performance data supports hypothesis number cells determines number lps time warp simulation 1024 lps used experiments presented study large number lps selfinitiating nature simulation implementation amount available parallelism high also number cells determines amount memory needed state saving next number portables portableinitiatedmodel determines number pending events experiments presented study n number portables per cell varied among accordingly total number pending events simulation ranges 25 000 75 000 contrast number calls callinitiated model determine number pending event model n portables per cell callinitiated model call interarrival time call interarrival time portableinitiated model divided number portables per cell also call initiated model call persists long conversation lasts forced terminate accordingly number pending events bounded number channels simulation experiments presented study number channels per cell fixed 10 making number pending events simulation order 10 000 number portables additionally number callsportables per cell pcs models impacts rate simulated time advances increasing number portables portableinitiated simulation results increasing amount work lp must perform similarly increasing number calls call initiated simulation increases rate calls arrive respect simulated time increases amount work lp must perform 42 workload properties general following properties significantly impact performance time warp based distributed simulators lookahead lps ii event granularity iii state saving heads iv message data size v locality communications vi homogeneity model simulated previously stated lookahead determines far simulated future lp predict future events 5 shown lookahead significantly affect performance time warp simulators small message densities however since pcs models contain large message densities impact lookahead system performance may large timestamps determining call interarrivals call completions mobility exponentially distributed model implementations lookahead 0 worst case lookahead improved precomputing portions computation future events 14 pcs models discussed study possible precompute call completion times result increase average lookahead simulation however improvement reduces extensibility simulation implementation incorporate new features added simulation model example bellcores generic criteria 01 wireless access communications system wacs allows active call interrupted emergency purposes processing 911 call channel available feature could easily added improved simulation implementation without advanced knowledge call would interrupted reason techniques improving lookahead exploited implementation thus performance obtained conservative regard event granularity average amount real time compute event event granularity small incorrect computation tends propagate rapidly relative speed correction computation antimessages table 2 shows event granularity excluding message send times event type different pcs models timings obtained runningthe simulation single sun sparc workstation timing information captured unix gettimeofdaysystem call resolutionof computing platform significant portion granularity overhead introduced c currently examing ways reduce overhead cell lps pcs models contain less 256 bytes state state saving overhead modest scheduling event requires message data copied new message buffer accordingly amount data contained message affects overhead scheduling events well amount memory need efficiently execute simulation portables calls contain less 256 bytes data overhead scheduling events low however number pending events system may large necessitating minimum almost 20 mb memory lp state event data locality pcs simulation shown table 3 see event types callinitiated model schedule events self portableinitiated model schedule event either self neighbor lp north south east west difference due portable persisting life simulation portableinitiate model even periods inactivity ie connected ongoing call call callinitiated model terminated call completes blocked homogeneity model determines easily simulation objects lps number pending events mapped onto processors evenly distributed workload across processors pcs models since cells identical mean distribution call interarrivals call completions mobility times number portables per cell workload well balanced across proces figure 4 callinitiated parallel execution time seconds versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 proces e call interarrival time minutes e call interarrival time minutes e call interarrival time minutes c sors thus eliminating need dynamic load management mechanisms performance results section discuss distributed implementation time warp mechanism present performance data two pcs simulation models 51 implementation distributed simulator version time warp developed executes collection dec 5000 workstations sun sparc workstations mixture machines performance results presented performed dec machines interconnected ethernet time warp system written c principal objective implementation enable efficient simulation thousands light weight lps ie processes contain small amount state perform little computation event objectoriented environment networked heterogeneous workstations describe user kernel level features time warp system lps implemented c objects referred entities lp entity consists state vector stores lps private data set methods define allowable operations performed data method corresponds type event instance pcs simulations entity cell include methods described earlier section 32 nextcall completioncall moveout movein anticipated simulations contain far entities processors processor typically contain hundreds thousands entities lps priority queue data structure called calendar queue 1 used processor select next entity execute processors scheduler always selects entity containing smallest timestamped event next one execution entity includes linear list hold unprocessed events method invocations scheduled entity avoid unnecessary system overheads malloc system calls memory fragmentation time warp kernel allocates single contiguous block memory events internal data structures allocated communications processors implemented using pvm 32 parallel virtual machine message passing system heterogeneous collections networked computers 7 addition pvms default routing messages pvm route messages directly application processes setting tcpip connection enrolled application thus bypassing pvm daemons sending receiving host mode sending process blocking making pvms direct routing mode asynchronous communications protocol routing messages direct mode total time deliver message range 14 20 mil liseconds executing distributed time warp kernel pvm configured directly route messages table 2 comparison event types callinitiated model portableinitiated model based event granularity event type callinitiated event grain portableinitiated event grain nextcall 258 usec 125 usec completioncall 38 usec 93 usec movecallin 196 usec 107 usec movecallout 195 usec 324 usec table 3 comparison event types callinitiated model portableinitiated model based number messages sent locality destination event type callinit msgs portableinit msgs callinit dest portableinit dest near neighbor completioncall near neighbor movecallin 1 1 self self near neighbor neighbor near neighbor figure 5 parallel execution time sec versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors e call interarrival time minutes e call interarrival time minutes e call interarrival time minutes c 52 performance data determine effect pcs workload characteristics time warp performance measured execution times efficiency simulation 3 average rollback distance percentage remote communications pcs models metric number portables per cell mobility call interarrival times varied completion time phone call exponentially distributed mean 30 number channels per cell fixed 10 experiments conducted 8 dec 5000 workstations workstation containing 128 cells total 1024 cells experiments ran 25 theta 10 4 simulated seconds data point represents average 6 runs figures 4 5 execution time shown pcs parameter values number portables mobility call interarrival times every case callinitiated simulation outperformed corresponding portableinitiated simulation attributed callinitiated models sending fewer remote messages due simulating inactive periods portables remote communications discussed later section combined fewer remote messages fewer events processed callinitiated simulation cases except mean call interarrival time low 6 minutes reason events processed case callinitiated simulation calls would counted busy lines portableinitiated simulation due 3 efficiency defined percentage simulation computationthat committed figure callinitiated efficiency simulationversus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors ffl mobility mobility c e call interarrival time minutes c e call interarrival time minutes c e call interarrival time minutes c high arrival rate calls allowed connect callinitiated simulation however call interarrival time longer movement callless portables portableinitiated simulation causes processing events callinitiated simulation large size simulation models precluded reliable measurement sequential execution times memory management overheads artificially inflated execution time causing superlinear speedups obtained however based execution smaller sized models estimate speedups range 4 8 distributed simulator despite significant differences execution times efficiencies pcs simulations shown figures 6 7 95 pcs parameters number portables per cell call interarrival times mobility high efficiencies attributed size simulation workload relative number processors pcs implementations interprocessor communications relatively infrequent frequency rollbacks diminished figures 8 9 show average rollback distances callinitiated portableinitiated simulations see simulations experienced long rollbacks callinitiated simulationhad shortest two simulations rollbacks distances ranging 26 65 portableinitiated sim ulation rollback distances ranged 35 78 results attributed selfinitiating nature simulations lps schedule many events neighboring lps become unsynchronized respect simulated time figure 7 portableinitiated efficiency simulation versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors ffl mobility c e call interarrival time minutes c e call interarrival time minutes c e call interarrival time minutes c figure 8 callinitiated average rollback distance measured events per rollback versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors l l b c call interarrival time minutes ffl l l b c call interarrival time minutes l l b c call interarrival time minutes c leading longer rollbacks lps exchange messages ever efficiency simulations high number rollbacks extremely low spikes figures 8abc 9a attributed shift rollback behavior increasing mean call interarrival time 6 minutes 10 minutes number secondary rollbacks increases workload de creased allowing lps become unsynchronized believe rollbacks tend long perturb average however increasing call interarrival time mean 10 minutes 30 minutes believe frequency secondary rollbacks increase become shorter result frequent reduces average rollback distance figures 11 percentage committed events sent lps different processors shown see callinitiated simulation less 1 remote commu nications portableinitiated model ranges 06 50 remote communications depending mobility cause differences remote communications lies life time calls callinitiated simulation portables portableinitiated simulation recall callinitiated implementation call completes blocked call ceases exist however portable initiated simulation portables persist duration simulation move cells even processing phone call resulting remote messages sent lps higher percentage messages sent lps residing different workstations combined high cost remote communications communications overhead portableinitiated simulation much larger figure 9 average rollback distance measured events per rollback versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors l l b c call interarrival time minutes l l b c call interarrival time minutes l l b c call interarrival time minutes c figure 10 callinitiated remote communications versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 processors ffl mobility r e call interarrival time minutes r e call interarrival time minutes r e e call interarrival time minutes c callinitiated simulation underscores execution time results presented figures 4 5 6 conclusions paper characterize workloads callinitiated portableinitiated pcs models terms suitability time warp execution experiments completed determine workload characteristics affect time warp execution collection networked workstations experiments conclude ffl important aspect designing implementing models simulation model general developing suitable mapping time warps execution paradigm eliminating need sharing state among lps placing model objects maximize locality communications ie implementing simulations selfinitiating done implementation pcs models ffl shown despite poor lookahead pcs simulations exhibited 95 efficiencies pcs parameters accordingly lookahead seem play significant role determining performance large workload simulations smaller models efficient execution small granularity time warp simulations possible distributed environments suggests aggregate workload simulation model event granularity used determining suitability time warp execution figure communications versus number portables per cell n mobility call interarrival times call holding times exponentially distributed 3 minute mean experiments performed using 8 proces r e call interarrival time minutes r e call interarrival time minutes r e e call interarrival time minutes c ffl modest remote communications loads large message delivery times asynchronous communications protocols appear significant impact time warp efficiencies large workloads r calendar queues fast o1 priority queue implementation simulation event set problem distributed simulation largescale pcs networks personal communications viewpoint parallel discrete event simulation performance time warp synthetic workloads state art parallel simulation pvm 3 users guide reference man ual efficient massively parallel simulation dynamic channel assignment schemes wireless communications performance issues algorithms dynamic channel assignment virtual time ordered dynamic channel assignment scheme reassignment highway microcells simulating largescale personal communications services network parallel discreteevent simulation fcfs stochastic queueing networks performance bounds parallel self initiating discreteevent simulations distributed simulation discrete event systems measurement based prioritization scheme handovers cellular microcellular networks packet reservation multiple access metropolitan microcellular radio environment tr virtual time distributed discreteevent simulation parallel discreteevent simulation fcfs stochastic queueing networks calendar queues fast 01 priority queue implementation simulation event set problem parallel discrete event simulation performance bounds parallel selfinitiating discreteevent simulations state art parallel simulation efficient massively parallel simulation dynamic channel assignment schemes wireless cellular communications distributed simulation largescale pcs networks ctr l felipe perrone david nicol rapid simulation wireless systems acm sigsim simulation digest v28 n1 p170177 july 1998 christopher carothers yibing lin richard fujimoto simulating population dependent pcs network models using time warp proceedings 27th conference winter simulation p555562 december 0306 1995 arlington virginia united states christopher carothers kalyan perumalla richard fujimoto effect statesaving optimistic simulation cachecoherent nonuniform memory access architecture proceedings 31st conference winter simulation simulationa bridge future p16241633 december 0508 1999 phoenix arizona united states jari porras jouni ikonen jarmo harju applying modified chandymisra algorithm distributed simulation cellular network acm sigsim simulation digest v28 n1 p188195 july 1998 david nicol philip heidelberger extending parallelism serial simulators acm sigsim simulation digest v26 n1 p202205 july 1996 michael liljenstam rassul ayani interference radius pcs radio resource management simulations proceedings 30th conference winter simulation p16291640 december 1316 1998 washington dc united states francesco quaglia vittorio cortellessa processor scheduling problem time warp synchronization acm transactions modeling computer simulation tomacs v12 n3 p143175 july 2002 voonyee vee wenjing hsu pal new fossil collector time warp proceedings sixteenth workshop parallel distributed simulation may 1215 2002 washington dc francesco quaglia andrea santoro modeling optimization nonblocking checkpointing optimistic simulation myrinet clusters journal parallel distributed computing v65 n6 p667677 june 2005 christopher carothers brad topol richard fujimoto john stasko vaidy sunderam visualizing parallel simulations network computing environments case study proceedings 29th conference winter simulation p110117 december 0710 1997 atlanta georgia united states peter alleyne carl tropper parallel simulation fixed channel allocation algorithms mobile networks applications v5 n3 p209218 sept 2000 francesco quaglia andrea santoro ccl v30 multiprogrammed semiasynchronous checkpoints proceedings seventeenth workshop parallel distributed simulation p21 june 1013 andrea santoro francesco quaglia multiprogrammed nonblocking checkpoints support optimistic simulation myrinet clusters journal systems architecture euromicro journal v53 n9 p659676 september 2007 christopher carothers richard fujimoto background execution time warp programs acm sigsim simulation digest v26 n1 p1219 july 1996 christopher carothers kaylan perumalla richard fujimoto efficient optimistic parallel simulations using reverse computation proceedings thirteenth workshop parallel distributed simulation p126135 may 0104 1999 atlanta georgia united states francesco quaglia roberto beraldi space uncertain simulation events concepts application optimistic synchronization proceedings eighteenth workshop parallel distributed simulation may 1619 2004 kufstein austria david nicol philip heidelberger parallel execution serial simulators acm transactions modeling computer simulation tomacs v6 n3 p210242 july 1996 andrea santoro francesco quaglia communications network benefits semiasynchronous checkpointing time warp simulations large state pcs model proceedings 33nd conference winter simulation december 0912 2001 arlington virginia andrea santoro francesco quaglia transparent optimistic synchronization hla via timemanagement converter proceedings 20th workshop principles advanced distributed simulation p193200 may 2426 2006 robert rnngren michael liljenstam rassul ayani johan montagnat transparent incremental state saving time warp parallel discrete event simulation acm sigsim simulation digest v26 n1 p7077 july 1996 diego cucuzzo stefano dalessio francesco quaglia paolo romano lightweight heuristicbased mechanism collecting committed consistent global states optimistic simulation proceedings 11th ieee international symposium distributed simulation realtime applications p227234 october 2226 2007 gilbert chen boleslaw k szymanski dsim scaling time warp 1033 processors proceedings 37th conference winter simulation december 0407 2005 orlando florida francesco quaglia andrea santoro modeling optimization nonblocking checkpointing optimistic simulation myrinet clusters proceedings 17th annual international conference supercomputing june 2326 2003 san francisco ca usa christopher carothers kalyan perumalla richard fujimoto efficient optimistic parallel simulations using reverse computation acm transactions modeling computer simulation tomacs v9 n3 p224253 july 1999 mineo takai rajive bagrodia addison lee mario gerla impact channel models simulation large scale wireless networks proceedings 2nd acm international workshop modeling analysis simulation wireless mobile systems p714 august 2020 1999 seattle washington united states michael liljenstam robert rnngren rassul ayani partitioning wcn models parallel simulation radio resource management wireless networks v7 n3 p307324 05012001 ewa deelman boleslaw k szymanski simulating spatially explicit problems high performance architectures journal parallel distributed computing v62 n3 p446467 march 2002 christopher carothers david bauer shawn pearce ross highperformance low memory modular time warp system proceedings fourteenth workshop parallel distributed simulation p5360 may 2831 2000 bologna italy mineo takai rajive bagrodia ken tang mario gerla efficient wireless network simulations detailed propagation models wireless networks v7 n3 p297305 05012001 roberto beraldi libero nigro distributed simulation timed petri nets modular approach using actors time warp ieee concurrency v7 n4 p5262 october 1999 francesco quaglia andrea santoro nonblocking checkpointing optimistic parallel simulation description implementation ieee transactions parallel distributed systems v14 n6 p593610 june brian unger zhonge xiao john cleary jyajang tsai carey williamson parallel sharedmemory simulator performance large atm networks acm transactions modeling computer simulation tomacs v10 n4 p358391 oct 2000 christopher carothers richard fujimoto efficient execution time warp programs heterogeneous platforms ieee transactions parallel distributed systems v11 n3 p299317 march 2000 jignesh panchal owen kelly jie lai narayan mandayam andrew ogielski roy yates wippet virtual testbed parallel simulations wireless networks acm sigsim simulation digest v28 n1 p162169 july 1998 andrea santoro francesco quaglia transparent state management optimistic synchronization high level architecture simulation v82 n1 p520 january 2006