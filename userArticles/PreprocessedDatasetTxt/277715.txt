implementation complete asynchronous distributed garbage collection existing referencebased distributed object systems include kind acyclic garbage collection fail provide acceptable collection cyclic garbage provide gc currently suffer one problems synchronous operation need expensive global consensus termination algorithms susceptibility communication problems algorithm scale present simple complete faulttolerant asynchronous extension acyclic cleanup protocol ssp chains system extension scalable consumes resources could easily adapted work referencebased distributed object systemsrendering usable largescale applications b introduction automatic garbage collection important feature modern highlevel languages although lot accumulated experience local garbage collection distributed programming still lacks effective cyclic garbage collection local garbage collector correct complete distributed garbage collector also asynchronous spaces continue work local garbage collection one space faulttolerant works even unreliable communications space crashes scalable since networks connecting larger numbers computers increasing distances previously published distributed garbage collection algorithms fail one requirements paper present distributed garbage collector distributed languages provides three desired properties moreover algorithm simple implement consumes resources algorithm described paper developed part referencebased distributed object system dialect ml objectoriented ex permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee sigplan pldi98 montreal canada tensions remote references managed using stub scion pair chains sspc system extended cyclic detection algorithm although system based transparent distributed references design assumptions weak enough support kinds distributed languages based channels example calculus 8 joincalculus 3 others next two sections paper introduce basic mechanisms remote references sspc system acyclic distributed garbage collection section 4 describes cycle detection algorithm includes short example showing works section 5 briefly investigates issues related algorithm sections 6 7 analyze algorithm greater depth discuss implementation issues surrounding final two sections compare algorithm recent work distributed garbage collection present conclusions basics consider distributed system consisting set spaces space process memory local roots local garbage collector space communicate spaces computer different one sending asynchronous messages messages may lost duplicated delivered order distributed computation effected sending messages invoke procedures remote objects remote procedure calls rpcs components local procedure call distinguished object perform call zero arguments arbitrary includ ing reference type optional result arbitrary type result delivered caller synchronously words caller blocks duration procedure call encoding argument result inclusion message called marshaling decoding message recipient called unmarshaling argument result rpc reference type ie refers object reference serve rpcs recipient reference back argumentresult object object also protected garbage collection remains reachable ie last local remote reference deleted following sections write namex indicate variable called name located space x contains information object write increased b mean variable set maximum variable variable b stubr r figure 1 reference space x b space 21 remote references marshaled references local remote objects sent messages used remote computations eg remote invocation reference r object space x object b space represented two objects stubx r sciony r represented concretely ffl local pointer x stubx r ffl local pointer sciony r b scion corresponds incoming reference treated root local garbage collection object one incoming references remote spaces therefore considered live local garbage collector even absence local reference object stub local proxy remote object contains location associated matching scion scion one matching stub stub exactly one matching scion several spaces contain stubs referring object b unique matching scion bs space one scion stub reference r created space exported space x follows first new scion sciony r created marshaled message marshaled representation encodes location sciony r relative x message sent x location unmarshaled create stubx r 3 stubscion pair chains sspc system 13 mechanism distributed reference tracking similar network objects 1 supporting acyclic distributed garbage collection differs network objects several important respects reduction number messages required sending reference lower latencies faulttolerance support object migration however describe part needed understand garbage collector garbage collector based reference listing extension reference counting better suited unreliable communications timestamps messages avoid race conditions following explanation based example shown figure 1 simple example easily generalizable situations references spaces message stamped sender monotonically increasing time message containing r sent x timestamp message stored sciony r field called scionstamp message received x field stubx r called stubstamp increased timestamp message stubx r stubstamp contains timestamp recent message containing r received similarly sciony r scionstamp timestamp last message containing r sent x object becomes unreachable stubx r collected local garbage collector space x stubx r finalized value called increased stubstamp field x thresholdx therefore contains timestamp last message received contained reference object whose stub since reclaimed local garbage collector garbage collection space x message live sent spaces immediate vicinity immediate vicinity space x set spaces stubs scions whose associated scions stubs x live message sent space contains names scions still reachable stubs x value thresholdx also sent live message value allows space determine recent message received x time live message sent space extracts list scion names receipt live message list compared list existing scions whose matching stubs located x existing scions mentioned list known unreachable x called suspect suspect scion deleted provided danger reference currently transit x prevent incorrect deletion suspect scion scionstamp field suspect scions compared contained live message stub referred message sent last one containing r collected implies last message containing r received live sent stub created r message must longer exist space x suspect scion therefore deleted safely prevent outoforder messages violating last condition messages marked timestamp smaller current value thresholdx refused space x thresholdx must therefore initialized timestamp smaller timestamp first messages received mechanism called thresholdfiltering live message extended missing time stamps field inform space timestamps smaller thresholdx received message yet possibility resending corresponding messages using new timestamp newlycreated scions since older messages refused thresholdfiltering algorithm prevent premature deletion scions contained messages delayed tran sit deletions however safe since delayed messages refused thresholdfiltering situation occur recent message arrives delayed message recent message causes creation stubs subsequently deleted local garbage collection arrival delayed message happen fifo communications tcpip moreover threshold filtering delayed messages problematical applications using unreliable communications udp since applications designed function correctly even presence message loss thresholdfiltering message loss due faulty communication indistinguishable application distributed garbage collection mechanism faulttolerant unreliable communications create dangling pointers scions never deleted case crashed spaces contain matching stubs supports extensions handling crash recovery moreover scalable space sends receives messages immediate vicinity asynchronous local garbage collections space allowed time need synchronize spaces however mechanism complete distributed cycles never deleted use reference listing remainder paper presents contri bution algorithm detect cut distributed cycles rendering sspc garbage collector complete 4 detection free distributed cycles detector free distributed cycles extension sspc garbage collector spaces may elect use acyclic sspc gc without detector extension eg scalability reasons spaces choose involved detection cycles called participating spaces spaces called nonparticipating spaces detector detect cycles lie entirely within set participating spaces 41 overview algorithm based date propagation along chains remote pointers useful property propagation reachable stubs receive increasing dates whereas unreachable stubs belonging distributed cycle eventually marked constant dates threshold date computed central server stubs marked dates inferior threshold known constant dates therefore unreachable participating space sends minimum local date wishes protect central server stubs dates collected information based dates marked local stubs also old dates propagated outgoing references algorithm asynchronous values computed conservatively tolerant unreliable communications using old values computations always safe since transmitted values monotonically increasing benign normal sspc garbage collector nonparticipating spaces work overlapping cluster participating spaces even take part cycle detection 42 data structures messages stubs extended timestamp called stubdate time recent trace possibly remote site stubs chain found rooted stubs second timestamp called olddate value stubdate previous trace scions extended timestamp called sciondate copy recently propagated stubdate scions matching stubie time recent remote trace scions chain found rooted stubdates space propagated matching scions space sending stubdates message stubdates messages stamped time trace generated site vector called cyclicthreshold containing timestamp last stubdates message received remote space cyclicthreshold value remote space periodically propagated back space sending threshold message emission threshold messages delayed saving cyclicthreshold values given time set called cyclicthresholdtosend particular event site protect outgoing references remote garbage collection computes time called lo calmin sent localmin message dedicated site detection server minimum localmin spaces maintained variable called globalmin lo calmin messages acknowledged detection server sending back ack messages finally compute localmin site maintains per space value called protectnow containing new dates protected next local garbage collection values saved perspace table called protected set reused thus protected local garbage collections 43 algorithm lamport clock used simulate global time participating space 1 431 local propagation current date lamport clock incremented local garbage collection used mark local roots scions sciondate marked date received matching stub dates propagated local roots scions stubdate field reachable stubs mark phase garbage collection stub reachable different roots marked different dates marked largest date propagation easy implement minor modifications tracing garbage collector scions sorted decreasing sciondate object memory traced scion turn trace stubdate visited unmarked stub increased sciondate scion trace began 432 remote propagation modified live message called stubdates sent participating spaces vicinity local garbage col lection message serves propagate dates stubs matching scions dates propagated locally scions stubs receiving space next local garbage collection space clock implemented sending current date messages case messages used detection free cycles concerned message received current local date increased strictly greater date message increment current date fifo addcyclicthresholdtosend set current datecyclic threshold mark rootlocal rootscurrent date scionscion date globalmin scionpointer null else scionscion date mark rootscionpointercurrent date else mark rootscionpointerscionscion date stubstub date stubolddate decrease protect nowspace stubolddate stubolddate stubstub dateg fifo addprotected setspace protect nowspacecurrent date protect nowspace current date sendspacestubdatescurrent date stubstub idstubstub dateg localmin minprotected set sendserverlocalmincurrent datelocalmin figure 2 pseudocode local garbage collec tion protected sets cyclicthreshold tosend set implemented fifo queues three functions add head remove 433 characterisation free cycles local roots marked current date always increasing reachable stubs therefore marked increasing dates hand dates stubs included unreachable cycles evolve two different phases first phase largest date cycle propagated every stub cycle second phase new date reach cycle local root therefore dates stubs cycle remain constant forever since unreachable stubs constant dates whereas reachable stubs increasing dates possible compute increasing threshold date called globalmin reachable stubs scions always marked dates larger globalmin hand globalmin eventually become greater date stubs belonging given cycle scions whose dates smaller current glob almin traced local garbage collection stubs reachable scions therefore collected normal acyclic sspc garbage collector remove associated scions eventually entire cycle 434 computation globalmin globalmin computed dedicated space detection server minimum localmin values sent participating space 2 central server always com globalmin could computed lazy distributed consensus however central server easier implement simply receivespacestubdates gc date stub set increase cyclicthresholdspace gc date old scion set spacescions spacescions fg old scion set f findscionscion idstub set found stub date found scionscionstamp threshold f threshold increase scionscion date stub date spacescions spacescions u fsciong gg figure 3 pseudocode stubdates handler find function looks scion identifier set stubs received message stub found set found set true stub date set date associated stub scionstamp greater threshold message scion kept alive date set gc datethreshold datespace f increase threshold datespace current date localminspacelocalmin figure 4 pseudocode detection server message treated garbage collection date lattest date received space putes globalmin recently received value localmin sent space see pseudocode figure 4 435 computation localmin localmin recomputed local garbage collection given participating space pseudocode shown figure 2 introduce notion probablyreachable stub stub probablyreachable either used mutator remote operation invocation since last local garbage collection stubdate increased local trace notion neither lower upper approximation reachability stub might reachable probablyreachable time might also probablyreachable reachable time however reachable chain remote references least one probablyreachable stub different date chain therefore since space protect date probablyreachable stubs dates chain protected detect probablyreachable stubs local trace previous stubdate stub stored olddate one participating spaces local networks collector useful often centralized structure fifo headcyclicthresholdtosend set datecyclic thresholds send date gc date f repeat f fifo removecyclicthresholdtosend set datecyclic thresholds send date gc date cyclic thresholds sendspace figure 5 pseudocode ack message handler old values cyclicthresholdtosend set discarded since smaller sent threshold messages corresponding protectnow values protected sets therefore also removed threshold messages received field compared newlypropagated stubdate participating space immediate vicinity date called protectnow contains minimum olddate stubs detected probablyreachable since last local garbage collection value protectnow space saved perspace set called protected set garbage col lection protectnow reinitialized current date localmin space computed minimum protectnow values protected sets new value localmin sent detection server localmin message next value globalmin smaller olddates olddates associated stubs detected probablyreachable since latest garbage collections therefore protected new value globalmin stubs scions marked dates collected 3 globalmin must protect olddates rather stubdates scions associated probably reachable stubs must protected collection scions marked olddate matching stub fact globalmin protects associated scions also references reachable probablyreachable stubs marked olddates stubs 436 reduction protected set stubdates localmin messages contain date local garbage collection sent stubdates message received see figure 3 perspace threshold cyclicthreshold increased gc date contained message cyclicthreshold participating space saved cyclicthresh oldtosend set local garbage collection localmin message received detection server acknowledged ack message containing gc date ack message received see figure 3 slightly cryptic phrase latest garbage collec tions explained full next section receivespacethresholdcyclic fifo headprotected setspace protect nowgc date gc date cyclic threshold f fifo removeprotected setspace protect gc date fifo headprotected setspace protect gc date figure pseudocode threshold handler cyclicthresholds saved cyclicthreshold tosend set local garbage collection started gc date ack message sent associated space threshold messages older values older local garbage collections cyclicthresholdtosend set discarded perfectly safe space receives threshold message perform actions performed previous threshold messages lost cyclicthreshold date received threshold message older protectnow values protected set associated sending space removed see figure 6 values longer participate computation globalmin explain cryptic phrase latest garbage collections appeared previous section olddate probablyreachable stub protected protectnow protected set continue protected certain time several events oc curred new stubdate must first sent matching scion stubdates message propagated local trace outgoing stubs new probablyreachable stubs space detected trace new localmin must received used detection server ensuring olddates newly detected probablyreachable stubs protected next values globalmin ack message received detection server trigger threshold message containing cyclicthreshold equal gc date stubdates message greater stubdates messages received local garbage collection threshold message received protectnow removed protected set 44 example figures 7 8 9 show simple example distributed detection free cycles spaces b participating spaces space c detection server system contains two distributed cycles c1 c2 containing two objects oa1 ob 1 c1 oa2 ob 2 c2 c1 locally reachable whereas c2 unreachable since date 2 local garbage collection date 6 propagated date stuba 1 previously marked date 2 protected set associated b contains single entry protectnow 2 date 6 figure 7 local garbage collection occurs b date 8 date 6 marked scionb 1 propagated stubb 1 previously marked 2 b saves localmins 2 globalmin gcdate gcdate dates figure 7 local garbage collection date 8 space b new localmin 2 sent detection server c acknowledgment cyclic threshold 6 message sent remove entry protected set new protectnow 2 associated protected set sends stubdates message new stub dates localmin message new localmin 2 detection server saving new localmin detection server sends ack message b containing date original localmin message glob almin value possibly uptodate piggybacked message reception ack message b sends threshold message containing date last stubdates message received consequently removes associated protectnow entry protected set empty figure 8 local garbage collection occurs date 10 current date 10 propagated stuba 1 previously marked 6 protectnow associated b therefore decreased 6 stuba2 participate computation protectnow since still marked 2 protectnow saved protected set new localmin 6 sent detection server reception ack message c threshold message sent ot b removes associated entry protected set however localmin detection server still equal 2 thus preventing globalmin increasing figure 9 local garbage collection occurs b date 12 new localmin computed b equal 6 new globalmin therefore increased 6 scions marked smaller dates traced starting moment b receive new value globalmin consequently sciona2 scionb 2 traced subsequent garbage collections oa 2 ob 2 stubb 2 stuba2 collected local garbage collections time sciona2 scionb 2 collected sspc garbage collector stubdates messages contain stubb 2 stuba2 received b respectively cycle c2 entirely collected 5 related issues 51 new remote references nonparticipating spaces new remote reference created stub olddate set current date sciondate initialized special date called moreover time scion location resent associated space new stub may created previous one already collected sciondate therefore reinitialized time scions location resent message scions marked propagate current date garbage collection newlycreated scion therefore behaves normal local root new date propagated stubdates message matching stub sspc threshold compared scionstamp ensure messages containing scion received fixing sciondate mechanism also used allow incoming references nonparticipating spaces stubdates messages never received nonparticipating spaces sciondates associated scions therefore remain forever act local roots distributed cycles include remote references never collected safe impact completeness algorithm participating spaces must also cope outgoing references nonparticipating spaces must avoid putting entries pro localmins 6 figure 8 new local garbage collection localmin increased 6 tected sets nonparticipating spaces since threshold messages received remove entries would prevent localmin hence globalmin increas ing thus stalling detection process space must therefore send stubdates messages create entries protected sets known participating spaces list participating spaces maintained detection server sent participating spaces whenever necessary new participating space arrives space quits detection process space suspected crashed slow respond 52 coping mutator activity mutator create delete remote references interval local garbage collections dates remotelyreachable object might therfore never increase phantom reference time local garbage collection occurs space object reach able mutator gives reference object another space deletes local reference collection greater dates might therefore never propagated object object would detected still reachable see figure 10 example transient references may move stubs scions invocation scions stubs reference pass ing first case mark invoked scions current date prevents globalmin stalling second case ensure time stub used mutator invocation copy tofrom another space olddate used increase protectnow associated space matching scion date protectnow therefore always contains minimum olddate stubs used interval two local current stub r 11o figure 10 local reference 1 invokes stub 1 creates new local reference b 2 deletes local reference r 1 performs new local garbage collection stub 1 therefore remarked 2 localmin increased 5 incorrect since cycle reachable b reason external mutator activity must monitored detector free cycles garbage collections protects object reachable stubs transient phantom references 53 fault tolerance algorithm tolerant message loss outoforder delivery stubdates threshold localmin ack messages accepted sates greater previously received message computations always conservative using old values even localmin messages may lost ack messages sent therefore threshold localmins 6 figure 9 new local garbage collection b localmin b set 6 globalmin increased 6 thus free cycle marked 2 collected since date smaller globalmin spaces continue protect dates lost localmin messages would protected crashed spaces spaces slow respond handled detection server exclude suspected space detection process sending special message participating spaces participating spaces set sciondates scions whose matching stubs suspect spaces remove entries suspected spaces protected sets finally detection server may also crash stop acyclic garbage collection delays cyclic garbage collection detection server restarted dynamically rebuild list participating spaces special recovery protocol waits participating space send new localmin value computing new uptodate value globalmin 6 analysis estimate worstcase time needed collect newly unreachable cycle time needed propagate dates greater cycle reachable stubs assuming spaces perform local garbage collections approximately rate define period time necessary spaces perform new local garbage collection time needed collect cycle equal product length largest chain reachable references period also estimate number size messages sent local garbage collection one live message sent sspc garbage collector plus one stubdates message one threshold message sent space immediate vicinity first two messages concatenated single network message hence two messages sent space vicinity stubdates message contains one identifier one date live stub referring destination space plus sspc threshold timestamp threshold message contains cyclicthreshold value destination space one localmin message also sent detection server one ack message sent back server protected set contains triples space vicinity space x vicinity number triples x protected set equal number local garbage collections occurred since last garbage collection x frequencies garbage collections different participating spaces similar protected set grow much one space requires many garbage collections protected set becomes large avoid performing cyclic detection garbage collection stop garbage collections sufficient entries protected set removed finally large number spaces may use detection server server contains two dates per participating space computation minimum array expensive 7 implementation algorithm incorporated implementation ssp chains system written objectivecaml 5 using unix thread modules 6 objectivecaml implementation sspc consists 1300 lines code 200 associated cyclic gc algorithm propagation dates tracing implemented minor modification existing caml garbage collector 2 mark rootroots function changed mark rootrootsdate marks stubs reachable set roots given date function applied first normal local roots current date always greater dates scions sets scions sorted decreasing dates reachable stub therefore marked date first root reachable finalization stubs required updating threshold collected implemented using list pairs pair contains weak pointer stub stubstamp field garbage collection weak pointers tested determine referent objects still live stubstamp field used update threshold weak pointer found dangling protected set implemented fifo queue participating space head queue contains protectnow value modified mutator local garbage collections threshold message received entries removed tail queue last entry date greater one message finally localmin computed minimum entries queues objectivecaml highlevel capabilities automatically marshal unmarshal symbolic messages easing implementation complex protocols modification compiler standard object library needed enable dynamic creation classes stubs dynamic type verification sspc however modifications related either acyclic gc cycle detector algorithm 8 related work 81 hughesalgorithm algorithm inspired hughes algorithm hughes algorithm local garbage collection provokes global trace propagates starting date trace ever threshold date computed termination algorithm due rana 11 date stub therefore represents starting date recent global trace stub detected reachable threshold starting date terminated global trace stub marked strictly smaller date detected reachable terminated global trace therefore collected safely however termination algorithm used algorithm requires global clock instantaneous communication support failures moreover local garbage collection one space triggers new computations participating spaces behavior suitable largescale faulttolerant system 82 recent work detecting free cycles addressed several researchers good survey found 10 present recent work three recent algorithms based partitioning groups spaces nodes cycles collected included entirely within single partition heuristics used improve partitioning algorithms complex may difficult implement moreover efficiency depends greatly choice heuristic selecting suspect objects maheshwari liskovs 7 work based backtracing group traced opposite direction references starting objects suspected belong unreachable cycle heuristic based distance selects suspected objects backward trace encounter local root object free cycle detector asynchronous faulttolerant welladapted largescale systems nevertheless backtracing requires extra data structures remote reference every suspected cycle needs one trace whereas algorithm collects cycles concurrently rodrigues joness 12 cyclic garbage collector inspired lang et al4 dividing network groups processes algorithm collects cycles garbage contained entirely within group main improvement suspect objects according heuristics maheshwari liskovs distance traced global synchronization needed terminate detection difficult know algorithm behaves group becomes large dmos garbage collector 9 desirable prop erties safety completeness nondisruptiveness incremen tality scalability spaces divided number disjoint blocks called cars cars different spaces grouped together trains reachable data copied cars one train cars trains unreachable data cycles contained one car one train left behind collected completeness guaranteed order collections algorithm highly complex implemented moreover problems relating faulttolerance addressed authors 9 conclusion described complete distributed garbage collector created extending acyclic distributed garbage collector detector distributed garbage cycles garbage collector desirable properties asynchrony participating spaces faulttolerance messages lost participating spaces servers crash low resource requirements memory messages time finally ease implementation seems well adapted largescale distributed systems since supports nonparticipating spaces consequently clusters cyclicallycollected spaces within larger groups interoperating spaces currently working new implementation joincalculus language future work includes handling overlapping sets participating spaces protocols server recovery performance mesurements acknowledgments authors would like thank neilze dorta study recent cyclic garbage collectors also thank jeanjacques levy damien doligez valuable comments suggestions improving paper r network objects concurrent reflexive chemical abstract machine joincalculus garbage collecting world objectivecaml system software unix system programming caml light collecting cyclic distributed garbage back tracing calculus mobile processes ii survey distributed garbage collection techniques distributed solution distributed termination problem cyclic distributed garbage collector network ob jects chains robust tr garbage collecting world concurrent generational garbage collector multithreaded implementation ml calculus mobile processes ii network objects collecting distributed garbage cycles back tracing garbage collecting world survey distributed garbage collection techniques cyclic distributed garbage collector network objects calculus mobile agents ctr fabrice le fessant detecting distributed cycles garbage largescale systems proceedings twentieth annual acm symposium principles distributed computing p200209 august 2001 newport rhode island united states stephen blackburn richard l hudson ron morrison j eliot b moss david munro john zigman starting termination methodology building distributed garbage collection algorithms australian computer science communications v23 n1 p2028 januaryfebruary 2001 abhay vardhan gul agha using passive object garbage collection algorithms garbage collection active objects acm sigplan notices v38 n2 supplement february michael hicks suresh jagannathan richard kelsey jonathan moore cristian ungureanu transparent communication distributed objects java proceedings acm 1999 conference java grande p160170 june 1214 1999 san francisco california united states luc moreau peter dickman richard jones birrells distributed reference listing revisited acm transactions programming languages systems toplas v27 n6 p13441395 november 2005 laurent amsaleg michael j franklin olivier gruber garbage collection clientserver persistent object store acm transactions computer systems tocs v17 n3 p153201 aug 1999