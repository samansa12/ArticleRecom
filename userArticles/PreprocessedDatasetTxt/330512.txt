useful old information abstractwe consider problem load balancing dynamic distributed systems cases new incoming tasks make use old information example consider multiprocessor system incoming tasks exponentially distributed service requirements arrive poisson process tasks must choose processor service task knows making choice processor queue lengths seconds ago good strategy choosing processor order tasks minimize expected time system models also used describe settings transfer delay time task enters system time reaches processor service models based considering behavior limiting systems number processors goes infinity limiting systems shown accurately describe behavior sufficiently large systems simulations demonstrate reasonably accurate even systems small number processors studies specific models demonstrate importance using randomness break symmetry systems yield important rules thumb system design significant result small amounts queue length information extremely useful settings example incoming tasks choose least loaded two randomly chosen processors extremely effective large range possible system parameters contrast using global information actually degrade performance unless used carefully example unlike settings load information current tasks go apparently least loaded server significantly hurt performance b introduction distributed computing systems networks workstations mirrored sites world wide web face problem using resources effectively hosts lie idle others heavily loaded system performance fall significantly prevent load balancing used distribute workload improving performance measures expected time task spends system although determining effective load balancing strategy depends strongly details underlying system general models queueing theory computer science often provide valuable insight general rules thumb paper develop analytical models realistic setting old load information available example suppose system n servers incoming tasks must choose server wait service incoming tasks know current number tasks already queued server often best task go server shortest queue 22 many actual systems however unrealistic assume tasks access date load information global load information may updated periodically time delay task move server may long enough load information date time task arrives case clear best load balancing strategy models yield surprising results unlike similar systems date information available strategy going shortest queue lead extremely bad behavior load information date however strategy going shortest two randomly chosen queues performs well large range system parameters result suggests systems attempt exploit global information balance load aggressively may suffer performance either misusing adding significant complexity 11 related previous work problem use old inexact information often neglected theoretical work even though balancing workload distributed clients based incomplete possibly date server load information may increasingly common system requirement recent work awerbuch azar fiat leighton 2 covers similar theme although models substantially different idea task choosing small number processors order balance load studied theoretical practical contexts many models using two choices per task lead exponential improvement one choice maximum load processor static setting improvement appears first noted karp luby meyer auf der heide 10 complete analysis given azar broder karlin upfal 3 dynamic setting work extended queueing theoretic model 15 16 similar results independently reported 26 similar previous work includes towsley mirchandaney 21 mirchandaney towsley stankovic 12 13 authors examine simple load sharing policies affected communication delay extending similar study load balancing policies eager lazowska zahorjan 5 6 analyses based markov chains associated load sharing policies propose simulations work related queueing models work although expands work several directions apply fluidlimit approach develop deterministic model corresponding limiting system n 1 often call system limiting system approach successfully applied previously study load balancing problems 1 15 16 17 19 26 see also 1 references 18 25 use approach different settings seen generalization previous markov chain analysis using technique examine several new models load balancing presence old information conjunction simulations models demonstrate several basic powerful rules thumb load balancing systems notably effectiveness using two choices remainder paper organized follows section 2 describe general queueing model problems consider sections 3 4 5 consider different models old information model present corresponding limiting system using limiting systems simulations determine important behavioral properties models section 6 briefly consider question cheating tasks concept ties models natural challenging game theoretic questions conclude section open problems directions research 2 bulletin board model work focus following natural dynamic model tasks arrive poisson stream rate n 1 collection n servers task chooses one servers service joins servers queue shall specify policy used make choice subsequently tasks served according first first protocol service time task exponentially distributed mean 1 interested expected time task spends system equilibrium natural measure system performance generally distribution time customer spends queue note average arrival rate per queue 1 average service rate assuming tasks choose servers according reasonable strategy expect system stable sense expected number tasks per queue remains finite equilibrium particular task chooses server independently uniformly random server acts mm1 queue poisson arrivals exponentially distributed service times hence clearly stable examine behavior system variety methods tasks may use choose server allow tasks choice server determined load information servers convenient picture load information located bulletin board strongly emphasize bulletin board purely theoretical construct used help us describe various possible load balancing strategies need exist reality load information contained bulletin board need correspond exactly actual current loads information may erroneous approximate focus problem bulletin board contains old information mean old information specified future sections shall focus distributed systems mean tasks cannot directly communicate order coordinate go service decisions made tasks thus based whatever load information obtain entry time although modeling technique used large class strategies paper shall concentrate following natural intuitive strategies ffl choose server independently uniformly random ffl choose servers independently uniformly random check load information bulletin board go one smallest load 1 ffl check load information bulletin board go server smallest load strategy choosing random server several advantages easy implement low overhead works naturally distributed setting known expected lengths queues remain finite time however strategy choosing small number servers queueing least loaded shown perform significantly better case load information date 5 15 16 26 also proved effective similar models 3 10 16 moreover strategy also appears practical low 1 strategies assume ties broken randomly also choices made without replacement simulations limiting system setting difference choosing without replacement negligible overhead distributed settings global information may available polling small number processors may possible going server smallest load appears natural centralized systems global information maintained indeed going shortest queue shown optimal variety situations series papers starting example 22 24 hence makes excellent point comparison setting simple schemes examine easily studied model include threshold based schemes 5 17 second choice made first appears unsatisfactory develop analytical results limiting case n 1 system accurately modeled limiting system limiting system consists set differential equations shall describe describe sense expected behavior system corresponds exact behavior system n 1 information approach found 7 11 15 16 17 19 25 26 emphasize detour theoretical justification limiting approach instead refer reader sources information note however approach works systems finite n appropriate form markov chain indeed initially require exponential service times poisson arrivals ensure form previous experience suggests using limiting system estimate performance metrics expected time system proves accurate even relatively small values n 5 15 16 17 shall verify models consider comparing analytical results simulations 3 periodic updates previous section described possible ways bulletin board used turn attention bulletin board updated perhaps obvious model one information updated periodic intervals clientserver model could correspond occasional broadcast load information servers clients broadcast likely expensive example terms communication resources may practical broadcast infrequent intervals alternatively system without centralization servers may occasionally store load information readable location case tasks may able obtain old load information small set servers quickly low overhead therefore suggest periodic update model bulletin board updated accurate information every seconds without loss generality shall take update times 0 time updates shall called phase phase phase ends time time last phase began denoted current time limiting system consider utilize twodimensional family variables represent state space let p ij fraction queues time true load j load posted bulletin board let q rate arrivals queue size time note timeindependent strategies rates q depend load information bulletin boards strategy used tasks hence q case rates q change whenever bulletin board updated first consider behavior system phase times 6 kt integers k 0 consider server showing customers bulletin board j customers say server state j let 1 rate server leaves state j server leaves state customer departs happens rate customer arrives happens rate similarly may ask rate customers enter state happen customer arrives server load posted bulletin board customers customer departs server load posted bulletin board customers description naturally leads us model behavior system following set differential equations dp i0 dt dp ij dt equations simply measure rate servers enter leave state note case special case queueing process random however differential equations deterministic yielding fixed trajectory initial conditions given fact equations describe limiting behavior process n 1 proven standard albeit complex methods 7 11 16 17 19 25 26 take equations appropriate limiting system focus using differential equations study load balancing strategies integers k 0 state jump bulletin board updated necessarily p ij load servers correctly portrayed bulletin board let p ij update 31 consider proper form rates q strategies examine convenient define load variables b fraction servers load posted bulletin board b case task chooses servers randomly goes one smallest load bulletin board arrival rate numerator probability shortest posted queue length choices bulletin board size get arrival rate per queue scale arrival rate per queue b total fraction queues showing board case 1 expression reduces q servers arrival rate one would expect model tasks choose shortest queue bulletin board develop interesting approximation assume always exists servers posting load 0 bulletin board use model tasks go random server posted load 0 long start servers showing 0 bulletin board limiting system instance start empty system always servers showing load 0 hence strategy valid case number queues finite course time servers show load least one billboard however large enough number servers time events large hence model good approximation shortest queue policy set rate rates q 0 32 fixed cycle standard deterministic dynamical system natural hope system converges fixed point state system remains forever gets fixed point would correspond point dp ij dt 0 system clearly cannot reach fixed point since updating bulletin board time causes jump state specifically p ij become however possible find fixed cycle system find point p k k 0 words find state limiting system begins phase state ends phase state hence repeats cycle every subsequent phase note also may possible process cycle multiple phases instead single phase seen happen practice conjecture possible system find fixed cycle note equivalent finding vector fraction queues load beginning phase distribution occurs end phase given initial arrival rate queue tasks time 0 determined assumptions poisson arrivals exponential service times phase server acts independent mm1 queue runs seconds initial number tasks awaiting service use fact find formulae distribution number tasks time mm1 queue arrival rate tasks initially long known example see 4 pp 6064 probability finishing j tasks seconds denote ij b z x modified bessel function first kind gives distribution beginning end phase must satisfy used determine seems unlikely use characterization determine simple closed form state beginning phase fixed cycle terms practice find fixed cycle easily running truncated version system differential equations bounding maximum values reaching point change state two consecutive updates sufficiently small procedure works assumption trajectory always converges fixed cycle rapidly discuss next section alternatively starting state apply formulae ij successively find states beginning phase find two consecutive states difference sufficiently small simulating differential equations advantage allowing us see behavior system time well compute system measurements expected time task spends system 33 convergence issues given found fixed cycle relevant limiting system important questions remain regarding convergence one question stems approximation finite system corresponding limiting system good approxi mation second question whether trajectory limiting system always converges fixed cycle quickly first question note standard methods referred previously based work kurtz 7 11 19 provide weak bounds convergence rate limiting finite systems focusing specific problem proving tighter bounds may possible see example discussion 25 practice however shall see section 34 limiting system approach proves extremely accurate even small systems hence useful technique gauging system behavior second question found experiments system always converge fixed cycle although proof situation generally easier trajectory converges fixed point instead fixed cycle shall see see also 16 proving convergence hence remains interesting open theoretical question 34 simulations present simulation results two main purposes mind first wish show limiting system approach fact yield good approximation finite case second wish gain insight problem load balancing using old information choose emphasize second goal plot data simulations actual queueing process except case one server chosen random case apply standard formulae queueing theory shall note deviation values obtained limiting system simulations appropriate simulations focus expected time system appears interesting system measure limiting approach provides full description system state however used predict quantities interest well methodology may raise question limiting system models useful several reasons first simulating differential equations often much faster simulating corresponding queueing system shall say later second limiting systems provide theoretical framework examining problems lead formal theorems third limiting system provides good insight accurate approximations system haves independent number servers information prove extremely update every seconds update interval average choices 3 choices shortest l05 10 figure 1 strategy comparison queues useful practice figures 1 2 results various strategies given arrival rates servers simulations performed 50000 time steps first 5000 steps ignored allow dependence initial state affect results cases average time task spends system simulations higher expected time corresponding limiting system 05 deviation two results smaller 1 strategies strategy choosing two three servers simulations within 12 results obtained limiting system case choosing shortest queue simulations within 817 limiting system average time simulations larger expect larger discrepancy due inaccuracy model shortest queue system described section 31 however suitably accurate gauge system behavior results demonstrate accuracy limiting system approach several surprising behaviors manifest figures first although choosing shortest queue best information current small values strategy performs worse randomly selecting queue especially high loads large although choosing shortest queue known suboptimal certain systems current information 23 failure presence update every seconds update interval average choices 3 choices shortest figure 2 strategy comparison queues update every seconds update interval average choices 3 choices shortest figure 3 strategy comparison queues old information dramatic also choosing two servers best proposed strategies wide range although sufficiently large making single random choice performs better suggest helpful intuition behaviors update interval sufficiently small new tasks arrive every seconds choosing shortest queue performs well tasks tend wait servers short queues grows larger however problem arises tasks arrive seconds go small set servers appear lightly loaded board overloading servers empty system demonstrates call herd behavior herds tasks move together locations reallife example phenomenon consider happens supermarket announced aisle 7 open often aisle 7 quickly becomes longest queue herd behavior noticed real systems use old information load balancing example discussion transend system et al note initially found rapid oscillations queue lengths system updated load information periodically 9section 45 interestingly update interval 1 utility bulletin board becomes negligible fact actually misleading best strategy approaches choosing server random although intuition helpful remains surprising making two choices performs substantially better even three choices large interval values seem likely arise practice behavior also apparent even much smaller number servers figure 3 examine simulations strategies eight servers realistic number current multiprocessor machine case approximations given limiting system less accurate although 1 still within 20 simulations simulations small systems demonstrate similar behavior number servers n grows limiting system grows accurate hence even small systems limiting system approach provides reasonable estimates system behavior demonstrates trends update interval grows finally note simulations differential equations limiting system rapidly reaches fixed cycle suggested section 32 simulating limiting system although limiting system approach provides useful technique studying load balancing models becomes difficult use periodic update model models old information high arrival rates large values number variables track grows large example suppose simulate differential equations truncating system sufficiently large values j denote j must keep track ij variables p ij high arrival rates say high values need make j extremely large obtain accurate calculations hence simulating differential equations period time becomes slow comparable worse time required simulated underlying queueing system practice however expect high arrival rates extremely large values unlikely interest normal case expect j relatively small case simulating differential equations generally quicker simulating underlying queueing model 36 complex centralized strategies one would expect sophisticated strategy dealing old load information might yield better performance instance system uses load information bulletin board develop estimate current load estimate may accurate information board subsection briefly consider complex strategies attempt estimate current queue length gauge performance strategies require significant centralization incoming tasks must access complete bulletin board however believe strategies practical systems reasonable size hundreds processors hence worth examining model still bulletin board updated every seconds first proposed strategy requires arrival rate system entire composition bulletin board known incoming tasks also tasks need know time since last update idea strategy use knowledge arrival rate calculate expected number tasks servers choose server smallest expected load uniformly random describe strategy approximates one closely advantage underlying calculations quite simple proposed strategy call timebased strategy split phase seconds smaller subintervals subinterval choose server randomly servers load k division phase inductively determined loads beginning phase information available bulletin board time 0 tasks choose servers load 0 posted board exist hence customers begin also choosing servers load 1 expected number arrivals servers load 0 1 similarly customers beginning choosing servers load k expected number arrivals servers load 1 intuitively strategy attempts equalize load servers natural way limiting system given series differential equations used model system equations entirely similar 1 2 except expression q changes depending subinterval k leave remaining work derivation reader second proposed strategy call recordinsert strategy allow tasks update global bulletin board choose server every time new task enters system load server bulletin board incremented deletions recorded board updated every seconds tasks choose queue uniformly random smallest load board 2 strategy may feasible tasks use centralized system placement large dealy servers update load information strategy essentially one used solve problem herding behavior transend system mentioned previously 8 9 limiting system given family differential equations model system still use p ij represent fraction queues load bulletin j queue however load board incremented arrival resulting similar 1 2 difference dp i0 dt dp 0j dt dp ij dt also expression q becomes complicated q zero unless smallest load apparent system smallest load changes time system discontinuous behavior simulations demonstrate strategies perform substantially better choosing two n reasonably large grows large example see figure 4 demonstrative several basic principles one might expect recordinsert better time based demonstrating power tasks able update actual centralized note performance improves slightly tasks break ties fixed order machine index case sufficiently long updates strategy becomes roundrobin scheme however model cannot easily described limiting system update every seconds261 0 update interval average time choices timebased recordinsert figure 4 centralized strategies perform better bulletin board directly however choosing shortest two random servers still performs reasonably well comparison demonstrating distributed settings global information may difficult maintain arrival rate known advance remains strong choice continuous update periodic update system one possible model old information consider another natural model distributed environments continuous update system bulletin board updated continuously board remains seconds behind true state times hence every incoming task may use load information seconds ago making destination decision model corresponds situation transfer delay time incoming jobs determine processor join time join begin modeling similar scenario suppose task upon entry sees billboard information time x ago x exponentially distributed random variable mean random variables independent task examine model later consider changes necessary replace random variable x constant modeling system appears difficult seems keep track past instead shall think system working follows tasks first enter waiting room obtain current load information queue lengths immediately decide upon destination according appropriate strategy wait time x exponentially distributed mean independent among tasks note tasks information tasks waiting room including many destinations wait period finished proceed chosen destination time waiting room counted time system claim system equivalent system tasks arrive servers choose server based information time x ago described key observation note arrival process waiting room poisson exit process waiting room also poisson easily shown standard arguments interestingly another interpretation waiting room communication delay corresponding time takes task client move server model thus related similar models 12 state system represented collection numbers set ordered pairs case p ij fraction servers j current tasks tasks sitting waiting room similarly shall say server state j j tasks enqueued tasks waiting room model let q j arrival rate tasks waiting room choose servers current load j destination expression q j depend strategy choosing queue easily determined section 31 formulate differential equations consider first server state j 1 queue leave state one three ways task complete service occurs rate new task enter waiting room occurs rate q j message move waiting room server assumption exponentially distributed waiting times occurs rate similarly one determine three ways server enter j following equations include boundary cases dp 00 dt dp 0j dt dp i0 dt dp ij dt 41 fixed point periodic update model system converges fixed cycle simulations demonstrate continuous update model quickly converges fixed point dp ij dt therefore expect suitably large finite system equilibrium distribution server states concentrated near distribution given fixed point hence solving fixed point one estimate system metrics expected time queue using example littles law fixed point approximated numerically simulating differential equations solved using family equations dp ij dt fact approach leads predictions system behavior match simulations quite accurately detail section 43 using techniques discussed 16 17 one prove strategies consider fixed point stable informally means trajectory remains close fixed point gets close omit straightforward proof simulations suggest fact limiting system converges exponentially fixed point distance fixed point trajectory decreases geometrically quickly time see 16 17 although prove special cases proving exponential convergence systems general remains open question 42 continuous update constant time theory possible extend continuous update model approximate behavior system bulletin board shows load information seconds ago x constant random variable value customers time waiting room must made approximately constant done effectively using erlangs method stages essential idea replace single waiting room series r consecutive waiting rooms time task spends waiting room exponentially distributed mean tr expected time waiting variance decreases limit r 1 though waiting time constant taking reasonable sized r lead good approximation constant time distributions handled similarly see eg 17 practice model difficult use state server must board seconds behind update interval average choices 3 choices shortest figure 5 task sees loads seconds ago represented r 1dimensional vector keeps track queue length number customers r waiting rooms hence number states keep track grows exponentially r may still possible use approach cases truncating state space appropriately however remainder consider model simulations 43 simulations section 34 present results simulating actual queueing systems chosen case 09 representative case illustrative purposes one might expect limiting system proves accurate n increases differences among strategies grow pronounced arrival rate first examine behavior system x waiting room time fixed constant case system demonstrates behavior remarkably similar periodic update model shown figure 5 example choosing shortest server performs poorly even small values two choices performs well broad range consider case x exponentially distributed random variable mean however system behaves radically differently figure 6 three strategies consider extremely well much better x board z seconds behind z exponential mean update interval average choices 3 choices shortest figure task sees loads x seconds ago x independent exponential random variables mean fixed constant found deviation results simulations limiting system small within 12 two three choices used 520 tasks choose shortest queue case periodic updates section 34 suggest interpretation surprising behavior beginning considering customers choose shortest queue periodic update model saw strategy led herd behavior tasks going small set servers behavior evident model x fixed constant takes time entering customers become aware system loads changed case x randomly distributed however customers enter almost time may different views system thus make different choices hence herd behavior mitigated improving load balancing similarly performance improves strategies well justify interpretation considering distributions x cases x uniformly distributed t2 3t2 0 2t given figures 7 figures 8 perform noticeably better case x fixed larger interval performs dramatically better suggests useful tasks get accurate load information ie x close 0 also explains behavior x exponentially distributed board z seconds behind z uniform t23t2 update interval average choices 3 choices shortest figure 7 task sees loads x seconds ago x independent uniform random variables t2 3t2 board z seconds behind z uniform 02t update interval average choices 3 choices shortest figure 8 task sees loads x seconds ago x independent uniform random variables 0 2t setting demonstrates randomness used symmetry breaking periodic update case task choose two servers one introduces asymmetry continuous update case one also introduce asymmetry randomizing age load information setting also demonstrates danger assuming models behavior vary strongly one changes underlying distributions example many cases queueing theory results proven models service times exponentially distributed results often easier obtain assumed behavior service times constant mean similar cases even provable relationships two models see example 14 20 case however changing distribution random variable x causes dramatic change behavior 5 individual updates models considered thus far bulletin board contains load information time servers natural ask happens servers update load information different times may case systems servers individually broadcast load information clients individual update system servers update load information bulletin board individually convenience shall assume time update every server independent exponentially distributed mean note model bulletin board contains load information keep track updates occurred state system represented collection ordered pairs case p ij fraction servers true load j load posted bulletin board let q arrival rate tasks servers load posted bulletin board expression q depend strategy choosing queue let total fraction servers true load time regardless load displayed bulletin board note true load server displayed load bulletin board match update occurs hence considering p ii changes term corresponding one fraction servers load generates update following equations readily derived similar fashion previous sections dp i0 dt dp ij dt individual updates every z seconds z exponentially distributed mean update interval average choices 3 choices shortest figure 9 server updates board every x seconds x exponentially distributed mean dp 00 dt dp ii dt continuous update model simulations model converges fixed point one prove fixed point stable qualitatively behavior appears similar periodic update model seen figure 9 6 competitive scenarios assumed thus far models tasks adopt underlying strategy goal reduce expected time tasks competitive environment tasks may instead independently act best interests necessary consider effects antisocial competitive clients may follow proposed universal strategy consider briefly specific example suppose system task supposed choose shortest two randomly chosen servers case antisocial task may attempt improve situation obtaining entire bulletin board proceeding server smallest posted load tasks better tasks competitive environment tasks little motivation follow suggested strategy study problem examining situation customer adopts antisocial strategy probability p model possible set corresponding limiting system since tasks strategy expressed probabilistic mixture two strategies example case simulations customers see load information exactly seconds ago revealing table 1 provides numerical results based simulations servers small fraction p competitive customers sufficiently small competitive tasks reduce average time acting standard strategy cases choosing two servers performs poorly introducing competitive customers actually reduce average time everyone although often antisocial customers better expense tasks larger values p system performance degrades customers average time antisocial customers spend system grow much larger customers sense tasks motivated choose shortest many average time system larger situation becomes even interesting however measure performance average time system complicated measure example may important tasks finish certain deadline case goal maximize probability finishes deadline simulations also shown model described even p choosing server shortest posted queue increases average time task variance time system customers adopt strategy lower customers table 1 intuitively probably customers make two choices quite unlucky choose two long queues hence tasks deadlines may motivated try another strategy even though appears worse terms average time system believe many open questions consider area discuss conclusion avg time avg time avg time variance variance variance tasks 2 choices shortest tasks 2 choices shortest table 1 comparing simulation results antisocial tasks choose shortest choose two 7 open questions conclusions considered question useful old information context load balancing examining various models found surprising rule thumb choosing least loaded two random choices according old load information performs well large range system parameters generally better similar strategies terms expected time task spends system also seen importance using randomness order prevent customers adopting behavior demonstrated poor performance strategy choosing least loaded server setting believe great deal done area generally would like see models extended applied realistic situations example would interesting consider question regard load balancing scenarios virtual circuit routing regard metrics expected time system system tasks deadlines different theoretical framework problems limiting system approach might use well particular would convenient method yields tighter bounds case n number servers small finally problem handling realistic arrival service patterns appears quite difficult particular well known service distributions heavytailed behavior load balancing system quite different service distribution exponential however expect rule thumb performs well scenario well entirely different flavor problems arises considering problem old information context game theory generally assumed models tasks adopt underlying strategy goal reduce expected time tasks competitive environment tasks may instead independently act best interests hence section 6 considered effects antisocial clients may follow proposed strategy generally may think systems multiplayer games leads several interesting questions task individual player optimal strategy selfinterested player ie player whose goal minimize expected time system say easily strategy computed online strategy different optimal strategy minimize average expected time simple stable strategies player motivated deviate strategy gain acknowledgments author thanks many people digital systems research center offered input work progress special thanks go andrei broder ed lee chandu thekkath many helpful suggestions r analysis simple algorithms dynamic load balancing making commitments face uncertainty pick winner almost every time balanced allocations adaptive load sharing homogeneous distributed systems comparison receiverinitiated senderinitiated adaptive load sharing characterization convergence private communication cluster based scalable network services efficient pram simulation distributed memory machine approximation population processes analysis effects delays load sharing adaptive load sharing heterogeneous distributed systems constant time per edge optimal rooted tree net works load balancing density dependent jump markov pro cesses power two choices randomized load balancing analysis randomized load balancing schemes constant time per edge optimal rooted tree net works large deviations performance analysis efficiency greedy routing hypercubes butterflies effect communication delays performance load balancing policies distributed systems optimal assignment customers parallel servers deciding queue join counterexamples optimality shortest line discipline differential equations random processes random graphs queueing system selection shortest two queues asymptotic approach tr ctr alok shriram anuraag sarangi avinash ichu model processor allocation distributed operating systems acm sigops operating systems review v35 n3 p1621 july 1 2001 avinash shankaranarayanan frank dehne andrew lewis template based static coalition protocol a3p vigrid proceedings 2006 australasian workshops grid computing eresearch p5562 january 1619 2006 hobart tasmania australia nelly litvak uri yechiali routing queues delayed information queueing systems theory applications v43 n12 p147165 januaryfebruary k ho h v leong improving scalability corba event service multiagent load balancing algorithm softwarepractice experience v32 n5 p417441 25 april 2002 hanhua feng vishal misra dan rubenstein optimal statefree sizeaware dispatching heterogeneous mgtype systems performance evaluation v62 n14 p475492 october 2005 giovanni aloisio massimo cafaro euro blasi italo epicoco grid resource broker ubiquitous grid computing framework scientific programming v10 n2 p113119 april 2002 adam kirsch michael mitzenmacher simple summaries hashing choices ieeeacm transactions networking ton v16 n1 p218231 february 2008 mauro andreolini michele colajanni ruggero morselli performance study dispatching algorithms multitier web architectures acm sigmetrics performance evaluation review v30 n2 september 2002 michael e houle antonios symvonis david r wood dimensionexchange algorithms token distribution treeconnected architectures journal parallel distributed computing v64 n5 p591605 may 2004 changxun wu randal burns handling heterogeneity shareddisk file systems proceedings acmieee conference supercomputing p7 november 1521 walfredo cirne francine berman herd smart aggregate behavior selection job request ieee transactions parallel distributed systems v14 n2 p181192 february raffaella grieco delfina malandrino vittorio scarano secs scalable edgecomputing services proceedings 2005 acm symposium applied computing march 1317 2005 santa fe new mexico michael mitzenmacher power two choices randomized load balancing ieee transactions parallel distributed systems v12 n10 p10941104 october 2001 mauro andreolini sara casolari load prediction models webbased systems proceedings 1st international conference performance evaluation methodolgies tools october 1113 2006 pisa italy yukwong kwok lapsun cheung new fuzzydecision based load balancing system distributed object computing journal parallel distributed computing v64 n2 p238253 february 2004 michael dahlin interpreting stale load information ieee transactions parallel distributed systems v11 n10 p10331047 october 2000 changxun wu randal burns tunable randomization load management shareddisk clusters acm transactions storage tos v1 n1 p108131 february 2005 yu state art locally distributed webserver systems acm computing surveys csur v34 n2 p263311 june 2002