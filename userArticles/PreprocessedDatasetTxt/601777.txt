deciding confluence ordered term rewrite systems replace b introduction rewrite systems trs applied many problems symbolic computa tion automated theorem proving program synthesis verification logic programming among others two fundamental properties trs termination confluence together ensure existence uniqueness normal forms hence decidable word problem let us take closer look properties termination trs undecidable even leftlinear onerule systems dau89 however trs r terminates reduction ordering l r l r 2 r practical generalpurpose methods defining standard trs cannot deal inherently nonorientable axioms like commutativity axiom therefore generalized ordered trs e rewriting second author partially supported nsf grants ccr9712396 int9401087 three authors supported ccl esprit working group 22457 earlier verion work presented lics98 conference included similar results limited lpo ordering done applying equations e whatever direction agrees hr87 hence ordered trs handle set equations e terminating definition standard choice practice existing generalpurpose path orderings since easily defined implemented section 2 characterize requirements needed solving word problems ordered rewriting show obtained simple way path orderings confluence undecidable general terminating trs decision procedure given knuth bendix landmark paper kb70 trs confluent critical pairs joinable ordered trs deciding confluence difficult long standing open question listed instance open problem 64 rta93 list djk93 main problem due ordering restrictions different instances critical pair may require different joinability proofs prove decidability confluence belongs class path orderings possible finitely analyze joinability ground instances possibly new symbols critical pair dealing new symbols essential deciding arbitrary word problems also fundamental characteristic notion confluence since weaker property ground confluence ie confluence rewriting ground terms given signature undecidable even terminating standard trs kno90 example let e consist clearly nonorientable single equation critical pair cp z show confluence prove every instance cpoe joinable ordered rewriting e example done considering number wellchosen ordering relations terms cover possible cases one hand one considers yoe possible relations uoe cases joinability follows note sufficient consider relations variables observed mn90 general picture simple previous example joinability proofs may one step cases ordering relations considered must compatible ones previous steps also new equality relations may introduce additional subterms rewritten furthermore one show search process attempted joinability proofs case analysis finite covering possible cases following building critical pair cp arbitrary confluence tree whose nodes orderingconstrained equations whose root cp children node obtained three possible steps constrained rewriting decomposition instantiation steps precisely generate right ordering relations analyzed main result finally e confluent leaves trees tautologies whole process building trees importantly relies existing results ordering constraint solving also case proof finiteness trees adapt constraint solving algorithms nie93 extended signature semantics ie new symbols may appear solutions recursive path ordering status rpos rpos every symbol assigned lexicographic multiset status lexicographic path ordering lpo multiset path ordering mpo obtained particular cases rpos making symbols lexicographic multiset respectively see eg der82 refined path orderings like kns kns85 rdo les90 included well since orderings coincide ground terms der87 hence constraint solving algorithms apply emphasize decision procedure theoretical interest since knuth bendix paper late 60s lot work devoted completion standard trs ordered unfailing completion ordered trs eg bdh86 hr87 pet90 mn90 bd94 ordered completion provably yields confluent system possibly infinite number iterations roughly amounts systematic closure trs inclusion simplifications nonjoinable critical pairs order enhance efficiency completion find finite complete trs whenever exist powerful methods proving joinability hence redundancy critical pair crucial precisely method able automatically making also possible decide whether completion finished fact nn93 reported use similar trees saturate system gnn95 successful method proving redundancy critical pairs furthermore case nonjoinability instead adding critical pair e one may choose add nontautology leaves tree comparing result undecidability confluence arbitrary finite term rewriting systems seems quite surprising favour ordered rewriting since extending notion reduction go undecidability decidability obvious clue result ordered rewriting always terminating however picture simple instance also show finite sets constrained equations confluence undecidable ordered rewriting still terminating relativizes scope decidability result also shows significance unfortunately completion constraint inheritance kkr90 nr95 constrained equations appear even start unconstrained ones equation e j c constraint c records conditions e derivable restricts number critical pairs considered arbitrary simplification rewriting allowed context problem decide joinability critical pairs rewriting set constrained equations easy simplification arbitrary constrained rule undecidable ct97 given term rule l r j c undecidable whether instances reduced going investigate use ordered rewriting classical application rewrite systems proofbyconsistency approach proving inductive theorems km87 jk86 bac88 result opposite happens case finite rewriting systems show ground reducibility undecidable ordered rewriting paper organized follows mainly focus decidability result decidability confluence first recall section 2 basic notions ordered rewriting well results ordering constraints section 3 introduce confluence trees show solve constraints set normal forms derive decidability confluence section 4 sketch undecidability confluence finite set constrained equations section 5 show ground reducibility undecidable ordered rewriting finally section 6 state possible extensions implications decidability result areas ordered rewriting rpos constraints adopt terminology notations dj90 set firstorder terms built alphabets f function symbols x variable symbols f set terms contain variables multiset set function union intersection multisets defined usual 1 2 also use setlike notation denotes x 6j b multiset empty equation multiset two terms written positions term strings positive integers corresponding paths tree representation term set positions term written post p position tj p subterm position p tu p term obtained replacing tj p u position p topmost symbol term size term denoted jtj 1 variable term ft two terms identity written j order distinguish equality symbol equations binary relation set inverse symmetric closure reflexivetransitive closure transitive closure write 0 0 called normal form relation wellfounded terminating exists infinite sequence confluent relation contained joinability relation ffi locally confluent relation ffi contained joinability relation ffi relation terms monotonic terms u positions p strict partial ordering irreflexive transitive binary relation ordering reduction ordering wellfounded monotonic stable substitutions implies soe toe oe range word problem set equations e check given equation logical consequence e denoted usual e denote e smallest monotonic relation terms soe e toe substitutions oe 21 ordered rewriting ordered term rewrite system trs pair e e set equations reduction ordering ordered rewriting relation defined e smallest binary relation e terms soe e toe whenever soe toe aim apply ordered rewriting e solving word problems e built general universally quantified wellknown suffices consider ground signature sufficiently many new constant symbols purposes need go slightly beyond consider one new symbol succ following let 0 constant symbol f constant f 0 added usual let succ new unary function symbol f let f e denote f fsuccg proposition 1 let e set equations let equation terms e built oe substitution fx 1 7 soe standard rewriting termination confluence r suffice solving word problems theory trs r since r r ie unique normal forms r coincide ordered rewriting longer case relation e restricted ordering example empty ordering e empty well hence confluent terminating useless purpose necessary condition clearly unique minimal element wrt econgruence class even insufficient e smallest relation containing c b c e confluent terminating c different eequivalent normal forms since proposition 1 suffices consider word problems equation proved built literature problem overcome requiring total ground terms show weakened sufficient orients nontrivial instances equations ie instances onestep rewrite proof using e fact suffices consider rewrite proofs arbitrary number steps leads following precise characterization needed deciding word problems ordered term rewrite system e confluent terminating following two statements equivalent 1 uoe e voe oe range 2 hence word problem e decidable proof second statement trivially implies first one conversely 2 clearly derivation monotonicity step decomposed zero steps e confluence termination e implies 2 lemma shows relevance following set equations built given wellfounded monotonic ordering f ordered rewrite system e ground confluent e confluent f given wellfounded monotonic ordering confluent e confluent note classical term rewriting confluence defined arbitrary extensions f new symbols makes sense ordered rewriting without extending accordingly said extension practice hence definition confluence ordered trs adequate counterpart confluence classical trs classical term rewriting ordered rewriting gap confluence ground confluence given ordering confluence implies ground confluence converse false easy example given 0g rewrite system confluent however f consists 0 f system ground confluent example also applies ordered rewrite systems introducing new symbols f e allows form critical peaks cannot reduced example corresponding would fsucc0 e succ0 fsucc0 e 0 distinct normal forms succ0 0 next section new symbol succ also used build solutions ordering constraints crucial respect 22 recursive path ordering status rpos let ordering terms let congruence relation lexicographic left right extension lex wrt ntuples defined k well founded lex extension multisets denoted mul smallest relation extension multisets wrt defined smallest ordering mul st wellfounded mul finite multisets dm79 let f wellfounded ordering f called precedence let stat status function stat f flexmulg rpos ordering defined follows rpos x x variable proper subterm else j least one following conditions hold hence nm hence nm rpos mul rpos defined wrt rpos equality permutation arguments function symbols mul multiset status rpos reduction ordering terms fulfills subterm property rpos proper subterm hence also contains strict tree embedding relation smallest transitive monotonic relation emb emb proper subterm lpo particular case rpos lex lexicographic status symbols simplification ordering total f f total f rpos total total f lpo total precedence standard choice ordered trs since fulfills requirements lemma 1 precedence total f rpos requirements ensured making f lexicographic whenever permuting equations possibly context permutation thus avoiding nonorientable f e instances hence following assume rpos rpos linear precedence f e 0 smallest constant symbol f constant f add one wlog unary symbol succ smallest function symbol furthermore consider ordered rewrite systems e rpos results apply equivalently ordered trs e ordering iff rpos ground terms particular case aforementioned path orderings kns rdo ordering lpo used several times denote rpos symbols lexicographic status example 1 let e set fx zg j hence also succ000 e lpo 0succ00 e lpo 00succ0 latter term irreducible example 2 let e set ffx fa e lpo ga fa also rewrites ga b ga 0 ga succ0 etc since choice instantiate socalled extra variable z long step reductive wrt lpo course e lpo confluent choices lead normal form equivalent set confluent terms form fs gs gs 0 unique normal form clearly 0 efficient choice instantiating extra variables like z fact reach normal form one eventually forced chose 0 23 rpos constraints definitions notations section consistent com90 nie93 nr95 refer details main results restrict rposconstraints extended signature semantics see needed results confluence following rpos constraint boolean combination using connectives atoms ordering constraint interpreted boolean connectives usual meaning assignment oe variables resp oe assignment oe satisfies constraint c oe called solution c sometimes write chains also shorthand example 3 let oe assignment fx 7 succ0 7 succsucc0g oe x constraint fx unsatisfiable independently lexicographic multiset status f interesting property rpos nonvariable terms relation follows least one conjunction relations form subterms respectively jsj rise socalled rpos decomposition relation j fs ffl rpos decompositions rpos decomposition form ie constraints implying hs rpos decompositions implying rpos decompositions rpos constraint c without disjunctions called rposclosed iff 0 x c relation c nonvariable terms c contains rposdecomposition contained well j example 4 suppose f f e g rpos decomposition fx ygx z fx yx yz four rpos decompositions gx yfy z xfy z xfy z z six rpos decompositions fx fy z namely xfy z yfy z xfy z yfy z xy fx yz xy yz one rpos decomposition fx yfz x namely yz simple system particular constraint form n n every strict subterm j least equivalence relation fs contains pairs least transitive relation fs containing pairs respectively equality ordering constraints deduced follows assume terms occurring simple system written sorted way occurs f multiset status 1 n equational part simple system write eqparts tg inequational part denoted ineqparts fsoe oe general simultaneous unifier eqparts eqparts unifiable called purely inequational j ineqparts satisfiability problem rpos constraints extended signatures solved np time following methods nie93 key steps results follows 1 constraint c effectively equivalent finite disjunction simple systems hence c satisfiable satisfiable 2 simple system unsatisfiable eqparts unifiable 3 simple system equivalent ineqparts eqparts unifiable 4 purely inequational simple system satisfiable rposclosed proof sketch proof last statement since less obvious construction used throughout paper first note contains rpos decomposition must unsatisfiable since closed subterms hence must contradiction rpos decompositions happens example constraint fy reverse implication form build solution oe right left ie induction index variable let oe succ0 see oe indeed solution use fact rposclosed using induction argument jsj jtj relation shown substitution oe satisfies satisfies relations variable turn holds since succ new smallest symbol see nie93 details 2 following previous kind solution called minimal solution note alien every variable x solution xoe headed new 3 decidability confluence ordered rewriting following e rpos ordered trs according previous section assume terms e belong substitutions interpretation constraints constrained equation pair equation c constraint denotes instances equations oe hence tautology soe j toe oe critical pair two equations e constrained equation ut position p uj p variable newmanns lemma states terminating relation confluence equivalent local confluence term rewriting resp ordered rewriting reduces joinability critical pairs following result essentially due j hsiang rusinowitch hr87 see also bdh86 lemma 2 erpos confluent every critical pair equations e instances joinable ie term u erpos u erpos toe confluence tree e rpos critical pair tree nodes constrained equations root children node e j c constrained equations obtained one following three kinds steps 1 constrained rewriting e j c rewritten complementary equation e j c roe loe iff loe roe satisfiable every variable x r occurring l xzyxz xzyzx z yx z x figure 1 example confluence tree 2 decomposition e j c rewritten fe c satisfiable simple system fs equivalent set simple systems c 3 instantiation e j c rewritten eoe j ineqpartc c satisfiable purely inequational simple system oe general unifier eqpartc example 5 consider set e critical pairs pairs yield unsatisfiable constraints renamings pairs confluence tree rooted first one automatically generated saturate system nn93 depicted figure 1 note constrained rewrite step associativity axiom like one applied root complementary equation always unsatisfiable constraint hence shown three framed nodes leaves leftmost one tautology hence e confluent last step two rightmost framed nodes decomposition instantiation three nodes without descendants become leaves one step decomposition instantiation followed cases one rewrite step associativity proof plan decision procedure based construction one arbitrary confluence tree critical pair main result erpos confluent trees tautology leaves purpose first show trees finite lemma 3 easy decide whether leaf tautology lemma 4 lemma 5 show every instance critical pair root rewritten leaf hence erpos confluent leaves tautologies since instances critical pairs joinable finally harder reverse implication lemma 6 every nontautology leaf c reconstruct substitution oe necessarily solution c soe toe distinct normal form contradicts confluence since e lemma 3 every confluence tree finite proof tree finitely branching hence konigs lemma suffices show every path finite assume contrary finite number instantiation steps applied branch since reduce number variables descendant nodes two consecutive decomposition steps applied node hence must infinite branch constrained rewriting steps one followed zero one de compositions branch infinite subsequence complementary steps since number possible applications equations finite e finite complementary steps applied twice position noncomplementary constraint becomes unsatisfiable hence must infinite number noncomplementary steps kruskals theorem since terms tree built finite set symbols infinite branch must node e construction tree oe oe c constrained equation c purely inequational simple system tautology either c unsatisfiable j proof clearly c unsatisfiable j tautology reverse direction suppose c satisfiable 6j c alien solution oe every variable x solution xoe headed new symbol succ easy see alien oe cannot unify two different terms hence soe 6j toe tautology 2 lemma 5 let confluence tree rooted leaves tautologies instances joinable proof let soe toe instance soe toe show induction depth tree soe toe joinable already leaf must tautology instances tautologies trivially joinable otherwise children obtained one three different steps constrained rewriting children sr either instance one children rewrites one case joinability follows induction hypothesis subtree smaller depth decomposition children g since c equivalent disjunction toe instance one children joinability follows induction hypothesis instantiation descendant still instance child joinability follows induction hypothesis 2 lemma 6 let e rpos ordered trs let confluence tree critical pair two equations e nontautology leaf erpos confluent proof nontautology leaf c reconstruct substitution oe necessarily solution c soe 0 oe distinct normal form wrt erpos contradicts confluence since e first build satisfiable rposclosed constraint g graph expressing 0 irreducible let ff alien solution c ff used totally order set rpos different subterms 0 simple system spine g containing subterms 0 ff solution spine spine first part g add g relations r ribs g l j hence r contain variables spine variables g spine g since ff solution c rff rpos lff otherwise would reducible would leaf impossible ff alien l 6 rpos r rff rpos lff hence ff satisfies g spine ribs close g rpos keeping ff solution g since spine already rposclosed done ribs r produces new ribs form j since equalities impossible ff alien note variable since variables already spine complete proof showing minimal solution oe spine satisfies whole g distinct irreducible wrt erpos suffices show toe rpos soe pairs g spine hence variable proceed induction ordering pairs whose first component situation spine whose second component subterm ordering variable toe rpos oe since contains least one symbol g f g f e 0 variable induction hypothesis toe rpos igamma1 oe hence since headed symbol f variable follows induction hypothesis relations smaller measure since g rposclosed oe satisfies spine distinct prove also irreducible wrt erpos proceed induction subindices succ0 clearly irreducible 1 ground also irreducible since 1 subterm leaf induction step variable oe succs igamma1 oe irreducible since igamma1 oe irreducible induction hypothesis variable form ft j k k j oe irreducible induction hypothesis hence check reducibility topmost position suppose oe j l show case alien variable positions l must positions otherwise nonvariable position l would succ means j lae ae j aeae 0 ae 0 lae rpos rae done lae 6 rpos rae rae lae relation g hence raeoe rpos laeoe implies r rpos l 2 theorem 1 confluence ordered trs e rpos let us conclude section example application show completion associativity commutativity axioms yields confluent ordered rewrite system making use algorithm check confluence example 6 continue example 5 consider axioms associativity commutativity binary lexicographic status symbol axioms cannot handled standard completion commutativity cannot oriented without loosing termination confluence tree example 5 shows two axioms alone confluent wrt ordered rewriting since leaves confluence tree tautologies may however add equations leaves tree original set axioms without modifying original equational theory completion process check ordered confluence instance following figure 1 may add equation x original set equations 3 equations presentation turns confluent wrt ordered rewriting 10 critical pairs considered hence associated confluence trees tautology leaves cannot depicted automatically reproduced saturate system example confluence also proved means incomplete method given martin nipkow mn90 method based fact every instance oe critical pair cp orders variables cp way sometimes one prove confluence ordering example one cp ordering x information needed show sides cpoe rewrite x 1 oe fact normalization rewrite system simply sorting associating right note many cases eg example given introduction martin nipkows analysis coarse general even case analysis possible orderings subterms critical pair suffice 4 undecidability confluence constrained equations use full constraints inheritance ordered completion generates constrained equations hence would nice able decide confluence ordered rewrite system e rpos also consider case e may contain constrained equations show impossible going unconstrained constrained equations confluence becomes undecidable given constrained equation rewrites v using e u rewrites v using instance soe toe oe confluence ground confluence sets constrained equations defined accordingly theorem 2 problem confluence ordered rewriting finite set constrained equations undecidable proof main idea express without reference 0 term cannot contain 0 reduce ground confluence terminating rewrite system confluence ordered rewriting respect set constrained equations hand ground confluence undecidable even terminating rewrite systems reduce ground confluence problem lpoterminating string rewriting confluence ordered rewriting finite set constrained equations former undecidable kno90 consider system r uv kno90 section 5 involves unary function symbols right hand side reduced variable system terminating termination proved using lpo extending total precedence finite alphabet unary function symbols plus constant smallest constant signature extend signature f 3 function symbols succ 0 lower end precedence let f set equations contains r uv plus following additional copy rules r uv basically first equation expresses want solutions mfx fx terms succ resulting set constrained equations claim every term 2 belongs according three last sets rules irreducible term f succ 0g 0 every term set reduces 0 first set rules eliminates occurrences succ confluent since critical pairs trivially joinable moreover reduction relation respect e 0 normal form reached shown induction number rewriting steps implies generally claim e confluent iff r uv ground confluent proves undecidability first assume r uv ground confluent f e 1 ground confluent show local confluence assume commutation property 2 ground confluence joinable shows confluence conversely assume e confluent e 1 confluent term rewritten rules e 1 replacing 0 get confluence r uv 5 undecidability ground reducibility let us recall term ground reducible wrt rewrite system r iff instances reducible r definition extends ordered rewriting replacing r e e finite set unconstrained equations ground reducibility decidable arbitrary finite term rewriting systems pla85 show undecidable finite sets equations theorem 3 problem input finite set unconstrained equations e term lexicographic path ordering question ground reducible wrt e undecidable proof reduce halting problem twocounters machine first let us recall computation model deterministic two counter machines tuple q finite set states set final states q 0 initial state delta transition function q finite set actions consisting 1 couples 1 2 couples 2 3 triples 1 q 4 triples 2 q assume delta undefined states q 2 q f configuration machine consists two nonnegative integers n state q 2 q move machine configuration n possible iff transition deltaq 1 either 1 increase counter move q 0 2 2 counter zero move q 0 without changing counters values 3 counter positive decrement move q 0 input machine nonnegative integer n corresponding initial configuration n 0 q 0 machine halts input n iff finite sequence transitions yielding configuration n following problem undecidable min67 input two counter machine nonnegative integer n question n k k 0 figure 2 representation sequence configurations may assume without loss generality q 0 6 q 00 whenever suffices introduce two new states q 0 1 q 0 order encode twocounters machines consider alphabet every symbol q set states machine ternary symbol b unary symbols 0 constant f ordered according q states ordered arbitrary way let n term q 0 n 0 0 x going show n ground reducible wrt set equations defined iff halts n intuitively going design e way irreducible ground instances n encode halting sequences successive configurations machine depicted figure 2 configurations machine n divide set equations 2 parts first part independent delta designed way sequences possible configurations necessarily consecutive ones kept irreducible terms second set main one encodes computations machine first set equations 1 qx every non final state q 2 qx every state q 3 qq 0 every states q q 0 4 every states q q 0 5 aqx every state q equations actually turned rules left right irreducible ground terms wrt rules terms k 0 terms form n k k 0 final state let 1 set ground terms follows consider applicability rules 1 second set equations equation 7 simply remove configurations cannot consecutive successive states 7 move counters right way following array displays equations case summarizes constraints imposed rule terms 1 equation condition transition constraint resulting irreducibility 9 qx 8 applied left right reduces term qa cannot applied right left terms 1 since b occur term 1 applied left right reduces term qa 9 cannot applied right left terms 1 10 forces putting together 8 9 10 assume rule irreducible root iff note role b twofold time appears right member rule consider possible applications equation left right since b occur term 1 forces consider particular orientation recall follows b minimal precedence plays role ordering constraint except prevents equalities similar way 11 12 force second counter remain constant ie rules similar equations 812 transitions equation condition transition constraint resulting irreducibility 14 qx finally design similar rules transitions displayed next array equation condition transition constraint resulting irreducibility 19 qx 22 q0 26 qx 28 qx 29 qx 34 qx instance equations 18 22 force transition q 0 first counter 0 transition q 00 counter 0 new values counters forced equations 19 20 21 case transition q 0 2326 case transition q 00 end get looking irreducible terms 1 every pattern qa corresponds move n machine 2 6 conclusion shown behaviour ordered rewriting exactly opposite classical term rewriting two important problems confluence ground reducibility confluence becomes decidable whereas undecidable term rewriting ground reducibility becomes undecidable whereas decidable term rewriting results provide interesting insights theory ordered rewriting regarding proof confluence ordered trs fact show confluence equivalent ground confluence signature new symbol succ finally show decidable difficult show terminating trs results hold regarding applications completion apart already mentioned introduction also remark decision method works well instead building tree critical pair e j c uj p build eoe j starting empty ordering constraint however initial constraint c increases efficiency procedure practice reducing size tree several questions remain open instance results heavily rely particular class path orderings class orderings useful context ordered trs confluence also decidable acknowledgment thank r treinen comments earlier version paper r proof consistency equational theories equational inference orderings equational proofs solving symbolic ordering constraints firstorder theory lexicographic path orderings undecidable simulation turing machines leftlinear rewrite rule orderings termrewriting systems termination rewriting rewrite systems problems rewriting proving termnation multiset order ings saturate system word problems equational theories automatic proofs induction equational theories without constructors simple word problems universal algebras deduction symbolic constraints proof consistency ground confluence term rewriting systems path ordering proving termination term rewriting systems recursive decomposition ordering lexicographical status related orderings ordered rewriting confluence simple lpo constraint solving methods practical results saturation full firstorder clauses experiments saturate system theorem proving ordering equality constrained clauses complete sets reductions constraints confluence tests completion methods tr path ordering proving termination term rewriting systems proof consistency word problems equational theories termination rewriting simulation turing machines leftlinear rewrite rule groundconfluence term rewriting systems recursive decomposition ordering lexicographical status related orderings ordered rewriting confluence complete sets reductions constraints simple lpo constraint solving methods equational inference canonical proofs proof orderings theorem proving ordering equality constrained clauses firstorder theory lexicographic path orderings undecidable proving termination multiset orderings problems rewriting saturation firstorder constrained clauses saturate system