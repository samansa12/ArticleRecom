binary space partitions fat rectangles consider practical problem constructing binary space partitions bsps set n orthogonal nonintersecting twodimensional rectangles bbb r3 aspect ratio rectangle alpha constant alpha geq 1 present n2osqrtlog ntime algorithm build binary space partition size n2osqrtlog n also show n rectangles aspect ratios greater alpha construct bsp size nsqrtm2osqrtlog n nsqrtm2osqrtlog n time constants proportionality bigoh terms linear log alpha extend results cases input contains nonorthogonal intersecting objects b introduction render set opaque partially transparent objects ir 3 visually realistic way fundamental problem computer graphics 12 22 central component problem hiddensurface removal given set ob jects viewpoint image plane compute scene visible viewpoint image plane importance hiddensurface removal problem support provided national science foundation research grant ccr9301259 army research office muri grant daah04 9610013 sloan fellowship national science foundation nyi award matching funds xerox corp grant us israeli binational science foundation address box 90129 department computer science duke university durham nc 277080129 email pankajcsdukeedu support provided army research office grant daah0493 g0076 work partially done author duke uni versity address maxplanckinstitut fr informatik im stadtwald 66 saarbrucken germany email eddiemathuriedu z author affiliated brown university support provided part national science foundation research grant ccr9522047 army research office muri grant daah049610013 address box 90129 department computer science duke university durham nc 277080129 email tmaxcsdukeedu x support provided part national science foundation research grant ccr9522047 army research office grant daah04 93g0076 army research office muri grant daah0496 10013 address box 90129 department computer science duke university durham nc 277080129 email jsvcsdukeedu studied extensively computer graphics computational geometry communities 11 12 one conceptually simplest solutions problem zbuffer algorithm 6 12 algorithm sequentially processes objects object updates pixels image plane covered object based distance information stored zbuffer fast hiddensurface removal algorithm obtained implementing zbuffer hardware however cost hardware zbuffer high specialpurpose costly graphics engines contain fast zbuffers zbuffers implemented software generally inefficient even fast hardware zbuffers present fast enough handle huge models containing hundreds millions polygons often displayed real time result methods developed either cull away large subset invisible polygons decrease rendering load zbuffer models large eg see 23 completely solve hiddensurface removal problem slow zbuffers one technique handle problems binary space partition bsp introduced fuchs et al 14 used bsp implement socalled painters al gorithm hiddensurface removal draws objects displayed screen backtofront order object occluded object earlier order general possible find backtofront order given viewpoint arbitrary set objects fragmenting objects bsp ensures viewpoint backtofront order determined fragments informally bsp set objects tree whose nodes associated convex region space regions associated leaves tree form convex decomposition space interior region intersect object fragments created bsp stored appropriate nodes bsp given viewpoint p backtofront order determined suitable traversal bsp node v bsp objects one vs subtrees separated vs subtree hyperplane viewpoint p lie one regions bounded hyperplane v traversal recursively visits first child v corresponding halfspace containing p child v efficiency traversal thus hiddensurface removal algorithm depends upon size bsp bsp subsequently proven versatile data structure applications many problems arise practiceglobal illumination 5 shadow generation 7 8 9 ray tracing 19 visibility problems 3 23 solid geometry 17 18 24 robotics 4 approximation algorithms network flows surface simplification 2 16 although several simple heuristics developed constructing bsps reasonable sizes 3 13 14 23 24 provable bounds first obtained paterson yao show bsp size 2 constructed n disjoint triangles ir 3 optimal worst case 20 graphicsrelated applications many common environments like buildings composed largely orthogonal rectangles moreover many graphics algorithms approximate nonorthogonal objects orthogonal bounding boxes work bounding boxes 12 another paper paterson yao show bsp size n exists n nonintersecting orthogonal rectangles ir 3 21 bound optimal worst case known lower bound examples orthogonal rectangles ir 3 requiring bsps n rectangles thin example paterson yaos lower bound proof uses configuration thetan orthogonal rect angles arranged p n theta n theta n grid bsp n rectangles construction aspect n configurations thin rectangles rarely occur practice many real databases consist mainly fat rectangles ie aspect ratios rectangles bounded constant examination four datasetsthe sitterson hall orange united methodist church fellowship hall sitterson hall lobby databases university north carolina chapel hill model soda hall university california berkeleyshows rectangles models aspect ratio less 30 natural ask whether bsps nearlinear size constructed rectangles fat call rectangle fat aspect ratio ratio longer side shorter side ff fixed constant ff 1 rectangle said thin aspect ratio greater ff paper consider following problem given set n nonintersecting orthogonal twodimensional rectangles ir 3 thin remaining fat construct bsp first show construct bsp size log n n fat rectangles ir 3 ie show 0 bsp size n m2 log n built bound comes close lower bound omegagamma n finally prove two important extensions sults show np2 log n size bsp exists p n input objects nonorthogonal unlike case orthogonal objects fatness help reducing worstcase size bsps nonorthogonal objects particular exists set n fat triangles ir 3 bsp nonorthogonal objects approximated orthogonal bounding boxes resulting bounding boxes might intersect motivated observation also consider problem n fat rectangles contain k intersecting pairs rectangles show construct bsp size n k2 log n lower bound size bsp cases constant proportionality bigoh terms linear log ff ff maximum aspect ratio fat rectangles algorithms construct bsps run time proportional size bsps build except case nonorthogonal objects running time exceeds size factor p experiments demonstrate algorithms work well practice construct bsps nearlinear size rectangles fat perform better paterson yaos algorithm orthogonal rectangles 1 far aware first work consider bsps practical common case two dimensional fat polygons ir 3 de berg considers weaker model case fat polyhedra ir 3 polyhedron said fat volume least constant fraction volume smallest sphere enclosing although results extend higher dimensions 10 one main ingredients algorithm log nsize bsp set n fat rectangles long respect box b ie none vertices rectangles lie interior b prove result crucially use fatness rectangles use procedure construct bsp size 43 fat rectangles algorithm repeatedly applies cuts bisect set vertices rectangles input set subproblems long rectangles total size subproblems 43 point invoke algorithm long rectangles improve size bsp log n simultaneously simulating algorithm long rectangles partitioning vertices rectangles clever manner rest paper organized follows section 2 gives preliminary definitions section 3 show build log nsize bsp n long rectangles show construct bsp size 43 section 4 sections 5 6 present analyze better algorithm constructs bsp size log n extend result section 7 construct bsps cases objects input thin ii nonorthogonal iii intersecting conclude section 8 open problems due lack space defer many proofs full version paper 2 geometric preliminaries binary space partition b set pairwise disjoint gamma 1dimensional polyhedral objects ir tree recursively defined follows node v b represents convex region r v set objects intersect r v region associated root ir v empty node v leaf b otherwise partition vs region r v two convex regions cutting set objects v lie h v let h positive halfspace h gamma v negative halfspace bounded h v regions associated left right children v r v r tively left subtree v bsp set objects right subtree v bsp set objects g size b number nodes b suppose v node b algorithms region r v associated v box rectangular paral lelepiped say rectangle r long respect r v none vertices r lie interior r v otherwise r said short long rectangle said edges lie boundary r v otherwise nonfree free cut cutting plane divides two nonempty sets cross rectangle note plane containing free rectangle free cut free cuts useful preventing excessive fragmentation objects often focus box b construct bsp rectangles intersecting given set rectangles r let set rectangles obtained clipping rectangles r within b set points p let pb subset p lying interior b although bsp tree often discuss partition region represented node two convex regions explicitly detail associated construction actual tree zaxis yaxis xaxis right face top face front face figure 1 different classes rectangles 3 bsps long fat rectangles let set fat rectangles assume rectangles long respect box b section show build bsp sb set rectangles clipped within b box b six facestop bottom front back right left assume without loss gen erality back bottom left corner b origin ie back face b lies yzplane see figure 1 rectangle belongs top class two parallel edges contained top bottom faces b similarly define front right classes long rectangle belongs least one three classes nonfree rectangle belongs unique class see figure 1 examples rectangles belonging different classes general sb three classes rectangles first exploit fatness rectangles prove whenever three classes present sb small number cuts divide b boxes two classes rectangles describe algorithm constructs bsp rectangles belong two classes first state two preliminary lemmas use section 5 first lemma characterizes set rectangles long respect box belong one class second lemma applies two classes long rectangles parameter real nonnegative c box p set points interior c r set rectangles long respect c rectangles rc belong one class exists face g box c contains one edges rectangle rc set vertices rectangles rc lie interior g time find plane h partitions c two boxes c 1 c 2 jv c 2 c box p set points interior c r set long rectangles respect c rectangles rc belong two classes find two parallel partition c three boxes either ii 1 3 jrc rectangles rc belong class 31 reducing three classes two classes let b sb defined earlier assume without loss generality longest edge b parallel x axis rectangles sb belong front class partitioned two subsets set r rectangles vertical parallel right face box b set rectangles horizontal parallel top face box b see figure 2a let e edge b lies zaxis intersection rectangle r back face b segment parallel zaxis r denote projection segment onto zaxis let r let z endpoints intervals r lie interior e interior interval r note less 2jrj figure 2b projected segments overlap similarly rectangle set define projection yaxis let ycoordinates vertices intervals defined way divide b kl boxes drawing planes planes figure 2b decomposition b kl boxes easily constructed treelike fashion performing cuts refer cuts ffcuts resulting box free rectangle figure 2b divide box two boxes applying c set boxes b partitioned manner prove following theorem decomposition b c place whole algorithm use fatness rectangles lemma 3 set boxes c formed process satisfies following properties yaxis zaxis c xaxis r z 3 z 0 b figure 2 rectangles belonging sets r b back face b dashed lines intersections back face ffcuts box c c two classes rectangles ii 26bffc 2 n boxes c endpoints e edge lies zaxis similarly define 0 l endpoints edge b lies yaxis c box c c contain rectangle r proof trivial since rectangles r together constitute front class suppose c contains rectangles set r rectangles r belong front class parallel right face b claim c cannot rectangles right class see claim consider edge c parallel zaxis endpoints edge zcoordinates z z i1 contains rectangle r interval z z i1 must covered projections rectangles r onto zaxis rectangle right class inside c must intersect one rectangles whose projections cover z z i1 cannot happen since rectangles intersect similar proof shows c contains rectangles c free rectangles top class first show k l 3 let respectively b c denote length edges b parallel zaxis respectively axis xaxis assumption b c let r rectangle r dimensions z x z x consider r projection r onto zaxis suppose r lies interior edge e b lying zaxis since r rectangle front class parallel right face b know z rectangle supporting r set dimensions z x z x x 0 k gamma 1 cannot claim z cases possible z much less z see figure 3 see follows length r hence length z z i1 least aff since every alternate interval least one rectangle r k 2bffc 3 similar manner l also 2bffc 3 implies b divided kl 2bffc boxes planes planes box c contain n rectangles hence n free cuts made inside c free cuts divide c n boxes implies set c 26bffc 2 n boxes rectangle r sb cut kl pieces edges pieces form arrangement r face arrangement one kl rectangles r partitioned 2k arrangement edge boundary r faces used free cuts hence possible free cuts used boxes b divided kl cuts 2k pieces rectangle sb survive proves two classes long rectangles let c one boxes b partitioned section 31 present algorithm constructing r r z x figure 3 projections r dashed rectan shaded rectangle right face b onto zxplane bsp set clipped rectangles sc two classes long rectangles recursively apply following steps boxes produced algorithm box contains rectangle 1 sc free rectangle use free cut containing rectangle split c two boxes 2 sc two classes rectangles use lemma 2 split c three boxes using two parallel free cuts 3 sc one class rectangles split c two plane suggested lemma 1 first analyze algorithm two classes long rectangles bsp produced following struc ture step 3 executed node v step 2 invoked descendant v view lemma 2 repeated execution steps 1 2 sc constructs ojsc j log js c bsp ojsc nodes leaf tc one class rectangles total number rectangles leaves js c j leaf v tree recursive invocations steps 1 3 build bsp size ojs v j log js v j ojs v j log js v details since sum taken leaves v tc total size bsp constructed inside c ojsc j log js c j analyze overall algorithm long rect angles algorithm first applies ffcuts rectangles sb described section 31 consider set boxes c produced ffcuts boxes c contains two classes rectangles lemma 3i view discus sion box c 2 c construct bsp sc size ojsc j log js c lemma 3ii 3iii imply total size bsp n bsp built time state following theorem theorem 1 let set n fat rectangles b box rectangles long respect b log nsize bsp clipped rectangles sb constructed log n time constants proportionality bigoh terms linear ff 2 ff maximum aspect ratio rectangles remark algorithm two classes long rectan gles using step 3 algorithm paterson yao constructing linearsize bsps orthogonal segments plane 21 rather log n algorithm arbitrarilyoriented segments plane 20 improve size bsp linear improvement implies construct linearsize bsps long rect angles need improved result except section 4 4 bsps size 43 section present simple algorithm constructs bsp size 43 n fat rectangles use intuition gained 43 algorithm develop improved bsp algorithm section 5 analyze improved algorithm section 6 need definition describing algorithm bisecting cut orthogonal cut divides b two boxes bisects set vertices rectangles lie interior b algorithm fat rectangles proceeds phases phase sequence three bisecting cuts exactly one cut perpendicular three orthogonal directions phase box contains free rectangle use corresponding free cut divide box two begin first phase box enclosing rectangles 4n vertices interior since n rectangles four vertices continue executing phases bisecting cuts node vertex interior termination node contains long rectangles invoke algorithm long rectangles construct bsp nodes crux analysis size bsp produced algorithm counting many pieces one rectangle split subjected specified number phases effect use following result due paterson yao 21 lemma 4 patersonyao rectangle subjected phases cuts free cuts used whenever possible divided o2 rectangles theorem 2 bsp ir 3 size 43 constructed n fat orthogonal rectangles constant proportionality bigoh term linear ff 2 ff maximum aspect ratio input rectangles vertices interior one phase cuts partitions b boxes k8 vertices interior since start n rectangles 4n vertices number phases executed algorithm dlog n3 implies total number rectangles formed phases executed theta 2 dlog n323e stage nodes long rectangles hence theorem 1 remark end section 3 imply constructing bsp nodes increases total size bsp constant factor proves theorem 2 5 improved algorithm algorithm proceeds rounds round simulates steps algorithm long rectangles well partitions vertices rectangles small number sets approximately equal size beginning ith round 0 algorithm top bsp set boxes associated leaves b containing least one rectan gle initial tree b 1 consists one node q 1 consists one box contains input rectangles algorithm maintains invariant box long rectangles sb nonfree q empty done otherwise ith round box construct top subtree tb bsp set sb attach corresponding leaf b gives us new top subtree b i1 thus suffices describe build tree tb box b round let f sb set rectangles sb long respect b set k number vertices rectangles sb lie interior b note vertex vertex original rectangle input set assumption rectangles f nonfree choose parameter remains fixed throughout round pick logfk optimize size bsp algorithm creates see section 6 describe ith round detail rectangles sb long apply algorithm described section 3 construct bsp sb otherwise perform sequence cuts two stages partition b follows separating stage apply ffcuts described section 31 make cuts respect rectangles f ie consider rectangles sb long respect b box formed free rectangle apply free cut along rectangle let c resulting set boxes dividing stage refine box c c applying cuts similar ones made section 32 described recursively invoke dividing stage box c partitioned let kc denote number vertices rectangles sc lie interior c set fc set rectangles f clipped within c 1 c free rectangle use free cut containing rectangle split c two boxes 2 jf nothing 3 rectangles fc belong two classes let pc denote set vertices rectangles sc lie interior c apply two 4 rectangles fc belong one class apply one cut h using lemma 1 cuts introduced dividing stage made treelike fashion end dividing stage set boxes box set sd contain free rectangle jf notice apply cuts c resulting boxes rectangles short respect c may become long respect new boxes ignore new long rectangles next round except induce free cut 6 analysis improved algorithm analyze size bsp constructed algorithm time complexity algorithm round algorithm constructs top subtree tb box b set clipped rectangles sb recall f set rectangles long respect b node c let tc subtree tb rooted c oe c number long rectangles fc nc number long rectangles sc n fc box corresponding leaf tb let f number long rectangles sd note f counts old long rectangles fd pieces rectangles long respect b new long rectangles sd nfd pieces rectangles short respect b became long respect due cuts made round f lemma 5 box associated leaf tb know nd k since rectangle sd n fd must piece rectangle short respect b k short rectangles hence since oe akd f ak2 lemma follows 2 box c tb use notation lc denote set leaves tc lemma 6 let c box associated node tb rectangles fc belong one class lemma 7 let c box associated node tb rectangles fc belong two classes lemma 8 tree tb constructed box b round following properties bound since vertex interior sb lies interior one box lb next use lemmas 6 7 prove bound d2lb fd similar argument prove bound jl b j let c set boxes b partitioned separating stage see figure 4 let c box c since rectangles fc belong two classes lemmas 6 7 imply separating stage dividing stage z figure 4 tree tb constructed round boxes c correspond leaves top subtree therefore total number long rectangles boxes associated leaves tb equation 1 argument similar one used prove lemma 3 also know therefore obtain bound size bsp constructed algorithm let sf denote maximum size bsp produced algorithm box contains f long rectangles k vertices interior theorem 1 implies sf log f case k 0 lemma 8iii construct subtree b size log 32 k one round recursively construct subtrees box set leaves lb hence k 0 f every box lb solution recurrence constant proportionality bigoh term linear log ff intuition behind solution round increases number old long rectangles constant factor also creating oa 32 new long rectangles depth round olog choosing logfk balances total increase number old rectangles rounds total increase number new rectangles since operations node performed time linear number rectangles node bound obtained running time algorithm 4n beginning first round obtain following theorem theorem 3 given set n rectangles ir 3 aspect ratio rectangle bounded constant ff 1 construct bsp size log time log n constants proportionality bigoh terms linear log ff 7 extensions section show modify algorithm section 5 handle following three cases rectangles thin ii rectangles non orthogonal iii input consists intersecting fat rectangles 71 fat thin rectangles let us assume input rectangles consisting thin rectangles rectangles f given box b let f number long rectangles fb let k number vertices rectangles fb lie interior b let number rectangles tb algorithm use similar algorithm fat rectangles fix parameter logfk 1 sb contains free rectangle use corresponding free cut split b two boxes 2 use algorithm long rectangles construct bsp b 3 f k use algorithm paterson yao orthogonal rectangles ir 3 construct bsp 4 f perform one round algorithm described section 5 algorithm recursively invoked boxes b split let sk f size bsp produced algorithm box k vertices interior f long rectangles fb thin rectangles analyzing algorithms behavior section 5 show sk f see 21 details f log solution recurrence constant proportionality first bigoh term linear log ff following theorem immediate theorem 4 bsp size n m2 log n constructed n m2 log n time n rectangles ir 3 thin constants proportionality bigoh terms linear log ff ff maximum aspect ratio fat rectangles exists set thin rectangles rectangles ir 3 bsp 72 fat rectangles nonorthogonal rectangles suppose p objects input nonorthogonal rest fat rectangles algorithm use similar algorithm section 71 except two places step 1 check whether make free cuts nonorthogonal objects step 3 number nonorthogonal object node dominates number fat rectangles use paterson yaos algorithm triangles ir 3 construct bsp size quadratic number objects cubic time 20 theorem 5 bsp size np2 log n constructed np 2 2 log n time n objects ir 3 p nonorthogonal rest fat rectangles constants proportionality bigoh terms linear log ff ff maximum aspect ratio fat rectangles 73 intersecting fat rectangles consider case n fat rectangles contain intersecting pairs intersecting pair rectangles break one rectangles pair constant number smaller pieces pieces intersect rectangle pair process creates total n rectangles new ok rectangles may thin use algorithm section 71 construct bsp rectangles theorem follows theorem 6 bsp size n k2 log n constructed n k2 log n time n rectangles ir 3 k intersecting pairs rectangles constants proportionality bigoh terms linear log ff ff maximum aspect ratio fat rectangles exists set n rectangles ir 3 containing k intersecting pairs bsp k 8 conclusions since worstcase complexities bsps high triangles ir 3 orthogonal rectangles ir 3 known examples achieve worst case use mainly skinny objects made natural assumption objects fat shown assumption allows smaller worstcase size bsps implemented algorithms practical results encouraging presented companion paper 1 seems probable bsps size smaller log n built n orthogonal rectangles bounded aspectratio ir 3 lower bound n bound would interesting see algorithms developed construct bsps optimal size similar improvements envisioned theorems 4 5 6 even challenging open problem determining right assumptions made input objects graphics display hardware provably fast practically efficient algorithms developed hiddensurface elimination objects preliminary investigation improved model graphics hardware made grove et al 15 acknowledgments would like thank seth teller providing us soda hall dataset created department computer science university california berkeley would also like thank walkthrough project department computer science university north carolina chapel hill providing us datasets sitterson hall orange united methodist church fellowship hall sitterson hall lobby r practical methods constructing binary space partitions orthogonal objects surface approximation geometric partitions increasing update rates building walkthrough system automatic modelspace subdivision potentially visible set calculations motion planning using binary space partitions modeling global diffuse illumination image synthesis subdivision algorithm computer display curved surfaces near realtime objectprecision shadow generation using bsp treesmaster thesis near realtime shadow generation using bsp trees fast objectprecision shadow generation areal light sources using bsp trees linear size binary space partitions fat ob jects survey objectspace hidden surface moval computer graphics principles practice visible surface generation priori tree structures object complexity model hiddensurface elimination maximum flows polyhedral domains sculpt interactive solid modeling tool merging bsp trees yields polyhedral set operations application bsp trees raytracing csg evaluation efficient binary space partitions hiddensurface removal solid modeling optimal binary space partitions orthogonal objects characterization ten hidden surface algorithms visibility computations densely occluded polyhedral environments set operations polyhedra using binary space partitioning trees tr ctr john hershberger subhash suri csaba toth binary space partitions orthogonal subdivisions proceedings twentieth annual symposium computational geometry june 0811 2004 brooklyn new york usa csaba tth binary space partitions line segments limited number directions proceedings thirteenth annual acmsiam symposium discrete algorithms p465471 january 0608 2002 san francisco california csaba toth note binary plane partitions proceedings seventeenth annual symposium computational geometry p151156 june 2001 medford massachusetts united states mark de berg micha streppel approximate range searching using binary space partitions computational geometry theory applications v33 n3 p139151 february 2006 b aronov efrat v koltun micha sharir union round objects proceedings twentieth annual symposium computational geometry june 0811 2004 brooklyn new york usa