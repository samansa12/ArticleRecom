delay bounded buffered tree construction timing driven floorplanning devices lines shrink deep submicron range propagation delay signals effectively improved repowering signals using intermediate buffers placed within routing trees almost existing timing driven floorplanning placement approaches consider option buffer insertion may exclude solutions particularly early design process smaller overall area better routability paper propose new methodology buffered trees used estimate wire delay floorplanning instead treating delay one objectives done majority previous work formulate problem terms delay bounded buffered trees dbbtree propose efficient algorithm construct dbb spanning tree use floorplanning experimental results show algorithm effective using buffer insertion floorplanning stage yields significantly better solutions terms chip area total wire length b introduction high speed design long onchip interconnects modeled distributed delay lines delay lines often reduced wire sizing intermediate buffer insertion simple wire sizing one degree freedom available designer often ineffective due area routability capacitance considerations hand driver sizing buffer insertion powerful tools reducing delay given reasonable power constraints intermediate buffers effectively decouple large load critical path divide long wire smaller segments less line resistance makes path delay linear overall length devices lines shrink deep submicron effective terms power area routability insert intermediate buffers rely solely wire sizing floorplanning placement significant impact critical path delay research area focused timing driven approaches almost existing floorplanning placement techniques consider option buffer insertion particularly early design cycle typically wire length elmore delay used delay calcula tion practice restrictive evidenced reliance industry placed intermediate buffering means achieving aggressive cycle times commonplace production chips contain tens thousands buffers paper attempts leverage additional freedom gained inserting buffers floorplanning placement resulting formulation provides additional degree freedom present past approaches typically leads solutions smaller area increased routability incorporate buffer insertion early planning stage propose new methodology floorplanning placement using buffered trees estimate wiring delay formulate delay bounded buffered tree dbbtree problem follows given net delay bounds critical sinks associated critical paths construct tree intermediate buffers inserted minimize total wiring length number buffers satisfying delay bounds propose efficient algorithm based elmore delay model construct dbb spanning trees use floorplanning placement experimental results dbb spanning tree show using buffer insertion floorplanning stage yields significantly better solutions terms chip area total wiring length remainder paper organized follows section 2 reviews related works interconnect optimization intermediate buffer insertion introduces idea dbb spanning tree algorithm section 3 describes dbb algorithm detail experimental results dbb spanning tree algorithm applied signal nets general floorplanning given section 4 followed conclusions section 5 related works overview dbbtree algorithm 21 elmore delay model vlsi design reaches deep submicron interconnect delay models evolved simplistic lumped rc model sophisticated highorder momentmatching delay model 1 elmore delay model 2 provides simple closedform expression greatly improved accuracy delay compared lumped rc model elmore commonly used delay model recent works interconnect design wire segment modeled gammatype circuit given interconnect tree elmore delay source 0 sink expressed follows rl uv cl uv r 0 driver resistance source c 0 total capacitance charged driver path0 denotes path 0 wire eu v connecting v parent u given uniform wire width r c denote unit resistance unit capacitance respectively wire resistance rl uv wire capacitance cl uv proportional wire length l uv let c v denote total capacitance subtree rooted v charged wire eu v first term 0 linear total wire length second term quadratic dependence length path source 22 topology optimization interconnect previous discussion elmore delay conclude interconnect topology optimization two major concerns total wire length path length driver critical sinks early work cohoon randall 3 cong et al 4 observed existence conflicting mincost minradius longest sourcetosink path length tree objectives performancedriven routing 5 number algorithms proposed make tradeoffs total wiring length radius steiner spanning tree 6 7 8 9 cong et al 23 buffered tree construction 3 proposed bounded radius bounded cost brbc spanning tree algorithm uses shallowlight approach brbc constructs routing tree total wire length greater 1 times minimum spanning tree radius greater times shortest path tree ffl 0 alpert et al 10 proposed ahhk trees direct tradeoff prims mst algorithm dijkstras shortest path tree algorithm used parameter 0 c 1 adjust preference tree length path length deep submicron design path length longer accurate estimate path delay several attempts made directly optimize elmore delay taking account different loading capacitances sinks exponential timing complexity branch bound algorithms proposed boese et al 11 12 provide optimal nearoptimal solutions minimize delay source identified critical sink set critical sinks steiner tree set critical sinks minimizes linear combination sink delays however difficult choose proper weights criticality linear combination hong et al 13 proposed modified dreyfuswagner steiner tree algorithm minimizing maximal sourcetosink delay maximal sourcetosink delay necessarily interesting corresponding sink critical path also may one critical sink net associated multiple critical paths prasitjutrakul kubitz 14 proposed algorithm maximizing minimal delay slack delay slack defined difference real delay given delay bound sink 23 buffered tree construction intermediate buffer insertion creates another degree freedom interconnect optimiza tion early works fanout optimization problem focused construction buffered trees logic synthesis 15 16 17 without taking account wiring effect cently layout driven fanout optimization proposed 18 19 given steiner tree polynomial time dynamic programming algorithm proposed 20 delayoptimal buffer insertion problem using dynamic programming lillis et al 21 integrated wire sizing power minimization tree construction accurate delay model taking signal slew account inspired dynamic programming algorithm okamoto cong 22 proposed simultaneous steiner tree construction buffer insertion algorithm later work extended include wire sizing 23 formulation problem 22 23 main objective maximize required arrival time root tree defined minimum among differences arrival time sinks delay root sinks achieve optimal delay multiple buffers may necessary single edge early work dhar franklin 24 developed optimal solution size number position buffers driving uniform line minimizes delay line work considered area occupied buffers constraint recently c alpert devgan 25 calculated optimal number equally spaced buffers uniform wire minimize elmore delay wire 24 delay minimized vs delay bounded since timing driven floorplanning placement usually iterated static timing analysis tools critical path information often available timing requirement critical sinks converges design layout progresses sufficient bounded delay rather minimized delay hand minimization total wire length interest since total wire length contributes circuit area routing congestion addition total wire capacitance contributes significant factor switching power reduction wire length reduces circuit area improves routability also reduces power consumption important factors manufacturing cost fabrication yield 1 paper instead minimizing source sink delays present algorithm constructs buffered spanning trees minimize total wire length subject timing constraints zhu 26 proposed delay bounded minimum steiner tree dbmst algorithm construct low cost steiner tree bounded delay critical sinks dbmst algorithm consists two phases 1 initialization steiner tree subject timing constraints 2 iterative refinement topology reduce wiring length satisfying delay bounds associated critical sinks since elmore delays sinks sensitive topology recomputed every time topology changed dbmst algorithm searches possible topological updates exhaustively iteration time consuming 25 overview dbbtree algorithm paper formulate new delay bounded buffered tree dbbtree problem follows given signal net delay bounds associated critical sinks construct routing tree intermediate buffers inserted minimize total wiring length number buffers satisfying delay bounds based elmore delay develop efficient algorithm dbb spanning tree construction dbbtree algorithm consists three phases 1 calculate minimum elmore delay critical sink allow immediate exclusion floorplanningplacement solutions clearly infeasible timing perspective 2 construct buffered spanning tree minimize total wire length subject bounded delay 3 based topology obtained 2 delete unnecessary buffers without violating timing constraints minimize total number buffers overall time complexity dbbtree algorithm okn 2 k maximum number buffers inserted single edge n number sinks net dbbtree algorithm makes following three major contributions ffl treating delay bounds provided static timing analysis tools constraints rather formulating delay optimization objectives ffl constructing spanning tree placing intermediate buffers simultaneously algorithm effective minimize wire length number buffers ffl allowing one buffer inserted single edge calculating precise buffer positions optimal solution contrast previous work assumes one buffer inserted edge buffer location fixed 3 description dbbtree algorithm floorplanning purpose assume uniform wire width dbbtree algorithm presented consider noninverting buffers however algorithm easily extended handle inverting buffers given signal net source sinks geometric location terminal determined floorplanning let denote vector describing parameters noninverting buffers b r b c b internal delay resistance capacitance buffer respectively presenting detailed dbbtree algorithm first state theoretical results developed alpert devgan 25 used calculate number position identical buffers placed single edge minimize edge delay dbbtree algorithm theorem 1 given uniform line e0 connecting sink source 0 parameter vector b number buffers placed wire obtain minimum elmore delay figure 1 given uniform line e0 connecting sink source 0 0 buffers placed wire way wire delay minimized first buffer ff away source 0 distance two adjacent buffers equals ffi last buffer fi away sink e given r 0 driver output resistance source 0 c loading capacitance sink given buffers inserted e0 optimal placement buffers obtains minimum wire delay places buffers equal spacing let ff distance source first buffer ffi distance two adjacent buffers fi distance last buffer sink derived follows r c r c minimized wire delay buffers given cl 0i r c r buffers instead buffers placed wire e wire delay increased delta 0 31 lower bound elmore delay critical sinks 7 figure 2 place buffer right 0 total capacitance driven driver source reduced c b first term 0 equals r 0 c b second term propagation delay path source minimized directly connecting source placing 0 buffers wire b combining b calculate lower bound elmore delay replacing r 0 0 equations 2 5 applied wire connecting two sinks routing tree based theoretical results discussed present detailed dbbtree algorithm following section 31 lower bound elmore delay critical sinks first phase dbbtree algorithm calculates lower bound elmore delay sink may possible achieve delay simultaneously sinks achievable delay exceed floorplanning timing infeasible exists lower bound 0 greater given delay bound first term eq1 r 0 c 0 reduced r 0 c b placing buffer right 0 shown fig 2 second term propagation delay path source minimized directly connecting source placing buffers shown fig 2 b formally lower bound elmore delay given sinks lower bound elmore delay less given delay bound algorithm continues phases 2 3 otherwise timing constraints figure 3 particular sink last buffered edge path source v last buffer edge resistance buffer v defined driving resistance v denoted rt v since buffer u v driver v also drives intermediate sinks u v adding new edge ev w loading capacitance v increased deltac v elmore delay sinks increased rt deltac v hand due buffers edge affect delay sinks u therefore timing constraints satisfied timing constraints u satisfied tight given floorplanning solution excluded 32 dbb spanning tree construction second phase dbbtree algorithm constructs buffered spanning tree minimize total wire length subject timing constraints similar prims mst algorithm starts trivial tree g iteratively edge ev w v w buffers added chosen l vw minimized timing constraints satisfied grows incrementally spans terminals edge ev w added without violating timing constraints later case floorplanning considered timing infeasible solution excluded incremental construction dbbtree key issue quickly evaluate timing constraints time new edge added ie whether 32 dbb spanning tree construction 9 delay bound critical sink satisfied particular edge ev w number precise positions buffers inserted edge minimize edge delay calculated according equations 2 3 let v denote subtree rooted v adding edge ev w loading capacitance v increased deltac cl denote last buffered edge path source v shown fig 3 last buffer edge buffer source v source drives v according elmore delay v driven resistance driver v defined driving resistance v denoted rt v given vgamma1 parent v rt v calculated follows since buffer path u v driver v also drives intermediate sinks u v shown fig 3 let denote set sinks subtree i1 due increased loading capacitance deltac v v elmore delay sinks hand due buffers edge increased loading capacitance v affect delay sinks u define delay slack sink 2 delay slack timing constraints satisfied sinks following condition holds introducing loading capacitance slack subtree eq 12 rewritten let oe v denote minimum slack loading capacitance among subtrees oe condition eq 14 simply rewritten oe v deltac keeping track oe v condition checked constant time elmore delay w calculated elmore delay v w calculated eq 4 timing bound w also checked constant time analysis conclude necessary sufficient condition satisfying timing constraints adding new edge ev w oe v deltac v dw 0 w 18 condition checked constant time iterative step dbbtree construction selected linear time l vw minimum timing constraints satisfied adding new edge ev w twopass traversal sufficient update delay slack loading capacitance slack subtree 1 traverse bottom calculate delay slack loading capacitance slack subtree according equations 11 13 2 traverse top calculate oe oe gamma 1 given igamma1 parent oe since new edge added linear time overall dbb spanning tree constructed 2 time net n sinks 33 buffer deletion phase 2 one buffers inserted edge minimize wire delay buffers may necessary meeting delay bound third phase 33 buffer deletion 11 figure 4 case v shown edge ev w becomes unbuffered edge deleting buffer load capacitance subtree v increased deltac cl vw buffers reinserted ev w shown dbbtree algorithm deletes buffers spanning tree obtained second phase reduce total number buffers general buffers closest source unload critical path algorithm traverses bottom deletes one buffer time without violating timing constraints deletion continues buffers left necessary timing constraints would satisfied one buffer deleted particular edge ev w 0 buffers one buffer deleted ev w wire delay increased delta v w according eq 5 buffers reinserted case shown fig 4 wire ev w becomes unbuffered edge deleting buffer load capacitance subtree v increased deltac cl vw buffers reinserted edge ev w shown fig 4 b deltac similar phase 2 let denote last buffered edge source v delay sinks subtree u increased due increased loading capacitance v addition delay sinks subtree tw increased due increased edge delay ev w based analysis phase 2 buffer deleted without causing timing violation following condition holds oe v deltac v tw table 1 experimental parameters dbbtree algorithm signal nets output resistance driver r 0 500omega gamma1000omega unit wire resistance c 012omega unit wire capacitance r 015ffm output resistance buffer r b 500omega loading capacitance buffer c b 005pf intrinsic delay buffer b 01ns loading capacitance sink c 005pf gamma 015pf therefore timing constraints evaluated constant time deleting buffer edge ev w buffer found searching n gamma 1 edges deleting buffer delay slack loading capacitance slack subtrees incrementally updated time phase 2 one buffer deleted linear time kn buffers k maximum number buffers single edge timing complexity buffer deletion okn 2 dominates overall dbbtree algorithm following experimental results show buffer deletion effectively minimizes total number buffers delete 90 buffers inserted previous phase 4 experimental results first part experiments implemented dbb spanning tree algorithm sun sparc 20 workstation cunix environment algorithm tested signal nets 2 5 10 25 50 100 pins net size 100 nets randomly generated 10mm theta 10mm routing region report average results driver output resistance source loading capacitances sinks randomly chosen respectively parameters used experiments based 22 summarized table 1 average results dbb spanning tree construction shown table 2 delay bounds critical sinks net size randomly chosen interval titled delay bounds average wire length number buffers dbb spanning tree reported table average cpu time consumed per net shows dbb spanning tree algorithm fast enough applied stochastic optimization table 2 experimental results dbb spanning trees signal nets pins delay boundsns wire lengthmm buffers cpu sec evaluate dbb spanning trees generated experiments constructed minimum spanning tree mst shortest path tree spt signal nets using parameters comparison average results shown table 3 dbbmst dbbspt average length ratio dbbtree mst dbbtree spt respectively column sinks meeting bound gives average percentage critical sinks satisfy delay bounds nets small number terminals length dbbtree close mst number terminals nets increases length dbbtree mst increased 9 0 critical sinks meet bound mst 25pin 100pin nets concluded difficult satisfy timing constraints using mst especially large nets hand length ratio dbbtree spt decreased 10 024 spt also ideal meet delay bounds large nets dbbtree approach achieve short wire length 100 critical sinks meeting delay bounds table 4 average number buffers inserted dbb spanning trees listed result reasonable considering number terminals net evaluate buffer deletion algorithm compare average number buffers inserted dbb spanning tree buffer deletion percentage buffers reduced third phase dbbtree algorithm high 79 93 results presented table 4 demonstrate third phase algorithm quite effective removing unnecessary buffers estimated phase 2 dbbtree algorithm lead unrealistic impractical results second part experiments apply dbbtree evaluate wiring delay floorplanning solutions considered genetic simulated annealing method 27 table table 3 comparison dbbtree mst spt signal nets pins legnth mm sinks meeting bound dbb mst dbbmst spt dbbspt dbb mst spt table 4 average number buffers vs buffer deletion pins wo deletion deletion reduced table 5 four examples floorplanning applying dbbtree algorithm blocks block size aspect ratio nets net size delay bound cpu mm blocks pinsnet ns min table achieved floorplanning solutions using dbbtree mst spt approaches blocks sinks meeting bound dbb mst spt dbb mst spt dbb mst spt 100 21357 27477 27402 603993 703706 1633961 100 9082 9561 5 presents four examples includes 10 25 50 100 rectangular blocks respectively sizes widths heights aspect ratios blocks randomly chosen within nominal range netlists also randomly generated four examples technology parameters consistent shown table 1 compare traditional approaches consider buffer insertion floorplanning also apply mst spt methods evaluate floorplanning solution examples based stochastic search strategy floorplanning solutions achieved three methods shown table 6 similarly column sinks meeting bound measures percentage critical sinks satisfy tim table 7 improvement considering buffer insertion floorplanning stage blocks area improvement wire length improvement buffers dbb vs mst dbb vs spt dbb vs mst dbb vs spt dbb figure 5 floorplanning 50 blocks 150 nets sized 2pin 25pin spt applied evaluated wiring delay achieved chip area 12438mm 2 total wire length 269610mm 977 critical sinks meeting delay bounds ing bounds table 7 calculates improvement chip area total wire length using dbbtree method examples area improved 31 mst 22 spt respectively hand total wire length improved 19 mst 63 spt respectively substantial improvement demonstrates using buffer insertion floorplanning stage yields significantly better solutions terms chip area total wire length addition total number buffers estimated dbbtree approach also shown table figures 5 6 show floorplanning solution 50 blocks using spt dbbtree algorithm respectively addition fig 6 also displays buffers estimated dbb tree approach noted future research needed extend approach distribute buffers empty space macros subject timing constraints however area buffers typically small fraction given macro area typically accommodated 5 conclusion paper propose new methodology floorplanning placement intermediate buffer insertion used another degree freedom delay calculation efficient algorithm construct delay bounded buffereddbb spanning trees de veloped one key reasons approach effective treat delay bounds constraints rather formulating delay optimization objectives done figure floorplanning example fig 5 dbbtree applied evaluate wiring delay achieved chip area 11259mm 2 total wire length 145547mm 100 critical sinks meeting delay bounds area total wire length improved 948 4602 respectively dots shown figure represent buffers estimated dbbtree previous work fact problem formulation realistic path based timing driven layout design timing constraints floorplan evaluated many times stochastic optimization process efficient dbb spanning tree algorithm made buffered tree based floorplanning placement highly effective practically applicable industrial problems r transient response damped linear networks particular regard wideband amplifiers critical net routing new class iterative steiner tree heuristics good perfor mance direct combination prim dijkstra constructions improved performancedriven global routing performancedriven interconnect design based distributed rc delay model performance oriented rectilinear steiner trees boundeddiameter spanning tree related problems primdijkstra tradeoffs improved performancedriven routing tree design rectilinear steiner trees minimum elmore delay highperformance routing trees identified critical sinks performancedriven steiner tree algorithms global routing timingdriven global router custom chip design heuristic algorithm fanout problem performance oriented technology mapping fanout problem theory practice methodology algorithms postplacement delay optimization routabilitydriven fanout optimization buffer placement distributed rctree networks minimal elmore delay optimal efficient buffer insertion wire sizing interconnect layout optimization simultaneous steiner tree construction buffer insertion buffered steiner tree construction wire sizing interconnect layout optimization optimum buffer circuits driving long uniform lines wire segmenting improved buffer insertion chip package cosynthesis clock networks genetic simulated annealing application nonslicing floorplan design tr bounded diameter minimum spanning trees related problems fanout problem theory practice performanceoriented technology mapping heuristic algorithm fanout problem performance oriented rectilinear steiner trees performancedriven steiner tree algorithm global routing highperformance routing trees identified critical sinks routabilitydriven fanout optimization performancedriven interconnect design based distributed rc delay model methodology algorithms postplacement delay optimization rectilinear steiner trees minimum elmore delay buffered steiner tree construction wire sizing interconnect layout optimization wire segmenting improved buffer insertion performancedriven global routing cell based ics critical net routing chip package cosynthesis clock networks ctr weiping shi zhuo li onlogn time algorithm optimal buffer insertion proceedings 40th conference design automation june 0206 2003 anaheim ca usa yuantao peng xun liu power macromodeling global interconnects considering practical repeater insertion proceedings 14th acm great lakes symposium vlsi april 2628 2004 boston usa xun liu yuantao peng marios c papaefthymiou practical repeater insertion low power repeater library need proceedings 41st annual conference design automation june 0711 2004 san diego ca usa ruiming chen hai zhou efficient algorithms buffer insertion general circuits based network flow proceedings 2005 ieeeacm international conference computeraided design p322326 november 0610 2005 san jose ca charles j alpert anirudh devgan stephen quay buffer insertion noise delay optimization proceedings 35th annual conference design automation p362367 june 1519 1998 san francisco california united states imin liu adnan aziz f wong meeting delay constraints dsm minimal repeater insertion proceedings conference design automation test europe p436440 march 2730 2000 paris france hur ashok jagannathan john lillis timing driven maze routing proceedings 1999 international symposium physical design p208213 april 1214 1999 monterey california united states jason cong tianming kong david zhigang pan buffer block planning interconnectdriven floorplanning proceedings 1999 ieeeacm international conference computeraided design p358363 november 0711 1999 san jose california united states probir sarkar vivek sundararaman chengkok koh routabilitydriven repeater block planning interconnectcentric floorplanning proceedings 2000 international symposium physical design p186191 may 2000 san diego california united states jason cong tianming kong zhigang david pan buffer block planning interconnect planning prediction ieee transactions large scale integration vlsi systems v9 n6 p929937 1212001 feodor f dragan andrew b kahng ion mndoiu sudhakar muddu alexander zelikovsky provably good global buffering using available buffer block plan proceedings 2000 ieeeacm international conference computeraided design november 0509 2000 san jose california ali selamat sigeru omatu web page feature selection classification using neural networks information sciencesinformatics computer science international journal v158 n1 p6988 january 2004 dian zhou ruiming li design verification highspeed vlsi physical design journal computer science technology v20 n2 p147165 march 2005