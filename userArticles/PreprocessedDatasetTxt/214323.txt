supercriticality revisited critical path analysis suggested technique establishing lower bound completion times parallel discrete event simulations protocol supercritical least one simulation complete less critical path time using protocol previous studies shown several practical protocols supercritical others present sufficient condition demonstrate protocol supercriticality claimed supercriticality requires independence one messages states events logical past messages states present example contradicts claim examine implications contradiction lower bounds b introduction one techniques suggested derive theoretical lower bound completion time parallel discreteevent simulations pdes critical path analysis application critical path analysis particularly interesting somewhat counterintuitive result possible certain simulations complete less critical path time phenomenon call supercritical speed say protocol supercritical possible least one simulation using protocol complete supercritical time several practical protocols supercritical several jere916 paper reexamine two issues concerned supercritical speed sufficient condition demonstrate protocol supercritical ii requirement super criticality independence messages states events earlier logical time berry jefferson beje852 applied critical path analysis pdes argued critical path time lower bound completion time berr861 jere916 shown certain variants time warp protocol jeff855 supercritical particular jere916 presented criterion supercriticality used show four protocols supercritical results showed critical path time lower bound pdess lin lazowska lila918 proposed lower bound applies pdess loose one since requires lp guess computation correctly early analyses defined interevent dependence based timestamps events messages scheme disadvantage incorrectly assuming pairs events dependent fact semantic dependence recently gunter gunt94a3 proposed enhanced definition dependence attempts overcome limitation based definition contends independence necessary supercriticality derives new lower bound tighter lila918 paper makes two contributions present sufficient condition protocol supercritical recall supercritical protocol allows possibility supercritical speed guarantee show condition used jere916 necessary supercriticality sufficient condition present used gunt94a3 prove supercriticality requires independence presented without apparent support gunt94b4 result developed independently establish truth sufficiency condition ii show example gunters enhanced definition dependence sufficient capture forms supercriticality specifically supercritical speed also possible lp guesses correctly dependence message yet received thus claim supercriticality requires independence invalidated insight suggests irrespective accurately able capture semantic dependence events still possible supercritical gunters lower bound hold simulations lps guess existence dependence hold simulations lps guess lack dependence since known aggressive protocols allow lps guess lack existence dependence seems unlikely critical path analysis improve upon lower bound lila918 critical path analysis assume pdes consists set logical lp executes processor p represents sequence simulated events case aggressive protocols critical path analysis applies committed events timestamp event e denoted lp may send messages lps result executing events addition simulation specific information message contains sendtime equals logical clock lp sending message receivetime greater equal sendtime message received receiving lp schedules event timestamp equal receivetime message model called messageinitiating model model define following two relations events event e predecessor event e e successor e e e executed p ii iii event e p denote predecessor event e prede event e antecedent event e execution e causes message sent schedules e note e e may executed lp denote antecedent event e antee defined prede antee unique given event e also event predecessor one event antecedent one event define relation e e e immediately affects e either finally transitive closure relation induces partial ordering events simulation follows e e e influences e obviously lower bound may change multiple lps execute processor since one lp may executable event time issue optimal scheduling multiple lps assigned single processor addressed lin927 exists sequence events e e e i1 0 n particular parallel discrete event simulation run execution simulation program given set input values may represented using spacetime diagram figure 1 points 2dimensional plane represent events executed simulation run two coordinates event lp executed space coordinate logical timestamp time coordinate arrows used represent relation among events example e 110 predecessor e 121 antecedent e 215 events predecessors called initial events first events executed lp initial events antecedents eg e 110 e 39 called start events event e associate amount real time required execute event te also sake simplicity ignore overheads associated interlp communication overheads incorporated easily critical path analysis required starte defined real time execution event e started time execution event e completes critical time crit e event e defined follows crit simulation assumed start real time zero crit ante e crit pred e defined zero ante e pred e defined respectively crit e earliest time event e complete execution assumption dependences violated consequently largest value crit e among events simulation run give us lower bound completion time simulation run assumption events maximum critical time called figure logical processes simulation time e 140 e 131 e 121 e 110 e 238 e 222 e 215 e 339 e 326 e 39 e 424 e 435 final events example computation critical times shown figure 2 first number beside event e te second number crit e critical path path start event final event defined follows every final event separate critical path ii e critical path crit ante e crit pred e pred e exists critical path iii e critical path crit pred e crit ante e ante e exists critical path highlighted two critical paths figure 2 maximum value crit e called critical path time 3 protocol supercritical critical path time defines lower bound completion time simulation assumption events actually executed order specified dependence relation however required overall effect simulation events executed order therefore lp guesses correctly may execute certain events order keeping simulation accurate guessing correctly critical path possible complete simulation less critical path time phenomenon called supercritical speedup jere916 refer supercritical speed since critical path time absolute quantity simulation run supercritical act guessing correctly must occur every critical path simulation important note distinction supercritical simulation run supercritical protocol supercritical run particular execution simulation using protocol completes figure logical processes simulation time 20 supercritical time protocol said supercritical possible simulation run least one using protocol supercritical run nature general pdes protocol cannot guarantee lps guess correctly enable even desirable able determine whether protocol capability require sufficient condition supercriticality sc protocol allows sc true simulation run protocol permits simulation run supercritical ie protocol supercritical may prove protocols supercritical showing allow sc true least one simulation run jere916 authors present one condition show condition merely necessary ie supercritical protocols satisfy present actual sufficient condition 31 condition enabling supercritical speed recall event e following defined start e real time execution e commences complete e real time execution e completes crit pred e crit ante e te earliest time e complete dependences violated supercriticality condition jere916 call c stated c must least one pair events e e every critical path e e complete e start e show construction fact c true simulation run imply run complete supercritical time consider conceptually extracting critical path laying realtime line shown figure 3a block time shaded rectangle corresponds execution event critical path dots indicate intermediate events left brevity note since ignored cost interlp communication paper allocate real time events consider critical path particular simulation run condition c satisfied condition could satisfied one two ways shown figure 3 figure 3b c satisfied execution e i1 commenced time crit e execution e completed late crit e note e may completed late due several reasons instance may prior execution e lp executing e may guessed incorrectly consequently rolled back causing delay e depicted single delay gap shading point earlier execution e lp executing e i1 guessed correctly execution e i1 rolled back e completed crit e observing e e i1 two events satisfy c cannot conclude simulation complete supercritical time figure 3c c satisfied execution e i1 commenced early crit e execution e time completing crit e occurs lp executing e i1 guessed correctly rolled back e completes execution crit e every event critical path following e i1 executed immediately preceding event completes depicted simulation complete crit e n shown assuming critical path jere916 authors consider scenario figure 3c figure 3b condition c specifies nothing absolute completion times e e essential supercritical speed since maximum critical time absolute quantity indeed scenarios figure 3b figure 3c generated simply moving events along real time line maintaining relative timing relations clearly crit e quantity must link condition supercritical speed absolute timings events since defines whether event early time late therefore claim actual sufficient condition protocol supercritical figure speed b execution satisfying c sc c execution satisfying sc real time real time critical path real time scthere must least one event e every critical path complete e crit e note condition satisfied figure 3c complete e i1 crit e i1 figure 3b thus distinguishing two intuition behind condition simple least one event every critical path must complete critical time possibility events following critical path complete critical times thus simulation complete maximum critical time key crit e starting completion time event e relative adjacent events critical path defines earliness tardiness event e thus shown construction fact simulation run satisfies c imply complete supercritical time whereas fact simulation run satisfies sc imply complete supercritical time course even situation figure 3c possible simulation complete crit e n least one event following e i1 sufficiently tardy protocol supercritical definition exists simulation run using protocol final events every critical path complete critical times trivially therefore supercriticality implies protocol allows sc hold least one simulation run thus sc also necessary condition supercriticality revisiting figure 3c sc true particular critical path show contradiction c true e e earliest event sc true critical path e thus sc c since sc necessary supercriticality c also necessary condition supercritical protocol jere916 authors use c show four protocolstime warp lazy cancellation time warp lazy reevaluation time warp phase decomposition spacetime simulation capable supercritical speed appendix report shown protocols satisfy sc therefore indeed supercritical possible extend sc stronger condition sufficient guarantee supercritical speed scg final event every critical path satisfies sc clearly scg sc c known protocol satisfies scg finally common misconception seems protocol allows lps guess events supercritical distinction must made events ones actually committed time warp aggressive cancellation allows lps guess events commit events started prior completion previous events ie allow lps guess committed events accordingly established lila918 time warp aggressive cancellation super critical words c claims protocol allows lps guess committed events correctly supercritical however sufficient shown protocol must allow lps guess committed events correctly critical times 4 supercriticality independence make following key observation observation two phenomena may result supercritical speed lps correctly guess messages arrive affect event ii lps correctly guess effect one messages yet arrived event first case supercritical speed possible dependence relation defined based timestamps events messages definition event e p dependent message schedules event e p however possible execution e affects part state p upon execution e depend ie outcome executing e independent whether e executed recognizing intraprocess concurrency gunter gunt94a3 formalizes notion independence states messages events reproduce convenience definition state message denoted created event e said independent set events e e subset set events e e e resulting events simulation properly executed events e executed particular message independent event e message generated irrespective whether e executed follows message dependent event e independent e using enhanced definition dependence gunter derives two results independence necessary supercritical speed ii new definition critical path hence new lower bound tighter lila918 capturing semantic dependences accurately new definition dependence accounts supercritical speed occurs lps guess lack dependence however fails capture supercritical speed may occur lps guess existence dependence understand supercritical speed may occur lps guess existence dependence correctly consider physical system shown figure 4 system consists n physical processes pp begins starting state start time 10 pp 1 transitions state 1 probability p state 1 n probability 1p time 20 pp 2 transitions state 2 n pp 1 transitioned state 1 n earlier state 2 pp 1 transitioned state 1 earlier note default action knows pp 1 transitioned earlier similarly time 30 pp 3 transitions state 3 n pp 2 transitioned state 2 n earlier state 3 pp 2 transitioned state 2 earlier remaining processes also behave similarly pictorially dependences among transitions shown dashed lines figure 4 assume system simulated n logical processes p one pp state transition sends single message p i1 indicating direction transitioned north south recalling definition dependence clearly dependent i1 event caused i1 consider execution simulation using time warp lazy cancellation p event cause transition start since p yet received transition messages predecessors guess next state must transition let us assume p decides transition state generates informing successor transition time p 1 executes event decides probabilitistically transition state 1 sends 1 accordingly since every p guessed incoming message correctly antimessages generated lazy cancellation simulation complete received entire simulation run takes o1 time whereas new definition dependence critical path time thus simulation run figure supercritical simulation without independence 10 20 completed supercritical time example supercritical speed comes processes p 2 events execute messages generate dependent events messages words indpendent messages states thus gunters claim supercritical speed requires independence refuted example evident simulations time warp lazy cancellation may complete supercritical time even new definition critical path gunt94a3 follows lower bound derived gunt94a3 based critical path lower bound time warp lazy cancellation fact supercritical protocol insight suggests irrespective accurately capture semantic dependence among events protocols time warp lazy cancellation others listed jere916 still capability complete supercritical time best circumstances lp guess dependences correctly case example completing execution amount time equal sum execution times events thus led conclusion lower bound lila918 stated lower bound time warp lazy cancellation applies protocols set events executed p remains best known general lower bound pdess moreover suggests critical path analysis able improve upon general lower bound however lower bound limited significance nearly impossible achieve practice realistic simulation consequently important note gunters lower bound tighter one applies particular simulation runs using supercritical protocols old definition critical path lps guess existence dependence natural ask example presented realistic ie practical counterparts believe one imagine simulation lps determine statistically probability transitioning along particular arc p figure 4 high consequently guess next transition along arc finally note example also serves demonstrate super criticality possible may observable practice may occur brief phases simulation entire simulation specifically subset p computation correctly rollbacks induced could cause simulation take longer critical path time even though subset processes completed execution supercritical time seems difficult incorporate restriction protocol nature lps guessing depends application cannot specified protocol conclusions protocol said supercritical exists least one simulation complete less critical path time using protocol since several implemented protocols shown supercritical sufficient condition supercriticality desired may used determine whether protocols interest supercritical argued one condition used previous study demonstrate supercriticality four protocols sufficient necessary argument established sufficient condition supercriticality observation supercritical speed possible lps guess correctly dependence events unreceived messages disproves claim gunt94a3 supercritical speed requires independence studied implications contradiction lower bounds completion times simulations examine four protocols described jere916 supercritical show indeed supercritical using condition sc presented section 3 note protocols already shown satisfy condition presented jere916 call c accordance earlier result sc c assume familiarity general pdes terminology time warp protocol jeff855 particular messages events interest examples assumed critical path required sc time warp lazy cancellation protocol lp rolls back immediately send antimessages messages sent timestamps greater rollback time instead completes rollback resumes execution events resumed execution sends antimessages previously sent messages determined incorrect rationale behind scheme previously sent message turns correct despite rollback antimessage required time saved intuitively scheme guesses guess correct possible beat critical path time scenario satisfying sc shown spacetime diagrams figure 5 figure 4 jere916 vertical arrow predecessor dependence labeled state lp execution two events example 1 state end execution event state event b executed figure 5a slanted horizontal arrow antecedent relation labeled message caused instance execution event b caused message sent p 2 caused scheduling event c see p 1 receives message l timestamp less event b executes b sends message p 2 causes p 1 roll back event process message l event b reexecuted event b causes message sent sent therefore event c reexecuted assuming event b completes critical time committed see event c complete critical time since started execution earliest starting time thus event c satisfies sc ii time warp lazy rollback lazy rollback lazy reevaluation equivalent lazy cancellation states lps ie lazy rollback works states lps lazy cancellation works messages sent lps lazy rollback works follows upon receiving straggler message order lp immediately perform actions rolling back state restoration undoing events etc instead executes straggler message proper context ie state would executed arrived correct order examines resulting state lps previously computed state logical time two rollback inhibited lp continues execution events lp proceeds reexecute events finds state matches corresponding state arrival straggler point restarts normal execution events thus effect scheme lp reevaluates many states required instead states ordinary time warp course lazy rollback also relies heavily upon capability lp guess state correctly figure 5 shows scenario lazy rollback satisfies sc figure 5a p 1 processed message thereafter event b state 1 figure 5b message annihilated antimessage p 1 receives another message executes corresponding new event resulting state 2 event b figure c rollback b rollback reexecuted assuming event committed rolled back later completes critical time event b completed critical time thus satisfying sc iii time warp phase decomposition scheme lps decomposed phases phase simulates pp corresponding lp segment logical time different phases simulate mutually exclusive exhaustive segments time phase assumes initial state lp end time segment phase forwards final state phase simulating next contiguous time segment phases guess phase guesses initial state correctly capable completing critical time using lazy rollback scheme made efficient phase reevaluate computation lazily receives initial state different one assumed figure 5 shows scenario time warp phase decomposition achieves supercritical speed p 1 decomposed two phases one simulating time 0 time 100 time 100 time 200 figure 5a p 1 0100 completed simulating time segment sent state 1 final state p 1 100200 later time receives message therefore rollback reevaluate event resulting final state 2 reevaluate state assuming event committed completed critical time event b completed critical time therefore satisfy sc iv spacetime simulation time warp phase decomposition specific case general method called spacetime simulation spacetime method partitions simulations spacetime diagram mutually figure straggler b straggler exclusive exhaustive regions simulated processes thus time warp phase decomposition spacetime partitioning partition unit width space dimension spacetime simulation capable supercritical speed reason phase decomposition viz process guesses initial state correctly since phase decomposition example spacetime simulation scenario figure 5 serves satisfy sc spacetime simulation well acknowledgments concept scg condition guarantees supercritical speed due referee earlier version paper work supported part national science foundation grant ccr9108448 aug 91 number 48 mitre corporation academic affiliates program mystech inc academic affiliates program figure straggler b straggler r performance evaluation time warp distributed simulation mechanism critical path analysis distributed simulation understanding supercritical speedup virtual time supercritical speedup parallelism analyzers parallel discrete event simulation study time warp rollback mechanisms tr virtual time performance evaluation time warp distributed simulation mechanism parallel discrete event simulation study time warp rollback mechanisms parallelism analyzers parallel discrete event simulation understanding supercritical speedup supercritical speedup spectrum options parallel simulation ctr ha yoon song richard meyer rajive bagrodia empirical study conservative scheduling proceedings fourteenth workshop parallel distributed simulation p165172 may 2831 2000 bologna italy gilbert chen boleslaw k szymanski lookback new way exploiting parallelism discrete event simulation proceedings sixteenth workshop parallel distributed simulation may 1215 2002 washington dc