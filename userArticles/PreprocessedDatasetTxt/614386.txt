multiresolution representation visualization volume data abstracta system represent visualize scalar volume data multiple resolution presented system built multiresolution model based tetrahedral meshes scattered vertices obtained initial dataset model built offline data simplification techniques stored compact data structure supports fast online access system supports interactive visualization representation arbitrary level resolution isosurface projective methods user interactively adapt quality visualization requirements specific application task performance specific hardware platform representations different resolutions used together enhance interaction performance progressive multiresolution rendering b introduction volume datasets used current applications different characteristics common problem portant curvilinear irregular datasets mesh topology must stored explicitly visualization purposes 40 therefore cases interactive image generation large datasets may feasible even use fast graphic hardware parallelism recent years efforts devoted literature towards improving performance rendering algorithms proposals based data simplification hand produced successful results managing surface data complexity eg freeform topographic surfaces representation paper describe experience designing developing volume visualization system handle data different resolutions based data simplification approach related work literature dataset complexity carefully taken account reduce expected visualization times performance improved different methods ad hoc data organizations permit speedup operations visit dataset rendering 11 23 41 6 simplification rendering process achieved either approximation techniques 43 40 45 reducing size graphic output 37 27 10 19 different perspective also possible manage data complexity adopting approximated representation dataset approach general given suitable strategy reduce size dataset remains totally independent rendering system methodology case therefore work data simplification rather graphics output simplification naive subsampling regular dataset several drawbacks control accuracy simplified mesh technique adaptive ie density data cannot variable different regions domain easily extensible datasets regular fact irregular distribution samples makes construction simplified dataset nontrivial problem general adaptive methods developed 2d simplification irregular meshes representing freeform topographic surfaces effective solutions obtained incremental techniques based either refinement simplification see eg 10 14 17 21 24 37 techniques extended 3d case simplify volume data 5 18 34 iterative application simplification technique different approximation parameters produces collection representations different accuracies data structure holds constant usually small number different representations dataset different levels accuracy called level detail lod representation lod representations surfaces solid objects widely used number leading edge applications eg virtual reality based vrml evolution lod representation multiresolution representation supports compact storage number usually large representations different levels detail monotone function size input dataset ie data representations multiresolution lod greatly improve efficiency data rendering eg suitable progressive visualization algorithms multiresolution approach improves lod one valuable characteristics instance user application much flexibility selecting best level detail depending specific needs terms accuracy memory time performance many cases better leave choice run time instead force preprocessing simplification occurs many approaches recently proposed multiresolution management surfaces see eg 33 survey multiresolution volume data management still sufficiently developed stage approach representation regular volume datasets based use hierarchical recursive partition octreelike scheme proposed 42 node obtained recursive subdivision holds basis function reconstruct field well measure error importance factors used selective traversal tree method cannot extended irregularly distributed data using structure lod representation considering tree level separate layer equivalent use subsampling multiresolution representation also possible selecting nodes different levels field may result discontinuous across different levels thus causing unpleasant effects eg aliasing direct volume rendering cracks isosurfaces previous paper 5 proposed lod representation based tetrahedral decomposition independent simplified representations volume dataset different levels approximation built refinement technique work considered preliminary presented paper extended several aspects finally approaches hierarchical representation regular tetrahedral decompositons recently proposed 15 29 47 wavelet theory plays important role multiresolution analysis signals approaches based wavelets proposed also manage volume data 16 28 39 approach data simplification based wavelets much different geometric approach follow data considered samples signal decomposed wavelets 26 coefficients wavelet decomposition represent dataset full resolution approximated lodstyle representations may used rendering considering subsets coefficients wavelet decomposition may also used multiresolution manner using higher resolution coefficients limited locations 3d space times waveletbased rendering generally higher standard cellvoxel based techniques moreover generality limited wavelet approach applied regular datasets b summary paper consists essentially two parts first part sections iiiv show multiresolution model volume data based tetrahedral meshes built stored second part sections vvi describe volume visualization system built top model present experimental results approach multiresolution based data simplification described section ii approximated representation volume data reduced resolution given tetrahedral mesh smaller size respect initial mesh defined whole dataset data values approximated linear function tetrahedron tetrahedral meshes used adaptivity local refinement simplicity linear interpolation section iii two methods building approximated meshes described topdown method refines coarse initial mesh iteratively inserting vertices bottomup method simplifies initial mesh highest resolution iteratively discarding vertices topdown method extends previous result presented convex datasets 5 handle also curvilinear possibly non convex datasets bottomup method extends simplification methods 2d 19 37 applied also irregular nonconvex datasets since methods based iterative local modifications mesh produces finegrained sequence meshes increasingly finer respectively coarser resolution words high number different tetrahedral meshes different resolutions obtained basis moderate number tetrahedra namely tetrahedra appear successive updates tetrahedra stored compact representation multiresolution model described section iv supports fast online extraction mesh arbitrary resolution section v describe multiresolution visualization system tan tetrahedra analyser whose prototype available public domain besides supporting offline construction multiresolution model tan direct online access model allows user interactively g fig 1 visualization terminology used twodimensional example select resolution representation transfer function supports multiple isosurface fitting direct volume rendering projection approximated hybrid rendering moreover supports interactive manipulation huge volume data progressive rendering obtained using representations different resolutions multiresolution model experimental results construction multiresolution model multiresolution visualization use tan reported section vi section vii concluding remarks drawn current future work subject summarized ii volume data approximation scalar volume dataset given values scalar field taken finite set sample points v ir 3 volumeomega ae ir 3 spanned points v called domain datasetomega usually polyhedron either convex nonconvex possibly cavities cases threedimensional mesh gamma also given covers domainomegagamma vertices points scalar field estimated overomega function f interpolates data values points v defined piecewise cells gamma terminology introduced visually represented figure 1 present sake simplicity 2d example caseomega square region gamma triangulation v set vertices gamma graph surface 3d graph f corresponding triangulated approximation volume data classification volume data classified characteristic structure underlying grid ffl regular datasets sample points distributed regularly 3d spaceomega block parallelepiped gamma regular hexahedral mesh ffl curvilinear datasets sample points lie regular grid computational space grid warped become curvilinear physical spaceomega polyhedron usually nonconvex gamma connective topology hexahedral mesh cells irregular convex hexahedra ffl irregular datasets sample points irregularly distributed 3d spaceomega either convex nonconvex gamma usually tetrahedral mesh hybrid mesh made tetrahedra irregular hexahedra ffl scattered datasets sometimes also said unstructured sample points v known irregularly distributed 3d space gamma must reconstructed simplest caseomega assumed coincident convex hull v therefore gamma may obtained tetrahedrization points v general nonconvex situation may require specific reconstruction techniques beyond scope work hereafter always assume gamma given use following nonstandard classification datasets suitable purpose convex ie convex domain disregarding classification data distribution type mesh nonconvex curvilinear nonconvex irregular b tetrahedral meshes tetrahedral mesh collection tetrahedra pair tetrahedra either disjoint meet common vertex edge triangular face establishes topological relationships essentially incidences adjacencies among vertices edges triangular faces tetrahedra form mesh convention tetrahedral mesh usually denoted sigma generic tetrahedron oe given set points v tetrahedral mesh sigma vertices points v covering convex hull v called tetrahedrization v many different tetrahedrizations v exist particular delaunay tetrahedrization property circumsphere tetrahedron contain point v interior delaunay tetrahedrization nice properties fat cells acyclicity depth sort 13 make suitable mesh applications 44 given polyhedronomegagamma tetrahedral mesh sigma covering also called tetrahedrization omegagamma ifomega nonconvex tetrahedrization ofomega vertices vertices ofomega necessarily exist moreover deciding whether tetrahedrization exists npcomplete 35 suggests nonconvex case difficult handle justifies application heuristics given tetrahedral mesh sigma data values vertices easy interpolate data using linear function within tetrahedron therefore piecewiselinear interpolation commonly used tetrahedral meshes higher order interpolation would necessary achieve smoothness across different tetrahedra involves high numerical effort makes hardly applicable volume data discontinuities field represented tetrahedral mesh may modeled assigning different values vertex different tetrahedra incident c approximated meshes let v volume dataset let gamma given mesh v covering domainomegagamma points v vertices pair v gamma called reference model volume dataset approximated model volume data given pair v 0 sigma sigma tetrahedral mesh vertices subset covering domain omega linear function given tetrahedron sigma accuracy approximation given difference reference model approximated model depends essentially two factors ffl warping domain ie difference betweenomega approximation ffl error made approximating values points v piecewiselinear function defined sigma convex datasets assume warping convex datasets usually small number vertices convex hull eg domain regular dataset defined six vertices nonconvex curvilinear datasets consider parallelepipedomega c called computational domain regular hexahedral mesh gamma c coveringomega c isomorphic gamma always possible gamma deformed hexahedral mesh onetoone correspondence isomorphism vertices gamma c gamma called lifting computational physical domain see figure 2a since sigma vertices subset vertices gamma use lifting backproject sigma corresponding tetrahedral mesh sigma c computational domain see figure 2b meshes gamma c sigma c coveromega c provided sigma c least eight corners ofomega c vertices therefore vertex v c gamma c contained tetrahedron oe c sigma c express position v c baricentric coordinates respect oe c consider point v physical space baricentric coordinates v c respect tetrahedron oe image oe c lifting point v called warped image v v image v c lifting warping v distance v v see figure 2c maximum distance vertices whose backprojection lies inside oe c estimates warping lifted image oe maximum warping tetrahedra sigma defines warping whole approximated model nonconvex irregular datasets estimate actual difference boundaries ofomega difference measured computing boundary vertex gamma minimum hausdorff distance boundary sigma see figure 3 warping boundary face oe sigma maximum among distances corresponding boundary vertices gamma projected onto oe warping sigma maximum among warping boundary measured similarly convex dataset error datum v contained tetrahedron oe given absolute value difference field value v value linear function associated oe computed v nonconvex curvilinear dataset error measured computing difference computational domain equivalent measuring difference field datum v estimated value corresponding warped point v defined nonconvex irregular datasets two possible situations v inside omegagamma compute difference convex case v lies outside omegagamma compute first projection v p v boundary omegagamma measure difference field v linear interpolation v p backprojection c lifting w g c fig 2 lifting warping curvilinear datasets example 2d lifting maps regular mesh gamma c curvilinear mesh gamma b triangular mesh sigma approximating gamma backprojected computational space mesh sigma c c warping point v equal distance v warped point v g fig 3 nonconvex irregular datasets estimate actual difference boundaries computing boundary vertex gamma minimum distance boundary sigma case v said related tetrahedron oe v p boundary see figure 3 error tetrahedron oe maximum among error vertices v convex case v lies inside oe nonconvex curvilinear case point corresponding v computational space lies inside oe c nonconvex irregular case v either inside oe related oe error mesh sigma maximum among errors tetrahedra hereafter warping error denoted functions w e respectively evaluated point v tetrahedron oe mesh sigma warping error data points also weighted suitable functions may vary omegagamma weights useful obtain spacebased measure accuracy example let us assume applicative needs accuracy relevant proximity selected point p select weights decrease distance p similarly rangebased error used require accuracy data assume given value q case weight error obtained composing value function real univariate function decreasing distance q iii building approximated model given reference model v gamma threshold pair face problem building approximated model represents volume dataset accuracy ie warping smaller ffi error smaller key issue size sigma small possible result 2d suggests problem minimising size mesh given accuracy intractable nphard also approximated algorithms warrant bound size solution respect optimal one hard find hardly applicable practice 2 1 hence heuristics adopted try obtain mesh reduced size following data simplification strategies two basic classes strategies simplifying ffl refinement heuristics start mesh whose vertices small subset vertices gamma mesh iteratively refined inserting vertices gamma refinement continues accuracy mesh satisfies required threshold selection strategies adopted insert step vertex likely improve approximation better ffl decimation heuristics start reference model gamma iteratively modify eliminating vertices many vertices possible discarded maintaining required accuracy also case points selected iteration order cause least possible increase warping error although 2d several heuristics proposed experiences case show substantial equivalence quality results since threedimensional case almost unexplored extending 2d techniques seem suitable 3d reasonable approach following subsections present two simplification methods first method based refinement delaunay tetrahedrization applied convex datasets nonconvex curvilinear datasets second method based decimation applied dataset provided reference mesh gamma tetrahedral mesh especially well suited nonconvex irregular meshes method based refinement refinement method proposed 5 convex datasets extended deal also nonconvex curvilinear datasets basic idea comes early technique developed twodimensional case widely used approximating natural terrains 14 online algorithm delaunay tetrahedrization used together selection criterion refine existing delaunay mesh inserting one vertex time case curvilinear datasets delaunay tetrahedrization computed computational domain image lifting gives corresponding mesh physical domain cases selection strategy iteration aimed split tetrahedron causes maximum warpingerror current approximation obtained selecting datum v max corresponding maximum warpingerror new vertex description algorithm general specific aspects either convex curvilinear case explained necessary given dataset v initial mesh sigma created first v convex dataset sigma tetrahedrization convex hull v v nonconvex curvilinear dataset tetrahedrization sigma c computational domainomega c considered sinceomega c block sigma c eight corners ofomega c vertices subdividesomega c five tetrahedra sigma obtained lifting sigma c physical domain given threshold accuracy following refinement procedure applied procedure refinementv sigma sigma satisfies return sigma refinement procedure always converges since number points v finite total accuracy warranted inserted vertices sigma summary three tasks accomplished iteration refinement procedure 1 test accuracy sigma requires evaluating esigma curvilinear case w sigma comparing ffi respectively done efficiently using bucketing structure similar proposed 22 dynamic triangulation 2d maintains tetrahedron list data points v contained inside 2 select new vertex v max points v select point convex case point v maximises e selected curvilinear case point v maximises either w e selected depending whether w sigmaesigma larger smaller ffi respectively done efficiently joint use bucketing structure priority queue maintaining tetrahedra according errorwarping 3 update sigma inserting v max add vertex done using algorithm online delaunay triangulation proposed 20 curvilinear case update always made tetrahedral mesh computational domain sigma obtained lifting details implementation refinement procedure convex datasets found 5 procedure adapted case curvilinear datasets basis previous discussion remark necessary though case curvilinear datasets initial stages refinement mesh sigma might result geometrically inconsistent warping caused lifting indeed mesh sigma c delaunay tetrahedrization computational domain hence consistent tetrahedra might flip lifting hence changing orientation causing geometric inconsistencies sigma see figure 4 twodimensional example consistency tested verifying c c fig 4 inconsistency curvilinear mesh 2d example mesh sigma c geometrically consistent lifted image sigma whether tetrahedron maintains orientation computational physical domain assign infinite warping tetrahedron inconsistent lifting way inconsistent tetrahedra refined first warranted mesh physical space converge consistent one finite number steps although worst case might necessary insert data points indeed let us consider delaunay mesh containing data points computational space mesh obtained splitting hexahedron original mesh five tetrahedra know consistency original mesh lifting hexahedron physical space convex polyhedron two polyhedra overlap physical space convexity warrants lifting five tetrahedra covering hexahedron obtain consistent submesh covering lifted hexahedron exactly nonoverlapping hexahedra warrants submeshes corresponding different hexahedra overlap experimental results show practice mesh rapidly converges consistent one time complexity refinement procedure crucial application long remains reasonable bounds algorithm applied offline volume dataset order build multiresolution model see section iv however time analysis case n points v must inserted sigma shows bound 3 worst case 5 experiments show subquadratic behaviour practice hand space occupancy algorithm quite high need fig 5 two adjacent blocks sigma 1 sigma 2 coincident triangulations 1 2 common face maintaining bucketing structure priority queue see empirical evaluations section vi tables ii a1 refinement large datasets blockdecomposition datasets regular structure either physical computational domain possible bring space complexity manageable bounds splitting dataset blocks running algorithm separately block assume instance regular dataset size theta n theta p given subdivide eg k 3 blocks size mk process separately threshold cases resulting meshes joined form mesh whole domain order warrant correctness procedure must sure structure obtained joining results indeed tetrahedrization whole domain proved showing given two blocks sharing common face refinement algorithm triangulate face way refining block see figure 5 let sigma 1 sigma 2 meshes two blocks let 1 2 triangulations face r common blocks sigma 1 sigma 2 respectively may assume upon suitable initialization meshes 1 2 initially coincident let us consider generic step algorithm refines sigma 1 vertex inserted lie r update change neither 1 error warping data points lying contrary vertex inserted lies r must particular point maximising errorwarping among data points lying r means sequence vertices refining 1 independent refinement occurs rest since situation occurs refinement sigma 2 conclude sequence vertices selected 2 hence two triangulations given accuracy coincident note however result would obtain running refinement algorithm whole dataset since resulting tetrahedrization might globally delaunay delaunay property verified locally block b method based decimation refinement method described hardly adaptable case nonconvex irregular datasets major difficulties arise finding initial coarse mesh approximate domainomegagamma estimation warping moreover delaunay triangulation applicable nonconvex polyhedra since undefined constrained case experiences approximation nonconvex objects 2d triangular meshes suggest decimation technique might adequate case nonconvex irregular datasets see eg 37 19 4 following describe algorithm extends heuristics volume data starting reference mesh gamma vertices iteratively discarded possible given threshold accuracy following refinement procedure applied procedure decimationv gamma sigma satisfies vmin select min vertexv sigma return sigma test accuracy simpler case refinement procedure indeed iteration accuracy may worsen local changes therefore sufficient maintain variable storing current accuracy updated iteration testing whether accuracy changed portion mesh become worse current one contrary procedures select min vertex remove vertex somehow delicate respective counterparts select max point add vertex selecting vertex removed involves estimation much error warping mesh may increase removal criterion adopted vertex causing smallest increase errorwarping selected iteration exact estimation change error warping obtained simulating deletion vertices current mesh would computationally expensive since vertex 24 incident tetrahedra average may involve relocating many points lying inside tetrahedra rather use heuristics estimate apriori much vertex removal affects error warping estimation computed vertices decimation starts updated vertex time incident tetrahedra change order estimate error increase precompute field gradient r v vertex v reference model done calculating weighted average gradients tetrahedra incident v weight contribution tetrahedron oe given solid angle oe v vertex v mesh search vertex w among adjacent v difference deltar vw r v rw minimum value deltar vw gives rough estimate far linear field fig 6 apriori estimate warping increase caused removing boundary vertex v obtained measuring distance v average plane fitting adjacent vertices boundary sigma neighbourhood v smaller deltar vw smaller expected error increase v removed value deltar vw pointer w stored together v warping changes vertex lying boundary sigma removed therefore vertex v estimate apriori warping increase caused removing v basis local geometry boundary sigma neighbourhood v adopt criterion based distance v v plane best fits vertices lying around v boundary sigma see figure 6 smaller v smaller expected warping increase v removed therefore v stored together v vertices sigma maintained priority queue supports efficient selection framework selection criterion adopted procedure select min vertex symmetrical one used refinement algorithm vertex sigma selected expected produce smallest increase either warping error depending whether w sigmaesigma larger smaller ffi vertex v selected need tetrahedrize polyhedron resulting elimination tetrahedra incident v therefore removing mesh necessarily possible difficulty related fact may possible tetrahedrize nonconvex polyhedron since deciding whether possible npcomplete use heuristics try remove vertex collapsing one incident edges endpoint particular given vertex v try remove collapsing edge e joins v vertex w smallest difference deltar vw v surface normal recall w selected estimating cost removing v terms error edge collapse simple operation tetrahedra incident e deleted tetrahedra vertex v modified moving vertex w adjacencies updated accordingly two tetrahedra oe 1 oe 2 adjacent tetrahedron oe 0 deleted oe 1 oe 2 become mutually adjacent see figure 7a example 2d geometrical consistency mesh may violated tetrahedron flips ie changes orientation edge collapsing see figure 7b example 2d consistency tested simply checking orientation fig 7 edge collapse 2d valid collapse b inconsistent collapse fig 8 points fall outside mesh assigned tetrahedra projecting boundary faces tetrahedron incident v collapse collapse results impossible mesh update occurs v temporary tagged nonremovable setting error warping estimate infinity way different vertex selected next cycle successful edge collapse precise evaluation current accuracy must obtained refinement method adopt bucketing structure maintain relation tetrahedra data points contain updating structure involves portion mesh covered old tetrahedra adjacent v removed points including v belong volume relocated respect new tetrahedra note case v boundary vertex points may fall outside mesh points including v assigned tetrahedra considering projections new boundary faces mesh see figure 8 changes accuracy computed point basis new location finally apriori estimate error warping increase recomputed vertex adjacent v priority queue updated accordingly iv multiresolution model one algorithms described previous section regarded producing historical sequence tetrahedra namely tetrahedra appear current mesh sigma construction based observation extend threedimensional case simple idea manage mul 7tiresolution proposed 9 twodimensional case multiresolution representation terrains tetrahedron sequence marked two accuracies called birth death corresponding worst best accuracy mesh containing respectively therefore referring historical sequence generated refinement algorithm birth death accuracy current mesh tetrahedron inserted discarded form respectively two values swapped case historical sequence built decimation querying model given query accuracy mesh accuracy formed tetrahedra alive ie b based fact use birth death filters retrieve tetrahedra either form given mesh cover given range accuracies historical sequence filter also combined spatial filter perform windowing operations ie retrieve tetrahedra belong given query region since multiresolution model contains huge number tetrahedra adopted minimalist data structure suitable maintain multiresolution model sequential file site dataset store coordinates field value tetrahedron historical sequence store vertex indexes birth death accuracies therefore space occupancy depends number sites number tetrahedra historical sequence sites tetrahedra stored two different files sites tetrahedra sorted order appear mesh construction refinement inverse order model built decimation therefore tetrahedra result nonincreasing order birth case sequence tetrahedra belonging model given resolution obtained sequentially scanning file selecting tetrahedra according birth death tetrahedra alive accepted search stops soon tetrahedron birth accuracy better found tetrahedra covering given range accuracies obtained similarly vertices tetrahedra obtained scanning sequence sites highest element indexed tetrahedron set extracted note performing combined windowing operation would require subsequent filter scan tetrahedra extraction search efficiency might improved adopting data structures range queries interval tree 31 sequence lists simplices 3 however data structures might introduce relevant memory overhead particular adopting sequence lists simplices would make sense list accuracies spanned multiresolution model might large number tetrahedra forming maintained main memory interval tree gives optimal time performance application would effective whole model maintained main memory different perspective spatial indexes 36 might adopted improve performance windowing operations also structures involve memory overhead b transmitting model network multiresolution model must transferred server client network important compress information conciseness achieved avoiding explicit transmission tetrahedra forming historical sequence providing implicit encoding allows client make structure explicit efficiently model built procedure refinement exploiting properties delaunay tetrahedrizations transmit vertices final mesh sigma order inserted refinement ie order store file vertex send client coordinates field value accuracy mesh insertion allows client reconstruct whole historical sequence right order applying procedure online delaunay tetrahedrization 20 vertices received note much cheaper task rebuilding model initial dataset since selection vertices comes free sequence moreover online construction performed client directly results progressive representation possibly rendering mesh highest resolution model built procedure decimation similar technique may adopted following hoppe 19 case coarsest mesh transmitted explicitly remaining vertices listed inverse order decimation ie order store file vertex send client coordinates field value accuracy mesh deletion vertex collapsed last information permits perform vertexsplit operation inverts edgecollapse performed decimation algorithm 19 enrico mi sembra che cosi non basti ci vorrebbero anche le facce che vengono duplicate per un po noioso da spiegare che si fa si potrebbero eliminare dettagli riferimento semplicemente al metodo di hoppe e alla possibilita di estenderlo 3d therefore client generate whole historical sequence right order using sequence vertex splits similarly previous case mesh reconstruction performed client efficiently progressive transmission rendering supported note case operations performed client vertex split much simpler required delaunay procedure hand amount information transmitted larger size data transmitted reduced using geometric compression 12 gui isosurf rendering hybrid rendering dvr isosurface extraction transfer function rendering multiresolution extractor visualization modeling multires model data raw construction refinement algorithm convex curvilinear data construction decimation algorithm irregular data manager fig 9 architecture tan system v tan system basis multiresolution model algorithms described previous sections designed volume visualization system called tan tetrahedra analyzer able manage multiresolution based approximated tetrahedral representations volume data system architecture architecture tan depicted figure 9 system essentially composed two modules modeling module visualization module communicate multiresolution data structure communicate user graphical user interface ffl modeling module contains algorithms building multiresolution model starting volume dataset either refinement decimation algorithm used build model depending type dataset input user selects input dataset construction parameters gui system reads corresponding data file runs construction algorithm resulting multiresolution models stored using data structure described section iv modeling module essentially intended run offline phase multiresolution model prepared stored file system subsequent visualization ffl multiresolution model built visualization module access submodule called multiresolution extractor contains query processing routines access multiresolution data structure explained section iva ffl tetrahedra extracted multiresolution model piped two independent submodules one manages transfer function one performs isosurface extraction transfer function applied range covered extracted data order provide color opacity vertex used direct volume rendering user load edit store transfer functions gui isosurfaces obtained method called marching tetrahedra mt straightforward adaptation marching cubes mc 25 tetrahedral meshes tetrahedron classified terms value four vertices triangular patches obtained using linear interpolation along edge intersected isosurface isosurface patches extracted tetrahedra loaded memory either one isovalues provided user gui user also define color opacity isovalue independently stage essentially provides geometries namely set tetrahedra prepared direct volume rendering set isosurface patches prepared surface rendering respectively ffl geometries piped rendering manager submodule controls visualization basis data currently loaded memory parameters provided user submodule essentially aimed filter geometries triangles andor tetrahedra visualized time location space way able implement mechanisms progressive rendering lowlevel mesh used interactive phases high level mesh used user wait longer visualization multiresolution rendering different lods used different portions space eg either enhance quality magnify selected portion dataset 8 filtering performed basis birth death location tetrahedron triangle order improve performance user allowed ask interactive extraction isosurfaces tetrahedra interest case rendering manager module pipes back isosurface extractor pointer current tetrahedra list collects isosurface patches ffl geometries selected visualization piped one among three different modules depending rendering modality selected user isosurface rendering enabled proper module visualizes standard surface graphics invoked passed set isosurface patches interest note translucent surfaces used necessary sort isosurface patches depth order prior visualization direct volume rendering enabled selected set tetrahedra passed projected 1tetrahedra pt algorithm 38 whose main phases depth sort tetrahedral mesh cell depth order splitandcompositing action produces translucent triangles visualized standard surface graphics isosurfaces direct volume rendering used tetrahedra isosurface triangles passed module manages hybrid rendering case blending conflicts among tetrahedra isosurface patches must resolved order tetrahedron contains surface patch splits two parts tetrahedrized resulting set tetrahedra isosurface patches sorted depth order pt algorithm applied tetrahedra results visualized depth order standard surface graphics easy change architecture network architecture based clientserver model using data transmission method described section ivb case server would contain modeling module plus query processing module provides upon request client compressed data structure extracted mesh set meshes client would incorporate visualization module multiresolution extractor would simply module schedules requests server collects answers decompress data structure b prototype implementation architecture described previous section partially implemented first version tan system released public domain first quarter 1996 available sgi executables internet site httpmilescnucecnritcgswonthewebhtml system works sgi workstations uses opengl manage graphics data output gui implemented xforms 46 portable easytouse user interface toolkit available public domain see httpbraggphysuwmeduxforms implemented refinement construction algorithm convex nonconvex curvilinear data convex version included first release system experiments curvilinear data shown next section obtained standalone version algorithm decimation construction algorithm irregular datasets currently implementation multiresolution extractor provides function extracting mesh lod provided user two meshes loaded main memory one high lod low lod used interactive rendering figure shows snapshot two gui windows allow user build multiresolution model extract lod representations system provides statistics size meshes different lods user therefore make choice approximated models taking account performances workstation used frame rate required image quality degradation may accepted following visualization features implemented ffl loading interactive editing transfer function ffl multiple isosurface extraction mt method isosurface rendering user defined color opacity ffl direct volume rendering pt method ffl approximated hybrid rendering interactive modification view parameters ffl progressive rendering modality snapshot graphic output window gui windows related rendering presented figure 13 window upper left corner main menu system window upper right corner allows user extract isosurface assign given color opacity two windows right side related visualization editing transfer function window lower left corner allows user interactively adjust view parameters window middle used select rendering modality isosurfaces dvr approximated hybrid rendering implemented follows tetrahedron system explicitly stores related isosurface facets rendering time cells depthsorted cell volume contribution obtained pt algorithm isosurface facets possibly contained projected since tetrahedra split prior depthsort result approximated different parcels single tetrahedron cannot sorted correctly respect related isosurface patches degradation image quality may relevant low resolution approximations used highly reduced increase resolution ie smaller single cell smaller visual error introduced approximated hybrid rendering example approximated hybrid rendering shown figure 15 exact method hybrid rendering described previous section currently implementation progressive rendering modality selected user improve interactivity mesh low lod visualized highly interactive phases eg user interactively modifies current view mesh high lod automatically visualized interaction occur given time period ie noninteractive phases current implementation low lod set user sophisticate version could selected automatically system depending graphics performance current platform order ensure real time frame rate vi experimental results performances system evaluated four datasets representative two classes regular nonconvex curvilinear datasets datasets chosen commonly used volume rendering field order facilitate comparisons proposals ffl bluntfin 40 theta 32 theta 32 curvilinear dataset built running fluidflow simulation air flow blunt fin plate 1 ffl post 38 theta 76 theta 38 curvilinear dataset represents result numerical study 3d incompressible flow around multiple posts ffl sod subset 32 theta 32 theta 32 subsampling regular rectilinear dataset represents electron density map enzyme 2 ffl buckyball 128 theta 128 theta 128 regular rectilinear dataset represents electron density around molecule c 60 experiments presented either 32 theta 32 theta 32 64 theta 64 theta 64 subsampling dataset 3 multiresolution models datasets built refinement construction algorithm various visualization features tan experimented models multiresolution modeling features evaluation tables ii report results construction multiresolution model curvilinear regular datasets respectively table reports complexity multiresolution model total number sites cells maximal ram space occupancy construction computation times required build model information number approximated meshes extracted accuracy approximation measured follows warping percentage length diagonal minimum bounding box containing dataset error percentage range spanned data values times cpu seconds sgi indigo workstation mips r4000 100mhz graph figure 10 shows number vertices mesh refinement depicted function approximation error note rapidly size mesh decreases increase error results give quantitative estimate advantage founding approximate volume visualization data simplification techniques figure 11 shows spatial distribution sites bluntfin dataset compared spatial distribution vertices approximated model accuracy 2 2 may notice experiment reported table ii buckyball dataset run subsampling limitations available ram multiresolution model whole dataset two subsampled datasets also obtained using blockdecomposition refinement described section iiia1 results presented table iii adopting method overcome intrinsic limitations ram specific platform dataset always partition refinement block becomes tractable problem available resources particular compare results obtained subsampled dataset refined whole bluntfin post produced distributed nasaames research center produced mcree scripps clinic la jolla ca kindly distributed university north carolina chapel hill 3 buckyball available courtesy avs international center curvilinear datasets tetra sites sites bluntfin 40x32x32 40960 multires model tot tetra 590831 levels detail post 38x76x38 109744 multires model tot tetra 1620935 levels detail measures multiresolution models built curvilinear datasets post triangulation times higher expected due page swapping ram size workstation used 64mb lower part table ii refined 64 independent blocks upper part table iii note block decomposition refinement total computation time reduces 1318 sec 532 sec small increase number vertices necessary achieve given accuracy increase due spatial constraints introduced block boundaries note also performance data simplification terms data needed achieve given accuracies improves resolution input dataset consider example lod meshes accuracy 10 multiresolution models buckyball percentage sites needed build approximated mesh decreases respectively 452 221 68 total number sites dataset absolute values ratio 128 3 datasets 641 full resolution reduces 101 accuracy 10 regular datasets tetra sites sites multires model tot tetra 177588 levels detail buckyball 32x32x32 32768 multires model tot tetra levels detail ii measures multiresolution models built two regular datasets10305070900 01 points buckyball bluntfin points buckyball bluntfin post fig 10 number points simplicial model expressed function approximation error tetra sites sites buckyball 32x32x32 32768 multires model tot tetra 467261 levels detail buckyball 64x64x64 262144 multires model tot tetra 3927793 levels detail buckyball 128x128x128 2097152 multires model tot tetra levels detail iii tetrahedrization buckyball dataset using blockdecomposition refinement 128 3 dataset original one 64 3 datasets obtained subsampling decompositions blocks size 8 3 64 3 divided 64 blocks size blocks size 16 3 fig 11 distribution vertices bluntfin dataset original dataset 40960 sites left approximated mesh right accuracy vertices tetra iso triangles dvr time 0000 40960 222528 19499 441 iv isosurface rendering threshold value 1244 direct volume rendering dataset different accuracies times seconds sgi indigo xs24 r4000 ws b rendering features evaluation figure 14 presents visual results related isosurface direct volume rendering three representations bluntfin dataset top images refer mesh full resolution middle images refer approximated mesh accuracy 10 10 bottom images refer approximated mesh accuracy 40 40 numerical results size meshes extracted isosurfaces well times dvr summarized table iv images provide evidence image degradation almost unperceivable passing full accuracy 10 10 accuracy still small 40 40 output sizes times highly reduced visualization results obtained tan essentially based concept data simplifica tion also compared results obtained approximation methods based graphics output simplification case isosurface rendering size number facets extracted simplified mesh depend essentially variation field function namely large facets fitted subvolumes gradient constant nearly constant contrary geometrybased simplification isosurface extracted mesh full resolution would driven isosurface curvature 37 19 obvious computational advantage approach based data simplification major effort taken preprocessing stage ie either simplified multiresolution model built standard simplification approaches implemented postprocessing phase therefore reducing throughput interactive applications moreover standard geometrybased methods may produce anomalies surface curvature variations small size reflect significant variations field eg sinusoidal function amplitude lower simplification threshold worse intersections surfaces different isovalues may occur simplification problems arise methods based data simplification previous paper 7 also compared performance drv standard pt algorithm applied simplified mesh performance approximated versions pt algorithm 43 applied mesh full resolution experiments showed evidence images visual degradations similar obtained using approximated pt produced using highly simplified datasets thus obtaining much shorter processing times five times shorter large difference speedups standard approximated pt techniques act pure rendering phase thus achieving reduction overall time maximum 50 contrary speedup overall time achieved using data simplification approach linearly proportional simplification operated data means pure rendering affected depth sorting cell classification splitting well vii conclusions tan currently volume visualization system distributed public domain offers multiresolution features least knowledge experience provides evidence visualization volume data managed effectively efficiently using multiresolution features based concept data simplification experimental results show managing multiresolution involves limited increase space complexity ratio size multiresolution model average case 25 times size mesh maximal accuracy moreover proposed representation supports design fast approximated progressive multiresolution visualization algorithms aimed providing significant speedups rendering increasing acceptance visualization useful working tool critical points usability approach high requirements memory processing time needed build multiresolution model current implementation tetrahedrization high resolution datasets eg 100k sites may require memory size beyond available current lowlevel workstations problem may solved building multiresolution model highlevel workstationssupercomputers redesigning process order reduce memory processing requirements instance strategy based block decomposition given good results regular curvilinear datasets possible extension proposed multiresolution model structure data allow extraction approximated representations whose accuracy variable data domain especially useful multiresolution visualization different accuracy levels must used inside single image context may extremely useful supply user tools set focus region render data according selection 30 unfortunately extracting meshes variable resolution current model may originate consistency problems ie possible discontinuities field consequent cracks isosurfaces aliasing dvr previous paper 8 implemented multiresolution rendering using two different meshes high low resolution respectively high resolution mesh rendered inside region interest used outside region topological inconsistencies occur two meshes boundary region interest overcome visualizing cells meshes cross boundary using blending cells rigourous solution problem given level multiresolution extractor module providing mechanism extracting mesh whose accuracy varies smoothly consistently domain recent works 9 32 proposed alternative multiresolution data structures provide efficient solutions problem produce effective results twodimensional case eg visualizing terrain models context flight simulators however structures may require relevant overhead terms storage make easily extensible threedimensional case currently working second release tan system tan v2 based openinventor gui development using sgi rapidapp tool plan distribute q2 1998 system redesigned quite scratch order improve performances usability visual quality maintaining architecture described figure 9 modeling tool visualization tool clearly separated related multiresolution data structure modeling tool designed manage kinds datasets simplification algorithm irregular datasets currently implementation completed tested short time experiences 2d 19 4 similar decimation techniques 3d 34 suggest method result least effective based refinement however performances terms time data simplification rate compared refinement algorithm convex curvilinear datasets upon results comparative evaluation decide whether algorithms decimation algorithm incorporated tan v2 modeling subcomponent rendering subcomponent substantially improved order provide faster dvr tan v2 rendering speed approximately openinventor sgi indigo2 xz r4400 200mhz ws preliminary results new rendering approach encompasses exact hybrid rendering exact management transfer function discontinuities based cell slicing simplified gui conclusion goal found rendering modules architecture new concept tetrahedral graphics tetrahedra treated atomic graphics primitives like triangles efficiently processed lowlevel functions provided graphics library possibly hardwareassisted way would clearly separate geometric aspects volume visualization treated application programsmodules purely graphical aspects standardized treated library hardware level acknowledgements wish thank leila de floriani participation early stages project many useful discussions work part continuing collaboration group university genova authors thanks also due donatella sarti pierluigi sbaiz marco servettini help implementing algorithms described paper r efficient algorithm terrain simplification surface approximation geometric partitions pyramidal simplicial complexes multiresolution decimation based global error multiresolution modeling rendering volume optimal isosurface extraction irregular volume optimization projective volume magicsphere insight tool 3d data visualization representation visualization terrain surfaces variable resolution simplification envelopes fast algorithms volume geometry compression acyclicity theorem cell complexes dimensions automatic extraction irregular network digital terrain models multilevel finite element method adaptive mesh optimization visualization volume multiscale model structuredbased volume volumerenderingvolume data reduction scheme triangulated surfaces data point selection piecewise trilinear approximation progressive meshes construction threedimensional delaunay triangulations using local transformations poligonal mesh simplification bounded error dynamic maintenance delaunay triangulations hierachical splatting progressive refinement algorithm volume comparison existing methods building triangular irregular network models terrain grid digital elevation models marching cubes high resolution 3d surface construction algorithm theory multiresolution signal decomposition wavelet representation discretized marching cubes multiscale volume efficient visualization largescale data hierarchical meshes spray rendering computational geometry introduction variable resolution terrain surfaces generalized unstructured decimation difficulty tetrahedralizing 3dimensional nonconvex polyhedra design analysis spatial data structures decimation triangle mesh polygonal approximation direct scalar volume multiresolution framework volume pursuing interactive visualization irregular grids octrees faster isosurface generation interactive splatting nonrectilinear volumes visibility ordering meshed polyhedra forms library graphical user interface toolkit x multiresolution tetrahedral framework visualizing volume tr ctr oliver g staadt markus h gross progressive tetrahedralizations proceedings conference visualization 98 p397402 october 1823 1998 research triangle park north carolina united states stefan gumhold stefan guthe wolfgang straer tetrahedral mesh compression cutborder machine proceedings conference visualization 99 celebrating ten years p5158 october 1999 san francisco california united states kwanliu thomas w crockett parallel visualization largescale aerodynamics calculations case study cray t3e proceedings 1999 ieee symposium parallel visualization graphics p1520 october 2526 1999 san francisco california united states jeremy meredith kwanliu multiresolution viewdependent splat based volume rendering large irregular data proceedings ieee 2001 symposium parallel largedata visualization graphics october 2223 2001 san diego california b sauvage hahmann gp bonneau length preserving multiresolution editing curves computing v72 n12 p161170 april 2004 shyhkuang ueng yanjen su chitang chang lod volume rendering fea data proceedings conference visualization 04 p417424 october 1015 2004 wei hong arie kaufman feature preserved volume simplification proceedings eighth acm symposium solid modeling applications june 1620 2003 seattle washington usa christopher co bjoern heckel hans hagen bernd hamann kenneth joy hierarchical clustering unstructured volumetric scalar fields proceedings 14th ieee visualization 2003 vis03 p43 october 2224 david f wiley martin bertram bernd hamann construction hierarchy best linear spline approximations using finite element approach ieee transactions visualization computer graphics v10 n5 p548563 september 2004 paolo cignoni leila de floriani paola magillo enrico puppo roberto scopigno selective refinement queries volume visualization unstructured tetrahedral meshes ieee transactions visualization computer graphics v10 n1 p2945 january 2004 p cignoni constanza c montani c rocchini r scopigno simplification tetrahedral meshes accurate error evaluation proceedings conference visualization 00 p8592 october 2000 salt lake city utah united states hamish carr jack snoeyink ulrike axen computing contour trees dimensions computational geometry theory applications v24 n2 p7594 february issac j trotts bernd hamann kenneth joy simplification tetrahedral meshes error bounds ieee transactions visualization computer graphics v5 n3 p224237 july 1999