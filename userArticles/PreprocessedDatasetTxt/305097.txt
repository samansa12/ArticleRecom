interactive orthogonal graph drawing abstractmany applications require human interaction design process user given ability alter graph design progresses interactive graph drawing allows user dynamically interact drawing graph paper discuss features essential interactive orthogonal graph drawing system also describe possible interactive drawing scenarios present results two compare performance b introduction graphs extensively used represent various important concepts objects examples include parallel computer architectures networks state graphs entityrelationship diagrams subroutine call graphs automata dataflow graphs petri nets vlsi circuits etc cases require graph represented drawn plane understand study structure properties reason typically drawing graph accompanied optimizing cost function area number bends number edge crossings uniformity placement vertices minimum angle etc survey graph drawing algorithms related results see annotated bibliography di battista eades tamassia tollis 4 orthogonal drawing drawing vertices represented points integer coordinates edges represented polygonal chains consisting horizontal vertical line segments paper focus attention interactive orthogonal graph drawing 19 21 shown every biconnected planar graph maximum degree four drawn grid 2n bends graph biconnected total number bends rises 24n 2 cases four bends per edge required algorithms 21 take linear time produce drawings one edge may four bends kant 9 shows graph triconnected maximum degree four drawn n theta n grid three bends per edge total number bends b 3nc 3 planar graphs maximum degree three shown paper gridsize n 2 e sufficient required case edge bends twice even granot 6 present algorithm obtaining orthogonal drawing 4planar graph three bends per edge embedding planar graph fixed orthogonal drawing minimum number bends computed 2 log n time 20 planar embedding given problem polynomially solvable 3planar graphs 5 nphard 4planar graphs 8 lower bound 2n bends biconnected planar graphs 22 upper lower bounds proved case orthogonal drawing graph necessarily planar leighton 10 presented infinite family planar graphs require areaomegagamma n log n independently leiserson 11 valiant 23 showed every planar graph degree three four orthogonal drawing area log 2 n valiant 23 showed orthogonal drawing general nonplanar graph degree three four requires area 9n 2 described families graphs require presented algorithm constructs orthogonal drawings graphs two bends per edge area required 2n theta 2n better algorithm presented 1 2 draws graph within n theta n grid two bends per edge algorithm introduces 2n bends recently presented algorithm produces orthogonal drawing graph maximum degree four requires area 076n 2 15 algorithm introduces number bends appear edge two maximum degree three another algorithm produces orthogonal drawing needs area 1n 2 b n bends 15 16 drawing one bend appears edge except one edge may two bends drawing algorithm given graph input produces drawing graph insertion deletion performed graph new graph running drawing algorithm result new drawing might vastly different previous one inefficient use time resources two points view time run algorithm new graph b user may spent significant amount time order understand analyze previous drawing investigate techniques run efficiently introduce minimal changes drawing first systematic approach dynamic graph drawing appeared 3 target perform queries updates implicit representation drawing algorithms presented straight line polyline visibility representations trees seriesparallel graphs planar graphs updates data structures required olog n time algorithms maintained planarity drawing insertion single edge however might cause planar graph drastically change embedding even become non planar incremental approach orthogonal graph drawing presented 13 focus routing edges efficiently without disturbing existing nodes edges layout adjustment methods proposed 14 rearranging diagram avoid overlapping nodes changing focus interest user diagram layout adjustment methods 14 property preserve users mental map way user visualizes understands drawing paper investigate issues interactive graph drawing introduce four scenaria interactive graph drawing analyze two scenaria based assumption underlying drawing orthogonal maximum degree vertex four end update operation show one scenario relativecoordinates general shape current drawing remains unchanged update performed coordinates vertices bends current drawing may shift total amount 6 units along x axes linear programming employed prove upper bounds area number bends scenario specifically interactive graph drawing system relativecoordinates scenario builds drawing bends graph connected times 4nt bends otherwise area drawing never larger 225nt 2 graph connected times larger 3nt 2 otherwise note nt number vertices inserted initially empty graph time edge 3 bends time drawing process results regarding performance scenario first update operation applies nonempty graph also presented another scenario nochange discuss interactive graph drawing technique building orthogonal drawing graph scratch update operation inserts new vertex routes new edges drawing without disturbing current drawing analyzing performance nochange scenario reveals area drawing time 177nt 2 graph connected times 4nt 2 otherwise note nt total number vertices time apart area scenario good behavior terms total number bends well 266nt graph connected times 4nt otherwise 3 bends may appear edge drawing time section 2 give example features interactive drawing system sections 3 4 analyze two interactive graph drawing scenaria ie relative coordinates nochange present results performance section 5 compare two scenaria terms performance discuss extensions finally section 6 presents conclusions open problems interactive scenaria software supports interactive graph drawing features able create drawing given graph layout standard eg orthogonal straight line etc b give user ability interact drawing following ways ffl insert edge two specified vertices ffl insert vertex along incident edges ffl delete edges vertices blocks vertices ffl move vertex around drawing ffl move block vertices edges around drawing drawing graph hand time moment called current drawing graph called current graph drawing resulting user request satisfied called new drawing various factors affect decisions interactive drawing system takes moment user request posted next drawing displayed factors following ffl amount control user upon position newly inserted vertex ffl amount control user new edge routed current drawing connecting two vertices current graph ffl different new drawing compared current drawing keeping factors mind propose four different scenaria interactive graph drawing section following 1 fullcontrol scenario user full control position new vertex current drawing control range specifying lower upper bounds x coordinates new vertex providing exact desired coordinates system edges routed user system 2 drawfromscratch scenario based simple idea every time user request posted new graph drawn using one popular drawing techniques apart fact scenario gives rather slow interactive drawing systems new drawing might completely different compared current one 3 relativecoordinates scenario general shape current drawing remains coordinates vertices andor edges may change small constant insertion new vertex incident edges somewhere middle current drawing insertion constant number rows columns 4 nochange scenario approach coordinates already placed vertices bends edges change order achieve property need maintain invariants insertion close connection fullcontrol scenario global routing vlsi layout 12 reason approach deals relocation vertices rerouting edges using free space current drawing technique presented 13 computes routes new edges inserted graph without disturbing existing vertices edges drawfromscratch scenario interesting since every time update requested user drawing system ignores work point major disadvantage user relearn drawing rest paper discuss two scenaria used interactive systems produce orthogonal drawings graphs drawings assume maximum degree vertex time less equal four also present results regarding area number bends drawings two scenaria require compare performance 3 relativecoordinates scenario scenario every time new vertex inserted current drawing system makes decision coordinates vertex routing incident edges new rows columns may inserted anywhere current drawing order routing feasible coordinates new vertex say v well locations new rows andor columns depend following ffl vs degree time insertion ffl vertex u adjacent v directions ie right left around placed vertex u new edges inserted ffl whether required routing edges done utilizing segments existing rows columns free covered edge ffl optimization criteria use relativecoordinates scenario interactive system start existing drawing graph start scratch empty graph either case assume insertion vertexedge scenario increase number connected components current graph exception single vertex inserted empty current graph vertex inserted update operation connected least one vertex current drawing let us assume v next vertex inserted current graph update operation number vertices current graph v connected called local degree v denoted local degreev discussion follows consider case inserted vertex local degree one two three four except first vertex inserted empty graph user wishes insert new vertex local degree zero vertex placed temporary location inserted automatically future newer vertices increase local degree assume vertex v inserted current graph one vertices current drawing adjacent v system checks possible directions around vertices new edges may inserted routed target minimize number new rows columns open current drawing well number bends appear along routed edges many different cases many possible combinations first give examples best worst cases one might encounter see detail v inserted local degree one two three four example shown fig 1a vertices u 1 u 2 free edge ie grid edge covered graph edge right respectively case new rowscolumns needed insertion vertex v new bends introduced hand however example shown fig 1b four vertices edges insertion new vertex v requires insertion three new rows three new columns current drawing additionally eight bends introduced vertices u 1 u 2 u 3 u 4 general positions fig 1b see edge v u 4 four bends avoid 4bend edge insert vertex v way shown fig 1c total number new rows columns bends still maximum number bends per edge three even distribution bends edges adjacent vertex v may choose insert way shown fig 1d every edge exactly two bends three new rows three new columns still required notice though approach described fig 1d inserting vertex v always possible eg cannot kind insertion vertices row column let v next vertex inserted many cases one interested exhaustive analysis however relatively easy come cases insertion distinguish following main cases vertex v 1 v local degree one u vertex current drawing adjacent v draw edge u v edge u v uses direction right bottom left taken edge incident u depicted fig 2a insertion requires either new row new column new bend inserted 2 v local degree two best case insertion requires new rows columns bends shown fig 1a worst case though two new rows one new b c figure 1 insertion v new row column required bc three new rows three new columns required maximum four bends per edge b three bends per edge c two bends per edge column one new row two new columns see fig 2b three new bends might required 3 v local degree three worst case insertion requires total four new rows columns five new bends fig 2c show example insertion requires one new row three new columns five new bends 4 v local degree four worst case requires total six new rows columns however four either rows columns also eight new bends may introduced worst case already discussed example depicted fig 1c fig 2d show another case two new rows four new columns eight new bends introduced b c figure 2 inserting v local degree one b two c three four discussed previous section single edge insertions handled using techniques global routing 12 technique 13 easiest way handle deletions delete verticesedges data structures without changing coordinates rest drawing occasionaly demand system perform lineartime compaction similar one described 21 refresh screen proposition 31 asssume n vertices inserted given nonempty orthogonal drawing graph whose height h width w following interactive graph drawing scheme relativecoordinates scenario insertion may add 8n new bends result new drawing whose area hw 3n 2 proof assume n inserted vertices local degree four one falls one worst cases described terms rows columns bends introduced means insertion introduces eight new bends total six new rows columns let h final w final height width respectively graph n vertex insertions completed h final 6n area final drawing h final theta w final maximized h 3n hence result follows 2 rest section assume use interactive graph drawing scheme relativecoordinates scenario start scratch given graph empty according discussion beginning section relative coordinates scenario guarantees graph built always connected vertex insertion let n 1 denote number vertices local degree one two three four respectively inserted time theorem 31 interactive graph drawing system relativecoordinates sce nario produces orthogonal drawing connected graph following properties time 1 vertex insertion coordinates vertex bend current drawing may shift total amount 6 units along x axes 2 3 bends along edge drawing 3 total number bends 3nt gamma 1 4 area drawing 225nt 2 nt number vertices inserted time proof first property follows definition relativecoordinates scenario fact six new rows columns might open anywhere current drawing see figs 1b 1c 1d 2d result vertex insertion figures 1 2 cover worst cases terms rows columns bends required single vertex insertion possible local degrees inserted vertex figures observe following first three bends along edge drawing see fig 1c second bends along edge introduced time insertion vertex incident edge figs 1 2 discussion follows 3 new bends introduced vertex local degree two inserted 5 new bends vertex local degree three inserted 8 new bends vertex local degree four inserted new bend introduced vertex local degree one inserted words bt total number bends time holds want compute maximum value bt take order establish upper bound number bends drawing time equivalent solving following linear program maximize following constraints first constraint equation vertices second constraint inequality edges graph n vertices inserted recall first vertex inserted local degree 0 since edges yet solving linear program reveals maximum value expression happens 1 solution means maximizing number bends depends solely number vertices local degree two four following insertion first two vertices take account fact first two vertices inserted empty graph local degrees 0 1 respectively really 1 also see combination values n 2 n 4 n 2 n edges recall one edge introduced second vertex local degree 1 analysis follows upper bound number bends 3n gamma 1 regarding area drawing time infer figs 1 2 ffl vertex local degree one inserted either new row new column required ffl vertex local degree two inserted either two new rows one new column required one new row two new columns required ffl vertex local degree three inserted need total four new rows columns ffl vertex local degree four inserted need total six new rows columns let ht wt denote height width respectively drawing time holds since want maximize ht wt multiply sides last inequality ie one edges graph 3 show htwt 3nt however solution give us values variables ie n 1 n 2 etc upper bound achieved reason formulate problem linear program expression maximized constraints exactly ones linear program solving new linear program ht wt maximized exactly linear program studied number bends according analysis linear program results really mean n second vertex inserted 1 maximum value expression 2n wanted maximize 3n means ht also holds ht theta wt maximized 15nt case area drawing let us look expression giving number bends maximized linear program proof theorem 31 one might tempted believe expression maximized n 4 maximized happens n 4 ntas see lemma 41 next section result linear program quite revealing discovered expression maximized following insertion sequence insert first two vertices local degrees zero one respectively followed vertices local degree two conclude insertion exactly one vertex local degree four fig 3 show orthogonal drawing graph drawn relativecoordinates scenario described graph regular degree four 13 vertices shown fig 10a together stnumbering insert vertices following stnumbering starting empty drawing final drawing height width equal 9 20 bends notice edge three bends fact one edge three bends ie edge 12 13 whereas edges two bends less scenario described section maintains general shape current drawing update vertexedge insertiondeletion takes place coordinates vertices bends current drawing may shift total amount 6 units along x axes result update operation change affect number bends current drawing even update operation vertex insertion scenario works well build graph scratch presented drawing produced somehow perhaps different system want interactive system update order refresh drawing update coordinates every vertexbend affected must recalculated hence would take linear figure 3 orthogonal drawing regular degree four 13vertex graph relativecoordinates scenario 4 nochange scenario scenario drawing system never changes positions vertices bends current drawing increments drawing adding new elements useful many cases user already spent lot time studying particular drawing heshe want deal something completely different update papakostas tollis 17 defined scenario presented preliminary results work known gives satisfactory answers described scenario section present simple yet effective scheme allowing insertion vertices nochange scenario previous scenario scheme produces orthogonal drawing assumption maximum degree vertex time less equal four description interactive graph drawing scheme assume build graph scratch whole subgraph needs drawn initially draw simulating scenario inserting one vertex time assume graph always connected following section present extension nochange scenario allowing current graph one connected component time let u vertex current drawing let v next vertex inserted four possible ways vertex u connected vertex v edge u v new drawing see fig 4a one ways free direction vertex u vertex u may two free directions right edges e 1 e 2 fig 4a two free directions bottom edges e 3 e 4 fig 4a vertex u free direction right edge current graph using portion us row right u portion us column top u similarly define us free direction bottom vertex us free direction right bottom edge e 2 e 3 called bendfree see fig 4a vertex v inserted connected vertices already placed local degree vertex inserted current drawing defined way scenario studied previous section since graph always connected consider case inserted vertex local degree one two three four except first vertex inserted empty graph new vertex local degree zero placed temporary location inserted future newer vertices increase local degree order prove results maintain following invariants vertices inserted drawing ffl every vertex current drawing degree one either two free directions bottom bendfree one right two free directions right bendfree one bottom grid point vertex placed ffl every vertex current drawing degree two either one free direction bottom one right two free directions right two free directions bottom grid point vertex placed ffl every vertex current drawing degree three free direction either bottom right grid point vertex placed figures 4b 4c show first two vertices inserted empty graph notice vertices v 1 v 2 inserted satisfy invariants set different placements first two vertices possible edge connects always one bend way shown fig 4c straight nobend line used connect least one two vertices satisfy first invariant b c figure 4 possible free directions vertex u current drawing bc inserting first two vertices empty graph let us assume v next vertex inserted current drawing distinguish following cases b figure 5 insertion local degree one vertex v requires one column one row b figure insertion local degree two vertex v requires one column b insertion v requires one column one row 1 v local degree one two cases shown figs 5a 5b one new column one new row required one bend introduced notice bend introduced along edge incident whose end open fig 5a vertex one free direction bottom two right second free direction right responsible introducing extra row bend drawing inserted drawing later v turns full blown degree four vertex take similar approach second downward free direction v fig 5b 2 v local degree two four cases shown two cases figs 6a 6b two symmetric treated similar fashion one new row one new column required two bends introduced notice bends introduced along edges incident v connect v current drawing 3 v local degree three eight cases cases however treated considering two cases shown fig 7 vertices free direction right bottom b two vertices free direction right bottom vertex free direction bottom right rest cases symmetric treated similar fashion one new row one new column required three bends introduced notice bends introduced along edges incident v connect v current drawing 4 v local degree four sixteen cases cases however treated considering three cases shown fig 8 vertices free direction right bottom b three vertices free direction right bottom one vertex free direction bottom right c two vertices free direction right bottom two vertices direction bottom right symmetric cases treated similar fashion two new rows two new columns required six bends introduced notice bends introduced along edges incident v connect v current drawing described easiest way handle deletions delete verticesedges data structures without changing coordinates rest drawing occasionaly b figure 7 insertion local degree three vertex v requires one column b insertion requires one row one columnu c b figure 8 insertion local degree four vertex v requires two columns b insertion requires two columns one row c insertion v requires two columns two rows demand system perform lineartime compaction similar one described 21 refresh screen lemma 41 total number bends introduced interactive graph drawing system nochange scenario time 266nt number vertices time upper bound tight proof vertex v 1 first vertex inserted empty drawing also vertex local degree zero see fig 4b insertion v 1 contributes contribute two bends first one along edge v second one along direction right bendfree see fig 4c v 1 turns degree four vertex let v next vertex inserted drawing v local degree one two three insertion introduces one two three bends respectively depicted figs 5 6 7 v local degree four insertion introduces six bends shown fig 8 let bt denote total number bends time following expression graph drawn time n 4 number vertices local degree four inserted time follows bt 2nt 2 order establish upper bound bt need compute maximum number vertices local degree four inserted time insertion sequence let 4n 4 number edges drawing contributed n 4 vertices local degree four time let 0 number rest edges drawing time holds notice n 4 maximized 0 minimized since graph drawn time connected holds follows maximum value n 4 ntrecall number bends time bt 2nt hence result follows show tightness upper bound build drawing graph 6 vertices nochange scenario following way first insert vertices 1 2 way shown fig 4c next insert vertex 3 adjacent vertex 2 insert vertex 4 adjacent vertices 1 3 current drawing last two steps insert vertices 5 6 local degree four one adjacent vertices 4 final drawing shown fig 9b use dotted boxes denote current drawing intermediate step counting number bends drawing reveals number 2 2 theorem 41 interactive graph drawing system nochange scenario produces orthogonal drawing connected graph following properties time 1 every insertion operation takes constant time 2 every edge three bends 3 total number bends time 266nt number vertices drawing time 4 area drawing time nt number vertices local degree four inserted time 5 upper bounds area bends tight proof part 1 follows easily description gave regarding insertion individual vertices part 2 notice newly inserted vertex v adds bends along incident edges see figs 5 6 7 8 possible incident edge e v might already one bend vertex current drawing connected v e say u inserted local degree one vertex also illustrated fig 9a lemma 41 follows number bends drawing time 266nt 2 lemma discussed tightness upper bound let us assume vertex v 1 first vertex inserted empty drawing see fig 4b vertex v 1 vertex local degree zero inserted drawing insertion vertex v 1 may introduce total two new rows two new columns v 1 turns vertex degree four seen fig 4c v 1 requires one row one column place one additional row column two directions bendfree discussion maximum width height drawing time cannot 2 number vertices local degree one two three respectively inserted time notice proof lemma 41 absolute maximum value n 4 may take circumstances nt area hence result follows finally drawing fig 9b demonstrates tightness upper bound number bends see proof lemma 41 also tightness upper bound area discussed last paragraph notice area drawing 8 theta squared units equal d177 theta 6 2 e 2 b figure 9 3 bends may appear along edge e drawing b drawing nochange scenario demonstrating tightness upper bound area number bends interactive scheme described simple efficient area bend bounds higher best known 1 2 15 16 however consider scheme gives user lot flexibility inserting node time moreover insertion takes place without disturbing current drawing since insertion built around furthermore n 4 number vertices local degree four inserted time total number vertices degree four graph area smaller user chooses insertion strategy keeps n 4 low notice possible reuse rows columns vertices placed although cannot guarantee always happen interactive drawing program able see reuse possible insertion take advantage fig 10 show example technique applied regular graph degree four 13 vertices graph along stnumbering shown fig 10a simulate interactive technique introduced nochange scenario insert vertices following stnumbering starting empty drawing final drawing width 10 height 11 24 bends demonstrated fig 10b note dotted boxes denote current drawing intermediate steps see always remains unaltered also notice vertex 9 inserted reused vertex 2s column b36 figure 10 regular graph degree 4 13 vertices b drawing graph nochange scenario 5 comparisons extensions analyses relativecoordinates nochange scenaria presented previous sections conlcude worstcase performance nochange scenario better relativecoordinates scenario terms area number bends drawings produce precicely interactive graph drawing system nochange scenario produces orthogonal drawing ffl less area ffl smaller total number bends orthogonal drawing graph produced interactive drawing system relativecoordinates scenario note comparison worstcase comparison holds systems draw graph scratch ie first update operation applies empty graph drawn graph connected times another advantage nochange scenario update operation takes constant time since coordinates vertices bends current drawing never altered case relativecoordinates scenario redrawing whole graph update operation requires linear time since coordinates many vertices bends current graph may shifted total amount 6 units along two axes note user wish produce drawing graph update operation operation takes constant time since data structures graph updated constant time however relativecoordinates scenario one important feature gives user ability insert vertex orthogonal drawing degree four time results fact invariants maintained drawing scenario relativecoordinates scenario offers lot flexibility small cost coordinates vertices bends current drawing may shifted small amount result update operation redrawing graph may required important underline though shift coordinates affects vertices bends current drawing relative way hence general shape current drawing still maintained update operation complete rest section extend relativecoordinates nochange scenaria case current graph allowed become disconnected interactive drawing process words inserting one vertices local degree zero ie vertices adjacent vertex time insertion allowed characteristics drawing remain unchanged assume drawing orthogonal maximum degree four start update operations originally empty graph theorem 51 interactive graph drawing system relativecoordinates sce nario produces orthogonal drawing graph following properties time 1 vertex insertion coordinates vertex bend current drawing may shift combined 6 units along x axes 2 3 bends along edge drawing 3 total number bends 4nt 4 area drawing 3nt 2 nt number vertices inserted time proof first two parts theorem come directly theorem 31 regarding total number bends time still holds since insertion vertices local degree zero introduces bends see also proof theorem 31 linear programming employed compute maximum value bt take upper bound number bends drawing time new linear program following maximize following constraints first constraint equation vertices second constraint equation edges graph n vertices inserted note n 0 number vertices local degree zero vertices contribute edges drawing solving linear program reveals expression maximized maximum equal 4n let ht wt denote height width respectively drawing time vertices local degree zero open either new row new column vertices local degree one two three four follow rules described proof theorem 31 regarding number rows columns open holds ht since want maximize ht wt problem formulated linear program expression maximized constraints exactly ones linear program solving new linear program ht wt maximized exactly linear program studied number bends maximum value expression equal 35n means also holds ht theta wt maximized htwt 175nt case area drawing 3nt 2 2 extend nochange scenario case current graph allowed become disconnected interactive drawing process vertex local degree zero inserted either open new column place right bend current drawing thus reusing row open new row place bottom bend current drawing thus reusing column neither two possible open one new row one new column place local degree zero vertex note vertex local degree zero may later contribute one row one column drawing uses free directions bendfree see fig 4a case vertex local degree zero connected four vertices n denotes number vertices local degree inserted time following theorem holds theorem 52 interactive graph drawing system nochange scenario produces orthogonal drawing graph following properties time 1 every insertion operation takes constant time 2 every edge three bends 3 total number bends time 4nt nt number vertices drawing time 4 area drawing time 4nt 2 proof first two parts come directly theorem 41 following proof technique lemma 41 total number bends bt time bt 2n 2n 4 t2n 0 recall vertex local degree zero contribute two bends connected four vertices time see description nochange scenario previous section nt total number vertices inserted time maximum value n 4 take ntsimilar proof lemma 41 replacing 0 0 since graph may disconnected intermediate moment means n 0 nt total number bends 4nt time vertex local degree zero may open two new rows two new columns connected four vertices time vertices local degree one two three four follow rules described section 4 regarding number new rows columns open nochange scenario follows maximum width height drawing time 2n 0 tn 1 tn 2 tn 3 t2n 4 nteach area 4nt 2 2 upper bounds number bends area change extend two scenaria case graph become disconnected drawing process notice relativecoordinates scenario better worstcase behavior nochange scenario respect area drawing requires far number bends concerned tie since scenaria depict upper bound equal 4nt also worth noting vertices local degree zero four play major role worstcase behavior relativecoordinates scenario terms area number bends fact based results two linear programs discussed upper bound expressions area number bends maximized total number vertices inserted split two kinds vertices recall graph connected times vertices local degree two play important part worstcase behavior relativecoordinates scenario see proof theorem 31 6 conclusion future work paper discussed possible scenaria interactive orthogonal graph drawing system used linear programming upper bound technique analyze performance relativecoordinates scenario also analyzed nochange scenario compared two scenaria results focus following aspects produced drawings drawing process ffl area ffl number bends per edge total ffl tightness upper bounds ffl extent drawing changes update operation time complete update operation important property interactive graph drawing system introduce minimum possible change drawing preserve users mental map update operation nochange scenario guarantees current drawing never altered since vertex insertion edge routing takes place around hand relativecoordinates scenario typically requires small change coordinates vertices bends current drawing however general shape drawing maintained update operation worstcase performance bounds nochange scenario terms area bends better corresponding bounds obtained relativecoordinates scenario drawn graph times connected however relativecoordinates scenario less restrictive since maintain invariants produces new drawing 14 three different models proposed capture notion users mental map drawing although work developed independently work 14 addresses different problems turns scenaria follow models ffl relativecoordinates scenario preserves users mental map terms orthogonal ordering model 14 ffl nochange scenario preserves users mental map terms orthogonal ordering proximity models 14 implemented two scenaria ie relativecoordinates nochange conducted preliminary experimental study comparing performance data set containing 8000 graphs maximum degree four experiments mainly focus measuring area total number bends two scenaria require graphs data set preliminary results indicate ffl relativecoordinates scenario always exhibited better performance nochange terms area number bends ffl practical behavior two scenaria much better established theoretical worstcase bounds cases words worst case happen frequently extensive description experimental results along heuristics placement vertices appear forthcoming paper interesting open problem develop theory enables insertion move deletion one vertices simultaneously block vertices current drawing efficiently area interactive graph drawing grow next years many applications demand techniques interactive graph drawing standards straight line polyline etc needed explored since counterproductive user spend significant amount time relearn new drawing main target produce drawing close drawing update possible acknowledgement would like thank brendan madden roberto tamassia helpful discussions r embedding nonplanar graphs rectangular grid better heuristic orthogonal graph drawings dynamic graph drawing algorithms drawing graphs annotated bibliography spirality orthogonal representations optimal drawings seriesparallel graphs 3planar graphs rectilinear planar drawings bends edge computing stnumbering computational complexity upward rectilinear planarity testing drawing planar graphs using lmcordering new lower bound techniques vlsi combinatorial algorithms integrated circuit layout incremental approach aesthetic graph layout layout adjustment mental map algorithms areaefficient orthogonal drawings improved algorithms bounds orthogonal draw ings issues interactive orthogonal graph drawing drawing graphs rectangular grids minimal nodecost planar embeddings embedding graph grid minimum number bends planar grid embeddings linear time lower bounds planar orthogonal drawings graphs universality considerations vlsi circuits tr ctr janet six ioannis g tollis effective graph visualization via node grouping proceedings ieee symposium information visualization 2001 infovis01 p51 october 2223 2001