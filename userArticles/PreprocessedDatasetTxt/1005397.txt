representing zoo world traffic world language causal calculator work described report motivated desire test expressive possibilities action language c causal calculator ccalc system answers queries action domains described fragment language zoo world traffic world proposed erik sandewall logic modelling workshopan environment communicating axiomatizations action domains nontrivial sizethe zoo world consists several cages exterior gates animals several species including humans actions domain include moving within cages opening closing gates mounting riding animals traffic world includes vehicles moving continuously road crossings subject number restrictions speed limits keeping fixed safety distance away vehicles road show represent two domains input language ccalc use ccalc test representations b introduction work described report motivated desire test expressive possibilities action language c introduced companion paper specically interested expres preprint submitted elsevier science siveness denite fragment c implemented causal calculator ccalc language c recent addition family formal languages describing actions started strips fikes nilsson 1971 extension action language c dened giunchiglia lifschitz 1998 causal calculator uses propositional sat isability solvers answer queries action domains described c original version written norman mccain part dissertation maintained texas action group austin 1 downloaded home page httpwwwcsutexaseduuserstagccalc ccalc applied several challenge problems theory commonsense knowledge lifschitz 2000 formalization normgoverned computational systems two test domains discussed paper zoo world trac world proposed erik sandewall logic modelling workshop environment communicating axiomatizations action domains nontrivial size zoo world consists several cages ex terior gates animals several species including humans actions domain include moving within cages opening closing gates mounting riding animals trac world includes vehicles moving continuously road crossings subject number restrictions speed limits keeping xed safety distance away vehicles road details found next section contains extensive quotes lmw descriptions domains accordance goal attempted translate descriptions input language ccalc closely could including elements look somewhat arbitrary one element lmw description zoo world occupancy restrictionthere one large animal position one hand lmw spec ies restriction holds even dynamically concurrent move one animal moves position time another animal moves possible least one animals small hand specication tells us attempt mount animal fails animal moves time case result action human moves position animal thus failed mount exception occupancy restriction view fact thehttpwwwcsutexaseduuserstag httpwwwidaliuseextetailmw occupancy restriction formalized defeasible dynamic law interesting note expressing laws c calls use nonex ogenous action constantsa new feature language available ancestor c brief introduction input language ccalc section 3 present discuss formalization zoo world section 4 formalization trac world section 5 two main parts paper logically depend read order 2 logic modelling workshop descriptions 21 description zoo world following lmw description zoo world want formalize zoo scenario world containing main ingredients classical zoo cages animals cages gates two cages well gates cage exterior zoo world animals several species including humans actions world may include movement within cages opening closing gates feeding animals one animal killing eating another riding animals etc area consists large number positions exam ple one may let position square entire area like checkerboard however exact shape positions supposed characterized number neighbors position left open except position must least one neighbor neighbor relation symmetric course transitive closure neighbor relation reaches positions one designated location called outside locations called distinction large number positions small number locations suggests particular locations individually named unique names assumption every location thus named hand positions named number positions left unspecied every scenario position included exactly one location informally cage well outside consists set positions viewed example tiles oor two locations neighbors one position neighbors scenario also contains small number sense gates informally thought gates opened closed allow passage cage outside two cages formally gate associated exactly two positions said sides positions must belong dierent locations designated animals need named set animals scenario may large may possible know name animals may born may die animal belongs exactly one number species species named explicitly known membership animal species change time species human always dened least one humanspecies animal scenario animal also boolean properties large adult species large adult members large species large animals animals small nonlarge animal position point time two large animals occupy position except one rides see move one unit time animal move one positions adjacent present one stay position moves nonadjacent positions never possible movement possible positions within location example within cage two positions side gate provided gate open several animals move time movement actions must also violate occupancy restriction one large animal position restriction also holds within duration moves sense concurrent move animal moves position time animal b moves possible least one b small animal means particular two large animals pass gate time neither direction opposite directions following actions performed animals move position performed animal restrictions described plus restriction human riding animal perform movetoposition action compare open gate performed human located position side gate eect gate open next time close gate action performed close gate performed human located position side gate eect gate closed next time open gate action performed mount animal performed human mounting large animal human position adjacent position animal action fails animal moves time case result action human moves position animal successful action results state human rides animal condition holds human performs geto action animal performs throwo action human rides animal human perform move action position animals position animal moves geto animal position performed human riding animal position adjacent animals present position provided animal move time fails animal moves case rider stays animal throwo performed animal ridden human results human longer riding animal ending position adjacent animals present position action nondeterministic since rider may end position resultant position occupied another large animal human result riding animal instead 22 description trac world following lmw description trac world want formalize traffic scenario world intended capture simple hybrid phenom ena vehicles moving continuously well dened velocities along roads well dened lengths respecting speed limits restrictions vehicles behaviors landscape traffic scenario world uses following two types nodes thought road crossings without particular structure lanes etc segments thought road segments connects two nodes set nodes set segments considered fully known nodes segments assigned individual names segment exactly one start node exactly one end node also length real number rational number preferred structure structure traffic world uses one sort cars intuitively thought driving along arcs traffic landscape structure car position point time position indicated pair consisting segment car located distance travelled along segment distance travelled number 0 segments length car top speed road segment speed limit actual velocity car point time maximum velocity allowed following three conditions speed limit road segment driving top speed surrounding trac restrictions cars drive piecewise constant velocity change velocity discontin uously rened variant traffic2 require cars change velocity continuously assumes piecewise constant accelerationdecele ration car arrives node intersection may continue segment connects node except one arriving cars drive directions along segment move start node end node vice versa cars overtake two cars go direction road segment one catches stay behind least arrive next node possibly second car choose another direction onwards cars going opposite directions segment meet without diculty however surrounding trac restriction says car never allowed closer xed safety distance varsigma car front may never get situation could happen means rst gets distance varsigma car moving front segment direction must reduce speed match speed car front also getting close node intersection car must reduce speed way takes consideration cars approaching leaving node 3 language causal calculator understand rest paper technical level reader need knowledge syntax semantics c information found instance sections 123 3133 4143 giunchiglia et al ccalc input le consists declarations causal laws sense c often schemas metavariables whose instances causal laws queries instance planning problems comments brief informal introduction language ccalc given giunchiglia et al 2003 section 6 features ccalc mentioned introduction used formalizations zoo world trac world 1 ascii representations symbols used language ccalc summarized following chart ascii representation false true encoding multiple conjunctions disjunctions ascii characters illustrated example constraint written ccalc constraint p1 neighborpp1 2 symbol names two sorts expresses second subsort rst every object belongs second sort belongs also rst instance declarations location cage objects cagea cage tell us cagea cage location 3 sort name composed adding none name previously declared sort means set objects sort consists objects previously declared sort auxiliary symbol none nonesorts used declaring partial valued uent constants explicitly declared sorts instance assume objects sort node b objects b node objects sort nodenone b none sort useful want talk node car currently constants may none car middle segment 4 example note uent constant node declared sdfluent stands statically determined uent constant giunchiglia et al 2003 sections 42 55 values determined static causal laws assumed exogenous initial state 5 rigid constants giunchiglia et al 2003 section 46 declared following example constants spanimal species function constant sp represents operation turns animal species value constant aected event 6 arguments constants supposed objects constant another constant argument whole expression understood abbreviation instance schema nonexecutable moveanmlposanml animal cannot move current position meaning nonexecutable moveanmlp posanmlp p position variable 7 macros declared following example parameters macros upon reading input le ccalc replaces every occurrence pattern lefthand side corresponding instance righthand side 8 process grounding parts schema turn 0place connectives instance grounding turns gg1 schema constraint g g1 instantiated object otherwise 9 comment starts 4 zoo world present formalization zoo world along detailed comments section 41 discuss closely corresponds informal description section 42 show used ccalc test section 43 41 formalization formalization zoo world shown also available online 3 distinguish general assumptions zoo world quoted section 21 specic details topography zoo including number cages gates names species human forth formalize general assumptions leave details unspecied description specics added formalization get input le accepted ccalc specic topography used computational experiments described section 43 annotation lmw found many comments refers logic modelling workshop description zoo world quoted section 21 zoo landscape position location cage gate variables constants position included exactly one location lmw locposition location neighborpositionposition booleanhttpwwwcsutexaseduuserstagccalczoo openedgate inertialfluent default neighborpp1 position must least one neighbor lmw constraint p1 neighborpp1 neighbor relation irreflexive constraint neighborpp neighbor relation symmetric lmw constraint neighborpp1 neighborp1p objects one designated location called outside lmw outside location locations cages lmw constraint c lc loutside clause end schematic expression instructs ccalc limit grounding values variables satisfy given test contributes ecient grounding two positions sides gate constants caused sidespp1g side1gp side2gp1 caused sidespp1g side1gp1 side2gp default sidespp1g gate associated exactly two positions said sides positions must belong different locations lmw constraint locside1glocside2g 6 section 3 argument loc supposed object constant side1g side2g understood value constant gates two sides constraint two positions neighbors sides gate constraint sidespp1g neighborpp1 two positions different locations neighbors two sides gate constraint locplocp1 neighborpp1 g sidespp1g animal human species variables species objects one species human lmw humanspecies species constants animal belongs exactly one number species lmw membership animal species change spanimal species species large lmw largespeciesspecies boolean animal position point time lmw posanimal inertialfluentposition boolean properties animals lmw adultanimal boolean mountedhumananimal inertialfluent default largespeciessp default adultanml humans species called humanspecies caused sphhumanspecies constraint spanmlhumanspecies h anmlh adult members large species large animals lmw large1 adult1 largespeciessp1 least one humanspecies animal scenario constraint h true two large animals occupy position one rides lmw constraint posanmlposanml1 largeanml largeanml1 xed total order changing position constants accessiblepositionposition sdfluent caused accessiblepp1 default accessiblepp1 one unit time animal move one posi tions accessible present one stay posi tion moves nonaccessible positions never possible lmw constraint posanmlp1 posanmlp pp1 accessiblepp1 proposition constraint f g dened giunchiglia et al 2003 appendix abbreviation caused f g concurrent move animal moves position time animal b moves possible least one b small animal lmw exceptions failed mount actions certain occurrences throwoff thrown human ends another large animal see first two propositions actions constraint posanmlp posanml1p posanmlp posanml1p appending unless clause makes causal law defeasible certain exceptional circumstances assertion retracted see giunchiglia et al 2003 section 43 two large animals cannot pass gate time neither direction opposite directions lmw constraint posanmlp1 posanml1p1 posanmlp posanml1p sidespp1g constraint posanmlp posanml1p1 posanmlp1 posanml1p sidespp1g gate closing animal cannot pass constraint openedg posanmlp1 posanmlp sidespp1g openedg variables aa1 exogenousaction constants moveanimalposition openhumangate closehumangate mounthumananimal getoffhumananimalposition action 1 executed animal 2 doneby12 p 1move2p g 1open2g 1close2g anml 1mount2anml h 1throwoff2h dierent used atom comparison operator failed mount subject usual rather strict movement restriction large animals mounthanml causes abh position large human thrown previously occupied another large animal usual movement restric tion doesnt apply causes abh two propositions describe exceptional circumstances movement restriction large animals every animal execute one action time nonexecutable a1 donebyaanml1 donebya1anml1 aa1 direct effect move action moveanmlp causes posanmlp animal cant move position nonexecutable moveanmlposanml human riding animal cannot perform move action lmw nonexecutable movehp mountedhanml effect opening gate causes openedg human cannot open gate located position side gate lmw nonexecutable openhg poshside1g poshside2g human cannot open gate mounted animal nonexecutable openhg mountedhanml human cannot open gate already opened nonexecutable openhg openedg effect closing gate closehg causes openedg human cannot close gate located posi tion side gate lmw nonexecutable closehg poshside1g poshside2g human cannot close gate mounted animal nonexecutable closehg mountedhanml human cannot close gate already closed nonexecutable closehg openedg human rides animal position position animal moves lmw caused poshp mountedhanml posanmlp human tries mount animal doesnt change posi tion mounting successful caused mountedhanml posanmlp posanmlp mounthanml action fails animal changes position case result action human ends position animal lmw caused poshp posanmlp posanmlp mounthanml human already mounted animal cannot attempt mount another nonexecutable mounthanml mountedhanml1 human mounted large animal constraint mountedhanml largeanml human cannot attempt mount small animal lmw nonexecutable mounthanml largeanml large human cannot mounted another human constraint mountedhh1 largeh large human cannot attempt mount another human nonexecutable mounthh1 largeh animal mounted one human time constraint mountedhanml mountedh1anml hh1 human cannot attempt mount animal already mounted human nonexecutable mounthanml mountedh1anml human cannot mounted human mounted constraint human cannot attempt mount animal human already mounted another human nonexecutable mounthanml mountedh1h human cannot attempt mount human mounted nonexecutable mounthh1 mountedh1anml getoff action successful provided animal move time fails animal moves case rider stays animal lmw caused poshp posanmlp1 posanmlp1 getoffhanmlp caused mountedhanml posanmlp1 posanmlp1 getoffhanmlp action cannot performed human riding animal nonexecutable getoffhanmlp mountedhanml human cannot attempt getoff position accessible current position nonexecutable getoffhanmlp accessibleposanmlp throwoff action results human longer riding animal ending position adjacent animals present position nondeterministic since rider may end position adjacent animals present posi tion lmw may cause poshp causes mountedhanml resultant position occupied another large animal human result riding animal instead caused mountedhanml1 poshposanml1 largeanml1 throwoffanmlh hanml1 action cannot performed animal ridden human lmw nonexecutable throwoffanmlh mountedhanml actions getoff throwoff cannot executed concurrently nonexecutable getoffhanmlp throwoffanmlh 42 discussion requirements quoted section 21 refer dierence large numbers number positions small numbers number locations objects individually named known objects cannot seems impossible address distinctions language ccalc quantiersthey simulated multiple conjunctions disjunctions language like objects individually named specication quoted section 21 mentions transitive closure neighbor relation required reach positions causal rules mimicking usual logic programming denition transitive closure provide correct characterization concept giunchiglia et al 2003 section 62 include formalization requirement refers transitive closure 4 specication mentions also several kinds events described detailfeeding animals killing eating animals born dying also mentions passing possibility vehicles moving zoo include representation specication denes two locations neighbors one position neighbors extension neighbor relation locations mentioned anywhere else include formaliza tion would easy represent extension either statically determined uent constant macro instance write neighbor112 neighborpp1 exceptions tried follow specication closely nonetheless imposed number additional commonsense stipulations following neighbor relation irre exive positions dierent locations neighbors sides gate two gates sides transitive closure characterized causal theory denite sense giunchiglia et al 2003 section 26 denite causal theory using auxiliary constants animal cant move position already human cant open close gate already opened closed also added number action preconditions might conceivably relaxed among following animal execute one action time mounted human cant open close gate human cannot attempt mount human turn already mounted animal fact added many preconditions mount action zoo circus action preconditions accompanied corresponding state constraints needed prohibiting instance states several humans mounted single animal also allow small humans children mount humans restriction may seem reasonable enough particular wanted rule possibility two humans could attempt mount one another simultaneously result would wind switching positions illustrates fairly general kind diculty another example allow animal throw rider time rider getting intuitively might case animal intends throw rider precisely moment rider intends dismount according formalization one two actions fact occureither animal manages throw rider rider manages dismount even simpler example kind intuitively two animals may intend move given position given time formalization ects idea despite intentions one succeed cases dont attempt describe complicated scenarios agents may instance partially succeed executing actions intend execute zoo specication explicitly leaves axiomatizer decide fol lowing happens rider thrown position another large animal either entering leaving chosen thrown rider riding large animal entering position otherwise thrown rider ends unmounted position vacated imal latter possibility exception one general restrictions movement discuss next several general laws movement specication zoo world one large animal position unless one mounted single time step animals movements cannot take positions neighboring current position animals cannot pass closed gates two large animals cannot pass gate time large animal cannot enter position vacated large animal stipulate addition animal pass closing gate may interesting note restrictions expressed formalization without mention actions instead write dynamic laws mention uent constants many action preconditions imply left implicit exceptions general law large animal cannot enter position vacated large animal rst exception clearly required specicationa failed mount results human occupying position vacated animal unsuccessfully mounted exception one mentioned previously involving rider thrown position vacated large animal accommodate exceptions general law make related proposition defeasible appending unless clause abnormality constant used clause false default made true whenever exceptional circumstances arise 5 cir cumstances large animal enter position vacated another large animal despite movement restriction large animals 43 testing test formalization gave ccalc queries checked answers matched expectations queries related action domains ccalc representations discussed giunchiglia et al 2003 sections 33 6 besides representation zoo world shown ccalc input included description specic landscape zoo used testing small includes 2 locationsa cage outsidethat separated gate consist 4 positions figure 1 positions within cage others neighbors well outside positions input also included information specic animals mentioned query 1 gate closed homer adult human position 6 goal mount jumbo adult elephant position 3 going move around many steps required achieve goal question represented following ccalc query test shows cases exception happens gateao cagea outside fig 1 zoo landscape query maxstep 34 0 openedgateao poshomer6 tmaxstep posjumbo3 last line variable initial segment integersnumbers 0 10 ccalc determined length shortest solution 4 found solution homer walks gate opens walks cage mounts jumbo 2 gate closed homer outside two steps inside say initial position answer question asked ccalc nd models satisfying conditions 0 openedgateao locposhomeroutside 2 locposhomercagea ccalc determined homers possible initial position 7 homer opened gate moved position 4 3 initially homer outside snoopy dog inside cage gate closed possible switched locations one step two steps elephant jumbo substituted snoopy answers essential small animals unlike elephants affected occupancy restriction section 21 homer snoopy pass gate simultaneously response query query maxstep 12 0 openedgateao locposhomeroutside locpossnoopycagea locposhomercagea locpossnoopyoutside ccalc reported length shortest solution 2 case jumbo ccalc surprised us discovering length shortest solution 4 5 thought homer opens gate mounts jumbo side dismounts either thrown getting following jumbo moves cage told ccalc homer never mounts jumbo ccalc agreed length shortest possible sequence actions 5 4 large animal move position time another large animal moves answer yes although occupancy restriction applies within duration moves section 21 scenario possible process failed attempt rst animal mount second also possibility rst animal thrown position vacated second investigate asked ccalc whether following possible p 0 poshomerp 0 posjumbop 0 mountedhomersilver silver horse ccalc found solution silver throws replaced last line query 0 anml throwoffanmlhomer ccalc found solution homer tried mount jumbo hand horse cannot possibly move position time elephant moves accordingly ccalc determined model satisfying condition p 0 possilverp 0 posjumbop 1 posjumbop 5 position 1 jumbo throws homer possible positions jumbo homer question illustrates nondeterministic character throwo action section 21 given assumption represented condition 0 posjumbo1 throwoffjumbohomer according ccalc models satisfying condition homer thrown positions 2 3 4 jumbo always stays position 1 5 trac world section present formalization trac world start discussing possibility describing continuous motion using integer arithmetic section 51 use action languages representing change absence actions section 52 formalization trac world presented section 53 examples use ccalc testing formalization shown section 54 finally section 55 compares approach trac world related work 51 continuous motion integer arithmetic special circumstances questions continuous motion discussed using integers without ever mentioning reals even rational numbers special circumstances assumed formalization trac world specically assume lengths road segments safety distance varsigma expressed integers top speeds cars speed limits road segments expressed integers scenarios consideration times cars leave reach endpoints road segments times distance two cars traveling segment direction becomes varsigma expressed integers constraints similar adopted description spacecraft integer lee lifschitz far away stars planets integer aected external forces proud name suggests mass spacecraft integer every integer coordinates three components integers velocity vector time integers forces applied spacecraft jet engines interval 1 integer constant vectors whose components integers well crew integer attempts violate conditions jets fail operate spacecraft integer actually close rened version trac world mentioned section 22 sense velocity changes continuously acceleration piecewise constant query answering basis formalization trac world essential time instants mentioned queries expressed integers assumptions like make easier describe motion action languages whose semantics dened framework transition systems use languages describing motion without simplifying assumptions topic future research 52 change absence actions formalization trac world action selecting new road segment car reaches intersection denoted choosesegmentc sg driver car c chooses turn road segment sg action selecting new road segment car reaches intersection actually action performed trac world intersections every car assumed moving maximum speed allowed road conditions drivers permitted perform actions aecting speeds cars speeds cars may change many times however time interval include execution actions consider instance long road segment high speed limit two cars moving along direction top speed car front lower top speed second car latter slow point match speed slower car several cars road moving direction surrounding trac restriction may force last reduce speed several times although actions executed example scenario shown section 54 similar phenomenon observed several cars simultaneously almost simultaneously approached node dierent directions intention turn road cars leave intersection one one intervals guarantee safety distance formalization causal laws determining order cars going depart nondeterministic sequence events may take long time involve execution actions change absence actions essential trac world described c using dynamic laws contain action constants instance dynamic law caused ds ds says car c going remain road segment next time interval ii distance travelled c along segment far ds iii speed c time interval going equal sp end time interval distance travelled c along current road segment become ds 53 formalization formalization trac world shown available online 6 distinguish general assumptions trac world quoted section 22 specic details number positions road segments numerical values speed limits number cars top speeds formalize general assumptions leave details unspecied formalization zoo world description specic scenario added formalization get input le accepted ccalc zoo world annotation lmw found many comments refers logic modelling workshop description trac world quoted section 22 traffic httpwwwcsutexaseduuserstagccalctraffic segment car variables nd node objects 0maxint integer since range integers need depends scenario dene appropriate value macro maxint scenario description constants car pointing toward end node segment currently positiveorientation true positiveorientationcar inertialfluent car position point time position indicated pair consisting segment car located distance travelled along segment constants segment exactly one start node exactly one end node lmw startnodesegment node segment length real number rational preferred lmw assume integer road segment speed limit lmw car top speed lmw actual speed car next time interval new segment car continue nextsegmentcar inertialfluentsegmentnone car leave segment currently travelling node car exogenous willleavec position car determines whether node node caused nodecnd caused nodecnd caused nodecnd caused nodecnd default nodecnone car positive orientation leaving start node segment entering caused positiveorientationc car negative orientation leaving end node segment entering caused positiveorientationc proceed next segment car leave caused segmentcsg willleavec nextsegmentcsg distance covered car remained segment caused distancecdssp dsspmaxint clause end schematic expression instructs ccalc limit grounding values variables satisfy given test distance covered car right changed new segment caused distancecsp willleavec speedcsp time car reaches node assumed integer constraint positioncsgds dslengthsg cars segment orientation closer varsigma lmw constraint positioncsgds positionc1sgds1 positiveorientationcpositiveorientationc1 xed total order abs stands absolute value constants car middle segment modifiedorienta tion value positiveorientation car selected new segment modifiedorientation value positiveorientation would car beginning new segment modifiedorientationcar sdfluent caused modifiedorientationc nextsegmentcnone positiveorientationc caused modifiedorientationc nextsegmentcsg nodecstartnodesg default modifiedorientationc car waiting node car close next segment travel time car front reach distance varsigma node assumed integer constraint positionc1sgds1 ds1varsigma positionc1sgds dsvarsigma nextsegmentcsg proposition constraint f g dened giunchiglia et al 2003 appendix abbreviation caused f g constants relation modifieddistance distance similar caused modifieddistancecds nextsegmentcnone distancecds caused modifieddistancec0 nextsegmentcnone constants relation modifiedsegment segment similar caused modifiedsegmentcsg nextsegmentcnone segmentcsg caused modifiedsegmentcsg nextsegmentcsg constants maximum speed allowed top speed car speed limit segment car travelling caused topspeedcsp nextsegmentcnone 6 section 3 argument speedlimit supposed object constant segmentc understood equal value constant caused topspeedcsp nextsegmentcsg constants maximum distance car cover segment travelling caused maxdistancecdssp modifieddistancecds maxspeedcsp dsspmaxint constants first car ahead second aheadcarcar sdfluent caused aheadc1c positiveorientationc1modifiedorientationc default aheadc1c constraint aheadcc1 aheadc1c constants first car ahead second car farther varsigma caused ds1dsvarsigma default varsigmaaheadc1c actual velocity car point time max imum velocity allowed following three conditions speed limit road segment driving top speed surrounding traffic restrictions lmw car middle segment car varsigma ahead car leave travel maximum speed caused speedcsp nextsegmentcnone maxspeedcsp car middle segment car leave speed smaller maximum speed speed car front caused speedcminspsp1 nextsegmentcnone maxspeedcsp car end segment leave stay caused speedc0 nextsegmentcnone willleavec car end segment enter new seg ment car within varsigma travel maximum speed caused speedcsp car end segment enter new seg ment car within varsigma speed smaller maximum speed speed car caused speedcminspsp1 constants choose new segment car proceed choosesegmentcarsegment exogenousaction direct effect choosing new segment choosesegmentcsg causes nextsegmentcsg cannot choose segment already chosen nonexecutable choosesegmentcsg nextsegmentcsg car arrives node intersection may continue segment connects node lmw constraint nodecstartnodesg nodecendnodesg choosesegmentcsg except one arriving lmw constraint nextsegmentcsg segmentcsg car cannot arrive node without choosing new segment proceed constraint nd nodecnd sg choosesegmentcsg nodecnone car cant next segment unless travelled end current segment caused nextsegmentcnone nodecnone caused nextsegmentcnone caused nextsegmentcnone cars selected new segment leave constraint willleavec nextsegmentcnone one car leave node enter new segment time constraint nextsegmentcnextsegmentc1 cc1 car node selected new segment cars within varsigma node car leave node ie unnecessary waiting allowed constraint nextsegmentcsg c1 54 examples tested certain aspects formalization giving ccalc queries several scenarios checking answers matched expectations besides representation trac world shown input scenario included description specic landscape three examples 1 consider three roads lengths speed limits shown figure 2 top speed car1 2 initially located node note segment seg bc1 long high speed limit whereas segment seg bc2 c segbc1 segbc2 fig 2 initial state landscape example 1 short speed limit low way must car go order reach c soon possible planning problem described follows query maxstep 110 0 positioncar1segab0 maxstep nodecar1c ccalc found following shortest plan 0 distancecar10 segmentcar1segab nextsegmentcar1none speedcar12 nodecar1a 1 distancecar12 segmentcar1segab nextsegmentcar1none speedcar12 nodecar1none actions choosesegmentcar1segbc1 2 willleavecar1 distancecar14 segmentcar1segab nextsegmentcar1segbc1 speedcar12 nodecar1b 3 distancecar12 segmentcar1segbc1 nextsegmentcar1none speedcar12 nodecar1none actions choosesegmentcar1segbc2 4 willleavecar1 distancecar14 segmentcar1segbc1 nextsegmentcar1segbc2 speedcar11 nodecar1c order node c time 4 car needs take segment higher speed limit another variant problem asked ccalc nd plan car1 would node c time 5 case plan returned showed car1 choosing take seg bc2 also note plan car arrived node c chose new segment proposition prevents car arriving node without concurrently choosing new segment 2 top speeds three cars initial positions shown top diagram figure 3 cars car1 car2 car3 top speeds 3 2 1 respectively assuming speed limit 3 safety distance 1 cars move next 3 time intervals car1 car2 car3 car1 car2 car3 car1 car2 car3 car1 car3 car2 fig 3 example 2 conditions represented following query query maxstep 3 0 positioncar1segab0 positiveorientationcar1 positioncar2segab2 positiveorientationcar2 positioncar3segab5 positiveorientationcar3 ccalc found scenario satisfying conditions figure 3 0 distancecar10 distancecar22 distancecar35 speedcar13 speedcar22 speedcar31 1 distancecar13 distancecar24 distancecar36 speedcar12 speedcar22 speedcar31 2 distancecar15 distancecar26 distancecar37 3 distancecar16 distancecar27 distancecar38 3 landscape initial positions two cars shown top figure 4 top speeds cars speed limits segments 1 safety distance 2 possible scenarios cars segment seg cd time 5 question represented following query query maxstep 5 0 positioncar1segac1 positioncar2segbc1 c positiveorientationc ccalc determined two possibilities rst ure 0 distancecar11 distancecar21 segmentcar1segac segmentcar2segbc nextsegmentcar1none nextsegmentcar2none speedcar11 speedcar21 nodecar1none nodecar2none 1 distancecar12 distancecar22 segmentcar1segac segmentcar2segbc nextsegmentcar1none nextsegmentcar2none speedcar11 speedcar21 nodecar1none nodecar2none actions choosesegmentcar1segcd choosesegmentcar2segcd 2 willleavecar1 distancecar13 distancecar23 segmentcar1segac segmentcar2segbc nextsegmentcar1segcd nextsegmentcar2segcd c c c c c c car1 car2 fig 4 example 3 scenario 1 3 distancecar11 distancecar23 segmentcar1segcd segmentcar2segbc nextsegmentcar1none nextsegmentcar2segcd speedcar11 speedcar20 nodecar1none nodecar2c 4 willleavecar2 distancecar12 distancecar23 segmentcar1segcd segmentcar2segbc nextsegmentcar1none nextsegmentcar2segcd 5 distancecar13 distancecar21 segmentcar1segcd segmentcar2segcd nextsegmentcar1none nextsegmentcar2none speedcar11 speedcar21 nodecar1none nodecar2none second scenario states times 0 1 actions performed times 1 2 times 2 5 everything except car1 replaced car2 everywhere vice versa fact actions lead dierent states illustrates nondeterminism transition system formalization corresponds nondeterminism arises one car waiting enter new segment situations car leave node chosen nondeterministically example may multiple scenarios dier order cars leaving node 55 related work henschel thielscher 2000 showed formalize trac world uent calculus thielscher 1998 assume speeds lengths expressed integers section 51 representation diers following ways instead cars obey rules cars divided two groups deliberative cars nondeliberative cars drivers deliberative cars set speeds using action change speed car instead go maximum speed possible allowed wait nodes nondeliberative cars like cars paper described logic modelling workshop specication section 22 waiting area associated nodesegment pair area cars going enter segment wait line cars within varsigma node new segment becomes free rst car waiting area allowed leave time car exactly one three states moving segment node waiting area cars node waiting area considered segments car arrives node cars following allowed arrive node even car remains node segments leading assigned priorities several drivers simultaneously decide turn segment cars placed waiting area order determined priorities segments arrived car considered road segment times formalization number cars approach node limited number roads leading node view adopted henschel thielscher 2000 hand makes car node exempt surrounding trac restriction number cars gather node waiting area unlimited perhaps model streets city henschel thielscher model roads towns would dicult modify formalization include deliberative cars waiting areas see erdogan 2000 section 53 related discussion 6 conclusion paper described two interesting quite dierent mediumsized domains zoo world trac world represented input language causal calculator zoo world contains many dierent actions agents animals humans interactions agents involve much continuous action trac world contrast one action involves continuous change states many agents kind cars case also involves change absence actions two interesting aspects action domains nondeterminism indirect effects actions parts zoo trac handled conveniently representations input language ccalc throwing mounted human order cars leave segments examples nondeterminism zoo trac respectively rider position animal mounts changing speeds cars choosing new segment examples indirect eects two domains fact indirect eects quite easy handle thanks ability write static laws represent values certain uents aect values uents without reference actions time formalization zoo world shows exceptions generally valid laws represented using defeasible dynamic laws laws rendered ineective certain conditions formalization trac world continuous motion described using integers certain simplifying assumptions change without actions easily described using dynamic laws involve actions despite convenience parts specications could represented two aspects domains input language ccalc completely suitable specication zoo world mentions distinction small numbers objects named large numbers object cannot named due absence real quantiers ccalc large sets objects cannot represented closest approximation use multiple disjunctions conjunctions another shortcoming ccalc deal integers therefore certain assumptions made nature continuous motion trac world restricting representation nal note work motivated desire test expressive possibilities c formal language precisely dened se mantics working practical system ccalc great advantage trying formalize complicated domain quite easy awed causal laws automated system compare intuitions actual eects causal laws helpful often corrected ccalc sometimes surprised answered queries results expected acknowledgements logic program related zoo world written several members texas action group september 1999 7 discussing program michael gelfond helped us work paper many ways varol akman partially supported ub itaknsf grant 101e024 joohyung lee vladimir lifschitz partially supported national science foundation grant iis9732744 texas higher education coordinating board grant 00365803222001 hudson turner partially supported national science foundation career grant 0091773 r specifying electronic societies causal calculator reinforcing claim commonsense reasoning strips new approach application theorem proving problem solving action language based causal explanation preliminary report nonmonotonic causal theories lmw trac world uent calculus describing additive uents action language c getting airport oldest planning problem ai missionaries cannibals causal calculator causality commonsense reasoning actions adl statetransition model action introduction uent calculus tr action language based causal explanation issues agentoriented software engineering getting airport causality commonsense reasoning actions ctr joohyung lee fangzhen lin loop formulas circumscription artificial intelligence v170 n2 p160185 february 2006 enrico giunchiglia joohyung lee vladimir lifschitz norman mccain hudson turner nonmonotonic causal theories artificial intelligence v153 n12 p49104 march 2004