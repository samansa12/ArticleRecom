fundamental laws assumptions software maintenance researchers must pay far attention discovering validating principles underlie software maintenance evolution one major conclusions reached international workshop empirical studies software maintenance workshop held november 1996 monterey california brought together international group researchers discuss successes challenges open issues software maintenance evolutionthis article documents discussion subgroup fundamental laws assumptions software maintenance participants group included researchers software engineering behavioral sciences information systems statistics main conclusion insufficient effort paid synthesizing research conjectures validated theories problem slowed progress software maintenance help support vision identified following supporting conclusions 1 need develop genuine scientific approachmore using empirical methods 2 disciplines help 3 need explore wider range approaches empirical studies 4 need study evolution maintenance b introduction software systems evolve 1 evolve undergo numerous successive changes fix errors improve performance attributes adapt new environments longer system stays service larger maintenance costs therefore surprising maintenance costs often dominate initial development costs 2 clearly improved tools techniques processes save great deal time money throughout software industry realize savings researchers studying maintenance many perspectives making individual modifications make changes developers understand existing system evaluate effect proposed changes implement validate address issues researchers study topics design recovery program comprehension impact analysis regression testing coping evolution systems undergo many changes one researchers focus nature change limit impact research area includes structured programming objectoriented programming languages software architectures configuration management managing maintenance process maintenance costly somewhat unpredictable thus management tools controlling maintenance great demand many researchers developed metrics models predict components likely need changing much cost examples maintenance research many others clearly software maintenance significant problem continues foster considerable activity however software engineering areas concern research efforts lack hard evidence critical evaluation without cant develop deep understanding tools processes work work consequently many people believe rigorous empirical methods must one cornerstones research field belief brought large group researchers international workshop empirical studies software maintenance workshop help november 8 1996 monterey california involved researchers software engineering behavioral sciences information systems management statistics goal meeting discuss strengths weaknesses open issues empirical methods determine could profitably applied improve software maintenance research workshop attendees divided four groups 1 study assessment new technologies 2 methodologies performing empirical studies 3 studies maintenance process fundamental laws assumptions 4 maintenance process improvement practice article summarizes findings subgroup 3 studies maintenance process fundamental laws assumptions subgroup distinguished others studies specific particular tools methods instead tries identify general principles groups participants expertise empirical methods approach studies different ways backgrounds diverse software engineering behavioral science business statistics others 2 summary discussion subgroup 3 two working sessions first session participant presented research took questions participants workshop participant received following list questions work 1 studys goal questions 2 empirical methods use eg controlled experiment case study survey 3 describe studys design 4 threats validity consider construct internal external 5 well change future 6 much cost perform study 7 new questions results raise 8 researchers replicate study 21 synopsis presentations section summarizes presentation course paragraphs given presentation cannot capture careful thought goes designing conducting empirical research please see complete proceedings mistakes misrepresentations unintentional sole responsibility session chair workshop participants maintenance reusebased domainspecific software product lines3 presented william thomas reuse saves money time therefore greater levels reuse promise even greater savings although seems correct authors urge us look closely common way get high reuse levels split systems two parts one specific domain application domainspecific part provides infrastructure interconnection support common functions system architecture everything else applicationspecific part authors strongly agree approach reduces coding effort warn us may also redefine maintenance traditionally applications developed maintained separately however applications share code may need maintained unit course developers still choose maintain applications individually may lose benefit domainspecific assets might also choose maintain related applications unit may constrain individual applications since best way manage situation unclear authors conduct empirical studies using historical data explore issues measuring cost evolving applications domains coupling applications domain patterns change effect domain maturity maintenance strategies work reminds us new technology challenge even invalidate basic assumptions using didactic model measure software comprehension4 presented elisabeth dusink one first steps changing system understanding documentation supposed help understanding collects system knowledge presents structured way authors article claim developers learn system reading documentation furthermore suspect qualities learning process affect quality maintenance based model learning bloom5 argued learning progresses gaining knowledge understanding applying analyzing finally synthesizing new knowledge authors discussed controlled experiment link levels learning maintenance success experimental subjects secondyear cs students placed three fourperson groups group given 7000 line email system written c asked modify expect change take 80 hours per person complete modification experimenters determine whether group made correct changes persons understanding level measured via questionnaire one potential outcome research lowcost index maintenance success may able test new technology measuring effect understanding levels rather measuring effect maintenance tasks changeprone modules limited resources maintenance6 presented warren harrison maintainers often work tight deadlines meager resources sometimes take short cuts even though theyd prefer design implement change carefully kind change ad hoc made rapidly often degrades structure contrast planned structure preserving changes may preserve structure expensive harrison argues ad hoc changes arent damaging claimed discussed data showed practice changes tend confined small part system conclusion modules rarely change cannot degrade thus tolerate ad hoc changes author also outlined model help decide make ad hoc changes restructure model cost maintenance request function requests complexity modules state kind change made although authors still developing model captures two important notions 1 ad hoc patches degrade structure planned structure preserving changes 2 effect ad hoc changes compounded modules change often one interesting feature research uses mathematical techniques model longterm evolution since definition evolution takes time researchers must find ways reason tools like first step direction empirical exploration code decay7 presented adam porter software systems must tolerate numerous successive changes happens systems deteriorate changes become increasingly difficult eventually new functionality cannot added system must redesigned since solutions problem would valuable researchers conducting longterm multidisciplinary project examine fundamental causes symptoms remedies code decay project team contains researchers statistics experimentation organizational theory programming languages software engineering visualization primary data source att 5esstm switching system development data includes switchs source code change control history 700000 changes covering last 15 years planned actual development milestones effort testing data organizational history development policies coding standards help project achieve goals quickly constructed set model code artifacts call code decay testbed developed several small systems attempted induce code decay used resulting systems evaluate ideas code decay research good example laboratory field studies work together strengthen results increasing knowledge largescale software comprehension8 presented anneliese von mayrhauser far often researchers create solutions tools without understanding problem thus theres tendency focus tools novelty performance rather efficacy authors believe program comprehension fundamental maintenance problem consequently begun study software developers understand programs maintenance tools make easier presented case study analyzed 11 professional programmers performed maintenance tried correlate saw known theories program comprehension theories suggest several factors may affect maintenance task type prior exposure system domain expertise language expertise authors felt limited sample size one biggest problems experimenters face therefore argue combine data multiple studies require better methods comparing studies sharing data terms analyzing aggregate data one implication experimental results must generalize beyond environment taken may one important open issues empirical software engineering software maintenance process portugal9 presented helena mendesmoreira maintenance costs dues success work authors surveyed 37 software development organizations portugal characterize maintenance processes selected companies 500 developers revenues excess 13 million dollars examined survey responses conducted interviews several respondents found maintenance performed organizations involved quick fixes rather planned enhancements also many cases support activities updating documentation done importantly found ratio maintenance effort new development effort growing rapidly might expected companies enter software market develop new products first time must maintain several participants noted similar patterns us industry work raises possibility comparing historical data established organizations current data emerging ones would find common patterns organizational growth despite changes technology predicting aspects maintainability software characteristics10 presented jarrett rosenberg change way study change author presented several studies tried predict likelihood cost certain maintenance tasks results cast doubt soundness current metricbased modeling approaches first found little correlation static complexity metrics repair activity second found considerable unexplained variation metric values suggesting unknown factors driving maintenance author stressed two flaws current metrics research metrics tend purely syntactic excludes vital semantic information also tend static ignoring information systems development evolution eg testing history solution however define new measures instead argued need focus creating deep theories maintenancerelated factors presentation stressed two important research goals continue raising scientific standards borrow wisely ideas approaches research areas operational system complexity11 presented scott schneberger maintenance bottlenecks shift technology changes industry moving centralized distributed architectures shift change assumptions maintenance schneberger suggests might since claims little data maintenance distributed applications performed exploratory study work modeled systems complexity terms components internal complexity interactions test idea conducted survey initial results distribution increased ie components spread processors system complexity increased component complexity decreased one conclusions distribution shifts complexity individual components interconnections author also points domains trend back toward centralization results suggest benefits solving certain maintenance problems change time impact documentation availability software maintenance productivity12 presented eirik tryggeseth one way evaluate technology ask would happen didnt exist author takes approach see documentation affects maintenance success also asks whether effect different lessskilled programmers performed controlled experiment 34 undergraduate students computer science subjects experiment also measured students skill reading writing c programs experiment participants asked modify 2700 line c program half group b given documentation rest group experimenters measured amount time participants spent understanding modifying system measured quality modification found people documentation group b spent less time understanding system made higher quality changes also found performance measures group b correlated skill measures group one explanation might group b understood system quickly programming skill became limiting factor task performance group however found hard understand system therefore unable profit programming skill one implication result might systemlevel knowledge greater least immediate effect maintenance quality individual programming skill assessing maintenance processes controlled experiment13 presented guiseppe visaggio sometimes simplest approach costeffective work author explores costbenefit tradeoffs quickfixes thorough change process called iterative enhancement goal work similar harrisons described earlier uses controlled experiment rather mathematical modeling participants experiment asked modify two different systems using quickfix approach using iterative enhancement approach author measured correctness completeness effort traceability change found quick fixes less reliable degraded structure iterative enhancements one interesting result quick fixes done faster modification affected fewer ten modules one fascinating observation results appear agree discussed harrison even though researchers used different research methods 22 organizing current literature second session group analyzed presentations existing research see fundamental laws software maintenance known maintenance many facets first developed rough taxonomy factors might affect maintenance category tried synthesize common results hoping identify potential laws thought might also indicate open areas addressed categories represent factors related product people process task 1 product factors relate attributes system artifacts affect maintenance divided product factors two subcategories complexity structure assumed complexity affects ability understand product research area includes software complexity metrics structured programming structure refers system components organized assumed structure affects changes impact system research area includes studies rippleeffect development design patterns studies software architecture domainspecific languages 2 people factors relate attributes individuals groups affect maintenance discussed three levels factor individual team organizations assumed abilities group dynamics organizational constraints affect maintenance research areas include program comprehension groupware cycletime reduction studies 3 process factors relate activities individuals teams carry routinely affect maintenance assumed process factors affect organizations ability predictably achieve development goals research area includes documentation approaches configuration management tools 4 task factors relate viewpoint maintenance studied research focuses individual changes focuses longerterm evolution processes within categories tried extract common findings one topic success modularization several people stated parnas early work information hiding 14 illustrated benefits modularization effect research seen todays objectoriented programming languages see kemerer 15 survey results area unfortunately unable find many certainly exist didnt spring mind quickly although group members knew many studies couldnt distill messages sometimes group members disagreed interpretation single paper sometimes one papers findings conflict another papers one either correct many cases didnt think work proposed general findings interpretation field weve asked many questions taken many measurements weve learned unclear thus first conclusion need review many studies published literature synthesize potential theories 23 next steps given time probably could found common results difficulties startling one problem hasnt enough emphasis synthesizing individual results theories another fundamental problem many studies arent designed produce general results consider following kinds empirical research feasibility studies studies meant validate new technology typically experimenter exercises tool method show performs better method tool studies compare performances rarely focus properties make one tool better another statistical modeling many researchers modeled relationships various software metrics maintenance attributes change effort severity locality since models fit data without understanding correlation vs causality theres little reason believe apply data sets observational studies also see many studies document behavior single project organization studies may useful benchmarks typical behavior arent intended test hypotheses fact authors rarely draw actual conclusions types studies serves purpose understanding software engineering however designed likely produce general theories thus second conclusion theory building must designed empirical research 3 future challenges previous sections reviewed subgroups initial discussions groups activity took place two sessions first session participants presented studies discussed goals strengths weaknesses second session created scheme classifying maintenance studies classified studies using scheme looked common research findings class found common findings many thought led us look carefully field ask common results hard find main conclusion critical part scientific activity neglected software maintenance research part theory building done either synthesizing individual results proposing initial hypotheses testing refining last issue wrestled remedy situation section discuss recommendations dealing problem divided recommendations three groups rethinking goal empirical methods supporting interdisciplinary research expanding use empirical methods 31 rethinking goals empirical methods quality empirical research improved tremendously last decades must continue improve particular cannot forget measurement one part scientific inquiry routinely use measurement describe predict test important give us deep understanding need control software development gain control software development need validated theories 1 general 2 causal 3 suggestive control strategies general theories hold across several environments relationships hold one environment still important instance process improvement scientists satisfied thus strive draw theories studies even turn wrong tested environments theories also causal although literature describes many reasonablygood predictive models capture correlations shouldnt confuse correlations underlying principles really care one key challenges developing causal theories focus discovering underlying principles less measuring highlevel performance finally multiple candidate theories prefer theories suggest practical control strategies another issue consider human variation differences natural ability affect every empirical study researchers looking ways account differences much work needs done discuss later fields problem well may insight help us although ultimately concerned professional programmers build industrial software cost concerns lead us use student subjects since entirely understand relationship student programmers professionals studies often discounted consequently need develop models differences student professional populations science must public activity calls make data public must also share artifacts procedures terminology well repositories web sites set greater efforts made conduct collaborative research science iterative build test theories find almost incorrect imprecise authors reviewers change think present findings 32 supporting interdisciplinary research often software engineering researchers think field entirely unique software development involves web individuals groups organizations working build complex array products therefore certain fields tools techniques find useful example behavioral scientists study people work together among things theories people learn understand work together one group members jarrett rosenberg coined term theory reuse describe kind interdisciplinary collaboration cognitive scientists study people think consequently experience defining instruments measure aspects human skill discussed earlier instruments could play large role factoring human variation empirical studies statistics already plays big role data analysis experimental design hypothesis testing also benefit knowledge simulation methods visualization methods mathematical modeling business disciplines organization theory information systems management great deal knowledge process organizational structure business strategies affect peoples ability get work done understanding effects may help us reconcile studies multiple organizations also economists considerable expertise modeling complicated phenomena 33 expanding use empirical methods controlled experiments standard method verifying theories however perfect expensive limited external validity may difficult even unethical use certain situations therefore addition traditional analysis techniques consider methods generating testing theories qualitative analysis refers analysis data represented words pictures rather numbers 16 approaches many supporting analyses traditional quantitative methods may provide richer description phenomena studied metaanalysis gathering enough data draw sound conclusions major problem empirical research one way solve problem may integrate data results multiple studies done ad hoc basis also approaches statistically integrating data approaches called metaanalysis mathematical modeling simulation approach widely used computer science software engineering unfortunate mathematical models powerful much less expensive experimenting actual system process also effective compliment approaches case studies many case studies simply retrospective descriptions project sometimes call lessons learned articles experience reports try case studies hypotheses stated data analyzed see whether consistent hypothesis surveys surveys inexpensive way acquire lots information low cost problems large community researchers use understand limitations one final point make approaches strengths weaknesses sometimes best thing combine two approaches 4 summary software vendors must respond frequently correctly changing user expectations hardware platforms alternative products software systems must tolerate numerous successive changes practice however systems deteriorate changes become increasingly difficult implement thus easy see costs maintenance often dominate costs initial development research makes maintenance easier save considerable time money throughout software industry therefore researchers identified sources maintenance problems developed potential remedies example researchers believe repeated changes complicate systems internal structure developed code metrics model structural complexity others think software designs inherently less flexible others focused design patterns software architecture still others argue changes become difficult time developers lose understanding system developed reverse engineering tools formal documentation exact manner degree different factors affect maintenance unclear clear however information vital research sustained predictable improvement many researchers share belief attended workshop topic empirical studies software maintenance article tries summarize ideas subgroup studies maintenance process fundamental laws assumptions groups main conclusion research community software maintenance produced many interesting results failed consolidate useful theories help remedy situation group made three recommendations 1 researchers design studies whose goal generate test refine useful theories simply describe behavior implies must use much sophisticated empirical methods currently 2 researchers look disciplines helpful insights tools theories however borrow wisely 3 empirical research severely limited inability find adequatelysized samples researchers need consider nontraditional techniques combining data multiple sources need use multiple data collection analysis approaches make better use small data sets 5 list participants session chair would like thank subgroup participants helping make workshop success thomas helena mendesmoreira elisabeth dusink warren harrison jarrett rosenberg giuseppe visaggio marie vans anneliese von mayrhauser eirik tryggeseth scott schneberger 6 r model large program development system structure software maintenance maintenance reusebased domainspecific software product lines using didactic model measure software comprehension taxonomy educational objects empirical exploration code evolution increasing knowledge largescale software comprehension software maintenance process financial organizations problems prospects quantifying software maintainability position paper international workshop empirical studies software maintenance impact documentation availability software maintenance productivity assessing maintenance processes controlled experiment criteria decomposing systems modules software complexity software maintenance survey empirical research methods qualitative family research tr