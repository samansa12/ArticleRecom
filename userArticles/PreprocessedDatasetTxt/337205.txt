deriving test plans architectural descriptions b introduction recent years focus software engineering continuosly moving towards systems larger dimensions complexity software production becoming involved distributed applications running heterogeneous networks emerging technologies commercial otheshelf cots products becoming market reality 22 result applications increasingly designed sets autonomous decoupled components promoting faster cheaper system development based cots integration facilitating architectural changes required cope dynamics underlying environment development systems poses new challenges exacerbates old ones critical problem understanding system components integrate correctly respect relevant issue concerns dynamic integration indeed component integration result architectural mismatches trying assemble components incompatible interaction behavior 12 7 leading system deadlocks livelocks general failure satisfy desired functional nonfuntional system properties context software architecture sa play signicant role sas last years con sidered academia software industries means improve dependability large complex software products reducing development times costs 21 3 sa represents promising approach tackle problem scaling software engineering suitable abstractions provides way make large applications manage able originality sa approach focus overall organization large software system using abstractions individual components approach makes possible design apply tractable methods development analysis validation maintenance large software systems crucial part development process testing new models methods proposed respect requirements analysis design notably uml 18 approach testing kinds systems remains neglected aspect paradox new approaches specically address design large scale software systems however systems testing problems diminish intensied especially true integration testing fact due new paradigms centered componentbased assembly systems easily suppose software process unit testing plays minor role testers focus components work plugged together lot work devoted analysis formal descriptions sas concern analysis consistency correctness sa rather exploiting information described sa level drive testing implementation words assume sa description correct investigating approaches specicationbased integration testing whereby reference model used generate test cases sa description general deriving functional test plan means identify classes behavior relevant testing purposes functional equivalence class collects system executions although dierent details carry informative contents functional verication testers expectationhope test execution among belonging class would equally likely expose possible non con formities specication identify interesting test classes sabased testing sequences interactions sa components precisely starting architectural descrip tion carrying static dynamic information rst derive labelled transition system lts graphically describes sa dynamics problem lts provides global monolithic description set possible behaviors system tremendous amount information attened graph quite hard software architect single global model relevant observations system behavior would useful validation provide software architect key decipher lts dynamic model key use abstract views lts called altss heshe easily visualize relevant behavioral patterns identify ones meaningful validation purposes test classes approach correspond alts paths however test class selection made necessary return lts retrieve information hidden abstraction step order identify lts paths appropriate renements selected alts paths also supported approach following describe detail various steps proposed approach scope case study section 2 provide background information recall cham formalism used sa specication outline case study used working example section 3 provide general overview approach section 4 give examples using approach address specic issues section 5 clarify better relation alts paths test specications finally conclu sions summarize paper contribution address related work adl dynamics architectures represent overall system structure modelling individual components interactions sa description provides complete system model focussing architecturally relevant abstractions key feature sa descriptions ability specify dynamics finite state machines petri nets labelled transition systems ltss used model set possible sa behaviors whole following subsection brie recall cham description sa description derive lts represents global system behavior concurrent multiuser software system cham model cham formalism developed berry boudol eld theoretical computer science principal purpose dening generic computational framework 4 molecules constitute basic elements cham solutions 0 multisets molecules interpreted dening states cham cham specication contains transformation rules dictating way solutions evolve ie states change cham following chemical metaphor term reaction rule used interchangeably term transformation rule follow ing abuse notation identify r set rules set corresponding labels way cham descriptions model sas already introduced elsewhere 14 summarize relevant notions structure cham specications system four parts 1 description syntax components system ie molecules represented 2 solution representing initial state system 3 set reaction rules describing components interact achieve dynamic behavior system 4 set solutions representing intended nal states system syntactic description components given syntax molecules built following perry wolf 17 distinguish three classes components data elements processing elements connecting elements data elements contain information used transformed processing elements connecting elements glue holds dierent pieces architecture gether example elements involved eecting communication among components considered connecting elements classication ected syntax appropriate initial solution corresponds initial static conguration system require initial solution contain molecules modeling initial state component transformation rules applied initial solution dene system dynamically evolves initial conguration one take advantage operational avor derive lts cham description paper describe lts derived see 11 recall lts denition rely denition 21 labelled transition system quintuple set states l set labels 0 2 initial state sf set nal states transition relation state lts corresponds solution therefore made set molecules describing states components labels lts arcs denote transformation rule lets system move tail node state head node state also need denition complete path denition 22 let l 1 l 2 l 3 path lts p complete 0 initial solution sn nal one although approach builds cham description sa worthwhile stressing committed choice cham formalism dictated background use previous case stud ies perfectly aware choices could made want make clear use specic formalism central approach general terms done far summarized follows assumed existence sa description adl description lts derived whose node arc labels represent respectively states transitions relevant context sa dynamics also user1 router server timer alarmur alarmrs c check1 acksr c user2 alarmur1 check2 check figure 1 processes channels assume states contain information single state components labels arcs denote relevant system state transitions trmcs casestudy teleservice remote medical care system trmcs 2 provides monitoring assistance users specic needs like disabled elderly people trmcs developed parco scientico e tecnologico dabruzzo currently java prototype running undergoes sa based integration testing typical trmcs service send relevant information local phonecenter family medical technical assistance timely notied critical circumstances dene four dierent processes user router server timer user sends either alarm check message router process sending alarm waits acknowledgement router router waits signals check alarm user forwards alarm messages server checks state user control messages server dispatches help requests timer sends clock signal time unit figure 1 shows static trmcs software architectural description terms component connec tors boxes represent components ie processing el ements arrows identify connectors ie connecting elements case channels arrows labels refer data elements exchanged channels figure shows reaction rules trmcs cham specication portion lts trmcs sa given fig 3 whole lts around 500 states note arc labels 0 1 21 correspond respectively 0 1 21 ie labels trmcs reaction rules0 denotes initial state box states denote pointers states elsewhere shown picture make reaction rules t1 user1 user1ocheck1 user1oalarmur1iackru1 t2 user2 user2ocheck2 user2oalarmur2iackru2 t3 user1ocheck1 ocheck1user1 t4 user2ocheck2 ocheck2user2 t11 oalarmur1iackru1user1 ialarmuroalarmrsiacksroackrurouter t12 oalarmur2iackru2user2 ialarmuroalarmrsiacksroackrurouter t13 oalarmrs1iacksr1oackru1router ialarmrsoacksrserver t14 oalarmrs2iacksr2oackru2router ialarmrsoacksrserver t15 oacksr1server t17 oackru1router t18 oackru2router t19 m1router timer sent onofuncrouter m1router nosent figure 2 trmcs cham reaction rules graph readable double arrows denote points gure cuts lts paths section introduce approach sabased testing goal use sa specication reference model test implemented system needless say exists thing ideal test plan accomplish goal clear contrary highlevel architectural description system several dierent sabased test plans could derived one addressing validation specic functional aspect system dierent interaction schemes components therefore assume starting point approach software architect looking sa dierent viewpoints chooses set important patterns behavior submitted testing choice obviously driven several factors including specicity application eld criticality schedule constraints cost likely crucial step good test plan give examples possible choices section 4 abuse terminology refer selected patterns behavior sa testing criterion term want stress approach derive dierent specic set tests fulll functional requirements criterion choice implies general sa testing criteria adopted test sa two remarks worth noting one derived tests specically aimed validating highlevel interactions sa components test plans develop apply integration test stage second remark since concerned testing ie verifying software execution greatly base approach sa dynamics particular starting selected sa testing criterion primarily work sa lts graphs derived latter means abstraction described following introducing obsfunctions sa dynamics sa testing criterion initially derived software architect informal terms want translate form interpretable within context sa specication order allow automatic processing intuitively sa testing criterion abstracts away interesting interactions referring cham formal ism sa testing criterion naturally partitions cham reaction rules two groups relevant interactions ie ones want observe testing relevant ones ie interested suggests consider interpretation domain map signicant transformation rules ie arc labels lts distinct element map rule figure 3 portion trmcs lts therefore associate sa testing criterion obs function function maps relevant reaction rules cham sa description particular domain interest precisely idea underlying set expresses semantic view eect transition rules system global state lts altss use obsfunction dened means derive lts automaton still expressing high level behaviors want test according selected sa testing criterion hiding unrelevant haviors automaton called alts abstract lts lts obtained relabelling according function obs transition rs 0 minimizing resulting automaton respect selected equivalence trace bisimulationbased equiv alence preserving desired system properties discussed 5 derive complete path alts see de nition 22 quite naturally corresponds high level specication test class sa give examples next section therefore task deriving adequate set tests according selected sa testing criterion converted task deriving set complete paths appropriately covering alts associated criterion via obsfunction attempt depicting general overview ap proach far deliberately left unresolved concrete issues importantly mean concretely look sa selected observation point ie meaningful obsfunctions also alts derived paths selected coverage criterion could ap plied devote next section answer questions help examples regarding trmcs case study considering informal description trmcs section 2 obvious safetycritical concerns may want test way alarm message ows system moment user sends moment user receives acknowledgement casting terms used previous section issues alarm msg receives ack issues alarm msg obs receives ack obs figure 4 alarm ow obsfunction receiveack1 receiveack2 receiveack1 receiveack2 receiveack1 receiveack2 figure 5 alarm software architect may decide important sa testing criterion behaviors involving ow alarm message system quite informal specication corresponding obsfunction could formally dened figure 4 shown included interpretation domain cham transition rules specically involve sending alarm message user users reception acknowledgement alarm message router note information encoded lts level arcs labels reference obsfunction applying reduction minimization algorithms case minimized respect trace equivalence since preserves paths derived alts depicted figure 5 shaded circle represents initial state example also coincides nal one alts represents concise graphical way alarm ow handled alarm issued eg sendalarm1 system nondeterministically react one two possible actions elaborat ing alarm sending back acknowledgement receiveack1 receiving another alarm message another user sendalarm2 note rather intuitive appeal small graph regard much complex complete lts trmcs one hundred times bigger one could tempted consider rather thorough coverage criterion alts taking complete paths derivable xing maximum number cycles iterations however see better next section alts path actually correspond sends first check msg sends check msg sends first check msg sends check msg obs every user sent check msg obs 21 user sent check msg obs figure check ow obsfunction many concret test cases therefore less thorough coverage criteria seem practical particular found mccabes technique selecting basic paths 16 oers good compromise arc path coverage list alts test paths derived according mccabes technique following let us consider example paths 2 3 4 three paths devoted verify system correctly handles consecutive reception two alarm messages issued two distinct users putting three alts paths list explicitly want distinguish test plan cases ack message sent rightly reception respective alarm message path3 acknowledgements sent alarms received ii order alarm receptions path4 nally iii opposite order path2 three test classes aimed validating alarm message series two lost whichever order processed still considering trmcs software architect could decide also check ow worth testing thus analogous way done alarm ow check ow obsfunction derived figure 6 corresponding alts depicted figure 7 represents dierent observation trmcs behavior reasoned far hyphotetical scenario trmcs system developed software architect deriving interesting architectural behaviors tested alternative scenario could trmcs already functioning one checkerr checkerr checkerr checkerr checkerr checkok checkerr checkok checkerr f g checkok checkerr figure 7 check components modied dont want change aects sa specication want test whether modied component still interacts rest system conformance sa original description case observation point software architect interactions involve component specically component modied server corresponding obsfunction given figure 8 mccabes coverage criterion yields following set test classes example evidences even deriving basic alts paths blindly apply coverage cri terion somehow exploit semantics behind elements instance consider path5 interpret light mccabes coverage criterion aimed covering transition fra2 state state c shorter path c would equally good purpose functional testing shorter path useless would perfectly equivalent already taken path2 b paths fact test forwarding one alarm message server therefore cover transition c instead selected longer path b c serves purpose test consecutive forwarding two alarms router obs router router router obs 21 router obs figure 8 component based obsfunction frno frno frno frno figure 9 component based alts cation alts paths specify functional test classes high abstraction level one alts path generally correspond many concrete test cases ie test executions level implemented system wellknown several problems make testing concurrent systems much dicult expensive sequential systems reasons space discuss problems depth see eg 9 said simply tradeo imagined general tightly test specication event sequence given much eort needed tester force execution sequence point tester receiving high level test specications corresponding alts paths could choose among many concrete test executions conform example considering path2 b b fig 5 possible test execution include sending alarm message user1 immediately followed sending alarm message user2 another test execution could well include two alarm messages router reception messages eg check clock still conform given high level test specication exibility rening test specications descends fact derive alts complete lts deliberately abstracted away transitions involving alarm ow user words concrete executions however dif ferent long conform path2 belong test class according selected sabased test criterion obsfunction altsbased list paths cho sen go back complete lts observe selected abstraction hiding ie precisely see sa lts equivalence assumptions 1 behind alts paths test classes selection quite attractive feature approach sa based test class selection functional test classes derived adhoc manually often case high level test stages equivalence assumptions test classes rely upon remain implicit hardly recoverable system specication approach rst explicit abstraction step required alts derivation second going back alts complete lts easily identify many lts paths fulll given alts path better explain means example considering alts alarm ow fig 5 state b equivalent test assumptions made roughly forty states complete lts course automatically identify valid lts subpaths could traverse reach forty states valid subpaths example going initial state 0 lts forty states equivalent state b alts without including transformation rules domain dened alarm ow obsfunction except last arc must correspond transformation rule 11 many subpaths would constitute valid rene ment abstract sendalarm1 transition path2 renement applied state arc alts paths evident number potential lts paths one alts path soon becomes huge cannot realistically plan test cases pragmatic question select meaningful lts paths among many rening alts path dont believe completely automatic tool ie smart graph processing algorithm could make good choice semantic aspects functional behavior tool could capture also several nonfunctional 1 term equivalence refers usual meaning testing literature ie denotes test executions interchangeable respect given functional structural test criterion specic tracebisimulation equivalence used far graph figure 10 lts test path factors take account prospect fore software architect indispensable support appropriate graphical tools processing aids exploit one side hisher semantic knowledge sa dynamics discern lt paths equivalent respect alts abstraction side heshe also take account relevant factors captured sa description safetycritical requirements time cost constraints thus nally expect software architect produces list alts paths rened list lts paths give list tester test specication validating system conformance sa fig 12 instance show lts path valid renement path2 alarm ow alt example shortest path could take instantiate alts path includes indispensable trmcs transformation rules fulll path precise 15 lled light gray particular state equivalent state b alarm ow alts note fact entering arc labelled 11 another forty lts states equivalent b fig 3 semantic dierence 15 159 could relevant integration testing purposes reaching 159 ie user1 sends alarm user2 send check message never possible lts subpaths reaching 15 could see analyzing state information associated lts nodes renement path2 software architect could decide pick one lts path includes 159 order test check another user interfere alarm certain user 6 conclusions contribution paper consists approach use architectural description system dene test plans integration testing phase system implementation approach starts correct architectural description relies labelled transition system representation architecture dynamics means observation notion software architect get dynamic model suitable abstractions ect hisher intuition interesting relevant system architectural description respect validation step eective step relies software architect judgement semantic knowledge sa functional nonfunctional characteristics summary proposed approach consists following steps 1 software architect selects interesting sa testing criteria 2 sa testing criterion translated obs case criterion could also identify several related obsfunctions 3 obsfunction alts automatically derived global lts corresponding sa specication 4 derived alts set coverage paths generated according selected coverage criteri path alts corresponds highlevel specication test class 5 alts path software architect tool supported inspection lts derives one appropriate lts paths specify rened transition sequences architectural level approach allows software architect move across abstractions order get condence hisher choices better select rened test plans worth noticing approach test plan path sequence events labels path also set states describe state system terms single state com ponents much informative test plan respect one could derived eg requirements specications fact using sa lts also provide tester information state components used constrain system exercise given path related work lot work devoted testing concurrent realtime systems specication driven implementation based 9 15 8 1 room carry comprehensive survey outline main dierences approach works addressed dierent aspects modelling time internal nondeterminism focus unit test ing either view concurrent system whole specically look problem testing single component inserted given environmen aim dierent want actually able derive test plans integration testing thus although technical tools approaches use obviously eg lts abstractions event sequences use context dierent goal dierence emerges beginning work architectural description drives selection abstraction ie testing criterion paths ie actual test classes approach dening alts paths specifying high level test classes lot common carver tais use sequencing constraints specication based testing concurrent programs 9 indeed sequencing constraints specify restrictions apply possible event sequences concurrent program selecting tests similarly alts paths sa fact currently working towards incorporating within framework carver tais technique deterministic testing forcing execution event sequences rened lts paths produced approach far architectural testing concerned topic raised interest received good deal attention recent years 19 6 20 approach indeed stems ground though knowledge besides project attempt concretely attacking problem pursued far future aim achieve usable set tools would provide necessary support approach far experimented approach described case study running java prototype exists way completely automatically supported respect alts denitions criterion identication path selection tool support could rely lts generator starting cham description also allows keeping track state arc labels work ongoing generalize alts generation implement graphical frontend cham descriptions denitely believe success approach heavily depends availability simple appealing supporting tool eort goes two directions one side investing automating approach would also like take advantage existing environments possibly integrate eg 13 10 involved experimentation latter easy job experimenting approach requires existence correct architectural description running implementation case study presented could carried since project entirely managed control requirements specication coding obviously often case results got far quite satisfactory real world case studies working moment already running implementation asked give model architectural structure condent provide interesting insights validate approach r design toolset dynamic analysis concurrent java programs software architecture practice chemical abstract machine approach integration testing based architectural descriptions cots integration plug pray practical complete algorithm testing realtime systems use sequencing constraints speci uncovering architectural mismatch component havior architectural reuse hard project formal speci generating test cases realtime systems logic speci cations complexity measure foundations study software architecture httpwwwrationalcomumlindexjtmpl software testing architectural level software architecture perspectives emerging discipline component software tr chemical abstract machine foundations study software architecture concurrency workbench formal specification analysis software architectures using chemical abstract machine model generating test cases realtime systems logic specifications software architecture software testing architectural level component software software architecture practice use sequencing constraints specificationbased testing concurrent programs uncovering architectural mismatch component behavior cots integration architectural mismatch practical complete algorithm testing realtime systems approach integration testing based architectural descriptions ctr mauro cioffi flavio corradini specification analysis timed functional trmcs behaviours proceedings 10th international workshop software specification design p31 november 0507 2000 myra b cohen matthew b dwyer jiangfan shi coverage adequacy software product line testing proceedings 2006 workshop role software architecture testing analysis p5363 july 1720 2006 portland maine holger giese stefan henkler architecturedriven platform independent deterministic replay distributed hard realtime systems proceedings 2006 workshop role software architecture testing analysis p2838 july 1720 2006 portland maine antonia bertolino paola inverardi henry muccini explorative journey architectural tests definition code tests execution proceedings 23rd international conference software engineering p211220 may 1219 2001 toronto ontario canada luciano baresi reiko heckel sebastian thne dniel varr modeling validation serviceoriented architectures application vs style acm sigsoft software engineering notes v28 n5 september henry muccini antonia bertolino paola inverardi using software architecture code testing ieee transactions software engineering v30 n3 p160171 march 2004 hong zhu lingzi jin dan diaper ganghong bai software requirements validation via task analysis journal systems software v61 n2 p145169 march 2002 paola inverardi saladin project summary report acm sigsoft software engineering notes v27 n3 may 2002