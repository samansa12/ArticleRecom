tight bounds competitive ratio accommodating sequences seat reservation problem unit price seat reservation problem investigated seat reservation problem problem assigning seat numbers online requests reservations train traveling k stations considering version tickets price requests treated fairly request fulfilled must grantedfor fair deterministic algorithms provide asymptotically matching upper bound existing lower bound states fair algorithms problem competitive accommodating sequences least three seatsadditionally give asymptotic upper bound 79 fair randomized algorithms oblivious adversarieswe also examine concrete online algorithms firstfit random special case two seats tight analyses performance given b introduction many train transportation systems passengers required buy seat reservations train tickets ticketing system must assign passenger single seat passenger purchases ticket without knowing future requests seats therefore seat reservation problem online problem competitive analysis appropriate assume train n seats travels start station end station stopping k 2 stations including rst last seats numbered 1 n start station station 1 end station station k reservations made trip station station long 1 k passenger given single seat number ticket purchased time departure algorithms ticket agents may refuse passenger possible accommodate attempts make reservation seat empty entire duration passengers trip passenger must assigned seat algorithm kind fair algorithms attempt maximize income ie sum prices tickets sold naturally performance online algorithm depend pricing policies train tickets 6 two pricing policies considered one tickets price unit price problem one price ticket proportional distance traveled proportional price problem paper focuses fair algorithms unit price problem seat reservation problem closely related problem optical routing number wavelengths 1 5 9 14 call control 2 interval graph coloring 12 interval scheduling 13 oline version seat reservation problem used solve following problems 8 minimizing spill local register allocation job scheduling start end times routing two point nets vlsi design another application online version problem could assign vacation bungalows mentioned 15 performance online algorithm usually analyzed using competitive ratio dened following way denition 11 let ai denote much online algorithm earns request sequence let opti denote much earned optimal oline algorithm given sequence online algorithm ccompetitive sequence requests ai c constant depend input sequence competitive ratio supremum c 2 note general constant b allowed depend k k parameter problem quantify rst k notice fairness criterion dened part problem specication thus even though optimal oline algorithm knows whole sequence requests advance must process requests order online algorithm fairly paper investigate competitive ratio special case enough seats accommodate requests ie optimal oline algorithm reject requests restriction input sequences used ect assumption decision many cars train based expected ticket demand denition 12 sequence requests fully accommodated optimal oline algorithm called accommodating sequence 2 earlier papers 6 7 competitive ratio accommodating sequences called accommodating ratio change made consistency common practice eld 11 coloring interval graphs since considering unit price problem seat reservation problem similar problem coloring interval graph online easy see route train travels station 1 station k section real line considered part route passenger travels open interval seat passenger assigned color interval given note case enough seats accommodate quests restriction optimal oline algorithm fair fact restriction thus optimal fair oline algorithm polynomial time 10 since simply matter coloring interval graph minimum number colors recall interval graphs perfect 11 size largest clique exactly number colors needed thus pair stations 1 number people want train stations 1 greater n optimal fair oline algorithm able accommodate requests contrapositive clearly also true pair stations number people want train stations greater n optimal fair oline algorithm unable accommodate quests refer number people want train two stations density stations 12 previous results following known results theorem 11 6 accommodating sequences fair deterministic randomized online algorithm unit price problem least 1 competitive 2 theorem 12 6 even accommodating sequences fair deterministic randomized online algorithm unit price problem k 6 8k 8kmod3 9 competitive 2 thus even accommodating sequences fair randomized online algorithm competitive ratio much better 413 contributions next section lower asymptotic upper bound competitive ratio accommodating sequences fair deterministic algorithms 4to 1when k large compared n n 3 fair randomized algorithms oblivious adversaries show upper bound 7for large k concrete online algorithm firstfit examined regards unit price problem special case 2 show firstfit 3competitive accommodating sequences show asymptotically optimal finally examine concrete randomized online algorithm random prove asymptotic upper bound 17for n 3 special case asymptotically matching upper lower bounds 3some results paper presented 4 algorithms section investigate competitive ratios deterministic fair algorithms unit price seat reservation problem consider cases separately trivially fair online algorithm 1competitive accommodating sequences 21 general upper bound n 3 upper bound competitive ratio accommodating sequences lowered match lower bound k large compared n theorem 21 competitive ratio accommodating sequences fair unit price seat reservation problem 3 seats 1 3 proof first give intervals length four spacing two except rst interval length three last length one intervals 1 4 6 10 12 intervals referred original intervals unnamed fig 1 give additional requests processing already given requests left right based online algorithm placed original intervals give additional requests named e illustration determined processing left right maintain invariant depicted fig 1a every interval start station left vertical dotted line processed includes extra intervals given every processed interval except rst two way left associated rejected interval e invariant base case e b next interval e e e ext c next interval previous ext next interval free figure 1 cases proof intervals start station strictly right vertical dotted line original intervals horizontal dotted line show rejected intervals note optimal oline algorithm accommodate requests since density three two stations implies clique number corresponding interval graph three establishing base case done giving interval illustrated fig 1a interval original interval 1 4 ones without associated rejected intervals note e interval well e intervals given later may extended processing next original interval gure marked asterisk induction step assume processed certain station able maintain invariant processing next original interval three cases interval could seat e fig 1b seat previous original interval fig 1c third seat fig 1d case must reestablish invariant six stations right next vertical dotted line fig 1b give new interval e 0 serve e interval next round original interval processed well e 0 get associated rejected interval fig 1c extend already given e interval reality process intervals determine given actually giving requests know exactly long interval actually give need provide two rejected intervals new e interval next round fig 1d also extend e interval interval also serve e interval next around thus one rejected interval processed original interval must provided summary give k5original intervals except rst one rejected interval additionally give number x 1 e intervals x 1 rejected intervals total get ratio term dominates corresponding term result easily extended k 7 giving sequence ignoring last stations let c k 1 mod 6 upper bound 1 3 k5 c corollary 21 competitive ratio accommodating sequences fair unit price seat reservation problem n 3 seats 1 proof first give n 3 intervals type 1 k fairness online well optimal oline algorithm must accept use theorem remaining three seats ratio becomes dominates technique corollary 21 converts upper bound seats upper bound n seats n adding large requests beginning sequence applied sequence done negative results deterministic algorithms negative results randomized algorithms thus asymptotic competitive ratio monotone nonincreasing function n limit number stations 22 case section case however note train systems unlikely train small number seats bounds obtained probably irrelevant application could relevant others assigning vacation bungalows following theorem gives upper bound competitive ratio accommodating sequences fair algorithms bound approaches 3as approaches innity theorem 22 let 5k 5k mod 5k 5k mod algorithm unit price problem fkcompetitive even accommodating sequences proof adversary begins one request interval 3s 1 3s 3 3 c requests satised online algorithm consider 6 c three requests satised suppose intervals 6i placed seat adversary proceeds request interval requests intervals 6i 8 online algorithm accommodate rst request fail accommodate last two second case suppose two adjacent intervals among 6i placed seat say 6i adversary proceeds three requests intervals 6i 8 online algorithm accommodate rst request fail accommodate last two last case intervals 6i placed seat adversary proceeds two requests intervals 6i2 6i5 8 online algorithm fail accommodate follows easily even accommodating sequences competitive ratio online algorithm applied sequence requests specic online algorithm called firstfit always processes new request placing rst seat unoccupied length journey following theorem shows firstfit asymptotically optimal online algorithm theorem 23 firstfit unit price problem least 3competitive accommodating sequences 2 proof consider set requests optimal oline algorithm could accommodate two seats let subset requests accommodated firstfit let u denote subset unsatised requests nonempty intervals two consecutive requests satised seat ie durations seat empty called gaps seat easily shown impossible two requests u whose starting stations gap request u starting station gap seats partition u u 1 denotes subset requests u starting station gap seat sort requests u starting stations increasing order consider onebyone order request denote request rst interval prevents accommodating r seat 2 seat 1 must empty station 1 station minft 1 g firstfit rule 1 since otherwise request r 1 would accommodated seat 1 reason request r accommodated seat claim request r whose starting station 0 gap right otherwise would 0 1 ensures request r 0 could satised seat 1 conceptually assign requests r 1 r 2 request r notice dierent r 2 u 2 requests r 1 r 2 dierent nishing requests u 2 consider requests u 1 request denote request rst interval prevents accommodating r seat 1 seat 2 must empty station 1 station minft 1 g let r denote last request satised seat 2 1 seat 2 empty station 2 station minft 1 g obviously 2 1 furthermore request r request q 2 u 2 starting station gap seat 2 2 gap assign requests r 1 r 2 r case gap request starting station u gap let q 1 q 2 denote two requests assigned q reassign requests r 1 q 1 q 2 requests r q notice dierent r corresponding q must dierent requests cannot assigned dierent requests u thus depending case dealing either two requests assigned one u group three requests assigned pair requests u size u 2the size means firstfit accommodates least threefths requests 2 3 randomized algorithms section examine competitive ratios accommodating sequences randomized fair online algorithms unit price problem comparing oblivious adversary results concerning randomized fair online algorithms proportional price problem found 3 though following theorem deterministic algorithms result worse theorem 21 included section structure proof allows easy transformation proof equivalent randomized problem believe easier rst understand deterministic proof verify transformation subsequent corollary theorem 31 let 7k 7k mod 9k 9k mod 14k 14k mod algorithm unit price problem k fkcompetitive even accommodating sequences proof proof theorem adversary argument dextrous design based idea proof theorem 12 6 assume n divisible 2 adversary begins nrequests intervals 3 c fair online algorithm able satisfy set b kc nrequests suppose requests satised q seats contain interval 3i 6c exactly q seats empty station 3i 2 station 3i 5 following rather considering q time 6 consider q distinguish two cases case 2 5nin rst case p 5n adversary proceeds nrequests nrequests interval 6i n additional requests online algorithm accommodate exactly fig 2a shows conguration intervals marked 1 intervals given rst ie deciding case 1 2 intervals marked 2 ones given afterwards thus 2n requests whose starting station 6 online algorithm accommodates second case p 5n adversary proceeds nrequests nrequests interval 6i nrequests interval 6i 8 3nadditional requests online algorithm accommodate exactly 3np fig 2b shows conguration thus 5nrequests whose starting station 6 online algorithm accommodates 5np figure 2 example congurations two cases way requests partitioned b k 3 6 c1 groups rst groups consists either 2n 5nrequests last group consists either n k mod rst b k 3c groups online algorithm accommodate fraction 7of requests therein leads theorem precisely let denote set indices rst case happens let denote set indices second case happens ratio number requests accepted online algorithm number requests accepted optimal oline algorithm 5n 9k 9k mod last inequality holds general 1 c imply eaxcy ebxdy eaxy k mod 5g ratio 5n completes proof 2 corollary 31 let 7k 7k mod 9k 9k mod 14k 14k mod randomized fair online algorithm unit price problem k fkcompetitive even accommodating sequences proof oblivious adversary behaves similarly adversary proof theorem 31 sequence requests employed oblivious adversary depends expected values p dened proof theorem 31 oblivious adversary starts sequence adversary proof theorem 31 6 c decides case 1 case 2 depending expected value ep compared 5n generating corresponding requests linearity expectations implies expected number requests accommodated randomized algorithm fraction fk total number requests 2 although straight forward show theorem 31 holds randomized algorithms shown one cannot use argument show theorems obvious randomized algorithm consider problem one call random random receives new request exists least one seat interval could placed random chooses randomly among seats possible giving possible seats equal probability theorem 32 unit price problem least4 competitive accommodating sequences proof given request sequence could accommodated two seats consider optimal placement requests two seats based appear placement refer requests seat 1 seat 2 requests intervals based seat 1 requests partition requests consecutive groups show group amortized sense expected number requests accepted group least 3the naming two seats clearly arbitrary use following num bering seat 2 seat containing interval smallest start station number two intervals start station seat 2 seat containing longer two intervals two intervals identical accepted ignored next intervals used instead seat seat 1 general group dened depicted fig 3 starts seat 1 request seat 1 request k overlaps extends beyond right group includes number x seat 1 intervals contained interval next group dened considering requests start earlier end station beginning rst group possibly renaming seats case gives problem assume request k exists requests subintervals either k included group k following assume x 0 subintervals 0 subintervals k request sequence thus entire group consists 2xy requests accepted optimal oline algorithm may case seat 1 request previous group overlapping call request l similarly interval k may overlap seat 2 request next group interval next group call j proof lengthy case analysis based relevant intervals occur request sequence since xy intervals contained within k always accepted ratio become worse assumed ys j figure 3 group picture come k make assumption similarly assume l comes l accepted j comes k j accepted l j exist group handled came k case analysis done table notation 1 indicates 1 occurs 2 request sequence notation xs indicates x 0 ys indicates 0 mark table indicates given predicate true otherwise false thirtytwo cases one probability accepted probi probability k accepted calculated result result given rst two intervals k given probability accepted probability two intervals come overlap placed dierent seats since intervals equally likely seat 1 seat 2 probability 1 u 1 u number interfering intervals probability acceptance second k calculated similarly weighting two possible cases whether rst interval accepted probability accepted result calculated probiprobkxy 2xy expected fraction intervals group accepted results calculated using values x give minimum result see minimum dened cases setting equal 1 gives minimum exceptions cases 9 13 amortization used handle problem worst case occurs l j occur k cannot happen two consecutive groups example group type 27 occurs immediately group type 1 extra expectation 1from case 27 used cover decit 1from case 1 overall expectation high enough call groups fall rst eight cases figure 4 late groups since k intervals occur later request sequence relevant intervals two surrounding groups similarly call groups fall last eight cases early groups fall cases 9 lateearly groups fall cases 17 24 earlylate groups result column fig 4 fractions less 3are expressed as4 w z number intervals group refer value z decit group notice never decit greater 1of interval occur late groups early groups result expressed as4 wz value z surplus group early groups surplus least 1 covers decit late group note minimums calculated calculated maximize decit minimize surplus rather minimize expected fraction accepted groups 25 29 makes dierence clearly rst group dened request l either early group earlylate group although one cannot assume late group early group immediately preceding easy see late group must early group request sequence surplus early group cover decit late group earlylate lateearly groups expected fraction intervals groups accepted least 3 total expected fraction intervals accepted least 32 value 3is fact tight lower bound randoms competitive ratio accommodating sequences seats theorem 33 let unit price problem k 3 fk competitive accommodating sequences proof rst give request 1 2 requests 2cg k odd give request k random place requests since overlap placed rst seat probability 1now continue sequence 2i 3cg interval last part sequence overlaps exactly two intervals earlier therefore accommodated two intervals placed seat happens probability 1 li j k ik xs ys probi probk result 26 1x 28 figure 4 table dierent groups thus requests rst part sequence expected half requests last part accepted precisely obtain fkthe competitive ratio 3on accommodating sequences random seats extend seats general one show randoms competitive ratio accommodating sequences bounded approximately 17 07083 3 theorem 34 even accommodating sequences competitive ratio random 17k14 unit price problem k 2 mod 4 proof assume n divisible 3 request sequence follows 1 2 ntimes ntimes ntimes ntimes ntimes ntimes 4these referred extra intervals firstfit applied sequence knrequests would accom modated random accommodate everything except extra intervals follows intervals length shorter 4 extra intervals thought length 4 thus extended rst station last notice extra intervals form 4s1 4s3 accepted exactly seats receive interval 4s 2 4s receive interval 4s similarly extra intervals form 4s 5 accepted exactly seats receive interval 4s 4s receive interval 4s us consider types extra intervals combinations expected 4s n27 2n27 2n27 2n27 4n27 4n27 n9 2n9 figure 5 expected number seats various combinations intervals pairs 4s 1 4s 3 4s 3 4s 5 calculate expected number accommodated random consider last pair extra intervals intervals interfere whether extra intervals accommodated forms 4s 2 4s 8 intervals aect placed relative form 4s6 4s10 intervals 4s 2 4s2 placed probability one interval 4s immediately 1 thus one expects 1of 4s accepted intervals form 4s 4s 4 cannot seat 4s 2 4s interval table fig 5 shows expected number seats assigned various combinations intervals 4s 2 4s indicates presence interval type intervals form 4s go neither one see table expected number seats like 4n expected number 4s 4s 4 interval 2n one expects 1of intervals form 4s 5 accommodated similar simplied argument gives exactly expectations last two types extra intervals gives expected number extra intervals accommodated random n 1 1 k 2 5nk 2 hence ratio number requests accommodated random number requests given n 2 k congruent 2 modulo 4 n 3 congruent 0 modulo 3 similar results hold giving rst n mod 3 1 k requests using sequence requests previous proof thus using last stations gives upper bounds form 17k c 1 constants c 1 c 2 depend value k mod 4 concluding remarks shown fair deterministic algorithm unit price seat reservation problem asymptotic competitive ratio 1on accommodating sequences interesting open problem remaining whether exists randomized algorithm better particular competitive ratio algorithm random accommodating sequences shown 3when 17for n 3 however best known lower bound performance still 1for n 3 acknowledgments bach supported part nsf grant ccr9510244 joan boyar would like thank faith fich interesting discussions regarding seat reservation problem seats joan boyar kim larsen carried part work visiting department computer sciences university wisconsin madison supported part snf denmark part nsf us grant ccr9510244 part esprit long term research programme eu project number 20244 alcomit joan boyar lene favrholdt kim larsen supported part ist programme eu contract number ist199914186 alcomft tao jiang guohui lin supported part nserc research grant ogp0046613 cito grant tao jiang supported part ucr startup grant rob van stee supported netherlands organization scientic research nwo project number sion 61230002 r accommodating ratio seat reservation problem better bounds accommodating ratio seat reservation problem seat reservation problem accommodating function kcoloring intervals algorithms minimum coloring graph coloring problems wiley exact approximation algorithms operational fixed interval scheduling problem tr efficient routing alloptical networks bandwidth allocation preemption efficient online call control algorithms online interval scheduling competitive nonpreemptive call control kcoloring intervals accommodating function generalization competitive ratio better bounds accommodating ratio seat reservation problem online competive algorithms call admission optical networks accommodating ratio seat reservation problem ctr joan boyar susan krarup morten n nielsen seat reservation allowing seat changes journal algorithms v52 n2 p169192 august 2004 marek chrobak sigact news online algorithms column 8 acm sigact news v36 n3 september 2005