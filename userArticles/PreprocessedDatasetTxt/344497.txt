theorybased representation objectoriented domain models abstractformal software specification long touted way increase quality reliability software however remains intricate manually intensive activity alternative using formal specifications directly translate graphically based semiformal specifications formal specifications however translation take place formal definition basic objectoriented concepts must found paper presents algebraic model objectorientation defines objectoriented concepts represented algebraically using objectoriented algebraic specification language oslang oslang combines basic algebraic specification constructs category theory operations capture internal object class structure well relationships classes b introduction field software engineering continues evolve toward traditional engineering dis cipline concept emerging important evolution use formal specifications representation software requirements formal language 12 representation many potential benefits ranging improvement quality specification automatic generation executable code impressive results emerged utilization formal specifications 34 development formal specifications represent users requirements still difficult task restricted adoption formal specifications practitioners hand approach requirements modeling gaining acceptance use objectoriented methods initially introduced programming paradigm application extended entire software lifecycle informal approach consisting graphical representations natural language descriptions many variations rum baughs object modeling technique omt typical perhaps widely referenced 5 omt three models combined capture essence software system object model captures structural aspects system defining objects attributes relationships associations behavior system captured two models dynamic model captures control flow classical statetransition model statechart functional model represents system calculations hierarchical data flow diagrams process descriptions three models needed capture software systems requirements although given system one two models may lesser importance even omitted systems kids 3 specware 6 making progress software synthesis research acquisition formal specifications keeping pace formal specification software remains intricate manually intensive activity problems associated specification acquisition include lack expertise mathematical logical concepts among software developers inability effectively communicate formal specifications end users validate requirements tendency formal notations restrict solution creativity 7 fraser et al suggest approach overcoming problems via parallel refinement semiformal formal specifications parallel refinement approach designers develop specifications using semiformal formal representations successively refining representations parallel 7 fig 1 shows concept parallel refinement system formal specification development system domain engineer would use graphicallybased objectoriented interface specify domain model domain model would automatically translated formal class theories stored library user knowledgeable domain would use graphicallybased objectoriented interface refine domain model problem specific formal functional specification finally software engineer would map functional specification appropriate formal architecture theory generating specification capable transformed code system specware bailor approved system specifications specification structuring domain engineering specification generation objectoriented user interface specification acquisition mechanism domain knowledge domain theory composition subsystem class theories theory library abstract types problem requirements architecture theories specification generationrefinement subsystem architecture matching subsystem functional specifications design decisions nonfunctional functional figure 1 parallel refinement specification acquisition mechanism critical element success system definition formal representation captures important aspects objectorientation along formal represention syntax semantics informal model mapping ensuring full equivalence informal formal models formal representation informal model done bits pieces 8910 full consistent integrated formal object model exist paper describes method fully representing objectoriented model using algebraic theories 11 algebraic language oslang defined extension kestrel institutes slang 12 oslang supports algebraic representation objects allows use category theory operations morphisms colimits combine primitive object specifications form complex aggregates extend object specifications capture multiple inheritance 13 using formal representation along formal transformations informal model demonstrated automatic generation formal algebraic specifications commercially available object oriented case tools remainder paper organized follows section 2 discusses related work section 3 presents basic algebraic category theory concepts section 4 introduces basic object model sections 5 7 describe inheritance aggregation object communication detail finally section 8 discusses contributions plans future related work number efforts designed incorporate objectoriented concepts formal specification languages mooz 14 objectz 15 extend z adding objectoriented structures maintaining modelbased semantics z 16 ooze 17 also extend z provide semantics based algebra category theory although z extensions provide enhanced structuring techniques provide improved specification acquisition meth ods foops 18 algebraic objectoriented specification language based obj3 19 foops obj3 focus prototyping provide little support specification acqui sition research directed toward improving specification acquisition translating objectoriented specifications formal specifications 10 however techniques based z lack strong notion refinement specification code 3 theory fundamentals theorybased algebraic specification concerned 1 modeling system behavior using algebras collection values operations values axioms characterize algebra behavior 2 composition larger specifications smaller specifications composition specifications accomplished via specification building operations defined category theory constructs 20 theory set assertions logically proved axioms given specification thus specification defines theory termed theory presentation algebraic specifications structure specification defined terms sorts abstract collections values operations sorts structure called signature signature describes structure solution however signature specify semantics specify semantics definition signature extended axioms defining intended semantics signature operations signature associated axioms called specification example specification shown figure 2 spec array sorts e operations apply axioms 8 e figure 2 array specification specification allows us formally define internal structure object classes attributes operations however provide capability reason relationships object classes create theorybased algebraic specifications parallel objectoriented specifications ability define reason relationships theories similar used objectoriented approaches inheritance aggregation etc must available category theory abstract mathematical theory used describe external structure various mathematical systems 21 used describe relationships specifications category consists collection cobjects carrows objects 1 carrow object 2 carrows composable 3 arrow composition associative obvious example category set cobjects sets c arrows functions sets however greater interest research category spec spec consists specifications cobjects specification morphisms c arrows specification morphism oe pair functions map sorts oe operations spec finitemap sorts r operations apply axioms 8 figure 3 finite map specification oeomega one specification compatible sorts operations second specification axioms first specification theorems second specification intuitively specification morphisms define one specification embedded another example morphism array finitemap figure 3 shown apply 7 applyg specification morphisms comprise basic tool defining refining specifications toolset extended allow creation new specifications set existing spec ifications often two specifications derived common ancestor specification need combined desired combination consists unique parts two specifications shared part common specifications part defined shared ancestor specifica tion combining operation colimit conceptually colimit shared union set specifications based morphisms specifications morphisms define equivalence classes sorts operations example morphism oe specification specification b maps sort ff sort fi ff fi equivalence class thus become single sort colimit specification b oe colimit operation creates new specification colimit specification specification morphism specification colimit specification example showing relationship colimit multiple inheritance provided section 5 basic tools morphisms colimits construct specifications number ways 20 1 build specification signature set axioms 2 form union set specifications via colimit 3 rename sorts operations via specification morphism 4 parameterize specifications many methods useful translating objectoriented specifications theorybased specifications detailed semantics objectoriented concepts using specifications category theory constructs presented next 4 object classes building block objectorientation object class defines structure object response external stimuli based current state formally defined section 41 class type class template individual object instances created fig 4 shows specification banking account class oslang 41 class structure theorybased object model capture structure class theory presentation algebraic specification follows class type c signature hsomega set axioms phi sigma ie theory presentation specification denotes set sorts including class sort omega denotes set functions phi denotes set axioms sigma sorts used describe collections data values used specification oslang distinguished sort class sort set possible objects class algebraic sense really set possible abstract value representations objects class functions inomega classified oslang syntax attributes methods stateattributes states class acct import amnt date class sort acct sorts acctstate operations attributes stateattributes methods createacct states events newacct axioms state uniqueness invariant axioms operation definitions method definitions event definitions 8 acct x amnt acctstateaok 8 acct x amnt acctstateaoverdrawn endclass figure 4 object class events operations attributes defined implicitly visible functions return specific data values fig 4 functions date bal attributes methods nonvisible functions invoked via visible events modify objects attribute values methods domain includes object along additional parameters return value always modified object fig 4 functions createacct credit debit methods semantics functions well invariants class attribute values defined using first order predicate logic axioms general axioms define methods describing effects attribute values following example 42 class behavior states model state partition crossproduct objects attribute values example bank account might partitioned ok overdrawn state based partitioning balance values formally class type least one state sort multiple state sorts allow modeling concurrent state models substate models set states elements state sort defined nullary functions state attribute defined state sort function returns current state object set state invariants axioms describe constraints class attributes must hold true given state object model separate state attributes normal attributes capture notion objects abstract state might defined statechart values state attributes define objects abstract state values normal attributes define objects true state fig 4 class state sort acctstate class state attribute acctstate state constants ok overdrawn state invariants axioms state balance account greater equal zero account must ok state however balance account becomes less zero state must become overdrawn tempting replace implication operators equivalence operators would unnecessarily restrict subclasses derived class defined section 5 additionally axiom ok 6 overdrawn ensures correct interpretation specification states ok overdrawn distinct events events visible functions allow objects communicate may directly modify state attributes present detailed discussion specificaiton communication objects section 7 side effect receipt event may cause invocation methods generation events sent objects events distinct methods separate control execution separation keeps us embed statebased control information within methods class new event triggers create method initializes objects state attributes fig 4 functions newacct deposit withdrawal events effect events class behavior represented statechart fig 5 defined set axioms similar following axiom fig 4 ok overdrawn depositaxcreditax newacctd figure 5 account statechart class operations operations visible functions generally used compute derived attributes may directly modify attribute values fig 4 function acctattrequal operation similar methods events semantics operations defined using first order predicate logic axioms inheritance class inheritance plays important role objectorientation however correct use inheritance uniformly agreed upon work chosen use strict form inheritance allows subclass object freely substituted superclass situa tion subtype interpretation selected simplify reasoning classs properties keep closely related software synthesis concepts 6 believe advantages strict inheritance outweight disadvantages research since arguments favoring less strict approach inheritance polymorphism overloading much germane implementation specification thus subtype subclass may extend features superclass liskov defines desired effects substitution property 22 object type object type programs p defined terms behavior p unchanged substituted subtype way ensure substitution property holds cases ensure effects superclass operations performed object equivalent subclass superclass achieve inheritance must provide mapping sorts operations attributes superclass subclass preserve semantics superclass basic definition specification morphism extended oslang map class sorts classsorts attributes attributes methods methods etc provides us formal definition inheritance 13 specification morphisms map sorts operations one algebraic specification sorts operations second specification axioms first specification theorems second specification 13 thus essence specification morphism defines embedding functionality one specification second specification class said inherit class c denoted exists specification morphism c class sort subsort class sort c ie cs provides concise mathematically precise definition inheritance ensures preservation substitution property stated theorem 1 11 theorem 1 given specification morphism oe c two internally consistent classes c cs substitution property holds c since assume user defined specifications initially consistent ensure consistency subclass long user introduce new axioms subclass redefine method defined superclass affects attribute also defined superclass example single inheritance using subclass acct class shown fig 6 import statement includes sorts functions axioms declared acct class directly new class class sort declaration sacct acct states sacct subsort acct functions axioms apply acct object apply sacct object well statechart sacct shown fig 7 import operation defines specification morphism acct sacct subsort declaration completes requirements definition 2 inheritance therefore sacct valid subclass acct substitution property holds 51 multiple inheritance multiple inheritance requires slight modification notion inheritance stated definition 2 set superclasses must first combined via category theory colimit operation used inherit based specification morphisms colimit operation composes set existing specifications create new colimit specification 21 new colimit specification contains sorts functions original set specifications without duplicating shared sorts functions common ancestor specification conceptually colimit set specifications shared union specifications therefore colimit operation creates new specification colimit specification morphism specification colimit specification definition 3 multiple inheritance class multiply inherits set classes fc 1 g exists specification morphism colimit fc 1 c n g class sort subsort class sorts fc 1 c n g definition states sorts operations superclass map sorts operations subclass defining axioms logical consequences axioms class sacct import acct rate class operations attributes rate methods createsacct events newsacct computeinterest sacct date sacct axioms 8 date r rate a1 sacct operation definitions method definition 8 sacct amnt 8 sacct amnt event definitions endclass figure savings class ok overdrawn depositaxcreditax ratechangeadr ratechangeadr computeinterestad intad figure 7 savings account statechart subclass implies operations defined superclasses applicable subclass well definition ensures subclass inherits sense definition 2 superclass fc 1 c n g shown theorem 2 11 theorem 2 given specification morphism colimit fc 1 c n g class sort subsort class sorts fc 1 c n g substitution property holds superclasses fc 1 c n g important note definition 3 ensures valid inheritance axioms defining operation superclass specifications fc 1 c n complete failure completely define operations result inconsistent colimit specifications 11 use multiple inheritance combine features savings account checking account cacct defined fig 8 compute resulting class colimit classes acct sacct cacct morphisms acct sacct cacct computed shown fig 9 arrow labeled represents import morphism c represents morphism formed colimit operation simple extension colimit specification class sort definition combacct sacct cacct yields desired class combacct subclass sacct cacct denoted operator class sort definition fig 10 shows long version combined specification signature attributes methods events inherited combacct class axioms omitted brevity class cacct import acct class sort cacct acct operations attributes checkcost methods createcacct setcheckcost cacct amnt cacct events newcacct changecheckcost cacct amnt cacct axioms 8 cacct x amnt axioms omitted endclass figure 8 checking class sacct cacct acct combacct c c c figure 9 colimit accounts class combacct import sacct cacct class sorts acctstate operations attributes rate checkcost stateattributes methods createacct combacct createsacct combacct createcacct combacct createcombacct combacct combacct combacct combacct combacct setcheckcost combacct combacct states events newacct combacct newsacct combacct newcacct combacct newcombacct combacct combacct combacct combacct computeinterest combacct changecheckcost combacct combacct axioms 8 cacct x amnt axioms omitted figure 10 combined account signature 6 aggregation aggregation relationship two classes one class aggregate represents entire assembly class component partof assembly aggregate classes allow modeling systems components also provide convenient context define constraints associations components aggregate class behavior defined components constraints thus aggregates impose architecture domain model specifications derived components aggregate class modeled similarly attributes class concept objectvalued attributes objectvalued attribute class attribute whose sort type set objects classsort another class formally specification functions take object return external object set objects effects methods objectvalued attributes similar normal attributes however instead directly specifying new value objectvalued attribute event sent object stored objectvalued attribute formally define aggregate using colimit operation objectvalued attributes class c aggregate set component classes fd 1 n g exists specification morphism colimit fd 1 n g c c least one corresponding objectvalued attribute class sort fd 1 n g aggregate class combines number classes via colimit operation specify system subsystem colimit operation also unifies sorts functions defined separate classes associations ensure associations actually relate two specific classes capture domain model within single structure create domainlevel aggregate create aggregate colimit classes associations within domain taken 61 aggregate structure aggregate consists number classes provides convenient means define additional constructs relationships constructs include class sets individual components associations 611 class set class type definition specifies template creating new instances order manage set objects class class set created class defined class set class whose class sort set objects previously defined object class c class set includes class event definition event c reception class event class set object sends corresponding event c object type c contained class set object class c subclass class set c subclass class sets 1 n class set creates class type whose class sort set objects defines basic functions set example fig 11 acctclass imports acct class specifica class acctclass containedclass acct class sort acctclass events axioms endclass figure 11 oslang class set specification tion adds additional class events class events mirror object events defined class type distribute event invocation object class set resulting specification effectively set acct objects using category theory colimit operation class type specification combined basic set specification automatically derive class set specification 612 specification components components may either fixed variable recursive structure three structures use objectvalued attributes reference objects define aggregate difference lies types objects referenced functions axioms defined objectvalued attributes fixed configuration aggregate references particular object reference may changed ability aggregate object change object references objectvalued attributes determined whether method exists initialization method modify objectvalued attribute methods modify objectvalued attributes aggregate fixed methods modify object valued attributes aggregate variable recursive structure also easily represented using objectvalued attributes case objectvalued attribute defined class type references class sort 613 associations associations model relationships aggregates components define link single connection object instances association group links link defines object classes may connected along attributes functions defined link link attributes link functions belong one objects involved exist link objects formally associations represented generically specification defines set individual links link defines specification uses objectvalued attributes reference individual objects two classes links may also define link attributes functions manner identical object classes basically link class whose classset association association set links associations two classes handled similar manner simply adding additional objectvalued attributes definition 6 link link object class type two objectvalued attributes definition 7 association association class set link specification multiplicity defined number links association given object may participate binary association image operation defined class associ ation image operation returns set objects particular object associated used define multiplicity constraints shown fig 12 binary associations allow five categories association multiplicities exactly one many optional one numerically specified true ternary higher level associations relatively rare however exactly one 7 many 7 optional 7 one 7 numerically specified 7 numerically specified 7 figure 12 association multiplicity axioms modeled using association class ternary association image operation returns set object tuples associated given object since output set tuples multiplicity axioms shown fig 12 apply 614 banking example example link specification class customers cust illustrated acct class associate customers accounts shown fig 13 calink link specification relate objects two classes without embedding internal references classes although names objectvalued attributes sorts correspond customer acct classes link specification formally tie classes together relationship actually formalized aggregate specification association acct class customer class shown fig 14 custacct class defines set calink objects axioms define multiplicity relationships accounts customers case exactly one customer per account customer may one accounts customer acct custacct classes combined form aggregate bank sorts cust custacct sorts acct custacct unified via specification morphisms define equivalence shown fig 15 actual specification aggregation colimit bankaggregate shown refined aggregate specification bank seen fig 16 set specification used unify sorts integer specification ensures single copy integers included three copies set specification included since class requires unique set bankaggregate specification computed custacct association actually associates customer class acct class new functions axioms link calink class sort calink sorts customer account operations attributes customer account methods events axioms operation definition create method definition 8 c customer account new event definition 8 c customer account calinkattrequalnewcalinkca createcalinkca endlink figure 13 customer account link association custacct linkclass calink class sort custacct sorts accounts customers methods image custacct customer accounts customers events newcustacct custacct axioms multiplicity axioms new event definition definition image operations endassociation figure 14 custacct association acctclass custclass custacct bankaggregate c c integer c bank figure 15 aggregation composition class bank import class sort bank attributes custacct methods aggregate methods defined updateaccts updatecustacct custacct events startaccount axioms definition aggregate methods terms components invariants definition operations 8 b bank address acctno c customer definition methods 8 b b1 bank acctno c customer addaccountb c date built definition events attrequalnewbank createbank 8 bbank anacctno ccustomer attrequalstartaccountbcanaddaccountbcan 8 b bank acctno c customer amount 8 b bank acctno c customer amount endclass figure aggregate specification added extension colimit specification bank class type specification shown fig 16 describe aggregatelevel interfaces aggregate behavior based component events methods 62 aggregate behavior aggregate created via colimit operation specification required make aggregate behave integrated manner first new aggregate level functions defined enable aggregate respond external events constraints aggregate components specified ensure aggregate behave unsuitable unexpected manner finally local event communication paths defined definition new functions constraints discussed section communication objects discussed section 7 621 specification functionality aggregate components work together provide desired functionality functional decomposition often depicted using data flow diagrams dfds used break aggregatelevel methods lowerlevel processes processes defined functional model mapped events attributes defined aggregate components aggregatelevel axioms example shown data flow diagram fig 17 aggregate method addaccount used implement aggregate event startaccount makedeposit makewithdrawal events map directly component events require functional decomposition addaccount process adds account established customer defined terms operations defined directly bank specification figure 16 included bank specification via bank aggregate specification customeraccount link specification figure account specification figure 4 following axiom defines addaccount terms subprocesses data flows depicted data flow diagram addaccount customer new calink new account acct customer acct update custacct custacctassoc custacct update accts acct custacct figure 17 bank aggregate functional decomposition assume date built addaccount method two parameters bank object b plus existing customer object shown data flow diagram returns modified bank object b1 addaccount method defined subprocesses first new account acct created invoking newacct process passed updateaccts process stores new account account class newcalink process along customer returns custacct link finally new custacct link passed updatecustacct process stores custacct association newacct newcalink processes events defined acct class calink association respectively already available via aggregate updateaccts updatecustacct processes could already exist part account class custacct association shown defined aggregate specification 622 specification constraints components aggregate component behavior must often constrained aggregate act integrated fashion generally constraints expressed axioms defined component attributes aggregate colimit components aggregate may access components directly define axioms relating various component attributes engine wheel transmissiondrives automobilerpms conversionfactor rpms connected figure automobile aggregate functional decomposition simplified automobile object diagram shown fig 18 object diagram contains one engine rpms attribute one transmission conversionfactor attribute four wheels rpms attribute two relationships exist objects drives relates transmission exactly two wheels connected relates two wheels probably axle obviously number constraints implicit object diagram must made explicit aggregate first rpms engine conversionfactor transmission rpms wheels related also wheels driven transmission must connected connected wheels rpms axiom defines relationship rpms wheels driven transmission transmission conversionfactor engine rpms case wheelobj object valued attribute drives link points two wheels connected transmission axiom ensures two wheels connected connected link rpms values wheel1 wheel2 object valued attributes link final constraint two wheels driven transmission connected specified implicitly specification createautomobile method transmission wheel objects w1 w2 w3 w4 created lines 1 5 drives connected links created defined ensure appropriate constraints met lines 6 9 finally line 10 engine created inserted automobile aggregate wheels w1 w2 associated transmission via drives association line 6 also associated together via connected association line 8 thus constraint satisfied whenever automobile aggregate object created 7 object communication point theorybased object model sufficient describing classes relationships composition aggregate classes however objects communicate yet addressed example suppose banking system described earlier archive object logs transaction occurs obviously archive object must told transaction takes place model object aware certain set events generates receives objects perspective events generated broadcast entire system received system scheme event defined separate event theory shown fig 19 event theory consists class sort parameter sorts event signature mapped via morphisms sorts events generating receiving classes event sent single object event theory class sort mapped class sort event archivewithdrawal class sort archive sorts acct amnt events archive endclass figure 19 event theory object class however event theory class sort mapped class sort class set communication may occur set objects class sorts event theory class sorts event parameters final part event theory event signature mapped compatible event signature receiving class colimit classes event theory morphisms unify event sorts invocation event generating class corresponds invocation actual event receiving class incorporate event original acct class archivewithdrawal event theory specification imported acct class objectvalued attribute archiveobj added reference archival object axioms defining effect withdrawal event modified reflect communication archive object shown basically axioms state withdrawal event received value archiveobj modified archivewithdrawal event defined event theory specification thus acct object knows communicates object objects however know object communicates matter object communicates determined aggregatelevel actual connections communicating components made modified bank aggregate diagram includes archivewithdrawal event theory archiveclass specification shown fig 20 colimit operation includes morphisms archivewithdrawal acctclass archiveclass unify sorts event signature acctclass sorts event signature archiveclass unification creates communication path account objects archive objects acctclass custclass custacct bank archivewithdrawal archiveclass c c figure 20 bank aggregate archive communicating objects multiple classes requires addition another level specification broadcasts communication event interested object classes class sort broadcast theory called broadcast sort represents object sending object communicates broadcast theory defines objectvalued attribute receiving class fig 21 shows example archivewithdrawalmult event theory modified communicate two classes case archivewithdrawal theory used unify archivewithdrawalmult account class well two classes simplified version colimit diagram specification shown fig 22 multiple receiver classes add layer specification however multiple sending classes handled simply additional construct required morphism sending class event theory mapping appropriate objectvalued attribute sending class class sort event theory event signature sending class event signature event theory event archivewithdrawalmult class sort archive sorts amnt acct x attribute events archive axioms 8 archive ac acct amnt endclass figure 21 broadcast theory acctclass custclass custacct bank archiveclass printerclass archivewithdrawalmult c c c c c archive archive archive c c c c figure 22 aggregate using broadcast theory 71 communication aggregate components communication components handled aggregate level described ever communication aggregate one components unification objectvalued attributes class sorts via event theories work since class sort aggregate created colimit computed solution requires use sort axiom equivalences two sorts shown using bank example discussed assume archivewithdrawal event also received bank aggregate archivewithdrawal event theory included account class type colimit operation bank aggregate enable bank aggregate receive archivewithdrawal event sortaxiom used bank specification equivalence bank sort aggregate archive sort event theory shown archive use sort axiom unifies bank sort archive sort thus signatures archivewithdrawal events defined event theory bank aggregate become equivalent communication aggregate components subcomponents much simpler since aggregate includes sorts functions axioms components subcomponents via colimit operations aggregate directly reference components objectvalued attributes declared either components aggregate aware configuration determining correct objectvalued attribute use problem 8 discussion results future efforts 81 object model research establishes formal mathematical representation objectoriented paradigm within category theory setting theorybased object model classes defined theory presentations specifications basic objectoriented concepts inheritance aggregation association interobject communication formally defined using category theory opera tions work formalizing aspects objectorientation exists 2381824 25 first formalize important aspects objectorientation cohesive computationally tractable framework fact formalization inheritance aggregation association provides techniques ensuring consistency objectoriented specifications based composition process completeness integrated model allows capture objectoriented model formal specification furthermore algebraic language oslang allows straightforward translation existing algebraic languages slang larch transformation executable code thus model provides bridge existing informal case tools existing formal specification languages tying ease use former technical advantages latter 82 application object model show applicability theorybased object model developed proof concept parallelrefinement specification acquisition system system used commercially available omtbased objectoriented case tool capture informal specification included graphical representation object dynamic functional models along textual input form method definitions classlevel constraints neither graphical format defined omt generally easier define directly using firstorder axioms output userinterface parsed translated oslang based theorybased object model translation graphicallybased input oslang completely automated two complete objectoriented domain models developed using system school records database fuel pumping station domains chosen demonstrate wide diversity domains stressing functional dynamic aspects supported model total 37 classes including 76 methods operations 89 attributes 5 aggregates events 7 associations specified domain models sufficiently large diverse demonstrate application theorybased model support realistic problem domains 83 future plans definition theorybased models mapped 11 informal representation provides necessary framework parallel refinement system specification development shown fig 1 theorybased object model allows development domain model library class theories oslang representation next transformed slang specification straightforward manner allow full use specware development system specware system already demonstrated ability generate executable code algebraic specifications thus technology exists transform informal objectoriented models correct executable code class theories translated code desired approach treat full domain model specific specification developed input design processing thus next step development specification generationrefinement subsystem fig 1 elicitorharvester elicit requirements user reasoning domain model harvesting components domain model build desired specification ability map informal model theorybased object model allow user interface system using familiar informal representation formal model support reasoning needed guide user well assuring harvested specification remains consistent constraints domain model acknowledgments work supported grants rome laboratory national security agency air force office scientific research r report knowledgebased software assistant software engineering twentyfirst century kids semiautomatic program development system transformational approach transportation scheduling diagrams software synthesis strategies incorporating formal speci fications formal semantics object model diagrams statecharts visual formalism complex systems teaching formal extensions informalbased objectoriented analysis methodologies formal transformations graphicallybased objectoriented representations theorybased specification kestrel institute fundamental algebraic tools semantics computation part comma categories colimits signatures theories specifying conceptrecognition system z objectz objectoriented extension z comparative description objectoriented specification languages specification ooze examples unifying functional objectoriented relational programming logical semantics introducing obj3 algebraic specification syntax semantics structure category theory definitions examples data abstraction hierarchy practical consequences formal defintions inheritance algebraic theory objectoriented systems modelling multiple inheritance colimits tr ctr ana mara funes chris george formalizing uml class diagrams uml unified process idea group publishing hershey pa