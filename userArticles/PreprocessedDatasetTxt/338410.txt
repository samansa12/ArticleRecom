strategies combined learning via logic programs discuss adoption threevalued setting inductive concept learning distinguishing true false unknown useful situations decisions taken basis scarce ambiguous downright contradictory information threevalued setting learn definition target concept opposite considering positive negative examples instances two disjoint classes purpose adopt extended logic programs elp wellfounded semantics explicit negation wfsx representation formalism learning show elps used specify combinations strategies declarative way also coping contradiction exceptionsexplicit negation used represent opposite concept default negation used ensure consistency handle exceptions general rules exceptions represented examples covered definition concept belong training set opposite conceptstandard inductive logic programming techniques employed learn concept opposite depending adopted technique learn general least general definition thus four epistemological varieties occur resulting combination general least general solutions positive negative concept discuss factors taken account choosing strategically combining generality levels positive negative conceptsin paper also handle issue strategic combination possibly contradictory learnt definitions predicate explicit negationall show extended logic programs wellfounded semantics explicit negation add expressivity learning tasks allow tackling number representation strategic issues principled wayour techniques implemented examples run stateoftheart logic programming system tabling implements wfsx b introduction work inductive concept learning considers twovalued setting setting entailed learned theory considered false basis closed world assumption cwa 44 however practice often case confident truth falsity limited number facts able draw conclusion remaining ones available information scarce like pointed 13 10 typically case autonomous agent incremental way gathers information surrounding world agent needs distinguish true false unknown therefore needs learn within richer threevalued setting purpose adopt class extended logic programs elp short sequel representation language learning threevalued setting elp contains two kinds negation default negation plus second form nega tion called explicit whose combination recognized elsewhere expressive means knowledge representation adoption elp allows one deal directly language incomplete contradictory knowledge exceptions default negation well truly negative information means explicit negation 39 2 3 instance 2 5 16 9 32 shown elp applicable diverse domains knowledge representation concept hierarchies reasoning actions belief revision counterfactuals diagnosis updates debugging work show first time journal various approaches strategies adopted inductive logic programming ilp henceforth learning elp extension wellfounded semantics 25 24 answersets semantics used learning process starts set positive negative examples plus background knowledge form extended logic program positive negative information training set treated equally learning definition positive concept p explicitly negated concept p coverage examples tested adopting slx interpreter elp wellfounded semantics explicit negation defined 2 16 valid paraconsistent version 9 negation used learning process handle exceptions general rules exceptions positive concept identified negative examples whereas exceptions negative concept identified positive examples work adopt standard ilp techniques learn concept opposite depending technique adopted one learn general least general definition concept accordingly four epistemological varieties occur resulting mutual combination general least general solutions positive negative concept possibilities expressed via elp discuss factors taken account choosing level generality combination define specific learning strategy cope contradictions paper concentrate single predicate learning sake simplicity indeed separately learned positive negative concepts may conflict order handle possible contradiction contradictory learned rules made defeasible making learned definition positive concept p depend default negation negative concept p viceversa ie definition introduced exception way coping contradiction even generalized learning n disjoint classes modified order take account preferences among multiple learning agents information sources see 28 paper organized follows first motivate use elp target background language section 2 introduce new ilp framework section 3 examine section 4 factors taken account choosing level generality learned theories section 5 proposes combine learned definitions within elp order avoid inconsistencies unseen atoms opposites use mutually defeating nondeterministic rules incorporate exceptions negation default description algorithm learning elp follows next section 6 overall system implementation section 7 section 8 evaluates obtained classification accuracy finally examine related works section 9 conclude 2 logic programming epistemic preliminaries section first discuss motivation threevaluedness two types negation knowledge representation provide basic notions extended logic programs w fsx 21 threevaluedness default explicit negation artificial intelligence ai needs deal knowledge flux less perfect conditions means dynamic forms logic classical logic much focus research logic programming lp field ai uses logic directly programming language 1 provides specific implementation methods efficient working systems 2 horn clause notation used express conclusions must supported caused premises implication unidirectional ie contrapositive causes run backwards various extensions lp introduced cope knowledge representation issues instance default negation atom p p introduced ai deal lack information common situation real world introduces nonmonotonicity knowledge representation indeed conclusions might solid rules leading may defeasible stance dont normally explicit information lover though kind information may arrive unexpectedly thus loverh l ie evidence conclude loverh l l given h assume false l given h mark grant positive negative information equal standing equally able write model instead world people unfaithful default custom required explicitly prove someone take lover concluding person unfaithful since information normally expressed positively dint mental linguistic economics closed world assumption cwa absent non explicitly obtainable information usually negation positive information means information available lovers loverh l true cwa whereas loverh l indeed whereas cwa indispensable contexts viz airports flights listed assumed nonexistent others though ones residence might listed phone book may ruled exists phone epistemologic requisites reconciled reading classical negation complies excluded middle provision yet new form negation dubbed logic programming explicit negation 39 ignores provision adopted elp requires need revising assumptions introducing third truth value named undefined framework fact combine instance viewpoints two worlds faithfulness become confused assuming marriedh k h k appears faithfulh k faithfulh k contradictorily true indeed since evidence loverh l loverh l simply information make two simultaneous assumptions falsity assumption leads contradiction one retract threevalued setting means making undefined imposition undefinedness loverh l loverh l achieved simply adding knowledge clauses loverh l loverh l loverh l loverh l thereby making faithfulh k faithfulh k undefined given information prove neither loverh l loverh l true false attempt runs selfreferential circle involving default negation safest skeptical third option take side marital dispute abstain believing either even presence selfreferential loops involving default negations wellfounded semantics logic programs wfs assigns literals two clauses truth value undefined knowledge skeptical wellfounded model allows also two incompatible non truthminimal credulous models 22 extended logic programs extended logic program finite set rules form n 0 l 0 objective literal l literals rule stands sets ground instances objective literals form atom literal either objective literal l default negation l said opposite literal vice versa complementary literal vice versa fa mean fnot g literals mean fa g set objective literals program p called extended herbrand base represented h e p interpretation extended program p denoted f f disjoint subsets h e p objective literals said true objective literals f said false h said undefined introduce language proposition u undefined every interpretation wfsx extends well founded semantics wfs 46 normal logic programs case extended logic programs wfsx obtained wfs adding coherence principle relating two forms negation l objective literal l belongs model program also l belongs model ie l l notice thanks principle interpretation f extended logic program p considered wfsx semantics noncontradictory ie pair objective literals program p belongs belongs 2 definition wfsx reported appendix objective literal true wfsx elp p write let us show example wfsx case simple program example consider following extended logic program b wfsx model program b ag true false b false rules b b undefined notice model since implied via coherence principle one important characteristic wfsx provides semantics important class extended logic programs set nonstratified pro grams ie set programs contain recursion default negation extended logic program stratified dependency graph contain cycle arc labelled gamma dependency graph program p labelled graph node predicate p arc predicate p predicate q q appears body clauses p head arc labelled appears objective literal body gamma appears default literal nonstratified programs useful knowledge representation wfsx semantics assigns truth value undefined literals involved recursive cycle negation shown section 21 loverh l loverh l section 5 employ non stratified programs order resolve possible contradictions wfsx chosen among semantics extended logic programs answersets 21 threevalued strong negation 3 none others enjoy property relevance 2 3 nonstratified programs ie cannot topdown querying procedures nonstratified programs instead wfsx exists topdown proof procedure slx 2 correct respect semantics cumulativity also enjoyed wfsx ie add lemma semantics change see 2 property important speedingup implemen tation memorizing intermediate lemmas tabling implementation slx greatly improves answerset semantics however cumulative nonstratified programs thus cannot use tabling slx topdown procedure wfsx relies two independent kinds derivations tderivations proving truth tuderivations proving nonfalsity ie truth undefinedness shifting one required proving default literal l tderivation l succeeds tuderivation l fails tuderivation l succeeds tderivation l fails moreover tderivation l also succeeds tderivation l succeeds tuderivation l fails tderivation l succeeds thus taking account coherence principle given goal g conjunction literals g derived slx elp p write p slx g slx procedure amenable simple preprocessing implementation mapping wfsx programs wfs programs ttu transformation 8 transformation linear essentially doubles number program clauses transformed program executed xsb efficient logic programming system implements polynomial complexity wfs tabling subsumes prolog tabling xsb consists memoizing intermediate lemmas properly dealing nonstratification according wfs tabling important learning computations often repeated testing coverage otherwise examples allows computing wfs simple polynomial complexity program size 3 learning threevalued setting realworld problems complete information world impossible achieve necessary reason act basis available partial information situations incomplete knowledge important distinguish true false unknown undefined situation occurs example agent incrementally gathers information surrounding world select actions basis acquired knowledge agent learns twovalued setting encounter problems highlighted 13 learning specific general way learn cautious definition target concept able distinguish false yet known see figure 1a supposing target predicate represents allowed actions agent distinguish forbidden actions actions outcome restrict agent acting power agent learns general specific way instead know difference true unknown figure 1b therefore try actions unknown outcome rather learning threevalued setting able distinguish allowed actions forbidden actions actions unknown outcome figure 1c way agent know part domain needs explored try actions unknown outcome unless trying expand knowledge figure 1 taken 13ab twovalued setting c threevalued setting therefore consider new learning problem want learn elp background knowledge elp set positive set negative examples form ground facts target predicates learning problem elps first introduced 25 notion coverage defined means truth answerset semantics problem definition modified consider coverage truth preferred wfsx semantics definition 1 learning extended logic programs given ffl set p possible extended logic programs ffl set e positive examples ground facts ffl set e gamma negative examples ground facts ffl noncontradictory extended logic program b background knowledge 4 find ffl extended logic program p 2 p eg suppose training sets e disjoint however system also able work overlapping training sets learned theory contain rules form every target predicate p stands tuple arguments order satisfy completeness requirement rules p entail positive examples rules p entail explicitly negated negative examples consistency requirement satisfied ensuring sets rules entail instances opposite element either training sets note case extended logic programs consistency respect training set equivalent requirement program noncontradictory examples requirement enlarged require program noncontradictory also unseen atoms ie bp 6j every atom l target predicates say example e covered program p p e since slx procedure correct respect wfsx even contradictory programs coverage examples tested verifying whether p slx e approach learning extended logic programs consists initially applying conventional ilp techniques learn positive definition e negative definition techniques slx procedure substitutes standard logic programming proof procedure test coverage examples ilp techniques used depend level generality want two definitions look least general solution lgs general solution mgs problem learning concept complement practice lgs mgs unique real systems usually learn theories least general closely approximate one two following concepts used signify approximations theoretical concepts lgss found adopting one bottomup methods relative least general generalization rlgg 40 golem system 37 inverse resolution 36 inverse entailment 30 conversely mgss found adopting topdown refining method cf 31 system foil 43 progol 35 4 strategies combining different generalizations generality concepts learned important issue learning threevalued setting twovalued setting generality definition chosen extension ie generality set false atoms undesirably automatically decided complement true atoms set threevalued setting rather extension set false atoms depends generality definition learned negative concept therefore corresponding level generality may chosen independently two definitions thus affording four epistemological cases adoption elp allows express case combination declarative smooth way furthermore generality solutions learned positive negative concepts clearly influences interaction definitions learn mgs concept opposite probability intersection nonempty higher learn lgs accordingly decision type solution learn take account possibility interaction well want reduce possibility learn two lgs care interaction learn two mgs general may learn different generalizations combine distinct ways different strategic purposes within application problem choice level generality made basis available knowledge domain two criteria taken account damage risk may arise erroneous classification unseen object confidence training set correctness representativeness classifying yet unseen object belonging concept may later discover object belongs opposite concept generalize concept higher number unseen atoms covered definition higher risk erroneous classification depending damage may derive mistake may decide take cautious confident approach possible damage extensive concept high one learn lgs concept possible damage low one generalize learn mgs overall risk depend use learned concepts within rules problem selecting solution inductive problem according cost misclassifying examples studied number works predictor 22 able select cautiousness learning operators means meta heuristics metaheuristics make selection based userinput penalty prediction error 41 provides method select classifiers given cost misclassifications prior distribution positive negative instances method based receiver operating characteristic roc graph signal theory depicts classifiers points graph number false positive x axis number true positive axis 38 discussed different costs misclassifying examples taken account number algorithms decision tree learners bayesian classifiers decision lists learners reduced cost algorithm presented selects order rules learned order minimize misclassification costs algorithm pruning decision lists presented attempts minimize costs avoiding overfitting 23 discussed penalty incurred learner outputs wrong classification considered order decide whether acquire additional information active learner regards confidence training set prefer learn mgs concept confident examples opposite concept correct representative concept fact topdown methods negative examples used order delimit generality solution otherwise think examples opposite concept reliable learn lgs following present realistic example kind reasoning used choose specify preferred level generality discuss strategically combine different levels employing elp tools learning example consider person living bad neighbourhood los angeles honest man survive needs two concepts one likely attack basis appearance gang membership age past dealings etc wants take cautious approach maximizes attacker minimizes attacker attacker1 concept allows avoid dangerous situations another concept needs type beggars give money good man actually seem deserve basis appearance health age etc since rich like tricked learns beggar1 concept minimizing beggar maximizing beggar beggar concept allows give money strictly appearing need without faking however rejected beggars especially malicious ones may turn attackers bad neighbourhood consequently thinks beggar might attack better permissive beggar placate money words maximize beggar minimize beggar beggar2 concept concepts used order minimize risk taking carries standards lot money meets someone likely attacker following kind reasoning lot moneyx lot moneyx give moneyx give give lot money may prefer run risks beaten case relax attacker concept attacker2 relax much would use attackermgs various notions attacker beggar learnt basis previous experience man see 29 5 strategies eliminating learned contradictions learnt definitions positive negative concepts may overlap case contradictory classification objective literals intersec tion order resolve conflict must distinguish two types literals intersection belong training set also dubbed unseen atoms see figure 2 following discuss resolve conflict case unseen literals literals training set first consider case training sets disjoint later extend scope case nonempty intersection training sets less perfect onwards stands tuple arguments unseen literals conflict resolved classifying undefined since arguments supporting two classifications equally strong instead literals training set conflict resolved giving priority classification stipulated training set words literals training set covered opposite definition made exceptions definition figure 2 interaction positive negative definitions exceptions contradiction unseen literals unseen literals intersection undefined classification obtained making opposite rules mutually defeasible nondeterministic see 5 2 target theory consequently expressed following way p p x respectively definitions learned positive negative concept obtained renaming positive predicate p explicit negation p gamma onwards indicate superscripts definitions learned separately positive negative concepts want p x p x act exception case contradiction introduce mutual circularity hence undefinedness according wfsx literal intersection p two stable models one containing literal containing opposite literal according wfsx third partial stable model literals undefined ie literal p x p x p x p wellfounded least partial stable model resulting program contains recursion negation ie nonstratified topdown slx procedure go loop comprises mechanisms loop detection treatment implemented xsb tabling example let us consider example section 4 order avoid contradictions unseen atoms learned definitions must mgs x attacker1x lgs x attacker1x lgs x beggar1x mgs x beggar1x mgs x beggar2x lgs x beggar2x lgs x attacker2x lgs x attacker2x note p x x display well undefined truth value either original background nonstratified rely definition learned another target predicate form therefore nonstratified case threevalued semantics produce literals value undefined one p x x may undefined one undefined true rules make p p undefined since negation default undefined literal still undefined however counterintuitive defined value prevail undefined one order handle case suppose system predicate undefinedx available 5 succeeds literal x undefined add following two rules definitions p p according clauses p x true x true x undefined conversely contradiction examples theories tested consistency literals training set conflict however cases useful relax consistency requirement learn clauses cover small amount counter examples advantageous would otherwise impossible learn definition concept clause contained language bias consistent overspecific definition would learned composed many specific clauses instead general ones cases definitions positive negative concepts may cover examples opposite training set must considered exceptions due abnormalities opposite concept let us start case literals covered definition belong opposite training set want course classify according classification given training set making literals exceptions handle exceptions classification rules add negative default literal form abnorm p x x rule p x express possible abnormalities arising exceptions every exception p individual fact form abnorm p resp abnormp asserted rule p x cover exception opposite definition still covers way exceptions figure model theory correct truth value learned theory thus takes form abnorm p p abnormp p abnormality literals added rules undefined case literal exception also example must covered respective definition therefore cannot undefined notice e example p p classified false learned theory different behaviour would obtain slightly changing form learned rules order adopt atoms training set one classification default thus give preference false negative training set true positive training set individual facts form abnorm p used examples learning definition abnorm p abnormp 25 19 turn exceptions definitions abnorm p abnormp might found thus leading hierarchy exceptions hierarchical learning exceptions see 27 example consider domain containing entities b c e f suppose target concept f lies let background knowledge birda wingsa jetb wingsb angelc wingsc limbsc penguind wingsd limbsd doge limbse catf limbsf let training set possible learned theory f liesx f lies x abnormal flies x f liesx f liesx f lies lies abnormal flies f lies x wingsx f liesx gamma limbsx figure 3 coverage definitions opposite concepts example figure 3 show various cases literal learning threevalued setting e examples consistently covered definitions b f unseen literals contradiction c literals contradiction c classified undefined whereas considered exception positive definition classified negative identifying contradictions unseen literals useful interactive theory revision system ask oracle classify literals leading contradiction accordingly revise least general solutions p p using theory revision system revise 7 clint 12 14 detecting uncovered literals points theory extension extended logic programs used well represent one learn n disjoint classes training set contains number facts number predicates definition learned using positive examples literals training set classified belonging p negative examples literals classes following rules ensure consistency unseen literals exceptions abnormal p1 abnormal p2 abnormal pn regardless algorithm used learning 6 algorithm learning extended logic programs algorithm live learning 3valued environment learns elps containing nondeterministic rules concept opposite main procedure algorithm given 1 algorithm live inputs training sets 2 b background theory outputs learned theory 3 4 5 obtain h 6 transforming h p hp nondeterministic rules 7 adding clauses undefined case 8 output h algorithm calls procedure learndefinition given set positive set negative examples background knowledge returns definition positive concept consisting default rules together definitions abnormality literals procedure learndefinition called twice positive concept negative concept called negative used positive training set e negative one learndefinition first calls procedure learne learns definition h p target concept p learn consists ordinary ilp algorithm either bottomup topdown modified adopt slx interpreter testing coverage examples relax consistency requirement solution procedure thus returns theory may cover opposite examples opposite examples treated exceptions adding default literal inconsistent rules adding proper facts abnormality predicate partic ular rule covering negative examples new nonabnormality literal abnormal r x added r facts abnormal r added theory examples abnormal r obtained examples p observing order cover example p p atom abnormal r must false therefore facts abnormal r obtained r opposite examples covered rule 1 procedure learndefinition inputs positive examples 2 negative examples b background theory 3 outputs learned theory 4 5 h h p 6 rule r h p 7 find sets r positive negative examples covered r 8 r empty 9 add literal abnormal r x r tg facts r 11 transforming p r abnormal r 13 endif 14 enfor 15 output h let us discuss detail algorithm implements learn pro cedure depending generality solution want learn different algorithms must employed topdown algorithm learning mgs bottomup algorithm lgs cases algorithm must consistent solution cannot found returns theory covers least number negative examples learning topdown algorithm consistency necessity stopping criterion must relaxed allow clauses inconsistent small number negative examples eg adopting one heuristic necessity stopping criteria proposed ilp handle noise encoding length restriction 43 foil 43 significancy test mfoil 18 way able learn definitions concepts exceptions clause must specialized much order make consistent prefer transform default rule consider covered negative examples exceptions simplest criterion adopted stop specializing clause literal language bias added reduces coverage negative examples learning bottomup algorithm learn using positive examples using rlgg operator since clause tested negative examples may cover approach realized using system golem 25 7 implementation order learn general solutions topdown ilp algorithm cf 31 integrated procedure slx testing coverage specialization loop topdown system consists beam search space possible clauses step loop system removes best clause beam generates refinements evaluated according accuracy heuristic function refinements covering least one positive example added beam best clause found far also separately stored clause compared refinement replaced refinement better specialization loop stops either best clause beam consistent beam becomes empty system returns best clause found far beam may become empty consistent clause found case system return inconsistent clause order find least general solutions golem 37 system employed finite wellfounded model computed slx transformed replacing literals form new predicate symbols form neg golem called computed model background knowledge output golem parsed order extract clauses generated rlgg postprocessed dropping literals thus clauses extracted belong least general solution fact obtained randomly picking couples examples computing rlgg choosing consistent one covers biggest number positive examples clause generalized choosing randomly new positive examples computing rlgg previously generated clause examples consistent generalization covers examples chosen generalized clause starts covering negative examples inverse model transformation applied rules thus obtained substituting literal form neg literal live implemented xsb prolog 45 code system found httpwwwliadeisuniboitsoftwarelive 8 classification accuracy section compare accuracy obtained means twovalued definition target concept one obtained means threevalued definition accuracy twovalued definition set testing examples defined number examples correctly classified theory total number testing examples number examples correctly classified given number positive examples covered learned theory plus number negative examples covered theory np number positive examples covered learned definition nn number negative examples covered definition nptot total number positive examples nntot total number negative examples accuracy given nptot nntot learn three value setting definition target concept opposite consider different notion accuracy case atoms positive negative testing set classified undefined undefined atoms covered definition learned positive concept learned opposite one whichever right classification atom test set erroneously classified learned threevalued theory erroneously covered opposite definition explains weight assigned undefined atoms ie 05 new generalized notion accuracy number examples correctly classified theory total number testing examples 05 theta number examples classified unknown total number testing examples order get formula calculate accuracy first define number figures illustrated figure 4 ffl npp number positive examples covered positive definition ffl npn number positive examples covered negative definition ffl npu number positive examples covered definitions classified undefined ffl nnn number negative examples covered negative definition ffl nnp number negative examples covered positive definition ffl nnu number negative examples covered definitions classified undefined accuracy threevalued case thus defined follows nptot nntot interesting compare notion accuracy obtained testing theory twovalued way case accuracy would given nptot nntot interested situations accuracy threevalued case higher one twovalued case ie accuracy 3 accuracy 2 rewriting inequation terms figures get inequation rewritten figure 4 sets examples evaluating accuracy threevalued hypothesis expression nntot represents number negative examples covered definition call nn covered therefore accuracy results testing theory threevalued way improves twovalued one negative examples covered two definitions number negative examples contradiction particularly high number positive examples contradiction low overlap two definitions undefinedness accuracy 9 related work adoption negation learning investigated many authors many propositional learning systems learn definition concept op posite example systems learn decision trees c45 42 decision rules aq family systems 33 able solve problem learning definition n classes generalizes problem learning concept opposite however cases definitions learned assumed cover whole universe discourse undefined classification produced instance always classified belonging one classes instead classify undefined instances learned definitions give unanimous response learning multiple concepts may case descriptions learned overlapping considered case nondesirable reasonable learning concept opposite may case learning two concepts see 17 pointed 34 cases useful produce one classification instance example patient two diseases symptoms satisfy descriptions diseases subject future work consider classes paraconsistent logic programs overlap definitions p p general multiple concepts allowed problems raised negation uncertainty conceptlearning inductive logic programming particular pointed previous work eg 4 13 10 concept learning use cwa target predicates longer acceptable allow distinguish false undefined de raedt bruynooghe 13 proposed use threevalued logic later formally defined 10 explicit definition negated concept concept learning technique integrated within clint system interactive conceptlearner resulting system positive negative definition learned concept predicate p stating respectively conditions p true false definitions learned produce inconsistency examples furthermore clint produce inconsistencies also unseen examples constraint handling mechanism since would assert constraint false take care never violated distinctly system make sure two definitions produce inconsistency unseen atoms making learned rules nondeterministic way able learn definitions exceptions concepts information contradiction still available another contradistinction cope employ simultaneously two kinds negation explicit one state false default defeasible one state assumed false system lelp learning extended logic programs 25 learns elps answerset semantics lelp able learn nondeterministic default rules hierarchy exceptions hierarchical learning exceptions easily introduced system see 27 viewpoint learning problems two algorithms solve equivalent background stratified extended logic program semantics coincide examples shown 25 stratified therefore learned algorithm viceversa example section 5 learned lelp however background nonstratified extended logic program adoption wellfounded semantics gives number advantages respect answerset semantics nonstratified background theories answersets semantics enjoy structural property relevance 15 like wfsx cannot employ topdown proof procedure furthermore answerset semantics cumulative 15 ie add lemma semantics change thus improvement efficiency given tabling cannot obtained moreover means wfsx introduced method choose one concept undefined cannot replicate answerset semantics one compute eventually answersets find literal undefined structure two algorithms similar lelp first generates candidate rules concept using ordinary ilp framework exceptions identified covered examples opposite set rules specialized negation default abnormality literals assumed prevent coverage exceptions assumptions turn generalized generate hierarchical default rules one difference us 25 level generality definitions learn lelp learns definition concept positive examples concept therefore employ bottomup ilp technique learn lgs instead choose whether adopt bottomup topdown algorithm learn theories different generality different target concepts integrating declarative way learned definitions single elp another difference consists lelp learns definition concept highest number examples training set learns positive negative concepts number positive examples close negative ones always learn concepts finally many works considered multistrategy learners multisource learn ers multistrategy learner combines learning strategies produce effective hypotheses see 26 multisource learner implements algorithm integrating knowledge produced separate learners multistrategy learning adopted instance improvement classification accuracy 17 equip autonomous agent capabilities survive hostile environment 11 approach considers two separate conceptbased learners order learn definition concept opposite multiple opposite target concepts constitute part learned knowledge base learning element able adopt bottomup topdown strategy learning rules easily generalized learn definitions n disjoint classes concepts multiple agent learning see 28 often hypothesis general required second step approach devoted application strategies eliminating learned contradictions seen multisource learner 26 metalevel one 6 learned definitions combined obtain noncontradictory extended logic program elps used specify combinations strategies declarative way recover process consistency learned theory 10 concluding highlights twovalued setting adopted work ilp inductive concept learning general sufficient many cases need represent real world data example case agent learn effect actions perform domain performing experiments agent needs learn definition allowed actions forbidden actions actions unknown outcome therefore needs learn richer threevalued setting order achieve ilp class extended logic programs wellfounded semantics explicit negation wfsx adopted us representation language language allows two kinds negation default negation plus second form negation called explicit mustered order explicitly represent negative information adopting extended logic programs ilp prosecutes general trend machine learning extending representation language order overcome recognized limitations existing systems programs learned contain definition concept opposite opposite concept expressed means explicit negation standard ilp techniques adopted separately learn definitions concept opposite depending adopted technique one learn general least general definition two definitions learned may overlap inconsistency resolved different way atoms training set unseen atoms atoms training set considered exceptions unseen atoms considered unknown different behaviour obtained employing negation default definitions default abnormality literals used order consider exceptions rules nondeterministic rules used order obtain unknown value unseen atoms shown adoption extended logic programs ilp allows tackle learning threevalued setting specify combination strategies declarative way also coping contradiction exceptions process system live learning threevalued environment developed implement mentioned techniques particular system learns definition concept opposite able identify exceptions treat default negation system parametric procedure used learning definition adopt either topdown algorithm using beamsearch heuristic necessity stopping criterion bottomup algorithm exploits golem system notes 1 definitions foundations lp refer 16 recent stateofthe art lp extensions nonmonotonic reasoning refer 2 2 advanced incorporating recent theoretical developments see xsb system htppwwwcssunysbedusbprologxsbpagehtml 3 notice formula loverh l variable h universally quantified whereas l existentially quantified 4 noncontradictory program mean program admits least one wfsx model 5 undefined predicate implemented negation cwa p means p false whereas means p false undefined ie undefinedp r reasoning logic programming classical logic programming knowledge representation revise extended logic programming system revising knowledge bases abduction 3 survey paraconsistent semantics extended logic programs interactive theory revision inductive logic programming approach learning survive towards friendly conceptlearners negation threevalued logic interactive concept learning interactive concept learning constructive induction analogy classificationtheory semantics normal logic programs prolegomena logic programming nonmonotonic reasoning multistrategy learning analytical approach cooperation abduction induction logic programming stable model semantics logic programming logic programs classical negation explicitly biased generalization learning active classifiers learning abductive nonmonotonic logic programs learning extended logic programs framework multistrategy learning learning threevalued setting agents learning threevalued setting strategies combined learning via logic programs tool efficient induction recursive programs generalizing updates models programs discovery classification rules using variablevalued logic system vl1 theory methodology inductive learning inverse entailment progol machine invention firstorder predicates inverting resolution efficient induction logic programs reducing misclassification costs well founded semantics logic programs explicit negation note inductive generalization analysis visualization classifier performance comparison imprecise class cost distribution learning logical definitions relations closedword data bases xsb programmers manual version 17 wellfounded semantics general logic programs tr explicitly biased generalization logic programs classical negation wellfounded semantics general logic programs subunification interactive conceptlearning constructive induction analogy well founded semantics logic programs explicit negation c45 programs machine learning slxmyampersandmdasha topdown derivation procedure programs explicit negation interactive theory revision strategies combined learning via logic programs survey paraconsistent semantics logic programs reasoning logic programming inductive logic programming myampersandlsquoclassicalmyampersandrsquo negation nonmonotonic reasoning logic programming learning logical definitions relations generalizing updates abduction 3valued extended logic programs prolegomena logic programming nonmonotonic reasoning ctr chongbing liu enrico pontelli nonmonotonic inductive logic programming instance patterns proceedings 9th acm sigplan international symposium principles practice declarative programming july 1416 2007 wroclaw poland chiaki sakama induction answer sets nonmonotonic logic programs acm transactions computational logic tocl v6 n2 p203231 april 2005 evelina lamma fabrizio riguzzi lus moniz pereira strategies combined learning via logic programs machine learning v38 n12 p6387 janslashfeb 2000 thomas eiter michael fink giuliana sabbatini hans tompits using methods declarative logic programming intelligent information agents theory practice logic programming v2 n6 p645709 november 2002