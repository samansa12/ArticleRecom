optimal temporal partitioning synthesis reconfigurable architectures develop 01 nonlinear programming nlp model combined temporal partitioning highlevel synthesis behavioral specifications destined implemented reconfigurable processors present tight linearizations nlp model present effective variable selection heuristics branch bound solution derived linear programming model show tight linearizations combined good variable selection techniques branch bound yield optimal results relatively short execution times b introduction dynamically reconfigurable processors becoming increasingly viable advent modern fieldprogrammable devices especially srambased fpgas execution hardware computations using reconfigurable processors necessitates temporal partitioning specification temporal partitioning divides specification number specification segments destined executed one another target processor processor reconfigured executing specification segments results carried one segment future segment must stored memory reconfiguration time along time takes save restore active data considered overhead desirable minimize number reconfiguration steps ie number segments resulting temporal partitioning well total amount data stored restored course execution specification addition traditional synthesis process temporal partitioning step must undertaken implement hardware computations using reconfigurable processors techniques exist partition synthesize behavior level descriptions spatial partitioning multiple chips previous attempts published temporal partitioning combined behavioral synthesis paper presents 01 nonlinear programming nlp formulation combined problem temporal partitioning scheduling function unit allocation function unit binding steps highlevel synthe sis objective formulation minimize communication total amount data work supported part us air force wright laboratory wpafb contract number f3361597c1043 transferred among partition segments reconfiguration costs minimized propose compact linearizations nlp formulation transform mixed integer 01 linear programming lp model show effectiveness linearizations experimentation ad dition develop efficient heuristics select best candidate variables upon branchandbound solving lp model show effectiveness heuristics experimental results paper organized follows section 2 discuss related work section 3 provide overview approach basic formulation presented section 3 solution section 4 experimental results presented section 7 section 9 previous work synthesis reconfigurable architectures involves synthesis partitioning partitioning temporal spatial significant research spatial partitioning synthesis though issue temporal partitioning largely ig nored early research 11 12 synthesis domain solved spatial partitioning problem independently scheduling allocation subproblems problem simultaneous spatial partitioning synthesis first formulated ip gebotys 1 produced synthesized designs 10 faster previous research however mentioned gebotys 2 size model large could solve small examples 1 2 dimension problem reduced considering binding problem though model handle pipelined functional units functional units whose latency greater one cycle cannot handle design explorations two different types functional units implement op eration example cannot explore possibility using nonpipelined pipelined multiplier design also heuristics proposed assign entire critical paths partitions might lead solutions globally optimal 1 2 focus synthesis asics hence attempt minimize area reconfigurable processors based fpga technology area resources fpga devices treated constraint must satisfied every temporal segment temporal partition c c c c operation graph 2 figure 1 behavioral specification work niemann 3 presents ipbased methodology hardware software partitioning codesign systems multipar 4 also nonlinear 01 model spatial partitioning synthesis without involving binding linearization technique however tightest formulation see section 4 details achieve faster runtime solved formulation heuristic techniques leading suboptimal results since functional unit explicitly modeled 1 2 4 formulations cannot determine actual area utilization partition factor though critical asic designs critical reconfigurable processors based fpga technol ogy example optimal solution temporal segment may contain 1 multiplier 5 adders another temporal segment may contain 2 multipliers 2 adders formulation explicitly models binding operations functional units determine whether functional unit actually used temporal segment moreover explicitly model usage functional unit temporal segment hence explore design space using 5 adders 2 multipliers although functional units may simultaneously fit processor resources function generators clbs fpgas model automatically determine optimal solution simultaneously meets resource constraints fpga resource level well functional unit level 3 system specification behavior specification captured form task graph shown figure 1 vertices graph denote set tasks dependencies among tasks represented directed edges task visualized composed number operations stay together one temporal partition edge labels task graph represent amount communication required two tasks connected edge placed different partitions let set operations specification cost metrics target fpga fpga resource capacity c temporary onboard memory size inputs system typical resources fpga combinational logic blocks function generators assume component li heuristic temporal partition estimator preprocessing model formulation nlp linearized ilp solution lp solver solution found behavior specification fpga cost metrics characterized component library number partitions figure 2 flow temporal partitioning synthesis system brary consisting various functional units execute operations specification components library characterized cost metrics terms delay times fpga resource requirements outline temporal partitioning system shown figure 2 system proceeds first heuristically estimating number segments n becomes upper bound number temporal segments nlp formulation uses fast heuristic list scheduling technique estimate number segments problem formulated need determine asap alap schedules op erations used set mobility ranges operations formulation done preprocessing step combined operation graph specification schedule also determine set functional units f must used design exploration partitioning specification honor task boundaries specification task cannot split across two temporal segments ever two different tasks together segment share control steps functional units among desired permit splitting tasks across segments operation specification may modeled task system case task would one operation associated entire formulation developed paper work correctly formally system defined follows directed edge tasks exists task graph tail directed edge j head execution task depends output directed edge operations exists number data units communicated tasks j ffl opt set operations operation graph task f set functional units required parallel schedule operation graph ffl fui set functional units f operation execute k set operations execute functional unit k ffl csi set control steps operation scheduled ranges userspecified relaxation maximum alap schedule asap alap soon possible late possible control steps operation j set operations scheduled control step j ffl n upper bound number partitions partitions index partition specifies order execution partitions note generated optimal solution may fewer n partitions scratch memory available storage partitions ffl fgk number functiongenerators used functional unit k obtained characterized component library ffl c resource capacity fpga sectionnon linear 01 model section describe variables constraints cost function used formulation model 31 variables three sets decision variables model three important properties tp models partitioning task level x ijk models synthesis subproblem operation level w pt1 2 models communication cost incurred two tasks connected placed partition 01 variables placed partition p placed control uses functional placed partition placed seen tp x ijk fundamental system modeling variables variables secondary constrained terms fundamental variables 32 temporal partitioning variables tp model partitioning behavior system temporal partitioning following constraints uniqueness constraint task placed exactly one partition among n temporal partitions temporal order constraint partitioning time task 1 another task 2 dependent cannot placed later partition partition task 2 placed placed either partition 2 earlier one p2p1n scratch memory constraint amount intermediate data stored partitions less scratch pad memory variable 1 signifies 1 2 data dependency placed across temporal partition p therefore data communicated stored scratch memory partition p sum data communicated across partition less scratch pad memory w pt1 2 notice figure 3 variable w models communication among tasks adjacent temporal partitions also nonadjacent ones 3 tasks placed optimally 3 partitions left figure original equations used model constraints exam ple equations right figure show variables 1 mapping tasks partitions shown constraint satisfied variable w shown range 2 n data partition 1 actually external input system reasonably assume enough memory external input time since known priori function partitioning system w pt1 2 01 nonlinear terms constrained temporal partitions figure 3 memory constraints satisfied tasks mapped partitions shown equation 4 constrains w pt1 2 take value 1 nonlinear product terms associated equations 1 equation 5 constrains w pt1 2 value zero associated product terms 0 equation alone 4 stop w pt1 2 taking value 1 product terms 0 1 0 valid solution constraint 4 33 synthesis sake clarity ease understanding describe equations synthesis formulations pipelining chaining latency functional units formulation easily extendible incorporate features described 6 assume current model latency functional unit one control step result operation available end control step unique operation assignment constraint operation scheduled one control step one functional unit therefore one variable x ijk operation 1 temporal mapping constraint constraint prevents one operation scheduled control step functional unit dependency constraint maintain dependency relationship operations operation 1 whose output necessary operation 2 assigned later control step control step 2 assigned 34 combining partitioning synthesis essential partitioning fpga meet area constraints fpga necessary functional units f used design exploration finally used partition determine whether functional unit used partition define following decision variables used partition perform operation uses functional unit k 2 f perform operation variables constrained tp variable u pk defines functional unit usage partition variable defines functional unit usage task variables also secondary defined terms fundamental modeling variables tp x ijk equation 9 constrains u pk take value 1 associated nonlinear terms 1 equation 10 needed make sure least one task particular partition uses functional unit derivation variable described section 4 resource constraints introduce resource constraints terms variables u pk typical fpga resources include function generators combinational logic blocks clb etc similar equations added multiple resource types exist fpga ff user defined logicoptimization factor range 01 typical values ff using synopsis fpga components range 0608 5 unique control step constraint introduce constraints make sure control step mapped uniquely temporal segment use new derived variable c tj formulate constraint operation mapped control step j x ijk 12 operations two distinct tasks use control steps tasks partition paper considered flipflop resource constraints consider flipflop resources formulation must estimate number registers necessary synthesize design straightforward add register optimization formulation lines proposed gebotys et al 6 cost function minimize cost data transfer temporal partitions cost function get optimal solution using least number partitions least amount interpartition data transfer w pt1 2 4 solving 01 nonlinear model use various solution techniques mathematical programming field solving models nonlinear objective function con straints main approaches 1 linearization methods 2 enumeration methods 3 cutting plane methods refer 8 interesting survey approaches due existence good set linearization techniques easy availability lp codes solving linear models chosen linearization technique though enumerative methods cutting plane methods viable alternatives linearization equations 910 nonlinear product term form b generate new 01 variable c c b written fortets linearization method8 1 constraint b 1 constraint 16 implies either b 1 distinct product variables replace new 01 variable x nk add constraints become need constraints get correct solution however glover wolsey 9 proposed im provement defining c continuous realvalued variable upper bound 1 instead integer variable replacing equation 16 following two constraints retaining equation 15 intact c 17 b c 18 glovers linearization shown tighter fortets also borne experimentations equations 9 10 replaced following compact linearized equations z ptk continuous realvalued variable bounded 0 1 0 z ptk 1 z constraint 19 implies z 1 constraints 20 21 imply z either tp need three constraints get correct solution linearization equations 4 5 linearization done exactly done equations defining new continuous variable distinct nonlinear term shown shortly however final formulation use lesser number variables linearizing w pt1 2 formulating constraints decision variable task functional unit k variable 1 x ijk variables used denote synthesis variables task using functional unit k 1 consider small example variables synthesis variables task 1 functional unit k logical product interchangeable 01 terms using using glovers linearization get characteristics ilp model graph n ams l var const runtime table 1 preliminary results based discussion get following constraints 5 preliminary results verify formulation experimentation generated various random graphs ran experiments current formulation see performs however see table 1 one formulation solved reasonable time even though graphs experiments done large others terminated run time became large refer table 4 actual sizes graphs experiment result tables n denotes number partitions number adders multipliers subtracters respectively used design exploration l user specified latency margin bound var const denote number variables constraints respectively generated graph ilp formulation run times seconds experiments run ultrasparc machine running 175 mhz use lp solve public domain lp solver 10 solving ilp formulation 6 additional constraints tighten model ilp problem solved using lp tech niques solving lp relaxation model lp relaxation ilp except 01 constraints variables dropped lp relaxation much larger feasible region ilps feasible region lies within important method reducing solution time modify formulation constraints cut away lp feasible region without changing feasible region ilp called tightening lp model studying model carefully could identify constraints cut large amount nonoptimal integer noninteger solutions helped reducing time required solve model ffl task 1 placed partition p exists means 2 definitely placed partition p greater therefore case 1 figure 4 equations variable w 2 tasks 4 partitions cannot contribute scratch memory partitions less equal p ffl task 2 placed partition p exists means 1 definitely placed partition p lesser therefore cannot contribute scratch memory partitions greater p exists tasks partition cannot contribute scratch memory partitions formulation introduced explicitly new term distinct product term linearized follows fewer new variables introduced linearization single new variable reflects constraints several nonlinear product terms main limitation linearization though w pt1 2 take value 1 one constituent products 1 also l graph n ams l var const runtime table 2 results tightening constraints take value 1 even none constituent products 1 constraint limit value w pt1 2 0 constituent product terms 0 new linear term minimizing cost function solution get cutoff generated solution since objective value cost function greater case true case w pt1 2 part cost function however shall see new tightened inequalities actually limit solution space w pt1 2 never 1 constituent nonlinear terms equations 28 29 30 eliminate problem mentioned show example possible figure 4 two tasks place four parti tions variable w 312 equations shown consider following three cases none 4 product terms shown figure 1 variable w 312 still never 1 cut equation 29 2 value w cut equation 28 cut equation 30 ffl another constraint observed reduced dramatically solution time task uses functional unit k placed partition p associated u pk variable also reflect equations 1 2 3 6 7 8 11 12 13 19 20 21 22 23 26 27 28 29 30 31 32 constraints equation 14 cost function final model 7 experimental results tightened constraints tightened constraints place ran series experiments table 1 observed significant improvement run times examples rows 1 2 3 table 2 solved though run times large sizes graphs consideration 8 solution branch bound solving 01 lp branch bound technique active node branching tree ini tially given mixed 01 problem chosen lp relaxation solved fractional variable chosen branch variable 01 variable one branch sets variable 0 1 framework two choices made time active node developed choice fractional variable branch variable choice critical keeping size bandb tree small formulated following heuristic guide selection branch bound worked well practice task graph topological ordering tasks dependency higher priority priorities range 1n highest lowest variable tasks generated ilp ie tp index reflects priority solving model lpsolver always take branch sets variable value 1 first pick variable branch bound use following ffl variables tp still fractional pick variable tp lowest value p value branch first ffl fractional tp variables remain pick fractional u pk variable branch naive approach point tasks assigned partitions might chosen branch fractional x ijk variable continue synthesis process approach cuts solutions using functional unit fit partition early branching process observe section 9 variable selection process greatly reduced run time experiments result emphasizes careful study variable selection method must done rather leave variable selection solver randomly chooses variable branch choose pick tp variable branch task get assigned partitions remaining problem schedulingallocation problem whose linearization quite tight produces less number noninteger solutions observe forcing tasks lie particular partition 2 variables critical path forced one partition thus making solution locally optimal method guides solution process quick solution may may optimal solution acts lower bound solutions undertaken solution process helps eliminating many nonoptimal branches solution tree since never forcing value variable value solutions always global optimal 9 experimental results first explore effect different design parameters example behavioral specification table 3 shows results fixing number functional units varying latency number partitions graph called graph 1 5 tasks 22 opera tions 2 adders 2 multipliers 1 subtracter used schedule design first row table 3 characteristics ilp model results graph tasks opers n ams l var const runtime feasible table 4 temporal partitioning results various graphs const runtime feasible table 3 results variation latency number partitions graph 1 shows relaxation latency design could feasibly partitioned onto 3 partitions latency bound relaxed 1 design optimally partitioned synthesized onto 3 par titions latency bound relaxed 2 design fit onto 2 partitions relaxed 3 fit optimally onto single partition though partitions used design space exploration examples execution time getting optimal results small ilp formulation solved branch bound using lp relaxation model important tight linear relaxations good variable selection methods large amount noninteger solutions cutoff solution space ran series experiments substantiate variable selection technique tightened constraints imposed model table 4 results running experiments larger graphs shown columns tasks opers give size specification terms number tasks operations medium sized graphs upto 72 operations optimally partitioned small execution times make model effective tool temporal partitioning synthesis need add constraints model registers buses used design note however number variables largely influence solution time increase current variable set enough model additional constraints paper presented novel technique perform temporal partitioning synthesis optimally good linearization techniques careful variable selection procedures helpful solving models short time effectiveness demonstrated results r optimal synthesis multichip architectures optimal methodology synthesis dsp multichip architectures algorithm hardwaresoftware partitioning using mixed integer linear programming multipar behavioral partitioning synthesizing applicationspecific multiprocessor architectures resource constrained rtl partitioning synthesis multifpga designs optimal vlsi architectural synthesis area performance testability os caroptimum simultaneous scheduling allocation resource binding based integer pro gramming con strained nonlinear 01 programming converting 01 polynomial programming problem 01 linear program chop constraintdrivensystemlevel partitioner partitioning functional models synchronous digital systems tr optimal vlsi architectural synthesis oscar optimal methodology synthesis dsp multichip architectures optimal synthesis multichip architectures hardwaresoftware partitioning using integer programming resource constrained rtl partitioning synthesis multifpga designs ctr michael eisenring marco platzner framework runtime reconfigurable systems journal supercomputing v21 n2 p145159 february 2002 r maestre fernandez r hermida n bagherzadeh framework scheduling context allocation reconfigurable computing proceedings 12th international symposium system synthesis p134 november 0104 1999 r maestre f j kurdahi n bagherzadeh h singh r hermida fernandez kernel scheduling reconfigurable computing proceedings conference design automation test europe p21es january 1999 munich germany meenakshi kaul ranga vemuri sriram govindarajan iyad ouaiss automated temporal partitioning loop fission approach fpga based reconfigurable synthesis dsp applications proceedings 36th acmieee conference design automation p616622 june 2125 1999 new orleans louisiana united states meenakshi kaul ranga vemuri temporal partitioning combined design space exploration latency minimization runtime reconfigured designs proceedings conference design automation test europe p43es january 1999 munich germany meenakshi kaul ranga vemuri designspace exploration blockprocessing based temporalpartitioning runtime reconfigurable systems journal vlsi signal processing systems v24 n23 p181209 mar 2000 hartej singh guangming lu eliseu filho rafael maestre minghau lee fadi kurdahi nader bagherzadeh morphosys case study reconfigurable computing system targeting multimedia applications proceedings 37th conference design automation p573578 june 0509 2000 los angeles california united states rafael maestre fadi j kurdahi milagros fernndez roman hermida nader bagherzadeh hartej singh framework reconfigurable computing task scheduling context management ieee transactions large scale integration vlsi systems v9 n6 p858873 1212001