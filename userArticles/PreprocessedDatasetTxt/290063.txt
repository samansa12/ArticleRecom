feasibility decision algorithm rate monotonic deadline monotonic scheduling rate monotonic deadline monotonic scheduling commonly used periodic realtime task systems paper discusses feasibility decision given realtime task system system scheduled rate monotonic deadline monotonic scheduling time complexity existing feasibility decision algorithms depends number tasks maximum periods deadlines periods deadlines integers paper presents new necessary sufficient condition given task system feasible proposes new feasibility decision algorithm based condition time complexity algorithm depends solely number tasks condition also applied sufficient condition task system using priority inheritance protocols feasible rate monotonic deadline monotonic scheduling b introduction hard realtime systems defined containing processes deadlines cannot missed bur89a deadlines termed hard must met circumstances otherwise catastrophic system failure may result meet hard deadlines implies constraints upon way system resources allocated runtime includes physical logical resources conventionally resource allocation performed scheduling algorithms whose purpose interleave executions processes system achieve predetermined goal hard realtime systems obvious goal deadline missed one scheduling method proposed hard realtime systems rate monotonic algorithm liu73a static priority based algorithm periodic processes priority process related period whilst algorithm several useful properties including schedulability test sufficient necessary leh89a constraints imposes process system severe processes must periodic independent deadline equal period many papers successively weakened constraints imposed ratemonotonic algorithm provided associated schedulability tests reported work includes test allow aperiodic processes scheduled sha89a test schedule processes synchronise using semaphores sha88a one constraint remained deadline period process must equal weakening latter constraint would benefit application designer providing flexible process model implementing system increased flexibility seen observation processes deadline period expressible within process model permitting deadline period example process systems whose timing characteristics suitable ratemonotonic scheduling would also accepted scheduling scheme permitting deadlines periods process differ paper relaxes constraint transforms ratemonotonic algorithm deadlinemonotonic algorithm schedulability tests developed guarantee deadlines periodic processes approach shown applicable guaranteeing deadlines arbitrary mixtures periodic sporadic processes following subsection gives brief description symbols terminology used remainder paper section 2 gives overview ratemonotonic scheduling algorithm associated schedulability tests section 3 introduces deadlinemonotonic scheduling algorithm new schedulability constraints algorithm developed section 4 outlines previously proposed methods guaranteeing sporadic process deadlines within context ratemonotonic algorithm section proposes simpler method guaranteeing deadlines arbitrary mixtures sporadic periodic processes using deadlinemonotonic scheduling algorithm 11 notation process periodic released execution periodic manner case maximum release frequency defined process termed sporadic maximum defined process termed aperiodic aud90a process given identifies process subscript defined priority process priorities unique priorities assigned numerically taken interval 1 highest priority n number processes system lowest process timing characteristics c refer value period computation time deadline 2 ratemonotonic scheduling algorithm ratemonotonic scheduling static priority based mechanism liu73a priorities assigned processes inversely proportional length period process shortest period assigned highest priority processes executed preemptive manner time highest priority process outstanding computation requirement executed amongst class static priority scheduling schemes shown ratemonotonic priority assignment optimal liu73a implies given static priority scheduling algorithm schedule process system ratemonotonic algorithm also able schedule process system case ratemonotonic scheduling algorithm optimality implies imposition constraints upon process system include fixed set processes processes periodic processes deadline equal period one instance process must complete subsequent instances run processes known worstcase execution times synchronisation permitted processes processes initial release time 0 last constraints fundamental determining schedulability given process system processes released simultaneously worstcase demand processor times processes released simultaneously termed critical instantsliu73a thus first critical instant occurs time 0 leads observation processes meet deadline executions starting critical instant process deadlines met lifetime system schedulability tests ratemonotonic algorithm based upon critical instant concept liu73a concept developed schedulability test based upon process utilisations test given 1 utilisation u process given utilisation converges 69 large n thus process set utilisation less 69 guaranteed scheduled ratemonotonic algorithm deadlines guaranteed met whilst test 1 sufficient also necessary test may indicate falsely process system schedulable example consider two processes following periods computational requirements processes equation 1 evaluates false utilisation two processes 100 greater allowable bound 83 however run neither process ever miss deadline hence test sufficient necessary necessary sufficient schedulability constraint found sha88a leh89a set n processes schedulability test given min l k l k equations take account possible process phasings 21 summary summary schedulability tests available optimal static priority scheduling scheme ratemonotonic scheduling algorithm processes limited following fundamental constraints processes periodic utilisation measure ratio required computation time period process summation ratios processes yields total processor utilisation evaluates smallest integer x evaluates largest integer x processes period equal deadline synchronisation permitted processes first schedulability test equation 1 sufficient necessary second test equation 2 sufficient necessary one difference two schedulability tests lies computational complexities first test n number processes second test far complicated complexity data dependent number calculations required entirely dependent values process periods worstcase test involve enumeration schedule process system upto period process hence tradeoff exists accuracy computational complexity schedulability tests following section removes second three constraints ie allows processes sporadic thus relaxing first constraints third constraint beyond scope paper noted earlier sha et al considered sha88a sha90a sha87a 3 deadline monotonic scheduling begin observing processes wish schedule characterised following relationship computation time deadline period leung et alleu82a defined priority assignment scheme caters processes relationship termed inversedeadline deadline monotonic priority assignment deadline monotonic priority ordering similar concept rate monotonic priority ordering priorities assigned processes inversely proportional length deadline leu82a thus process shortest deadline assigned highest priority longest deadline process lowest priority priority ordering defaults rate monotonic ordering period deadline deadline monotonic priority assignment optimal static priority scheme processes share critical instant stated theorem 24 leu82a inversedeadline priority assignment optimal priority assignment one processor generate schedulability constraint deadline monotonic scheduling behaviour processes released critical instant fundamental processes proved meet deadlines executions beginning critical instant processes always deadlines liu73a leu82a using results leung et al stated foundation new schedulability tests developed initially two processes considered generalise allow number processes 31 schedulability two processes consider two processes 1 2 process 1 higher priority process 2 deadline monotonic priority assignment consider following case case processes always released simultaneously occurs following holds illustrated figure 1 time time figure 1 highest priority claims processor whenever outstanding computational requirement occur first c 1 units period 1 schedulability system given check schedulability deadline must sufficiently large contain computation demand ie b check schedulability higher priority processes ie 1 prior claim processor hence interval utilise processor interval therefore 2 maximum computation time defined 2 schedulable second term equation 3 relates maximum time 2 prevented executing higher priority processes case 1 time termed interference time definition 1 interference encountered release deadline instance interference due execution demands higher priority processes maximum interference process occurs release beginning critical instant definition critical instant liu73a considering processes case 2 equates time 1 executes whilst 2 outstanding computational requirement thus 2 equal one computation 1 case 1 zero 1 highest priority process schedulability case restated consider cases periods two processes equal case released many times second release 1 time time figure 2 figure 2 maximum interference 2 equal one computation time 1 schedulability equations 4 hold case case released many times second release 2 consider figure 3 time time figure 3 clearly 2 prevented running releases process 1 number releases 1 within interval given therefore schedulability expressed equation 5 value 2 could larger exact maximum interference 2 includes computation time required 1 release may occur value 2 least great maximum interference test must hold since based upon exact maximum interference example using schedulability equation 5 given example consider following process system schedulability process system determined equation 5 check process 1 1 hence 1 schedulable b check process 2 2 2 substituting6 hence 2 schedulable example run system given figure 4 figure 4 construction 2 sufficient necessary following example shows consider effect increasing 2 11 affect schedulability system c recheck process 2 2 2 substituting6 hence 2 unschedulable equation 5 however process system schedulable figure 4 simulation diagrams discussed appendix 1 schedulability constraint equation 5 strong due value 2 exact expression 2 developed consider figure 5 time time figure 5 critical instant occurred interference 2 maximum note interference consists executions 1 deadlines 2 execution 1 release 2 deadline 2 restate 2 b represents interference due complete executions 1 k incomplete executions number complete executions interval equal number deadlines 1 interval number given hence interference due complete executions given number incomplete executions 1 given number releases 1 minus number deadlines 1 evaluates either 0 1 number releases given note release 1 coincides 2 deemed occur fractionally hence number incomplete executions given start incomplete execution given hence length interval utilised incomplete execution 2 maximum time 1 use interval given length interval however interval may longer c 1 therefore maximum interference due incomplete executions given substituting b k equation 6 gives following schedulability constraint consider following theorems relate sufficient necessary properties equation 7 theorem 1 schedulability test given equation 7 sufficient two processes proof contradiction assume process system passes test schedulable show system schedulable must fail test consider process system containing 1 2 let process 1 pass test pass test schedulable pass test following must hold 2 schedulable must miss deadline instance process starting critical instant processes point 2 suffers maximum interference 2 due higher priority process therefore 2 miss deadline schedulable gives 2 clear contradiction exists b therefore 2 passes test schedulable proof theorem 1 relies upon 2 exact given theorem 2 theorem 1 still hold 2 greater exact value merely represents worse worsecase therefore implication theorem 1 schedulability test given equation 5 also sufficient theorem 2 schedulability test necessary values exact process 2 pass schedulability test requires 2 2 represents exact value 2 comparing 2 2 three cases 2 2 clearly impossible know 2 least 2 discussion occurs made pessimistic calculation 2 2 increases computation time could guaranteed 2 decreases since occurs calculation 2 precise allowable computation time 2 maximised inequality summary greatest amount time 2 2 exact fore schedulability test necessary 2 exact therefore schedulability test given equation 7 necessary values exact implication schedulability test given equation 5 also necessary exact however values equation 7 exact instances equation 5 former declare process systems schedulable latter following example illustrates point example return process system failed equation 5 illustrated meet deadlines schedulability system determined equation 7 check process 1 hence 1 schedulable b check process 2 2 2 substituting6 hence 2 schedulable system schedulable equation 7 simulated run system given figure previously 311 summary noting results stated leu82a deadline monotonic priority assignment optimal two schedulability tests twoprocess systems developed test equation 5 sufficient necessary whilst test equation 7 sufficient necessary hence optimal one difference tests former computational complexity latter tradeoff exists accuracy computational complexity 32 schedulability many processes schedulability test given equations 5 7 generalised systems arbitrary numbers processes firstly equation 5 expanded consider figure 6 time time time figure 6 interference inflicted upon process higher priority processes corresponds computation demands processes interval time critical instant first deadline interference j given may include part execution j occurs total interference expressed therefore feasibly schedule processes equation 8 like equation 5 sufficient necessary illustrated following example example consider following process system schedulability process system determined equation 8 check process 1 1 hence 1 schedulable b check process 2 2 2 substituting2 hence 2 schedulable c check process 3 3 3 substituting4 hence 3 schedulable consider effect increasing 3 11 affect schedulability system recheck process 3 substituting4 hence 3 unschedulable equation 8 process system unschedulable equation 8 however system run deadlines met see figure 7 figure 7 example process system schedulable equation 8 values greater exact values contain parts executions occur similar drawback equation 5 twoprocess system considered surmount problem generalise equation 7 many processes consider figure 8 time time time time figure 8 figure 8 seen general case n processes equal interference processes 1 i1 interval thus equation 7 rewritten provide schedulability test n process system show constraint accurate equation 8 consider following example example return process system failed equation 8 shown meet deadlines see figure 7 check process 1 hence 1 schedulable b check process 2 2 2 substituting2 hence 2 schedulable c check process 3 3 3 substituting3 hence 3 schedulable example run given figure 7 expression equation 9 exact interference due incomplete executions 1 i1 given 9 greater equal exact interference consider interference incomplete executions 1 i1 figure 8 within allowance made 1 using i1 using since one processes execute time greater precise value interference consider following theorems theorem 3 schedulability test given equation 9 sufficient proof follows theorem 1 theorem 4 schedulability test given equation 9 necessary values exact proof follows theorem 2 theorems 3 4 show equations 9 8 implication sufficient necessary executions higher priority processes overlap deadline exact tests 8 necessary indeed values equations 8 exact two equations equivalent however executions overlap deadline test 9 pass process systems test 8 contains precise measurement obtain exact value cases requires exact interleaving higher priority processes considered upto deadline could involve enumeration schedule upto obvious computational expense following section outlines alternative strategy improving schedulability constraint 33 unschedulability many processes previous section developed sufficient necessary test schedulability process system note whilst test identifies schedulable process systems sufficient necessary unschedulability test identify unschedulable systems approach illustrated figure 9 schedulable systems unschedulable systems systems found sufficient necessary schedulability test systems found sufficient necessary unschedulability test exact division given sufficient necessary schedulability unschedulability test domain process systems figure 9 sufficient necessary unschedulability test identifies unschedulable process systems manner test previous subsection identifies schedulable systems combination two tests enables identification many schedulable unschedulable process systems without resorting computationally expensive sufficient necessary test sufficient necessary unschedulability test presented consider interference higher priority processes upon minimum incomplete executions higher priority processes occur late possible maximises time utilised higher priority processes minimises time utilised theorem 5 minimum incomplete executions higher priority processes perform execution late possible time time figure 10 consider figure 10 execution j decreased moving execution towards deadline j movement decreases minimum execution moved close possible deadline j consider schedulability minimum best possible scenario scheduling cannot scheduled minimum cannot scheduled exact since value least large minimum value therefore show unschedulability process system sufficient show unschedulability system minimum values unschedulability test developed using minimum interference figure 10 interference sum complete executions higher priority processes parts incomplete executions must occur b complete executions k incomplete executions total interference stated complete executions occur interval given incomplete executions number either 0 1 processes higher priority hence interference due incomplete executions stated substituting equation 10 generate unschedulability test note one process need pass unschedulability test process system unschedulable converse theorem 3 proves equation 11 sufficient condition unschedulability follows observation since minimum theorem 5 theorem 5 process system cannot scheduled less exact value process system cannot scheduled exact values theorem 4 note equation 11 necessary condition unschedulability since values used less equal exact value equations 11 used together consider process system fails equation 9 since test necessary prove process system unschedulable process system submitted equation 10 system equation 10 determined unschedulability process system however process system failed schedulability unschedulability tests note could still schedulable illustrate use combined use equations 9 11 following example example consider following process system show unschedulability system using equation 11 check process 1 hence 1 fails test therefore unschedulable b check process 2 2 substituting3 hence 2 fails test therefore unschedulable c check process 3 3 substituting7 therefore 3 passes unschedulability test process system therefore unschedulable example run system given figure 11 process 3 misses deadline time 13 figure 11 reduce computation time process 3 5 observation see 3 fails unschedulability test 3 since characteristics first two processes identical process system whole fails unschedulability test however system necessarily unschedulable try prove process system schedulable using equation 9 check process 1 1 hence 1 schedulable b check process 2 substituting3 hence 2 schedulable c check process 3 3 3 substituting5 hence 2 schedulable equation 9 shown process system failing schedulability unschedulability tests since tests sufficient necessary decisively proved process system schedulable unschedulable example illustrated combined use unschedulability schedulability tests first part example utilised unschedulability test prove test unschedulable decreasing computation time 3 system fails unschedulability test however application equation 9 system shown fail schedulability test also indeed examining example see c 3 lies system proved schedulable c 3 lies system proved unschedulable c 3 lies prove system schedulable unschedulable requires powerful schedulability test test presented next subsection 34 exact schedulability many processes schedulability unschedulability constraints systems containing many processes given equations 9 11 respectively sufficient necessary general case form sufficient necessary schedulability test requires exact values theorems 2 4 achieve schedule evaluated exact interleaving higher priority process executions known costly entire interval critical instant deadline process evaluated would require solution equations number equations reduced observing meets deadline lies need evaluate equations reductions number equations requiring solution made considering behaviour processes interval consider interaction processes 1 i1 process interval process meet deadline require following condition met wish consider points upto including therefore need refine definition interference reason interval rather single point time definition 2 interference encountered release time lies interval equal quantity work created releases higher priority processes interval release time outstanding work due higher priority processes must 0 since execute higher priority processes completed hence point time actually meets deadline given therefore state following condition schedulability note definition includes parts executions may occur however since outstanding workload processes 0 expression exact equations require maximum calculations made determine schedulability n process system maximum number equations need evaluated number equations need evaluated reduced achieved limiting points considered possible solutions consider times within could possibly meet deadline note monotonically increasing within time interval points time interference increases occur release higher priority process illustrated figure 12 4 4 release release release 3 release release figure 12 figure 12 three processes higher priority 4 see higher priority processes released 4 increases monotonically respect graph stepped plateaus representing intervals time higher priority processes released obvious one equation need evaluated plateau interference change maximise time available execution choose evaluate rightmost point plateau therefore one possible reduction number equations evaluate schedulability occurs testing points correspond higher priority process release since soon one equation identifies process system schedulable need test equations thus effect evaluate equations number equations reduced cases note reduction occur point time higher priority process released meeting deadline number equations reduced considering computation times processes consider figure 13 4 time 0 release 1 2 3 4 time 4 release 1 time 5 release 2 time time 8 release 1 figure 13 figure 13 total computation requirement system c plotted time first point time outstanding computation equal time elapsed found 4 equation 12 diagram point time coincides deadline 4 considering figure 13 point testing schedulability interval also since time 0 corresponds critical instant simultaneous release processes first point time could possibly complete gives schedulability constraint since value 1 assumes one release process occurs constraint fail releases higher priority processes within interval exact amount work created higher priority processes interval given next point time may complete execution gives schedulability constraint constraint fail releases occurred interval thus build series equations express schedulability tk equations hold schedulable series equations encapsulated following algorithm algorithm foreach else endif exit unschedulable endif endwhile endfor algorithm terminates following relation always holds greater algorithm terminates since unschedulable thus maximum number steps worstcase measure number equations reduced method utilising plateaus figure 11 consider points time possible complete rather points time correspond higher priority process releases example use algorithm given example return process system could proved schedulable unschedulable proved schedulable previous example confine attention 3 use successive equations show unschedulability 3 3 substituting14 process unschedulable time 12 proceed next equation 3 since 1 3 terminate 3 unschedulable reduce computation time 3 3 use successive equations show 3 schedulable 3 3 substituting7 hence 3 schedulable meeting deadline time 10 example run system seen figure 14 figure 14 successive equations 13 shown process system schedulable solution single equation required 35 summary section introduced number schedulability unschedulability tests deadline monotonic algorithm n schedulability test sufficient necessary n 2 schedulability test sufficient necessary n 2 unschedulability test sufficient necessary sufficient necessary schedulability test datadependent complexity first test provides coarsest level second third tests combine provide finer grain measure process systems definitely schedulable definitely unschedulable sufficient necessary test able differentiate schedulable unschedulable systems provide finest level test one constraint process systems must critical instant ensured processes initial release time 0 4 scheduling sporadic processes nonperiodic processes whose releases periodic nature processes subdivided two categories aud90a aperiodic sporadic difference categories lies nature release frequencies aperiodic processes whose release frequency unbounded extreme could lead arbitrarily large number simultaneously active processes sporadic processes maximum frequency one instance particular sporadic process active time static scheduling algorithm employed difficult introduce nonperiodic process executions schedule known system run nonperiodic processes released difficulties arise attempting guarantee deadlines processes clearly impossible guarantee deadlines aperiodic processes could arbitrarily large number active time sporadic processes deadlines guaranteed since possible means maximum release frequency define maximum workload place upon system one approach use static periodic polling processes provide sporadics executions time approach reviewed section 41 section 42 illustrates utilise properties deadline monotonic scheduling algorithm guarantee deadlines sporadic processes without resorting introduction polling processes 41 sporadic processes polling approach allow sporadic processes execute within confines static schedule generated ratemonotonic algorithm computation time must reserved within schedule intuitive solution set periodic process polls sporadic processes leh87a strict polling reduces bandwidth processing processing time embodied execution polling process wasted sporadic process active polling process becomes occurring polling processs computation time one period exhausted passed wait next period service number bandwidth preserving algorithms proposed use ratemonotonic scheduling algorithm one algorithm deferrable server leh87a sha89b sha89a server periodic process allotted number units computation time per period units used sporadic process outstanding computational requirements server run outstanding sporadic process requests server execute defers assigned computation time servers time preserved initial priority sporadic request occur server maintained priority thus run serve sporadic processes allotted computation time within server period exhausted computation time server replenished start period problems arise sporadic processes require deadlines guaranteed difficult accommodate deferrable server due rigidly defined points time server computation time replenished sporadic server sha89a provides solution problem replenishment times related sporadic uses computation time rather merely period server process sporadic server used sha et al sha89a conjunction ratemonotonic scheduling algorithm guarantee sporadic process deadlines since ratemonotonic algorithm used method required map sporadic processes timing characteristics given computation time deadline period onto periodic server processes timing characteristics given computation time deadline period method adopted sha89a lets computation time period deadline server equal computation time minimum interarrival time deadline sporadic process ratemonotonic scheduling algorithm used test schedulability process system runtime priorities assigned deadline monotonic manner next section details simpler approach guaranteeing sporadic deadlines based upon deadline monotonic scheduling algorithm 42 sporadic processes deadline monotonic scheduling approach consider timing characteristics sporadic process demand computation time illustrated figure 15 process released deadline released deadline released figure 15 minimum time difference successive releases sporadic process minimum interarrival time occurs first two releases sporadic point sporadic behaving exactly like periodic process period sporadic released maximum frequency imposing maximum workload releases occur maximum rate second third releases figure 15 sporadic behaves like periodic process intermittently activated laid dormant workload imposed sporadic maximum process released falls next release occurs greater time units elapsed worstcase sporadic process behaves exactly like periodic process period deadline characteristic behaviour maximum one release process occur interval release time least units previous release process implies guarantee deadline sporadic process computation time must available within interval noting deadline least previous deadline sporadic exactly guarantee given deadlinemonotonic schedulability tests section 3 schedulability purposes describe sporadic process periodic process whose period equal however note since process sporadic actual release times process wil periodic merely separated least time units schedulability tests given section 3 effective process system processes periodic sporadic released simultaneously assume processes released simultaneously time 0 critical instant forms worstcase workload processor deadline sporadic guaranteed release critical instant subsequent deadlines guaranteed example given example consider following process system periodic whilst 2 4 sporadic minimum interarrival times given 2 4 respectively check schedulability system using equations given section 3 simplest test equation 8 used check process 1 1 hence 1 schedulable b check process 2 2 2 substituting2 hence 2 schedulable c check process 3 3 3 substituting2 hence 3 schedulable check process 4 4 3 substituting2 hence 4 schedulable process system schedulable example run given figure 16 figure 16 example run figure 16 deadlines met sporadic processes released time 0 forms critical instant thus worstpossible scenario scheduling process system combination many periodic many sporadic processes shown schedulable scheme without need server processes required scheduling sporadic processes ratemonotonic scheduling algorithm see section 41 43 summary proposed method guaranteeing deadlines sporadic processes using sporadic servers within ratemonotonic scheduling framework two main drawbacks firstly one extra periodic server process required sporadic process secondly extra runtime overhead created kernel required keep track exact amount time server left within period deadlinemonotonic approach circumvents problems since extra processes required sporadic processes dealt adequately within existing periodic framework 5 conclusions fundamental constraints ratemonotonic scheduling algorithm weakened permit processes deadlines less period scheduled resulting scheduling mechanism deadlinemonotonic algorithm schedulability tests presented deadlinemonotonic algorithm initially simple sufficient necessary schedulability test introduced required single equation per process determine schedulability however achieve simplicity meant test overly pessimistic simplifications made produce single equation test partially removed produced sufficient necessary schedulability test passed process systems simple test complexity second test n 2 compared n simple test test pessimistic complement second schedulability test similar unschedulability test developed combination sufficient necessary schedulability unschedulability tests shown useful identifying unschedulable systems however still possible process system fail schedulability unschedulability tests problem resolved development sufficient necessary schedulability test complex tests complexity related periods computation times processes system complexity reduced substantially number equations required determine schedulability process minimised problem guaranteeing deadlines sporadic processes discussed noting schedulability tests proposed sporadic processes ratemonotonic algorithm require introduction special server processes proposed simple method guarantee deadlines sporadic processes within confines deadlinemonotonic algorithm simplicity method due sporadic processes treated exactly periodic processes purpose determining schedulability using scheme mixture periodic sporadic deadlines scheduled subject process system passing deadlinemonotonic schedulability constraint number issues raised work outlined paper require consideration include effect allowing processes synchronise vary timing characteristics another related issue effect deadlinemonotonic scheduling upon system utilisation issues remain investigation acknowledgements author thanks mike richardson alan burns andy wellings valuable comments diatribes r misconceptions realtime computing serious problem next generati systems scheduling realtime systems scheduling algorithms multiprogramming hard realtime environment ratemonotonic scheduling algorithm exact characterization average case behaviour aperiodic task scheduling hard realtime systems realtime scheduling theory ada realtime scheduling theory ada priority inheritance protocols approach realtime synchronisation complexity fixedpriority scheduling periodic realtime tasks enhanced aperiodic responsiveness hard realtime environments analytical approach realtime software engineering tr