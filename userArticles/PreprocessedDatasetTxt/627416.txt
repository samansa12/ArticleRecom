knowledgebased environment modeling simulating software engineering processes design representation schemes used constructing prototype computational environment modeling simulating multiagent software engineering processes described environment called articulator overview articulators architecture identifying five principal components provided three components knowledge metamodel software process behavior simulator knowledge base querying mechanism detailed examples included conclusion reiterates unique approach applying knowledge engineering techniques problems understanding statics dynamics complex software engineering processes b introduction modeling process software engineering represents promising approach toward understanding supporting development largescale software systems software process collection related activities seen coherent process subject reason ing involved production software system wil86 software process model prescriptive representation software development activities terms order execution resource management software process metamodel representation formalism provides necessary components create various types software process models wil86 metamodel software process possess capability include major properties contemporary software development practice recent evaluations software process models cksi87 sfg85 suggest effective software process models address organizational technical dimensions including 1 detailed descriptions software pro cesses products settings 2 interactions management exception handling performance software processes projectspecific processes present metamodel uses knowledge representation language specify aspects provides mechanisms investigate interactions among dimensions automated modeling environment software development powerful enough support model validation verification simulating specified software process environment users collectively detect faults inconsistencies anomalous behavior process prescription emerging conflicts time schedule resource allocation example common anomalies multiagent process plans dlc87 complex faults hand may concern configuration task decomposition organizational settings well environment also assist determining possible solutions contingencies encountered task execution solutions based particular resource knowledge configurations hence settingspecific projectspecific agentspecific timespecific simulating task execution enables user predict development progress realistic basis compare different process models describe design environment utilizes software process metamodel next section provide background approach section 3 present system architecture articulator discuss important issues covered design use articulator following discuss subsystems turn section 4 discusses knowledge base stores metamodel software processes section 5 gives accounts simulation articulator metamodel section 6 presents query mechanism conclude summary novel contributions articulator project background noted earlier growing interest focused problem modeling analyzing automating various aspects software engineering processes sca88 wileden wil86 suggested modeling framework based upon use software process metamodel osterweil followed paradigmatic approach cast software process metamodel called process programming language language programming prescriptive process models software development environment ost87 since much research effort directed design implementation languages software process automation construction realistic mod els example many researchers introduced process language constructs including rules pattern matching kai88 behavioral patterns wil88 graphic finitestate machines hk89 agenttaskproduct relations gar89 none provides direct means querying status state modeled software process others including sfg85 hl88 use knowledge representation languages deductive planning mechanisms software process modeling overall efforts lead closed single agent ie globally controlled systems exception hk89 gar89 efforts explicitly reference use empirical sources software process models modeling simulating complex organizational processes performed people requires empirically based multiagent open systems framework gs86 hew86 instance cki88 bs89 examples recent empirical studies aimed providing realistic descriptions multiagent software processes modeling efforts cast form language computational environment seek resolve shortcomings modeling automating ie simulating software processes allows us identify new work presented approach uses software process metamodel derived established approach empirical studies computing organizational settings addition allows us model multiagent software processes open systems manner meaning process conflicts arise must resolved locally ie agentagent interactions rather automated global control environment supports simulation multiagent process models metamodel individual process models process simulation traces queried directly deductively sections follow describe 3 architecture users articulator articulator knowledgebased environment studying software processes provides metamodel software processes objectbased language specify models software processes automated simulation mechanism system architecture articulator consists five subsystems figure 1 knowledge base behavioral simulator query mechanism instantiation manager knowledge acquisition manager articulator prototyped twoyear period using knowledgecraft tm knowledge engineering environment gamma explorerii tm car86 knowledge base implements articulator metamodel objectbased approach metamodel consists web resources situations model software development representation agents task performance skills software process specification language spsl user interface enabling users define customized software process models based metamodel knowledge base defined within objectbased knowledge cluster section 4 provides details articulator knowledge schema instantiation manager manages relationships metamodel customized software process models instances maintains relationships according creation time lines inheritance well retrieving correct instance requested contrast conventional database systems explicit boundary among metamodel software process model instances manipulated modified associated instance old one whenever needed behavioral simulator controls simulation given software process model creates process trajectory 2 development period regard behavioral simulation symbolic execution software process model described spsl notation mechanisms perform software process activities implemented within behavioral simulator terms representation software processes three types existing articulator prescriptive process model execution simulated trajectory prescription descriptive recorded development history serves different purpose articulator bears form representation section 5 provides detailed view behavioral simulator query mechanism supports logical rules various types deductive queries helps users access information articulator efficiently information sources knowledge base ie metamodel software process models instances using object inheritance techniques backwardinference mechanisms query mechanism process trajectory sequence snapshots software development period time advanced case environment project managers software process experts sp model sp model 2 instaniation manager knowledge base knowledge acquisition query mechanism knowledge acquisition query mechanism knowledge acquisition query mechanism sp model 1 figure 1 system architecture articulator reasons information knowledge determine answers several types questions section 6 description query mechanism knowledge acquisition manager interface articulator get software process model associated data knowledge acquisition manager takes structured description agents tasks resources inputs translates configured software process model also assesses information gathered software development projects controlled articulator stores later use automated knowledge acquisition manager interactive capturing model refinements realtime software process data implemented yet simple mechanisms model data input currently use users articulator fall three categories process researchers project managers software developers software process researchers study software process models order identify ones highly efficient satisfy different performance requirements reveal subtle software process dynamics requiring study users define various types software process models test simulation compare simulation results observed development histories refine according certain criteria iterative incremental process continues acceptable model software processes achieved fits particular infrastructure users may potentially modify metamodel well necessary incorporate new features software project managers select configure existing software process model suits project needs essentially provides guidance plan carry successfully managers use articulator get access software process model instantiate according local project situations simulate refine order create plan development realize organizational settings encounter unexpected problems planned development project consult articulator find plausible solutions evolve model based solution similar suggested use callisto system used computer manufacturing processes sfg85 software developers use articulator case environment sca88 way articulator helps coordinate development activities according prescriptive model serves active agenda mechanism information exchange center time development activities recorded history development fed back managers order monitor development progress history used software process researchers empirical source observation practical character software process model use also used validating model making modifications 4 articulator metamodel section presents articulator metamodel stored knowledge base objectbased representation software development infrastructure consists web resources situations agents task performance skills 41 web resources situations web resources situations describes infrastructure developers organizations tasks resources software systems engineered intended provide articulate view many aspects software engineering processes within single formalism theoretical scheme underlying articulator metamodel web model computing introduced kling scacchi ks82 web model replies upon empirical studies make explicit variety connections computing technologies artifacts activities together embedding social situations organizational frastructure also focuses equal attention people computing systems interact cooperate compete conflict course work computational form web consists clusters attributed objects relations linking together various processing mechanisms objects defined model type components software process represented schematic class objects divided several subclasses subclass divided repeatedly empirically observable level detail reached furthermore every schematic class set attributes specifying properties set relations linking classes may many instances inherit defined properties relations defined values several high level classes web resources situations shown figure 2 briefly discuss main components relationships 3 top level abstraction articulator metamodel consists three major objects resources agents tasks linked together two relations agents perform tasks tasks use resources abstraction captures fundamental understanding software development processes larger sense complex organizational activities resource model general objects products portrays general properties organizational objects root articulator metamodel terms isa relation accordingly resources objects used tasks agents articulator metamodel tasks consume produce resources turn alter values resource 3 current implementation web represents 500 object classes nearly 2000 relations object classes include 10 attributes addition 200 rules procedures support behavioral simulation query processing role agent accommodation individual negotiation collective individual primary task collective primary task articulation task individual agent collective agent organization figure 2 part web resources situations along isa relation attributes attributes include among others name current status function description location ownership usage tasks agents agent represents collection behaviors associated attributes agents behavior emerges performance tasks including communications accommodation negotiation given agents set skills available resources affiliated agents organizational constraints incentives given agents circumstantial situation use agents general model developers development teams organizations also include development tools computers software programs subclass agents agents ability perform tasks defined working load agenda selected work style working tasks together behavior controller self agent may also skill experience knowledge task performance order perform task agent must possess necessary resources rights information access living organizational infrastructure agent may affiliations organizations play different roles different organizational situations gar89 ks82 besides agents knowledge representation specifies potential behaviors behavior also dynamically simulated aspects discussed later several types agents articulator metamodel individual agents single entities single developer single machine collective agents teams organizations infrastructures defined group agents work together thereby enlarging efforts collective agent individual agents work cooperatively competitively achieve collective individual goals however collective agents also conflict achieve goals well goals worth achieving order task models organizational work development processes tasks represent situations work processes terms network actions ie operators agents perform manipulate web resources situations task defined structural hierar chy used represent semiformal plan actual task carried prescription actual execution trajectory task done descrip tion include hierarchy task decomposition nonlinear performance sequence model two types organizational work primary tasks articulation tasks bs87 distinguish developmentoriented tasks coordinationoriented tasks hierarchy task decomposition may include multilevel nested decomposition iteration multiple selection levels specification depend user requirements modified requested bottom level hierarchy actions actions basic processing units within processing mechanism action links procedural specifica tion lisp function forwardchaining mechanism propagates updates current state instance web resources situations interesting properties task include assigned authorized performers task hierarchy execution ordering schedule duration deadline start time finish time resources planned consumed produced task articulator metamodel open system hew86 following special characteristics ffl boundary metamodel interface outside world deter minable though necessarily static metamodel besides manipulating resources communicates outside world communication articulator metamodel outside world made possible acquiring providing resources ffl resources web life cycle every instance resource either created task introduced outside world persists period time consumed tasks exported outside ffl agents power manipulate web resources situations limited configurable manipulation power includes possession control resources rights information access rights task performance power restricted constraint period time hand power may reconfigured time authorized agents way centralized control distributed control something modeled articulator meta model also differences relative power among interacting agents give rise conflicts task performance conflicts thus alter task situation focus performance resolution conflict ffl web resources situations densely interrelated infrastructure defi nition entity web associated many objects relations kind infrastructure execution task cause many implicit side effects besides intended behavior example development task manager agent may assign task developer agent without allocating necessary resources task completion cause problem task assignment surely delay task execution since developer agent spend time find resources required task execution consequence implication side effects interest resemble real situations many ways establishing model software development process made possible using articulator metamodel different types software process models defined example software productionprocess model waterfall model gar89 hk89 ost87 wil88 automation model gar89 specified articulator hierarchy software development activities suggested prescriptive execution sequence software productionsetting model viewed mixed task representation primary tasks articulation tasks example used later define simple working team development team called teama belongs company f three members mary joe peter team responsible task designing foo system consists two component tasks architecture design detail design small example essentially shows setting development team task assigned team figure 3 gives specification example spsl details resource specification detailed process prescription provided later companyf organization model defineobject companyf isa teama team companyf two members mary joe defineobject teama isa team teambelongtoorganization companyf defineobject mary isa people legend individualincollectiveagent lowercase words reserved key terms taskexecutionstrategy finishonefifs uppercase words reserved object types accommodationstrategy switching uppercase starting word defined objects defineobject joe isa people individualincollectiveagent taskexecutionstrategy finishonefifs accommodationstrategy waiting task designfoo two subtasks assigned mary joe defineobject designfoo isa taskchain taskforceassignedtoagent joe mary productiontaskhascomponent architecturedesign detaildesign subtask architecturedesign assigned mary defineobject architecturedesign isa taskchain taskforceassignedtoagent mary subtask detaildesign assigned mary joe defineobject detaildesign isa taskchain taskforceassignedtoagent mary joe taskforcehaspredecessors architecturedesign figure 3 spsl specification teama five classes objects defined terms associated attributes details omitted simplicity task specification performed team given fig 7 42 model agents task performance skill agents behavior software process way performs tasks given plans emerging circumstances words trajectory task execution constitutes agents behavior behavioral specification knowledge representation task performance skill str88 agents task performance skill represented according threelevel paradigm level space specifying particular type knowledge operators manipulate threelevel paradigm similar concept multilevel problemsolving architectures gen83 ste81 domain space stores information knowledge application domain agents personalized domain knowledge generally subset image web limited agents manipulation power ie possession resources information access rights task performance operators domain space actions designated agent perform within application domain task space stores operational knowledge manipulation reasoning domain information knowledge ie specification tasks words operators domain space also objects task space associated configured create meaningful tasks objects task space entities used evolution tasks operators task space metaactions manipulate tasks domain space also metatasks eg organize staff plan primary tasks task space combinations metaactions strategy space stores strategic knowledge directs tasks organizational work task performance control structures objects strategy space tasks space metatasks defined task space associated entities operators strategy space supermetaactions 4 manipulate metatasks order determine control structures representation operator applied state 5 space creates new state application operator step application task consists set ordered operators terms three spaces task execution reasoning process apply operational specification object task space task domain space state domain space infer new state continuous application operators according specified plans metareasoning process applying strategic specification object strategy space state task space infer new state continuous application operators according 4 super superclass class subclass hierarchies 5 state refers snapshot interrelated objectattribute values web thus new state represents updates objectattribute values relations current state strategic specification two types task performance skill modeled individual task performance collective task performance individual task performance models agents ability perform tasks individually conceptualized combination reasoning metareasoning processes three spaces problem presented agent first chooses strategy deal metareasoning performed create metatask problem turn used produce copying action problemsolving method ie task task space next task performed domain space produce resolution solution task problem known available reasoning process issued create solution collective task performance skill refers agents ability work agents interactions get things done jointly collective intelligence based individual task performance supports three basic kinds interaction communication synchronization articulation communication among agents way exchange information communication agents exchange knowledge web resources situations sending receiving messages message exchange transfer manipulation power also integrate individual efforts combining exchanged individual products together synchronization among agents arrange schedule group agents come together order perform collective tasks collective task performers present executed hand agents normally executing individual tasks may initialize collective tasks moment synchronization arranges schedules collective tasks responsible followup actions fails articulation last handles unexpected events stop normal task performance articulation way amplify individual skill intelligence workplace bs87 gs86 hew86 ms89 str88 discussed ms89 5 behavioral simulation specification software development process model set agents behavioral simulation defined agents symbolic execution task specification using available resources period time trajectory symbolic execution recorded predicted development history process behavior agents exhibited simulated task performance behavioral simulation generally begins set agents behavioral specification defined according current task performance knowledge skill agents given set tasks assignment set resources also provided along action anm action a2m action a1m time nm time n time n1 time n2 action action a2 action figure 4 behavioral simulation agents tasks resources consumed task performance others used returned ie reusable resources objects specified within single state initial instance process model starting position state used model trajectory different instance time state created actions actions linked tasks figure 4 suggests description behavior simulation picture timen timen1 states lines represent actions actions use resources represented circles overlapped circles indicate resource requirement conflicts resolved either synchronization articulation ms89 several requirements observed behavioral simulation 1 task assignments stable otherwise explicitly changed say agents must finish assigned tasks simulation done 2 time instance agent cannot perform two actions simultaneously agent may perform several tasks concurrently period 3 time instance agent work tasks available supply resources allow 4 preconditions associated action must satisfied executed preconditions include resource requirements partial ordering exe cution execution authorization run current action rule selects agent agenda current action conditions starts execution p runaction context instance schemaname agent controllergoal controlleractionchecked agenthasagenda agenda agenda instance schemaname agenda currentslot cslot timeslotallocation slots action instance schemaname action schemaname selectcurrentaction slots cslot format start execute action action newvalue agent controllerparameter1 currentpl slots cslot newvalue agent controllergoal runaction figure 5 spsl rule individualagent action behavioral simulation starts initial state simulates agents activities performing assigned tasks simulation task performance accomplished agents tasks actions agenttask agentaction communication one one many 1 one many many 1 scheduling one agent many many many 1 n 1 communication among agents many one many synchronous combination results many one many 1 1 synchronization performance many many many n 1 figure types task performance agents execution task specification topdown fashion higher levels task hierarchy provide information work assignment resource allocation lower levels task hierarchy provides links procedural definitions executable order create new states simulation step symbolic execution done first propagating necessary information high levels lower ones checking preconditions action invoking associated procedural definition propagate changes changes different agents combined form new state software process model two things condition new state task execution first agent selects executing action choice selected action among current work assignments choice influenced determined outsiders second probably conflicts resource requirements changes need solved articulation ms89 part symbolic execution action shown figure 5 rule gets agent agenda finds current action starts execute action symbolically final result behavioral simulation trajectory period time every action tasks performed subset agents time instant trajectories made persistent evolvable trajectories subsequently studied according different criteria order analyze information task performance agents behavior execution productivity resource utilization alternative whatif scenarios interesting properties however task execution guaranteed finish successfully problems may rise due unexpected events need articulated articulation task performance also affects criteria consequences tracked well ms89 based articulator metamodel many types agents tasks assigned software development process means behavioral simulation divided several types according number involved agents tasks communication patterns agents shown figure 6 let us consider earlier example teama figure example input articulator simulated behavior simulator example two agents performing task design foo task specification work assignment shown figure 7 resource requirements designfoo also given show single requirement figure 8 addition mary another task thus sends message peter another member company f assistance due space limits present summary report figure 9 simulation obtained trajectory history provides condensed information simulation discuss types behavior demonstrated example behavioral simulation involves multiple agents performing single task requires combination agents task results initially three agents two tasks however example focuses one performed two agents combination performance taskaction ordering emerges either two actions executed time agent selects one randomly agents communicate twice simulation time 3 mary sends work assignment joe reads message time 5 begins perform task time 7 mary sends file peter time 9 reads time 12 lack resources occurs twice resolved accommodation time 7 joe tries start task execution validdocumentspec document created action validatingarchitecturedesign exist moment since joe chooses waiting strategy accommodate figure 3 simply waits resource fortunately resource becomes available time 8 continues time 8 mary encounters problem prefers switch another task accommodation strategy selects perform another task sendfiletopeter resume original task time 10 resource available task execution completes eleven time steps two agents total 22 time steps two agents 12 used perform task 1 waiting 1 switching time steps slack time could utilized task performance needed 6 query mechanism query mechanism accepts user queries retrieve information articulator metamodel software process models instances query functions built bottomup fashion set atomic functions implemented forwardchaining rules used get basic information attributes detailed design architectural design designfoo task component task successor legend a3 actions a1 establish system structure a2 decompose system a3 establish subsystem interface a4 inform joe task a5 document architecture design a6 validate architecture design a7 design module structure a8 develop data representation a9 detail subsystem interface a10 design system interface figure 7 task decomposition designfoo unshaded actions indicated circles assigned mary shaded actions assigned joe systemdatastructurespec resource manipulated designfoo created developingdatarepresentation used definingalgorithm designingsysteminterface defineobject systemdatastructurespec isa document figure 8 resource specification spsl relations atomic retrieve attributes relations set rules used find designated relation exists two objects higher level functions involve knowledge representation provide information represen tation users encouraged develop queries using facilities provide main concern query mechanism provide set functionallycomplete basic facilities four types queries supported query mechanism metaknowledge queries information queries history queries whatif queries metaknowledge query provides definition entity related terminology articulator based information given object defined stored meta knowledge example definition meta knowledge appears figure 10 function intended help new users understand articulator metamodel users also provide metaknowledge models defined order help guide users interactions given model metaknowledge query form qwhat example figure 10 also lists metaknowledge query company f question shown figure information query provides information either state software process model model generally concerned resource values configurations typical questions answered include peter member teama time 1 relations linking peter mary etc information query several basic functions kind deductive retrieval example qis checks existence entity status qrelation finds relations link two given entities 6 documentarchitecturedesign idle idle 9 sendfiletopeter developdatastructure idle figure 9 summary simulation result use information query every value every relation within state retrieved without difficulty complicated queries implemented examples query building using basic functions example qfollower qpredecessor used find follower actions predecessor actions given action along relation taskforcehasfollower two queries useful users check configuration tasks perform implemented qrelation query using taskforcehasfollower given relation another example get component modules given software project implemented qsoftconfiguration many queries specific requirements built manner figure 11 provide information queries simple model company f history query traverses trajectory states created simulation collects record changes specified entities summarizes give clear condensed information changes typical information provided history queries includes activities performed agents simulation period resources consumed produced agents teams specific queries may ask consequence particular action value change inserted relation implementation history query based information queries instantiation manager former provides facilities retrieve information within state latter gives capability traverse within state trajectory also history query facility sum gathered information simulation result presented figure 9 comes definition metaknowledge schema spsl definitions explanation defineobject metaknowledge isa schema methodsandprocedures definition meta knowledge resource defineobject metaresource isa metaknowledge definition resource basic entity kb provides basic descriptions entities metamodel every object must class resource instance resource methodsandprocedures resource created used consumed reasonorexplanation na literatureavailable mi attachmetaschema resource metaresource metaknowledge query question related entity isa resource bind definition getvalue getmetaschema entity definition definition entity kb fail example use question companyf qwhat companyf definition companyf software vendor develops software sun systems currently three members mary joe peter figure 10 metaknowledge spsl queries question mary metamodel qis mary true relation question mary joe related qrelation mary joe mary individualincollectiveagent companyf collectiveagenthasmember joe means mary joe companyf follower question followers developdatarepresentation qfollower developdatarepresentation designsysteminterface figure 11 examples information query history query whatif query includes combination simulation history queries starts given state modification state middle sequence trajectory calls behavior simulator simulate given updated scenario simulation done history query activated gather required information whatif queries designed facilitate testing hypothesis scenario handling unexpected events 7 conclusion within articulator project propose novel contributions study software engineering processes using knowledge engineering environment create tractable opensystem model software processes resource infrastructures articulated agents working development settings explore relationships among components software processes development resources developers within model impact software development products processes workplace settings study also provide formalisms represent task performance skill present metamodel software processes suitable describing software process models contributions enhanced simulation dynamics software process models basis querying state values represented model simulated trajectory recorded process history articulator becomes complete hope provide framework assist interactive empirical study large scale software development projects r understanding software maintenance work work structures shifts empirical analysis software specification teamwork carnegie group inc field study software design process large systems building software process model lamppost cooperation communication distributed problem solving network information management software engineering overview metalevel architecture analyzing due process workplace offices open systems software process modeling principles entity process models web computing computer technology social organization negotiation collective problemsolving approach software processes software usc system factory project representation activity knowledge project management molgen part 2 planning metaplanning articulation project work organizational process metamodel software process software process modeling behavioral approach tr metamodel software process understanding software maintenance work software processes software building software process models lamppost field study software design process large systems breakdowns processes early activities software design professionals methodology studying software design teams investigation conflict behaviors requirements definition phase software process modeling behavioral approach planbased intelligent assistant supports software development work structures shifts software process modeling integration computing routine work analyzing due process workplace offices open systems intelligent assistance software development maintenance ishys ctr peiwei mi walt scacchi process integration case environments ieee software v9 n2 p4553 march 1992 c bellettini e damiani g fugini user opinions rewards reusebased development system proceedings 1999 symposium software reusability p151158 may 2123 1999 los angeles california united states pankaj k garg peiwei mi thuan pham walt scacchi gary thunquest smart approach software process engineering proceedings 16th international conference software engineering p341350 may 1621 1994 sorrento italy markku oivo victor r basili representing software engineering models tame goal oriented approach ieee transactions software engineering v18 n10 p886898 october 1992 darren c atkinson daniel c weeks john noll tool support iterative software process modeling information software technology v49 n5 p493514 may 2007 kari rnkk yvonne dittrich dave randall plans work plans used software development projects computer supported cooperative work v14 n5 p433468 october 2005 christopher lott process measurement support sees acm sigsoft software engineering notes v18 n4 p8393 oct 1993 nazim h madhavji kamel toubache ed lynch ibmmcgill project software process proceedings 1991 conference centre advanced studies collaborative research october 2830 1991 toronto ontario canada david raffo evaluating impact process improvements quantitatively using process modeling proceedings 1993 conference centre advanced studies collaborative research software engineering october 2428 1993 toronto ontario canada g fugini c bellettini corrigenda hierarchyaware approach faceted classification objectoriented components acm transactions software engineering methodology tosem v8 n4 p425472 oct 1999 g fugini c bellettini hierarchyaware approach faceted classification objectedoriented components acm transactions software engineering methodology tosem v8 n3 p215262 july 1999 maria letizia jaccheri gian pietro picco patricia lago eliciting software process models vincenzo ambriola reidar conradi alfonso fuggetta assessing processcentered software engineering environments acm transactions software engineering methodology tosem v6 n3 p283328 july 1997