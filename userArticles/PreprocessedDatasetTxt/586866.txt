online load balancing hierarchical server topology hierarchical server environment jobs assigned online fashion collection servers form hierarchy capability job requests specific server meeting needs system free assign either server server higher hierarchy job carries certain load imparts server assigned goal find competitive assignment maximum total load server minimizedwe consider linear hierarchy servers totally ordered terms capabilities investigate several variants problem unweighted opposed weighted problem jobs unit weight fractional opposed integral model job may assigned several servers receiving fraction weight finally temporary opposed permanent jobs may depart active finite duration time show optimal ecompetitive algorithm unweighted integral permanent model algorithm e1competitive weighted case fractional version ecompetitive even temporary jobs allowed integral model temporary jobs show algorithm 4competitive unweighted case 5competitive weighted case show lower bound e unweighted case integral fractional bound valid even respect randomized algorithms also show lower bound 3 unweighted integral model temporary jobs allowedwe generalize problem consider hierarchies servers form tree tree hierarchy job assignable node also assignable nodes ancestors show deterministic algorithm 4competitive unweighted case 5competitive weighted case permanent jobs allowed randomizing algorithm improves competitiveness e e1 respectively also show omegasqrtn lower bound temporary jobs allowed b introduction one basic online loadbalancing problems following jobs arrive one time must scheduled one n servers job certain load associated subset servers may scheduled goal assign jobs servers minimize cost assignment defined maximum load server nature loadbalancing problem considered online decisions must made without knowledge future jobs previous decisions may revoked compare performance online algorithm performance optimal oline schedulerone knows entire sequence jobs advance ecacy parameter online scheduler competitive ratio roughly defined received editors october 26 1998 accepted publication revised form march 29 2001 published electronically september 26 2001 extended abstract paper appeared proceedings 7th european symposium algorithms lecture notes comput sci 1643 httpwwwsiamorgjournalssicomp31234613html researchattcom author leave electrical engineering department tel aviv university tel aviv 69978 israel computer science department technion haifa 32000 israel ariefcstechnionacil naorcs technionacil 528 amotz barnoy ari freund joseph seffi naor maximum ratio taken possible sequences jobs cost incurred algorithm cost optimal assignment 11 hierarchical servers problem hierarchical servers problem servers form hierarchy capability job may run given server may also run server higher hierarchy consider linear hierarchy servers numbered 1 n imagine physically ordered along straight line running left right server 1 leftmost server n rightmost leftward servers capable rightward ones say servers 1 left servers right input sequence jobs carrying positive weight requesting one servers job requesting server assigned servers left servers jobs eligible servers assignment job weight w server increases load w initially loads 0 use terms job request interchangeably cost given assignment l load server use opt cost optimal oline assignment algorithm ccompetitive exists b 0 independent input cost c opt sequences scalable problems additive factor b may ignored lower bound constructions consider variants models problem according three orthogonal dichotomies integral model job must assigned entirety single server fractional model jobs weight may split among several eligible servers weighted model jobs may arbitrary positive weights unweighted model jobs unit weight results fractional model hold unweighted weighted cases distinguish unweighted fractional model weighted fractional model finally permanent jobs continue load servers assigned indefinitely temporary jobs active finite duration time depart duration temporary job active known upon arrival may allow temporary jobs may restrict input permanent jobs temporary jobs allowed cost assignment defined l load server time version problem view basic weighted integral model permanent jobs natural generalization problem servers form rooted tree hierarchy job requesting certain server may assigned ancestors tree various models pertain problem well hierarchical servers problem important practical paradigm captures many interesting applications diverse areas assigning classes service calls communication networks routing queries hierarchical databases signing documents ranking executives upgrading classes cars car rental companies theoretical point view hierarchical servers problem also interesting virtue relation problem related machines 3 problem servers eligible every job may dierent speeds assigning job weight w server speed v increases load wv without loss generality assume speed server consider set jobs assigned cost bounded c let us focus particular job whose weight w achieve cost c must refrain assigning load balancing hierarchical servers 529 job server wv c words exists rightmost server may assign job thus restricting cost induces eligibility constraints similar hierarchical servers problem ideas developed context hierarchical servers problems applicable problem related machines leading better bounds problem 10 12 background graham 16 explored assignment problem job may assigned servers showed greedy algorithm competitive ratio 2 1 later work 8 9 17 2 investigated exact competitive ratio achievable problem general n various special cases best results date general n lower bound 1852 upper bound 1923 2 years many loadbalancing problems studied see 4 20 surveys assignment problem arbitrary sets eligible servers allowed considered azar naor rom 7 showed upper lower bounds log n several variants problem permanent jobs assumed subsequent papers generalized problem allow temporary jobs 5 lower bound n upper bound 23 shown upper bound later tightened n 6 related machines problem investigated aspnes et al 3 showed 8competitive algorithm based doubling technique result improved berman charikar karpinski 12 showed refined doubling algorithm 3 5828competitive randomizing algorithm able improve bound 4311 also showed lower bounds 2438 de terministic 1837 randomized randomized bound recently improved 2 14 azar et al 6 generalized problem allow temporary jobs showed deterministic upper bound 20 implies randomized upper bound 5e 1359 lower bound 3 upper bounds later improved resource procurement problem defined studied kleywegt et al 18 independently work problem jobs arrive discrete time specifying deadline must complete jobs must executed single server view problem assigning permanent jobs parallel servers think time slots servers fact problem equivalent following variant hierarchical servers problem model considered fractional model permanent jobs input consists precisely n jobs jth job arrive specifies server servers eligible job j addition online nature problem less demanding scheduler need commit full assignment job immediately arrival rather jth job arrives must decide fraction first j jobs assign server n 1 kleywegt et al 18 developed lower bound technique similar able establish lower bound 251 analytic numerical means also described 345 competitive algorithm 13 results significant portion work devoted developing continuous framework recast problem continuous framework mere relaxation problems discrete features rather fully fledged model new variant problem defined advantage continuous model lies ability employ tools infinitesimal calculus making analysis much easier section 2 use continuous model design optimal ecompetitive algorithm surprisingly algorithm operates counterintuitively weight distribution assigned job biased left ie weight ends leftward servers show general procedure transforming algorithm continuous model algorithm fractional model also show general procedure transforming algorithm fractional model algorithm integral model thus get ecompetitive algorithm fractional model algorithm respectively e 1competitive unweighted integral weighted integral models former algorithm admits temporary jobs latter upper bound e also applies resource procurement problem kleywegt et al 18 virtue theorem 2 paper thus improve best upper bound 345 section 3 develop procedure deriving lower bounds context continuous model construction continuous model rather unconventional generalization discrete model fact surface things two models seem incomparable albeit analogous deeper level though turns continuous model actually special case discrete model making lower bounds obtained continuous model valid discrete setting well makes upper bound intriguing developed continuous framework transported back discrete model lower bounds obtained procedure also valid discrete models fractional well integral even unweighted case permanent jobs even respect randomized algorithms using procedure find e tight lower bound since lower bound technique one used independently kleywegt et al 18 context resource procurement problem lower bound e applies problem well improves best lower bound 251 thus work solves problem completely demonstrating tight bound e section 4 consider temporary jobs integral model show doubling algorithm 4competitive unweighted case 5competitive weighted case also show deterministic lower bound 3 section 5 extends problem tree hierarchy show algorithm respectively 4 4 5competitive fractional unweighted integral weighted integral models randomizing algorithm improves competitiveness e e e 1 respectively show lower bounds n models deterministic randomized temporary jobs allowed eect restricting sets eligible servers several ways discussed section 6 three cases consider show lower bound log n example lower bound holds case servers form circuit line eligible servers must contiguous note since problems special cases problem considered 7 upper bound olog n immediate 2 upper bounds section show algorithm whose respective versions fractional unweighted integral weighted integral models e e 1competitive fractional version admits temporary jobs integral versions build algorithm introducing studying semicontinuous model class memoryless algorithms begin optimum lemma characterizes opt terms input sequence 21 optimum lemma fractional unweighted integral models lemma provides exact formula opt weighted integral case gives load balancing hierarchical servers 531 2approximation 1 optimum lemma recurrent theme exposition given input sequence given server denote w total weight jobs requesting servers left let clearly h lower bound opt unweighted integral model tighten h addition maximum weight job input sequence denoted w max also lower bound opt integral model turning upper bounds opt let us say given server saturated given moment load least h integral model consider algorithm assigns job rightmost unsaturated eligible server algorithm treats jobs online fashion requires advance knowledge h oline clearly unsaturated eligible server always found cost h w max claim indeed case see suppose job weight w arrives eligible servers saturated let maximal servers left saturated maximality jobs assigned left must requested servers left since total weight least h w contradiction fractional model modify algorithm follows job weight w arrives assign follows let rightmost unsaturated eligible server let l current load w assign job entirety otherwise split job assign units weight treat remainder recursively new job assigned algorithm achieves cost h optimum lemma summarizes results fractional model unweighted integral model weighted integral model 22 memoryless algorithms memoryless algorithm algorithm assigns job independently previous jobs course memoryless algorithms interest fractional model model going consider focus restricted type memoryless algorithms namely uniform algorithms uniform memoryless algorithms instances generic algorithm shown instance characterized function u algorithm genericuniform job weight w requesting server arrives 1 r w 2 r 0 3 assign min w ui r units weight server 4 r r 5 1 unreasonable expect easily computable formula opt weighted integral model would imply polynomialtime solution nphard problem partition 532 amotz barnoy ari freund joseph seffi naor algorithm starts server requested job proceeds leftward long job fully assigned fraction jobs weight assigned server ui unless w ui remainder job reached condition ensures job always fully assigned algorithm note assignment generated uniform memoryless algorithm independent number servers order jobs input moreover collection jobs total weight w requesting server may replaced single request weight w therefore assume exactly one job requests server allow jobs zero weight number servers infinite denote weight job requesting server w consider job weight w requesting server right given server requested server close job leave wus units weight regardless exact server requested point however jobs contribution load begin diminish distance request grows finally request made far enough away eect denote p point beyond eect begins diminish p point dies completely note p p may undefined case take infinity interested functions u satisfying p importance p lies fact load due jobs requesting servers range p simply us times total weight jobs following lemma corollary dicult prove worst case lemma let uniform memoryless algorithm following problem given k 0 server find input sequence maximizes load assignment subject solved l resultant load ssatisfies p corollary 3 let uniform memoryless algorithm let ca competitive ratio sup 23 semicontinuous model fractional integral versions problem servers jobs discrete objects therefore refer models discrete models section introduce semicontinuous model servers made continuous section 3 define continuous model making jobs continuous well semicontinuous model best understood physical metaphor consider bottom vessel filled nonuniform fluid applying varying degrees pressure dierent points force acting single point zero load balancing hierarchical servers 533 region nonzero area suers net force equal integral pressure region similarly semicontinuous model talk individual servers rather continuum servers analogous bottom vessel arriving job analogous quantity fluid must added vessel notions load weight become divorced load analogous pressure weight analogous force formally server interval 0 jobs must assigned job j weight w j requests point j 0 server interval assignment job j specified integrable function 2 x 3 g j continuous right every point full assignment given full assignment g load l defined l x gz dzthe mean weight density load point x defined l gx introduce notation l x consistency previous notation cost assignment lemma 4 optimum lemma semicontinuous model let w x total weight requests made left x including x proof lower bound trivial upper bound let x 1 x 2 points requested jobs rearrange jobs jth job requests x j idea pack jobs order rectangle extending left end server interval let consider following assignment assignment clearly attains follows definition h j sucient assignments validity adapt definition uniform memoryless algorithms semicontinuous model model uniform algorithm characterized function 0 follows given point x 0 let qx point satisfying equation 1 assignment job j qx g j defined properly must require otherwise algorithm may fail fully assign jobs requesting points close 0 note load 0 always zero given point x 0 define px point px x px exist algorithms competitive ratio unbounded demonstrated request sequence consisting jobs unit weight jth job requests point j sequence l shall therefore allow algorithms satisfying 0 semicontinuous model nice property p p disparate discrete model fuse single entity ps worst case lemma corollary become following lemma lemma 5 worst case lemma semicontinuous model let uniform memoryless algorithm defined ux following problem given k 0 point 0 server interval find input sequence maximizes load assignment subject solved single job weight psk requesting point ps resultant load pskus corollary 6 competitive ratio sup x pxux 24 ecompetitive algorithm semicontinuous model consider algorithm harmonic uniform memoryless algorithm defined let us calculate px x dz z x thus competitive ratio algorithm harmonic sup x ex 1 25 application discrete models devised competitive algorithm semicontinuous model wish import discrete model start showing transform algorithm semicontinuous model algorithm discrete fractional model following show algorithm fractional model may transformed algorithm integral models semicontinuous fractional let input sequence fractional model treat server point 0 view request server request point view request sequence semicontinuous model well respective optimum lemmas lemmas 1 4 value opt models let ccompetitive online algorithm semicontinuous model define algorithm b fractional model follows job j arrives b assigns units weight server g j assignment function generated job clearly cost incurred b bounded cost incurred thus b ccompetitive important observation memoryless b thus even temporary jobs allowed assignment generated b ccompetitive times compared optimal oline assignment active jobs give algorithm thus derived algorithm harmonic name fraction alharmonic proposition 7 algorithm fractionalharmonic ecompetitive even temporary jobs allowed fractional integral let algorithm fractional model define algorithm b integral model weighted unweighted follows jobs arrive b keeps track assignments would make server said overloaded load bs assignment exceeds load assignment assigns rightmost eligible server overloaded allowed assign job proposition 8 whenever job arrives least one eligible servers overloaded load balancing hierarchical servers 535 proof denote l j load server job j assigned b respectively job j considered assignment b server overloaded j define l j claim j 1 job j arrives server 1 eligible overloaded 2 proof induction j claim clearly true job j 1 whose weight w l j 1 second inequality justified induction hypothesis thus server 1 overloaded remains show let rightmost server algorithm assigns part job j ie maxs j j 1 let b server b assigns job induction hypothesis j b b assuming b still prove claim b 1 algorithm assigns job j server b one servers b 1 eligible right b must therefore case l j 1 thus b 1 l l j l b l b second inequality justified induction hypothesis let w max j maximum weight job among first j jobs algorithm maintains l b j unweighted case weighted case w max opt optimum lemma lemma 1 value opt integral model least high value fractional model thus ccompetitive b ccompetitive unweighted case 1competitive weighted case give algorithm thus derived algorithm fractionalharmonic name integralharmonic proposition 9 algorithm integralharmonic ecompetitive unweighted case e 1competitive weighted case 3 lower bounds section devise technique proving lower bounds limit n bounds obtained valid fractional integral models even unweighted case fact remain valid even presence randomization respect oblivious adversaries using technique obtain tight constant lower bound e success approach facilitated transporting problem discrete setting continuous model jobs servers continuous 31 simple lower bound consider fractional model restricting attention righttoleft input sequences defined sequences made request server restrict attention sequences server requested exactly allow jobs zero weight 536 amotz barnoy ari freund joseph seffi naor b fig 1 histogram job weights let kcompetitive algorithm given righttoleft input sequence denote w weight job requesting server l load server given moment suppose first n culminating request server assigned recall definition h optimum lemma lemma 1 denote h value h respect jobs since k competitive loads must obey l kh consider specific input sequence defined w w 0 sequence h thus first job assigned l n kwn second job handled l n1 2kwn l n kwn still holds new job could assigned server n general request server processed l n noting total weight jobs input equals total load servers assignment complete get kw kw hence k lim n 2 n 2 32 discussion figure 1 depicts request sequence resultant kh histogramlike fashion heights bars indicating respective values bars equal width equivalently consider area rather height precise let us redraw histograms bars width 1 height equal numerical values represent total weight assigned total area job bars total weight actually assigned bounded total area kh bars instead drawing histogram kh let us draw histogram h lower bound found solving total area job bars k total area h bars total area job bars total area h bars note multiply weights jobs constant c 0 heights job bars h bars increase factor c leaving area ratio intact similarly express scaling job weights scaling width bars histograms eect resultant ratio thus express entire procedure geometric terms follows select input histogram width bar 1 let h ij area bars divided jn width j bars let h divide area jn rather j h height bar whose area load balancing hierarchical servers 537 equals value opt first n divide area input histogram area h histogram drawn scale obtain lower bound scaling histograms allows us keep considering finite areas n goes infinity forms link discrete model continuous model introduce next 33 continuous model continuous model motivated observation analysis suggested previous section tends exceedingly dicult simplest input histograms turn continuous model order avail machinery infinitesimal calculus continuous model diers semicontinuous model introduced section 2 two ways instead infinite server interval use finite interval 0 impor tantly jobs continuous model discrete rather continuous job flow arriving time possible define general continuous model arrival jobs time described function place server interval time although model interesting mathematical construction right focus restricted modelone allows equivalent righttoleft sequences formally input request function integrable nonnegative real function fx defined server interval 0 interpretation f means integration ie x1 x0 fx dx total amount weight requesting points interval x 0 x 1 underlying intuition request flow righttoleft sense infinitesimal request point x assumed occur time assignment continuous assignment described assignment function integrable nonnegative real function gx 0 1 continuous right every point 2 satisfies x 0 0 equality x algorithm model algorithm given fx outputs gx x 0 gx interval x independent fx outside interval definition load cost semicontinuous model continuous model z proof let z zfx dx h addition assignment function achieves cost h let us adapt lower bound procedure section 32 continuous model consider request function fx corresponding assignment gx generated kcompetitive online algorithm wish bound value gx fixed point define new request function f respect f equals ha note analogy h ij h discrete 538 amotz barnoy ari freund joseph seffi naor model da value g must f f g produced online algorithm thus ga kha true hence lower bound ww readily obtained certain request functions simplify procedure fx continuous monotonically decreasing function tending 0 point x 0 x allowed use f restriction 0 request function following shortcut ha solve db h fx dx b let ba solution following easy justify ha ba note x 0 simplified procedure may return values ba outside server interval 0 case true value ha less value computed leading less tight still valid lower bound therefore use simplified method without concerned issue also sometimes convenient assume server interval rather finite 0 easily seen make dierence least far using simplified procedure concerned example let k find easier solve e e kx dx rather b db thus setting z z familiar exponential integral function 1 lower bound obtained therefore load balancing hierarchical servers 539 11 lower bound e obtained method considering request function e kx 1k limit k server interval 0 proof convenience consider integral values k start reviewing elementary facts concerning gamma functions 1 gamma function defined shown positive integer 1 incomplete gamma function defined z dt integrating parts obtain recurrence z e z also need stirlings approximation finally consider integral dx substituting k 1k z k1 e z dz thus finite returning problem dx k k1 relation b given kb 1k e kx 1k substituting r previous equation simplifying gives applying recurrence sides equation rearranging terms yields also get directly let us explore relationship r clearly r easy see function x k e x increases 0 k decreases k thus referring figure 2a see r k k 1 rk1 r area region marked x r r k e r area dotted rectangle r r 1 since areas equal x k e x decreases region next consider r k2 referring figure 2b applying reasoning see r1 k1 let us consider function x k1 e x maximum occurs 1 thus since k 1 function increases interval r referring figure 2c appealing k r k see summarize e r r 11k b c fig 2 relationship r graphs drawn scale using x k e x show r k r 1 b using x k e x show r k 2 k 1 c using x k1 e x show dierentiating get implies r k1 e dr k e putting pieces together e kb 1k da w dr r k1 e dr r k1 e dr e e r k1 e r dr substituting 11k first integral gives 11kz k1 e z dz e thus e e hence lim k e obtain lower bound lim k 34 application discrete models returning discrete setting claim lower bounds obtained using method continuous model apply discrete models well intuitively correct since continuous model may viewed limiting case integral models n arbitrarily long input sequences omit proofs lack space also claim lower bounds valid even randomized algo rithms whereas typical deterministic lower bound constructions adversarial dierent input sequence tailored algorithm lower bound technique provides single sequence fit algorithms consequently bounds derive also valid randomized algorithms seen easily either directly via yaos principle see eg 13 load balancing hierarchical servers 541 4 temporary jobs section allow temporary jobs input restrict attention integral model already seen section 25 optimal ecompetitive algorithm fractional model admits temporary jobs present algorithm 4competitive unweighted case 5 competitive weighted case also show lower bound 3 unweighted integral model recall definition h optimum lemma lemma 1 consider jobs active upon job js arrival including job j denote hj value h defined respect jobs server saturated arrival job j load least khj k constant determined later algorithm pushright assign job rightmost unsaturated eligible server proposition 12 k 4 whenever job arrives least one eligible servers unsaturated thus taking 5competitive unweighted resp weighted models proof begin considering properties certain sequences numbers whose role become evident later consider infinite sequence defined recurrence conditions 1 interested values k sequence increases monotonically solving recurrence reveals following 4 k 4 two roots quadratic polynomial k 4 easy see sequence increases monotonically first two cases third consider infinite sequence obeying dicult show k chosen increases monotonically ie k 4 i2 ks returning proposition let k 4 suppose job arrives find eligible servers saturated let j 0 first job let 1 server requested show construct two sequences i0 following properties 1 2 although servers eligible job j algorithm assign job right 3 jobs j i1 distinct arrive j 0 property 3 states job j 0 preceded infinite number jobs yielding contradiction already defined defined define i2 j i1 follows property 1 implies property 2 know job arrives total weight active jobs assigned servers least ks optimum lemma lemma 1 least one jobs must requested server whose number least ks one job i2 server requests 542 amotz barnoy ari freund joseph seffi naor 41 lower bound show lower bound 3 competitive ratio deterministic algorithms use essentially construction used 6 context related machines details dierent though owing dierent nature two problems completeness present construction full detail consider unweighted model motivate construction suppose value opt known advance consider algorithm assigns job rightmost eligible server whose current load less k opt k 1 appropriately chosen constant design input sequence targeted specifically algorithm shall see lower bound 3 obtained using input sequence valid online algorithm use algorithm motivate construction recall righttoleft input sequence sequence j requests server j made requests server input sequence righttoleft focus principles cost rigor shall refer either servers simply server also refer server x without worrying fact x may noninteger simplify matters design sequence opt 1 changed later figure 3 depicts first steps ensuing construction 1 kn 2 kn kn fig 3 first two rounds input sequence start making requests server n since opt already known algorithm lose nothing making n requests maximum permitted 1 algorithm assigns jobs servers n1 1 remove n jobs determined shortly naturally jobs remove ones assigned rightmost algorithm remaining n1 jobs ones assigned servers n1 1 k adversary assigns jobs servers n n value determined desire remaining jobs assigned algorithm strictly left assignment adversary end select k1 solves equation n proceed second round jobs logical choice request server n make n requests maximum permitted opt 1 algorithm assigns jobs range n1 1 n jobs ones assigned rightmost algorithm remaining n jobs assigned adversary range n n algorithm range determine solve n1 1 load balancing hierarchical servers 543 b fig 4 ith round solid rectangles represent assignment active jobs beginning round dotted rectangle represents assignment jobs arrive ith round subsequently depart algorithms assignment b adversarys assignment n arriving generalize procedure note number jobs arrive given round chosen equal number jobs depart round preceding let us introduce notation denote r server requests made ith round f leftmost server jobs gets assigned algorithm already chosen r n seen n ith round jobs suppose following two conditions hold end round 1 see figure 4 1 adversarys assignment active jobs assigned range 2 algorithms assignment active jobs arrived round occupy servers f i1 r jobs assigned left f i1 ith round r requests made server r assigned algorithm range f f i1 thus r next r i1 jobs depart r i1 chosen r r i1 remaining jobs occupy servers f r i1 thus kr equivalently f i1 actual lower bound construction follows let online algorithm purporting kcompetitive k 3 without loss generality k rational number arbitrarily close 3 consider two sequences defined simultaneously substituting k i1 i1 second recurrence get i1 shown see 6 exists minimal integer p p 0 rational number servers use n integers recurrences defining hold f r well let c positive integer construct input sequence unit weight jobs 1 cr 1 jobs request server r 1 2 3 cr i1 jobs requested server r i1 cr jobs assigned rightmost depart ties broken arbitrarily 4 cr new jobs request server r lower bound proof proceeds follows omit proofs lack space input sequence well defined must r 13 figure 4 denote j set jobs requesting server r j set cr i1 jobs j eventually depart let w number active jobs assigned left server time denote moment time immediately prior arrival jobs j observe recurrence f r i1 equivalent r 15 suppose algorithm kcompetitive w r corollary 16 algorithm kcompetitive 5 tree hierarchy section study generalization problem servers form rooted tree job requesting server may assigned ts ancestors tree let us introduce terminology server said lower proper ancestors trunk defined set servers u set u ancestor server u servers eligible given job form path also trunk refer interchangeably jobs eligible path eligible trunk given input sequence denote w total weight jobs requesting servers trunk let trunk denote w max maximum weight job sequence note analogy linear hierarchy following lemma proved manner similar proof optimum lemma linear hierarchy lemma 1 lemma 17 optimum lemma tree hierarchy fractional model unweighted integral model weighted integral model 51 doubling algorithm oline algorithm used proof optimum lemma lemma 17 nearly valid online algorithm oline feature requirement value h known outset thus employing standard doubling technique see eg 4 easily construct online algorithm respectively 4 4 7competitive fractional unweighted integral weighted integral models algorithm present based sophisticated doubling approach pioneered 12 4 4 5competitive respective cases randomized version algorithm respectively e e e start describing algorithm weighted integral model algorithm uses two variables guess holds current estimate h limit deter load balancing hierarchical servers 545 mines saturation threshold server saturated load least limit say set servers u saturated every server u saturated set u overloaded total weight assigned servers u greater u limit newly arrived job dangerous assigning lowest unsaturated eligible server overload trunk particular eligible trunk saturated job dangerous algorithm avoids overloading trunk incrementing limit whenever dangerous job arrives turn guarantees whenever job arrives least one eligible servers unsaturated note assigning job may saturate server assigned algorithm doubling initialize upon arrival first job 1 let w first jobs weight eligible trunk 2 guess wt limit guess job 3 job dangerous 4 guess 2 guess 5 limit limit guess 6 assign job lowest unsaturated eligible server divide algorithms execution phases new phase begins whenever lines 45 executed arrival heavy job may trigger succession several empty phases let p number phases denote guess limit respective values guess limit ith phase consistency define note initial value guess ensures guess 1 h proposition 18 guess h ith phase last one consequently guess p 2h proof suppose guess h consider beginning ith phase claim moment onward algorithm encounter dangerous jobs suppose true let us stop algorithm first dangerous job encountered assign job manually lowest unsaturated eligible server overloads trunk r let maximal trunk containing r r saturated clearly overloaded well total weight assigned greater limit hand overloaded end 1st phase since algorithm never overloads trunk thus total weight jobs assigned ith phase including job assigned manually greater limit limit i1 maximality jobs must requested servers thus total weight jobs requesting servers greater h yielding contradiction corollary 19 cost 4opt proof claim follows since cost limit thus algorithm doubling 4competitive unweighted integral model 5competitive weighted integral model fractional model modify algorithm follows job called dangerous eligible path saturated assigning job may split proof optimum lemma linear hierarchy lemma 1 algorithm achieves cost limit p 4opt 52 randomized doubling consider randomization oblivious ad versaries randomization technique use fairly standard similar idea used several times dierent contexts see eg 11 19 15 12 10 idea randomize initial value guess tweak doubling pa rameter specifically let r random variable uniformly distributed 0 1 select constant k 1 replace lines 2 4 shown e limit see 12 10 details expression minimized e h putting e thus e algorithm ecompetitive fractional unweighted integral models e1competitive weighted integral model 53 lower bounds temporary jobs contrast linear hierarchy allowing temporary jobs tree hierarchy drastic eect competitiveness solutions unweighted integral model show deterministic randomized lower bounds n 11 1 respectively bounds tight multiplicative constant demonstrated upper bound shown 6 general problem unrestricted eligibility constraints randomized lower bound construction applies fractional model well 531 deterministic lower bound integral models let deterministic online algorithm let 1 show input sequence assignment satisfies cost k server tree use flowerlike structure composed stem petals stem consists k servers 1 2 root parent 1 petals children k server k called calyx suppose competitiveness better k given n consider following request sequence let c arbitrarily large integer 1 2 jobs unit weight request petal p 3 jobs ck depart rest permanent choice jobs depart made maximize number jobs assigned p depart 4 ck jobs request calyx first stage lines 13 adversary always assigns permanent jobs petal temporary ones servers stem c jobs server thus beginning second stage jobs assigned stem servers adversary assigns c new jobs thus consider jobs requesting p since better kcompetitive assigns fewer ck jobs p thus iteration c permanent jobs assigned servers stem hence beginning second stage ck 2 jobs assigned servers stem since additional ck jobs must assigned servers stem least one server must end load greater ck contradicting assumption better k competitive load balancing hierarchical servers 547 532 randomized lower bound let us generalize previous construc tion use flowerlike server tree p petals stem servers input sequence two stages first consists p iterations ith iteration c request petal p c depart second stage cs jobs request calyx goal first stage push enough jobs stem algorithm fail second stage consider ith iteration let x j random variable denoting contribution jth job load servers stem integral model 01 variable fractional model x j may assume value 0 1 since algorithm better kcompetitive expected total weight assigned p less ck e j k thus exist c jobs c cs1ks1 adversary makes jobs permanent terminates rest consequently beginning second stage expected total load servers stem greater cps 1 end second stage expectation grows cs algorithm better kcompetitive expected maximum load server stem must less ck thus expected total load servers stem must less cks reach contradiction choose p satisfy solving equation yields ks 2 minimizing n fixed subject last equation yields 6 eligibility restrictions hierarchical servers problem sets eligible servers job restricted form example linear hierarchy following form servers left server special case problem considered 7 eligible sets may arbitrary section study various restrictions eligible sets focus following three 1 servers form path set servers eligible given job must contiguous path 2 servers form rooted tree job specifies node v whose descendents including v eligible 3 number servers eligible given job k fixed show extend log n lower bound 7 three variants problem shows greedy algorithm olog ncompetitive general problem remains optimal multiplicative constant many restrictive scenarios first variant consider following input sequence convenience assume n power 2 otherwise consider first 2 log n servers path jobs unit weight arrive log n rounds ith round consists specify set eligible servers sets chosen first round servers eligible 548 amotz barnoy ari freund joseph seffi naor defined construct i1 follows suppose total weight assigned servers end ith round least ni2 certainly case 1 set contiguous ie servers form path least half total weight assigned assigned either first half path second half define i1 half majority weight assigned breaking ties arbitrarily thus total weight assigned i1 end 1st round least n2 define log n1 manner call single server comprises leader load leader end last round least 1log n adversary assigns jobs ith round servers i1 one job server thus opt 1 lower bound follows second variant use similar construction servers arranged complete binary tree number jobs ith round defined recurrence 1 sets eligible servers defined follows first round servers eligible let v root subtree define i1 subtree rooted child v weight assigned end ith round third variant use recursive construction partition servers nk subsets k servers apply construction first variant subset load leader subset log k continue recursively set leaders level recursion increases load leaders level log k log k n log n log levels thus log n level recursion adversary assigns weight leaders one job servers hence opt 1 lower bound follows r handbook mathematical functions better bounds online scheduling competitiveness online assignments new algorithms ancient scheduling problem better lower bound online scheduling new algorithms related machines temporary jobs yet linear search problem lower bound online scheduling uniformly related machines improved approximation ratio minimum latency problem bounds certain multiprocessor anomalies better algorithm ancient scheduling problem online resource minimization tr ctr pilu crescenzi giorgio gambosi gaia nicosia paolo penna walter unger online load balancing made simple greedy strikes back journal discrete algorithms v5 n1 p162175 march 2007 online algorithms channel assignment problem cellular networks discrete applied mathematics v137 n3 p237266 15 march 2004