intelligent adaptive information agents adaptation open multiagent information gathering systems important several reasons reasons include inability accurately predict future problemsolving workloads future changes existing information requests future failures additions agents data supply resources future task environment characteristic changes require system reorganization developed multiagent distributed system infrastructure retsina reusable task structurebased intelligent network agents handles adaptation open internet environment adaptation occurs individual agent level well overall agent organization level retsina system three types agents interface agents interact user receiving user specifications delivering results acquire model utilize user preferences guide system coordination support users tasks task agents help users perform tasks formulating problem solving plans carrying plans querying exchanging information software agents information agents provide intelligent access heterogeneous collection information sources paper concentrate adaptive architecture information agents use domain application warren multiagent financial portfolio management system implemented within retsina framework b introduction adaptation behavior agent response unexpected ie low probability events dynamic environments examples unexpected events include unscheduled failure agent agents computational platform underlying information sources examples dynamic environments include occurrence events expected known eg information agent may reasonably expect become point overloaded information quests events whose importance fluctuates widely eg price information stock much important transaction progress even certain types news become available appearance new information sources agents finally underlying environmental uncertainty eg knowing beforehand precisely long take answer particular query involved designing building analyzing multiagent systems exist types dynamic partially unpredictable environments agents handle adaptation several different levels highlevel multiagent organization monitoring individual method executions next section discuss individual architecture agents section entitled agent adaptation discuss problems solutions agent adaptation organizational planning scheduling execution monitoring levels particular discuss architecture supports organizational planninglevel adaptation currently areas still active investigation discuss schedule adaptation passing refer interested reader work else finally present detailed model experiments one particular behavior agent selfcloning executionlevel adaptation agent architecture work information gathering domain date centered basic type intelligent agent information agent tied closely single data source dominant domain level behaviors information agent retrieving information external information sources response one shot queries eg retrieve current price ibm stock requests periodic information eg give price ibm every monitoring external information sources occurrence given information patterns called monitoring requests eg notify ibms price increases 10 80 information originates external sources information agent control external information sources must ex tract possibly integrate store relevant pieces information database local agent agents information processing mechanisms process information local database service information requests received agents human users simple behaviors used information agents include advertising capabilities managing rebuilding local database necessary polling kqml messages agents information agents reusable behaviors facilitated reusable agent architecture ie domainindependent abstraction local database schema set generic software components knowledge representation agent control interaction agents generic software components common agents simple information agents complex multisource information agents task agents interface agents design useful basic agent behaviors types agents rests deeper specification agents embodied agent architecture current agent architecture instantiation decaf distributed environmentcentered agent framework architecture decker et al 1995 control planning scheduling action execution control process information agents includes steps planning achieve local nonlocal objectives scheduling actions within plans actually carrying actions addition agent shutdown initialization process agent executes initialization process upon startup bootstraps agent giving initial objectives poll messages agents advertise capabilities shutdown process executed agent either chooses terminate receives uncontinueable error signal shutdown process assures messages sent terminating agent asserting goal dissolution client agents requesting goal dissolution server agents see section planning adaptation agent planning process see figure 1 takes input agents current set goals g including new unplanned goals g n set current task structures plan stances produces new set current task structures williamson decker sycara 1996 ffl individual task represents instantiated approach achieving one agents goals git unit goaldirected behavior every task optional deadline ffl task consists partially ordered set subtasks andor basic actions currently tasks actions related information flows outcomes one task action provisions anther task action subtasks may inherit provisions parents provide outcomes parents action also optional deadline optional period action period deadline deadline interpreted one next periodic execution basic action important constraint planningplan retrieval algorithm needs meet part agents overall properties guarantee least one task every goal goal accomplished removed believed unachievable cohen levesque 1990 information agents common reason goal unachievable specification malformed case task respond appropriate kqml error message instantiated information agent receives messages agents three important types goals 1 answering oneshot query associated database 2 setting periodic query database run repeatedly results sent requester time eg tell price ibm every 3 monitoring database change record addition new record eg tell price ibm drops 80 within 15 minutes occurrence agent scheduling process general takes input agents current set task structures particular set basic actions decides basic action executed next action identified fixed intention actually carried execution com ponent constraints scheduler include ffl action intended unless enabled ffl periodic actions must executed least period measured previous execution instance technically max invocation separation constraint period ffl actions must begin execution deadline ffl actions miss either period deadline considered failed scheduler must report failed actions sophisticated schedulers report failures probable failures occur reasoning action durations possibly commitments agents garvey lesser 1995 ffl scheduler attempts maximize predefined utility function defined set task structures information agents use simple notion utility every action needs executed order achieve task every task equal utility value initial implementation use simple earliest deadlinefirst scheduling heuristic list actions constructed schedule earliest deadline action enabled chosen enabled actions missed deadlines still executed missed deadline recorded start next period task adjusted help meet next period deadline periodic task chosen execution reinserted schedule deadline equal current time plus actions period execution monitoring process takes agents next intended action prepares monitors completes exe cution execution monitor prepares action execution setting context including results previous actions etc action monitors action optionally providing associated computationlimited resources example action may allowed certain amount time action complete time computation interrupted action marked failed upon completion action results recorded downstream actions passed provisions indi cated runtime statistics collected planner scheduler execution monitor task structures plan library query task montr task montr task runquery runquery sendresults registertrigger registertrigger schedule ig task pollformsgs current action runquery control flow data flow askall dbmonitor dbmonitor site specific external interface code mirror external db extra attributes registered triggers goalsrequests current activity information figure 1 overall view data control flow information agent agent adaptation section briefly consider several types adaptation supported individual agent architecture current previous work types include organizational planning scheduling executiontime adaptation currently actively involved expanding agents adaptation choices organizational planning levelsin short paper describe architecture supports organizational planninglevel adaptation currently implemented directions currently pursuing current work done much schedule adaptation instead indicate future potential pointing earlier work within general architecture addresses precisely schedule adaptation fi nally present fairly comprehensive account one type executiontime adaptation selfcloning organizational adaptation clear organizational theorists since least 60s one good organizational structure human organizations lawrence lorsch 1967 organizations must instead chosen adapted task environment hand important different types qualities uncertainty present environment eg uncertainty associated inputs output measurements uncertainty associated causal relationships environment time span definitive feedback making decision scott 1987 recently researchers proposed organizations grow toward structure around sources information important sources news future evidently turning stinchcombe 1990 multiagent information systems one important sources uncertainty revolves around information available cost developed standard basic advertising behavior allows agents encapsulate model capabilities send matchmaker information agent kuokka harada 1995 matchmaker agent used multiagent system form several different organizational struc turesdecker williamson sycara 1996 uncoordinated team agents use basic shared behavior asking questions first queries matchmaker might answer query chooses agent randomly target query low overhead potentially unbalanced loads reliability limited individual data sources problems linking queries across multiple ontologies initial implementation used organization exclusively federations eg wiederhold wegner cefi 1992 genesereth katchpel 1994 finin et al 1994 agents give individual autonomy choosing business locally centralized facilitator extension matchmaker concept brokers quests centralization message traffic potentially allows greater load balancing provision automatic translation mediation services constructed general purpose brokering agents currently conducting empirical study matchmaking vs brokering behavior course hybrid organization possible compelling many situations economic markets eg wellman 1993 agents use price reliability utility characteristics choose another agent matchmaker supply agent appropriate updated pricing information new agents enter exit system alter advertise ments agents dynamically adjust organization often necessary limited transaction costs potentially organizations provide efficient load balancing ability provide truly expensive services expen sive terms resources required brokers matchmakers used marketbased systems corre sponding centralized decentralized markets respec tively bureaucratic functional units traditional manageremployee groups single multisource information agent manager several simple information agent employees organizing functional units ie related information sources organizations concentrate providing higher reliability using multiple underlying sources simple information integration partially overlapping information load balancing manag ing viewed brokering special constraints worker behavior brought managerworker authority relationship exhaustive list architecture supported explorations understanding effects organizational structures decker 1996 planning adaptation planner portion agent architecture consists new hierarchical task network based planner using plan formalism admits sophisticated control structures looping periodic tasks williamson decker sycara 1996 features derived earlier classical planning work well task structure representations tcatcx simmons 1994 tms decker lesser 1995 focus planning system explicating basic information flow relationships tasks relationships affect controlflow decisions control relationships derivative basic rela tionships final action selection sequencing timing left agents local scheduler see next subsection types adaptation expressed agents level current implementation include adapting failures time agent system might unavailable might go offline even middle long term monitoring situation agent planners task reductions handle situations failures dealt smoothly alternate agents available contacted subproblem restarted note unless sort partial solutions could still expensive alternate agent available task wait future failures signal planner opportunity replan multiple reductions task potentially reduced several different ways depending current situation thus even simple tasks answering query may result different sequences actions looking agent matchmaker using already known agent using cached previous answer interleaved planning execution reduction tasks delayed information gathering tasks completed previous work focussed coordination mechanisms alone particular generalized partial global planning family coordination mechanisms domainindependent approach multiagent scheduling planninglevel coordination works conjunction agents existing local scheduler adapt plan adding certain constraints decker lesser 1995 include commitments task minimum level quality commitments task certain deadline resulting plan successfully scheduled local commitments communicated agents become nonlocal commitments agents local schedulers mechanisms needed environments nagendraprasad begun work learning mechanisms needed environment automatically prasad lesser 1996 scheduling adaptation current work using fairly simple earliest deadline first scheduler little adaptation besides adjusting deadlines periodic technically max invocation separation constrained actions miss miss initial deadlines also agents dynamically change information request periods affect scheduling related actions earlier work within architecture used sophisticated designtotime scheduling algorithm adapts local schedule attempt maximize schedule quality minimizing missed deadlines garvey lesser 1995 decker lesser 1995 scheduler may choose multiple methods different algorithms represent difference action durationresult quality tradeoffs anytime algorithms summarized du rationquality probability distribution tables zilberstein russell 1992 execution adaptation within architecture previous executiontime adaptation focussed monitoring actions garvey lesser 1995 recently begun looking load balancingrebalancing behaviors agent cloning cloning cloning one information agents possible responses overloaded conditions information agent recognizes via selfreflection becoming loaded remove actively pursuing new queries unadvertising services kqml create new information agent clone uses simple model ability meet new deadlines related characteristics current queries tasks compares model hypothetical situation describes effect adding new agent way information agent make rational metacontrol decision whether undertake cloning behavior selfreflection phase part agents execution monitoring process start finish time action recorded well running average duration action class periodic task created carry calculations required model described key modeling agents load behavior current task structures since oneshot queries transient simple repeated queries subcase database monitoring queries focus database monitoring queries monitoring goal met task consists three activities runquery checktriggers sendresults run querys duration mostly external query interface function checktriggers executed whenever local db updated thus activity shared database monitoring tasks takes time proportional number queries sendresults takes time proportional number returned results predicting performance information agent n database monitoring queries would thus involve quadratic function make simplification observing external query interface functions information agents implemented far using internet eg stock tickers news airfares take order magnitude time part system including measured planning scheduling overhead let e average time process external query n queries average period p predict idle percentage 1 validate model next section information agent gets cloned clone could set use resources another processor via agent server migratable java telescript program however case information agents already spend majority processing time network io wait states overhead proportion 1 en time units period available processing 1 thus single agent becomes overloaded reaches pe queries new agent cloned system handle another queries second agent runs separate processor 1 continue th agent processor handling queries note diminishing returns also demonstrate experimentally next section two agents idle percentage follow model 12 2 important note architecture supports type introspection onthefly agent creation execution monitoring component architecture computes stores timing information agent action agent learns good estimate value e sched uler even simple earliestdeadlinefirst scheduler knows actions periods compute idle percentage systems building new queries arrive slowly periods fairly long comparison e cloning rule waits queries cloning faster environment new queries arriving rate r cloning taking duration c cloning behavior begun number queries reaches execution adaptation experimental results undertook empirical study measure baseline performance information agents empirically verify load models presented previous section single information agent without cloning behavior information agent clone onto processor also wanted verify work context real application monitoring stock prices first set experiments oriented toward measurement baseline performance information agent figure 2 shows average idle percentage average percentage actions deadlines missed another way recoup time run blocking external query separate process breaking runquery two parts currently comparing overhead two different uniprocessor solutionsin case stress behaviors reusable used existing information agent without reprogramming cloning another processor still desired effect various task loads query period fixed seconds external query time fixed 10 seconds nothing else within agent fixed experiment run 10 minutes repeated 5 times expected idle time decreases number missed deadlines increases especially predicted saturation point 6 graph also shows average amount time action deadline next step verify model single information agent loading behavior equation 1 first used partially simulated information agent minimize variation factors external information agent architecture later used completely real agent real external query interface security apl stock ticker agent left figure 3 graph actual predicted idle times information agent monitors simulated external information source takes constant 10 seconds 2 information agent examined given tasks second experimentdriver agent experiment consisted sequence tasks n given information agent start task period 60 seconds complete experiment repeated 5 times experiment lasted 10 minutes figure clearly shows agent reaches saturation 6th task predicted model 6 idle time never quite drops 10 first minute spent idling startup activities eg making initial connection sending batch tasks adding extra base idle time model predicts actual utilization quite well r r 2 measure total variance explained model also ran set experiments using real external terface security apl stock ticker results shown graphically right figure 3 5 experiments run period 60 seconds much faster normal tasks utilization model also correctly predicted performance real sys tem r differences model experimental results significant either ttests nonparametric signedrank tests odd utilization results occurred testing caused network delays significantly changed average value e duration external query however since agents execution monitor measures value problem solving agent still react appropriately model still fits fine finally extended model predict utilization system agents cloning behavior indicated previous section figure 4 shows predicted actual results loads 1 10 tasks periods 60 seconds repetitions agent 1 clones onto processor n 5 case model r 2 experiments described done standard timesharing unix workstation connected network md mdamount number periodic queries percentages average missed deadline amount figure 2 graph average percentage idle time average percentage actions deadlines missed various loads left axis superimposed graph keyed right axis average number seconds missed deadline missed01030507091 number periodic queries percentage idle time predicted actual information percentage idle time number periodic queries predicted actual information agent 10s simulated external interface figure 3 left graph predicted actual utilization real information agent simulated external query interface right graph security apl stock ticker agent differences model measured values significant ttest signedranks graph shows predicted curve one agent left side figure comparison 3 number periodic queries percentage idle agent predicted cloning 2 agents actual cloning020406081 figure 4 predicted idle percentages single non cloning agent agent cloning behavior across various task loads plotted points measured idle percentages experimental data including cloning agents current future work paper discussed adaptation system intelligent agents four different levels organizational planning scheduling execution work organizational planning levels current active pursuit expect return schedule adaptation time resources permit cur rently conducting empirical study matchmak ers brokers related hybrid organizations paper also discussed fairly detailed model experimentation simple cloning behavior im plemented several extensions cloning model considered particular several intelligent ways divide tasks cloning occurs order use resources efficiently keep queries balanced cloning event occurs include ffl partitioning existing tasks timeperiodicity resulting agents balanced schedulable set tasks ffl partitioning tasks client tasks agent 1 end clone 3 since potential second agent would existed totally idle 1 idle curve differs cloning case ffl partitioning tasks classtypecontent tasks one subject eg stock price ibm end clone ffl multisource information agents partitioning tasks data source tasks requiring use source end clone acknowledgements authors would like thank reviewers helpful comments work supported part arpa contract f336159311330 part onr contract n000149511092 part nsf contract iri 9508191 r intention choice commitment designing family coordination algorithms macron architecture multiagent cooperative information gathering modeling information agents advertisements task environment centered simulation prietula kqml agent communication language representing scheduling satisficing tasks software agents communications acm using kqml matchmaking organization envi ronment aaai spring symposium adaptation organizations rational structured control autonomous robots information organizations university california press marketoriented programming environment application distributed multicommodity flow problems toward megaprogramming unified information control flow hierarchical task networks constructing utility driven realtime systems using anytime algorithms tr ctr claudia v goldman jeffrey rosenschein partitioned multiagent systems information oriented domains proceedings third annual conference autonomous agents p3239 april 1999 seattle washington united states qiuming zhu stuart l aldridge tomas n resha hierarchical collective agent network hcan efficient fusion management multiple networked sensors information fusion v8 n3 p266280 july 2007 marian misty nodine anne hee hiong ngu anthony cassandra william g bohrer scalable semantic brokering dynamic heterogeneous data sources infosleuth ieee transactions knowledge data engineering v15 n5 p10821098 september terrence harvey keith decker sandra carberry multiagent decision support via usermodeling proceedings fourth international joint conference autonomous agents multiagent systems july 2529 2005 netherlands k barber c e martin dynamic reorganization decisionmaking groups proceedings fifth international conference autonomous agents p513520 may 2001 montreal quebec canada woodrow barfield issues law software agents within virtual environments presence teleoperators virtual environments v14 n6 p741748 december 2005 reylong liu collaborative multiagent adaptation business environmental scanning internet applied intelligence v20 n2 p119133 marchapril 2004 keith decker xiaojing zheng carl schmidt multiagent system automated genomic annotation proceedings fifth international conference autonomous agents p433440 may 2001 montreal quebec canada alessandro de luna almeida samir aknine jeanpierre briot jacques malenfant predictive method providing fault tolerance multiagent systems proceedings ieeewicacm international conference intelligent agent technology p226232 december 1822 2006 keith decker jinjiang li coordinating mutually exclusive resources using gpgp autonomous agents multiagent systems v3 n2 p133157 june 2000 fabien gandon agents handling annotation distribution corporate semantic web web intelligence agent system v1 n1 p2345 january k barber c e martin flexible problemsolving roles autonomous agents integrated computeraided engineering v8 n1 p115 january 2001 fabien gandon agents handling annotation distribution corporate semantic web web intelligence agent system v1 n1 p2345 january reylong liu wanjung lin incremental mining information interest personalized web scanning information systems v30 n8 p630648 december 2005 v lesser k decker wagner n carver garvey b horling neiman r podorozhny nagendra prasad raja r vincent p xuan x q zhang evolution gpgptms domainindependent coordination framework autonomous agents multiagent systems v9 n12 p87143 julyseptember 2004 david camacho ricardo aler daniel borrajo jos molina multiagent architecture intelligent gathering systems ai communications v18 n1 p1532 january 2005 david camacho ricardo aler daniel borrajo jos molina multiagent architecture intelligent gathering systems ai communications v18 n1 p1532 january 2005 victor r lesser reflections nature multiagent coordination implications agent architecture autonomous agents multiagent systems v1 n1 p89111 1998 larry kerschberg doyle j weishar conceptual models architectures advanced information systems applied intelligence v13 n2 p149164 septemberoctober 2000