theory normed simulations existing simulation proof techniques single step lowerlevel specification may simulated extended execution fragment higherlevel one result cumbersome mechanize techniques using generalpurpose theorem provers moreover undecidable whether given relation simulation even tautology checking decidable underlying specification logic article studies various types inormed simulationsi normed simulation step lowerlevel specification simulated one step higherlevel one related pair states earlier work demonstrated normed simulations quite useful vehicle formalization refinement proofs via theorem provers show normed simulations also pleasant theoretical properties 1 reasonable assumptions decidable whether given relation normed forward simulation provided tautology checking decidable underlying logic 2 semantic level normed forward backward simulations together form complete proof method establishing behavior inclusion provided higherlevel specification finite invisible nondeterminism b introduction simulation relations renement functions widely used prove lowerlevel specica tion reactive system correctly implements higherlevel one see al91 lv95 lyn96 re98 overviews numerous references applications technically simulation renement relation function r states lowerlevel specication higherlevel specication b satises condition like lowerlevel state higherlevel state u related transition matching transition b u state v relates see also figure 1 existence simulation implies behavior also exhibited b figure 1 transfer condition 1 main reason simulations useful reduce global reasoning behaviors executions local reasoning states transitions however best knowledge complete simulation proof methods appear literature fall back form global reasoning case specications containing internal stuttering transitions usual transfer condition forward simulations lv95 instance says lowerlevel transition simulated sequence higherlevel transitions apart action matched may also contain arbitrary number internal transitions see also figure 2 thus research program reduce global reasoning local reasoning carried completion manual proofs simulation relations figure 2 transfer condition 2 usually problem practice lowerlevel transitions typically matched one higherlevel transition moreover humans tend quite good reasoning sequences move eortlessly transitions executions back contrast turns rather cumbersome formalize arguments involving sequences using existing theorem provers see dgm97 comparative study fact several papers formalizations simulation proofs described authors consider restricted type simulation lowerlevel transition matched one higherlevel transition hsv94 ns95 dgrv00 however many examples situations restricted types simulations cannot applied approaches sagg 93 full transfer condition 2 formalized user supply simulating execution fragments prover explicitly makes verication process highly interactive paper introduce simulation proof method remedies problems idea dene function n assigns norm ns u wellfounded domain pair transition state b u simulate transition may either nothing internal related u may matching atransition may perform internal transition norm decreases ie establish normed forward simulations normed backward simulations together constitute complete proof method establishing trace inclusion addition show history prophecy relations closely related history prophecy variables al91 enriched norm function obtain another complete proof method combination simple notion renement mapping preorders generated normed forward simulations strictly ner preorders induced forward simulations lv95 fact characterize normed forward simulations terms branching forward simulations gw96 present similar characterization backward case possible come variant normed forward simulation induces preorder forward simulations technically somewhat involved see gri00section 6510 proving invariance properties programs one faced two problems rst problem related necessity proving tautologies assertion logic whereas second manifests need nding suciently strong invariants order address rst problem powerful decision procedures incorporated theorem provers pvs orsh95 tautology checking decidable decidable whether given state predicate valid initial states preserved transitions task nding predicate ie solving second problem responsibility user even though powerful heuristics devised automate search bls96 mbsu98 analogously specications b conjectured forward simulation relation r norm function n expressed within decidable assertion logic specication b contains nite number deterministic transition predicates decidable whether pair r n normed forward simulation result hold earlier approaches lv95 distinct advantage normed forward simulations idea using norm functions prove simulation relations also occurs gs95 used prove branching bisimilarity context process algebra crl however gs95 norm function dened states b involve transitions consequence method gs95 always apply diverging processes norm functions similar also studied namjoshi nam97 uses obtain characterization stuttering bisimulation bcg88 equivalent branching bisimulation setting states rather actions labeled see dnv95 gs95 nam97 address eectiveness issues although present normed simulations setting labeled transition systems dicult transfer results process algebraic setting gs95 state based setting nam97 inspired approach norm functions used bs00 dene new bisimulation equivalence probabilistic systems paper present maximally simple examples illustrate various deni tions results gri00chapter 6 normed simulations applied substantial case study namely verication leader election protocol part ieee 1394 firewire standard verication mechanically checked using pvs 1 presentation results closely follow lv95 stick notations introduced paper fact aim amongst others derive analogous results lv95 dierent types simulations however decided present normed versions forwardbackward backwardforward simulations lv95 since simulations thus far used practice technically would bring nothing new apart notion norm function major technical innovation present paper new simple denition execution correspondence gssl93 sall93 systematic use concept technical development preliminaries section brie recall basic concurrency theory denitions taken lv95 automaton labeled transition system consists possibly innite set statesa states nonempty set starta statesa start states set actsa actions includes internal stuttering action set stepsa statesa actsa statesa steps write shorthand 2 stepsa let exta external actions denote fg execution fragment nite innite alternating sequence 0 1 1 2 2 states actions beginning state nite also ending state 0 execution execution fragment begins start state denote execs execsa sets nite executions respectively state reachable occurs last state nite execution case write reachablea also write reachablea set reachable states trace execution fragment notation trace subsequence non actions occurring nite innite sequence external actions trace execution trace write traces tracesa sets nite traces respectively write b traces traces b b tracesa tracesb suppose automaton states nite sequence exta say move write clear nite execution fragment starts trace ends three restricted kinds automata play important role paper 1 deterministic state nite sequence exta one state deterministic automaton characterized uniquely properties every step form state action one state 2 nite invisible nondeterminism n starta nite state nite sequence exta nitely many states 3 forest state exactly one execution leads forest characterized uniquely property states reachable start states incoming steps states exactly one incoming step 1 actually discovered notion normed simulation formalizing correctness proof leader election protocol relation consists pairs nite execution trace last state last denotes function returns last element nite nonempty sequence dene pasta inverse aftera pasta relates state traces nite executions lead following elementary lemma lv95 states restricted kinds automata dened relations past satisfy certain nice properties lemma 21 1 deterministic function traces statesa 2 n imagenite ie trace domain aftera related nitely many states 3 forest pasta function statesa traces 3 step renements execution correspondence section present step renements simplest notion simulation consider paper order prove soundness step renements also introduce auxiliary notion execution correspondence notion plays key role paper technical lemmas prove section also used repeatedly subsequent sections 31 step renements let b automata step renement b partial function r statesa statesb satises following two conditions 1 2 starta 2 domainr rs 2 startb 2 b rs b rt note trivial inductive argument set states r dened contains reachable states thus invariant automaton write r b exists step renement b far know notion step renements rst proposed ns95 however insist presence stuttering steps state common assumption models reactive systems clause 2a denition becomes super uous notion step renement reduces homomorphism reachable subautomata gin68 step renements slightly restrictive possibility mappings lt87 called weak renements lv95 case possibility mapping reachable step may matched sequence steps b trace means denition condition 2 replaced 2 execution fragment b u2 figure 3 step renement observe unlike step renements possibility mappings reduce global reasoning local reasoning example 31 figure 3 illustrates notion step renement note steps matched step b also cstep matched step b source target states step outside domain step renement allowed since states unreachable observe step renement b exists possibility mapping b figure 4 gives another example case step renement 0 b 0 b 0 0 even possibility mapping b 0 0 figure 4 another step renement following proposition states basic sanity property step renements proposition 32 r preorder ie transitive exive proof identity function statesa trivially step renement hence r exive transitivity follows observation r step renement b r 0 step renement b c function composition r 0 r step renement c 32 execution correspondence exists step renement b construct execution fragment corresponding execution fragment b trace notion corresponding formalized suppose b automata r statesa statesb execution fragments b respectively let index index 0 denote index sets 0 0 correspond via r rrelated notation exists index relation r ie relation index index 0 1 two indices related corresponding states related r 2 monotone 3 index related index 0 vice versa 4 sides squares always label sides triangles labeled formally require 1 2 3 1 total 4 write b 2 r every execution execution 0 b every nite execution nite execution 0 b figure 5 illustrates correspondence two executions automata b figure 3 u0 u2 u2 u2 u2 figure 5 execution correspondence another notion correspondence presented gssl93 sall93 formalized mue98 within theory io automata execution correspondence plays crucial role proofs preservation safety liveness properties notion restrictive one gssl93 sall93 technically simpler moreover advantage preserves properties paper study safety properties suces know corresponding executions trace latter fact established next lemma lemma 33 corresponding execution fragments trace 1 suppose index relation 2 proof 1 suppose induction traces 0 clearly traces 0 induction step suppose reasons symmetry may assume wlog 0 let j 0 largest index j 0 j related indices less equal j totality least one index distinguish three cases 1 j condition 4b induction hypothesis traces hence traces 0 2 1 condition 4a induction hypothesis traces hence traces 0 3 j 0 j 1 conditions 2 3 j 1 2 condition 4c implies induction hypothesis traces hence traces 0 completes proof induction step 2 suppose 0 exists index relation relates 0 using 1 fact 1 total follows nite prex trace also nite prex trace 0 vice versa implies next corollary used repeatedly rest paper states order prove trace inclusion automata b suces nd execution corresponding execution b depending whether one wants prove inclusion traces nite traces stronger resp weaker type execution correspondence required corollary 34 execution correspondence implies trace inclusion 1 b 2 r b 2 r 2 b 2 r b 3 b 2 r b proof statement 1 follows denitions statements 2 3 follow immediately lemma 33 denitions 33 soundness partial completeness next theorem states step renement b possible construct execution corresponding execution b using corollary 34 implies step renements constitute sound technique proving trace inclusion addition next theorem also allows us use step renements sound technique proving implementation relations live automata gssl93 sall93 mue98 theorem 35 soundness step renements r step renement b b 2 r suppose r step renement b let execution inductively dene execution index relation 0 rrelated via start dene u declare 0 0 element suppose nonnal index distinguish two cases 1 rs i1 element 2 otherwise declare element construction using dening properties step renement follows index relation implies b 2 r step renements alone provide complete method proving trace inclusion partial completeness result however theorem 36 partial completeness step renements suppose forest b deterministic b r b proof relation r step renement b actually even slightly strengthen theorem suces assume restricted reachable states forest b restricted reachable states deter ministic figure 3 automaton restricted reachable states forest automaton b deterministic observed already step renement b even restrict reachable states automaton b forest automaton deterministic observed step renement b practice preconditions theorem 36 seldom met higherlevel specication often deterministic rarely occurs lowerlevel specication forest nevertheless step renements used several substantial case studies see instance hsv94 ns95 dgrv00 4 normed forward simulations even though exists step renement automaton b 0 automaton 0 figure 4 automata traces moving functions relations becomes possible prove trace b 0 also trace 0 idea formalized following denition normed forward simulation b consists relation f statesa statesb function n stepsa statesb wellfounded set f denotes set fu j u 2 fg 1 2 starta f startb 6 2 b v c write f b exists normed forward simulation b intuition behind denition u 2 f either transition stuttering step matched b matching step b c b stuttering step decreases norm since norm decreases application clause c clause applied nite number times general norm function may depend transitions states b however b convergent ie innite paths one simplify type norm function though necessarily denition norm function fact approach gs95 always applies divergent processes norm function required restricted type example 41 figure 4 relation indicated dashed lines together arbitrary norm function normed forward simulation b 0 0 consider automata b figure 3 let n function assigns norm 1 state s0 norm 0 states n together relation indicated dashed lines constitutes normed forward simulation b u2 u3 figure must take steps c account consider automata c figure 6 let norm function satisfying together relation indicated dashed lines constitutes normed forward simulation c hard see example convergent norm necessarily depends selected step c next proposition asserts normed forward simulations indeed generalize step rene ments proposition 42 r b proof together arbitrary norm function step renement viewed relation normed forward simulation soundness normed forward simulations trivially implied following lemma corollary 34 lemma 43 suppose f n normed forward simulation b execution fragment rst state u state b u 2 f b execution fragment 0 starts u 0 function cs 1 2 v 3 x existence c chooses left move l common move c b right move r b guaranteed fact f n normed forward simulation inductively dene sequence 4tuples n n actsb statesb rst element sequence z element sequence nonnal index dene z k1 follows 1 cs 2 cs 3 cs suppose j b u occur sequence claim see true assume wlog j b u occurs observe values rst second component elements increase monotonically means successor j b u including obtained predecessor applying rule 1 implies second resp third components elements sequence j b u using property dene element j b u b occurs g construction using properties c follows 0 execution fragment b starts u index relation f implies 0 theorem 44 soundness normed forward simulations f normed forward simulation b b 2 f proof immediate denitions lemma 43 example 45 consider automata c e figure 7 exist normed forward u2 u3 figure 7 dierence forward simulations normed forward simulations simulation c e simulation would relate states s0 u0 order e simulate step s0 b would also relates states s0 u2 impossible since state u2 way simulate step s0 s1 turns exist forward simulation sense lv95 c e case forward simulation step may matched sequence steps b trace means denition normed forward simulation condition 2 replaced 2 execution fragment tracea last 2 f dashed lines figure 7 indicate forward simulation c e automata b figure 3 provide us similar example exists forward simulation b normed forward simulation dierence forward simulations normed forward simulations similar dierence milners observation equivalence mil89 branching bisimulation glabbeek weijland gw96 fact characterize normed forward simulations terms branching forward simulations notion inspired branching bisimulations gw96 similar characterization obtained namjoshi nam97 setting stuttering bisimulations formally branching forward simulation b relation f statesa statesb 1 2 starta f startb 6 2 u 2 f b execution fragment starts u frelated following theorem implies exists normed forward simulation two automata branching forward simulation theorem 46 1 suppose f n normed forward simulation b f branching forward simulation b 2 suppose f branching forward simulation b let ns u 0 u 62 f otherwise equal length shortest execution fragment starts u frelated f n normed forward simulation b proof part 1 follows lemma 43 proof part 2 routine interesting corollary theorem 46 exists normed forward simulation two automata fact normed forward simulation norm natural numbers range proof branching bisimilarity equivalence known tricky bas96 likewise proof branching forward simulations induce preorder nontrivial rst need dene auxiliary concept reduced index relation prove lemma suppose 0 rrelated via index relation say reduced following two conditions satised 1 nite relates nal index nal index 0 2 nfree observe nite reduced 0 also nite following technical lemma states index relations always reduced lemma 47 suppose 0 rrelated via index relation 0 prex 00 rrelated via reduced index relation j proof innite let nite let 00 nite prex 0 including rst state whose index related nal index inductively dene sequence pairs n n rst element sequence z element sequence nonnal index dene z k1 follows 1 2 3 note since index relation z k1 properly dened let occurs g routine check j 00 rrelated via j j reduced point totality j j 1 prove j total contradiction suppose j total let smallest index j smallest index 0 j exists since index relation total let l maximal index 0 maximal index since implies l j monotonicity index relation let z hence contradicts fact l maximal index 0 similar way also totality j 1 nfreeness proved contradiction prepared prove branching forward simulations hence also normed forward simulations induce preorder proposition 48 f preorder proof exivity observe identity function statesa branching forward simulation transitivity suppose f g branching forward simulations b b c respectively claim g f branching forward simulation c trivial check g f satises condition 1 denition branching forward simulation condition 2 suppose exists state w b hence execution fragment starting w frelated via index relation lemma 47 may assume reduced also execution fragment 0 starting u 0 grelated via index relation j lemma 47 may assume j reduced using fact j reduced routine check 0 g frelated via index relation j thus g f satises condition 2 denition branching forward simulation variants partial completeness result appear several papers see instance jon87 lv95 since higherlevel specications often deterministic result explains practice normed forward simulations often used prove behavior inclusion theorem 49 partial completeness normedbranching forward simulations b deterministic b f b proof relation f branching forward simulation b interesting note one result lv95 concerning forward simulations carry normedbranching simulations paper result proposition 312 states forest f b r b automata c figure 6 constitute counterexample actually proposition 312 also carry setting timed automata studied lv96 5 normed backward simulations observed exists normed forward simulation automaton b automaton figure 3 even though automata traces also exist normed forward simulation automaton c trace equivalent automaton e figure 7 cases forward simulation sense lv95 exists however example figure 8 shows also forward simulations yet provide us complete method proving trace inclusion wellknown literature completeness obtained adding form backward simulation example 51 exists normedbranching forward simulation automaton c automaton f figure 8 relation indicated dashed lines fails since state u0 bstep s0 simulated whereas u2 astep s0 simulated u2 u3 b figure 8 need backward simulations many respects backward simulations dual forward simulations whereas forward simulation requires state image start state start state backward simulation essentially requires states image start state start states also forward simulation requires forward steps source automaton simulated related states target automaton whereas corresponding condition backward simulations requires backward steps simulated however two notions completely dual denition backward simulation contains nonemptiness condition also order obtain soundness general trace inclusion backward simulations also require nite image condition mismatch due asymmetry automata future past given state possible histories nite executions whereas possible futures innite formally dene normed backward simulation b pair total relation b statesa statesb function wellfounded set satisfying 1 2 b u c 9v normed backward simulation b ib b normed backward simulation b imagenite example 52 figure 8 relation indicated dashed lines normed backward simulation c e arbitrary norm functions dicult construct normed backward simulations automaton b automaton figure 3 automaton c automaton e figure 7 u0 u1 u2 u3 u4 g figure normed backward simulation figure 9 illustrates dierence b ib relation statesgstatesh together arbitrary norm function constitutes normed backward simulation g h claim imagenite normed backward simulation exist suppose b relation implies since state si related least one state sj follows state s0 related innitely many states contradiction following proposition states trivial connections preorders induced normed backward simulations step renements proposition 53 1 states reachable r b ib b 2 ib b b b proof trivial next lemma required prove soundness normed backward simulations lemma 54 suppose b n normed backward simulation b nite execution fragment last state u state b u 2 bs b nite execution fragment 0 ends u 0 2 b moreover execution 0 chosen execution well proof similar proof lemma 43 lemma 54 corollary 34 existence normed backward simulation implies inclusion nite traces normed backward simulations however general sound method proving inclusion innite traces counterexample consider automata g h figure 9 exists normed backward simulation g h innite trace g trace h wellknown literature sound method proving inclusion innite traces obtained requiring image niteness simulation relation theorem 55 soundness normed backward simulations 1 b normed backward simulation b b 2 b 2 moreover b imagenite b 2 b proof statement 1 follows immediately lemma 54 totality b order prove 2 suppose b imagenite let execution establish existence execution 0 b 0 2 b nite follows lemma 54 totality b assume innite use minor variation konigs lemma knu97 occurs lv95 let g innite digraph 1 g nitely many roots ie nodes without incoming edges 2 node g nite outdegree 3 node g reachable root innite path g starting root nodes graph g consider pairs nite execution b index relation relates nite prex edge node node prex 0 0 extends precisely one element straightforward check g satises conditions konigs lemma hence g innite path let j union index relations occurring nodes path let 0 limit nite executions nodes path observe imageniteness b index occurs domain j hence 0 following proposition 56 sense converse proposition 53 proof similar corresponding result lv95 proposition 56 1 b deterministic b b r b 2 states reachable b n b b ib b proof 1 suppose b deterministic b normed backward simulation b suppose reachable state prove bs contains exactly one element since normed backward simulation functional reachable states trivially induces step renement gives us r b b normed backward simulation total relation know bs contains least one element suppose u reachable execution ends lemma 54 b executions 1 2 end u 1 u 2 respectively 1 using fact b deterministic 2 suppose states reachable b n b normed backward simulation b suppose state since reachable execution ends let trace lemma 54 exists u 2 bs execution u b ends u u hence bs b since b n b nite lemma 212 hence b imagenite forward case characterize normed backward simulations terms branching backward simulations use characterization establish b ib preorders branching backward simulation b total relation b statesa statesb 1 2 starta u 2 bs b execution ends u brelated 2 u 2 f b execution fragment ends u brelated theorem 57 1 suppose b n normed backward simulation b b branching backward simulation b 2 suppose b branching backward simulation b let ns u 0 start state u 62 bs otherwise equal length shortest execution ends u brelated furthermore let nt u 0 u 62 f otherwise equal length shortest execution fragment ending u brelated b n normed forward simulation b proof statement 1 follows lemma 54 proof statement 2 routine forward case see exists normed backward simulation two automata fact normed backward simulation norm natural numbers range proposition 58 b ib preorders proof similar proof proposition 48 following partial completeness result variation results jon90 lv95 theorem 59 partial completeness normed backward simulations forest b b b proof relation b b pasta branching backward simulation b note proposition 56 strengthen conclusion theorem 59 ib b case b nite invisible nondeterminism example 510 consider automata 0 b 0 figure 4 exists normed backward simulation b 0 0 relation indicated dashed lines fails since backward transition state u0 cannot simulated related state s0 consequence also normed backward simulations provide complete proof method establishing trace inclusion next section see completeness obtained combining normed forward backward simulations 6 normed history relations section dene normed history relations provide abstract view history variables abadi lamport al91 turn abstractions auxiliary variables owicki gries og76 pair r n normed history relation b r step renement b r 1 n normed forward simulation b write h b exists normed history relation b implications preorder soundness results normed forward simulations step renements carry normed history relations fact r n normed history relation b r functional branching bisimulation b sense van glabbeek weijland gw96 hence history relations preserve behavior automata strong sense intuitively history relation b b obtained adding extra state variable records information history execution example 61 consider automata 0 b 0 figure 4 together arbitrary norm function dashed lines constitute normed history relation b 0 0 observed step renement b 0 0 exists normed history relation 0 b 0 important example history relation provided unfolding construction unfolding automaton notation unfolda automaton obtained recording complete history execution formally unfolda automaton b dened set executions consist single start state next proposition relates automaton unfolding proposition 62 unfolda forest h unfolda proof clearly unfolda forest function last maps nite execution last state step renement unfolda relation last 1 together arbitrary norm function normed forward simulation unfolda following completeness theorem variation result due sistla sis91 asserts normed history relations together normed backward simulations constitute complete proof method establishing trace inclusion consequence also normed forward simulations together normed backward simulations constitute complete proof method theorem 63 completeness normed history relations normed backward simulations b exists automaton c h c b b proof take unfolda proposition 62 c forest h c since b also c b soundness history relations next apply partial completeness result backward simulations theorem 59 conclude c b b observe assume addition b n may replace b ib conclusion using proposition 56 normed forward simulations equivalent normed history variables combined step renements whenever normed forward simulation b nd intermediate automaton c normed history relation c step renement c b converse implication trivially holds since normed history relations step renements special cases normed forward simulations order prove existence automaton c need dene notion superposition automata prove technical lemma let r statesa statesb relation r starta startb 6 superposition b via r automaton c dened u v 2 statesc 2 actsc u essentially superposition usual parallel composition b set states restricted r lemma 64 suppose f n normed forward simulation b let let 1 2 projection functions map states c rst second components respectively let n 0 norm function given n 0 history relation c 2 step renement c b proof straightforward denitions theorem 65 f b proof implication follows lemma 64 implication suppose h c r b f c denition history relations c f b step renement normed forward simulation f b follows fact f preorder ak96intermezzo 323 klop ariola state remarkable result domain nitely branching process graphs ie automata considered modulo isomorphism preorder induced functional bisimulations ie history relations fact partial order h b b authors also present counterexample show nite branching property needed prove result present slight generalization result ak96 setting paper turns sucient assume automata nite invisible nondeterminism n theorem 66 suppose b n reachable subautomata b isomorphic proof suppose f n normed history relation b g normed history relation b b n starta startb nite since f step renement maps start states b start states using f 1 forward simulation infer f surjective start states hence j startb j j starta j similar argument using g normed history relation b obtain j means f also injective start states let arbitrary trace b using similar argument infer since lemma 212 b nite follows means f g injective sets afterb respectively since reachable state set b aftera follows f injective states required isomorphism property follows fact f g step renements intuitively one may interpret result follows h b b contains history information b contains history information contains history information b equal 7 normed prophecy relations section dene normed prophecy relations show correspond normed backward simulations similarly way normed history relations correspond normed forward simulations pair r n normed prophecy relation b r step renement b r 1 n normed backward simulation b write p b normed prophecy relation b ip b normed prophecy relation r n r 1 imagenite thus ip b implies ib b p b p b implies b b b r moreover states reachable b nite invisible nondeterminism p b ip b easy check preorder soundness results backward simulations renements carry prophecy relations following lemma analogue lemma 64 backward setting using lemma prove normed backward simulations equivalent normed prophecy variables combined step renements lemma 71 suppose b n normed backward simulation b let let 1 2 projection functions map states c rst second components respectively let n 0 norm function given n 0 prophecy relation c 2 step renement c b b imagenite 1theorem 72 1 2 ib b proof analogous theorem 65 using lemma 71 prove variants wellknown completeness result abadi lamport al91 theorem 73 completeness normed historyprophecy relations step renements suppose b 1 2 b n 9c h c ip r b proof theorem 63 exists automaton c h c b b next theorem 72 yields required automaton c p r b proves 1 proof 2 similar uses proposition 56 following theorem states p partial order class automata n considered modulo isomorphism reachable subautomata proof analogous theorem 66 corresponding result normed history relations theorem 74 suppose b n reachable subautomata b isomorphic 8 decidability thus far exposition purely semantic words al91 considered specications languages expressed proved existence renement mappings said nothing whether expressible language section move syntactic world discuss decidability issues end x language dening automata language viewed simplied version ioa language glv97 assume underlying assertion language l rstorder language interpreted symbols expressing functions predicates concrete domains integers arrays lists integers x set typed variables write f x ex collection formulas expressions respectively variables x may occur free automaton described syntactically rst specifying nite set x variables referred state variables state variable x assume presence copy x 0 called primed version x write x 0 set fx 0 j x 2 xg formula write 0 formula obtained replacing occurrence state variable primed version set states automaton dened set valuations state variables x set initial states specied predicate f x called initial condition actions specied via nite number action names action name nite list v variables called parameters assume fvg set actions automaton dened union action name tuples valuation parameters v respective domains transition relation specied providing action name parameters v transition predicate f xfvgx 0 ie predicate may contain action parameters well primed unprimed state variables example 81 specify fifo channel selfexplanatory ioa like syntax glv97 automaton channel states buffer seqnat initial condition actions sendv nat receivev nat tau transitions action sendv predicate action receivev predicate buffer action tau predicate false piece syntax denes automaton stepsa least set contains following elements 2 n 2 n sendd received assume specied two automata b using state variables x respectively let step renement b specied formula form list expressions ex matches terms length types formula rst conjunct denes domain step renement whereas second conjunct denes map states states b specifying state variable b value terms values state variables normed forward simulation described predicate f x together action type parameters v expression ex fvg species norm function practice norm functions often depend states b means specied means single expression ey example 82 consider following specication essentially chaining two fifo channels automaton twochannels states buffer1 seqnat buffer2 seqnat initial condition actions sendv nat receivev nat tau transitions action sendv predicate action receivev predicate buffer2 action tau predicate buffer1 let b automaton denoted specication easy prove formula denes step renement b automaton example 81 also routine check formula together norm states b dened buffer1 denes normed forward simulation b show reasonable sucient certainly necessary assump tions fact decidable whether given predicateexpression indeed corresponds step renement normed forward simulation assume automaton described using state variables x initial condition 0 action name transition predicate likewise assume automaton b described using state variables initial condition 0 action name transition predicate assume action name also action name b parameters b write p list parameters require p suppose want check whether formula denotes step renement equivalent proving validity following formula formula rst conjunct asserts function dened start states second conjunct start states mapped onto start states b third conjunct function dened source transition also dened target state transition two nal conjuncts encode transfer condition thus checking whether partial function step renement b decidable partial function well b expressed within fragment l tautology checking decidable next suppose want check whether formula together norm expressions n action name denotes normed forward simulation b order turn decidable question make additional assumptions specication b assume b nitely many start states 2 listed explicitly ie require initial condition 0 form 0 nite index set 0 list closed terms addition assume state given value action parameters nitely many transitions possible b listed explicitly formally require action type transition predicate form i2ia nite index set formula f fp g 0 list expressions ey fp g basically gives precondition ith instance transition species eect taking assumption 3 4 satised automaton specications one encounters practice particular assumptions hold channels specied examples 81 81 specications involve nondeterministic choice priori bounded fall outside format example described 93 fifo channel crash action may result loss arbitrary subset messages contained buer assumptions 3 4 eliminate existential quantiers occur denition normed forward simulation checking conditions denition becomes equivalent proving validity following formula i2ia i2i i2i i2i formula expressed within fragment l tautology checking decidable decidable whether together expressions n constitutes normed forward simula tion easy see similar result also obtained normed history variables thus far however able come plausible syntactic restrictions applicable practical cases ensure decidability normed backward simulations andor normed prophecy relations instance clear one eliminate existential quantier formula assumption relaxed assume value certain state variables b fully determined state state variables initial value left unspecied asserts normed backward simulation state exists related state b decidability results step renements normed forward simulations carry renements forward simulations described instance lv95 order see let system two states initial nal one single transition labeled halt initial nal state let b system simulates nth turing machine computation step turing machine corresponds move moves via haltaction designated nal state computation turing machine terminates function maps initial state initial state b nal state nal state b weak renement nth turing machine halts straightforward specify b function states states b decidable logic hence undecidable whether given function weak renement even setting underlying logic decidable 9 reachability sake simplicity denitions simulations renements far presented without mention reachability invariants however practical verications almost always case rst invariants properties hold reachable states established lowerlevel andor higherlevel specication invariants used proving step correspondence section show integrate reachability concerns simulation denitions specically present adapted versions step renements normed forward simulations normed backward simulations include reachability con cerns discuss relationship original denitions examples use adapted denitions formalization pvs refer gri00 adapted step renement b consists partial function r satisfying following two conditions 1 2 starta 2 domainr rs 2 startb 2 b rs b rt clause reachablea condition 2 allows us reuse invariants previously established lowerlevel specication whereas clause reachableb rs condition 2 makes possible reuse known invariants higherlevel specication b adapted denition easily seen special case original denition section 31 r adapted step renement restriction r 0 r dened regular step renement conversely regular step renement trivially satises conditions adapted version adapted normed forward simulation b consists relation f statesa statesb function n stepsa statesb wellfounded set 1 2 starta f startb 6 2 b v c clause reachablea condition 2 allows us reuse invariants previously established whereas clause reachableb u condition 2 permits reuse invariants b adapted denition easily seen special case original denition section 4 f n adapted normed forward simulation pair g n reachableb regular normed forward simulation conversely regular normed forward simulation trivially adapted normed forward simulation adapted normed backward simulation b consists relation b statesa statesb predicate q statesb function wellfounded set 1 2 c 9v 3 reachablea 9u clause reachablea condition 2 allows us reuse invariants previously established clause qu condition 2 permits reuse invariants b note trivial inductive argument backward simulation never relate reachable state nonreachable state b thus safely restrict range backward simulation invariants proven b end predicate q included denition adapted normed backward simulation even though strictly speaking 1 q need invariant 2 q always eliminated restricting range b adapted denition special case original denition section 5 b n adapted normed backward simulation b n also regular normed backward simulation automaton 0 restricts reachable states automaton b 0 restricts b states q conversely regular normed backward simulation trivially adapted normed backward simulation leave reader work adapted versions normed history prophecy relations acknowledgement thank marielle stoelinga spotting mistake earlier version paper jan willem klop discussions led us theorem 66 r equational term graph rewriting existence branching bisimilarity equivalence indeed powerful techniques automatic generation invariants norm functions probabilistic bisimulations delays three logics branching bisimulation algebraic theory automata ioa language speci focus points convergent process operators branching time abstraction bisimulation semantics compositional veri decomposing fundamental algorithms hierarchical correctness proofs distributed algo rithms untimed systems ii timingbased systems distributed algorithms visual abstraction temporal veri englewood cli simple characterization stuttering bisimulation io automata isabellehol axiomatic proof technique parallel programs formal veri data proving correctness respect nondeterministic safety speci tr hierarchical correctness proofs distributed algorithms proving entailment conceptual state specifications characterizing finite kripke structures propositional temporal logic decomposing refining specifications distributed systems existence refinement mappings proving correctness respect nondeterministic safety specifications languages tools formal specification compositional specification verification distributed systems proving nondeterministically specified safety properties using progress measures proofchecking data link protocol three logics branching bisimulation formal verification faulttolerant architectures forward backward simulations branching bisimilarity equivalence indeed forward backward simulations ii branching time abstraction bisimulation semantics equational term graph rewriting art computer programming volume 1 3rd ed model proof system asynchronous networks verification leader election protocol distributed algorithms communication concurrency visual abstractions temporal verification incremental verification abstraction possibly infinite sequences theorem provers iq automata isabellehol simulations specifications distributed systems norm functions probabilistic bisimulations delays simple characterization stuttering bisimulation normed simulations computerassisted simulation proofs powerful techniques automatic generation invariants verifying safety properties using nondeterministic infinitestate automata focus points convergent process operators liveness timed untimed systems correctness communications protocols case study algebraic definition simulation programs