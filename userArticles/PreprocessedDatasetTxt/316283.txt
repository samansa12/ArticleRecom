service combinators web computing abstractthe world wide web rich content services access resources must obtained mostly manual browsers would like able write programs reproduce human browsing behavior including reactions slow transmissionrates failures many simultaneous links thus introduce concurrent model directly incorporates notions failure rate communication describe programming constructs based model b introduction worldwide web 1 uniform highly interconnected collection computational resources considered forming single global computer kind computer web exactly kind languages required programming computer approaching second question must answer first words webs model computation 11 kind computer quickly scan checklist possibilities web von neumann computer course stored program architecture single instruction counter web collection von neumann computers yes computer protected outside access von neumann characteristics exploitable web file system universally available write instruction obvious good reasons web distributed database many ways yes certainly contains huge amount information one hand web lacks essential properties distributed databases precise data schemas uniform query languages distributed coherence consistent replication current affiliation microsoft research cambridge uk crash recovery etc hand web database answers queries computed nontrivial algorithms web distributed object system getting closer unfortunately web lacks fundamental properties traditional inmemory local area object systems first problem comes mind lack referential integrity pointer url 1 web always denote value previous access even pointer denotes value always provide quality access previous access moreover pointers subject intermittent failures various duration unpleasant failures tolerated negate usefulness web importantly though web work according remote procedure call rpc semantics basis distributed object systems example could somehow replace http 2 requests rpc requests would drastically change flavor web interactions web communication model relies streaming data request results stream data displayed interactively downloaded case request blocks produces complete result rpc abstract level main peculiarities web computer respect familiar computational models three new classes phenomena become observable ffl widearea distribution communication distant locations involves noticeable delay behavior may locationdependent much dramatic distribution observable multiprocessor localarea network possible build abstractions hide underlying real ity speed light physical limit ffl lack referential integrity url kind network pointer always point entity occasionally point quite different pointer programming language ffl quality service url pointer bandwidth bandwidth connections varies widely time route may influence algorithmic behavior web programmer need take new observables account calls new programming models eventually new languages therefore good names describing computational aspects web might well name computer bernerslee computer inventor http model computation web implicit http protocol webs hardware software infrastructure implications 2 hypertext transfer protocol webs communication protocol 3 9 12 interaction protocol infrastructure easy grasp protocol actually quite simple infrastructure likely slow speed crash stop hang revive unpredictably web seen computer eg purpose programming unusual computer 12 kind algorithmic behavior kind activities one carry strange computer example typical behavior user might exhibit hal carries preliminary search document discovers document say big postscript file available four servers japan australia north america europe hal want start parallel fourway download first would antisocial case might saturate total incoming bandwidth hal first tries north american server server overloaded slow downloading data opens another browser window contacts european server server much faster initially suddenly transfer rate drops almost zero north american server catch end waits find hal remembers night japan australia servers unloaded intercontinental link starts two downloads japan immediately fails australia starts crawling along hal notices european download totally idle minutes kills waits see wins australia north america described instance algorithmic behavior used frequently retrieving data decisions determine flow algorithm based observable semantic properties web load bandwidth even local time question language could one use comfortably program algorithm important criterion language computationally complete respect observable properties web every algorithmic behavior scriptable user sitting front say browser carries set observations decisions actions algorithmically describable possible write program emulates observation decisions actions 13 kind runtime system web one vast runtime system squint bit many features conventional runtime systems atomic data structures images sounds video compound data structures html 3 documents forms tables multipart data described various 3 hypertext markup language 2 9 internet standards pointers urls universal address space tree graph structures xml 4 mime 5 multipartrelated format used transmit complex data standardized type systems data layout xml dtds mime media types subroutine calls parameter passing conventions http cgi 6 plenty available processors web servers seen distributed objects protect dispense encapsulated data eg local databases finally nice visual debuggers web browsers programming language features could correspond runtime system could web language look like lets try imagine value web language would pair mime media type appropriate content example media type may imagejpeg content would jpegencoded image values could stored variables passed procedures etc note contents values may process fetched values naturally concurrently evaluated kinds values would include gateways scripts see syntax programming language usually begins description literals entities directly denoting value eg numeral string media literal would pair media type url indicating corresponding content literal would evaluated value fetching url content verifying corresponds claimed media type gateway literal would pair gateway type url indicating gateway eg cgi gateway gateway type indicates parameter passing conventions expected gateway eg get post isindex media types requests replies gateway literal evaluates gateway value sits waiting activated gateway value activated giving required parameters syntax activation would look like normal procedure call ga literal variable expression produces gateway value arguments normally media values effect call package arguments according conventions gateway ship appropriate http connection get result convert back value final value may rendered according type example g might constant url refers altavista search engine case arguments would include phrase search engine look result would likely type texthtml could either displayed processed primitive data structures media literals primitive control structures gateway calls much already write scripts scripts could stored web internet media script refer another 4 extensible markup language 11 5 multipurpose internet mail extension 5 9 6 common gateway interface 9 one url syntax script calls would scripts would closed ie free variables except urls security network transparency arguably web language scripts web particular operating system file system web stored particular address space file language uses web runtime system 14 issues two major issues remain addressed first issue output parsing prominence browsers browserready content web result query almost always returned entity type texthtml page even purpose present say single datum type imagejpeg output parsed extract information html although structure html pages relatively well defined parsing process delicate errorprone foiled cosmetic changes pages order make web programming possible large scale one needs uniform way describing protocol gateway extension script problem process solved xml standards data description sophisticated patternmatching languages web pages 10 discuss topic paper second issue design control structures able survive flaky connectivity web topic rest paper suppose want write program accesses manipulates data web obvious starting point http library embedded programming lan guage gives us ability issue http calls http call fail fairly high probability therefore errorhandling code must written using errorhandling primitives language want write code reacts concurrently network conditions network failures interesting ways errorhandling code ends dominating informationprocessing code errorhandling concurrency primitives common languages convenient exceptional code exceeds normal code alternative try use highlevel primitives incorporate error handling concurrency optimized web programming section introduce primitives service http information provider wrapped errordetection handling code service combinator operator composing services terms information output error output possibly involving concurrency error recovery policy concurrency thus modularly embedded inside service idea handling failures combinators comes sequential context lcf tactics 6 perhaps surprisingly combinators similarities found concurrent realtime languages programming reactive systems esterel 4 one major difference combinator language includes concept rate progress also tried concentrate features allow easy expression common web browsing algorithms language small simple language appear allow every possible algorithmic behavior expressed achieve goal suggest would probably necessary start language like esterel explicitly include concept rate progress programs combinators could provided library allow easy expression many common web browsing algorithms 21 services aweb server unreliable provider data request service relatively high probability failing unacceptably slow different servers though may provide similar services therefore possible combine unreliable services obtain reliable virtual services service invoked may never initiate response initiates response may never complete completes response may respond service denied produce real answer form stream data period time request end response main datum interest transmission rate counted bytes per second averaged interval interesting notice basic communication protocol internet provide direct data transmission rate must estimated outside might also interested percentage total service completed unfortunately many web servers historically provided information length document sending forced omit aspect language 22 service combinators describe syntax informal semantics service combinators language combinators chosen allow common manual webbrowsing techniques reproduced simple programs syntax language given bnflike notation use curly brackets f g grouping square brackets zero one occurrences postfix zero occurrences postfix one occurrences infix j disjunction simple juxtaposition concatenation use indicate occurrence language lexical items c indicates character range services limitreal indexstring gateway g string fidstringg gateway types g get j post lexical items string stringchar single legal character one pairs characters real digit basic model semantics services follows service may invoked time may invoked multiple times invocation either succeed return result time fail time continue forever point time rate real number indicating fast progressing basic service service urlstring fetches resource associated url indicated string result returned content fetched service fails fetch fails rate service running rate data resource received measured kilobytes per second gateways gateway get string gateway post string services similar service urlstring except url string associated cgi gateway corresponding type index get post arguments passed gateway according protocol gateway type sequential execution combinator allows secondary service consulted case primary service fails reason thus service acts like service 1 fails acts like service 2 concurrent execution combinator allows two services executed concurrently service starts services 1 2 time returns result whichever succeeds first 1 2 fail combined service also fails rate combined service always maximum rates 1 2 time limit timeoutt timeout combinator allows time limit placed service service timeoutt acts like except fails seconds completed within time rate limit limitt combinator provides way force service fail rate ever drops certain limit r startup time seconds allowed since generally takes time service begins receiving data original design startup time applied whole service later realized design leads unfortunate interaction combinators demonstrated example limitt problem 1 fails first seconds 2 initiated allowed startup time quite likely whole service fails motivates following semantics service limitt acts like service except physical connection considered failed rate ever drops r kbytessec first seconds connection physical connections created invocations url index gateway combinators general rate limit described function f time rate combinator limitf could used current combinator could defined via step function general combinator supported semantics decided adopt current simpler definition found semantics rate useful many situations admittedly may seem surprising users appear strange interactions combinators fact interactions quite simple limit combinator distributes combinators physical connections repetition repeats repeat combinator provides way repeatedly invoke service suc ceeds service repeats acts like except fails repeats starts unlike many traditional language constructs repeat combinator include condition terminating loop instead loop terminated ways eg timeoutt repeats nontermination stall stall combinator never completes fails always rate zero following examples show useful program waits 10 seconds starting timeout10 stall program repeatedly tries fetch url waits 10 seconds attempts failure fail fail combinator fails immediately hard construct examples small language useful though include anyway completeness expect useful language extended include conditionals traditional programming language constructs 23 examples show simple examples illustrate expressiveness service com binators intention service combinators included fragment larger language examples implementation include extensions use let make toplevel bindings use funx body functionargument function abstraction application completely clear define semantics extensions terms service model used going weboriented perhaps functions implemented gateways bound variables actually refer dynamically allocated urls regardless simple examples follow meaning clear since function declarations could expanded actual implementation allows flexible use functions elaborate since yet sure exactly status functions language would also like point embedding language host language done java see section 4 need make use abstraction mechanisms provided host language example 1 program simply attempts fetch named url example 2 gateway gethttpwwwaltavistadigitalcomcgibinquery pgq whatweb qjava program looks word java altavista search engine example 3 program attempts fetch popl97 conference page one two alternate sites sites attempted concurrently result whichever site successfully completes first example 4 program attempts fetch www7 conference page australia fetch fails rate ever drops 1 kbytessec starts page successfully fetched within 20 seconds site known easily reachable used retrieve failure message example 5 gateway gethttpwwwaltavistadigitalcomcgibinquery pgq whatweb qx gateway gethttpwwwhotbotcomsearchhtml mtx program defines two functions looking search strings altavista hotbot single function tries concurrently returning whichever succeeds first uses function lookup word java see engine performs task fastest large number constant parameters required hotbot gateway omitted example 6 gateway posthttpwwwdbccomcgibinhtxexesquote sourcedbcc tickerticker formatdecimals indexhttpwwwgrayfirecomcgibingetprice ticker program defines two functions looking stock quotes based two different gateways defines reliable function makes repeated attempts case failure alternating gateways uses function lookup quote compaq computer give formal semantics service combinators 31 meaning function basic idea semantics define status service particular time u given starting time possible values status hrate ri hdone ci hfaili r rate service progress c content returned successful service particular value r used semantics retained since application initiates service might want make use parameter eg display user might also use considering extending language new combinators limit combinator immediately fit framework handle introducing additional parameter semantics function time interval rate function takes argument duration since connection started indicates minimum rate satisfies applicable rate limits thus semantics based meaning function four arguments service start time status time rate limit function meaning function implicitly depends state web time instead building mathematical model whole web assume url query returns arbitrary fixed result reality depends state web time query complication arises fact web queries started time parameters may return value example two identical url queries could reach server different times fetch different versions page moreover two identical gateway queries may return pages contain different hit counters simplicity make deterministic assume existence stantaneous caching proxy caches instant result query initiated instant assume urlstring j assume timeoutt stall meaning function defined compositionally first argument follows ie time 1 fails hfaili otherwise hv 0 hdone ci connection fetching url string time succeeds time u content c hfaili exists u 0 st u connection fetching url string time fails time rate r 0 time u 0 r ri otherwise connection fetching url string time rate r time u semantics gateway essentially url except parameters passed opening connection basic property semantics proven structural induction ms u 32 algebraic properties semantics used prove algebraic properties combinators turn properties could used transform optimize web queries although really investigated possibilities define simple properties easily derived example fail fail stall interesting observation semantics equates services repeatfail stall however still useful include stall language since obvious implementation inefficient service repeatfail conversely could consider eliminating fail favor timeout0 stall range equations derived easy tedious case analysis timeoutt limitu limitt limitt limitt limitt limitt limitt intuitive properties checked semantics sometimes may discover satisfied example 0 operator asymmetrically picks one result two results obtained exactly time implementation implemented interpreter language service combinators including toplevel definitions functions used examples implementation written java 7 implementation also provides easy interface programming service combinators directly java essentially provides embedding 8 language java services defined abstract class service declared follows public abstract class service public content getcontentfunctime tf public float getrate public void stop invoke service getcontent method passed function time determines minimum rate physical connections exactly formal se mantics toplevel function zerothreshold normally used indicating minimum rate method returns content service completes returns null service fails invocation service current rate service found using concurrent call getrate method might used display rate user also current invocation aborted calling stop method various service combinators provided java classes whose constructors take subservices arguments example following java code corresponds example 3 new par new mediahttpwwwcsumdedupughpopl97 new media httpwwwdikudkpopl97 sense implementation approximation formal semantics semantics ignores interpretation overhead however quite close ap proximation since interpretation overhead small programs compared time data transmitted rate basic service defined average previous two seconds calculated samples done five times second appears give good results practice though admittedly somewhat ad hoc implementation uses sun java classes fetch urls small modification made failures correctly detected since normally catch failures instead return error page concurrency implemented using java threads required surprisingly large amount work functions implemented essentially manipulating abstract syntax prior actual initiation service programmer could course write subclasses service could call arbitrary java code 5 conclusions future directions shown simple language allows easy expression common strategies handling failure slow communication fetching content web defined language based service combinators implemented given formal semantics intention language extended powerful web scripting language language would include common language features functions conditionals also include additional features webprogramming beyond service combinators example special constructs manipulating html content possibly linked browser another direction allow scripts stored web implementation experimented also possible write scripts provide content web perhaps even export function cgi gateway full webscripting language might even allow thread execution migrate via web language features would certainly powerful useful partially inspired work kistler marais designed language called webl 10 includes features particular constructs manipulating html well service combinators language released public becoming relatively popular paper concentrated one particular aspect unique web namely unreliable nature first considering fundamental properties web built small language whose computation model tailored web programming hope language model serve firm foundation larger web scripting languages elements language design formal semantics also useful designers domain specific languages domains include realtime concerns failures common 6 acknowledgements luca cardelli would like thank david jefferson group people digital palo alto met discuss webrelated issues discussions provided initial stimulus work rowan davies would like thank digital src including staff providing opportunity work exceptionally stimulating pleasant environment summer 1996 mart abadi paul mcjones benjamin pierce reviewed early drafts r worldwide web hypertext markup language 20 hypertext transfer protocol http10 esterel synchronous programming lan guage design semantics implementation edinburgh lcf java language specification modular domain specific languages tools internet engineering task force webl programming language web world wide web consortium world wide web consortium tr ctr marjan mernik uro novak enis avdiauevi viljem umer design implementation simple object description language proceedings 2001 acm symposium applied computing p590595 march 2001 las vegas nevada united states christian queinnec influence browsers evaluators continuations program web servers acm sigplan notices v35 n9 p2333 sept 2000 monika solanki antonio cau hussein zedan asdl wide spectrum language designing web services proceedings 15th international conference world wide web may 2326 2006 edinburgh scotland daniela florescu andreas grnhagen donald kossmann xl xml programming language web service specification composition computer networks international journal computer telecommunications networking v42 n5 p641660 05 august daniela florescu andreas grnhagen donald kossmann xl xml programming language web service specification composition proceedings 11th international conference world wide web may 0711 2002 honolulu hawaii usa j c baeten h van beek mauw specifying internet applications dicons proceedings 2001 acm symposium applied computing p576584 march 2001 las vegas nevada united states reiner kraft designing distributed access control processor network services web proceedings 2002 acm workshop xml security november 2222 2002 fairfax va westley weimer george c necula finding preventing runtime error handling mistakes acm sigplan notices v39 n10 october 2004 r braumandl keidl kemper kossmann kreutz seltzsam k stocker objectglobe ubiquitous query processing internet vldb journal international journal large data bases v10 n1 p4871 august 2001 carlos varela gul agha programming dynamically reconfigurable open systems salsa acm sigplan notices v36 n12 december 2001 nick benton luca cardelli cdric fournet modern concurrency abstractions c acm transactions programming languages systems toplas v26 n5 p769804 september 2004 marjan mernik jan heering anthony sloane develop domainspecific languages acm computing surveys csur v37 n4 p316344 december 2005