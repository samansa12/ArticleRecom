objectoriented framework integration interactive animation techniques present interactive modeling animation system facilitates integration variety simulation animation paradigms system permits modeling diverse objects change shape appearance behaviour time system thus extends modeling tools include animation controls changes effected various methods control including scripted gestural behavioral specification system extensible testbed supports research interaction disparate control methods embodied controller objects paper discusses issues involved modeling interactions mechanisms implemented provide solutions issuesthe systems objectoriented architecture uses delegation hierarchies let objects change attributes dynamically objects include displayable objects controllers cameras lights renderers user interfaces techniques used obtain interactive performance include use datadependency networks lazy evaluation extensive caching exploit inter intraframe coherency b introduction last two decades graphics research concentrated three main areas loosely categorized image synthesis shape modeling behavioral modeling image synthesis ren dering stressed late 70s early 80s emphasis recently shifted modeling various objects phenomena indeed many researchers believe graphics today model ing wish expand definition modeling include realms simulation animation rendering user interaction since mid60s research focused tools creating electronic books specifically hypermedia documents interactive illustrations 21 illustrations allow readers interact canned movie stored parameterized model phenomenon trying understand interactive illustrations require simulation animation underlying model interactive realtime environment want create interactive illustrations wide range topics modeling tools must handle large exten sible sets objects operations objects change physical attributes time need rich collection methods controlling timevarying structure behavior objects especially interact various applicationdependent systems rules words cannot use single silverbullet modeling animation technique essence animation control specification timevarying properties traditional graphics packages phigs dore renderman however explicit notion time packages time specified implicitly byproduct sequence editing operations database displaylist representation todays animation systems allow time explicitly specified generally permit subset objects properties vary time also tend restricted objects properties behaviors sup port limiting force designer conceptualize animation process traditional pipeline modeling animation rendering phases contrast concentrated integrating modeling animation rendering unified coherent framework overview system provides general extensible set objects may geometric algorithmic interactive ie userinterface controlled properties geometric objects include quadrics su perquadrics constructive solid geometry objects csgs hierarchical collections objects spline patches objects revo lution prisms generalized cylinders ducts 9 objects obtained extruding varying crosssection along spline path implicit surfaces nongeometric objects include cameras lights renderers behaviors gestural controls spring constraints finiteelement techniques cloth simulation 19 dynamics 13 inverse kinematics 4 14 constraint solvers 3 also encapsulated objects objects send receive messages messages persistent copy message retained receiving object provide information object change time objects also inquire information information depends nature content messages particular object retained messages objects transformed scales rotations translations shears reflections deformed bends twists tapers waves 2 freeform deformations 16 colored shaded 17 texture mapped dynamically moved forces torques velocities accelerations volumetrically carved 8 messages functions time since objects retain may edited objects list messages describes objects timevarying structure behavior editing list inserting deleting adding modifying messages structure behavior altered editing performed either objects entities eg user external set objects comprising model objects several important characteristics first since interactive properties object graphical user interface one attributes typically object supports user interface specialized information instance dynamics simulator may permit user specify initial conditions sliders objects primarily interactive object encapsulating mouse queried objects position information object encapsulatinga constraints editor second objects exploit communication becausethey contain information often essential objects renderer needs information objects order make global lighting cal culations constraint methods also require information many objects perform calculations constructive solid geometry objects need information boundary representation component objects order compute boundary repre sentations camera needs know position another object order track finally object system part classical classinstance hierarchy found c smalltalk programming languages constantly changing nature models makes static relationship classinstance restrictive since example transforming sphere torus would typically require change class instead system delegation system 18 10 classinstance system objects two sorts associations association instance class association class superclass delegation system hand one relation object prototype object termed extension created another object prototype object delegation system interprets messageby using one prototypes techniques changes prototype affect objects changes extension affect extension although suggested 5 20 delegation might provide simpler elegant method solving computer graphics problems aware work prior incorporating delegation animation modeling systems 3 system architecture 31 control points simplest message name function time message edited changing particular nature form timevarying function specified series timevalue pairs call control points see figure 1 thus editing message mean adding removing control points associating control points new times changing value control point value control point may scalars vectors arbitrarily complex expressions example scaling transformation given single real number uniform scale list three real numbers nonuniform scale control point specifying csg tree given list containing three items object name list csg tree identifier specifying csg operation another object list values functions time translation given vector function position another object scene functionbased control points allow useful behaviors objects following objects adjusting colors match objects many systems support tracking behavior special case cameras system allows object behave way translate message control points figure 1 message list control points control point time associated value csg tree example points values control points nested lists controlpoint values similar lisp sexpressions regard contain atomic values including numbers strings vectors data structures object iden tifiers lists atomic values lists control point values thus flexible permitting use mathematical expressions based values scene figure 2 shows sample control point values atomic values 31416 ujohnpaintbi camera sin314 117 list atoms 10 20 30 list lists obtain 2nd value list changinng position object robotheadposition figure 2 examples control point values fragments scripting language used describe objects messages values times explicitly specified derived interpolation function typically weighted sum control points interpolating series control points whose values functions time system cannot pass direct values interpolation method must first evaluate control point target time series evaluated values functions thus produced interpolated example consider camera tracking two moving objects smoothly shifting focus first second value message time change dramatically depending interpolation method used 32 messages important purpose messages provide communication among objects objects user interface physically based simulator apply edit messages objects thus modifying appearance behavior object also affect another object sending message containing reference back sender ie message contains control point references another object whenever message interpreted sending object called back asked provide appropriate information use term controllers objects modify messages objects either actively editing passively called back example large scientific visualization projects often run batch mode separating supercomputer analysis interactive visualization results simple controller could read results batch simulations obtaining list positions whatever information appropriate creating list messages messages could given appropriate ob jects telling behave order represent scientific data 6 sophisticated controllers apply edit set messages adding new messages derive new results controllers discussed detail section 5 system variety messagesto support many kinds objects highly specialized messagescan provide information unusual object example parameters implicit equation tolerances constraint solver general changes transformations deformations dynamics force torque provide diverse class changes applicable common objects 33 objects every object represented retained list messages received objects identical first created since messages yet sent ie new objects list empty message list modified order give object interesting behaviors appearances rotate trans bend cone object messages object bazinga figure 3 object list messages interpretation message ie semantic meaning determined object receives example screenaligned text object behave way cube receives message rotate rotation text projected onto plane screen similarly requests information handled objectspecific manner sphere computes ray intersection differently cube handle variable semantics object set methods ie functions interpret messages determine behavior appearance interpretation message alter possibly methods currently use byan objectand thus radically change entire nature ability change methods enables object adapt different situations example deformed torus longer performs ray intersections finding roots quartic equation rather requiring toruss rayintersection method handle eventualities procedure interprets deformation method changes ray intersection method suitable onesuch one performs ray intersection set polygons many simple objects spheres cubes cylinders many methods common handle transformations identically differ shapespecific methods boundary representation ray intersection computation surface normals parametric coordinates 34 example making objects delegation system straightforward mechanisms object hierarchy 5 10 recall object extension made another object prototype system object receive message stating inherit messages another object thus becoming objects extension extension implicitly inherits prototypes behavior well since methods initially defined messages prototype since prototypeextension relationship system specified message however vary time feature normally present delegation system example history automobiles modeled single object uses different model year car prototype year behavior described simply single timevarying message objects also made several objects consider figure sitting chair shown figure 7 chair csg object built parts many different objects figure made several extruded duct objects giving smooth stylized appearance duct hierarchy several objects made several spline path objects one path describes spine duct others describe ducts crosssection along length path paths composed point objects used control points splines objects composing csg object change time csg object also change csg object asks components boundary representations specified time component objects return boundary representations functions time since boundaries specified messages corresponding object composition functions csg object necessarily function time paths ducts behave similarly points specifying hull path move hulls change shape changing spline path path changes orientation shape duct made path also changes suppose want figure watch fly fly flitting scene specify motion fly path object making fly move along spline path fly ask path position points along tangent information points thus fly oriented along path flying air likewise figures eyes ask fly position use information track points paths comprising figures ducts also ask fly position change orientation accordingly interpreting messages 41 simple case object computes answer inquiry interpreting messages sequence said earlier message change methods used interpret subsequent messages therefore particular order messages important objects message list provides ordering linear traversal satisfactory begin using references objects making multiple inquiries object circumstances work repeated unnecessarily becomes useful exploit coherence discussed section 42 recall messages like deformations mentioned section 2 interpreted change methods object uses interpret messages along list note also objects change methods different situations example applying deformation spline patch might cause change methods inaccuracy applying deformation control hull patch acceptable 7 objects depend objects traversal becomes recur sive consider figure watching fly discussed section 34 determine orientation eye position fly must determined interpreting messages eye message containing reference fly ie asking fly position reached recursive traversal fly begins flys position determined interpreting flys list messages interpretation eyes list continues interpretation mechanism implicitly utilizes lazy evaluation calculations performed object actively asked information example time would wasted computing polygonal boundary representations csg objects inquiries concerned tree hierarchy object use lazy evaluation caching scheme described next simultaneously avoid un necessarycomputationand exploit inter intraframe coherency 42 caching messages used store arbitrary information objects send messages order cache useful computationally expensive data since data function time messages also functions time messages appropriate mechanism data caching first time inquiry made object computes value time inquiry time interval value holds second inquiry made within valid interval object simply returns previously computed value see figure 4 note messages contain data relevant cache message modified cache marked invalid see figure 5 multiple edits messages simply flag cache invalid multiple times cheap operation thus several edits batched one interactive updates become much faster since data recomputed actually requested rotate trans bend cone brep add cache query look like object bazinga rotate trans bend cone object messages object bazinga figure 4 inquiry adds cache end list messages cache boundary representation brep object editing subsequently invalidating cache selective pro cess editing translation invalidates cache transformation matrix cache polygonal boundary representa tion objects understand different messages affect particular know messages invalidate caches since cache stores interval valid invalidation may merely change size shape interval perhaps splitting multiple intervals instead completely invalidating edit changes value message halfway time span caches interval interval halved detailed manipulations intervals also supported scaling boolean operations profiling indicates improvement performance caching justifies expense monitoring memory usage seen animations using extensive caching use approximately thirty percent memory achieve much tenfold speedup animations caching mechanism caches essentially inquired data time inquiry thereby minimizing need recalculate coherent data note interframe coherency automatically exploited since caches valid intervals time edit messsage change marks cache invalid rotate trans bend cone brep object bazinga rotate trans bend sphere brep object bazinga figure 5 editing messagebefore cachecan invalidate cache 43 message list traversal caching see system works caching lets consider simple example rendering objects scene zbuffer renderer asks object frame polygonal boundary representation inquired first time object computes polygonal representation caches marking interval valid gives data renderer renderer zbuffers polygons producing frame renderer asks object polygons next frame object merely returns previously computed boundary representation valid requested frame caching helps expedite inquiry within frame well ask object data inquiries first perform much faster returning cache consider car four tires alike linear transformation tire could expensivetocompute spline surface yet surface could computed four times another example consider updating figure fly animation section 34 suppose one points used path translated translation invalidates points ctm cache cur rent transformation matrix since caches generated object asked information identity inquiring object path also stored cache thus cache invalidated path informed invalidates caches caches include references duct made path ducts cache boundary representation also marked valid duct needs provide polygonal representation see invalid cache retraverse list messages asking path spline equations spline notice invalid cache recalculate spline equations asking moved point new position 5 controllers mentioned section 2 behavior encapsulated objects call controllers controller affects objects sending messages refer back controller consider inverse kinematics controller must make articulated arm reach goal see figure 8 joint object message specifies orientation througha reference inverse kinematics controller dependency allows controller indicate amount translation rotation produced joint given time interactive techniques considered controllers well example user specifies initial conditions simulation see figure 9 case simulated objects reference user interface object use dependencies situation similar described section 41 thus position object linkage neededat particular time serial interpretation objects messages begins upon reaching translation rotation message referencing controller object asks controller correct value controller supplies necessary translation rotation given time messagessent controlled object controller intentionally abstract possible responsibility determining messages affect controlled object left object self essentially controller determines controlled object determines consider example rigidbody dynamics simulation involving collision detection response would possible one controller handle aspects simulation exerting control sending translation rotation messages controlled objects however use instead collisionresponse controller sends collision message controlled object object interprets details collision message terms velocity momentum transfers acceleration continuous contact objectoriented approach control several advantages first reduces complexity controller implementation controller need keep track actually changing specific attributes controlled object controller thus store less information might needed another controller affecting object reducing need communication controllers second approach increases efficiency communication controllers objects single abstract messagethat directs changesto many attributes object requires less system overhead many messages concerns single attribute third approach allows different types objects respond differently abstract command flexible object like cloth instance interpret collision message differently rigid object 6 controller interaction allowing heterogeneous controllers coexist communicate sameenvironment hasbeena research goal computer graphics several years 1 12 interaction controllers allow many powerful behavioral control techniques affect common set objects meaningful way ideal system flexible extensible efficient 61 problems interaction number difficult problems must solved achieve goal heterogenous controller interaction first involves identifying aspects interacting controllers hinder successful cooperation consider situation depicted figure 6 rod endpoints b length l distance two walls b also l possible make rod span walls assume controller move controller move b b assume also constrain rod remain rigid simplest way make rod span walls invoke two controllers independently handles task moving one endpoint appropriate wall solution necessarily work however controller might instance decide simplest way move endpoint wall translate rigid rod neither controller realize rod must rotated allow endpoints touch walls spanning achieved problem cannot solved controllers consider endpoints diagnosing l l figure example incompatible controllers correcting lack cooperation currently requires human intervention automation process seem feasible without severely restricting possible controller types eg constraint solvers another issue controller interaction data incompatibility arises example kinematic controller dynamic controller affect object dynamic controller works velocity acceleration data kinematic controller understand kinematic controller changes position object time however velocity object appears change dynamic controller made aware apparent change velocity computations may produce visual inconsistencies controllers work iteratively present third problem iterations different controllers may proceed different rates aliasing may result problem appear several controllers perform numerical integration different time steps system provides several mechanismsthat facilitate controller interaction trying handle problems mechanisms allow us conduct research interaction policies 62 solutions certain attributes object dependent attributes objects position instance related velocity acceleration system provides mechanism maintain relationships among attributes object controller inquires attribute controlled object system keeps attribute consistent related attributes even attributes changed controllers consider example controller handles momentum transfers response colli sions controller adds collisionresponse message object controls velocity resulting message nonzero object penetrated another object controller needs know position object whose momentum changed controlled object convert change momentum change velocity collisionresponse controller need concerned issue caching relation controllers especially important attributes related differential equations parameterized time caching acceleration velocity object one instant time system use eulers method 15 obtain velocity position object next instant currently investigating use rungekutta method integration method effective overall eulers method becauseof interobject dependencies computing necessary intermediate values may require global information thus cannot implemented easily system distributes global information interpretation among objects caching also useful numerical differentiation tributes helpful solving data incompatibility kinematics dynamics mentioned start section velocity corresponding kinematic change approximated dividing recent displacement created kinematics controller elapsed time animations time units previous displacement variety interesting controller interactions created simply using mechanisms maintaining related attributes multiple controllers send messages object relative ordering messages determines effects controllers combine determine objects overall behavior messages earlier list affect object first order traversal call type interaction strict priority ordering allowing different orderings messages system provide different effects since messages general noncommutative eg translate followed rotate rotate followed translate general mechanism controller interaction supported allowing multiple controllers affect one objects indirectly intermediary controller multiple controllers referenced messages intermediary controller controlled object controlled objects reference intermediary controller job intermediary controller combine effects multiple controllers meaningful result convey result controlled objects intermediary controllers used whenever strict priority ordering sufficient eg behavior object weighted average effects two controllers toolbox standard intermediary controllers perform useful functions weighted average could added system 7 example 3d pong see systemworks practice lets look sample interactive environment 3d pong game sphere represents ball two cylinders appropriately scaled translated represent paddles play game inside court object revolution lying side using scaled cylinders capping ends revolve object back walls ones ball hit two pairs dial objects control paddles two users manipulate paddles next appropriate walls collision detection object checks intersections ball revolve object back walls paddles finally collision response objects tell different objects one responsible collisions ball anything except back walls ball hits object revolution object produces physically based collisionresponse messages ball moves accordingly revolve object uses null interpretation response message thus unaffected collisions ball collides paddle uses collisionresponse interpretation paddle would use different one perhaps one makes paddle visually light second collisionresponse object responsible collisions ball back walls ball hits one back walls ball receive different kind collision response message since bounce back walls collision response interpretation add point current score many interesting features could added game ex ample walls court could change game progressed possibly response collisions ball ball could move faster hit faster paddle despite fact paddles kinematic control intrinsic notion velocity users could control paddles different ways ex ample using polar coordinates euclidean coordinates simply changing messages dials paddles moving obstacles could placed two players perhaps obstacles follow ball follow prescripted plan motion since objects asked display time instant replay game works automatically allowing users see change finally features added interactively game players summary designed implemented interactive graphics system 11 unusually close integration modeling anima tion modeling done timevarying messages thus modeling tools used animation system objectoriented provides timevarying delegation hierarchy maximum flexibility behavioral control supported giving controllers responsibility calculating controlled objects letting object interpret abstract instructions according methods multiple controllers operate independently instructing objects priority order alternatively intermediary controllers written integrate behavior control mechanisms system currently contains large class geometric primitives growing collection userinterface objects controllers number efficiency mechanisms contribute interactive performance particular lazy evaluation caching exploit inherent inter intraframe coherence distributing database expect improve performance sys tem possible object evaluate messages parallel consider scheduling problems objects depend system meant go next step beyond scope traditional graphics systemssuch phigs dore suchsystems enforce rigidly divided modelinganimationrendering pipeline believe system provides indications next generation graphics systems software headed towards environment time behavior firstclass notions shape description rendering 9 acknowledgements cannot begin thank people made system complexity possible would like thank many people commented paper especially reviewers would also like thank paul strauss michael natkin architects earlier version system provided much insight problem general animation system addition entire brown graphics group especially artists provided much valuable criticism systems capabilities r managing geometric complexity enhanced procedural models global local deformations solid prim itives modeling system based dynamic constraints articulated objects bags versus prototypes objectoriented languages animating cellular transport mechanism curves surfaces computeraided geometric design interactive volumetric modeling graphics gems model objectbased inheritance uga unified graphics architecture unified framework constraintbased modeling collision detection response computer animation interactive realtime articulated figure manipulation using multiple kinematic constraints numerical recipes c realistic lighting model computer imators objectoriented classification paradigm simplified approach animating cloth objects reading writing electronic book tr reading writing electronic book freeform deformation solid geometric models managing geometric complexity enhanced procedural models model objectbased inheritance objectoriented classification paradigm curves surfaces computer aided geometric design graphics gems interactive realtime articulated figure manipulation using multiple kinematic constraints versus prototypes objectoriented languages realistic lighting model computer animators global local deformations solid primitives uga unified graphics architecture unified framework constraintbased modeling ctr scott snibbe kenneth p herndon daniel c robbins brookshire conner andries van dam using deformations explore 3d widget design acm siggraph computer graphics v26 n2 p351352 july 1992 kenneth p herndon tom meyer 3d widgets exploratory scientific visualization proceedings 7th annual acm symposium user interface software technology p6970 november 0204 1994 marina del rey california united states parris k egbert william j kubitz application graphics modeling support object orientation computer v25 n10 p8491 october 1992 julian e gomez rick carey tony fields andries van dam dan venolia 3d interaction hard really proceedings 21st annual conference computer graphics interactive techniques p492493 july 1994 paul strauss rikk carey objectoriented 3d graphics toolkit acm siggraph computer graphics v26 n2 p341349 july 1992 mark tarlton p nong tarlton framework dynamic visual applications proceedings 1992 symposium interactive 3d graphics p161164 june 1992 cambridge massachusetts united states ralph e gonzalez objectoriented library hierarchical animation sequences acm siggraph computer graphics v27 n2 p8285 sept 1993 paul strauss iris inventor 3d graphics toolkit acm sigplan notices v28 n10 p192200 oct 1 1993 robert c zeleznik kenneth p herndon daniel c robbins nate huang tom meyer noah parker john f hughes interactive 3d toolkit constructing 3d widgets proceedings 20th annual conference computer graphics interactive techniques p8184 september 1993 marc p stevens robert c zeleznik john f hughes architecture extensible 3d interface toolkit proceedings 7th annual acm symposium user interface software technology p5967 november 0204 1994 marina del rey california united states cindy grimm david pugmire visual interfaces solids modeling proceedings 8th annual acm symposium user interface software technology p5160 november 1517 1995 pittsburgh pennsylvania united states tom meyer brookshire conner adding behavior vrml proceedings first symposium virtual reality modeling language p4551 december 1315 1995 san diego california united states marc najork marc h brown library visualizing combinatorial structures proceedings conference visualization 94 october 1721 1994 washinton dc gordon lescinsky costa touma alex goldin max fudim amit cohen interactive scene manipulation virtue3d system proceeding seventh international conference 3d web technology p127135 february 2428 2002 tempe arizona usa larry koved wayne l wooten groop objectoriented toolkit animated 3d graphics acm sigplan notices v28 n10 p309325 oct 1 1993 brookshire conner scott snibbe kenneth p herndon daniel c robbins robert c zeleznik andries van dam threedimensional widgets proceedings 1992 symposium interactive 3d graphics p183188 june 1992 cambridge massachusetts united states stefan mller simon schubigerbanz matthias specht realtime multimedia composition layer proceedings 1st acm workshop audio music computing multimedia october 2727 2006 santa barbara california usa kenneth p herndon robert c zeleznik daniel c robbins brookshire conner scott snibbe andries van dam interactive shadows proceedings 5th annual acm symposium user interface software technology p16 november 1518 1992 monteray california united states conal elliott greg schechter ricky yeung salim abiezzi tbag high level framework interactive animated 3d graphics applications proceedings 21st annual conference computer graphics interactive techniques p421434 july 1994 jeanfrancis balaguer less power simplicity proceedings fourth symposium virtual reality modeling language p3945 february 2326 1999 paderborn germany marc najork marc h brown obliq3d highlevel fastturnaround 3d animation system ieee transactions visualization computer graphics v1 n2 p175193 june 1995 enrico gobbetti jeanfrancis balaguer integrated environment visually construct 3d animations proceedings 22nd annual conference computer graphics interactive techniques p395398 september 1995 kenneth p herndon andries van dam michael gleicher challenges 3d interaction chi 94 workshop acm sigchi bulletin v26 n4 p3643 oct 1994 enrico gobbetti jeanfrancis balaguer daniel thalmann blair macintyre steven feiner distributed 3d graphics library proceedings 25th annual conference computer graphics interactive techniques p361370 july 1998 brad myers user interface software tools acm transactions computerhuman interaction tochi v2 n1 p64103 march 1995