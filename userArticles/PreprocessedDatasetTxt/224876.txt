synthesizing petri nets statebased models paper presents method synthesize labeled petri nets statebased models although statebased models finite state machines powerful formalism describe behavior sequential systems cannot explicitly express notions concurrency causality conflict petri nets naturally capture notions proposed method based deriving elementary transition system ets specification model previous work shown ets exists petri net minimum transition count one transition label reachability graph isomorphic original ets paper presents first known approach obtain ets nonelementary ts derive placeirredundant petri net furthermore imposing constraints synthesis method different classes petri nets derived reachability graph pure free choice unique choice method implemented efficiently applied different frameworks petri net composition synthesis petri nets asynchronous circuits resynthesis petri nets b introduction paper present method given finite state model called transition system ts synthesizes safe petri net reachability graph either isomorphic original ts isomorphic minimized version original ts synthesized pn always placeirredundant ie possible remove place net without violating behavior synthesis method provides us technique transforming specifications given model mapped ts derive pn equivalent initial model process way create tool automatically translates csp ccs fsm burst mode machines models labeled petri nets also use tool transformation petri nets aimed optimality criterion place count transition count number places pn graph complexity etc deriving net belonging given class safe freechoice uniquechoice etc opensup avenue building interactive tools designer possibility play pnlike specification performing equivalent transformations pns andor transformations specifications work partly supported ministry education spain cicyt tic 950419 work partly supported uk serc grj78334 z work partly supported uk serc grj72486 murst research project vlsi architectures x work partly supported uk serc grj52327 pns different design constraints optimization criteria basic intermediate object ts pn region 11 1 3 10 state safe petri nets distributed among places state set marked places place marked set states region transition system set states transitions mimic pn firing behavior unmarks predecessor places marks successor places transition way possible identify regions places construct pn exactly set labeled firing sequences ts papers cited provide formal framework contribution suffer series problems ffl contribution mainly theoretical aimed obtaining canonical representation pn many places could added without changing behavior net hand strive minimize number places order make final petri net understandable designer ffl address problem merging splitting equivalent labels ie labels model event must split order yield valid petri net ffl limited elementary tss quite stricted handle full class tss means label splitting paperwe present algorithm generating acomplete set minimal regions analogues prime implicants boolean minimization removing redundant regions similar generating prime irredundant cover boolean minimization either generate irredundant nets take minimum among exact minimization places pns heuristically choose minimal placeirredundant net searching minimum one time consuming paper organized follows sections 2 3 formally introduce transition systems petri nets regions section 4 describes synthesis algorithms detail briefly outlines extensions basic method cope broader class specifications section 5 shows experimental results obtained practical application proposed methodology section 6 concludes paper models 21 transition systems transition system ts quadruple 11 finite nonempty set states e set events transition relation sin initial state elements called transitions ts often denoted e reachability relation states transitive closure transition relation possibly empty sequence transitions oe states 0 denoted oe simply also write e oe correspondingly note state reachable furthermore ts must satisfy following four basic axioms a2 multiple arcs pair states a3 every event occurrence 8e a4 every state reachable initial state ts called deterministic state label one state 0 ts called nondeterministic c p2p3 p1p3 p3 b c c b c c b p4 p3 p5 c figure 1 example transition system corresponding pn b labeled rg c ts represented arclabeled directed graph simple example ts without cycles shown figure 1a 22 petri nets petri net 12 quadruple finite set places finite set transitions f flow relation 0 initial marking marking function assigns every place nonnegative number tokens transition 2 enabled marking 1 input places marked enabled transition may fire producing new marking 2 one less token input place one token output place expressing behavior ts figure 1a shown figure 1b sets input output places transition denoted fflt tffl sets input output transitions place p denoted fflp pffl set markings reachable n initial marking 0 called reachability set graph vertices corresponding markings pn arc graph called reachability graph rg labeled pn pn labeling function puts correspondence every transition net called label alphabet two transitions label unique labeling transition net uniquely identified label case use label name transition rg labeled pn arc markings 1 2 labeled label transition fires markings 1 2 rg called labeled rg one easily check labeled rg figure 1c derived pn figure 1b isomorphic ts figure 1a net called safe one token appear place safe nets especially widely used many applications since simple verification algorithms 7 simple semantics net called pure net p 2 f implies p 62 f ie transition following condition net called simple two transitions sets input output places ie 23 equivalence paper presents algorithm transforming tss pns notion equivalence transformation based isomorphism labeled graphs variations isomorphism two tss isomorphic exist two bijections rg labeled pn always interpreted ts therefore equivalence ts corresponding pn viewed isomorphism ts rg corresponding pn often consider isomorphism ts minimized version another ts comparing two tss different event counts splitisomorphism used two tss splitisomorphic another ts ts 1 underlying graphs three tss isomorphic 2 labels arcs ts 1 ts 2 viewed two different enumerations events ts enumeration corresponds assigning instance numbers events example ts three arcs labeled event ts 1 one arcs labeled 1 two others 2 ts 2 three arcs assigned different instance numbers 1 2 procedure assigning instance numbers different occurrences labels ts called splitting three notions equivalenceisomorphism tss isomorphism minimized ts splitisomorphism guarantee two equivalent tss bisimilar stronger condition language equivalence general 9 implies example deadlock liveness properties preserved pn generated ts regions subset states ts 1 62 1 say transition 0 62 1 transition otherwise transition cross 1 particular transition said internal 1 62 1 transition external 1 subset states r region event e one following conditions hold transitions labelled e 1 exit r 2 enter r 3 cross r let us consider ts shown figure 1 set states region since transitions labeled b enter r 3 transitions labeled c exit r 3 hand fs region since transition 1 set another transition also labeled b 4 similar violations region conditions exist two transitions labeled however violations c since transitions labeled c exit set states ts two trivial regions set states empty set always consider nontrivial regions let r r 0 regions ts region r 0 said subregion r iff r 0 ae r region r 0 minimal region iff r 0 subregion region ts 31 properties regions following propositions state important properties regions property 31 r r 0 two different regions r 0 subregion r r gamma r 0 region property 32 set states r region coset r region set states ts property 33 every region represented union disjoint minimal regions property 31 hasbeenmentioned 3 property 32 given 11 property 33 stronger refinement corresponding property 3 shows region viewed linear combination minimal regions proofs given 4 state 2 define set nontrivial regions containing denoted rs region r preregion event e transition labeled e exits r region r postregion event e transition labeled e enters r set preregions postregions e denoted ffi e e ffi respectively definition follows r 2 ffi e transitions labeled e enter r similarly r 2 e ffi transitions labeled e exit r eight nontrivial regions ts figure 1 g regions minimal preregions postregions defined follows g 32 excitation switching regions regions ts related places corresponding pn excitation region 8 event maximal set states transition enabled therefore excitation regions related transitions pn set states 1 called generalized excitation region excitation region event denotedby gera er j maximal maximal connected set states every state 2 1 transition ger union ers ts figure 1a two excitation regions event er 1 er 2 g corresponding ger event g similarly excitation regions define generalized switching regions gsra switching regions sr j sets states reached immediately occurrenceof event ts figure 1a two switching regions event g corresponding gsr event g 33 elementary transition systems 331 axioms ets sin called elementary 11 ets satisfies addition a1 a4 following two axioms regions a5 state separation property a6 forward closure property axiom 5 implies two different states must belong different sets regions axiom 6 implies state included preregions event e e must enabled easy see ts shown figure 1 elementary ts shown figure 2a cyclic elementary ts figure 2b shows nonelementary ts forward closure property violated events b let us consider event preregion region fs g therefore ffi e rs 7 transition labeled 7 b c f e b b b c gera preregiona f b figure 2 examples elementary nonelementary b tss shown 11 ts elementary pn reachability graph isomorphic ts constructed proposition 31 foreach elementaryts exists safe pure simple pn 1 pn transition labeled event ts 2 two transitions labeled event 3 rg pn isomorphic ts procedure given 11 3 synthesize petri net ets follows ffl event transition labeled generated pn ffl minimal region r place p generated ffl place p contains token initial marking 0 iff corresponding region r contains initial state ets sin ffl flow relation follows 2 p ffl iff r preregion 2 fflp iff r postregion pn synthesized regions called saturated net net constructed minimal regions called minimal saturated net nets canonical however even minimal saturated net redundant places still removed still preserving required isomorphism rg etsby analogy logic minimization saturated net like set implicants boolean function minimal saturated net like set prime implicants goal provide method constructing irredundant net minimal regions similar irredundant cover prime implicants another important drawback described procedure axioms 5 6 provide efficient algorithm checking elementarity since require derive regions also check elementarity conditions individual state procedure specifically aimed deriving minimal regions using simplified elementarity checks admit efficient implementation 34 elementary minimal transition systems section show relationship elementar ity ts minimality let us first recall useful definitions two states 0 ts equivalent sequence transitions oe oe 0 oe ts called minimal contains equivalent states say confluence condition holds states 0 state 00 reachable 0 note according definition reachability 00 coincide 0 relation minimality elementarity ts twofold ffl elementary ts minimal pair equivalent states confluence condition hold ffl ts minimal pair equivalent states confluence condition satisfied ts elementary b e c e c e f p6 p7 b c e f b b c e figure 3 minimality elementarity relationship illustrated figure 3 ts figure 3a elementary however minimal since 4 6 obviously confluence condition two pairs states satisfied safe pn rg isomorphic ts shown figure 3b places p 6 p 7 corresponds minimal regions fs 4 g places output transitions corresponding regions serve pre regions events therefore places removed pn without changing behavior rg pn without p 6 p 7 isomorphic ts shown figure 3c minimized version initial figure 3a another ts example given figure 3d ts minimal also elementary since state separation property a6 satisfied equivalent states 1 g note confluence conditions equivalent states sat isfied pn figure 3e contains two places corresponds regions r 1 r 2 two transitions labeled b rg isomorphic minimized version initial nonelementary ts minimization ts figure 3 becomes elementary indicated two examples figure 3 implicit minimization occurs 1 regions serve pre regions removed figure 3ac 2 regions including equivalent states generated figure 3de 35 elementarity conditions section present conditions elementarity allow efficient checking first connect notions preregions postregions excitation switching regions property 34 1 region r preregion event iff 2 region r postregion event iff property allows construct regions serve pre regions starting excitation regions allows efficient bddbased implementation following property helps performing efficient pn synthesis 1 ts elementary following three conditions excitation closure event r2 ffi b event effectiveness event ffi 6 c ts minimal pair equivalent states confluence condition hold 2 ts minimal excitation closure event effectiveness conditions satisfied ts elementary proof given 4 let us consider nonelementary ts figure 2b ts nonelementary excitation closure condition violated b example preregion fs g proper superset era according proposition 32 generated pn rg minimal excitation closure event effectiveness conditions must checked verify elementarity ts event effectiveness condition trivial check major new result yielding new synthesis procedure excitation closure condition 4 petri net synthesis section describes algorithms synthesis proof correctness given 4 41 synthesis algorithms skeleton algorithm synthesis pn given following pseudocode begin repeat generation preregions label splitting split false e 2 e split labels e split true end find irredundant cover map pn input algorithm ts output pn equivalent initial ts function expand states recursively generates minimal regions serve pre regions one event minimal regions called minimal preregions minimal regions preregions needed since pn minimized rg generated see section 34 function find irredundant cover produces irredundant set regions set placeirredundant net generated function discussed section 42 function split labels performs splitting labels minimized version initial ts found non elementary function discussed section 43 b c r3 r4 r5 c c b figure 4 transition system b minimal saturated place irredundant nets preregion events preregion events table 1 minimal preregions transition system depicted figure 4a means handling nonelementarytss basedon using selfloops dummy transitions discussedin section 44 function map pn final step constructing pn set regions described section 33 expand states rr begin r set states expanded collects regions generated r region return since region expanded r would minimal find violating region condition st set states legalize eg expand states r 0 r conditions set states must expanded two directions see 4 nd set states legalize eg expand states r 0 r 42 irredundant regions set regions r called redundant region r 2 r set regions r gamma r still satisfies excitation closure therefore also event effectiveness condition otherwise r called irredundant region said essential cannot removed set regions without violating excitation closure event illustrate irredundant set places calculated means example figure 4 table 1 presents minimal preregions ts preliminary step essential regions calculated region r essential exists state 2 r event e r 2 ffi e 62 gere r 2 r 0 ie r region removes gera c c c c b c c b b figure 5 selection set states force excitation closure b forcing set states region means label splitting intersection preregions state e enabled example event c case r 0 r 1 essential since none removed ffi c without violating excitation closure similarly deduce r 2 r 4 r 8 also essential r 2 r 4 essential r 8 b thus four nonessential regions r 3 r 5 r 6 r 7 next event nonessential preregions e f example minimal covers implicitly generated event e two minimal covers fr g event f also two minimal covers fr g finding minimum cost cover posed finding minimum cost solution boolean equation describing covering conditions unate covering problem reduce complexity problem essential regions included equation corresponding example fol lows cost must assigned region according objective function minimized depends application example want minimize total number places arcs heuristic measure simplicity pn assign place p cost j ffl pj 1 want minimize number places cost place 1 case costr 3 two minimumcost covers exist fr former shown figure 4b redundant places depicted dotted lines another possible solution nonminimum cost 43 label splitting set minimal preregions event calculated gradually expanding gera obtain sets states violate entryexit relationship excitation closure fulfilled see proposition 32 ie r2 ffi r 6 gera events must split make ts elementary situation illustrated figure 5a event two minimal pre regions r 1 r 2 intersection larger gera strategy split events follows expansion gera towards preregions several sets states explored focus attention sets gera r2 ffi r sets states number events violate region conditions calculated finally set least number bad events selected several sets number bad events smallest one selected selected set states forced region done splitting labels events fulfill region conditions example depicted figure 5b strategy splitting ensures new labeling one preregion smaller intersection preregions former labeling next preregions computed excitation closure verified closure test fails procedure executed strategy converges monotonically worse case splits labels state ts trivially becomes region practical ex amples one two iterations usually required converge obviously pn obtained splitting splitisomorphic initial ts 44 modifications basic synthesis method class tss pns handled synthesis procedure extended include nonelementary tss without using label splitting technique one powerful extension nonpure nets concerned allowing selfloop regions involved excitation closure condition region r selfloop region event e preregion gera contained r including place corresponding selfloop region set input output places restrict enabling conditions event unnecessarily yet allows trim intersection preregions given event enabled states included excitation region nonpure nets appear useful practice eg modelling arbitration circuits one event asymmetrically disables another event details extension oth ers inserting dummy events 1 relaxing axiom a2 pn simplicity found 4 basic synthesismethod namely excitation closure customized satisfy requirements classes petri nets useful practice particular produce freechoice uniquechoice pns class nets allowing efficient algorithms verification circuit implementation also 4 applications table 2 describes results application algorithms synthesis petri nets transition systems obtained speedindependent circuits used produce userreadable description functionality circuit form timing diagramlike labeled petri net signal transition graph stg cpu times seconds sun sparc workstation z p f numbers signals states places transitions arcs markings respectively events whose firing producesno visible effect trace bisimulation semantics 9 circuit unsafe 5 22 15 12 34 22 28 11 sen 19 85 44 38 93 85 312 dags55 19 130 43 38 342 130 1219 table 2 synthesis petri nets speedindependent circuits example initial pn final pn cpu allocoutbound 17 clock future 31 28 62 36 intel div3 8 8 intel edge 28 36 72 28 15 isend 56 44 116 53 24 19 105 36 414 lin edac93 14 12 28 masterread 36 26 72 8932 33 26 66 8932 296 percvifc 43 38 96 46 26 21 118 37 339 pulse vme read 41 vme write table 3 petri net minimization table 3 describes results application algorithms minimization given labeled petri net notation used places transitions arcs markings 2 implemented tool called petrify available httpwwwacupcesvlsipetrifypetrifyhtml 51 counterflow pipeline processor stage control circuit application example used method derive pn specification circuit implementation stage control circuit counterflow pipeline processor complete description architecture refer 13 although steps assisted hand net synthesis approach played key methodological role steps shown figure 6 original behavioral description stage control taken ce molnar form ts two transformations performed level 1 reducing model asymmetric form would allow 2 insert single dummy transition denoted ffl legitimacy reduction verified means ts composition latter proved reduced model preserved main functionalities counterflow pipe remained deadlockfree guaranteed propagation instructions results without missing synchronisation stages may meet resulting ts quasielementary sense satisfies extended conditions elementarity subsequent synthesis pn performed using techniques described paper including operating selfloop regions region r2 minimal region selfloop region event pr hand selfloop region r6 event ar 2 number markings may differ different markings original pn correspond equivalent states rg states instruction e f r pr ar ai pi pi ai ar ar pr ai pi e d2 ar prar gi sel aipi ai ai gi execution ai accept instruction pi pass instruction ex execute instr events f pr ai ar pi ar ai pi pr r original model transition system quasielementary pi ar ai pr control exec petri net model circuit implementation figure counterflow pipeline example transition system circuit minimal union minimal regions r2 r4 example illustrates amount search selfloop region significant hence complexity synthesizing nonpure pns much greater pure nets net model stage control circuit events uniquely represented relatively straightforward apply technique 5 systematically adds semaphores conflict places pn level finally implementing semaphores mutual exclusion elements obtain circuit implementation somewhat similar solution recently presentedby ebergen 6 shown figure 6 52 translation highlevel specifications section presents example illustrates method useful pn composition translation highlevel languages petri nets example aimed modeling circuits obtained tangram descriptions csplike language 2 asynchronous circuit compilation figure 7 depicts stg composition two handshake circuits sequencer parallelizer obtained stg handshake circuit synchronization places events labels inserted dashed places arcs synchronization place receives arcs stg modeling circuit produces event output channel generates arcs towards corresponding events input channel composing several stgs internal events removed signals req 2 ack 2 elimination internal events done ts level thus obtaining ts less states finally stg whole circuit derived resynthesis also performed experiment modeling 3token fifo ack2 ack4 ack3 ack3 ack4 ack2 ack2 ack0 ack1 ack1 ack3 ack4 ack0 b c figure 7 handshakecircuits b pn composition c pn elimination internal events synthesis tangram resulted system 20 handshake cir cuits iteratively composing stgs neighbouring handshake circuits eliminating internal events corresponding internal communication channels obtained stg 6 signals 3 channels places 23 transitions 71 arcs 50 markings states 6 conclusions petri nets shown appropriate formalism describe behavior systems concurrency causality conflicts events type systems method presented paper allows transform different models csp ccs fsms pns unique formalism synthesis analysis composition verification tools built synthesizing petri nets statebased models task reverse engineering abstracts temporal dimension flat description sequences events produced system synthesis method discovers actual temporal relations among events symbiosis among notions ets region excitation region method crucial derive efficient algorithms generating ts highlevel description csp may suffer state explosion problem thus making manipulations ts level tedious even impractical reason chosen use symbolic bddbased representation ts even though bdds always guarantee compactness observed regular interleaving events manifested highly concurrent systems wellcaptured symbolic representations work mainly motivated activities carried authors area asynchronous circuits wide applicability method opens new possibilities create framework tools synthesis analysis verification designer freely choose mix different specification formalisms acknowledgements grateful marta maciej koutny directed us towards existing literature regions marco pena performing experiments tangram r polynomial algorithms synthesis bounded nets handshake circuits intermediary communicating processes vlsi synchronic structure transition systems synthesizing petri nets statebased models designing asynchronous circuits behavioural specifications internal conflicts personal communication calculus communication systems petri nets step transition systems elementary transition systems kommunikation mit automaten counterflow pipeline processor architecture tr elementary transition systems concurrent hardware counterflow pipeline processor architecture ctr alex kondratyev michael kishinevsky alexander taubin sergei ten analysis petri nets ordering relations reduced unfoldings formal methods system design v12 n1 p538 jan 1998 jordi cortadella michael kishinevsky alex kondratyev luciano lavagno alex yakovlev methodology tools state encoding asynchronous circuit synthesis proceedings 33rd annual conference design automation p6366 june 0307 1996 las vegas nevada united states pastor j cortadella efficient encoding schemes symbolic analysis petri nets proceedings conference design automation test europe p790795 february 2326 1998 le palais des congrs de paris france alexandre yakovlev designing control logic counterflow pipeline processor using petri nets formal methods system design v12 n1 p3971 jan 1998 michael kishinevsky jordi cortadella alex kondratyev asynchronous interface specification analysis synthesis proceedings 35th annual conference design automation p27 june 1519 1998 san francisco california united states marta pietkiewiczkoutny synthesising elementary net systems inhibitor arcs step transition systems fundamenta informaticae v50 n2 p175203 april 2002