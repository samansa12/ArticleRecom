weak alternating automata weak automata infinite words used specification verification nonterminating programs different types automata induce different levels expressive power succinctness complexity alternating automata existential universal branching modes particularly suitable specification programs weak alternating automata state space partitioned partially ordered sets automaton proceed certain set smaller sets reasoning weak alternating automata easier reasoning alternating automata restricted structure known translations alternating automata weak alternating automata involve determinization therefore involve doubleexponential blowup paper describe quadratic translation circumvents need determinization bchi cobchi alternating automata weak alternating automata beyond independent interest translation gives rise simple complementation algorithm nondeterministic bchi automata b introduction finite automata innite objects rst introduced 60s motivated decision problems mathematics logic buchi mcnaughton rabin developed framework reasoning innite words innite trees buchi 1962 mcnaughton 1966 rabin 1969 framework proved pow erful automata tight relation secondorder monadic logics key solution several fundamental decision problems mathematics logic thomas 1990 today automata innite objects used specication first authors address kupferman school computer science engineering hebrew uni versity jerusalem 91904 israel email ornacshujiacil url httpwwwcshujiacil orna second author address vardi department computer science rice university houston partly supported nsf grants ccr9700061 ccr9988322 grant intel corporation permission make digitalhard copy part material without fee personal classroom use provided copies made distributed prot commercial advantage acm copyrightserver notice title publication date appear notice given copying permission acm inc copy otherwise republish post servers redistribute lists requires prior specic permission andor fee c acm transactions computational logic vol tbd tbd tbd tbd pages 111131 kupferman moshe vardi verication nonterminating programs idea simple program dened respect nite set p propositions programs states associated set propositions hold state programs computations induces innite word alphabet 2 p program induces language innite words alphabet language dened automaton similarly specication pro gram describes allowed computations viewed language innite words 2 p therefore dened automaton automatatheoretic approach verication reduce questions programs specications questions automata specically questions satisability specications correctness programs respect specications reduced questions nonemptiness language containment vardi wolper 1986 kurshan 1994 vardi wolper 1994 automatatheoretic approach separates logical combinatorial aspects reasoning programs translation specications automata handles logic shifts combinatorial diculties automatatheoretic problems automata nite words automata innite words either accept reject input word since run innite word nal state acceptance determined respect set states visited innitely often run many ways classify automaton innite words one type acceptance condition example buchi automata states designated accepting states run accepting visits states accepting set innitely often buchi 1962 dually cobuchi automata run accepting visits states accepting set nitely often general muller automata acceptance condition set sets states run accepting set states visited innitely often member muller 1963 another way classify automaton innite words type branching mode deterministic automaton transition function maps pair state letter single state intuition automaton state q reads letter automaton moves state q accept sux word branching mode existential universal maps q set states existential mode automaton accept sux word one states set universal mode accept sux states set alternating automaton chandra et al 1981 existential universal modes allowed transitions given boolean formulas set states example q means automaton accept sux word either state q 1 states q 2 turns dierent types automata dierent expressive power example unlike automata nite words deterministic nondeterministic existential automata expressive power deterministic buchi automata strictly less expressive nondeterministic buchi automata landweber 1969 exists language l innite words l recognized nondeterministic buchi automaton cannot recognized deterministic buchi automaton also turns types weak alternating automata weak 113 automata may succinct types example though alternating buchi automata expressive nondeterministic buchi automata recognize exactly regular languages alternation makes buchi automata exponentially succinct translating alternating buchi automaton nondeterministic one might involve exponential blowup see drusinsky harel 1994 since combinatorial structure alternating automata rich translating specications alternating automata much simpler translating nondeterministic automata alternating automata enable complete partition logical combinatorial aspects reasoning programs give rise cleaner simpler verication algorithms vardi 1996 ability alternating automata switch existential universal branching modes also makes complementation easy example order complement alternating muller automaton innite words one dualize transition function acceptance condition miyano hayashi 1984 lindsay 1988 contrast complementation challenging problem nondeterministic automata innite words particular complementing nondeterministic buchi automaton involves exponential blowup safra 1988 michel 1988 muller et al 1986 muller et al introduced weak alternating automata weak alternating automaton automatons set states partitioned partially ordered sets set classied accepting rejecting transition function restricted transition automaton either stays set moves set smaller partial order thus run alternating automaton eventually gets trapped set partition acceptance determined according classication set special structure weak alternating automata ected attractive computational properties makes appealing example best known complexity solving membership problem buchi alternating automata quadratic time know solve membership problem weak alternating automata linear time kupferman et al 2000 weak alternating automata special case buchi alternating automata indeed condition getting trapped accepting set replaced condition visiting states accepting sets innitely often direction easy see true fact proven rabin 1970 muller et al 1986 dened trees language l recognized weak alternating automaton l complement recognized buchi nondeterministic automata nevertheless dened words weak alternating automata less expressive buchi alternating automata recognize regular languages prove muller et al 1986 lindsay 1988 suggest linear translation deterministic muller automata weak alternating automata using however constructions muller et al 1986 lindsay 1988 order translate nondeterministic buchi cobuchi automaton weak alternating automaton one choice rst translate deterministic muller automaton determinization involves exponential blowup safra 1988 even worse alternating automaton determinization involves doublyexponential blowup hence translation weak alternating automata blowups avoided 114 orna kupferman moshe vardi paper answer question positively describe simple quadratic translation buchi cobuchi alternating automata weak alternating au tomata beyond independent interest translation gives rise simple complementation algorithm nondeterministic buchi automata closure nondeterministic buchi automata complementation plays crucial role solving decision problems second order logics result many eorts put proving closure developing simple complementation al gorithms buchi 1962 buchi suggested complementation construction indeed solved problem yet involved complicated combinatorial argument doublyexponential blowup state space thus complementing automaton n states resulted automaton 2 2 states sistla et al 1987 sistla et al suggested improved construction 2 2 states still however optimal safra 1988 safra introduced optimal determinization construction also enabled 2 log n complementation construction matching known lower bound michel 1988 another 2 log n construction suggested klarlund klarlund 1991 circumvented need determinization heart many complexity results verication optimal constructions safra 1988 klarlund 1991 complicated particular intricacy algorithms makes implementation dicult know implementation klarlunds algorithm implementation safras algorithm tasiran et al 1995 cope involved structure states complementary automaton lack simple implementation due lack need recall automatatheoretic approach verication check correctness program respect specication checking containment language program language automaton accepts exactly computations satisfy specication order check latter check intersection program automaton complements specication automaton empty due lack simple complementation construction verication tools restrict specication automaton improvise solutions example verication tool cospan kurshan 1994 specication automaton must deterministic easy complement deterministic automata clarke et al 1993 verication tool spin holz mann 1991 user complement automaton thus together program spin gets input nondeterministic buchi automaton called neverclaim accepts exactly computations satisfy specication complementary automaton constructed procedure similar one constructed klarlund 1991 construction involves alternation simpler easily implementable consider nondeterministic buchi automaton b easily complement b regarding universal cobuchi automaton using construction translate complementary automaton alternating automaton w miyano hayashi 1984 weak alternating automata translated nondeterministic buchi automata applying exponential yet simple translation w end nondeterministic buchi automaton n complements b b n states size n 2 log n weak alternating automata weak 115 meeting known lower bound michel 1988 complicated constructions suggested safra 1988 klarlund 1991 2 alternating given alphabet innite word innite sequence letters denote w l sux l l1 l2 w automaton innite words input alphabet q nite set states initial state acceptance condition condition denes subset q q set states move state q reads letter since transition function may specify many possible transitions state letter deterministic every q 2 q 2 jq deterministic automaton run w function r ie run starts initial state every l 0 rl ie run obeys transition function automata nite words acceptance dened according last state visited run words innite thing last state acceptance dened according set inf r states r visits innitely often ie innitely many l 2 q nite guaranteed inf r 6 way refer inf r depends acceptance condition several acceptance conditions studied literature consider two buchi automata q r accepts w inf r 6 cobuchi automata q r accepts w inf r since deterministic may many runs w contrast deterministic automaton single run w two dual ways refer many runs existential automaton simply nondeterministic automaton shall call sequel accepts input word w exists accepting run w universal automaton accepts input word w runs w accepting alternation studied chandra et al 1981 context turing machines brzozowski leiss 1980 chandra et al 1981 miyano hayashi 1984 nite automata particular miyano hayashi 1984 studied alternating automata innite words alternation enables us existential universal branching choices given set x let x set positive boolean formulas x ie boolean formulas built elements x using also allow formulas true false x say satises formula truth assignment assigns true members assigns false members x n satises example sets fq satisfy formula q 1 set fq 1 satisfy formula consider automaton represent q ex ample transition q nondeterministic automaton written q universal transition written kupferman moshe vardi transitions nondeterministic universal automata correspond disjunctions conjunctions respectively transitions alternating automata arbitrary formulas b q instance transition meaning automaton accepts sux w w state q accepts w i1 q 1 q 2 q 3 q 4 transition combines existential universal choices formally alternating automaton innite words tuple automata function run nondeterministic automaton function r q run alternating automaton tree r r q r formally tree nite innite nonempty prexclosed set elements called nodes empty word root every x 2 nodes x c 2 c 2 children x node children leaf sometimes refer length jxj x level tree path tree set 2 every x 2 either x leaf exists unique c 2 x c 2 given nite set labeled tree maps node letter run innite word qlabeled tree ht r ri following hold possibly empty set satises 1 c k x c 2 r rx c q c example q 0 possible runs w root labeled q one node level 1 labeled q 1 q 2 another node level 1 labeled q 3 q 4 note true x need children reason r may leaves also since exists set required false cannot run takes transition run ht r ri accepting innite paths labeled words acceptance condition word w accepted exists accepting run note conjunctions transition function ected branches ht r ri disjunctions ected fact many runs word language denoted la set innite words accepts thus word automaton denes subset denote la complement language set words muller et al 1986 muller et al introduce weak alternating automata waas waa acceptance condition q exists partition q disjoint sets q set q either q case q accepting set q case q rejecting set addition exists partial order collection q every q 2 q occurs q 2 q transitions state q lead states either q lower one follows every innite path run waa ultimately gets trapped within q path satises acceptance condition q accepting set thus view waa acceptance condition weak alternating automata weak 117 buchi automaton acceptance condition cobuchi automaton acceptance condition q n indeed run gets trapped accepting set visits innitely many states true visits nitely many states q n 3 useful observations runs alternating cob uchi consider cobuchi alternating automaton ri accepting run word w two nodes x 1 x 2 r say x 1 x 2 similar jx say run ri memoryless similar nodes x 1 x 2 2 x 1 intuitively similar nodes correspond two copies mission accept sux w jx1 j state rx 1 memoryless run subtrees ht r ri similar roots coincide thus missions fullled way turns consider runs cobuchi automata restrict memoryless runs formally following theorem theorem 31 emerson jutla 1991 cobuchi automaton accepts word w exists memoryless accepting run w note emerson jutla 1991 proves stronger result namely existence memoryless accepting runs parity alternating automata since cobuchi acceptance condition special case parity acceptance condition result cited follows easy see every run ht r ri every set n nodes level contains least two similar nodes therefore memoryless run every level contains n nodes roots dierent subtrees accordingly represent memoryless run ht r ri innite dag directed acyclic qin hq li 2 v exists x 2 r example hq 0i vertex g r q f0g l0 q flg q fl 1g ehq li hq exists thus g r obtained ht r ri merging similar nodes single vertex say vertex hq 0 l 0 successor vertex hq li ehq li hq 0 l 0 say reachable hq li exists sequence hq successive vertices hq li exists 0 finally say vertex hq li vertex q 2 easy see ht r ri accepting paths g r nitely many vertices consider possibly nite dag g g r say vertex hq li endangered g nitely many vertices g reachable hq li say vertex hq ii safe g vertices g reachable hq li vertices note particular safe vertex vertex given memoryless accepting run ht r ri dene innite sequence g 0 dags inductively follows kupferman moshe vardi li j hq li endangered g 2i g li j hq li safe g 2i1 g lemma 32 every 0 exists l l l n vertices form hq li g 2i proof prove lemma induction case denition g 0 indeed g r levels l 0 n vertices form hq li assume lemmas requirement holds prove 1 consider dag g 2i distinguish two cases first g 2i nite g 2i1 empty g 2i2 empty well done otherwise claim must safe vertex g 2i1 see assume way contradiction g 2i innite vertex g 2i1 safe since g 2i innite g 2i1 also innite also vertex g 2i1 least one successor consider vertex hq 0 l 0 g 2i1 since assumption safe exists vertex hq 0 reachable hq successor hq 0 assumption hq 1 l 1 also safe hence exists vertex reachable hq 1 successor hq 0 assumption also safe thus continue similarly construct innite sequence vertices vertex hq 0 vertex reachable hq j l j hq j1 l j1 successor hq 0 sequence however corresponds path ht r ri visits innitely often contradicting assumption ht r ri accepting run let hq li safe vertex g 2i1 claim taking l lemmas requirement claim j l vertices form hq ji g 2i2 since hq li g 2i1 endangered g 2i thus innitely many vertices g 2i reachable hq li hence konigs lemma g 2i contains innite path hq li k 1 vertex hq k l ki innitely many vertices reachable g 2i thus endangered g 2i therefore path exists also g 2i1 recall hq li safe hence reachable hq li vertices ki path safe well therefore g 2i2 follows j l number vertices form hq ji g 2i2 strictly smaller number g 2i hence induction hypothesis done lemma 32 g 2n nite hence following corollary corollary 33 g 2n1 empty vertex hq li g r unique index 1 hq li either endangered g 2i safe g 2i1 given vertex hq li dene rank hq li denoted rankq l follows 2i hq li endangered g 2i li safe g 2i1 denote set f0 denote set odd members k corollary 33 rank every vertex g r 2n weak alternating automata weak 119 recall ht r ri accepting paths g r visit nitely many vertices intuitively rankq l hints dicult get convinced paths g r visit vertex hq li visit nitely many vertices easiest get convinced vertices endangered g 0 accordingly get minimal rank 0 come vertices safe graph g 1 obtained g 0 throwing away vertices rank 0 vertices get rank 1 process repeats respect graph g 2 obtained g 1 throwing away vertices rank 1 start endangered vertices g 2 get rank 2 continue safe vertices g 3 get rank 3 process repeats vertices get rank note vertex gets odd rank lemmas make intuition formal lemma 34 every vertex hq li g r rank 2 2n hq li 62 g proof prove lemma induction since g case immediate induction step distinguish two cases case 1 even consider vertex hq li 62 g i1 hq li 62 g lemmas requirement follows induction hypothesis hq li 2 g hq li safe g accordingly rankq meeting lemmas requirement case consider vertex hq li 62 g i1 hq li 62 g lemmas requirement follows induction hypothesis hq li 2 g hq li endangered g accordingly rankq meeting lemmas requirement lemma 35 every two vertices hq li hq reachable hq li rankq proof assume rankq distinguish two cases even case hq li endangered g either hq 0 l 0 g case lemma 34 rank 1 hq 0 l 0 g case reachable hq li must endangered g rank odd case hq li safe g either hq 0 l 0 g case lemma 34 rank 1 hq 0 l 0 g case reachable hq li must safe g rank lemma 36 every innite path g r exists vertex hq li odd rank vertices path reachable hq li proof lemma 35 every innite path g r exists vertex hq li vertices path reachable hq li need prove rank hq li odd assume way contradiction rank hq li even thus hq li endangered g rank vertices path reachable hq li also lemma 34 belong g since path innite innitely many vertices contradicting fact hq li endangered g seen cobuchi alternating automaton accepting run w also structured accepting run w next section kupferman moshe vardi employ structured run order translate buchi cobuchi alternating automata weak alternating automata loding thomas 2000 loding thomas use structured runs order priori dene runs weak alternating automata dags bounded width enables prove appropriate determinacy result directly piterman 2000 piterman uses structured runs order extend linear temporal logic alternating word automata ranks dened section closely related progressmeasures introduced klarlund 1990 properties studied section 3 progress measures generic concept quantifying step program contributes bringing computation closer specication progress measures used klarlund 1991 reasoning automata innite words ranks dened also measure progress indicate far automaton satisfying cobuchi acceptance condition use ranks consider unlike klarlund 1991 alternating automata consequently need follow subset construction consider several ranks simultaneously thus much complication klarlund 1991 handled rich structure automata section 5 get back point see alternation removed two approaches essentially coincide 4 b uchi cob uchi weak alternating section present translation buchi cobuchi alternating automata weak alternating automata rst describe quadratic construction suggest preprocessing reduces blowup average case 41 construction theorem 41 let alternating cobuchi automaton weak alternating automaton 0 number states 0 quadratic proof let intuitively automaton state hq ii reads letter l lth letter input guesses memoryless accepting run w rank hq li exception initial state explained q paired 2n upper bound rank hq 0i means function release given formula q rank 2 2n formula release obtained replacing atom q disjunction example weak alternating automata weak 121 state hq ii 2 q 0 2 follows even false q 2 odd current guessed rank employing release run move successors rank smaller however q current guessed rank odd denition ranks current guessed rank wrong run rejecting innitely many guessed ranks along path odd rst show 0 weak dene partition states 0 order partition weakness conditions hold rank induces set q partition thus two states hq ii set dene order q easy see weakness conditions hold every state hq ii 2 q 0 states appearing 0 hq ii belongs sets q every set contained disjoint denition 0 follows copies 0 allowed get trapped sets odd ranks allowed get trapped sets even ranks prove correctness construction rst prove la consider word w accepted 0 let ht r r 0 accepting run 0 w consider qlabeled tree ht r ri x ri projects labels ht r r 0 q element easy see ht r ri run w indeed transitions 0 annotate transitions ranks show ht r ri accepting run since denition 0 innite path ht r r 0 gets trapped set q fig odd denition 0 accepting run visit state hq ii odd q 2 hence innite path actually gets trapped subset q n fig q fig consequently ht r ri paths visits states nitely often done left prove la consider word w accepted let ri accepting run w consider q 0 labeled tree ht r r 0 rank hrx jxji g r claim ht r ri accepting run 0 rst prove run since q 0 2ni root tree ht r r 0 labeled legally consider nodes set labels successors ht r ri 2n maximal rank vertex get successor c r 2n therefore set hence rst level ht r r 0 also labeled legally levels consider node x 2 r x 6 rankrx set labels xs successors ht r ri lemma 35 successor x c x r rankrx c jx cj also definition ranks cannot rx 2 odd therefore set hence tree ht r r 0 run 0 w finally lemma 36 innite 122 orna kupferman moshe vardi path ht r r 0 gets trapped set odd index thus ht r r 0 accepting remark 42 explained automaton 0 state hq ii reads lth letter input corresponds guess memoryless accepting run w rank hq li accordingly function release transition function 0 based enables transition guessed rank rank smaller result number states 0 2 transition 0 hq ii may n times longer transition leading 0 2 times larger nevertheless since subformula formula release blowup described present maintain 0 dag subformulas shared several transitions duplicated another way keep 0 times larger redene release replace atom q disjunction q q 1 q 2 thus instead transition rank smaller transition enabled ranks 1 2 automaton 0 state hq ii reads lth letter input corresponds guess memoryless accepting run w rank hq li since simulate one big decrease guessed rank several small decreases particular transition enables us jump odd ranks correctness proof given easily adjusted new denition release discussed muller schupp 1987 one complement alternating automaton dualizing transition function acceptance condition formally given transition function let denote dual function every q q obtained switching switching true false example dual acceptance condition condition accepts exactly words q accepted particular following theorem 43 muller schupp 1987 alternating buchi automaton alternating cobuchi automaton ises l complementation construction theorem 43 conceptually sim ple also involves blowup addition complementing waa sacrice weakness hence theorems 41 43 imply following theorem theorem 44 let alternating buchi automaton weak alternating automaton 0 number states 0 quadratic section 5 use translation described theorem 41 order obtain simple complementation construction nondeterministic buchi automata shall note known lower bound complexity latter implies quadratic blowup involved moving cobuchi alternating automata waa cannot reduced linear one weak alternating automata weak 123 42 improving construction drawback construction never performs better worstcase complexity indeed quadratic blowup introduced translation 0 regardless structure would occur even say weak automaton order circumvent unnecessary blow suggest rst calculate minimal rank required formally dened construct 0 respect rank discussion assumes cobuchi automaton yet applies also dual case buchi automaton consider sequence dags g every g associate maximal width namely maximal number vertices form hq li xed l g following lemma 32 maximal width g 2i n practice transition g 2i g 2i2 often reduces width one vertex say required exists word w 2 la every memoryless run ht r ri w sequence g dags g width g 2j bigger 0 note implies g 2j1 empty let every j 2 n dene weak alternating automaton 0 j follows intuitively 0 restricts runs 0 guess ranks smaller 2j formally state space 0 j q 2j initial state hq 2ji transition function acceptance condition restrictions 0 0 states q 2j easy see every j language 0 j contained language 0 hand language 0 contains words empty follows minimal rank required minimal j 2 n la theorem 45 let alternating cobuchi automaton problem nding minimal rank required pspacecomplete proof recall minimal rank required minimal j 2 n la languagecontainment problem alternating cobuchi automata pspace nd minimal rank polynomial space successive languagecontainment checks lower bound reduction emptiness problem alternating cobuchi automata whose pspacehardness follows results chandra et al 1981 given alternating cobuchi automaton prove empty minimal rank required 0 technical convenience assume formula range tautology since replace transition tautology transition accepting sink emptiness problem clearly pspacehard already automata satisfying assumption assume rst empty la n particular direction note set states 0 0 q f0g transitions coincide also since 0 even accepting set 0 0 empty hence formula 0 tautology 0 accepts word accordingly empty since 2 2n automaton 0 minimal rank required equivalent hence following theorem 124 orna kupferman moshe vardi theorem 46 let alternating cobuchi automaton n states let j minimal rank required weak alternating automaton 0 number states 0 2nj note problem nding minimal rank required requires space polynomial automaton typically small bottleneck computation usually application 0 eg taking product system large state space thus nding minimal rank j required using 0 j instead 0 may great practical importance 5 complementing nondeterministic b uchi section apply results order complement nondeterministic buchi automata rst describe section 51 construction uses alternating automata describe section 52 construction uses analysis section 3 without explicitly using alternating automata 51 complementation via alternating automata unlike case alternating automata complementation nondeterministic automata complicated problem following theorem 43 one needs order complement nondeterministic buchi automaton translation universal cobuchi automata nondeterministic buchi automata miyano hayashi 1984 miyano hayashi suggest translation alternating buchi automata nondeterministic buchi automata present simplied version translation theorem 51 theorem 51 miyano hayashi 1984 let alternating buchi au tomaton nondeterministic buchi automaton 0 exponentially many states proof automaton 0 guesses run given point run 0 keeps memory whole level run tree reads next input letter guesses next level run tree order make sure every innite path visits states innitely often 0 keeps track states owe visit let 6 q2s q2o q2s translation theorem 51 however handle alternating particular universal cobuchi automata one gets dualizing nondeterministic buchi automaton construction theorem 41 weak alternating automata weak 125 becomes essential thus given nondeterministic buchi automaton b suggest following complementation construction b 1 following theorem 43 construct b dual cobuchi universal automaton b automaton 2 following theorem 41 construct equivalent weak alternating automaton w automaton w satises 3 following theorem 51 construct w equivalent nondeterministic buchi automaton n automaton n satises ln b n states b n states well w 2 states n states michel 1988 safra 1988 however optimal complementation construction nondeterministic buchi automata results automaton n log n states describe get using theorem 41 optimal automaton n let us note scheme implies translation described theorem 41 cannot improved linear translation indeed able construct b equivalent waa w states also able construct n 2 states contradicting 2 log n lower bound order get n 2 log n states exploit special structure w follows consider state hs oi n sets subset q 2n say p q 2n consistent every two states hq ii hq claim following claim 1 restricting states n pairs hs oi consistent subset q 2n allowable resulting n still complements b 2 2 log n consistent subsets q 2n two claims always subset easy restrict state space n 2 log n states order prove claim 1 recall automaton w visiting state hq ii reading l letters input word w corresponds guess rank hq li accepting memoryless run w seen accepting memoryless run ht r ri b w run w follows ranks g r accepting since every vertex g r unique rank copies w created level l accepting run consistent sense set states visited copies w level l run consistent n states correspond copies w read prex w hence state hs oi inconsistent corresponds level l run w whose copies inconsistent hence automaton n ignore states hs oi inconsistent order prove claim 2 observe characterize consistent set projection pairs q augmented assignment f 2 n projections n log n assignments done composing three constructions straightforward dene automaton n directly means bs components given nondeterministic buchi automaton n set p 2 2 q2n say p possible exists pair hq ii p odd q 2 two sets p p 0 2 q2n letter 2 say 126 orna kupferman moshe vardi pair hq p 0 automaton possible consistent g state hs oi 2 q 0 letter 2 dene 0 6 0 covers ho 0 possible consistent g 0 possible consistent g possible consistentg discussed section 42 advise construct automaton w according minimal rank j required b state n corresponds consistent set augmented assignment f accordingly automaton n 2 onj log n states 52 complementation without alternating automata section give alternative description complementation construc tion independent alternating automata ideas behind construction used section 4 transformation alternating cobuchi automata weak alternating automata repeat ideas ben et readers whod like see complementation construction go alternating automata 2 construction follows essentially coincides one described klarlund 1991 nondeterministic buchi automaton let word dene innite dag g embodies possible runs w formally union g q q l l0 q l flgq l1 fl1g ehq li hq refer g run dag w say vertex hq successor vertex hq li ehq li hq say reachable li exists sequence hq successive vertices hq li finally say vertex hq li vertex q 2 easy see accepts w g path innitely many vertices indeed path corresponds accepting run w found easier teach direct construction see httpwwwcsriceeduvardiavhtml weak alternating automata weak 127 ranking g function satises following two conditions 1 vertices hq li 2 v fhq li odd q 62 2 edges hhq li hq li thus ranking associates vertex g rank 2n ranks along paths decreased monotonically vertices get even ranks note path g eventually gets trapped rank say ranking f odd ranking paths g eventually get trapped odd rank formally f odd paths hq g j 0 fhq j ji odd 1 fhq ji lemma 52 rejects w odd ranking g proof rst claim odd ranking g rejects w see recall odd ranking every path g eventually gets trapped odd rank hence vertices get even ranks follows paths g thus possible runs w visit nitely often assume rejects w describe odd ranking g section 3 say vertex hq li endangered possibly nite dag g 0 g nitely many vertices g 0 reachable hq li vertex hq li safe vertices g 0 reachable hq li vertices note particular safe vertex vertex dene innite sequence dags inductively follows g li j hq li endangered g 2i g li j hq li safe g 2i1 g consider function 2i hq li endangered g 2i li safe g 2i1 recall rejects w thus path g nitely many vertices therefore arguments used proof lemma 32 used order show g 2n nite g 2n1 empty implying f maps vertices v 2n claim f odd ranking first since safe vertex cannot vertex fhq li odd safe hq li rst condition f ranking holds second lemma 35 every two vertices hq li hq reachable hq li li particular holds successor hq li hence second condition ranking holds finally lemma 36 every innite path g exists vertex hq li odd rank vertices path reachable hq li fhq li hence f odd ranking lemma 52 automaton 0 complements proceed input word w guessing odd ranking run dag w dene automaton 0 formally rst need denitions notations 128 orna kupferman moshe vardi level ranking w function gq odd q 62 let r set level rankings two level rankings g g 0 say covers g q q 0 q gq 0 q 0 2 q dene q thus odd ranking 0 guesses maps root hq 0i run dag 2n state hg p covers g covers thus 0 reads lth letter input l 1 guesses level ranking level l run dag level ranking cover level ranking level l 1 addition p component 0 keeps track states whose corresponding vertices dag even ranks paths traverse vertices eventually reach vertex odd rank paths dag visited vertex odd rank set p becomes empty initiated new obligations visits odd ranks according current level ranking acceptance condition r fg checks innitely many levels obligations fullled note automaton 0 equivalent one described section 5 indeed state hg p 2 r 2 q 0 corresponds state hs oi 2 g clearly possible consistent similarly since sets state space 0 section 5 possible consistent state hs oi induces level ranking thus corresponds state 6 discussion described quadratic translation buchi cobuchi alternating automata weak alternating automata showed translation yields simple complementation algorithm nondeterministic buchi automata another application translation solution nonemptiness problem shown kupferman et al 2000 nonemptiness problem nondeterministic tree automata nonemptiness problem alternating word automata singleton alphabet equivalent complexities coincide refer problems nonemptiness problem recall nonemptiness problem weak automata solved linear time kupferman et al 2000 hand best known upper bound nonemptiness problem buchi cobuchi automata quadratic time using translation one solve nonemptiness problem buchi cobuchi automaton rst translating weak alternating automata weak 129 weak automaton 0 size 0 onj j minimal rank required yielding nonemptiness algorithm complexity kupferman vardi 1998b extend ideas paper describe ecient translation stronger types alternating automata weak alternating automata enables us improve known upper bounds nonemptiness problem given alternating parity automaton mostowski 1984 emerson jutla 1991 n states k sets construct equivalent weak alternating automaton k states given alternating rabin automaton rabin 1969 n states k pairs construct equivalent weak alternating automaton 2k1 k states constructions yield k 2k1 k upper bounds nonemptiness problem parity rabin automata respectively matching known bound parity automata emerson et al 1993 improving known onk 3k bound rabin automata emerson jutla 1988 pnueli rosner 1989 recall weak alternating word automata less expressive buchi alternating word automata weak alternating tree automata strictly less expressive buchi alternating tree automata precisely dened trees language l recognized weak alternating automaton l complement recognized buchi nondeterministic automata result follows expressiveness results second order logic rabin 1970 equivalence weak alternating tree automata weak secondorder logic rabin 1970 kupferman vardi 1999 extend ideas paper handle tree automata given two nondeterministic buchi tree automata u u 0 recognize language complement construct weak alternating tree automaton equivalent u number states quadratic number states u u 0 precisely u u 0 n states respectively automaton nm 2 states known linear translation weak alternating tree automata formulas alternationfree fragment calculus kupferman vardi 1998a implies quadratic translation buchi automata alternationfree calculus extending scope ecient symbolic model checking highly expressive specication formalisms acknowledgment thank nils klarlund clarifying relation klarlund 1991 work wolfgang thomas helpful discussions r finite automata sequential networks power bounded concurrency finite automata journal acm complexity tree automata logics programs modelchecking fragments calculus design validation computer protocols progress measures progress measures complementation weak alternating automata tree automata emptiness weakness selfcomplementation automatatheoretic approach branchingtime model checking computer aided veri decision problems alternating testing generating complementation dicult automata nite words regular expressions alternating automata alternating automata extending temporal logic synthesis reactive module decidability second order theories automata weakly de complexity language containment using nondeterministic omegaautomata automata automatatheoretic approach linear temporal logic automatatheoretic approach automatic program veri cation reasoning received june tr alternation myampersandohgrtype turing acceptors alternating automata weak monadic theory tree complexity complementation problem bumyampersandumlchi automata applications temporal logic alternating automata infinite trees synthesis reactive module design validation computer protocols automata infinite objects progress measures complementation myampersandohgrautomata applications temporal logic tree automata mucalculus determinacy unified approach showing language inclusion equivalence various types myampersandohgrautomata power bounded concurrency reasoning infinite computations computeraided verification coordinating processes automatatheoretic approach linear temporal logic weak alternating automata tree automata emptiness alternation automatatheoretic approach branchingtime model checking language containment nondeterministic omegaautomata alternating automata logics infinite words modelchecking fragments myampersand181calculus freedom weakness determinism progress measures finite arguments infinite computations ctr fellah noureddine succinctness properties dtafa proceedings 5th wseas international conference software engineering parallel distributed systems p97103 february 1517 2006 madrid spain orna kupferman moshe vardi complementation certification theoretical computer science v345 n1 p83100 21 november 2005 orna kupferman moshe vardi linear time branching time acm transactions computational logic tocl v6 n2 p273294 april 2005 erich grdel wolfgang thomas thomas wilke literature automata logics infinite games guide current research springerverlag new york inc new york ny 2002