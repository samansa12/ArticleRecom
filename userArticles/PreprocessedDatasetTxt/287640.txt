combined unifrontalmultifrontal method unsymmetric sparse matrices discuss organization frontal matrices multifrontal methods solution large sparse sets unsymmetric linear equations multifrontal method work frontal matrix suspended frontal matrix stored later reuse new frontal matrix generated thus several frontal matrices stored factorization one assembled summed creating new frontal matrix although means arbitrary sparsity patterns handled efficiently extra work required sum frontal matrices together costly indirect addressing requred unifrontal method avoids extra work factorizing matrix single frontal matrix rows columns added frontal matrix pivot rows columns removed data movement simpler higher fillin result matrix cannot permuted variableband form small profile consider combined unifrontalmultifrontal algorithm enable general fillin reduction orderings applied without data movement previous multifrontal approaches discuss technique context code designed solution sparse systems unsymmetric pattern b introduction consider direct solution sets linear equations coefficient matrix sparse unsymmetric general nonzero pattern direct approach permutation matrix factorized lu factors permutation matrices chosen preserve sparsity maintain numerical accuracy many recent algorithms software direct solution sparse systems based multifrontal approach 17 2 10 27 paper examine frontal matrix strategy used within multifrontal approach frontal multifrontal methods compute lu factors using data structures permit regular access memory use dense matrix kernels innermost loops supercomputers highperformance workstations lead significant increase performance methods irregular memory access use dense matrix kernels discuss frontal methods section 2 multifrontal techniques section 3 discussing combination two methods section 4 consider influence principle parameter approach section 5 performance computer information science engineering department university florida gainesville florida usa 904 3921481 email daviscisufledu technical reports matrices available via world wide web httpwwwcisufledudavis anonymous ftp ftpcisufleducistechreports rutherford appleton laboratory chilton didcot oxon 0x11 0qx england european center research advanced training scientific computation cerfacs toulouse france email isdletterboxrlacuk technical reports information hsl matrices available via world wide web httpwwwcisrlacukstructarcdnumhtml anonymous ftp seamusccrlacukpub davis duff l l l l l l l fig 21 frontal method example new approach section 6 concluding remarks information availability codes section 7 2 frontal methods frontal scheme 15 26 31 32 factorization proceeds sequence partial factorizations eliminations full submatrices called frontal matrices although frontal schemes originally designed solution finite element problems 26 used assembled systems 15 version study paper general systems frontal matrices written rows fully summed contributions come rows 21 first two block columns fully summed means pivots chosen anywhere fully summed block comprising first two block columns within columns numerical pivoting arbitrary row interchanges accommodated since rows frontal matrix fully summed assume without loss generality pivots chosen square matrix f 11 21 f 11 factorized multipliers stored f 21 schur complement using full matrix kernels submatrix consisting rows columns frontal matrix pivots yet selected called contribution block next stage entries original matrix assembled schur complement form another frontal matrix overhead low since equation assembled never assembly two frontal matrices example shown figure 21 two pivot steps already performed 5by7 frontal matrix computing first two rows columns u l respectively nonzero entries l u shown lower case row 6 assembled current 4by7 frontal matrix shown solid box columns 3 4 fullysummed eliminated step rows 7 8 must assembled columns 5 6 eliminated dashed box 4by6 frontal matrix containing rows 5 8 columns 5 6 7 8 9 12 active submatrix frontal matrices course stored columns combined unifrontalmultifrontal method 3 packed together zero columns held frontal matrix delineated dashed box dotted box shows state frontal matrix next five pivots eliminated factorize 12by12 sparse matrix figure 21 working array size 5by7 required hold frontal matrix note figure 21 columns pivotal order one important advantage method frontal matrix need reside memory entries read sequentially disk frontal matrix one row time entries l u written sequentially disk order computed method works well matrices small profile profile matrix measure close nonzero entries diagonal given expression ji 60 assumed diagonal nonzero terms summation non negative numerical pivoting required fillin increase profile u profile reduce profile frontal method typically preceded ordering method reverse cuthillmckee rcm 5 7 29 typically faster sparsitypreserving orderings required general technique like multifrontal method nested dissection 24 minimum degree 1 25 degree update phase typically costly part minimum degree algorithm required rcm algorithm however matrices large profile frontal matrix large unacceptable level fillin occur 3 multifrontal methods multifrontal scheme symmetric matrix 2 8 9 10 17 18 28 normal use ordering minimum degree reduce fillin ordering tends reduce fillin much profile reduction orderings ordering combined symbolic analysis generate assembly computational tree node represents assembly elimination operations frontal matrix edge transfer data child parent node using tree drive numerical factorization assembly eliminations node proceed soon child nodes completed giving added flexibility issues exploitation parallelism frontal scheme complete frontal matrix 21 cannot normally factorized steps gaussian elimination possible remaining reduced matrix schur complement needs summed assembled data parent node unsymmetricpattern multifrontal method tree replaced directed acyclic graph dag 9 contribution block may assembled one subsequent frontal matrix 4 combining two methods let us consider approach combines best features two methods assume chosen pivot determined frontal matrix normal multifrontal method stage normal multifrontal method select many pivots fully summed part frontal matrix perform eliminations corresponding pivots store contributions factors store remaining frontal matrix later assembly parent node assembly tree strategy use 4 davis duff combined method forming frontal matrix hold submatrix larger working array allow pivots chosen anywhere within frontal matrix potential pivot lies nonfully summed parts frontal matrix necessary sum row column could used pivot possible long fully summed row column accommodated within larger working array way avoid data movement assemblies multifrontal method although motivation different idea continuing frontal matrix steps moving another frontal matrix similar recent work implementing frontal schemes within domain decomposition environment example 23 several fronts used within unifrontal context however case 23 ordering done priori attempt made use minimum degree ordering another case one continues frontal matrix several assemblies relaxed supernode amalgamation used 17 however technique delays selection pivots normally causes fillin operations technique indeed use combined unifrontalmultifrontal approach preclude implementing relaxed supernode amalgamation well comparison unifrontal method pivoting determined entirely order assemblies combined method requires selection pivots start new frontal matrix implies either priori symbolic ordering pivot search numerical factorization pivot search heuristic requires degrees rows columns thus degree update phase cost degree update clearly penalty pay avoid poor fillin properties conventional unifrontal orderings describe new frontal matrix strategy applied umfpack version 11 8 10 order obtain new combined method however new frontal strategy applied multifrontal algorithm umfpack use actual degrees keeps track upper bounds degree row column symmetric analogue approximate degree update umfpack incorporated approximate minimum degree algorithm amd discussed 1 accuracy degree bounds demonstrated new algorithm consists several major steps comprises several pivot selection elimination operations start major step choose pivot using degree upper bounds numerical threshold test define working array used pivoting elimination operations long performed within longer possible working array stored another major step commenced start major step new algorithm selects default columns minimum upper bound degree computes patterns true degrees pivot row selected basis upper bound row degree rows nonzero entries selected columns suppose pivot row column degrees r c respectively kbyl working array allocated typically value 2 3 fixed entire factorization active frontal matrix cbyr stored kbyl working array pivot row column fully assembled working array define submatrix active frontal matrix approximate degree update phase computes bounds degrees rows columns active frontal matrix assembles previous contribution blocks active frontal matrix row previous contribution block assembled active frontal matrix combined unifrontalmultifrontal method 5 1 row index nonzero pattern current pivot column 2 column indices remaining entries row present nonzero pattern current pivot row columns previous contribution blocks assembled analogous manner major step continues sequence minor steps another pivot sought minor steps repeated factorization longer continue within current working array point new major step started pivot chosen minor step rows columns fully assembled working array redefine active frontal matrix approximate degree update phase computes bounds rows columns active frontal matrix assembles previous contribution blocks active frontal matrix corresponding row column u l computed updates pivot necessarily performed immediately efficient use level 3 blas better accumulate updates typically 16 32 possible perform time find pivot minor step single candidate column contribution block first selected choosing one least value upper bound column degree pending updates applied column column assembled separate work vector pivot row selected basis upper bound row degrees numerical threshold test suppose candidate pivot row column degrees r 0 c 0 respectively three conditions apply 1 r 0 l c 0 k factorization longer continue within active frontal matrix pending updates applied lu factors stored active contribution block saved later assembly subsequent frontal matrix major step complete 2 r candidate pivot fit active frontal matrix without removing p pivots already stored factorization continues within active frontal matrix commencing another minor step 3 otherwise l candidate pivot fit previous p pivots shifted current frontal matrix pending updates applied lu factors corresponding pivot rows columns removed front stored active contribution block left place set p 1 factorization continues within active frontal matrix commencing another minor step know previous multifrontal method considers case 3 particular umfpack version 11 case 1 occur frontal methods given working array large enough hold largest frontal matrix unless numerical pivoting causes frontal matrix grow unexpectedly taking simultaneous advantage cases 1 3 significantly reduce memory requirements number assembly operations still allowing use orderings reduce fillin figure 41 illustrates working array used umfpack version 11 combined method matrices l 1 l 2 u 1 u 2 figure columns rows lu factors corresponding pivots eliminated within frontal matrix matrix contribution block matrix u 2 u 2 rows reverse order columns reverse order arrows denote matrices grow new pivots added pivots removed working array figure 41b case 4 contribution block 6 davis duff umfpack working array b combined method working array empty empty u u ld u 121fig 41 data structures active frontal matrix table test matrices name n jaj sym discipline comments gre 1107 1107 5664 0000 discrete simul computer system gemat11 4929 33185 0001 electric power linear programming basis migration lns 3937 3937 25407 0850 fluid flow linearized navierstokes shyy161 76480 329762 0726 fluid flow viscous fullycoupled navierstokes hydr1 5308 23752 0004 chemical eng dynamic simulation rdist1 4134 94408 0059 chemical eng reactive distillation lhr04 4101 82682 0015 chemical eng light hydrocarbon recovery chemical eng light hydrocarbon recovery need repositioned similar data organization employed ma42 22 5 numerical experiments discuss experiments selection value g section compare performance code sparse matrix codes next section show table 51 test matrices use experiments section next table lists name order number entries jaj symmetry discipline matrix comes additional comments symmetry correctly structural symmetry number matched offdiagonal entries total number offdiagonal entries entry ij j 6 matched ji also entry performed experiments effect value g sun sparcstation 20 model 41 using fortran compiler f77 version 14 o4 libmil options blas 11 show results table 52 table lists matrix name growth factor g number frontal matrices major steps numerical factorization time seconds total time seconds number nonzeros lu factors memory used floatingpoint operation count number frontal matrices highest decreases g increases although effect local decrease may monotonic although fillin operation count typically lowest minimum amount memory allocated frontal matrix 1 factorization time often high additional data movement required assemble contribution blocks fact dense matrix kernels efficient larger frontal matrices results show strategy allocating space necessary frontal matrix choosing pivots initial fully summed combined unifrontalmultifrontal method 7 table effect g performance combined method matrix g fronts factor total jl memory op count gre 1107 10 926 051 089 0048 0160 26 20 406 043 074 0079 0196 67 25 323 070 101 0100 0224 90 70 122 075 085 0121 0235 95 20 988 037 070 0067 0287 08 25 873 039 069 0077 0299 10 30 776 033 066 0087 0312 13 50 586 041 070 0119 0353 20 70 538 041 077 0148 0381 28 20 2324 141 379 0122 0959 72 25 2326 137 396 0122 0883 72 30 2322 141 397 0123 0886 81 70 2280 282 587 0153 0852 160 lns 3937 10 3208 1282 1716 0474 1161 955 20 2011 568 902 0494 1170 841 25 30 1717 701 929 0551 1425 900 50 1446 626 930 0591 1750 964 70 1454 1176 1514 0697 2005 1341 20 3947 052 157 0112 0384 27 25 3726 067 146 0122 0398 33 20 306 112 185 0278 0668 106 25 316 121 185 0304 0694 115 30 295 123 169 0333 0702 104 50 160 215 221 0493 0890 146 70 160 317 204 0620 1038 147 20 2223 190 403 0313 0824 164 25 2185 309 512 0457 1051 324 50 2153 251 410 0444 0995 264 70 2180 370 455 0497 1195 289 block give substantial gains execution time sometimes small penalty storage although occasionally storage less well 6 performance section compare performance combined unifrontalmultifrontal method ma38 unsymmetricpattern multifrontal 8 davis duff method umfpack version 11 8 10 general sparse matrix factorization algorithm based frontal matrices ma48 19 20 frontal method ma42 15 22 symmetricpattern multifrontal method mups 2 methods factorize general unsymmetric matrices use dense matrix kernels extent 12 tested method single processor cray c98 although mups parallel code version 6041 fortran compiler cf77 used method except ma42 discuss later given 95 mw memory factorize matrices listed table 51 method set input parameters control behavior used recommended defaults exceptions indicate default three five methods ma38 umfpack v11 ma48 preorder matrix block triangular form always preceded finding maximum transversal 14 factorize block diagonal 16 reduce work unsymmetric matrices perform preordering since ma42 mups provide options one matrix lhr71 illconditioned required scaling prior factorization scale factors computed harwell subroutine library routine mc19a 6 row subsequently divided maximum absolute value row column depending method implements threshold partial pivoting scaling performed matrices default mups preorders matrix maximize modulus smallest entry diagonal using maximum transversal algorithm followed minimum degree ordering nonzero pattern ma42 first preordered matrix reduce profile using version sloans algorithm 30 21 ma42 able operate incore outof core using direct access files finiteelement entry option primarily designed used equation entry mode matrices although matrices obtained finiteelement calculations tested ma42 incore outofcore cpu time outofcore factorization slightly higher incore factorization memory usage much less thus report outofcore results note cpu time include additional system io device time required read write direct access files reliable way measure dedicated system cpubound multiuser system time spent waiting io would little effect total system throughput symbolic analysis phase ma42 determines minimum front size kbyl assumes increase due numerical pivoting minimum sizes integer real buffers total size b say gave numerical factorization phase working array size 2kby2l buffer size 2b allow numerical pivoting tables show much space actually used disk space taken ma42 included memory usage results shown table 61 matrix tables list numerical factorization time total factorization time number nonzeros lu millions amount memory used millions words floatingpoint operation count millions operations method total time includes preordering symbolic analysis factorization numerical factorization time compute scale factors lhr71 matrix included since used scaling algorithm methods matrix lowest time memory usage operation count shown bold compared solution vectors x method found combined unifrontalmultifrontal method 9 five methods compute solutions comparable accuracy terms norm residual give residual table 61 five codes factorizeonly options often much faster combined analysisfactorization phases indeed design criterion codes example ma48 minimize factorize time even caused increase initial analyse time ma42 however analysis particularly simple normally overhead much smaller codes mups shown failing twice shyy161 lhr71 nearly singular cases numerical pivoting caused increase storage requirements 95 mw allocated ma42 failed factorize shyy161 matrix numerical problems ran disk space numerical factorization lhr71 matrix 58 gbytes required matrix report estimates number entries lu factors memory usage reported symbolic analysis phase ma42 since codes compared offer quite different capabilities designed different environments results interpreted direct comparison however would like highlight improvements new technique brings umfpack code new code least comparable performance sparse matrix codes peak performance ma38 607 mflops numerical factorization psmigr 1 matrix compared theoretical peak 1 gflop one c90 processor new code requires less storage original umfpack code sometimes requires less half storage execution time analysefactor generally faster sometimes nearly factor two slower original umfpack code 13 hydr1 matrix codes ma38 fastest analysefactorize time five ten matrices except one matrix lns 3937 never takes twice time fastest method memory usage comparable incore methods ma42 typically factorize matrices least amount core memory ma42 originally designed finiteelement entry optimized equation entry experiments run one computer strongly favors direct addressing may thus disadvantage ma48 make heavy use level 3 blas 7 summary demonstrated advantages frontal multifrontal methods combined resulting algorithm performs well matrices wide range disciplines shown combined unifrontalmultifrontal method gains earlier code avoids indirect addressing generally performs eliminations larger frontal matrices differences umfpack version 11 new code ma38 umfpack version 20 include option overwriting matrix lu factors printing input output parameters removal extra copy numerical values iterative refinement sparse backward error analysis 4 use level 3 blas within numerical factorization routine simpler calling interface features improve robustness code result modest decrease memory usage combined unifrontalmultifrontal method available fortran 77 codes umfpack version 20 netlib 13 1 ma38 release 12 harwell 1 umfpack version 20 netlib may used research education benchmarking davis duff subroutine library 3 2 8 acknowledgements would like thank nick gould john reid jennifer scott rutherford appleton laboratory helpful comments draft report r approximate minimum degree ordering algorithm vectorization multiprocessor multifrontal code solving sparse linear systems sparse backward error linear time implementation reverse cuthillmckee algorithm automatic scaling matrices gaussian elimination reducing bandwidth sparse symmetric matrices users guide unsymmetricpattern multifrontal package umfpack distribution mathematical software via electronic mail algorithms obtaining maximum transversal implementation tarjans algorithm block triangularization matrix design ma48 use profile reduction algorithms frontal code use multiple fronts gaussian elimination computer solution large sparse positive definite systems frontal solution program finite element analysis multifrontal method sparse matrix solution theory practice multifrontal method sparse matrix solution theory practice comparative analysis cuthillmckee reverse cuthillmckee ordering algorithms sparse matrices algorithm profile wavefront reduction sparse matrices frontal techniques chemical process simulation supercomputers supercomputing strategies design analysis complex separation systems tr distribution mathematical software via electronic mail sparse matrix test problems evolution minimum degree ordering algorithm set level 3 basic linear algebra subprograms multifrontal method sparse matrix solution sparse matrix methods chemical process separation calculations supercomputers design new frontal code solving sparse unsymmetric systems design ma48 stable finite elements problems wild coefficients approximate minimum degree ordering algorithm unsymmetricpattern multifrontal method sparse lu factorization multifrontal solution indefinite sparse symmetric linear computer solution large sparse positive definite reducing bandwidth sparse symmetric matrices supernodal approach sparse partial pivoting ctr eero vainikko ivan g graham parallel solver pde systems application incompressible navierstokes equations applied numerical mathematics v49 n1 p97116 april 2004 jr de dreuzy j erhel efficient algorithms determination connected fracture network solution steadystate flow equation fracture networks computers geosciences v29 n1 p107111 february kai shen parallel sparse lu factorization different message passing platforms journal parallel distributed computing v66 n11 p13871403 november 2006 timothy davis john r gilbert stefan larimore esmond g ng column approximate minimum degree ordering algorithm acm transactions mathematical software toms v30 n3 p353376 september 2004 anshul gupta recent advances direct methods solving unsymmetric sparse systems linear equations acm transactions mathematical software toms v28 n3 p301324 september 2002 xiaoye li james w demmel superludist scalable distributedmemory sparse direct solver unsymmetric linear systems acm transactions mathematical software toms v29 n2 p110140 june timothy davis column preordering strategy unsymmetricpattern multifrontal method acm transactions mathematical software toms v30 n2 p165195 june 2004 j candy r e waltz eulerian gyrokineticmaxwell solver journal computational physics v186 guardone l vigevano finite elementvolume solution axisymmetric conservation laws journal computational physics v224 n2 p489518 june 2007