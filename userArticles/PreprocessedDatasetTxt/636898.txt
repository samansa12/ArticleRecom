modeling random early detection differentiated services network analytical framework modeling network random early detection red queues mixed traffic types eg tcp udp developed expressions steadystate goodput flow average queuing delay queue derived framework extended include class red queues provides differentiated services flows multiple classes finally analysis validated ns simulations variety red network configurations shown analytical results match simulations within mean error 5 several new analytical results obtained tcp throughput formula red queue tcp timeout formula red queue fairness index red tail drop b introduction diverse changing nature service requirements among internet applications mandates network architecture flexible capable differentiating needs different applications traditional internet architecture however offers besteffort service traffic attempt enrich service model internet engineering task force ietf considering number architectural extensions permit service discrimi nation resource reservation setup protocol rsvp 1 2 associated service classes 3 4 may provide solid foundation providing different service guarantees previous efforts direction 5 show requires complex changes internet architecture led ietf consider simpler alternatives service differentiation promising approach known differentiated services diffserv 6 7 8 allows packets classified marked appropriate class type service tos 9 edges network queues core simply support priority handling packets based tos another internetrelated quality service qos issue queues packet drop mechanism active queue management aqm recently proposed means alleviate congestion control problems well provide notion quality service promising class based randomized packet drop marking view ietf informational rfc random early detection red 11 expected widely deployed internet two variants red rio 12 wred 13 proposed means combine congestion control features red notion diffserv work aims make contribution towards analytical modeling interaction multiple tcp flows different roundtrip times nonresponsive flows eg udp active queue management aqm approaches eg red context differentiated services architecture new framework modeling aqm queues introduced applied network red queues diffserv capabilities termed diffred similar rio wred algorithms work complements previous research efforts area manuscript first submitted december 7 2000 abouzeid department electrical computer systems engineering rensselaer polytechnic institute 8th st troy ny 12180 usa email abouzeidecserpiedu roy department electrical engineering university washington box 352500 seattle wa 981952500 usa emailroyeewashingtonedu part material paper section iiiab presented ieee global communications conference san francisco november 2000 included revised form paper tcp modeling aqm regimes specifically work following unique contributions c1 tcp timeout aqm networks derive expression probability timeout reduces inaccuracy much order magnitude visavis previous stateofart 14 15 c2 poisson process splitting pps based analysis tcp flows show analysis simulations pps approximation holds population heterogeneous terms delay tcp flows sharing bottleneck red queue c3 fairness results derive expressions fairness index population heterogeneous tcp flows case red compare tail drop c4 network aqm red routers extend result network aqm queues tcp udp flows c5 network diffred routers finally results extended network red diffred queues details contributions presented following sections first comment relation contributions previousconcurrent related work literature review steadystate throughput single tcpreno newreno flow tail drop td queueing policy packet drops modelled iid loss probability p shown wellknown inverse p dependance result derived several authors 16 17 18 using different analytic approaches example 16 used nonhomogeneous poisson process approximation tcp flow 17 18 use fixed point approximation method yielding dependance within multiplicative constant result call throughput formula1 incorporate effect tcp timeout mechanism 14 extended include timeouts taildrop queue scenarios reasonable assume conditioned packet loss remaining packets window data also lost ie burst loss within window round based assumption authors derive accurate formula term throughput formula2 steadystate tcp throughput specifically derivation includes intermediate step expression probability given packet loss loss detected timeout term timeout formula alternative timeout probability derived 15 independent packet losses ie without assumption burst loss within loss window however result available closed form requires knowledge window size probability distribution function building two formulae throughput individual tcp flow bu et al 19 extend analysis network red queues solving numerically coupled equations representing throughput individual flow similar approach adopted 20 21 contribution c4 listed similar 19 20 21 insofar also seek model network aqm queues tcp flows however unlike 19 20 21 use formulae derived earlier specifically show timeout formula derived 14 largely overestimates probability timeout detection aqm queue due assumption burst loss within loss window via analysis supported ns2 simulation thus c1 derive new formula timeout probability compare accuracy new formula derived earlier 11 authors predict well known bias tcp connections larger delay sharing bottleneck tail drop queue slightly affected introduction red without definitive analytical support results c2 c3 precisely quantify amount unfairness experienced tcp flows bottleneck red visavis tail drop packet drop probabilityaverage queue packets minth maxth fig 1 red packet drop probability function average queue size 1 2average queue size 1 2 drop probability minth maxth fig 2 schematic diffred packet drop probability two classes service queue using pps approximation shown hold within acceptable error margin hence deriving fairness index population heterogeneous tcp flows two cases red tail drop paper outline paper organized follows section ii present network model considered paper describe red diffred algorithms outline modeling approach section iii considers single congested red queue pps property shown hold population heterogeneous flows analytical results single red queue validated ns simulations fairness results red versus taildrop presented section iv presents derivation timeout formula comparison results previous results 14 15 ns simulations section v presents analysis network diffred 1 queues tcp udp flows network model validation presented section vi section vii concludes paper outlining future extensions ii modeling notation red algorithm briefly review original red algorithm see 11 details red router calculates timeaveraged average queue size using lowpass filter exponentially weighted moving average smoother sample queue lengths average queue size compared two thresholds minimum threshold minth maximum threshold maxth average queue size less minth packets dropped average queue size exceeds maxth every arriving packet dropped packets dropped probabilistically timeaveraged queue size exceeds minth probability p increases linearly reaches maxp average queue size maxth shown fig 1 red also option marking packets instead dropping b diffred algorithm propose investigate diffred algorithm identical original red algorithm except following important change diffred differentiates different packets appropriately labelling class belongs packet labelled assigned default lowest class red queue associates priority coefficient denoted c class 1 c c c total number classes lowest priority class corresponds cth higher priority class packets coefficient c shown section ii red special case diffred queue service differentiation packet drop probabilitypackets minth average queue fig 3 packet drop probability gentle variant red packet drop probabilitypackets minth average queue 2 1 fig 4 packet drop probability gentle variant diffred 2 c c diffred queue receives packet updates average queue size drops packet probability equal p c class c packet thus congestion level ie average queue size higher priority packets dropped lower probability schematic diagram diffred dropping algorithm case depicted figure 2 plot shows packet drop probability function function average queue size lower slope higher priority class drop function lower priority class higher slope c gentle variant red recently recommended gentle 2 variant red 22 packetdropping probability varies maxp 1 average queue size varies maxth 2maxth figures 34 depict packet drop probability red diffred option enabled model applies equally well cases model gentle option requires less restrictive assumptions hence applicable wider range parameters discussed section iie network model notations assume network v queues support tcp flows n udp flows tcp connection one way data flow source j destination j reverse traffic consisting packet acknowledgments acks successfully received packet destination ie delayedacks throughout paper assume tcp flows indexed 1 udp flows indexed shows network denote total roundtrip propagation transmission delays j th flow including queuing delay let v denote v th queue link capacity packetssec denote zeroone nv dimensional order matrix elements specifies order j th flow traverses v th queue 0 entry indicates corresponding flow pass queue since flow passes least one queue row must least one entry equal 1 work consider tcpnewreno assume reader familiar key aspects window adaptation mechanism 23 24 ie two modes window increase slow start congestion avoidance two modes packet loss detection reception multiple acks next expected packet number timer expiry analysis option makes red much robust setting parameters maxth maxp s5 fig 5 experimental network topology two red queues applies best tcpnewreno since assume multiple packets within loss window trigger one duplicate ack event rather one modeling approach primary challenge facing analytical approach capture complex interplay tcp congestion control algorithm active queue management policies red adopt mean value analysis using fixed point approximation estimate longterm averages various parameters done 17 18 19 25 26 recognizing analysis allow accurate prediction higher order statistical information eg variances next state discuss following modeling assumptions a1 congested queue fully utilized except possibly isolated instants a2 tcp flow passes least one congested queue a3 probability forced packet loss negligible 3 a1 well known result observed literature internet measurements well simulations also confirmed simulations performed a2 reasonable tcp flows window size limited receivers advertised window sizes a3 implies model unforced probabilistic red packet losses ignore forced losses avoided configuring red queue parameters 4 note much easier configure red diffred queue avoid forced packet drops gentle option used noted 22 due avoidance abrupt increase drop probability maxp 1 nevertheless analysis results hold even gentle option used long a3 holds iii single queue aim section twofold outline analysis using pps approximation 5 ii derive result probability loss detected timeout duplicate acknowledgment da results used following section network rather single queue setup pps based analysis tcp flows consider poisson processes arrival rate j single queue randomly drops packets probability p let p ij denote probability th packet loss event belongs j th flow pps poisson process splitting property 1 independent 3 forced packet losses due either buffer overflow due packet drop probability one 4 assumption adopted many previous aqmrelated research efforts eg 27 5 part section presented preliminary form 28 consider tcp flows let x denote ith interloss duration queue shown fig 6 q ij queue size session j packets end epoch net roundtrip propagation queuing delay connection j end th epoch flows share buffer q steadystate average queue size let w ij denote window size j th flow end th epoch w av j denote flow j timeaveraged window size opposed ew ij represents mean window size prior end epoch postulate tcp flows sharing queue 2 equation 2 postulate pps approximation 1 holds population tcp flows sharing random drop queue justify first consider case tcp flows perpetually congestion avoidance phase additive increase multiplicative decrease aimd mode window size use analytical description aimd derive expressions steady state average window throughput expressions validated ns simulations support 2 modified pps approximation case timeouts postponed sec v window evolution tcpreno sessions governed following system equations refer figure 6 wp p ij taking expectation sides 3 used independence approximation ew ij p fixed point approximation similarly denoting fixed point approximation 2 5 substituting 5 4 equation 6 system quadratic equations unknowns w j readily verified direct substitution time window 41 42 fig 6 schematic showing congestion window size two ie sessions different roundtrip delays sharing bottleneck link red queue packet loss events indicated x explicit solution 6 hence remarkably result implies average steadystate window size flows also w j implicitly depends q x need determined relate result w j w av j let w ij denote flow j window size start epoch straightforward verify 3 hence finally let r j denote flow j steadystate throughput packetssec case full bottleneck link utilization substituting 14 finally let p denote average packet drop probability red queue red tdg sink bottleneck linkt l nt fig 7 schematic multiple tcp connections sharing bottleneck link th max th 1max p q q since red average packet drop probability also satisfies q min th th min th relationship q x follows equating 17 18 b single queue validation analytic expressions various parameters interest red queues derived preceding section compared results ns simulations figure 7 depicts ns simulation model used validating results tcp flows share common bottleneck link capacity packetssec oneway propagation delay forward tcp traffic one way flow source j sink reverse traffic consisting packet acknowledgments acks successfully received packet sink consider long run steadystate behavior assume sources always packets transmit eg ftp large files jth flow encounters oneway propagation delay j connected via link capacity j packetssec bottleneck queue total roundtrip time propagation transmission excluding queuing jth flow thus table lists parameters used two sets simulation experiments red policy using ns simulator 29 validation experiments available 30 link capacities j packetssecond propagation delays j seconds topology fig 7 well number competing flows used simulation simulation value link delay 1 first flow factor 1 chosen remaining j specified according ie access link source queue propagation delay profile increases exponentially values 1 simulation listed table simulation compare analysis results simulations measurements q table simulations use equal packet size 1 kbytes figures 89 show measured computed r j competing flow xaxis indicates computed choose show unnormalized r j packetssecond rather normalized average roundtrip time eg seconds average transmission rate packetssecond analysis simulation fig 8 results exp1 average transmission rate packetssecond analysis simulation fig 9 results exp2 throughput since difference simulations measurement analysis results indistinguishable shown normalized link capacity c fairness properties red versus taildrop tcps inherent bias towards flows shorter roundtrip time result congestion window control mechanism wellknown 31 shown multiple tcp flows different roundtrip times share tail drop queue steadystate throughput flow inversely proportional square average roundtrip delay see appendix simple derivation result analysissimulations results specifically 9 14 single red queue multiple tcp flows without timeouts see comment end section reveal dependence throughput differs tail drop consider parameter k j defined 13 population heterogeneous flows p j directly proportional tcp flow throughput hence inversely proportional roundtrip delay k j increases roundtrip delay since mild variation hence large number flows dependence flow throughput k j neglected 6 thus conclusions remainder section lower bound improvement fairness compared tail drop assumptions ie neglecting effect k j results 9 14 show average transmission rates competing connections congested red queue inversely proportional average roundtrip times square average roundtrip times tail drop fairness coefficient may defined ratio lowest highest average throughput among competing flows sharing queue ie ideally denote fairness coefficients equivalent 7 tail drop red queues implying red queue achieves higher fairness coefficient previous definition fairness considers flows maximum minimum transmission rates pioneering work 32 following index r introduced quantify fairness based rates flows ideally fair allocation r results 1 worst case allocation r approaches zero large n 6 limit number flows tends infinity k flows note impact k j included would help decrease tcp bias larger propagation delay since increases roundtrip time 7 equivalent queue one identical tcp flows average queue size 11 definition fairness index queue n tcp flows yields illustrative example consider tcp flows exponentially decaying increasing delay profile factor assuming large n hence neglecting effect k j case red follows simple algebraic manipulations red n ie td intuitive explanation decrease bias ie fairness coefficient closer one red order tcp increases window size one every roundtrip time thus lower delay links see faster increase window size case synchronized packet loss tail drop queues windows typically reduced time hence average window size inversely proportional average roundtrip time since throughput flow proportional window size divided roundtrip time average rate tcp session inversely proportional square average roundtrip time case red packet dropped chances packet belong certain connection average proportional connection transmission rate thus tcp sessions lower delays likely windows reduced analytical results show causes average window size equal connections 6 thus throughput connection inversely proportional roundtripdelay thus basic red algorithm achieve throughput fairness among competing flows substantially reduces bias compared tail drop finally fairness results take account effect tcp timeouts reasons previously shown via simulations literature occurrence timeouts general increase unfairness tcp longer delay links iv timeout formula tcp flow random packet loss section first derive expression probability packet loss event detected timeout ie duplicate ack detection da event next compare result literature ns simulations analysis consider instant tcpreno session window size congestion avoidance phase let w denote current congestion window size packets least one packet loss takes place packet assumed lost independently probability p let current round labelled round reference see figure 10 let p w probability conditioned least one packet loss current window round packet k first packet lost round k1 packets transmitted first loss current round cause reception k 1 acks next round hence release equal number packets packet sequence number wk round round i1 round i2 new packets time fig 10 analysis probability vs td successful packets ie dropped dropped packets ack packets packet k represented whitefilled completely shaded partly shaded rectangles respectively example denote number duplicate acks received round due successful transmission n 2 k1 packets round i1 similarly consider wk packets transmitted first loss round current round let n denote number packets successfully transmitted w k packets notice unlike n 2 packets n 1 packets transmitted first loss packet current round hence n 1 duplicate acks generated immediately round 1 let dw denote probability da detection takes place round 2 notice expression independent k expected stated simply probability least 3 let qw denote probability detection rounds 2 retaining significant terms yields w 1w 2p w3 27 following da detection window halved tcp attempts return normal window increase mode congestion avoidance however one losses may take place immediate following round ie window increased paper consecutive congestion window rounds packet loss detected da without separating additive window increase treated one loss window ultimately terminates via either da let zw denote probability take place either immediately following sequence consecutive das log w logarithm base 2 finally recalling w denotes window size end th epoch applying fixed point approximation 28 yields zw given 28 validation comparison previous results section previous results zw listed compared results representative simulation using ns consisting multiple tcp flows sharing bottleneck red queue 14 following expression zw derived assuming packet lost remaining packets congestion window also lost probably reasonable tail drop queue 19 authors argue still good result applied aqm like red drops packets independently show true 15 following expression zw derived expression qw previous section 26 however authors analyze case multiple consecutive das ultimately cause also expression ezw derived 15 since analysis relies knowledge congestion window probability distribution function nevertheless show applying fixed point approximation 31 yielding would result underestimation timeout probability order compare accuracy result 29 previous results 30 32 applied red queue construct following simulation using ns single congested red queue considered number identical tcp flows ranging 5 40 red parameters set follows ecn disabled link capacity 1 mbps twoway propagation delay including queuing 20 ms packet size 1 kb buffer size selected large enough avoid buffer overflow trace functionality within ns enhanced record one flows time instant congestion window size reason da window decrease postprocessing scripts used compute average window size packet loss detection ie w average packet drop queue p total number packet loss detection events detected detected da hence 040812 number tcp flows measured ew10 measured ep measured prob ezw zew analysis zew padhye et al fig 11 comparison different timeout formulae ns simulations tcpnewreno measured ezw finally measured p w simulations substituted 29 30 32 compute zw results shown figure 11 figure 11 show results 32 since values produced practically 0ie excessively underestimates probability timeout figure 11 shows result much accurate 14 expected improvement accuracy order magnitude small number competing flows hence small p reason small p assumption conditional burst loss used 14 becomes unrealistic p increases red queue operation approaches tail drop since p approaches maxp hence arriving packets dropped higher probability resulting synchronous operation flows thus burst losses however even high p formula accurate 14 v network analysis since red queue special case diffred queue present analysis case diffred queues first subsection consider network tcp udp flows model additive increasemultiplicative decrease dynamics tcp next extend model results capture tcp timeout behavior modeling without timeouts let minth v maxth v maxp v c denote diffred parameters v th queue let c denote priority coefficient class c v denote average steady state packet drop probability v th queue let p v c denote average packet drop probability class c v th queue case gentle variant qv minthv th th c case without gentle variant qv minthv according description diffred dropping algorithm figure 2 35 assumes diffred queues network use value class priority coefficients ie c independent v 8 let j p v j denote priority coefficient average drop probability v th queue class flow j belongs case gentle variant follows 33 35 maxp 1 case without gentle variant let r j denote steady state packet transmission rate flow j let generator matrix g denote fraction j th flow transmission rate input v th queue elements g hoj v oj k 38 hoj v oj denote steady state probability dropped packet belongs v th queue applying a4 let p jv denote probability conditioned packet loss v th queue packet loss belongs j th flow using a4 let p j denote probability packet loss belongs j th flow substituting 40 41 yields 8 possible extend analysis assuming queue different set priority coefficients defining v c queue may specifically valuable modeling interaction diffserv enabled nondiffserv queues however initial model simplicity postpone future extensions simply ratio sum packet drop rates flow j queues sum packet drop rates flows network consider one tcp flows network consider window evolution let denote time th random packet loss caused v queues causing packet loss one event takes place x ith interloss duration epoch let j th tcp session window size packets beginning end th epoch denoted w ij w i1j respectively let q iv denote queue size queue v end epoch net roundtrip propagation queuing delay connection j end th epoch following steps window evolution tcp sessions governed system equations 4 e system equations captures tcp additive increasemultiplicative decrease dynamics impact timeout done next section sec iiia k j given 12 substituting x 44 p j 43 r j 45 4 finally congested links a1 mn uncongested underutilized links mn set equations 4648 solved numerically explained section iv b modeling tcp timeout mechanism section show model extended incorporate effect timeouts since well known slow start behavior negligible effect tcp steadystate throughput neglect slow start assume window size timeout set 1 tcp continues congestion avoidance phase idle duration discussed simplicity single timeouts considered since difference performance single timeout multiple timeouts insignificant result time window fig 12 approximate timeout behavior timeout slowstart neglected tcp assumed resume congestion avoidance mode initial window size value one packet low throughput thus objective model approximate timeout behavior depicted fig12 single timeout causes window size reduced one tcp refrains transmission ie idle period one roundtrip time ij let zw ij denote probability given packet loss belonging flow j loss result timeout following steps wp wp taking expectations sides simplifying denote steadystate proportion time tcp flow j busy b nonresponsive flows following derivation steps expression derived validated sec iv equation 29 expression b j derived follows let x ij denote interloss times packet losses tcp flow j opposed x denotes interloss times network consider window size evolution flow j two consecutive duplicate ack da events see fig 12 hence let nda w j denote average fixed point approximation argument expected number consecutive das nda distribution parameter finally thus set equations mv unknowns obtained substituting b j 57 p j 52 51 remaining v equations correspond 4748 modification include timeout behavior yielding mn fully utilized links mn underutilized links solution v unknowns obtained solving v equations numerically explained following section vi network model results order validate analysis presented previous sections present representative number comparisons numerical results obtained solution v nonlinear equations simulation results ns2 simulations simulations reported use gentle option red ns2 simulator set true ie uses gentle variant setbit option set false ie packet drops instead marking experiments without gentle option provide results similar accuracy reported due space constraints first describe technique used solving nonlinear equations summarize modifications red algorithm ns2 simulate diffred behavior finally present validation experiments network solver analysis section v unknowns w j related set nonlinear equations general set nonlinear equations solved using suitable numerical technique two main problems encountered solving nonlinear equations uniqueness solution ii choice appropriate initial condition guarantees convergence towards true solution section describe algorithm used achieve objectives algorithm based observation exists unique solution 4648 satisfies 0 q v maxth v w j 0 thus network solver composed following two steps modules step set equations 4648 solved using iterative numerical technique used modified globally convergent newtonraphson technique 33 operates follows 1 chooses initial conditions randomly within solution space 2 performs newtonraphson technique checking convergence 3 algorithm converges valid solution program terminates else program repeats step 1 note resulting solution take account timeouts nonresponsive flows hence step ii step ii step algorithm uses solution provided step initial conditions also uses globally convergent newtonraphson technique applied time extended modeling equations describing timeout behavior 5152 5859 applicable udp behavior thus network solver composed two modules uses iterative numerical method first module solves simplified model thus provides approximate solution network fed next module refines network solution providing accurate one technique proved converge correct solution experiments tried representative total 160 experiments reported following sections b modifying ns2 model diffred following modifications ns2 incorporated packet common header added priority field contains integer specifying priority class packet sim ilarly additional parameter tcp object specifying class service added tcp session established parameter set selected class service session tcp mechanism also modified label packet tcp session priority copying tcp session class service packet header packet transmit ted finally red algorithm modified first check packet class packet header compute packet drop probability according mechanism outlined sections iib case without gentle option iic gentle variant c experimental topology use topology figure 5 consists two reddiffred queues q 1 q 2 total five sets flows going queues flow set composed four identical flows figure denotes source origin denotes destination flows three sets flows s1 s2 s3 arrive q 1 one traverses q 2 two sets flows arrive q 2 two bottleneck links topology q 1 q 2 link speeds 1 2 packetssec experiments vary priority class s2 allowing higher priority experiments compensate higher loss rate suffers since traverse queues experiment composed five simulation runs end compute parameters interest average queue size queue average window size tcp flow average goodput number packets received destination per second duration run long enough guarantee operation network steady state long duration compute average among simulation runs parameters compare network solver results figures plot one point x experiment x represents simulation result represents corresponding result obtained applying analytical network solver hence ideally points lie line slope 45 degrees ii parameters settings experimental network topology fig5 fig16 link size obtained simulations packets average queue size obtained analysis packets fig 13 average queue size obtained simulations analysis experiments tcp traffic experiments tcp total eighty experiments performed various parameters parameters five experiments shown table three additional similar sets performed reducing bottleneck link speeds half set ie first experiment last set would configure bottleneck links 4mbps thus forming twenty experiments twenty experiments repeated four times priority coefficient higher priority flow s2 varying 01 10 steps 03 results shown figures 1315 note also validates analysis red case since setting priority coefficient 10 corresponds red operation figure 13 experiment results two points one queue hence figure contains total 160 simulationanalysis comparison points hand figure 14 figure 15 experiment results three comparison points reason tcp flows s3 one hand s4 s5 identical goodput congestion window size values thus experiment renders three window sizes three goodput values one s3 one s2 third s4 s5 total 240 comparison points figures e experiments tcp udp validate model results mixed tcp udp traffic modify topology figure 5 figure 16 adding two sets udp constant bit rate flows one originates average window size tcp flows obtained simulations packets average window size flows obtained analysis packets fig 14 average congestion window size simulations analysis experiments tcp traffic average goodput obtained simulations kbps average goodput obtained analysis fig 15 average goodput obtained simulations analysis experiments tcp traffic s6 passes queues exiting network originates s7 passes q2 transmission rates udp flows set total transmission rates s1 s2 equals 10 link capacities 1 2 results shown figures 1719 like figures 1314 figures 1718 contains total 160 240 simulationanalysis comparison points respectively however unlike figure 15 contains 240 comparison points figure 19 contains additional 160 comparison points accounting 2 udp flows 80 experiments finally figure 20 show results varying priority coefficient one experiments first experiment table separately figure shows priority coefficient effective boosting s2 goodput low value much higher value almost equal tcp flows rate s5 fig 16 experimental network topology two red queues size obtained simulations packets average queue size obtained analysis packets fig 17 average queue size obtained simulations analysis mixed tcp udp traffic 3051525average window size tcp flows obtained simulations packets average window size flows obtained analysis packets fig 18 average congestion window size obtained simulations analysis mixed tcp udp traffic average goodput obtained simulations kbps average goodput obtained analysis fig 19 average goodput obtained simulations analysis mixed tcp udp traffic coefficient higher priority flows set 2 goodput flows s1 s3 flows s4 s5 udp flows s6 udp flows s7 fig 20 effect varying priority coefficient s2 goodput experiment parameters shown first entry table vii conclusion paper analytical model network reddiffred queues multiple competing tcp udp flows presented unlike previous work analysis specifically targeted towards aqm schemes characterized random packet drop unlike tail drop queues drop packets bursts main contributions accurate timeout formula orders magnitude accurate bestknown analytical formula ii closed form expressions relative fairness red taildrop towards heterogeneous flows iii analysis red queues traditional well differentiated services net work analysis relied set approximations timeout dynamics well loss rate process flow network analytical results validated ns simulations show results accurate within mean margin error 2 average tcp throughput 5 average queue size 4 average window size attributable approximations introduced section ii model proposed applicable variety aqm schemes rely randomized instead deterministic packet drops number avenues future research remain first model extended analysis shortlived flows effects limiting advertised congestion window also model extensions versions tcp eg tahoe sacketc case ecn 34 may considered finally noted 8 especially expected coexistence diffserv networks best effort networks extension model captures interaction traditional red queues diffred would valuable sec iiic stated average window size tcp flow passing tail drop queue inversely proportional roundtrip delay proof show taildrop queue steady state window size flow inverse proportional roundtrip time tail drop queues buffer overflow causes typically least one packet loss flow passing queue 35 36 using notations sections ii iii taking expectation sides 60 denoting proving claim r resource reservation protocol rsvpversion 1 functional specification rsvp new resource reservation protocol specification controlledload network element service specification guaranteed quality service use rsvp ietf integrated services architecture differentiated services approach service allocation internet definition differentiated services field ds filed ipv4 ipv6 headers recommendations queue management congestion avoidance internet random early detection gateways congestion avoidance explicit allocation besteffort packet delivery service technical specification cisco modeling tcp reno performance simple model empirical validation comparative performance analysis versions tcp local network lossy link stationary behavior ideal tcp congestion avoidance macroscopic behavior tcp congestion avoidance algorithm promoting use endtoend congestion control internet fixed point approximations tcp behavior aqm network framework practical performance evaluation traffic engineering ip networks recommendation using gentle variant red tcpip illustrated newreno modification tcps fast recovery algorithm blocking probabilities large circuitswitched networks performance tcpip networks high bandwidthdelay products random loss analytic understanding red gateways multiple competing tcp flows stochastic models congestion control heterogeneous next generation packet networks flow control highspeed networks analysis increase decrease algorithms congestion avoidance computer networks numerical recipes c art scientific computing proposal add explicit congestion notification ecn ip oscillating behavior network traffic case study simulation congestion avoidance control tr congestion avoidance control analysis increase decrease algorithms congestion avoidance computer networks numerical recipes c 2nd ed tcpip illustrated vol 1 random early detection gateways congestion avoidance performance tcpip networks high bandwidthdelay products random loss macroscopic behavior tcp congestion avoidance algorithm explicit allocation besteffort packet delivery service comparative performance analysis versions tcp local network lossy link promoting use endtoend congestion control internet modeling tcp reno performance fluidbased analysis network aqm routers supporting tcp flows application red stochastic models congestion control heterogeneous next generation packet networks