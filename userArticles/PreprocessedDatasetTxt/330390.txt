strength two data encryption standard implementations timing attacks study vulnerability two implementations data encryption standard des cryptosystem timing attack timing attack method recently proposed paul kocher designed break cryptographic systems exploits engineering aspects involved implementation cryptosystems might succeed even cryptosystems remain impervious sophisticated cryptanalytic techniques timing attack essentially way obtaining users private information carefully measuring time takes user carry cryptographic operations work analyze two implementations des show timing attack yields hamming weight key used des implementations moreover attack computationally inexpensive also show design characteristics target system necessary carry timing attack inferred timing measurements b introduction ingenious new type cryptanalytic attack introduced kocher kocher 1996 new attack called timing attack exploits fact cryptosystems often take slightly different amounts time different inputs kocher gave several possible explanations behavior among branching conditional statements ram cache hits processor instructions run nonfixed time etc kochers significant contribution show running time differentials exploited order find target systems private infor mation indeed kocher 1996 shown cryptanalyze simple modular exponentiator modular exponentiation key operation diffiehellmans key exchange protocol diffie hellman 1976 rsa cryptosystem rivest et al 1978 modular exponentiator procedure inputs k n 2 n n cryptographic protocols mentioned n public k private kocher reports passive eavesdropper measure time takes target system compute k mod n several inputs recover secret exponent k moreover overall computational effort involved attack proportional amount work done vic tim concreteness sake clarity exposition describe essence kochers method recovering secret exponent fixedexponent modular exponentiator shown fig 1 code k binary l 0 output z fig 1 modular exponentiator attack allows someone knows k l delta recover k tgamma1 obtain entire exponent attacker starts repeats attack attacker first computes l iterations loop next iteration requires first unknown bit k tgamma1 bit set operation n performed otherwise skipped assume timing observation corresponds observation random variable time required multiplication squaring steps corresponding bit k lgammai e random variable representing measurement error loop overhead etc attacker correctly guesses k tgamma1 may factor effect obtain adjusted random variable known variance provided times needed perform modular multiplications independent measurement error incorrect guesses produce adjusted random variable higher variance one expected computing variance easy provided attacker collects enough timing measurements correct guess identified successfully adjusted values smaller variance strength two data encryption standard implementations timing attacks delta 3 theory timing attacks yield target systems private information practice order successfully mount timing attack remote cryptosystem prohibitively large number timing measurements may required order compensate increased uncertainty caused random network delays nev ertheless situations feel realistic mount timing attack describe one challengeresponse protocols used establish whether two entities involved communication indeed genuine entities thus allowed continue communication protocols one entity challenges random number predetermined calculation must performed often including secret key order generate correct result computation device must posses correct secret key therefore assumed authentic many smart cards particular dynamic password generators tokens electronic wallet cards implement challengeresponse protocols eg message authentication code generated according ansi x926 menezes et al 1997 page 651 standard expected extensive use made smart cards based general purpose programmable integrated circuit chips thus specific functionality smart card achieved programming security smart cards provided using tamperproof technology cryptographic techniques described scenario ideal setting carry timing attack widespread availability particular type card make easy inexpensive determine timing characteristics system mount attack later obtaining precise timing measurements eg monitoring altering card reader gaining possession card could used retrieve secret information stored card means timing attack thus cards implement challengeresponse protocols master keys involved could give rise security problem see dhem et al 1998 discussion practical implementation timing attack earlier version cascade smart card new unanticipated strains timing attacks might arise hence timing attacks given serious consideration work contributes ultimately furthering understanding strengths new cryptanalytic technique weaknesses exploits ways eliminating possibility becoming practical kocher implemented attack diffiehellman key exchange proto col also observed timing attacks could potentially used cryptosystems particular data encryption standard des claim motivation work 2 results organization study vulnerability one widely used cryptosystems world des timing attack starting point work observation kocher kocher 1996 dess key schedule generation process moving nonzero 28bit c values using conditional statement tests whether onebit must wrapped around could source nonconstant encryption running times hence conjectured timing attack des alejandro hevia marcos kiwi could reveal hamming weight key 1 show although kochers observation incorrect des implementations analyzed conjecture true sect 3 give brief description des sect 41 describe timing attack des assumes attacker knows target systems design characteristics first discuss experimental results show computationally inexpensive timing attack two implementations des could yield enough information recover hamming weight des key used hence assuming des keys randomly chosen attacker recover approximately 395 bits key information best knowledge first implementation timing attack symmetric cryptosystem since preliminary version work appeared two timing attacks rc5 reported handschuh heys 1999 sect 411 describe computational experiments measure threat implied actual implementation timing attack des recovering 395 bits des key modest improvement brute force search recovering hamming weight key potentially threatening particular adversary restrict attention keys determined either significantly low high hamming weight although keys may rare adversary determines one key used ensuing search may significantly sped thus adversary balance time find rare keys time needed key recovery systems even recovery single although rare key may serious concern sect 412 identify sources dependencies encryption time keys hamming weight implementations des studied relevant conditional statements des implementations analyzed encryption time roughly equal linear function keys hamming weight x plus normally distributed noise e since des key 56 bit long string keys chosen uniformly random key space x binom 56 12 2 thus ff fi oe sect 42 show necessary order perform timing attack des assume design characteristics target system known indeed propose two statistical methods whereby passive eavesdropper infer timing measurements target systems design information required successfully mount timing attack des best knowledge first proof possible infer target systems design characteristics timing measurements would like stress timing attacks described work require precise measurements encryption times knowledge encrypted plaintexts produced ciphertexts 1 recall hamming weight bitstring equals number bits nonzero 2 recall distribution binom np corresponds distribution sum n independent identically distributed f0 1grandom variables expectation p strength two data encryption standard implementations timing attacks delta 5 sect 5 propose blinding technique used eliminate almost execution time differentials analyzed des implementations blinding technique makes des implementations study impervious sort timing attack describe work finally discuss conditions hamming weight des key might recovered timing attack 21 related work modern cryptography advocates design cryptosystems based sound mathematical principles thus many cryptosystems designed last two decades proved resist many sophisticated mathematically based cryptanalytic techniques provided one willing accept reasonable assumptions traditionally techniques used attack cryptosystems exploit algorithmic design weaknesses cryptosystem hand timing attacks take advantage decisions made implementing cryptosystems specially produce nonfixed running times timing attacks type attacks exploit engineering aspects involved implementation cryptosystems indeed recently boneh lipton demillo boneh et al 1997 introduced concept fault tolerant attacks attacks take advantage possibly induced hardware faults boneh et al point attacks show danger hardware faults pose various cryptographic protocols conclude even sophisticated cryptographic schemes sealed inside tamperresistant devices might leak secret information new strain fault tolerant attacks differential fault analysis dfa proposed biham shamir biham shamir 1997 attack applicable almost secret key cryptosystem proposed far open literature dfa works various fault models uses cryptanalytic techniques recover secret information stored tamperresistant devices particular biham shamir show hardware fault model considered boneh et al full des key extracted sealed tamperresistant des encryptor analyzing 40 200 ciphertexts generated unknown related plaintexts furthermore biham shamir 1997 techniques developed identify keys completely unknown ciphers sealed tamperresistant devices new type attacks described received widespread attention see example english hamilton 1996 markoff 1996 3 des widely used cryptosystem world specially among financial institutions developed ibm adopted standard 1977 nbs 1977 reviewed every five years since adoption des held remarkably well years cryptanalysis faster cheaper processors allow using current technology build reasonably priced special purpose machine recover des key within hours stinson 1995 pp 8283 concreteness sake provide brief description des detailed description see nbs 1977 easily accessible descriptions des found schneier 1996 stinson 1995 des symmetric privatekey cryptosystem ie cryptosystem 6 delta alejandro hevia marcos kiwi key schedule encryption plaintext perm perm key fig 2 des encryption process parties wish use must agree advance common secret key must kept private des encrypts message plaintext bitstring length 64 using bitstring key length 56 obtains ciphertext bitstring length 64 three main stages first stage bits plaintext permuted according fixed initial permutation second stage 16 iterations certain function successively applied bitstring resulting first stage final stage inverse initial permutation applied bitstring obtained second stage strength des resides function iterated encryption process give brief description iteration process input iteration output bitstring iteration long string k actually k permuted selection bits des key strings called key schedule iteration 64 bit long output string computed applying fixed rule two input strings encryption process depicted fig 2 decryption done encryption algorithm using key schedule reverse order k best traditional cryptanalytic attacks known des due biham shamir biham shamir 1991 biham shamir 1993 matsui matsui 1994a matsui 1994b however considered threat des practical environments see menezes et al 1997 pp 258259 4 timing attack des consider problem recovering hamming weight des key target system means timing attack first address problem sect 41 assuming attacker knows design target system show sect 42 assumption removed 41 timing characteristics two implementations des studied timing characteristics two implementations des first one obtained rsaeuro cryptographic toolkit kapp 1996 henceforth referred rsades implementation des looked one due louko louko 1992 henceforth referred ldes studied implementations 120mhz pentium tm computer running msdos tm advantage working msdos tm environment single process operating system facilitates carrying timing measurements since strength two data encryption standard implementations timing attacks delta 7 50200300400500hamming weight key time encryption key schedule fig 3 rsades 5050150250350hamming weight key time key schedule encryption fig 4 ldes interfering processes running less operating system maintenance tasks performed measured time microseconds first experiment fixed input message bitstring length whose bits set 0 randomly chose keys hamming weight selected key encrypted message total times encryption measured time took generate schedule total time took encrypt message plots implementations looked average key encryption key schedule generation times shown fig 3 fig 4 obvious outliers eliminated fact outliers noticed appeared fixed intervals 2 clock ticks outliers caused system maintenance tasks alejandro hevia marcos kiwi randomly chosen des key hamming weight 23 33 probability approximately 086 thus relevant data points shown fig 3 fig 4 close middle plots various keys chosen random performed 2 key encryption key schedule generation times discarding obvious outliers graphed empirical frequency distributions collected data empirical distributions observed roughly symmetric concentrated contiguous values usually three four concentration values due fact able perform time measurements accuracy 08381s time differentials among encryptions performed rarely larger 30s explanation measure time precision msdos tm environment see appendix suggests one would expect variations running time observed process executed many times input due effect normally distributed random noise different values randomly chose 2 8 keys hamming weight throwing away outliers graphed empirical frequency distributions collected data empirical frequencies observed looked like normal distributions small deviations typically 12s ldes 18s rsades conclude variations encryption key schedule generations times observed among keys hamming weight mostly due total number bits key set position set bits occur thus effect bits set among keys hamming weight negligible repeated experiments described far instead leaving input message fixed chose new randomly selected message start encryption process results reported remained essentially unchanged negligible increase measured deviations assuming attacker knows design target system build table average encryption time versus hamming weight key clear monotonically increasing relation encryption time hamming weight key elicited experiments significant implementation flaw allows attacker determine hamming weight des key indeed attacker obtain encryption time measurements look table built determine keys hamming weight time measurements could come thus attacker recover bits key information h denotes binary entropy function remark 1 precise estimation hamming weight des key achieved means timing attack two situations hold first accurate time measurements obtained second variations encryption keyschedule generation time produced different keys identical hamming weight small compared time variations produced keys one one less set bit noticed latter situation approximately holds exact estimation hamming weight des key achieved attacker accurately perform time measurements several encryptions plaintext requires powerful attacker one capable fixing strength two data encryption standard implementations timing attacks delta 9 time takes des generate ciphertext c message code let l g randomly choose g let k lexicographically first elem k l des encryption key k yields c returnk fig 5 key recovery procedure based timing attack reveals hamming weight key input message fed encryption process remarkable established monotonically increasing relation encryption times hamming weight key linear dependency exists two measured quantities correlation factors data shown fig 3 fig 4 09760 09999 respectively sharp linear dependency encryption times hamming weight allows attacker infer target systems information required carry attack described topic discussed next section 411 experimental results section describe computational experiment shows expected reduction size key space search would achieved implementation timing attack described previous section assume every 2 r corresponding expected time takes target des implementation encrypt message key hamming weight furthermore assume supported experimental observations consider procedure fig 5 recovering des encryption key timing attack exploits facts reported sect 41 note possible experimentally determine expected number keys procedure would try without actually execute indeed des encryption plaintext key k generates ciphertext c expected size key space searched given procedure des implementations studied randomly chose des messagekey pairs measured encryption time computed expected number keys procedure fig 5 would tried finding correct encryption key discussion sect 41 follows best one hope try half keys whose hamming weight equals correct encryption key corresponds 324 percent key space since k0 pk log 2 pk 2 found rsades 530 3 unlikely event l uniquely defined perturb value uniformly chosen interval gammaoe oe oe tiny compared precision timing measurements alejandro hevia marcos kiwi 26 28 table 1 results computational experiment percent key space would searched average finding correct encryption key ldes percentage goes 384 percent table 1 shows detail data collected experiments columns labeled according weight des key denote weight key k second row represents percentage total key space corresponding des keys hamming weight k precision 00005 denote value p k des key weight k estimated 16000 times expected percentage key space would searched finding encryption key theses estimates based 16000 delta p k measurements order insure least 16 measurements considered every estimate associated nonzero p k last two rows table 1 show des implementation key weights average values obtained recovering 395 bits des key gives modest improvement time needed recover key table 1 implies timing attack reveals hamming weight key potentially threatening particular adversary restrict attention keys determined either significantly low high hamming weight adversary performing timing measurements one found either significantly low high adversary detects rare key subsequent key search much less usual amount thus adversary balance time find rare keys time needed key recovery systems recovery even single may cause total disruption andor forward vulnerability 412 sources dependency des encryption time keys hamming weight key schedule generation ldes carried procedure called des set key procedure computes resulting key schedule bitstring performing bitwise precomputed constants bit key bitwise ors computed key bit set purpose uses piece code following form condit else instr number times condit true turns exactly hamming weight des key main source running time differentials ldes rsadess key schedule generation code also procedure contains two conditional statements conditional statements used computation subkeys precisely implement fixed permutation strength two data encryption standard implementations timing attacks delta 11 pc2 bits key code following form condit instr total number times condit true equal sum hamming weight subkeys thus number times instr executed directly proportional hamming weight des key mentioned sect 2 kocher kocher 1996 conjectured dess key schedule rotation nonzero bits using conditional statements could give rise running time differentials implementations des analyzed found evidence support conjecture finally note clear fig 4 ldes source nonfixed running times depend key schedule generation process evidenced nonconstant distance two curves shown fig 4 source time differentials due conditional statements able identify cause dependency able exploit order recover des key 42 derivation timing characteristics target system discussed sect 41 des implementations studied encryption time roughly equal linear function keys hamming weight plus normally distributed random noise section exploit fact order derive necessary information needed perform timing attack reveals hamming weight target systems des key first need introduce notation assume measurements time takes target system perform des encryption time measurements might correspond encryptions performed different des keys g denote k ith key used target system period timing measurements performed make realistic assumption k chosen random f0 1g 56 independent let x denote hamming weight key k thus distribution x binom 56 12 since assuming k chosen independently x independent random variables note successive time measurements correspond encryptions message key index last measurement corresponding encryption performed key k con veniences sake let denote set indices correspond time measurements key k ie g let j random variable representing time takes target system perform jth encryption message key k finally random variable representing effect random noise jth encryption key k thus e inaccuracies target systems running time fluctuations notation necessary formally state problem want address indeed linear dependency encryption time hamming weight key des implementations studied implies alejandro hevia marcos kiwi exists ff fi oe problem infer timing measurements parameters ff fi oe 1 holds address two variations problem sect 421 show deal case known sect 422 show handle case unknown former case realistic one indeed standard cryptanalytic assumption attacker knows management procedure target system 421 known 0 propose two alternative statistical methods deducing parameters ff fi oe 1 holds one method based maximum likelihood estimators one asymptotically unbiased estimators since following discussion heavily relies standard concepts results probability statistics refer reader unfamiliar subjects feller 1966 ross 1988 zacks 1971 background material terminology maximum likelihood estimators let thus xt let actual values taken x respectively oe marginal distribution given ff fi oe fixed collection time measurements values ff fi oe maximize maximum likelihood estimators looking maximum likelihood estimators values likely produced observed time measurements also regarded values minimizing loss explains maximum likelihood estimators thought good predictors thus order determine good estimators ff fi oe first compute f ff fi oe proposition 1 marginal distribution given ff fi oe proof let f xt delta ff fi oe f txx delta ff fi oe f x delta ff fi oe denote joint density function x density function given probability distribution x respectively conveniences sake henceforth omit ff fi oe expressions f xt f txx f x observe independence x e imply independent thus joint density function x given ff fi oe last equality follows since x independent independent strength two data encryption standard implementations timing attacks delta 13 1 get like norm moreover fixed j independent random variables hence know f x thus marginal distribution given ff fi oe equals sum values taken x f xt x hence conclusion follows directly previous equality fact x binom 56 12 given values ff fi oe maximize right hand side expression proposition 1 maximum likelihood estimators sought often case dealing maximum likelihood estimators difficult solve explicitly see zacks 1971 ch 5 x2 discussion computational routines used calculate maximum likelihood estimators advantage described approach determining parameters relevant carrying timing attack uses available timing measurements allow us determine many measurements sufficient order obtain accurate estimations parameters sought alternative approach described solves problem asymptotic estimators goal find good estimators b ff b fi b oe ff fi oe moreover interested determining asymptotic number timing measurements behavior estimators particular asymptotic distributions limiting values rate convergence derive good predictors ff fi oe start key observa tion since expectation variance binom 56 12 28 14 respec tively taking expectation variance 1 yields 28 hence knew oe 2 oe 2 could solve ff fi 2 suggests find good estimators oe 2 oe 2 derive good estimators ff fi provide candidates c c oe 2 estimators oe 2 respectively first need introduce additional 14 delta alejandro hevia marcos kiwi notation let e c solving ff fi 2 yields two natural candidates b ff b fi estimators ff fi prove b ff well defined proposition 2 c proof note c henceforth denote chisquare distribution l degrees freedom 2 l proposition 3 ji distribution c proof since j since e average n independent norm delta addition de moivrelaplace theorem hazewinkel 1988 pp 397 states binom p distribution expressed terms standard normal distribution moreover 1 expression exact mp1 gamma p 10 expression provides good approximation binomial distribution ross 1988 pp 170171 thus since x binom 56 12 distribution x well approximated norm 28 14 hence since x independent e sum independent normal distributions normal distribution follows approximately distributed norm desired conclusion follows classical statistics result hogg tanis 1997 theorem 534 proposition 2 proposition 4 ji negligible converges distribution 4 norm small constant error term k 1 4 recall x random variables probability strength two data encryption standard implementations timing attacks delta 15 proof first note neglect oe 2 n proposition 2 definition b ff imply distribution b second recall sum squares l independent identically distributed normal random variables zero mean variance equal 1 distributed according 2 l equivalently sum l independently distributed 2 variables distributed according 2 l hence since expectation variance 2 random variable 1 3 respectively central limit theorem implies distribution norm 0 3 putting two observations together shows distribution norm small constant term k 1 stated result follows immediately theorem 1 ji negligible k sufficiently large distribution b ff approximately norm proof law large numbers implies c c almost surely 5 oe 2 oe 2 respectively hence continuity b converges almost surely 1 fact proposition 4 yield k 1 ffff converges dis tribution norm small error term desired conclusion immediately remark 2 theorem 1 provides approximation distribution b ff approximation error arises three sources first one use de moivrelaplace theorem express binom 56 12 terms norm 28 14 second one due use central limit theorem approximate distribution estimator limit distribution final source error due use law large numbers approximate estimator asymptotic value three sources approximation error bounded de moivrelaplace theorem berryessens inequalityhazewinkel 1988 pp 369 chebyshevs inequalityross 1988 pp 337 respectively bound accumulated approximation error shows theorem 1 fairly accurate corollary 1 ji negligible k sufficiently large proof bound concerning b ff follows theorem 1 chebyshevs equalityross 1988 pp 337 order prove bound recall b said xn converges distribution x n 1 p points x fx 5 recall x random variables probability said converges almost surely x event whose probability 1 alejandro hevia marcos kiwi c ff last inequality consequence applying chebyshevs inequality twice note theorem 1 v b n result follows corollary 1 tells us probability least suffices take n time measurements 1 different keys approximate ff fi within multiplicative factor 1 sigma ffl 422 unknown 0 assumption known made previous section strictly necessary since attacker may alternate performing several timing measurements short period time resting appropriately long period time hence problem deducing target systems design characteristics reduces case known provided keys changed often attackers resting period longer keys lifetime changing keys often creates key management problem cryptosystems user thus reasonable assume keys lifetime excessively short discuss another approach handling case unknown assumption attacker access several identical copies target system eg several copies smart card supporting des based challengeresponse protocol lets make reasonable assumption target systems independently generated case attacker may perform short period time several timing measurements copy target system keys changed often attacker deduce target systems relevant timing characteristics sect 421 indeed attacker assume timing measurements arising copy system come encryptions performed key since keys corresponding different copies target system independently generated copies system identical problem deducing target systems design characteristics reduces case known tests statistical hypothesis give rise another alternative handling case unknown indeed consider situation attacker determines timing measurements arising random variables satisfying 1 assume keys changed often ie least n timing measurements come encryptions performed key thus j attacker perform test equality two normal distri butionshogg tanis 1997 pp 372385 samples j significance level tests allows attacker determine measurements around change key occurs discarding measurements around attacker suspects change key occurs yields sequence strength two data encryption standard implementations timing attacks delta 17 timing measurements target systems design characteristics deduced case known 5 final comments kocher 1996 blinding technique similar used blind signatures chaum 1983 proposed order prevent timing attack modular exponentiator implementations des studied blinding techniques adapted produce almost fixed running time key schedule generation processes indeed let k des key hamming weight wtk whose key schedule want generate let k 0 bitstring length 56 generated fol lows randomly choose b wtkc respectively 56gammawtke bits k set 1 respectively 0 set corresponding bits k 0 0 respectively 1 denote bitwise xor k k 0 k phik 0 note wtk 0 hamming weight k even wtk 0 28 wtk phik 0 hamming weight k odd modify key schedule generation processes schedules keys k 0 k phi k 0 generated note work required independent hamming weight k hence sources nonfixed running time introduced step let k 0 key schedules obtained recall k respectively k 0 permuted selection bits key k phi k 0 respectively k 0 thus key schedule k figure 6 plots encryption times rsades previously explained note clear reduction time differentials reduction achieved expense increasing encryption time factor approximately 16 unfortunately blinding technique still leaks parity weight original des key ie 1 bit information careful look fig 6 confirms fact fact fixed using idea developed indeed given des key k one generate three des two hamming weight 28 one hamming weight 27 three keys one spurious meaning key schedule generated results discarded xor key schedules generated two non spurious keys give rise key schedule sought hamming weight original des key even respectively odd spurious key one hamming weight 27 respectively one keys hamming weight 28 seen main source nonfixed running times caused key schedule generation procedure many fast software implementations key setup operation separated encryption would thwart timing attack encryption time constant several systems impractical precompute key schedule example smart cards precomputations undesirable due memory constraints des implementations studied fairly resistant timing attack leads us question whether timing attack find des key hamming weight although succeed tuning timing attack technique order recover bits des key identified ldes source nonfixed running time due key generation process indeed difference slopes curves plotted fig 4 shows encryption time counting key generation process depends used fact weakness could potentially exploited order alejandro hevia marcos kiwi 50400500600700hamming weight key time blinded rsades rsades fig 6 rsades modified rsades encryption times recover des key opens possibility time takes encrypt message key k nonlinear function k eg monotonically increasing function hamming weight phi k would allow timing attack recover des key carefully choosing messages encrypted able identify clear sources nonlinear dependencies time differentials inputs des encryption process either des implementations studied nevertheless feel partial information leaked implementations des analyzed suggests care must taken implementation des otherwise key could compromised timing attack acknowledgments grateful shanghua teng calling attention work kocher thank raul gouet luis mateu alejandro murua jaime san martin helpful discussions also thank paul kocher advise measure running times accurately msdos tm environment finally thank anonymous referee pointing blinding technique sect 5 leaking information parity hamming weight key standard c routines allow measure time events msdos tm environment accuracy 549254s heidenstrom 1995 order measure time precision 08381s pentium tm computer running msdos tm followed kochers advice kocher 1997 suggested reading value highprecision timer accessing port 64 whenever timer overflows 65536 generates one interrupt interrupts occur every 549254s hence one measure time intervals precision 549254s65536 08381s also good idea run ram disk information perform accurate time strength two data encryption standard implementations timing attacks delta 19 measurements pc family dos reader referred heidenstrom 1995 performing timing measurements windows unix environment clearly bad idea since multiprocess operating systems r differential cryptanalysis deslike cryptosystems journal cryptology differential cryptanalysis full 16round des importance checking cryptographicprotocols faults blind signatures untraceable payments practical implementation timing attack new directions cryptography network security siege introduction probability theory applications timing attack rc5 encyclopaedia mathematics faqapplication notes timing pc family dos probability statistical inference fifth rsaeuro cryptographic toolkit timing attacks implementations diffiehellman private communication des package potential flaw seen cash card security first experimental cryptanalysis data encryption standard linear cryptanalysis method des cipher method obtaining digital signatures publickey cryptosystems first course probability third applied cryptography protocols theory statistical inference tr linear cryptanalysis method des cipher applied cryptography 2nd ed network security siege method obtaining digital signatures publickey cryptosystems cryptography timing attack rc5 practical implementation timing attack differential cryptanalysis full 16round des first experimental cryptanalysis data encryption standard timing attacks implementations diffiehellman rsa dss systems ctr ruggero lanotte andrea maggioloschettini simone tini information flow hybrid systems acm transactions embedded computing systems tecs v3 n4 p760799 november 2004