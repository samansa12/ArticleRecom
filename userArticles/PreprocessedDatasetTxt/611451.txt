parallel computation pseudospectra fast descent pseudospectrum descent method psdm proposed new parallel method computation pseudospectra idea behind method use points already existing pseudospectrum level curve generate parallel points new level curve process continued several steps approximate several pseudospectrum level curves lying inside original curve showed via theoretical analysis experimental evidence psdm embarrassingly parallel like grid adjusts geometric characteristics pseudospectrum particular captures disconnected components results obtained parallel system using mpi validate theoretical analysis demonstrate interesting loadbalancing issues b region complex plane ii compute min zi every node zh boundary curves obtained contour plots smallest singular values mesh h obvious advantage grid straightforward simplicity robustness let moment c min work partially supported greek general secretariat research development project ene 9907 measure average cost computation min zi easily seen total cost grid approximated denotes number nodes h total cost quickly becomes prohibitive increase either number nodes size observed cost formula 2 readily indicates two major methods accelerating computation reducing number nodes z hence number evaluations min b reducing cost evaluation min zi approaches subject active research see 15 comprehensive survey recent eorts use path following powerful tool many areas applied mathe matics order compute single boundary curve suggested kostin 8 bruhl 5 presented algorithm end showed signicant savings achieved compared grid seeking small number boundary curves key tracing single boundary curve drastically reduces number min evaluations bekas gallopoulos carried work cobra 2 method ameliorated two weaknesses original path following method particular lack largegrain parallelism ii frequent failure near sharp turns neighboring curves particular parallelism introduced incorporating multiple corrections recently mezher b philippe suggested pat new path following method reliably traces contours 13 despite advantages original method 5 cobra maintains two path following approach visavis grid run single boundary curve computed b closed therefore one curve computed time disconnected components cap tured least single run consider concurrent application multiple path following procedures remedy problems solution less straightforward sounds especially b remainder paper results depend exact version path following choose use denote methods collectively pf paper propose pseudospectrum descent method psdm takes approach akin pf results set points dening pseu dospectrum boundaries several values psdm starts initial contour approximated n points z k computed pf method points corrected towards directions steepest descent n points process repeated recursively without need reuse pf computes pseudospectra contours psdm viewed dynamic version grid stride mesh point mesh point replaced pf predictioncorrection step illustrate fact thus provide reader immediate feeling type information obtained using method show figure 1 results application psdm matrix kahan order 100 obtained test matrix toolbox 7 typical example matrices interesting figure 1 pseudospectrum contours trajectories points computed psdm kahan order 100 arrows show directions used preparing outermost curve path following directions used marching outer inner curves psdm see section 4 results matrix pseudospectra plot shows trajectories points undergoing steepest descent ii corresponding level curves intersections actual points computed psdm note idea plotting pseudospectrum using descent owes original idea koutis parallel computation eigenvalues using descent described 3 rest paper organized follows section 2 brie reviews path following section 3 describes psdm section 4 illustrates characteristics psdm well parallel performance using mpi implementation also introduce adaptivity show method reveal disconnected components section 5 presents conclusions 2 review path following consider function g according denition pseudospectrum zeros gz points boundary allgower georg 1 describe generic procedure figure 2 generic predictioncorrection pf scheme numerically trace solution curves equations 3 table 1 outline algorithm illustrate one step figure 2 see 2 5 details z 0 k1 prediction phase 11 determine prediction direction p k 12 choose steplength h predict point correction phase 21 determine correction direction c k 22 correct z k z k using newton iteration table 1 pf generic procedure computation single contour sequel 5 would identifying complex plane c r 2 frequently use notation gz gx critical eective use pf availability gradient rgx becomes available little cost follows following important result cf 5 6 theorem 21 let z 2 c na gxy real analytic neighborhood simple singular value gradient g z min u min v min u min 4 denote left right singular vectors corresponding min zi therefore assuming minimum singular triplet sequel would referring simply triplet z computed gradient available one inner product follows dominant eort one step pf scheme proposed 5 amounts estimation prediction direction ii newton iteration correction procedure regarding ii note sucient cf 5 2 use single newton step requiring one triplet evaluation z k proposed 5 z k corrected towards direction steepest descent c k ie z k min triplet min u min v min associated z k regarding note selecting p k tangential curve z k 1 requires triplet z k 1 since would double cost shown acceptable take p k orthogonal previous correction direction c k 1 cf 5 2 therefore overall cost single step original method 5 approximately equal cost computing triplet 3 pseudospectrum descent method let us assume initial contour available form approximation eg piecewise linear based n points z k previously computed using version pf order obtain new set points dene inner level curve proceed two steps 1 start z k compute intermediate point w k single modied newton step towards steepest descent direction k obtained earlier step 2 correct w k w k using newton step along direction l k steepest descent figure 3 illustrates basic idea single initial point applying one newton step z k would require r min x k therefore triplet evaluation z k avoid extra cost apply idea pf use instead min q min already available original path following procedure essence approximated gradient based z k gradient based z k vectors g min q min right left singular vectors associated min z k applying correction 5 follows min g min figure 3 computing new pseudospectrum boundary seeking computed perform second newton step yields w min triplet used associated w k steps applied n points call one sweep psdm denote psdm outline following table starting initial contour shown initial contour target contour k1 n 1 compute intermediate point according 6 2 compute target point w k using 7 table 2 psdm one sweep psdm compute points approximate nearby contour assume new points computed one sweep psdm dene satisfactory approximations cf end section ask whether would practical use points march one step approximate another noted previous discussion application sweep psdm uses r min x k ie triplet z k readily available curve obtained via pf observe sweep proceeds compute also computes triplet w k therefore enough derivative information available sweep psdm proceed one step starting points computed method psdm approximating contour approximating contours i1 compute points psdm n points 1 table 3 psdm method via previous application psdm therefore necessary run pf continuing repeated application sweeps psdm obtain promised pseudospectrum descent method outlined table 3 illustrated figure 4 worth noting sweep viewed map takes input n points approximating produces n points approximating description far n n show section 44 necessarily optimal strategy nally note two step process described found necessary contrast straightforward approach compute exact steepest descent directions point starting curve use values directly approximate next set points one step required much smaller stepsize successful experiment procedure cost considerations evident cost computations intermediate points relatively small since derivatives z already computed pf previous sweep psdm furthermore assumed min z k points z k approximate hand computing nal points evaluations avoid proliferation symbols use c min denote average cost computing triplet therefore approximate cost single sweep psdm c nc min computation target point computation target points w k system p processors assign computation dnp e target points processor one sweep proceed need synchronization communication total cost approximated c discuss issue detail section 43 emphasize typically number points n curve expected large therefore algorithm scalable better pf methods described introduction cobra allows moderate number independent calculations min per step original version pf coarsegrain parallelism figure 4 descent process single point becomes available attempt compute dierent curves parallel analysis single sweep psdm order gauge quality approximation curve obtained single sweep psdm natural use measure value call stepsize sweep let point approximated starting point z 2 dene function g 0 point obtained using single newton step depicted figure real analytic domain minimum singular value min wi simple w 2 let points z z fig 5 lie interior domain relations z z follows w 0 also considered outcome two exact newton steps originating z identity w 0 standard singular value inequalities follows min w 0 therefore results levin benisrael see 12 regarding newtons method underdetermined systems standard assumptions region newton iteration used produce w 0 w converge quadratically next assume within region jw 0 wj 1 jw 0 w k note 1krg 0 w k least 1 since g 0 gure considered enlargement figure 3 reveals point computed single newton step sweep produces approximation w k figure 5 transformation z w 0 via psdm inner product singular vectors cf theorem 21 therefore using relations 7 9 follows wi follows minimum much smaller 1 assumptions made hold error induced one sweep psdm bounded moderate multiple square stepsize sweep full scale analysis global error multiple sweeps psdm subject current work 4 renements numerical experiments conducted experiments matrices used literature benchmark pseudospectra algorithms results presented indicate psdm returns levels accuracy grid fraction cost describe parallel implementation psdm speedups obtained underscore parallel nature algorithm also show application psdm large matrices triplets computed via iterative method likely suer load imbalance speedups one would expect embarassingly parallel algorithm describe simple heuristic address problem finally discuss properties underline exibility psdm show particular adaptation number points computed sweep psdm lead signicant cost savings ii psdm capture disconnected components pseudospectrum lying inside initial boundary computed via pf 41 system conguration performed experiments sgi origin 2000 system 8 mips r10000 processors system total 768 mb ram 1mb cache per processor running irix 65 codes written fortran90 using f9077 mipspro version 721 compilers parallelization used mpi programming paradigm implemented sgis mpt 1210 used arpack 11 approximate triplets sparskit 14 suitably modied handle double precision complex arithmetic sparse matrixvector multiplies experiments conducted singleuser mode 42 numerical experiments psdm remind reader matrices real elements pseudospectrum curves symmetric respect real axis become standard pseudospectrum literature measure success methods pseudospectra direct comparison one half gure computed new method half grid therefore subsequent experiments method compute points curves lying upper lower half complex plane start matrix used obtain figure 1 kahan order 100 used parallel version pf namely cobra obtain points approximate one half pseudospectrum curve corresponding asked psdm compute 60 contours corresponding values ranging using stepsize remained equal 6 upper half gure 6 illustrates contours corresponding lower half illustrates contours computed using grid 100 100 mesh equidistant points chose resolution order allow grid oer level detail minimum maximum resolution oered psdm particular distance neighboring points grid selected near median smallest largest distance neighboring points computed course psdm pictures virtually indistinguishable indicate psdm achieves accuracy comparable grid hand cost much smaller particular psdm approximates contours using 2700 points grid used 10000 mesh points also worth noting despite fact grid require computation singular vectors context iterative methods arpack extra cost signicant psdm expected far less expensive order analyze accuracy psdm computed relative error jmin computed point z approximate curves psdm grid figure selected pseudospectrum contours kahan order 100 computed psdm top grid bottom produced algorithm values obtained maximum mean relative errors contour point show results figure 7 note best way read gure left right shows maximum mean errors per curve develop consider curves outermost innermost maximum relative error appears satisfactory except cases maximum error even however mean error remains two orders magnitude smaller highlights one observation made experi ments namely limited number points suer increased relative error also note apparent increase error approach small values ect weakness psdm diculty underlying svd method arpack case compute approximations minimum singular value small relative error 43 parallel performance one important advantage psdm construction embarrassingly parallel sweep split number tasks equal number points handles task proceed independently work triplet computations furthermore assuming adaptation used communication needed sweeps let us assume case number points computed sweep therefore number tasks constant say n thus natural use static partitioning e relative error maximum relative error mean relative error figure 7 maximum mean relative errors curve 60 total computed via psdm input n points z k starting number processors 1 processor select assign sweep computations dnp e points 2 processor proceeds psdm set points 3 marked processor gathers results processors table 4 parallel psdm static partitioning tasks allocating p processor tasks handling sweep approximately dnp e points table 4 outlines method next question allocate tasks processors one natural idea use static block partitioning allocate processor computations corresponding dnp e consecutive points say z applied psdm matrix kahan100 section 42 starting points initial curve 01 computed curves therefore total number points computed end run subsequent performance results take account time taken cobra approximate initial curve table 5 depicts corresponding execution times speedups improvements sunstantial speedups ect parallel nature processors time secs 264 135 70 36 table 5 performance parallel implementation psdm kahan100 table number points computed processor time rst processor nishes share workload static block partitioning processors used compute curves kahan100 numbers boldface denote number points computed processor nished rst algorithm order better understand eect static task allocation policy marked processor would nish rst examined much work accomplished remaining processors results shown table 6 boldface shown number points completed processor nished rst line 1 instance shows processor 0 nished rst number 600 boldface time processor 1 accomplished computation 591 points since processor deal meant processor 1 still accomplish work 9 points row shows work reasonably well balanced thus justifying good speedups reported table 5 next applied psdm matrix gre 1107 1107 1107 sparse real unsymmetric harwellboeing collection initial curve 01 approximated 64 points computed cobra computed 20 pseu dospectrum curves corresponding log therefore processor allocated d64 20p e consecutive points rows 3 4 table 7 depict times speedups even though computing time reduced speedups far inferior reported kahan table 5 explain phenomenon prepared gre 1107 table similar table 6 results tabulated rows 35 table 8 reveal severe load imbalance example notice using 2 processors psdm 2nd row table 8 time processor 1 nished allocated points processor 0 nished 75 similar patterns hold using 4 8 processors load imbalance due varying level diculty iterative method arpack computing triplet corresponding min zi z moves point point two ways resolve problem systemlevel approach dispatch static block partitioning time secs 6000 3750 2500 1390 43 static cyclic partitioning time secs 6000 3060 1560 840 table 7 performance parallel implementation psdm using static block cyclic partitionings gre 1107 proc proc id static block partitioning static cyclic partitioning table 8 table 6 matrix gre 1107 using static block cyclic partitionings compute 20 pseudospectrum cuves tasks processors queue processors freed andor b problem level approach estimate work involved task partition tasks achieve acceptable load balance former approach potential better load balance additional systemlevel overhead latter approach little overhead simpler implement appears require priori estimates workload task even though dicult know beforehand using iterative methods helps note interested load balancing important information regarding amount time taken task information regarding work dierential dierent tasks based idea tried heuristic number iterations required triplet based z likely similar neighboring values z therefore reasonable allocate points interleaved fashion leads static cyclic partitioning processor initialized points z therefore interleaving initial points aim shue dicult points along descent spdm distribute processors rows 67 table 7 rows 79 table 8 depict speedups load distribution obtained static cyclic partitioning improvement load balance evident leads much better speedups also experimented static block cyclic partitioning points partitioned dnbe blocks b consecutive points blocks allocated cyclic fashion experimented blocks size 2 4 found performance becoming worse increasing blocksize inferior static cyclic case nally show figure 8 contours obtained gre 1107 figure 8 gre 1107 contours log 44 adapting decreasing contour lengths known given matrix varying values pseudospectrum forms family nested sets complex plane consequently given smaller area likely smaller area similarly length boundary likely change would typically become smaller unless separation creation disconnected components whose total perimeter exceeds original curve case might increase let us assume contour approximated polygonal path dened points computed psdm readily compute lengths approximating paths see example lengths corresponding dierent values matrix kahan figure 6 lengths corresponding polygonal paths table 9 row 2 clear log approx lengths 448 263 185 148 129 118 11 points 46 29 24 22 22 21 20 table 9 approximate contour lengths pseudospectra kahan100 number points used approximate curve following point reduction policy described section case polygonal path lengths become smaller move inwards nevertheless psdm algorithm described far number points 46 used approximate curves would seem appropriate monitor signicant length reduction increase adapt accordingly number points computed psdm remainder section examine case reduced path lengths noting similar policies could also adapted needed increase rather reduce number points following general scheme describes transition m1 denote n points dening contour 1 exclude k points according curve length criterion 2 proceed compute next contour m1 m1 starting n k remaining points scheme allows one use variety curve length criteria possibly chosen dynamically psdm proceeds table 10 show single step psdm together implementation strategy based variation minimum distance consecutive points subsequent contours steps 1 6 implement point reduction also compute next minimum distance l m1 consecutive points step 7 standard sweep described table 2 first algorithm computes distances consecutive points drops point z k curve nds k k1 2l unless previous point z k 1 already dropped algorithm presented table 10 test implemented means boolean variables k k boolean recurrence specied line 41 implementation keeps xed rst last points though easily modied also take advantage fact real need compute one half curve figure 9 illustrates underlying idea top curve points z k inside box circle candidates dropping satisfy jz k 1 z inside circle dropped ones preceding point z k 1 dropped remaining points shown bottom curve renumbered indicate relative position within curve distance consecutive points 1 points distance consecutive points points 1 2 3 4 41 42 43 5 n 6 l z 7 apply single sweep psdm fz 2 compute fw g table 10 single sweep psdm adaptive point reduction implemented psdm point reduction policy described table parallel platform specically required parallel version produce points would produced policy ran serially achieve processors synchronize sweep outlined table starts input data available due low complexity procedure relative remaining work decided use simple approach steps 1 6 executed single master processor instead complicated parallel reduction policy particular processors send back points master processor applies point reduc tion new points ready allocation processors application psdm step 7 table 10 question arises allocate points could use queue static approach given success latter previous experiments lack overhead experimented static approaches described earlier assigning approximately e points processor rst applied adaptive version psdm kahan100 almost halved number triplet evaluations reducing 2760 1466 table 9 3d row depicts number points varied selected values contours computed using strategy depicted figure 10 vs figure 9 adaptive point reduction inscribed points candidates dropping encircled ones drop successfully kahan gre 1107 static block static cyclic static block static cyclic table execution times seconds speedups parentheses parallel psdm point reduction matrices kahan100 left gre 1107 right contours computed using psdm holding number points per contour constant clear adaptation eective without visibly aecting quality output columns 2 3 table 11 depict execution times speedups parentheses static cyclic superior block assignment furthermore corresponding speedups similar though naturally high psdm without point reduction cf table 5 also performed experiment matrix gre 1107 show times corresponding speedups columns 4 5 table 11 started 74 points 01 computed 20 curves deep 0001 concluded points total number triplet evaluations reduced 1300 compared would required point reduction performed case cyclic allocation performs better block furthermore achieved speedups satisfactory close reported drop policy rows 79 table 8 discussion shows psdm enhanced adapt geo 04 psdm reduced psdm figure 10 pseudospectra contours log normal psdm psdm point reduction metric features contours case corresponding reduction cost move inwards clear idea serve springboard design alternative adaptation strategies 45 capturing disconnected components one documented weakness path following methods cannot readily capture disconnected components pseudospectrum one question psdm handle diculty section show psdm manages trace disconnected curves long lie inside initial curve respect performance grid level curves traced lie within area discretized h consider matrix grcar50 test matrix toolbox begin 192 points proceed xed step 01 compute curves thus inner curve 10 6a pseudospectra disconnected components figure 11 demonstrates psdm manages retrieve figure capturing disconnected components grcar50 curves outer inner intricate structure course procedure return components already outside initial curve want assure components captured start initial curve large enough using techniques presented 4 conclusions presented psdm new method computation pseudospectrum matrix combines appealing characteristics traditional method grid versatility path following methods saw psdm automatically generates new curves starting instance one application pf method curves adapt geometric properties pseudospectrum able capture disconnected components experimental results showed method achieves signicant reduction number necessary triplet evaluations vs grid even though like grid also computes pseudospectrum several values given parallel nature psdm implemented using mpi experiments also revealed advantages simple heuristic designed achieve load balance openmp implementation psdm currently underway expected serve platform investigation variety alternative policies worth noting psdm computes successively using path following direction steepest descent points dening nested curves idea holds great promise pseudospectra eigenvalues described 3 9 10 overall believe approach used psdm useful construction adaptive algorithm computation pseudospectra based path following note codes used paper available url httpwwwhpclabceidupatrasgrscgrouppseudospectrahtml acknowledgments thank bernard philippe astute comments regarding paper also thank referees valuable suggestions helped improve paper well colleague e kokiopoulou comments support r numerical continuation methods introduction cobra parallel path following computing matrix pseudospectrum parallel algorithms computation pseudospectra using algorithm computing distance uncontrollability test matrix toolbox matlab version 30 iterations domains computing matrix pseudo spectrum hermitian methods computing eigenvalues arpack users guide solution largescale eigenvalue problems implicitly restarted arnoldi methods directional newton methods n variables sparskit basic toolkit sparse matrix computations version 2 computation pseudospectra tr numerical continuation methods introduction algorithm computing distance uncontrollability directional newton methods n variables ctr c bekas e kokiopoulou e gallopoulos design distributed matlabbased environment computing pseudospectra future generation computer systems v21 n6 p930941 june 2005