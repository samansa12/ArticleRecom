decoupled simulation model virtual reality systems virtual reality user interface style allows user manipulate virtual objects 3d environment using 3d input devices style best suited application areas traditional two dimensional styles fall short current programming effort required produce vr application somewhat large built toolkit called mr facilitates development vr applications toolkit provides support distributed computing headmounted displays room geometry performance monitoring hand input devices sound feedback paper architecture toolkit outlined programmers view described two simple applications described b introduction virtual reality user interface style denotes highlyinteractive three dimensional control computational model user enters virtual space manipulates explores application data using natural 3d interaction techniques style usually requires use nontraditional devices headmounted displays hand measurement equipment gloves core requirement style support realtime three dimensional interactive animation results following issues 1 realtime generation synchronized stereoscopic images headmounted display supported commonlyavailable 3d graphics workstations result two workstationsmust operated tandem provide two video signals consistent images must presented synchrony user 2 lowlevel support new io devices position trackers gloves must provided efficiency lag minimization highlevel abstractions required application programmer 3 applications must designed independently tracker geometry room geometry device con figuration yet correct handling geometric data vital avoid user confusion 4 realtime nature task demands performance monitoring tools available performance optimization debugging mr toolkit describe paper developed address concerns previous work groups worked support user interface style zeltzer colleagues mit produced general purpose package building interactive simulation systems especially task level animation systems zeltzer 1989 key element package constraint network objects connected status object updated constraints involve object informed evaluated using constraint propagation gestural input dataglove also viewed object new dataglove gestures trigger gesture dependent constraints produce reaction users activity card mackinlay robertson xerox produced architectural model vr user interfaces called cognitive coprocessor architecture robert son 1989 purpose cognitive coprocessor architecture support multiple asynchronous interactive agents smooth animation based three agent model interactive system agents user user discourse machine task machine basic control mechanism animation loop task queue display queue governor task queue maintains incoming computations different sorts agents display queue contains objects drawn governor keeps track time helps application produce smooth output architectural model similar decoupled simulation model outlined section 3 researchers ibm using multiple workstations support realtime requirements vr user interfaces wang 1990 lewis 1991 assigned workstation devices user interfaces event based uims used coordinate input coming several devices mr uses similar device management approach described section 52 paper holloway unc chapel hill developed general purpose tracker library called trackerlib 3d position orientation trackers previous work addressed problem distributing low level device software multiple workstations production skeleton vr user interface used basis user interface development green 1990 toolkit described paper extension work 3 decoupled simulation model vr application broken four compo nents represented boxes figure 1 applications simple enough require presentation component interaction component others require four parts arrows represent information flows within system proviso flows quite minimal simpler applications call decoupled simulation model computation component proceeds independently remaining system components computation component item central interest application programmer component manages nongraphical computations ap plication usually continuously running simu lation typical simulations evaluate computational model process series discrete time steps periodically updating application data consistent state application data consistent computation component forwards data geometric model component simulation receive two classes input interaction component first input class user commands second input class current time used pace update rate application update rate graphical presentation time updating needed maintain constant scaling factor real time simulation time since necessary connection presentation component update rate computation component update rate interaction component responsible managing input user coordinating output user manages high level various devices available user input dispatches commands output devices based upon user ac tions subboxes interaction component figure 1 indicate multiple devices used put parenthesized items indicate items mr currently support supported mr framework presentation computation head positionorientation hand positionorientationgesture body positionorientation user interaction figure 1 decoupled simulation model geometric model visual audio geometric model component maintains highlevel representation data computation component responsible converting application data computation component form amenable visual sonic force display ex ample mapping application data graphical data could static thus defined compile time could dynamic control user input interaction component used reflect userproposed changes computational model yet incorporated simulation presentation component produces views application data user sees along sonic force aspects application data visual domain presentation component rendering portion application whose input graphical data geometric model viewing parameters eye position interaction component output one images current application data current viewpoint images must updated time application data viewing parameters change sonic domain presentation component presents sonic feedback application sounds based application data 3d sound used based users head position sounds must updated application data andor users position change compare previous work robertson et als cognitive coprocessor architecture one interaction loop updates database small changes cognitive coprocessor architecture task machines job animate changes one database view animate database updates direct provision continuouslyrunning simulation task cognitive coprocessor architecture decoupled simulation model two loops running asynchronously therefore direct support discrete event continuous simulation mr toolkit describe paper developed assist building vr applications using decoupled simulation model believe clear strategic guideline nature provide solid basis building vr applications guidelines bolstered toolkit routines perform much drudgery entailed managing interaction kind application process structure mr application consists one unixstyle processes one designated master pro cess others slave computational processes designation master slave computation called role process mr application also establish connection one server processes uniquely responsible management io device dataglove position tracker sound output typically slave processes perform output tasks example one images headmounted display generated slave process corresponds presentation component decoupled simulation model master process figure 2 process structure mr application computation processes slave processes server processes computation process corresponds computation component decoupled simulation model typically performing simulation part appli cation example computation process could performing fluid dynamics calculation user interacting results previous time step computation master process performs duties interaction component along graphics element presentation component reside masters local machine tight binding graphical display interaction component required desirable purposes reducing lag master process first process started responsible initiating processes establishing communications processes mr toolkit supports limited version distributed computing slave computation server processes communicate master process cannot directly communicate process structure illustrated figure 2 figure 3 shows process structure example code given ap pendix figure 3 shows four processes master almostidentical slave two server processes 5 hardware software architecture hardware environment mr toolkit developed consists silicon graphics 4d35 work station silicon graphics 3130 workstation vpl dataglove tracked polhemus 3space isotrak vpl eyephone also tracked isotrak third isotrak digitizer timing figures mentioned paper based hardware configuration process porting mr toolkit decstation 5000200pxg workstations mr toolkit currently supports applications developed c programming language near future least partial support applications written fortran77 provided fortran77 support allow addition vr front ends existing scientific engineering computations 51 internal structure mr mr toolkit consists three levels software bottom level structure consists routines interact hardware devices supported mr structure level toolkit described next section next level mr toolkit consists collection packages package handles one aspect vr user interface providing high level interface input output device routines sharing data two processes packages divided two groups called standard optional standard packages always part mr toolkit provide services data sharing performance monitoring required vr applications optional packages provide services may required every vr application typically one optional package device supported mr interaction technique group interaction techniques number optional packages exact number depends upon devices locally available interaction techniques produced use packages facilitates graceful growth mr new devices interaction techniques added following sections important packages briefly described top level mr toolkit consists standard mr procedures used configure control complete application routines level provide glue holds mr toolkit together 52 device level software mr toolkit manages devices 3d trackers gloves sound using clientserver model depending device one server processes used drive device hardware configuration example one server manages headmounted dis plays isotrak one server manages dataglove one manages sound driver server solely responsible interaction device continually collecting input de vices continually updating values output devices client wishes get service particular device makes socket connection devices server using tcpip ethernet client sets server communicate device instructs server commence special processing performed server several reasons adopting clientserver model low level device interactions 1 using separate process handle device facilitates distributing application several workstations server processes placed workstations lighter computational load 2 device sharing facilitated approach devices used application dont need attached workstation application running application use long workstation attached network 3 new device added system existing applications affected applications dont need new device simply dont connect server 4 improvements made either client server software changes usually dont affect programs use client code example new filter added isotrak server change existing client code 5 rate device sampled decoupled update rate application expand fifth point two major benefits sample rate decoupling first benefit noise reduction filters predictive filters operate sampling frequency device application update frequency since server perform filter calculations device update rate filter performance invariant application load second benefit client guaranteed get latest filtered data moreover clientserver interaction constructed client puts server continuous send mode latest data received server filtered sent client automatically isotrak lag experiments liang 1991 indicate continuous mode isotrak server reduced lag 2025 milliseconds preliminary measurements show similar benefit continuous data traffic server client also network packet traffic client server cut half significant savings 53 data sharing package data sharing package allows two processes share data structure data sharing package structured one process producer data another process consumer fits well decoupled simulation model data communication one way two way communications achieved setting two oneway links opposite directions simplify implementation one communicating processes must master easily extended allow communication arbitrary pairs processes three reasons providing shared data package instead programmer directly send data processes 1 data sharing package provides programmer higher level interface data communications provided standard socket soft ware reduces amount time required develop applications also reduces possibility bugs 2 data sharing package optimize data transfer ways programmer may time knowledge perform 3 data sharing package increases portability application application moved another set workstations use different networking software data sharing package needs rewritten applications use commence data sharing master process slave computation process programmer declares processes data structure shared declaration procedure wraps header around data structure shared returns id used data sharing calls id common processes sharing data item number data items may shared master slave computation processes data sharing action calls automatically update appropriate data structures send data pro cess producer process calls send shared data consumer process calls one receive shared data shared data sync receive shared data call accepts properly routes shared items sitting input queue waiting received data structures ready received procedure returns im mediately allows process use todate data without blocking lack input provides direct support decoupled simulation model computation component proceed pace updating downstream processes asynchronously presentation component hand shared data sync procedure called consumer process must particular data item proceed shared data sync waiting expected item process update incoming shared data item sent consuming process since shared data model used programmer usually concerned timing data transfers applications greatly simplifies programming process programmer needs state data shared two processes data transmitted process receives data doesnt need specify received take part handshaking protocol sending process usually two situations data synchronization necessary associated problem presenting two consistent images simultaneously headmounted display first quirement consistency implies image rendering starts master process eye slave process must identical copies views polygonal database rendered second require ment simultaneity means consistent images must presented eyes time database consistency operation could performed slave execute shared data sync call synchronize databases master starts drawing however since views must also consistent mr automatically master calculate view send slave waiting view parameters shared data sync call therefore database update performed view parameter update databases consistent viewing parameters synchronized slave simultaneous display requirement usually met master wait slave indicate finished rendering master receives slaves sync packet sends return sync pulse slave displays image slave receives return sync display image hardware configurations slave workstation significantly slower master workstation return sync packet needed since master always finish first times consuming process needs know shared data updated mr programmerdefined trigger procedure attached shared data structure new value shared data structure received trigger procedure called data sharing package 54 workspace mapping vr user interface style depends strongly collection geometric data user based upon users position space style creates new demand geometric accuracy previously considered 3d graphics packages example trackers used vr applications use coordinate systems depend upon located room threedimensional sound output devices also coordinate systems even standard graphics displays implicit default view direction workspace mapping package removes applications dependency physical location devices uses workspace mapping package performs two sets geometric transformations first set maps coordinate system device coordinate system room device situated second transformation set single transformation converts room coordinates environment virtual world coordinates mapping matrices every device including workstation monitors 3d trackers joysticks etc stored systemwide workspace file device 3d tracker installed different loca tion workspace file updated applications automatically use new position device tracker device mapped common room coordinate system tracked items drawn virtual space maintain geometric relationship real space roomtoenvironment mapping altered applications navigation code since devices map room coordinates devices room maintain relationship real space workspace mapping package initially envisioned means solving problem tracker coordinate space however workstation monitors like added single screen applications dataglove calibration program use object code multiple work stations single fixed viewpoint means dataglove must held particular position visible matter screen used instead applications read workspace file find room position orientation monitor adjust viewing parameters dataglove visible held front screen running program timing package two types analysis available timing package first type allows user time stamp certain key points application program thereby monitor amount real time consumed time stamp call time stamp call allows programmer associate text string section code identification pur poses program ends timing package outputs summary average real time consumed section code one summary appears process runs mr gives programmer clear starting point program optimiza tion type analysis exacts small head 12 microseconds per time stamp call sgi 4d35 sgi 3130 call takes 410 mi croseconds turn time stamping calls machine tuning code course timing analysis part story since issue data communications ignored second type timing analysis deals communications time used entire application situation data sharing package records packet sent received log file contains id number shared data structure real time sent received end run logs workstations used application analyzed determine communications delays application 56 dataglove package dataglove package provides routines simple dataglove interaction collects latest values dataglove server transforms position location environment coordinates using workspace mapping package package also supplies routine draw dataglove current position stereo necessary interactive dataglove calibration gesture editing program part package program allow user define name number static hand postures including recognition hand orientation necessary 57 sound package sound package optional package provides standard front end many possible sound output techniques available use clientserver scheme outlined section 52 case client data producer server data consumer mrs current assumption sound output used mainly means signaling events application needs signal user command received single sound package call used dispatch sound server similar earcon approach blattner 1989 gaver 1989 overlapping events mixed sonically server sound package also includes interactive editing program allows user define name number sounds later generated events application 58 panel package standard two dimensional interaction techniques provided optional panel package panel flat rectangle 3space functions arbitrarily oriented 2d screen onto application programmer map menus graphical potentiometers buttons like programmer simply declares panel 3d position orientation allocates screen space trigger routines events way heshe would 2d menu pack age pointer case dataglove whose orientation used cast ray hand panel application intersection hand ray panel used determine interaction technique active hand gestures used perform operations would normally assigned mouse buttons one panel active panel intersects hand ray closest hand one gets activated popup panels also supported default orientation aligned head tilt perpendicular line sight 6 examples section briefly describe two examples mr applications accompanying videotape two examples also first one simple program listed appendix equivalent hello world program programming language application consists master process slave process computation process flowchart application shown figure 3 dashed lines denoting data communications processes master process first configures shared data structure device set starts slave process master slave processes enter loop loop master process first updates hand data structure communicating dataglove server performs gesture recognition updates eyephone information interacting eyephone server sets viewing parameters sends slave process shared data updated consistent state master slave processes draw hand environment echo state dataglove update images synchronized entering next iteration loop second example simple user interface fluid dynamics user interface forms frontend existing fluid dynamics program written fortran bulgarelli 1984 user interface provides user stereo three dimensional view fluid surface using eyephone user walk flow view different directions dataglove used interact flow establish boundary conditions computation proceeds user interacting terms software structure fluid dynamics example closely follows decoupled simulation model computation component runs cpu server machine update rate accepts boundary condition commands interaction component sends force vector data geometric compo nent geometric component creates checkerboard surface user sees passes presentation component presentation update rate much higher computation update rate allowing user explore slowmoving simulations limited lag fluid dynamics visualization example produced three days using toolkit effort spent interfacing computation component geometric component interaction component configuration section operation eyephone operation eyephone synchronize drawing master process server eyephone server slave process viewing set interaction simulation eyephone synchronize drawing database update figure 3 typical flowchart mr application device handling device handling configuration section viewing set conclusions described decoupled simulation model realtime 3d animation systems software system support model mr toolkit although difficult demonstrate flexibility toolkit paper length seen provides programmer relatively high level facilities needed developing vr application features described paper implemented version 10 mr available academic researchers dont make claim mr best possible toolkit developing vr applications claim adequate purposes excellent start towards developing software development tools vr user interfaces describing mr toolkit tried outline major design decisions reasoning behind decisions hope researchers question decisions either confirm validity suggest better approaches definitely needs research software development tools vr user interfaces currently working higher level design tools vr user interfaces also working better performance modeling tools included mr toolkit improving efficiency toolkit r earcons icons structure common design principles pressure methods numerical solution free surface fluid flows sonicfinder interface uses auditory icons humancomputer teraction living virtual world dialogue structures virtual worlds temporalspatial realism virtual reality envi ronment cognitive coprocessor architecture interactive user interface design interactive performance virtual labora tory integrated graphical simulation platform tr cognitive coprocessor architecture interactive user interfaces design interactive performance virtual laboratory datapaper living virtual world dialogue structures virtual worlds temporalspatial realism virtual reality environment ctr g jounghyun kim kyo chul kang hyejung kim jiyoung lee software engineering virtual worlds proceedings acm symposium virtual reality software technology p131138 november 0205 1998 taipei taiwan uva user interface group alice rapid prototyping virtual reality ieee computer graphics applications v15 n3 p811 may 1995 matthew conway randy pausch rich gossweiler tommy burnette alice rapid prototyping system building virtual environments conference companion human factors computing systems p295296 april 2428 1994 boston massachusetts united states rich gossweiler randy pausch system applicationindependent timecritical rendering conference companion human factors computing systems p261262 april 2428 1994 boston massachusetts united states randy pausch matthew conway robert deline rich gossweiler steve miale alice diver software architecture building environments interact 93 chi 93 conference companion human factors computing systems p1314 april 2429 1993 amsterdam netherlands russell taylor ii thomas c hudson adam seeger hans weber jeffrey juliano aron helser vrpn deviceindependent networktransparent vr peripheral system proceedings acm symposium virtual reality software technology november 1517 2001 baniff alberta canada rich gossweiler system applicationindependent timecritical rendering conference companion human factors computing systems p5354 may 0711 1995 denver colorado united states brook conner loring holden providing low latency user experience high latency application proceedings 1997 symposium interactive 3d graphics p45ff april 2730 1997 providence rhode island united states martin r stytz terry adams brian garcia steven sheasby brian zurita rapid prototyping distributed virtual environments ieee software v14 n5 p8392 september 1997 taosong arie e kaufman virtual input devices 3d systems proceedings 4th conference visualization 93 october 2529 1993 san jose california brian goldiez glenn martin jason daly donald washburn todd lazarus software infrastructure multimodal virtual environments proceedings 6th international conference multimodal interfaces october 1315 2004 state college pa usa george g robertson stuart k card jack mackinlay information visualization using 3d interactive animation communications acm v36 n4 p5771 april 1993 chris shaw mark green jiandong liang yunqi sun decoupled simulation virtual reality mr toolkit acm transactions information systems tois v11 n3 p287317 july 1993 finch james van verth russell taylor ii adding force feedback graphics systems issues solutions proceedings 23rd annual conference computer graphics interactive techniques p447452 august 1996 hideki koike role another spatial dimension software visualization acm transactions information systems tois v11 n3 p266286 july 1993 pablo figueroa walter f bischof pierre boulanger h james hoover efficient comparison platform alternatives interactive virtual reality applications international journal humancomputer studies v62 n1 p73103 january 2005 enrico gobbetti jeanfrancis balaguer daniel thalmann