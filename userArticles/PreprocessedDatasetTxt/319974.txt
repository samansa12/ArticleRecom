requirementbased data cube schema design online analytical processing olap requires efficient processing complex decision support queries large databases well accepted precomputed data cubes help reduce response time queries dramatically important design issue efficient olap system therefore choice right data cubes materialize call problem data cube schema design problem paper show problem finding optimal data cube schema olap system limited memory nphard computationally efficient alternative propose greedy approximation algorithm cmp variants algorithm cmp consists two phases first phase initial schema consisting cubes required efficiently answer user queries formed second phase cubes initial schema selectively merged satisfy memory constraint show cmp effective pruning search space optimal schema leads highly efficient algorithm report efficiency effectiveness cmp via empirical study using tpcd benchmark results show data cube schemas generated cmp enable efficient olap query processing b introduction wide acceptance data warehousing tech nology corporations building decision support systems dss large data warehouses many dsss online characteristics termed online analytical processing olap systems different conventional database applications dss usually needs analyze accumulative information often system needs scan almost entire database compute query answers resulting poor response time conventional database techniques simply fast enough todays corporate decision process data cube technology becoming core component many olap systems data cubes precomputed multidimensional views data data warehouse 5 advantage data cube system data cubes built answers decision support queries retrieved cubes realtime olap system modeled threelevel architecture consists 1 query client 2 data cube engine 3 data warehouse server bottom level olap system data warehouse built top dbms data warehouse comes source operational databases simplest case data warehouse could dbms self warehouse needs support fast aggrega tions example means different indexing techniques bitmap indices join indices 11 12 middle level olap system set data cubes generated data warehouse cubes called base data cubes base cube defined set attributes taken warehouse schema contains aggregates selected set tributes aggregates computed base cubes set base data cubes together define data cube schema olap system top level olap system query client client besides supporting dss queries allows users browse data caches data cubes therefore query could complicated dss query simple slicing dicing request query submitted query client checked data cube schema directed cube level answered data cubes otherwise query passed warehouse result computed since data cubes store precomputed results servicing queries cubes much faster warehouse various developments research studies made design three levels olap sys tem many commercial products also avail able example query clients include seagate info worksheet 13 microsoft pivottable services 10 currently query client products mainly provide browsing report generation services cached data general unless answer already cached complex dss queries submitted client module compiled accesses data cubes warehouse warehouse data cube levels products like microsoft sql olap services hyperion essbase olap server7 ibm db2 olap server 8 warehouse level many vendors enhancing dbms products improve performance data aggregation 6 data cube level research studies focus two issues 1 compute aggregates base cube efficiently1 2 data structures used represent cubes debate relational olap rolap multidimensional olap molap1 16 mentioned olap system would able support realtime responses cube level intercept answer queries unfortunately materializing possible cubes possible queries answered cubes clearly impractical due high storage maintenance costs instead one carefully choose right combination cubes query response time optimized subject constraints systems capacity storage space call set materialized base cubes data cube schema olap system also call problem selecting data cube schema data cube schema design problem key design queryefficient olap system thus lies design good data cube schema particular two important questions one needs address basis shall design schema schema derived claim data cube schema based solely database schema warehouse instead practical approach cube design problem based users query quirements example tpcd benchmark 15 requirement answer 17 dss queries specified benchmark efficiently queries presumably driven applications use data warehouse often given user query requirements ie set frequently asked queries set system capacity constraints eg storage limitation goal derive data cube schema optimizes query response time without violating system capacity constraints see section 24 prove optimization problem nphard finding optimal data cube schema thus computationally expensive alternative propose efficient greedy approximation algorithm cmp requirementbased data cube schema design problem algorithm consists two phases 1 define initial schema first phase derive initial set data cubes called initial schema application quirements study assume requirements captured set frequentlyasked queries faqs initial schema selected faqs answered directly efficiently tpcd example define cube answer one 17 dss queries example 7th query tpcd benchmark involve three tributes supp nation cust nation shipdate yr 2 schema optimization second phase modify initial schema query response time optimized subject sys tems capacity constraints data cubes derived initial schema may lots redundancy caused overlapping attributes total size cubes may exceed storage memory limitation system many cubes would always induce large maintenance cost data underlying warehouse changes therefore may costeffective merge cubes cube merging may result fewer perhaps larger cubes terms query response time query processed using merged cubes general slower using original cubes hence tradeoff query performance cube maintenance schema optimization determine set data cubes replace cubes initial schema query performance resulted cubes optimal constraint total size resulted cubes within acceptable system limit 1 set data cubes obtained optimization process called optimal schema olap system rest paper organized follows section 2 present formal definition schema optimization problem section 3 introduces greedy algorithm cmp schema optimization performance study cmp presented section 4 use data tpcd benchmark study finally conclude paper section 5 lack space details omitted readers refer 4 1 reasonable correlate maintenance cost total size cubes schema information optimization 21 search space optimal schema paper assume requirements olap system captured set frequent queries use q denote initial schema data cubes derived queries second phase cube design process refine set q maintenance cost storage cube set within capacity system consider refinement optimization problem set possible cube sets search space simplify problem assume database data warehouse represented star schema 2 attributes queries come fields dimensions fact tables usually number dimensions fact tables large however may many attributes one table exam ple table part includes attributes p partkey etc dimension fact multihierarchical dimension shown figure 1 addition star schema pbrand pcontainer ppartkey psize ptype figure 1 multihierarchical structure part dimension tpcd attributes stored directly fact table example attributes l shipdate l commitdate l receiptdate fact table lineitem tributes result number attributes dimen sions needs considered data cube design much number dimension tables tpcd 33 attributes need considered 9 notion composite lattice used integrate multihierarchical dimensions lattice aggregates data cube assume g set attributes query posted subset used dimension attributes construct data cube composite lattice pa oe lattice data cubes constructed subsets pa power set cube associated set root lattice l two different cubes c 1 c 2 2 l derived relationship c 1 oe c 2 holds c 1 derived c 2 aggregation example cube derived c customer date lattice l search space optimization problem mentioned n large tpcd search space l optimization problem enormous 22 schema optimization given initial data cube schema q search space l maintenance cost bound lim schema optimization problem defined table 1 objective find c ae l costq c minimal constraint 8q 2 q 9c 2 c q oe c mc c lim table 1 schema optimization problem objective find cube set c cost answering frequent queries costq c smallest constraint states frequent query q answered cube c c total maintenance cost mc c cube set smaller system limit lim discuss various measures cost mc shortly simplicity assume frequent queries equally probable since cube initial schema q derived one distinct frequent query use symbol q denote cube initial schema associated frequent query since want make assumption implementation cubes structure queries good measure costq c linear cost model suggested 9 model q oe c cost computing answer query q using cube c linearly proportional number data points c use sc denote number data points c query q 2 q use fc q denote smallest cube c answers q formally fc q cube c q oe fc q 8x 2 c q oe x sfc q sx define maintaining data cube requires disk storage cpu computation without assuming implementation method two measures used estimate maintenance cost mc c cube set ie number cubes c c2c sc ie total number data points cubes estimate total disk storage required 23 related works best knowledge paper first explore data cube schema design problem several papers published data cube implementa tion cube selection algorithms proposed 9 14 cube selection algorithms assume one root base cube c 0 encompasses attributes queries also assume queries associated root base cube c 0 therefore c 0 2 q different schema optimization problem selections always include c 0 answer ie c 0 2 c however general dss tpcd anticipate many frequent queries involve attributes hence cube schema design problem general cube selection algorithms start base cube determine cubes deducible implemented queries aggregates base cube answered efficiently tackling different problem cube schema design tries merge cubes initial schema bottomup generate set cubes provide optimal query perfor mance system capacity constraints satisfied search space design problem general much larger large numbers attributes present initial schema short cube selection algorithms cube implementation cube schema design interesting question whether possible modify selection algorithm 9 solve schema design problem one solution apply selection algorithm maximal cubes q ie cannot deduced cube q gen eral one maximal cubes q order adopt selection algorithm include maximal cubes answer set c initial members expand c applying selection algorithms expansion stops total size exceeds storage bound lim however solution undesirable problems first maximal cubes alone already exceeded maintenance bound cube selection algorithm fails second maximal cubes highly correlated eg many overlapping attributes merging could beneficial sometimes even necessary selection algorithms however never merge cubes example given lattice suppose cubes abcd bcde maximal sabcd using selection algo rithm abcd bcde selected ever replacing cube abcde decreases maintenance cost without increasing query cost hence selection algorithm always applicable cube schema design problem 24 complexity optimization problem schema optimization problem computationally difficult summarize complexity following theorem proof theorem found 4 theorem 1 1 given initial schema q search space l bound lim problem finding subset c ae l c contain root l every q 2 q derived c 2 c 2 given performance ratio r r 1 find algorithm schema optimization problem defined table 1 whose performance bounded r times optimal performance nphard theorem 1 tells us optimization problem difficult one theory impossible find even efficient approximation algorithm give performance guarantee next section discuss greedy approximation algorithm discuss heuristics uses prune vast search space looking good solution efficiency effectiveness algorithm studied section 4 3 algorithm cmp developed greedy algorithm called cmp cube merging pruning outline cmp shown figure 2 ffc da maximum return c figure 2 algorithm cmp iteration loop lines 2 6 algorithm cmp select two cube sets cubes removed c cubes added c cube sets selected cubes q still answered new c algorithm terminates maintenance cost cube set longer exceeds limit lim selection cube sets governed evaluation function ff evaluation function defined reduction maintenance cost large increment query cost small algorithm use following ff function increaseinquerycost 2 new c numerator formula 2 saving maintenance cost used mc 2 formula results rest paper unless stated explicitly also valid denominator increment query cost f c smallest ancestor c 31 properties evaluation function ff cmp search space enormous subsection show properties evaluation function used prune search space effectively theorem 2 suppose l ff defined c set cubes cmp enters iteration suppose selected based c maximizes value ff c one combinations give maximum value combination fewest cubes must following properties 1 jd 2 following true smallest common ancestor b b according theorem determined case ff attains maximum value also contains smallest common ancestor removed cubes significantly reduces search space furthermore item 2b theorem 2 makes evaluation many combinations unnecessary corollary 1 true corollary 1 tells us need consider contains cube derived another cube corollary implies ff value maximum develop procedure selectcubes uses result prune candidates search space cmp 1 build directed acyclic graph dag cubes c edges derived relationship oe among cubes c 2 partition graph disjoint paths partition dag traversing graph maximal node ancestor towards bottom node descendant visited nodes associated edges removed repeat procedure remaining nodes nodes removed 3 nodes path derivedfrom relationship according corollary 1 two nodes path picked together hence pick one node path practice number paths large pruning significantly reduces number possible candidates hence possible combinations following theorem 2 pathbased processing derive another pruning technique reduction search space corollary 2 assume c partitioned p paths let k1 k2 deltadeltadeltak p 9t sa k1 set cubes ff cannot attain maximum value using corollary suggests organize se lectcubes procedure starting bottom path compose candidates nodes select procedure reaches candidate combination satisfies condition corollary 2 yettobeevaluated candidates current combination lattice hierarchy ig nored illustrate pruning process example shown figure 3 cube set c partitioned 3 paths containing 3 4 3 nodes respec tively select combination bottom nodes paths b 11 b 21 b 31 suppose evaluate combination sfc b 12 true according corollary 2 remaining combinations include b 12 need evaluated pruned combinations g 9 combinations 3 cubes fb 3 eleven combinations pruned case 11 22 23 figure 3 example pruning cmp input lsearch space ca set cubes r size restriction outputdcubes removed new cube added procedure selectcubesinput l c partition c p total paths path1 add pathi rbuf call procedure iterate procrbuf res remove pathi rbuf return result res procedure iterate procrbuf res rbufpaths selected paths pathicurnodethe selected cube ith path rbufa smallest common ancestor condidate cube combination res buffer content result point restriction candidate size start first path selected yet f srbufa sfc pcurnode need iteration rbufnopaths r start p total f add path rbuf add pathi rbuf call procedure iterate procrbuf res remove pathi rbuf figure 4 procedure selectcubes rmp 32 rmp algorithm even though many combinations pruned cmp searching optimal ff value may still need consider large number combinations involving nodes multiple paths reduce complexity one option restrict number nodes candidate combination remark theorem 2 still holds even size restriction call search algorithm rmp candidates size larger certain constant r r 1 considered performance studies show rmp could good approximation unrestricted cmp obviously goodness depends value r p number paths c rmp becomes cmp list procedure selectcubes rmp figure 4 first step procedure selectcubes c partitioned number paths loop line 2 line 6 evaluates possible combinations traversing paths via recursive procedure iterate proc set cubes removed cube added attain maximum value ff returned line 7 sequence node traversal constructed following two iterative loops ffl combinations paths constructed loop line 2 line 6 loop line 22 line 26 inside recursive procedure figure 3 shows example suppose size restriction r set 3 sequence path combinations considered selectcubes fp 1 g ffl traverse nodes path performed line 16 procedure iterate proc called line 27 iteration loop line 17 line 28 figure 3 first combinations traversal sequence delta traversal result corollary 2 used prune combinations cannot attain maximum value evaluation line 18 following two conditions checking 33 relationship rmp 2mp although pruning methods introduced effective rmp complexity still high r large thus interesting see 2mp performs comparing general rmp theorem 3 suppose c state rmpr entering iteration identify new sets assume maintenance cost function mc 2 possible ds cannot pruned away either corollaries 1 2 satisfies following da pair selected rmpr 2 2mp identical theorem 3 shows sufficient condition rmpr 2mp equivalent try algorithm real data sets results obtained 2mp close rmp even large values r restricted efficient rmp algorithm small r thus viable choice many occasions performance study carried performance study algorithms sun enterprise 4000 running solaris 26 first goal study goodness schemas generated cmp 2mp second goal study efficiency two algorithms pruning effectiveness use tpcd benchmark data study database generated scale factor 05 15 size database 05 gb queries benchmark frequent queries model 41 goodness schema generated first experiment compare costq c outputs c cmp 2mp results also compare random selection algorithm la beled 2rand randomly merges pairs cubes iteratively maintenance cost limit exceeded use mc 1 c number cubes c compute maintenance cost simplicity1e072e073e074e075e0717 2rand figure 5 query cost schemas generated figure 5 shows result greph shows cmp 2mp significantly better random se lection particular cost limit small combinations algorithm make wise pick experiment query costs cmp 2mp except curve cmp gap one point reduced schema 11 cubes next reduction 3 cubes selected replaced one cube hence size c becomes 9 contrast step 2mp replaces 2 cubes another 42 efficiency cmp second goal study efficiency cmp particular interested studying effectiveness pruning search space optimization problem effect first pruning method newly added cubes determined combination evident therefore consider two pruning methods based corollaries 1 2 measure effectiveness average pruning rate defined percentage pruned combinations number possible combinations 2 closeness two curves cmp 2mp due extremely low correlations queries cubes tpcd results shown figure 9 figure see average pruning rate higher 80 cases pruning rate becomes smaller maintenance cost limit decreases small limit cmp forced merge cubes higher level lattice hierarchy figure 3 hence chance pruning becomes smaller fact due design purpose benchmark correlations among initial set cubes tpcd quite low high pruning rate experiment shows cmp effective even notsofavorable situation many general applications expect frequently asked dss queries high corre lation pruning rate cmp even better shown experiment2060100 pruning figure average pruning rate cmp51525 response timeesec figure 7 response time cmp 2mp finally compared efficiency cmp 2mp measuring response times figure 42 shows 2mp least two order magnitude faster cmp considering also effectiveness 2mp fig ure 5 results show 2mp effective efficient approximation solution data cube schema design problem 5 discussion conclusion basis 2phase schema design approach set cubes extracted query requirements valid approach observed vendors already something similar example microsoft sql olap server allows users optionally log queries submitted fine tune set cubes 10 logs frequent queries identified grouped similar types thus feasible identify cubes initial schema frequent queries currently general practitioners design cube schema adhoc way likely far optimal problem become serious data cubes required built large data warehouses retail giants internet ecommerce shops databases contain large numbers attributes formulated second phase design problem optimization problem developed efficient greedy algorithm solve data cube schema defined imminent problem follows query processing given dss query submitted query client query client module needs determine whether query processed data cube level warehouse level query answered cubes one needs determine cube used multiple solutions exist one needs determine best choice cube proposed twophase approach deal design problem data cube system 1 initial schema derived users query requirements 2 final schema derived initial schema optimization process greedy algorithm cmp proposed optimization effective pruning search space optimal solution variants cmp studied reduce search cost experiments real data tpcd performed investigate behavior cmp results observed performance study confirm cmp efficient algorithm r computation multidimensional aggregates overview data warehousing olap technology httpwww ibm db2 olap server implementing data cubes efficiently microsoft sql olap services pivottable ser vice improved query performace variant indexes materialized view selection multidimensional datasets transaction processing performance council arraybased algorithm simultaneous multidimensional aggregates tr multitable joins bitmapped join indices implementing data cubes efficiently overview data warehousing olap technology improved query performance variant indexes arraybased algorithm simultaneous multidimensional aggregates data cube materialized view selection multidimensional datasets aggregatequery processing data warehousing environments computation multidimensional aggregates ctr tapio niemi jyrki nummenmaa peter thanisch constructing olap cubes based queries proceedings 4th acm international workshop data warehousing olap p915 november 0909 2001 atlanta georgia usa edward hung david w cheung ben kao optimization data cube system design journal intelligent information systems v23 n1 p1745 july 2004