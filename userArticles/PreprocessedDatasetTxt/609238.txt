axioms recursion callbyvalue propose axiomatization fixpoint operators typed callbyvalue programming languages give justifications two ways first shown sound complete notion uniform tfixpoint operators simpson plotkin second axioms precisely account filinskis fixpoint operator derived iterator infinite loop constructor presence firstclass continuations provided define uniformity principle iterator via notion effectfreeness centrality explain two results related terms underlying categorical structures b introduction equational theories xpoint operators callbyname programming languages domain theory extensively studied canonical axiomatizations including iteration theories 1 conway theories equivalently traced cartesian categories 12 see 27 latest account seems widelyaccepted result context callbyvalue cbv programming languages possibly side eects although implementation recursion impure programming language wellknown seems underlying semantic nature recursive computation presence sideeects studied suciently general level regarding widespread use callbyvalue programming languages importance recursion real life programming desirable theoretically motivated justied principles reasoning recursive computation callbyvalue setting paper propose candidate axiomatization consists three simple axioms including uniformity principle analogous callbyname setting axiomatization stable uniform callbyvalue xpoint operators introduced justied following two main results extended abstract work appeared proc foundations software science computation structures fossacs 2001 springer lncs vol 2030 hasegawa kakutani 1 c calculus computational lambda calculus 18 stable uniform cbv xpoint operator sound complete models based notion uniform xpoint operators simpson plotkin 27 2 callbyvalue calculus 25 c calculus plus rst class continuations bijective correspondence stable uniform cbv xpoint operators uniform iterators via filinskis construction recursion iteration 5 notion uniform txpoint operators arose context axiomatic domain theory 7 26 letting lifting monad category predomains uniform txpoint operator amounts uniform xpoint operator domains least xpoint operator standard ordertheoretic setting general strong monad category nite products thus uniform txpoint operator makes sense model computational lambda calculus terms strong monads 18 simpson plotkin 27 suggest possibility using uniform txpoint operators modelling callbyvalue recursion line considerations leads us rst main result fact distill axioms uniform txpoint operators surprise second one axioms precisely account filinskis cbv xpoint operator derived iterator innite loop constructor rstclass continuations provided rene filin skis notion uniformity distinction values eectinsensitive programs characterised notion centrality 22 28 10 essential using axioms establish bijectivity result xpoint operators iterators therefore interesting coincidence categorytheoretic axiomatics simpson plotkin program construction filinski however also show sorting underlying categorical semantics filinskis construction combined continuationpassing style cps transformation understood within abstract setting simpson plotkin story summarised follows noted filinski cpstransform iterator usual callbyname xpoint operator types form r target calculus r answer type let continuation monad r r uniform txpoint operator precisely amounts uniform xpoint operator types r since rst main result stable uniform cbv xpoint operator sound complete uniform txpoint operators turns filinskis construction combined cps transformation regarded consequence general categorical axiomatics axioms recursion callbyvalue 3 specialising setting continuation monad obtain semantic version second main result construction paper section 2 recall c calculus callbyvalue calculus used working languages paper section 3 introduce axioms xpoint operators calculi de nition give basic syntactic results section 4 demonstrates axioms used establishing filinskis correspondence recursion iteration fact gives syntactic proof second main result section results presented entirely syntactic manner section 5 start look semantic counterpart axiomatization recalling categorical models c calculus callbyvalue calculus recall notion uniform txpoint operators models section 6 explain axioms distilled uniform txpoint operators theorem 2 rst main result section 7 specialise result previous section models callbyvalue calculus give semantic proof second main result theorem 4 section 8 gives concluding remarks 2 callbyvalue calculi c calculus computational lambda calculus 18 improvement callbyvalue calculus 21 sound complete 1 categorical models based strong monads moggi 18 2 continuationpassing style transformation calculus sabry felleisen 23 proved useful reasoning callbyvalue programs particular seen theoretical backbone typed version theory anormal forms 8 enables us optimise callbyvalue programs directly without performing cps transformation reasons take c calculus basic calculus typed callbyvalue programming languages also use extension c calculus rstclass continuations called callby value calculus soundness completeness results mentioned extended selinger 25 4 hasegawa kakutani 21 c calculus syntax typing rules axioms welltyped terms c calculus summarised figure 1 types terms typing judgements standard simply typed lambda calculus including unit binary products 1 c ranges constants type abbreviation write let x n denotes set free variables long confusion may use italic small letters variables values capital letters usually range terms though may also use capital letters like f g h higherorder functional values crucial point notion values axioms designed abovementioned completeness results hold may call term value provably equal value dened grammar write g f composition xg f x values f g id identity function x x sequel concerned pure c calculus also extensions additional constructs axioms c theory typed equational theory welltyped expressions c calculus possibly additional constructs congruence term constructions contains axioms c calculus c theory typically specied additional axioms congruence generated equational theory induced model sense section 5 ie centre focus callbyvalue languages often regard values representing eect nished suspended computations intuition valid converse may always justied fact answer depends computational eects consideration definition 1 centre focus c theory say term central commutes computational eect let x let n n let x l holds n l x free n addition say central moreover copyable discardable ie let x hx let x 1 include computation types associated constructs dened axioms recursion callbyvalue 5 types ranges base types terms typing rules axioms let x v let x let let x l l let n let x n f x let n hx yi let x n stands figure 1 ccalculus worth emphasising value always focal converse true see section 73 detailed analysis concepts several c theories found 10 see also discussions section 5 22 callbyvalue calculus callbyvalue calculus summarised figure 2 version due selinger 25 regard extension c calculus rstclass continuations sum types empty type binary sums write type typing judgements take form sequence names ranged types judgement represents welltyped term free write fnm 6 hasegawa kakutani types terms additional typing rules additional axioms x figure 2 callbyvalue calculus set free names judgement thought proof sequent proposition classical propositional logic among additional axioms rst one involves mixed substitution c term context c name result recursively replacing subterm form n cn subterm form details syntactic conventions remark 1 chosen cbv calculus working language rstly intend results paper compatible duality result second author 15 see section 7 based selingers work calculus 25 secondly wellestablished categorical semantics thanks selinger however results specic calculus apply also language similar semantics example could used hofmanns axiomatization control operators 13 also strictly speaking inclusion sum types coproducts axioms recursion callbyvalue 7 necessary main development paper though enable us describe iterators naturally general feedback operators see remark 3 section 4 also used principles iterators like diagonal property see section 8 crucially needed duality result 25 15 example 1 example dene terms double negation elimination initial map one check combinators satisfy hofmanns axioms 13 also use c done programming example smlnj section 4 centre focus presence rstclass continuations central focal terms coincide 28 25 enjoy simple characterisation thunkability 28 lemma 1 cbv theory following conditions term equivalent 1 central 2 focal 3 thunkability let x u also note central terms values agree function types 25 lemma 2 cbv theory term central value ie x free holds 3 axioms recursion throughout section work c theory 31 rigid functionals key axiomatization callbyvalue xpoint operators notion uniformity callbyname setting dene 8 hasegawa kakutani uniformity xpoint operators respect strict maps ie preserve bottom element divergence callbyvalue setting however cannot dene uniformity via particular notion strict maps simply everything strict input terminate whole program cannot terminate instead propose dene uniformity principle respect class functionals use argument functions constrained way called rigid h xm holds x free h word rigid coined filinski 5 see discussions section 73 intuitively rigid functional uses argument exactly matter whether argument evaluated beforehand evaluated actual use lemma 3 rigid h 0 lemma 4 h holds f free h example 2 reader may want see rigid functionals concrete ways case settings rstclass continuations characterisation rigid functionals see section 73 general cases rigid functional typically takes following form let x f h n following property h v central later h called total denition 4 n term possibly side eects easily seen h c theory hand presence side eects many purely functional terms fail rigid eg constant functionals well functionals like ff f 32 axioms recursion ready state main denition paper axiomatization callbyvalue xpoint operators axioms recursion callbyvalue 9 definition 3 stable uniform callbyvalue xpoint operator typeindexed family closed values x v called stable uniform callbyvalue xpoint operator following conditions satised 1 cbv xpoint value f x free f 2 stability value f f x free f 3 uniformity values f holds h f g rst axiom known callbyvalue xpoint equation etaexpansion righthandside means x v f equal value second axiom says though functionals f may behave dierently xpoints applied values satisfy xpoint equation cannot distinguished last axiom callbyvalue variant plotkins uniformity prin ciple rigid functionals play role strict functions uniformity principle callbyname xpoint operators uniformity axiom justied fact h x v xpoint equation x v holds xpoint equation x v following consideration conrms rigidness assumption cannot dropped uniformity axiom let h value holds take term type hasegawa kakutani yh f f g free h h uniformity would ask g hold easily seen x v x v hence h must rigid remark 2 easily seen uniformity implies rigid functional preserves xpoints identity maps h tempting dene notion callbyvalue strictness preservation xpoints identities pure functional settings like callby value pcf divergence eect callbyvalue strictness actually coincides rigidness veried inspecting standard domaintheoretic model see also section 6 however presence eects particular case rstclass continuations study section 4 rigidness much stronger requirement callbyvalue strictness instance constant functional fx v id well twice functional callbyvalue strict hence rigid pure functional setting rigid many c theories cannot used uniformity principle 33 axiomatizations uniformity alternative ways presenting axioms stable uniform cbv xpoint operators particular 5 filinski proposed single uniformity axiom amounts stability uniformity axioms lemma 5 values f g free g f g proof axioms recursion callbyvalue 11 proposition 1 stability axiom uniformity axiom equivalent following filinskis uniformity axiom 5 x f free f h g g proof stability uniformity imply filinskis uniformity stability conversely filinskis uniformity implies stability uniformity first value f rigid filinskis uniformity stability x v uniformity suppose values f holds lemma 5 h fxf f gyg g h applying filinskis uniformity axiom obtain since already seen stability follows filinskis unifor mity follows x v h 4 recursion iteration grasping role axioms best look actual construction second main result correspondence recursors iterators presence rstclass continuations due filinski 5 shall describe syntactic development going semantic investigation main issue paper section work callbyvalue theory unless otherwise stated 12 hasegawa kakutani 41 axioms iteration case recursion introduce class functions determining uniformity principle iterator definition 4 total value c theory value called central value v word total due filinski 5 though original denition h v asked value rather central term 3 definition 5 uniform iterator typeindexed family closed values called uniform iterator following conditions satised 1 iteration value f ie loop 2 uniformity values total h f h loop natural expect loop g h behaves way loop f wellbehaved h uniformity axiom claims case h total seems totality assumption necessary example let alwaysjumping function total loop g performs jump label loop f diverges 3 shall warn yet another use word total filinski 4 term called total discardable sense denition 1 see 29 detailed analysis concept another possible source confusion notion totality correspond standard notions total relations total maps domain theory however paper put priority compatibility filinskis development 5 axioms recursion callbyvalue 13 remark 3 despite limited form expressive power iterator weak derive general feedback operator iterator using sums rstclass continuations satises syntax sugar sums case f 1 x 42 construction surprisingly presence rstclass continuations bijective correspondence stable uniform cbv xpoint operators uniform iterators recall construction essentially 5 construction divided two parts rst part introduce pair contravariant constructions note need rstclass continuations implement step classical type one easily verify lemma 6 holds pets holds lemma 7 values rigid f total pets following observation implies two notions uniformity recursors iterators intimately related contravariant correspondence 14 hasegawa kakutani lemma 8 step bijective correspondence rigid functionals total functions proof nontrivial part step sends rigid functional total function direction bijectivity follow immediately lemma 4 lemma 6 suppose h rigid show step central veried follows let u h yy x let v n nx n x let v let u h yy x n let v h un x let v h un x un x since h rigid follows h ulet v n un xwe able see loop uniform iterator composition loop step yields stable uniform xpoint operator restricted negative types cbv xpoint axiom veried noting equation loop step stability axiom holds step fxf f uniformity axiom follows lemma 7 lemma 8 h f g h h rigid hence total lemma 4 rst half lemma 7 implies step since step h total lemma 8 uniformity loop loop step axioms recursion callbyvalue 15 conversely x v stable uniform xpoint operator gives uniform iterator uniformity consequence lemma 7 lemma 8 one direction bijectivity constructions guaranteed stability axiom direction follows step pets established proposition 2 bijective correspondence uniform iterators stable uniform cbv xpoint operators restricted negative types second part reduce xpoints arrow type negative type possible implement pair isomorphisms types using rstclass continuations switch 1 routinely seen switch 1 switch hold also easy verify direct calculation applying proposition 8 section 7 lemma 9 switch switch 1 rigid applying uniformity axiom trivial equation switch switch 1 proposition 3 bijective correspondence stable uniform cbv xpoint operators restricted negative types general function types hasegawa kakutani proof stable uniform cbv xpoint operator restricted negative types one dene general function types taking equation denition uniformity fact unique possibility extending operator function types nontrivial point uniformity axiom dened xpoint operator general function typed derived uniformity axiom xpoint operator negative types shall spell suppose values f h holds since rigid functionals closed composition lemma 3 switch switch 1 rigid lemma 9 switch 1 h switch also rigid applying uniformity axiom negative types equation switch 1 switch 1 obtain switch 1 implies applying switch sides equation summary conclude presence rstclass continu ations stable uniform cbv xpoint operators precisely derived uniform iterators vice versa theorem 1 bijective correspondence uniform iterators stable uniform cbv xpoint operators switch loop code written smlnj 17 11 found figure 3 axioms recursion callbyvalue 17 empty type bot initial map bot datatype fun void c operator c bot bot basic combinators fun step f fun switch l iterator loop bot recursion iteration figure 3 coding smlnj versions based sml 97 17 5 categorical semantics rest paper devoted investigating semantic counterpart stable uniform cbv xpoint operators giving two main results coherent way section recall preliminaries underlying categorical structures used semantic development 51 models c calculus let c category nite products strong monad unit multiplication monad tensorial strength respect nite products c see eg 18 19 categorytheoretic concepts write c kleisli category associated left adjoint explicitly j identity objects sends f 2 c x f 2 c x assume c kleisli exponentials ie every x c functor j hasegawa kakutani right adjoint x gives structure modelling computational lambda calculus 18 specically x object base type b dene interpretation types welltyped interpreted inductively morphism x interpretations constants see appendix summary following moggi call structure computational model proposition 4 18 computational models provide sound complete class models computational lambda calculus fact use c calculus internal language computational model choice base category c may correspond either syntactically dened values semantic values like thunkable terms even something see 10 detailed consideration issue similar sense simply typed lambda calculus used internal language cartesian closed category 16 52 models callbyvalue calculus let c distributive category ie category nite products coproducts preserves nite coproducts call object r response object exists exponential r ie c r c r holds given structure model cbv calculus kleisli category c strong monad 25 term j interpreted morphism c interpretation fact typed version callbyvalue cps transformation 21 25 sketched appendix b following selinger call c response category kleisli category c category continuations write r c c though 25 category continuations means opposite r c proposition 5 25 categories continuations provide sound complete class models cbv calculus case c calculus use cbv calculus internal language category continuations 25 axioms recursion callbyvalue 19 53 centre focus already seen notion centre focus c calculus cbv calculus syntactic form denition 1 however concepts originally arose analysis categorytheoretic models given following discovery premonoidal structure kleisli category part c r c models 22 thielecke 28 proposed direct axiomatization r c depending base category c may seen chosen category values subcategory eectfree morphisms r c focus equivalently centre r c fuhrmann 10 carries study models c calculus along line definition 6 centre semantic denition given computational model base category c strong monad arrow called central g compositions g f note products necessarily bifunctorial c form premonoidal products sense 22 reader familiar notion might prefer use instead indicating cartesian products notion centrality amounts semantic version centrality denition 1 paper go details semantic analyses however soon see concepts naturally arise analysis uniformity principles recursors iterators particular total value equivalently term x precisely corresponds central morphisms semantic models case models cbv calculus centre characterised terms category algebras uniformity principles dened proposition 6 f central counterpart c algebra morphism algebra r b r r discuss section 7 observation turns essential relating uniformity principles recursion iteration cbv theories note result observed various forms 28 25 10 4 terms c f 2 c x holds g 2 c x leftrst rightrst pairings appendix 20 hasegawa kakutani 6 uniform fixpoint operators section shall consider computational model base category c strong monad 61 uniform tfixpoint operators rst recall notion uniform xpoint operator simpson plotkin 27 arose considerations xpoint operators axiomatic domain theory adt 7 26 adt typically start category c predomains example category complete partial orders possibly without bottom continuous functions consider lifting monad c adds bottom element cpos objects form tx pointed cpos cpos bottom least xpoint op erator also easily checked pointed cpo unique algebra structure fact algebra arises way setting though soon see case take continuation monad algebra morphism precisely bottompreserving maps ie strict ones well known least xpoint operator enjoys uniformity principle respect strict maps abstracting situation definition 7 uniform txpoint operator 27 txpoint operator c family functions f holds called uniform f imply tty ty ty ty f thus txpoint operator given xpoint operator restricted objects form tx one may easily check domaintheoretic example sketched condition h th says h strict map axioms recursion callbyvalue 21 limited form xpoint operators however turns sucient model callbyvalue xpoint operator see suppose given object algebra structure ask f therefore extend txpoint operator xpoint objects algebra structure dening f moreover given uniform txpoint operator easy see extended xpoint operator algebras uniform following sense algebras h algebra morphism g f furthermore uniform extension unique given uniform xpoint operator objects alpgebra structure applying uniformity f completely determined restriction free algebras txx ie uniform txpoint operator particular kleisli exponentials x scheme algebra structure given adjoint mate currying see appendix notations since interpret function type kleisli exponential fact enables us use uniform txpoint operator dealing xpoint operator function types note corresponds etaexpansion c calculus term represents arrow f 22 hasegawa kakutani lemma 10 holds proof observation frequently used distilling axioms stable uniform cbv xpoint operators 62 axiomatization c calculus using c calculus internal language c equation f f f x represented side condition means f corresponds arrow c x operator equivalently axiomatized slightly dierent operator subject f z xy f f z additional condition f xy f z fact dene z xy conversely easy see bijective correspondence condition f equivalently z axiomatized c calculus recalling xy gives etaexpansion precisely cbv xpoint axiom additional condition f z axiomatized f value stability axiom thus obtain rst two axioms stable uniform cbv xpoint operators precisely modelled txpoint operators axioms recursion callbyvalue 23 63 uniformity axiom next shall see uniformity condition txpoint operators represented c calculus following previous discus sions consider h algebra morphism x xy x 0 spelling condition ask h satisfy h equivalently terms c calculus means etaexpansion commutes application h therefore c calculus value holds called h rigid dened uniformity condition respect rigid functionals remark 4 actually uniformity condition obtained argument follows slightly weaker stated denition 3 g however thanks lemma 5 justify uniformity axiom denition 3 64 soundness completeness give one main result paper theorem 2 computational models uniform xpoint operator provide sound complete class models computational lambda calculus stable uniform callbyvalue xpoint operator 5 characterisation rigid functions computation types spirit given filinskis thesis 6 section 222 though unrelated uniformity hasegawa kakutani extends proposition 4 stable uniform callbyvalue xpoint operator uniform txpoint operators part soundness follows routine calculation however interpretation stable uniform callbyvalue xpoint operator verication axioms require care need consider parameterized xpoint operator parameterized uniformity interpreting free variables thus parameterize considerations section 61 done along line simpsons work 26 outline constructions results needed purpose proposition 7 uniform xpoint operator uniquely extends family functions x ranges objects c 1 parameterized xpoint f holds 2 parameterized uniformity th xa h h xa imply g thxa give construction f omit proof largely consists lengthy diagram chasings shall leave interested readers see also 26 let recall algebra structure using dene dfe axioms recursion callbyvalue 25 finally f trivialising parameterization considering free algebras one recover original uniform txpoint operator uniqueness extension follows uniformity essentially way described section 61 using parametrically uniform parameterized xpoint operator hard interpret stable uniform callbyvalue xpoint operator computational model uniform txpoint operator check axioms validated completeness shown constructing term model diculty since uniform txpoint operator term model directly dened stable uniform callbyvalue x point operator types also already observed rigid functionals characterized algebra morphisms model part truly routine 7 recursion iteration revisited 71 iteration category continuations let c response category response object r iterator category continuations r c family functions r c spelling denition c give iterator r c give family functions r r holds f 2 c r r thus iterator r c hence cbv calculus xpoint operator c hence target callbyname calculus restricted objects form r negative objects example 3 give simpleminded model cbv calculus iterator let c category cpos possibly without bottom continuous maps let r cpo bottom since c cartesian closed category nite coproducts serves response category response object r moreover least xpoint operator negative objects r r bottom element thus iterator r c fact unique uniform iterator sense remark 5 careful reader may notice actually need parameterized version iterator interpreting free variables well free names dened function r c x ay r c x however parameterization including 26 hasegawa kakutani uniformity discussed done way previous section much easier uniform iterator uniquely extends parametrically uniform parameterized iterator leave detail interested reader 72 relation uniform tfixpoint operators object negative object r canonically algebra structure x f r monad thus consideration uniform xpoint operators applies setting computational model uniform txpoint operator xpoint operator negative objects hence model iterator cbv calculus category continuations conversely iterator r c corresponds xpoint operator negative objects c course include objects form therefore obtain txpoint operator natural expect along consideration section 61 iterator satises suitable uniformity condition bijectively corresponds uniform txpoint operator uniformity condition iterator must determined respect algebra morphisms regard h 2 r c strict counterpart c r b r algebra morphism r r ie h holds c say iterator r c uniform f holds theorem 3 given response category c response object r give uniform r r xpoint operator c give uniform iterator r c proof immediate since uniform r r xpoint operator uniquely extends uniform xpoint operator negative objects hence uniform iterator uniqueness extension follows uniformity argument given section 61 2 axioms recursion callbyvalue 27 fortunately condition algebra morphism naturally represented cbv theory value h ab represents algebra morphism holds fact cps transformation see appendix b equation equation h lemma 1 cbv theory requirement equivalent saying hx central term value x also implies proposition 6 section 5 hence h total therefore obtain uniformity condition iterator section 4 remarkable says idea dening uniformity principle xpoint operators respect algebra morphisms adt idea dening uniformity principle iterators respect eectfree morphisms filin skis work coincide presence rstclass continuations despite dierent origins technically substance left toright implication proposition 6 summary semantically shown theorem 1 theorem 4 theorem 1 restated cbv theory bijective correspondence stable uniform cbv xpoint operators uniform iterators sense syntactic proof section 4 gives example direct style reasoning whereas semantic proof provides continuationpassing style reasoning result choose either stable uniform xpoint operators syntactic direct style uniform xpoint operators semantic monadic continuationpassing style tool reasoning recursion callbyvalue setting good thanks theorem 2 73 filinskis uniformity 5 filinski introduced uniformity principles cbv xpoint operators iterators establishing bijective correspondence denitions turn sucient purpose retrospect seem somewhat ad hoc strictly weaker uniformity principles give brief comparison first filinski calls value value value v however value always central converse true note notion centre uniquely determined cbv theory category continuations notion value canonically determined category continuations 28 hasegawa kakutani arise dierent response categories 25 since uniformity principle determined terms base category c terms category algebras seems natural corresponds notion centre determined c c second filinski calls value h total holds cf example 2 easily checked h rigid sense filinski also rigid sense converse hold even change notion total values instance switch section 4 rigid sense filinski closely inspecting correspondence rigid functionals total functions via steppets switch constructions strengthen filinskis formulation match proposition 8 cbv total holds proof pre postcomposing switch switch 1 rigid functionals bijective correspondence lemma 8 bijective correspondence total functions steppets construction total function equal hy kihh 2 hy ki h 1 total functions note total functions bijective correspondence take hy kixk g summary rigid functional h total holds simplifying right hand side equation obtain result 2 subsumes filinskis rigid functionals special cases h 2 use second argument axioms recursion callbyvalue 29 8 conclusion work proposed axiomatization xpoint operators typed callbyvalue programming languages shown justied two dierent ways sound complete axiomatization uniform txpoint operators simpson plotkin 27 also filinskis bijective correspondence recursion iteration presence rstclass continuations 5 also shown results closely related inspecting semantic structure behind filinskis construction turns special case uniform txpoint operators think axioms reasonably simple expect practical tool directstyle reasoning callbyvalue programs involving recursion way equational theory computational lambda calculus theoretical basis theory anormal forms 23 8 81 principles callbyvalue recursion interesting challenge strengthen axioms systematic ways give results perspectives dinaturality diagonal property iteration theories adding natural axioms iterator presence rst class continuations one may derive corresponding axioms cbv xpoint operator particular note dinaturality loop g iterator loop precisely amounts axiom corresponding cbv xpoint operator x v note axiom implies cbv xpoint axiom stability axiom similarly diagonal property iterator loop x f corresponds xpoint operator seen axiomatizing callbyvalue counterpart conway theories 1 12 27 simpson plotkin shown hasegawa kakutani equational theory induced uniform conway operator provided consistent smallest iteration theory bloom esik 1 enjoys general completeness theorem regarding fact conjecture axioms stable uniform cbv xpoint operators together dinaturality diagonal property capture valid identities cbv xpoint operators least presence rstclass continuations mutual recursion extensions product types one may consider callbyvalue version bekic property another equivalent axiomatization dinatural diagonal properties 12 along line could used reasoning mutual recursion purpose natural extend denition xpoint operators product types function types also extend notion rigid functionals multiple parameters extensions syntactically straightforward semantically natural category algebras closed nite products spelling uniquely extend xpoint operator 0 using idea section property stated example bekic property uniformity show equations like x v fixpoint objects another promising direction approach based xpoint objects 2 uniform txpoint operator canonically derived x point object whose universal property implies strong proof principles instance example 3 uniform iterator unique monad r r xpoint object setting rstclass con tinuations might fruitful study implications existence xpoint object continuation monads graphical axioms jerey 14 argues possibility partial traces foundation graphical reasoning recursion callbyvalue languages schweimeier jerey 24 demonstrate graphical axioms used axioms recursion callbyvalue 31 verify closure conversion phase compiler similar consideration found fuhrmanns thesis 10 follows equalities proposed approaches derived syntactic dierences axioms stable uniform callbyvalue xpoint operators dinatural diagonal bekic property detailed comparisons however left future work related dierent direction erkok launchbury 3 propose graphical axioms reasoning recursion monadic eects lazy functional programming languages friedman sabry 9 also discuss recursion settings unfolding recursion versus updating recursion propose implementation dating recursion via monadic eect although approaches common underlying semantic structure present work problems cosidered rather dierent nature clear compared work 82 relating recursion callbyname callbyvalue results reported nicely combined filinskis duality 4 callbyvalue callbyname languages rstclass control primitives msc thesis 15 second author demonstrates recursion callbyname calculus 20 exactly corresponds iteration callbyvalue calculus via duality extending selingers work 25 together results paper obtain bijective correspondence callbyname recursion callbyvalue recursion subject suitable uniformity principles recursion cbn calculus iteration cbv calculus recursion cbv calculus seems open way relate reasoning principles recursive computations two calling strategies acknowledgements thank shinya katsumata carsten fuhrmann helpful discussions interests work anonymous reviewers fossacs 2001 submission numerous insightful sugges tions part work done rst author visiting laboratory foundations computer science university edinburgh hasegawa kakutani r iteration theories new foundations declarative continuations investigation duality programming language semantics recursion iteration controlling axiomatic domain theory categories partical maps essence compiling continuations recursion computational e models sharing graphs categorical semantics let letrec sound complete axiomatisations callbyvalue control operators duality callbyname recursion callby value iteration introduction higher order categorical logic computational lambdacalculus monads notions computation monads premonoidal categories notions computation reasoning programs continuationpassing style control categories duality categorical semantics lambdamu calculus recursive types kleisli categories complete axioms categorical categorical structure continuation passing style using continuation twice implications expressive power callcc tr ctr yoshihiko kakutani masahito hasegawa parameterizations fixedpoint operators control categories fundamenta informaticae v65 n12 p153172 january 2005 atsushi ohori isao sasano lightweight fusion fixed point promotion acm sigplan notices v42 n1 january 2007 carsten fhrmann hayo thielecke callbyvalue cps transform semantics information computation v188 n2 p241283 29 january 2004 martin hyland paul blain levy gordon plotkin john power combining algebraic effects continuations theoretical computer science v375 n13 p2040 may 2007